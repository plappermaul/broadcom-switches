/***********************************************************************************
 *                                                                                 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

/***********************************************************************************
 ***********************************************************************************
 *                                                                                 *
 *  Revision    :       *
 *                                                                                 *
 *  Description :  PRBS test functions provided to IP User                         *
 */

/** @file blackhawk7_l8p2_prbs.h
 * PRBS test functions provided to IP User
 */
#ifdef __cplusplus
extern "C" {
#endif

#ifndef BLACKHAWK7_L8P2_API_PRBS_H
#define BLACKHAWK7_L8P2_API_PRBS_H

#include "blackhawk7_l8p2_ipconfig.h"
#include "common/srds_api_enum.h"
#include "common/srds_api_err_code.h"
#include "common/srds_api_types.h"
#include "blackhawk7_l8p2_usr_includes.h"
#include "blackhawk7_l8p2_types.h"

#define PRBS_VERBOSE 0


/*------------------------------*/
/*  Shared TX Pattern Generator */
/*------------------------------*/
/** Configure Shared TX Pattern API.
 * An input string (hex, binary or PAM4 format) and pattern length are taken in as inputs, based on which the Pattern Generator registers
 * are programmed to the appropriate values to generate that pattern. \n
 * NOTE: blackhawk7_l8p2_tx_shared_patt_gen_en() API should be called to enable the Pattern generator for that particular lane. \n\n
 * 
 *  For NRZ  mode, the input pattern should be provided in either hex or binary. \n
 *  -   eg: For a repeating pattern "0000010110101111", input_pattern = "0000010110101111" or "0x05AF" and patt_length_bits = 16.\n\n
 *  For PAM4 mode, the input pattern should be provided in PAM4 format, as described below. \n
 *  - PAM4 format uses four symbols - 0, 1, 2 or 3 (corresponding to voltage levels -3,-1,+1 and +3). \n
 *  - The input should be preceded by "p" to indicate a PAM4 format. The input could be spaced with "_" for better readability. \n
 *  - Since each symbol is equivalent to 2 bits, the pattern_length = 2 * number of symbols in the pattern. \n
 *  -   eg: For a repeating pattern of "-3-3-1-1+1+1+3+3", input_pattern = "p0011_2233" and patt_length_bits = 16.
 * 
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] patt_length_bits Pattern length in bits.
 * @param[in] pattern Input Pattern - Can be in hex (eg: "0xB055") or in binary (eg: "011011").
 *
 * @b Example
 * @code
    EFUN(blackhawk7_l8p2_config_shared_tx_pattern(sa__, 4, "0101"));
    EFUN(blackhawk7_l8p2_tx_shared_patt_gen(en(sa__, 1, 4));
 * @endcode
 * @return Error Code generated by invalid input pattern or pattern length (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_config_shared_tx_pattern(srds_access_t *sa__, uint8_t patt_length_bits, const char pattern[]);

/** Configure TX to JP03B Pattern.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Enable JP03B fixed pattern (1 = Enable; 0 = Disable).
 * @return Error Code generated by invalid input pattern or pattern length (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_config_tx_jp03b_pattern(srds_access_t *sa__, uint8_t enable);

/** Configure TX Linearity Pattern.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Enable TX Linearity pattern (1 = Enable; 0 = Disable).
 * @return Error Code generated by invalid input pattern or pattern length (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_config_tx_linearity_pattern(srds_access_t *sa__, uint8_t enable);

/**************************************************/
/* LANE Based APIs - Required to be used per Lane */
/**************************************************/

/*----------------------------*/
/*  Enable Pattern Generator  */
/*----------------------------*/
/** Enable/Disable Shared TX pattern generator.
 * Note: The patt_length_bits input to the function should be the value sent to the blackhawk7_l8p2_config_shared_tx_pattern() function
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Enable shared fixed pattern generator (1 = Enable; 0 = Disable)
 * @param[in] patt_length_bits length of the pattern in bits used in blackhawk7_l8p2_config_shared_tx_pattern()
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk7_l8p2_tx_shared_patt_gen_en(srds_access_t *sa__, uint8_t enable, uint8_t patt_length_bits);

/*----------------------------*/
/*  Configure PRBS Functions  */
/*----------------------------*/

/**  Configure PRBS Generator.
 * Once the PRBS generator is configured, to enable PRBS use the blackhawk7_l8p2_tx_prbs_en() API.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] prbs_poly_mode PRBS generator mode select (selects required PRBS polynomial).
 * @param[in] prbs_inv PRBS invert enable.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_config_tx_prbs(srds_access_t *sa__, enum srds_prbs_polynomial_enum prbs_poly_mode, uint8_t prbs_inv);

/**  Get PRBS Generator Configuration.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] prbs_poly_mode PRBS generator mode select (selects required PRBS polynomial).
 * @param[out] prbs_inv PRBS invert enable.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_get_tx_prbs_config(srds_access_t *sa__, enum srds_prbs_polynomial_enum *prbs_poly_mode, uint8_t *prbs_inv);

/** PRBS Generator Enable/Disable.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Enable PRBS Generator (1 = Enable; 0 = Disable)
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk7_l8p2_tx_prbs_en(srds_access_t *sa__, uint8_t enable);

/** Get PRBS Generator Enable/Disable.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] enable returns the value of Enable PRBS Generator (1 = Enable; 0 = Disable).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_get_tx_prbs_en(srds_access_t *sa__, uint8_t *enable);

/** PRBS Generator Single Bit Error Injection.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable (1 = error is injected; 0 = no error is injected).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_tx_prbs_err_inject(srds_access_t *sa__, uint8_t enable);

/**  Get PRBS Checker congifuration.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] prbs_poly_mode PRBS checker mode select (selects required PRBS polynomial).
 * @param[out] prbs_checker_mode Checker Mode to select PRBS LOCK state machine.
 * @param[out] prbs_inv PRBS invert enable.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_get_rx_prbs_config(srds_access_t *sa__, enum srds_prbs_polynomial_enum *prbs_poly_mode, enum srds_prbs_checker_mode_enum *prbs_checker_mode, uint8_t *prbs_inv);

/**  Configure PRBS Checker.
 * Once the PRBS checker is configured, use the blackhawk7_l8p2_rx_prbs_en() API to enable the checker.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] prbs_poly_mode PRBS checker mode select (selects required PRBS polynomial).
 * @param[in] prbs_checker_mode Checker Mode to select PRBS LOCK state machine.
 * @param[in] prbs_inv PRBS invert enable.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_config_rx_prbs(srds_access_t *sa__, enum srds_prbs_polynomial_enum prbs_poly_mode, enum srds_prbs_checker_mode_enum prbs_checker_mode, uint8_t prbs_inv);

/** PRBS Checker Enable/Disable.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Enable PRBS Checker (1 = Enable; 0 = Disable).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_rx_prbs_en(srds_access_t *sa__, uint8_t enable);

/** Get PRBS Checker Enable/Disable.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] enable returns with the value of Enable PRBS Checker (1 = Enable; 0 = Disable).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_get_rx_prbs_en(srds_access_t *sa__, uint8_t *enable);

/** PRBS Checker LOCK status (live status).
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] chk_lock Live lock status read by API.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_prbs_chk_lock_state(srds_access_t *sa__, uint8_t *chk_lock);

/** PRBS Error Count and Lock Lost status.
 * Error count and lock lost read back as a single 32bit value. Bit 31 is lock lost and [30:0] is error count.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] prbs_err_cnt 32bit value returned by API ([30:0] = Error Count; [31] = Lock lost).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_prbs_err_count_ll(srds_access_t *sa__, uint32_t *prbs_err_cnt);

/** PRBS Error Count and Lock Lost status.
 * Error count and lock lost read back on separate variables.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] prbs_err_cnt 32bit Error count value.
 * @param[out] lock_lost Lock Lost status (1 = if lock was ever lost).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_prbs_err_count_state(srds_access_t *sa__, uint32_t *prbs_err_cnt, uint8_t *lock_lost);
/** PRBS checker' hardware configuration Struct */
struct prbs_chk_hw_timer_ctrl_st {
	/** Actual time of the BER measurement */
    uint16_t time_ms_adjusted_bak;
    /** PRBS timer timeout value (10 bits) */
    uint16_t prbs_chk_en_timer_unit_timeout;
    /** prbs_chk_en timer unit sel (3 bits) :
     * 3'd0 => prbs_chk_en timer is disabled
     * 3'd1 => 1us
     * 3'd2 => 10us
     * 3'd3 => 100u
     * 3'd4 => 1ms
     * 3'd5 => 10ms
     * 3'd6 => 100ms
     * 3'd7 => Reserved
 */
    uint8_t prbs_chk_en_timer_unit_sel;
    /** PRBS checker burst error count mode enable */
    uint8_t prbs_chk_burst_err_cnt_en;
};

/** Get PRBS hardware timers configuration.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] prbs_chk_hw_timer_ctrl_bak Structure to store PRBS checker's hardware timers configuration.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_get_prbs_chk_hw_timer_ctrl(srds_access_t *sa__, struct prbs_chk_hw_timer_ctrl_st * const prbs_chk_hw_timer_ctrl_bak);

/** Set PRBS hardware timers configuration.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] prbs_chk_hw_timer_ctrl_bak Structure to be used to restore PRBS checker's hardware timers configuration.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_set_prbs_chk_hw_timer_ctrl(srds_access_t *sa__, struct prbs_chk_hw_timer_ctrl_st const * const prbs_chk_hw_timer_ctrl_bak);

/** Configure PRBS checker's hardware timers.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] time_ms is the amount of time to delay for BER calculation.
 * @param[out] time_ms_adjusted is the amount of time delay that will be used for BER calculation.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_config_prbs_chk_hw_timer(srds_access_t *sa__, uint16_t time_ms, uint16_t *time_ms_adjusted);

enum prbs_chk_lock_state_enum {
	PRBS_CHECKER_NOT_ENABLED = 0,
	PRBS_CHECKER_WAITING_FOR_LOCK = 1,
	PRBS_CHECKER_LOCKED = 2,
	PRBS_CHECKER_LOCK_LOST_AFTER_LOCK = 3
};

/** Set BER configuration with HW mode.
 * Note: This function sets up the Hardware mode Ber test configuration.
 *       To get the BER data, user needs to call blackhawk7_l8p2_get_BER_data_HW_mode() for ber result.
 *       The time between this function call and call to the blackhawk7_l8p2_get_BER_data_HW_mode() can be time_ms long.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] time_ms is the amount of time to use for BER calculation.
 * @param[out] ber_data is a struct that contains number of errors and number of bits as elements.
 * @param[out] prbs_chk_hw_timer_ctrl is a struct to be used to save ber configuration settings.
 * @return Error code, if generated (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_config_BER_HW_mode(srds_access_t *sa__, uint16_t time_ms, struct ber_data_st *ber_data, struct prbs_chk_hw_timer_ctrl_st *prbs_chk_hw_timer_ctrl);

/** Get BER data with HW mode.
 * Note: This function call may take up to time_ms delay to complete after calling the blackhawk7_l8p2_config_BER_HW_mode().
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in,out] ber_data is a struct that contains number of errors and number of bits as elements.
 * @param[in] prbs_chk_hw_timer_ctrl is a struct that contains saved ber configuration settings.
 * @return Error code, if generated (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_get_BER_data_HW_mode(srds_access_t *sa__, struct ber_data_st *ber_data, struct prbs_chk_hw_timer_ctrl_st *prbs_chk_hw_timer_ctrl);

/** Header display for detailed PRBS display function.
 * This can be displayed once and then several cores and lanes after each showing one line.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_display_detailed_prbs_state_hdr(srds_access_t *sa__);

/** Display detailed PRBS data per lane including Burst Error.
 * 
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk7_l8p2_display_detailed_prbs_state(srds_access_t *sa__);

extern const char* blackhawk7_l8p2_e2s_prbs_mode_enum[22];

/*---------------------------------*/
/*  PRBS Error Analyzer Functions  */
/*---------------------------------*/

#define BLACKHAWK7_L8P2_PRBS_FEC_FRAME_SIZE_MULTIPLIER         320
#define BLACKHAWK7_L8P2_PRBS_FEC_FRAME_SIZE_ROUND_UP           240  /* 3/4th of difference b/w configurable fec_size's (320) */
#define BLACKHAWK7_L8P2_PRBS_ERR_ANALYZER_FEC_SIZE_MIN         ( 6 * BLACKHAWK7_L8P2_PRBS_FEC_FRAME_SIZE_MULTIPLIER)
#define BLACKHAWK7_L8P2_PRBS_ERR_ANALYZER_FEC_SIZE_MAX         (63 * BLACKHAWK7_L8P2_PRBS_FEC_FRAME_SIZE_MULTIPLIER)
#define BLACKHAWK7_L8P2_PRBS_ERR_ANALYZER_ERR_THRESH_MIN        1 
#define BLACKHAWK7_L8P2_PRBS_ERR_ANALYZER_ERR_THRESH_MAX       15
#define BLACKHAWK7_L8P2_PRBS_ERR_ANALYZER_HIST_ERR_THRESH_MIN   1
#define BLACKHAWK7_L8P2_PRBS_ERR_ANALYZER_HIST_ERR_THRESH_MAX   8
#define BLACKHAWK7_L8P2_PRBS_ERR_ANALYZER_FRAME_OVERLAP_FACTOR  8
#define BLACKHAWK7_L8P2_PRBS_ERR_ANALYZER_LINEARITY_ADJUST      1.0
#define BLACKHAWK7_L8P2_PRBS_ERR_ANALYZER_NUM_COUNTERS          8

#define BLACKHAWK7_L8P2_PRBS_FEC_SIZE_FRAC_1_1                  0
#define BLACKHAWK7_L8P2_PRBS_FEC_SIZE_FRAC_1_8                  1
#define BLACKHAWK7_L8P2_PRBS_FEC_SIZE_FRAC_1_4                  2
#define BLACKHAWK7_L8P2_PRBS_FEC_SIZE_FRAC_1_2                  3
#define BLACKHAWK7_L8P2_PRBS_NUM_OF_ERROR_ANALYZER_COUNTERS    16

/** PRBS Error Analyzer Aggregate Mode */
enum srds_prbs_error_analyzer_aggregate_mode_enum {
    SRDS_IEEE_50GE,               /* 50G w/ Bit Muxing 2:1 and No Code Word Interleaving 50GE/100GE 56G BHK */
    SRDS_BHK_200GE,              /* 200G w/ Bit Muxing 2:1 and 2 Code Word Interleaving 200GE/400GE 56G BHK */
    SRDS_CUSTOM
};

/** PRBS Error Analyzer Config and Status Struct */
typedef struct {
  /** prbs_err_fec_size Defines the size of the FEC frames in bits */
  uint16_t prbs_err_fec_size;
  /** Aggregation Mode - 50GE/100GE/200GE/400GE */
  enum srds_prbs_error_analyzer_aggregate_mode_enum prbs_err_aggregate_mode;
  /** Selects which lanes to enable error analyzer for -- currently unused, set to 0xFF */
  uint8_t lanes_active;
  /** Selects whether errors are displayed in diag mode or normal mode*/
  uint8_t diag_mode;
  /** prbs_errcnt[i] - Num of FEC frames with >i errors (i = 0 to BLACKHAWK7_L8P2_PRBS_NUM_OF_ERROR_ANALYZER_COUNTERS-1) */ 
  uint32_t prbs_errcnt[BLACKHAWK7_L8P2_PRBS_NUM_OF_ERROR_ANALYZER_COUNTERS];
  /** Count of all frames accumulated */
  uint32_t prbs_frames_all;
  /** post process support field 1 */
  uint32_t pp_field1;
  /** post processing support field 2 */
  uint32_t pp_field2;
  /** Number of lanes used for aggregation. Example: Set to 1 for 50GE if using BHK, 1 for 100GE if using Osprey. This is computed in the API and does not need to be programmed by user unless CUSTOM mode is used. */
  uint8_t num_of_aggregate_lanes;
  /** Lane mask used for aggregation. Example: binary 01100011 uses lanes 6,5,1,0*/ 
  uint8_t lane_mask_aggregate;
  /** FEC frac size to indicate how much of the frame is captured. This is computed in the API and does not need to be programmed by user unless CUSTOM mode is used */
  uint8_t fec_size_frac;
} blackhawk7_l8p2_prbs_err_analyzer_config_status_st;


/** PRBS Error Analyzer Struct used to report Projection data */
typedef struct {
  /** Projected BER values (Equivalent projected post-FEC BER for t=15) */
  USR_DOUBLE proj_ber;
  /** Projected BER Invalid (0 -> valid, +1 -> BER greater than; -1 -> BER less than) */ 
  int8_t ber_proj_invalid;
  /** Number of Measured BER points available for extrapolation */
  uint8_t delta_n;
} blackhawk7_l8p2_prbs_err_analyzer_report_st;


/** Reset the entire PRBS Error Analyzer block (affects all lanes) and clears the DAC memory.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_prbs_error_analyzer_reset(srds_access_t *sa__);

/** Configure PRBS Error Analyzer.
 * NOTE: This feature is enabled only if PRBS Checker is configured and enabled.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in,out] err_analyzer PRBS Error Analyzer Error Count & Config Settings.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_prbs_error_analyzer_config(srds_access_t *sa__, blackhawk7_l8p2_prbs_err_analyzer_config_status_st *err_analyzer);

/** Start Error Analyzer counting on current lane.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_prbs_error_analyzer_start(srds_access_t *sa__);

/** Get PRBS Error Analyzer configuration.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] err_analyzer PRBS Error Analyzer Error Count & Config Settings.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_get_prbs_error_analyzer_config(srds_access_t *sa__, blackhawk7_l8p2_prbs_err_analyzer_config_status_st *err_analyzer);

/** Display PRBS Error Analyzer configuration.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] err_analyzer PRBS Error Analyzer Error Count & Config Settings.
 * @param[in] timeout_s Time (in seconds) for which the PRBS errors are going to be accumulated for (full test time).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_display_prbs_error_analyzer_config(srds_access_t *sa__, blackhawk7_l8p2_prbs_err_analyzer_config_status_st *err_analyzer, uint32_t timeout_s);

/* Clear DAC pattern memory.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_clear_dac_pattern_memory(srds_access_t *sa__);

/** Read DAC pattern memory into a 32xN memory.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] dac_mem pointer to 9*num_of_words 32-bit integer array to read DAC contents.
 * @param[in] read_addr is the address to start reading the DAC location.
 * @param[in] num_of_lines is the number of 140-bit lines to read from the DAC memory.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_read_dac_pattern_memory(srds_access_t *sa__, uint32_t *dac_mem, uint8_t read_addr, uint8_t num_of_lines);

/* Get PRBS Error Analyzer Error Count from aggregate lane or lane n.
* @param[in] sa__ is an opaque state vector passed through to device access functions.
* @param[out] err_analyzer PRBS Error Analyzer Error Count & Config Settings.
* @param[in] lane = n where n can be 0..num_of_lanes. (eg. for 8 lanes, you can do 0..8 where lanes 0..7 are lane-specific and lane 8 gives aggregate err count).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
*/
err_code_t blackhawk7_l8p2_get_prbs_error_analyzer_lane_err_count(srds_access_t *sa__, blackhawk7_l8p2_prbs_err_analyzer_config_status_st *err_analyzer, uint8_t lane);

/** Get PRBS Error Analyzer Error Count.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] err_analyzer PRBS Error Analyzer Error Count & Config Settings.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_get_prbs_error_analyzer_err_count(srds_access_t *sa__, blackhawk7_l8p2_prbs_err_analyzer_config_status_st *err_analyzer);

/** Display the Error counts accumulated by the PRBS Error Analyzer.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] err_analyzer PRBS Error Analyzer Error Count & Config Settings.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_display_prbs_error_analyzer_err_count(srds_access_t *sa__, blackhawk7_l8p2_prbs_err_analyzer_config_status_st *err_analyzer);

/** Display PRBS Error Analyzer Config and Errors for diagnostic dump.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] err_analyzer PRBS Error Analyzer Error Count & Config Settings.
 * @param[in] timeout_s Time (in seconds) for which the PRBS errors are going to be accumulated for (full test time).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_display_prbs_error_analyzer_struct(srds_access_t *sa__, blackhawk7_l8p2_prbs_err_analyzer_config_status_st *err_analyzer, uint32_t timeout_s);

/** Display PRBS Error Analyzer Projection for a single lane 50GE.
 * The Error Analyzer Projection API observes the number of frame errors generated for the given time duration,
 * and then projects it to t=15 errors. \n 
 * NOTE: This feature is enabled only if PRBS Checker is configured and enabled.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] prbs_err_fec_size Defines the size of the FEC frames in bits.
 * @param[in] timeout_s Time (in seconds) for which the PRBS errors are accumulated.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_display_prbs_error_analyzer_proj(srds_access_t *sa__, uint16_t prbs_err_fec_size, uint32_t timeout_s);

/** Report PRBS Error Analyzer Projection results.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] err_analyzer PRBS Error Analyzer Error Count & Config Settings.
 * @param[in] timeout_s Time (in seconds) for which the PRBS errors are accumulated.
 * @param[out] err_analyzer_report Report results of PRBS Error Analyzer projection.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_prbs_error_analyzer_report_proj(srds_access_t *sa__, blackhawk7_l8p2_prbs_err_analyzer_config_status_st err_analyzer, uint32_t timeout_s, blackhawk7_l8p2_prbs_err_analyzer_report_st *err_analyzer_report);

/* Get PRBS Error Analyzer Aggregate Error Count.
* @param[in] sa__ is an opaque state vector passed through to device access functions.
* @param[out] err_analyzer PRBS Error Analyzer Error Count & Config Settings.
* @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
*/
err_code_t blackhawk7_l8p2_get_prbs_error_analyzer_aggregate_err_count(srds_access_t *sa__, blackhawk7_l8p2_prbs_err_analyzer_config_status_st *err_analyzer);

/** Display the Aggregate Error counts accumulated by the PRBS Error Analyzer.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] err_analyzer PRBS Error Analyzer Error Count & Config Settings.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_display_prbs_error_analyzer_aggregate_err_count(srds_access_t *sa__, blackhawk7_l8p2_prbs_err_analyzer_config_status_st *err_analyzer);

/* Configure PRBS Error Analyzer for aggregate mode

* @param[in] sa__ is an opaque state vector passed through to device access functions.
* @param[in] err_analyzer PRBS Error Analyzer Error Count & Config Settings 
* @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
*/
err_code_t blackhawk7_l8p2_prbs_error_analyzer_aggregate_config(srds_access_t *sa__, blackhawk7_l8p2_prbs_err_analyzer_config_status_st *err_analyzer);

/* Display Aggregate PRBS Error Analyzer Projection.
* The Error Analyzer Projection API observes the number of frame errors generated for the given time duration,
* and then projects it to t=15 errors. \n 
* NOTE: This feature is enabled only if PRBS Checker is configured and enabled.
* @param[in] sa__ is an opaque state vector passed through to device access functions.
* @param[in] prbs_err_fec_size Defines the size of the FEC frames in bits.
* @param[in] prbs_err_aggregate_mode Aggregation Mode - SRDS_IEEE_50GE/SRDS_SINAI_50GE/SRDS_IEEE_100GE_2_LANE/SRDS_IEEE_200GE_4_LANE/SRDS_IEEE_400GE_8_LANE..../SRDS_CUSTOM.
* @param[in] lane_mask_aggregate Lane mask used for aggregation. Example: binary 01100011 uses lanes 6,5,1,0.
* @param[in] timeout_s Time (in seconds) for which the PRBS errors are accumulated.
* Selects whether errors are displayed in diag mode or normal mode -- diag mode is for internal use only. Users are required to invoke with this bit cleared.
* @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
*/
err_code_t blackhawk7_l8p2_display_aggregate_prbs_error_analyzer_proj(srds_access_t *sa__, uint16_t prbs_err_fec_size, enum srds_prbs_error_analyzer_aggregate_mode_enum prbs_err_aggregate_mode, uint8_t lane_mask_aggregate, uint32_t timeout_s, uint8_t diag_mode);

/** Compute PRBS Error Analyzer Projection results.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] err_analyzer PRBS Error Analyzer Error Count & Config Settings.
 * @param[in] timeout_s Time (in seconds) for which the PRBS errors are accumulated.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_prbs_error_analyzer_compute_proj(srds_access_t *sa__, blackhawk7_l8p2_prbs_err_analyzer_config_status_st err_analyzer, uint32_t timeout_s);

/** Reads rx tuning status, which indicates if RX has completed the optimization for BER.
 * NOTE: RX tuning occurs after the pmd lock.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] status returns with the RX tuning status (1 = BER is optimal; 0 = BER is not optimal).
 * @return Error Code generated by API (ERR_CODE_NONE if no errors).
 */
err_code_t blackhawk7_l8p2_get_rx_tuning_status(srds_access_t *sa__, uint8_t *status);



#endif
#ifdef __cplusplus
}
#endif
