#ifndef BCM56996_A0_XLPORT_DEFS_H
#define BCM56996_A0_XLPORT_DEFS_H
/*******************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 * Tool: INTERNAL/regs/xgs/generate-chip.pl
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *
 * Definition file for the BCM56996_A0.
 */

#include <sal/sal_libc.h>

/*******************************************************************************
 * REGISTER:  XLMAC_CLEAR_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_CLEAR_ECC_STATUSr_OFFSET 0x10063300

#define XLMAC_CLEAR_ECC_STATUSr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_CLEAR_ECC_STATUS.
 */
typedef union XLMAC_CLEAR_ECC_STATUSr_s {
    uint32_t v[2];
    uint32_t xlmac_clear_ecc_status[2];
    uint32_t _xlmac_clear_ecc_status;
} XLMAC_CLEAR_ECC_STATUSr_t;

#define XLMAC_CLEAR_ECC_STATUSr_CLR(r) sal_memset(&((r).xlmac_clear_ecc_status[0]), 0, sizeof(XLMAC_CLEAR_ECC_STATUSr_t))
#define XLMAC_CLEAR_ECC_STATUSr_SET(r,i,d) (r).xlmac_clear_ecc_status[i] = d
#define XLMAC_CLEAR_ECC_STATUSr_GET(r,i) (r).xlmac_clear_ecc_status[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_CLEAR_ECC_STATUSr_CLEAR_RX_CDC_SINGLE_BIT_ERRf_GET(r) (((r).xlmac_clear_ecc_status[0]) & 0x1)
#define XLMAC_CLEAR_ECC_STATUSr_CLEAR_RX_CDC_SINGLE_BIT_ERRf_SET(r,f) (r).xlmac_clear_ecc_status[0]=(((r).xlmac_clear_ecc_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_CLEAR_ECC_STATUSr_CLEAR_RX_CDC_DOUBLE_BIT_ERRf_GET(r) ((((r).xlmac_clear_ecc_status[0]) >> 1) & 0x1)
#define XLMAC_CLEAR_ECC_STATUSr_CLEAR_RX_CDC_DOUBLE_BIT_ERRf_SET(r,f) (r).xlmac_clear_ecc_status[0]=(((r).xlmac_clear_ecc_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLMAC_CLEAR_ECC_STATUSr_CLEAR_TX_CDC_SINGLE_BIT_ERRf_GET(r) ((((r).xlmac_clear_ecc_status[0]) >> 2) & 0x1)
#define XLMAC_CLEAR_ECC_STATUSr_CLEAR_TX_CDC_SINGLE_BIT_ERRf_SET(r,f) (r).xlmac_clear_ecc_status[0]=(((r).xlmac_clear_ecc_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLMAC_CLEAR_ECC_STATUSr_CLEAR_TX_CDC_DOUBLE_BIT_ERRf_GET(r) ((((r).xlmac_clear_ecc_status[0]) >> 3) & 0x1)
#define XLMAC_CLEAR_ECC_STATUSr_CLEAR_TX_CDC_DOUBLE_BIT_ERRf_SET(r,f) (r).xlmac_clear_ecc_status[0]=(((r).xlmac_clear_ecc_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*
 * These macros can be used to access XLMAC_CLEAR_ECC_STATUS.
 */
#define READ_XLMAC_CLEAR_ECC_STATUSr(pa,p,r) bcmpmac_read(pa,p,XLMAC_CLEAR_ECC_STATUSr_OFFSET,0,XLMAC_CLEAR_ECC_STATUSr_SIZE,(r._xlmac_clear_ecc_status))
#define WRITE_XLMAC_CLEAR_ECC_STATUSr(pa,p,r) bcmpmac_write(pa,p,XLMAC_CLEAR_ECC_STATUSr_OFFSET,0,XLMAC_CLEAR_ECC_STATUSr_SIZE,&(r._xlmac_clear_ecc_status))

/*******************************************************************************
 * End of 'XLMAC_CLEAR_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_CLEAR_FIFO_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_CLEAR_FIFO_STATUSr_OFFSET 0x10061700

#define XLMAC_CLEAR_FIFO_STATUSr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_CLEAR_FIFO_STATUS.
 */
typedef union XLMAC_CLEAR_FIFO_STATUSr_s {
    uint32_t v[2];
    uint32_t xlmac_clear_fifo_status[2];
    uint32_t _xlmac_clear_fifo_status;
} XLMAC_CLEAR_FIFO_STATUSr_t;

#define XLMAC_CLEAR_FIFO_STATUSr_CLR(r) sal_memset(&((r).xlmac_clear_fifo_status[0]), 0, sizeof(XLMAC_CLEAR_FIFO_STATUSr_t))
#define XLMAC_CLEAR_FIFO_STATUSr_SET(r,i,d) (r).xlmac_clear_fifo_status[i] = d
#define XLMAC_CLEAR_FIFO_STATUSr_GET(r,i) (r).xlmac_clear_fifo_status[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_CLEAR_FIFO_STATUSr_RSVD_1f_GET(r) (((r).xlmac_clear_fifo_status[0]) & 0x1)
#define XLMAC_CLEAR_FIFO_STATUSr_RSVD_1f_SET(r,f) (r).xlmac_clear_fifo_status[0]=(((r).xlmac_clear_fifo_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_CLEAR_FIFO_STATUSr_CLEAR_RX_MSG_OVERFLOWf_GET(r) ((((r).xlmac_clear_fifo_status[0]) >> 1) & 0x1)
#define XLMAC_CLEAR_FIFO_STATUSr_CLEAR_RX_MSG_OVERFLOWf_SET(r,f) (r).xlmac_clear_fifo_status[0]=(((r).xlmac_clear_fifo_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLMAC_CLEAR_FIFO_STATUSr_CLEAR_TX_PKT_UNDERFLOWf_GET(r) ((((r).xlmac_clear_fifo_status[0]) >> 2) & 0x1)
#define XLMAC_CLEAR_FIFO_STATUSr_CLEAR_TX_PKT_UNDERFLOWf_SET(r,f) (r).xlmac_clear_fifo_status[0]=(((r).xlmac_clear_fifo_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLMAC_CLEAR_FIFO_STATUSr_CLEAR_TX_PKT_OVERFLOWf_GET(r) ((((r).xlmac_clear_fifo_status[0]) >> 3) & 0x1)
#define XLMAC_CLEAR_FIFO_STATUSr_CLEAR_TX_PKT_OVERFLOWf_SET(r,f) (r).xlmac_clear_fifo_status[0]=(((r).xlmac_clear_fifo_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLMAC_CLEAR_FIFO_STATUSr_RSVD_2f_GET(r) ((((r).xlmac_clear_fifo_status[0]) >> 4) & 0x1)
#define XLMAC_CLEAR_FIFO_STATUSr_RSVD_2f_SET(r,f) (r).xlmac_clear_fifo_status[0]=(((r).xlmac_clear_fifo_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define XLMAC_CLEAR_FIFO_STATUSr_CLEAR_TX_LLFC_MSG_OVERFLOWf_GET(r) ((((r).xlmac_clear_fifo_status[0]) >> 5) & 0x1)
#define XLMAC_CLEAR_FIFO_STATUSr_CLEAR_TX_LLFC_MSG_OVERFLOWf_SET(r,f) (r).xlmac_clear_fifo_status[0]=(((r).xlmac_clear_fifo_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define XLMAC_CLEAR_FIFO_STATUSr_CLEAR_TX_TS_FIFO_OVERFLOWf_GET(r) ((((r).xlmac_clear_fifo_status[0]) >> 6) & 0x1)
#define XLMAC_CLEAR_FIFO_STATUSr_CLEAR_TX_TS_FIFO_OVERFLOWf_SET(r,f) (r).xlmac_clear_fifo_status[0]=(((r).xlmac_clear_fifo_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define XLMAC_CLEAR_FIFO_STATUSr_CLEAR_RX_PKT_OVERFLOWf_GET(r) ((((r).xlmac_clear_fifo_status[0]) >> 7) & 0x1)
#define XLMAC_CLEAR_FIFO_STATUSr_CLEAR_RX_PKT_OVERFLOWf_SET(r,f) (r).xlmac_clear_fifo_status[0]=(((r).xlmac_clear_fifo_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*
 * These macros can be used to access XLMAC_CLEAR_FIFO_STATUS.
 */
#define READ_XLMAC_CLEAR_FIFO_STATUSr(pa,p,r) bcmpmac_read(pa,p,XLMAC_CLEAR_FIFO_STATUSr_OFFSET,0,XLMAC_CLEAR_FIFO_STATUSr_SIZE,(r._xlmac_clear_fifo_status))
#define WRITE_XLMAC_CLEAR_FIFO_STATUSr(pa,p,r) bcmpmac_write(pa,p,XLMAC_CLEAR_FIFO_STATUSr_OFFSET,0,XLMAC_CLEAR_FIFO_STATUSr_SIZE,&(r._xlmac_clear_fifo_status))

/*******************************************************************************
 * End of 'XLMAC_CLEAR_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_CLEAR_RX_LSS_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_CLEAR_RX_LSS_STATUSr_OFFSET 0x10060b00

#define XLMAC_CLEAR_RX_LSS_STATUSr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_CLEAR_RX_LSS_STATUS.
 */
typedef union XLMAC_CLEAR_RX_LSS_STATUSr_s {
    uint32_t v[2];
    uint32_t xlmac_clear_rx_lss_status[2];
    uint32_t _xlmac_clear_rx_lss_status;
} XLMAC_CLEAR_RX_LSS_STATUSr_t;

#define XLMAC_CLEAR_RX_LSS_STATUSr_CLR(r) sal_memset(&((r).xlmac_clear_rx_lss_status[0]), 0, sizeof(XLMAC_CLEAR_RX_LSS_STATUSr_t))
#define XLMAC_CLEAR_RX_LSS_STATUSr_SET(r,i,d) (r).xlmac_clear_rx_lss_status[i] = d
#define XLMAC_CLEAR_RX_LSS_STATUSr_GET(r,i) (r).xlmac_clear_rx_lss_status[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_CLEAR_RX_LSS_STATUSr_CLEAR_LOCAL_FAULT_STATUSf_GET(r) (((r).xlmac_clear_rx_lss_status[0]) & 0x1)
#define XLMAC_CLEAR_RX_LSS_STATUSr_CLEAR_LOCAL_FAULT_STATUSf_SET(r,f) (r).xlmac_clear_rx_lss_status[0]=(((r).xlmac_clear_rx_lss_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_CLEAR_RX_LSS_STATUSr_CLEAR_REMOTE_FAULT_STATUSf_GET(r) ((((r).xlmac_clear_rx_lss_status[0]) >> 1) & 0x1)
#define XLMAC_CLEAR_RX_LSS_STATUSr_CLEAR_REMOTE_FAULT_STATUSf_SET(r,f) (r).xlmac_clear_rx_lss_status[0]=(((r).xlmac_clear_rx_lss_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLMAC_CLEAR_RX_LSS_STATUSr_CLEAR_LINK_INTERRUPTION_STATUSf_GET(r) ((((r).xlmac_clear_rx_lss_status[0]) >> 2) & 0x1)
#define XLMAC_CLEAR_RX_LSS_STATUSr_CLEAR_LINK_INTERRUPTION_STATUSf_SET(r,f) (r).xlmac_clear_rx_lss_status[0]=(((r).xlmac_clear_rx_lss_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*
 * These macros can be used to access XLMAC_CLEAR_RX_LSS_STATUS.
 */
#define READ_XLMAC_CLEAR_RX_LSS_STATUSr(pa,p,r) bcmpmac_read(pa,p,XLMAC_CLEAR_RX_LSS_STATUSr_OFFSET,0,XLMAC_CLEAR_RX_LSS_STATUSr_SIZE,(r._xlmac_clear_rx_lss_status))
#define WRITE_XLMAC_CLEAR_RX_LSS_STATUSr(pa,p,r) bcmpmac_write(pa,p,XLMAC_CLEAR_RX_LSS_STATUSr_OFFSET,0,XLMAC_CLEAR_RX_LSS_STATUSr_SIZE,&(r._xlmac_clear_rx_lss_status))

/*******************************************************************************
 * End of 'XLMAC_CLEAR_RX_LSS_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_CTRLr_OFFSET 0x10060100

#define XLMAC_CTRLr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_CTRL.
 */
typedef union XLMAC_CTRLr_s {
    uint32_t v[2];
    uint32_t xlmac_ctrl[2];
    uint32_t _xlmac_ctrl;
} XLMAC_CTRLr_t;

#define XLMAC_CTRLr_CLR(r) sal_memset(&((r).xlmac_ctrl[0]), 0, sizeof(XLMAC_CTRLr_t))
#define XLMAC_CTRLr_SET(r,i,d) (r).xlmac_ctrl[i] = d
#define XLMAC_CTRLr_GET(r,i) (r).xlmac_ctrl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_CTRLr_TX_ENf_GET(r) (((r).xlmac_ctrl[0]) & 0x1)
#define XLMAC_CTRLr_TX_ENf_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_CTRLr_RX_ENf_GET(r) ((((r).xlmac_ctrl[0]) >> 1) & 0x1)
#define XLMAC_CTRLr_RX_ENf_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLMAC_CTRLr_LOCAL_LPBKf_GET(r) ((((r).xlmac_ctrl[0]) >> 2) & 0x1)
#define XLMAC_CTRLr_LOCAL_LPBKf_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLMAC_CTRLr_RSVD_1f_GET(r) ((((r).xlmac_ctrl[0]) >> 3) & 0x1)
#define XLMAC_CTRLr_RSVD_1f_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLMAC_CTRLr_REMOVE_FAILOVER_LPBKf_GET(r) ((((r).xlmac_ctrl[0]) >> 4) & 0x1)
#define XLMAC_CTRLr_REMOVE_FAILOVER_LPBKf_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define XLMAC_CTRLr_LAG_FAILOVER_ENf_GET(r) ((((r).xlmac_ctrl[0]) >> 5) & 0x1)
#define XLMAC_CTRLr_LAG_FAILOVER_ENf_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define XLMAC_CTRLr_SOFT_RESETf_GET(r) ((((r).xlmac_ctrl[0]) >> 6) & 0x1)
#define XLMAC_CTRLr_SOFT_RESETf_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define XLMAC_CTRLr_RSVD_4f_GET(r) ((((r).xlmac_ctrl[0]) >> 7) & 0x1)
#define XLMAC_CTRLr_RSVD_4f_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define XLMAC_CTRLr_LOCAL_LPBK_LEAK_ENBf_GET(r) ((((r).xlmac_ctrl[0]) >> 8) & 0x1)
#define XLMAC_CTRLr_LOCAL_LPBK_LEAK_ENBf_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define XLMAC_CTRLr_RSVD_5f_GET(r) ((((r).xlmac_ctrl[0]) >> 9) & 0x1)
#define XLMAC_CTRLr_RSVD_5f_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define XLMAC_CTRLr_RS_SOFT_RESETf_GET(r) ((((r).xlmac_ctrl[0]) >> 10) & 0x1)
#define XLMAC_CTRLr_RS_SOFT_RESETf_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define XLMAC_CTRLr_XGMII_IPG_CHECK_DISABLEf_GET(r) ((((r).xlmac_ctrl[0]) >> 11) & 0x1)
#define XLMAC_CTRLr_XGMII_IPG_CHECK_DISABLEf_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define XLMAC_CTRLr_SW_LINK_STATUSf_GET(r) ((((r).xlmac_ctrl[0]) >> 12) & 0x1)
#define XLMAC_CTRLr_SW_LINK_STATUSf_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define XLMAC_CTRLr_LINK_STATUS_SELECTf_GET(r) ((((r).xlmac_ctrl[0]) >> 13) & 0x1)
#define XLMAC_CTRLr_LINK_STATUS_SELECTf_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define XLMAC_CTRLr_EXTENDED_HIG2_ENf_GET(r) ((((r).xlmac_ctrl[0]) >> 14) & 0x1)
#define XLMAC_CTRLr_EXTENDED_HIG2_ENf_SET(r,f) (r).xlmac_ctrl[0]=(((r).xlmac_ctrl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))

/*
 * These macros can be used to access XLMAC_CTRL.
 */
#define READ_XLMAC_CTRLr(pa,p,r) bcmpmac_read(pa,p,XLMAC_CTRLr_OFFSET,0,XLMAC_CTRLr_SIZE,(r._xlmac_ctrl))
#define WRITE_XLMAC_CTRLr(pa,p,r) bcmpmac_write(pa,p,XLMAC_CTRLr_OFFSET,0,XLMAC_CTRLr_SIZE,&(r._xlmac_ctrl))

/*******************************************************************************
 * End of 'XLMAC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2ECC_DATA_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_E2ECC_DATA_HDR_0r_OFFSET 0x10062500

#define XLMAC_E2ECC_DATA_HDR_0r_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_E2ECC_DATA_HDR_0.
 */
typedef union XLMAC_E2ECC_DATA_HDR_0r_s {
    uint32_t v[2];
    uint32_t xlmac_e2ecc_data_hdr_0[2];
    uint32_t _xlmac_e2ecc_data_hdr_0;
} XLMAC_E2ECC_DATA_HDR_0r_t;

#define XLMAC_E2ECC_DATA_HDR_0r_CLR(r) sal_memset(&((r).xlmac_e2ecc_data_hdr_0[0]), 0, sizeof(XLMAC_E2ECC_DATA_HDR_0r_t))
#define XLMAC_E2ECC_DATA_HDR_0r_SET(r,i,d) (r).xlmac_e2ecc_data_hdr_0[i] = d
#define XLMAC_E2ECC_DATA_HDR_0r_GET(r,i) (r).xlmac_e2ecc_data_hdr_0[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_E2ECC_DATA_HDR_0r_E2ECC_DATA_HDR_0f_GET(r,a) bcmpmac_field_get((r).xlmac_e2ecc_data_hdr_0,0,63,a)
#define XLMAC_E2ECC_DATA_HDR_0r_E2ECC_DATA_HDR_0f_SET(r,a) bcmpmac_field_set((r).xlmac_e2ecc_data_hdr_0,0,63,a)
#define XLMAC_E2ECC_DATA_HDR_0r_E2ECC_DATA_HDR_0_LOf_GET(r) ((r).xlmac_e2ecc_data_hdr_0[0])
#define XLMAC_E2ECC_DATA_HDR_0r_E2ECC_DATA_HDR_0_LOf_SET(r,f) (r).xlmac_e2ecc_data_hdr_0[0]=((uint32_t)f)
#define XLMAC_E2ECC_DATA_HDR_0r_E2ECC_DATA_HDR_0_HIf_GET(r) ((r).xlmac_e2ecc_data_hdr_0[1])
#define XLMAC_E2ECC_DATA_HDR_0r_E2ECC_DATA_HDR_0_HIf_SET(r,f) (r).xlmac_e2ecc_data_hdr_0[1]=((uint32_t)f)

/*
 * These macros can be used to access XLMAC_E2ECC_DATA_HDR_0.
 */
#define READ_XLMAC_E2ECC_DATA_HDR_0r(pa,p,r) bcmpmac_read(pa,p,XLMAC_E2ECC_DATA_HDR_0r_OFFSET,0,XLMAC_E2ECC_DATA_HDR_0r_SIZE,(r._xlmac_e2ecc_data_hdr_0))
#define WRITE_XLMAC_E2ECC_DATA_HDR_0r(pa,p,r) bcmpmac_write(pa,p,XLMAC_E2ECC_DATA_HDR_0r_OFFSET,0,XLMAC_E2ECC_DATA_HDR_0r_SIZE,&(r._xlmac_e2ecc_data_hdr_0))

/*******************************************************************************
 * End of 'XLMAC_E2ECC_DATA_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2ECC_DATA_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_E2ECC_DATA_HDR_1r_OFFSET 0x10062600

#define XLMAC_E2ECC_DATA_HDR_1r_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_E2ECC_DATA_HDR_1.
 */
typedef union XLMAC_E2ECC_DATA_HDR_1r_s {
    uint32_t v[2];
    uint32_t xlmac_e2ecc_data_hdr_1[2];
    uint32_t _xlmac_e2ecc_data_hdr_1;
} XLMAC_E2ECC_DATA_HDR_1r_t;

#define XLMAC_E2ECC_DATA_HDR_1r_CLR(r) sal_memset(&((r).xlmac_e2ecc_data_hdr_1[0]), 0, sizeof(XLMAC_E2ECC_DATA_HDR_1r_t))
#define XLMAC_E2ECC_DATA_HDR_1r_SET(r,i,d) (r).xlmac_e2ecc_data_hdr_1[i] = d
#define XLMAC_E2ECC_DATA_HDR_1r_GET(r,i) (r).xlmac_e2ecc_data_hdr_1[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_E2ECC_DATA_HDR_1r_E2ECC_DATA_HDR_1f_GET(r,a) bcmpmac_field_get((r).xlmac_e2ecc_data_hdr_1,0,63,a)
#define XLMAC_E2ECC_DATA_HDR_1r_E2ECC_DATA_HDR_1f_SET(r,a) bcmpmac_field_set((r).xlmac_e2ecc_data_hdr_1,0,63,a)
#define XLMAC_E2ECC_DATA_HDR_1r_E2ECC_DATA_HDR_1_LOf_GET(r) ((r).xlmac_e2ecc_data_hdr_1[0])
#define XLMAC_E2ECC_DATA_HDR_1r_E2ECC_DATA_HDR_1_LOf_SET(r,f) (r).xlmac_e2ecc_data_hdr_1[0]=((uint32_t)f)
#define XLMAC_E2ECC_DATA_HDR_1r_E2ECC_DATA_HDR_1_HIf_GET(r) ((r).xlmac_e2ecc_data_hdr_1[1])
#define XLMAC_E2ECC_DATA_HDR_1r_E2ECC_DATA_HDR_1_HIf_SET(r,f) (r).xlmac_e2ecc_data_hdr_1[1]=((uint32_t)f)

/*
 * These macros can be used to access XLMAC_E2ECC_DATA_HDR_1.
 */
#define READ_XLMAC_E2ECC_DATA_HDR_1r(pa,p,r) bcmpmac_read(pa,p,XLMAC_E2ECC_DATA_HDR_1r_OFFSET,0,XLMAC_E2ECC_DATA_HDR_1r_SIZE,(r._xlmac_e2ecc_data_hdr_1))
#define WRITE_XLMAC_E2ECC_DATA_HDR_1r(pa,p,r) bcmpmac_write(pa,p,XLMAC_E2ECC_DATA_HDR_1r_OFFSET,0,XLMAC_E2ECC_DATA_HDR_1r_SIZE,&(r._xlmac_e2ecc_data_hdr_1))

/*******************************************************************************
 * End of 'XLMAC_E2ECC_DATA_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2ECC_MODULE_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_E2ECC_MODULE_HDR_0r_OFFSET 0x10062300

#define XLMAC_E2ECC_MODULE_HDR_0r_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_E2ECC_MODULE_HDR_0.
 */
typedef union XLMAC_E2ECC_MODULE_HDR_0r_s {
    uint32_t v[2];
    uint32_t xlmac_e2ecc_module_hdr_0[2];
    uint32_t _xlmac_e2ecc_module_hdr_0;
} XLMAC_E2ECC_MODULE_HDR_0r_t;

#define XLMAC_E2ECC_MODULE_HDR_0r_CLR(r) sal_memset(&((r).xlmac_e2ecc_module_hdr_0[0]), 0, sizeof(XLMAC_E2ECC_MODULE_HDR_0r_t))
#define XLMAC_E2ECC_MODULE_HDR_0r_SET(r,i,d) (r).xlmac_e2ecc_module_hdr_0[i] = d
#define XLMAC_E2ECC_MODULE_HDR_0r_GET(r,i) (r).xlmac_e2ecc_module_hdr_0[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_E2ECC_MODULE_HDR_0r_E2ECC_MODULE_HDR_0f_GET(r,a) bcmpmac_field_get((r).xlmac_e2ecc_module_hdr_0,0,63,a)
#define XLMAC_E2ECC_MODULE_HDR_0r_E2ECC_MODULE_HDR_0f_SET(r,a) bcmpmac_field_set((r).xlmac_e2ecc_module_hdr_0,0,63,a)
#define XLMAC_E2ECC_MODULE_HDR_0r_E2ECC_MODULE_HDR_0_LOf_GET(r) ((r).xlmac_e2ecc_module_hdr_0[0])
#define XLMAC_E2ECC_MODULE_HDR_0r_E2ECC_MODULE_HDR_0_LOf_SET(r,f) (r).xlmac_e2ecc_module_hdr_0[0]=((uint32_t)f)
#define XLMAC_E2ECC_MODULE_HDR_0r_E2ECC_MODULE_HDR_0_HIf_GET(r) ((r).xlmac_e2ecc_module_hdr_0[1])
#define XLMAC_E2ECC_MODULE_HDR_0r_E2ECC_MODULE_HDR_0_HIf_SET(r,f) (r).xlmac_e2ecc_module_hdr_0[1]=((uint32_t)f)

/*
 * These macros can be used to access XLMAC_E2ECC_MODULE_HDR_0.
 */
#define READ_XLMAC_E2ECC_MODULE_HDR_0r(pa,p,r) bcmpmac_read(pa,p,XLMAC_E2ECC_MODULE_HDR_0r_OFFSET,0,XLMAC_E2ECC_MODULE_HDR_0r_SIZE,(r._xlmac_e2ecc_module_hdr_0))
#define WRITE_XLMAC_E2ECC_MODULE_HDR_0r(pa,p,r) bcmpmac_write(pa,p,XLMAC_E2ECC_MODULE_HDR_0r_OFFSET,0,XLMAC_E2ECC_MODULE_HDR_0r_SIZE,&(r._xlmac_e2ecc_module_hdr_0))

/*******************************************************************************
 * End of 'XLMAC_E2ECC_MODULE_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2ECC_MODULE_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_E2ECC_MODULE_HDR_1r_OFFSET 0x10062400

#define XLMAC_E2ECC_MODULE_HDR_1r_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_E2ECC_MODULE_HDR_1.
 */
typedef union XLMAC_E2ECC_MODULE_HDR_1r_s {
    uint32_t v[2];
    uint32_t xlmac_e2ecc_module_hdr_1[2];
    uint32_t _xlmac_e2ecc_module_hdr_1;
} XLMAC_E2ECC_MODULE_HDR_1r_t;

#define XLMAC_E2ECC_MODULE_HDR_1r_CLR(r) sal_memset(&((r).xlmac_e2ecc_module_hdr_1[0]), 0, sizeof(XLMAC_E2ECC_MODULE_HDR_1r_t))
#define XLMAC_E2ECC_MODULE_HDR_1r_SET(r,i,d) (r).xlmac_e2ecc_module_hdr_1[i] = d
#define XLMAC_E2ECC_MODULE_HDR_1r_GET(r,i) (r).xlmac_e2ecc_module_hdr_1[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_E2ECC_MODULE_HDR_1r_E2ECC_MODULE_HDR_1f_GET(r,a) bcmpmac_field_get((r).xlmac_e2ecc_module_hdr_1,0,63,a)
#define XLMAC_E2ECC_MODULE_HDR_1r_E2ECC_MODULE_HDR_1f_SET(r,a) bcmpmac_field_set((r).xlmac_e2ecc_module_hdr_1,0,63,a)
#define XLMAC_E2ECC_MODULE_HDR_1r_E2ECC_MODULE_HDR_1_LOf_GET(r) ((r).xlmac_e2ecc_module_hdr_1[0])
#define XLMAC_E2ECC_MODULE_HDR_1r_E2ECC_MODULE_HDR_1_LOf_SET(r,f) (r).xlmac_e2ecc_module_hdr_1[0]=((uint32_t)f)
#define XLMAC_E2ECC_MODULE_HDR_1r_E2ECC_MODULE_HDR_1_HIf_GET(r) ((r).xlmac_e2ecc_module_hdr_1[1])
#define XLMAC_E2ECC_MODULE_HDR_1r_E2ECC_MODULE_HDR_1_HIf_SET(r,f) (r).xlmac_e2ecc_module_hdr_1[1]=((uint32_t)f)

/*
 * These macros can be used to access XLMAC_E2ECC_MODULE_HDR_1.
 */
#define READ_XLMAC_E2ECC_MODULE_HDR_1r(pa,p,r) bcmpmac_read(pa,p,XLMAC_E2ECC_MODULE_HDR_1r_OFFSET,0,XLMAC_E2ECC_MODULE_HDR_1r_SIZE,(r._xlmac_e2ecc_module_hdr_1))
#define WRITE_XLMAC_E2ECC_MODULE_HDR_1r(pa,p,r) bcmpmac_write(pa,p,XLMAC_E2ECC_MODULE_HDR_1r_OFFSET,0,XLMAC_E2ECC_MODULE_HDR_1r_SIZE,&(r._xlmac_e2ecc_module_hdr_1))

/*******************************************************************************
 * End of 'XLMAC_E2ECC_MODULE_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2EFC_DATA_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_E2EFC_DATA_HDR_0r_OFFSET 0x10062900

#define XLMAC_E2EFC_DATA_HDR_0r_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_E2EFC_DATA_HDR_0.
 */
typedef union XLMAC_E2EFC_DATA_HDR_0r_s {
    uint32_t v[2];
    uint32_t xlmac_e2efc_data_hdr_0[2];
    uint32_t _xlmac_e2efc_data_hdr_0;
} XLMAC_E2EFC_DATA_HDR_0r_t;

#define XLMAC_E2EFC_DATA_HDR_0r_CLR(r) sal_memset(&((r).xlmac_e2efc_data_hdr_0[0]), 0, sizeof(XLMAC_E2EFC_DATA_HDR_0r_t))
#define XLMAC_E2EFC_DATA_HDR_0r_SET(r,i,d) (r).xlmac_e2efc_data_hdr_0[i] = d
#define XLMAC_E2EFC_DATA_HDR_0r_GET(r,i) (r).xlmac_e2efc_data_hdr_0[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_E2EFC_DATA_HDR_0r_E2EFC_DATA_HDR_0f_GET(r,a) bcmpmac_field_get((r).xlmac_e2efc_data_hdr_0,0,63,a)
#define XLMAC_E2EFC_DATA_HDR_0r_E2EFC_DATA_HDR_0f_SET(r,a) bcmpmac_field_set((r).xlmac_e2efc_data_hdr_0,0,63,a)
#define XLMAC_E2EFC_DATA_HDR_0r_E2EFC_DATA_HDR_0_LOf_GET(r) ((r).xlmac_e2efc_data_hdr_0[0])
#define XLMAC_E2EFC_DATA_HDR_0r_E2EFC_DATA_HDR_0_LOf_SET(r,f) (r).xlmac_e2efc_data_hdr_0[0]=((uint32_t)f)
#define XLMAC_E2EFC_DATA_HDR_0r_E2EFC_DATA_HDR_0_HIf_GET(r) ((r).xlmac_e2efc_data_hdr_0[1])
#define XLMAC_E2EFC_DATA_HDR_0r_E2EFC_DATA_HDR_0_HIf_SET(r,f) (r).xlmac_e2efc_data_hdr_0[1]=((uint32_t)f)

/*
 * These macros can be used to access XLMAC_E2EFC_DATA_HDR_0.
 */
#define READ_XLMAC_E2EFC_DATA_HDR_0r(pa,p,r) bcmpmac_read(pa,p,XLMAC_E2EFC_DATA_HDR_0r_OFFSET,0,XLMAC_E2EFC_DATA_HDR_0r_SIZE,(r._xlmac_e2efc_data_hdr_0))
#define WRITE_XLMAC_E2EFC_DATA_HDR_0r(pa,p,r) bcmpmac_write(pa,p,XLMAC_E2EFC_DATA_HDR_0r_OFFSET,0,XLMAC_E2EFC_DATA_HDR_0r_SIZE,&(r._xlmac_e2efc_data_hdr_0))

/*******************************************************************************
 * End of 'XLMAC_E2EFC_DATA_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2EFC_DATA_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_E2EFC_DATA_HDR_1r_OFFSET 0x10062a00

#define XLMAC_E2EFC_DATA_HDR_1r_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_E2EFC_DATA_HDR_1.
 */
typedef union XLMAC_E2EFC_DATA_HDR_1r_s {
    uint32_t v[2];
    uint32_t xlmac_e2efc_data_hdr_1[2];
    uint32_t _xlmac_e2efc_data_hdr_1;
} XLMAC_E2EFC_DATA_HDR_1r_t;

#define XLMAC_E2EFC_DATA_HDR_1r_CLR(r) sal_memset(&((r).xlmac_e2efc_data_hdr_1[0]), 0, sizeof(XLMAC_E2EFC_DATA_HDR_1r_t))
#define XLMAC_E2EFC_DATA_HDR_1r_SET(r,i,d) (r).xlmac_e2efc_data_hdr_1[i] = d
#define XLMAC_E2EFC_DATA_HDR_1r_GET(r,i) (r).xlmac_e2efc_data_hdr_1[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_E2EFC_DATA_HDR_1r_E2EFC_DATA_HDR_1f_GET(r,a) bcmpmac_field_get((r).xlmac_e2efc_data_hdr_1,0,63,a)
#define XLMAC_E2EFC_DATA_HDR_1r_E2EFC_DATA_HDR_1f_SET(r,a) bcmpmac_field_set((r).xlmac_e2efc_data_hdr_1,0,63,a)
#define XLMAC_E2EFC_DATA_HDR_1r_E2EFC_DATA_HDR_1_LOf_GET(r) ((r).xlmac_e2efc_data_hdr_1[0])
#define XLMAC_E2EFC_DATA_HDR_1r_E2EFC_DATA_HDR_1_LOf_SET(r,f) (r).xlmac_e2efc_data_hdr_1[0]=((uint32_t)f)
#define XLMAC_E2EFC_DATA_HDR_1r_E2EFC_DATA_HDR_1_HIf_GET(r) ((r).xlmac_e2efc_data_hdr_1[1])
#define XLMAC_E2EFC_DATA_HDR_1r_E2EFC_DATA_HDR_1_HIf_SET(r,f) (r).xlmac_e2efc_data_hdr_1[1]=((uint32_t)f)

/*
 * These macros can be used to access XLMAC_E2EFC_DATA_HDR_1.
 */
#define READ_XLMAC_E2EFC_DATA_HDR_1r(pa,p,r) bcmpmac_read(pa,p,XLMAC_E2EFC_DATA_HDR_1r_OFFSET,0,XLMAC_E2EFC_DATA_HDR_1r_SIZE,(r._xlmac_e2efc_data_hdr_1))
#define WRITE_XLMAC_E2EFC_DATA_HDR_1r(pa,p,r) bcmpmac_write(pa,p,XLMAC_E2EFC_DATA_HDR_1r_OFFSET,0,XLMAC_E2EFC_DATA_HDR_1r_SIZE,&(r._xlmac_e2efc_data_hdr_1))

/*******************************************************************************
 * End of 'XLMAC_E2EFC_DATA_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2EFC_MODULE_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_E2EFC_MODULE_HDR_0r_OFFSET 0x10062700

#define XLMAC_E2EFC_MODULE_HDR_0r_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_E2EFC_MODULE_HDR_0.
 */
typedef union XLMAC_E2EFC_MODULE_HDR_0r_s {
    uint32_t v[2];
    uint32_t xlmac_e2efc_module_hdr_0[2];
    uint32_t _xlmac_e2efc_module_hdr_0;
} XLMAC_E2EFC_MODULE_HDR_0r_t;

#define XLMAC_E2EFC_MODULE_HDR_0r_CLR(r) sal_memset(&((r).xlmac_e2efc_module_hdr_0[0]), 0, sizeof(XLMAC_E2EFC_MODULE_HDR_0r_t))
#define XLMAC_E2EFC_MODULE_HDR_0r_SET(r,i,d) (r).xlmac_e2efc_module_hdr_0[i] = d
#define XLMAC_E2EFC_MODULE_HDR_0r_GET(r,i) (r).xlmac_e2efc_module_hdr_0[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_E2EFC_MODULE_HDR_0r_E2EFC_MODULE_HDR_0f_GET(r,a) bcmpmac_field_get((r).xlmac_e2efc_module_hdr_0,0,63,a)
#define XLMAC_E2EFC_MODULE_HDR_0r_E2EFC_MODULE_HDR_0f_SET(r,a) bcmpmac_field_set((r).xlmac_e2efc_module_hdr_0,0,63,a)
#define XLMAC_E2EFC_MODULE_HDR_0r_E2EFC_MODULE_HDR_0_LOf_GET(r) ((r).xlmac_e2efc_module_hdr_0[0])
#define XLMAC_E2EFC_MODULE_HDR_0r_E2EFC_MODULE_HDR_0_LOf_SET(r,f) (r).xlmac_e2efc_module_hdr_0[0]=((uint32_t)f)
#define XLMAC_E2EFC_MODULE_HDR_0r_E2EFC_MODULE_HDR_0_HIf_GET(r) ((r).xlmac_e2efc_module_hdr_0[1])
#define XLMAC_E2EFC_MODULE_HDR_0r_E2EFC_MODULE_HDR_0_HIf_SET(r,f) (r).xlmac_e2efc_module_hdr_0[1]=((uint32_t)f)

/*
 * These macros can be used to access XLMAC_E2EFC_MODULE_HDR_0.
 */
#define READ_XLMAC_E2EFC_MODULE_HDR_0r(pa,p,r) bcmpmac_read(pa,p,XLMAC_E2EFC_MODULE_HDR_0r_OFFSET,0,XLMAC_E2EFC_MODULE_HDR_0r_SIZE,(r._xlmac_e2efc_module_hdr_0))
#define WRITE_XLMAC_E2EFC_MODULE_HDR_0r(pa,p,r) bcmpmac_write(pa,p,XLMAC_E2EFC_MODULE_HDR_0r_OFFSET,0,XLMAC_E2EFC_MODULE_HDR_0r_SIZE,&(r._xlmac_e2efc_module_hdr_0))

/*******************************************************************************
 * End of 'XLMAC_E2EFC_MODULE_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2EFC_MODULE_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_E2EFC_MODULE_HDR_1r_OFFSET 0x10062800

#define XLMAC_E2EFC_MODULE_HDR_1r_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_E2EFC_MODULE_HDR_1.
 */
typedef union XLMAC_E2EFC_MODULE_HDR_1r_s {
    uint32_t v[2];
    uint32_t xlmac_e2efc_module_hdr_1[2];
    uint32_t _xlmac_e2efc_module_hdr_1;
} XLMAC_E2EFC_MODULE_HDR_1r_t;

#define XLMAC_E2EFC_MODULE_HDR_1r_CLR(r) sal_memset(&((r).xlmac_e2efc_module_hdr_1[0]), 0, sizeof(XLMAC_E2EFC_MODULE_HDR_1r_t))
#define XLMAC_E2EFC_MODULE_HDR_1r_SET(r,i,d) (r).xlmac_e2efc_module_hdr_1[i] = d
#define XLMAC_E2EFC_MODULE_HDR_1r_GET(r,i) (r).xlmac_e2efc_module_hdr_1[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_E2EFC_MODULE_HDR_1r_E2EFC_MODULE_HDR_1f_GET(r,a) bcmpmac_field_get((r).xlmac_e2efc_module_hdr_1,0,63,a)
#define XLMAC_E2EFC_MODULE_HDR_1r_E2EFC_MODULE_HDR_1f_SET(r,a) bcmpmac_field_set((r).xlmac_e2efc_module_hdr_1,0,63,a)
#define XLMAC_E2EFC_MODULE_HDR_1r_E2EFC_MODULE_HDR_1_LOf_GET(r) ((r).xlmac_e2efc_module_hdr_1[0])
#define XLMAC_E2EFC_MODULE_HDR_1r_E2EFC_MODULE_HDR_1_LOf_SET(r,f) (r).xlmac_e2efc_module_hdr_1[0]=((uint32_t)f)
#define XLMAC_E2EFC_MODULE_HDR_1r_E2EFC_MODULE_HDR_1_HIf_GET(r) ((r).xlmac_e2efc_module_hdr_1[1])
#define XLMAC_E2EFC_MODULE_HDR_1r_E2EFC_MODULE_HDR_1_HIf_SET(r,f) (r).xlmac_e2efc_module_hdr_1[1]=((uint32_t)f)

/*
 * These macros can be used to access XLMAC_E2EFC_MODULE_HDR_1.
 */
#define READ_XLMAC_E2EFC_MODULE_HDR_1r(pa,p,r) bcmpmac_read(pa,p,XLMAC_E2EFC_MODULE_HDR_1r_OFFSET,0,XLMAC_E2EFC_MODULE_HDR_1r_SIZE,(r._xlmac_e2efc_module_hdr_1))
#define WRITE_XLMAC_E2EFC_MODULE_HDR_1r(pa,p,r) bcmpmac_write(pa,p,XLMAC_E2EFC_MODULE_HDR_1r_OFFSET,0,XLMAC_E2EFC_MODULE_HDR_1r_SIZE,&(r._xlmac_e2efc_module_hdr_1))

/*******************************************************************************
 * End of 'XLMAC_E2EFC_MODULE_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2E_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_E2E_CTRLr_OFFSET 0x10062200

#define XLMAC_E2E_CTRLr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_E2E_CTRL.
 */
typedef union XLMAC_E2E_CTRLr_s {
    uint32_t v[2];
    uint32_t xlmac_e2e_ctrl[2];
    uint32_t _xlmac_e2e_ctrl;
} XLMAC_E2E_CTRLr_t;

#define XLMAC_E2E_CTRLr_CLR(r) sal_memset(&((r).xlmac_e2e_ctrl[0]), 0, sizeof(XLMAC_E2E_CTRLr_t))
#define XLMAC_E2E_CTRLr_SET(r,i,d) (r).xlmac_e2e_ctrl[i] = d
#define XLMAC_E2E_CTRLr_GET(r,i) (r).xlmac_e2e_ctrl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_E2E_CTRLr_E2E_ENABLEf_GET(r) (((r).xlmac_e2e_ctrl[0]) & 0x1)
#define XLMAC_E2E_CTRLr_E2E_ENABLEf_SET(r,f) (r).xlmac_e2e_ctrl[0]=(((r).xlmac_e2e_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_E2E_CTRLr_HONOR_PAUSE_FOR_E2Ef_GET(r) ((((r).xlmac_e2e_ctrl[0]) >> 1) & 0x1)
#define XLMAC_E2E_CTRLr_HONOR_PAUSE_FOR_E2Ef_SET(r,f) (r).xlmac_e2e_ctrl[0]=(((r).xlmac_e2e_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLMAC_E2E_CTRLr_E2ECC_DUAL_MODID_ENf_GET(r) ((((r).xlmac_e2e_ctrl[0]) >> 2) & 0x1)
#define XLMAC_E2E_CTRLr_E2ECC_DUAL_MODID_ENf_SET(r,f) (r).xlmac_e2e_ctrl[0]=(((r).xlmac_e2e_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLMAC_E2E_CTRLr_E2ECC_LEGACY_IMP_ENf_GET(r) ((((r).xlmac_e2e_ctrl[0]) >> 3) & 0x1)
#define XLMAC_E2E_CTRLr_E2ECC_LEGACY_IMP_ENf_SET(r,f) (r).xlmac_e2e_ctrl[0]=(((r).xlmac_e2e_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLMAC_E2E_CTRLr_E2EFC_DUAL_MODID_ENf_GET(r) ((((r).xlmac_e2e_ctrl[0]) >> 4) & 0x1)
#define XLMAC_E2E_CTRLr_E2EFC_DUAL_MODID_ENf_SET(r,f) (r).xlmac_e2e_ctrl[0]=(((r).xlmac_e2e_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))

/*
 * These macros can be used to access XLMAC_E2E_CTRL.
 */
#define READ_XLMAC_E2E_CTRLr(pa,p,r) bcmpmac_read(pa,p,XLMAC_E2E_CTRLr_OFFSET,0,XLMAC_E2E_CTRLr_SIZE,(r._xlmac_e2e_ctrl))
#define WRITE_XLMAC_E2E_CTRLr(pa,p,r) bcmpmac_write(pa,p,XLMAC_E2E_CTRLr_OFFSET,0,XLMAC_E2E_CTRLr_SIZE,&(r._xlmac_e2e_ctrl))

/*******************************************************************************
 * End of 'XLMAC_E2E_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_ECC_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_ECC_CTRLr_OFFSET 0x10062e00

#define XLMAC_ECC_CTRLr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_ECC_CTRL.
 */
typedef union XLMAC_ECC_CTRLr_s {
    uint32_t v[2];
    uint32_t xlmac_ecc_ctrl[2];
    uint32_t _xlmac_ecc_ctrl;
} XLMAC_ECC_CTRLr_t;

#define XLMAC_ECC_CTRLr_CLR(r) sal_memset(&((r).xlmac_ecc_ctrl[0]), 0, sizeof(XLMAC_ECC_CTRLr_t))
#define XLMAC_ECC_CTRLr_SET(r,i,d) (r).xlmac_ecc_ctrl[i] = d
#define XLMAC_ECC_CTRLr_GET(r,i) (r).xlmac_ecc_ctrl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_ECC_CTRLr_RX_CDC_ECC_CTRL_ENf_GET(r) (((r).xlmac_ecc_ctrl[0]) & 0x1)
#define XLMAC_ECC_CTRLr_RX_CDC_ECC_CTRL_ENf_SET(r,f) (r).xlmac_ecc_ctrl[0]=(((r).xlmac_ecc_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_ECC_CTRLr_TX_CDC_ECC_CTRL_ENf_GET(r) ((((r).xlmac_ecc_ctrl[0]) >> 1) & 0x1)
#define XLMAC_ECC_CTRLr_TX_CDC_ECC_CTRL_ENf_SET(r,f) (r).xlmac_ecc_ctrl[0]=(((r).xlmac_ecc_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access XLMAC_ECC_CTRL.
 */
#define READ_XLMAC_ECC_CTRLr(pa,p,r) bcmpmac_read(pa,p,XLMAC_ECC_CTRLr_OFFSET,0,XLMAC_ECC_CTRLr_SIZE,(r._xlmac_ecc_ctrl))
#define WRITE_XLMAC_ECC_CTRLr(pa,p,r) bcmpmac_write(pa,p,XLMAC_ECC_CTRLr_OFFSET,0,XLMAC_ECC_CTRLr_SIZE,&(r._xlmac_ecc_ctrl))

/*******************************************************************************
 * End of 'XLMAC_ECC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_ECC_FORCE_DOUBLE_BIT_ERR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_OFFSET 0x10062f00

#define XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_ECC_FORCE_DOUBLE_BIT_ERR.
 */
typedef union XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_s {
    uint32_t v[2];
    uint32_t xlmac_ecc_force_double_bit_err[2];
    uint32_t _xlmac_ecc_force_double_bit_err;
} XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_t;

#define XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_CLR(r) sal_memset(&((r).xlmac_ecc_force_double_bit_err[0]), 0, sizeof(XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_t))
#define XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_SET(r,i,d) (r).xlmac_ecc_force_double_bit_err[i] = d
#define XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_GET(r,i) (r).xlmac_ecc_force_double_bit_err[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_RX_CDC_FORCE_DOUBLE_BIT_ERRf_GET(r) (((r).xlmac_ecc_force_double_bit_err[0]) & 0x1)
#define XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_RX_CDC_FORCE_DOUBLE_BIT_ERRf_SET(r,f) (r).xlmac_ecc_force_double_bit_err[0]=(((r).xlmac_ecc_force_double_bit_err[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_TX_CDC_FORCE_DOUBLE_BIT_ERRf_GET(r) ((((r).xlmac_ecc_force_double_bit_err[0]) >> 1) & 0x1)
#define XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_TX_CDC_FORCE_DOUBLE_BIT_ERRf_SET(r,f) (r).xlmac_ecc_force_double_bit_err[0]=(((r).xlmac_ecc_force_double_bit_err[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access XLMAC_ECC_FORCE_DOUBLE_BIT_ERR.
 */
#define READ_XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr(pa,p,r) bcmpmac_read(pa,p,XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_OFFSET,0,XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_SIZE,(r._xlmac_ecc_force_double_bit_err))
#define WRITE_XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr(pa,p,r) bcmpmac_write(pa,p,XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_OFFSET,0,XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_SIZE,&(r._xlmac_ecc_force_double_bit_err))

/*******************************************************************************
 * End of 'XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_ECC_FORCE_SINGLE_BIT_ERR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_OFFSET 0x10063000

#define XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_ECC_FORCE_SINGLE_BIT_ERR.
 */
typedef union XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_s {
    uint32_t v[2];
    uint32_t xlmac_ecc_force_single_bit_err[2];
    uint32_t _xlmac_ecc_force_single_bit_err;
} XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_t;

#define XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_CLR(r) sal_memset(&((r).xlmac_ecc_force_single_bit_err[0]), 0, sizeof(XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_t))
#define XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_SET(r,i,d) (r).xlmac_ecc_force_single_bit_err[i] = d
#define XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_GET(r,i) (r).xlmac_ecc_force_single_bit_err[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_RX_CDC_FORCE_SINGLE_BIT_ERRf_GET(r) (((r).xlmac_ecc_force_single_bit_err[0]) & 0x1)
#define XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_RX_CDC_FORCE_SINGLE_BIT_ERRf_SET(r,f) (r).xlmac_ecc_force_single_bit_err[0]=(((r).xlmac_ecc_force_single_bit_err[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_TX_CDC_FORCE_SINGLE_BIT_ERRf_GET(r) ((((r).xlmac_ecc_force_single_bit_err[0]) >> 1) & 0x1)
#define XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_TX_CDC_FORCE_SINGLE_BIT_ERRf_SET(r,f) (r).xlmac_ecc_force_single_bit_err[0]=(((r).xlmac_ecc_force_single_bit_err[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access XLMAC_ECC_FORCE_SINGLE_BIT_ERR.
 */
#define READ_XLMAC_ECC_FORCE_SINGLE_BIT_ERRr(pa,p,r) bcmpmac_read(pa,p,XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_OFFSET,0,XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_SIZE,(r._xlmac_ecc_force_single_bit_err))
#define WRITE_XLMAC_ECC_FORCE_SINGLE_BIT_ERRr(pa,p,r) bcmpmac_write(pa,p,XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_OFFSET,0,XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_SIZE,&(r._xlmac_ecc_force_single_bit_err))

/*******************************************************************************
 * End of 'XLMAC_ECC_FORCE_SINGLE_BIT_ERRr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_EEE_1_SEC_LINK_STATUS_TIMER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_OFFSET 0x10061b00

#define XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_EEE_1_SEC_LINK_STATUS_TIMER.
 */
typedef union XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_s {
    uint32_t v[2];
    uint32_t xlmac_eee_1_sec_link_status_timer[2];
    uint32_t _xlmac_eee_1_sec_link_status_timer;
} XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_t;

#define XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_CLR(r) sal_memset(&((r).xlmac_eee_1_sec_link_status_timer[0]), 0, sizeof(XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_t))
#define XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_SET(r,i,d) (r).xlmac_eee_1_sec_link_status_timer[i] = d
#define XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_GET(r,i) (r).xlmac_eee_1_sec_link_status_timer[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_ONE_SECOND_TIMERf_GET(r) (((r).xlmac_eee_1_sec_link_status_timer[0]) & 0xffffff)
#define XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_ONE_SECOND_TIMERf_SET(r,f) (r).xlmac_eee_1_sec_link_status_timer[0]=(((r).xlmac_eee_1_sec_link_status_timer[0] & ~((uint32_t)0xffffff)) | (((uint32_t)f) & 0xffffff))

/*
 * These macros can be used to access XLMAC_EEE_1_SEC_LINK_STATUS_TIMER.
 */
#define READ_XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr(pa,p,r) bcmpmac_read(pa,p,XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_OFFSET,0,XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_SIZE,(r._xlmac_eee_1_sec_link_status_timer))
#define WRITE_XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr(pa,p,r) bcmpmac_write(pa,p,XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_OFFSET,0,XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_SIZE,&(r._xlmac_eee_1_sec_link_status_timer))

/*******************************************************************************
 * End of 'XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_EEE_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_EEE_CTRLr_OFFSET 0x10061900

#define XLMAC_EEE_CTRLr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_EEE_CTRL.
 */
typedef union XLMAC_EEE_CTRLr_s {
    uint32_t v[2];
    uint32_t xlmac_eee_ctrl[2];
    uint32_t _xlmac_eee_ctrl;
} XLMAC_EEE_CTRLr_t;

#define XLMAC_EEE_CTRLr_CLR(r) sal_memset(&((r).xlmac_eee_ctrl[0]), 0, sizeof(XLMAC_EEE_CTRLr_t))
#define XLMAC_EEE_CTRLr_SET(r,i,d) (r).xlmac_eee_ctrl[i] = d
#define XLMAC_EEE_CTRLr_GET(r,i) (r).xlmac_eee_ctrl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_EEE_CTRLr_EEE_ENf_GET(r) (((r).xlmac_eee_ctrl[0]) & 0x1)
#define XLMAC_EEE_CTRLr_EEE_ENf_SET(r,f) (r).xlmac_eee_ctrl[0]=(((r).xlmac_eee_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_EEE_CTRLr_RSVDf_GET(r) ((((r).xlmac_eee_ctrl[0]) >> 1) & 0x1)
#define XLMAC_EEE_CTRLr_RSVDf_SET(r,f) (r).xlmac_eee_ctrl[0]=(((r).xlmac_eee_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access XLMAC_EEE_CTRL.
 */
#define READ_XLMAC_EEE_CTRLr(pa,p,r) bcmpmac_read(pa,p,XLMAC_EEE_CTRLr_OFFSET,0,XLMAC_EEE_CTRLr_SIZE,(r._xlmac_eee_ctrl))
#define WRITE_XLMAC_EEE_CTRLr(pa,p,r) bcmpmac_write(pa,p,XLMAC_EEE_CTRLr_OFFSET,0,XLMAC_EEE_CTRLr_SIZE,&(r._xlmac_eee_ctrl))

/*******************************************************************************
 * End of 'XLMAC_EEE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_EEE_TIMERS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_EEE_TIMERSr_OFFSET 0x10061a00

#define XLMAC_EEE_TIMERSr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_EEE_TIMERS.
 */
typedef union XLMAC_EEE_TIMERSr_s {
    uint32_t v[2];
    uint32_t xlmac_eee_timers[2];
    uint32_t _xlmac_eee_timers;
} XLMAC_EEE_TIMERSr_t;

#define XLMAC_EEE_TIMERSr_CLR(r) sal_memset(&((r).xlmac_eee_timers[0]), 0, sizeof(XLMAC_EEE_TIMERSr_t))
#define XLMAC_EEE_TIMERSr_SET(r,i,d) (r).xlmac_eee_timers[i] = d
#define XLMAC_EEE_TIMERSr_GET(r,i) (r).xlmac_eee_timers[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_EEE_TIMERSr_EEE_DELAY_ENTRY_TIMERf_GET(r) ((r).xlmac_eee_timers[0])
#define XLMAC_EEE_TIMERSr_EEE_DELAY_ENTRY_TIMERf_SET(r,f) (r).xlmac_eee_timers[0]=((uint32_t)f)
#define XLMAC_EEE_TIMERSr_XLMAC_EEE_TIMERS_LOf_GET(r) ((r).xlmac_eee_timers[0])
#define XLMAC_EEE_TIMERSr_XLMAC_EEE_TIMERS_LOf_SET(r,f) (r).xlmac_eee_timers[0]=((uint32_t)f)
#define XLMAC_EEE_TIMERSr_XLMAC_EEE_TIMERS_HIf_GET(r) ((r).xlmac_eee_timers[1])
#define XLMAC_EEE_TIMERSr_XLMAC_EEE_TIMERS_HIf_SET(r,f) (r).xlmac_eee_timers[1]=((uint32_t)f)
#define XLMAC_EEE_TIMERSr_EEE_WAKE_TIMERf_GET(r) (((r).xlmac_eee_timers[1]) & 0xffff)
#define XLMAC_EEE_TIMERSr_EEE_WAKE_TIMERf_SET(r,f) (r).xlmac_eee_timers[1]=(((r).xlmac_eee_timers[1] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define XLMAC_EEE_TIMERSr_EEE_REF_COUNTf_GET(r) ((((r).xlmac_eee_timers[1]) >> 16) & 0xffff)
#define XLMAC_EEE_TIMERSr_EEE_REF_COUNTf_SET(r,f) (r).xlmac_eee_timers[1]=(((r).xlmac_eee_timers[1] & ~((uint32_t)0xffff << 16)) | ((((uint32_t)f) & 0xffff) << 16))

/*
 * These macros can be used to access XLMAC_EEE_TIMERS.
 */
#define READ_XLMAC_EEE_TIMERSr(pa,p,r) bcmpmac_read(pa,p,XLMAC_EEE_TIMERSr_OFFSET,0,XLMAC_EEE_TIMERSr_SIZE,(r._xlmac_eee_timers))
#define WRITE_XLMAC_EEE_TIMERSr(pa,p,r) bcmpmac_write(pa,p,XLMAC_EEE_TIMERSr_OFFSET,0,XLMAC_EEE_TIMERSr_SIZE,&(r._xlmac_eee_timers))

/*******************************************************************************
 * End of 'XLMAC_EEE_TIMERSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_FIFO_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_FIFO_STATUSr_OFFSET 0x10061600

#define XLMAC_FIFO_STATUSr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_FIFO_STATUS.
 */
typedef union XLMAC_FIFO_STATUSr_s {
    uint32_t v[2];
    uint32_t xlmac_fifo_status[2];
    uint32_t _xlmac_fifo_status;
} XLMAC_FIFO_STATUSr_t;

#define XLMAC_FIFO_STATUSr_CLR(r) sal_memset(&((r).xlmac_fifo_status[0]), 0, sizeof(XLMAC_FIFO_STATUSr_t))
#define XLMAC_FIFO_STATUSr_SET(r,i,d) (r).xlmac_fifo_status[i] = d
#define XLMAC_FIFO_STATUSr_GET(r,i) (r).xlmac_fifo_status[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_FIFO_STATUSr_RSVD_1f_GET(r) (((r).xlmac_fifo_status[0]) & 0x1)
#define XLMAC_FIFO_STATUSr_RSVD_1f_SET(r,f) (r).xlmac_fifo_status[0]=(((r).xlmac_fifo_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_FIFO_STATUSr_RX_MSG_OVERFLOWf_GET(r) ((((r).xlmac_fifo_status[0]) >> 1) & 0x1)
#define XLMAC_FIFO_STATUSr_RX_MSG_OVERFLOWf_SET(r,f) (r).xlmac_fifo_status[0]=(((r).xlmac_fifo_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLMAC_FIFO_STATUSr_TX_PKT_UNDERFLOWf_GET(r) ((((r).xlmac_fifo_status[0]) >> 2) & 0x1)
#define XLMAC_FIFO_STATUSr_TX_PKT_UNDERFLOWf_SET(r,f) (r).xlmac_fifo_status[0]=(((r).xlmac_fifo_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLMAC_FIFO_STATUSr_TX_PKT_OVERFLOWf_GET(r) ((((r).xlmac_fifo_status[0]) >> 3) & 0x1)
#define XLMAC_FIFO_STATUSr_TX_PKT_OVERFLOWf_SET(r,f) (r).xlmac_fifo_status[0]=(((r).xlmac_fifo_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLMAC_FIFO_STATUSr_RSVD_2f_GET(r) ((((r).xlmac_fifo_status[0]) >> 4) & 0x1)
#define XLMAC_FIFO_STATUSr_RSVD_2f_SET(r,f) (r).xlmac_fifo_status[0]=(((r).xlmac_fifo_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define XLMAC_FIFO_STATUSr_TX_LLFC_MSG_OVERFLOWf_GET(r) ((((r).xlmac_fifo_status[0]) >> 5) & 0x1)
#define XLMAC_FIFO_STATUSr_TX_LLFC_MSG_OVERFLOWf_SET(r,f) (r).xlmac_fifo_status[0]=(((r).xlmac_fifo_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define XLMAC_FIFO_STATUSr_TX_TS_FIFO_OVERFLOWf_GET(r) ((((r).xlmac_fifo_status[0]) >> 6) & 0x1)
#define XLMAC_FIFO_STATUSr_TX_TS_FIFO_OVERFLOWf_SET(r,f) (r).xlmac_fifo_status[0]=(((r).xlmac_fifo_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define XLMAC_FIFO_STATUSr_RX_PKT_OVERFLOWf_GET(r) ((((r).xlmac_fifo_status[0]) >> 7) & 0x1)
#define XLMAC_FIFO_STATUSr_RX_PKT_OVERFLOWf_SET(r,f) (r).xlmac_fifo_status[0]=(((r).xlmac_fifo_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define XLMAC_FIFO_STATUSr_LINK_STATUSf_GET(r) ((((r).xlmac_fifo_status[0]) >> 8) & 0x1)
#define XLMAC_FIFO_STATUSr_LINK_STATUSf_SET(r,f) (r).xlmac_fifo_status[0]=(((r).xlmac_fifo_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*
 * These macros can be used to access XLMAC_FIFO_STATUS.
 */
#define READ_XLMAC_FIFO_STATUSr(pa,p,r) bcmpmac_read(pa,p,XLMAC_FIFO_STATUSr_OFFSET,0,XLMAC_FIFO_STATUSr_SIZE,(r._xlmac_fifo_status))
#define WRITE_XLMAC_FIFO_STATUSr(pa,p,r) bcmpmac_write(pa,p,XLMAC_FIFO_STATUSr_OFFSET,0,XLMAC_FIFO_STATUSr_SIZE,&(r._xlmac_fifo_status))

/*******************************************************************************
 * End of 'XLMAC_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_GMII_EEE_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_GMII_EEE_CTRLr_OFFSET 0x10061e00

#define XLMAC_GMII_EEE_CTRLr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_GMII_EEE_CTRL.
 */
typedef union XLMAC_GMII_EEE_CTRLr_s {
    uint32_t v[2];
    uint32_t xlmac_gmii_eee_ctrl[2];
    uint32_t _xlmac_gmii_eee_ctrl;
} XLMAC_GMII_EEE_CTRLr_t;

#define XLMAC_GMII_EEE_CTRLr_CLR(r) sal_memset(&((r).xlmac_gmii_eee_ctrl[0]), 0, sizeof(XLMAC_GMII_EEE_CTRLr_t))
#define XLMAC_GMII_EEE_CTRLr_SET(r,i,d) (r).xlmac_gmii_eee_ctrl[i] = d
#define XLMAC_GMII_EEE_CTRLr_GET(r,i) (r).xlmac_gmii_eee_ctrl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_GMII_EEE_CTRLr_GMII_LPI_PREDICT_THRESHOLDf_GET(r) (((r).xlmac_gmii_eee_ctrl[0]) & 0xffff)
#define XLMAC_GMII_EEE_CTRLr_GMII_LPI_PREDICT_THRESHOLDf_SET(r,f) (r).xlmac_gmii_eee_ctrl[0]=(((r).xlmac_gmii_eee_ctrl[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define XLMAC_GMII_EEE_CTRLr_GMII_LPI_PREDICT_MODE_ENf_GET(r) ((((r).xlmac_gmii_eee_ctrl[0]) >> 16) & 0x1)
#define XLMAC_GMII_EEE_CTRLr_GMII_LPI_PREDICT_MODE_ENf_SET(r,f) (r).xlmac_gmii_eee_ctrl[0]=(((r).xlmac_gmii_eee_ctrl[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))

/*
 * These macros can be used to access XLMAC_GMII_EEE_CTRL.
 */
#define READ_XLMAC_GMII_EEE_CTRLr(pa,p,r) bcmpmac_read(pa,p,XLMAC_GMII_EEE_CTRLr_OFFSET,0,XLMAC_GMII_EEE_CTRLr_SIZE,(r._xlmac_gmii_eee_ctrl))
#define WRITE_XLMAC_GMII_EEE_CTRLr(pa,p,r) bcmpmac_write(pa,p,XLMAC_GMII_EEE_CTRLr_OFFSET,0,XLMAC_GMII_EEE_CTRLr_SIZE,&(r._xlmac_gmii_eee_ctrl))

/*******************************************************************************
 * End of 'XLMAC_GMII_EEE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_HIGIG_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_HIGIG_HDR_0r_OFFSET 0x10061c00

#define XLMAC_HIGIG_HDR_0r_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_HIGIG_HDR_0.
 */
typedef union XLMAC_HIGIG_HDR_0r_s {
    uint32_t v[2];
    uint32_t xlmac_higig_hdr_0[2];
    uint32_t _xlmac_higig_hdr_0;
} XLMAC_HIGIG_HDR_0r_t;

#define XLMAC_HIGIG_HDR_0r_CLR(r) sal_memset(&((r).xlmac_higig_hdr_0[0]), 0, sizeof(XLMAC_HIGIG_HDR_0r_t))
#define XLMAC_HIGIG_HDR_0r_SET(r,i,d) (r).xlmac_higig_hdr_0[i] = d
#define XLMAC_HIGIG_HDR_0r_GET(r,i) (r).xlmac_higig_hdr_0[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_HIGIG_HDR_0r_HIGIG_HDR_0f_GET(r,a) bcmpmac_field_get((r).xlmac_higig_hdr_0,0,63,a)
#define XLMAC_HIGIG_HDR_0r_HIGIG_HDR_0f_SET(r,a) bcmpmac_field_set((r).xlmac_higig_hdr_0,0,63,a)
#define XLMAC_HIGIG_HDR_0r_HIGIG_HDR_0_LOf_GET(r) ((r).xlmac_higig_hdr_0[0])
#define XLMAC_HIGIG_HDR_0r_HIGIG_HDR_0_LOf_SET(r,f) (r).xlmac_higig_hdr_0[0]=((uint32_t)f)
#define XLMAC_HIGIG_HDR_0r_HIGIG_HDR_0_HIf_GET(r) ((r).xlmac_higig_hdr_0[1])
#define XLMAC_HIGIG_HDR_0r_HIGIG_HDR_0_HIf_SET(r,f) (r).xlmac_higig_hdr_0[1]=((uint32_t)f)

/*
 * These macros can be used to access XLMAC_HIGIG_HDR_0.
 */
#define READ_XLMAC_HIGIG_HDR_0r(pa,p,r) bcmpmac_read(pa,p,XLMAC_HIGIG_HDR_0r_OFFSET,0,XLMAC_HIGIG_HDR_0r_SIZE,(r._xlmac_higig_hdr_0))
#define WRITE_XLMAC_HIGIG_HDR_0r(pa,p,r) bcmpmac_write(pa,p,XLMAC_HIGIG_HDR_0r_OFFSET,0,XLMAC_HIGIG_HDR_0r_SIZE,&(r._xlmac_higig_hdr_0))

/*******************************************************************************
 * End of 'XLMAC_HIGIG_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_HIGIG_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_HIGIG_HDR_1r_OFFSET 0x10061d00

#define XLMAC_HIGIG_HDR_1r_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_HIGIG_HDR_1.
 */
typedef union XLMAC_HIGIG_HDR_1r_s {
    uint32_t v[2];
    uint32_t xlmac_higig_hdr_1[2];
    uint32_t _xlmac_higig_hdr_1;
} XLMAC_HIGIG_HDR_1r_t;

#define XLMAC_HIGIG_HDR_1r_CLR(r) sal_memset(&((r).xlmac_higig_hdr_1[0]), 0, sizeof(XLMAC_HIGIG_HDR_1r_t))
#define XLMAC_HIGIG_HDR_1r_SET(r,i,d) (r).xlmac_higig_hdr_1[i] = d
#define XLMAC_HIGIG_HDR_1r_GET(r,i) (r).xlmac_higig_hdr_1[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_HIGIG_HDR_1r_HIGIG_HDR_1f_GET(r,a) bcmpmac_field_get((r).xlmac_higig_hdr_1,0,63,a)
#define XLMAC_HIGIG_HDR_1r_HIGIG_HDR_1f_SET(r,a) bcmpmac_field_set((r).xlmac_higig_hdr_1,0,63,a)
#define XLMAC_HIGIG_HDR_1r_HIGIG_HDR_1_LOf_GET(r) ((r).xlmac_higig_hdr_1[0])
#define XLMAC_HIGIG_HDR_1r_HIGIG_HDR_1_LOf_SET(r,f) (r).xlmac_higig_hdr_1[0]=((uint32_t)f)
#define XLMAC_HIGIG_HDR_1r_HIGIG_HDR_1_HIf_GET(r) ((r).xlmac_higig_hdr_1[1])
#define XLMAC_HIGIG_HDR_1r_HIGIG_HDR_1_HIf_SET(r,f) (r).xlmac_higig_hdr_1[1]=((uint32_t)f)

/*
 * These macros can be used to access XLMAC_HIGIG_HDR_1.
 */
#define READ_XLMAC_HIGIG_HDR_1r(pa,p,r) bcmpmac_read(pa,p,XLMAC_HIGIG_HDR_1r_OFFSET,0,XLMAC_HIGIG_HDR_1r_SIZE,(r._xlmac_higig_hdr_1))
#define WRITE_XLMAC_HIGIG_HDR_1r(pa,p,r) bcmpmac_write(pa,p,XLMAC_HIGIG_HDR_1r_OFFSET,0,XLMAC_HIGIG_HDR_1r_SIZE,&(r._xlmac_higig_hdr_1))

/*******************************************************************************
 * End of 'XLMAC_HIGIG_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_INTR_ENABLE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_INTR_ENABLEr_OFFSET 0x10063500

#define XLMAC_INTR_ENABLEr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_INTR_ENABLE.
 */
typedef union XLMAC_INTR_ENABLEr_s {
    uint32_t v[2];
    uint32_t xlmac_intr_enable[2];
    uint32_t _xlmac_intr_enable;
} XLMAC_INTR_ENABLEr_t;

#define XLMAC_INTR_ENABLEr_CLR(r) sal_memset(&((r).xlmac_intr_enable[0]), 0, sizeof(XLMAC_INTR_ENABLEr_t))
#define XLMAC_INTR_ENABLEr_SET(r,i,d) (r).xlmac_intr_enable[i] = d
#define XLMAC_INTR_ENABLEr_GET(r,i) (r).xlmac_intr_enable[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_INTR_ENABLEr_EN_TX_PKT_UNDERFLOWf_GET(r) (((r).xlmac_intr_enable[0]) & 0x1)
#define XLMAC_INTR_ENABLEr_EN_TX_PKT_UNDERFLOWf_SET(r,f) (r).xlmac_intr_enable[0]=(((r).xlmac_intr_enable[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_INTR_ENABLEr_EN_TX_PKT_OVERFLOWf_GET(r) ((((r).xlmac_intr_enable[0]) >> 1) & 0x1)
#define XLMAC_INTR_ENABLEr_EN_TX_PKT_OVERFLOWf_SET(r,f) (r).xlmac_intr_enable[0]=(((r).xlmac_intr_enable[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLMAC_INTR_ENABLEr_EN_TX_LLFC_MSG_OVERFLOWf_GET(r) ((((r).xlmac_intr_enable[0]) >> 2) & 0x1)
#define XLMAC_INTR_ENABLEr_EN_TX_LLFC_MSG_OVERFLOWf_SET(r,f) (r).xlmac_intr_enable[0]=(((r).xlmac_intr_enable[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLMAC_INTR_ENABLEr_EN_TX_TS_FIFO_OVERFLOWf_GET(r) ((((r).xlmac_intr_enable[0]) >> 3) & 0x1)
#define XLMAC_INTR_ENABLEr_EN_TX_TS_FIFO_OVERFLOWf_SET(r,f) (r).xlmac_intr_enable[0]=(((r).xlmac_intr_enable[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLMAC_INTR_ENABLEr_EN_RX_PKT_OVERFLOWf_GET(r) ((((r).xlmac_intr_enable[0]) >> 4) & 0x1)
#define XLMAC_INTR_ENABLEr_EN_RX_PKT_OVERFLOWf_SET(r,f) (r).xlmac_intr_enable[0]=(((r).xlmac_intr_enable[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define XLMAC_INTR_ENABLEr_EN_RX_MSG_OVERFLOWf_GET(r) ((((r).xlmac_intr_enable[0]) >> 5) & 0x1)
#define XLMAC_INTR_ENABLEr_EN_RX_MSG_OVERFLOWf_SET(r,f) (r).xlmac_intr_enable[0]=(((r).xlmac_intr_enable[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define XLMAC_INTR_ENABLEr_EN_TX_CDC_SINGLE_BIT_ERRf_GET(r) ((((r).xlmac_intr_enable[0]) >> 6) & 0x1)
#define XLMAC_INTR_ENABLEr_EN_TX_CDC_SINGLE_BIT_ERRf_SET(r,f) (r).xlmac_intr_enable[0]=(((r).xlmac_intr_enable[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define XLMAC_INTR_ENABLEr_EN_TX_CDC_DOUBLE_BIT_ERRf_GET(r) ((((r).xlmac_intr_enable[0]) >> 7) & 0x1)
#define XLMAC_INTR_ENABLEr_EN_TX_CDC_DOUBLE_BIT_ERRf_SET(r,f) (r).xlmac_intr_enable[0]=(((r).xlmac_intr_enable[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define XLMAC_INTR_ENABLEr_EN_RX_CDC_SINGLE_BIT_ERRf_GET(r) ((((r).xlmac_intr_enable[0]) >> 8) & 0x1)
#define XLMAC_INTR_ENABLEr_EN_RX_CDC_SINGLE_BIT_ERRf_SET(r,f) (r).xlmac_intr_enable[0]=(((r).xlmac_intr_enable[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define XLMAC_INTR_ENABLEr_EN_RX_CDC_DOUBLE_BIT_ERRf_GET(r) ((((r).xlmac_intr_enable[0]) >> 9) & 0x1)
#define XLMAC_INTR_ENABLEr_EN_RX_CDC_DOUBLE_BIT_ERRf_SET(r,f) (r).xlmac_intr_enable[0]=(((r).xlmac_intr_enable[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define XLMAC_INTR_ENABLEr_EN_LOCAL_FAULT_STATUSf_GET(r) ((((r).xlmac_intr_enable[0]) >> 10) & 0x1)
#define XLMAC_INTR_ENABLEr_EN_LOCAL_FAULT_STATUSf_SET(r,f) (r).xlmac_intr_enable[0]=(((r).xlmac_intr_enable[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define XLMAC_INTR_ENABLEr_EN_REMOTE_FAULT_STATUSf_GET(r) ((((r).xlmac_intr_enable[0]) >> 11) & 0x1)
#define XLMAC_INTR_ENABLEr_EN_REMOTE_FAULT_STATUSf_SET(r,f) (r).xlmac_intr_enable[0]=(((r).xlmac_intr_enable[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define XLMAC_INTR_ENABLEr_EN_LINK_INTERRUPTION_STATUSf_GET(r) ((((r).xlmac_intr_enable[0]) >> 12) & 0x1)
#define XLMAC_INTR_ENABLEr_EN_LINK_INTERRUPTION_STATUSf_SET(r,f) (r).xlmac_intr_enable[0]=(((r).xlmac_intr_enable[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define XLMAC_INTR_ENABLEr_EN_TS_ENTRY_VALIDf_GET(r) ((((r).xlmac_intr_enable[0]) >> 13) & 0x1)
#define XLMAC_INTR_ENABLEr_EN_TS_ENTRY_VALIDf_SET(r,f) (r).xlmac_intr_enable[0]=(((r).xlmac_intr_enable[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*
 * These macros can be used to access XLMAC_INTR_ENABLE.
 */
#define READ_XLMAC_INTR_ENABLEr(pa,p,r) bcmpmac_read(pa,p,XLMAC_INTR_ENABLEr_OFFSET,0,XLMAC_INTR_ENABLEr_SIZE,(r._xlmac_intr_enable))
#define WRITE_XLMAC_INTR_ENABLEr(pa,p,r) bcmpmac_write(pa,p,XLMAC_INTR_ENABLEr_OFFSET,0,XLMAC_INTR_ENABLEr_SIZE,&(r._xlmac_intr_enable))

/*******************************************************************************
 * End of 'XLMAC_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_INTR_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_INTR_STATUSr_OFFSET 0x10063400

#define XLMAC_INTR_STATUSr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_INTR_STATUS.
 */
typedef union XLMAC_INTR_STATUSr_s {
    uint32_t v[2];
    uint32_t xlmac_intr_status[2];
    uint32_t _xlmac_intr_status;
} XLMAC_INTR_STATUSr_t;

#define XLMAC_INTR_STATUSr_CLR(r) sal_memset(&((r).xlmac_intr_status[0]), 0, sizeof(XLMAC_INTR_STATUSr_t))
#define XLMAC_INTR_STATUSr_SET(r,i,d) (r).xlmac_intr_status[i] = d
#define XLMAC_INTR_STATUSr_GET(r,i) (r).xlmac_intr_status[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_INTR_STATUSr_SUM_TX_PKT_UNDERFLOWf_GET(r) (((r).xlmac_intr_status[0]) & 0x1)
#define XLMAC_INTR_STATUSr_SUM_TX_PKT_UNDERFLOWf_SET(r,f) (r).xlmac_intr_status[0]=(((r).xlmac_intr_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_INTR_STATUSr_SUM_TX_PKT_OVERFLOWf_GET(r) ((((r).xlmac_intr_status[0]) >> 1) & 0x1)
#define XLMAC_INTR_STATUSr_SUM_TX_PKT_OVERFLOWf_SET(r,f) (r).xlmac_intr_status[0]=(((r).xlmac_intr_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLMAC_INTR_STATUSr_SUM_TX_LLFC_MSG_OVERFLOWf_GET(r) ((((r).xlmac_intr_status[0]) >> 2) & 0x1)
#define XLMAC_INTR_STATUSr_SUM_TX_LLFC_MSG_OVERFLOWf_SET(r,f) (r).xlmac_intr_status[0]=(((r).xlmac_intr_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLMAC_INTR_STATUSr_SUM_TX_TS_FIFO_OVERFLOWf_GET(r) ((((r).xlmac_intr_status[0]) >> 3) & 0x1)
#define XLMAC_INTR_STATUSr_SUM_TX_TS_FIFO_OVERFLOWf_SET(r,f) (r).xlmac_intr_status[0]=(((r).xlmac_intr_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLMAC_INTR_STATUSr_SUM_RX_PKT_OVERFLOWf_GET(r) ((((r).xlmac_intr_status[0]) >> 4) & 0x1)
#define XLMAC_INTR_STATUSr_SUM_RX_PKT_OVERFLOWf_SET(r,f) (r).xlmac_intr_status[0]=(((r).xlmac_intr_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define XLMAC_INTR_STATUSr_SUM_RX_MSG_OVERFLOWf_GET(r) ((((r).xlmac_intr_status[0]) >> 5) & 0x1)
#define XLMAC_INTR_STATUSr_SUM_RX_MSG_OVERFLOWf_SET(r,f) (r).xlmac_intr_status[0]=(((r).xlmac_intr_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define XLMAC_INTR_STATUSr_SUM_TX_CDC_SINGLE_BIT_ERRf_GET(r) ((((r).xlmac_intr_status[0]) >> 6) & 0x1)
#define XLMAC_INTR_STATUSr_SUM_TX_CDC_SINGLE_BIT_ERRf_SET(r,f) (r).xlmac_intr_status[0]=(((r).xlmac_intr_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define XLMAC_INTR_STATUSr_SUM_TX_CDC_DOUBLE_BIT_ERRf_GET(r) ((((r).xlmac_intr_status[0]) >> 7) & 0x1)
#define XLMAC_INTR_STATUSr_SUM_TX_CDC_DOUBLE_BIT_ERRf_SET(r,f) (r).xlmac_intr_status[0]=(((r).xlmac_intr_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define XLMAC_INTR_STATUSr_SUM_RX_CDC_SINGLE_BIT_ERRf_GET(r) ((((r).xlmac_intr_status[0]) >> 8) & 0x1)
#define XLMAC_INTR_STATUSr_SUM_RX_CDC_SINGLE_BIT_ERRf_SET(r,f) (r).xlmac_intr_status[0]=(((r).xlmac_intr_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define XLMAC_INTR_STATUSr_SUM_RX_CDC_DOUBLE_BIT_ERRf_GET(r) ((((r).xlmac_intr_status[0]) >> 9) & 0x1)
#define XLMAC_INTR_STATUSr_SUM_RX_CDC_DOUBLE_BIT_ERRf_SET(r,f) (r).xlmac_intr_status[0]=(((r).xlmac_intr_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define XLMAC_INTR_STATUSr_SUM_LOCAL_FAULT_STATUSf_GET(r) ((((r).xlmac_intr_status[0]) >> 10) & 0x1)
#define XLMAC_INTR_STATUSr_SUM_LOCAL_FAULT_STATUSf_SET(r,f) (r).xlmac_intr_status[0]=(((r).xlmac_intr_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define XLMAC_INTR_STATUSr_SUM_REMOTE_FAULT_STATUSf_GET(r) ((((r).xlmac_intr_status[0]) >> 11) & 0x1)
#define XLMAC_INTR_STATUSr_SUM_REMOTE_FAULT_STATUSf_SET(r,f) (r).xlmac_intr_status[0]=(((r).xlmac_intr_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define XLMAC_INTR_STATUSr_SUM_LINK_INTERRUPTION_STATUSf_GET(r) ((((r).xlmac_intr_status[0]) >> 12) & 0x1)
#define XLMAC_INTR_STATUSr_SUM_LINK_INTERRUPTION_STATUSf_SET(r,f) (r).xlmac_intr_status[0]=(((r).xlmac_intr_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define XLMAC_INTR_STATUSr_SUM_TS_ENTRY_VALIDf_GET(r) ((((r).xlmac_intr_status[0]) >> 13) & 0x1)
#define XLMAC_INTR_STATUSr_SUM_TS_ENTRY_VALIDf_SET(r,f) (r).xlmac_intr_status[0]=(((r).xlmac_intr_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*
 * These macros can be used to access XLMAC_INTR_STATUS.
 */
#define READ_XLMAC_INTR_STATUSr(pa,p,r) bcmpmac_read(pa,p,XLMAC_INTR_STATUSr_OFFSET,0,XLMAC_INTR_STATUSr_SIZE,(r._xlmac_intr_status))
#define WRITE_XLMAC_INTR_STATUSr(pa,p,r) bcmpmac_write(pa,p,XLMAC_INTR_STATUSr_OFFSET,0,XLMAC_INTR_STATUSr_SIZE,&(r._xlmac_intr_status))

/*******************************************************************************
 * End of 'XLMAC_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_LAG_FAILOVER_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_LAG_FAILOVER_STATUSr_OFFSET 0x10061800

#define XLMAC_LAG_FAILOVER_STATUSr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_LAG_FAILOVER_STATUS.
 */
typedef union XLMAC_LAG_FAILOVER_STATUSr_s {
    uint32_t v[2];
    uint32_t xlmac_lag_failover_status[2];
    uint32_t _xlmac_lag_failover_status;
} XLMAC_LAG_FAILOVER_STATUSr_t;

#define XLMAC_LAG_FAILOVER_STATUSr_CLR(r) sal_memset(&((r).xlmac_lag_failover_status[0]), 0, sizeof(XLMAC_LAG_FAILOVER_STATUSr_t))
#define XLMAC_LAG_FAILOVER_STATUSr_SET(r,i,d) (r).xlmac_lag_failover_status[i] = d
#define XLMAC_LAG_FAILOVER_STATUSr_GET(r,i) (r).xlmac_lag_failover_status[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_LAG_FAILOVER_STATUSr_LAG_FAILOVER_LOOPBACKf_GET(r) (((r).xlmac_lag_failover_status[0]) & 0x1)
#define XLMAC_LAG_FAILOVER_STATUSr_LAG_FAILOVER_LOOPBACKf_SET(r,f) (r).xlmac_lag_failover_status[0]=(((r).xlmac_lag_failover_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_LAG_FAILOVER_STATUSr_RSVDf_GET(r) ((((r).xlmac_lag_failover_status[0]) >> 1) & 0x1)
#define XLMAC_LAG_FAILOVER_STATUSr_RSVDf_SET(r,f) (r).xlmac_lag_failover_status[0]=(((r).xlmac_lag_failover_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access XLMAC_LAG_FAILOVER_STATUS.
 */
#define READ_XLMAC_LAG_FAILOVER_STATUSr(pa,p,r) bcmpmac_read(pa,p,XLMAC_LAG_FAILOVER_STATUSr_OFFSET,0,XLMAC_LAG_FAILOVER_STATUSr_SIZE,(r._xlmac_lag_failover_status))
#define WRITE_XLMAC_LAG_FAILOVER_STATUSr(pa,p,r) bcmpmac_write(pa,p,XLMAC_LAG_FAILOVER_STATUSr_OFFSET,0,XLMAC_LAG_FAILOVER_STATUSr_SIZE,&(r._xlmac_lag_failover_status))

/*******************************************************************************
 * End of 'XLMAC_LAG_FAILOVER_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_LLFC_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_LLFC_CTRLr_OFFSET 0x10061100

#define XLMAC_LLFC_CTRLr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_LLFC_CTRL.
 */
typedef union XLMAC_LLFC_CTRLr_s {
    uint32_t v[2];
    uint32_t xlmac_llfc_ctrl[2];
    uint32_t _xlmac_llfc_ctrl;
} XLMAC_LLFC_CTRLr_t;

#define XLMAC_LLFC_CTRLr_CLR(r) sal_memset(&((r).xlmac_llfc_ctrl[0]), 0, sizeof(XLMAC_LLFC_CTRLr_t))
#define XLMAC_LLFC_CTRLr_SET(r,i,d) (r).xlmac_llfc_ctrl[i] = d
#define XLMAC_LLFC_CTRLr_GET(r,i) (r).xlmac_llfc_ctrl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_LLFC_CTRLr_TX_LLFC_ENf_GET(r) (((r).xlmac_llfc_ctrl[0]) & 0x1)
#define XLMAC_LLFC_CTRLr_TX_LLFC_ENf_SET(r,f) (r).xlmac_llfc_ctrl[0]=(((r).xlmac_llfc_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_LLFC_CTRLr_RX_LLFC_ENf_GET(r) ((((r).xlmac_llfc_ctrl[0]) >> 1) & 0x1)
#define XLMAC_LLFC_CTRLr_RX_LLFC_ENf_SET(r,f) (r).xlmac_llfc_ctrl[0]=(((r).xlmac_llfc_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLMAC_LLFC_CTRLr_LLFC_IN_IPG_ONLYf_GET(r) ((((r).xlmac_llfc_ctrl[0]) >> 2) & 0x1)
#define XLMAC_LLFC_CTRLr_LLFC_IN_IPG_ONLYf_SET(r,f) (r).xlmac_llfc_ctrl[0]=(((r).xlmac_llfc_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLMAC_LLFC_CTRLr_LLFC_CUT_THROUGH_MODEf_GET(r) ((((r).xlmac_llfc_ctrl[0]) >> 3) & 0x1)
#define XLMAC_LLFC_CTRLr_LLFC_CUT_THROUGH_MODEf_SET(r,f) (r).xlmac_llfc_ctrl[0]=(((r).xlmac_llfc_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLMAC_LLFC_CTRLr_LLFC_CRC_IGNOREf_GET(r) ((((r).xlmac_llfc_ctrl[0]) >> 4) & 0x1)
#define XLMAC_LLFC_CTRLr_LLFC_CRC_IGNOREf_SET(r,f) (r).xlmac_llfc_ctrl[0]=(((r).xlmac_llfc_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define XLMAC_LLFC_CTRLr_NO_SOM_FOR_CRC_LLFCf_GET(r) ((((r).xlmac_llfc_ctrl[0]) >> 5) & 0x1)
#define XLMAC_LLFC_CTRLr_NO_SOM_FOR_CRC_LLFCf_SET(r,f) (r).xlmac_llfc_ctrl[0]=(((r).xlmac_llfc_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define XLMAC_LLFC_CTRLr_LLFC_IMGf_GET(r) ((((r).xlmac_llfc_ctrl[0]) >> 6) & 0xff)
#define XLMAC_LLFC_CTRLr_LLFC_IMGf_SET(r,f) (r).xlmac_llfc_ctrl[0]=(((r).xlmac_llfc_ctrl[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6))

/*
 * These macros can be used to access XLMAC_LLFC_CTRL.
 */
#define READ_XLMAC_LLFC_CTRLr(pa,p,r) bcmpmac_read(pa,p,XLMAC_LLFC_CTRLr_OFFSET,0,XLMAC_LLFC_CTRLr_SIZE,(r._xlmac_llfc_ctrl))
#define WRITE_XLMAC_LLFC_CTRLr(pa,p,r) bcmpmac_write(pa,p,XLMAC_LLFC_CTRLr_OFFSET,0,XLMAC_LLFC_CTRLr_SIZE,&(r._xlmac_llfc_ctrl))

/*******************************************************************************
 * End of 'XLMAC_LLFC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_MEM_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_MEM_CTRLr_OFFSET 0x10062d00

#define XLMAC_MEM_CTRLr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_MEM_CTRL.
 */
typedef union XLMAC_MEM_CTRLr_s {
    uint32_t v[2];
    uint32_t xlmac_mem_ctrl[2];
    uint32_t _xlmac_mem_ctrl;
} XLMAC_MEM_CTRLr_t;

#define XLMAC_MEM_CTRLr_CLR(r) sal_memset(&((r).xlmac_mem_ctrl[0]), 0, sizeof(XLMAC_MEM_CTRLr_t))
#define XLMAC_MEM_CTRLr_SET(r,i,d) (r).xlmac_mem_ctrl[i] = d
#define XLMAC_MEM_CTRLr_GET(r,i) (r).xlmac_mem_ctrl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_MEM_CTRLr_RX_CDC_MEM_CTRL_TMf_GET(r) (((r).xlmac_mem_ctrl[0]) & 0xfff)
#define XLMAC_MEM_CTRLr_RX_CDC_MEM_CTRL_TMf_SET(r,f) (r).xlmac_mem_ctrl[0]=(((r).xlmac_mem_ctrl[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define XLMAC_MEM_CTRLr_TX_CDC_MEM_CTRL_TMf_GET(r) ((((r).xlmac_mem_ctrl[0]) >> 12) & 0xfff)
#define XLMAC_MEM_CTRLr_TX_CDC_MEM_CTRL_TMf_SET(r,f) (r).xlmac_mem_ctrl[0]=(((r).xlmac_mem_ctrl[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))

/*
 * These macros can be used to access XLMAC_MEM_CTRL.
 */
#define READ_XLMAC_MEM_CTRLr(pa,p,r) bcmpmac_read(pa,p,XLMAC_MEM_CTRLr_OFFSET,0,XLMAC_MEM_CTRLr_SIZE,(r._xlmac_mem_ctrl))
#define WRITE_XLMAC_MEM_CTRLr(pa,p,r) bcmpmac_write(pa,p,XLMAC_MEM_CTRLr_OFFSET,0,XLMAC_MEM_CTRLr_SIZE,&(r._xlmac_mem_ctrl))

/*******************************************************************************
 * End of 'XLMAC_MEM_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_MODE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_MODEr_OFFSET 0x10060200

#define XLMAC_MODEr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_MODE.
 */
typedef union XLMAC_MODEr_s {
    uint32_t v[2];
    uint32_t xlmac_mode[2];
    uint32_t _xlmac_mode;
} XLMAC_MODEr_t;

#define XLMAC_MODEr_CLR(r) sal_memset(&((r).xlmac_mode[0]), 0, sizeof(XLMAC_MODEr_t))
#define XLMAC_MODEr_SET(r,i,d) (r).xlmac_mode[i] = d
#define XLMAC_MODEr_GET(r,i) (r).xlmac_mode[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_MODEr_HDR_MODEf_GET(r) (((r).xlmac_mode[0]) & 0x7)
#define XLMAC_MODEr_HDR_MODEf_SET(r,f) (r).xlmac_mode[0]=(((r).xlmac_mode[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define XLMAC_MODEr_NO_SOP_FOR_CRC_HGf_GET(r) ((((r).xlmac_mode[0]) >> 3) & 0x1)
#define XLMAC_MODEr_NO_SOP_FOR_CRC_HGf_SET(r,f) (r).xlmac_mode[0]=(((r).xlmac_mode[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLMAC_MODEr_SPEED_MODEf_GET(r) ((((r).xlmac_mode[0]) >> 4) & 0x7)
#define XLMAC_MODEr_SPEED_MODEf_SET(r,f) (r).xlmac_mode[0]=(((r).xlmac_mode[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))

/*
 * These macros can be used to access XLMAC_MODE.
 */
#define READ_XLMAC_MODEr(pa,p,r) bcmpmac_read(pa,p,XLMAC_MODEr_OFFSET,0,XLMAC_MODEr_SIZE,(r._xlmac_mode))
#define WRITE_XLMAC_MODEr(pa,p,r) bcmpmac_write(pa,p,XLMAC_MODEr_OFFSET,0,XLMAC_MODEr_SIZE,&(r._xlmac_mode))

/*******************************************************************************
 * End of 'XLMAC_MODEr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PAUSE_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_PAUSE_CTRLr_OFFSET 0x10060c00

#define XLMAC_PAUSE_CTRLr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_PAUSE_CTRL.
 */
typedef union XLMAC_PAUSE_CTRLr_s {
    uint32_t v[2];
    uint32_t xlmac_pause_ctrl[2];
    uint32_t _xlmac_pause_ctrl;
} XLMAC_PAUSE_CTRLr_t;

#define XLMAC_PAUSE_CTRLr_CLR(r) sal_memset(&((r).xlmac_pause_ctrl[0]), 0, sizeof(XLMAC_PAUSE_CTRLr_t))
#define XLMAC_PAUSE_CTRLr_SET(r,i,d) (r).xlmac_pause_ctrl[i] = d
#define XLMAC_PAUSE_CTRLr_GET(r,i) (r).xlmac_pause_ctrl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_PAUSE_CTRLr_XLMAC_PAUSE_CTRL_LOf_GET(r) ((r).xlmac_pause_ctrl[0])
#define XLMAC_PAUSE_CTRLr_XLMAC_PAUSE_CTRL_LOf_SET(r,f) (r).xlmac_pause_ctrl[0]=((uint32_t)f)
#define XLMAC_PAUSE_CTRLr_PAUSE_REFRESH_TIMERf_GET(r) (((r).xlmac_pause_ctrl[0]) & 0xffff)
#define XLMAC_PAUSE_CTRLr_PAUSE_REFRESH_TIMERf_SET(r,f) (r).xlmac_pause_ctrl[0]=(((r).xlmac_pause_ctrl[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define XLMAC_PAUSE_CTRLr_PAUSE_REFRESH_ENf_GET(r) ((((r).xlmac_pause_ctrl[0]) >> 16) & 0x1)
#define XLMAC_PAUSE_CTRLr_PAUSE_REFRESH_ENf_SET(r,f) (r).xlmac_pause_ctrl[0]=(((r).xlmac_pause_ctrl[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define XLMAC_PAUSE_CTRLr_TX_PAUSE_ENf_GET(r) ((((r).xlmac_pause_ctrl[0]) >> 17) & 0x1)
#define XLMAC_PAUSE_CTRLr_TX_PAUSE_ENf_SET(r,f) (r).xlmac_pause_ctrl[0]=(((r).xlmac_pause_ctrl[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define XLMAC_PAUSE_CTRLr_RX_PAUSE_ENf_GET(r) ((((r).xlmac_pause_ctrl[0]) >> 18) & 0x1)
#define XLMAC_PAUSE_CTRLr_RX_PAUSE_ENf_SET(r,f) (r).xlmac_pause_ctrl[0]=(((r).xlmac_pause_ctrl[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define XLMAC_PAUSE_CTRLr_RSVD_1f_GET(r) ((((r).xlmac_pause_ctrl[0]) >> 19) & 0x1)
#define XLMAC_PAUSE_CTRLr_RSVD_1f_SET(r,f) (r).xlmac_pause_ctrl[0]=(((r).xlmac_pause_ctrl[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define XLMAC_PAUSE_CTRLr_RSVD_2f_GET(r) ((((r).xlmac_pause_ctrl[0]) >> 20) & 0x1)
#define XLMAC_PAUSE_CTRLr_RSVD_2f_SET(r,f) (r).xlmac_pause_ctrl[0]=(((r).xlmac_pause_ctrl[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define XLMAC_PAUSE_CTRLr_PAUSE_XOFF_TIMERf_GET(r) bcmpmac_field32_get((r).xlmac_pause_ctrl,21,36)
#define XLMAC_PAUSE_CTRLr_PAUSE_XOFF_TIMERf_SET(r,f) bcmpmac_field32_set((r).xlmac_pause_ctrl,21,36,f)
#define XLMAC_PAUSE_CTRLr_XLMAC_PAUSE_CTRL_HIf_GET(r) (((r).xlmac_pause_ctrl[1]) & 0x1f)
#define XLMAC_PAUSE_CTRLr_XLMAC_PAUSE_CTRL_HIf_SET(r,f) (r).xlmac_pause_ctrl[1]=(((r).xlmac_pause_ctrl[1] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XLMAC_PAUSE_CTRL.
 */
#define READ_XLMAC_PAUSE_CTRLr(pa,p,r) bcmpmac_read(pa,p,XLMAC_PAUSE_CTRLr_OFFSET,0,XLMAC_PAUSE_CTRLr_SIZE,(r._xlmac_pause_ctrl))
#define WRITE_XLMAC_PAUSE_CTRLr(pa,p,r) bcmpmac_write(pa,p,XLMAC_PAUSE_CTRLr_OFFSET,0,XLMAC_PAUSE_CTRLr_SIZE,&(r._xlmac_pause_ctrl))

/*******************************************************************************
 * End of 'XLMAC_PAUSE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PFC_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_PFC_CTRLr_OFFSET 0x10060d00

#define XLMAC_PFC_CTRLr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_PFC_CTRL.
 */
typedef union XLMAC_PFC_CTRLr_s {
    uint32_t v[2];
    uint32_t xlmac_pfc_ctrl[2];
    uint32_t _xlmac_pfc_ctrl;
} XLMAC_PFC_CTRLr_t;

#define XLMAC_PFC_CTRLr_CLR(r) sal_memset(&((r).xlmac_pfc_ctrl[0]), 0, sizeof(XLMAC_PFC_CTRLr_t))
#define XLMAC_PFC_CTRLr_SET(r,i,d) (r).xlmac_pfc_ctrl[i] = d
#define XLMAC_PFC_CTRLr_GET(r,i) (r).xlmac_pfc_ctrl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_PFC_CTRLr_LLFC_REFRESH_TIMERf_GET(r) (((r).xlmac_pfc_ctrl[0]) & 0xffff)
#define XLMAC_PFC_CTRLr_LLFC_REFRESH_TIMERf_SET(r,f) (r).xlmac_pfc_ctrl[0]=(((r).xlmac_pfc_ctrl[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define XLMAC_PFC_CTRLr_PFC_REFRESH_TIMERf_GET(r) (((r).xlmac_pfc_ctrl[0]) & 0xffff)
#define XLMAC_PFC_CTRLr_PFC_REFRESH_TIMERf_SET(r,f) (r).xlmac_pfc_ctrl[0]=(((r).xlmac_pfc_ctrl[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define XLMAC_PFC_CTRLr_PFC_XOFF_TIMERf_GET(r) ((((r).xlmac_pfc_ctrl[0]) >> 16) & 0xffff)
#define XLMAC_PFC_CTRLr_PFC_XOFF_TIMERf_SET(r,f) (r).xlmac_pfc_ctrl[0]=(((r).xlmac_pfc_ctrl[0] & ~((uint32_t)0xffff << 16)) | ((((uint32_t)f) & 0xffff) << 16))
#define XLMAC_PFC_CTRLr_LLFC_REFRESH_ENf_GET(r) (((r).xlmac_pfc_ctrl[1]) & 0x1)
#define XLMAC_PFC_CTRLr_LLFC_REFRESH_ENf_SET(r,f) (r).xlmac_pfc_ctrl[1]=(((r).xlmac_pfc_ctrl[1] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_PFC_CTRLr_PFC_REFRESH_ENf_GET(r) (((r).xlmac_pfc_ctrl[1]) & 0x1)
#define XLMAC_PFC_CTRLr_PFC_REFRESH_ENf_SET(r,f) (r).xlmac_pfc_ctrl[1]=(((r).xlmac_pfc_ctrl[1] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_PFC_CTRLr_FORCE_PFC_XONf_GET(r) ((((r).xlmac_pfc_ctrl[1]) >> 1) & 0x1)
#define XLMAC_PFC_CTRLr_FORCE_PFC_XONf_SET(r,f) (r).xlmac_pfc_ctrl[1]=(((r).xlmac_pfc_ctrl[1] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLMAC_PFC_CTRLr_RSVDf_GET(r) ((((r).xlmac_pfc_ctrl[1]) >> 2) & 0x1)
#define XLMAC_PFC_CTRLr_RSVDf_SET(r,f) (r).xlmac_pfc_ctrl[1]=(((r).xlmac_pfc_ctrl[1] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLMAC_PFC_CTRLr_PFC_STATS_ENf_GET(r) ((((r).xlmac_pfc_ctrl[1]) >> 3) & 0x1)
#define XLMAC_PFC_CTRLr_PFC_STATS_ENf_SET(r,f) (r).xlmac_pfc_ctrl[1]=(((r).xlmac_pfc_ctrl[1] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLMAC_PFC_CTRLr_RX_PFC_ENf_GET(r) ((((r).xlmac_pfc_ctrl[1]) >> 4) & 0x1)
#define XLMAC_PFC_CTRLr_RX_PFC_ENf_SET(r,f) (r).xlmac_pfc_ctrl[1]=(((r).xlmac_pfc_ctrl[1] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define XLMAC_PFC_CTRLr_TX_PFC_ENf_GET(r) ((((r).xlmac_pfc_ctrl[1]) >> 5) & 0x1)
#define XLMAC_PFC_CTRLr_TX_PFC_ENf_SET(r,f) (r).xlmac_pfc_ctrl[1]=(((r).xlmac_pfc_ctrl[1] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))

/*
 * These macros can be used to access XLMAC_PFC_CTRL.
 */
#define READ_XLMAC_PFC_CTRLr(pa,p,r) bcmpmac_read(pa,p,XLMAC_PFC_CTRLr_OFFSET,0,XLMAC_PFC_CTRLr_SIZE,(r._xlmac_pfc_ctrl))
#define WRITE_XLMAC_PFC_CTRLr(pa,p,r) bcmpmac_write(pa,p,XLMAC_PFC_CTRLr_OFFSET,0,XLMAC_PFC_CTRLr_SIZE,&(r._xlmac_pfc_ctrl))

/*******************************************************************************
 * End of 'XLMAC_PFC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PFC_DA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_PFC_DAr_OFFSET 0x10061000

#define XLMAC_PFC_DAr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_PFC_DA.
 */
typedef union XLMAC_PFC_DAr_s {
    uint32_t v[2];
    uint32_t xlmac_pfc_da[2];
    uint32_t _xlmac_pfc_da;
} XLMAC_PFC_DAr_t;

#define XLMAC_PFC_DAr_CLR(r) sal_memset(&((r).xlmac_pfc_da[0]), 0, sizeof(XLMAC_PFC_DAr_t))
#define XLMAC_PFC_DAr_SET(r,i,d) (r).xlmac_pfc_da[i] = d
#define XLMAC_PFC_DAr_GET(r,i) (r).xlmac_pfc_da[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_PFC_DAr_PFC_MACDAf_GET(r,a) bcmpmac_field_get((r).xlmac_pfc_da,0,47,a)
#define XLMAC_PFC_DAr_PFC_MACDAf_SET(r,a) bcmpmac_field_set((r).xlmac_pfc_da,0,47,a)
#define XLMAC_PFC_DAr_PFC_MACDA_LOf_GET(r) ((r).xlmac_pfc_da[0])
#define XLMAC_PFC_DAr_PFC_MACDA_LOf_SET(r,f) (r).xlmac_pfc_da[0]=((uint32_t)f)
#define XLMAC_PFC_DAr_PFC_MACDA_HIf_GET(r) (((r).xlmac_pfc_da[1]) & 0xffff)
#define XLMAC_PFC_DAr_PFC_MACDA_HIf_SET(r,f) (r).xlmac_pfc_da[1]=(((r).xlmac_pfc_da[1] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access XLMAC_PFC_DA.
 */
#define READ_XLMAC_PFC_DAr(pa,p,r) bcmpmac_read(pa,p,XLMAC_PFC_DAr_OFFSET,0,XLMAC_PFC_DAr_SIZE,(r._xlmac_pfc_da))
#define WRITE_XLMAC_PFC_DAr(pa,p,r) bcmpmac_write(pa,p,XLMAC_PFC_DAr_OFFSET,0,XLMAC_PFC_DAr_SIZE,&(r._xlmac_pfc_da))

/*******************************************************************************
 * End of 'XLMAC_PFC_DAr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PFC_OPCODE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_PFC_OPCODEr_OFFSET 0x10060f00

#define XLMAC_PFC_OPCODEr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_PFC_OPCODE.
 */
typedef union XLMAC_PFC_OPCODEr_s {
    uint32_t v[2];
    uint32_t xlmac_pfc_opcode[2];
    uint32_t _xlmac_pfc_opcode;
} XLMAC_PFC_OPCODEr_t;

#define XLMAC_PFC_OPCODEr_CLR(r) sal_memset(&((r).xlmac_pfc_opcode[0]), 0, sizeof(XLMAC_PFC_OPCODEr_t))
#define XLMAC_PFC_OPCODEr_SET(r,i,d) (r).xlmac_pfc_opcode[i] = d
#define XLMAC_PFC_OPCODEr_GET(r,i) (r).xlmac_pfc_opcode[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_PFC_OPCODEr_PFC_OPCODEf_GET(r) (((r).xlmac_pfc_opcode[0]) & 0xffff)
#define XLMAC_PFC_OPCODEr_PFC_OPCODEf_SET(r,f) (r).xlmac_pfc_opcode[0]=(((r).xlmac_pfc_opcode[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access XLMAC_PFC_OPCODE.
 */
#define READ_XLMAC_PFC_OPCODEr(pa,p,r) bcmpmac_read(pa,p,XLMAC_PFC_OPCODEr_OFFSET,0,XLMAC_PFC_OPCODEr_SIZE,(r._xlmac_pfc_opcode))
#define WRITE_XLMAC_PFC_OPCODEr(pa,p,r) bcmpmac_write(pa,p,XLMAC_PFC_OPCODEr_OFFSET,0,XLMAC_PFC_OPCODEr_SIZE,&(r._xlmac_pfc_opcode))

/*******************************************************************************
 * End of 'XLMAC_PFC_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PFC_TYPE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_PFC_TYPEr_OFFSET 0x10060e00

#define XLMAC_PFC_TYPEr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_PFC_TYPE.
 */
typedef union XLMAC_PFC_TYPEr_s {
    uint32_t v[2];
    uint32_t xlmac_pfc_type[2];
    uint32_t _xlmac_pfc_type;
} XLMAC_PFC_TYPEr_t;

#define XLMAC_PFC_TYPEr_CLR(r) sal_memset(&((r).xlmac_pfc_type[0]), 0, sizeof(XLMAC_PFC_TYPEr_t))
#define XLMAC_PFC_TYPEr_SET(r,i,d) (r).xlmac_pfc_type[i] = d
#define XLMAC_PFC_TYPEr_GET(r,i) (r).xlmac_pfc_type[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_PFC_TYPEr_PFC_ETH_TYPEf_GET(r) (((r).xlmac_pfc_type[0]) & 0xffff)
#define XLMAC_PFC_TYPEr_PFC_ETH_TYPEf_SET(r,f) (r).xlmac_pfc_type[0]=(((r).xlmac_pfc_type[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access XLMAC_PFC_TYPE.
 */
#define READ_XLMAC_PFC_TYPEr(pa,p,r) bcmpmac_read(pa,p,XLMAC_PFC_TYPEr_OFFSET,0,XLMAC_PFC_TYPEr_SIZE,(r._xlmac_pfc_type))
#define WRITE_XLMAC_PFC_TYPEr(pa,p,r) bcmpmac_write(pa,p,XLMAC_PFC_TYPEr_OFFSET,0,XLMAC_PFC_TYPEr_SIZE,&(r._xlmac_pfc_type))

/*******************************************************************************
 * End of 'XLMAC_PFC_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_CDC_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_RX_CDC_ECC_STATUSr_OFFSET 0x10063100

#define XLMAC_RX_CDC_ECC_STATUSr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_RX_CDC_ECC_STATUS.
 */
typedef union XLMAC_RX_CDC_ECC_STATUSr_s {
    uint32_t v[2];
    uint32_t xlmac_rx_cdc_ecc_status[2];
    uint32_t _xlmac_rx_cdc_ecc_status;
} XLMAC_RX_CDC_ECC_STATUSr_t;

#define XLMAC_RX_CDC_ECC_STATUSr_CLR(r) sal_memset(&((r).xlmac_rx_cdc_ecc_status[0]), 0, sizeof(XLMAC_RX_CDC_ECC_STATUSr_t))
#define XLMAC_RX_CDC_ECC_STATUSr_SET(r,i,d) (r).xlmac_rx_cdc_ecc_status[i] = d
#define XLMAC_RX_CDC_ECC_STATUSr_GET(r,i) (r).xlmac_rx_cdc_ecc_status[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_RX_CDC_ECC_STATUSr_RX_CDC_SINGLE_BIT_ERRf_GET(r) (((r).xlmac_rx_cdc_ecc_status[0]) & 0x1)
#define XLMAC_RX_CDC_ECC_STATUSr_RX_CDC_SINGLE_BIT_ERRf_SET(r,f) (r).xlmac_rx_cdc_ecc_status[0]=(((r).xlmac_rx_cdc_ecc_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_RX_CDC_ECC_STATUSr_RX_CDC_DOUBLE_BIT_ERRf_GET(r) ((((r).xlmac_rx_cdc_ecc_status[0]) >> 1) & 0x1)
#define XLMAC_RX_CDC_ECC_STATUSr_RX_CDC_DOUBLE_BIT_ERRf_SET(r,f) (r).xlmac_rx_cdc_ecc_status[0]=(((r).xlmac_rx_cdc_ecc_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access XLMAC_RX_CDC_ECC_STATUS.
 */
#define READ_XLMAC_RX_CDC_ECC_STATUSr(pa,p,r) bcmpmac_read(pa,p,XLMAC_RX_CDC_ECC_STATUSr_OFFSET,0,XLMAC_RX_CDC_ECC_STATUSr_SIZE,(r._xlmac_rx_cdc_ecc_status))
#define WRITE_XLMAC_RX_CDC_ECC_STATUSr(pa,p,r) bcmpmac_write(pa,p,XLMAC_RX_CDC_ECC_STATUSr_OFFSET,0,XLMAC_RX_CDC_ECC_STATUSr_SIZE,&(r._xlmac_rx_cdc_ecc_status))

/*******************************************************************************
 * End of 'XLMAC_RX_CDC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_RX_CTRLr_OFFSET 0x10060500

#define XLMAC_RX_CTRLr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_RX_CTRL.
 */
typedef union XLMAC_RX_CTRLr_s {
    uint32_t v[2];
    uint32_t xlmac_rx_ctrl[2];
    uint32_t _xlmac_rx_ctrl;
} XLMAC_RX_CTRLr_t;

#define XLMAC_RX_CTRLr_CLR(r) sal_memset(&((r).xlmac_rx_ctrl[0]), 0, sizeof(XLMAC_RX_CTRLr_t))
#define XLMAC_RX_CTRLr_SET(r,i,d) (r).xlmac_rx_ctrl[i] = d
#define XLMAC_RX_CTRLr_GET(r,i) (r).xlmac_rx_ctrl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_RX_CTRLr_RSVD_1f_GET(r) (((r).xlmac_rx_ctrl[0]) & 0x1)
#define XLMAC_RX_CTRLr_RSVD_1f_SET(r,f) (r).xlmac_rx_ctrl[0]=(((r).xlmac_rx_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_RX_CTRLr_RX_ANY_STARTf_GET(r) ((((r).xlmac_rx_ctrl[0]) >> 1) & 0x1)
#define XLMAC_RX_CTRLr_RX_ANY_STARTf_SET(r,f) (r).xlmac_rx_ctrl[0]=(((r).xlmac_rx_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLMAC_RX_CTRLr_STRIP_CRCf_GET(r) ((((r).xlmac_rx_ctrl[0]) >> 2) & 0x1)
#define XLMAC_RX_CTRLr_STRIP_CRCf_SET(r,f) (r).xlmac_rx_ctrl[0]=(((r).xlmac_rx_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLMAC_RX_CTRLr_STRICT_PREAMBLEf_GET(r) ((((r).xlmac_rx_ctrl[0]) >> 3) & 0x1)
#define XLMAC_RX_CTRLr_STRICT_PREAMBLEf_SET(r,f) (r).xlmac_rx_ctrl[0]=(((r).xlmac_rx_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLMAC_RX_CTRLr_RUNT_THRESHOLDf_GET(r) ((((r).xlmac_rx_ctrl[0]) >> 4) & 0x7f)
#define XLMAC_RX_CTRLr_RUNT_THRESHOLDf_SET(r,f) (r).xlmac_rx_ctrl[0]=(((r).xlmac_rx_ctrl[0] & ~((uint32_t)0x7f << 4)) | ((((uint32_t)f) & 0x7f) << 4))
#define XLMAC_RX_CTRLr_RSVD_2f_GET(r) ((((r).xlmac_rx_ctrl[0]) >> 11) & 0x1)
#define XLMAC_RX_CTRLr_RSVD_2f_SET(r,f) (r).xlmac_rx_ctrl[0]=(((r).xlmac_rx_ctrl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define XLMAC_RX_CTRLr_RSVD_3f_GET(r) ((((r).xlmac_rx_ctrl[0]) >> 12) & 0x1)
#define XLMAC_RX_CTRLr_RSVD_3f_SET(r,f) (r).xlmac_rx_ctrl[0]=(((r).xlmac_rx_ctrl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define XLMAC_RX_CTRLr_RX_PASS_CTRLf_GET(r) ((((r).xlmac_rx_ctrl[0]) >> 13) & 0x1)
#define XLMAC_RX_CTRLr_RX_PASS_CTRLf_SET(r,f) (r).xlmac_rx_ctrl[0]=(((r).xlmac_rx_ctrl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define XLMAC_RX_CTRLr_RX_PASS_PAUSEf_GET(r) ((((r).xlmac_rx_ctrl[0]) >> 14) & 0x1)
#define XLMAC_RX_CTRLr_RX_PASS_PAUSEf_SET(r,f) (r).xlmac_rx_ctrl[0]=(((r).xlmac_rx_ctrl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define XLMAC_RX_CTRLr_RX_PASS_PFCf_GET(r) ((((r).xlmac_rx_ctrl[0]) >> 15) & 0x1)
#define XLMAC_RX_CTRLr_RX_PASS_PFCf_SET(r,f) (r).xlmac_rx_ctrl[0]=(((r).xlmac_rx_ctrl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))

/*
 * These macros can be used to access XLMAC_RX_CTRL.
 */
#define READ_XLMAC_RX_CTRLr(pa,p,r) bcmpmac_read(pa,p,XLMAC_RX_CTRLr_OFFSET,0,XLMAC_RX_CTRLr_SIZE,(r._xlmac_rx_ctrl))
#define WRITE_XLMAC_RX_CTRLr(pa,p,r) bcmpmac_write(pa,p,XLMAC_RX_CTRLr_OFFSET,0,XLMAC_RX_CTRLr_SIZE,&(r._xlmac_rx_ctrl))

/*******************************************************************************
 * End of 'XLMAC_RX_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_LLFC_MSG_FIELDS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_RX_LLFC_MSG_FIELDSr_OFFSET 0x10061300

#define XLMAC_RX_LLFC_MSG_FIELDSr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_RX_LLFC_MSG_FIELDS.
 */
typedef union XLMAC_RX_LLFC_MSG_FIELDSr_s {
    uint32_t v[2];
    uint32_t xlmac_rx_llfc_msg_fields[2];
    uint32_t _xlmac_rx_llfc_msg_fields;
} XLMAC_RX_LLFC_MSG_FIELDSr_t;

#define XLMAC_RX_LLFC_MSG_FIELDSr_CLR(r) sal_memset(&((r).xlmac_rx_llfc_msg_fields[0]), 0, sizeof(XLMAC_RX_LLFC_MSG_FIELDSr_t))
#define XLMAC_RX_LLFC_MSG_FIELDSr_SET(r,i,d) (r).xlmac_rx_llfc_msg_fields[i] = d
#define XLMAC_RX_LLFC_MSG_FIELDSr_GET(r,i) (r).xlmac_rx_llfc_msg_fields[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_RX_LLFC_MSG_FIELDSr_RX_LLFC_MSG_TYPE_LOGICALf_GET(r) (((r).xlmac_rx_llfc_msg_fields[0]) & 0xff)
#define XLMAC_RX_LLFC_MSG_FIELDSr_RX_LLFC_MSG_TYPE_LOGICALf_SET(r,f) (r).xlmac_rx_llfc_msg_fields[0]=(((r).xlmac_rx_llfc_msg_fields[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define XLMAC_RX_LLFC_MSG_FIELDSr_RX_LLFC_FC_OBJ_LOGICALf_GET(r) ((((r).xlmac_rx_llfc_msg_fields[0]) >> 8) & 0xf)
#define XLMAC_RX_LLFC_MSG_FIELDSr_RX_LLFC_FC_OBJ_LOGICALf_SET(r,f) (r).xlmac_rx_llfc_msg_fields[0]=(((r).xlmac_rx_llfc_msg_fields[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define XLMAC_RX_LLFC_MSG_FIELDSr_RX_LLFC_MSG_TYPE_PHYSICALf_GET(r) ((((r).xlmac_rx_llfc_msg_fields[0]) >> 12) & 0xff)
#define XLMAC_RX_LLFC_MSG_FIELDSr_RX_LLFC_MSG_TYPE_PHYSICALf_SET(r,f) (r).xlmac_rx_llfc_msg_fields[0]=(((r).xlmac_rx_llfc_msg_fields[0] & ~((uint32_t)0xff << 12)) | ((((uint32_t)f) & 0xff) << 12))
#define XLMAC_RX_LLFC_MSG_FIELDSr_RX_LLFC_FC_OBJ_PHYSICALf_GET(r) ((((r).xlmac_rx_llfc_msg_fields[0]) >> 20) & 0xf)
#define XLMAC_RX_LLFC_MSG_FIELDSr_RX_LLFC_FC_OBJ_PHYSICALf_SET(r,f) (r).xlmac_rx_llfc_msg_fields[0]=(((r).xlmac_rx_llfc_msg_fields[0] & ~((uint32_t)0xf << 20)) | ((((uint32_t)f) & 0xf) << 20))

/*
 * These macros can be used to access XLMAC_RX_LLFC_MSG_FIELDS.
 */
#define READ_XLMAC_RX_LLFC_MSG_FIELDSr(pa,p,r) bcmpmac_read(pa,p,XLMAC_RX_LLFC_MSG_FIELDSr_OFFSET,0,XLMAC_RX_LLFC_MSG_FIELDSr_SIZE,(r._xlmac_rx_llfc_msg_fields))
#define WRITE_XLMAC_RX_LLFC_MSG_FIELDSr(pa,p,r) bcmpmac_write(pa,p,XLMAC_RX_LLFC_MSG_FIELDSr_OFFSET,0,XLMAC_RX_LLFC_MSG_FIELDSr_SIZE,&(r._xlmac_rx_llfc_msg_fields))

/*******************************************************************************
 * End of 'XLMAC_RX_LLFC_MSG_FIELDSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_LSS_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_RX_LSS_CTRLr_OFFSET 0x10060900

#define XLMAC_RX_LSS_CTRLr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_RX_LSS_CTRL.
 */
typedef union XLMAC_RX_LSS_CTRLr_s {
    uint32_t v[2];
    uint32_t xlmac_rx_lss_ctrl[2];
    uint32_t _xlmac_rx_lss_ctrl;
} XLMAC_RX_LSS_CTRLr_t;

#define XLMAC_RX_LSS_CTRLr_CLR(r) sal_memset(&((r).xlmac_rx_lss_ctrl[0]), 0, sizeof(XLMAC_RX_LSS_CTRLr_t))
#define XLMAC_RX_LSS_CTRLr_SET(r,i,d) (r).xlmac_rx_lss_ctrl[i] = d
#define XLMAC_RX_LSS_CTRLr_GET(r,i) (r).xlmac_rx_lss_ctrl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_RX_LSS_CTRLr_LOCAL_FAULT_DISABLEf_GET(r) (((r).xlmac_rx_lss_ctrl[0]) & 0x1)
#define XLMAC_RX_LSS_CTRLr_LOCAL_FAULT_DISABLEf_SET(r,f) (r).xlmac_rx_lss_ctrl[0]=(((r).xlmac_rx_lss_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_RX_LSS_CTRLr_REMOTE_FAULT_DISABLEf_GET(r) ((((r).xlmac_rx_lss_ctrl[0]) >> 1) & 0x1)
#define XLMAC_RX_LSS_CTRLr_REMOTE_FAULT_DISABLEf_SET(r,f) (r).xlmac_rx_lss_ctrl[0]=(((r).xlmac_rx_lss_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLMAC_RX_LSS_CTRLr_USE_EXTERNAL_FAULTS_FOR_TXf_GET(r) ((((r).xlmac_rx_lss_ctrl[0]) >> 2) & 0x1)
#define XLMAC_RX_LSS_CTRLr_USE_EXTERNAL_FAULTS_FOR_TXf_SET(r,f) (r).xlmac_rx_lss_ctrl[0]=(((r).xlmac_rx_lss_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLMAC_RX_LSS_CTRLr_LINK_INTERRUPTION_DISABLEf_GET(r) ((((r).xlmac_rx_lss_ctrl[0]) >> 3) & 0x1)
#define XLMAC_RX_LSS_CTRLr_LINK_INTERRUPTION_DISABLEf_SET(r,f) (r).xlmac_rx_lss_ctrl[0]=(((r).xlmac_rx_lss_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLMAC_RX_LSS_CTRLr_DROP_TX_DATA_ON_LOCAL_FAULTf_GET(r) ((((r).xlmac_rx_lss_ctrl[0]) >> 4) & 0x1)
#define XLMAC_RX_LSS_CTRLr_DROP_TX_DATA_ON_LOCAL_FAULTf_SET(r,f) (r).xlmac_rx_lss_ctrl[0]=(((r).xlmac_rx_lss_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define XLMAC_RX_LSS_CTRLr_DROP_TX_DATA_ON_REMOTE_FAULTf_GET(r) ((((r).xlmac_rx_lss_ctrl[0]) >> 5) & 0x1)
#define XLMAC_RX_LSS_CTRLr_DROP_TX_DATA_ON_REMOTE_FAULTf_SET(r,f) (r).xlmac_rx_lss_ctrl[0]=(((r).xlmac_rx_lss_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define XLMAC_RX_LSS_CTRLr_DROP_TX_DATA_ON_LINK_INTERRUPTf_GET(r) ((((r).xlmac_rx_lss_ctrl[0]) >> 6) & 0x1)
#define XLMAC_RX_LSS_CTRLr_DROP_TX_DATA_ON_LINK_INTERRUPTf_SET(r,f) (r).xlmac_rx_lss_ctrl[0]=(((r).xlmac_rx_lss_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define XLMAC_RX_LSS_CTRLr_RESET_FLOW_CONTROL_TIMERS_ON_LINK_DOWNf_GET(r) ((((r).xlmac_rx_lss_ctrl[0]) >> 7) & 0x1)
#define XLMAC_RX_LSS_CTRLr_RESET_FLOW_CONTROL_TIMERS_ON_LINK_DOWNf_SET(r,f) (r).xlmac_rx_lss_ctrl[0]=(((r).xlmac_rx_lss_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*
 * These macros can be used to access XLMAC_RX_LSS_CTRL.
 */
#define READ_XLMAC_RX_LSS_CTRLr(pa,p,r) bcmpmac_read(pa,p,XLMAC_RX_LSS_CTRLr_OFFSET,0,XLMAC_RX_LSS_CTRLr_SIZE,(r._xlmac_rx_lss_ctrl))
#define WRITE_XLMAC_RX_LSS_CTRLr(pa,p,r) bcmpmac_write(pa,p,XLMAC_RX_LSS_CTRLr_OFFSET,0,XLMAC_RX_LSS_CTRLr_SIZE,&(r._xlmac_rx_lss_ctrl))

/*******************************************************************************
 * End of 'XLMAC_RX_LSS_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_LSS_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_RX_LSS_STATUSr_OFFSET 0x10060a00

#define XLMAC_RX_LSS_STATUSr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_RX_LSS_STATUS.
 */
typedef union XLMAC_RX_LSS_STATUSr_s {
    uint32_t v[2];
    uint32_t xlmac_rx_lss_status[2];
    uint32_t _xlmac_rx_lss_status;
} XLMAC_RX_LSS_STATUSr_t;

#define XLMAC_RX_LSS_STATUSr_CLR(r) sal_memset(&((r).xlmac_rx_lss_status[0]), 0, sizeof(XLMAC_RX_LSS_STATUSr_t))
#define XLMAC_RX_LSS_STATUSr_SET(r,i,d) (r).xlmac_rx_lss_status[i] = d
#define XLMAC_RX_LSS_STATUSr_GET(r,i) (r).xlmac_rx_lss_status[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_RX_LSS_STATUSr_LOCAL_FAULT_STATUSf_GET(r) (((r).xlmac_rx_lss_status[0]) & 0x1)
#define XLMAC_RX_LSS_STATUSr_LOCAL_FAULT_STATUSf_SET(r,f) (r).xlmac_rx_lss_status[0]=(((r).xlmac_rx_lss_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_RX_LSS_STATUSr_REMOTE_FAULT_STATUSf_GET(r) ((((r).xlmac_rx_lss_status[0]) >> 1) & 0x1)
#define XLMAC_RX_LSS_STATUSr_REMOTE_FAULT_STATUSf_SET(r,f) (r).xlmac_rx_lss_status[0]=(((r).xlmac_rx_lss_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLMAC_RX_LSS_STATUSr_LINK_INTERRUPTION_STATUSf_GET(r) ((((r).xlmac_rx_lss_status[0]) >> 2) & 0x1)
#define XLMAC_RX_LSS_STATUSr_LINK_INTERRUPTION_STATUSf_SET(r,f) (r).xlmac_rx_lss_status[0]=(((r).xlmac_rx_lss_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*
 * These macros can be used to access XLMAC_RX_LSS_STATUS.
 */
#define READ_XLMAC_RX_LSS_STATUSr(pa,p,r) bcmpmac_read(pa,p,XLMAC_RX_LSS_STATUSr_OFFSET,0,XLMAC_RX_LSS_STATUSr_SIZE,(r._xlmac_rx_lss_status))
#define WRITE_XLMAC_RX_LSS_STATUSr(pa,p,r) bcmpmac_write(pa,p,XLMAC_RX_LSS_STATUSr_OFFSET,0,XLMAC_RX_LSS_STATUSr_SIZE,&(r._xlmac_rx_lss_status))

/*******************************************************************************
 * End of 'XLMAC_RX_LSS_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_MAC_SA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_RX_MAC_SAr_OFFSET 0x10060600

#define XLMAC_RX_MAC_SAr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_RX_MAC_SA.
 */
typedef union XLMAC_RX_MAC_SAr_s {
    uint32_t v[2];
    uint32_t xlmac_rx_mac_sa[2];
    uint32_t _xlmac_rx_mac_sa;
} XLMAC_RX_MAC_SAr_t;

#define XLMAC_RX_MAC_SAr_CLR(r) sal_memset(&((r).xlmac_rx_mac_sa[0]), 0, sizeof(XLMAC_RX_MAC_SAr_t))
#define XLMAC_RX_MAC_SAr_SET(r,i,d) (r).xlmac_rx_mac_sa[i] = d
#define XLMAC_RX_MAC_SAr_GET(r,i) (r).xlmac_rx_mac_sa[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_RX_MAC_SAr_RX_SAf_GET(r,a) bcmpmac_field_get((r).xlmac_rx_mac_sa,0,47,a)
#define XLMAC_RX_MAC_SAr_RX_SAf_SET(r,a) bcmpmac_field_set((r).xlmac_rx_mac_sa,0,47,a)
#define XLMAC_RX_MAC_SAr_SA_LOf_GET(r) ((r).xlmac_rx_mac_sa[0])
#define XLMAC_RX_MAC_SAr_SA_LOf_SET(r,f) (r).xlmac_rx_mac_sa[0]=((uint32_t)f)
#define XLMAC_RX_MAC_SAr_SA_HIf_GET(r) (((r).xlmac_rx_mac_sa[1]) & 0xffff)
#define XLMAC_RX_MAC_SAr_SA_HIf_SET(r,f) (r).xlmac_rx_mac_sa[1]=(((r).xlmac_rx_mac_sa[1] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access XLMAC_RX_MAC_SA.
 */
#define READ_XLMAC_RX_MAC_SAr(pa,p,r) bcmpmac_read(pa,p,XLMAC_RX_MAC_SAr_OFFSET,0,XLMAC_RX_MAC_SAr_SIZE,(r._xlmac_rx_mac_sa))
#define WRITE_XLMAC_RX_MAC_SAr(pa,p,r) bcmpmac_write(pa,p,XLMAC_RX_MAC_SAr_OFFSET,0,XLMAC_RX_MAC_SAr_SIZE,&(r._xlmac_rx_mac_sa))

/*******************************************************************************
 * End of 'XLMAC_RX_MAC_SAr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_MAX_SIZE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_RX_MAX_SIZEr_OFFSET 0x10060700

#define XLMAC_RX_MAX_SIZEr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_RX_MAX_SIZE.
 */
typedef union XLMAC_RX_MAX_SIZEr_s {
    uint32_t v[2];
    uint32_t xlmac_rx_max_size[2];
    uint32_t _xlmac_rx_max_size;
} XLMAC_RX_MAX_SIZEr_t;

#define XLMAC_RX_MAX_SIZEr_CLR(r) sal_memset(&((r).xlmac_rx_max_size[0]), 0, sizeof(XLMAC_RX_MAX_SIZEr_t))
#define XLMAC_RX_MAX_SIZEr_SET(r,i,d) (r).xlmac_rx_max_size[i] = d
#define XLMAC_RX_MAX_SIZEr_GET(r,i) (r).xlmac_rx_max_size[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_RX_MAX_SIZEr_RX_MAX_SIZEf_GET(r) (((r).xlmac_rx_max_size[0]) & 0x3fff)
#define XLMAC_RX_MAX_SIZEr_RX_MAX_SIZEf_SET(r,f) (r).xlmac_rx_max_size[0]=(((r).xlmac_rx_max_size[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))

/*
 * These macros can be used to access XLMAC_RX_MAX_SIZE.
 */
#define READ_XLMAC_RX_MAX_SIZEr(pa,p,r) bcmpmac_read(pa,p,XLMAC_RX_MAX_SIZEr_OFFSET,0,XLMAC_RX_MAX_SIZEr_SIZE,(r._xlmac_rx_max_size))
#define WRITE_XLMAC_RX_MAX_SIZEr(pa,p,r) bcmpmac_write(pa,p,XLMAC_RX_MAX_SIZEr_OFFSET,0,XLMAC_RX_MAX_SIZEr_SIZE,&(r._xlmac_rx_max_size))

/*******************************************************************************
 * End of 'XLMAC_RX_MAX_SIZEr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_VLAN_TAG
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_RX_VLAN_TAGr_OFFSET 0x10060800

#define XLMAC_RX_VLAN_TAGr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_RX_VLAN_TAG.
 */
typedef union XLMAC_RX_VLAN_TAGr_s {
    uint32_t v[2];
    uint32_t xlmac_rx_vlan_tag[2];
    uint32_t _xlmac_rx_vlan_tag;
} XLMAC_RX_VLAN_TAGr_t;

#define XLMAC_RX_VLAN_TAGr_CLR(r) sal_memset(&((r).xlmac_rx_vlan_tag[0]), 0, sizeof(XLMAC_RX_VLAN_TAGr_t))
#define XLMAC_RX_VLAN_TAGr_SET(r,i,d) (r).xlmac_rx_vlan_tag[i] = d
#define XLMAC_RX_VLAN_TAGr_GET(r,i) (r).xlmac_rx_vlan_tag[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_RX_VLAN_TAGr_INNER_VLAN_TAGf_GET(r) (((r).xlmac_rx_vlan_tag[0]) & 0xffff)
#define XLMAC_RX_VLAN_TAGr_INNER_VLAN_TAGf_SET(r,f) (r).xlmac_rx_vlan_tag[0]=(((r).xlmac_rx_vlan_tag[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define XLMAC_RX_VLAN_TAGr_OUTER_VLAN_TAGf_GET(r) ((((r).xlmac_rx_vlan_tag[0]) >> 16) & 0xffff)
#define XLMAC_RX_VLAN_TAGr_OUTER_VLAN_TAGf_SET(r,f) (r).xlmac_rx_vlan_tag[0]=(((r).xlmac_rx_vlan_tag[0] & ~((uint32_t)0xffff << 16)) | ((((uint32_t)f) & 0xffff) << 16))
#define XLMAC_RX_VLAN_TAGr_INNER_VLAN_TAG_ENABLEf_GET(r) (((r).xlmac_rx_vlan_tag[1]) & 0x1)
#define XLMAC_RX_VLAN_TAGr_INNER_VLAN_TAG_ENABLEf_SET(r,f) (r).xlmac_rx_vlan_tag[1]=(((r).xlmac_rx_vlan_tag[1] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_RX_VLAN_TAGr_OUTER_VLAN_TAG_ENABLEf_GET(r) ((((r).xlmac_rx_vlan_tag[1]) >> 1) & 0x1)
#define XLMAC_RX_VLAN_TAGr_OUTER_VLAN_TAG_ENABLEf_SET(r,f) (r).xlmac_rx_vlan_tag[1]=(((r).xlmac_rx_vlan_tag[1] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access XLMAC_RX_VLAN_TAG.
 */
#define READ_XLMAC_RX_VLAN_TAGr(pa,p,r) bcmpmac_read(pa,p,XLMAC_RX_VLAN_TAGr_OFFSET,0,XLMAC_RX_VLAN_TAGr_SIZE,(r._xlmac_rx_vlan_tag))
#define WRITE_XLMAC_RX_VLAN_TAGr(pa,p,r) bcmpmac_write(pa,p,XLMAC_RX_VLAN_TAGr_OFFSET,0,XLMAC_RX_VLAN_TAGr_SIZE,&(r._xlmac_rx_vlan_tag))

/*******************************************************************************
 * End of 'XLMAC_RX_VLAN_TAGr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_SPARE0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_SPARE0r_OFFSET 0x10063600

#define XLMAC_SPARE0r_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_SPARE0.
 */
typedef union XLMAC_SPARE0r_s {
    uint32_t v[2];
    uint32_t xlmac_spare0[2];
    uint32_t _xlmac_spare0;
} XLMAC_SPARE0r_t;

#define XLMAC_SPARE0r_CLR(r) sal_memset(&((r).xlmac_spare0[0]), 0, sizeof(XLMAC_SPARE0r_t))
#define XLMAC_SPARE0r_SET(r,i,d) (r).xlmac_spare0[i] = d
#define XLMAC_SPARE0r_GET(r,i) (r).xlmac_spare0[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_SPARE0r_RSVDf_GET(r) ((r).xlmac_spare0[0])
#define XLMAC_SPARE0r_RSVDf_SET(r,f) (r).xlmac_spare0[0]=((uint32_t)f)

/*
 * These macros can be used to access XLMAC_SPARE0.
 */
#define READ_XLMAC_SPARE0r(pa,p,r) bcmpmac_read(pa,p,XLMAC_SPARE0r_OFFSET,0,XLMAC_SPARE0r_SIZE,(r._xlmac_spare0))
#define WRITE_XLMAC_SPARE0r(pa,p,r) bcmpmac_write(pa,p,XLMAC_SPARE0r_OFFSET,0,XLMAC_SPARE0r_SIZE,&(r._xlmac_spare0))

/*******************************************************************************
 * End of 'XLMAC_SPARE0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_SPARE1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_SPARE1r_OFFSET 0x10063700

#define XLMAC_SPARE1r_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_SPARE1.
 */
typedef union XLMAC_SPARE1r_s {
    uint32_t v[2];
    uint32_t xlmac_spare1[2];
    uint32_t _xlmac_spare1;
} XLMAC_SPARE1r_t;

#define XLMAC_SPARE1r_CLR(r) sal_memset(&((r).xlmac_spare1[0]), 0, sizeof(XLMAC_SPARE1r_t))
#define XLMAC_SPARE1r_SET(r,i,d) (r).xlmac_spare1[i] = d
#define XLMAC_SPARE1r_GET(r,i) (r).xlmac_spare1[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_SPARE1r_RSVDf_GET(r) (((r).xlmac_spare1[0]) & 0x3)
#define XLMAC_SPARE1r_RSVDf_SET(r,f) (r).xlmac_spare1[0]=(((r).xlmac_spare1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access XLMAC_SPARE1.
 */
#define READ_XLMAC_SPARE1r(pa,p,r) bcmpmac_read(pa,p,XLMAC_SPARE1r_OFFSET,0,XLMAC_SPARE1r_SIZE,(r._xlmac_spare1))
#define WRITE_XLMAC_SPARE1r(pa,p,r) bcmpmac_write(pa,p,XLMAC_SPARE1r_OFFSET,0,XLMAC_SPARE1r_SIZE,&(r._xlmac_spare1))

/*******************************************************************************
 * End of 'XLMAC_SPARE1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TIMESTAMP_ADJUST
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_TIMESTAMP_ADJUSTr_OFFSET 0x10061f00

#define XLMAC_TIMESTAMP_ADJUSTr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_TIMESTAMP_ADJUST.
 */
typedef union XLMAC_TIMESTAMP_ADJUSTr_s {
    uint32_t v[2];
    uint32_t xlmac_timestamp_adjust[2];
    uint32_t _xlmac_timestamp_adjust;
} XLMAC_TIMESTAMP_ADJUSTr_t;

#define XLMAC_TIMESTAMP_ADJUSTr_CLR(r) sal_memset(&((r).xlmac_timestamp_adjust[0]), 0, sizeof(XLMAC_TIMESTAMP_ADJUSTr_t))
#define XLMAC_TIMESTAMP_ADJUSTr_SET(r,i,d) (r).xlmac_timestamp_adjust[i] = d
#define XLMAC_TIMESTAMP_ADJUSTr_GET(r,i) (r).xlmac_timestamp_adjust[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_TIMESTAMP_ADJUSTr_TS_OSTS_ADJUSTf_GET(r) (((r).xlmac_timestamp_adjust[0]) & 0x1ff)
#define XLMAC_TIMESTAMP_ADJUSTr_TS_OSTS_ADJUSTf_SET(r,f) (r).xlmac_timestamp_adjust[0]=(((r).xlmac_timestamp_adjust[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff))
#define XLMAC_TIMESTAMP_ADJUSTr_TS_TSTS_ADJUSTf_GET(r) ((((r).xlmac_timestamp_adjust[0]) >> 9) & 0x3f)
#define XLMAC_TIMESTAMP_ADJUSTr_TS_TSTS_ADJUSTf_SET(r,f) (r).xlmac_timestamp_adjust[0]=(((r).xlmac_timestamp_adjust[0] & ~((uint32_t)0x3f << 9)) | ((((uint32_t)f) & 0x3f) << 9))
#define XLMAC_TIMESTAMP_ADJUSTr_TS_USE_CS_OFFSETf_GET(r) ((((r).xlmac_timestamp_adjust[0]) >> 15) & 0x1)
#define XLMAC_TIMESTAMP_ADJUSTr_TS_USE_CS_OFFSETf_SET(r,f) (r).xlmac_timestamp_adjust[0]=(((r).xlmac_timestamp_adjust[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))

/*
 * These macros can be used to access XLMAC_TIMESTAMP_ADJUST.
 */
#define READ_XLMAC_TIMESTAMP_ADJUSTr(pa,p,r) bcmpmac_read(pa,p,XLMAC_TIMESTAMP_ADJUSTr_OFFSET,0,XLMAC_TIMESTAMP_ADJUSTr_SIZE,(r._xlmac_timestamp_adjust))
#define WRITE_XLMAC_TIMESTAMP_ADJUSTr(pa,p,r) bcmpmac_write(pa,p,XLMAC_TIMESTAMP_ADJUSTr_OFFSET,0,XLMAC_TIMESTAMP_ADJUSTr_SIZE,&(r._xlmac_timestamp_adjust))

/*******************************************************************************
 * End of 'XLMAC_TIMESTAMP_ADJUSTr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TIMESTAMP_BYTE_ADJUST
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_TIMESTAMP_BYTE_ADJUSTr_OFFSET 0x10062000

#define XLMAC_TIMESTAMP_BYTE_ADJUSTr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_TIMESTAMP_BYTE_ADJUST.
 */
typedef union XLMAC_TIMESTAMP_BYTE_ADJUSTr_s {
    uint32_t v[2];
    uint32_t xlmac_timestamp_byte_adjust[2];
    uint32_t _xlmac_timestamp_byte_adjust;
} XLMAC_TIMESTAMP_BYTE_ADJUSTr_t;

#define XLMAC_TIMESTAMP_BYTE_ADJUSTr_CLR(r) sal_memset(&((r).xlmac_timestamp_byte_adjust[0]), 0, sizeof(XLMAC_TIMESTAMP_BYTE_ADJUSTr_t))
#define XLMAC_TIMESTAMP_BYTE_ADJUSTr_SET(r,i,d) (r).xlmac_timestamp_byte_adjust[i] = d
#define XLMAC_TIMESTAMP_BYTE_ADJUSTr_GET(r,i) (r).xlmac_timestamp_byte_adjust[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_TIMESTAMP_BYTE_ADJUSTr_TX_TIMER_BYTE_ADJUSTf_GET(r) (((r).xlmac_timestamp_byte_adjust[0]) & 0x3ff)
#define XLMAC_TIMESTAMP_BYTE_ADJUSTr_TX_TIMER_BYTE_ADJUSTf_SET(r,f) (r).xlmac_timestamp_byte_adjust[0]=(((r).xlmac_timestamp_byte_adjust[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))
#define XLMAC_TIMESTAMP_BYTE_ADJUSTr_TX_TIMER_BYTE_ADJUST_ENf_GET(r) ((((r).xlmac_timestamp_byte_adjust[0]) >> 10) & 0x1)
#define XLMAC_TIMESTAMP_BYTE_ADJUSTr_TX_TIMER_BYTE_ADJUST_ENf_SET(r,f) (r).xlmac_timestamp_byte_adjust[0]=(((r).xlmac_timestamp_byte_adjust[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define XLMAC_TIMESTAMP_BYTE_ADJUSTr_RX_TIMER_BYTE_ADJUSTf_GET(r) ((((r).xlmac_timestamp_byte_adjust[0]) >> 11) & 0x3ff)
#define XLMAC_TIMESTAMP_BYTE_ADJUSTr_RX_TIMER_BYTE_ADJUSTf_SET(r,f) (r).xlmac_timestamp_byte_adjust[0]=(((r).xlmac_timestamp_byte_adjust[0] & ~((uint32_t)0x3ff << 11)) | ((((uint32_t)f) & 0x3ff) << 11))
#define XLMAC_TIMESTAMP_BYTE_ADJUSTr_RX_TIMER_BYTE_ADJUST_ENf_GET(r) ((((r).xlmac_timestamp_byte_adjust[0]) >> 21) & 0x1)
#define XLMAC_TIMESTAMP_BYTE_ADJUSTr_RX_TIMER_BYTE_ADJUST_ENf_SET(r,f) (r).xlmac_timestamp_byte_adjust[0]=(((r).xlmac_timestamp_byte_adjust[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))

/*
 * These macros can be used to access XLMAC_TIMESTAMP_BYTE_ADJUST.
 */
#define READ_XLMAC_TIMESTAMP_BYTE_ADJUSTr(pa,p,r) bcmpmac_read(pa,p,XLMAC_TIMESTAMP_BYTE_ADJUSTr_OFFSET,0,XLMAC_TIMESTAMP_BYTE_ADJUSTr_SIZE,(r._xlmac_timestamp_byte_adjust))
#define WRITE_XLMAC_TIMESTAMP_BYTE_ADJUSTr(pa,p,r) bcmpmac_write(pa,p,XLMAC_TIMESTAMP_BYTE_ADJUSTr_OFFSET,0,XLMAC_TIMESTAMP_BYTE_ADJUSTr_SIZE,&(r._xlmac_timestamp_byte_adjust))

/*******************************************************************************
 * End of 'XLMAC_TIMESTAMP_BYTE_ADJUSTr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TXFIFO_CELL_CNT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_TXFIFO_CELL_CNTr_OFFSET 0x10062b00

#define XLMAC_TXFIFO_CELL_CNTr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_TXFIFO_CELL_CNT.
 */
typedef union XLMAC_TXFIFO_CELL_CNTr_s {
    uint32_t v[2];
    uint32_t xlmac_txfifo_cell_cnt[2];
    uint32_t _xlmac_txfifo_cell_cnt;
} XLMAC_TXFIFO_CELL_CNTr_t;

#define XLMAC_TXFIFO_CELL_CNTr_CLR(r) sal_memset(&((r).xlmac_txfifo_cell_cnt[0]), 0, sizeof(XLMAC_TXFIFO_CELL_CNTr_t))
#define XLMAC_TXFIFO_CELL_CNTr_SET(r,i,d) (r).xlmac_txfifo_cell_cnt[i] = d
#define XLMAC_TXFIFO_CELL_CNTr_GET(r,i) (r).xlmac_txfifo_cell_cnt[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_TXFIFO_CELL_CNTr_CELL_CNTf_GET(r) (((r).xlmac_txfifo_cell_cnt[0]) & 0x7f)
#define XLMAC_TXFIFO_CELL_CNTr_CELL_CNTf_SET(r,f) (r).xlmac_txfifo_cell_cnt[0]=(((r).xlmac_txfifo_cell_cnt[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access XLMAC_TXFIFO_CELL_CNT.
 */
#define READ_XLMAC_TXFIFO_CELL_CNTr(pa,p,r) bcmpmac_read(pa,p,XLMAC_TXFIFO_CELL_CNTr_OFFSET,0,XLMAC_TXFIFO_CELL_CNTr_SIZE,(r._xlmac_txfifo_cell_cnt))
#define WRITE_XLMAC_TXFIFO_CELL_CNTr(pa,p,r) bcmpmac_write(pa,p,XLMAC_TXFIFO_CELL_CNTr_OFFSET,0,XLMAC_TXFIFO_CELL_CNTr_SIZE,&(r._xlmac_txfifo_cell_cnt))

/*******************************************************************************
 * End of 'XLMAC_TXFIFO_CELL_CNTr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TXFIFO_CELL_REQ_CNT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_TXFIFO_CELL_REQ_CNTr_OFFSET 0x10062c00

#define XLMAC_TXFIFO_CELL_REQ_CNTr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_TXFIFO_CELL_REQ_CNT.
 */
typedef union XLMAC_TXFIFO_CELL_REQ_CNTr_s {
    uint32_t v[2];
    uint32_t xlmac_txfifo_cell_req_cnt[2];
    uint32_t _xlmac_txfifo_cell_req_cnt;
} XLMAC_TXFIFO_CELL_REQ_CNTr_t;

#define XLMAC_TXFIFO_CELL_REQ_CNTr_CLR(r) sal_memset(&((r).xlmac_txfifo_cell_req_cnt[0]), 0, sizeof(XLMAC_TXFIFO_CELL_REQ_CNTr_t))
#define XLMAC_TXFIFO_CELL_REQ_CNTr_SET(r,i,d) (r).xlmac_txfifo_cell_req_cnt[i] = d
#define XLMAC_TXFIFO_CELL_REQ_CNTr_GET(r,i) (r).xlmac_txfifo_cell_req_cnt[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_TXFIFO_CELL_REQ_CNTr_REQ_CNTf_GET(r) (((r).xlmac_txfifo_cell_req_cnt[0]) & 0x7f)
#define XLMAC_TXFIFO_CELL_REQ_CNTr_REQ_CNTf_SET(r,f) (r).xlmac_txfifo_cell_req_cnt[0]=(((r).xlmac_txfifo_cell_req_cnt[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access XLMAC_TXFIFO_CELL_REQ_CNT.
 */
#define READ_XLMAC_TXFIFO_CELL_REQ_CNTr(pa,p,r) bcmpmac_read(pa,p,XLMAC_TXFIFO_CELL_REQ_CNTr_OFFSET,0,XLMAC_TXFIFO_CELL_REQ_CNTr_SIZE,(r._xlmac_txfifo_cell_req_cnt))
#define WRITE_XLMAC_TXFIFO_CELL_REQ_CNTr(pa,p,r) bcmpmac_write(pa,p,XLMAC_TXFIFO_CELL_REQ_CNTr_OFFSET,0,XLMAC_TXFIFO_CELL_REQ_CNTr_SIZE,&(r._xlmac_txfifo_cell_req_cnt))

/*******************************************************************************
 * End of 'XLMAC_TXFIFO_CELL_REQ_CNTr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_CDC_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_TX_CDC_ECC_STATUSr_OFFSET 0x10063200

#define XLMAC_TX_CDC_ECC_STATUSr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_TX_CDC_ECC_STATUS.
 */
typedef union XLMAC_TX_CDC_ECC_STATUSr_s {
    uint32_t v[2];
    uint32_t xlmac_tx_cdc_ecc_status[2];
    uint32_t _xlmac_tx_cdc_ecc_status;
} XLMAC_TX_CDC_ECC_STATUSr_t;

#define XLMAC_TX_CDC_ECC_STATUSr_CLR(r) sal_memset(&((r).xlmac_tx_cdc_ecc_status[0]), 0, sizeof(XLMAC_TX_CDC_ECC_STATUSr_t))
#define XLMAC_TX_CDC_ECC_STATUSr_SET(r,i,d) (r).xlmac_tx_cdc_ecc_status[i] = d
#define XLMAC_TX_CDC_ECC_STATUSr_GET(r,i) (r).xlmac_tx_cdc_ecc_status[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_TX_CDC_ECC_STATUSr_TX_CDC_SINGLE_BIT_ERRf_GET(r) (((r).xlmac_tx_cdc_ecc_status[0]) & 0x1)
#define XLMAC_TX_CDC_ECC_STATUSr_TX_CDC_SINGLE_BIT_ERRf_SET(r,f) (r).xlmac_tx_cdc_ecc_status[0]=(((r).xlmac_tx_cdc_ecc_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_TX_CDC_ECC_STATUSr_TX_CDC_DOUBLE_BIT_ERRf_GET(r) ((((r).xlmac_tx_cdc_ecc_status[0]) >> 1) & 0x1)
#define XLMAC_TX_CDC_ECC_STATUSr_TX_CDC_DOUBLE_BIT_ERRf_SET(r,f) (r).xlmac_tx_cdc_ecc_status[0]=(((r).xlmac_tx_cdc_ecc_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access XLMAC_TX_CDC_ECC_STATUS.
 */
#define READ_XLMAC_TX_CDC_ECC_STATUSr(pa,p,r) bcmpmac_read(pa,p,XLMAC_TX_CDC_ECC_STATUSr_OFFSET,0,XLMAC_TX_CDC_ECC_STATUSr_SIZE,(r._xlmac_tx_cdc_ecc_status))
#define WRITE_XLMAC_TX_CDC_ECC_STATUSr(pa,p,r) bcmpmac_write(pa,p,XLMAC_TX_CDC_ECC_STATUSr_OFFSET,0,XLMAC_TX_CDC_ECC_STATUSr_SIZE,&(r._xlmac_tx_cdc_ecc_status))

/*******************************************************************************
 * End of 'XLMAC_TX_CDC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_CRC_CORRUPT_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_TX_CRC_CORRUPT_CTRLr_OFFSET 0x10062100

#define XLMAC_TX_CRC_CORRUPT_CTRLr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_TX_CRC_CORRUPT_CTRL.
 */
typedef union XLMAC_TX_CRC_CORRUPT_CTRLr_s {
    uint32_t v[2];
    uint32_t xlmac_tx_crc_corrupt_ctrl[2];
    uint32_t _xlmac_tx_crc_corrupt_ctrl;
} XLMAC_TX_CRC_CORRUPT_CTRLr_t;

#define XLMAC_TX_CRC_CORRUPT_CTRLr_CLR(r) sal_memset(&((r).xlmac_tx_crc_corrupt_ctrl[0]), 0, sizeof(XLMAC_TX_CRC_CORRUPT_CTRLr_t))
#define XLMAC_TX_CRC_CORRUPT_CTRLr_SET(r,i,d) (r).xlmac_tx_crc_corrupt_ctrl[i] = d
#define XLMAC_TX_CRC_CORRUPT_CTRLr_GET(r,i) (r).xlmac_tx_crc_corrupt_ctrl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_TX_CRC_CORRUPT_CTRLr_XLMAC_TX_CRC_CORRUPT_CTRL_LOf_GET(r) ((r).xlmac_tx_crc_corrupt_ctrl[0])
#define XLMAC_TX_CRC_CORRUPT_CTRLr_XLMAC_TX_CRC_CORRUPT_CTRL_LOf_SET(r,f) (r).xlmac_tx_crc_corrupt_ctrl[0]=((uint32_t)f)
#define XLMAC_TX_CRC_CORRUPT_CTRLr_TX_ERR_CORRUPTS_CRCf_GET(r) (((r).xlmac_tx_crc_corrupt_ctrl[0]) & 0x1)
#define XLMAC_TX_CRC_CORRUPT_CTRLr_TX_ERR_CORRUPTS_CRCf_SET(r,f) (r).xlmac_tx_crc_corrupt_ctrl[0]=(((r).xlmac_tx_crc_corrupt_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLMAC_TX_CRC_CORRUPT_CTRLr_TX_CRC_CORRUPT_ENf_GET(r) ((((r).xlmac_tx_crc_corrupt_ctrl[0]) >> 1) & 0x1)
#define XLMAC_TX_CRC_CORRUPT_CTRLr_TX_CRC_CORRUPT_ENf_SET(r,f) (r).xlmac_tx_crc_corrupt_ctrl[0]=(((r).xlmac_tx_crc_corrupt_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLMAC_TX_CRC_CORRUPT_CTRLr_TX_CRC_CORRUPTION_MODEf_GET(r) ((((r).xlmac_tx_crc_corrupt_ctrl[0]) >> 2) & 0x1)
#define XLMAC_TX_CRC_CORRUPT_CTRLr_TX_CRC_CORRUPTION_MODEf_SET(r,f) (r).xlmac_tx_crc_corrupt_ctrl[0]=(((r).xlmac_tx_crc_corrupt_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLMAC_TX_CRC_CORRUPT_CTRLr_PROG_TX_CRCf_GET(r) bcmpmac_field32_get((r).xlmac_tx_crc_corrupt_ctrl,3,34)
#define XLMAC_TX_CRC_CORRUPT_CTRLr_PROG_TX_CRCf_SET(r,f) bcmpmac_field32_set((r).xlmac_tx_crc_corrupt_ctrl,3,34,f)
#define XLMAC_TX_CRC_CORRUPT_CTRLr_XLMAC_TX_CRC_CORRUPT_CTRL_HIf_GET(r) (((r).xlmac_tx_crc_corrupt_ctrl[1]) & 0x7)
#define XLMAC_TX_CRC_CORRUPT_CTRLr_XLMAC_TX_CRC_CORRUPT_CTRL_HIf_SET(r,f) (r).xlmac_tx_crc_corrupt_ctrl[1]=(((r).xlmac_tx_crc_corrupt_ctrl[1] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access XLMAC_TX_CRC_CORRUPT_CTRL.
 */
#define READ_XLMAC_TX_CRC_CORRUPT_CTRLr(pa,p,r) bcmpmac_read(pa,p,XLMAC_TX_CRC_CORRUPT_CTRLr_OFFSET,0,XLMAC_TX_CRC_CORRUPT_CTRLr_SIZE,(r._xlmac_tx_crc_corrupt_ctrl))
#define WRITE_XLMAC_TX_CRC_CORRUPT_CTRLr(pa,p,r) bcmpmac_write(pa,p,XLMAC_TX_CRC_CORRUPT_CTRLr_OFFSET,0,XLMAC_TX_CRC_CORRUPT_CTRLr_SIZE,&(r._xlmac_tx_crc_corrupt_ctrl))

/*******************************************************************************
 * End of 'XLMAC_TX_CRC_CORRUPT_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_TX_CTRLr_OFFSET 0x10060300

#define XLMAC_TX_CTRLr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_TX_CTRL.
 */
typedef union XLMAC_TX_CTRLr_s {
    uint32_t v[2];
    uint32_t xlmac_tx_ctrl[2];
    uint32_t _xlmac_tx_ctrl;
} XLMAC_TX_CTRLr_t;

#define XLMAC_TX_CTRLr_CLR(r) sal_memset(&((r).xlmac_tx_ctrl[0]), 0, sizeof(XLMAC_TX_CTRLr_t))
#define XLMAC_TX_CTRLr_SET(r,i,d) (r).xlmac_tx_ctrl[i] = d
#define XLMAC_TX_CTRLr_GET(r,i) (r).xlmac_tx_ctrl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_TX_CTRLr_XLMAC_TX_CTRL_LOf_GET(r) ((r).xlmac_tx_ctrl[0])
#define XLMAC_TX_CTRLr_XLMAC_TX_CTRL_LOf_SET(r,f) (r).xlmac_tx_ctrl[0]=((uint32_t)f)
#define XLMAC_TX_CTRLr_CRC_MODEf_GET(r) (((r).xlmac_tx_ctrl[0]) & 0x3)
#define XLMAC_TX_CTRLr_CRC_MODEf_SET(r,f) (r).xlmac_tx_ctrl[0]=(((r).xlmac_tx_ctrl[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define XLMAC_TX_CTRLr_DISCARDf_GET(r) ((((r).xlmac_tx_ctrl[0]) >> 2) & 0x1)
#define XLMAC_TX_CTRLr_DISCARDf_SET(r,f) (r).xlmac_tx_ctrl[0]=(((r).xlmac_tx_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLMAC_TX_CTRLr_TX_ANY_STARTf_GET(r) ((((r).xlmac_tx_ctrl[0]) >> 3) & 0x1)
#define XLMAC_TX_CTRLr_TX_ANY_STARTf_SET(r,f) (r).xlmac_tx_ctrl[0]=(((r).xlmac_tx_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLMAC_TX_CTRLr_PAD_ENf_GET(r) ((((r).xlmac_tx_ctrl[0]) >> 4) & 0x1)
#define XLMAC_TX_CTRLr_PAD_ENf_SET(r,f) (r).xlmac_tx_ctrl[0]=(((r).xlmac_tx_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define XLMAC_TX_CTRLr_PAD_THRESHOLDf_GET(r) ((((r).xlmac_tx_ctrl[0]) >> 5) & 0x7f)
#define XLMAC_TX_CTRLr_PAD_THRESHOLDf_SET(r,f) (r).xlmac_tx_ctrl[0]=(((r).xlmac_tx_ctrl[0] & ~((uint32_t)0x7f << 5)) | ((((uint32_t)f) & 0x7f) << 5))
#define XLMAC_TX_CTRLr_AVERAGE_IPGf_GET(r) ((((r).xlmac_tx_ctrl[0]) >> 12) & 0x7f)
#define XLMAC_TX_CTRLr_AVERAGE_IPGf_SET(r,f) (r).xlmac_tx_ctrl[0]=(((r).xlmac_tx_ctrl[0] & ~((uint32_t)0x7f << 12)) | ((((uint32_t)f) & 0x7f) << 12))
#define XLMAC_TX_CTRLr_THROT_NUMf_GET(r) ((((r).xlmac_tx_ctrl[0]) >> 19) & 0x3f)
#define XLMAC_TX_CTRLr_THROT_NUMf_SET(r,f) (r).xlmac_tx_ctrl[0]=(((r).xlmac_tx_ctrl[0] & ~((uint32_t)0x3f << 19)) | ((((uint32_t)f) & 0x3f) << 19))
#define XLMAC_TX_CTRLr_THROT_DENOMf_GET(r) bcmpmac_field32_get((r).xlmac_tx_ctrl,25,32)
#define XLMAC_TX_CTRLr_THROT_DENOMf_SET(r,f) bcmpmac_field32_set((r).xlmac_tx_ctrl,25,32,f)
#define XLMAC_TX_CTRLr_XLMAC_TX_CTRL_HIf_GET(r) (((r).xlmac_tx_ctrl[1]) & 0x3ff)
#define XLMAC_TX_CTRLr_XLMAC_TX_CTRL_HIf_SET(r,f) (r).xlmac_tx_ctrl[1]=(((r).xlmac_tx_ctrl[1] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))
#define XLMAC_TX_CTRLr_TX_PREAMBLE_LENGTHf_GET(r) ((((r).xlmac_tx_ctrl[1]) >> 1) & 0xf)
#define XLMAC_TX_CTRLr_TX_PREAMBLE_LENGTHf_SET(r,f) (r).xlmac_tx_ctrl[1]=(((r).xlmac_tx_ctrl[1] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1))
#define XLMAC_TX_CTRLr_EP_DISCARDf_GET(r) ((((r).xlmac_tx_ctrl[1]) >> 5) & 0x1)
#define XLMAC_TX_CTRLr_EP_DISCARDf_SET(r,f) (r).xlmac_tx_ctrl[1]=(((r).xlmac_tx_ctrl[1] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define XLMAC_TX_CTRLr_TX_THRESHOLDf_GET(r) ((((r).xlmac_tx_ctrl[1]) >> 6) & 0xf)
#define XLMAC_TX_CTRLr_TX_THRESHOLDf_SET(r,f) (r).xlmac_tx_ctrl[1]=(((r).xlmac_tx_ctrl[1] & ~((uint32_t)0xf << 6)) | ((((uint32_t)f) & 0xf) << 6))

/*
 * These macros can be used to access XLMAC_TX_CTRL.
 */
#define READ_XLMAC_TX_CTRLr(pa,p,r) bcmpmac_read(pa,p,XLMAC_TX_CTRLr_OFFSET,0,XLMAC_TX_CTRLr_SIZE,(r._xlmac_tx_ctrl))
#define WRITE_XLMAC_TX_CTRLr(pa,p,r) bcmpmac_write(pa,p,XLMAC_TX_CTRLr_OFFSET,0,XLMAC_TX_CTRLr_SIZE,&(r._xlmac_tx_ctrl))

/*******************************************************************************
 * End of 'XLMAC_TX_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_LLFC_MSG_FIELDS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_TX_LLFC_MSG_FIELDSr_OFFSET 0x10061200

#define XLMAC_TX_LLFC_MSG_FIELDSr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_TX_LLFC_MSG_FIELDS.
 */
typedef union XLMAC_TX_LLFC_MSG_FIELDSr_s {
    uint32_t v[2];
    uint32_t xlmac_tx_llfc_msg_fields[2];
    uint32_t _xlmac_tx_llfc_msg_fields;
} XLMAC_TX_LLFC_MSG_FIELDSr_t;

#define XLMAC_TX_LLFC_MSG_FIELDSr_CLR(r) sal_memset(&((r).xlmac_tx_llfc_msg_fields[0]), 0, sizeof(XLMAC_TX_LLFC_MSG_FIELDSr_t))
#define XLMAC_TX_LLFC_MSG_FIELDSr_SET(r,i,d) (r).xlmac_tx_llfc_msg_fields[i] = d
#define XLMAC_TX_LLFC_MSG_FIELDSr_GET(r,i) (r).xlmac_tx_llfc_msg_fields[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_TX_LLFC_MSG_FIELDSr_TX_LLFC_MSG_TYPE_LOGICALf_GET(r) (((r).xlmac_tx_llfc_msg_fields[0]) & 0xff)
#define XLMAC_TX_LLFC_MSG_FIELDSr_TX_LLFC_MSG_TYPE_LOGICALf_SET(r,f) (r).xlmac_tx_llfc_msg_fields[0]=(((r).xlmac_tx_llfc_msg_fields[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define XLMAC_TX_LLFC_MSG_FIELDSr_TX_LLFC_FC_OBJ_LOGICALf_GET(r) ((((r).xlmac_tx_llfc_msg_fields[0]) >> 8) & 0xf)
#define XLMAC_TX_LLFC_MSG_FIELDSr_TX_LLFC_FC_OBJ_LOGICALf_SET(r,f) (r).xlmac_tx_llfc_msg_fields[0]=(((r).xlmac_tx_llfc_msg_fields[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define XLMAC_TX_LLFC_MSG_FIELDSr_LLFC_XOFF_TIMEf_GET(r) ((((r).xlmac_tx_llfc_msg_fields[0]) >> 12) & 0xffff)
#define XLMAC_TX_LLFC_MSG_FIELDSr_LLFC_XOFF_TIMEf_SET(r,f) (r).xlmac_tx_llfc_msg_fields[0]=(((r).xlmac_tx_llfc_msg_fields[0] & ~((uint32_t)0xffff << 12)) | ((((uint32_t)f) & 0xffff) << 12))

/*
 * These macros can be used to access XLMAC_TX_LLFC_MSG_FIELDS.
 */
#define READ_XLMAC_TX_LLFC_MSG_FIELDSr(pa,p,r) bcmpmac_read(pa,p,XLMAC_TX_LLFC_MSG_FIELDSr_OFFSET,0,XLMAC_TX_LLFC_MSG_FIELDSr_SIZE,(r._xlmac_tx_llfc_msg_fields))
#define WRITE_XLMAC_TX_LLFC_MSG_FIELDSr(pa,p,r) bcmpmac_write(pa,p,XLMAC_TX_LLFC_MSG_FIELDSr_OFFSET,0,XLMAC_TX_LLFC_MSG_FIELDSr_SIZE,&(r._xlmac_tx_llfc_msg_fields))

/*******************************************************************************
 * End of 'XLMAC_TX_LLFC_MSG_FIELDSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_MAC_SA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_TX_MAC_SAr_OFFSET 0x10060400

#define XLMAC_TX_MAC_SAr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_TX_MAC_SA.
 */
typedef union XLMAC_TX_MAC_SAr_s {
    uint32_t v[2];
    uint32_t xlmac_tx_mac_sa[2];
    uint32_t _xlmac_tx_mac_sa;
} XLMAC_TX_MAC_SAr_t;

#define XLMAC_TX_MAC_SAr_CLR(r) sal_memset(&((r).xlmac_tx_mac_sa[0]), 0, sizeof(XLMAC_TX_MAC_SAr_t))
#define XLMAC_TX_MAC_SAr_SET(r,i,d) (r).xlmac_tx_mac_sa[i] = d
#define XLMAC_TX_MAC_SAr_GET(r,i) (r).xlmac_tx_mac_sa[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_TX_MAC_SAr_CTRL_SAf_GET(r,a) bcmpmac_field_get((r).xlmac_tx_mac_sa,0,47,a)
#define XLMAC_TX_MAC_SAr_CTRL_SAf_SET(r,a) bcmpmac_field_set((r).xlmac_tx_mac_sa,0,47,a)
#define XLMAC_TX_MAC_SAr_SA_LOf_GET(r) ((r).xlmac_tx_mac_sa[0])
#define XLMAC_TX_MAC_SAr_SA_LOf_SET(r,f) (r).xlmac_tx_mac_sa[0]=((uint32_t)f)
#define XLMAC_TX_MAC_SAr_SA_HIf_GET(r) (((r).xlmac_tx_mac_sa[1]) & 0xffff)
#define XLMAC_TX_MAC_SAr_SA_HIf_SET(r,f) (r).xlmac_tx_mac_sa[1]=(((r).xlmac_tx_mac_sa[1] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access XLMAC_TX_MAC_SA.
 */
#define READ_XLMAC_TX_MAC_SAr(pa,p,r) bcmpmac_read(pa,p,XLMAC_TX_MAC_SAr_OFFSET,0,XLMAC_TX_MAC_SAr_SIZE,(r._xlmac_tx_mac_sa))
#define WRITE_XLMAC_TX_MAC_SAr(pa,p,r) bcmpmac_write(pa,p,XLMAC_TX_MAC_SAr_OFFSET,0,XLMAC_TX_MAC_SAr_SIZE,&(r._xlmac_tx_mac_sa))

/*******************************************************************************
 * End of 'XLMAC_TX_MAC_SAr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_TIMESTAMP_FIFO_DATA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_TX_TIMESTAMP_FIFO_DATAr_OFFSET 0x10061400

#define XLMAC_TX_TIMESTAMP_FIFO_DATAr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_TX_TIMESTAMP_FIFO_DATA.
 */
typedef union XLMAC_TX_TIMESTAMP_FIFO_DATAr_s {
    uint32_t v[2];
    uint32_t xlmac_tx_timestamp_fifo_data[2];
    uint32_t _xlmac_tx_timestamp_fifo_data;
} XLMAC_TX_TIMESTAMP_FIFO_DATAr_t;

#define XLMAC_TX_TIMESTAMP_FIFO_DATAr_CLR(r) sal_memset(&((r).xlmac_tx_timestamp_fifo_data[0]), 0, sizeof(XLMAC_TX_TIMESTAMP_FIFO_DATAr_t))
#define XLMAC_TX_TIMESTAMP_FIFO_DATAr_SET(r,i,d) (r).xlmac_tx_timestamp_fifo_data[i] = d
#define XLMAC_TX_TIMESTAMP_FIFO_DATAr_GET(r,i) (r).xlmac_tx_timestamp_fifo_data[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_TX_TIMESTAMP_FIFO_DATAr_TIME_STAMPf_GET(r) ((r).xlmac_tx_timestamp_fifo_data[0])
#define XLMAC_TX_TIMESTAMP_FIFO_DATAr_TIME_STAMPf_SET(r,f) (r).xlmac_tx_timestamp_fifo_data[0]=((uint32_t)f)
#define XLMAC_TX_TIMESTAMP_FIFO_DATAr_SEQUENCE_IDf_GET(r) (((r).xlmac_tx_timestamp_fifo_data[1]) & 0xffff)
#define XLMAC_TX_TIMESTAMP_FIFO_DATAr_SEQUENCE_IDf_SET(r,f) (r).xlmac_tx_timestamp_fifo_data[1]=(((r).xlmac_tx_timestamp_fifo_data[1] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define XLMAC_TX_TIMESTAMP_FIFO_DATAr_TS_ENTRY_VALIDf_GET(r) ((((r).xlmac_tx_timestamp_fifo_data[1]) >> 16) & 0x1)
#define XLMAC_TX_TIMESTAMP_FIFO_DATAr_TS_ENTRY_VALIDf_SET(r,f) (r).xlmac_tx_timestamp_fifo_data[1]=(((r).xlmac_tx_timestamp_fifo_data[1] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))

/*
 * These macros can be used to access XLMAC_TX_TIMESTAMP_FIFO_DATA.
 */
#define READ_XLMAC_TX_TIMESTAMP_FIFO_DATAr(pa,p,r) bcmpmac_read(pa,p,XLMAC_TX_TIMESTAMP_FIFO_DATAr_OFFSET,0,XLMAC_TX_TIMESTAMP_FIFO_DATAr_SIZE,(r._xlmac_tx_timestamp_fifo_data))
#define WRITE_XLMAC_TX_TIMESTAMP_FIFO_DATAr(pa,p,r) bcmpmac_write(pa,p,XLMAC_TX_TIMESTAMP_FIFO_DATAr_OFFSET,0,XLMAC_TX_TIMESTAMP_FIFO_DATAr_SIZE,&(r._xlmac_tx_timestamp_fifo_data))

/*******************************************************************************
 * End of 'XLMAC_TX_TIMESTAMP_FIFO_DATAr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_TIMESTAMP_FIFO_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_TX_TIMESTAMP_FIFO_STATUSr_OFFSET 0x10061500

#define XLMAC_TX_TIMESTAMP_FIFO_STATUSr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_TX_TIMESTAMP_FIFO_STATUS.
 */
typedef union XLMAC_TX_TIMESTAMP_FIFO_STATUSr_s {
    uint32_t v[2];
    uint32_t xlmac_tx_timestamp_fifo_status[2];
    uint32_t _xlmac_tx_timestamp_fifo_status;
} XLMAC_TX_TIMESTAMP_FIFO_STATUSr_t;

#define XLMAC_TX_TIMESTAMP_FIFO_STATUSr_CLR(r) sal_memset(&((r).xlmac_tx_timestamp_fifo_status[0]), 0, sizeof(XLMAC_TX_TIMESTAMP_FIFO_STATUSr_t))
#define XLMAC_TX_TIMESTAMP_FIFO_STATUSr_SET(r,i,d) (r).xlmac_tx_timestamp_fifo_status[i] = d
#define XLMAC_TX_TIMESTAMP_FIFO_STATUSr_GET(r,i) (r).xlmac_tx_timestamp_fifo_status[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_TX_TIMESTAMP_FIFO_STATUSr_ENTRY_COUNTf_GET(r) (((r).xlmac_tx_timestamp_fifo_status[0]) & 0x7)
#define XLMAC_TX_TIMESTAMP_FIFO_STATUSr_ENTRY_COUNTf_SET(r,f) (r).xlmac_tx_timestamp_fifo_status[0]=(((r).xlmac_tx_timestamp_fifo_status[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access XLMAC_TX_TIMESTAMP_FIFO_STATUS.
 */
#define READ_XLMAC_TX_TIMESTAMP_FIFO_STATUSr(pa,p,r) bcmpmac_read(pa,p,XLMAC_TX_TIMESTAMP_FIFO_STATUSr_OFFSET,0,XLMAC_TX_TIMESTAMP_FIFO_STATUSr_SIZE,(r._xlmac_tx_timestamp_fifo_status))
#define WRITE_XLMAC_TX_TIMESTAMP_FIFO_STATUSr(pa,p,r) bcmpmac_write(pa,p,XLMAC_TX_TIMESTAMP_FIFO_STATUSr_OFFSET,0,XLMAC_TX_TIMESTAMP_FIFO_STATUSr_SIZE,&(r._xlmac_tx_timestamp_fifo_status))

/*******************************************************************************
 * End of 'XLMAC_TX_TIMESTAMP_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_VERSION_ID
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMAC_VERSION_IDr_OFFSET 0x10060000

#define XLMAC_VERSION_IDr_SIZE 8

/*
 * This structure should be used to declare and program XLMAC_VERSION_ID.
 */
typedef union XLMAC_VERSION_IDr_s {
    uint32_t v[2];
    uint32_t xlmac_version_id[2];
    uint32_t _xlmac_version_id;
} XLMAC_VERSION_IDr_t;

#define XLMAC_VERSION_IDr_CLR(r) sal_memset(&((r).xlmac_version_id[0]), 0, sizeof(XLMAC_VERSION_IDr_t))
#define XLMAC_VERSION_IDr_SET(r,i,d) (r).xlmac_version_id[i] = d
#define XLMAC_VERSION_IDr_GET(r,i) (r).xlmac_version_id[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMAC_VERSION_IDr_XLMAC_VERSIONf_GET(r) (((r).xlmac_version_id[0]) & 0xffff)
#define XLMAC_VERSION_IDr_XLMAC_VERSIONf_SET(r,f) (r).xlmac_version_id[0]=(((r).xlmac_version_id[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access XLMAC_VERSION_ID.
 */
#define READ_XLMAC_VERSION_IDr(pa,p,r) bcmpmac_read(pa,p,XLMAC_VERSION_IDr_OFFSET,0,XLMAC_VERSION_IDr_SIZE,(r._xlmac_version_id))
#define WRITE_XLMAC_VERSION_IDr(pa,p,r) bcmpmac_write(pa,p,XLMAC_VERSION_IDr_OFFSET,0,XLMAC_VERSION_IDr_SIZE,&(r._xlmac_version_id))

/*******************************************************************************
 * End of 'XLMAC_VERSION_IDr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R1023
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_R1023r_OFFSET 0x00000400

#define XLMIB_R1023r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_R1023.
 */
typedef union XLMIB_R1023r_s {
    uint32_t v[2];
    uint32_t xlmib_r1023[2];
    uint32_t _xlmib_r1023;
} XLMIB_R1023r_t;

#define XLMIB_R1023r_CLR(r) sal_memset(&((r).xlmib_r1023[0]), 0, sizeof(XLMIB_R1023r_t))
#define XLMIB_R1023r_SET(r,i,d) (r).xlmib_r1023[i] = d
#define XLMIB_R1023r_GET(r,i) (r).xlmib_r1023[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_R1023r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_r1023,0,39,a)
#define XLMIB_R1023r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_r1023,0,39,a)

/*
 * These macros can be used to access XLMIB_R1023.
 */
#define READ_XLMIB_R1023r(pa,p,r) bcmpmac_read(pa,p,XLMIB_R1023r_OFFSET,0,XLMIB_R1023r_SIZE,(r._xlmib_r1023))
#define WRITE_XLMIB_R1023r(pa,p,r) bcmpmac_write(pa,p,XLMIB_R1023r_OFFSET,0,XLMIB_R1023r_SIZE,&(r._xlmib_r1023))

/*******************************************************************************
 * End of 'XLMIB_R1023r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R127
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_R127r_OFFSET 0x00000100

#define XLMIB_R127r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_R127.
 */
typedef union XLMIB_R127r_s {
    uint32_t v[2];
    uint32_t xlmib_r127[2];
    uint32_t _xlmib_r127;
} XLMIB_R127r_t;

#define XLMIB_R127r_CLR(r) sal_memset(&((r).xlmib_r127[0]), 0, sizeof(XLMIB_R127r_t))
#define XLMIB_R127r_SET(r,i,d) (r).xlmib_r127[i] = d
#define XLMIB_R127r_GET(r,i) (r).xlmib_r127[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_R127r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_r127,0,39,a)
#define XLMIB_R127r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_r127,0,39,a)

/*
 * These macros can be used to access XLMIB_R127.
 */
#define READ_XLMIB_R127r(pa,p,r) bcmpmac_read(pa,p,XLMIB_R127r_OFFSET,0,XLMIB_R127r_SIZE,(r._xlmib_r127))
#define WRITE_XLMIB_R127r(pa,p,r) bcmpmac_write(pa,p,XLMIB_R127r_OFFSET,0,XLMIB_R127r_SIZE,&(r._xlmib_r127))

/*******************************************************************************
 * End of 'XLMIB_R127r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R1518
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_R1518r_OFFSET 0x00000500

#define XLMIB_R1518r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_R1518.
 */
typedef union XLMIB_R1518r_s {
    uint32_t v[2];
    uint32_t xlmib_r1518[2];
    uint32_t _xlmib_r1518;
} XLMIB_R1518r_t;

#define XLMIB_R1518r_CLR(r) sal_memset(&((r).xlmib_r1518[0]), 0, sizeof(XLMIB_R1518r_t))
#define XLMIB_R1518r_SET(r,i,d) (r).xlmib_r1518[i] = d
#define XLMIB_R1518r_GET(r,i) (r).xlmib_r1518[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_R1518r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_r1518,0,39,a)
#define XLMIB_R1518r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_r1518,0,39,a)

/*
 * These macros can be used to access XLMIB_R1518.
 */
#define READ_XLMIB_R1518r(pa,p,r) bcmpmac_read(pa,p,XLMIB_R1518r_OFFSET,0,XLMIB_R1518r_SIZE,(r._xlmib_r1518))
#define WRITE_XLMIB_R1518r(pa,p,r) bcmpmac_write(pa,p,XLMIB_R1518r_OFFSET,0,XLMIB_R1518r_SIZE,&(r._xlmib_r1518))

/*******************************************************************************
 * End of 'XLMIB_R1518r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R16383
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_R16383r_OFFSET 0x00000a00

#define XLMIB_R16383r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_R16383.
 */
typedef union XLMIB_R16383r_s {
    uint32_t v[2];
    uint32_t xlmib_r16383[2];
    uint32_t _xlmib_r16383;
} XLMIB_R16383r_t;

#define XLMIB_R16383r_CLR(r) sal_memset(&((r).xlmib_r16383[0]), 0, sizeof(XLMIB_R16383r_t))
#define XLMIB_R16383r_SET(r,i,d) (r).xlmib_r16383[i] = d
#define XLMIB_R16383r_GET(r,i) (r).xlmib_r16383[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_R16383r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_r16383,0,39,a)
#define XLMIB_R16383r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_r16383,0,39,a)

/*
 * These macros can be used to access XLMIB_R16383.
 */
#define READ_XLMIB_R16383r(pa,p,r) bcmpmac_read(pa,p,XLMIB_R16383r_OFFSET,0,XLMIB_R16383r_SIZE,(r._xlmib_r16383))
#define WRITE_XLMIB_R16383r(pa,p,r) bcmpmac_write(pa,p,XLMIB_R16383r_OFFSET,0,XLMIB_R16383r_SIZE,&(r._xlmib_r16383))

/*******************************************************************************
 * End of 'XLMIB_R16383r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R2047
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_R2047r_OFFSET 0x00000700

#define XLMIB_R2047r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_R2047.
 */
typedef union XLMIB_R2047r_s {
    uint32_t v[2];
    uint32_t xlmib_r2047[2];
    uint32_t _xlmib_r2047;
} XLMIB_R2047r_t;

#define XLMIB_R2047r_CLR(r) sal_memset(&((r).xlmib_r2047[0]), 0, sizeof(XLMIB_R2047r_t))
#define XLMIB_R2047r_SET(r,i,d) (r).xlmib_r2047[i] = d
#define XLMIB_R2047r_GET(r,i) (r).xlmib_r2047[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_R2047r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_r2047,0,39,a)
#define XLMIB_R2047r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_r2047,0,39,a)

/*
 * These macros can be used to access XLMIB_R2047.
 */
#define READ_XLMIB_R2047r(pa,p,r) bcmpmac_read(pa,p,XLMIB_R2047r_OFFSET,0,XLMIB_R2047r_SIZE,(r._xlmib_r2047))
#define WRITE_XLMIB_R2047r(pa,p,r) bcmpmac_write(pa,p,XLMIB_R2047r_OFFSET,0,XLMIB_R2047r_SIZE,&(r._xlmib_r2047))

/*******************************************************************************
 * End of 'XLMIB_R2047r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R255
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_R255r_OFFSET 0x00000200

#define XLMIB_R255r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_R255.
 */
typedef union XLMIB_R255r_s {
    uint32_t v[2];
    uint32_t xlmib_r255[2];
    uint32_t _xlmib_r255;
} XLMIB_R255r_t;

#define XLMIB_R255r_CLR(r) sal_memset(&((r).xlmib_r255[0]), 0, sizeof(XLMIB_R255r_t))
#define XLMIB_R255r_SET(r,i,d) (r).xlmib_r255[i] = d
#define XLMIB_R255r_GET(r,i) (r).xlmib_r255[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_R255r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_r255,0,39,a)
#define XLMIB_R255r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_r255,0,39,a)

/*
 * These macros can be used to access XLMIB_R255.
 */
#define READ_XLMIB_R255r(pa,p,r) bcmpmac_read(pa,p,XLMIB_R255r_OFFSET,0,XLMIB_R255r_SIZE,(r._xlmib_r255))
#define WRITE_XLMIB_R255r(pa,p,r) bcmpmac_write(pa,p,XLMIB_R255r_OFFSET,0,XLMIB_R255r_SIZE,&(r._xlmib_r255))

/*******************************************************************************
 * End of 'XLMIB_R255r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R4095
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_R4095r_OFFSET 0x00000800

#define XLMIB_R4095r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_R4095.
 */
typedef union XLMIB_R4095r_s {
    uint32_t v[2];
    uint32_t xlmib_r4095[2];
    uint32_t _xlmib_r4095;
} XLMIB_R4095r_t;

#define XLMIB_R4095r_CLR(r) sal_memset(&((r).xlmib_r4095[0]), 0, sizeof(XLMIB_R4095r_t))
#define XLMIB_R4095r_SET(r,i,d) (r).xlmib_r4095[i] = d
#define XLMIB_R4095r_GET(r,i) (r).xlmib_r4095[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_R4095r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_r4095,0,39,a)
#define XLMIB_R4095r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_r4095,0,39,a)

/*
 * These macros can be used to access XLMIB_R4095.
 */
#define READ_XLMIB_R4095r(pa,p,r) bcmpmac_read(pa,p,XLMIB_R4095r_OFFSET,0,XLMIB_R4095r_SIZE,(r._xlmib_r4095))
#define WRITE_XLMIB_R4095r(pa,p,r) bcmpmac_write(pa,p,XLMIB_R4095r_OFFSET,0,XLMIB_R4095r_SIZE,&(r._xlmib_r4095))

/*******************************************************************************
 * End of 'XLMIB_R4095r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R511
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_R511r_OFFSET 0x00000300

#define XLMIB_R511r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_R511.
 */
typedef union XLMIB_R511r_s {
    uint32_t v[2];
    uint32_t xlmib_r511[2];
    uint32_t _xlmib_r511;
} XLMIB_R511r_t;

#define XLMIB_R511r_CLR(r) sal_memset(&((r).xlmib_r511[0]), 0, sizeof(XLMIB_R511r_t))
#define XLMIB_R511r_SET(r,i,d) (r).xlmib_r511[i] = d
#define XLMIB_R511r_GET(r,i) (r).xlmib_r511[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_R511r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_r511,0,39,a)
#define XLMIB_R511r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_r511,0,39,a)

/*
 * These macros can be used to access XLMIB_R511.
 */
#define READ_XLMIB_R511r(pa,p,r) bcmpmac_read(pa,p,XLMIB_R511r_OFFSET,0,XLMIB_R511r_SIZE,(r._xlmib_r511))
#define WRITE_XLMIB_R511r(pa,p,r) bcmpmac_write(pa,p,XLMIB_R511r_OFFSET,0,XLMIB_R511r_SIZE,&(r._xlmib_r511))

/*******************************************************************************
 * End of 'XLMIB_R511r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R64
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_R64r_OFFSET 0x00000000

#define XLMIB_R64r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_R64.
 */
typedef union XLMIB_R64r_s {
    uint32_t v[2];
    uint32_t xlmib_r64[2];
    uint32_t _xlmib_r64;
} XLMIB_R64r_t;

#define XLMIB_R64r_CLR(r) sal_memset(&((r).xlmib_r64[0]), 0, sizeof(XLMIB_R64r_t))
#define XLMIB_R64r_SET(r,i,d) (r).xlmib_r64[i] = d
#define XLMIB_R64r_GET(r,i) (r).xlmib_r64[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_R64r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_r64,0,39,a)
#define XLMIB_R64r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_r64,0,39,a)

/*
 * These macros can be used to access XLMIB_R64.
 */
#define READ_XLMIB_R64r(pa,p,r) bcmpmac_read(pa,p,XLMIB_R64r_OFFSET,0,XLMIB_R64r_SIZE,(r._xlmib_r64))
#define WRITE_XLMIB_R64r(pa,p,r) bcmpmac_write(pa,p,XLMIB_R64r_OFFSET,0,XLMIB_R64r_SIZE,&(r._xlmib_r64))

/*******************************************************************************
 * End of 'XLMIB_R64r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R9216
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_R9216r_OFFSET 0x00000900

#define XLMIB_R9216r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_R9216.
 */
typedef union XLMIB_R9216r_s {
    uint32_t v[2];
    uint32_t xlmib_r9216[2];
    uint32_t _xlmib_r9216;
} XLMIB_R9216r_t;

#define XLMIB_R9216r_CLR(r) sal_memset(&((r).xlmib_r9216[0]), 0, sizeof(XLMIB_R9216r_t))
#define XLMIB_R9216r_SET(r,i,d) (r).xlmib_r9216[i] = d
#define XLMIB_R9216r_GET(r,i) (r).xlmib_r9216[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_R9216r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_r9216,0,39,a)
#define XLMIB_R9216r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_r9216,0,39,a)

/*
 * These macros can be used to access XLMIB_R9216.
 */
#define READ_XLMIB_R9216r(pa,p,r) bcmpmac_read(pa,p,XLMIB_R9216r_OFFSET,0,XLMIB_R9216r_SIZE,(r._xlmib_r9216))
#define WRITE_XLMIB_R9216r(pa,p,r) bcmpmac_write(pa,p,XLMIB_R9216r_OFFSET,0,XLMIB_R9216r_SIZE,&(r._xlmib_r9216))

/*******************************************************************************
 * End of 'XLMIB_R9216r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RALN
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RALNr_OFFSET 0x00001600

#define XLMIB_RALNr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RALN.
 */
typedef union XLMIB_RALNr_s {
    uint32_t v[2];
    uint32_t xlmib_raln[2];
    uint32_t _xlmib_raln;
} XLMIB_RALNr_t;

#define XLMIB_RALNr_CLR(r) sal_memset(&((r).xlmib_raln[0]), 0, sizeof(XLMIB_RALNr_t))
#define XLMIB_RALNr_SET(r,i,d) (r).xlmib_raln[i] = d
#define XLMIB_RALNr_GET(r,i) (r).xlmib_raln[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RALNr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_raln,0,39,a)
#define XLMIB_RALNr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_raln,0,39,a)

/*
 * These macros can be used to access XLMIB_RALN.
 */
#define READ_XLMIB_RALNr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RALNr_OFFSET,0,XLMIB_RALNr_SIZE,(r._xlmib_raln))
#define WRITE_XLMIB_RALNr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RALNr_OFFSET,0,XLMIB_RALNr_SIZE,&(r._xlmib_raln))

/*******************************************************************************
 * End of 'XLMIB_RALNr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RBCA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RBCAr_OFFSET 0x00000e00

#define XLMIB_RBCAr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RBCA.
 */
typedef union XLMIB_RBCAr_s {
    uint32_t v[2];
    uint32_t xlmib_rbca[2];
    uint32_t _xlmib_rbca;
} XLMIB_RBCAr_t;

#define XLMIB_RBCAr_CLR(r) sal_memset(&((r).xlmib_rbca[0]), 0, sizeof(XLMIB_RBCAr_t))
#define XLMIB_RBCAr_SET(r,i,d) (r).xlmib_rbca[i] = d
#define XLMIB_RBCAr_GET(r,i) (r).xlmib_rbca[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RBCAr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rbca,0,39,a)
#define XLMIB_RBCAr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rbca,0,39,a)

/*
 * These macros can be used to access XLMIB_RBCA.
 */
#define READ_XLMIB_RBCAr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RBCAr_OFFSET,0,XLMIB_RBCAr_SIZE,(r._xlmib_rbca))
#define WRITE_XLMIB_RBCAr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RBCAr_OFFSET,0,XLMIB_RBCAr_SIZE,&(r._xlmib_rbca))

/*******************************************************************************
 * End of 'XLMIB_RBCAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RBYT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RBYTr_OFFSET 0x00003d00

#define XLMIB_RBYTr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RBYT.
 */
typedef union XLMIB_RBYTr_s {
    uint32_t v[2];
    uint32_t xlmib_rbyt[2];
    uint32_t _xlmib_rbyt;
} XLMIB_RBYTr_t;

#define XLMIB_RBYTr_CLR(r) sal_memset(&((r).xlmib_rbyt[0]), 0, sizeof(XLMIB_RBYTr_t))
#define XLMIB_RBYTr_SET(r,i,d) (r).xlmib_rbyt[i] = d
#define XLMIB_RBYTr_GET(r,i) (r).xlmib_rbyt[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RBYTr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rbyt,0,47,a)
#define XLMIB_RBYTr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rbyt,0,47,a)

/*
 * These macros can be used to access XLMIB_RBYT.
 */
#define READ_XLMIB_RBYTr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RBYTr_OFFSET,0,XLMIB_RBYTr_SIZE,(r._xlmib_rbyt))
#define WRITE_XLMIB_RBYTr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RBYTr_OFFSET,0,XLMIB_RBYTr_SIZE,&(r._xlmib_rbyt))

/*******************************************************************************
 * End of 'XLMIB_RBYTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RDVLN
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RDVLNr_OFFSET 0x10002000

#define XLMIB_RDVLNr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RDVLN.
 */
typedef union XLMIB_RDVLNr_s {
    uint32_t v[2];
    uint32_t xlmib_rdvln[2];
    uint32_t _xlmib_rdvln;
} XLMIB_RDVLNr_t;

#define XLMIB_RDVLNr_CLR(r) sal_memset(&((r).xlmib_rdvln[0]), 0, sizeof(XLMIB_RDVLNr_t))
#define XLMIB_RDVLNr_SET(r,i,d) (r).xlmib_rdvln[i] = d
#define XLMIB_RDVLNr_GET(r,i) (r).xlmib_rdvln[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RDVLNr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rdvln,0,39,a)
#define XLMIB_RDVLNr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rdvln,0,39,a)

/*
 * These macros can be used to access XLMIB_RDVLN.
 */
#define READ_XLMIB_RDVLNr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RDVLNr_OFFSET,0,XLMIB_RDVLNr_SIZE,(r._xlmib_rdvln))
#define WRITE_XLMIB_RDVLNr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RDVLNr_OFFSET,0,XLMIB_RDVLNr_SIZE,&(r._xlmib_rdvln))

/*******************************************************************************
 * End of 'XLMIB_RDVLNr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RERPKT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RERPKTr_OFFSET 0x00001800

#define XLMIB_RERPKTr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RERPKT.
 */
typedef union XLMIB_RERPKTr_s {
    uint32_t v[2];
    uint32_t xlmib_rerpkt[2];
    uint32_t _xlmib_rerpkt;
} XLMIB_RERPKTr_t;

#define XLMIB_RERPKTr_CLR(r) sal_memset(&((r).xlmib_rerpkt[0]), 0, sizeof(XLMIB_RERPKTr_t))
#define XLMIB_RERPKTr_SET(r,i,d) (r).xlmib_rerpkt[i] = d
#define XLMIB_RERPKTr_GET(r,i) (r).xlmib_rerpkt[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RERPKTr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rerpkt,0,39,a)
#define XLMIB_RERPKTr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rerpkt,0,39,a)

/*
 * These macros can be used to access XLMIB_RERPKT.
 */
#define READ_XLMIB_RERPKTr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RERPKTr_OFFSET,0,XLMIB_RERPKTr_SIZE,(r._xlmib_rerpkt))
#define WRITE_XLMIB_RERPKTr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RERPKTr_OFFSET,0,XLMIB_RERPKTr_SIZE,&(r._xlmib_rerpkt))

/*******************************************************************************
 * End of 'XLMIB_RERPKTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RFCR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RFCRr_OFFSET 0x00001900

#define XLMIB_RFCRr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RFCR.
 */
typedef union XLMIB_RFCRr_s {
    uint32_t v[2];
    uint32_t xlmib_rfcr[2];
    uint32_t _xlmib_rfcr;
} XLMIB_RFCRr_t;

#define XLMIB_RFCRr_CLR(r) sal_memset(&((r).xlmib_rfcr[0]), 0, sizeof(XLMIB_RFCRr_t))
#define XLMIB_RFCRr_SET(r,i,d) (r).xlmib_rfcr[i] = d
#define XLMIB_RFCRr_GET(r,i) (r).xlmib_rfcr[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RFCRr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rfcr,0,39,a)
#define XLMIB_RFCRr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rfcr,0,39,a)

/*
 * These macros can be used to access XLMIB_RFCR.
 */
#define READ_XLMIB_RFCRr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RFCRr_OFFSET,0,XLMIB_RFCRr_SIZE,(r._xlmib_rfcr))
#define WRITE_XLMIB_RFCRr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RFCRr_OFFSET,0,XLMIB_RFCRr_SIZE,&(r._xlmib_rfcr))

/*******************************************************************************
 * End of 'XLMIB_RFCRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RFCS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RFCSr_OFFSET 0x00000f00

#define XLMIB_RFCSr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RFCS.
 */
typedef union XLMIB_RFCSr_s {
    uint32_t v[2];
    uint32_t xlmib_rfcs[2];
    uint32_t _xlmib_rfcs;
} XLMIB_RFCSr_t;

#define XLMIB_RFCSr_CLR(r) sal_memset(&((r).xlmib_rfcs[0]), 0, sizeof(XLMIB_RFCSr_t))
#define XLMIB_RFCSr_SET(r,i,d) (r).xlmib_rfcs[i] = d
#define XLMIB_RFCSr_GET(r,i) (r).xlmib_rfcs[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RFCSr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rfcs,0,39,a)
#define XLMIB_RFCSr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rfcs,0,39,a)

/*
 * These macros can be used to access XLMIB_RFCS.
 */
#define READ_XLMIB_RFCSr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RFCSr_OFFSET,0,XLMIB_RFCSr_SIZE,(r._xlmib_rfcs))
#define WRITE_XLMIB_RFCSr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RFCSr_OFFSET,0,XLMIB_RFCSr_SIZE,&(r._xlmib_rfcs))

/*******************************************************************************
 * End of 'XLMIB_RFCSr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RFLR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RFLRr_OFFSET 0x00001700

#define XLMIB_RFLRr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RFLR.
 */
typedef union XLMIB_RFLRr_s {
    uint32_t v[2];
    uint32_t xlmib_rflr[2];
    uint32_t _xlmib_rflr;
} XLMIB_RFLRr_t;

#define XLMIB_RFLRr_CLR(r) sal_memset(&((r).xlmib_rflr[0]), 0, sizeof(XLMIB_RFLRr_t))
#define XLMIB_RFLRr_SET(r,i,d) (r).xlmib_rflr[i] = d
#define XLMIB_RFLRr_GET(r,i) (r).xlmib_rflr[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RFLRr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rflr,0,39,a)
#define XLMIB_RFLRr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rflr,0,39,a)

/*
 * These macros can be used to access XLMIB_RFLR.
 */
#define READ_XLMIB_RFLRr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RFLRr_OFFSET,0,XLMIB_RFLRr_SIZE,(r._xlmib_rflr))
#define WRITE_XLMIB_RFLRr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RFLRr_OFFSET,0,XLMIB_RFLRr_SIZE,&(r._xlmib_rflr))

/*******************************************************************************
 * End of 'XLMIB_RFLRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RFRG
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RFRGr_OFFSET 0x10003500

#define XLMIB_RFRGr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RFRG.
 */
typedef union XLMIB_RFRGr_s {
    uint32_t v[2];
    uint32_t xlmib_rfrg[2];
    uint32_t _xlmib_rfrg;
} XLMIB_RFRGr_t;

#define XLMIB_RFRGr_CLR(r) sal_memset(&((r).xlmib_rfrg[0]), 0, sizeof(XLMIB_RFRGr_t))
#define XLMIB_RFRGr_SET(r,i,d) (r).xlmib_rfrg[i] = d
#define XLMIB_RFRGr_GET(r,i) (r).xlmib_rfrg[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RFRGr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rfrg,0,39,a)
#define XLMIB_RFRGr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rfrg,0,39,a)

/*
 * These macros can be used to access XLMIB_RFRG.
 */
#define READ_XLMIB_RFRGr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RFRGr_OFFSET,0,XLMIB_RFRGr_SIZE,(r._xlmib_rfrg))
#define WRITE_XLMIB_RFRGr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RFRGr_OFFSET,0,XLMIB_RFRGr_SIZE,&(r._xlmib_rfrg))

/*******************************************************************************
 * End of 'XLMIB_RFRGr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RJBR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RJBRr_OFFSET 0x00001b00

#define XLMIB_RJBRr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RJBR.
 */
typedef union XLMIB_RJBRr_s {
    uint32_t v[2];
    uint32_t xlmib_rjbr[2];
    uint32_t _xlmib_rjbr;
} XLMIB_RJBRr_t;

#define XLMIB_RJBRr_CLR(r) sal_memset(&((r).xlmib_rjbr[0]), 0, sizeof(XLMIB_RJBRr_t))
#define XLMIB_RJBRr_SET(r,i,d) (r).xlmib_rjbr[i] = d
#define XLMIB_RJBRr_GET(r,i) (r).xlmib_rjbr[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RJBRr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rjbr,0,39,a)
#define XLMIB_RJBRr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rjbr,0,39,a)

/*
 * These macros can be used to access XLMIB_RJBR.
 */
#define READ_XLMIB_RJBRr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RJBRr_OFFSET,0,XLMIB_RJBRr_SIZE,(r._xlmib_rjbr))
#define WRITE_XLMIB_RJBRr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RJBRr_OFFSET,0,XLMIB_RJBRr_SIZE,&(r._xlmib_rjbr))

/*******************************************************************************
 * End of 'XLMIB_RJBRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RMCA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RMCAr_OFFSET 0x00000d00

#define XLMIB_RMCAr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RMCA.
 */
typedef union XLMIB_RMCAr_s {
    uint32_t v[2];
    uint32_t xlmib_rmca[2];
    uint32_t _xlmib_rmca;
} XLMIB_RMCAr_t;

#define XLMIB_RMCAr_CLR(r) sal_memset(&((r).xlmib_rmca[0]), 0, sizeof(XLMIB_RMCAr_t))
#define XLMIB_RMCAr_SET(r,i,d) (r).xlmib_rmca[i] = d
#define XLMIB_RMCAr_GET(r,i) (r).xlmib_rmca[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RMCAr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rmca,0,39,a)
#define XLMIB_RMCAr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rmca,0,39,a)

/*
 * These macros can be used to access XLMIB_RMCA.
 */
#define READ_XLMIB_RMCAr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RMCAr_OFFSET,0,XLMIB_RMCAr_SIZE,(r._xlmib_rmca))
#define WRITE_XLMIB_RMCAr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RMCAr_OFFSET,0,XLMIB_RMCAr_SIZE,&(r._xlmib_rmca))

/*******************************************************************************
 * End of 'XLMIB_RMCAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RMCRC
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RMCRCr_OFFSET 0x10001d00

#define XLMIB_RMCRCr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RMCRC.
 */
typedef union XLMIB_RMCRCr_s {
    uint32_t v[2];
    uint32_t xlmib_rmcrc[2];
    uint32_t _xlmib_rmcrc;
} XLMIB_RMCRCr_t;

#define XLMIB_RMCRCr_CLR(r) sal_memset(&((r).xlmib_rmcrc[0]), 0, sizeof(XLMIB_RMCRCr_t))
#define XLMIB_RMCRCr_SET(r,i,d) (r).xlmib_rmcrc[i] = d
#define XLMIB_RMCRCr_GET(r,i) (r).xlmib_rmcrc[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RMCRCr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rmcrc,0,39,a)
#define XLMIB_RMCRCr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rmcrc,0,39,a)

/*
 * These macros can be used to access XLMIB_RMCRC.
 */
#define READ_XLMIB_RMCRCr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RMCRCr_OFFSET,0,XLMIB_RMCRCr_SIZE,(r._xlmib_rmcrc))
#define WRITE_XLMIB_RMCRCr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RMCRCr_OFFSET,0,XLMIB_RMCRCr_SIZE,&(r._xlmib_rmcrc))

/*******************************************************************************
 * End of 'XLMIB_RMCRCr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RMGV
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RMGVr_OFFSET 0x00000600

#define XLMIB_RMGVr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RMGV.
 */
typedef union XLMIB_RMGVr_s {
    uint32_t v[2];
    uint32_t xlmib_rmgv[2];
    uint32_t _xlmib_rmgv;
} XLMIB_RMGVr_t;

#define XLMIB_RMGVr_CLR(r) sal_memset(&((r).xlmib_rmgv[0]), 0, sizeof(XLMIB_RMGVr_t))
#define XLMIB_RMGVr_SET(r,i,d) (r).xlmib_rmgv[i] = d
#define XLMIB_RMGVr_GET(r,i) (r).xlmib_rmgv[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RMGVr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rmgv,0,39,a)
#define XLMIB_RMGVr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rmgv,0,39,a)

/*
 * These macros can be used to access XLMIB_RMGV.
 */
#define READ_XLMIB_RMGVr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RMGVr_OFFSET,0,XLMIB_RMGVr_SIZE,(r._xlmib_rmgv))
#define WRITE_XLMIB_RMGVr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RMGVr_OFFSET,0,XLMIB_RMGVr_SIZE,&(r._xlmib_rmgv))

/*******************************************************************************
 * End of 'XLMIB_RMGVr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RMTUE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RMTUEr_OFFSET 0x00001c00

#define XLMIB_RMTUEr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RMTUE.
 */
typedef union XLMIB_RMTUEr_s {
    uint32_t v[2];
    uint32_t xlmib_rmtue[2];
    uint32_t _xlmib_rmtue;
} XLMIB_RMTUEr_t;

#define XLMIB_RMTUEr_CLR(r) sal_memset(&((r).xlmib_rmtue[0]), 0, sizeof(XLMIB_RMTUEr_t))
#define XLMIB_RMTUEr_SET(r,i,d) (r).xlmib_rmtue[i] = d
#define XLMIB_RMTUEr_GET(r,i) (r).xlmib_rmtue[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RMTUEr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rmtue,0,39,a)
#define XLMIB_RMTUEr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rmtue,0,39,a)

/*
 * These macros can be used to access XLMIB_RMTUE.
 */
#define READ_XLMIB_RMTUEr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RMTUEr_OFFSET,0,XLMIB_RMTUEr_SIZE,(r._xlmib_rmtue))
#define WRITE_XLMIB_RMTUEr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RMTUEr_OFFSET,0,XLMIB_RMTUEr_SIZE,&(r._xlmib_rmtue))

/*******************************************************************************
 * End of 'XLMIB_RMTUEr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_ROVR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_ROVRr_OFFSET 0x00001a00

#define XLMIB_ROVRr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_ROVR.
 */
typedef union XLMIB_ROVRr_s {
    uint32_t v[2];
    uint32_t xlmib_rovr[2];
    uint32_t _xlmib_rovr;
} XLMIB_ROVRr_t;

#define XLMIB_ROVRr_CLR(r) sal_memset(&((r).xlmib_rovr[0]), 0, sizeof(XLMIB_ROVRr_t))
#define XLMIB_ROVRr_SET(r,i,d) (r).xlmib_rovr[i] = d
#define XLMIB_ROVRr_GET(r,i) (r).xlmib_rovr[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_ROVRr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rovr,0,39,a)
#define XLMIB_ROVRr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rovr,0,39,a)

/*
 * These macros can be used to access XLMIB_ROVR.
 */
#define READ_XLMIB_ROVRr(pa,p,r) bcmpmac_read(pa,p,XLMIB_ROVRr_OFFSET,0,XLMIB_ROVRr_SIZE,(r._xlmib_rovr))
#define WRITE_XLMIB_ROVRr(pa,p,r) bcmpmac_write(pa,p,XLMIB_ROVRr_OFFSET,0,XLMIB_ROVRr_SIZE,&(r._xlmib_rovr))

/*******************************************************************************
 * End of 'XLMIB_ROVRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFC0r_OFFSET 0x10002b00

#define XLMIB_RPFC0r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFC0.
 */
typedef union XLMIB_RPFC0r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfc0[2];
    uint32_t _xlmib_rpfc0;
} XLMIB_RPFC0r_t;

#define XLMIB_RPFC0r_CLR(r) sal_memset(&((r).xlmib_rpfc0[0]), 0, sizeof(XLMIB_RPFC0r_t))
#define XLMIB_RPFC0r_SET(r,i,d) (r).xlmib_rpfc0[i] = d
#define XLMIB_RPFC0r_GET(r,i) (r).xlmib_rpfc0[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFC0r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfc0,0,39,a)
#define XLMIB_RPFC0r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfc0,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFC0.
 */
#define READ_XLMIB_RPFC0r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFC0r_OFFSET,0,XLMIB_RPFC0r_SIZE,(r._xlmib_rpfc0))
#define WRITE_XLMIB_RPFC0r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFC0r_OFFSET,0,XLMIB_RPFC0r_SIZE,&(r._xlmib_rpfc0))

/*******************************************************************************
 * End of 'XLMIB_RPFC0r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFC1r_OFFSET 0x10002c00

#define XLMIB_RPFC1r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFC1.
 */
typedef union XLMIB_RPFC1r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfc1[2];
    uint32_t _xlmib_rpfc1;
} XLMIB_RPFC1r_t;

#define XLMIB_RPFC1r_CLR(r) sal_memset(&((r).xlmib_rpfc1[0]), 0, sizeof(XLMIB_RPFC1r_t))
#define XLMIB_RPFC1r_SET(r,i,d) (r).xlmib_rpfc1[i] = d
#define XLMIB_RPFC1r_GET(r,i) (r).xlmib_rpfc1[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFC1r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfc1,0,39,a)
#define XLMIB_RPFC1r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfc1,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFC1.
 */
#define READ_XLMIB_RPFC1r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFC1r_OFFSET,0,XLMIB_RPFC1r_SIZE,(r._xlmib_rpfc1))
#define WRITE_XLMIB_RPFC1r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFC1r_OFFSET,0,XLMIB_RPFC1r_SIZE,&(r._xlmib_rpfc1))

/*******************************************************************************
 * End of 'XLMIB_RPFC1r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC2
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFC2r_OFFSET 0x10002d00

#define XLMIB_RPFC2r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFC2.
 */
typedef union XLMIB_RPFC2r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfc2[2];
    uint32_t _xlmib_rpfc2;
} XLMIB_RPFC2r_t;

#define XLMIB_RPFC2r_CLR(r) sal_memset(&((r).xlmib_rpfc2[0]), 0, sizeof(XLMIB_RPFC2r_t))
#define XLMIB_RPFC2r_SET(r,i,d) (r).xlmib_rpfc2[i] = d
#define XLMIB_RPFC2r_GET(r,i) (r).xlmib_rpfc2[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFC2r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfc2,0,39,a)
#define XLMIB_RPFC2r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfc2,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFC2.
 */
#define READ_XLMIB_RPFC2r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFC2r_OFFSET,0,XLMIB_RPFC2r_SIZE,(r._xlmib_rpfc2))
#define WRITE_XLMIB_RPFC2r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFC2r_OFFSET,0,XLMIB_RPFC2r_SIZE,&(r._xlmib_rpfc2))

/*******************************************************************************
 * End of 'XLMIB_RPFC2r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC3
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFC3r_OFFSET 0x10002e00

#define XLMIB_RPFC3r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFC3.
 */
typedef union XLMIB_RPFC3r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfc3[2];
    uint32_t _xlmib_rpfc3;
} XLMIB_RPFC3r_t;

#define XLMIB_RPFC3r_CLR(r) sal_memset(&((r).xlmib_rpfc3[0]), 0, sizeof(XLMIB_RPFC3r_t))
#define XLMIB_RPFC3r_SET(r,i,d) (r).xlmib_rpfc3[i] = d
#define XLMIB_RPFC3r_GET(r,i) (r).xlmib_rpfc3[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFC3r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfc3,0,39,a)
#define XLMIB_RPFC3r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfc3,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFC3.
 */
#define READ_XLMIB_RPFC3r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFC3r_OFFSET,0,XLMIB_RPFC3r_SIZE,(r._xlmib_rpfc3))
#define WRITE_XLMIB_RPFC3r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFC3r_OFFSET,0,XLMIB_RPFC3r_SIZE,&(r._xlmib_rpfc3))

/*******************************************************************************
 * End of 'XLMIB_RPFC3r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC4
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFC4r_OFFSET 0x10002f00

#define XLMIB_RPFC4r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFC4.
 */
typedef union XLMIB_RPFC4r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfc4[2];
    uint32_t _xlmib_rpfc4;
} XLMIB_RPFC4r_t;

#define XLMIB_RPFC4r_CLR(r) sal_memset(&((r).xlmib_rpfc4[0]), 0, sizeof(XLMIB_RPFC4r_t))
#define XLMIB_RPFC4r_SET(r,i,d) (r).xlmib_rpfc4[i] = d
#define XLMIB_RPFC4r_GET(r,i) (r).xlmib_rpfc4[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFC4r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfc4,0,39,a)
#define XLMIB_RPFC4r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfc4,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFC4.
 */
#define READ_XLMIB_RPFC4r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFC4r_OFFSET,0,XLMIB_RPFC4r_SIZE,(r._xlmib_rpfc4))
#define WRITE_XLMIB_RPFC4r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFC4r_OFFSET,0,XLMIB_RPFC4r_SIZE,&(r._xlmib_rpfc4))

/*******************************************************************************
 * End of 'XLMIB_RPFC4r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC5
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFC5r_OFFSET 0x10003000

#define XLMIB_RPFC5r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFC5.
 */
typedef union XLMIB_RPFC5r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfc5[2];
    uint32_t _xlmib_rpfc5;
} XLMIB_RPFC5r_t;

#define XLMIB_RPFC5r_CLR(r) sal_memset(&((r).xlmib_rpfc5[0]), 0, sizeof(XLMIB_RPFC5r_t))
#define XLMIB_RPFC5r_SET(r,i,d) (r).xlmib_rpfc5[i] = d
#define XLMIB_RPFC5r_GET(r,i) (r).xlmib_rpfc5[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFC5r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfc5,0,39,a)
#define XLMIB_RPFC5r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfc5,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFC5.
 */
#define READ_XLMIB_RPFC5r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFC5r_OFFSET,0,XLMIB_RPFC5r_SIZE,(r._xlmib_rpfc5))
#define WRITE_XLMIB_RPFC5r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFC5r_OFFSET,0,XLMIB_RPFC5r_SIZE,&(r._xlmib_rpfc5))

/*******************************************************************************
 * End of 'XLMIB_RPFC5r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC6
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFC6r_OFFSET 0x10003100

#define XLMIB_RPFC6r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFC6.
 */
typedef union XLMIB_RPFC6r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfc6[2];
    uint32_t _xlmib_rpfc6;
} XLMIB_RPFC6r_t;

#define XLMIB_RPFC6r_CLR(r) sal_memset(&((r).xlmib_rpfc6[0]), 0, sizeof(XLMIB_RPFC6r_t))
#define XLMIB_RPFC6r_SET(r,i,d) (r).xlmib_rpfc6[i] = d
#define XLMIB_RPFC6r_GET(r,i) (r).xlmib_rpfc6[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFC6r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfc6,0,39,a)
#define XLMIB_RPFC6r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfc6,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFC6.
 */
#define READ_XLMIB_RPFC6r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFC6r_OFFSET,0,XLMIB_RPFC6r_SIZE,(r._xlmib_rpfc6))
#define WRITE_XLMIB_RPFC6r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFC6r_OFFSET,0,XLMIB_RPFC6r_SIZE,&(r._xlmib_rpfc6))

/*******************************************************************************
 * End of 'XLMIB_RPFC6r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC7
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFC7r_OFFSET 0x10003200

#define XLMIB_RPFC7r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFC7.
 */
typedef union XLMIB_RPFC7r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfc7[2];
    uint32_t _xlmib_rpfc7;
} XLMIB_RPFC7r_t;

#define XLMIB_RPFC7r_CLR(r) sal_memset(&((r).xlmib_rpfc7[0]), 0, sizeof(XLMIB_RPFC7r_t))
#define XLMIB_RPFC7r_SET(r,i,d) (r).xlmib_rpfc7[i] = d
#define XLMIB_RPFC7r_GET(r,i) (r).xlmib_rpfc7[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFC7r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfc7,0,39,a)
#define XLMIB_RPFC7r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfc7,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFC7.
 */
#define READ_XLMIB_RPFC7r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFC7r_OFFSET,0,XLMIB_RPFC7r_SIZE,(r._xlmib_rpfc7))
#define WRITE_XLMIB_RPFC7r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFC7r_OFFSET,0,XLMIB_RPFC7r_SIZE,&(r._xlmib_rpfc7))

/*******************************************************************************
 * End of 'XLMIB_RPFC7r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFCOFF0r_OFFSET 0x10002300

#define XLMIB_RPFCOFF0r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFCOFF0.
 */
typedef union XLMIB_RPFCOFF0r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfcoff0[2];
    uint32_t _xlmib_rpfcoff0;
} XLMIB_RPFCOFF0r_t;

#define XLMIB_RPFCOFF0r_CLR(r) sal_memset(&((r).xlmib_rpfcoff0[0]), 0, sizeof(XLMIB_RPFCOFF0r_t))
#define XLMIB_RPFCOFF0r_SET(r,i,d) (r).xlmib_rpfcoff0[i] = d
#define XLMIB_RPFCOFF0r_GET(r,i) (r).xlmib_rpfcoff0[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFCOFF0r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfcoff0,0,39,a)
#define XLMIB_RPFCOFF0r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfcoff0,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFCOFF0.
 */
#define READ_XLMIB_RPFCOFF0r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFCOFF0r_OFFSET,0,XLMIB_RPFCOFF0r_SIZE,(r._xlmib_rpfcoff0))
#define WRITE_XLMIB_RPFCOFF0r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFCOFF0r_OFFSET,0,XLMIB_RPFCOFF0r_SIZE,&(r._xlmib_rpfcoff0))

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF0r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFCOFF1r_OFFSET 0x10002400

#define XLMIB_RPFCOFF1r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFCOFF1.
 */
typedef union XLMIB_RPFCOFF1r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfcoff1[2];
    uint32_t _xlmib_rpfcoff1;
} XLMIB_RPFCOFF1r_t;

#define XLMIB_RPFCOFF1r_CLR(r) sal_memset(&((r).xlmib_rpfcoff1[0]), 0, sizeof(XLMIB_RPFCOFF1r_t))
#define XLMIB_RPFCOFF1r_SET(r,i,d) (r).xlmib_rpfcoff1[i] = d
#define XLMIB_RPFCOFF1r_GET(r,i) (r).xlmib_rpfcoff1[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFCOFF1r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfcoff1,0,39,a)
#define XLMIB_RPFCOFF1r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfcoff1,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFCOFF1.
 */
#define READ_XLMIB_RPFCOFF1r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFCOFF1r_OFFSET,0,XLMIB_RPFCOFF1r_SIZE,(r._xlmib_rpfcoff1))
#define WRITE_XLMIB_RPFCOFF1r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFCOFF1r_OFFSET,0,XLMIB_RPFCOFF1r_SIZE,&(r._xlmib_rpfcoff1))

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF1r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF2
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFCOFF2r_OFFSET 0x10002500

#define XLMIB_RPFCOFF2r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFCOFF2.
 */
typedef union XLMIB_RPFCOFF2r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfcoff2[2];
    uint32_t _xlmib_rpfcoff2;
} XLMIB_RPFCOFF2r_t;

#define XLMIB_RPFCOFF2r_CLR(r) sal_memset(&((r).xlmib_rpfcoff2[0]), 0, sizeof(XLMIB_RPFCOFF2r_t))
#define XLMIB_RPFCOFF2r_SET(r,i,d) (r).xlmib_rpfcoff2[i] = d
#define XLMIB_RPFCOFF2r_GET(r,i) (r).xlmib_rpfcoff2[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFCOFF2r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfcoff2,0,39,a)
#define XLMIB_RPFCOFF2r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfcoff2,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFCOFF2.
 */
#define READ_XLMIB_RPFCOFF2r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFCOFF2r_OFFSET,0,XLMIB_RPFCOFF2r_SIZE,(r._xlmib_rpfcoff2))
#define WRITE_XLMIB_RPFCOFF2r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFCOFF2r_OFFSET,0,XLMIB_RPFCOFF2r_SIZE,&(r._xlmib_rpfcoff2))

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF2r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF3
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFCOFF3r_OFFSET 0x10002600

#define XLMIB_RPFCOFF3r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFCOFF3.
 */
typedef union XLMIB_RPFCOFF3r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfcoff3[2];
    uint32_t _xlmib_rpfcoff3;
} XLMIB_RPFCOFF3r_t;

#define XLMIB_RPFCOFF3r_CLR(r) sal_memset(&((r).xlmib_rpfcoff3[0]), 0, sizeof(XLMIB_RPFCOFF3r_t))
#define XLMIB_RPFCOFF3r_SET(r,i,d) (r).xlmib_rpfcoff3[i] = d
#define XLMIB_RPFCOFF3r_GET(r,i) (r).xlmib_rpfcoff3[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFCOFF3r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfcoff3,0,39,a)
#define XLMIB_RPFCOFF3r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfcoff3,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFCOFF3.
 */
#define READ_XLMIB_RPFCOFF3r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFCOFF3r_OFFSET,0,XLMIB_RPFCOFF3r_SIZE,(r._xlmib_rpfcoff3))
#define WRITE_XLMIB_RPFCOFF3r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFCOFF3r_OFFSET,0,XLMIB_RPFCOFF3r_SIZE,&(r._xlmib_rpfcoff3))

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF3r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF4
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFCOFF4r_OFFSET 0x10002700

#define XLMIB_RPFCOFF4r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFCOFF4.
 */
typedef union XLMIB_RPFCOFF4r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfcoff4[2];
    uint32_t _xlmib_rpfcoff4;
} XLMIB_RPFCOFF4r_t;

#define XLMIB_RPFCOFF4r_CLR(r) sal_memset(&((r).xlmib_rpfcoff4[0]), 0, sizeof(XLMIB_RPFCOFF4r_t))
#define XLMIB_RPFCOFF4r_SET(r,i,d) (r).xlmib_rpfcoff4[i] = d
#define XLMIB_RPFCOFF4r_GET(r,i) (r).xlmib_rpfcoff4[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFCOFF4r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfcoff4,0,39,a)
#define XLMIB_RPFCOFF4r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfcoff4,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFCOFF4.
 */
#define READ_XLMIB_RPFCOFF4r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFCOFF4r_OFFSET,0,XLMIB_RPFCOFF4r_SIZE,(r._xlmib_rpfcoff4))
#define WRITE_XLMIB_RPFCOFF4r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFCOFF4r_OFFSET,0,XLMIB_RPFCOFF4r_SIZE,&(r._xlmib_rpfcoff4))

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF4r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF5
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFCOFF5r_OFFSET 0x10002800

#define XLMIB_RPFCOFF5r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFCOFF5.
 */
typedef union XLMIB_RPFCOFF5r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfcoff5[2];
    uint32_t _xlmib_rpfcoff5;
} XLMIB_RPFCOFF5r_t;

#define XLMIB_RPFCOFF5r_CLR(r) sal_memset(&((r).xlmib_rpfcoff5[0]), 0, sizeof(XLMIB_RPFCOFF5r_t))
#define XLMIB_RPFCOFF5r_SET(r,i,d) (r).xlmib_rpfcoff5[i] = d
#define XLMIB_RPFCOFF5r_GET(r,i) (r).xlmib_rpfcoff5[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFCOFF5r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfcoff5,0,39,a)
#define XLMIB_RPFCOFF5r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfcoff5,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFCOFF5.
 */
#define READ_XLMIB_RPFCOFF5r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFCOFF5r_OFFSET,0,XLMIB_RPFCOFF5r_SIZE,(r._xlmib_rpfcoff5))
#define WRITE_XLMIB_RPFCOFF5r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFCOFF5r_OFFSET,0,XLMIB_RPFCOFF5r_SIZE,&(r._xlmib_rpfcoff5))

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF5r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF6
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFCOFF6r_OFFSET 0x10002900

#define XLMIB_RPFCOFF6r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFCOFF6.
 */
typedef union XLMIB_RPFCOFF6r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfcoff6[2];
    uint32_t _xlmib_rpfcoff6;
} XLMIB_RPFCOFF6r_t;

#define XLMIB_RPFCOFF6r_CLR(r) sal_memset(&((r).xlmib_rpfcoff6[0]), 0, sizeof(XLMIB_RPFCOFF6r_t))
#define XLMIB_RPFCOFF6r_SET(r,i,d) (r).xlmib_rpfcoff6[i] = d
#define XLMIB_RPFCOFF6r_GET(r,i) (r).xlmib_rpfcoff6[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFCOFF6r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfcoff6,0,39,a)
#define XLMIB_RPFCOFF6r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfcoff6,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFCOFF6.
 */
#define READ_XLMIB_RPFCOFF6r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFCOFF6r_OFFSET,0,XLMIB_RPFCOFF6r_SIZE,(r._xlmib_rpfcoff6))
#define WRITE_XLMIB_RPFCOFF6r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFCOFF6r_OFFSET,0,XLMIB_RPFCOFF6r_SIZE,&(r._xlmib_rpfcoff6))

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF6r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF7
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPFCOFF7r_OFFSET 0x10002a00

#define XLMIB_RPFCOFF7r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPFCOFF7.
 */
typedef union XLMIB_RPFCOFF7r_s {
    uint32_t v[2];
    uint32_t xlmib_rpfcoff7[2];
    uint32_t _xlmib_rpfcoff7;
} XLMIB_RPFCOFF7r_t;

#define XLMIB_RPFCOFF7r_CLR(r) sal_memset(&((r).xlmib_rpfcoff7[0]), 0, sizeof(XLMIB_RPFCOFF7r_t))
#define XLMIB_RPFCOFF7r_SET(r,i,d) (r).xlmib_rpfcoff7[i] = d
#define XLMIB_RPFCOFF7r_GET(r,i) (r).xlmib_rpfcoff7[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPFCOFF7r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpfcoff7,0,39,a)
#define XLMIB_RPFCOFF7r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpfcoff7,0,39,a)

/*
 * These macros can be used to access XLMIB_RPFCOFF7.
 */
#define READ_XLMIB_RPFCOFF7r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPFCOFF7r_OFFSET,0,XLMIB_RPFCOFF7r_SIZE,(r._xlmib_rpfcoff7))
#define WRITE_XLMIB_RPFCOFF7r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPFCOFF7r_OFFSET,0,XLMIB_RPFCOFF7r_SIZE,&(r._xlmib_rpfcoff7))

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF7r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPKT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPKTr_OFFSET 0x00000b00

#define XLMIB_RPKTr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPKT.
 */
typedef union XLMIB_RPKTr_s {
    uint32_t v[2];
    uint32_t xlmib_rpkt[2];
    uint32_t _xlmib_rpkt;
} XLMIB_RPKTr_t;

#define XLMIB_RPKTr_CLR(r) sal_memset(&((r).xlmib_rpkt[0]), 0, sizeof(XLMIB_RPKTr_t))
#define XLMIB_RPKTr_SET(r,i,d) (r).xlmib_rpkt[i] = d
#define XLMIB_RPKTr_GET(r,i) (r).xlmib_rpkt[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPKTr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpkt,0,39,a)
#define XLMIB_RPKTr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpkt,0,39,a)

/*
 * These macros can be used to access XLMIB_RPKT.
 */
#define READ_XLMIB_RPKTr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPKTr_OFFSET,0,XLMIB_RPKTr_SIZE,(r._xlmib_rpkt))
#define WRITE_XLMIB_RPKTr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPKTr_OFFSET,0,XLMIB_RPKTr_SIZE,&(r._xlmib_rpkt))

/*******************************************************************************
 * End of 'XLMIB_RPKTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPOK
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPOKr_OFFSET 0x00002200

#define XLMIB_RPOKr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPOK.
 */
typedef union XLMIB_RPOKr_s {
    uint32_t v[2];
    uint32_t xlmib_rpok[2];
    uint32_t _xlmib_rpok;
} XLMIB_RPOKr_t;

#define XLMIB_RPOKr_CLR(r) sal_memset(&((r).xlmib_rpok[0]), 0, sizeof(XLMIB_RPOKr_t))
#define XLMIB_RPOKr_SET(r,i,d) (r).xlmib_rpok[i] = d
#define XLMIB_RPOKr_GET(r,i) (r).xlmib_rpok[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPOKr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rpok,0,39,a)
#define XLMIB_RPOKr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rpok,0,39,a)

/*
 * These macros can be used to access XLMIB_RPOK.
 */
#define READ_XLMIB_RPOKr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPOKr_OFFSET,0,XLMIB_RPOKr_SIZE,(r._xlmib_rpok))
#define WRITE_XLMIB_RPOKr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPOKr_OFFSET,0,XLMIB_RPOKr_SIZE,&(r._xlmib_rpok))

/*******************************************************************************
 * End of 'XLMIB_RPOKr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPRM
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPRMr_OFFSET 0x10001e00

#define XLMIB_RPRMr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPRM.
 */
typedef union XLMIB_RPRMr_s {
    uint32_t v[2];
    uint32_t xlmib_rprm[2];
    uint32_t _xlmib_rprm;
} XLMIB_RPRMr_t;

#define XLMIB_RPRMr_CLR(r) sal_memset(&((r).xlmib_rprm[0]), 0, sizeof(XLMIB_RPRMr_t))
#define XLMIB_RPRMr_SET(r,i,d) (r).xlmib_rprm[i] = d
#define XLMIB_RPRMr_GET(r,i) (r).xlmib_rprm[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPRMr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rprm,0,39,a)
#define XLMIB_RPRMr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rprm,0,39,a)

/*
 * These macros can be used to access XLMIB_RPRM.
 */
#define READ_XLMIB_RPRMr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPRMr_OFFSET,0,XLMIB_RPRMr_SIZE,(r._xlmib_rprm))
#define WRITE_XLMIB_RPRMr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPRMr_OFFSET,0,XLMIB_RPRMr_SIZE,&(r._xlmib_rprm))

/*******************************************************************************
 * End of 'XLMIB_RPRMr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPROG0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPROG0r_OFFSET 0x10007500

#define XLMIB_RPROG0r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPROG0.
 */
typedef union XLMIB_RPROG0r_s {
    uint32_t v[2];
    uint32_t xlmib_rprog0[2];
    uint32_t _xlmib_rprog0;
} XLMIB_RPROG0r_t;

#define XLMIB_RPROG0r_CLR(r) sal_memset(&((r).xlmib_rprog0[0]), 0, sizeof(XLMIB_RPROG0r_t))
#define XLMIB_RPROG0r_SET(r,i,d) (r).xlmib_rprog0[i] = d
#define XLMIB_RPROG0r_GET(r,i) (r).xlmib_rprog0[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPROG0r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rprog0,0,39,a)
#define XLMIB_RPROG0r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rprog0,0,39,a)

/*
 * These macros can be used to access XLMIB_RPROG0.
 */
#define READ_XLMIB_RPROG0r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPROG0r_OFFSET,0,XLMIB_RPROG0r_SIZE,(r._xlmib_rprog0))
#define WRITE_XLMIB_RPROG0r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPROG0r_OFFSET,0,XLMIB_RPROG0r_SIZE,&(r._xlmib_rprog0))

/*******************************************************************************
 * End of 'XLMIB_RPROG0r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPROG1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPROG1r_OFFSET 0x10007600

#define XLMIB_RPROG1r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPROG1.
 */
typedef union XLMIB_RPROG1r_s {
    uint32_t v[2];
    uint32_t xlmib_rprog1[2];
    uint32_t _xlmib_rprog1;
} XLMIB_RPROG1r_t;

#define XLMIB_RPROG1r_CLR(r) sal_memset(&((r).xlmib_rprog1[0]), 0, sizeof(XLMIB_RPROG1r_t))
#define XLMIB_RPROG1r_SET(r,i,d) (r).xlmib_rprog1[i] = d
#define XLMIB_RPROG1r_GET(r,i) (r).xlmib_rprog1[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPROG1r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rprog1,0,39,a)
#define XLMIB_RPROG1r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rprog1,0,39,a)

/*
 * These macros can be used to access XLMIB_RPROG1.
 */
#define READ_XLMIB_RPROG1r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPROG1r_OFFSET,0,XLMIB_RPROG1r_SIZE,(r._xlmib_rprog1))
#define WRITE_XLMIB_RPROG1r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPROG1r_OFFSET,0,XLMIB_RPROG1r_SIZE,&(r._xlmib_rprog1))

/*******************************************************************************
 * End of 'XLMIB_RPROG1r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPROG2
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPROG2r_OFFSET 0x10007700

#define XLMIB_RPROG2r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPROG2.
 */
typedef union XLMIB_RPROG2r_s {
    uint32_t v[2];
    uint32_t xlmib_rprog2[2];
    uint32_t _xlmib_rprog2;
} XLMIB_RPROG2r_t;

#define XLMIB_RPROG2r_CLR(r) sal_memset(&((r).xlmib_rprog2[0]), 0, sizeof(XLMIB_RPROG2r_t))
#define XLMIB_RPROG2r_SET(r,i,d) (r).xlmib_rprog2[i] = d
#define XLMIB_RPROG2r_GET(r,i) (r).xlmib_rprog2[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPROG2r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rprog2,0,39,a)
#define XLMIB_RPROG2r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rprog2,0,39,a)

/*
 * These macros can be used to access XLMIB_RPROG2.
 */
#define READ_XLMIB_RPROG2r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPROG2r_OFFSET,0,XLMIB_RPROG2r_SIZE,(r._xlmib_rprog2))
#define WRITE_XLMIB_RPROG2r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPROG2r_OFFSET,0,XLMIB_RPROG2r_SIZE,&(r._xlmib_rprog2))

/*******************************************************************************
 * End of 'XLMIB_RPROG2r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPROG3
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RPROG3r_OFFSET 0x10007800

#define XLMIB_RPROG3r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RPROG3.
 */
typedef union XLMIB_RPROG3r_s {
    uint32_t v[2];
    uint32_t xlmib_rprog3[2];
    uint32_t _xlmib_rprog3;
} XLMIB_RPROG3r_t;

#define XLMIB_RPROG3r_CLR(r) sal_memset(&((r).xlmib_rprog3[0]), 0, sizeof(XLMIB_RPROG3r_t))
#define XLMIB_RPROG3r_SET(r,i,d) (r).xlmib_rprog3[i] = d
#define XLMIB_RPROG3r_GET(r,i) (r).xlmib_rprog3[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RPROG3r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rprog3,0,39,a)
#define XLMIB_RPROG3r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rprog3,0,39,a)

/*
 * These macros can be used to access XLMIB_RPROG3.
 */
#define READ_XLMIB_RPROG3r(pa,p,r) bcmpmac_read(pa,p,XLMIB_RPROG3r_OFFSET,0,XLMIB_RPROG3r_SIZE,(r._xlmib_rprog3))
#define WRITE_XLMIB_RPROG3r(pa,p,r) bcmpmac_write(pa,p,XLMIB_RPROG3r_OFFSET,0,XLMIB_RPROG3r_SIZE,&(r._xlmib_rprog3))

/*******************************************************************************
 * End of 'XLMIB_RPROG3r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RRBYT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RRBYTr_OFFSET 0x10003e00

#define XLMIB_RRBYTr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RRBYT.
 */
typedef union XLMIB_RRBYTr_s {
    uint32_t v[2];
    uint32_t xlmib_rrbyt[2];
    uint32_t _xlmib_rrbyt;
} XLMIB_RRBYTr_t;

#define XLMIB_RRBYTr_CLR(r) sal_memset(&((r).xlmib_rrbyt[0]), 0, sizeof(XLMIB_RRBYTr_t))
#define XLMIB_RRBYTr_SET(r,i,d) (r).xlmib_rrbyt[i] = d
#define XLMIB_RRBYTr_GET(r,i) (r).xlmib_rrbyt[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RRBYTr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rrbyt,0,47,a)
#define XLMIB_RRBYTr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rrbyt,0,47,a)

/*
 * These macros can be used to access XLMIB_RRBYT.
 */
#define READ_XLMIB_RRBYTr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RRBYTr_OFFSET,0,XLMIB_RRBYTr_SIZE,(r._xlmib_rrbyt))
#define WRITE_XLMIB_RRBYTr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RRBYTr_OFFSET,0,XLMIB_RRBYTr_SIZE,&(r._xlmib_rrbyt))

/*******************************************************************************
 * End of 'XLMIB_RRBYTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RRPKT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RRPKTr_OFFSET 0x10003f00

#define XLMIB_RRPKTr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RRPKT.
 */
typedef union XLMIB_RRPKTr_s {
    uint32_t v[2];
    uint32_t xlmib_rrpkt[2];
    uint32_t _xlmib_rrpkt;
} XLMIB_RRPKTr_t;

#define XLMIB_RRPKTr_CLR(r) sal_memset(&((r).xlmib_rrpkt[0]), 0, sizeof(XLMIB_RRPKTr_t))
#define XLMIB_RRPKTr_SET(r,i,d) (r).xlmib_rrpkt[i] = d
#define XLMIB_RRPKTr_GET(r,i) (r).xlmib_rrpkt[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RRPKTr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rrpkt,0,39,a)
#define XLMIB_RRPKTr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rrpkt,0,39,a)

/*
 * These macros can be used to access XLMIB_RRPKT.
 */
#define READ_XLMIB_RRPKTr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RRPKTr_OFFSET,0,XLMIB_RRPKTr_SIZE,(r._xlmib_rrpkt))
#define WRITE_XLMIB_RRPKTr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RRPKTr_OFFSET,0,XLMIB_RRPKTr_SIZE,&(r._xlmib_rrpkt))

/*******************************************************************************
 * End of 'XLMIB_RRPKTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RSCHCRC
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RSCHCRCr_OFFSET 0x10003300

#define XLMIB_RSCHCRCr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RSCHCRC.
 */
typedef union XLMIB_RSCHCRCr_s {
    uint32_t v[2];
    uint32_t xlmib_rschcrc[2];
    uint32_t _xlmib_rschcrc;
} XLMIB_RSCHCRCr_t;

#define XLMIB_RSCHCRCr_CLR(r) sal_memset(&((r).xlmib_rschcrc[0]), 0, sizeof(XLMIB_RSCHCRCr_t))
#define XLMIB_RSCHCRCr_SET(r,i,d) (r).xlmib_rschcrc[i] = d
#define XLMIB_RSCHCRCr_GET(r,i) (r).xlmib_rschcrc[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RSCHCRCr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rschcrc,0,39,a)
#define XLMIB_RSCHCRCr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rschcrc,0,39,a)

/*
 * These macros can be used to access XLMIB_RSCHCRC.
 */
#define READ_XLMIB_RSCHCRCr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RSCHCRCr_OFFSET,0,XLMIB_RSCHCRCr_SIZE,(r._xlmib_rschcrc))
#define WRITE_XLMIB_RSCHCRCr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RSCHCRCr_OFFSET,0,XLMIB_RSCHCRCr_SIZE,&(r._xlmib_rschcrc))

/*******************************************************************************
 * End of 'XLMIB_RSCHCRCr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RTRFU
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RTRFUr_OFFSET 0x10002100

#define XLMIB_RTRFUr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RTRFU.
 */
typedef union XLMIB_RTRFUr_s {
    uint32_t v[2];
    uint32_t xlmib_rtrfu[2];
    uint32_t _xlmib_rtrfu;
} XLMIB_RTRFUr_t;

#define XLMIB_RTRFUr_CLR(r) sal_memset(&((r).xlmib_rtrfu[0]), 0, sizeof(XLMIB_RTRFUr_t))
#define XLMIB_RTRFUr_SET(r,i,d) (r).xlmib_rtrfu[i] = d
#define XLMIB_RTRFUr_GET(r,i) (r).xlmib_rtrfu[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RTRFUr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rtrfu,0,39,a)
#define XLMIB_RTRFUr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rtrfu,0,39,a)

/*
 * These macros can be used to access XLMIB_RTRFU.
 */
#define READ_XLMIB_RTRFUr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RTRFUr_OFFSET,0,XLMIB_RTRFUr_SIZE,(r._xlmib_rtrfu))
#define WRITE_XLMIB_RTRFUr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RTRFUr_OFFSET,0,XLMIB_RTRFUr_SIZE,&(r._xlmib_rtrfu))

/*******************************************************************************
 * End of 'XLMIB_RTRFUr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RUCA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RUCAr_OFFSET 0x00000c00

#define XLMIB_RUCAr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RUCA.
 */
typedef union XLMIB_RUCAr_s {
    uint32_t v[2];
    uint32_t xlmib_ruca[2];
    uint32_t _xlmib_ruca;
} XLMIB_RUCAr_t;

#define XLMIB_RUCAr_CLR(r) sal_memset(&((r).xlmib_ruca[0]), 0, sizeof(XLMIB_RUCAr_t))
#define XLMIB_RUCAr_SET(r,i,d) (r).xlmib_ruca[i] = d
#define XLMIB_RUCAr_GET(r,i) (r).xlmib_ruca[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RUCAr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_ruca,0,39,a)
#define XLMIB_RUCAr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_ruca,0,39,a)

/*
 * These macros can be used to access XLMIB_RUCA.
 */
#define READ_XLMIB_RUCAr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RUCAr_OFFSET,0,XLMIB_RUCAr_SIZE,(r._xlmib_ruca))
#define WRITE_XLMIB_RUCAr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RUCAr_OFFSET,0,XLMIB_RUCAr_SIZE,&(r._xlmib_ruca))

/*******************************************************************************
 * End of 'XLMIB_RUCAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RUND
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RUNDr_OFFSET 0x10003400

#define XLMIB_RUNDr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RUND.
 */
typedef union XLMIB_RUNDr_s {
    uint32_t v[2];
    uint32_t xlmib_rund[2];
    uint32_t _xlmib_rund;
} XLMIB_RUNDr_t;

#define XLMIB_RUNDr_CLR(r) sal_memset(&((r).xlmib_rund[0]), 0, sizeof(XLMIB_RUNDr_t))
#define XLMIB_RUNDr_SET(r,i,d) (r).xlmib_rund[i] = d
#define XLMIB_RUNDr_GET(r,i) (r).xlmib_rund[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RUNDr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rund,0,39,a)
#define XLMIB_RUNDr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rund,0,39,a)

/*
 * These macros can be used to access XLMIB_RUND.
 */
#define READ_XLMIB_RUNDr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RUNDr_OFFSET,0,XLMIB_RUNDr_SIZE,(r._xlmib_rund))
#define WRITE_XLMIB_RUNDr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RUNDr_OFFSET,0,XLMIB_RUNDr_SIZE,&(r._xlmib_rund))

/*******************************************************************************
 * End of 'XLMIB_RUNDr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RVLN
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RVLNr_OFFSET 0x10001f00

#define XLMIB_RVLNr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RVLN.
 */
typedef union XLMIB_RVLNr_s {
    uint32_t v[2];
    uint32_t xlmib_rvln[2];
    uint32_t _xlmib_rvln;
} XLMIB_RVLNr_t;

#define XLMIB_RVLNr_CLR(r) sal_memset(&((r).xlmib_rvln[0]), 0, sizeof(XLMIB_RVLNr_t))
#define XLMIB_RVLNr_SET(r,i,d) (r).xlmib_rvln[i] = d
#define XLMIB_RVLNr_GET(r,i) (r).xlmib_rvln[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RVLNr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rvln,0,39,a)
#define XLMIB_RVLNr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rvln,0,39,a)

/*
 * These macros can be used to access XLMIB_RVLN.
 */
#define READ_XLMIB_RVLNr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RVLNr_OFFSET,0,XLMIB_RVLNr_SIZE,(r._xlmib_rvln))
#define WRITE_XLMIB_RVLNr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RVLNr_OFFSET,0,XLMIB_RVLNr_SIZE,&(r._xlmib_rvln))

/*******************************************************************************
 * End of 'XLMIB_RVLNr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RXCF
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RXCFr_OFFSET 0x00001000

#define XLMIB_RXCFr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RXCF.
 */
typedef union XLMIB_RXCFr_s {
    uint32_t v[2];
    uint32_t xlmib_rxcf[2];
    uint32_t _xlmib_rxcf;
} XLMIB_RXCFr_t;

#define XLMIB_RXCFr_CLR(r) sal_memset(&((r).xlmib_rxcf[0]), 0, sizeof(XLMIB_RXCFr_t))
#define XLMIB_RXCFr_SET(r,i,d) (r).xlmib_rxcf[i] = d
#define XLMIB_RXCFr_GET(r,i) (r).xlmib_rxcf[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RXCFr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rxcf,0,39,a)
#define XLMIB_RXCFr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rxcf,0,39,a)

/*
 * These macros can be used to access XLMIB_RXCF.
 */
#define READ_XLMIB_RXCFr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RXCFr_OFFSET,0,XLMIB_RXCFr_SIZE,(r._xlmib_rxcf))
#define WRITE_XLMIB_RXCFr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RXCFr_OFFSET,0,XLMIB_RXCFr_SIZE,&(r._xlmib_rxcf))

/*******************************************************************************
 * End of 'XLMIB_RXCFr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RXPF
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RXPFr_OFFSET 0x00001100

#define XLMIB_RXPFr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RXPF.
 */
typedef union XLMIB_RXPFr_s {
    uint32_t v[2];
    uint32_t xlmib_rxpf[2];
    uint32_t _xlmib_rxpf;
} XLMIB_RXPFr_t;

#define XLMIB_RXPFr_CLR(r) sal_memset(&((r).xlmib_rxpf[0]), 0, sizeof(XLMIB_RXPFr_t))
#define XLMIB_RXPFr_SET(r,i,d) (r).xlmib_rxpf[i] = d
#define XLMIB_RXPFr_GET(r,i) (r).xlmib_rxpf[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RXPFr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rxpf,0,39,a)
#define XLMIB_RXPFr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rxpf,0,39,a)

/*
 * These macros can be used to access XLMIB_RXPF.
 */
#define READ_XLMIB_RXPFr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RXPFr_OFFSET,0,XLMIB_RXPFr_SIZE,(r._xlmib_rxpf))
#define WRITE_XLMIB_RXPFr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RXPFr_OFFSET,0,XLMIB_RXPFr_SIZE,&(r._xlmib_rxpf))

/*******************************************************************************
 * End of 'XLMIB_RXPFr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RXPP
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RXPPr_OFFSET 0x00001200

#define XLMIB_RXPPr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RXPP.
 */
typedef union XLMIB_RXPPr_s {
    uint32_t v[2];
    uint32_t xlmib_rxpp[2];
    uint32_t _xlmib_rxpp;
} XLMIB_RXPPr_t;

#define XLMIB_RXPPr_CLR(r) sal_memset(&((r).xlmib_rxpp[0]), 0, sizeof(XLMIB_RXPPr_t))
#define XLMIB_RXPPr_SET(r,i,d) (r).xlmib_rxpp[i] = d
#define XLMIB_RXPPr_GET(r,i) (r).xlmib_rxpp[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RXPPr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rxpp,0,39,a)
#define XLMIB_RXPPr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rxpp,0,39,a)

/*
 * These macros can be used to access XLMIB_RXPP.
 */
#define READ_XLMIB_RXPPr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RXPPr_OFFSET,0,XLMIB_RXPPr_SIZE,(r._xlmib_rxpp))
#define WRITE_XLMIB_RXPPr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RXPPr_OFFSET,0,XLMIB_RXPPr_SIZE,&(r._xlmib_rxpp))

/*******************************************************************************
 * End of 'XLMIB_RXPPr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RXUDA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RXUDAr_OFFSET 0x00001400

#define XLMIB_RXUDAr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RXUDA.
 */
typedef union XLMIB_RXUDAr_s {
    uint32_t v[2];
    uint32_t xlmib_rxuda[2];
    uint32_t _xlmib_rxuda;
} XLMIB_RXUDAr_t;

#define XLMIB_RXUDAr_CLR(r) sal_memset(&((r).xlmib_rxuda[0]), 0, sizeof(XLMIB_RXUDAr_t))
#define XLMIB_RXUDAr_SET(r,i,d) (r).xlmib_rxuda[i] = d
#define XLMIB_RXUDAr_GET(r,i) (r).xlmib_rxuda[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RXUDAr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rxuda,0,39,a)
#define XLMIB_RXUDAr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rxuda,0,39,a)

/*
 * These macros can be used to access XLMIB_RXUDA.
 */
#define READ_XLMIB_RXUDAr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RXUDAr_OFFSET,0,XLMIB_RXUDAr_SIZE,(r._xlmib_rxuda))
#define WRITE_XLMIB_RXUDAr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RXUDAr_OFFSET,0,XLMIB_RXUDAr_SIZE,&(r._xlmib_rxuda))

/*******************************************************************************
 * End of 'XLMIB_RXUDAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RXUO
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RXUOr_OFFSET 0x00001300

#define XLMIB_RXUOr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RXUO.
 */
typedef union XLMIB_RXUOr_s {
    uint32_t v[2];
    uint32_t xlmib_rxuo[2];
    uint32_t _xlmib_rxuo;
} XLMIB_RXUOr_t;

#define XLMIB_RXUOr_CLR(r) sal_memset(&((r).xlmib_rxuo[0]), 0, sizeof(XLMIB_RXUOr_t))
#define XLMIB_RXUOr_SET(r,i,d) (r).xlmib_rxuo[i] = d
#define XLMIB_RXUOr_GET(r,i) (r).xlmib_rxuo[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RXUOr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rxuo,0,39,a)
#define XLMIB_RXUOr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rxuo,0,39,a)

/*
 * These macros can be used to access XLMIB_RXUO.
 */
#define READ_XLMIB_RXUOr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RXUOr_OFFSET,0,XLMIB_RXUOr_SIZE,(r._xlmib_rxuo))
#define WRITE_XLMIB_RXUOr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RXUOr_OFFSET,0,XLMIB_RXUOr_SIZE,&(r._xlmib_rxuo))

/*******************************************************************************
 * End of 'XLMIB_RXUOr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RXWSA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RXWSAr_OFFSET 0x00001500

#define XLMIB_RXWSAr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RXWSA.
 */
typedef union XLMIB_RXWSAr_s {
    uint32_t v[2];
    uint32_t xlmib_rxwsa[2];
    uint32_t _xlmib_rxwsa;
} XLMIB_RXWSAr_t;

#define XLMIB_RXWSAr_CLR(r) sal_memset(&((r).xlmib_rxwsa[0]), 0, sizeof(XLMIB_RXWSAr_t))
#define XLMIB_RXWSAr_SET(r,i,d) (r).xlmib_rxwsa[i] = d
#define XLMIB_RXWSAr_GET(r,i) (r).xlmib_rxwsa[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RXWSAr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rxwsa,0,39,a)
#define XLMIB_RXWSAr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rxwsa,0,39,a)

/*
 * These macros can be used to access XLMIB_RXWSA.
 */
#define READ_XLMIB_RXWSAr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RXWSAr_OFFSET,0,XLMIB_RXWSAr_SIZE,(r._xlmib_rxwsa))
#define WRITE_XLMIB_RXWSAr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RXWSAr_OFFSET,0,XLMIB_RXWSAr_SIZE,&(r._xlmib_rxwsa))

/*******************************************************************************
 * End of 'XLMIB_RXWSAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RX_EEE_LPI_DURATION_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RX_EEE_LPI_DURATION_COUNTERr_OFFSET 0x10003700

#define XLMIB_RX_EEE_LPI_DURATION_COUNTERr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RX_EEE_LPI_DURATION_COUNTER.
 */
typedef union XLMIB_RX_EEE_LPI_DURATION_COUNTERr_s {
    uint32_t v[2];
    uint32_t xlmib_rx_eee_lpi_duration_counter[2];
    uint32_t _xlmib_rx_eee_lpi_duration_counter;
} XLMIB_RX_EEE_LPI_DURATION_COUNTERr_t;

#define XLMIB_RX_EEE_LPI_DURATION_COUNTERr_CLR(r) sal_memset(&((r).xlmib_rx_eee_lpi_duration_counter[0]), 0, sizeof(XLMIB_RX_EEE_LPI_DURATION_COUNTERr_t))
#define XLMIB_RX_EEE_LPI_DURATION_COUNTERr_SET(r,i,d) (r).xlmib_rx_eee_lpi_duration_counter[i] = d
#define XLMIB_RX_EEE_LPI_DURATION_COUNTERr_GET(r,i) (r).xlmib_rx_eee_lpi_duration_counter[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RX_EEE_LPI_DURATION_COUNTERr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rx_eee_lpi_duration_counter,0,39,a)
#define XLMIB_RX_EEE_LPI_DURATION_COUNTERr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rx_eee_lpi_duration_counter,0,39,a)

/*
 * These macros can be used to access XLMIB_RX_EEE_LPI_DURATION_COUNTER.
 */
#define READ_XLMIB_RX_EEE_LPI_DURATION_COUNTERr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RX_EEE_LPI_DURATION_COUNTERr_OFFSET,0,XLMIB_RX_EEE_LPI_DURATION_COUNTERr_SIZE,(r._xlmib_rx_eee_lpi_duration_counter))
#define WRITE_XLMIB_RX_EEE_LPI_DURATION_COUNTERr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RX_EEE_LPI_DURATION_COUNTERr_OFFSET,0,XLMIB_RX_EEE_LPI_DURATION_COUNTERr_SIZE,&(r._xlmib_rx_eee_lpi_duration_counter))

/*******************************************************************************
 * End of 'XLMIB_RX_EEE_LPI_DURATION_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RX_EEE_LPI_EVENT_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RX_EEE_LPI_EVENT_COUNTERr_OFFSET 0x10003600

#define XLMIB_RX_EEE_LPI_EVENT_COUNTERr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RX_EEE_LPI_EVENT_COUNTER.
 */
typedef union XLMIB_RX_EEE_LPI_EVENT_COUNTERr_s {
    uint32_t v[2];
    uint32_t xlmib_rx_eee_lpi_event_counter[2];
    uint32_t _xlmib_rx_eee_lpi_event_counter;
} XLMIB_RX_EEE_LPI_EVENT_COUNTERr_t;

#define XLMIB_RX_EEE_LPI_EVENT_COUNTERr_CLR(r) sal_memset(&((r).xlmib_rx_eee_lpi_event_counter[0]), 0, sizeof(XLMIB_RX_EEE_LPI_EVENT_COUNTERr_t))
#define XLMIB_RX_EEE_LPI_EVENT_COUNTERr_SET(r,i,d) (r).xlmib_rx_eee_lpi_event_counter[i] = d
#define XLMIB_RX_EEE_LPI_EVENT_COUNTERr_GET(r,i) (r).xlmib_rx_eee_lpi_event_counter[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RX_EEE_LPI_EVENT_COUNTERr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rx_eee_lpi_event_counter,0,39,a)
#define XLMIB_RX_EEE_LPI_EVENT_COUNTERr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rx_eee_lpi_event_counter,0,39,a)

/*
 * These macros can be used to access XLMIB_RX_EEE_LPI_EVENT_COUNTER.
 */
#define READ_XLMIB_RX_EEE_LPI_EVENT_COUNTERr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RX_EEE_LPI_EVENT_COUNTERr_OFFSET,0,XLMIB_RX_EEE_LPI_EVENT_COUNTERr_SIZE,(r._xlmib_rx_eee_lpi_event_counter))
#define WRITE_XLMIB_RX_EEE_LPI_EVENT_COUNTERr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RX_EEE_LPI_EVENT_COUNTERr_OFFSET,0,XLMIB_RX_EEE_LPI_EVENT_COUNTERr_SIZE,&(r._xlmib_rx_eee_lpi_event_counter))

/*******************************************************************************
 * End of 'XLMIB_RX_EEE_LPI_EVENT_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RX_HCFC_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RX_HCFC_COUNTERr_OFFSET 0x10003b00

#define XLMIB_RX_HCFC_COUNTERr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RX_HCFC_COUNTER.
 */
typedef union XLMIB_RX_HCFC_COUNTERr_s {
    uint32_t v[2];
    uint32_t xlmib_rx_hcfc_counter[2];
    uint32_t _xlmib_rx_hcfc_counter;
} XLMIB_RX_HCFC_COUNTERr_t;

#define XLMIB_RX_HCFC_COUNTERr_CLR(r) sal_memset(&((r).xlmib_rx_hcfc_counter[0]), 0, sizeof(XLMIB_RX_HCFC_COUNTERr_t))
#define XLMIB_RX_HCFC_COUNTERr_SET(r,i,d) (r).xlmib_rx_hcfc_counter[i] = d
#define XLMIB_RX_HCFC_COUNTERr_GET(r,i) (r).xlmib_rx_hcfc_counter[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RX_HCFC_COUNTERr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rx_hcfc_counter,0,39,a)
#define XLMIB_RX_HCFC_COUNTERr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rx_hcfc_counter,0,39,a)

/*
 * These macros can be used to access XLMIB_RX_HCFC_COUNTER.
 */
#define READ_XLMIB_RX_HCFC_COUNTERr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RX_HCFC_COUNTERr_OFFSET,0,XLMIB_RX_HCFC_COUNTERr_SIZE,(r._xlmib_rx_hcfc_counter))
#define WRITE_XLMIB_RX_HCFC_COUNTERr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RX_HCFC_COUNTERr_OFFSET,0,XLMIB_RX_HCFC_COUNTERr_SIZE,&(r._xlmib_rx_hcfc_counter))

/*******************************************************************************
 * End of 'XLMIB_RX_HCFC_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RX_HCFC_CRC_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RX_HCFC_CRC_COUNTERr_OFFSET 0x10003c00

#define XLMIB_RX_HCFC_CRC_COUNTERr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RX_HCFC_CRC_COUNTER.
 */
typedef union XLMIB_RX_HCFC_CRC_COUNTERr_s {
    uint32_t v[2];
    uint32_t xlmib_rx_hcfc_crc_counter[2];
    uint32_t _xlmib_rx_hcfc_crc_counter;
} XLMIB_RX_HCFC_CRC_COUNTERr_t;

#define XLMIB_RX_HCFC_CRC_COUNTERr_CLR(r) sal_memset(&((r).xlmib_rx_hcfc_crc_counter[0]), 0, sizeof(XLMIB_RX_HCFC_CRC_COUNTERr_t))
#define XLMIB_RX_HCFC_CRC_COUNTERr_SET(r,i,d) (r).xlmib_rx_hcfc_crc_counter[i] = d
#define XLMIB_RX_HCFC_CRC_COUNTERr_GET(r,i) (r).xlmib_rx_hcfc_crc_counter[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RX_HCFC_CRC_COUNTERr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rx_hcfc_crc_counter,0,39,a)
#define XLMIB_RX_HCFC_CRC_COUNTERr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rx_hcfc_crc_counter,0,39,a)

/*
 * These macros can be used to access XLMIB_RX_HCFC_CRC_COUNTER.
 */
#define READ_XLMIB_RX_HCFC_CRC_COUNTERr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RX_HCFC_CRC_COUNTERr_OFFSET,0,XLMIB_RX_HCFC_CRC_COUNTERr_SIZE,(r._xlmib_rx_hcfc_crc_counter))
#define WRITE_XLMIB_RX_HCFC_CRC_COUNTERr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RX_HCFC_CRC_COUNTERr_OFFSET,0,XLMIB_RX_HCFC_CRC_COUNTERr_SIZE,&(r._xlmib_rx_hcfc_crc_counter))

/*******************************************************************************
 * End of 'XLMIB_RX_HCFC_CRC_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RX_LLFC_CRC_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RX_LLFC_CRC_COUNTERr_OFFSET 0x10003a00

#define XLMIB_RX_LLFC_CRC_COUNTERr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RX_LLFC_CRC_COUNTER.
 */
typedef union XLMIB_RX_LLFC_CRC_COUNTERr_s {
    uint32_t v[2];
    uint32_t xlmib_rx_llfc_crc_counter[2];
    uint32_t _xlmib_rx_llfc_crc_counter;
} XLMIB_RX_LLFC_CRC_COUNTERr_t;

#define XLMIB_RX_LLFC_CRC_COUNTERr_CLR(r) sal_memset(&((r).xlmib_rx_llfc_crc_counter[0]), 0, sizeof(XLMIB_RX_LLFC_CRC_COUNTERr_t))
#define XLMIB_RX_LLFC_CRC_COUNTERr_SET(r,i,d) (r).xlmib_rx_llfc_crc_counter[i] = d
#define XLMIB_RX_LLFC_CRC_COUNTERr_GET(r,i) (r).xlmib_rx_llfc_crc_counter[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RX_LLFC_CRC_COUNTERr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rx_llfc_crc_counter,0,39,a)
#define XLMIB_RX_LLFC_CRC_COUNTERr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rx_llfc_crc_counter,0,39,a)

/*
 * These macros can be used to access XLMIB_RX_LLFC_CRC_COUNTER.
 */
#define READ_XLMIB_RX_LLFC_CRC_COUNTERr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RX_LLFC_CRC_COUNTERr_OFFSET,0,XLMIB_RX_LLFC_CRC_COUNTERr_SIZE,(r._xlmib_rx_llfc_crc_counter))
#define WRITE_XLMIB_RX_LLFC_CRC_COUNTERr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RX_LLFC_CRC_COUNTERr_OFFSET,0,XLMIB_RX_LLFC_CRC_COUNTERr_SIZE,&(r._xlmib_rx_llfc_crc_counter))

/*******************************************************************************
 * End of 'XLMIB_RX_LLFC_CRC_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RX_LLFC_LOG_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RX_LLFC_LOG_COUNTERr_OFFSET 0x10003900

#define XLMIB_RX_LLFC_LOG_COUNTERr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RX_LLFC_LOG_COUNTER.
 */
typedef union XLMIB_RX_LLFC_LOG_COUNTERr_s {
    uint32_t v[2];
    uint32_t xlmib_rx_llfc_log_counter[2];
    uint32_t _xlmib_rx_llfc_log_counter;
} XLMIB_RX_LLFC_LOG_COUNTERr_t;

#define XLMIB_RX_LLFC_LOG_COUNTERr_CLR(r) sal_memset(&((r).xlmib_rx_llfc_log_counter[0]), 0, sizeof(XLMIB_RX_LLFC_LOG_COUNTERr_t))
#define XLMIB_RX_LLFC_LOG_COUNTERr_SET(r,i,d) (r).xlmib_rx_llfc_log_counter[i] = d
#define XLMIB_RX_LLFC_LOG_COUNTERr_GET(r,i) (r).xlmib_rx_llfc_log_counter[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RX_LLFC_LOG_COUNTERr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rx_llfc_log_counter,0,39,a)
#define XLMIB_RX_LLFC_LOG_COUNTERr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rx_llfc_log_counter,0,39,a)

/*
 * These macros can be used to access XLMIB_RX_LLFC_LOG_COUNTER.
 */
#define READ_XLMIB_RX_LLFC_LOG_COUNTERr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RX_LLFC_LOG_COUNTERr_OFFSET,0,XLMIB_RX_LLFC_LOG_COUNTERr_SIZE,(r._xlmib_rx_llfc_log_counter))
#define WRITE_XLMIB_RX_LLFC_LOG_COUNTERr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RX_LLFC_LOG_COUNTERr_OFFSET,0,XLMIB_RX_LLFC_LOG_COUNTERr_SIZE,&(r._xlmib_rx_llfc_log_counter))

/*******************************************************************************
 * End of 'XLMIB_RX_LLFC_LOG_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RX_LLFC_PHY_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_RX_LLFC_PHY_COUNTERr_OFFSET 0x10003800

#define XLMIB_RX_LLFC_PHY_COUNTERr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_RX_LLFC_PHY_COUNTER.
 */
typedef union XLMIB_RX_LLFC_PHY_COUNTERr_s {
    uint32_t v[2];
    uint32_t xlmib_rx_llfc_phy_counter[2];
    uint32_t _xlmib_rx_llfc_phy_counter;
} XLMIB_RX_LLFC_PHY_COUNTERr_t;

#define XLMIB_RX_LLFC_PHY_COUNTERr_CLR(r) sal_memset(&((r).xlmib_rx_llfc_phy_counter[0]), 0, sizeof(XLMIB_RX_LLFC_PHY_COUNTERr_t))
#define XLMIB_RX_LLFC_PHY_COUNTERr_SET(r,i,d) (r).xlmib_rx_llfc_phy_counter[i] = d
#define XLMIB_RX_LLFC_PHY_COUNTERr_GET(r,i) (r).xlmib_rx_llfc_phy_counter[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_RX_LLFC_PHY_COUNTERr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_rx_llfc_phy_counter,0,39,a)
#define XLMIB_RX_LLFC_PHY_COUNTERr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_rx_llfc_phy_counter,0,39,a)

/*
 * These macros can be used to access XLMIB_RX_LLFC_PHY_COUNTER.
 */
#define READ_XLMIB_RX_LLFC_PHY_COUNTERr(pa,p,r) bcmpmac_read(pa,p,XLMIB_RX_LLFC_PHY_COUNTERr_OFFSET,0,XLMIB_RX_LLFC_PHY_COUNTERr_SIZE,(r._xlmib_rx_llfc_phy_counter))
#define WRITE_XLMIB_RX_LLFC_PHY_COUNTERr(pa,p,r) bcmpmac_write(pa,p,XLMIB_RX_LLFC_PHY_COUNTERr_OFFSET,0,XLMIB_RX_LLFC_PHY_COUNTERr_SIZE,&(r._xlmib_rx_llfc_phy_counter))

/*******************************************************************************
 * End of 'XLMIB_RX_LLFC_PHY_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T1023
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_T1023r_OFFSET 0x00004400

#define XLMIB_T1023r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_T1023.
 */
typedef union XLMIB_T1023r_s {
    uint32_t v[2];
    uint32_t xlmib_t1023[2];
    uint32_t _xlmib_t1023;
} XLMIB_T1023r_t;

#define XLMIB_T1023r_CLR(r) sal_memset(&((r).xlmib_t1023[0]), 0, sizeof(XLMIB_T1023r_t))
#define XLMIB_T1023r_SET(r,i,d) (r).xlmib_t1023[i] = d
#define XLMIB_T1023r_GET(r,i) (r).xlmib_t1023[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_T1023r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_t1023,0,39,a)
#define XLMIB_T1023r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_t1023,0,39,a)

/*
 * These macros can be used to access XLMIB_T1023.
 */
#define READ_XLMIB_T1023r(pa,p,r) bcmpmac_read(pa,p,XLMIB_T1023r_OFFSET,0,XLMIB_T1023r_SIZE,(r._xlmib_t1023))
#define WRITE_XLMIB_T1023r(pa,p,r) bcmpmac_write(pa,p,XLMIB_T1023r_OFFSET,0,XLMIB_T1023r_SIZE,&(r._xlmib_t1023))

/*******************************************************************************
 * End of 'XLMIB_T1023r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T127
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_T127r_OFFSET 0x00004100

#define XLMIB_T127r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_T127.
 */
typedef union XLMIB_T127r_s {
    uint32_t v[2];
    uint32_t xlmib_t127[2];
    uint32_t _xlmib_t127;
} XLMIB_T127r_t;

#define XLMIB_T127r_CLR(r) sal_memset(&((r).xlmib_t127[0]), 0, sizeof(XLMIB_T127r_t))
#define XLMIB_T127r_SET(r,i,d) (r).xlmib_t127[i] = d
#define XLMIB_T127r_GET(r,i) (r).xlmib_t127[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_T127r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_t127,0,39,a)
#define XLMIB_T127r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_t127,0,39,a)

/*
 * These macros can be used to access XLMIB_T127.
 */
#define READ_XLMIB_T127r(pa,p,r) bcmpmac_read(pa,p,XLMIB_T127r_OFFSET,0,XLMIB_T127r_SIZE,(r._xlmib_t127))
#define WRITE_XLMIB_T127r(pa,p,r) bcmpmac_write(pa,p,XLMIB_T127r_OFFSET,0,XLMIB_T127r_SIZE,&(r._xlmib_t127))

/*******************************************************************************
 * End of 'XLMIB_T127r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T1518
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_T1518r_OFFSET 0x00004500

#define XLMIB_T1518r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_T1518.
 */
typedef union XLMIB_T1518r_s {
    uint32_t v[2];
    uint32_t xlmib_t1518[2];
    uint32_t _xlmib_t1518;
} XLMIB_T1518r_t;

#define XLMIB_T1518r_CLR(r) sal_memset(&((r).xlmib_t1518[0]), 0, sizeof(XLMIB_T1518r_t))
#define XLMIB_T1518r_SET(r,i,d) (r).xlmib_t1518[i] = d
#define XLMIB_T1518r_GET(r,i) (r).xlmib_t1518[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_T1518r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_t1518,0,39,a)
#define XLMIB_T1518r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_t1518,0,39,a)

/*
 * These macros can be used to access XLMIB_T1518.
 */
#define READ_XLMIB_T1518r(pa,p,r) bcmpmac_read(pa,p,XLMIB_T1518r_OFFSET,0,XLMIB_T1518r_SIZE,(r._xlmib_t1518))
#define WRITE_XLMIB_T1518r(pa,p,r) bcmpmac_write(pa,p,XLMIB_T1518r_OFFSET,0,XLMIB_T1518r_SIZE,&(r._xlmib_t1518))

/*******************************************************************************
 * End of 'XLMIB_T1518r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T16383
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_T16383r_OFFSET 0x00004a00

#define XLMIB_T16383r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_T16383.
 */
typedef union XLMIB_T16383r_s {
    uint32_t v[2];
    uint32_t xlmib_t16383[2];
    uint32_t _xlmib_t16383;
} XLMIB_T16383r_t;

#define XLMIB_T16383r_CLR(r) sal_memset(&((r).xlmib_t16383[0]), 0, sizeof(XLMIB_T16383r_t))
#define XLMIB_T16383r_SET(r,i,d) (r).xlmib_t16383[i] = d
#define XLMIB_T16383r_GET(r,i) (r).xlmib_t16383[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_T16383r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_t16383,0,39,a)
#define XLMIB_T16383r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_t16383,0,39,a)

/*
 * These macros can be used to access XLMIB_T16383.
 */
#define READ_XLMIB_T16383r(pa,p,r) bcmpmac_read(pa,p,XLMIB_T16383r_OFFSET,0,XLMIB_T16383r_SIZE,(r._xlmib_t16383))
#define WRITE_XLMIB_T16383r(pa,p,r) bcmpmac_write(pa,p,XLMIB_T16383r_OFFSET,0,XLMIB_T16383r_SIZE,&(r._xlmib_t16383))

/*******************************************************************************
 * End of 'XLMIB_T16383r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T2047
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_T2047r_OFFSET 0x00004700

#define XLMIB_T2047r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_T2047.
 */
typedef union XLMIB_T2047r_s {
    uint32_t v[2];
    uint32_t xlmib_t2047[2];
    uint32_t _xlmib_t2047;
} XLMIB_T2047r_t;

#define XLMIB_T2047r_CLR(r) sal_memset(&((r).xlmib_t2047[0]), 0, sizeof(XLMIB_T2047r_t))
#define XLMIB_T2047r_SET(r,i,d) (r).xlmib_t2047[i] = d
#define XLMIB_T2047r_GET(r,i) (r).xlmib_t2047[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_T2047r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_t2047,0,39,a)
#define XLMIB_T2047r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_t2047,0,39,a)

/*
 * These macros can be used to access XLMIB_T2047.
 */
#define READ_XLMIB_T2047r(pa,p,r) bcmpmac_read(pa,p,XLMIB_T2047r_OFFSET,0,XLMIB_T2047r_SIZE,(r._xlmib_t2047))
#define WRITE_XLMIB_T2047r(pa,p,r) bcmpmac_write(pa,p,XLMIB_T2047r_OFFSET,0,XLMIB_T2047r_SIZE,&(r._xlmib_t2047))

/*******************************************************************************
 * End of 'XLMIB_T2047r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T255
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_T255r_OFFSET 0x00004200

#define XLMIB_T255r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_T255.
 */
typedef union XLMIB_T255r_s {
    uint32_t v[2];
    uint32_t xlmib_t255[2];
    uint32_t _xlmib_t255;
} XLMIB_T255r_t;

#define XLMIB_T255r_CLR(r) sal_memset(&((r).xlmib_t255[0]), 0, sizeof(XLMIB_T255r_t))
#define XLMIB_T255r_SET(r,i,d) (r).xlmib_t255[i] = d
#define XLMIB_T255r_GET(r,i) (r).xlmib_t255[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_T255r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_t255,0,39,a)
#define XLMIB_T255r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_t255,0,39,a)

/*
 * These macros can be used to access XLMIB_T255.
 */
#define READ_XLMIB_T255r(pa,p,r) bcmpmac_read(pa,p,XLMIB_T255r_OFFSET,0,XLMIB_T255r_SIZE,(r._xlmib_t255))
#define WRITE_XLMIB_T255r(pa,p,r) bcmpmac_write(pa,p,XLMIB_T255r_OFFSET,0,XLMIB_T255r_SIZE,&(r._xlmib_t255))

/*******************************************************************************
 * End of 'XLMIB_T255r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T4095
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_T4095r_OFFSET 0x00004800

#define XLMIB_T4095r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_T4095.
 */
typedef union XLMIB_T4095r_s {
    uint32_t v[2];
    uint32_t xlmib_t4095[2];
    uint32_t _xlmib_t4095;
} XLMIB_T4095r_t;

#define XLMIB_T4095r_CLR(r) sal_memset(&((r).xlmib_t4095[0]), 0, sizeof(XLMIB_T4095r_t))
#define XLMIB_T4095r_SET(r,i,d) (r).xlmib_t4095[i] = d
#define XLMIB_T4095r_GET(r,i) (r).xlmib_t4095[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_T4095r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_t4095,0,39,a)
#define XLMIB_T4095r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_t4095,0,39,a)

/*
 * These macros can be used to access XLMIB_T4095.
 */
#define READ_XLMIB_T4095r(pa,p,r) bcmpmac_read(pa,p,XLMIB_T4095r_OFFSET,0,XLMIB_T4095r_SIZE,(r._xlmib_t4095))
#define WRITE_XLMIB_T4095r(pa,p,r) bcmpmac_write(pa,p,XLMIB_T4095r_OFFSET,0,XLMIB_T4095r_SIZE,&(r._xlmib_t4095))

/*******************************************************************************
 * End of 'XLMIB_T4095r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T511
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_T511r_OFFSET 0x00004300

#define XLMIB_T511r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_T511.
 */
typedef union XLMIB_T511r_s {
    uint32_t v[2];
    uint32_t xlmib_t511[2];
    uint32_t _xlmib_t511;
} XLMIB_T511r_t;

#define XLMIB_T511r_CLR(r) sal_memset(&((r).xlmib_t511[0]), 0, sizeof(XLMIB_T511r_t))
#define XLMIB_T511r_SET(r,i,d) (r).xlmib_t511[i] = d
#define XLMIB_T511r_GET(r,i) (r).xlmib_t511[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_T511r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_t511,0,39,a)
#define XLMIB_T511r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_t511,0,39,a)

/*
 * These macros can be used to access XLMIB_T511.
 */
#define READ_XLMIB_T511r(pa,p,r) bcmpmac_read(pa,p,XLMIB_T511r_OFFSET,0,XLMIB_T511r_SIZE,(r._xlmib_t511))
#define WRITE_XLMIB_T511r(pa,p,r) bcmpmac_write(pa,p,XLMIB_T511r_OFFSET,0,XLMIB_T511r_SIZE,&(r._xlmib_t511))

/*******************************************************************************
 * End of 'XLMIB_T511r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T64
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_T64r_OFFSET 0x00004000

#define XLMIB_T64r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_T64.
 */
typedef union XLMIB_T64r_s {
    uint32_t v[2];
    uint32_t xlmib_t64[2];
    uint32_t _xlmib_t64;
} XLMIB_T64r_t;

#define XLMIB_T64r_CLR(r) sal_memset(&((r).xlmib_t64[0]), 0, sizeof(XLMIB_T64r_t))
#define XLMIB_T64r_SET(r,i,d) (r).xlmib_t64[i] = d
#define XLMIB_T64r_GET(r,i) (r).xlmib_t64[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_T64r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_t64,0,39,a)
#define XLMIB_T64r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_t64,0,39,a)

/*
 * These macros can be used to access XLMIB_T64.
 */
#define READ_XLMIB_T64r(pa,p,r) bcmpmac_read(pa,p,XLMIB_T64r_OFFSET,0,XLMIB_T64r_SIZE,(r._xlmib_t64))
#define WRITE_XLMIB_T64r(pa,p,r) bcmpmac_write(pa,p,XLMIB_T64r_OFFSET,0,XLMIB_T64r_SIZE,&(r._xlmib_t64))

/*******************************************************************************
 * End of 'XLMIB_T64r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T9216
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_T9216r_OFFSET 0x00004900

#define XLMIB_T9216r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_T9216.
 */
typedef union XLMIB_T9216r_s {
    uint32_t v[2];
    uint32_t xlmib_t9216[2];
    uint32_t _xlmib_t9216;
} XLMIB_T9216r_t;

#define XLMIB_T9216r_CLR(r) sal_memset(&((r).xlmib_t9216[0]), 0, sizeof(XLMIB_T9216r_t))
#define XLMIB_T9216r_SET(r,i,d) (r).xlmib_t9216[i] = d
#define XLMIB_T9216r_GET(r,i) (r).xlmib_t9216[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_T9216r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_t9216,0,39,a)
#define XLMIB_T9216r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_t9216,0,39,a)

/*
 * These macros can be used to access XLMIB_T9216.
 */
#define READ_XLMIB_T9216r(pa,p,r) bcmpmac_read(pa,p,XLMIB_T9216r_OFFSET,0,XLMIB_T9216r_SIZE,(r._xlmib_t9216))
#define WRITE_XLMIB_T9216r(pa,p,r) bcmpmac_write(pa,p,XLMIB_T9216r_OFFSET,0,XLMIB_T9216r_SIZE,&(r._xlmib_t9216))

/*******************************************************************************
 * End of 'XLMIB_T9216r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TBCA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TBCAr_OFFSET 0x10004f00

#define XLMIB_TBCAr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TBCA.
 */
typedef union XLMIB_TBCAr_s {
    uint32_t v[2];
    uint32_t xlmib_tbca[2];
    uint32_t _xlmib_tbca;
} XLMIB_TBCAr_t;

#define XLMIB_TBCAr_CLR(r) sal_memset(&((r).xlmib_tbca[0]), 0, sizeof(XLMIB_TBCAr_t))
#define XLMIB_TBCAr_SET(r,i,d) (r).xlmib_tbca[i] = d
#define XLMIB_TBCAr_GET(r,i) (r).xlmib_tbca[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TBCAr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tbca,0,39,a)
#define XLMIB_TBCAr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tbca,0,39,a)

/*
 * These macros can be used to access XLMIB_TBCA.
 */
#define READ_XLMIB_TBCAr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TBCAr_OFFSET,0,XLMIB_TBCAr_SIZE,(r._xlmib_tbca))
#define WRITE_XLMIB_TBCAr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TBCAr_OFFSET,0,XLMIB_TBCAr_SIZE,&(r._xlmib_tbca))

/*******************************************************************************
 * End of 'XLMIB_TBCAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TBYT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TBYTr_OFFSET 0x10006f00

#define XLMIB_TBYTr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TBYT.
 */
typedef union XLMIB_TBYTr_s {
    uint32_t v[2];
    uint32_t xlmib_tbyt[2];
    uint32_t _xlmib_tbyt;
} XLMIB_TBYTr_t;

#define XLMIB_TBYTr_CLR(r) sal_memset(&((r).xlmib_tbyt[0]), 0, sizeof(XLMIB_TBYTr_t))
#define XLMIB_TBYTr_SET(r,i,d) (r).xlmib_tbyt[i] = d
#define XLMIB_TBYTr_GET(r,i) (r).xlmib_tbyt[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TBYTr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tbyt,0,47,a)
#define XLMIB_TBYTr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tbyt,0,47,a)

/*
 * These macros can be used to access XLMIB_TBYT.
 */
#define READ_XLMIB_TBYTr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TBYTr_OFFSET,0,XLMIB_TBYTr_SIZE,(r._xlmib_tbyt))
#define WRITE_XLMIB_TBYTr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TBYTr_OFFSET,0,XLMIB_TBYTr_SIZE,&(r._xlmib_tbyt))

/*******************************************************************************
 * End of 'XLMIB_TBYTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TDFR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TDFRr_OFFSET 0x10005600

#define XLMIB_TDFRr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TDFR.
 */
typedef union XLMIB_TDFRr_s {
    uint32_t v[2];
    uint32_t xlmib_tdfr[2];
    uint32_t _xlmib_tdfr;
} XLMIB_TDFRr_t;

#define XLMIB_TDFRr_CLR(r) sal_memset(&((r).xlmib_tdfr[0]), 0, sizeof(XLMIB_TDFRr_t))
#define XLMIB_TDFRr_SET(r,i,d) (r).xlmib_tdfr[i] = d
#define XLMIB_TDFRr_GET(r,i) (r).xlmib_tdfr[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TDFRr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tdfr,0,39,a)
#define XLMIB_TDFRr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tdfr,0,39,a)

/*
 * These macros can be used to access XLMIB_TDFR.
 */
#define READ_XLMIB_TDFRr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TDFRr_OFFSET,0,XLMIB_TDFRr_SIZE,(r._xlmib_tdfr))
#define WRITE_XLMIB_TDFRr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TDFRr_OFFSET,0,XLMIB_TDFRr_SIZE,&(r._xlmib_tdfr))

/*******************************************************************************
 * End of 'XLMIB_TDFRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TDVLN
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TDVLNr_OFFSET 0x10005f00

#define XLMIB_TDVLNr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TDVLN.
 */
typedef union XLMIB_TDVLNr_s {
    uint32_t v[2];
    uint32_t xlmib_tdvln[2];
    uint32_t _xlmib_tdvln;
} XLMIB_TDVLNr_t;

#define XLMIB_TDVLNr_CLR(r) sal_memset(&((r).xlmib_tdvln[0]), 0, sizeof(XLMIB_TDVLNr_t))
#define XLMIB_TDVLNr_SET(r,i,d) (r).xlmib_tdvln[i] = d
#define XLMIB_TDVLNr_GET(r,i) (r).xlmib_tdvln[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TDVLNr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tdvln,0,39,a)
#define XLMIB_TDVLNr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tdvln,0,39,a)

/*
 * These macros can be used to access XLMIB_TDVLN.
 */
#define READ_XLMIB_TDVLNr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TDVLNr_OFFSET,0,XLMIB_TDVLNr_SIZE,(r._xlmib_tdvln))
#define WRITE_XLMIB_TDVLNr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TDVLNr_OFFSET,0,XLMIB_TDVLNr_SIZE,&(r._xlmib_tdvln))

/*******************************************************************************
 * End of 'XLMIB_TDVLNr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TEDF
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TEDFr_OFFSET 0x10005700

#define XLMIB_TEDFr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TEDF.
 */
typedef union XLMIB_TEDFr_s {
    uint32_t v[2];
    uint32_t xlmib_tedf[2];
    uint32_t _xlmib_tedf;
} XLMIB_TEDFr_t;

#define XLMIB_TEDFr_CLR(r) sal_memset(&((r).xlmib_tedf[0]), 0, sizeof(XLMIB_TEDFr_t))
#define XLMIB_TEDFr_SET(r,i,d) (r).xlmib_tedf[i] = d
#define XLMIB_TEDFr_GET(r,i) (r).xlmib_tedf[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TEDFr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tedf,0,39,a)
#define XLMIB_TEDFr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tedf,0,39,a)

/*
 * These macros can be used to access XLMIB_TEDF.
 */
#define READ_XLMIB_TEDFr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TEDFr_OFFSET,0,XLMIB_TEDFr_SIZE,(r._xlmib_tedf))
#define WRITE_XLMIB_TEDFr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TEDFr_OFFSET,0,XLMIB_TEDFr_SIZE,&(r._xlmib_tedf))

/*******************************************************************************
 * End of 'XLMIB_TEDFr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TERR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TERRr_OFFSET 0x10005d00

#define XLMIB_TERRr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TERR.
 */
typedef union XLMIB_TERRr_s {
    uint32_t v[2];
    uint32_t xlmib_terr[2];
    uint32_t _xlmib_terr;
} XLMIB_TERRr_t;

#define XLMIB_TERRr_CLR(r) sal_memset(&((r).xlmib_terr[0]), 0, sizeof(XLMIB_TERRr_t))
#define XLMIB_TERRr_SET(r,i,d) (r).xlmib_terr[i] = d
#define XLMIB_TERRr_GET(r,i) (r).xlmib_terr[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TERRr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_terr,0,39,a)
#define XLMIB_TERRr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_terr,0,39,a)

/*
 * These macros can be used to access XLMIB_TERR.
 */
#define READ_XLMIB_TERRr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TERRr_OFFSET,0,XLMIB_TERRr_SIZE,(r._xlmib_terr))
#define WRITE_XLMIB_TERRr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TERRr_OFFSET,0,XLMIB_TERRr_SIZE,&(r._xlmib_terr))

/*******************************************************************************
 * End of 'XLMIB_TERRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TFCS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TFCSr_OFFSET 0x10005300

#define XLMIB_TFCSr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TFCS.
 */
typedef union XLMIB_TFCSr_s {
    uint32_t v[2];
    uint32_t xlmib_tfcs[2];
    uint32_t _xlmib_tfcs;
} XLMIB_TFCSr_t;

#define XLMIB_TFCSr_CLR(r) sal_memset(&((r).xlmib_tfcs[0]), 0, sizeof(XLMIB_TFCSr_t))
#define XLMIB_TFCSr_SET(r,i,d) (r).xlmib_tfcs[i] = d
#define XLMIB_TFCSr_GET(r,i) (r).xlmib_tfcs[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TFCSr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tfcs,0,39,a)
#define XLMIB_TFCSr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tfcs,0,39,a)

/*
 * These macros can be used to access XLMIB_TFCS.
 */
#define READ_XLMIB_TFCSr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TFCSr_OFFSET,0,XLMIB_TFCSr_SIZE,(r._xlmib_tfcs))
#define WRITE_XLMIB_TFCSr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TFCSr_OFFSET,0,XLMIB_TFCSr_SIZE,&(r._xlmib_tfcs))

/*******************************************************************************
 * End of 'XLMIB_TFCSr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TFRG
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TFRGr_OFFSET 0x10005c00

#define XLMIB_TFRGr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TFRG.
 */
typedef union XLMIB_TFRGr_s {
    uint32_t v[2];
    uint32_t xlmib_tfrg[2];
    uint32_t _xlmib_tfrg;
} XLMIB_TFRGr_t;

#define XLMIB_TFRGr_CLR(r) sal_memset(&((r).xlmib_tfrg[0]), 0, sizeof(XLMIB_TFRGr_t))
#define XLMIB_TFRGr_SET(r,i,d) (r).xlmib_tfrg[i] = d
#define XLMIB_TFRGr_GET(r,i) (r).xlmib_tfrg[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TFRGr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tfrg,0,39,a)
#define XLMIB_TFRGr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tfrg,0,39,a)

/*
 * These macros can be used to access XLMIB_TFRG.
 */
#define READ_XLMIB_TFRGr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TFRGr_OFFSET,0,XLMIB_TFRGr_SIZE,(r._xlmib_tfrg))
#define WRITE_XLMIB_TFRGr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TFRGr_OFFSET,0,XLMIB_TFRGr_SIZE,&(r._xlmib_tfrg))

/*******************************************************************************
 * End of 'XLMIB_TFRGr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TJBR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TJBRr_OFFSET 0x10005200

#define XLMIB_TJBRr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TJBR.
 */
typedef union XLMIB_TJBRr_s {
    uint32_t v[2];
    uint32_t xlmib_tjbr[2];
    uint32_t _xlmib_tjbr;
} XLMIB_TJBRr_t;

#define XLMIB_TJBRr_CLR(r) sal_memset(&((r).xlmib_tjbr[0]), 0, sizeof(XLMIB_TJBRr_t))
#define XLMIB_TJBRr_SET(r,i,d) (r).xlmib_tjbr[i] = d
#define XLMIB_TJBRr_GET(r,i) (r).xlmib_tjbr[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TJBRr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tjbr,0,39,a)
#define XLMIB_TJBRr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tjbr,0,39,a)

/*
 * These macros can be used to access XLMIB_TJBR.
 */
#define READ_XLMIB_TJBRr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TJBRr_OFFSET,0,XLMIB_TJBRr_SIZE,(r._xlmib_tjbr))
#define WRITE_XLMIB_TJBRr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TJBRr_OFFSET,0,XLMIB_TJBRr_SIZE,&(r._xlmib_tjbr))

/*******************************************************************************
 * End of 'XLMIB_TJBRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TLCL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TLCLr_OFFSET 0x10005a00

#define XLMIB_TLCLr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TLCL.
 */
typedef union XLMIB_TLCLr_s {
    uint32_t v[2];
    uint32_t xlmib_tlcl[2];
    uint32_t _xlmib_tlcl;
} XLMIB_TLCLr_t;

#define XLMIB_TLCLr_CLR(r) sal_memset(&((r).xlmib_tlcl[0]), 0, sizeof(XLMIB_TLCLr_t))
#define XLMIB_TLCLr_SET(r,i,d) (r).xlmib_tlcl[i] = d
#define XLMIB_TLCLr_GET(r,i) (r).xlmib_tlcl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TLCLr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tlcl,0,39,a)
#define XLMIB_TLCLr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tlcl,0,39,a)

/*
 * These macros can be used to access XLMIB_TLCL.
 */
#define READ_XLMIB_TLCLr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TLCLr_OFFSET,0,XLMIB_TLCLr_SIZE,(r._xlmib_tlcl))
#define WRITE_XLMIB_TLCLr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TLCLr_OFFSET,0,XLMIB_TLCLr_SIZE,&(r._xlmib_tlcl))

/*******************************************************************************
 * End of 'XLMIB_TLCLr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TMCA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TMCAr_OFFSET 0x10004e00

#define XLMIB_TMCAr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TMCA.
 */
typedef union XLMIB_TMCAr_s {
    uint32_t v[2];
    uint32_t xlmib_tmca[2];
    uint32_t _xlmib_tmca;
} XLMIB_TMCAr_t;

#define XLMIB_TMCAr_CLR(r) sal_memset(&((r).xlmib_tmca[0]), 0, sizeof(XLMIB_TMCAr_t))
#define XLMIB_TMCAr_SET(r,i,d) (r).xlmib_tmca[i] = d
#define XLMIB_TMCAr_GET(r,i) (r).xlmib_tmca[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TMCAr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tmca,0,39,a)
#define XLMIB_TMCAr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tmca,0,39,a)

/*
 * These macros can be used to access XLMIB_TMCA.
 */
#define READ_XLMIB_TMCAr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TMCAr_OFFSET,0,XLMIB_TMCAr_SIZE,(r._xlmib_tmca))
#define WRITE_XLMIB_TMCAr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TMCAr_OFFSET,0,XLMIB_TMCAr_SIZE,&(r._xlmib_tmca))

/*******************************************************************************
 * End of 'XLMIB_TMCAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TMCL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TMCLr_OFFSET 0x10005900

#define XLMIB_TMCLr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TMCL.
 */
typedef union XLMIB_TMCLr_s {
    uint32_t v[2];
    uint32_t xlmib_tmcl[2];
    uint32_t _xlmib_tmcl;
} XLMIB_TMCLr_t;

#define XLMIB_TMCLr_CLR(r) sal_memset(&((r).xlmib_tmcl[0]), 0, sizeof(XLMIB_TMCLr_t))
#define XLMIB_TMCLr_SET(r,i,d) (r).xlmib_tmcl[i] = d
#define XLMIB_TMCLr_GET(r,i) (r).xlmib_tmcl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TMCLr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tmcl,0,39,a)
#define XLMIB_TMCLr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tmcl,0,39,a)

/*
 * These macros can be used to access XLMIB_TMCL.
 */
#define READ_XLMIB_TMCLr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TMCLr_OFFSET,0,XLMIB_TMCLr_SIZE,(r._xlmib_tmcl))
#define WRITE_XLMIB_TMCLr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TMCLr_OFFSET,0,XLMIB_TMCLr_SIZE,&(r._xlmib_tmcl))

/*******************************************************************************
 * End of 'XLMIB_TMCLr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TMGV
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TMGVr_OFFSET 0x00004600

#define XLMIB_TMGVr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TMGV.
 */
typedef union XLMIB_TMGVr_s {
    uint32_t v[2];
    uint32_t xlmib_tmgv[2];
    uint32_t _xlmib_tmgv;
} XLMIB_TMGVr_t;

#define XLMIB_TMGVr_CLR(r) sal_memset(&((r).xlmib_tmgv[0]), 0, sizeof(XLMIB_TMGVr_t))
#define XLMIB_TMGVr_SET(r,i,d) (r).xlmib_tmgv[i] = d
#define XLMIB_TMGVr_GET(r,i) (r).xlmib_tmgv[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TMGVr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tmgv,0,39,a)
#define XLMIB_TMGVr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tmgv,0,39,a)

/*
 * These macros can be used to access XLMIB_TMGV.
 */
#define READ_XLMIB_TMGVr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TMGVr_OFFSET,0,XLMIB_TMGVr_SIZE,(r._xlmib_tmgv))
#define WRITE_XLMIB_TMGVr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TMGVr_OFFSET,0,XLMIB_TMGVr_SIZE,&(r._xlmib_tmgv))

/*******************************************************************************
 * End of 'XLMIB_TMGVr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TNCL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TNCLr_OFFSET 0x10006e00

#define XLMIB_TNCLr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TNCL.
 */
typedef union XLMIB_TNCLr_s {
    uint32_t v[2];
    uint32_t xlmib_tncl[2];
    uint32_t _xlmib_tncl;
} XLMIB_TNCLr_t;

#define XLMIB_TNCLr_CLR(r) sal_memset(&((r).xlmib_tncl[0]), 0, sizeof(XLMIB_TNCLr_t))
#define XLMIB_TNCLr_SET(r,i,d) (r).xlmib_tncl[i] = d
#define XLMIB_TNCLr_GET(r,i) (r).xlmib_tncl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TNCLr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tncl,0,39,a)
#define XLMIB_TNCLr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tncl,0,39,a)

/*
 * These macros can be used to access XLMIB_TNCL.
 */
#define READ_XLMIB_TNCLr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TNCLr_OFFSET,0,XLMIB_TNCLr_SIZE,(r._xlmib_tncl))
#define WRITE_XLMIB_TNCLr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TNCLr_OFFSET,0,XLMIB_TNCLr_SIZE,&(r._xlmib_tncl))

/*******************************************************************************
 * End of 'XLMIB_TNCLr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TOVR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TOVRr_OFFSET 0x10005500

#define XLMIB_TOVRr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TOVR.
 */
typedef union XLMIB_TOVRr_s {
    uint32_t v[2];
    uint32_t xlmib_tovr[2];
    uint32_t _xlmib_tovr;
} XLMIB_TOVRr_t;

#define XLMIB_TOVRr_CLR(r) sal_memset(&((r).xlmib_tovr[0]), 0, sizeof(XLMIB_TOVRr_t))
#define XLMIB_TOVRr_SET(r,i,d) (r).xlmib_tovr[i] = d
#define XLMIB_TOVRr_GET(r,i) (r).xlmib_tovr[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TOVRr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tovr,0,39,a)
#define XLMIB_TOVRr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tovr,0,39,a)

/*
 * These macros can be used to access XLMIB_TOVR.
 */
#define READ_XLMIB_TOVRr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TOVRr_OFFSET,0,XLMIB_TOVRr_SIZE,(r._xlmib_tovr))
#define WRITE_XLMIB_TOVRr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TOVRr_OFFSET,0,XLMIB_TOVRr_SIZE,&(r._xlmib_tovr))

/*******************************************************************************
 * End of 'XLMIB_TOVRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFC0r_OFFSET 0x10006200

#define XLMIB_TPFC0r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFC0.
 */
typedef union XLMIB_TPFC0r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfc0[2];
    uint32_t _xlmib_tpfc0;
} XLMIB_TPFC0r_t;

#define XLMIB_TPFC0r_CLR(r) sal_memset(&((r).xlmib_tpfc0[0]), 0, sizeof(XLMIB_TPFC0r_t))
#define XLMIB_TPFC0r_SET(r,i,d) (r).xlmib_tpfc0[i] = d
#define XLMIB_TPFC0r_GET(r,i) (r).xlmib_tpfc0[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFC0r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfc0,0,39,a)
#define XLMIB_TPFC0r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfc0,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFC0.
 */
#define READ_XLMIB_TPFC0r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFC0r_OFFSET,0,XLMIB_TPFC0r_SIZE,(r._xlmib_tpfc0))
#define WRITE_XLMIB_TPFC0r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFC0r_OFFSET,0,XLMIB_TPFC0r_SIZE,&(r._xlmib_tpfc0))

/*******************************************************************************
 * End of 'XLMIB_TPFC0r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFC1r_OFFSET 0x10006300

#define XLMIB_TPFC1r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFC1.
 */
typedef union XLMIB_TPFC1r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfc1[2];
    uint32_t _xlmib_tpfc1;
} XLMIB_TPFC1r_t;

#define XLMIB_TPFC1r_CLR(r) sal_memset(&((r).xlmib_tpfc1[0]), 0, sizeof(XLMIB_TPFC1r_t))
#define XLMIB_TPFC1r_SET(r,i,d) (r).xlmib_tpfc1[i] = d
#define XLMIB_TPFC1r_GET(r,i) (r).xlmib_tpfc1[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFC1r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfc1,0,39,a)
#define XLMIB_TPFC1r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfc1,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFC1.
 */
#define READ_XLMIB_TPFC1r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFC1r_OFFSET,0,XLMIB_TPFC1r_SIZE,(r._xlmib_tpfc1))
#define WRITE_XLMIB_TPFC1r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFC1r_OFFSET,0,XLMIB_TPFC1r_SIZE,&(r._xlmib_tpfc1))

/*******************************************************************************
 * End of 'XLMIB_TPFC1r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC2
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFC2r_OFFSET 0x10006400

#define XLMIB_TPFC2r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFC2.
 */
typedef union XLMIB_TPFC2r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfc2[2];
    uint32_t _xlmib_tpfc2;
} XLMIB_TPFC2r_t;

#define XLMIB_TPFC2r_CLR(r) sal_memset(&((r).xlmib_tpfc2[0]), 0, sizeof(XLMIB_TPFC2r_t))
#define XLMIB_TPFC2r_SET(r,i,d) (r).xlmib_tpfc2[i] = d
#define XLMIB_TPFC2r_GET(r,i) (r).xlmib_tpfc2[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFC2r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfc2,0,39,a)
#define XLMIB_TPFC2r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfc2,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFC2.
 */
#define READ_XLMIB_TPFC2r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFC2r_OFFSET,0,XLMIB_TPFC2r_SIZE,(r._xlmib_tpfc2))
#define WRITE_XLMIB_TPFC2r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFC2r_OFFSET,0,XLMIB_TPFC2r_SIZE,&(r._xlmib_tpfc2))

/*******************************************************************************
 * End of 'XLMIB_TPFC2r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC3
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFC3r_OFFSET 0x10006500

#define XLMIB_TPFC3r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFC3.
 */
typedef union XLMIB_TPFC3r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfc3[2];
    uint32_t _xlmib_tpfc3;
} XLMIB_TPFC3r_t;

#define XLMIB_TPFC3r_CLR(r) sal_memset(&((r).xlmib_tpfc3[0]), 0, sizeof(XLMIB_TPFC3r_t))
#define XLMIB_TPFC3r_SET(r,i,d) (r).xlmib_tpfc3[i] = d
#define XLMIB_TPFC3r_GET(r,i) (r).xlmib_tpfc3[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFC3r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfc3,0,39,a)
#define XLMIB_TPFC3r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfc3,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFC3.
 */
#define READ_XLMIB_TPFC3r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFC3r_OFFSET,0,XLMIB_TPFC3r_SIZE,(r._xlmib_tpfc3))
#define WRITE_XLMIB_TPFC3r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFC3r_OFFSET,0,XLMIB_TPFC3r_SIZE,&(r._xlmib_tpfc3))

/*******************************************************************************
 * End of 'XLMIB_TPFC3r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC4
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFC4r_OFFSET 0x10006600

#define XLMIB_TPFC4r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFC4.
 */
typedef union XLMIB_TPFC4r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfc4[2];
    uint32_t _xlmib_tpfc4;
} XLMIB_TPFC4r_t;

#define XLMIB_TPFC4r_CLR(r) sal_memset(&((r).xlmib_tpfc4[0]), 0, sizeof(XLMIB_TPFC4r_t))
#define XLMIB_TPFC4r_SET(r,i,d) (r).xlmib_tpfc4[i] = d
#define XLMIB_TPFC4r_GET(r,i) (r).xlmib_tpfc4[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFC4r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfc4,0,39,a)
#define XLMIB_TPFC4r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfc4,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFC4.
 */
#define READ_XLMIB_TPFC4r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFC4r_OFFSET,0,XLMIB_TPFC4r_SIZE,(r._xlmib_tpfc4))
#define WRITE_XLMIB_TPFC4r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFC4r_OFFSET,0,XLMIB_TPFC4r_SIZE,&(r._xlmib_tpfc4))

/*******************************************************************************
 * End of 'XLMIB_TPFC4r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC5
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFC5r_OFFSET 0x10006700

#define XLMIB_TPFC5r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFC5.
 */
typedef union XLMIB_TPFC5r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfc5[2];
    uint32_t _xlmib_tpfc5;
} XLMIB_TPFC5r_t;

#define XLMIB_TPFC5r_CLR(r) sal_memset(&((r).xlmib_tpfc5[0]), 0, sizeof(XLMIB_TPFC5r_t))
#define XLMIB_TPFC5r_SET(r,i,d) (r).xlmib_tpfc5[i] = d
#define XLMIB_TPFC5r_GET(r,i) (r).xlmib_tpfc5[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFC5r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfc5,0,39,a)
#define XLMIB_TPFC5r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfc5,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFC5.
 */
#define READ_XLMIB_TPFC5r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFC5r_OFFSET,0,XLMIB_TPFC5r_SIZE,(r._xlmib_tpfc5))
#define WRITE_XLMIB_TPFC5r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFC5r_OFFSET,0,XLMIB_TPFC5r_SIZE,&(r._xlmib_tpfc5))

/*******************************************************************************
 * End of 'XLMIB_TPFC5r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC6
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFC6r_OFFSET 0x10006800

#define XLMIB_TPFC6r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFC6.
 */
typedef union XLMIB_TPFC6r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfc6[2];
    uint32_t _xlmib_tpfc6;
} XLMIB_TPFC6r_t;

#define XLMIB_TPFC6r_CLR(r) sal_memset(&((r).xlmib_tpfc6[0]), 0, sizeof(XLMIB_TPFC6r_t))
#define XLMIB_TPFC6r_SET(r,i,d) (r).xlmib_tpfc6[i] = d
#define XLMIB_TPFC6r_GET(r,i) (r).xlmib_tpfc6[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFC6r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfc6,0,39,a)
#define XLMIB_TPFC6r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfc6,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFC6.
 */
#define READ_XLMIB_TPFC6r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFC6r_OFFSET,0,XLMIB_TPFC6r_SIZE,(r._xlmib_tpfc6))
#define WRITE_XLMIB_TPFC6r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFC6r_OFFSET,0,XLMIB_TPFC6r_SIZE,&(r._xlmib_tpfc6))

/*******************************************************************************
 * End of 'XLMIB_TPFC6r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC7
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFC7r_OFFSET 0x10006900

#define XLMIB_TPFC7r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFC7.
 */
typedef union XLMIB_TPFC7r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfc7[2];
    uint32_t _xlmib_tpfc7;
} XLMIB_TPFC7r_t;

#define XLMIB_TPFC7r_CLR(r) sal_memset(&((r).xlmib_tpfc7[0]), 0, sizeof(XLMIB_TPFC7r_t))
#define XLMIB_TPFC7r_SET(r,i,d) (r).xlmib_tpfc7[i] = d
#define XLMIB_TPFC7r_GET(r,i) (r).xlmib_tpfc7[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFC7r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfc7,0,39,a)
#define XLMIB_TPFC7r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfc7,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFC7.
 */
#define READ_XLMIB_TPFC7r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFC7r_OFFSET,0,XLMIB_TPFC7r_SIZE,(r._xlmib_tpfc7))
#define WRITE_XLMIB_TPFC7r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFC7r_OFFSET,0,XLMIB_TPFC7r_SIZE,&(r._xlmib_tpfc7))

/*******************************************************************************
 * End of 'XLMIB_TPFC7r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFCOFF0r_OFFSET 0x10007900

#define XLMIB_TPFCOFF0r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFCOFF0.
 */
typedef union XLMIB_TPFCOFF0r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfcoff0[2];
    uint32_t _xlmib_tpfcoff0;
} XLMIB_TPFCOFF0r_t;

#define XLMIB_TPFCOFF0r_CLR(r) sal_memset(&((r).xlmib_tpfcoff0[0]), 0, sizeof(XLMIB_TPFCOFF0r_t))
#define XLMIB_TPFCOFF0r_SET(r,i,d) (r).xlmib_tpfcoff0[i] = d
#define XLMIB_TPFCOFF0r_GET(r,i) (r).xlmib_tpfcoff0[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFCOFF0r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfcoff0,0,39,a)
#define XLMIB_TPFCOFF0r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfcoff0,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFCOFF0.
 */
#define READ_XLMIB_TPFCOFF0r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFCOFF0r_OFFSET,0,XLMIB_TPFCOFF0r_SIZE,(r._xlmib_tpfcoff0))
#define WRITE_XLMIB_TPFCOFF0r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFCOFF0r_OFFSET,0,XLMIB_TPFCOFF0r_SIZE,&(r._xlmib_tpfcoff0))

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF0r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFCOFF1r_OFFSET 0x10007a00

#define XLMIB_TPFCOFF1r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFCOFF1.
 */
typedef union XLMIB_TPFCOFF1r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfcoff1[2];
    uint32_t _xlmib_tpfcoff1;
} XLMIB_TPFCOFF1r_t;

#define XLMIB_TPFCOFF1r_CLR(r) sal_memset(&((r).xlmib_tpfcoff1[0]), 0, sizeof(XLMIB_TPFCOFF1r_t))
#define XLMIB_TPFCOFF1r_SET(r,i,d) (r).xlmib_tpfcoff1[i] = d
#define XLMIB_TPFCOFF1r_GET(r,i) (r).xlmib_tpfcoff1[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFCOFF1r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfcoff1,0,39,a)
#define XLMIB_TPFCOFF1r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfcoff1,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFCOFF1.
 */
#define READ_XLMIB_TPFCOFF1r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFCOFF1r_OFFSET,0,XLMIB_TPFCOFF1r_SIZE,(r._xlmib_tpfcoff1))
#define WRITE_XLMIB_TPFCOFF1r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFCOFF1r_OFFSET,0,XLMIB_TPFCOFF1r_SIZE,&(r._xlmib_tpfcoff1))

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF1r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF2
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFCOFF2r_OFFSET 0x10007b00

#define XLMIB_TPFCOFF2r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFCOFF2.
 */
typedef union XLMIB_TPFCOFF2r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfcoff2[2];
    uint32_t _xlmib_tpfcoff2;
} XLMIB_TPFCOFF2r_t;

#define XLMIB_TPFCOFF2r_CLR(r) sal_memset(&((r).xlmib_tpfcoff2[0]), 0, sizeof(XLMIB_TPFCOFF2r_t))
#define XLMIB_TPFCOFF2r_SET(r,i,d) (r).xlmib_tpfcoff2[i] = d
#define XLMIB_TPFCOFF2r_GET(r,i) (r).xlmib_tpfcoff2[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFCOFF2r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfcoff2,0,39,a)
#define XLMIB_TPFCOFF2r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfcoff2,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFCOFF2.
 */
#define READ_XLMIB_TPFCOFF2r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFCOFF2r_OFFSET,0,XLMIB_TPFCOFF2r_SIZE,(r._xlmib_tpfcoff2))
#define WRITE_XLMIB_TPFCOFF2r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFCOFF2r_OFFSET,0,XLMIB_TPFCOFF2r_SIZE,&(r._xlmib_tpfcoff2))

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF2r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF3
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFCOFF3r_OFFSET 0x10007c00

#define XLMIB_TPFCOFF3r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFCOFF3.
 */
typedef union XLMIB_TPFCOFF3r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfcoff3[2];
    uint32_t _xlmib_tpfcoff3;
} XLMIB_TPFCOFF3r_t;

#define XLMIB_TPFCOFF3r_CLR(r) sal_memset(&((r).xlmib_tpfcoff3[0]), 0, sizeof(XLMIB_TPFCOFF3r_t))
#define XLMIB_TPFCOFF3r_SET(r,i,d) (r).xlmib_tpfcoff3[i] = d
#define XLMIB_TPFCOFF3r_GET(r,i) (r).xlmib_tpfcoff3[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFCOFF3r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfcoff3,0,39,a)
#define XLMIB_TPFCOFF3r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfcoff3,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFCOFF3.
 */
#define READ_XLMIB_TPFCOFF3r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFCOFF3r_OFFSET,0,XLMIB_TPFCOFF3r_SIZE,(r._xlmib_tpfcoff3))
#define WRITE_XLMIB_TPFCOFF3r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFCOFF3r_OFFSET,0,XLMIB_TPFCOFF3r_SIZE,&(r._xlmib_tpfcoff3))

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF3r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF4
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFCOFF4r_OFFSET 0x10007d00

#define XLMIB_TPFCOFF4r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFCOFF4.
 */
typedef union XLMIB_TPFCOFF4r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfcoff4[2];
    uint32_t _xlmib_tpfcoff4;
} XLMIB_TPFCOFF4r_t;

#define XLMIB_TPFCOFF4r_CLR(r) sal_memset(&((r).xlmib_tpfcoff4[0]), 0, sizeof(XLMIB_TPFCOFF4r_t))
#define XLMIB_TPFCOFF4r_SET(r,i,d) (r).xlmib_tpfcoff4[i] = d
#define XLMIB_TPFCOFF4r_GET(r,i) (r).xlmib_tpfcoff4[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFCOFF4r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfcoff4,0,39,a)
#define XLMIB_TPFCOFF4r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfcoff4,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFCOFF4.
 */
#define READ_XLMIB_TPFCOFF4r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFCOFF4r_OFFSET,0,XLMIB_TPFCOFF4r_SIZE,(r._xlmib_tpfcoff4))
#define WRITE_XLMIB_TPFCOFF4r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFCOFF4r_OFFSET,0,XLMIB_TPFCOFF4r_SIZE,&(r._xlmib_tpfcoff4))

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF4r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF5
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFCOFF5r_OFFSET 0x10007e00

#define XLMIB_TPFCOFF5r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFCOFF5.
 */
typedef union XLMIB_TPFCOFF5r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfcoff5[2];
    uint32_t _xlmib_tpfcoff5;
} XLMIB_TPFCOFF5r_t;

#define XLMIB_TPFCOFF5r_CLR(r) sal_memset(&((r).xlmib_tpfcoff5[0]), 0, sizeof(XLMIB_TPFCOFF5r_t))
#define XLMIB_TPFCOFF5r_SET(r,i,d) (r).xlmib_tpfcoff5[i] = d
#define XLMIB_TPFCOFF5r_GET(r,i) (r).xlmib_tpfcoff5[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFCOFF5r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfcoff5,0,39,a)
#define XLMIB_TPFCOFF5r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfcoff5,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFCOFF5.
 */
#define READ_XLMIB_TPFCOFF5r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFCOFF5r_OFFSET,0,XLMIB_TPFCOFF5r_SIZE,(r._xlmib_tpfcoff5))
#define WRITE_XLMIB_TPFCOFF5r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFCOFF5r_OFFSET,0,XLMIB_TPFCOFF5r_SIZE,&(r._xlmib_tpfcoff5))

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF5r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF6
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFCOFF6r_OFFSET 0x10007f00

#define XLMIB_TPFCOFF6r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFCOFF6.
 */
typedef union XLMIB_TPFCOFF6r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfcoff6[2];
    uint32_t _xlmib_tpfcoff6;
} XLMIB_TPFCOFF6r_t;

#define XLMIB_TPFCOFF6r_CLR(r) sal_memset(&((r).xlmib_tpfcoff6[0]), 0, sizeof(XLMIB_TPFCOFF6r_t))
#define XLMIB_TPFCOFF6r_SET(r,i,d) (r).xlmib_tpfcoff6[i] = d
#define XLMIB_TPFCOFF6r_GET(r,i) (r).xlmib_tpfcoff6[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFCOFF6r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfcoff6,0,39,a)
#define XLMIB_TPFCOFF6r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfcoff6,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFCOFF6.
 */
#define READ_XLMIB_TPFCOFF6r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFCOFF6r_OFFSET,0,XLMIB_TPFCOFF6r_SIZE,(r._xlmib_tpfcoff6))
#define WRITE_XLMIB_TPFCOFF6r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFCOFF6r_OFFSET,0,XLMIB_TPFCOFF6r_SIZE,&(r._xlmib_tpfcoff6))

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF6r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF7
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPFCOFF7r_OFFSET 0x10008000

#define XLMIB_TPFCOFF7r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPFCOFF7.
 */
typedef union XLMIB_TPFCOFF7r_s {
    uint32_t v[2];
    uint32_t xlmib_tpfcoff7[2];
    uint32_t _xlmib_tpfcoff7;
} XLMIB_TPFCOFF7r_t;

#define XLMIB_TPFCOFF7r_CLR(r) sal_memset(&((r).xlmib_tpfcoff7[0]), 0, sizeof(XLMIB_TPFCOFF7r_t))
#define XLMIB_TPFCOFF7r_SET(r,i,d) (r).xlmib_tpfcoff7[i] = d
#define XLMIB_TPFCOFF7r_GET(r,i) (r).xlmib_tpfcoff7[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPFCOFF7r_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpfcoff7,0,39,a)
#define XLMIB_TPFCOFF7r_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpfcoff7,0,39,a)

/*
 * These macros can be used to access XLMIB_TPFCOFF7.
 */
#define READ_XLMIB_TPFCOFF7r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPFCOFF7r_OFFSET,0,XLMIB_TPFCOFF7r_SIZE,(r._xlmib_tpfcoff7))
#define WRITE_XLMIB_TPFCOFF7r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPFCOFF7r_OFFSET,0,XLMIB_TPFCOFF7r_SIZE,&(r._xlmib_tpfcoff7))

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF7r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPKT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPKTr_OFFSET 0x00004c00

#define XLMIB_TPKTr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPKT.
 */
typedef union XLMIB_TPKTr_s {
    uint32_t v[2];
    uint32_t xlmib_tpkt[2];
    uint32_t _xlmib_tpkt;
} XLMIB_TPKTr_t;

#define XLMIB_TPKTr_CLR(r) sal_memset(&((r).xlmib_tpkt[0]), 0, sizeof(XLMIB_TPKTr_t))
#define XLMIB_TPKTr_SET(r,i,d) (r).xlmib_tpkt[i] = d
#define XLMIB_TPKTr_GET(r,i) (r).xlmib_tpkt[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPKTr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpkt,0,39,a)
#define XLMIB_TPKTr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpkt,0,39,a)

/*
 * These macros can be used to access XLMIB_TPKT.
 */
#define READ_XLMIB_TPKTr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPKTr_OFFSET,0,XLMIB_TPKTr_SIZE,(r._xlmib_tpkt))
#define WRITE_XLMIB_TPKTr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPKTr_OFFSET,0,XLMIB_TPKTr_SIZE,&(r._xlmib_tpkt))

/*******************************************************************************
 * End of 'XLMIB_TPKTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPOK
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TPOKr_OFFSET 0x10004b00

#define XLMIB_TPOKr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TPOK.
 */
typedef union XLMIB_TPOKr_s {
    uint32_t v[2];
    uint32_t xlmib_tpok[2];
    uint32_t _xlmib_tpok;
} XLMIB_TPOKr_t;

#define XLMIB_TPOKr_CLR(r) sal_memset(&((r).xlmib_tpok[0]), 0, sizeof(XLMIB_TPOKr_t))
#define XLMIB_TPOKr_SET(r,i,d) (r).xlmib_tpok[i] = d
#define XLMIB_TPOKr_GET(r,i) (r).xlmib_tpok[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TPOKr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tpok,0,39,a)
#define XLMIB_TPOKr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tpok,0,39,a)

/*
 * These macros can be used to access XLMIB_TPOK.
 */
#define READ_XLMIB_TPOKr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TPOKr_OFFSET,0,XLMIB_TPOKr_SIZE,(r._xlmib_tpok))
#define WRITE_XLMIB_TPOKr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TPOKr_OFFSET,0,XLMIB_TPOKr_SIZE,&(r._xlmib_tpok))

/*******************************************************************************
 * End of 'XLMIB_TPOKr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TRPKT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TRPKTr_OFFSET 0x10006000

#define XLMIB_TRPKTr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TRPKT.
 */
typedef union XLMIB_TRPKTr_s {
    uint32_t v[2];
    uint32_t xlmib_trpkt[2];
    uint32_t _xlmib_trpkt;
} XLMIB_TRPKTr_t;

#define XLMIB_TRPKTr_CLR(r) sal_memset(&((r).xlmib_trpkt[0]), 0, sizeof(XLMIB_TRPKTr_t))
#define XLMIB_TRPKTr_SET(r,i,d) (r).xlmib_trpkt[i] = d
#define XLMIB_TRPKTr_GET(r,i) (r).xlmib_trpkt[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TRPKTr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_trpkt,0,39,a)
#define XLMIB_TRPKTr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_trpkt,0,39,a)

/*
 * These macros can be used to access XLMIB_TRPKT.
 */
#define READ_XLMIB_TRPKTr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TRPKTr_OFFSET,0,XLMIB_TRPKTr_SIZE,(r._xlmib_trpkt))
#define WRITE_XLMIB_TRPKTr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TRPKTr_OFFSET,0,XLMIB_TRPKTr_SIZE,&(r._xlmib_trpkt))

/*******************************************************************************
 * End of 'XLMIB_TRPKTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TSCL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TSCLr_OFFSET 0x10005800

#define XLMIB_TSCLr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TSCL.
 */
typedef union XLMIB_TSCLr_s {
    uint32_t v[2];
    uint32_t xlmib_tscl[2];
    uint32_t _xlmib_tscl;
} XLMIB_TSCLr_t;

#define XLMIB_TSCLr_CLR(r) sal_memset(&((r).xlmib_tscl[0]), 0, sizeof(XLMIB_TSCLr_t))
#define XLMIB_TSCLr_SET(r,i,d) (r).xlmib_tscl[i] = d
#define XLMIB_TSCLr_GET(r,i) (r).xlmib_tscl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TSCLr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tscl,0,39,a)
#define XLMIB_TSCLr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tscl,0,39,a)

/*
 * These macros can be used to access XLMIB_TSCL.
 */
#define READ_XLMIB_TSCLr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TSCLr_OFFSET,0,XLMIB_TSCLr_SIZE,(r._xlmib_tscl))
#define WRITE_XLMIB_TSCLr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TSCLr_OFFSET,0,XLMIB_TSCLr_SIZE,&(r._xlmib_tscl))

/*******************************************************************************
 * End of 'XLMIB_TSCLr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TSPARE0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TSPARE0r_OFFSET 0x10007100

#define XLMIB_TSPARE0r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TSPARE0.
 */
typedef union XLMIB_TSPARE0r_s {
    uint32_t v[2];
    uint32_t xlmib_tspare0[2];
    uint32_t _xlmib_tspare0;
} XLMIB_TSPARE0r_t;

#define XLMIB_TSPARE0r_CLR(r) sal_memset(&((r).xlmib_tspare0[0]), 0, sizeof(XLMIB_TSPARE0r_t))
#define XLMIB_TSPARE0r_SET(r,i,d) (r).xlmib_tspare0[i] = d
#define XLMIB_TSPARE0r_GET(r,i) (r).xlmib_tspare0[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TSPARE0r_RSVDf_GET(r,a) bcmpmac_field_get((r).xlmib_tspare0,0,47,a)
#define XLMIB_TSPARE0r_RSVDf_SET(r,a) bcmpmac_field_set((r).xlmib_tspare0,0,47,a)

/*
 * These macros can be used to access XLMIB_TSPARE0.
 */
#define READ_XLMIB_TSPARE0r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TSPARE0r_OFFSET,0,XLMIB_TSPARE0r_SIZE,(r._xlmib_tspare0))
#define WRITE_XLMIB_TSPARE0r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TSPARE0r_OFFSET,0,XLMIB_TSPARE0r_SIZE,&(r._xlmib_tspare0))

/*******************************************************************************
 * End of 'XLMIB_TSPARE0r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TSPARE1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TSPARE1r_OFFSET 0x10007200

#define XLMIB_TSPARE1r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TSPARE1.
 */
typedef union XLMIB_TSPARE1r_s {
    uint32_t v[2];
    uint32_t xlmib_tspare1[2];
    uint32_t _xlmib_tspare1;
} XLMIB_TSPARE1r_t;

#define XLMIB_TSPARE1r_CLR(r) sal_memset(&((r).xlmib_tspare1[0]), 0, sizeof(XLMIB_TSPARE1r_t))
#define XLMIB_TSPARE1r_SET(r,i,d) (r).xlmib_tspare1[i] = d
#define XLMIB_TSPARE1r_GET(r,i) (r).xlmib_tspare1[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TSPARE1r_RSVDf_GET(r,a) bcmpmac_field_get((r).xlmib_tspare1,0,47,a)
#define XLMIB_TSPARE1r_RSVDf_SET(r,a) bcmpmac_field_set((r).xlmib_tspare1,0,47,a)

/*
 * These macros can be used to access XLMIB_TSPARE1.
 */
#define READ_XLMIB_TSPARE1r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TSPARE1r_OFFSET,0,XLMIB_TSPARE1r_SIZE,(r._xlmib_tspare1))
#define WRITE_XLMIB_TSPARE1r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TSPARE1r_OFFSET,0,XLMIB_TSPARE1r_SIZE,&(r._xlmib_tspare1))

/*******************************************************************************
 * End of 'XLMIB_TSPARE1r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TSPARE2
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TSPARE2r_OFFSET 0x10007300

#define XLMIB_TSPARE2r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TSPARE2.
 */
typedef union XLMIB_TSPARE2r_s {
    uint32_t v[2];
    uint32_t xlmib_tspare2[2];
    uint32_t _xlmib_tspare2;
} XLMIB_TSPARE2r_t;

#define XLMIB_TSPARE2r_CLR(r) sal_memset(&((r).xlmib_tspare2[0]), 0, sizeof(XLMIB_TSPARE2r_t))
#define XLMIB_TSPARE2r_SET(r,i,d) (r).xlmib_tspare2[i] = d
#define XLMIB_TSPARE2r_GET(r,i) (r).xlmib_tspare2[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TSPARE2r_RSVDf_GET(r,a) bcmpmac_field_get((r).xlmib_tspare2,0,47,a)
#define XLMIB_TSPARE2r_RSVDf_SET(r,a) bcmpmac_field_set((r).xlmib_tspare2,0,47,a)

/*
 * These macros can be used to access XLMIB_TSPARE2.
 */
#define READ_XLMIB_TSPARE2r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TSPARE2r_OFFSET,0,XLMIB_TSPARE2r_SIZE,(r._xlmib_tspare2))
#define WRITE_XLMIB_TSPARE2r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TSPARE2r_OFFSET,0,XLMIB_TSPARE2r_SIZE,&(r._xlmib_tspare2))

/*******************************************************************************
 * End of 'XLMIB_TSPARE2r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TSPARE3
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TSPARE3r_OFFSET 0x10007400

#define XLMIB_TSPARE3r_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TSPARE3.
 */
typedef union XLMIB_TSPARE3r_s {
    uint32_t v[2];
    uint32_t xlmib_tspare3[2];
    uint32_t _xlmib_tspare3;
} XLMIB_TSPARE3r_t;

#define XLMIB_TSPARE3r_CLR(r) sal_memset(&((r).xlmib_tspare3[0]), 0, sizeof(XLMIB_TSPARE3r_t))
#define XLMIB_TSPARE3r_SET(r,i,d) (r).xlmib_tspare3[i] = d
#define XLMIB_TSPARE3r_GET(r,i) (r).xlmib_tspare3[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TSPARE3r_RSVDf_GET(r,a) bcmpmac_field_get((r).xlmib_tspare3,0,47,a)
#define XLMIB_TSPARE3r_RSVDf_SET(r,a) bcmpmac_field_set((r).xlmib_tspare3,0,47,a)

/*
 * These macros can be used to access XLMIB_TSPARE3.
 */
#define READ_XLMIB_TSPARE3r(pa,p,r) bcmpmac_read(pa,p,XLMIB_TSPARE3r_OFFSET,0,XLMIB_TSPARE3r_SIZE,(r._xlmib_tspare3))
#define WRITE_XLMIB_TSPARE3r(pa,p,r) bcmpmac_write(pa,p,XLMIB_TSPARE3r_OFFSET,0,XLMIB_TSPARE3r_SIZE,&(r._xlmib_tspare3))

/*******************************************************************************
 * End of 'XLMIB_TSPARE3r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TUCA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TUCAr_OFFSET 0x00004d00

#define XLMIB_TUCAr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TUCA.
 */
typedef union XLMIB_TUCAr_s {
    uint32_t v[2];
    uint32_t xlmib_tuca[2];
    uint32_t _xlmib_tuca;
} XLMIB_TUCAr_t;

#define XLMIB_TUCAr_CLR(r) sal_memset(&((r).xlmib_tuca[0]), 0, sizeof(XLMIB_TUCAr_t))
#define XLMIB_TUCAr_SET(r,i,d) (r).xlmib_tuca[i] = d
#define XLMIB_TUCAr_GET(r,i) (r).xlmib_tuca[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TUCAr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tuca,0,39,a)
#define XLMIB_TUCAr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tuca,0,39,a)

/*
 * These macros can be used to access XLMIB_TUCA.
 */
#define READ_XLMIB_TUCAr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TUCAr_OFFSET,0,XLMIB_TUCAr_SIZE,(r._xlmib_tuca))
#define WRITE_XLMIB_TUCAr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TUCAr_OFFSET,0,XLMIB_TUCAr_SIZE,&(r._xlmib_tuca))

/*******************************************************************************
 * End of 'XLMIB_TUCAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TUFL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TUFLr_OFFSET 0x10006100

#define XLMIB_TUFLr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TUFL.
 */
typedef union XLMIB_TUFLr_s {
    uint32_t v[2];
    uint32_t xlmib_tufl[2];
    uint32_t _xlmib_tufl;
} XLMIB_TUFLr_t;

#define XLMIB_TUFLr_CLR(r) sal_memset(&((r).xlmib_tufl[0]), 0, sizeof(XLMIB_TUFLr_t))
#define XLMIB_TUFLr_SET(r,i,d) (r).xlmib_tufl[i] = d
#define XLMIB_TUFLr_GET(r,i) (r).xlmib_tufl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TUFLr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tufl,0,39,a)
#define XLMIB_TUFLr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tufl,0,39,a)

/*
 * These macros can be used to access XLMIB_TUFL.
 */
#define READ_XLMIB_TUFLr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TUFLr_OFFSET,0,XLMIB_TUFLr_SIZE,(r._xlmib_tufl))
#define WRITE_XLMIB_TUFLr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TUFLr_OFFSET,0,XLMIB_TUFLr_SIZE,&(r._xlmib_tufl))

/*******************************************************************************
 * End of 'XLMIB_TUFLr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TVLN
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TVLNr_OFFSET 0x10005e00

#define XLMIB_TVLNr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TVLN.
 */
typedef union XLMIB_TVLNr_s {
    uint32_t v[2];
    uint32_t xlmib_tvln[2];
    uint32_t _xlmib_tvln;
} XLMIB_TVLNr_t;

#define XLMIB_TVLNr_CLR(r) sal_memset(&((r).xlmib_tvln[0]), 0, sizeof(XLMIB_TVLNr_t))
#define XLMIB_TVLNr_SET(r,i,d) (r).xlmib_tvln[i] = d
#define XLMIB_TVLNr_GET(r,i) (r).xlmib_tvln[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TVLNr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tvln,0,39,a)
#define XLMIB_TVLNr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tvln,0,39,a)

/*
 * These macros can be used to access XLMIB_TVLN.
 */
#define READ_XLMIB_TVLNr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TVLNr_OFFSET,0,XLMIB_TVLNr_SIZE,(r._xlmib_tvln))
#define WRITE_XLMIB_TVLNr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TVLNr_OFFSET,0,XLMIB_TVLNr_SIZE,&(r._xlmib_tvln))

/*******************************************************************************
 * End of 'XLMIB_TVLNr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TXCF
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TXCFr_OFFSET 0x10005400

#define XLMIB_TXCFr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TXCF.
 */
typedef union XLMIB_TXCFr_s {
    uint32_t v[2];
    uint32_t xlmib_txcf[2];
    uint32_t _xlmib_txcf;
} XLMIB_TXCFr_t;

#define XLMIB_TXCFr_CLR(r) sal_memset(&((r).xlmib_txcf[0]), 0, sizeof(XLMIB_TXCFr_t))
#define XLMIB_TXCFr_SET(r,i,d) (r).xlmib_txcf[i] = d
#define XLMIB_TXCFr_GET(r,i) (r).xlmib_txcf[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TXCFr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_txcf,0,39,a)
#define XLMIB_TXCFr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_txcf,0,39,a)

/*
 * These macros can be used to access XLMIB_TXCF.
 */
#define READ_XLMIB_TXCFr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TXCFr_OFFSET,0,XLMIB_TXCFr_SIZE,(r._xlmib_txcf))
#define WRITE_XLMIB_TXCFr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TXCFr_OFFSET,0,XLMIB_TXCFr_SIZE,&(r._xlmib_txcf))

/*******************************************************************************
 * End of 'XLMIB_TXCFr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TXCL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TXCLr_OFFSET 0x10005b00

#define XLMIB_TXCLr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TXCL.
 */
typedef union XLMIB_TXCLr_s {
    uint32_t v[2];
    uint32_t xlmib_txcl[2];
    uint32_t _xlmib_txcl;
} XLMIB_TXCLr_t;

#define XLMIB_TXCLr_CLR(r) sal_memset(&((r).xlmib_txcl[0]), 0, sizeof(XLMIB_TXCLr_t))
#define XLMIB_TXCLr_SET(r,i,d) (r).xlmib_txcl[i] = d
#define XLMIB_TXCLr_GET(r,i) (r).xlmib_txcl[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TXCLr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_txcl,0,39,a)
#define XLMIB_TXCLr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_txcl,0,39,a)

/*
 * These macros can be used to access XLMIB_TXCL.
 */
#define READ_XLMIB_TXCLr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TXCLr_OFFSET,0,XLMIB_TXCLr_SIZE,(r._xlmib_txcl))
#define WRITE_XLMIB_TXCLr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TXCLr_OFFSET,0,XLMIB_TXCLr_SIZE,&(r._xlmib_txcl))

/*******************************************************************************
 * End of 'XLMIB_TXCLr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TXPF
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TXPFr_OFFSET 0x10005000

#define XLMIB_TXPFr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TXPF.
 */
typedef union XLMIB_TXPFr_s {
    uint32_t v[2];
    uint32_t xlmib_txpf[2];
    uint32_t _xlmib_txpf;
} XLMIB_TXPFr_t;

#define XLMIB_TXPFr_CLR(r) sal_memset(&((r).xlmib_txpf[0]), 0, sizeof(XLMIB_TXPFr_t))
#define XLMIB_TXPFr_SET(r,i,d) (r).xlmib_txpf[i] = d
#define XLMIB_TXPFr_GET(r,i) (r).xlmib_txpf[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TXPFr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_txpf,0,39,a)
#define XLMIB_TXPFr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_txpf,0,39,a)

/*
 * These macros can be used to access XLMIB_TXPF.
 */
#define READ_XLMIB_TXPFr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TXPFr_OFFSET,0,XLMIB_TXPFr_SIZE,(r._xlmib_txpf))
#define WRITE_XLMIB_TXPFr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TXPFr_OFFSET,0,XLMIB_TXPFr_SIZE,&(r._xlmib_txpf))

/*******************************************************************************
 * End of 'XLMIB_TXPFr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TXPP
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TXPPr_OFFSET 0x10005100

#define XLMIB_TXPPr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TXPP.
 */
typedef union XLMIB_TXPPr_s {
    uint32_t v[2];
    uint32_t xlmib_txpp[2];
    uint32_t _xlmib_txpp;
} XLMIB_TXPPr_t;

#define XLMIB_TXPPr_CLR(r) sal_memset(&((r).xlmib_txpp[0]), 0, sizeof(XLMIB_TXPPr_t))
#define XLMIB_TXPPr_SET(r,i,d) (r).xlmib_txpp[i] = d
#define XLMIB_TXPPr_GET(r,i) (r).xlmib_txpp[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TXPPr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_txpp,0,39,a)
#define XLMIB_TXPPr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_txpp,0,39,a)

/*
 * These macros can be used to access XLMIB_TXPP.
 */
#define READ_XLMIB_TXPPr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TXPPr_OFFSET,0,XLMIB_TXPPr_SIZE,(r._xlmib_txpp))
#define WRITE_XLMIB_TXPPr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TXPPr_OFFSET,0,XLMIB_TXPPr_SIZE,&(r._xlmib_txpp))

/*******************************************************************************
 * End of 'XLMIB_TXPPr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TX_EEE_LPI_DURATION_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TX_EEE_LPI_DURATION_COUNTERr_OFFSET 0x10006b00

#define XLMIB_TX_EEE_LPI_DURATION_COUNTERr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TX_EEE_LPI_DURATION_COUNTER.
 */
typedef union XLMIB_TX_EEE_LPI_DURATION_COUNTERr_s {
    uint32_t v[2];
    uint32_t xlmib_tx_eee_lpi_duration_counter[2];
    uint32_t _xlmib_tx_eee_lpi_duration_counter;
} XLMIB_TX_EEE_LPI_DURATION_COUNTERr_t;

#define XLMIB_TX_EEE_LPI_DURATION_COUNTERr_CLR(r) sal_memset(&((r).xlmib_tx_eee_lpi_duration_counter[0]), 0, sizeof(XLMIB_TX_EEE_LPI_DURATION_COUNTERr_t))
#define XLMIB_TX_EEE_LPI_DURATION_COUNTERr_SET(r,i,d) (r).xlmib_tx_eee_lpi_duration_counter[i] = d
#define XLMIB_TX_EEE_LPI_DURATION_COUNTERr_GET(r,i) (r).xlmib_tx_eee_lpi_duration_counter[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TX_EEE_LPI_DURATION_COUNTERr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tx_eee_lpi_duration_counter,0,39,a)
#define XLMIB_TX_EEE_LPI_DURATION_COUNTERr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tx_eee_lpi_duration_counter,0,39,a)

/*
 * These macros can be used to access XLMIB_TX_EEE_LPI_DURATION_COUNTER.
 */
#define READ_XLMIB_TX_EEE_LPI_DURATION_COUNTERr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TX_EEE_LPI_DURATION_COUNTERr_OFFSET,0,XLMIB_TX_EEE_LPI_DURATION_COUNTERr_SIZE,(r._xlmib_tx_eee_lpi_duration_counter))
#define WRITE_XLMIB_TX_EEE_LPI_DURATION_COUNTERr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TX_EEE_LPI_DURATION_COUNTERr_OFFSET,0,XLMIB_TX_EEE_LPI_DURATION_COUNTERr_SIZE,&(r._xlmib_tx_eee_lpi_duration_counter))

/*******************************************************************************
 * End of 'XLMIB_TX_EEE_LPI_DURATION_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TX_EEE_LPI_EVENT_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TX_EEE_LPI_EVENT_COUNTERr_OFFSET 0x10006a00

#define XLMIB_TX_EEE_LPI_EVENT_COUNTERr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TX_EEE_LPI_EVENT_COUNTER.
 */
typedef union XLMIB_TX_EEE_LPI_EVENT_COUNTERr_s {
    uint32_t v[2];
    uint32_t xlmib_tx_eee_lpi_event_counter[2];
    uint32_t _xlmib_tx_eee_lpi_event_counter;
} XLMIB_TX_EEE_LPI_EVENT_COUNTERr_t;

#define XLMIB_TX_EEE_LPI_EVENT_COUNTERr_CLR(r) sal_memset(&((r).xlmib_tx_eee_lpi_event_counter[0]), 0, sizeof(XLMIB_TX_EEE_LPI_EVENT_COUNTERr_t))
#define XLMIB_TX_EEE_LPI_EVENT_COUNTERr_SET(r,i,d) (r).xlmib_tx_eee_lpi_event_counter[i] = d
#define XLMIB_TX_EEE_LPI_EVENT_COUNTERr_GET(r,i) (r).xlmib_tx_eee_lpi_event_counter[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TX_EEE_LPI_EVENT_COUNTERr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tx_eee_lpi_event_counter,0,39,a)
#define XLMIB_TX_EEE_LPI_EVENT_COUNTERr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tx_eee_lpi_event_counter,0,39,a)

/*
 * These macros can be used to access XLMIB_TX_EEE_LPI_EVENT_COUNTER.
 */
#define READ_XLMIB_TX_EEE_LPI_EVENT_COUNTERr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TX_EEE_LPI_EVENT_COUNTERr_OFFSET,0,XLMIB_TX_EEE_LPI_EVENT_COUNTERr_SIZE,(r._xlmib_tx_eee_lpi_event_counter))
#define WRITE_XLMIB_TX_EEE_LPI_EVENT_COUNTERr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TX_EEE_LPI_EVENT_COUNTERr_OFFSET,0,XLMIB_TX_EEE_LPI_EVENT_COUNTERr_SIZE,&(r._xlmib_tx_eee_lpi_event_counter))

/*******************************************************************************
 * End of 'XLMIB_TX_EEE_LPI_EVENT_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TX_HCFC_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TX_HCFC_COUNTERr_OFFSET 0x10006d00

#define XLMIB_TX_HCFC_COUNTERr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TX_HCFC_COUNTER.
 */
typedef union XLMIB_TX_HCFC_COUNTERr_s {
    uint32_t v[2];
    uint32_t xlmib_tx_hcfc_counter[2];
    uint32_t _xlmib_tx_hcfc_counter;
} XLMIB_TX_HCFC_COUNTERr_t;

#define XLMIB_TX_HCFC_COUNTERr_CLR(r) sal_memset(&((r).xlmib_tx_hcfc_counter[0]), 0, sizeof(XLMIB_TX_HCFC_COUNTERr_t))
#define XLMIB_TX_HCFC_COUNTERr_SET(r,i,d) (r).xlmib_tx_hcfc_counter[i] = d
#define XLMIB_TX_HCFC_COUNTERr_GET(r,i) (r).xlmib_tx_hcfc_counter[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TX_HCFC_COUNTERr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tx_hcfc_counter,0,39,a)
#define XLMIB_TX_HCFC_COUNTERr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tx_hcfc_counter,0,39,a)

/*
 * These macros can be used to access XLMIB_TX_HCFC_COUNTER.
 */
#define READ_XLMIB_TX_HCFC_COUNTERr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TX_HCFC_COUNTERr_OFFSET,0,XLMIB_TX_HCFC_COUNTERr_SIZE,(r._xlmib_tx_hcfc_counter))
#define WRITE_XLMIB_TX_HCFC_COUNTERr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TX_HCFC_COUNTERr_OFFSET,0,XLMIB_TX_HCFC_COUNTERr_SIZE,&(r._xlmib_tx_hcfc_counter))

/*******************************************************************************
 * End of 'XLMIB_TX_HCFC_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TX_LLFC_LOG_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_TX_LLFC_LOG_COUNTERr_OFFSET 0x10006c00

#define XLMIB_TX_LLFC_LOG_COUNTERr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_TX_LLFC_LOG_COUNTER.
 */
typedef union XLMIB_TX_LLFC_LOG_COUNTERr_s {
    uint32_t v[2];
    uint32_t xlmib_tx_llfc_log_counter[2];
    uint32_t _xlmib_tx_llfc_log_counter;
} XLMIB_TX_LLFC_LOG_COUNTERr_t;

#define XLMIB_TX_LLFC_LOG_COUNTERr_CLR(r) sal_memset(&((r).xlmib_tx_llfc_log_counter[0]), 0, sizeof(XLMIB_TX_LLFC_LOG_COUNTERr_t))
#define XLMIB_TX_LLFC_LOG_COUNTERr_SET(r,i,d) (r).xlmib_tx_llfc_log_counter[i] = d
#define XLMIB_TX_LLFC_LOG_COUNTERr_GET(r,i) (r).xlmib_tx_llfc_log_counter[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_TX_LLFC_LOG_COUNTERr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_tx_llfc_log_counter,0,39,a)
#define XLMIB_TX_LLFC_LOG_COUNTERr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_tx_llfc_log_counter,0,39,a)

/*
 * These macros can be used to access XLMIB_TX_LLFC_LOG_COUNTER.
 */
#define READ_XLMIB_TX_LLFC_LOG_COUNTERr(pa,p,r) bcmpmac_read(pa,p,XLMIB_TX_LLFC_LOG_COUNTERr_OFFSET,0,XLMIB_TX_LLFC_LOG_COUNTERr_SIZE,(r._xlmib_tx_llfc_log_counter))
#define WRITE_XLMIB_TX_LLFC_LOG_COUNTERr(pa,p,r) bcmpmac_write(pa,p,XLMIB_TX_LLFC_LOG_COUNTERr_OFFSET,0,XLMIB_TX_LLFC_LOG_COUNTERr_SIZE,&(r._xlmib_tx_llfc_log_counter))

/*******************************************************************************
 * End of 'XLMIB_TX_LLFC_LOG_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_XTHOL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
#define XLMIB_XTHOLr_OFFSET 0x00007000

#define XLMIB_XTHOLr_SIZE 8

/*
 * This structure should be used to declare and program XLMIB_XTHOL.
 */
typedef union XLMIB_XTHOLr_s {
    uint32_t v[2];
    uint32_t xlmib_xthol[2];
    uint32_t _xlmib_xthol;
} XLMIB_XTHOLr_t;

#define XLMIB_XTHOLr_CLR(r) sal_memset(&((r).xlmib_xthol[0]), 0, sizeof(XLMIB_XTHOLr_t))
#define XLMIB_XTHOLr_SET(r,i,d) (r).xlmib_xthol[i] = d
#define XLMIB_XTHOLr_GET(r,i) (r).xlmib_xthol[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLMIB_XTHOLr_COUNTf_GET(r,a) bcmpmac_field_get((r).xlmib_xthol,0,39,a)
#define XLMIB_XTHOLr_COUNTf_SET(r,a) bcmpmac_field_set((r).xlmib_xthol,0,39,a)

/*
 * These macros can be used to access XLMIB_XTHOL.
 */
#define READ_XLMIB_XTHOLr(pa,p,r) bcmpmac_read(pa,p,XLMIB_XTHOLr_OFFSET,0,XLMIB_XTHOLr_SIZE,(r._xlmib_xthol))
#define WRITE_XLMIB_XTHOLr(pa,p,r) bcmpmac_write(pa,p,XLMIB_XTHOLr_OFFSET,0,XLMIB_XTHOLr_SIZE,&(r._xlmib_xthol))

/*******************************************************************************
 * End of 'XLMIB_XTHOLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_CNTMAXSIZE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_CNTMAXSIZEr_OFFSET 0x10020100

#define XLPORT_CNTMAXSIZEr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_CNTMAXSIZE.
 */
typedef union XLPORT_CNTMAXSIZEr_s {
    uint32_t v[1];
    uint32_t xlport_cntmaxsize[1];
    uint32_t _xlport_cntmaxsize;
} XLPORT_CNTMAXSIZEr_t;

#define XLPORT_CNTMAXSIZEr_CLR(r) (r).xlport_cntmaxsize[0] = 0
#define XLPORT_CNTMAXSIZEr_SET(r,d) (r).xlport_cntmaxsize[0] = d
#define XLPORT_CNTMAXSIZEr_GET(r) (r).xlport_cntmaxsize[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_CNTMAXSIZEr_CNTMAXSIZEf_GET(r) (((r).xlport_cntmaxsize[0]) & 0x3fff)
#define XLPORT_CNTMAXSIZEr_CNTMAXSIZEf_SET(r,f) (r).xlport_cntmaxsize[0]=(((r).xlport_cntmaxsize[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))

/*
 * These macros can be used to access XLPORT_CNTMAXSIZE.
 */
#define READ_XLPORT_CNTMAXSIZEr(pa,p,r) bcmpmac_read(pa,p,XLPORT_CNTMAXSIZEr_OFFSET,0,XLPORT_CNTMAXSIZEr_SIZE,(r._xlport_cntmaxsize))
#define WRITE_XLPORT_CNTMAXSIZEr(pa,p,r) bcmpmac_write(pa,p,XLPORT_CNTMAXSIZEr_OFFSET,0,XLPORT_CNTMAXSIZEr_SIZE,&(r._xlport_cntmaxsize))

/*******************************************************************************
 * End of 'XLPORT_CNTMAXSIZEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_CONFIGr_OFFSET 0x10020000

#define XLPORT_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_CONFIG.
 */
typedef union XLPORT_CONFIGr_s {
    uint32_t v[1];
    uint32_t xlport_config[1];
    uint32_t _xlport_config;
} XLPORT_CONFIGr_t;

#define XLPORT_CONFIGr_CLR(r) (r).xlport_config[0] = 0
#define XLPORT_CONFIGr_SET(r,d) (r).xlport_config[0] = d
#define XLPORT_CONFIGr_GET(r) (r).xlport_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_CONFIGr_RESERVED_0f_GET(r) (((r).xlport_config[0]) & 0x1)
#define XLPORT_CONFIGr_RESERVED_0f_SET(r,f) (r).xlport_config[0]=(((r).xlport_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_CONFIGr_MY_MODIDf_GET(r) ((((r).xlport_config[0]) >> 1) & 0xff)
#define XLPORT_CONFIGr_MY_MODIDf_SET(r,f) (r).xlport_config[0]=(((r).xlport_config[0] & ~((uint32_t)0xff << 1)) | ((((uint32_t)f) & 0xff) << 1))
#define XLPORT_CONFIGr_RESERVED_9f_GET(r) ((((r).xlport_config[0]) >> 9) & 0x1)
#define XLPORT_CONFIGr_RESERVED_9f_SET(r,f) (r).xlport_config[0]=(((r).xlport_config[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define XLPORT_CONFIGr_HIGIG_MODEf_GET(r) ((((r).xlport_config[0]) >> 10) & 0x1)
#define XLPORT_CONFIGr_HIGIG_MODEf_SET(r,f) (r).xlport_config[0]=(((r).xlport_config[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define XLPORT_CONFIGr_HIGIG2_MODEf_GET(r) ((((r).xlport_config[0]) >> 11) & 0x1)
#define XLPORT_CONFIGr_HIGIG2_MODEf_SET(r,f) (r).xlport_config[0]=(((r).xlport_config[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define XLPORT_CONFIGr_RESERVED_15_12f_GET(r) ((((r).xlport_config[0]) >> 12) & 0xf)
#define XLPORT_CONFIGr_RESERVED_15_12f_SET(r,f) (r).xlport_config[0]=(((r).xlport_config[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))

/*
 * These macros can be used to access XLPORT_CONFIG.
 */
#define READ_XLPORT_CONFIGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_CONFIGr_OFFSET,0,XLPORT_CONFIGr_SIZE,(r._xlport_config))
#define WRITE_XLPORT_CONFIGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_CONFIGr_OFFSET,0,XLPORT_CONFIGr_SIZE,&(r._xlport_config))

/*******************************************************************************
 * End of 'XLPORT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_ECC_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_ECC_CONTROLr_OFFSET 0x00021a00

#define XLPORT_ECC_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_ECC_CONTROL.
 */
typedef union XLPORT_ECC_CONTROLr_s {
    uint32_t v[1];
    uint32_t xlport_ecc_control[1];
    uint32_t _xlport_ecc_control;
} XLPORT_ECC_CONTROLr_t;

#define XLPORT_ECC_CONTROLr_CLR(r) (r).xlport_ecc_control[0] = 0
#define XLPORT_ECC_CONTROLr_SET(r,d) (r).xlport_ecc_control[0] = d
#define XLPORT_ECC_CONTROLr_GET(r) (r).xlport_ecc_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_ECC_CONTROLr_MIB_TSC_MEM_ENf_GET(r) (((r).xlport_ecc_control[0]) & 0x1)
#define XLPORT_ECC_CONTROLr_MIB_TSC_MEM_ENf_SET(r,f) (r).xlport_ecc_control[0]=(((r).xlport_ecc_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_ECC_CONTROLr_MIB_TSC0_MEM_EN_COR_ERR_RPTf_GET(r) ((((r).xlport_ecc_control[0]) >> 1) & 0x1)
#define XLPORT_ECC_CONTROLr_MIB_TSC0_MEM_EN_COR_ERR_RPTf_SET(r,f) (r).xlport_ecc_control[0]=(((r).xlport_ecc_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLPORT_ECC_CONTROLr_MIB_TSC1_MEM_EN_COR_ERR_RPTf_GET(r) ((((r).xlport_ecc_control[0]) >> 2) & 0x1)
#define XLPORT_ECC_CONTROLr_MIB_TSC1_MEM_EN_COR_ERR_RPTf_SET(r,f) (r).xlport_ecc_control[0]=(((r).xlport_ecc_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLPORT_ECC_CONTROLr_MIB_RSC_MEM_ENf_GET(r) ((((r).xlport_ecc_control[0]) >> 3) & 0x1)
#define XLPORT_ECC_CONTROLr_MIB_RSC_MEM_ENf_SET(r,f) (r).xlport_ecc_control[0]=(((r).xlport_ecc_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLPORT_ECC_CONTROLr_MIB_RSC0_MEM_EN_COR_ERR_RPTf_GET(r) ((((r).xlport_ecc_control[0]) >> 4) & 0x1)
#define XLPORT_ECC_CONTROLr_MIB_RSC0_MEM_EN_COR_ERR_RPTf_SET(r,f) (r).xlport_ecc_control[0]=(((r).xlport_ecc_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define XLPORT_ECC_CONTROLr_MIB_RSC1_MEM_EN_COR_ERR_RPTf_GET(r) ((((r).xlport_ecc_control[0]) >> 5) & 0x1)
#define XLPORT_ECC_CONTROLr_MIB_RSC1_MEM_EN_COR_ERR_RPTf_SET(r,f) (r).xlport_ecc_control[0]=(((r).xlport_ecc_control[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))

/*
 * These macros can be used to access XLPORT_ECC_CONTROL.
 */
#define READ_XLPORT_ECC_CONTROLr(pa,p,r) bcmpmac_read(pa,p,XLPORT_ECC_CONTROLr_OFFSET,0,XLPORT_ECC_CONTROLr_SIZE,(r._xlport_ecc_control))
#define WRITE_XLPORT_ECC_CONTROLr(pa,p,r) bcmpmac_write(pa,p,XLPORT_ECC_CONTROLr_OFFSET,0,XLPORT_ECC_CONTROLr_SIZE,&(r._xlport_ecc_control))

/*******************************************************************************
 * End of 'XLPORT_ECC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_EEE_CLOCK_GATE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_EEE_CLOCK_GATEr_OFFSET 0x00020e00

#define XLPORT_EEE_CLOCK_GATEr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_EEE_CLOCK_GATE.
 */
typedef union XLPORT_EEE_CLOCK_GATEr_s {
    uint32_t v[1];
    uint32_t xlport_eee_clock_gate[1];
    uint32_t _xlport_eee_clock_gate;
} XLPORT_EEE_CLOCK_GATEr_t;

#define XLPORT_EEE_CLOCK_GATEr_CLR(r) (r).xlport_eee_clock_gate[0] = 0
#define XLPORT_EEE_CLOCK_GATEr_SET(r,d) (r).xlport_eee_clock_gate[0] = d
#define XLPORT_EEE_CLOCK_GATEr_GET(r) (r).xlport_eee_clock_gate[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_EEE_CLOCK_GATEr_CORE0f_GET(r) (((r).xlport_eee_clock_gate[0]) & 0x1)
#define XLPORT_EEE_CLOCK_GATEr_CORE0f_SET(r,f) (r).xlport_eee_clock_gate[0]=(((r).xlport_eee_clock_gate[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access XLPORT_EEE_CLOCK_GATE.
 */
#define READ_XLPORT_EEE_CLOCK_GATEr(pa,p,r) bcmpmac_read(pa,p,XLPORT_EEE_CLOCK_GATEr_OFFSET,0,XLPORT_EEE_CLOCK_GATEr_SIZE,(r._xlport_eee_clock_gate))
#define WRITE_XLPORT_EEE_CLOCK_GATEr(pa,p,r) bcmpmac_write(pa,p,XLPORT_EEE_CLOCK_GATEr_OFFSET,0,XLPORT_EEE_CLOCK_GATEr_SIZE,&(r._xlport_eee_clock_gate))

/*******************************************************************************
 * End of 'XLPORT_EEE_CLOCK_GATEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_EEE_CORE0_CLOCK_GATE_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_OFFSET 0x00020f00

#define XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_EEE_CORE0_CLOCK_GATE_COUNTER.
 */
typedef union XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_s {
    uint32_t v[1];
    uint32_t xlport_eee_core0_clock_gate_counter[1];
    uint32_t _xlport_eee_core0_clock_gate_counter;
} XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_t;

#define XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_CLR(r) (r).xlport_eee_core0_clock_gate_counter[0] = 0
#define XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_SET(r,d) (r).xlport_eee_core0_clock_gate_counter[0] = d
#define XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_GET(r) (r).xlport_eee_core0_clock_gate_counter[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_COUNTf_GET(r) ((r).xlport_eee_core0_clock_gate_counter[0])
#define XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_COUNTf_SET(r,f) (r).xlport_eee_core0_clock_gate_counter[0]=((uint32_t)f)

/*
 * These macros can be used to access XLPORT_EEE_CORE0_CLOCK_GATE_COUNTER.
 */
#define READ_XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr(pa,p,r) bcmpmac_read(pa,p,XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_OFFSET,0,XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_SIZE,(r._xlport_eee_core0_clock_gate_counter))
#define WRITE_XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr(pa,p,r) bcmpmac_write(pa,p,XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_OFFSET,0,XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_SIZE,&(r._xlport_eee_core0_clock_gate_counter))

/*******************************************************************************
 * End of 'XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_EEE_COUNTER_MODE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_EEE_COUNTER_MODEr_OFFSET 0x10020300

#define XLPORT_EEE_COUNTER_MODEr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_EEE_COUNTER_MODE.
 */
typedef union XLPORT_EEE_COUNTER_MODEr_s {
    uint32_t v[1];
    uint32_t xlport_eee_counter_mode[1];
    uint32_t _xlport_eee_counter_mode;
} XLPORT_EEE_COUNTER_MODEr_t;

#define XLPORT_EEE_COUNTER_MODEr_CLR(r) (r).xlport_eee_counter_mode[0] = 0
#define XLPORT_EEE_COUNTER_MODEr_SET(r,d) (r).xlport_eee_counter_mode[0] = d
#define XLPORT_EEE_COUNTER_MODEr_GET(r) (r).xlport_eee_counter_mode[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_EEE_COUNTER_MODEr_MODE_BITf_GET(r) (((r).xlport_eee_counter_mode[0]) & 0x1)
#define XLPORT_EEE_COUNTER_MODEr_MODE_BITf_SET(r,f) (r).xlport_eee_counter_mode[0]=(((r).xlport_eee_counter_mode[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access XLPORT_EEE_COUNTER_MODE.
 */
#define READ_XLPORT_EEE_COUNTER_MODEr(pa,p,r) bcmpmac_read(pa,p,XLPORT_EEE_COUNTER_MODEr_OFFSET,0,XLPORT_EEE_COUNTER_MODEr_SIZE,(r._xlport_eee_counter_mode))
#define WRITE_XLPORT_EEE_COUNTER_MODEr(pa,p,r) bcmpmac_write(pa,p,XLPORT_EEE_COUNTER_MODEr_OFFSET,0,XLPORT_EEE_COUNTER_MODEr_SIZE,&(r._xlport_eee_counter_mode))

/*******************************************************************************
 * End of 'XLPORT_EEE_COUNTER_MODEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_EEE_DURATION_TIMER_PULSE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_EEE_DURATION_TIMER_PULSEr_OFFSET 0x00021200

#define XLPORT_EEE_DURATION_TIMER_PULSEr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_EEE_DURATION_TIMER_PULSE.
 */
typedef union XLPORT_EEE_DURATION_TIMER_PULSEr_s {
    uint32_t v[1];
    uint32_t xlport_eee_duration_timer_pulse[1];
    uint32_t _xlport_eee_duration_timer_pulse;
} XLPORT_EEE_DURATION_TIMER_PULSEr_t;

#define XLPORT_EEE_DURATION_TIMER_PULSEr_CLR(r) (r).xlport_eee_duration_timer_pulse[0] = 0
#define XLPORT_EEE_DURATION_TIMER_PULSEr_SET(r,d) (r).xlport_eee_duration_timer_pulse[0] = d
#define XLPORT_EEE_DURATION_TIMER_PULSEr_GET(r) (r).xlport_eee_duration_timer_pulse[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_EEE_DURATION_TIMER_PULSEr_CNT_VALUEf_GET(r) (((r).xlport_eee_duration_timer_pulse[0]) & 0xff)
#define XLPORT_EEE_DURATION_TIMER_PULSEr_CNT_VALUEf_SET(r,f) (r).xlport_eee_duration_timer_pulse[0]=(((r).xlport_eee_duration_timer_pulse[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access XLPORT_EEE_DURATION_TIMER_PULSE.
 */
#define READ_XLPORT_EEE_DURATION_TIMER_PULSEr(pa,p,r) bcmpmac_read(pa,p,XLPORT_EEE_DURATION_TIMER_PULSEr_OFFSET,0,XLPORT_EEE_DURATION_TIMER_PULSEr_SIZE,(r._xlport_eee_duration_timer_pulse))
#define WRITE_XLPORT_EEE_DURATION_TIMER_PULSEr(pa,p,r) bcmpmac_write(pa,p,XLPORT_EEE_DURATION_TIMER_PULSEr_OFFSET,0,XLPORT_EEE_DURATION_TIMER_PULSEr_SIZE,&(r._xlport_eee_duration_timer_pulse))

/*******************************************************************************
 * End of 'XLPORT_EEE_DURATION_TIMER_PULSEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_ENABLE_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_ENABLE_REGr_OFFSET 0x00020b00

#define XLPORT_ENABLE_REGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_ENABLE_REG.
 */
typedef union XLPORT_ENABLE_REGr_s {
    uint32_t v[1];
    uint32_t xlport_enable_reg[1];
    uint32_t _xlport_enable_reg;
} XLPORT_ENABLE_REGr_t;

#define XLPORT_ENABLE_REGr_CLR(r) (r).xlport_enable_reg[0] = 0
#define XLPORT_ENABLE_REGr_SET(r,d) (r).xlport_enable_reg[0] = d
#define XLPORT_ENABLE_REGr_GET(r) (r).xlport_enable_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_ENABLE_REGr_PORT0f_GET(r) (((r).xlport_enable_reg[0]) & 0x1)
#define XLPORT_ENABLE_REGr_PORT0f_SET(r,f) (r).xlport_enable_reg[0]=(((r).xlport_enable_reg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_ENABLE_REGr_PORT1f_GET(r) ((((r).xlport_enable_reg[0]) >> 1) & 0x1)
#define XLPORT_ENABLE_REGr_PORT1f_SET(r,f) (r).xlport_enable_reg[0]=(((r).xlport_enable_reg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLPORT_ENABLE_REGr_PORT2f_GET(r) ((((r).xlport_enable_reg[0]) >> 2) & 0x1)
#define XLPORT_ENABLE_REGr_PORT2f_SET(r,f) (r).xlport_enable_reg[0]=(((r).xlport_enable_reg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLPORT_ENABLE_REGr_PORT3f_GET(r) ((((r).xlport_enable_reg[0]) >> 3) & 0x1)
#define XLPORT_ENABLE_REGr_PORT3f_SET(r,f) (r).xlport_enable_reg[0]=(((r).xlport_enable_reg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*
 * These macros can be used to access XLPORT_ENABLE_REG.
 */
#define READ_XLPORT_ENABLE_REGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_ENABLE_REGr_OFFSET,0,XLPORT_ENABLE_REGr_SIZE,(r._xlport_enable_reg))
#define WRITE_XLPORT_ENABLE_REGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_ENABLE_REGr_OFFSET,0,XLPORT_ENABLE_REGr_SIZE,&(r._xlport_enable_reg))

/*******************************************************************************
 * End of 'XLPORT_ENABLE_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_FAULT_LINK_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_FAULT_LINK_STATUSr_OFFSET 0x10020500

#define XLPORT_FAULT_LINK_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_FAULT_LINK_STATUS.
 */
typedef union XLPORT_FAULT_LINK_STATUSr_s {
    uint32_t v[1];
    uint32_t xlport_fault_link_status[1];
    uint32_t _xlport_fault_link_status;
} XLPORT_FAULT_LINK_STATUSr_t;

#define XLPORT_FAULT_LINK_STATUSr_CLR(r) (r).xlport_fault_link_status[0] = 0
#define XLPORT_FAULT_LINK_STATUSr_SET(r,d) (r).xlport_fault_link_status[0] = d
#define XLPORT_FAULT_LINK_STATUSr_GET(r) (r).xlport_fault_link_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_FAULT_LINK_STATUSr_REMOTE_FAULTf_GET(r) (((r).xlport_fault_link_status[0]) & 0x1)
#define XLPORT_FAULT_LINK_STATUSr_REMOTE_FAULTf_SET(r,f) (r).xlport_fault_link_status[0]=(((r).xlport_fault_link_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_FAULT_LINK_STATUSr_LOCAL_FAULTf_GET(r) ((((r).xlport_fault_link_status[0]) >> 1) & 0x1)
#define XLPORT_FAULT_LINK_STATUSr_LOCAL_FAULTf_SET(r,f) (r).xlport_fault_link_status[0]=(((r).xlport_fault_link_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access XLPORT_FAULT_LINK_STATUS.
 */
#define READ_XLPORT_FAULT_LINK_STATUSr(pa,p,r) bcmpmac_read(pa,p,XLPORT_FAULT_LINK_STATUSr_OFFSET,0,XLPORT_FAULT_LINK_STATUSr_SIZE,(r._xlport_fault_link_status))
#define WRITE_XLPORT_FAULT_LINK_STATUSr(pa,p,r) bcmpmac_write(pa,p,XLPORT_FAULT_LINK_STATUSr_OFFSET,0,XLPORT_FAULT_LINK_STATUSr_SIZE,&(r._xlport_fault_link_status))

/*******************************************************************************
 * End of 'XLPORT_FAULT_LINK_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_FLOW_CONTROL_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_FLOW_CONTROL_CONFIGr_OFFSET 0x10020700

#define XLPORT_FLOW_CONTROL_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_FLOW_CONTROL_CONFIG.
 */
typedef union XLPORT_FLOW_CONTROL_CONFIGr_s {
    uint32_t v[1];
    uint32_t xlport_flow_control_config[1];
    uint32_t _xlport_flow_control_config;
} XLPORT_FLOW_CONTROL_CONFIGr_t;

#define XLPORT_FLOW_CONTROL_CONFIGr_CLR(r) (r).xlport_flow_control_config[0] = 0
#define XLPORT_FLOW_CONTROL_CONFIGr_SET(r,d) (r).xlport_flow_control_config[0] = d
#define XLPORT_FLOW_CONTROL_CONFIGr_GET(r) (r).xlport_flow_control_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_FLOW_CONTROL_CONFIGr_PARALLEL_FC_ENf_GET(r) (((r).xlport_flow_control_config[0]) & 0x1)
#define XLPORT_FLOW_CONTROL_CONFIGr_PARALLEL_FC_ENf_SET(r,f) (r).xlport_flow_control_config[0]=(((r).xlport_flow_control_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_FLOW_CONTROL_CONFIGr_MERGE_MODE_ENf_GET(r) ((((r).xlport_flow_control_config[0]) >> 1) & 0x1)
#define XLPORT_FLOW_CONTROL_CONFIGr_MERGE_MODE_ENf_SET(r,f) (r).xlport_flow_control_config[0]=(((r).xlport_flow_control_config[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access XLPORT_FLOW_CONTROL_CONFIG.
 */
#define READ_XLPORT_FLOW_CONTROL_CONFIGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_FLOW_CONTROL_CONFIGr_OFFSET,0,XLPORT_FLOW_CONTROL_CONFIGr_SIZE,(r._xlport_flow_control_config))
#define WRITE_XLPORT_FLOW_CONTROL_CONFIGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_FLOW_CONTROL_CONFIGr_OFFSET,0,XLPORT_FLOW_CONTROL_CONFIGr_SIZE,&(r._xlport_flow_control_config))

/*******************************************************************************
 * End of 'XLPORT_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_FORCE_DOUBLE_BIT_ERROR
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_FORCE_DOUBLE_BIT_ERRORr_OFFSET 0x00021b00

#define XLPORT_FORCE_DOUBLE_BIT_ERRORr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_FORCE_DOUBLE_BIT_ERROR.
 */
typedef union XLPORT_FORCE_DOUBLE_BIT_ERRORr_s {
    uint32_t v[1];
    uint32_t xlport_force_double_bit_error[1];
    uint32_t _xlport_force_double_bit_error;
} XLPORT_FORCE_DOUBLE_BIT_ERRORr_t;

#define XLPORT_FORCE_DOUBLE_BIT_ERRORr_CLR(r) (r).xlport_force_double_bit_error[0] = 0
#define XLPORT_FORCE_DOUBLE_BIT_ERRORr_SET(r,d) (r).xlport_force_double_bit_error[0] = d
#define XLPORT_FORCE_DOUBLE_BIT_ERRORr_GET(r) (r).xlport_force_double_bit_error[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_FORCE_DOUBLE_BIT_ERRORr_MIB_TSC0_MEMf_GET(r) (((r).xlport_force_double_bit_error[0]) & 0x1)
#define XLPORT_FORCE_DOUBLE_BIT_ERRORr_MIB_TSC0_MEMf_SET(r,f) (r).xlport_force_double_bit_error[0]=(((r).xlport_force_double_bit_error[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_FORCE_DOUBLE_BIT_ERRORr_MIB_TSC1_MEMf_GET(r) ((((r).xlport_force_double_bit_error[0]) >> 1) & 0x1)
#define XLPORT_FORCE_DOUBLE_BIT_ERRORr_MIB_TSC1_MEMf_SET(r,f) (r).xlport_force_double_bit_error[0]=(((r).xlport_force_double_bit_error[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLPORT_FORCE_DOUBLE_BIT_ERRORr_MIB_RSC0_MEMf_GET(r) ((((r).xlport_force_double_bit_error[0]) >> 2) & 0x1)
#define XLPORT_FORCE_DOUBLE_BIT_ERRORr_MIB_RSC0_MEMf_SET(r,f) (r).xlport_force_double_bit_error[0]=(((r).xlport_force_double_bit_error[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLPORT_FORCE_DOUBLE_BIT_ERRORr_MIB_RSC1_MEMf_GET(r) ((((r).xlport_force_double_bit_error[0]) >> 3) & 0x1)
#define XLPORT_FORCE_DOUBLE_BIT_ERRORr_MIB_RSC1_MEMf_SET(r,f) (r).xlport_force_double_bit_error[0]=(((r).xlport_force_double_bit_error[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*
 * These macros can be used to access XLPORT_FORCE_DOUBLE_BIT_ERROR.
 */
#define READ_XLPORT_FORCE_DOUBLE_BIT_ERRORr(pa,p,r) bcmpmac_read(pa,p,XLPORT_FORCE_DOUBLE_BIT_ERRORr_OFFSET,0,XLPORT_FORCE_DOUBLE_BIT_ERRORr_SIZE,(r._xlport_force_double_bit_error))
#define WRITE_XLPORT_FORCE_DOUBLE_BIT_ERRORr(pa,p,r) bcmpmac_write(pa,p,XLPORT_FORCE_DOUBLE_BIT_ERRORr_OFFSET,0,XLPORT_FORCE_DOUBLE_BIT_ERRORr_SIZE,&(r._xlport_force_double_bit_error))

/*******************************************************************************
 * End of 'XLPORT_FORCE_DOUBLE_BIT_ERRORr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_FORCE_SINGLE_BIT_ERROR
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_FORCE_SINGLE_BIT_ERRORr_OFFSET 0x00021c00

#define XLPORT_FORCE_SINGLE_BIT_ERRORr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_FORCE_SINGLE_BIT_ERROR.
 */
typedef union XLPORT_FORCE_SINGLE_BIT_ERRORr_s {
    uint32_t v[1];
    uint32_t xlport_force_single_bit_error[1];
    uint32_t _xlport_force_single_bit_error;
} XLPORT_FORCE_SINGLE_BIT_ERRORr_t;

#define XLPORT_FORCE_SINGLE_BIT_ERRORr_CLR(r) (r).xlport_force_single_bit_error[0] = 0
#define XLPORT_FORCE_SINGLE_BIT_ERRORr_SET(r,d) (r).xlport_force_single_bit_error[0] = d
#define XLPORT_FORCE_SINGLE_BIT_ERRORr_GET(r) (r).xlport_force_single_bit_error[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_FORCE_SINGLE_BIT_ERRORr_MIB_TSC0_MEMf_GET(r) (((r).xlport_force_single_bit_error[0]) & 0x1)
#define XLPORT_FORCE_SINGLE_BIT_ERRORr_MIB_TSC0_MEMf_SET(r,f) (r).xlport_force_single_bit_error[0]=(((r).xlport_force_single_bit_error[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_FORCE_SINGLE_BIT_ERRORr_MIB_TSC1_MEMf_GET(r) ((((r).xlport_force_single_bit_error[0]) >> 1) & 0x1)
#define XLPORT_FORCE_SINGLE_BIT_ERRORr_MIB_TSC1_MEMf_SET(r,f) (r).xlport_force_single_bit_error[0]=(((r).xlport_force_single_bit_error[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLPORT_FORCE_SINGLE_BIT_ERRORr_MIB_RSC0_MEMf_GET(r) ((((r).xlport_force_single_bit_error[0]) >> 2) & 0x1)
#define XLPORT_FORCE_SINGLE_BIT_ERRORr_MIB_RSC0_MEMf_SET(r,f) (r).xlport_force_single_bit_error[0]=(((r).xlport_force_single_bit_error[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLPORT_FORCE_SINGLE_BIT_ERRORr_MIB_RSC1_MEMf_GET(r) ((((r).xlport_force_single_bit_error[0]) >> 3) & 0x1)
#define XLPORT_FORCE_SINGLE_BIT_ERRORr_MIB_RSC1_MEMf_SET(r,f) (r).xlport_force_single_bit_error[0]=(((r).xlport_force_single_bit_error[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*
 * These macros can be used to access XLPORT_FORCE_SINGLE_BIT_ERROR.
 */
#define READ_XLPORT_FORCE_SINGLE_BIT_ERRORr(pa,p,r) bcmpmac_read(pa,p,XLPORT_FORCE_SINGLE_BIT_ERRORr_OFFSET,0,XLPORT_FORCE_SINGLE_BIT_ERRORr_SIZE,(r._xlport_force_single_bit_error))
#define WRITE_XLPORT_FORCE_SINGLE_BIT_ERRORr(pa,p,r) bcmpmac_write(pa,p,XLPORT_FORCE_SINGLE_BIT_ERRORr_OFFSET,0,XLPORT_FORCE_SINGLE_BIT_ERRORr_SIZE,&(r._xlport_force_single_bit_error))

/*******************************************************************************
 * End of 'XLPORT_FORCE_SINGLE_BIT_ERRORr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_GENERAL_SPARE1_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_GENERAL_SPARE1_REGr_OFFSET 0x00022e00

#define XLPORT_GENERAL_SPARE1_REGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_GENERAL_SPARE1_REG.
 */
typedef union XLPORT_GENERAL_SPARE1_REGr_s {
    uint32_t v[1];
    uint32_t xlport_general_spare1_reg[1];
    uint32_t _xlport_general_spare1_reg;
} XLPORT_GENERAL_SPARE1_REGr_t;

#define XLPORT_GENERAL_SPARE1_REGr_CLR(r) (r).xlport_general_spare1_reg[0] = 0
#define XLPORT_GENERAL_SPARE1_REGr_SET(r,d) (r).xlport_general_spare1_reg[0] = d
#define XLPORT_GENERAL_SPARE1_REGr_GET(r) (r).xlport_general_spare1_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_GENERAL_SPARE1_REGr_RSVDf_GET(r) ((r).xlport_general_spare1_reg[0])
#define XLPORT_GENERAL_SPARE1_REGr_RSVDf_SET(r,f) (r).xlport_general_spare1_reg[0]=((uint32_t)f)

/*
 * These macros can be used to access XLPORT_GENERAL_SPARE1_REG.
 */
#define READ_XLPORT_GENERAL_SPARE1_REGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_GENERAL_SPARE1_REGr_OFFSET,0,XLPORT_GENERAL_SPARE1_REGr_SIZE,(r._xlport_general_spare1_reg))
#define WRITE_XLPORT_GENERAL_SPARE1_REGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_GENERAL_SPARE1_REGr_OFFSET,0,XLPORT_GENERAL_SPARE1_REGr_SIZE,&(r._xlport_general_spare1_reg))

/*******************************************************************************
 * End of 'XLPORT_GENERAL_SPARE1_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_GENERAL_SPARE2_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_GENERAL_SPARE2_REGr_OFFSET 0x00022f00

#define XLPORT_GENERAL_SPARE2_REGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_GENERAL_SPARE2_REG.
 */
typedef union XLPORT_GENERAL_SPARE2_REGr_s {
    uint32_t v[1];
    uint32_t xlport_general_spare2_reg[1];
    uint32_t _xlport_general_spare2_reg;
} XLPORT_GENERAL_SPARE2_REGr_t;

#define XLPORT_GENERAL_SPARE2_REGr_CLR(r) (r).xlport_general_spare2_reg[0] = 0
#define XLPORT_GENERAL_SPARE2_REGr_SET(r,d) (r).xlport_general_spare2_reg[0] = d
#define XLPORT_GENERAL_SPARE2_REGr_GET(r) (r).xlport_general_spare2_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_GENERAL_SPARE2_REGr_RSVDf_GET(r) ((r).xlport_general_spare2_reg[0])
#define XLPORT_GENERAL_SPARE2_REGr_RSVDf_SET(r,f) (r).xlport_general_spare2_reg[0]=((uint32_t)f)

/*
 * These macros can be used to access XLPORT_GENERAL_SPARE2_REG.
 */
#define READ_XLPORT_GENERAL_SPARE2_REGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_GENERAL_SPARE2_REGr_OFFSET,0,XLPORT_GENERAL_SPARE2_REGr_SIZE,(r._xlport_general_spare2_reg))
#define WRITE_XLPORT_GENERAL_SPARE2_REGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_GENERAL_SPARE2_REGr_OFFSET,0,XLPORT_GENERAL_SPARE2_REGr_SIZE,&(r._xlport_general_spare2_reg))

/*******************************************************************************
 * End of 'XLPORT_GENERAL_SPARE2_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_GENERAL_SPARE3_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_GENERAL_SPARE3_REGr_OFFSET 0x00023000

#define XLPORT_GENERAL_SPARE3_REGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_GENERAL_SPARE3_REG.
 */
typedef union XLPORT_GENERAL_SPARE3_REGr_s {
    uint32_t v[1];
    uint32_t xlport_general_spare3_reg[1];
    uint32_t _xlport_general_spare3_reg;
} XLPORT_GENERAL_SPARE3_REGr_t;

#define XLPORT_GENERAL_SPARE3_REGr_CLR(r) (r).xlport_general_spare3_reg[0] = 0
#define XLPORT_GENERAL_SPARE3_REGr_SET(r,d) (r).xlport_general_spare3_reg[0] = d
#define XLPORT_GENERAL_SPARE3_REGr_GET(r) (r).xlport_general_spare3_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_GENERAL_SPARE3_REGr_RSVDf_GET(r) ((r).xlport_general_spare3_reg[0])
#define XLPORT_GENERAL_SPARE3_REGr_RSVDf_SET(r,f) (r).xlport_general_spare3_reg[0]=((uint32_t)f)

/*
 * These macros can be used to access XLPORT_GENERAL_SPARE3_REG.
 */
#define READ_XLPORT_GENERAL_SPARE3_REGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_GENERAL_SPARE3_REGr_OFFSET,0,XLPORT_GENERAL_SPARE3_REGr_SIZE,(r._xlport_general_spare3_reg))
#define WRITE_XLPORT_GENERAL_SPARE3_REGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_GENERAL_SPARE3_REGr_OFFSET,0,XLPORT_GENERAL_SPARE3_REGr_SIZE,&(r._xlport_general_spare3_reg))

/*******************************************************************************
 * End of 'XLPORT_GENERAL_SPARE3_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_INTR_ENABLE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_INTR_ENABLEr_OFFSET 0x00022a00

#define XLPORT_INTR_ENABLEr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_INTR_ENABLE.
 */
typedef union XLPORT_INTR_ENABLEr_s {
    uint32_t v[1];
    uint32_t xlport_intr_enable[1];
    uint32_t _xlport_intr_enable;
} XLPORT_INTR_ENABLEr_t;

#define XLPORT_INTR_ENABLEr_CLR(r) (r).xlport_intr_enable[0] = 0
#define XLPORT_INTR_ENABLEr_SET(r,d) (r).xlport_intr_enable[0] = d
#define XLPORT_INTR_ENABLEr_GET(r) (r).xlport_intr_enable[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_INTR_ENABLEr_MIB_TX_MEM_ERRf_GET(r) (((r).xlport_intr_enable[0]) & 0x1)
#define XLPORT_INTR_ENABLEr_MIB_TX_MEM_ERRf_SET(r,f) (r).xlport_intr_enable[0]=(((r).xlport_intr_enable[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_INTR_ENABLEr_MIB_RX_MEM_ERRf_GET(r) ((((r).xlport_intr_enable[0]) >> 1) & 0x1)
#define XLPORT_INTR_ENABLEr_MIB_RX_MEM_ERRf_SET(r,f) (r).xlport_intr_enable[0]=(((r).xlport_intr_enable[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLPORT_INTR_ENABLEr_RESERVED_2f_GET(r) ((((r).xlport_intr_enable[0]) >> 2) & 0x1)
#define XLPORT_INTR_ENABLEr_RESERVED_2f_SET(r,f) (r).xlport_intr_enable[0]=(((r).xlport_intr_enable[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLPORT_INTR_ENABLEr_RESERVED_3f_GET(r) ((((r).xlport_intr_enable[0]) >> 3) & 0x1)
#define XLPORT_INTR_ENABLEr_RESERVED_3f_SET(r,f) (r).xlport_intr_enable[0]=(((r).xlport_intr_enable[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLPORT_INTR_ENABLEr_TSC_ERRf_GET(r) ((((r).xlport_intr_enable[0]) >> 4) & 0x1)
#define XLPORT_INTR_ENABLEr_TSC_ERRf_SET(r,f) (r).xlport_intr_enable[0]=(((r).xlport_intr_enable[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define XLPORT_INTR_ENABLEr_RX_FLOWCONTROL_REQ_FULLf_GET(r) ((((r).xlport_intr_enable[0]) >> 5) & 0xf)
#define XLPORT_INTR_ENABLEr_RX_FLOWCONTROL_REQ_FULLf_SET(r,f) (r).xlport_intr_enable[0]=(((r).xlport_intr_enable[0] & ~((uint32_t)0xf << 5)) | ((((uint32_t)f) & 0xf) << 5))
#define XLPORT_INTR_ENABLEr_MAC_ERRf_GET(r) ((((r).xlport_intr_enable[0]) >> 9) & 0xf)
#define XLPORT_INTR_ENABLEr_MAC_ERRf_SET(r,f) (r).xlport_intr_enable[0]=(((r).xlport_intr_enable[0] & ~((uint32_t)0xf << 9)) | ((((uint32_t)f) & 0xf) << 9))
#define XLPORT_INTR_ENABLEr_LINK_DOWNf_GET(r) ((((r).xlport_intr_enable[0]) >> 13) & 0xf)
#define XLPORT_INTR_ENABLEr_LINK_DOWNf_SET(r,f) (r).xlport_intr_enable[0]=(((r).xlport_intr_enable[0] & ~((uint32_t)0xf << 13)) | ((((uint32_t)f) & 0xf) << 13))

/*
 * These macros can be used to access XLPORT_INTR_ENABLE.
 */
#define READ_XLPORT_INTR_ENABLEr(pa,p,r) bcmpmac_read(pa,p,XLPORT_INTR_ENABLEr_OFFSET,0,XLPORT_INTR_ENABLEr_SIZE,(r._xlport_intr_enable))
#define WRITE_XLPORT_INTR_ENABLEr(pa,p,r) bcmpmac_write(pa,p,XLPORT_INTR_ENABLEr_OFFSET,0,XLPORT_INTR_ENABLEr_SIZE,&(r._xlport_intr_enable))

/*******************************************************************************
 * End of 'XLPORT_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_INTR_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_INTR_STATUSr_OFFSET 0x00022900

#define XLPORT_INTR_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_INTR_STATUS.
 */
typedef union XLPORT_INTR_STATUSr_s {
    uint32_t v[1];
    uint32_t xlport_intr_status[1];
    uint32_t _xlport_intr_status;
} XLPORT_INTR_STATUSr_t;

#define XLPORT_INTR_STATUSr_CLR(r) (r).xlport_intr_status[0] = 0
#define XLPORT_INTR_STATUSr_SET(r,d) (r).xlport_intr_status[0] = d
#define XLPORT_INTR_STATUSr_GET(r) (r).xlport_intr_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_INTR_STATUSr_MIB_TX_MEM_ERRf_GET(r) (((r).xlport_intr_status[0]) & 0x1)
#define XLPORT_INTR_STATUSr_MIB_TX_MEM_ERRf_SET(r,f) (r).xlport_intr_status[0]=(((r).xlport_intr_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_INTR_STATUSr_MIB_RX_MEM_ERRf_GET(r) ((((r).xlport_intr_status[0]) >> 1) & 0x1)
#define XLPORT_INTR_STATUSr_MIB_RX_MEM_ERRf_SET(r,f) (r).xlport_intr_status[0]=(((r).xlport_intr_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLPORT_INTR_STATUSr_RESERVED_2f_GET(r) ((((r).xlport_intr_status[0]) >> 2) & 0x1)
#define XLPORT_INTR_STATUSr_RESERVED_2f_SET(r,f) (r).xlport_intr_status[0]=(((r).xlport_intr_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLPORT_INTR_STATUSr_RESERVED_3f_GET(r) ((((r).xlport_intr_status[0]) >> 3) & 0x1)
#define XLPORT_INTR_STATUSr_RESERVED_3f_SET(r,f) (r).xlport_intr_status[0]=(((r).xlport_intr_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLPORT_INTR_STATUSr_TSC_ERRf_GET(r) ((((r).xlport_intr_status[0]) >> 4) & 0x1)
#define XLPORT_INTR_STATUSr_TSC_ERRf_SET(r,f) (r).xlport_intr_status[0]=(((r).xlport_intr_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define XLPORT_INTR_STATUSr_RX_FLOWCONTROL_REQ_FULLf_GET(r) ((((r).xlport_intr_status[0]) >> 5) & 0xf)
#define XLPORT_INTR_STATUSr_RX_FLOWCONTROL_REQ_FULLf_SET(r,f) (r).xlport_intr_status[0]=(((r).xlport_intr_status[0] & ~((uint32_t)0xf << 5)) | ((((uint32_t)f) & 0xf) << 5))
#define XLPORT_INTR_STATUSr_MAC_ERRf_GET(r) ((((r).xlport_intr_status[0]) >> 9) & 0xf)
#define XLPORT_INTR_STATUSr_MAC_ERRf_SET(r,f) (r).xlport_intr_status[0]=(((r).xlport_intr_status[0] & ~((uint32_t)0xf << 9)) | ((((uint32_t)f) & 0xf) << 9))
#define XLPORT_INTR_STATUSr_LINK_DOWNf_GET(r) ((((r).xlport_intr_status[0]) >> 13) & 0xf)
#define XLPORT_INTR_STATUSr_LINK_DOWNf_SET(r,f) (r).xlport_intr_status[0]=(((r).xlport_intr_status[0] & ~((uint32_t)0xf << 13)) | ((((uint32_t)f) & 0xf) << 13))

/*
 * These macros can be used to access XLPORT_INTR_STATUS.
 */
#define READ_XLPORT_INTR_STATUSr(pa,p,r) bcmpmac_read(pa,p,XLPORT_INTR_STATUSr_OFFSET,0,XLPORT_INTR_STATUSr_SIZE,(r._xlport_intr_status))
#define WRITE_XLPORT_INTR_STATUSr(pa,p,r) bcmpmac_write(pa,p,XLPORT_INTR_STATUSr_OFFSET,0,XLPORT_INTR_STATUSr_SIZE,&(r._xlport_intr_status))

/*******************************************************************************
 * End of 'XLPORT_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_LAG_FAILOVER_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_LAG_FAILOVER_CONFIGr_OFFSET 0x10020200

#define XLPORT_LAG_FAILOVER_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_LAG_FAILOVER_CONFIG.
 */
typedef union XLPORT_LAG_FAILOVER_CONFIGr_s {
    uint32_t v[1];
    uint32_t xlport_lag_failover_config[1];
    uint32_t _xlport_lag_failover_config;
} XLPORT_LAG_FAILOVER_CONFIGr_t;

#define XLPORT_LAG_FAILOVER_CONFIGr_CLR(r) (r).xlport_lag_failover_config[0] = 0
#define XLPORT_LAG_FAILOVER_CONFIGr_SET(r,d) (r).xlport_lag_failover_config[0] = d
#define XLPORT_LAG_FAILOVER_CONFIGr_GET(r) (r).xlport_lag_failover_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_LAG_FAILOVER_CONFIGr_LINK_STATUS_UPf_GET(r) (((r).xlport_lag_failover_config[0]) & 0x1)
#define XLPORT_LAG_FAILOVER_CONFIGr_LINK_STATUS_UPf_SET(r,f) (r).xlport_lag_failover_config[0]=(((r).xlport_lag_failover_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access XLPORT_LAG_FAILOVER_CONFIG.
 */
#define READ_XLPORT_LAG_FAILOVER_CONFIGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_LAG_FAILOVER_CONFIGr_OFFSET,0,XLPORT_LAG_FAILOVER_CONFIGr_SIZE,(r._xlport_lag_failover_config))
#define WRITE_XLPORT_LAG_FAILOVER_CONFIGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_LAG_FAILOVER_CONFIGr_OFFSET,0,XLPORT_LAG_FAILOVER_CONFIGr_SIZE,&(r._xlport_lag_failover_config))

/*******************************************************************************
 * End of 'XLPORT_LAG_FAILOVER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_LED_CHAIN_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_LED_CHAIN_CONFIGr_OFFSET 0x00022300

#define XLPORT_LED_CHAIN_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_LED_CHAIN_CONFIG.
 */
typedef union XLPORT_LED_CHAIN_CONFIGr_s {
    uint32_t v[1];
    uint32_t xlport_led_chain_config[1];
    uint32_t _xlport_led_chain_config;
} XLPORT_LED_CHAIN_CONFIGr_t;

#define XLPORT_LED_CHAIN_CONFIGr_CLR(r) (r).xlport_led_chain_config[0] = 0
#define XLPORT_LED_CHAIN_CONFIGr_SET(r,d) (r).xlport_led_chain_config[0] = d
#define XLPORT_LED_CHAIN_CONFIGr_GET(r) (r).xlport_led_chain_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_LED_CHAIN_CONFIGr_INTRA_DELAYf_GET(r) (((r).xlport_led_chain_config[0]) & 0xf)
#define XLPORT_LED_CHAIN_CONFIGr_INTRA_DELAYf_SET(r,f) (r).xlport_led_chain_config[0]=(((r).xlport_led_chain_config[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access XLPORT_LED_CHAIN_CONFIG.
 */
#define READ_XLPORT_LED_CHAIN_CONFIGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_LED_CHAIN_CONFIGr_OFFSET,0,XLPORT_LED_CHAIN_CONFIGr_SIZE,(r._xlport_led_chain_config))
#define WRITE_XLPORT_LED_CHAIN_CONFIGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_LED_CHAIN_CONFIGr_OFFSET,0,XLPORT_LED_CHAIN_CONFIGr_SIZE,&(r._xlport_led_chain_config))

/*******************************************************************************
 * End of 'XLPORT_LED_CHAIN_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_LINKSTATUS_DOWN
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_LINKSTATUS_DOWNr_OFFSET 0x00022700

#define XLPORT_LINKSTATUS_DOWNr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_LINKSTATUS_DOWN.
 */
typedef union XLPORT_LINKSTATUS_DOWNr_s {
    uint32_t v[1];
    uint32_t xlport_linkstatus_down[1];
    uint32_t _xlport_linkstatus_down;
} XLPORT_LINKSTATUS_DOWNr_t;

#define XLPORT_LINKSTATUS_DOWNr_CLR(r) (r).xlport_linkstatus_down[0] = 0
#define XLPORT_LINKSTATUS_DOWNr_SET(r,d) (r).xlport_linkstatus_down[0] = d
#define XLPORT_LINKSTATUS_DOWNr_GET(r) (r).xlport_linkstatus_down[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_LINKSTATUS_DOWNr_PORT0_LINKSTATUSf_GET(r) (((r).xlport_linkstatus_down[0]) & 0x1)
#define XLPORT_LINKSTATUS_DOWNr_PORT0_LINKSTATUSf_SET(r,f) (r).xlport_linkstatus_down[0]=(((r).xlport_linkstatus_down[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_LINKSTATUS_DOWNr_PORT1_LINKSTATUSf_GET(r) ((((r).xlport_linkstatus_down[0]) >> 1) & 0x1)
#define XLPORT_LINKSTATUS_DOWNr_PORT1_LINKSTATUSf_SET(r,f) (r).xlport_linkstatus_down[0]=(((r).xlport_linkstatus_down[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLPORT_LINKSTATUS_DOWNr_PORT2_LINKSTATUSf_GET(r) ((((r).xlport_linkstatus_down[0]) >> 2) & 0x1)
#define XLPORT_LINKSTATUS_DOWNr_PORT2_LINKSTATUSf_SET(r,f) (r).xlport_linkstatus_down[0]=(((r).xlport_linkstatus_down[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLPORT_LINKSTATUS_DOWNr_PORT3_LINKSTATUSf_GET(r) ((((r).xlport_linkstatus_down[0]) >> 3) & 0x1)
#define XLPORT_LINKSTATUS_DOWNr_PORT3_LINKSTATUSf_SET(r,f) (r).xlport_linkstatus_down[0]=(((r).xlport_linkstatus_down[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*
 * These macros can be used to access XLPORT_LINKSTATUS_DOWN.
 */
#define READ_XLPORT_LINKSTATUS_DOWNr(pa,p,r) bcmpmac_read(pa,p,XLPORT_LINKSTATUS_DOWNr_OFFSET,0,XLPORT_LINKSTATUS_DOWNr_SIZE,(r._xlport_linkstatus_down))
#define WRITE_XLPORT_LINKSTATUS_DOWNr(pa,p,r) bcmpmac_write(pa,p,XLPORT_LINKSTATUS_DOWNr_OFFSET,0,XLPORT_LINKSTATUS_DOWNr_SIZE,&(r._xlport_linkstatus_down))

/*******************************************************************************
 * End of 'XLPORT_LINKSTATUS_DOWNr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_LINKSTATUS_DOWN_CLEAR
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_LINKSTATUS_DOWN_CLEARr_OFFSET 0x00022800

#define XLPORT_LINKSTATUS_DOWN_CLEARr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_LINKSTATUS_DOWN_CLEAR.
 */
typedef union XLPORT_LINKSTATUS_DOWN_CLEARr_s {
    uint32_t v[1];
    uint32_t xlport_linkstatus_down_clear[1];
    uint32_t _xlport_linkstatus_down_clear;
} XLPORT_LINKSTATUS_DOWN_CLEARr_t;

#define XLPORT_LINKSTATUS_DOWN_CLEARr_CLR(r) (r).xlport_linkstatus_down_clear[0] = 0
#define XLPORT_LINKSTATUS_DOWN_CLEARr_SET(r,d) (r).xlport_linkstatus_down_clear[0] = d
#define XLPORT_LINKSTATUS_DOWN_CLEARr_GET(r) (r).xlport_linkstatus_down_clear[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_LINKSTATUS_DOWN_CLEARr_PORT0_LINKDOWN_CLEARf_GET(r) (((r).xlport_linkstatus_down_clear[0]) & 0x1)
#define XLPORT_LINKSTATUS_DOWN_CLEARr_PORT0_LINKDOWN_CLEARf_SET(r,f) (r).xlport_linkstatus_down_clear[0]=(((r).xlport_linkstatus_down_clear[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_LINKSTATUS_DOWN_CLEARr_PORT1_LINKDOWN_CLEARf_GET(r) ((((r).xlport_linkstatus_down_clear[0]) >> 1) & 0x1)
#define XLPORT_LINKSTATUS_DOWN_CLEARr_PORT1_LINKDOWN_CLEARf_SET(r,f) (r).xlport_linkstatus_down_clear[0]=(((r).xlport_linkstatus_down_clear[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLPORT_LINKSTATUS_DOWN_CLEARr_PORT2_LINKDOWN_CLEARf_GET(r) ((((r).xlport_linkstatus_down_clear[0]) >> 2) & 0x1)
#define XLPORT_LINKSTATUS_DOWN_CLEARr_PORT2_LINKDOWN_CLEARf_SET(r,f) (r).xlport_linkstatus_down_clear[0]=(((r).xlport_linkstatus_down_clear[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLPORT_LINKSTATUS_DOWN_CLEARr_PORT3_LINKDOWN_CLEARf_GET(r) ((((r).xlport_linkstatus_down_clear[0]) >> 3) & 0x1)
#define XLPORT_LINKSTATUS_DOWN_CLEARr_PORT3_LINKDOWN_CLEARf_SET(r,f) (r).xlport_linkstatus_down_clear[0]=(((r).xlport_linkstatus_down_clear[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*
 * These macros can be used to access XLPORT_LINKSTATUS_DOWN_CLEAR.
 */
#define READ_XLPORT_LINKSTATUS_DOWN_CLEARr(pa,p,r) bcmpmac_read(pa,p,XLPORT_LINKSTATUS_DOWN_CLEARr_OFFSET,0,XLPORT_LINKSTATUS_DOWN_CLEARr_SIZE,(r._xlport_linkstatus_down_clear))
#define WRITE_XLPORT_LINKSTATUS_DOWN_CLEARr(pa,p,r) bcmpmac_write(pa,p,XLPORT_LINKSTATUS_DOWN_CLEARr_OFFSET,0,XLPORT_LINKSTATUS_DOWN_CLEARr_SIZE,&(r._xlport_linkstatus_down_clear))

/*******************************************************************************
 * End of 'XLPORT_LINKSTATUS_DOWN_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MAC_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MAC_CONTROLr_OFFSET 0x00021000

#define XLPORT_MAC_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_MAC_CONTROL.
 */
typedef union XLPORT_MAC_CONTROLr_s {
    uint32_t v[1];
    uint32_t xlport_mac_control[1];
    uint32_t _xlport_mac_control;
} XLPORT_MAC_CONTROLr_t;

#define XLPORT_MAC_CONTROLr_CLR(r) (r).xlport_mac_control[0] = 0
#define XLPORT_MAC_CONTROLr_SET(r,d) (r).xlport_mac_control[0] = d
#define XLPORT_MAC_CONTROLr_GET(r) (r).xlport_mac_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_MAC_CONTROLr_XMAC0_RESETf_GET(r) (((r).xlport_mac_control[0]) & 0x1)
#define XLPORT_MAC_CONTROLr_XMAC0_RESETf_SET(r,f) (r).xlport_mac_control[0]=(((r).xlport_mac_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_MAC_CONTROLr_XMAC0_BYPASS_OSTSf_GET(r) ((((r).xlport_mac_control[0]) >> 1) & 0x1)
#define XLPORT_MAC_CONTROLr_XMAC0_BYPASS_OSTSf_SET(r,f) (r).xlport_mac_control[0]=(((r).xlport_mac_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLPORT_MAC_CONTROLr_RX_FLEX_TDM_ENABLEf_GET(r) ((((r).xlport_mac_control[0]) >> 2) & 0x1)
#define XLPORT_MAC_CONTROLr_RX_FLEX_TDM_ENABLEf_SET(r,f) (r).xlport_mac_control[0]=(((r).xlport_mac_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLPORT_MAC_CONTROLr_RX_NON_LINEAR_QUAD_TDM_ENf_GET(r) ((((r).xlport_mac_control[0]) >> 3) & 0x1)
#define XLPORT_MAC_CONTROLr_RX_NON_LINEAR_QUAD_TDM_ENf_SET(r,f) (r).xlport_mac_control[0]=(((r).xlport_mac_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLPORT_MAC_CONTROLr_RESERVED_4f_GET(r) ((((r).xlport_mac_control[0]) >> 4) & 0x1)
#define XLPORT_MAC_CONTROLr_RESERVED_4f_SET(r,f) (r).xlport_mac_control[0]=(((r).xlport_mac_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define XLPORT_MAC_CONTROLr_RX_DUAL_CYCLE_TDM_ENf_GET(r) ((((r).xlport_mac_control[0]) >> 5) & 0x1)
#define XLPORT_MAC_CONTROLr_RX_DUAL_CYCLE_TDM_ENf_SET(r,f) (r).xlport_mac_control[0]=(((r).xlport_mac_control[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))

/*
 * These macros can be used to access XLPORT_MAC_CONTROL.
 */
#define READ_XLPORT_MAC_CONTROLr(pa,p,r) bcmpmac_read(pa,p,XLPORT_MAC_CONTROLr_OFFSET,0,XLPORT_MAC_CONTROLr_SIZE,(r._xlport_mac_control))
#define WRITE_XLPORT_MAC_CONTROLr(pa,p,r) bcmpmac_write(pa,p,XLPORT_MAC_CONTROLr_OFFSET,0,XLPORT_MAC_CONTROLr_SIZE,&(r._xlport_mac_control))

/*******************************************************************************
 * End of 'XLPORT_MAC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MAC_RSV_MASK
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MAC_RSV_MASKr_OFFSET 0x10020800

#define XLPORT_MAC_RSV_MASKr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_MAC_RSV_MASK.
 */
typedef union XLPORT_MAC_RSV_MASKr_s {
    uint32_t v[1];
    uint32_t xlport_mac_rsv_mask[1];
    uint32_t _xlport_mac_rsv_mask;
} XLPORT_MAC_RSV_MASKr_t;

#define XLPORT_MAC_RSV_MASKr_CLR(r) (r).xlport_mac_rsv_mask[0] = 0
#define XLPORT_MAC_RSV_MASKr_SET(r,d) (r).xlport_mac_rsv_mask[0] = d
#define XLPORT_MAC_RSV_MASKr_GET(r) (r).xlport_mac_rsv_mask[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_MAC_RSV_MASKr_MASKf_GET(r) ((r).xlport_mac_rsv_mask[0])
#define XLPORT_MAC_RSV_MASKr_MASKf_SET(r,f) (r).xlport_mac_rsv_mask[0]=((uint32_t)f)

/*
 * These macros can be used to access XLPORT_MAC_RSV_MASK.
 */
#define READ_XLPORT_MAC_RSV_MASKr(pa,p,r) bcmpmac_read(pa,p,XLPORT_MAC_RSV_MASKr_OFFSET,0,XLPORT_MAC_RSV_MASKr_SIZE,(r._xlport_mac_rsv_mask))
#define WRITE_XLPORT_MAC_RSV_MASKr(pa,p,r) bcmpmac_write(pa,p,XLPORT_MAC_RSV_MASKr_OFFSET,0,XLPORT_MAC_RSV_MASKr_SIZE,&(r._xlport_mac_rsv_mask))

/*******************************************************************************
 * End of 'XLPORT_MAC_RSV_MASKr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_PROG_RANGE_CNTR0_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_OFFSET 0x10023100

#define XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_MIB_PROG_RANGE_CNTR0_CONFIG.
 */
typedef union XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_s {
    uint32_t v[1];
    uint32_t xlport_mib_prog_range_cntr0_config[1];
    uint32_t _xlport_mib_prog_range_cntr0_config;
} XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_t;

#define XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_CLR(r) (r).xlport_mib_prog_range_cntr0_config[0] = 0
#define XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_SET(r,d) (r).xlport_mib_prog_range_cntr0_config[0] = d
#define XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_GET(r) (r).xlport_mib_prog_range_cntr0_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_RANGE_LOf_GET(r) (((r).xlport_mib_prog_range_cntr0_config[0]) & 0xffff)
#define XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_RANGE_LOf_SET(r,f) (r).xlport_mib_prog_range_cntr0_config[0]=(((r).xlport_mib_prog_range_cntr0_config[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_RANGE_HIf_GET(r) ((((r).xlport_mib_prog_range_cntr0_config[0]) >> 16) & 0xffff)
#define XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_RANGE_HIf_SET(r,f) (r).xlport_mib_prog_range_cntr0_config[0]=(((r).xlport_mib_prog_range_cntr0_config[0] & ~((uint32_t)0xffff << 16)) | ((((uint32_t)f) & 0xffff) << 16))

/*
 * These macros can be used to access XLPORT_MIB_PROG_RANGE_CNTR0_CONFIG.
 */
#define READ_XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_OFFSET,0,XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_SIZE,(r._xlport_mib_prog_range_cntr0_config))
#define WRITE_XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_OFFSET,0,XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_SIZE,&(r._xlport_mib_prog_range_cntr0_config))

/*******************************************************************************
 * End of 'XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_PROG_RANGE_CNTR1_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_OFFSET 0x10023200

#define XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_MIB_PROG_RANGE_CNTR1_CONFIG.
 */
typedef union XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_s {
    uint32_t v[1];
    uint32_t xlport_mib_prog_range_cntr1_config[1];
    uint32_t _xlport_mib_prog_range_cntr1_config;
} XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_t;

#define XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_CLR(r) (r).xlport_mib_prog_range_cntr1_config[0] = 0
#define XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_SET(r,d) (r).xlport_mib_prog_range_cntr1_config[0] = d
#define XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_GET(r) (r).xlport_mib_prog_range_cntr1_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_RANGE_LOf_GET(r) (((r).xlport_mib_prog_range_cntr1_config[0]) & 0xffff)
#define XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_RANGE_LOf_SET(r,f) (r).xlport_mib_prog_range_cntr1_config[0]=(((r).xlport_mib_prog_range_cntr1_config[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_RANGE_HIf_GET(r) ((((r).xlport_mib_prog_range_cntr1_config[0]) >> 16) & 0xffff)
#define XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_RANGE_HIf_SET(r,f) (r).xlport_mib_prog_range_cntr1_config[0]=(((r).xlport_mib_prog_range_cntr1_config[0] & ~((uint32_t)0xffff << 16)) | ((((uint32_t)f) & 0xffff) << 16))

/*
 * These macros can be used to access XLPORT_MIB_PROG_RANGE_CNTR1_CONFIG.
 */
#define READ_XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_OFFSET,0,XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_SIZE,(r._xlport_mib_prog_range_cntr1_config))
#define WRITE_XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_OFFSET,0,XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_SIZE,&(r._xlport_mib_prog_range_cntr1_config))

/*******************************************************************************
 * End of 'XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_PROG_RANGE_CNTR2_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_OFFSET 0x10023300

#define XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_MIB_PROG_RANGE_CNTR2_CONFIG.
 */
typedef union XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_s {
    uint32_t v[1];
    uint32_t xlport_mib_prog_range_cntr2_config[1];
    uint32_t _xlport_mib_prog_range_cntr2_config;
} XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_t;

#define XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_CLR(r) (r).xlport_mib_prog_range_cntr2_config[0] = 0
#define XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_SET(r,d) (r).xlport_mib_prog_range_cntr2_config[0] = d
#define XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_GET(r) (r).xlport_mib_prog_range_cntr2_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_RANGE_LOf_GET(r) (((r).xlport_mib_prog_range_cntr2_config[0]) & 0xffff)
#define XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_RANGE_LOf_SET(r,f) (r).xlport_mib_prog_range_cntr2_config[0]=(((r).xlport_mib_prog_range_cntr2_config[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_RANGE_HIf_GET(r) ((((r).xlport_mib_prog_range_cntr2_config[0]) >> 16) & 0xffff)
#define XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_RANGE_HIf_SET(r,f) (r).xlport_mib_prog_range_cntr2_config[0]=(((r).xlport_mib_prog_range_cntr2_config[0] & ~((uint32_t)0xffff << 16)) | ((((uint32_t)f) & 0xffff) << 16))

/*
 * These macros can be used to access XLPORT_MIB_PROG_RANGE_CNTR2_CONFIG.
 */
#define READ_XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_OFFSET,0,XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_SIZE,(r._xlport_mib_prog_range_cntr2_config))
#define WRITE_XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_OFFSET,0,XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_SIZE,&(r._xlport_mib_prog_range_cntr2_config))

/*******************************************************************************
 * End of 'XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_PROG_RANGE_CNTR3_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_OFFSET 0x10023400

#define XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_MIB_PROG_RANGE_CNTR3_CONFIG.
 */
typedef union XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_s {
    uint32_t v[1];
    uint32_t xlport_mib_prog_range_cntr3_config[1];
    uint32_t _xlport_mib_prog_range_cntr3_config;
} XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_t;

#define XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_CLR(r) (r).xlport_mib_prog_range_cntr3_config[0] = 0
#define XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_SET(r,d) (r).xlport_mib_prog_range_cntr3_config[0] = d
#define XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_GET(r) (r).xlport_mib_prog_range_cntr3_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_RANGE_LOf_GET(r) (((r).xlport_mib_prog_range_cntr3_config[0]) & 0xffff)
#define XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_RANGE_LOf_SET(r,f) (r).xlport_mib_prog_range_cntr3_config[0]=(((r).xlport_mib_prog_range_cntr3_config[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_RANGE_HIf_GET(r) ((((r).xlport_mib_prog_range_cntr3_config[0]) >> 16) & 0xffff)
#define XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_RANGE_HIf_SET(r,f) (r).xlport_mib_prog_range_cntr3_config[0]=(((r).xlport_mib_prog_range_cntr3_config[0] & ~((uint32_t)0xffff << 16)) | ((((uint32_t)f) & 0xffff) << 16))

/*
 * These macros can be used to access XLPORT_MIB_PROG_RANGE_CNTR3_CONFIG.
 */
#define READ_XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_OFFSET,0,XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_SIZE,(r._xlport_mib_prog_range_cntr3_config))
#define WRITE_XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_OFFSET,0,XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_SIZE,&(r._xlport_mib_prog_range_cntr3_config))

/*******************************************************************************
 * End of 'XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RESET
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MIB_RESETr_OFFSET 0x00022400

#define XLPORT_MIB_RESETr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_MIB_RESET.
 */
typedef union XLPORT_MIB_RESETr_s {
    uint32_t v[1];
    uint32_t xlport_mib_reset[1];
    uint32_t _xlport_mib_reset;
} XLPORT_MIB_RESETr_t;

#define XLPORT_MIB_RESETr_CLR(r) (r).xlport_mib_reset[0] = 0
#define XLPORT_MIB_RESETr_SET(r,d) (r).xlport_mib_reset[0] = d
#define XLPORT_MIB_RESETr_GET(r) (r).xlport_mib_reset[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_MIB_RESETr_CLR_CNTf_GET(r) (((r).xlport_mib_reset[0]) & 0xf)
#define XLPORT_MIB_RESETr_CLR_CNTf_SET(r,f) (r).xlport_mib_reset[0]=(((r).xlport_mib_reset[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access XLPORT_MIB_RESET.
 */
#define READ_XLPORT_MIB_RESETr(pa,p,r) bcmpmac_read(pa,p,XLPORT_MIB_RESETr_OFFSET,0,XLPORT_MIB_RESETr_SIZE,(r._xlport_mib_reset))
#define WRITE_XLPORT_MIB_RESETr(pa,p,r) bcmpmac_write(pa,p,XLPORT_MIB_RESETr_OFFSET,0,XLPORT_MIB_RESETr_SIZE,&(r._xlport_mib_reset))

/*******************************************************************************
 * End of 'XLPORT_MIB_RESETr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RSC0_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MIB_RSC0_ECC_STATUSr_OFFSET 0x00021d00

#define XLPORT_MIB_RSC0_ECC_STATUSr_SIZE 4

/* XLPORT_MIB_RSC0_ECC_STATUSr is element of XLPORT_MIB_RSC_ECC_STATUS */

/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RSC1_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MIB_RSC1_ECC_STATUSr_OFFSET 0x00021e00

#define XLPORT_MIB_RSC1_ECC_STATUSr_SIZE 4

/* XLPORT_MIB_RSC1_ECC_STATUSr is element of XLPORT_MIB_RSC_ECC_STATUS */

/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RSC_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MIB_RSC_ECC_STATUSr_OFFSET 0x00021d00

#define XLPORT_MIB_RSC_ECC_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_MIB_RSC_ECC_STATUS.
 */
typedef union XLPORT_MIB_RSC_ECC_STATUSr_s {
    uint32_t v[1];
    uint32_t xlport_mib_rsc_ecc_status[1];
    uint32_t _xlport_mib_rsc_ecc_status;
} XLPORT_MIB_RSC_ECC_STATUSr_t;

#define XLPORT_MIB_RSC_ECC_STATUSr_CLR(r) (r).xlport_mib_rsc_ecc_status[0] = 0
#define XLPORT_MIB_RSC_ECC_STATUSr_SET(r,d) (r).xlport_mib_rsc_ecc_status[0] = d
#define XLPORT_MIB_RSC_ECC_STATUSr_GET(r) (r).xlport_mib_rsc_ecc_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_MIB_RSC_ECC_STATUSr_ECC_ERRf_GET(r) (((r).xlport_mib_rsc_ecc_status[0]) & 0x1)
#define XLPORT_MIB_RSC_ECC_STATUSr_ECC_ERRf_SET(r,f) (r).xlport_mib_rsc_ecc_status[0]=(((r).xlport_mib_rsc_ecc_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_MIB_RSC_ECC_STATUSr_MULTIPLE_ERRf_GET(r) ((((r).xlport_mib_rsc_ecc_status[0]) >> 1) & 0x1)
#define XLPORT_MIB_RSC_ECC_STATUSr_MULTIPLE_ERRf_SET(r,f) (r).xlport_mib_rsc_ecc_status[0]=(((r).xlport_mib_rsc_ecc_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLPORT_MIB_RSC_ECC_STATUSr_DOUBLE_BIT_ERRf_GET(r) ((((r).xlport_mib_rsc_ecc_status[0]) >> 2) & 0x1)
#define XLPORT_MIB_RSC_ECC_STATUSr_DOUBLE_BIT_ERRf_SET(r,f) (r).xlport_mib_rsc_ecc_status[0]=(((r).xlport_mib_rsc_ecc_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLPORT_MIB_RSC_ECC_STATUSr_ENTRY_IDXf_GET(r) ((((r).xlport_mib_rsc_ecc_status[0]) >> 3) & 0xff)
#define XLPORT_MIB_RSC_ECC_STATUSr_ENTRY_IDXf_SET(r,f) (r).xlport_mib_rsc_ecc_status[0]=(((r).xlport_mib_rsc_ecc_status[0] & ~((uint32_t)0xff << 3)) | ((((uint32_t)f) & 0xff) << 3))

/*
 * These macros can be used to access XLPORT_MIB_RSC_ECC_STATUS.
 */
#define READ_XLPORT_MIB_RSC_ECC_STATUSr(pa,p,i,r) bcmpmac_read(pa,p,XLPORT_MIB_RSC_ECC_STATUSr_OFFSET,i,XLPORT_MIB_RSC_ECC_STATUSr_SIZE,(r._xlport_mib_rsc_ecc_status))
#define WRITE_XLPORT_MIB_RSC_ECC_STATUSr(pa,p,i,r) bcmpmac_write(pa,p,XLPORT_MIB_RSC_ECC_STATUSr_OFFSET,i,XLPORT_MIB_RSC_ECC_STATUSr_SIZE,&(r._xlport_mib_rsc_ecc_status))

/*******************************************************************************
 * End of 'XLPORT_MIB_RSC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RSC_RAM_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MIB_RSC_RAM_CONTROLr_OFFSET 0x00022200

#define XLPORT_MIB_RSC_RAM_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_MIB_RSC_RAM_CONTROL.
 */
typedef union XLPORT_MIB_RSC_RAM_CONTROLr_s {
    uint32_t v[1];
    uint32_t xlport_mib_rsc_ram_control[1];
    uint32_t _xlport_mib_rsc_ram_control;
} XLPORT_MIB_RSC_RAM_CONTROLr_t;

#define XLPORT_MIB_RSC_RAM_CONTROLr_CLR(r) (r).xlport_mib_rsc_ram_control[0] = 0
#define XLPORT_MIB_RSC_RAM_CONTROLr_SET(r,d) (r).xlport_mib_rsc_ram_control[0] = d
#define XLPORT_MIB_RSC_RAM_CONTROLr_GET(r) (r).xlport_mib_rsc_ram_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_MIB_RSC_RAM_CONTROLr_MIB_RSC_DATA_LO_TMf_GET(r) (((r).xlport_mib_rsc_ram_control[0]) & 0xfff)
#define XLPORT_MIB_RSC_RAM_CONTROLr_MIB_RSC_DATA_LO_TMf_SET(r,f) (r).xlport_mib_rsc_ram_control[0]=(((r).xlport_mib_rsc_ram_control[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define XLPORT_MIB_RSC_RAM_CONTROLr_MIB_RSC_DATA_HI_TMf_GET(r) ((((r).xlport_mib_rsc_ram_control[0]) >> 12) & 0xfff)
#define XLPORT_MIB_RSC_RAM_CONTROLr_MIB_RSC_DATA_HI_TMf_SET(r,f) (r).xlport_mib_rsc_ram_control[0]=(((r).xlport_mib_rsc_ram_control[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define XLPORT_MIB_RSC_RAM_CONTROLr_MIB_RSC_DATA_LO_LVMf_GET(r) ((((r).xlport_mib_rsc_ram_control[0]) >> 24) & 0x1)
#define XLPORT_MIB_RSC_RAM_CONTROLr_MIB_RSC_DATA_LO_LVMf_SET(r,f) (r).xlport_mib_rsc_ram_control[0]=(((r).xlport_mib_rsc_ram_control[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define XLPORT_MIB_RSC_RAM_CONTROLr_MIB_RSC_DATA_HI_LVMf_GET(r) ((((r).xlport_mib_rsc_ram_control[0]) >> 25) & 0x1)
#define XLPORT_MIB_RSC_RAM_CONTROLr_MIB_RSC_DATA_HI_LVMf_SET(r,f) (r).xlport_mib_rsc_ram_control[0]=(((r).xlport_mib_rsc_ram_control[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*
 * These macros can be used to access XLPORT_MIB_RSC_RAM_CONTROL.
 */
#define READ_XLPORT_MIB_RSC_RAM_CONTROLr(pa,p,r) bcmpmac_read(pa,p,XLPORT_MIB_RSC_RAM_CONTROLr_OFFSET,0,XLPORT_MIB_RSC_RAM_CONTROLr_SIZE,(r._xlport_mib_rsc_ram_control))
#define WRITE_XLPORT_MIB_RSC_RAM_CONTROLr(pa,p,r) bcmpmac_write(pa,p,XLPORT_MIB_RSC_RAM_CONTROLr_OFFSET,0,XLPORT_MIB_RSC_RAM_CONTROLr_SIZE,&(r._xlport_mib_rsc_ram_control))

/*******************************************************************************
 * End of 'XLPORT_MIB_RSC_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_TSC0_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MIB_TSC0_ECC_STATUSr_OFFSET 0x00021f00

#define XLPORT_MIB_TSC0_ECC_STATUSr_SIZE 4

/* XLPORT_MIB_TSC0_ECC_STATUSr is element of XLPORT_MIB_TSC_ECC_STATUS */

/*******************************************************************************
 * REGISTER:  XLPORT_MIB_TSC1_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MIB_TSC1_ECC_STATUSr_OFFSET 0x00022000

#define XLPORT_MIB_TSC1_ECC_STATUSr_SIZE 4

/* XLPORT_MIB_TSC1_ECC_STATUSr is element of XLPORT_MIB_TSC_ECC_STATUS */

/*******************************************************************************
 * REGISTER:  XLPORT_MIB_TSC_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MIB_TSC_ECC_STATUSr_OFFSET 0x00021f00

#define XLPORT_MIB_TSC_ECC_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_MIB_TSC_ECC_STATUS.
 */
typedef union XLPORT_MIB_TSC_ECC_STATUSr_s {
    uint32_t v[1];
    uint32_t xlport_mib_tsc_ecc_status[1];
    uint32_t _xlport_mib_tsc_ecc_status;
} XLPORT_MIB_TSC_ECC_STATUSr_t;

#define XLPORT_MIB_TSC_ECC_STATUSr_CLR(r) (r).xlport_mib_tsc_ecc_status[0] = 0
#define XLPORT_MIB_TSC_ECC_STATUSr_SET(r,d) (r).xlport_mib_tsc_ecc_status[0] = d
#define XLPORT_MIB_TSC_ECC_STATUSr_GET(r) (r).xlport_mib_tsc_ecc_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_MIB_TSC_ECC_STATUSr_ECC_ERRf_GET(r) (((r).xlport_mib_tsc_ecc_status[0]) & 0x1)
#define XLPORT_MIB_TSC_ECC_STATUSr_ECC_ERRf_SET(r,f) (r).xlport_mib_tsc_ecc_status[0]=(((r).xlport_mib_tsc_ecc_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_MIB_TSC_ECC_STATUSr_MULTIPLE_ERRf_GET(r) ((((r).xlport_mib_tsc_ecc_status[0]) >> 1) & 0x1)
#define XLPORT_MIB_TSC_ECC_STATUSr_MULTIPLE_ERRf_SET(r,f) (r).xlport_mib_tsc_ecc_status[0]=(((r).xlport_mib_tsc_ecc_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLPORT_MIB_TSC_ECC_STATUSr_DOUBLE_BIT_ERRf_GET(r) ((((r).xlport_mib_tsc_ecc_status[0]) >> 2) & 0x1)
#define XLPORT_MIB_TSC_ECC_STATUSr_DOUBLE_BIT_ERRf_SET(r,f) (r).xlport_mib_tsc_ecc_status[0]=(((r).xlport_mib_tsc_ecc_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLPORT_MIB_TSC_ECC_STATUSr_ENTRY_IDXf_GET(r) ((((r).xlport_mib_tsc_ecc_status[0]) >> 3) & 0xff)
#define XLPORT_MIB_TSC_ECC_STATUSr_ENTRY_IDXf_SET(r,f) (r).xlport_mib_tsc_ecc_status[0]=(((r).xlport_mib_tsc_ecc_status[0] & ~((uint32_t)0xff << 3)) | ((((uint32_t)f) & 0xff) << 3))

/*
 * These macros can be used to access XLPORT_MIB_TSC_ECC_STATUS.
 */
#define READ_XLPORT_MIB_TSC_ECC_STATUSr(pa,p,i,r) bcmpmac_read(pa,p,XLPORT_MIB_TSC_ECC_STATUSr_OFFSET,i,XLPORT_MIB_TSC_ECC_STATUSr_SIZE,(r._xlport_mib_tsc_ecc_status))
#define WRITE_XLPORT_MIB_TSC_ECC_STATUSr(pa,p,i,r) bcmpmac_write(pa,p,XLPORT_MIB_TSC_ECC_STATUSr_OFFSET,i,XLPORT_MIB_TSC_ECC_STATUSr_SIZE,&(r._xlport_mib_tsc_ecc_status))

/*******************************************************************************
 * End of 'XLPORT_MIB_TSC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_TSC_RAM_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MIB_TSC_RAM_CONTROLr_OFFSET 0x00022100

#define XLPORT_MIB_TSC_RAM_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_MIB_TSC_RAM_CONTROL.
 */
typedef union XLPORT_MIB_TSC_RAM_CONTROLr_s {
    uint32_t v[1];
    uint32_t xlport_mib_tsc_ram_control[1];
    uint32_t _xlport_mib_tsc_ram_control;
} XLPORT_MIB_TSC_RAM_CONTROLr_t;

#define XLPORT_MIB_TSC_RAM_CONTROLr_CLR(r) (r).xlport_mib_tsc_ram_control[0] = 0
#define XLPORT_MIB_TSC_RAM_CONTROLr_SET(r,d) (r).xlport_mib_tsc_ram_control[0] = d
#define XLPORT_MIB_TSC_RAM_CONTROLr_GET(r) (r).xlport_mib_tsc_ram_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_MIB_TSC_RAM_CONTROLr_MIB_TSC_DATA_LO_TMf_GET(r) (((r).xlport_mib_tsc_ram_control[0]) & 0xfff)
#define XLPORT_MIB_TSC_RAM_CONTROLr_MIB_TSC_DATA_LO_TMf_SET(r,f) (r).xlport_mib_tsc_ram_control[0]=(((r).xlport_mib_tsc_ram_control[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define XLPORT_MIB_TSC_RAM_CONTROLr_MIB_TSC_DATA_HI_TMf_GET(r) ((((r).xlport_mib_tsc_ram_control[0]) >> 12) & 0xfff)
#define XLPORT_MIB_TSC_RAM_CONTROLr_MIB_TSC_DATA_HI_TMf_SET(r,f) (r).xlport_mib_tsc_ram_control[0]=(((r).xlport_mib_tsc_ram_control[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define XLPORT_MIB_TSC_RAM_CONTROLr_MIB_TSC_DATA_LO_LVMf_GET(r) ((((r).xlport_mib_tsc_ram_control[0]) >> 24) & 0x1)
#define XLPORT_MIB_TSC_RAM_CONTROLr_MIB_TSC_DATA_LO_LVMf_SET(r,f) (r).xlport_mib_tsc_ram_control[0]=(((r).xlport_mib_tsc_ram_control[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define XLPORT_MIB_TSC_RAM_CONTROLr_MIB_TSC_DATA_HI_LVMf_GET(r) ((((r).xlport_mib_tsc_ram_control[0]) >> 25) & 0x1)
#define XLPORT_MIB_TSC_RAM_CONTROLr_MIB_TSC_DATA_HI_LVMf_SET(r,f) (r).xlport_mib_tsc_ram_control[0]=(((r).xlport_mib_tsc_ram_control[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*
 * These macros can be used to access XLPORT_MIB_TSC_RAM_CONTROL.
 */
#define READ_XLPORT_MIB_TSC_RAM_CONTROLr(pa,p,r) bcmpmac_read(pa,p,XLPORT_MIB_TSC_RAM_CONTROLr_OFFSET,0,XLPORT_MIB_TSC_RAM_CONTROLr_SIZE,(r._xlport_mib_tsc_ram_control))
#define WRITE_XLPORT_MIB_TSC_RAM_CONTROLr(pa,p,r) bcmpmac_write(pa,p,XLPORT_MIB_TSC_RAM_CONTROLr_OFFSET,0,XLPORT_MIB_TSC_RAM_CONTROLr_SIZE,&(r._xlport_mib_tsc_ram_control))

/*******************************************************************************
 * End of 'XLPORT_MIB_TSC_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MODE_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_MODE_REGr_OFFSET 0x00020a00

#define XLPORT_MODE_REGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_MODE_REG.
 */
typedef union XLPORT_MODE_REGr_s {
    uint32_t v[1];
    uint32_t xlport_mode_reg[1];
    uint32_t _xlport_mode_reg;
} XLPORT_MODE_REGr_t;

#define XLPORT_MODE_REGr_CLR(r) (r).xlport_mode_reg[0] = 0
#define XLPORT_MODE_REGr_SET(r,d) (r).xlport_mode_reg[0] = d
#define XLPORT_MODE_REGr_GET(r) (r).xlport_mode_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_MODE_REGr_XPORT0_PHY_PORT_MODEf_GET(r) (((r).xlport_mode_reg[0]) & 0x7)
#define XLPORT_MODE_REGr_XPORT0_PHY_PORT_MODEf_SET(r,f) (r).xlport_mode_reg[0]=(((r).xlport_mode_reg[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define XLPORT_MODE_REGr_XPORT0_CORE_PORT_MODEf_GET(r) ((((r).xlport_mode_reg[0]) >> 3) & 0x7)
#define XLPORT_MODE_REGr_XPORT0_CORE_PORT_MODEf_SET(r,f) (r).xlport_mode_reg[0]=(((r).xlport_mode_reg[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define XLPORT_MODE_REGr_EGR_1588_TIMESTAMPING_MODEf_GET(r) ((((r).xlport_mode_reg[0]) >> 6) & 0x1)
#define XLPORT_MODE_REGr_EGR_1588_TIMESTAMPING_MODEf_SET(r,f) (r).xlport_mode_reg[0]=(((r).xlport_mode_reg[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define XLPORT_MODE_REGr_OSTS_TIMER_DISABLEf_GET(r) ((((r).xlport_mode_reg[0]) >> 7) & 0x1)
#define XLPORT_MODE_REGr_OSTS_TIMER_DISABLEf_SET(r,f) (r).xlport_mode_reg[0]=(((r).xlport_mode_reg[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define XLPORT_MODE_REGr_TS_TIMER_OVERRIDEf_GET(r) ((((r).xlport_mode_reg[0]) >> 8) & 0x1)
#define XLPORT_MODE_REGr_TS_TIMER_OVERRIDEf_SET(r,f) (r).xlport_mode_reg[0]=(((r).xlport_mode_reg[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define XLPORT_MODE_REGr_EGR_1588_TIMESTAMPING_CMIC_48_ENf_GET(r) ((((r).xlport_mode_reg[0]) >> 9) & 0x1)
#define XLPORT_MODE_REGr_EGR_1588_TIMESTAMPING_CMIC_48_ENf_SET(r,f) (r).xlport_mode_reg[0]=(((r).xlport_mode_reg[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*
 * These macros can be used to access XLPORT_MODE_REG.
 */
#define READ_XLPORT_MODE_REGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_MODE_REGr_OFFSET,0,XLPORT_MODE_REGr_SIZE,(r._xlport_mode_reg))
#define WRITE_XLPORT_MODE_REGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_MODE_REGr_OFFSET,0,XLPORT_MODE_REGr_SIZE,&(r._xlport_mode_reg))

/*******************************************************************************
 * End of 'XLPORT_MODE_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_PMD_PLL_CTRL_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_PMD_PLL_CTRL_CONFIGr_OFFSET 0x00022c00

#define XLPORT_PMD_PLL_CTRL_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_PMD_PLL_CTRL_CONFIG.
 */
typedef union XLPORT_PMD_PLL_CTRL_CONFIGr_s {
    uint32_t v[1];
    uint32_t xlport_pmd_pll_ctrl_config[1];
    uint32_t _xlport_pmd_pll_ctrl_config;
} XLPORT_PMD_PLL_CTRL_CONFIGr_t;

#define XLPORT_PMD_PLL_CTRL_CONFIGr_CLR(r) (r).xlport_pmd_pll_ctrl_config[0] = 0
#define XLPORT_PMD_PLL_CTRL_CONFIGr_SET(r,d) (r).xlport_pmd_pll_ctrl_config[0] = d
#define XLPORT_PMD_PLL_CTRL_CONFIGr_GET(r) (r).xlport_pmd_pll_ctrl_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_PMD_PLL_CTRL_CONFIGr_REFCLK_TERM_SELf_GET(r) (((r).xlport_pmd_pll_ctrl_config[0]) & 0x3)
#define XLPORT_PMD_PLL_CTRL_CONFIGr_REFCLK_TERM_SELf_SET(r,f) (r).xlport_pmd_pll_ctrl_config[0]=(((r).xlport_pmd_pll_ctrl_config[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define XLPORT_PMD_PLL_CTRL_CONFIGr_REFCLK_DIV2f_GET(r) ((((r).xlport_pmd_pll_ctrl_config[0]) >> 2) & 0x1)
#define XLPORT_PMD_PLL_CTRL_CONFIGr_REFCLK_DIV2f_SET(r,f) (r).xlport_pmd_pll_ctrl_config[0]=(((r).xlport_pmd_pll_ctrl_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLPORT_PMD_PLL_CTRL_CONFIGr_REFCLK_DIV4f_GET(r) ((((r).xlport_pmd_pll_ctrl_config[0]) >> 3) & 0x1)
#define XLPORT_PMD_PLL_CTRL_CONFIGr_REFCLK_DIV4f_SET(r,f) (r).xlport_pmd_pll_ctrl_config[0]=(((r).xlport_pmd_pll_ctrl_config[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*
 * These macros can be used to access XLPORT_PMD_PLL_CTRL_CONFIG.
 */
#define READ_XLPORT_PMD_PLL_CTRL_CONFIGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_PMD_PLL_CTRL_CONFIGr_OFFSET,0,XLPORT_PMD_PLL_CTRL_CONFIGr_SIZE,(r._xlport_pmd_pll_ctrl_config))
#define WRITE_XLPORT_PMD_PLL_CTRL_CONFIGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_PMD_PLL_CTRL_CONFIGr_OFFSET,0,XLPORT_PMD_PLL_CTRL_CONFIGr_SIZE,&(r._xlport_pmd_pll_ctrl_config))

/*******************************************************************************
 * End of 'XLPORT_PMD_PLL_CTRL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_PM_VERSION_ID
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_PM_VERSION_IDr_OFFSET 0x00022d00

#define XLPORT_PM_VERSION_IDr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_PM_VERSION_ID.
 */
typedef union XLPORT_PM_VERSION_IDr_s {
    uint32_t v[1];
    uint32_t xlport_pm_version_id[1];
    uint32_t _xlport_pm_version_id;
} XLPORT_PM_VERSION_IDr_t;

#define XLPORT_PM_VERSION_IDr_CLR(r) (r).xlport_pm_version_id[0] = 0
#define XLPORT_PM_VERSION_IDr_SET(r,d) (r).xlport_pm_version_id[0] = d
#define XLPORT_PM_VERSION_IDr_GET(r) (r).xlport_pm_version_id[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_PM_VERSION_IDr_PM_TYPEf_GET(r) (((r).xlport_pm_version_id[0]) & 0xf)
#define XLPORT_PM_VERSION_IDr_PM_TYPEf_SET(r,f) (r).xlport_pm_version_id[0]=(((r).xlport_pm_version_id[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define XLPORT_PM_VERSION_IDr_TECH_PROCESSf_GET(r) ((((r).xlport_pm_version_id[0]) >> 4) & 0x7)
#define XLPORT_PM_VERSION_IDr_TECH_PROCESSf_SET(r,f) (r).xlport_pm_version_id[0]=(((r).xlport_pm_version_id[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define XLPORT_PM_VERSION_IDr_REV_NUMBERf_GET(r) ((((r).xlport_pm_version_id[0]) >> 7) & 0x7)
#define XLPORT_PM_VERSION_IDr_REV_NUMBERf_SET(r,f) (r).xlport_pm_version_id[0]=(((r).xlport_pm_version_id[0] & ~((uint32_t)0x7 << 7)) | ((((uint32_t)f) & 0x7) << 7))
#define XLPORT_PM_VERSION_IDr_REV_LETTERf_GET(r) ((((r).xlport_pm_version_id[0]) >> 10) & 0x3)
#define XLPORT_PM_VERSION_IDr_REV_LETTERf_SET(r,f) (r).xlport_pm_version_id[0]=(((r).xlport_pm_version_id[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define XLPORT_PM_VERSION_IDr_RSVDf_GET(r) ((((r).xlport_pm_version_id[0]) >> 12) & 0xf)
#define XLPORT_PM_VERSION_IDr_RSVDf_SET(r,f) (r).xlport_pm_version_id[0]=(((r).xlport_pm_version_id[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))

/*
 * These macros can be used to access XLPORT_PM_VERSION_ID.
 */
#define READ_XLPORT_PM_VERSION_IDr(pa,p,r) bcmpmac_read(pa,p,XLPORT_PM_VERSION_IDr_OFFSET,0,XLPORT_PM_VERSION_IDr_SIZE,(r._xlport_pm_version_id))
#define WRITE_XLPORT_PM_VERSION_IDr(pa,p,r) bcmpmac_write(pa,p,XLPORT_PM_VERSION_IDr_OFFSET,0,XLPORT_PM_VERSION_IDr_SIZE,&(r._xlport_pm_version_id))

/*******************************************************************************
 * End of 'XLPORT_PM_VERSION_IDr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_POWER_SAVE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_POWER_SAVEr_OFFSET 0x00020d00

#define XLPORT_POWER_SAVEr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_POWER_SAVE.
 */
typedef union XLPORT_POWER_SAVEr_s {
    uint32_t v[1];
    uint32_t xlport_power_save[1];
    uint32_t _xlport_power_save;
} XLPORT_POWER_SAVEr_t;

#define XLPORT_POWER_SAVEr_CLR(r) (r).xlport_power_save[0] = 0
#define XLPORT_POWER_SAVEr_SET(r,d) (r).xlport_power_save[0] = d
#define XLPORT_POWER_SAVEr_GET(r) (r).xlport_power_save[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_POWER_SAVEr_XPORT_CORE0f_GET(r) (((r).xlport_power_save[0]) & 0x1)
#define XLPORT_POWER_SAVEr_XPORT_CORE0f_SET(r,f) (r).xlport_power_save[0]=(((r).xlport_power_save[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access XLPORT_POWER_SAVE.
 */
#define READ_XLPORT_POWER_SAVEr(pa,p,r) bcmpmac_read(pa,p,XLPORT_POWER_SAVEr_OFFSET,0,XLPORT_POWER_SAVEr_SIZE,(r._xlport_power_save))
#define WRITE_XLPORT_POWER_SAVEr(pa,p,r) bcmpmac_write(pa,p,XLPORT_POWER_SAVEr_OFFSET,0,XLPORT_POWER_SAVEr_SIZE,&(r._xlport_power_save))

/*******************************************************************************
 * End of 'XLPORT_POWER_SAVEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SBUS_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_SBUS_CONTROLr_OFFSET 0x00022b00

#define XLPORT_SBUS_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_SBUS_CONTROL.
 */
typedef union XLPORT_SBUS_CONTROLr_s {
    uint32_t v[1];
    uint32_t xlport_sbus_control[1];
    uint32_t _xlport_sbus_control;
} XLPORT_SBUS_CONTROLr_t;

#define XLPORT_SBUS_CONTROLr_CLR(r) (r).xlport_sbus_control[0] = 0
#define XLPORT_SBUS_CONTROLr_SET(r,d) (r).xlport_sbus_control[0] = d
#define XLPORT_SBUS_CONTROLr_GET(r) (r).xlport_sbus_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_SBUS_CONTROLr_SBUS_BCAST_BLOCK_IDf_GET(r) (((r).xlport_sbus_control[0]) & 0x7f)
#define XLPORT_SBUS_CONTROLr_SBUS_BCAST_BLOCK_IDf_SET(r,f) (r).xlport_sbus_control[0]=(((r).xlport_sbus_control[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))
#define XLPORT_SBUS_CONTROLr_SBUS_CHAIN_LASTf_GET(r) ((((r).xlport_sbus_control[0]) >> 7) & 0x1)
#define XLPORT_SBUS_CONTROLr_SBUS_CHAIN_LASTf_SET(r,f) (r).xlport_sbus_control[0]=(((r).xlport_sbus_control[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define XLPORT_SBUS_CONTROLr_SBUS_BCAST_BLOCK_ID_MSBf_GET(r) ((((r).xlport_sbus_control[0]) >> 8) & 0x1)
#define XLPORT_SBUS_CONTROLr_SBUS_BCAST_BLOCK_ID_MSBf_SET(r,f) (r).xlport_sbus_control[0]=(((r).xlport_sbus_control[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*
 * These macros can be used to access XLPORT_SBUS_CONTROL.
 */
#define READ_XLPORT_SBUS_CONTROLr(pa,p,r) bcmpmac_read(pa,p,XLPORT_SBUS_CONTROLr_OFFSET,0,XLPORT_SBUS_CONTROLr_SIZE,(r._xlport_sbus_control))
#define WRITE_XLPORT_SBUS_CONTROLr(pa,p,r) bcmpmac_write(pa,p,XLPORT_SBUS_CONTROLr_OFFSET,0,XLPORT_SBUS_CONTROLr_SIZE,&(r._xlport_sbus_control))

/*******************************************************************************
 * End of 'XLPORT_SBUS_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SGNDET_EARLYCRS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_SGNDET_EARLYCRSr_OFFSET 0x10020400

#define XLPORT_SGNDET_EARLYCRSr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_SGNDET_EARLYCRS.
 */
typedef union XLPORT_SGNDET_EARLYCRSr_s {
    uint32_t v[1];
    uint32_t xlport_sgndet_earlycrs[1];
    uint32_t _xlport_sgndet_earlycrs;
} XLPORT_SGNDET_EARLYCRSr_t;

#define XLPORT_SGNDET_EARLYCRSr_CLR(r) (r).xlport_sgndet_earlycrs[0] = 0
#define XLPORT_SGNDET_EARLYCRSr_SET(r,d) (r).xlport_sgndet_earlycrs[0] = d
#define XLPORT_SGNDET_EARLYCRSr_GET(r) (r).xlport_sgndet_earlycrs[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_SGNDET_EARLYCRSr_SGN_DETf_GET(r) (((r).xlport_sgndet_earlycrs[0]) & 0x1)
#define XLPORT_SGNDET_EARLYCRSr_SGN_DETf_SET(r,f) (r).xlport_sgndet_earlycrs[0]=(((r).xlport_sgndet_earlycrs[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access XLPORT_SGNDET_EARLYCRS.
 */
#define READ_XLPORT_SGNDET_EARLYCRSr(pa,p,r) bcmpmac_read(pa,p,XLPORT_SGNDET_EARLYCRSr_OFFSET,0,XLPORT_SGNDET_EARLYCRSr_SIZE,(r._xlport_sgndet_earlycrs))
#define WRITE_XLPORT_SGNDET_EARLYCRSr(pa,p,r) bcmpmac_write(pa,p,XLPORT_SGNDET_EARLYCRSr_OFFSET,0,XLPORT_SGNDET_EARLYCRSr_SIZE,&(r._xlport_sgndet_earlycrs))

/*******************************************************************************
 * End of 'XLPORT_SGNDET_EARLYCRSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SOFT_RESET
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_SOFT_RESETr_OFFSET 0x00020c00

#define XLPORT_SOFT_RESETr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_SOFT_RESET.
 */
typedef union XLPORT_SOFT_RESETr_s {
    uint32_t v[1];
    uint32_t xlport_soft_reset[1];
    uint32_t _xlport_soft_reset;
} XLPORT_SOFT_RESETr_t;

#define XLPORT_SOFT_RESETr_CLR(r) (r).xlport_soft_reset[0] = 0
#define XLPORT_SOFT_RESETr_SET(r,d) (r).xlport_soft_reset[0] = d
#define XLPORT_SOFT_RESETr_GET(r) (r).xlport_soft_reset[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_SOFT_RESETr_PORT0f_GET(r) (((r).xlport_soft_reset[0]) & 0x1)
#define XLPORT_SOFT_RESETr_PORT0f_SET(r,f) (r).xlport_soft_reset[0]=(((r).xlport_soft_reset[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_SOFT_RESETr_PORT1f_GET(r) ((((r).xlport_soft_reset[0]) >> 1) & 0x1)
#define XLPORT_SOFT_RESETr_PORT1f_SET(r,f) (r).xlport_soft_reset[0]=(((r).xlport_soft_reset[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLPORT_SOFT_RESETr_PORT2f_GET(r) ((((r).xlport_soft_reset[0]) >> 2) & 0x1)
#define XLPORT_SOFT_RESETr_PORT2f_SET(r,f) (r).xlport_soft_reset[0]=(((r).xlport_soft_reset[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLPORT_SOFT_RESETr_PORT3f_GET(r) ((((r).xlport_soft_reset[0]) >> 3) & 0x1)
#define XLPORT_SOFT_RESETr_PORT3f_SET(r,f) (r).xlport_soft_reset[0]=(((r).xlport_soft_reset[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLPORT_SOFT_RESETr_RESERVED4f_GET(r) ((((r).xlport_soft_reset[0]) >> 4) & 0x1)
#define XLPORT_SOFT_RESETr_RESERVED4f_SET(r,f) (r).xlport_soft_reset[0]=(((r).xlport_soft_reset[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))

/*
 * These macros can be used to access XLPORT_SOFT_RESET.
 */
#define READ_XLPORT_SOFT_RESETr(pa,p,r) bcmpmac_read(pa,p,XLPORT_SOFT_RESETr_OFFSET,0,XLPORT_SOFT_RESETr_SIZE,(r._xlport_soft_reset))
#define WRITE_XLPORT_SOFT_RESETr(pa,p,r) bcmpmac_write(pa,p,XLPORT_SOFT_RESETr_OFFSET,0,XLPORT_SOFT_RESETr_SIZE,&(r._xlport_soft_reset))

/*******************************************************************************
 * End of 'XLPORT_SOFT_RESETr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SPARE0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_SPARE0_REGr_OFFSET 0x10020900

#define XLPORT_SPARE0_REGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_SPARE0_REG.
 */
typedef union XLPORT_SPARE0_REGr_s {
    uint32_t v[1];
    uint32_t xlport_spare0_reg[1];
    uint32_t _xlport_spare0_reg;
} XLPORT_SPARE0_REGr_t;

#define XLPORT_SPARE0_REGr_CLR(r) (r).xlport_spare0_reg[0] = 0
#define XLPORT_SPARE0_REGr_SET(r,d) (r).xlport_spare0_reg[0] = d
#define XLPORT_SPARE0_REGr_GET(r) (r).xlport_spare0_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_SPARE0_REGr_RSVDf_GET(r) ((r).xlport_spare0_reg[0])
#define XLPORT_SPARE0_REGr_RSVDf_SET(r,f) (r).xlport_spare0_reg[0]=((uint32_t)f)

/*
 * These macros can be used to access XLPORT_SPARE0_REG.
 */
#define READ_XLPORT_SPARE0_REGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_SPARE0_REGr_OFFSET,0,XLPORT_SPARE0_REGr_SIZE,(r._xlport_spare0_reg))
#define WRITE_XLPORT_SPARE0_REGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_SPARE0_REGr_OFFSET,0,XLPORT_SPARE0_REGr_SIZE,&(r._xlport_spare0_reg))

/*******************************************************************************
 * End of 'XLPORT_SPARE0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SW_FLOW_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_SW_FLOW_CONTROLr_OFFSET 0x10020600

#define XLPORT_SW_FLOW_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_SW_FLOW_CONTROL.
 */
typedef union XLPORT_SW_FLOW_CONTROLr_s {
    uint32_t v[1];
    uint32_t xlport_sw_flow_control[1];
    uint32_t _xlport_sw_flow_control;
} XLPORT_SW_FLOW_CONTROLr_t;

#define XLPORT_SW_FLOW_CONTROLr_CLR(r) (r).xlport_sw_flow_control[0] = 0
#define XLPORT_SW_FLOW_CONTROLr_SET(r,d) (r).xlport_sw_flow_control[0] = d
#define XLPORT_SW_FLOW_CONTROLr_GET(r) (r).xlport_sw_flow_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_SW_FLOW_CONTROLr_FC_PAUSEf_GET(r) (((r).xlport_sw_flow_control[0]) & 0x1)
#define XLPORT_SW_FLOW_CONTROLr_FC_PAUSEf_SET(r,f) (r).xlport_sw_flow_control[0]=(((r).xlport_sw_flow_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_SW_FLOW_CONTROLr_FC_ENf_GET(r) ((((r).xlport_sw_flow_control[0]) >> 1) & 0x1)
#define XLPORT_SW_FLOW_CONTROLr_FC_ENf_SET(r,f) (r).xlport_sw_flow_control[0]=(((r).xlport_sw_flow_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access XLPORT_SW_FLOW_CONTROL.
 */
#define READ_XLPORT_SW_FLOW_CONTROLr(pa,p,r) bcmpmac_read(pa,p,XLPORT_SW_FLOW_CONTROLr_OFFSET,0,XLPORT_SW_FLOW_CONTROLr_SIZE,(r._xlport_sw_flow_control))
#define WRITE_XLPORT_SW_FLOW_CONTROLr(pa,p,r) bcmpmac_write(pa,p,XLPORT_SW_FLOW_CONTROLr_OFFSET,0,XLPORT_SW_FLOW_CONTROLr_SIZE,&(r._xlport_sw_flow_control))

/*******************************************************************************
 * End of 'XLPORT_SW_FLOW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_TSC_PLL_LOCK_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_TSC_PLL_LOCK_STATUSr_OFFSET 0x00021300

#define XLPORT_TSC_PLL_LOCK_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_TSC_PLL_LOCK_STATUS.
 */
typedef union XLPORT_TSC_PLL_LOCK_STATUSr_s {
    uint32_t v[1];
    uint32_t xlport_tsc_pll_lock_status[1];
    uint32_t _xlport_tsc_pll_lock_status;
} XLPORT_TSC_PLL_LOCK_STATUSr_t;

#define XLPORT_TSC_PLL_LOCK_STATUSr_CLR(r) (r).xlport_tsc_pll_lock_status[0] = 0
#define XLPORT_TSC_PLL_LOCK_STATUSr_SET(r,d) (r).xlport_tsc_pll_lock_status[0] = d
#define XLPORT_TSC_PLL_LOCK_STATUSr_GET(r) (r).xlport_tsc_pll_lock_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_TSC_PLL_LOCK_STATUSr_CURRENTf_GET(r) (((r).xlport_tsc_pll_lock_status[0]) & 0x1)
#define XLPORT_TSC_PLL_LOCK_STATUSr_CURRENTf_SET(r,f) (r).xlport_tsc_pll_lock_status[0]=(((r).xlport_tsc_pll_lock_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_TSC_PLL_LOCK_STATUSr_LOSTf_GET(r) ((((r).xlport_tsc_pll_lock_status[0]) >> 1) & 0x1)
#define XLPORT_TSC_PLL_LOCK_STATUSr_LOSTf_SET(r,f) (r).xlport_tsc_pll_lock_status[0]=(((r).xlport_tsc_pll_lock_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access XLPORT_TSC_PLL_LOCK_STATUS.
 */
#define READ_XLPORT_TSC_PLL_LOCK_STATUSr(pa,p,r) bcmpmac_read(pa,p,XLPORT_TSC_PLL_LOCK_STATUSr_OFFSET,0,XLPORT_TSC_PLL_LOCK_STATUSr_SIZE,(r._xlport_tsc_pll_lock_status))
#define WRITE_XLPORT_TSC_PLL_LOCK_STATUSr(pa,p,r) bcmpmac_write(pa,p,XLPORT_TSC_PLL_LOCK_STATUSr_OFFSET,0,XLPORT_TSC_PLL_LOCK_STATUSr_SIZE,&(r._xlport_tsc_pll_lock_status))

/*******************************************************************************
 * End of 'XLPORT_TSC_PLL_LOCK_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_TS_TIMER_31_0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_TS_TIMER_31_0_REGr_OFFSET 0x00022600

#define XLPORT_TS_TIMER_31_0_REGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_TS_TIMER_31_0_REG.
 */
typedef union XLPORT_TS_TIMER_31_0_REGr_s {
    uint32_t v[1];
    uint32_t xlport_ts_timer_31_0_reg[1];
    uint32_t _xlport_ts_timer_31_0_reg;
} XLPORT_TS_TIMER_31_0_REGr_t;

#define XLPORT_TS_TIMER_31_0_REGr_CLR(r) (r).xlport_ts_timer_31_0_reg[0] = 0
#define XLPORT_TS_TIMER_31_0_REGr_SET(r,d) (r).xlport_ts_timer_31_0_reg[0] = d
#define XLPORT_TS_TIMER_31_0_REGr_GET(r) (r).xlport_ts_timer_31_0_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_TS_TIMER_31_0_REGr_TS_TIMER_31_0_VALUEf_GET(r) ((r).xlport_ts_timer_31_0_reg[0])
#define XLPORT_TS_TIMER_31_0_REGr_TS_TIMER_31_0_VALUEf_SET(r,f) (r).xlport_ts_timer_31_0_reg[0]=((uint32_t)f)

/*
 * These macros can be used to access XLPORT_TS_TIMER_31_0_REG.
 */
#define READ_XLPORT_TS_TIMER_31_0_REGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_TS_TIMER_31_0_REGr_OFFSET,0,XLPORT_TS_TIMER_31_0_REGr_SIZE,(r._xlport_ts_timer_31_0_reg))
#define WRITE_XLPORT_TS_TIMER_31_0_REGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_TS_TIMER_31_0_REGr_OFFSET,0,XLPORT_TS_TIMER_31_0_REGr_SIZE,&(r._xlport_ts_timer_31_0_reg))

/*******************************************************************************
 * End of 'XLPORT_TS_TIMER_31_0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_TS_TIMER_47_32_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_TS_TIMER_47_32_REGr_OFFSET 0x00022500

#define XLPORT_TS_TIMER_47_32_REGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_TS_TIMER_47_32_REG.
 */
typedef union XLPORT_TS_TIMER_47_32_REGr_s {
    uint32_t v[1];
    uint32_t xlport_ts_timer_47_32_reg[1];
    uint32_t _xlport_ts_timer_47_32_reg;
} XLPORT_TS_TIMER_47_32_REGr_t;

#define XLPORT_TS_TIMER_47_32_REGr_CLR(r) (r).xlport_ts_timer_47_32_reg[0] = 0
#define XLPORT_TS_TIMER_47_32_REGr_SET(r,d) (r).xlport_ts_timer_47_32_reg[0] = d
#define XLPORT_TS_TIMER_47_32_REGr_GET(r) (r).xlport_ts_timer_47_32_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_TS_TIMER_47_32_REGr_TS_TIMER_47_32_VALUEf_GET(r) (((r).xlport_ts_timer_47_32_reg[0]) & 0xffff)
#define XLPORT_TS_TIMER_47_32_REGr_TS_TIMER_47_32_VALUEf_SET(r,f) (r).xlport_ts_timer_47_32_reg[0]=(((r).xlport_ts_timer_47_32_reg[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access XLPORT_TS_TIMER_47_32_REG.
 */
#define READ_XLPORT_TS_TIMER_47_32_REGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_TS_TIMER_47_32_REGr_OFFSET,0,XLPORT_TS_TIMER_47_32_REGr_SIZE,(r._xlport_ts_timer_47_32_reg))
#define WRITE_XLPORT_TS_TIMER_47_32_REGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_TS_TIMER_47_32_REGr_OFFSET,0,XLPORT_TS_TIMER_47_32_REGr_SIZE,&(r._xlport_ts_timer_47_32_reg))

/*******************************************************************************
 * End of 'XLPORT_TS_TIMER_47_32_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_WC_UCMEM_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_WC_UCMEM_CTRLr_OFFSET 0x00021900

#define XLPORT_WC_UCMEM_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_WC_UCMEM_CTRL.
 */
typedef union XLPORT_WC_UCMEM_CTRLr_s {
    uint32_t v[1];
    uint32_t xlport_wc_ucmem_ctrl[1];
    uint32_t _xlport_wc_ucmem_ctrl;
} XLPORT_WC_UCMEM_CTRLr_t;

#define XLPORT_WC_UCMEM_CTRLr_CLR(r) (r).xlport_wc_ucmem_ctrl[0] = 0
#define XLPORT_WC_UCMEM_CTRLr_SET(r,d) (r).xlport_wc_ucmem_ctrl[0] = d
#define XLPORT_WC_UCMEM_CTRLr_GET(r) (r).xlport_wc_ucmem_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_WC_UCMEM_CTRLr_ACCESS_MODEf_GET(r) (((r).xlport_wc_ucmem_ctrl[0]) & 0x1)
#define XLPORT_WC_UCMEM_CTRLr_ACCESS_MODEf_SET(r,f) (r).xlport_wc_ucmem_ctrl[0]=(((r).xlport_wc_ucmem_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_WC_UCMEM_CTRLr_RSVD3_1f_GET(r) ((((r).xlport_wc_ucmem_ctrl[0]) >> 1) & 0x7)
#define XLPORT_WC_UCMEM_CTRLr_RSVD3_1f_SET(r,f) (r).xlport_wc_ucmem_ctrl[0]=(((r).xlport_wc_ucmem_ctrl[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))

/*
 * These macros can be used to access XLPORT_WC_UCMEM_CTRL.
 */
#define READ_XLPORT_WC_UCMEM_CTRLr(pa,p,r) bcmpmac_read(pa,p,XLPORT_WC_UCMEM_CTRLr_OFFSET,0,XLPORT_WC_UCMEM_CTRLr_SIZE,(r._xlport_wc_ucmem_ctrl))
#define WRITE_XLPORT_WC_UCMEM_CTRLr(pa,p,r) bcmpmac_write(pa,p,XLPORT_WC_UCMEM_CTRLr_OFFSET,0,XLPORT_WC_UCMEM_CTRLr_SIZE,&(r._xlport_wc_ucmem_ctrl))

/*******************************************************************************
 * End of 'XLPORT_WC_UCMEM_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  XLPORT_WC_UCMEM_DATA
 * BLOCKS:   XLPORT
 * SIZE:     128
 */
#define XLPORT_WC_UCMEM_DATAm_OFFSET 0x20000000

#define XLPORT_WC_UCMEM_DATAm_MIN 0
#define XLPORT_WC_UCMEM_DATAm_MAX 2047
#define XLPORT_WC_UCMEM_DATAm_CMAX(u) 2047
#define XLPORT_WC_UCMEM_DATAm_SIZE 16

/*
 * This structure should be used to declare and program XLPORT_WC_UCMEM_DATA.
 */
typedef union XLPORT_WC_UCMEM_DATAm_s {
    uint32_t v[4];
    uint32_t xlport_wc_ucmem_data[4];
    uint32_t _xlport_wc_ucmem_data;
} XLPORT_WC_UCMEM_DATAm_t;

#define XLPORT_WC_UCMEM_DATAm_CLR(r) sal_memset(&((r).xlport_wc_ucmem_data[0]), 0, sizeof(XLPORT_WC_UCMEM_DATAm_t))
#define XLPORT_WC_UCMEM_DATAm_SET(r,i,d) (r).xlport_wc_ucmem_data[i] = d
#define XLPORT_WC_UCMEM_DATAm_GET(r,i) (r).xlport_wc_ucmem_data[i]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_WC_UCMEM_DATAm_UC_DATAf_GET(r,a) bcmpmac_field_get((r).xlport_wc_ucmem_data,0,127,a)
#define XLPORT_WC_UCMEM_DATAm_UC_DATAf_SET(r,a) bcmpmac_field_set((r).xlport_wc_ucmem_data,0,127,a)

/*
 * These macros can be used to access XLPORT_WC_UCMEM_DATA.
 */
#define READ_XLPORT_WC_UCMEM_DATAm(pa,p,i,m) bcmpmac_read(pa,p,XLPORT_WC_UCMEM_DATAm_OFFSET,i,XLPORT_WC_UCMEM_DATAm_SIZE,(m._xlport_wc_ucmem_data))
#define WRITE_XLPORT_WC_UCMEM_DATAm(pa,p,i,m) bcmpmac_write(pa,p,XLPORT_WC_UCMEM_DATAm_OFFSET,i,XLPORT_WC_UCMEM_DATAm_SIZE,&(m._xlport_wc_ucmem_data))

/*******************************************************************************
 * End of 'XLPORT_WC_UCMEM_DATAm'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_CTRL_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_XGXS0_CTRL_REGr_OFFSET 0x00021400

#define XLPORT_XGXS0_CTRL_REGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_XGXS0_CTRL_REG.
 */
typedef union XLPORT_XGXS0_CTRL_REGr_s {
    uint32_t v[1];
    uint32_t xlport_xgxs0_ctrl_reg[1];
    uint32_t _xlport_xgxs0_ctrl_reg;
} XLPORT_XGXS0_CTRL_REGr_t;

#define XLPORT_XGXS0_CTRL_REGr_CLR(r) (r).xlport_xgxs0_ctrl_reg[0] = 0
#define XLPORT_XGXS0_CTRL_REGr_SET(r,d) (r).xlport_xgxs0_ctrl_reg[0] = d
#define XLPORT_XGXS0_CTRL_REGr_GET(r) (r).xlport_xgxs0_ctrl_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_XGXS0_CTRL_REGr_RSTB_HWf_GET(r) (((r).xlport_xgxs0_ctrl_reg[0]) & 0x1)
#define XLPORT_XGXS0_CTRL_REGr_RSTB_HWf_SET(r,f) (r).xlport_xgxs0_ctrl_reg[0]=(((r).xlport_xgxs0_ctrl_reg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_XGXS0_CTRL_REGr_REFOUT_ENf_GET(r) ((((r).xlport_xgxs0_ctrl_reg[0]) >> 1) & 0x1)
#define XLPORT_XGXS0_CTRL_REGr_REFOUT_ENf_SET(r,f) (r).xlport_xgxs0_ctrl_reg[0]=(((r).xlport_xgxs0_ctrl_reg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLPORT_XGXS0_CTRL_REGr_REFIN_ENf_GET(r) ((((r).xlport_xgxs0_ctrl_reg[0]) >> 2) & 0x1)
#define XLPORT_XGXS0_CTRL_REGr_REFIN_ENf_SET(r,f) (r).xlport_xgxs0_ctrl_reg[0]=(((r).xlport_xgxs0_ctrl_reg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define XLPORT_XGXS0_CTRL_REGr_PWRDWNf_GET(r) ((((r).xlport_xgxs0_ctrl_reg[0]) >> 3) & 0x1)
#define XLPORT_XGXS0_CTRL_REGr_PWRDWNf_SET(r,f) (r).xlport_xgxs0_ctrl_reg[0]=(((r).xlport_xgxs0_ctrl_reg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define XLPORT_XGXS0_CTRL_REGr_IDDQf_GET(r) ((((r).xlport_xgxs0_ctrl_reg[0]) >> 4) & 0x1)
#define XLPORT_XGXS0_CTRL_REGr_IDDQf_SET(r,f) (r).xlport_xgxs0_ctrl_reg[0]=(((r).xlport_xgxs0_ctrl_reg[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define XLPORT_XGXS0_CTRL_REGr_PWRDWN_CMLf_GET(r) ((((r).xlport_xgxs0_ctrl_reg[0]) >> 5) & 0x1)
#define XLPORT_XGXS0_CTRL_REGr_PWRDWN_CMLf_SET(r,f) (r).xlport_xgxs0_ctrl_reg[0]=(((r).xlport_xgxs0_ctrl_reg[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define XLPORT_XGXS0_CTRL_REGr_PWRDWN_CML_LCf_GET(r) ((((r).xlport_xgxs0_ctrl_reg[0]) >> 6) & 0x1)
#define XLPORT_XGXS0_CTRL_REGr_PWRDWN_CML_LCf_SET(r,f) (r).xlport_xgxs0_ctrl_reg[0]=(((r).xlport_xgxs0_ctrl_reg[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define XLPORT_XGXS0_CTRL_REGr_REFCMOSf_GET(r) ((((r).xlport_xgxs0_ctrl_reg[0]) >> 7) & 0x1)
#define XLPORT_XGXS0_CTRL_REGr_REFCMOSf_SET(r,f) (r).xlport_xgxs0_ctrl_reg[0]=(((r).xlport_xgxs0_ctrl_reg[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define XLPORT_XGXS0_CTRL_REGr_REFSELf_GET(r) ((((r).xlport_xgxs0_ctrl_reg[0]) >> 8) & 0x7)
#define XLPORT_XGXS0_CTRL_REGr_REFSELf_SET(r,f) (r).xlport_xgxs0_ctrl_reg[0]=(((r).xlport_xgxs0_ctrl_reg[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))

/*
 * These macros can be used to access XLPORT_XGXS0_CTRL_REG.
 */
#define READ_XLPORT_XGXS0_CTRL_REGr(pa,p,r) bcmpmac_read(pa,p,XLPORT_XGXS0_CTRL_REGr_OFFSET,0,XLPORT_XGXS0_CTRL_REGr_SIZE,(r._xlport_xgxs0_ctrl_reg))
#define WRITE_XLPORT_XGXS0_CTRL_REGr(pa,p,r) bcmpmac_write(pa,p,XLPORT_XGXS0_CTRL_REGr_OFFSET,0,XLPORT_XGXS0_CTRL_REGr_SIZE,&(r._xlport_xgxs0_ctrl_reg))

/*******************************************************************************
 * End of 'XLPORT_XGXS0_CTRL_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_LN0_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_XGXS0_LN0_STATUS0_REGr_OFFSET 0x00021500

#define XLPORT_XGXS0_LN0_STATUS0_REGr_SIZE 4

/* XLPORT_XGXS0_LN0_STATUS0_REGr is element of XLPORT_XGXS0_STATUS0_REG */

/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_LN1_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_XGXS0_LN1_STATUS0_REGr_OFFSET 0x00021600

#define XLPORT_XGXS0_LN1_STATUS0_REGr_SIZE 4

/* XLPORT_XGXS0_LN1_STATUS0_REGr is element of XLPORT_XGXS0_STATUS0_REG */

/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_LN2_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_XGXS0_LN2_STATUS0_REGr_OFFSET 0x00021700

#define XLPORT_XGXS0_LN2_STATUS0_REGr_SIZE 4

/* XLPORT_XGXS0_LN2_STATUS0_REGr is element of XLPORT_XGXS0_STATUS0_REG */

/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_LN3_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_XGXS0_LN3_STATUS0_REGr_OFFSET 0x00021800

#define XLPORT_XGXS0_LN3_STATUS0_REGr_SIZE 4

/* XLPORT_XGXS0_LN3_STATUS0_REGr is element of XLPORT_XGXS0_STATUS0_REG */

/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_XGXS0_STATUS0_REGr_OFFSET 0x00021500

#define XLPORT_XGXS0_STATUS0_REGr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_XGXS0_STATUS0_REG.
 */
typedef union XLPORT_XGXS0_STATUS0_REGr_s {
    uint32_t v[1];
    uint32_t xlport_xgxs0_status0_reg[1];
    uint32_t _xlport_xgxs0_status0_reg;
} XLPORT_XGXS0_STATUS0_REGr_t;

#define XLPORT_XGXS0_STATUS0_REGr_CLR(r) (r).xlport_xgxs0_status0_reg[0] = 0
#define XLPORT_XGXS0_STATUS0_REGr_SET(r,d) (r).xlport_xgxs0_status0_reg[0] = d
#define XLPORT_XGXS0_STATUS0_REGr_GET(r) (r).xlport_xgxs0_status0_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_XGXS0_STATUS0_REGr_LINK_STATUSf_GET(r) (((r).xlport_xgxs0_status0_reg[0]) & 0x1)
#define XLPORT_XGXS0_STATUS0_REGr_LINK_STATUSf_SET(r,f) (r).xlport_xgxs0_status0_reg[0]=(((r).xlport_xgxs0_status0_reg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define XLPORT_XGXS0_STATUS0_REGr_SIG_DETf_GET(r) ((((r).xlport_xgxs0_status0_reg[0]) >> 1) & 0x1)
#define XLPORT_XGXS0_STATUS0_REGr_SIG_DETf_SET(r,f) (r).xlport_xgxs0_status0_reg[0]=(((r).xlport_xgxs0_status0_reg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define XLPORT_XGXS0_STATUS0_REGr_PMD_LOCKf_GET(r) ((((r).xlport_xgxs0_status0_reg[0]) >> 2) & 0x1)
#define XLPORT_XGXS0_STATUS0_REGr_PMD_LOCKf_SET(r,f) (r).xlport_xgxs0_status0_reg[0]=(((r).xlport_xgxs0_status0_reg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*
 * These macros can be used to access XLPORT_XGXS0_STATUS0_REG.
 */
#define READ_XLPORT_XGXS0_STATUS0_REGr(pa,p,i,r) bcmpmac_read(pa,p,XLPORT_XGXS0_STATUS0_REGr_OFFSET,i,XLPORT_XGXS0_STATUS0_REGr_SIZE,(r._xlport_xgxs0_status0_reg))
#define WRITE_XLPORT_XGXS0_STATUS0_REGr(pa,p,i,r) bcmpmac_write(pa,p,XLPORT_XGXS0_STATUS0_REGr_OFFSET,i,XLPORT_XGXS0_STATUS0_REGr_SIZE,&(r._xlport_xgxs0_status0_reg))

/*******************************************************************************
 * End of 'XLPORT_XGXS0_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS_COUNTER_MODE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
#define XLPORT_XGXS_COUNTER_MODEr_OFFSET 0x00021100

#define XLPORT_XGXS_COUNTER_MODEr_SIZE 4

/*
 * This structure should be used to declare and program XLPORT_XGXS_COUNTER_MODE.
 */
typedef union XLPORT_XGXS_COUNTER_MODEr_s {
    uint32_t v[1];
    uint32_t xlport_xgxs_counter_mode[1];
    uint32_t _xlport_xgxs_counter_mode;
} XLPORT_XGXS_COUNTER_MODEr_t;

#define XLPORT_XGXS_COUNTER_MODEr_CLR(r) (r).xlport_xgxs_counter_mode[0] = 0
#define XLPORT_XGXS_COUNTER_MODEr_SET(r,d) (r).xlport_xgxs_counter_mode[0] = d
#define XLPORT_XGXS_COUNTER_MODEr_GET(r) (r).xlport_xgxs_counter_mode[0]

/*
 * These macros can be used to access individual fields.
 */
#define XLPORT_XGXS_COUNTER_MODEr_CNT_MODEf_GET(r) (((r).xlport_xgxs_counter_mode[0]) & 0x1)
#define XLPORT_XGXS_COUNTER_MODEr_CNT_MODEf_SET(r,f) (r).xlport_xgxs_counter_mode[0]=(((r).xlport_xgxs_counter_mode[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access XLPORT_XGXS_COUNTER_MODE.
 */
#define READ_XLPORT_XGXS_COUNTER_MODEr(pa,p,r) bcmpmac_read(pa,p,XLPORT_XGXS_COUNTER_MODEr_OFFSET,0,XLPORT_XGXS_COUNTER_MODEr_SIZE,(r._xlport_xgxs_counter_mode))
#define WRITE_XLPORT_XGXS_COUNTER_MODEr(pa,p,r) bcmpmac_write(pa,p,XLPORT_XGXS_COUNTER_MODEr_OFFSET,0,XLPORT_XGXS_COUNTER_MODEr_SIZE,&(r._xlport_xgxs_counter_mode))

/*******************************************************************************
 * End of 'XLPORT_XGXS_COUNTER_MODEr'
 */




#endif /* BCM56996_A0_XLPORT_DEFS_H */
