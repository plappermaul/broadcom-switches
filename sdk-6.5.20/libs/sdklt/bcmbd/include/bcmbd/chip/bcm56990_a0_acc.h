#ifndef BCM56990_A0_ACC_H
#define BCM56990_A0_ACC_H
/*******************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 * Tool: INTERNAL/regs/xgs/generate-chip.pl
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *
 * Definition file for the BCM56990_A0.
 * This file provides all basic definitions required to program the BCM56990_A0.
 */

#include <sal/sal_libc.h>
#include <bcmdrd/bcmdrd_dev.h>
#include <bcmbd/bcmbd_cmicx.h>
#include <bcmbd/bcmbd_cmicx_mem.h>
#include <bcmbd/bcmbd_cmicx_reg.h>
#include <bcmdrd/chip/bcm56990_a0_enum.h>
#include <bcmdrd/chip/bcm56990_a0_defs.h>
#include <bcmbd/chip/bcm56990_a0_cmic_acc.h>

/*******************************************************************************
 *
 *                    CHIP DEFINITIONS BEGIN HERE
 */



/*******************************************************************************
 * REGISTER:  ADAPT_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ADAPT_RAM_CONTROL.
 */
#define READ_ADAPT_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ADAPT_RAM_CONTROLr_BLKACC,1,n,0,ADAPT_RAM_CONTROLr_OFFSET,0,(r._adapt_ram_control),2)
#define WRITE_ADAPT_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ADAPT_RAM_CONTROLr_BLKACC,1,n,0,ADAPT_RAM_CONTROLr_OFFSET,0,&(r._adapt_ram_control),2)
#define WRITE_ADAPT_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ADAPT_RAM_CONTROLr_BLKACC,1,-1,0,ADAPT_RAM_CONTROLr_OFFSET,0,&(r._adapt_ram_control),2)

/*******************************************************************************
 * End of 'ADAPT_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ADAPT_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ADAPT_SER_CONTROL.
 */
#define READ_ADAPT_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ADAPT_SER_CONTROLr_BLKACC,1,ADAPT_SER_CONTROLr_OFFSET,0,(r._adapt_ser_control), 1)
#define WRITE_ADAPT_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ADAPT_SER_CONTROLr_BLKACC,1,ADAPT_SER_CONTROLr_OFFSET,0,&(r._adapt_ser_control), 1)

/*******************************************************************************
 * End of 'ADAPT_SER_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  ALLOWED_PORT_BITMAP_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access ALLOWED_PORT_BITMAP_PROFILE.
 */
#define READ_ALLOWED_PORT_BITMAP_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,ALLOWED_PORT_BITMAP_PROFILEm_BLKACC,1,ALLOWED_PORT_BITMAP_PROFILEm_OFFSET,i,(m._allowed_port_bitmap_profile),9)
#define WRITE_ALLOWED_PORT_BITMAP_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,ALLOWED_PORT_BITMAP_PROFILEm_BLKACC,1,ALLOWED_PORT_BITMAP_PROFILEm_OFFSET,i,&(m._allowed_port_bitmap_profile),9)

/*******************************************************************************
 * End of 'ALLOWED_PORT_BITMAP_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  ALPM_FLEX_CTR_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ALPM_FLEX_CTR_CONTROL.
 */
#define READ_ALPM_FLEX_CTR_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ALPM_FLEX_CTR_CONTROLr_BLKACC,1,ALPM_FLEX_CTR_CONTROLr_OFFSET,0,(r._alpm_flex_ctr_control), 2)
#define WRITE_ALPM_FLEX_CTR_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ALPM_FLEX_CTR_CONTROLr_BLKACC,1,ALPM_FLEX_CTR_CONTROLr_OFFSET,0,&(r._alpm_flex_ctr_control), 2)

/*******************************************************************************
 * End of 'ALPM_FLEX_CTR_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  ALT_TTL_FN
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access ALT_TTL_FN.
 */
#define READ_ALT_TTL_FNm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ALT_TTL_FNm_BLKACC,1,n,0,ALT_TTL_FNm_OFFSET,i,(m._alt_ttl_fn),1)
#define WRITE_ALT_TTL_FNm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ALT_TTL_FNm_BLKACC,1,n,0,ALT_TTL_FNm_OFFSET,i,&(m._alt_ttl_fn),1)
#define WRITE_ALT_TTL_FNm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ALT_TTL_FNm_BLKACC,1,-1,0,ALT_TTL_FNm_OFFSET,i,&(m._alt_ttl_fn),1)

/*******************************************************************************
 * End of 'ALT_TTL_FNm'
 */




/*******************************************************************************
 * MEMORY:  AM_TABLE
 * BLOCKS:   CDPORT
 * SIZE:     81
 */
/*
 * These macros can be used to access AM_TABLE.
 */
#define READ_AM_TABLEm(u,i,m,p) bcmbd_cmicx_mem_blocks_read(u,AM_TABLEm_BLKACC,p,AM_TABLEm_OFFSET,i,(m._am_table),3)
#define WRITE_AM_TABLEm(u,i,m,p) bcmbd_cmicx_mem_blocks_write(u,AM_TABLEm_BLKACC,p,AM_TABLEm_OFFSET,i,&(m._am_table),3)

/*******************************************************************************
 * End of 'AM_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  AVS_CEN_ROSC_ALL_IDL_HI_LOW_ROSCS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_CEN_ROSC_ALL_IDL_HI_LOW_ROSCS.
 */
#define READ_AVS_CEN_ROSC_ALL_IDL_HI_LOW_ROSCSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_CEN_ROSC_ALL_IDL_HI_LOW_ROSCSr_BLKACC,87,AVS_CEN_ROSC_ALL_IDL_HI_LOW_ROSCSr_OFFSET,0,(r._avs_cen_rosc_all_idl_hi_low_roscs), 1)
#define WRITE_AVS_CEN_ROSC_ALL_IDL_HI_LOW_ROSCSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_CEN_ROSC_ALL_IDL_HI_LOW_ROSCSr_BLKACC,87,AVS_CEN_ROSC_ALL_IDL_HI_LOW_ROSCSr_OFFSET,0,&(r._avs_cen_rosc_all_idl_hi_low_roscs), 1)

/*******************************************************************************
 * End of 'AVS_CEN_ROSC_ALL_IDL_HI_LOW_ROSCSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_CEN_ROSC_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_CEN_ROSC_STATUS.
 */
#define READ_AVS_CEN_ROSC_STATUSr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_CEN_ROSC_STATUSr_BLKACC,87,AVS_CEN_ROSC_STATUSr_OFFSET,(i)*4,(r._avs_cen_rosc_status), 1)
#define WRITE_AVS_CEN_ROSC_STATUSr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_CEN_ROSC_STATUSr_BLKACC,87,AVS_CEN_ROSC_STATUSr_OFFSET,(i)*4,&(r._avs_cen_rosc_status), 1)

/*******************************************************************************
 * End of 'AVS_CEN_ROSC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_CLEAR_PMB_ERROR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_CLEAR_PMB_ERROR_STATUS.
 */
#define READ_AVS_CLEAR_PMB_ERROR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_CLEAR_PMB_ERROR_STATUSr_BLKACC,87,AVS_CLEAR_PMB_ERROR_STATUSr_OFFSET,0,(r._avs_clear_pmb_error_status), 1)
#define WRITE_AVS_CLEAR_PMB_ERROR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_CLEAR_PMB_ERROR_STATUSr_BLKACC,87,AVS_CLEAR_PMB_ERROR_STATUSr_OFFSET,0,&(r._avs_clear_pmb_error_status), 1)

/*******************************************************************************
 * End of 'AVS_CLEAR_PMB_ERROR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_AC_DCN_CEN_ROSC_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_AC_DCN_CEN_ROSC_0.
 */
#define READ_AVS_HW_MNTR_AC_DCN_CEN_ROSC_0r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_AC_DCN_CEN_ROSC_0r_BLKACC,87,AVS_HW_MNTR_AC_DCN_CEN_ROSC_0r_OFFSET,0,(r._avs_hw_mntr_ac_dcn_cen_rosc_0), 1)
#define WRITE_AVS_HW_MNTR_AC_DCN_CEN_ROSC_0r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_AC_DCN_CEN_ROSC_0r_BLKACC,87,AVS_HW_MNTR_AC_DCN_CEN_ROSC_0r_OFFSET,0,&(r._avs_hw_mntr_ac_dcn_cen_rosc_0), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_AC_DCN_CEN_ROSC_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_AC_PATGEN_HI_LO_DUR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_AC_PATGEN_HI_LO_DUR.
 */
#define READ_AVS_HW_MNTR_AC_PATGEN_HI_LO_DURr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_AC_PATGEN_HI_LO_DURr_BLKACC,87,AVS_HW_MNTR_AC_PATGEN_HI_LO_DURr_OFFSET,0,(r._avs_hw_mntr_ac_patgen_hi_lo_dur), 1)
#define WRITE_AVS_HW_MNTR_AC_PATGEN_HI_LO_DURr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_AC_PATGEN_HI_LO_DURr_BLKACC,87,AVS_HW_MNTR_AC_PATGEN_HI_LO_DURr_OFFSET,0,&(r._avs_hw_mntr_ac_patgen_hi_lo_dur), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_AC_PATGEN_HI_LO_DURr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_ADC_SETTLING_TIME
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_ADC_SETTLING_TIME.
 */
#define READ_AVS_HW_MNTR_ADC_SETTLING_TIMEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_ADC_SETTLING_TIMEr_BLKACC,87,AVS_HW_MNTR_ADC_SETTLING_TIMEr_OFFSET,0,(r._avs_hw_mntr_adc_settling_time), 1)
#define WRITE_AVS_HW_MNTR_ADC_SETTLING_TIMEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_ADC_SETTLING_TIMEr_BLKACC,87,AVS_HW_MNTR_ADC_SETTLING_TIMEr_OFFSET,0,&(r._avs_hw_mntr_adc_settling_time), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_ADC_SETTLING_TIMEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_AVS_INTR_FLAGS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_AVS_INTR_FLAGS.
 */
#define READ_AVS_HW_MNTR_AVS_INTR_FLAGSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_AVS_INTR_FLAGSr_BLKACC,87,AVS_HW_MNTR_AVS_INTR_FLAGSr_OFFSET,0,(r._avs_hw_mntr_avs_intr_flags), 1)
#define WRITE_AVS_HW_MNTR_AVS_INTR_FLAGSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_AVS_INTR_FLAGSr_BLKACC,87,AVS_HW_MNTR_AVS_INTR_FLAGSr_OFFSET,0,&(r._avs_hw_mntr_avs_intr_flags), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_AVS_INTR_FLAGSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_AVS_INTR_FLAGS_CLEAR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_AVS_INTR_FLAGS_CLEAR.
 */
#define READ_AVS_HW_MNTR_AVS_INTR_FLAGS_CLEARr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_AVS_INTR_FLAGS_CLEARr_BLKACC,87,AVS_HW_MNTR_AVS_INTR_FLAGS_CLEARr_OFFSET,0,(r._avs_hw_mntr_avs_intr_flags_clear), 1)
#define WRITE_AVS_HW_MNTR_AVS_INTR_FLAGS_CLEARr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_AVS_INTR_FLAGS_CLEARr_BLKACC,87,AVS_HW_MNTR_AVS_INTR_FLAGS_CLEARr_OFFSET,0,&(r._avs_hw_mntr_avs_intr_flags_clear), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_AVS_INTR_FLAGS_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_AVS_REGISTERS_LOCKS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_AVS_REGISTERS_LOCKS.
 */
#define READ_AVS_HW_MNTR_AVS_REGISTERS_LOCKSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_AVS_REGISTERS_LOCKSr_BLKACC,87,AVS_HW_MNTR_AVS_REGISTERS_LOCKSr_OFFSET,0,(r._avs_hw_mntr_avs_registers_locks), 1)
#define WRITE_AVS_HW_MNTR_AVS_REGISTERS_LOCKSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_AVS_REGISTERS_LOCKSr_BLKACC,87,AVS_HW_MNTR_AVS_REGISTERS_LOCKSr_OFFSET,0,&(r._avs_hw_mntr_avs_registers_locks), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_AVS_REGISTERS_LOCKSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_AVS_SPARE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_AVS_SPARE.
 */
#define READ_AVS_HW_MNTR_AVS_SPAREr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_AVS_SPAREr_BLKACC,87,AVS_HW_MNTR_AVS_SPAREr_OFFSET,(i)*4,(r._avs_hw_mntr_avs_spare), 1)
#define WRITE_AVS_HW_MNTR_AVS_SPAREr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_AVS_SPAREr_BLKACC,87,AVS_HW_MNTR_AVS_SPAREr_OFFSET,(i)*4,&(r._avs_hw_mntr_avs_spare), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_AVS_SPAREr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_AVS_SPARE_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_AVS_SPARE_0.
 */
#define READ_AVS_HW_MNTR_AVS_SPARE_0r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_AVS_SPARE_0r_BLKACC,87,AVS_HW_MNTR_AVS_SPARE_0r_OFFSET,0,(r._avs_hw_mntr_avs_spare_0), 1)
#define WRITE_AVS_HW_MNTR_AVS_SPARE_0r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_AVS_SPARE_0r_BLKACC,87,AVS_HW_MNTR_AVS_SPARE_0r_OFFSET,0,&(r._avs_hw_mntr_avs_spare_0), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_AVS_SPARE_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_AVS_SPARE_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_AVS_SPARE_1.
 */
#define READ_AVS_HW_MNTR_AVS_SPARE_1r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_AVS_SPARE_1r_BLKACC,87,AVS_HW_MNTR_AVS_SPARE_1r_OFFSET,0,(r._avs_hw_mntr_avs_spare_1), 1)
#define WRITE_AVS_HW_MNTR_AVS_SPARE_1r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_AVS_SPARE_1r_BLKACC,87,AVS_HW_MNTR_AVS_SPARE_1r_OFFSET,0,&(r._avs_hw_mntr_avs_spare_1), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_AVS_SPARE_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0.
 */
#define READ_AVS_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0r_BLKACC,87,AVS_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0r_OFFSET,0,(r._avs_hw_mntr_enable_default_cen_rosc_0), 1)
#define WRITE_AVS_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0r_BLKACC,87,AVS_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0r_OFFSET,0,&(r._avs_hw_mntr_enable_default_cen_rosc_0), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_ENABLE_DEFAULT_PVT_MNTR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_ENABLE_DEFAULT_PVT_MNTR.
 */
#define READ_AVS_HW_MNTR_ENABLE_DEFAULT_PVT_MNTRr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_ENABLE_DEFAULT_PVT_MNTRr_BLKACC,87,AVS_HW_MNTR_ENABLE_DEFAULT_PVT_MNTRr_OFFSET,0,(r._avs_hw_mntr_enable_default_pvt_mntr), 1)
#define WRITE_AVS_HW_MNTR_ENABLE_DEFAULT_PVT_MNTRr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_ENABLE_DEFAULT_PVT_MNTRr_BLKACC,87,AVS_HW_MNTR_ENABLE_DEFAULT_PVT_MNTRr_OFFSET,0,&(r._avs_hw_mntr_enable_default_pvt_mntr), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_ENABLE_DEFAULT_PVT_MNTRr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0.
 */
#define READ_AVS_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0r_BLKACC,87,AVS_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0r_OFFSET,0,(r._avs_hw_mntr_idle_state_0_cen_rosc_0), 1)
#define WRITE_AVS_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0r_BLKACC,87,AVS_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0r_OFFSET,0,&(r._avs_hw_mntr_idle_state_0_cen_rosc_0), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_INTR_POW_WDOG_EN
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_INTR_POW_WDOG_EN.
 */
#define READ_AVS_HW_MNTR_INTR_POW_WDOG_ENr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_INTR_POW_WDOG_ENr_BLKACC,87,AVS_HW_MNTR_INTR_POW_WDOG_ENr_OFFSET,0,(r._avs_hw_mntr_intr_pow_wdog_en), 1)
#define WRITE_AVS_HW_MNTR_INTR_POW_WDOG_ENr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_INTR_POW_WDOG_ENr_BLKACC,87,AVS_HW_MNTR_INTR_POW_WDOG_ENr_OFFSET,0,&(r._avs_hw_mntr_intr_pow_wdog_en), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_INTR_POW_WDOG_ENr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_INTR_POW_WDOG_EN_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_INTR_POW_WDOG_EN_1.
 */
#define READ_AVS_HW_MNTR_INTR_POW_WDOG_EN_1r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_INTR_POW_WDOG_EN_1r_BLKACC,87,AVS_HW_MNTR_INTR_POW_WDOG_EN_1r_OFFSET,0,(r._avs_hw_mntr_intr_pow_wdog_en_1), 1)
#define WRITE_AVS_HW_MNTR_INTR_POW_WDOG_EN_1r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_INTR_POW_WDOG_EN_1r_BLKACC,87,AVS_HW_MNTR_INTR_POW_WDOG_EN_1r_OFFSET,0,&(r._avs_hw_mntr_intr_pow_wdog_en_1), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_INTR_POW_WDOG_EN_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_INTR_POW_WDOG_EN_2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_INTR_POW_WDOG_EN_2.
 */
#define READ_AVS_HW_MNTR_INTR_POW_WDOG_EN_2r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_INTR_POW_WDOG_EN_2r_BLKACC,87,AVS_HW_MNTR_INTR_POW_WDOG_EN_2r_OFFSET,0,(r._avs_hw_mntr_intr_pow_wdog_en_2), 1)
#define WRITE_AVS_HW_MNTR_INTR_POW_WDOG_EN_2r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_INTR_POW_WDOG_EN_2r_BLKACC,87,AVS_HW_MNTR_INTR_POW_WDOG_EN_2r_OFFSET,0,&(r._avs_hw_mntr_intr_pow_wdog_en_2), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_INTR_POW_WDOG_EN_2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_INTR_POW_WDOG_EN_3
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_INTR_POW_WDOG_EN_3.
 */
#define READ_AVS_HW_MNTR_INTR_POW_WDOG_EN_3r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_INTR_POW_WDOG_EN_3r_BLKACC,87,AVS_HW_MNTR_INTR_POW_WDOG_EN_3r_OFFSET,0,(r._avs_hw_mntr_intr_pow_wdog_en_3), 1)
#define WRITE_AVS_HW_MNTR_INTR_POW_WDOG_EN_3r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_INTR_POW_WDOG_EN_3r_BLKACC,87,AVS_HW_MNTR_INTR_POW_WDOG_EN_3r_OFFSET,0,&(r._avs_hw_mntr_intr_pow_wdog_en_3), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_INTR_POW_WDOG_EN_3r'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_INTR_SW_MEASUREMENT_DONE_EN
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_INTR_SW_MEASUREMENT_DONE_EN.
 */
#define READ_AVS_HW_MNTR_INTR_SW_MEASUREMENT_DONE_ENr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_INTR_SW_MEASUREMENT_DONE_ENr_BLKACC,87,AVS_HW_MNTR_INTR_SW_MEASUREMENT_DONE_ENr_OFFSET,0,(r._avs_hw_mntr_intr_sw_measurement_done_en), 1)
#define WRITE_AVS_HW_MNTR_INTR_SW_MEASUREMENT_DONE_ENr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_INTR_SW_MEASUREMENT_DONE_ENr_BLKACC,87,AVS_HW_MNTR_INTR_SW_MEASUREMENT_DONE_ENr_OFFSET,0,&(r._avs_hw_mntr_intr_sw_measurement_done_en), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_INTR_SW_MEASUREMENT_DONE_ENr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_LAST_MEASURED_SENSOR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_LAST_MEASURED_SENSOR.
 */
#define READ_AVS_HW_MNTR_LAST_MEASURED_SENSORr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_LAST_MEASURED_SENSORr_BLKACC,87,AVS_HW_MNTR_LAST_MEASURED_SENSORr_OFFSET,0,(r._avs_hw_mntr_last_measured_sensor), 1)
#define WRITE_AVS_HW_MNTR_LAST_MEASURED_SENSORr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_LAST_MEASURED_SENSORr_BLKACC,87,AVS_HW_MNTR_LAST_MEASURED_SENSORr_OFFSET,0,&(r._avs_hw_mntr_last_measured_sensor), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_LAST_MEASURED_SENSORr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0.
 */
#define READ_AVS_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0r_BLKACC,87,AVS_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0r_OFFSET,0,(r._avs_hw_mntr_measurements_init_cen_rosc_0), 1)
#define WRITE_AVS_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0r_BLKACC,87,AVS_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0r_OFFSET,0,&(r._avs_hw_mntr_measurements_init_cen_rosc_0), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_MEASUREMENTS_INIT_POW_WDOG
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_MEASUREMENTS_INIT_POW_WDOG.
 */
#define READ_AVS_HW_MNTR_MEASUREMENTS_INIT_POW_WDOGr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_MEASUREMENTS_INIT_POW_WDOGr_BLKACC,87,AVS_HW_MNTR_MEASUREMENTS_INIT_POW_WDOGr_OFFSET,0,(r._avs_hw_mntr_measurements_init_pow_wdog), 1)
#define WRITE_AVS_HW_MNTR_MEASUREMENTS_INIT_POW_WDOGr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_MEASUREMENTS_INIT_POW_WDOGr_BLKACC,87,AVS_HW_MNTR_MEASUREMENTS_INIT_POW_WDOGr_OFFSET,0,&(r._avs_hw_mntr_measurements_init_pow_wdog), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_MEASUREMENTS_INIT_POW_WDOGr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTR.
 */
#define READ_AVS_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTRr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTRr_BLKACC,87,AVS_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTRr_OFFSET,0,(r._avs_hw_mntr_measurements_init_pvt_mntr), 1)
#define WRITE_AVS_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTRr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTRr_BLKACC,87,AVS_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTRr_OFFSET,0,&(r._avs_hw_mntr_measurements_init_pvt_mntr), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTRr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_ROSC_COUNTING_MODE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_ROSC_COUNTING_MODE.
 */
#define READ_AVS_HW_MNTR_ROSC_COUNTING_MODEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_ROSC_COUNTING_MODEr_BLKACC,87,AVS_HW_MNTR_ROSC_COUNTING_MODEr_OFFSET,0,(r._avs_hw_mntr_rosc_counting_mode), 1)
#define WRITE_AVS_HW_MNTR_ROSC_COUNTING_MODEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_ROSC_COUNTING_MODEr_BLKACC,87,AVS_HW_MNTR_ROSC_COUNTING_MODEr_OFFSET,0,&(r._avs_hw_mntr_rosc_counting_mode), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_ROSC_COUNTING_MODEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROL.
 */
#define READ_AVS_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROLr_BLKACC,87,AVS_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROLr_OFFSET,0,(r._avs_hw_mntr_rosc_measurement_time_control), 1)
#define WRITE_AVS_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROLr_BLKACC,87,AVS_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROLr_OFFSET,0,&(r._avs_hw_mntr_rosc_measurement_time_control), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_SEQUENCER_INIT
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_SEQUENCER_INIT.
 */
#define READ_AVS_HW_MNTR_SEQUENCER_INITr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_SEQUENCER_INITr_BLKACC,87,AVS_HW_MNTR_SEQUENCER_INITr_OFFSET,0,(r._avs_hw_mntr_sequencer_init), 1)
#define WRITE_AVS_HW_MNTR_SEQUENCER_INITr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_SEQUENCER_INITr_BLKACC,87,AVS_HW_MNTR_SEQUENCER_INITr_OFFSET,0,&(r._avs_hw_mntr_sequencer_init), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_SEQUENCER_INITr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0.
 */
#define READ_AVS_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0r_BLKACC,87,AVS_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0r_OFFSET,0,(r._avs_hw_mntr_sequencer_mask_cen_rosc_0), 1)
#define WRITE_AVS_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0r_BLKACC,87,AVS_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0r_OFFSET,0,&(r._avs_hw_mntr_sequencer_mask_cen_rosc_0), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_SEQUENCER_MASK_PVT_MNTR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_SEQUENCER_MASK_PVT_MNTR.
 */
#define READ_AVS_HW_MNTR_SEQUENCER_MASK_PVT_MNTRr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_SEQUENCER_MASK_PVT_MNTRr_BLKACC,87,AVS_HW_MNTR_SEQUENCER_MASK_PVT_MNTRr_OFFSET,0,(r._avs_hw_mntr_sequencer_mask_pvt_mntr), 1)
#define WRITE_AVS_HW_MNTR_SEQUENCER_MASK_PVT_MNTRr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_SEQUENCER_MASK_PVT_MNTRr_BLKACC,87,AVS_HW_MNTR_SEQUENCER_MASK_PVT_MNTRr_OFFSET,0,&(r._avs_hw_mntr_sequencer_mask_pvt_mntr), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_SEQUENCER_MASK_PVT_MNTRr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_SW_CONTROLS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_SW_CONTROLS.
 */
#define READ_AVS_HW_MNTR_SW_CONTROLSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_SW_CONTROLSr_BLKACC,87,AVS_HW_MNTR_SW_CONTROLSr_OFFSET,0,(r._avs_hw_mntr_sw_controls), 1)
#define WRITE_AVS_HW_MNTR_SW_CONTROLSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_SW_CONTROLSr_BLKACC,87,AVS_HW_MNTR_SW_CONTROLSr_OFFSET,0,&(r._avs_hw_mntr_sw_controls), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_SW_CONTROLSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_SW_MEASUREMENT_UNIT_BUSY
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_SW_MEASUREMENT_UNIT_BUSY.
 */
#define READ_AVS_HW_MNTR_SW_MEASUREMENT_UNIT_BUSYr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_SW_MEASUREMENT_UNIT_BUSYr_BLKACC,87,AVS_HW_MNTR_SW_MEASUREMENT_UNIT_BUSYr_OFFSET,0,(r._avs_hw_mntr_sw_measurement_unit_busy), 1)
#define WRITE_AVS_HW_MNTR_SW_MEASUREMENT_UNIT_BUSYr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_SW_MEASUREMENT_UNIT_BUSYr_BLKACC,87,AVS_HW_MNTR_SW_MEASUREMENT_UNIT_BUSYr_OFFSET,0,&(r._avs_hw_mntr_sw_measurement_unit_busy), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_SW_MEASUREMENT_UNIT_BUSYr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_TEMPERATURE_RESET_ENABLE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_TEMPERATURE_RESET_ENABLE.
 */
#define READ_AVS_HW_MNTR_TEMPERATURE_RESET_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_TEMPERATURE_RESET_ENABLEr_BLKACC,87,AVS_HW_MNTR_TEMPERATURE_RESET_ENABLEr_OFFSET,0,(r._avs_hw_mntr_temperature_reset_enable), 1)
#define WRITE_AVS_HW_MNTR_TEMPERATURE_RESET_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_TEMPERATURE_RESET_ENABLEr_BLKACC,87,AVS_HW_MNTR_TEMPERATURE_RESET_ENABLEr_OFFSET,0,&(r._avs_hw_mntr_temperature_reset_enable), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_TEMPERATURE_RESET_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_HW_MNTR_TEMPERATURE_THRESHOLD
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_HW_MNTR_TEMPERATURE_THRESHOLD.
 */
#define READ_AVS_HW_MNTR_TEMPERATURE_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_HW_MNTR_TEMPERATURE_THRESHOLDr_BLKACC,87,AVS_HW_MNTR_TEMPERATURE_THRESHOLDr_OFFSET,0,(r._avs_hw_mntr_temperature_threshold), 1)
#define WRITE_AVS_HW_MNTR_TEMPERATURE_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_HW_MNTR_TEMPERATURE_THRESHOLDr_BLKACC,87,AVS_HW_MNTR_TEMPERATURE_THRESHOLDr_OFFSET,0,&(r._avs_hw_mntr_temperature_threshold), 1)

/*******************************************************************************
 * End of 'AVS_HW_MNTR_TEMPERATURE_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_MISC_CONTROL_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_MISC_CONTROL_0.
 */
#define READ_AVS_MISC_CONTROL_0r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_MISC_CONTROL_0r_BLKACC,87,AVS_MISC_CONTROL_0r_OFFSET,0,(r._avs_misc_control_0), 1)
#define WRITE_AVS_MISC_CONTROL_0r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_MISC_CONTROL_0r_BLKACC,87,AVS_MISC_CONTROL_0r_OFFSET,0,&(r._avs_misc_control_0), 1)

/*******************************************************************************
 * End of 'AVS_MISC_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_MISC_CONTROL_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_MISC_CONTROL_1.
 */
#define READ_AVS_MISC_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_MISC_CONTROL_1r_BLKACC,87,AVS_MISC_CONTROL_1r_OFFSET,0,(r._avs_misc_control_1), 1)
#define WRITE_AVS_MISC_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_MISC_CONTROL_1r_BLKACC,87,AVS_MISC_CONTROL_1r_OFFSET,0,&(r._avs_misc_control_1), 1)

/*******************************************************************************
 * End of 'AVS_MISC_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_MISC_CONTROL_2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_MISC_CONTROL_2.
 */
#define READ_AVS_MISC_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_MISC_CONTROL_2r_BLKACC,87,AVS_MISC_CONTROL_2r_OFFSET,0,(r._avs_misc_control_2), 1)
#define WRITE_AVS_MISC_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_MISC_CONTROL_2r_BLKACC,87,AVS_MISC_CONTROL_2r_OFFSET,0,&(r._avs_misc_control_2), 1)

/*******************************************************************************
 * End of 'AVS_MISC_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_MISC_CONTROL_3
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_MISC_CONTROL_3.
 */
#define READ_AVS_MISC_CONTROL_3r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_MISC_CONTROL_3r_BLKACC,87,AVS_MISC_CONTROL_3r_OFFSET,0,(r._avs_misc_control_3), 1)
#define WRITE_AVS_MISC_CONTROL_3r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_MISC_CONTROL_3r_BLKACC,87,AVS_MISC_CONTROL_3r_OFFSET,0,&(r._avs_misc_control_3), 1)

/*******************************************************************************
 * End of 'AVS_MISC_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  AVS_MISC_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_MISC_STATUS.
 */
#define READ_AVS_MISC_STATUSr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_MISC_STATUSr_BLKACC,87,AVS_MISC_STATUSr_OFFSET,i,(r._avs_misc_status), 1)
#define WRITE_AVS_MISC_STATUSr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_MISC_STATUSr_BLKACC,87,AVS_MISC_STATUSr_OFFSET,i,&(r._avs_misc_status), 1)

/*******************************************************************************
 * End of 'AVS_MISC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_MISC_STATUS_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_MISC_STATUS_0.
 */
#define READ_AVS_MISC_STATUS_0r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_MISC_STATUS_0r_BLKACC,87,AVS_MISC_STATUS_0r_OFFSET,0,(r._avs_misc_status_0), 1)
#define WRITE_AVS_MISC_STATUS_0r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_MISC_STATUS_0r_BLKACC,87,AVS_MISC_STATUS_0r_OFFSET,0,&(r._avs_misc_status_0), 1)

/*******************************************************************************
 * End of 'AVS_MISC_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_MISC_STATUS_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_MISC_STATUS_1.
 */
#define READ_AVS_MISC_STATUS_1r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_MISC_STATUS_1r_BLKACC,87,AVS_MISC_STATUS_1r_OFFSET,0,(r._avs_misc_status_1), 1)
#define WRITE_AVS_MISC_STATUS_1r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_MISC_STATUS_1r_BLKACC,87,AVS_MISC_STATUS_1r_OFFSET,0,&(r._avs_misc_status_1), 1)

/*******************************************************************************
 * End of 'AVS_MISC_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_ERROR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_ERROR_STATUS.
 */
#define READ_AVS_PMB_ERROR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_ERROR_STATUSr_BLKACC,87,AVS_PMB_ERROR_STATUSr_OFFSET,0,(r._avs_pmb_error_status), 1)
#define WRITE_AVS_PMB_ERROR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_ERROR_STATUSr_BLKACC,87,AVS_PMB_ERROR_STATUSr_OFFSET,0,&(r._avs_pmb_error_status), 1)

/*******************************************************************************
 * End of 'AVS_PMB_ERROR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_PWD_ACC_CONTROL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_PWD_ACC_CONTROL.
 */
#define READ_AVS_PMB_SLAVE_AVS_PWD_ACC_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_PWD_ACC_CONTROLr_BLKACC,87,AVS_PMB_SLAVE_AVS_PWD_ACC_CONTROLr_OFFSET,i,(r._avs_pmb_slave_avs_pwd_acc_control), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_PWD_ACC_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_PWD_ACC_CONTROLr_BLKACC,87,AVS_PMB_SLAVE_AVS_PWD_ACC_CONTROLr_OFFSET,i,&(r._avs_pmb_slave_avs_pwd_acc_control), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_PWD_ACC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_PWD_CONTROL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_PWD_CONTROL.
 */
#define READ_AVS_PMB_SLAVE_AVS_PWD_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_PWD_CONTROLr_BLKACC,87,AVS_PMB_SLAVE_AVS_PWD_CONTROLr_OFFSET,i,(r._avs_pmb_slave_avs_pwd_control), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_PWD_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_PWD_CONTROLr_BLKACC,87,AVS_PMB_SLAVE_AVS_PWD_CONTROLr_OFFSET,i,&(r._avs_pmb_slave_avs_pwd_control), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_PWD_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_ROSC_LVT11_THRESHOLD
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_ROSC_LVT11_THRESHOLD.
 */
#define READ_AVS_PMB_SLAVE_AVS_ROSC_LVT11_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_ROSC_LVT11_THRESHOLDr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_LVT11_THRESHOLDr_OFFSET,i,(r._avs_pmb_slave_avs_rosc_lvt11_threshold), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_ROSC_LVT11_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_ROSC_LVT11_THRESHOLDr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_LVT11_THRESHOLDr_OFFSET,i,&(r._avs_pmb_slave_avs_rosc_lvt11_threshold), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_ROSC_LVT11_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_CONTROL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_CONTROL.
 */
#define READ_AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_CONTROLr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_CONTROLr_OFFSET,i,(r._avs_pmb_slave_avs_rosc_lvt8_lvt11_control), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_CONTROLr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_CONTROLr_OFFSET,i,&(r._avs_pmb_slave_avs_rosc_lvt8_lvt11_control), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_COUNT
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_COUNT.
 */
#define READ_AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_COUNTr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_COUNTr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_COUNTr_OFFSET,i,(r._avs_pmb_slave_avs_rosc_lvt8_lvt11_count), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_COUNTr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_COUNTr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_COUNTr_OFFSET,i,&(r._avs_pmb_slave_avs_rosc_lvt8_lvt11_count), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_ROSC_LVT8_LVT11_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_ROSC_LVT8_THRESHOLD
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_ROSC_LVT8_THRESHOLD.
 */
#define READ_AVS_PMB_SLAVE_AVS_ROSC_LVT8_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_ROSC_LVT8_THRESHOLDr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_LVT8_THRESHOLDr_OFFSET,i,(r._avs_pmb_slave_avs_rosc_lvt8_threshold), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_ROSC_LVT8_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_ROSC_LVT8_THRESHOLDr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_LVT8_THRESHOLDr_OFFSET,i,&(r._avs_pmb_slave_avs_rosc_lvt8_threshold), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_ROSC_LVT8_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_ROSC_MISC_CONTROL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_ROSC_MISC_CONTROL.
 */
#define READ_AVS_PMB_SLAVE_AVS_ROSC_MISC_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_ROSC_MISC_CONTROLr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_MISC_CONTROLr_OFFSET,i,(r._avs_pmb_slave_avs_rosc_misc_control), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_ROSC_MISC_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_ROSC_MISC_CONTROLr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_MISC_CONTROLr_OFFSET,i,&(r._avs_pmb_slave_avs_rosc_misc_control), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_ROSC_MISC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_ROSC_SVT11_THRESHOLD
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_ROSC_SVT11_THRESHOLD.
 */
#define READ_AVS_PMB_SLAVE_AVS_ROSC_SVT11_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_ROSC_SVT11_THRESHOLDr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_SVT11_THRESHOLDr_OFFSET,i,(r._avs_pmb_slave_avs_rosc_svt11_threshold), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_ROSC_SVT11_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_ROSC_SVT11_THRESHOLDr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_SVT11_THRESHOLDr_OFFSET,i,&(r._avs_pmb_slave_avs_rosc_svt11_threshold), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_ROSC_SVT11_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_CONTROL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_CONTROL.
 */
#define READ_AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_CONTROLr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_CONTROLr_OFFSET,i,(r._avs_pmb_slave_avs_rosc_svt8_svt11_control), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_CONTROLr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_CONTROLr_OFFSET,i,&(r._avs_pmb_slave_avs_rosc_svt8_svt11_control), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_COUNT
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_COUNT.
 */
#define READ_AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_COUNTr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_COUNTr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_COUNTr_OFFSET,i,(r._avs_pmb_slave_avs_rosc_svt8_svt11_count), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_COUNTr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_COUNTr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_COUNTr_OFFSET,i,&(r._avs_pmb_slave_avs_rosc_svt8_svt11_count), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_ROSC_SVT8_SVT11_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_ROSC_SVT8_THRESHOLD
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_ROSC_SVT8_THRESHOLD.
 */
#define READ_AVS_PMB_SLAVE_AVS_ROSC_SVT8_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_ROSC_SVT8_THRESHOLDr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_SVT8_THRESHOLDr_OFFSET,i,(r._avs_pmb_slave_avs_rosc_svt8_threshold), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_ROSC_SVT8_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_ROSC_SVT8_THRESHOLDr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_SVT8_THRESHOLDr_OFFSET,i,&(r._avs_pmb_slave_avs_rosc_svt8_threshold), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_ROSC_SVT8_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_ROSC_ULVT11_THRESHOLD
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_ROSC_ULVT11_THRESHOLD.
 */
#define READ_AVS_PMB_SLAVE_AVS_ROSC_ULVT11_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_ROSC_ULVT11_THRESHOLDr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_ULVT11_THRESHOLDr_OFFSET,i,(r._avs_pmb_slave_avs_rosc_ulvt11_threshold), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_ROSC_ULVT11_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_ROSC_ULVT11_THRESHOLDr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_ULVT11_THRESHOLDr_OFFSET,i,&(r._avs_pmb_slave_avs_rosc_ulvt11_threshold), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_ROSC_ULVT11_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_ROSC_ULVT8_THRESHOLD
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_ROSC_ULVT8_THRESHOLD.
 */
#define READ_AVS_PMB_SLAVE_AVS_ROSC_ULVT8_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_ROSC_ULVT8_THRESHOLDr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_ULVT8_THRESHOLDr_OFFSET,i,(r._avs_pmb_slave_avs_rosc_ulvt8_threshold), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_ROSC_ULVT8_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_ROSC_ULVT8_THRESHOLDr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_ULVT8_THRESHOLDr_OFFSET,i,&(r._avs_pmb_slave_avs_rosc_ulvt8_threshold), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_ROSC_ULVT8_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_CONTROL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_CONTROL.
 */
#define READ_AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_CONTROLr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_CONTROLr_OFFSET,i,(r._avs_pmb_slave_avs_rosc_ulvt8_ulvt11_control), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_CONTROLr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_CONTROLr_OFFSET,i,&(r._avs_pmb_slave_avs_rosc_ulvt8_ulvt11_control), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_COUNT
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_COUNT.
 */
#define READ_AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_COUNTr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_COUNTr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_COUNTr_OFFSET,i,(r._avs_pmb_slave_avs_rosc_ulvt8_ulvt11_count), 1)
#define WRITE_AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_COUNTr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_COUNTr_BLKACC,87,AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_COUNTr_OFFSET,i,&(r._avs_pmb_slave_avs_rosc_ulvt8_ulvt11_count), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_AVS_ROSC_ULVT8_ULVT11_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL.
 */
#define READ_AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROLr_BLKACC,87,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROLr_OFFSET,i,(r._avs_pmb_slave_device_pwrdwn_control), 1)
#define WRITE_AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROLr_BLKACC,87,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROLr_OFFSET,i,&(r._avs_pmb_slave_device_pwrdwn_control), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_0.
 */
#define READ_AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_0r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_0r_BLKACC,87,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_0r_OFFSET,0,(r._avs_pmb_slave_device_pwrdwn_control_0), 1)
#define WRITE_AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_0r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_0r_BLKACC,87,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_0r_OFFSET,0,&(r._avs_pmb_slave_device_pwrdwn_control_0), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_1.
 */
#define READ_AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_1r_BLKACC,87,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_1r_OFFSET,0,(r._avs_pmb_slave_device_pwrdwn_control_1), 1)
#define WRITE_AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_1r_BLKACC,87,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_1r_OFFSET,0,&(r._avs_pmb_slave_device_pwrdwn_control_1), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_2.
 */
#define READ_AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_2r_BLKACC,87,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_2r_OFFSET,0,(r._avs_pmb_slave_device_pwrdwn_control_2), 1)
#define WRITE_AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_2r_BLKACC,87,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_2r_OFFSET,0,&(r._avs_pmb_slave_device_pwrdwn_control_2), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_3
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_3.
 */
#define READ_AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_3r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_3r_BLKACC,87,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_3r_OFFSET,0,(r._avs_pmb_slave_device_pwrdwn_control_3), 1)
#define WRITE_AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_3r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_3r_BLKACC,87,AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_3r_OFFSET,0,&(r._avs_pmb_slave_device_pwrdwn_control_3), 1)

/*******************************************************************************
 * End of 'AVS_PMB_SLAVE_DEVICE_PWRDWN_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  AVS_PMB_TIMEOUT
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PMB_TIMEOUT.
 */
#define READ_AVS_PMB_TIMEOUTr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PMB_TIMEOUTr_BLKACC,87,AVS_PMB_TIMEOUTr_OFFSET,0,(r._avs_pmb_timeout), 1)
#define WRITE_AVS_PMB_TIMEOUTr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PMB_TIMEOUTr_BLKACC,87,AVS_PMB_TIMEOUTr_OFFSET,0,&(r._avs_pmb_timeout), 1)

/*******************************************************************************
 * End of 'AVS_PMB_TIMEOUTr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_LOCAL_DIODE_SENSOR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_LOCAL_DIODE_SENSOR_STATUS.
 */
#define READ_AVS_PVT_LOCAL_DIODE_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_LOCAL_DIODE_SENSOR_STATUSr_BLKACC,87,AVS_PVT_LOCAL_DIODE_SENSOR_STATUSr_OFFSET,0,(r._avs_pvt_local_diode_sensor_status), 1)
#define WRITE_AVS_PVT_LOCAL_DIODE_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_LOCAL_DIODE_SENSOR_STATUSr_BLKACC,87,AVS_PVT_LOCAL_DIODE_SENSOR_STATUSr_OFFSET,0,&(r._avs_pvt_local_diode_sensor_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_LOCAL_DIODE_SENSOR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_MAIN_THERMAL_SENSOR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_MAIN_THERMAL_SENSOR_STATUS.
 */
#define READ_AVS_PVT_MAIN_THERMAL_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_MAIN_THERMAL_SENSOR_STATUSr_BLKACC,87,AVS_PVT_MAIN_THERMAL_SENSOR_STATUSr_OFFSET,0,(r._avs_pvt_main_thermal_sensor_status), 1)
#define WRITE_AVS_PVT_MAIN_THERMAL_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_MAIN_THERMAL_SENSOR_STATUSr_BLKACC,87,AVS_PVT_MAIN_THERMAL_SENSOR_STATUSr_OFFSET,0,&(r._avs_pvt_main_thermal_sensor_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_MAIN_THERMAL_SENSOR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_MNTR_CONFIG_DAC_CODE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_MNTR_CONFIG_DAC_CODE.
 */
#define READ_AVS_PVT_MNTR_CONFIG_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_MNTR_CONFIG_DAC_CODEr_BLKACC,87,AVS_PVT_MNTR_CONFIG_DAC_CODEr_OFFSET,0,(r._avs_pvt_mntr_config_dac_code), 1)
#define WRITE_AVS_PVT_MNTR_CONFIG_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_MNTR_CONFIG_DAC_CODEr_BLKACC,87,AVS_PVT_MNTR_CONFIG_DAC_CODEr_OFFSET,0,&(r._avs_pvt_mntr_config_dac_code), 1)

/*******************************************************************************
 * End of 'AVS_PVT_MNTR_CONFIG_DAC_CODEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLE.
 */
#define READ_AVS_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLEr_BLKACC,87,AVS_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLEr_OFFSET,0,(r._avs_pvt_mntr_config_dac_code_programming_enable), 1)
#define WRITE_AVS_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLEr_BLKACC,87,AVS_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLEr_OFFSET,0,&(r._avs_pvt_mntr_config_dac_code_programming_enable), 1)

/*******************************************************************************
 * End of 'AVS_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_MNTR_CONFIG_MAX_DAC_CODE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_MNTR_CONFIG_MAX_DAC_CODE.
 */
#define READ_AVS_PVT_MNTR_CONFIG_MAX_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_MNTR_CONFIG_MAX_DAC_CODEr_BLKACC,87,AVS_PVT_MNTR_CONFIG_MAX_DAC_CODEr_OFFSET,0,(r._avs_pvt_mntr_config_max_dac_code), 1)
#define WRITE_AVS_PVT_MNTR_CONFIG_MAX_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_MNTR_CONFIG_MAX_DAC_CODEr_BLKACC,87,AVS_PVT_MNTR_CONFIG_MAX_DAC_CODEr_OFFSET,0,&(r._avs_pvt_mntr_config_max_dac_code), 1)

/*******************************************************************************
 * End of 'AVS_PVT_MNTR_CONFIG_MAX_DAC_CODEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_MNTR_CONFIG_MIN_DAC_CODE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_MNTR_CONFIG_MIN_DAC_CODE.
 */
#define READ_AVS_PVT_MNTR_CONFIG_MIN_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_MNTR_CONFIG_MIN_DAC_CODEr_BLKACC,87,AVS_PVT_MNTR_CONFIG_MIN_DAC_CODEr_OFFSET,0,(r._avs_pvt_mntr_config_min_dac_code), 1)
#define WRITE_AVS_PVT_MNTR_CONFIG_MIN_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_MNTR_CONFIG_MIN_DAC_CODEr_BLKACC,87,AVS_PVT_MNTR_CONFIG_MIN_DAC_CODEr_OFFSET,0,&(r._avs_pvt_mntr_config_min_dac_code), 1)

/*******************************************************************************
 * End of 'AVS_PVT_MNTR_CONFIG_MIN_DAC_CODEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_MNTR_CONFIG_PVT_MNTR_CTRL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_MNTR_CONFIG_PVT_MNTR_CTRL.
 */
#define READ_AVS_PVT_MNTR_CONFIG_PVT_MNTR_CTRLr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_MNTR_CONFIG_PVT_MNTR_CTRLr_BLKACC,87,AVS_PVT_MNTR_CONFIG_PVT_MNTR_CTRLr_OFFSET,0,(r._avs_pvt_mntr_config_pvt_mntr_ctrl), 1)
#define WRITE_AVS_PVT_MNTR_CONFIG_PVT_MNTR_CTRLr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_MNTR_CONFIG_PVT_MNTR_CTRLr_BLKACC,87,AVS_PVT_MNTR_CONFIG_PVT_MNTR_CTRLr_OFFSET,0,&(r._avs_pvt_mntr_config_pvt_mntr_ctrl), 1)

/*******************************************************************************
 * End of 'AVS_PVT_MNTR_CONFIG_PVT_MNTR_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETB
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETB.
 */
#define READ_AVS_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETBr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETBr_BLKACC,87,AVS_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETBr_OFFSET,0,(r._avs_pvt_mntr_config_pvt_mntr_sw_resetb), 1)
#define WRITE_AVS_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETBr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETBr_BLKACC,87,AVS_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETBr_OFFSET,0,&(r._avs_pvt_mntr_config_pvt_mntr_sw_resetb), 1)

/*******************************************************************************
 * End of 'AVS_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETBr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLE.
 */
#define READ_AVS_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLEr_BLKACC,87,AVS_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLEr_OFFSET,0,(r._avs_pvt_mntr_config_pvt_mntr_tp_mode_enable), 1)
#define WRITE_AVS_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLEr_BLKACC,87,AVS_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLEr_OFFSET,0,&(r._avs_pvt_mntr_config_pvt_mntr_tp_mode_enable), 1)

/*******************************************************************************
 * End of 'AVS_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_PAD_ADC_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_PAD_ADC_STATUS.
 */
#define READ_AVS_PVT_PAD_ADC_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_PAD_ADC_STATUSr_BLKACC,87,AVS_PVT_PAD_ADC_STATUSr_OFFSET,0,(r._avs_pvt_pad_adc_status), 1)
#define WRITE_AVS_PVT_PAD_ADC_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_PAD_ADC_STATUSr_BLKACC,87,AVS_PVT_PAD_ADC_STATUSr_OFFSET,0,&(r._avs_pvt_pad_adc_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_PAD_ADC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_PAD_DAC_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_PAD_DAC_STATUS.
 */
#define READ_AVS_PVT_PAD_DAC_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_PAD_DAC_STATUSr_BLKACC,87,AVS_PVT_PAD_DAC_STATUSr_OFFSET,0,(r._avs_pvt_pad_dac_status), 1)
#define WRITE_AVS_PVT_PAD_DAC_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_PAD_DAC_STATUSr_BLKACC,87,AVS_PVT_PAD_DAC_STATUSr_OFFSET,0,&(r._avs_pvt_pad_dac_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_PAD_DAC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_REMOTE_0_SENSOR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_REMOTE_0_SENSOR_STATUS.
 */
#define READ_AVS_PVT_REMOTE_0_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_REMOTE_0_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_0_SENSOR_STATUSr_OFFSET,0,(r._avs_pvt_remote_0_sensor_status), 1)
#define WRITE_AVS_PVT_REMOTE_0_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_REMOTE_0_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_0_SENSOR_STATUSr_OFFSET,0,&(r._avs_pvt_remote_0_sensor_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_REMOTE_0_SENSOR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_REMOTE_1_SENSOR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_REMOTE_1_SENSOR_STATUS.
 */
#define READ_AVS_PVT_REMOTE_1_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_REMOTE_1_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_1_SENSOR_STATUSr_OFFSET,0,(r._avs_pvt_remote_1_sensor_status), 1)
#define WRITE_AVS_PVT_REMOTE_1_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_REMOTE_1_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_1_SENSOR_STATUSr_OFFSET,0,&(r._avs_pvt_remote_1_sensor_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_REMOTE_1_SENSOR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_REMOTE_2_SENSOR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_REMOTE_2_SENSOR_STATUS.
 */
#define READ_AVS_PVT_REMOTE_2_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_REMOTE_2_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_2_SENSOR_STATUSr_OFFSET,0,(r._avs_pvt_remote_2_sensor_status), 1)
#define WRITE_AVS_PVT_REMOTE_2_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_REMOTE_2_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_2_SENSOR_STATUSr_OFFSET,0,&(r._avs_pvt_remote_2_sensor_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_REMOTE_2_SENSOR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_REMOTE_3_SENSOR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_REMOTE_3_SENSOR_STATUS.
 */
#define READ_AVS_PVT_REMOTE_3_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_REMOTE_3_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_3_SENSOR_STATUSr_OFFSET,0,(r._avs_pvt_remote_3_sensor_status), 1)
#define WRITE_AVS_PVT_REMOTE_3_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_REMOTE_3_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_3_SENSOR_STATUSr_OFFSET,0,&(r._avs_pvt_remote_3_sensor_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_REMOTE_3_SENSOR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_REMOTE_4_SENSOR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_REMOTE_4_SENSOR_STATUS.
 */
#define READ_AVS_PVT_REMOTE_4_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_REMOTE_4_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_4_SENSOR_STATUSr_OFFSET,0,(r._avs_pvt_remote_4_sensor_status), 1)
#define WRITE_AVS_PVT_REMOTE_4_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_REMOTE_4_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_4_SENSOR_STATUSr_OFFSET,0,&(r._avs_pvt_remote_4_sensor_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_REMOTE_4_SENSOR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_REMOTE_5_SENSOR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_REMOTE_5_SENSOR_STATUS.
 */
#define READ_AVS_PVT_REMOTE_5_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_REMOTE_5_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_5_SENSOR_STATUSr_OFFSET,0,(r._avs_pvt_remote_5_sensor_status), 1)
#define WRITE_AVS_PVT_REMOTE_5_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_REMOTE_5_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_5_SENSOR_STATUSr_OFFSET,0,&(r._avs_pvt_remote_5_sensor_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_REMOTE_5_SENSOR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_REMOTE_6_SENSOR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_REMOTE_6_SENSOR_STATUS.
 */
#define READ_AVS_PVT_REMOTE_6_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_REMOTE_6_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_6_SENSOR_STATUSr_OFFSET,0,(r._avs_pvt_remote_6_sensor_status), 1)
#define WRITE_AVS_PVT_REMOTE_6_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_REMOTE_6_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_6_SENSOR_STATUSr_OFFSET,0,&(r._avs_pvt_remote_6_sensor_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_REMOTE_6_SENSOR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_REMOTE_7_SENSOR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_REMOTE_7_SENSOR_STATUS.
 */
#define READ_AVS_PVT_REMOTE_7_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_REMOTE_7_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_7_SENSOR_STATUSr_OFFSET,0,(r._avs_pvt_remote_7_sensor_status), 1)
#define WRITE_AVS_PVT_REMOTE_7_SENSOR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_REMOTE_7_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_7_SENSOR_STATUSr_OFFSET,0,&(r._avs_pvt_remote_7_sensor_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_REMOTE_7_SENSOR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_REMOTE_SENSOR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_REMOTE_SENSOR_STATUS.
 */
#define READ_AVS_PVT_REMOTE_SENSOR_STATUSr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_REMOTE_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_SENSOR_STATUSr_OFFSET,(i)*4,(r._avs_pvt_remote_sensor_status), 1)
#define WRITE_AVS_PVT_REMOTE_SENSOR_STATUSr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_REMOTE_SENSOR_STATUSr_BLKACC,87,AVS_PVT_REMOTE_SENSOR_STATUSr_OFFSET,(i)*4,&(r._avs_pvt_remote_sensor_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_REMOTE_SENSOR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_VMON_1p8V_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_VMON_1p8V_STATUS.
 */
#define READ_AVS_PVT_VMON_1P8V_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_VMON_1P8V_STATUSr_BLKACC,87,AVS_PVT_VMON_1P8V_STATUSr_OFFSET,0,(r._avs_pvt_vmon_1p8v_status), 1)
#define WRITE_AVS_PVT_VMON_1P8V_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_VMON_1P8V_STATUSr_BLKACC,87,AVS_PVT_VMON_1P8V_STATUSr_OFFSET,0,&(r._avs_pvt_vmon_1p8v_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_VMON_1P8V_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_VMON_1V_0_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_VMON_1V_0_STATUS.
 */
#define READ_AVS_PVT_VMON_1V_0_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_VMON_1V_0_STATUSr_BLKACC,87,AVS_PVT_VMON_1V_0_STATUSr_OFFSET,0,(r._avs_pvt_vmon_1v_0_status), 1)
#define WRITE_AVS_PVT_VMON_1V_0_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_VMON_1V_0_STATUSr_BLKACC,87,AVS_PVT_VMON_1V_0_STATUSr_OFFSET,0,&(r._avs_pvt_vmon_1v_0_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_VMON_1V_0_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_VMON_1V_1_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_VMON_1V_1_STATUS.
 */
#define READ_AVS_PVT_VMON_1V_1_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_VMON_1V_1_STATUSr_BLKACC,87,AVS_PVT_VMON_1V_1_STATUSr_OFFSET,0,(r._avs_pvt_vmon_1v_1_status), 1)
#define WRITE_AVS_PVT_VMON_1V_1_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_VMON_1V_1_STATUSr_BLKACC,87,AVS_PVT_VMON_1V_1_STATUSr_OFFSET,0,&(r._avs_pvt_vmon_1v_1_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_VMON_1V_1_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_VMON_1V_2_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_VMON_1V_2_STATUS.
 */
#define READ_AVS_PVT_VMON_1V_2_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_VMON_1V_2_STATUSr_BLKACC,87,AVS_PVT_VMON_1V_2_STATUSr_OFFSET,0,(r._avs_pvt_vmon_1v_2_status), 1)
#define WRITE_AVS_PVT_VMON_1V_2_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_VMON_1V_2_STATUSr_BLKACC,87,AVS_PVT_VMON_1V_2_STATUSr_OFFSET,0,&(r._avs_pvt_vmon_1v_2_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_VMON_1V_2_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_VMON_1V_3_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_VMON_1V_3_STATUS.
 */
#define READ_AVS_PVT_VMON_1V_3_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_VMON_1V_3_STATUSr_BLKACC,87,AVS_PVT_VMON_1V_3_STATUSr_OFFSET,0,(r._avs_pvt_vmon_1v_3_status), 1)
#define WRITE_AVS_PVT_VMON_1V_3_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_VMON_1V_3_STATUSr_BLKACC,87,AVS_PVT_VMON_1V_3_STATUSr_OFFSET,0,&(r._avs_pvt_vmon_1v_3_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_VMON_1V_3_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_VMON_1V_4_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_VMON_1V_4_STATUS.
 */
#define READ_AVS_PVT_VMON_1V_4_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_VMON_1V_4_STATUSr_BLKACC,87,AVS_PVT_VMON_1V_4_STATUSr_OFFSET,0,(r._avs_pvt_vmon_1v_4_status), 1)
#define WRITE_AVS_PVT_VMON_1V_4_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_VMON_1V_4_STATUSr_BLKACC,87,AVS_PVT_VMON_1V_4_STATUSr_OFFSET,0,&(r._avs_pvt_vmon_1v_4_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_VMON_1V_4_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_VMON_1V_5_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_VMON_1V_5_STATUS.
 */
#define READ_AVS_PVT_VMON_1V_5_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_VMON_1V_5_STATUSr_BLKACC,87,AVS_PVT_VMON_1V_5_STATUSr_OFFSET,0,(r._avs_pvt_vmon_1v_5_status), 1)
#define WRITE_AVS_PVT_VMON_1V_5_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_VMON_1V_5_STATUSr_BLKACC,87,AVS_PVT_VMON_1V_5_STATUSr_OFFSET,0,&(r._avs_pvt_vmon_1v_5_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_VMON_1V_5_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_VMON_1V_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_VMON_1V_STATUS.
 */
#define READ_AVS_PVT_VMON_1V_STATUSr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_VMON_1V_STATUSr_BLKACC,87,AVS_PVT_VMON_1V_STATUSr_OFFSET,(i)*4,(r._avs_pvt_vmon_1v_status), 1)
#define WRITE_AVS_PVT_VMON_1V_STATUSr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_VMON_1V_STATUSr_BLKACC,87,AVS_PVT_VMON_1V_STATUSr_OFFSET,(i)*4,&(r._avs_pvt_vmon_1v_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_VMON_1V_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_PVT_VMON_3p3V_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_PVT_VMON_3p3V_STATUS.
 */
#define READ_AVS_PVT_VMON_3P3V_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_PVT_VMON_3P3V_STATUSr_BLKACC,87,AVS_PVT_VMON_3P3V_STATUSr_OFFSET,0,(r._avs_pvt_vmon_3p3v_status), 1)
#define WRITE_AVS_PVT_VMON_3P3V_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_PVT_VMON_3P3V_STATUSr_BLKACC,87,AVS_PVT_VMON_3P3V_STATUSr_OFFSET,0,&(r._avs_pvt_vmon_3p3v_status), 1)

/*******************************************************************************
 * End of 'AVS_PVT_VMON_3P3V_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_ROSC_CEN_ROSC_THRESHOLD1_EN_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_ROSC_CEN_ROSC_THRESHOLD1_EN_0.
 */
#define READ_AVS_ROSC_CEN_ROSC_THRESHOLD1_EN_0r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_ROSC_CEN_ROSC_THRESHOLD1_EN_0r_BLKACC,87,AVS_ROSC_CEN_ROSC_THRESHOLD1_EN_0r_OFFSET,0,(r._avs_rosc_cen_rosc_threshold1_en_0), 1)
#define WRITE_AVS_ROSC_CEN_ROSC_THRESHOLD1_EN_0r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_ROSC_CEN_ROSC_THRESHOLD1_EN_0r_BLKACC,87,AVS_ROSC_CEN_ROSC_THRESHOLD1_EN_0r_OFFSET,0,&(r._avs_rosc_cen_rosc_threshold1_en_0), 1)

/*******************************************************************************
 * End of 'AVS_ROSC_CEN_ROSC_THRESHOLD1_EN_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_ROSC_CEN_ROSC_THRESHOLD2_EN_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_ROSC_CEN_ROSC_THRESHOLD2_EN_0.
 */
#define READ_AVS_ROSC_CEN_ROSC_THRESHOLD2_EN_0r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_ROSC_CEN_ROSC_THRESHOLD2_EN_0r_BLKACC,87,AVS_ROSC_CEN_ROSC_THRESHOLD2_EN_0r_OFFSET,0,(r._avs_rosc_cen_rosc_threshold2_en_0), 1)
#define WRITE_AVS_ROSC_CEN_ROSC_THRESHOLD2_EN_0r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_ROSC_CEN_ROSC_THRESHOLD2_EN_0r_BLKACC,87,AVS_ROSC_CEN_ROSC_THRESHOLD2_EN_0r_OFFSET,0,&(r._avs_rosc_cen_rosc_threshold2_en_0), 1)

/*******************************************************************************
 * End of 'AVS_ROSC_CEN_ROSC_THRESHOLD2_EN_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_ROSC_INTR_STATUS_THRESHOLD1_FAULTY_SENSOR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_ROSC_INTR_STATUS_THRESHOLD1_FAULTY_SENSOR.
 */
#define READ_AVS_ROSC_INTR_STATUS_THRESHOLD1_FAULTY_SENSORr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_ROSC_INTR_STATUS_THRESHOLD1_FAULTY_SENSORr_BLKACC,87,AVS_ROSC_INTR_STATUS_THRESHOLD1_FAULTY_SENSORr_OFFSET,0,(r._avs_rosc_intr_status_threshold1_faulty_sensor), 1)
#define WRITE_AVS_ROSC_INTR_STATUS_THRESHOLD1_FAULTY_SENSORr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_ROSC_INTR_STATUS_THRESHOLD1_FAULTY_SENSORr_BLKACC,87,AVS_ROSC_INTR_STATUS_THRESHOLD1_FAULTY_SENSORr_OFFSET,0,&(r._avs_rosc_intr_status_threshold1_faulty_sensor), 1)

/*******************************************************************************
 * End of 'AVS_ROSC_INTR_STATUS_THRESHOLD1_FAULTY_SENSORr'
 */




/*******************************************************************************
 * REGISTER:  AVS_ROSC_INTR_STATUS_THRESHOLD2_FAULTY_SENSOR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_ROSC_INTR_STATUS_THRESHOLD2_FAULTY_SENSOR.
 */
#define READ_AVS_ROSC_INTR_STATUS_THRESHOLD2_FAULTY_SENSORr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_ROSC_INTR_STATUS_THRESHOLD2_FAULTY_SENSORr_BLKACC,87,AVS_ROSC_INTR_STATUS_THRESHOLD2_FAULTY_SENSORr_OFFSET,0,(r._avs_rosc_intr_status_threshold2_faulty_sensor), 1)
#define WRITE_AVS_ROSC_INTR_STATUS_THRESHOLD2_FAULTY_SENSORr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_ROSC_INTR_STATUS_THRESHOLD2_FAULTY_SENSORr_BLKACC,87,AVS_ROSC_INTR_STATUS_THRESHOLD2_FAULTY_SENSORr_OFFSET,0,&(r._avs_rosc_intr_status_threshold2_faulty_sensor), 1)

/*******************************************************************************
 * End of 'AVS_ROSC_INTR_STATUS_THRESHOLD2_FAULTY_SENSORr'
 */




/*******************************************************************************
 * REGISTER:  AVS_ROSC_THRESHOLD1_CEN_ROSC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_ROSC_THRESHOLD1_CEN_ROSC.
 */
#define READ_AVS_ROSC_THRESHOLD1_CEN_ROSCr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_ROSC_THRESHOLD1_CEN_ROSCr_BLKACC,87,AVS_ROSC_THRESHOLD1_CEN_ROSCr_OFFSET,(i)*4,(r._avs_rosc_threshold1_cen_rosc), 1)
#define WRITE_AVS_ROSC_THRESHOLD1_CEN_ROSCr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_ROSC_THRESHOLD1_CEN_ROSCr_BLKACC,87,AVS_ROSC_THRESHOLD1_CEN_ROSCr_OFFSET,(i)*4,&(r._avs_rosc_threshold1_cen_rosc), 1)

/*******************************************************************************
 * End of 'AVS_ROSC_THRESHOLD1_CEN_ROSCr'
 */




/*******************************************************************************
 * REGISTER:  AVS_ROSC_THRESHOLD1_DIRECTION
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_ROSC_THRESHOLD1_DIRECTION.
 */
#define READ_AVS_ROSC_THRESHOLD1_DIRECTIONr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_ROSC_THRESHOLD1_DIRECTIONr_BLKACC,87,AVS_ROSC_THRESHOLD1_DIRECTIONr_OFFSET,0,(r._avs_rosc_threshold1_direction), 1)
#define WRITE_AVS_ROSC_THRESHOLD1_DIRECTIONr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_ROSC_THRESHOLD1_DIRECTIONr_BLKACC,87,AVS_ROSC_THRESHOLD1_DIRECTIONr_OFFSET,0,&(r._avs_rosc_threshold1_direction), 1)

/*******************************************************************************
 * End of 'AVS_ROSC_THRESHOLD1_DIRECTIONr'
 */




/*******************************************************************************
 * REGISTER:  AVS_ROSC_THRESHOLD2_CEN_ROSC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_ROSC_THRESHOLD2_CEN_ROSC.
 */
#define READ_AVS_ROSC_THRESHOLD2_CEN_ROSCr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_ROSC_THRESHOLD2_CEN_ROSCr_BLKACC,87,AVS_ROSC_THRESHOLD2_CEN_ROSCr_OFFSET,(i)*4,(r._avs_rosc_threshold2_cen_rosc), 1)
#define WRITE_AVS_ROSC_THRESHOLD2_CEN_ROSCr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_ROSC_THRESHOLD2_CEN_ROSCr_BLKACC,87,AVS_ROSC_THRESHOLD2_CEN_ROSCr_OFFSET,(i)*4,&(r._avs_rosc_threshold2_cen_rosc), 1)

/*******************************************************************************
 * End of 'AVS_ROSC_THRESHOLD2_CEN_ROSCr'
 */




/*******************************************************************************
 * REGISTER:  AVS_ROSC_THRESHOLD2_DIRECTION
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_ROSC_THRESHOLD2_DIRECTION.
 */
#define READ_AVS_ROSC_THRESHOLD2_DIRECTIONr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_ROSC_THRESHOLD2_DIRECTIONr_BLKACC,87,AVS_ROSC_THRESHOLD2_DIRECTIONr_OFFSET,0,(r._avs_rosc_threshold2_direction), 1)
#define WRITE_AVS_ROSC_THRESHOLD2_DIRECTIONr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_ROSC_THRESHOLD2_DIRECTIONr_BLKACC,87,AVS_ROSC_THRESHOLD2_DIRECTIONr_OFFSET,0,&(r._avs_rosc_threshold2_direction), 1)

/*******************************************************************************
 * End of 'AVS_ROSC_THRESHOLD2_DIRECTIONr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TMON_ENABLE_OVER_TEMPERATURE_RESET
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TMON_ENABLE_OVER_TEMPERATURE_RESET.
 */
#define READ_AVS_TMON_ENABLE_OVER_TEMPERATURE_RESETr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TMON_ENABLE_OVER_TEMPERATURE_RESETr_BLKACC,87,AVS_TMON_ENABLE_OVER_TEMPERATURE_RESETr_OFFSET,0,(r._avs_tmon_enable_over_temperature_reset), 1)
#define WRITE_AVS_TMON_ENABLE_OVER_TEMPERATURE_RESETr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TMON_ENABLE_OVER_TEMPERATURE_RESETr_BLKACC,87,AVS_TMON_ENABLE_OVER_TEMPERATURE_RESETr_OFFSET,0,&(r._avs_tmon_enable_over_temperature_reset), 1)

/*******************************************************************************
 * End of 'AVS_TMON_ENABLE_OVER_TEMPERATURE_RESETr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TMON_ENABLE_TEMPERATURE_INTR_SOURCES
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TMON_ENABLE_TEMPERATURE_INTR_SOURCES.
 */
#define READ_AVS_TMON_ENABLE_TEMPERATURE_INTR_SOURCESr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TMON_ENABLE_TEMPERATURE_INTR_SOURCESr_BLKACC,87,AVS_TMON_ENABLE_TEMPERATURE_INTR_SOURCESr_OFFSET,0,(r._avs_tmon_enable_temperature_intr_sources), 1)
#define WRITE_AVS_TMON_ENABLE_TEMPERATURE_INTR_SOURCESr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TMON_ENABLE_TEMPERATURE_INTR_SOURCESr_BLKACC,87,AVS_TMON_ENABLE_TEMPERATURE_INTR_SOURCESr_OFFSET,0,&(r._avs_tmon_enable_temperature_intr_sources), 1)

/*******************************************************************************
 * End of 'AVS_TMON_ENABLE_TEMPERATURE_INTR_SOURCESr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TMON_SPARE_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TMON_SPARE_0.
 */
#define READ_AVS_TMON_SPARE_0r(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TMON_SPARE_0r_BLKACC,87,AVS_TMON_SPARE_0r_OFFSET,0,(r._avs_tmon_spare_0), 1)
#define WRITE_AVS_TMON_SPARE_0r(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TMON_SPARE_0r_BLKACC,87,AVS_TMON_SPARE_0r_OFFSET,0,&(r._avs_tmon_spare_0), 1)

/*******************************************************************************
 * End of 'AVS_TMON_SPARE_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_TMON_TEMPERATURE_INTR_IDLE_TIME
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TMON_TEMPERATURE_INTR_IDLE_TIME.
 */
#define READ_AVS_TMON_TEMPERATURE_INTR_IDLE_TIMEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TMON_TEMPERATURE_INTR_IDLE_TIMEr_BLKACC,87,AVS_TMON_TEMPERATURE_INTR_IDLE_TIMEr_OFFSET,0,(r._avs_tmon_temperature_intr_idle_time), 1)
#define WRITE_AVS_TMON_TEMPERATURE_INTR_IDLE_TIMEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TMON_TEMPERATURE_INTR_IDLE_TIMEr_BLKACC,87,AVS_TMON_TEMPERATURE_INTR_IDLE_TIMEr_OFFSET,0,&(r._avs_tmon_temperature_intr_idle_time), 1)

/*******************************************************************************
 * End of 'AVS_TMON_TEMPERATURE_INTR_IDLE_TIMEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TMON_TEMPERATURE_INTR_TEMPERATURE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TMON_TEMPERATURE_INTR_TEMPERATURE.
 */
#define READ_AVS_TMON_TEMPERATURE_INTR_TEMPERATUREr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TMON_TEMPERATURE_INTR_TEMPERATUREr_BLKACC,87,AVS_TMON_TEMPERATURE_INTR_TEMPERATUREr_OFFSET,0,(r._avs_tmon_temperature_intr_temperature), 1)
#define WRITE_AVS_TMON_TEMPERATURE_INTR_TEMPERATUREr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TMON_TEMPERATURE_INTR_TEMPERATUREr_BLKACC,87,AVS_TMON_TEMPERATURE_INTR_TEMPERATUREr_OFFSET,0,&(r._avs_tmon_temperature_intr_temperature), 1)

/*******************************************************************************
 * End of 'AVS_TMON_TEMPERATURE_INTR_TEMPERATUREr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TMON_TEMPERATURE_INTR_THRESHOLDS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TMON_TEMPERATURE_INTR_THRESHOLDS.
 */
#define READ_AVS_TMON_TEMPERATURE_INTR_THRESHOLDSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TMON_TEMPERATURE_INTR_THRESHOLDSr_BLKACC,87,AVS_TMON_TEMPERATURE_INTR_THRESHOLDSr_OFFSET,0,(r._avs_tmon_temperature_intr_thresholds), 1)
#define WRITE_AVS_TMON_TEMPERATURE_INTR_THRESHOLDSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TMON_TEMPERATURE_INTR_THRESHOLDSr_BLKACC,87,AVS_TMON_TEMPERATURE_INTR_THRESHOLDSr_OFFSET,0,&(r._avs_tmon_temperature_intr_thresholds), 1)

/*******************************************************************************
 * End of 'AVS_TMON_TEMPERATURE_INTR_THRESHOLDSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TMON_TEMPERATURE_MEASUREMENT_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TMON_TEMPERATURE_MEASUREMENT_STATUS.
 */
#define READ_AVS_TMON_TEMPERATURE_MEASUREMENT_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TMON_TEMPERATURE_MEASUREMENT_STATUSr_BLKACC,87,AVS_TMON_TEMPERATURE_MEASUREMENT_STATUSr_OFFSET,0,(r._avs_tmon_temperature_measurement_status), 1)
#define WRITE_AVS_TMON_TEMPERATURE_MEASUREMENT_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TMON_TEMPERATURE_MEASUREMENT_STATUSr_BLKACC,87,AVS_TMON_TEMPERATURE_MEASUREMENT_STATUSr_OFFSET,0,&(r._avs_tmon_temperature_measurement_status), 1)

/*******************************************************************************
 * End of 'AVS_TMON_TEMPERATURE_MEASUREMENT_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TMON_TEMPERATURE_RESET_THRESHOLD
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TMON_TEMPERATURE_RESET_THRESHOLD.
 */
#define READ_AVS_TMON_TEMPERATURE_RESET_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TMON_TEMPERATURE_RESET_THRESHOLDr_BLKACC,87,AVS_TMON_TEMPERATURE_RESET_THRESHOLDr_OFFSET,0,(r._avs_tmon_temperature_reset_threshold), 1)
#define WRITE_AVS_TMON_TEMPERATURE_RESET_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TMON_TEMPERATURE_RESET_THRESHOLDr_BLKACC,87,AVS_TMON_TEMPERATURE_RESET_THRESHOLDr_OFFSET,0,&(r._avs_tmon_temperature_reset_threshold), 1)

/*******************************************************************************
 * End of 'AVS_TMON_TEMPERATURE_RESET_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TMON_TP_TMON_TEST_ENABLE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TMON_TP_TMON_TEST_ENABLE.
 */
#define READ_AVS_TMON_TP_TMON_TEST_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TMON_TP_TMON_TEST_ENABLEr_BLKACC,87,AVS_TMON_TP_TMON_TEST_ENABLEr_OFFSET,0,(r._avs_tmon_tp_tmon_test_enable), 1)
#define WRITE_AVS_TMON_TP_TMON_TEST_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TMON_TP_TMON_TEST_ENABLEr_BLKACC,87,AVS_TMON_TP_TMON_TEST_ENABLEr_OFFSET,0,&(r._avs_tmon_tp_tmon_test_enable), 1)

/*******************************************************************************
 * End of 'AVS_TMON_TP_TMON_TEST_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_AVS_CONVERGENCE_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_AVS_CONVERGENCE_STATUS.
 */
#define READ_AVS_TOP_CTRL_AVS_CONVERGENCE_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_AVS_CONVERGENCE_STATUSr_BLKACC,87,AVS_TOP_CTRL_AVS_CONVERGENCE_STATUSr_OFFSET,0,(r._avs_top_ctrl_avs_convergence_status), 1)
#define WRITE_AVS_TOP_CTRL_AVS_CONVERGENCE_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_AVS_CONVERGENCE_STATUSr_BLKACC,87,AVS_TOP_CTRL_AVS_CONVERGENCE_STATUSr_OFFSET,0,&(r._avs_top_ctrl_avs_convergence_status), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_AVS_CONVERGENCE_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_AVS_STATUS_IN
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_AVS_STATUS_IN.
 */
#define READ_AVS_TOP_CTRL_AVS_STATUS_INr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_AVS_STATUS_INr_BLKACC,87,AVS_TOP_CTRL_AVS_STATUS_INr_OFFSET,0,(r._avs_top_ctrl_avs_status_in), 1)
#define WRITE_AVS_TOP_CTRL_AVS_STATUS_INr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_AVS_STATUS_INr_BLKACC,87,AVS_TOP_CTRL_AVS_STATUS_INr_OFFSET,0,&(r._avs_top_ctrl_avs_status_in), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_AVS_STATUS_INr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_AVS_STATUS_OUT
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_AVS_STATUS_OUT.
 */
#define READ_AVS_TOP_CTRL_AVS_STATUS_OUTr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_AVS_STATUS_OUTr_BLKACC,87,AVS_TOP_CTRL_AVS_STATUS_OUTr_OFFSET,0,(r._avs_top_ctrl_avs_status_out), 1)
#define WRITE_AVS_TOP_CTRL_AVS_STATUS_OUTr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_AVS_STATUS_OUTr_BLKACC,87,AVS_TOP_CTRL_AVS_STATUS_OUTr_OFFSET,0,&(r._avs_top_ctrl_avs_status_out), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_AVS_STATUS_OUTr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_MEMORY_ASSIST
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_MEMORY_ASSIST.
 */
#define READ_AVS_TOP_CTRL_MEMORY_ASSISTr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_MEMORY_ASSISTr_BLKACC,87,AVS_TOP_CTRL_MEMORY_ASSISTr_OFFSET,0,(r._avs_top_ctrl_memory_assist), 1)
#define WRITE_AVS_TOP_CTRL_MEMORY_ASSISTr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_MEMORY_ASSISTr_BLKACC,87,AVS_TOP_CTRL_MEMORY_ASSISTr_OFFSET,0,&(r._avs_top_ctrl_memory_assist), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_MEMORY_ASSISTr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_MEMORY_ASSIST_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_MEMORY_ASSIST_STATUS.
 */
#define READ_AVS_TOP_CTRL_MEMORY_ASSIST_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_MEMORY_ASSIST_STATUSr_BLKACC,87,AVS_TOP_CTRL_MEMORY_ASSIST_STATUSr_OFFSET,0,(r._avs_top_ctrl_memory_assist_status), 1)
#define WRITE_AVS_TOP_CTRL_MEMORY_ASSIST_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_MEMORY_ASSIST_STATUSr_BLKACC,87,AVS_TOP_CTRL_MEMORY_ASSIST_STATUSr_OFFSET,0,&(r._avs_top_ctrl_memory_assist_status), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_MEMORY_ASSIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_MEMORY_STANDBY_DIAG_DEC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_MEMORY_STANDBY_DIAG_DEC.
 */
#define READ_AVS_TOP_CTRL_MEMORY_STANDBY_DIAG_DECr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_MEMORY_STANDBY_DIAG_DECr_BLKACC,87,AVS_TOP_CTRL_MEMORY_STANDBY_DIAG_DECr_OFFSET,0,(r._avs_top_ctrl_memory_standby_diag_dec), 1)
#define WRITE_AVS_TOP_CTRL_MEMORY_STANDBY_DIAG_DECr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_MEMORY_STANDBY_DIAG_DECr_BLKACC,87,AVS_TOP_CTRL_MEMORY_STANDBY_DIAG_DECr_OFFSET,0,&(r._avs_top_ctrl_memory_standby_diag_dec), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_MEMORY_STANDBY_DIAG_DECr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_OTP_AVS_INFO
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_OTP_AVS_INFO.
 */
#define READ_AVS_TOP_CTRL_OTP_AVS_INFOr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_OTP_AVS_INFOr_BLKACC,87,AVS_TOP_CTRL_OTP_AVS_INFOr_OFFSET,0,(r._avs_top_ctrl_otp_avs_info), 1)
#define WRITE_AVS_TOP_CTRL_OTP_AVS_INFOr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_OTP_AVS_INFOr_BLKACC,87,AVS_TOP_CTRL_OTP_AVS_INFOr_OFFSET,0,&(r._avs_top_ctrl_otp_avs_info), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_OTP_AVS_INFOr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_OTP_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_OTP_STATUS.
 */
#define READ_AVS_TOP_CTRL_OTP_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_OTP_STATUSr_BLKACC,87,AVS_TOP_CTRL_OTP_STATUSr_OFFSET,0,(r._avs_top_ctrl_otp_status), 1)
#define WRITE_AVS_TOP_CTRL_OTP_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_OTP_STATUSr_BLKACC,87,AVS_TOP_CTRL_OTP_STATUSr_OFFSET,0,&(r._avs_top_ctrl_otp_status), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_OTP_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_PVT_MNTR1_DAC_CODE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_PVT_MNTR1_DAC_CODE.
 */
#define READ_AVS_TOP_CTRL_PVT_MNTR1_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_PVT_MNTR1_DAC_CODEr_BLKACC,87,AVS_TOP_CTRL_PVT_MNTR1_DAC_CODEr_OFFSET,0,(r._avs_top_ctrl_pvt_mntr1_dac_code), 1)
#define WRITE_AVS_TOP_CTRL_PVT_MNTR1_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_PVT_MNTR1_DAC_CODEr_BLKACC,87,AVS_TOP_CTRL_PVT_MNTR1_DAC_CODEr_OFFSET,0,&(r._avs_top_ctrl_pvt_mntr1_dac_code), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_PVT_MNTR1_DAC_CODEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_PVT_MNTR2_DAC_CODE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_PVT_MNTR2_DAC_CODE.
 */
#define READ_AVS_TOP_CTRL_PVT_MNTR2_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_PVT_MNTR2_DAC_CODEr_BLKACC,87,AVS_TOP_CTRL_PVT_MNTR2_DAC_CODEr_OFFSET,0,(r._avs_top_ctrl_pvt_mntr2_dac_code), 1)
#define WRITE_AVS_TOP_CTRL_PVT_MNTR2_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_PVT_MNTR2_DAC_CODEr_BLKACC,87,AVS_TOP_CTRL_PVT_MNTR2_DAC_CODEr_OFFSET,0,&(r._avs_top_ctrl_pvt_mntr2_dac_code), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_PVT_MNTR2_DAC_CODEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_PVT_MNTR3_DAC_CODE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_PVT_MNTR3_DAC_CODE.
 */
#define READ_AVS_TOP_CTRL_PVT_MNTR3_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_PVT_MNTR3_DAC_CODEr_BLKACC,87,AVS_TOP_CTRL_PVT_MNTR3_DAC_CODEr_OFFSET,0,(r._avs_top_ctrl_pvt_mntr3_dac_code), 1)
#define WRITE_AVS_TOP_CTRL_PVT_MNTR3_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_PVT_MNTR3_DAC_CODEr_BLKACC,87,AVS_TOP_CTRL_PVT_MNTR3_DAC_CODEr_OFFSET,0,&(r._avs_top_ctrl_pvt_mntr3_dac_code), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_PVT_MNTR3_DAC_CODEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_PVT_MNTR4_DAC_CODE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_PVT_MNTR4_DAC_CODE.
 */
#define READ_AVS_TOP_CTRL_PVT_MNTR4_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_PVT_MNTR4_DAC_CODEr_BLKACC,87,AVS_TOP_CTRL_PVT_MNTR4_DAC_CODEr_OFFSET,0,(r._avs_top_ctrl_pvt_mntr4_dac_code), 1)
#define WRITE_AVS_TOP_CTRL_PVT_MNTR4_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_PVT_MNTR4_DAC_CODEr_BLKACC,87,AVS_TOP_CTRL_PVT_MNTR4_DAC_CODEr_OFFSET,0,&(r._avs_top_ctrl_pvt_mntr4_dac_code), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_PVT_MNTR4_DAC_CODEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_PVT_MNTR5_DAC_CODE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_PVT_MNTR5_DAC_CODE.
 */
#define READ_AVS_TOP_CTRL_PVT_MNTR5_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_PVT_MNTR5_DAC_CODEr_BLKACC,87,AVS_TOP_CTRL_PVT_MNTR5_DAC_CODEr_OFFSET,0,(r._avs_top_ctrl_pvt_mntr5_dac_code), 1)
#define WRITE_AVS_TOP_CTRL_PVT_MNTR5_DAC_CODEr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_PVT_MNTR5_DAC_CODEr_BLKACC,87,AVS_TOP_CTRL_PVT_MNTR5_DAC_CODEr_OFFSET,0,&(r._avs_top_ctrl_pvt_mntr5_dac_code), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_PVT_MNTR5_DAC_CODEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_PVT_MNTR_DAC_CODE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_PVT_MNTR_DAC_CODE.
 */
#define READ_AVS_TOP_CTRL_PVT_MNTR_DAC_CODEr(u,i,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_PVT_MNTR_DAC_CODEr_BLKACC,87,AVS_TOP_CTRL_PVT_MNTR_DAC_CODEr_OFFSET,(i)*4,(r._avs_top_ctrl_pvt_mntr_dac_code), 1)
#define WRITE_AVS_TOP_CTRL_PVT_MNTR_DAC_CODEr(u,i,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_PVT_MNTR_DAC_CODEr_BLKACC,87,AVS_TOP_CTRL_PVT_MNTR_DAC_CODEr_OFFSET,(i)*4,&(r._avs_top_ctrl_pvt_mntr_dac_code), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_PVT_MNTR_DAC_CODEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_REVID
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_REVID.
 */
#define READ_AVS_TOP_CTRL_REVIDr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_REVIDr_BLKACC,87,AVS_TOP_CTRL_REVIDr_OFFSET,0,(r._avs_top_ctrl_revid), 1)
#define WRITE_AVS_TOP_CTRL_REVIDr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_REVIDr_BLKACC,87,AVS_TOP_CTRL_REVIDr_OFFSET,0,&(r._avs_top_ctrl_revid), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_REVIDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_RMON_HZ
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_RMON_HZ.
 */
#define READ_AVS_TOP_CTRL_RMON_HZr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_RMON_HZr_BLKACC,87,AVS_TOP_CTRL_RMON_HZr_OFFSET,0,(r._avs_top_ctrl_rmon_hz), 1)
#define WRITE_AVS_TOP_CTRL_RMON_HZr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_RMON_HZr_BLKACC,87,AVS_TOP_CTRL_RMON_HZr_OFFSET,0,&(r._avs_top_ctrl_rmon_hz), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_RMON_HZr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_RMON_RAWR_EXT
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_RMON_RAWR_EXT.
 */
#define READ_AVS_TOP_CTRL_RMON_RAWR_EXTr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_RMON_RAWR_EXTr_BLKACC,87,AVS_TOP_CTRL_RMON_RAWR_EXTr_OFFSET,0,(r._avs_top_ctrl_rmon_rawr_ext), 1)
#define WRITE_AVS_TOP_CTRL_RMON_RAWR_EXTr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_RMON_RAWR_EXTr_BLKACC,87,AVS_TOP_CTRL_RMON_RAWR_EXTr_OFFSET,0,&(r._avs_top_ctrl_rmon_rawr_ext), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_RMON_RAWR_EXTr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_RMON_RAWR_INT_HZ
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_RMON_RAWR_INT_HZ.
 */
#define READ_AVS_TOP_CTRL_RMON_RAWR_INT_HZr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_RMON_RAWR_INT_HZr_BLKACC,87,AVS_TOP_CTRL_RMON_RAWR_INT_HZr_OFFSET,0,(r._avs_top_ctrl_rmon_rawr_int_hz), 1)
#define WRITE_AVS_TOP_CTRL_RMON_RAWR_INT_HZr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_RMON_RAWR_INT_HZr_BLKACC,87,AVS_TOP_CTRL_RMON_RAWR_INT_HZr_OFFSET,0,&(r._avs_top_ctrl_rmon_rawr_int_hz), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_RMON_RAWR_INT_HZr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_RMON_RAWR_INT_VT
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_RMON_RAWR_INT_VT.
 */
#define READ_AVS_TOP_CTRL_RMON_RAWR_INT_VTr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_RMON_RAWR_INT_VTr_BLKACC,87,AVS_TOP_CTRL_RMON_RAWR_INT_VTr_OFFSET,0,(r._avs_top_ctrl_rmon_rawr_int_vt), 1)
#define WRITE_AVS_TOP_CTRL_RMON_RAWR_INT_VTr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_RMON_RAWR_INT_VTr_BLKACC,87,AVS_TOP_CTRL_RMON_RAWR_INT_VTr_OFFSET,0,&(r._avs_top_ctrl_rmon_rawr_int_vt), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_RMON_RAWR_INT_VTr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_RMON_VT
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_RMON_VT.
 */
#define READ_AVS_TOP_CTRL_RMON_VTr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_RMON_VTr_BLKACC,87,AVS_TOP_CTRL_RMON_VTr_OFFSET,0,(r._avs_top_ctrl_rmon_vt), 1)
#define WRITE_AVS_TOP_CTRL_RMON_VTr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_RMON_VTr_BLKACC,87,AVS_TOP_CTRL_RMON_VTr_OFFSET,0,&(r._avs_top_ctrl_rmon_vt), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_RMON_VTr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_S2_STANDBY_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_S2_STANDBY_STATUS.
 */
#define READ_AVS_TOP_CTRL_S2_STANDBY_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_S2_STANDBY_STATUSr_BLKACC,87,AVS_TOP_CTRL_S2_STANDBY_STATUSr_OFFSET,0,(r._avs_top_ctrl_s2_standby_status), 1)
#define WRITE_AVS_TOP_CTRL_S2_STANDBY_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_S2_STANDBY_STATUSr_BLKACC,87,AVS_TOP_CTRL_S2_STANDBY_STATUSr_OFFSET,0,&(r._avs_top_ctrl_s2_standby_status), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_S2_STANDBY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_SPARE_HIGH
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_SPARE_HIGH.
 */
#define READ_AVS_TOP_CTRL_SPARE_HIGHr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_SPARE_HIGHr_BLKACC,87,AVS_TOP_CTRL_SPARE_HIGHr_OFFSET,0,(r._avs_top_ctrl_spare_high), 1)
#define WRITE_AVS_TOP_CTRL_SPARE_HIGHr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_SPARE_HIGHr_BLKACC,87,AVS_TOP_CTRL_SPARE_HIGHr_OFFSET,0,&(r._avs_top_ctrl_spare_high), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_SPARE_HIGHr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_SPARE_LOW
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_SPARE_LOW.
 */
#define READ_AVS_TOP_CTRL_SPARE_LOWr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_SPARE_LOWr_BLKACC,87,AVS_TOP_CTRL_SPARE_LOWr_OFFSET,0,(r._avs_top_ctrl_spare_low), 1)
#define WRITE_AVS_TOP_CTRL_SPARE_LOWr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_SPARE_LOWr_BLKACC,87,AVS_TOP_CTRL_SPARE_LOWr_OFFSET,0,&(r._avs_top_ctrl_spare_low), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_SPARE_LOWr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_SRAM_POWER_GATE_IN_DIAG_DEC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_SRAM_POWER_GATE_IN_DIAG_DEC.
 */
#define READ_AVS_TOP_CTRL_SRAM_POWER_GATE_IN_DIAG_DECr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_SRAM_POWER_GATE_IN_DIAG_DECr_BLKACC,87,AVS_TOP_CTRL_SRAM_POWER_GATE_IN_DIAG_DECr_OFFSET,0,(r._avs_top_ctrl_sram_power_gate_in_diag_dec), 1)
#define WRITE_AVS_TOP_CTRL_SRAM_POWER_GATE_IN_DIAG_DECr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_SRAM_POWER_GATE_IN_DIAG_DECr_BLKACC,87,AVS_TOP_CTRL_SRAM_POWER_GATE_IN_DIAG_DECr_OFFSET,0,&(r._avs_top_ctrl_sram_power_gate_in_diag_dec), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_SRAM_POWER_GATE_IN_DIAG_DECr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_SRAM_POWER_GATE_OUT_DIAG_DEC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_SRAM_POWER_GATE_OUT_DIAG_DEC.
 */
#define READ_AVS_TOP_CTRL_SRAM_POWER_GATE_OUT_DIAG_DECr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_SRAM_POWER_GATE_OUT_DIAG_DECr_BLKACC,87,AVS_TOP_CTRL_SRAM_POWER_GATE_OUT_DIAG_DECr_OFFSET,0,(r._avs_top_ctrl_sram_power_gate_out_diag_dec), 1)
#define WRITE_AVS_TOP_CTRL_SRAM_POWER_GATE_OUT_DIAG_DECr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_SRAM_POWER_GATE_OUT_DIAG_DECr_BLKACC,87,AVS_TOP_CTRL_SRAM_POWER_GATE_OUT_DIAG_DECr_OFFSET,0,&(r._avs_top_ctrl_sram_power_gate_out_diag_dec), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_SRAM_POWER_GATE_OUT_DIAG_DECr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_START_AVS_CPU
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_START_AVS_CPU.
 */
#define READ_AVS_TOP_CTRL_START_AVS_CPUr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_START_AVS_CPUr_BLKACC,87,AVS_TOP_CTRL_START_AVS_CPUr_OFFSET,0,(r._avs_top_ctrl_start_avs_cpu), 1)
#define WRITE_AVS_TOP_CTRL_START_AVS_CPUr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_START_AVS_CPUr_BLKACC,87,AVS_TOP_CTRL_START_AVS_CPUr_OFFSET,0,&(r._avs_top_ctrl_start_avs_cpu), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_START_AVS_CPUr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_VOLTAGE_REGULATOR_PWRDN
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_VOLTAGE_REGULATOR_PWRDN.
 */
#define READ_AVS_TOP_CTRL_VOLTAGE_REGULATOR_PWRDNr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_VOLTAGE_REGULATOR_PWRDNr_BLKACC,87,AVS_TOP_CTRL_VOLTAGE_REGULATOR_PWRDNr_OFFSET,0,(r._avs_top_ctrl_voltage_regulator_pwrdn), 1)
#define WRITE_AVS_TOP_CTRL_VOLTAGE_REGULATOR_PWRDNr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_VOLTAGE_REGULATOR_PWRDNr_BLKACC,87,AVS_TOP_CTRL_VOLTAGE_REGULATOR_PWRDNr_OFFSET,0,&(r._avs_top_ctrl_voltage_regulator_pwrdn), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_VOLTAGE_REGULATOR_PWRDNr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_VOLTAGE_REGULATOR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_VOLTAGE_REGULATOR_STATUS.
 */
#define READ_AVS_TOP_CTRL_VOLTAGE_REGULATOR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_VOLTAGE_REGULATOR_STATUSr_BLKACC,87,AVS_TOP_CTRL_VOLTAGE_REGULATOR_STATUSr_OFFSET,0,(r._avs_top_ctrl_voltage_regulator_status), 1)
#define WRITE_AVS_TOP_CTRL_VOLTAGE_REGULATOR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_VOLTAGE_REGULATOR_STATUSr_BLKACC,87,AVS_TOP_CTRL_VOLTAGE_REGULATOR_STATUSr_OFFSET,0,&(r._avs_top_ctrl_voltage_regulator_status), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_VOLTAGE_REGULATOR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_VTRAP_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_VTRAP_STATUS.
 */
#define READ_AVS_TOP_CTRL_VTRAP_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_VTRAP_STATUSr_BLKACC,87,AVS_TOP_CTRL_VTRAP_STATUSr_OFFSET,0,(r._avs_top_ctrl_vtrap_status), 1)
#define WRITE_AVS_TOP_CTRL_VTRAP_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_VTRAP_STATUSr_BLKACC,87,AVS_TOP_CTRL_VTRAP_STATUSr_OFFSET,0,&(r._avs_top_ctrl_vtrap_status), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_VTRAP_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_TOP_CTRL_VTRAP_STATUS_CLEAR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_TOP_CTRL_VTRAP_STATUS_CLEAR.
 */
#define READ_AVS_TOP_CTRL_VTRAP_STATUS_CLEARr(u,r) bcmbd_cmicx_reg_block_read(u,AVS_TOP_CTRL_VTRAP_STATUS_CLEARr_BLKACC,87,AVS_TOP_CTRL_VTRAP_STATUS_CLEARr_OFFSET,0,(r._avs_top_ctrl_vtrap_status_clear), 1)
#define WRITE_AVS_TOP_CTRL_VTRAP_STATUS_CLEARr(u,r) bcmbd_cmicx_reg_block_write(u,AVS_TOP_CTRL_VTRAP_STATUS_CLEARr_BLKACC,87,AVS_TOP_CTRL_VTRAP_STATUS_CLEARr_OFFSET,0,&(r._avs_top_ctrl_vtrap_status_clear), 1)

/*******************************************************************************
 * End of 'AVS_TOP_CTRL_VTRAP_STATUS_CLEARr'
 */




/*******************************************************************************
 * MEMORY:  BCAST_BLOCK_MASK
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access BCAST_BLOCK_MASK.
 */
#define READ_BCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicx_mem_block_read(u,BCAST_BLOCK_MASKm_BLKACC,1,BCAST_BLOCK_MASKm_OFFSET,i,(m._bcast_block_mask),9)
#define WRITE_BCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicx_mem_block_write(u,BCAST_BLOCK_MASKm_BLKACC,1,BCAST_BLOCK_MASKm_OFFSET,i,&(m._bcast_block_mask),9)

/*******************************************************************************
 * End of 'BCAST_BLOCK_MASKm'
 */




/*******************************************************************************
 * REGISTER:  BFD_RX_ACH_TYPE_CONTROL0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access BFD_RX_ACH_TYPE_CONTROL0.
 */
#define READ_BFD_RX_ACH_TYPE_CONTROL0r(u,r) bcmbd_cmicx_reg_block_read(u,BFD_RX_ACH_TYPE_CONTROL0r_BLKACC,1,BFD_RX_ACH_TYPE_CONTROL0r_OFFSET,0,(r._bfd_rx_ach_type_control0), 1)
#define WRITE_BFD_RX_ACH_TYPE_CONTROL0r(u,r) bcmbd_cmicx_reg_block_write(u,BFD_RX_ACH_TYPE_CONTROL0r_BLKACC,1,BFD_RX_ACH_TYPE_CONTROL0r_OFFSET,0,&(r._bfd_rx_ach_type_control0), 1)

/*******************************************************************************
 * End of 'BFD_RX_ACH_TYPE_CONTROL0r'
 */




/*******************************************************************************
 * REGISTER:  BFD_RX_ACH_TYPE_CONTROL1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access BFD_RX_ACH_TYPE_CONTROL1.
 */
#define READ_BFD_RX_ACH_TYPE_CONTROL1r(u,r) bcmbd_cmicx_reg_block_read(u,BFD_RX_ACH_TYPE_CONTROL1r_BLKACC,1,BFD_RX_ACH_TYPE_CONTROL1r_OFFSET,0,(r._bfd_rx_ach_type_control1), 1)
#define WRITE_BFD_RX_ACH_TYPE_CONTROL1r(u,r) bcmbd_cmicx_reg_block_write(u,BFD_RX_ACH_TYPE_CONTROL1r_BLKACC,1,BFD_RX_ACH_TYPE_CONTROL1r_OFFSET,0,&(r._bfd_rx_ach_type_control1), 1)

/*******************************************************************************
 * End of 'BFD_RX_ACH_TYPE_CONTROL1r'
 */




/*******************************************************************************
 * REGISTER:  BFD_RX_ACH_TYPE_MPLSTP1_32
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access BFD_RX_ACH_TYPE_MPLSTP1_32.
 */
#define READ_BFD_RX_ACH_TYPE_MPLSTP1_32r(u,r) bcmbd_cmicx_reg_block_read(u,BFD_RX_ACH_TYPE_MPLSTP1_32r_BLKACC,1,BFD_RX_ACH_TYPE_MPLSTP1_32r_OFFSET,0,(r._bfd_rx_ach_type_mplstp1_32), 1)
#define WRITE_BFD_RX_ACH_TYPE_MPLSTP1_32r(u,r) bcmbd_cmicx_reg_block_write(u,BFD_RX_ACH_TYPE_MPLSTP1_32r_BLKACC,1,BFD_RX_ACH_TYPE_MPLSTP1_32r_OFFSET,0,&(r._bfd_rx_ach_type_mplstp1_32), 1)

/*******************************************************************************
 * End of 'BFD_RX_ACH_TYPE_MPLSTP1_32r'
 */




/*******************************************************************************
 * REGISTER:  BFD_RX_ACH_TYPE_MPLSTP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access BFD_RX_ACH_TYPE_MPLSTP.
 */
#define READ_BFD_RX_ACH_TYPE_MPLSTPr(u,r) bcmbd_cmicx_reg_block_read(u,BFD_RX_ACH_TYPE_MPLSTPr_BLKACC,1,BFD_RX_ACH_TYPE_MPLSTPr_OFFSET,0,(r._bfd_rx_ach_type_mplstp), 1)
#define WRITE_BFD_RX_ACH_TYPE_MPLSTPr(u,r) bcmbd_cmicx_reg_block_write(u,BFD_RX_ACH_TYPE_MPLSTPr_BLKACC,1,BFD_RX_ACH_TYPE_MPLSTPr_OFFSET,0,&(r._bfd_rx_ach_type_mplstp), 1)

/*******************************************************************************
 * End of 'BFD_RX_ACH_TYPE_MPLSTPr'
 */




/*******************************************************************************
 * REGISTER:  BFD_RX_UDP_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access BFD_RX_UDP_CONTROL.
 */
#define READ_BFD_RX_UDP_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,BFD_RX_UDP_CONTROLr_BLKACC,1,BFD_RX_UDP_CONTROLr_OFFSET,0,(r._bfd_rx_udp_control), 1)
#define WRITE_BFD_RX_UDP_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,BFD_RX_UDP_CONTROLr_BLKACC,1,BFD_RX_UDP_CONTROLr_OFFSET,0,&(r._bfd_rx_udp_control), 1)

/*******************************************************************************
 * End of 'BFD_RX_UDP_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  BFD_RX_UDP_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access BFD_RX_UDP_CONTROL_1.
 */
#define READ_BFD_RX_UDP_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,BFD_RX_UDP_CONTROL_1r_BLKACC,1,BFD_RX_UDP_CONTROL_1r_OFFSET,0,(r._bfd_rx_udp_control_1), 1)
#define WRITE_BFD_RX_UDP_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,BFD_RX_UDP_CONTROL_1r_BLKACC,1,BFD_RX_UDP_CONTROL_1r_OFFSET,0,&(r._bfd_rx_udp_control_1), 1)

/*******************************************************************************
 * End of 'BFD_RX_UDP_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_CLOCK_CTRL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_CLOCK_CTRL.
 */
#define READ_CDMAC_CLOCK_CTRLr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDMAC_CLOCK_CTRLr_BLKACC,p,CDMAC_CLOCK_CTRLr_OFFSET,0,(r._cdmac_clock_ctrl), 1)
#define WRITE_CDMAC_CLOCK_CTRLr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDMAC_CLOCK_CTRLr_BLKACC,p,CDMAC_CLOCK_CTRLr_OFFSET,0,&(r._cdmac_clock_ctrl), 1)

/*******************************************************************************
 * End of 'CDMAC_CLOCK_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_CTRL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_CTRL.
 */
#define READ_CDMAC_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_CTRLr_BLKACC,p,CDMAC_CTRLr_OFFSET,0,(r._cdmac_ctrl), 1)
#define WRITE_CDMAC_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_CTRLr_BLKACC,p,CDMAC_CTRLr_OFFSET,0,&(r._cdmac_ctrl), 1)

/*******************************************************************************
 * End of 'CDMAC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_ECC_CTRL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_ECC_CTRL.
 */
#define READ_CDMAC_ECC_CTRLr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDMAC_ECC_CTRLr_BLKACC,p,CDMAC_ECC_CTRLr_OFFSET,0,(r._cdmac_ecc_ctrl), 1)
#define WRITE_CDMAC_ECC_CTRLr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDMAC_ECC_CTRLr_BLKACC,p,CDMAC_ECC_CTRLr_OFFSET,0,&(r._cdmac_ecc_ctrl), 1)

/*******************************************************************************
 * End of 'CDMAC_ECC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_ECC_STATUS
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_ECC_STATUS.
 */
#define READ_CDMAC_ECC_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDMAC_ECC_STATUSr_BLKACC,p,CDMAC_ECC_STATUSr_OFFSET,0,(r._cdmac_ecc_status), 1)
#define WRITE_CDMAC_ECC_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDMAC_ECC_STATUSr_BLKACC,p,CDMAC_ECC_STATUSr_OFFSET,0,&(r._cdmac_ecc_status), 1)

/*******************************************************************************
 * End of 'CDMAC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_FIFO_STATUS
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_FIFO_STATUS.
 */
#define READ_CDMAC_FIFO_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_FIFO_STATUSr_BLKACC,p,CDMAC_FIFO_STATUSr_OFFSET,0,(r._cdmac_fifo_status), 1)
#define WRITE_CDMAC_FIFO_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_FIFO_STATUSr_BLKACC,p,CDMAC_FIFO_STATUSr_OFFSET,0,&(r._cdmac_fifo_status), 1)

/*******************************************************************************
 * End of 'CDMAC_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_INTR_ENABLE
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_INTR_ENABLE.
 */
#define READ_CDMAC_INTR_ENABLEr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_INTR_ENABLEr_BLKACC,p,CDMAC_INTR_ENABLEr_OFFSET,0,(r._cdmac_intr_enable), 1)
#define WRITE_CDMAC_INTR_ENABLEr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_INTR_ENABLEr_BLKACC,p,CDMAC_INTR_ENABLEr_OFFSET,0,&(r._cdmac_intr_enable), 1)

/*******************************************************************************
 * End of 'CDMAC_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_INTR_STATUS
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_INTR_STATUS.
 */
#define READ_CDMAC_INTR_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_INTR_STATUSr_BLKACC,p,CDMAC_INTR_STATUSr_OFFSET,0,(r._cdmac_intr_status), 1)
#define WRITE_CDMAC_INTR_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_INTR_STATUSr_BLKACC,p,CDMAC_INTR_STATUSr_OFFSET,0,&(r._cdmac_intr_status), 1)

/*******************************************************************************
 * End of 'CDMAC_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_LAG_FAILOVER_STATUS
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_LAG_FAILOVER_STATUS.
 */
#define READ_CDMAC_LAG_FAILOVER_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_LAG_FAILOVER_STATUSr_BLKACC,p,CDMAC_LAG_FAILOVER_STATUSr_OFFSET,0,(r._cdmac_lag_failover_status), 1)
#define WRITE_CDMAC_LAG_FAILOVER_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_LAG_FAILOVER_STATUSr_BLKACC,p,CDMAC_LAG_FAILOVER_STATUSr_OFFSET,0,&(r._cdmac_lag_failover_status), 1)

/*******************************************************************************
 * End of 'CDMAC_LAG_FAILOVER_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_LINK_INTR_CTRL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_LINK_INTR_CTRL.
 */
#define READ_CDMAC_LINK_INTR_CTRLr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDMAC_LINK_INTR_CTRLr_BLKACC,p,CDMAC_LINK_INTR_CTRLr_OFFSET,0,(r._cdmac_link_intr_ctrl), 1)
#define WRITE_CDMAC_LINK_INTR_CTRLr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDMAC_LINK_INTR_CTRLr_BLKACC,p,CDMAC_LINK_INTR_CTRLr_OFFSET,0,&(r._cdmac_link_intr_ctrl), 1)

/*******************************************************************************
 * End of 'CDMAC_LINK_INTR_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_LINK_INTR_STATUS
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_LINK_INTR_STATUS.
 */
#define READ_CDMAC_LINK_INTR_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDMAC_LINK_INTR_STATUSr_BLKACC,p,CDMAC_LINK_INTR_STATUSr_OFFSET,0,(r._cdmac_link_intr_status), 1)
#define WRITE_CDMAC_LINK_INTR_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDMAC_LINK_INTR_STATUSr_BLKACC,p,CDMAC_LINK_INTR_STATUSr_OFFSET,0,&(r._cdmac_link_intr_status), 1)

/*******************************************************************************
 * End of 'CDMAC_LINK_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_MEM_CTRL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_MEM_CTRL.
 */
#define READ_CDMAC_MEM_CTRLr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDMAC_MEM_CTRLr_BLKACC,p,CDMAC_MEM_CTRLr_OFFSET,0,(r._cdmac_mem_ctrl), 1)
#define WRITE_CDMAC_MEM_CTRLr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDMAC_MEM_CTRLr_BLKACC,p,CDMAC_MEM_CTRLr_OFFSET,0,&(r._cdmac_mem_ctrl), 1)

/*******************************************************************************
 * End of 'CDMAC_MEM_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_MIB_COUNTER_CTRL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_MIB_COUNTER_CTRL.
 */
#define READ_CDMAC_MIB_COUNTER_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_MIB_COUNTER_CTRLr_BLKACC,p,CDMAC_MIB_COUNTER_CTRLr_OFFSET,0,(r._cdmac_mib_counter_ctrl), 1)
#define WRITE_CDMAC_MIB_COUNTER_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_MIB_COUNTER_CTRLr_BLKACC,p,CDMAC_MIB_COUNTER_CTRLr_OFFSET,0,&(r._cdmac_mib_counter_ctrl), 1)

/*******************************************************************************
 * End of 'CDMAC_MIB_COUNTER_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_MIB_COUNTER_MODE
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_MIB_COUNTER_MODE.
 */
#define READ_CDMAC_MIB_COUNTER_MODEr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDMAC_MIB_COUNTER_MODEr_BLKACC,p,CDMAC_MIB_COUNTER_MODEr_OFFSET,0,(r._cdmac_mib_counter_mode), 1)
#define WRITE_CDMAC_MIB_COUNTER_MODEr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDMAC_MIB_COUNTER_MODEr_BLKACC,p,CDMAC_MIB_COUNTER_MODEr_OFFSET,0,&(r._cdmac_mib_counter_mode), 1)

/*******************************************************************************
 * End of 'CDMAC_MIB_COUNTER_MODEr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_MIB_COUNTER_PROG_RANGE_CNTR0
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_MIB_COUNTER_PROG_RANGE_CNTR0.
 */
#define READ_CDMAC_MIB_COUNTER_PROG_RANGE_CNTR0r(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR0r_BLKACC,p,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR0r_OFFSET,0,(r._cdmac_mib_counter_prog_range_cntr0), 1)
#define WRITE_CDMAC_MIB_COUNTER_PROG_RANGE_CNTR0r(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR0r_BLKACC,p,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR0r_OFFSET,0,&(r._cdmac_mib_counter_prog_range_cntr0), 1)

/*******************************************************************************
 * End of 'CDMAC_MIB_COUNTER_PROG_RANGE_CNTR0r'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_MIB_COUNTER_PROG_RANGE_CNTR1
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_MIB_COUNTER_PROG_RANGE_CNTR1.
 */
#define READ_CDMAC_MIB_COUNTER_PROG_RANGE_CNTR1r(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR1r_BLKACC,p,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR1r_OFFSET,0,(r._cdmac_mib_counter_prog_range_cntr1), 1)
#define WRITE_CDMAC_MIB_COUNTER_PROG_RANGE_CNTR1r(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR1r_BLKACC,p,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR1r_OFFSET,0,&(r._cdmac_mib_counter_prog_range_cntr1), 1)

/*******************************************************************************
 * End of 'CDMAC_MIB_COUNTER_PROG_RANGE_CNTR1r'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_MIB_COUNTER_PROG_RANGE_CNTR2
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_MIB_COUNTER_PROG_RANGE_CNTR2.
 */
#define READ_CDMAC_MIB_COUNTER_PROG_RANGE_CNTR2r(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR2r_BLKACC,p,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR2r_OFFSET,0,(r._cdmac_mib_counter_prog_range_cntr2), 1)
#define WRITE_CDMAC_MIB_COUNTER_PROG_RANGE_CNTR2r(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR2r_BLKACC,p,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR2r_OFFSET,0,&(r._cdmac_mib_counter_prog_range_cntr2), 1)

/*******************************************************************************
 * End of 'CDMAC_MIB_COUNTER_PROG_RANGE_CNTR2r'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_MIB_COUNTER_PROG_RANGE_CNTR3
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_MIB_COUNTER_PROG_RANGE_CNTR3.
 */
#define READ_CDMAC_MIB_COUNTER_PROG_RANGE_CNTR3r(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR3r_BLKACC,p,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR3r_OFFSET,0,(r._cdmac_mib_counter_prog_range_cntr3), 1)
#define WRITE_CDMAC_MIB_COUNTER_PROG_RANGE_CNTR3r(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR3r_BLKACC,p,CDMAC_MIB_COUNTER_PROG_RANGE_CNTR3r_OFFSET,0,&(r._cdmac_mib_counter_prog_range_cntr3), 1)

/*******************************************************************************
 * End of 'CDMAC_MIB_COUNTER_PROG_RANGE_CNTR3r'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_MODE
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_MODE.
 */
#define READ_CDMAC_MODEr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_MODEr_BLKACC,p,CDMAC_MODEr_OFFSET,0,(r._cdmac_mode), 1)
#define WRITE_CDMAC_MODEr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_MODEr_BLKACC,p,CDMAC_MODEr_OFFSET,0,&(r._cdmac_mode), 1)

/*******************************************************************************
 * End of 'CDMAC_MODEr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_PAUSE_CTRL
 * BLOCKS:   CDPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CDMAC_PAUSE_CTRL.
 */
#define READ_CDMAC_PAUSE_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_PAUSE_CTRLr_BLKACC,p,CDMAC_PAUSE_CTRLr_OFFSET,0,(r._cdmac_pause_ctrl), 2)
#define WRITE_CDMAC_PAUSE_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_PAUSE_CTRLr_BLKACC,p,CDMAC_PAUSE_CTRLr_OFFSET,0,&(r._cdmac_pause_ctrl), 2)

/*******************************************************************************
 * End of 'CDMAC_PAUSE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_PFC_CTRL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_PFC_CTRL.
 */
#define READ_CDMAC_PFC_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_PFC_CTRLr_BLKACC,p,CDMAC_PFC_CTRLr_OFFSET,0,(r._cdmac_pfc_ctrl), 1)
#define WRITE_CDMAC_PFC_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_PFC_CTRLr_BLKACC,p,CDMAC_PFC_CTRLr_OFFSET,0,&(r._cdmac_pfc_ctrl), 1)

/*******************************************************************************
 * End of 'CDMAC_PFC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_PFC_DA
 * BLOCKS:   CDPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CDMAC_PFC_DA.
 */
#define READ_CDMAC_PFC_DAr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_PFC_DAr_BLKACC,p,CDMAC_PFC_DAr_OFFSET,0,(r._cdmac_pfc_da), 2)
#define WRITE_CDMAC_PFC_DAr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_PFC_DAr_BLKACC,p,CDMAC_PFC_DAr_OFFSET,0,&(r._cdmac_pfc_da), 2)

/*******************************************************************************
 * End of 'CDMAC_PFC_DAr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_PFC_OPCODE
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_PFC_OPCODE.
 */
#define READ_CDMAC_PFC_OPCODEr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_PFC_OPCODEr_BLKACC,p,CDMAC_PFC_OPCODEr_OFFSET,0,(r._cdmac_pfc_opcode), 1)
#define WRITE_CDMAC_PFC_OPCODEr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_PFC_OPCODEr_BLKACC,p,CDMAC_PFC_OPCODEr_OFFSET,0,&(r._cdmac_pfc_opcode), 1)

/*******************************************************************************
 * End of 'CDMAC_PFC_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_PFC_TYPE
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_PFC_TYPE.
 */
#define READ_CDMAC_PFC_TYPEr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_PFC_TYPEr_BLKACC,p,CDMAC_PFC_TYPEr_OFFSET,0,(r._cdmac_pfc_type), 1)
#define WRITE_CDMAC_PFC_TYPEr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_PFC_TYPEr_BLKACC,p,CDMAC_PFC_TYPEr_OFFSET,0,&(r._cdmac_pfc_type), 1)

/*******************************************************************************
 * End of 'CDMAC_PFC_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_RSV_MASK
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_RSV_MASK.
 */
#define READ_CDMAC_RSV_MASKr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_RSV_MASKr_BLKACC,p,CDMAC_RSV_MASKr_OFFSET,0,(r._cdmac_rsv_mask), 1)
#define WRITE_CDMAC_RSV_MASKr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_RSV_MASKr_BLKACC,p,CDMAC_RSV_MASKr_OFFSET,0,&(r._cdmac_rsv_mask), 1)

/*******************************************************************************
 * End of 'CDMAC_RSV_MASKr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_RX_CTRL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_RX_CTRL.
 */
#define READ_CDMAC_RX_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_RX_CTRLr_BLKACC,p,CDMAC_RX_CTRLr_OFFSET,0,(r._cdmac_rx_ctrl), 1)
#define WRITE_CDMAC_RX_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_RX_CTRLr_BLKACC,p,CDMAC_RX_CTRLr_OFFSET,0,&(r._cdmac_rx_ctrl), 1)

/*******************************************************************************
 * End of 'CDMAC_RX_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_RX_LSS_CTRL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_RX_LSS_CTRL.
 */
#define READ_CDMAC_RX_LSS_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_RX_LSS_CTRLr_BLKACC,p,CDMAC_RX_LSS_CTRLr_OFFSET,0,(r._cdmac_rx_lss_ctrl), 1)
#define WRITE_CDMAC_RX_LSS_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_RX_LSS_CTRLr_BLKACC,p,CDMAC_RX_LSS_CTRLr_OFFSET,0,&(r._cdmac_rx_lss_ctrl), 1)

/*******************************************************************************
 * End of 'CDMAC_RX_LSS_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_RX_LSS_STATUS
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_RX_LSS_STATUS.
 */
#define READ_CDMAC_RX_LSS_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_RX_LSS_STATUSr_BLKACC,p,CDMAC_RX_LSS_STATUSr_OFFSET,0,(r._cdmac_rx_lss_status), 1)
#define WRITE_CDMAC_RX_LSS_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_RX_LSS_STATUSr_BLKACC,p,CDMAC_RX_LSS_STATUSr_OFFSET,0,&(r._cdmac_rx_lss_status), 1)

/*******************************************************************************
 * End of 'CDMAC_RX_LSS_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_RX_MAC_SA
 * BLOCKS:   CDPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CDMAC_RX_MAC_SA.
 */
#define READ_CDMAC_RX_MAC_SAr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_RX_MAC_SAr_BLKACC,p,CDMAC_RX_MAC_SAr_OFFSET,0,(r._cdmac_rx_mac_sa), 2)
#define WRITE_CDMAC_RX_MAC_SAr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_RX_MAC_SAr_BLKACC,p,CDMAC_RX_MAC_SAr_OFFSET,0,&(r._cdmac_rx_mac_sa), 2)

/*******************************************************************************
 * End of 'CDMAC_RX_MAC_SAr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_RX_MAX_SIZE
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_RX_MAX_SIZE.
 */
#define READ_CDMAC_RX_MAX_SIZEr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_RX_MAX_SIZEr_BLKACC,p,CDMAC_RX_MAX_SIZEr_OFFSET,0,(r._cdmac_rx_max_size), 1)
#define WRITE_CDMAC_RX_MAX_SIZEr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_RX_MAX_SIZEr_BLKACC,p,CDMAC_RX_MAX_SIZEr_OFFSET,0,&(r._cdmac_rx_max_size), 1)

/*******************************************************************************
 * End of 'CDMAC_RX_MAX_SIZEr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_RX_VLAN_TAG
 * BLOCKS:   CDPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CDMAC_RX_VLAN_TAG.
 */
#define READ_CDMAC_RX_VLAN_TAGr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_RX_VLAN_TAGr_BLKACC,p,CDMAC_RX_VLAN_TAGr_OFFSET,0,(r._cdmac_rx_vlan_tag), 2)
#define WRITE_CDMAC_RX_VLAN_TAGr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_RX_VLAN_TAGr_BLKACC,p,CDMAC_RX_VLAN_TAGr_OFFSET,0,&(r._cdmac_rx_vlan_tag), 2)

/*******************************************************************************
 * End of 'CDMAC_RX_VLAN_TAGr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_SPARE
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_SPARE.
 */
#define READ_CDMAC_SPAREr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_SPAREr_BLKACC,p,CDMAC_SPAREr_OFFSET,0,(r._cdmac_spare), 1)
#define WRITE_CDMAC_SPAREr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_SPAREr_BLKACC,p,CDMAC_SPAREr_OFFSET,0,&(r._cdmac_spare), 1)

/*******************************************************************************
 * End of 'CDMAC_SPAREr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_TXFIFO_STATUS
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_TXFIFO_STATUS.
 */
#define READ_CDMAC_TXFIFO_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_TXFIFO_STATUSr_BLKACC,p,CDMAC_TXFIFO_STATUSr_OFFSET,0,(r._cdmac_txfifo_status), 1)
#define WRITE_CDMAC_TXFIFO_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_TXFIFO_STATUSr_BLKACC,p,CDMAC_TXFIFO_STATUSr_OFFSET,0,&(r._cdmac_txfifo_status), 1)

/*******************************************************************************
 * End of 'CDMAC_TXFIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_TX_CTRL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_TX_CTRL.
 */
#define READ_CDMAC_TX_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_TX_CTRLr_BLKACC,p,CDMAC_TX_CTRLr_OFFSET,0,(r._cdmac_tx_ctrl), 1)
#define WRITE_CDMAC_TX_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_TX_CTRLr_BLKACC,p,CDMAC_TX_CTRLr_OFFSET,0,&(r._cdmac_tx_ctrl), 1)

/*******************************************************************************
 * End of 'CDMAC_TX_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_TX_MAC_SA
 * BLOCKS:   CDPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CDMAC_TX_MAC_SA.
 */
#define READ_CDMAC_TX_MAC_SAr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDMAC_TX_MAC_SAr_BLKACC,p,CDMAC_TX_MAC_SAr_OFFSET,0,(r._cdmac_tx_mac_sa), 2)
#define WRITE_CDMAC_TX_MAC_SAr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDMAC_TX_MAC_SAr_BLKACC,p,CDMAC_TX_MAC_SAr_OFFSET,0,&(r._cdmac_tx_mac_sa), 2)

/*******************************************************************************
 * End of 'CDMAC_TX_MAC_SAr'
 */




/*******************************************************************************
 * REGISTER:  CDMAC_VERSION_ID
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDMAC_VERSION_ID.
 */
#define READ_CDMAC_VERSION_IDr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDMAC_VERSION_IDr_BLKACC,p,CDMAC_VERSION_IDr_OFFSET,0,(r._cdmac_version_id), 1)
#define WRITE_CDMAC_VERSION_IDr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDMAC_VERSION_IDr_BLKACC,p,CDMAC_VERSION_IDr_OFFSET,0,&(r._cdmac_version_id), 1)

/*******************************************************************************
 * End of 'CDMAC_VERSION_IDr'
 */




/*******************************************************************************
 * MEMORY:  CDMIB_MEM
 * BLOCKS:   CDPORT
 * SIZE:     512
 */
/*
 * These macros can be used to access CDMIB_MEM.
 */
#define READ_CDMIB_MEMm(u,i,m,p) bcmbd_cmicx_mem_blocks_read(u,CDMIB_MEMm_BLKACC,p,CDMIB_MEMm_OFFSET,i,(m._cdmib_mem),16)
#define WRITE_CDMIB_MEMm(u,i,m,p) bcmbd_cmicx_mem_blocks_write(u,CDMIB_MEMm_BLKACC,p,CDMIB_MEMm_OFFSET,i,&(m._cdmib_mem),16)

/*******************************************************************************
 * End of 'CDMIB_MEMm'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_FAULT_LINK_STATUS
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_FAULT_LINK_STATUS.
 */
#define READ_CDPORT_FAULT_LINK_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDPORT_FAULT_LINK_STATUSr_BLKACC,p,CDPORT_FAULT_LINK_STATUSr_OFFSET,0,(r._cdport_fault_link_status), 1)
#define WRITE_CDPORT_FAULT_LINK_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDPORT_FAULT_LINK_STATUSr_BLKACC,p,CDPORT_FAULT_LINK_STATUSr_OFFSET,0,&(r._cdport_fault_link_status), 1)

/*******************************************************************************
 * End of 'CDPORT_FAULT_LINK_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_FLOW_CONTROL_CONFIG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_FLOW_CONTROL_CONFIG.
 */
#define READ_CDPORT_FLOW_CONTROL_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDPORT_FLOW_CONTROL_CONFIGr_BLKACC,p,CDPORT_FLOW_CONTROL_CONFIGr_OFFSET,0,(r._cdport_flow_control_config), 1)
#define WRITE_CDPORT_FLOW_CONTROL_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDPORT_FLOW_CONTROL_CONFIGr_BLKACC,p,CDPORT_FLOW_CONTROL_CONFIGr_OFFSET,0,&(r._cdport_flow_control_config), 1)

/*******************************************************************************
 * End of 'CDPORT_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_GENERAL_SPARE0_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_GENERAL_SPARE0_REG.
 */
#define READ_CDPORT_GENERAL_SPARE0_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_GENERAL_SPARE0_REGr_BLKACC,p,CDPORT_GENERAL_SPARE0_REGr_OFFSET,0,(r._cdport_general_spare0_reg), 1)
#define WRITE_CDPORT_GENERAL_SPARE0_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_GENERAL_SPARE0_REGr_BLKACC,p,CDPORT_GENERAL_SPARE0_REGr_OFFSET,0,&(r._cdport_general_spare0_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_GENERAL_SPARE0_REGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_GENERAL_SPARE1_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_GENERAL_SPARE1_REG.
 */
#define READ_CDPORT_GENERAL_SPARE1_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_GENERAL_SPARE1_REGr_BLKACC,p,CDPORT_GENERAL_SPARE1_REGr_OFFSET,0,(r._cdport_general_spare1_reg), 1)
#define WRITE_CDPORT_GENERAL_SPARE1_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_GENERAL_SPARE1_REGr_BLKACC,p,CDPORT_GENERAL_SPARE1_REGr_OFFSET,0,&(r._cdport_general_spare1_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_GENERAL_SPARE1_REGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_GENERAL_SPARE2_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_GENERAL_SPARE2_REG.
 */
#define READ_CDPORT_GENERAL_SPARE2_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_GENERAL_SPARE2_REGr_BLKACC,p,CDPORT_GENERAL_SPARE2_REGr_OFFSET,0,(r._cdport_general_spare2_reg), 1)
#define WRITE_CDPORT_GENERAL_SPARE2_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_GENERAL_SPARE2_REGr_BLKACC,p,CDPORT_GENERAL_SPARE2_REGr_OFFSET,0,&(r._cdport_general_spare2_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_GENERAL_SPARE2_REGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_GENERAL_SPARE3_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_GENERAL_SPARE3_REG.
 */
#define READ_CDPORT_GENERAL_SPARE3_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_GENERAL_SPARE3_REGr_BLKACC,p,CDPORT_GENERAL_SPARE3_REGr_OFFSET,0,(r._cdport_general_spare3_reg), 1)
#define WRITE_CDPORT_GENERAL_SPARE3_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_GENERAL_SPARE3_REGr_BLKACC,p,CDPORT_GENERAL_SPARE3_REGr_OFFSET,0,&(r._cdport_general_spare3_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_GENERAL_SPARE3_REGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_INTR_MASK
 * BLOCKS:   CDPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CDPORT_INTR_MASK.
 */
#define READ_CDPORT_INTR_MASKr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_INTR_MASKr_BLKACC,p,CDPORT_INTR_MASKr_OFFSET,0,(r._cdport_intr_mask), 2)
#define WRITE_CDPORT_INTR_MASKr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_INTR_MASKr_BLKACC,p,CDPORT_INTR_MASKr_OFFSET,0,&(r._cdport_intr_mask), 2)

/*******************************************************************************
 * End of 'CDPORT_INTR_MASKr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_INTR_STATUS
 * BLOCKS:   CDPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CDPORT_INTR_STATUS.
 */
#define READ_CDPORT_INTR_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_INTR_STATUSr_BLKACC,p,CDPORT_INTR_STATUSr_OFFSET,0,(r._cdport_intr_status), 2)
#define WRITE_CDPORT_INTR_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_INTR_STATUSr_BLKACC,p,CDPORT_INTR_STATUSr_OFFSET,0,&(r._cdport_intr_status), 2)

/*******************************************************************************
 * End of 'CDPORT_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_LAG_FAILOVER_CONFIG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_LAG_FAILOVER_CONFIG.
 */
#define READ_CDPORT_LAG_FAILOVER_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDPORT_LAG_FAILOVER_CONFIGr_BLKACC,p,CDPORT_LAG_FAILOVER_CONFIGr_OFFSET,0,(r._cdport_lag_failover_config), 1)
#define WRITE_CDPORT_LAG_FAILOVER_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDPORT_LAG_FAILOVER_CONFIGr_BLKACC,p,CDPORT_LAG_FAILOVER_CONFIGr_OFFSET,0,&(r._cdport_lag_failover_config), 1)

/*******************************************************************************
 * End of 'CDPORT_LAG_FAILOVER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_LED_CONTROL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_LED_CONTROL.
 */
#define READ_CDPORT_LED_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDPORT_LED_CONTROLr_BLKACC,p,CDPORT_LED_CONTROLr_OFFSET,0,(r._cdport_led_control), 1)
#define WRITE_CDPORT_LED_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDPORT_LED_CONTROLr_BLKACC,p,CDPORT_LED_CONTROLr_OFFSET,0,&(r._cdport_led_control), 1)

/*******************************************************************************
 * End of 'CDPORT_LED_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_MAC_CONTROL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_MAC_CONTROL.
 */
#define READ_CDPORT_MAC_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_MAC_CONTROLr_BLKACC,p,CDPORT_MAC_CONTROLr_OFFSET,0,(r._cdport_mac_control), 1)
#define WRITE_CDPORT_MAC_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_MAC_CONTROLr_BLKACC,p,CDPORT_MAC_CONTROLr_OFFSET,0,&(r._cdport_mac_control), 1)

/*******************************************************************************
 * End of 'CDPORT_MAC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_MODE_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_MODE_REG.
 */
#define READ_CDPORT_MODE_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_MODE_REGr_BLKACC,p,CDPORT_MODE_REGr_OFFSET,0,(r._cdport_mode_reg), 1)
#define WRITE_CDPORT_MODE_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_MODE_REGr_BLKACC,p,CDPORT_MODE_REGr_OFFSET,0,&(r._cdport_mode_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_MODE_REGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_PM_VERSION_ID
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_PM_VERSION_ID.
 */
#define READ_CDPORT_PM_VERSION_IDr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_PM_VERSION_IDr_BLKACC,p,CDPORT_PM_VERSION_IDr_OFFSET,0,(r._cdport_pm_version_id), 1)
#define WRITE_CDPORT_PM_VERSION_IDr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_PM_VERSION_IDr_BLKACC,p,CDPORT_PM_VERSION_IDr_OFFSET,0,&(r._cdport_pm_version_id), 1)

/*******************************************************************************
 * End of 'CDPORT_PM_VERSION_IDr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_PORT_INTR_ENABLE
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_PORT_INTR_ENABLE.
 */
#define READ_CDPORT_PORT_INTR_ENABLEr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_PORT_INTR_ENABLEr_BLKACC,p,CDPORT_PORT_INTR_ENABLEr_OFFSET,0,(r._cdport_port_intr_enable), 1)
#define WRITE_CDPORT_PORT_INTR_ENABLEr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_PORT_INTR_ENABLEr_BLKACC,p,CDPORT_PORT_INTR_ENABLEr_OFFSET,0,&(r._cdport_port_intr_enable), 1)

/*******************************************************************************
 * End of 'CDPORT_PORT_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_PORT_INTR_STATUS
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_PORT_INTR_STATUS.
 */
#define READ_CDPORT_PORT_INTR_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_PORT_INTR_STATUSr_BLKACC,p,CDPORT_PORT_INTR_STATUSr_OFFSET,0,(r._cdport_port_intr_status), 1)
#define WRITE_CDPORT_PORT_INTR_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_PORT_INTR_STATUSr_BLKACC,p,CDPORT_PORT_INTR_STATUSr_OFFSET,0,&(r._cdport_port_intr_status), 1)

/*******************************************************************************
 * End of 'CDPORT_PORT_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_PORT_STATUS
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_PORT_STATUS.
 */
#define READ_CDPORT_PORT_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_PORT_STATUSr_BLKACC,p,CDPORT_PORT_STATUSr_OFFSET,0,(r._cdport_port_status), 1)
#define WRITE_CDPORT_PORT_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_PORT_STATUSr_BLKACC,p,CDPORT_PORT_STATUSr_OFFSET,0,&(r._cdport_port_status), 1)

/*******************************************************************************
 * End of 'CDPORT_PORT_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_SBUS_CONTROL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_SBUS_CONTROL.
 */
#define READ_CDPORT_SBUS_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_SBUS_CONTROLr_BLKACC,p,CDPORT_SBUS_CONTROLr_OFFSET,0,(r._cdport_sbus_control), 1)
#define WRITE_CDPORT_SBUS_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_SBUS_CONTROLr_BLKACC,p,CDPORT_SBUS_CONTROLr_OFFSET,0,&(r._cdport_sbus_control), 1)

/*******************************************************************************
 * End of 'CDPORT_SBUS_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_SPARE0_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_SPARE0_REG.
 */
#define READ_CDPORT_SPARE0_REGr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDPORT_SPARE0_REGr_BLKACC,p,CDPORT_SPARE0_REGr_OFFSET,0,(r._cdport_spare0_reg), 1)
#define WRITE_CDPORT_SPARE0_REGr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDPORT_SPARE0_REGr_BLKACC,p,CDPORT_SPARE0_REGr_OFFSET,0,&(r._cdport_spare0_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_SPARE0_REGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_SPARE1_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_SPARE1_REG.
 */
#define READ_CDPORT_SPARE1_REGr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDPORT_SPARE1_REGr_BLKACC,p,CDPORT_SPARE1_REGr_OFFSET,0,(r._cdport_spare1_reg), 1)
#define WRITE_CDPORT_SPARE1_REGr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDPORT_SPARE1_REGr_BLKACC,p,CDPORT_SPARE1_REGr_OFFSET,0,&(r._cdport_spare1_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_SPARE1_REGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_SPARE2_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_SPARE2_REG.
 */
#define READ_CDPORT_SPARE2_REGr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDPORT_SPARE2_REGr_BLKACC,p,CDPORT_SPARE2_REGr_OFFSET,0,(r._cdport_spare2_reg), 1)
#define WRITE_CDPORT_SPARE2_REGr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDPORT_SPARE2_REGr_BLKACC,p,CDPORT_SPARE2_REGr_OFFSET,0,&(r._cdport_spare2_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_SPARE2_REGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_SPARE3_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_SPARE3_REG.
 */
#define READ_CDPORT_SPARE3_REGr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDPORT_SPARE3_REGr_BLKACC,p,CDPORT_SPARE3_REGr_OFFSET,0,(r._cdport_spare3_reg), 1)
#define WRITE_CDPORT_SPARE3_REGr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDPORT_SPARE3_REGr_BLKACC,p,CDPORT_SPARE3_REGr_OFFSET,0,&(r._cdport_spare3_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_SPARE3_REGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_SW_FLOW_CONTROL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_SW_FLOW_CONTROL.
 */
#define READ_CDPORT_SW_FLOW_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_read(u,CDPORT_SW_FLOW_CONTROLr_BLKACC,p,CDPORT_SW_FLOW_CONTROLr_OFFSET,0,(r._cdport_sw_flow_control), 1)
#define WRITE_CDPORT_SW_FLOW_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_write(u,CDPORT_SW_FLOW_CONTROLr_BLKACC,p,CDPORT_SW_FLOW_CONTROLr_OFFSET,0,&(r._cdport_sw_flow_control), 1)

/*******************************************************************************
 * End of 'CDPORT_SW_FLOW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_TSC_CLOCK_CONTROL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_TSC_CLOCK_CONTROL.
 */
#define READ_CDPORT_TSC_CLOCK_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_TSC_CLOCK_CONTROLr_BLKACC,p,CDPORT_TSC_CLOCK_CONTROLr_OFFSET,0,(r._cdport_tsc_clock_control), 1)
#define WRITE_CDPORT_TSC_CLOCK_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_TSC_CLOCK_CONTROLr_BLKACC,p,CDPORT_TSC_CLOCK_CONTROLr_OFFSET,0,&(r._cdport_tsc_clock_control), 1)

/*******************************************************************************
 * End of 'CDPORT_TSC_CLOCK_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_TSC_MEM_CTRL
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_TSC_MEM_CTRL.
 */
#define READ_CDPORT_TSC_MEM_CTRLr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_TSC_MEM_CTRLr_BLKACC,p,CDPORT_TSC_MEM_CTRLr_OFFSET,0,(r._cdport_tsc_mem_ctrl), 1)
#define WRITE_CDPORT_TSC_MEM_CTRLr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_TSC_MEM_CTRLr_BLKACC,p,CDPORT_TSC_MEM_CTRLr_OFFSET,0,&(r._cdport_tsc_mem_ctrl), 1)

/*******************************************************************************
 * End of 'CDPORT_TSC_MEM_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_TSC_PLL_LOCK_STATUS
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_TSC_PLL_LOCK_STATUS.
 */
#define READ_CDPORT_TSC_PLL_LOCK_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_TSC_PLL_LOCK_STATUSr_BLKACC,p,CDPORT_TSC_PLL_LOCK_STATUSr_OFFSET,0,(r._cdport_tsc_pll_lock_status), 1)
#define WRITE_CDPORT_TSC_PLL_LOCK_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_TSC_PLL_LOCK_STATUSr_BLKACC,p,CDPORT_TSC_PLL_LOCK_STATUSr_OFFSET,0,&(r._cdport_tsc_pll_lock_status), 1)

/*******************************************************************************
 * End of 'CDPORT_TSC_PLL_LOCK_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  CDPORT_TSC_UCMEM_DATA
 * BLOCKS:   CDPORT
 * SIZE:     128
 */
/*
 * These macros can be used to access CDPORT_TSC_UCMEM_DATA.
 */
#define READ_CDPORT_TSC_UCMEM_DATAm(u,i,m,p) bcmbd_cmicx_mem_blocks_read(u,CDPORT_TSC_UCMEM_DATAm_BLKACC,p,CDPORT_TSC_UCMEM_DATAm_OFFSET,i,(m._cdport_tsc_ucmem_data),4)
#define WRITE_CDPORT_TSC_UCMEM_DATAm(u,i,m,p) bcmbd_cmicx_mem_blocks_write(u,CDPORT_TSC_UCMEM_DATAm_BLKACC,p,CDPORT_TSC_UCMEM_DATAm_OFFSET,i,&(m._cdport_tsc_ucmem_data),4)

/*******************************************************************************
 * End of 'CDPORT_TSC_UCMEM_DATAm'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_XGXS0_CTRL_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_XGXS0_CTRL_REG.
 */
#define READ_CDPORT_XGXS0_CTRL_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_XGXS0_CTRL_REGr_BLKACC,p,CDPORT_XGXS0_CTRL_REGr_OFFSET,0,(r._cdport_xgxs0_ctrl_reg), 1)
#define WRITE_CDPORT_XGXS0_CTRL_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_XGXS0_CTRL_REGr_BLKACC,p,CDPORT_XGXS0_CTRL_REGr_OFFSET,0,&(r._cdport_xgxs0_ctrl_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_XGXS0_CTRL_REGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_XGXS0_LN0_STATUS_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_XGXS0_LN0_STATUS_REG.
 */
#define READ_CDPORT_XGXS0_LN0_STATUS_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_XGXS0_LN0_STATUS_REGr_BLKACC,p,CDPORT_XGXS0_LN0_STATUS_REGr_OFFSET,0,(r._cdport_xgxs0_ln0_status_reg), 1)
#define WRITE_CDPORT_XGXS0_LN0_STATUS_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_XGXS0_LN0_STATUS_REGr_BLKACC,p,CDPORT_XGXS0_LN0_STATUS_REGr_OFFSET,0,&(r._cdport_xgxs0_ln0_status_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_XGXS0_LN0_STATUS_REGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_XGXS0_LN1_STATUS_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_XGXS0_LN1_STATUS_REG.
 */
#define READ_CDPORT_XGXS0_LN1_STATUS_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_XGXS0_LN1_STATUS_REGr_BLKACC,p,CDPORT_XGXS0_LN1_STATUS_REGr_OFFSET,0,(r._cdport_xgxs0_ln1_status_reg), 1)
#define WRITE_CDPORT_XGXS0_LN1_STATUS_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_XGXS0_LN1_STATUS_REGr_BLKACC,p,CDPORT_XGXS0_LN1_STATUS_REGr_OFFSET,0,&(r._cdport_xgxs0_ln1_status_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_XGXS0_LN1_STATUS_REGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_XGXS0_LN2_STATUS_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_XGXS0_LN2_STATUS_REG.
 */
#define READ_CDPORT_XGXS0_LN2_STATUS_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_XGXS0_LN2_STATUS_REGr_BLKACC,p,CDPORT_XGXS0_LN2_STATUS_REGr_OFFSET,0,(r._cdport_xgxs0_ln2_status_reg), 1)
#define WRITE_CDPORT_XGXS0_LN2_STATUS_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_XGXS0_LN2_STATUS_REGr_BLKACC,p,CDPORT_XGXS0_LN2_STATUS_REGr_OFFSET,0,&(r._cdport_xgxs0_ln2_status_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_XGXS0_LN2_STATUS_REGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_XGXS0_LN3_STATUS_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_XGXS0_LN3_STATUS_REG.
 */
#define READ_CDPORT_XGXS0_LN3_STATUS_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_XGXS0_LN3_STATUS_REGr_BLKACC,p,CDPORT_XGXS0_LN3_STATUS_REGr_OFFSET,0,(r._cdport_xgxs0_ln3_status_reg), 1)
#define WRITE_CDPORT_XGXS0_LN3_STATUS_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_XGXS0_LN3_STATUS_REGr_BLKACC,p,CDPORT_XGXS0_LN3_STATUS_REGr_OFFSET,0,&(r._cdport_xgxs0_ln3_status_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_XGXS0_LN3_STATUS_REGr'
 */




/*******************************************************************************
 * REGISTER:  CDPORT_XGXS0_STATUS_REG
 * BLOCKS:   CDPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CDPORT_XGXS0_STATUS_REG.
 */
#define READ_CDPORT_XGXS0_STATUS_REGr(u,i,r,p) bcmbd_cmicx_reg_blocks_read(u,CDPORT_XGXS0_STATUS_REGr_BLKACC,p,CDPORT_XGXS0_STATUS_REGr_OFFSET,i,(r._cdport_xgxs0_status_reg), 1)
#define WRITE_CDPORT_XGXS0_STATUS_REGr(u,i,r,p) bcmbd_cmicx_reg_blocks_write(u,CDPORT_XGXS0_STATUS_REGr_BLKACC,p,CDPORT_XGXS0_STATUS_REGr_OFFSET,i,&(r._cdport_xgxs0_status_reg), 1)

/*******************************************************************************
 * End of 'CDPORT_XGXS0_STATUS_REGr'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_CONTROL
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_CONTROL.
 */
#define READ_CENTRAL_CTR_EVICTION_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,CENTRAL_CTR_EVICTION_CONTROLr_BLKACC,88,CENTRAL_CTR_EVICTION_CONTROLr_OFFSET,0,(r._central_ctr_eviction_control), 1)
#define WRITE_CENTRAL_CTR_EVICTION_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,CENTRAL_CTR_EVICTION_CONTROLr_BLKACC,88,CENTRAL_CTR_EVICTION_CONTROLr_OFFSET,0,&(r._central_ctr_eviction_control), 1)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_COUNTER_FLAG
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_COUNTER_FLAG.
 */
#define READ_CENTRAL_CTR_EVICTION_COUNTER_FLAGr(u,r) bcmbd_cmicx_reg_block_read(u,CENTRAL_CTR_EVICTION_COUNTER_FLAGr_BLKACC,88,CENTRAL_CTR_EVICTION_COUNTER_FLAGr_OFFSET,0,(r._central_ctr_eviction_counter_flag), 1)
#define WRITE_CENTRAL_CTR_EVICTION_COUNTER_FLAGr(u,r) bcmbd_cmicx_reg_block_write(u,CENTRAL_CTR_EVICTION_COUNTER_FLAGr_BLKACC,88,CENTRAL_CTR_EVICTION_COUNTER_FLAGr_OFFSET,0,&(r._central_ctr_eviction_counter_flag), 1)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_COUNTER_FLAGr'
 */




/*******************************************************************************
 * MEMORY:  CENTRAL_CTR_EVICTION_FIFO
 * BLOCKS:   FLEX_CTR
 * SIZE:     103
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_FIFO.
 */
#define READ_CENTRAL_CTR_EVICTION_FIFOm(u,i,m) bcmbd_cmicx_mem_block_read(u,CENTRAL_CTR_EVICTION_FIFOm_BLKACC,88,CENTRAL_CTR_EVICTION_FIFOm_OFFSET,i,(m._central_ctr_eviction_fifo),4)
#define WRITE_CENTRAL_CTR_EVICTION_FIFOm(u,i,m) bcmbd_cmicx_mem_block_write(u,CENTRAL_CTR_EVICTION_FIFOm_BLKACC,88,CENTRAL_CTR_EVICTION_FIFOm_OFFSET,i,&(m._central_ctr_eviction_fifo),4)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROL
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROL.
 */
#define READ_CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROLr_BLKACC,88,CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROLr_OFFSET,0,(r._central_ctr_eviction_fifo_parity_control), 1)
#define WRITE_CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROLr_BLKACC,88,CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROLr_OFFSET,0,&(r._central_ctr_eviction_fifo_parity_control), 1)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_FIFO_PARITY_ERROR
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_FIFO_PARITY_ERROR.
 */
#define READ_CENTRAL_CTR_EVICTION_FIFO_PARITY_ERRORr(u,r) bcmbd_cmicx_reg_block_read(u,CENTRAL_CTR_EVICTION_FIFO_PARITY_ERRORr_BLKACC,88,CENTRAL_CTR_EVICTION_FIFO_PARITY_ERRORr_OFFSET,0,(r._central_ctr_eviction_fifo_parity_error), 1)
#define WRITE_CENTRAL_CTR_EVICTION_FIFO_PARITY_ERRORr(u,r) bcmbd_cmicx_reg_block_write(u,CENTRAL_CTR_EVICTION_FIFO_PARITY_ERRORr_BLKACC,88,CENTRAL_CTR_EVICTION_FIFO_PARITY_ERRORr_OFFSET,0,&(r._central_ctr_eviction_fifo_parity_error), 1)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_FIFO_PARITY_ERRORr'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROL
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROL.
 */
#define READ_CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROLr_BLKACC,88,CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROLr_OFFSET,0,(r._central_ctr_eviction_fifo_ram_control), 2)
#define WRITE_CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROLr_BLKACC,88,CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROLr_OFFSET,0,&(r._central_ctr_eviction_fifo_ram_control), 2)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_FIFO_STATUS
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_FIFO_STATUS.
 */
#define READ_CENTRAL_CTR_EVICTION_FIFO_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,CENTRAL_CTR_EVICTION_FIFO_STATUSr_BLKACC,88,CENTRAL_CTR_EVICTION_FIFO_STATUSr_OFFSET,0,(r._central_ctr_eviction_fifo_status), 1)
#define WRITE_CENTRAL_CTR_EVICTION_FIFO_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,CENTRAL_CTR_EVICTION_FIFO_STATUSr_BLKACC,88,CENTRAL_CTR_EVICTION_FIFO_STATUSr_OFFSET,0,&(r._central_ctr_eviction_fifo_status), 1)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_INTR_ENABLE
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_INTR_ENABLE.
 */
#define READ_CENTRAL_CTR_EVICTION_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,CENTRAL_CTR_EVICTION_INTR_ENABLEr_BLKACC,88,CENTRAL_CTR_EVICTION_INTR_ENABLEr_OFFSET,0,(r._central_ctr_eviction_intr_enable), 1)
#define WRITE_CENTRAL_CTR_EVICTION_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,CENTRAL_CTR_EVICTION_INTR_ENABLEr_BLKACC,88,CENTRAL_CTR_EVICTION_INTR_ENABLEr_OFFSET,0,&(r._central_ctr_eviction_intr_enable), 1)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_INTR_STATUS
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_INTR_STATUS.
 */
#define READ_CENTRAL_CTR_EVICTION_INTR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,CENTRAL_CTR_EVICTION_INTR_STATUSr_BLKACC,88,CENTRAL_CTR_EVICTION_INTR_STATUSr_OFFSET,0,(r._central_ctr_eviction_intr_status), 1)
#define WRITE_CENTRAL_CTR_EVICTION_INTR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,CENTRAL_CTR_EVICTION_INTR_STATUSr_BLKACC,88,CENTRAL_CTR_EVICTION_INTR_STATUSr_OFFSET,0,&(r._central_ctr_eviction_intr_status), 1)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_INTR_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  COS_MAP_SEL
 * BLOCKS:   IPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access COS_MAP_SEL.
 */
#define READ_COS_MAP_SELm(u,i,m) bcmbd_cmicx_mem_block_read(u,COS_MAP_SELm_BLKACC,1,COS_MAP_SELm_OFFSET,i,(m._cos_map_sel),1)
#define WRITE_COS_MAP_SELm(u,i,m) bcmbd_cmicx_mem_block_write(u,COS_MAP_SELm_BLKACC,1,COS_MAP_SELm_OFFSET,i,&(m._cos_map_sel),1)

/*******************************************************************************
 * End of 'COS_MAP_SELm'
 */




/*******************************************************************************
 * REGISTER:  CPU_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_CONTROL_0.
 */
#define READ_CPU_CONTROL_0r(u,r) bcmbd_cmicx_reg_block_read(u,CPU_CONTROL_0r_BLKACC,1,CPU_CONTROL_0r_OFFSET,0,(r._cpu_control_0), 1)
#define WRITE_CPU_CONTROL_0r(u,r) bcmbd_cmicx_reg_block_write(u,CPU_CONTROL_0r_BLKACC,1,CPU_CONTROL_0r_OFFSET,0,&(r._cpu_control_0), 1)

/*******************************************************************************
 * End of 'CPU_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CPU_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_CONTROL_1.
 */
#define READ_CPU_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,CPU_CONTROL_1r_BLKACC,1,CPU_CONTROL_1r_OFFSET,0,(r._cpu_control_1), 1)
#define WRITE_CPU_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,CPU_CONTROL_1r_BLKACC,1,CPU_CONTROL_1r_OFFSET,0,&(r._cpu_control_1), 1)

/*******************************************************************************
 * End of 'CPU_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CPU_CONTROL_M
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_CONTROL_M.
 */
#define READ_CPU_CONTROL_Mr(u,r) bcmbd_cmicx_reg_block_read(u,CPU_CONTROL_Mr_BLKACC,1,CPU_CONTROL_Mr_OFFSET,0,(r._cpu_control_m), 1)
#define WRITE_CPU_CONTROL_Mr(u,r) bcmbd_cmicx_reg_block_write(u,CPU_CONTROL_Mr_BLKACC,1,CPU_CONTROL_Mr_OFFSET,0,&(r._cpu_control_m), 1)

/*******************************************************************************
 * End of 'CPU_CONTROL_Mr'
 */




/*******************************************************************************
 * MEMORY:  CPU_COS_MAP
 * BLOCKS:   IPIPE
 * SIZE:     233
 */
/*
 * These macros can be used to access CPU_COS_MAP.
 */
#define READ_CPU_COS_MAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,CPU_COS_MAPm_BLKACC,1,CPU_COS_MAPm_OFFSET,i,(m._cpu_cos_map),8)
#define WRITE_CPU_COS_MAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,CPU_COS_MAPm_BLKACC,1,CPU_COS_MAPm_OFFSET,i,&(m._cpu_cos_map),8)

/*******************************************************************************
 * End of 'CPU_COS_MAPm'
 */




/*******************************************************************************
 * REGISTER:  CPU_COS_MAP_CAM_BIST_CONFIG_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access CPU_COS_MAP_CAM_BIST_CONFIG_1_64.
 */
#define READ_CPU_COS_MAP_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,CPU_COS_MAP_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,CPU_COS_MAP_CAM_BIST_CONFIG_1_64r_OFFSET,0,(r._cpu_cos_map_cam_bist_config_1_64),2)
#define WRITE_CPU_COS_MAP_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,CPU_COS_MAP_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,CPU_COS_MAP_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._cpu_cos_map_cam_bist_config_1_64),2)
#define WRITE_CPU_COS_MAP_CAM_BIST_CONFIG_1_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,CPU_COS_MAP_CAM_BIST_CONFIG_1_64r_BLKACC,1,-1,0,CPU_COS_MAP_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._cpu_cos_map_cam_bist_config_1_64),2)

/*******************************************************************************
 * End of 'CPU_COS_MAP_CAM_BIST_CONFIG_1_64r'
 */




/*******************************************************************************
 * REGISTER:  CPU_COS_MAP_CAM_BIST_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access CPU_COS_MAP_CAM_BIST_CONFIG_64.
 */
#define READ_CPU_COS_MAP_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,CPU_COS_MAP_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,CPU_COS_MAP_CAM_BIST_CONFIG_64r_OFFSET,0,(r._cpu_cos_map_cam_bist_config_64),2)
#define WRITE_CPU_COS_MAP_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,CPU_COS_MAP_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,CPU_COS_MAP_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._cpu_cos_map_cam_bist_config_64),2)
#define WRITE_CPU_COS_MAP_CAM_BIST_CONFIG_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,CPU_COS_MAP_CAM_BIST_CONFIG_64r_BLKACC,1,-1,0,CPU_COS_MAP_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._cpu_cos_map_cam_bist_config_64),2)

/*******************************************************************************
 * End of 'CPU_COS_MAP_CAM_BIST_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  CPU_COS_MAP_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_COS_MAP_CAM_BIST_STATUS.
 */
#define READ_CPU_COS_MAP_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,CPU_COS_MAP_CAM_BIST_STATUSr_BLKACC,1,n,0,CPU_COS_MAP_CAM_BIST_STATUSr_OFFSET,0,(r._cpu_cos_map_cam_bist_status),1)
#define WRITE_CPU_COS_MAP_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,CPU_COS_MAP_CAM_BIST_STATUSr_BLKACC,1,n,0,CPU_COS_MAP_CAM_BIST_STATUSr_OFFSET,0,&(r._cpu_cos_map_cam_bist_status),1)
#define WRITE_CPU_COS_MAP_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,CPU_COS_MAP_CAM_BIST_STATUSr_BLKACC,1,-1,0,CPU_COS_MAP_CAM_BIST_STATUSr_OFFSET,0,&(r._cpu_cos_map_cam_bist_status),1)

/*******************************************************************************
 * End of 'CPU_COS_MAP_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CPU_COS_MAP_CAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access CPU_COS_MAP_CAM_CONTROL.
 */
#define READ_CPU_COS_MAP_CAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,CPU_COS_MAP_CAM_CONTROLr_BLKACC,1,n,0,CPU_COS_MAP_CAM_CONTROLr_OFFSET,0,(r._cpu_cos_map_cam_control),2)
#define WRITE_CPU_COS_MAP_CAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,CPU_COS_MAP_CAM_CONTROLr_BLKACC,1,n,0,CPU_COS_MAP_CAM_CONTROLr_OFFSET,0,&(r._cpu_cos_map_cam_control),2)
#define WRITE_CPU_COS_MAP_CAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,CPU_COS_MAP_CAM_CONTROLr_BLKACC,1,-1,0,CPU_COS_MAP_CAM_CONTROLr_OFFSET,0,&(r._cpu_cos_map_cam_control),2)

/*******************************************************************************
 * End of 'CPU_COS_MAP_CAM_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  CPU_COS_MAP_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     15
 */
/*
 * These macros can be used to access CPU_COS_MAP_DATA_ONLY.
 */
#define READ_CPU_COS_MAP_DATA_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,CPU_COS_MAP_DATA_ONLYm_BLKACC,1,CPU_COS_MAP_DATA_ONLYm_OFFSET,i,(m._cpu_cos_map_data_only),1)
#define WRITE_CPU_COS_MAP_DATA_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,CPU_COS_MAP_DATA_ONLYm_BLKACC,1,CPU_COS_MAP_DATA_ONLYm_OFFSET,i,&(m._cpu_cos_map_data_only),1)

/*******************************************************************************
 * End of 'CPU_COS_MAP_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  CPU_COS_MAP_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     218
 */
/*
 * These macros can be used to access CPU_COS_MAP_ONLY.
 */
#define READ_CPU_COS_MAP_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,CPU_COS_MAP_ONLYm_BLKACC,1,CPU_COS_MAP_ONLYm_OFFSET,i,(m._cpu_cos_map_only),7)
#define WRITE_CPU_COS_MAP_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,CPU_COS_MAP_ONLYm_BLKACC,1,CPU_COS_MAP_ONLYm_OFFSET,i,&(m._cpu_cos_map_only),7)

/*******************************************************************************
 * End of 'CPU_COS_MAP_ONLYm'
 */




/*******************************************************************************
 * REGISTER:  CPU_HI_RQE_Q_NUM
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_HI_RQE_Q_NUM.
 */
#define READ_CPU_HI_RQE_Q_NUMr(u,r) bcmbd_cmicx_reg_block_read(u,CPU_HI_RQE_Q_NUMr_BLKACC,1,CPU_HI_RQE_Q_NUMr_OFFSET,0,(r._cpu_hi_rqe_q_num), 1)
#define WRITE_CPU_HI_RQE_Q_NUMr(u,r) bcmbd_cmicx_reg_block_write(u,CPU_HI_RQE_Q_NUMr_BLKACC,1,CPU_HI_RQE_Q_NUMr_OFFSET,0,&(r._cpu_hi_rqe_q_num), 1)

/*******************************************************************************
 * End of 'CPU_HI_RQE_Q_NUMr'
 */




/*******************************************************************************
 * REGISTER:  CPU_LO_RQE_Q_NUM
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_LO_RQE_Q_NUM.
 */
#define READ_CPU_LO_RQE_Q_NUMr(u,r) bcmbd_cmicx_reg_block_read(u,CPU_LO_RQE_Q_NUMr_BLKACC,1,CPU_LO_RQE_Q_NUMr_OFFSET,0,(r._cpu_lo_rqe_q_num), 1)
#define WRITE_CPU_LO_RQE_Q_NUMr(u,r) bcmbd_cmicx_reg_block_write(u,CPU_LO_RQE_Q_NUMr_BLKACC,1,CPU_LO_RQE_Q_NUMr_OFFSET,0,&(r._cpu_lo_rqe_q_num), 1)

/*******************************************************************************
 * End of 'CPU_LO_RQE_Q_NUMr'
 */




/*******************************************************************************
 * REGISTER:  CPU_MASQUERADE_COUNTER_DEST_TYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_MASQUERADE_COUNTER_DEST_TYPE.
 */
#define READ_CPU_MASQUERADE_COUNTER_DEST_TYPEr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,CPU_MASQUERADE_COUNTER_DEST_TYPEr_BLKACC,1,n,0,CPU_MASQUERADE_COUNTER_DEST_TYPEr_OFFSET,i,(r._cpu_masquerade_counter_dest_type),1)
#define WRITE_CPU_MASQUERADE_COUNTER_DEST_TYPEr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,CPU_MASQUERADE_COUNTER_DEST_TYPEr_BLKACC,1,n,0,CPU_MASQUERADE_COUNTER_DEST_TYPEr_OFFSET,i,&(r._cpu_masquerade_counter_dest_type),1)
#define WRITE_CPU_MASQUERADE_COUNTER_DEST_TYPEr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,CPU_MASQUERADE_COUNTER_DEST_TYPEr_BLKACC,1,-1,0,CPU_MASQUERADE_COUNTER_DEST_TYPEr_OFFSET,i,&(r._cpu_masquerade_counter_dest_type),1)

/*******************************************************************************
 * End of 'CPU_MASQUERADE_COUNTER_DEST_TYPEr'
 */




/*******************************************************************************
 * MEMORY:  CPU_PBM
 * BLOCKS:   IPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access CPU_PBM.
 */
#define READ_CPU_PBMm(u,i,m) bcmbd_cmicx_mem_block_read(u,CPU_PBMm_BLKACC,1,CPU_PBMm_OFFSET,i,(m._cpu_pbm),9)
#define WRITE_CPU_PBMm(u,i,m) bcmbd_cmicx_mem_block_write(u,CPU_PBMm_BLKACC,1,CPU_PBMm_OFFSET,i,&(m._cpu_pbm),9)

/*******************************************************************************
 * End of 'CPU_PBMm'
 */




/*******************************************************************************
 * REGISTER:  CPU_PKT_PROFILE_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_PKT_PROFILE_1.
 */
#define READ_CPU_PKT_PROFILE_1r(u,r) bcmbd_cmicx_reg_block_read(u,CPU_PKT_PROFILE_1r_BLKACC,1,CPU_PKT_PROFILE_1r_OFFSET,0,(r._cpu_pkt_profile_1), 1)
#define WRITE_CPU_PKT_PROFILE_1r(u,r) bcmbd_cmicx_reg_block_write(u,CPU_PKT_PROFILE_1r_BLKACC,1,CPU_PKT_PROFILE_1r_OFFSET,0,&(r._cpu_pkt_profile_1), 1)

/*******************************************************************************
 * End of 'CPU_PKT_PROFILE_1r'
 */




/*******************************************************************************
 * REGISTER:  CPU_PKT_PROFILE_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_PKT_PROFILE_2.
 */
#define READ_CPU_PKT_PROFILE_2r(u,r) bcmbd_cmicx_reg_block_read(u,CPU_PKT_PROFILE_2r_BLKACC,1,CPU_PKT_PROFILE_2r_OFFSET,0,(r._cpu_pkt_profile_2), 1)
#define WRITE_CPU_PKT_PROFILE_2r(u,r) bcmbd_cmicx_reg_block_write(u,CPU_PKT_PROFILE_2r_BLKACC,1,CPU_PKT_PROFILE_2r_OFFSET,0,&(r._cpu_pkt_profile_2), 1)

/*******************************************************************************
 * End of 'CPU_PKT_PROFILE_2r'
 */




/*******************************************************************************
 * REGISTER:  CPU_PKT_PROFILE_3
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access CPU_PKT_PROFILE_3.
 */
#define READ_CPU_PKT_PROFILE_3r(u,r) bcmbd_cmicx_reg_block_read(u,CPU_PKT_PROFILE_3r_BLKACC,1,CPU_PKT_PROFILE_3r_OFFSET,0,(r._cpu_pkt_profile_3), 2)
#define WRITE_CPU_PKT_PROFILE_3r(u,r) bcmbd_cmicx_reg_block_write(u,CPU_PKT_PROFILE_3r_BLKACC,1,CPU_PKT_PROFILE_3r_OFFSET,0,&(r._cpu_pkt_profile_3), 2)

/*******************************************************************************
 * End of 'CPU_PKT_PROFILE_3r'
 */




/*******************************************************************************
 * MEMORY:  CPU_TS_MAP
 * BLOCKS:   IPIPE
 * SIZE:     11
 */
/*
 * These macros can be used to access CPU_TS_MAP.
 */
#define READ_CPU_TS_MAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,CPU_TS_MAPm_BLKACC,1,CPU_TS_MAPm_OFFSET,i,(m._cpu_ts_map),1)
#define WRITE_CPU_TS_MAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,CPU_TS_MAPm_BLKACC,1,CPU_TS_MAPm_OFFSET,i,&(m._cpu_ts_map),1)

/*******************************************************************************
 * End of 'CPU_TS_MAPm'
 */




/*******************************************************************************
 * MEMORY:  DCN_ELIGIBILITY_IP_PROTO
 * BLOCKS:   IPIPE
 * SIZE:     256
 */
/*
 * These macros can be used to access DCN_ELIGIBILITY_IP_PROTO.
 */
#define READ_DCN_ELIGIBILITY_IP_PROTOm(u,i,m) bcmbd_cmicx_mem_block_read(u,DCN_ELIGIBILITY_IP_PROTOm_BLKACC,1,DCN_ELIGIBILITY_IP_PROTOm_OFFSET,i,(m._dcn_eligibility_ip_proto),8)
#define WRITE_DCN_ELIGIBILITY_IP_PROTOm(u,i,m) bcmbd_cmicx_mem_block_write(u,DCN_ELIGIBILITY_IP_PROTOm_BLKACC,1,DCN_ELIGIBILITY_IP_PROTOm_OFFSET,i,&(m._dcn_eligibility_ip_proto),8)

/*******************************************************************************
 * End of 'DCN_ELIGIBILITY_IP_PROTOm'
 */




/*******************************************************************************
 * MEMORY:  DCN_ELIGIBILITY_IP_TOS
 * BLOCKS:   IPIPE
 * SIZE:     256
 */
/*
 * These macros can be used to access DCN_ELIGIBILITY_IP_TOS.
 */
#define READ_DCN_ELIGIBILITY_IP_TOSm(u,i,m) bcmbd_cmicx_mem_block_read(u,DCN_ELIGIBILITY_IP_TOSm_BLKACC,1,DCN_ELIGIBILITY_IP_TOSm_OFFSET,i,(m._dcn_eligibility_ip_tos),8)
#define WRITE_DCN_ELIGIBILITY_IP_TOSm(u,i,m) bcmbd_cmicx_mem_block_write(u,DCN_ELIGIBILITY_IP_TOSm_BLKACC,1,DCN_ELIGIBILITY_IP_TOSm_OFFSET,i,&(m._dcn_eligibility_ip_tos),8)

/*******************************************************************************
 * End of 'DCN_ELIGIBILITY_IP_TOSm'
 */




/*******************************************************************************
 * MEMORY:  DCN_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     21
 */
/*
 * These macros can be used to access DCN_PROFILE.
 */
#define READ_DCN_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,DCN_PROFILEm_BLKACC,1,DCN_PROFILEm_OFFSET,i,(m._dcn_profile),1)
#define WRITE_DCN_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,DCN_PROFILEm_BLKACC,1,DCN_PROFILEm_OFFSET,i,&(m._dcn_profile),1)

/*******************************************************************************
 * End of 'DCN_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_CURRENT_TIME
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DLB_ECMP_CURRENT_TIME.
 */
#define READ_DLB_ECMP_CURRENT_TIMEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,DLB_ECMP_CURRENT_TIMEr_BLKACC,1,n,0,DLB_ECMP_CURRENT_TIMEr_OFFSET,0,(r._dlb_ecmp_current_time),1)
#define WRITE_DLB_ECMP_CURRENT_TIMEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_CURRENT_TIMEr_BLKACC,1,n,0,DLB_ECMP_CURRENT_TIMEr_OFFSET,0,&(r._dlb_ecmp_current_time),1)
#define WRITE_DLB_ECMP_CURRENT_TIMEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_CURRENT_TIMEr_BLKACC,1,-1,0,DLB_ECMP_CURRENT_TIMEr_OFFSET,0,&(r._dlb_ecmp_current_time),1)

/*******************************************************************************
 * End of 'DLB_ECMP_CURRENT_TIMEr'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_EEM_CONFIGURATION
 * BLOCKS:   IPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access DLB_ECMP_EEM_CONFIGURATION.
 */
#define READ_DLB_ECMP_EEM_CONFIGURATIONm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_EEM_CONFIGURATIONm_BLKACC,1,DLB_ECMP_EEM_CONFIGURATIONm_OFFSET,i,(m._dlb_ecmp_eem_configuration),1)
#define WRITE_DLB_ECMP_EEM_CONFIGURATIONm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_EEM_CONFIGURATIONm_BLKACC,1,DLB_ECMP_EEM_CONFIGURATIONm_OFFSET,i,&(m._dlb_ecmp_eem_configuration),1)

/*******************************************************************************
 * End of 'DLB_ECMP_EEM_CONFIGURATIONm'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_ETHERTYPE_ELIGIBILITY_MAP
 * BLOCKS:   IPIPE
 * SIZE:     17
 */
/*
 * These macros can be used to access DLB_ECMP_ETHERTYPE_ELIGIBILITY_MAP.
 */
#define READ_DLB_ECMP_ETHERTYPE_ELIGIBILITY_MAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_ETHERTYPE_ELIGIBILITY_MAPm_BLKACC,1,DLB_ECMP_ETHERTYPE_ELIGIBILITY_MAPm_OFFSET,i,(m._dlb_ecmp_ethertype_eligibility_map),1)
#define WRITE_DLB_ECMP_ETHERTYPE_ELIGIBILITY_MAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_ETHERTYPE_ELIGIBILITY_MAPm_BLKACC,1,DLB_ECMP_ETHERTYPE_ELIGIBILITY_MAPm_OFFSET,i,&(m._dlb_ecmp_ethertype_eligibility_map),1)

/*******************************************************************************
 * End of 'DLB_ECMP_ETHERTYPE_ELIGIBILITY_MAPm'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_FINAL_MEMBERS_QUALITY_MEASURE
 * BLOCKS:   IPIPE
 * SIZE:     6
 */
/*
 * These macros can be used to access DLB_ECMP_FINAL_MEMBERS_QUALITY_MEASURE.
 */
#define READ_DLB_ECMP_FINAL_MEMBERS_QUALITY_MEASUREm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_FINAL_MEMBERS_QUALITY_MEASUREm_BLKACC,1,DLB_ECMP_FINAL_MEMBERS_QUALITY_MEASUREm_OFFSET,i,(m._dlb_ecmp_final_members_quality_measure),1)
#define WRITE_DLB_ECMP_FINAL_MEMBERS_QUALITY_MEASUREm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_FINAL_MEMBERS_QUALITY_MEASUREm_BLKACC,1,DLB_ECMP_FINAL_MEMBERS_QUALITY_MEASUREm_OFFSET,i,&(m._dlb_ecmp_final_members_quality_measure),1)

/*******************************************************************************
 * End of 'DLB_ECMP_FINAL_MEMBERS_QUALITY_MEASUREm'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_FLOWSET_INST0
 * BLOCKS:   IPIPE
 * SIZE:     24
 */
/*
 * These macros can be used to access DLB_ECMP_FLOWSET_INST0.
 */
#define READ_DLB_ECMP_FLOWSET_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,DLB_ECMP_FLOWSET_INST0m_BLKACC,1,n,0,DLB_ECMP_FLOWSET_INST0m_OFFSET,i,(m._dlb_ecmp_flowset_inst0),1)
#define WRITE_DLB_ECMP_FLOWSET_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_FLOWSET_INST0m_BLKACC,1,n,0,DLB_ECMP_FLOWSET_INST0m_OFFSET,i,&(m._dlb_ecmp_flowset_inst0),1)
#define WRITE_DLB_ECMP_FLOWSET_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_FLOWSET_INST0m_BLKACC,1,-1,0,DLB_ECMP_FLOWSET_INST0m_OFFSET,i,&(m._dlb_ecmp_flowset_inst0),1)

/*******************************************************************************
 * End of 'DLB_ECMP_FLOWSET_INST0m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_FLOWSET_INST1
 * BLOCKS:   IPIPE
 * SIZE:     24
 */
/*
 * These macros can be used to access DLB_ECMP_FLOWSET_INST1.
 */
#define READ_DLB_ECMP_FLOWSET_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,DLB_ECMP_FLOWSET_INST1m_BLKACC,1,n,0,DLB_ECMP_FLOWSET_INST1m_OFFSET,i,(m._dlb_ecmp_flowset_inst1),1)
#define WRITE_DLB_ECMP_FLOWSET_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_FLOWSET_INST1m_BLKACC,1,n,0,DLB_ECMP_FLOWSET_INST1m_OFFSET,i,&(m._dlb_ecmp_flowset_inst1),1)
#define WRITE_DLB_ECMP_FLOWSET_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_FLOWSET_INST1m_BLKACC,1,-1,0,DLB_ECMP_FLOWSET_INST1m_OFFSET,i,&(m._dlb_ecmp_flowset_inst1),1)

/*******************************************************************************
 * End of 'DLB_ECMP_FLOWSET_INST1m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_FLOWSET_MEMBER_INST0
 * BLOCKS:   IPIPE
 * SIZE:     12
 */
/*
 * These macros can be used to access DLB_ECMP_FLOWSET_MEMBER_INST0.
 */
#define READ_DLB_ECMP_FLOWSET_MEMBER_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,DLB_ECMP_FLOWSET_MEMBER_INST0m_BLKACC,1,n,0,DLB_ECMP_FLOWSET_MEMBER_INST0m_OFFSET,i,(m._dlb_ecmp_flowset_member_inst0),1)
#define WRITE_DLB_ECMP_FLOWSET_MEMBER_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_FLOWSET_MEMBER_INST0m_BLKACC,1,n,0,DLB_ECMP_FLOWSET_MEMBER_INST0m_OFFSET,i,&(m._dlb_ecmp_flowset_member_inst0),1)
#define WRITE_DLB_ECMP_FLOWSET_MEMBER_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_FLOWSET_MEMBER_INST0m_BLKACC,1,-1,0,DLB_ECMP_FLOWSET_MEMBER_INST0m_OFFSET,i,&(m._dlb_ecmp_flowset_member_inst0),1)

/*******************************************************************************
 * End of 'DLB_ECMP_FLOWSET_MEMBER_INST0m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_FLOWSET_MEMBER_INST1
 * BLOCKS:   IPIPE
 * SIZE:     12
 */
/*
 * These macros can be used to access DLB_ECMP_FLOWSET_MEMBER_INST1.
 */
#define READ_DLB_ECMP_FLOWSET_MEMBER_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,DLB_ECMP_FLOWSET_MEMBER_INST1m_BLKACC,1,n,0,DLB_ECMP_FLOWSET_MEMBER_INST1m_OFFSET,i,(m._dlb_ecmp_flowset_member_inst1),1)
#define WRITE_DLB_ECMP_FLOWSET_MEMBER_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_FLOWSET_MEMBER_INST1m_BLKACC,1,n,0,DLB_ECMP_FLOWSET_MEMBER_INST1m_OFFSET,i,&(m._dlb_ecmp_flowset_member_inst1),1)
#define WRITE_DLB_ECMP_FLOWSET_MEMBER_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_FLOWSET_MEMBER_INST1m_BLKACC,1,-1,0,DLB_ECMP_FLOWSET_MEMBER_INST1m_OFFSET,i,&(m._dlb_ecmp_flowset_member_inst1),1)

/*******************************************************************************
 * End of 'DLB_ECMP_FLOWSET_MEMBER_INST1m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     72
 */
/*
 * These macros can be used to access DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST0.
 */
#define READ_DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST0m_BLKACC,1,n,0,DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST0m_OFFSET,i,(m._dlb_ecmp_flowset_timestamp_page_inst0),3)
#define WRITE_DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST0m_BLKACC,1,n,0,DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST0m_OFFSET,i,&(m._dlb_ecmp_flowset_timestamp_page_inst0),3)
#define WRITE_DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST0m_BLKACC,1,-1,0,DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST0m_OFFSET,i,&(m._dlb_ecmp_flowset_timestamp_page_inst0),3)

/*******************************************************************************
 * End of 'DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     72
 */
/*
 * These macros can be used to access DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST1.
 */
#define READ_DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST1m_BLKACC,1,n,0,DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST1m_OFFSET,i,(m._dlb_ecmp_flowset_timestamp_page_inst1),3)
#define WRITE_DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST1m_BLKACC,1,n,0,DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST1m_OFFSET,i,&(m._dlb_ecmp_flowset_timestamp_page_inst1),3)
#define WRITE_DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST1m_BLKACC,1,-1,0,DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST1m_OFFSET,i,&(m._dlb_ecmp_flowset_timestamp_page_inst1),3)

/*******************************************************************************
 * End of 'DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GLB_QUANTIZE_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     63
 */
/*
 * These macros can be used to access DLB_ECMP_GLB_QUANTIZE_THRESHOLD.
 */
#define READ_DLB_ECMP_GLB_QUANTIZE_THRESHOLDm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GLB_QUANTIZE_THRESHOLDm_BLKACC,1,DLB_ECMP_GLB_QUANTIZE_THRESHOLDm_OFFSET,i,(m._dlb_ecmp_glb_quantize_threshold),2)
#define WRITE_DLB_ECMP_GLB_QUANTIZE_THRESHOLDm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GLB_QUANTIZE_THRESHOLDm_BLKACC,1,DLB_ECMP_GLB_QUANTIZE_THRESHOLDm_OFFSET,i,&(m._dlb_ecmp_glb_quantize_threshold),2)

/*******************************************************************************
 * End of 'DLB_ECMP_GLB_QUANTIZE_THRESHOLDm'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_ALT_NHI_MEMBERS_0_TO_12
 * BLOCKS:   IPIPE
 * SIZE:     217
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_ALT_NHI_MEMBERS_0_TO_12.
 */
#define READ_DLB_ECMP_GROUP_ALT_NHI_MEMBERS_0_TO_12m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_0_TO_12m_BLKACC,1,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_0_TO_12m_OFFSET,i,(m._dlb_ecmp_group_alt_nhi_members_0_to_12),7)
#define WRITE_DLB_ECMP_GROUP_ALT_NHI_MEMBERS_0_TO_12m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_0_TO_12m_BLKACC,1,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_0_TO_12m_OFFSET,i,&(m._dlb_ecmp_group_alt_nhi_members_0_to_12),7)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_ALT_NHI_MEMBERS_0_TO_12m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_ALT_NHI_MEMBERS_13_TO_25
 * BLOCKS:   IPIPE
 * SIZE:     217
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_ALT_NHI_MEMBERS_13_TO_25.
 */
#define READ_DLB_ECMP_GROUP_ALT_NHI_MEMBERS_13_TO_25m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_13_TO_25m_BLKACC,1,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_13_TO_25m_OFFSET,i,(m._dlb_ecmp_group_alt_nhi_members_13_to_25),7)
#define WRITE_DLB_ECMP_GROUP_ALT_NHI_MEMBERS_13_TO_25m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_13_TO_25m_BLKACC,1,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_13_TO_25m_OFFSET,i,&(m._dlb_ecmp_group_alt_nhi_members_13_to_25),7)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_ALT_NHI_MEMBERS_13_TO_25m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_ALT_NHI_MEMBERS_26_TO_38
 * BLOCKS:   IPIPE
 * SIZE:     217
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_ALT_NHI_MEMBERS_26_TO_38.
 */
#define READ_DLB_ECMP_GROUP_ALT_NHI_MEMBERS_26_TO_38m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_26_TO_38m_BLKACC,1,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_26_TO_38m_OFFSET,i,(m._dlb_ecmp_group_alt_nhi_members_26_to_38),7)
#define WRITE_DLB_ECMP_GROUP_ALT_NHI_MEMBERS_26_TO_38m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_26_TO_38m_BLKACC,1,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_26_TO_38m_OFFSET,i,&(m._dlb_ecmp_group_alt_nhi_members_26_to_38),7)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_ALT_NHI_MEMBERS_26_TO_38m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_ALT_NHI_MEMBERS_39_TO_51
 * BLOCKS:   IPIPE
 * SIZE:     217
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_ALT_NHI_MEMBERS_39_TO_51.
 */
#define READ_DLB_ECMP_GROUP_ALT_NHI_MEMBERS_39_TO_51m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_39_TO_51m_BLKACC,1,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_39_TO_51m_OFFSET,i,(m._dlb_ecmp_group_alt_nhi_members_39_to_51),7)
#define WRITE_DLB_ECMP_GROUP_ALT_NHI_MEMBERS_39_TO_51m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_39_TO_51m_BLKACC,1,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_39_TO_51m_OFFSET,i,&(m._dlb_ecmp_group_alt_nhi_members_39_to_51),7)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_ALT_NHI_MEMBERS_39_TO_51m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_ALT_NHI_MEMBERS_52_TO_63
 * BLOCKS:   IPIPE
 * SIZE:     201
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_ALT_NHI_MEMBERS_52_TO_63.
 */
#define READ_DLB_ECMP_GROUP_ALT_NHI_MEMBERS_52_TO_63m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_52_TO_63m_BLKACC,1,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_52_TO_63m_OFFSET,i,(m._dlb_ecmp_group_alt_nhi_members_52_to_63),7)
#define WRITE_DLB_ECMP_GROUP_ALT_NHI_MEMBERS_52_TO_63m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_52_TO_63m_BLKACC,1,DLB_ECMP_GROUP_ALT_NHI_MEMBERS_52_TO_63m_OFFSET,i,&(m._dlb_ecmp_group_alt_nhi_members_52_to_63),7)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_ALT_NHI_MEMBERS_52_TO_63m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_ALT_PORT_MEMBERS_0_TO_15
 * BLOCKS:   IPIPE
 * SIZE:     169
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_ALT_PORT_MEMBERS_0_TO_15.
 */
#define READ_DLB_ECMP_GROUP_ALT_PORT_MEMBERS_0_TO_15m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_0_TO_15m_BLKACC,1,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_0_TO_15m_OFFSET,i,(m._dlb_ecmp_group_alt_port_members_0_to_15),6)
#define WRITE_DLB_ECMP_GROUP_ALT_PORT_MEMBERS_0_TO_15m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_0_TO_15m_BLKACC,1,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_0_TO_15m_OFFSET,i,&(m._dlb_ecmp_group_alt_port_members_0_to_15),6)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_ALT_PORT_MEMBERS_0_TO_15m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_ALT_PORT_MEMBERS_16_TO_31
 * BLOCKS:   IPIPE
 * SIZE:     169
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_ALT_PORT_MEMBERS_16_TO_31.
 */
#define READ_DLB_ECMP_GROUP_ALT_PORT_MEMBERS_16_TO_31m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_16_TO_31m_BLKACC,1,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_16_TO_31m_OFFSET,i,(m._dlb_ecmp_group_alt_port_members_16_to_31),6)
#define WRITE_DLB_ECMP_GROUP_ALT_PORT_MEMBERS_16_TO_31m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_16_TO_31m_BLKACC,1,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_16_TO_31m_OFFSET,i,&(m._dlb_ecmp_group_alt_port_members_16_to_31),6)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_ALT_PORT_MEMBERS_16_TO_31m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_ALT_PORT_MEMBERS_32_TO_47
 * BLOCKS:   IPIPE
 * SIZE:     169
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_ALT_PORT_MEMBERS_32_TO_47.
 */
#define READ_DLB_ECMP_GROUP_ALT_PORT_MEMBERS_32_TO_47m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_32_TO_47m_BLKACC,1,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_32_TO_47m_OFFSET,i,(m._dlb_ecmp_group_alt_port_members_32_to_47),6)
#define WRITE_DLB_ECMP_GROUP_ALT_PORT_MEMBERS_32_TO_47m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_32_TO_47m_BLKACC,1,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_32_TO_47m_OFFSET,i,&(m._dlb_ecmp_group_alt_port_members_32_to_47),6)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_ALT_PORT_MEMBERS_32_TO_47m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_ALT_PORT_MEMBERS_48_TO_63
 * BLOCKS:   IPIPE
 * SIZE:     169
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_ALT_PORT_MEMBERS_48_TO_63.
 */
#define READ_DLB_ECMP_GROUP_ALT_PORT_MEMBERS_48_TO_63m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_48_TO_63m_BLKACC,1,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_48_TO_63m_OFFSET,i,(m._dlb_ecmp_group_alt_port_members_48_to_63),6)
#define WRITE_DLB_ECMP_GROUP_ALT_PORT_MEMBERS_48_TO_63m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_48_TO_63m_BLKACC,1,DLB_ECMP_GROUP_ALT_PORT_MEMBERS_48_TO_63m_OFFSET,i,&(m._dlb_ecmp_group_alt_port_members_48_to_63),6)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_ALT_PORT_MEMBERS_48_TO_63m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     60
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_CONTROL.
 */
#define READ_DLB_ECMP_GROUP_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_CONTROLm_BLKACC,1,DLB_ECMP_GROUP_CONTROLm_OFFSET,i,(m._dlb_ecmp_group_control),2)
#define WRITE_DLB_ECMP_GROUP_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_CONTROLm_BLKACC,1,DLB_ECMP_GROUP_CONTROLm_OFFSET,i,&(m._dlb_ecmp_group_control),2)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_MEMBERSHIP
 * BLOCKS:   IPIPE
 * SIZE:     555
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_MEMBERSHIP.
 */
#define READ_DLB_ECMP_GROUP_MEMBERSHIPm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_MEMBERSHIPm_BLKACC,1,DLB_ECMP_GROUP_MEMBERSHIPm_OFFSET,i,(m._dlb_ecmp_group_membership),18)
#define WRITE_DLB_ECMP_GROUP_MEMBERSHIPm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_MEMBERSHIPm_BLKACC,1,DLB_ECMP_GROUP_MEMBERSHIPm_OFFSET,i,&(m._dlb_ecmp_group_membership),18)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_MEMBERSHIPm'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_MONITOR_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     43
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_MONITOR_CONTROL.
 */
#define READ_DLB_ECMP_GROUP_MONITOR_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_MONITOR_CONTROLm_BLKACC,1,DLB_ECMP_GROUP_MONITOR_CONTROLm_OFFSET,i,(m._dlb_ecmp_group_monitor_control),2)
#define WRITE_DLB_ECMP_GROUP_MONITOR_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_MONITOR_CONTROLm_BLKACC,1,DLB_ECMP_GROUP_MONITOR_CONTROLm_OFFSET,i,&(m._dlb_ecmp_group_monitor_control),2)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_MONITOR_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_NHI_MEMBERS_0_TO_12
 * BLOCKS:   IPIPE
 * SIZE:     217
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_NHI_MEMBERS_0_TO_12.
 */
#define READ_DLB_ECMP_GROUP_NHI_MEMBERS_0_TO_12m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_NHI_MEMBERS_0_TO_12m_BLKACC,1,DLB_ECMP_GROUP_NHI_MEMBERS_0_TO_12m_OFFSET,i,(m._dlb_ecmp_group_nhi_members_0_to_12),7)
#define WRITE_DLB_ECMP_GROUP_NHI_MEMBERS_0_TO_12m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_NHI_MEMBERS_0_TO_12m_BLKACC,1,DLB_ECMP_GROUP_NHI_MEMBERS_0_TO_12m_OFFSET,i,&(m._dlb_ecmp_group_nhi_members_0_to_12),7)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_NHI_MEMBERS_0_TO_12m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_NHI_MEMBERS_13_TO_25
 * BLOCKS:   IPIPE
 * SIZE:     217
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_NHI_MEMBERS_13_TO_25.
 */
#define READ_DLB_ECMP_GROUP_NHI_MEMBERS_13_TO_25m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_NHI_MEMBERS_13_TO_25m_BLKACC,1,DLB_ECMP_GROUP_NHI_MEMBERS_13_TO_25m_OFFSET,i,(m._dlb_ecmp_group_nhi_members_13_to_25),7)
#define WRITE_DLB_ECMP_GROUP_NHI_MEMBERS_13_TO_25m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_NHI_MEMBERS_13_TO_25m_BLKACC,1,DLB_ECMP_GROUP_NHI_MEMBERS_13_TO_25m_OFFSET,i,&(m._dlb_ecmp_group_nhi_members_13_to_25),7)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_NHI_MEMBERS_13_TO_25m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_NHI_MEMBERS_26_TO_38
 * BLOCKS:   IPIPE
 * SIZE:     217
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_NHI_MEMBERS_26_TO_38.
 */
#define READ_DLB_ECMP_GROUP_NHI_MEMBERS_26_TO_38m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_NHI_MEMBERS_26_TO_38m_BLKACC,1,DLB_ECMP_GROUP_NHI_MEMBERS_26_TO_38m_OFFSET,i,(m._dlb_ecmp_group_nhi_members_26_to_38),7)
#define WRITE_DLB_ECMP_GROUP_NHI_MEMBERS_26_TO_38m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_NHI_MEMBERS_26_TO_38m_BLKACC,1,DLB_ECMP_GROUP_NHI_MEMBERS_26_TO_38m_OFFSET,i,&(m._dlb_ecmp_group_nhi_members_26_to_38),7)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_NHI_MEMBERS_26_TO_38m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_NHI_MEMBERS_39_TO_51
 * BLOCKS:   IPIPE
 * SIZE:     217
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_NHI_MEMBERS_39_TO_51.
 */
#define READ_DLB_ECMP_GROUP_NHI_MEMBERS_39_TO_51m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_NHI_MEMBERS_39_TO_51m_BLKACC,1,DLB_ECMP_GROUP_NHI_MEMBERS_39_TO_51m_OFFSET,i,(m._dlb_ecmp_group_nhi_members_39_to_51),7)
#define WRITE_DLB_ECMP_GROUP_NHI_MEMBERS_39_TO_51m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_NHI_MEMBERS_39_TO_51m_BLKACC,1,DLB_ECMP_GROUP_NHI_MEMBERS_39_TO_51m_OFFSET,i,&(m._dlb_ecmp_group_nhi_members_39_to_51),7)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_NHI_MEMBERS_39_TO_51m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_NHI_MEMBERS_52_TO_63
 * BLOCKS:   IPIPE
 * SIZE:     201
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_NHI_MEMBERS_52_TO_63.
 */
#define READ_DLB_ECMP_GROUP_NHI_MEMBERS_52_TO_63m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_NHI_MEMBERS_52_TO_63m_BLKACC,1,DLB_ECMP_GROUP_NHI_MEMBERS_52_TO_63m_OFFSET,i,(m._dlb_ecmp_group_nhi_members_52_to_63),7)
#define WRITE_DLB_ECMP_GROUP_NHI_MEMBERS_52_TO_63m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_NHI_MEMBERS_52_TO_63m_BLKACC,1,DLB_ECMP_GROUP_NHI_MEMBERS_52_TO_63m_OFFSET,i,&(m._dlb_ecmp_group_nhi_members_52_to_63),7)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_NHI_MEMBERS_52_TO_63m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_PORT_MEMBERS_0_TO_15
 * BLOCKS:   IPIPE
 * SIZE:     169
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_PORT_MEMBERS_0_TO_15.
 */
#define READ_DLB_ECMP_GROUP_PORT_MEMBERS_0_TO_15m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_PORT_MEMBERS_0_TO_15m_BLKACC,1,DLB_ECMP_GROUP_PORT_MEMBERS_0_TO_15m_OFFSET,i,(m._dlb_ecmp_group_port_members_0_to_15),6)
#define WRITE_DLB_ECMP_GROUP_PORT_MEMBERS_0_TO_15m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_PORT_MEMBERS_0_TO_15m_BLKACC,1,DLB_ECMP_GROUP_PORT_MEMBERS_0_TO_15m_OFFSET,i,&(m._dlb_ecmp_group_port_members_0_to_15),6)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_PORT_MEMBERS_0_TO_15m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_PORT_MEMBERS_16_TO_31
 * BLOCKS:   IPIPE
 * SIZE:     169
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_PORT_MEMBERS_16_TO_31.
 */
#define READ_DLB_ECMP_GROUP_PORT_MEMBERS_16_TO_31m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_PORT_MEMBERS_16_TO_31m_BLKACC,1,DLB_ECMP_GROUP_PORT_MEMBERS_16_TO_31m_OFFSET,i,(m._dlb_ecmp_group_port_members_16_to_31),6)
#define WRITE_DLB_ECMP_GROUP_PORT_MEMBERS_16_TO_31m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_PORT_MEMBERS_16_TO_31m_BLKACC,1,DLB_ECMP_GROUP_PORT_MEMBERS_16_TO_31m_OFFSET,i,&(m._dlb_ecmp_group_port_members_16_to_31),6)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_PORT_MEMBERS_16_TO_31m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_PORT_MEMBERS_32_TO_47
 * BLOCKS:   IPIPE
 * SIZE:     169
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_PORT_MEMBERS_32_TO_47.
 */
#define READ_DLB_ECMP_GROUP_PORT_MEMBERS_32_TO_47m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_PORT_MEMBERS_32_TO_47m_BLKACC,1,DLB_ECMP_GROUP_PORT_MEMBERS_32_TO_47m_OFFSET,i,(m._dlb_ecmp_group_port_members_32_to_47),6)
#define WRITE_DLB_ECMP_GROUP_PORT_MEMBERS_32_TO_47m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_PORT_MEMBERS_32_TO_47m_BLKACC,1,DLB_ECMP_GROUP_PORT_MEMBERS_32_TO_47m_OFFSET,i,&(m._dlb_ecmp_group_port_members_32_to_47),6)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_PORT_MEMBERS_32_TO_47m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_PORT_MEMBERS_48_TO_63
 * BLOCKS:   IPIPE
 * SIZE:     169
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_PORT_MEMBERS_48_TO_63.
 */
#define READ_DLB_ECMP_GROUP_PORT_MEMBERS_48_TO_63m(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_GROUP_PORT_MEMBERS_48_TO_63m_BLKACC,1,DLB_ECMP_GROUP_PORT_MEMBERS_48_TO_63m_OFFSET,i,(m._dlb_ecmp_group_port_members_48_to_63),6)
#define WRITE_DLB_ECMP_GROUP_PORT_MEMBERS_48_TO_63m(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_GROUP_PORT_MEMBERS_48_TO_63m_BLKACC,1,DLB_ECMP_GROUP_PORT_MEMBERS_48_TO_63m_OFFSET,i,&(m._dlb_ecmp_group_port_members_48_to_63),6)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_PORT_MEMBERS_48_TO_63m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_STATS_INST0
 * BLOCKS:   IPIPE
 * SIZE:     101
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_STATS_INST0.
 */
#define READ_DLB_ECMP_GROUP_STATS_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,DLB_ECMP_GROUP_STATS_INST0m_BLKACC,1,n,0,DLB_ECMP_GROUP_STATS_INST0m_OFFSET,i,(m._dlb_ecmp_group_stats_inst0),4)
#define WRITE_DLB_ECMP_GROUP_STATS_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_GROUP_STATS_INST0m_BLKACC,1,n,0,DLB_ECMP_GROUP_STATS_INST0m_OFFSET,i,&(m._dlb_ecmp_group_stats_inst0),4)
#define WRITE_DLB_ECMP_GROUP_STATS_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_GROUP_STATS_INST0m_BLKACC,1,-1,0,DLB_ECMP_GROUP_STATS_INST0m_OFFSET,i,&(m._dlb_ecmp_group_stats_inst0),4)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_STATS_INST0m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_GROUP_STATS_INST1
 * BLOCKS:   IPIPE
 * SIZE:     101
 */
/*
 * These macros can be used to access DLB_ECMP_GROUP_STATS_INST1.
 */
#define READ_DLB_ECMP_GROUP_STATS_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,DLB_ECMP_GROUP_STATS_INST1m_BLKACC,1,n,0,DLB_ECMP_GROUP_STATS_INST1m_OFFSET,i,(m._dlb_ecmp_group_stats_inst1),4)
#define WRITE_DLB_ECMP_GROUP_STATS_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_GROUP_STATS_INST1m_BLKACC,1,n,0,DLB_ECMP_GROUP_STATS_INST1m_OFFSET,i,&(m._dlb_ecmp_group_stats_inst1),4)
#define WRITE_DLB_ECMP_GROUP_STATS_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_GROUP_STATS_INST1m_BLKACC,1,-1,0,DLB_ECMP_GROUP_STATS_INST1m_OFFSET,i,&(m._dlb_ecmp_group_stats_inst1),4)

/*******************************************************************************
 * End of 'DLB_ECMP_GROUP_STATS_INST1m'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_HW_RESET_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DLB_ECMP_HW_RESET_CONTROL.
 */
#define READ_DLB_ECMP_HW_RESET_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,DLB_ECMP_HW_RESET_CONTROLr_BLKACC,1,DLB_ECMP_HW_RESET_CONTROLr_OFFSET,0,(r._dlb_ecmp_hw_reset_control), 1)
#define WRITE_DLB_ECMP_HW_RESET_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,DLB_ECMP_HW_RESET_CONTROLr_BLKACC,1,DLB_ECMP_HW_RESET_CONTROLr_OFFSET,0,&(r._dlb_ecmp_hw_reset_control), 1)

/*******************************************************************************
 * End of 'DLB_ECMP_HW_RESET_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_INTR_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DLB_ECMP_INTR_ENABLE.
 */
#define READ_DLB_ECMP_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,DLB_ECMP_INTR_ENABLEr_BLKACC,1,DLB_ECMP_INTR_ENABLEr_OFFSET,0,(r._dlb_ecmp_intr_enable), 1)
#define WRITE_DLB_ECMP_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,DLB_ECMP_INTR_ENABLEr_BLKACC,1,DLB_ECMP_INTR_ENABLEr_OFFSET,0,&(r._dlb_ecmp_intr_enable), 1)

/*******************************************************************************
 * End of 'DLB_ECMP_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_INTR_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DLB_ECMP_INTR_STATUS.
 */
#define READ_DLB_ECMP_INTR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,DLB_ECMP_INTR_STATUSr_BLKACC,1,DLB_ECMP_INTR_STATUSr_OFFSET,0,(r._dlb_ecmp_intr_status), 1)
#define WRITE_DLB_ECMP_INTR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,DLB_ECMP_INTR_STATUSr_BLKACC,1,DLB_ECMP_INTR_STATUSr_OFFSET,0,&(r._dlb_ecmp_intr_status), 1)

/*******************************************************************************
 * End of 'DLB_ECMP_INTR_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_LINK_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     544
 */
/*
 * These macros can be used to access DLB_ECMP_LINK_CONTROL.
 */
#define READ_DLB_ECMP_LINK_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_LINK_CONTROLm_BLKACC,1,DLB_ECMP_LINK_CONTROLm_OFFSET,i,(m._dlb_ecmp_link_control),17)
#define WRITE_DLB_ECMP_LINK_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_LINK_CONTROLm_BLKACC,1,DLB_ECMP_LINK_CONTROLm_OFFSET,i,&(m._dlb_ecmp_link_control),17)

/*******************************************************************************
 * End of 'DLB_ECMP_LINK_CONTROLm'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_MONITOR_CONTROL_INST0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DLB_ECMP_MONITOR_CONTROL_INST0.
 */
#define READ_DLB_ECMP_MONITOR_CONTROL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,DLB_ECMP_MONITOR_CONTROL_INST0r_BLKACC,1,n,0,DLB_ECMP_MONITOR_CONTROL_INST0r_OFFSET,0,(r._dlb_ecmp_monitor_control_inst0),2)
#define WRITE_DLB_ECMP_MONITOR_CONTROL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_MONITOR_CONTROL_INST0r_BLKACC,1,n,0,DLB_ECMP_MONITOR_CONTROL_INST0r_OFFSET,0,&(r._dlb_ecmp_monitor_control_inst0),2)
#define WRITE_DLB_ECMP_MONITOR_CONTROL_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_MONITOR_CONTROL_INST0r_BLKACC,1,-1,0,DLB_ECMP_MONITOR_CONTROL_INST0r_OFFSET,0,&(r._dlb_ecmp_monitor_control_inst0),2)

/*******************************************************************************
 * End of 'DLB_ECMP_MONITOR_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_MONITOR_CONTROL_INST1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DLB_ECMP_MONITOR_CONTROL_INST1.
 */
#define READ_DLB_ECMP_MONITOR_CONTROL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,DLB_ECMP_MONITOR_CONTROL_INST1r_BLKACC,1,n,0,DLB_ECMP_MONITOR_CONTROL_INST1r_OFFSET,0,(r._dlb_ecmp_monitor_control_inst1),2)
#define WRITE_DLB_ECMP_MONITOR_CONTROL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_MONITOR_CONTROL_INST1r_BLKACC,1,n,0,DLB_ECMP_MONITOR_CONTROL_INST1r_OFFSET,0,&(r._dlb_ecmp_monitor_control_inst1),2)
#define WRITE_DLB_ECMP_MONITOR_CONTROL_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_MONITOR_CONTROL_INST1r_BLKACC,1,-1,0,DLB_ECMP_MONITOR_CONTROL_INST1r_OFFSET,0,&(r._dlb_ecmp_monitor_control_inst1),2)

/*******************************************************************************
 * End of 'DLB_ECMP_MONITOR_CONTROL_INST1r'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_MONITOR_IFP_CONTROL_INST0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DLB_ECMP_MONITOR_IFP_CONTROL_INST0.
 */
#define READ_DLB_ECMP_MONITOR_IFP_CONTROL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,DLB_ECMP_MONITOR_IFP_CONTROL_INST0r_BLKACC,1,n,0,DLB_ECMP_MONITOR_IFP_CONTROL_INST0r_OFFSET,0,(r._dlb_ecmp_monitor_ifp_control_inst0),2)
#define WRITE_DLB_ECMP_MONITOR_IFP_CONTROL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_MONITOR_IFP_CONTROL_INST0r_BLKACC,1,n,0,DLB_ECMP_MONITOR_IFP_CONTROL_INST0r_OFFSET,0,&(r._dlb_ecmp_monitor_ifp_control_inst0),2)
#define WRITE_DLB_ECMP_MONITOR_IFP_CONTROL_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_MONITOR_IFP_CONTROL_INST0r_BLKACC,1,-1,0,DLB_ECMP_MONITOR_IFP_CONTROL_INST0r_OFFSET,0,&(r._dlb_ecmp_monitor_ifp_control_inst0),2)

/*******************************************************************************
 * End of 'DLB_ECMP_MONITOR_IFP_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_MONITOR_IFP_CONTROL_INST1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DLB_ECMP_MONITOR_IFP_CONTROL_INST1.
 */
#define READ_DLB_ECMP_MONITOR_IFP_CONTROL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,DLB_ECMP_MONITOR_IFP_CONTROL_INST1r_BLKACC,1,n,0,DLB_ECMP_MONITOR_IFP_CONTROL_INST1r_OFFSET,0,(r._dlb_ecmp_monitor_ifp_control_inst1),2)
#define WRITE_DLB_ECMP_MONITOR_IFP_CONTROL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_MONITOR_IFP_CONTROL_INST1r_BLKACC,1,n,0,DLB_ECMP_MONITOR_IFP_CONTROL_INST1r_OFFSET,0,&(r._dlb_ecmp_monitor_ifp_control_inst1),2)
#define WRITE_DLB_ECMP_MONITOR_IFP_CONTROL_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_MONITOR_IFP_CONTROL_INST1r_BLKACC,1,-1,0,DLB_ECMP_MONITOR_IFP_CONTROL_INST1r_OFFSET,0,&(r._dlb_ecmp_monitor_ifp_control_inst1),2)

/*******************************************************************************
 * End of 'DLB_ECMP_MONITOR_IFP_CONTROL_INST1r'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_MONITOR_MIRROR_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DLB_ECMP_MONITOR_MIRROR_CONFIG.
 */
#define READ_DLB_ECMP_MONITOR_MIRROR_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,DLB_ECMP_MONITOR_MIRROR_CONFIGr_BLKACC,1,DLB_ECMP_MONITOR_MIRROR_CONFIGr_OFFSET,0,(r._dlb_ecmp_monitor_mirror_config), 1)
#define WRITE_DLB_ECMP_MONITOR_MIRROR_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,DLB_ECMP_MONITOR_MIRROR_CONFIGr_BLKACC,1,DLB_ECMP_MONITOR_MIRROR_CONFIGr_OFFSET,0,&(r._dlb_ecmp_monitor_mirror_config), 1)

/*******************************************************************************
 * End of 'DLB_ECMP_MONITOR_MIRROR_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_OPTIMAL_CANDIDATE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     17
 */
/*
 * These macros can be used to access DLB_ECMP_OPTIMAL_CANDIDATE_INST0.
 */
#define READ_DLB_ECMP_OPTIMAL_CANDIDATE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,DLB_ECMP_OPTIMAL_CANDIDATE_INST0m_BLKACC,1,n,0,DLB_ECMP_OPTIMAL_CANDIDATE_INST0m_OFFSET,i,(m._dlb_ecmp_optimal_candidate_inst0),1)
#define WRITE_DLB_ECMP_OPTIMAL_CANDIDATE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_OPTIMAL_CANDIDATE_INST0m_BLKACC,1,n,0,DLB_ECMP_OPTIMAL_CANDIDATE_INST0m_OFFSET,i,&(m._dlb_ecmp_optimal_candidate_inst0),1)
#define WRITE_DLB_ECMP_OPTIMAL_CANDIDATE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_OPTIMAL_CANDIDATE_INST0m_BLKACC,1,-1,0,DLB_ECMP_OPTIMAL_CANDIDATE_INST0m_OFFSET,i,&(m._dlb_ecmp_optimal_candidate_inst0),1)

/*******************************************************************************
 * End of 'DLB_ECMP_OPTIMAL_CANDIDATE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_OPTIMAL_CANDIDATE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     17
 */
/*
 * These macros can be used to access DLB_ECMP_OPTIMAL_CANDIDATE_INST1.
 */
#define READ_DLB_ECMP_OPTIMAL_CANDIDATE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,DLB_ECMP_OPTIMAL_CANDIDATE_INST1m_BLKACC,1,n,0,DLB_ECMP_OPTIMAL_CANDIDATE_INST1m_OFFSET,i,(m._dlb_ecmp_optimal_candidate_inst1),1)
#define WRITE_DLB_ECMP_OPTIMAL_CANDIDATE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_OPTIMAL_CANDIDATE_INST1m_BLKACC,1,n,0,DLB_ECMP_OPTIMAL_CANDIDATE_INST1m_OFFSET,i,&(m._dlb_ecmp_optimal_candidate_inst1),1)
#define WRITE_DLB_ECMP_OPTIMAL_CANDIDATE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,DLB_ECMP_OPTIMAL_CANDIDATE_INST1m_BLKACC,1,-1,0,DLB_ECMP_OPTIMAL_CANDIDATE_INST1m_OFFSET,i,&(m._dlb_ecmp_optimal_candidate_inst1),1)

/*******************************************************************************
 * End of 'DLB_ECMP_OPTIMAL_CANDIDATE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_PORT_AVG_QUALITY_MEASURE
 * BLOCKS:   IPIPE
 * SIZE:     106
 */
/*
 * These macros can be used to access DLB_ECMP_PORT_AVG_QUALITY_MEASURE.
 */
#define READ_DLB_ECMP_PORT_AVG_QUALITY_MEASUREm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_PORT_AVG_QUALITY_MEASUREm_BLKACC,1,DLB_ECMP_PORT_AVG_QUALITY_MEASUREm_OFFSET,i,(m._dlb_ecmp_port_avg_quality_measure),4)
#define WRITE_DLB_ECMP_PORT_AVG_QUALITY_MEASUREm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_PORT_AVG_QUALITY_MEASUREm_BLKACC,1,DLB_ECMP_PORT_AVG_QUALITY_MEASUREm_OFFSET,i,&(m._dlb_ecmp_port_avg_quality_measure),4)

/*******************************************************************************
 * End of 'DLB_ECMP_PORT_AVG_QUALITY_MEASUREm'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_PORT_INST_QUALITY_MEASURE
 * BLOCKS:   IPIPE
 * SIZE:     62
 */
/*
 * These macros can be used to access DLB_ECMP_PORT_INST_QUALITY_MEASURE.
 */
#define READ_DLB_ECMP_PORT_INST_QUALITY_MEASUREm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_PORT_INST_QUALITY_MEASUREm_BLKACC,1,DLB_ECMP_PORT_INST_QUALITY_MEASUREm_OFFSET,i,(m._dlb_ecmp_port_inst_quality_measure),2)
#define WRITE_DLB_ECMP_PORT_INST_QUALITY_MEASUREm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_PORT_INST_QUALITY_MEASUREm_BLKACC,1,DLB_ECMP_PORT_INST_QUALITY_MEASUREm_OFFSET,i,&(m._dlb_ecmp_port_inst_quality_measure),2)

/*******************************************************************************
 * End of 'DLB_ECMP_PORT_INST_QUALITY_MEASUREm'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_PORT_QUALITY_MAPPING
 * BLOCKS:   IPIPE
 * SIZE:     7
 */
/*
 * These macros can be used to access DLB_ECMP_PORT_QUALITY_MAPPING.
 */
#define READ_DLB_ECMP_PORT_QUALITY_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_PORT_QUALITY_MAPPINGm_BLKACC,1,DLB_ECMP_PORT_QUALITY_MAPPINGm_OFFSET,i,(m._dlb_ecmp_port_quality_mapping),1)
#define WRITE_DLB_ECMP_PORT_QUALITY_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_PORT_QUALITY_MAPPINGm_BLKACC,1,DLB_ECMP_PORT_QUALITY_MAPPINGm_OFFSET,i,&(m._dlb_ecmp_port_quality_mapping),1)

/*******************************************************************************
 * End of 'DLB_ECMP_PORT_QUALITY_MAPPINGm'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_PORT_QUALITY_UPDATE_MEASURE_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     3
 */
/*
 * These macros can be used to access DLB_ECMP_PORT_QUALITY_UPDATE_MEASURE_CONTROL.
 */
#define READ_DLB_ECMP_PORT_QUALITY_UPDATE_MEASURE_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_PORT_QUALITY_UPDATE_MEASURE_CONTROLm_BLKACC,1,DLB_ECMP_PORT_QUALITY_UPDATE_MEASURE_CONTROLm_OFFSET,i,(m._dlb_ecmp_port_quality_update_measure_control),1)
#define WRITE_DLB_ECMP_PORT_QUALITY_UPDATE_MEASURE_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_PORT_QUALITY_UPDATE_MEASURE_CONTROLm_BLKACC,1,DLB_ECMP_PORT_QUALITY_UPDATE_MEASURE_CONTROLm_OFFSET,i,&(m._dlb_ecmp_port_quality_update_measure_control),1)

/*******************************************************************************
 * End of 'DLB_ECMP_PORT_QUALITY_UPDATE_MEASURE_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_PORT_STATE
 * BLOCKS:   IPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access DLB_ECMP_PORT_STATE.
 */
#define READ_DLB_ECMP_PORT_STATEm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_PORT_STATEm_BLKACC,1,DLB_ECMP_PORT_STATEm_OFFSET,i,(m._dlb_ecmp_port_state),9)
#define WRITE_DLB_ECMP_PORT_STATEm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_PORT_STATEm_BLKACC,1,DLB_ECMP_PORT_STATEm_OFFSET,i,&(m._dlb_ecmp_port_state),9)

/*******************************************************************************
 * End of 'DLB_ECMP_PORT_STATEm'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_QUALITY_MEASURE_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DLB_ECMP_QUALITY_MEASURE_CONTROL.
 */
#define READ_DLB_ECMP_QUALITY_MEASURE_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,DLB_ECMP_QUALITY_MEASURE_CONTROLr_BLKACC,1,DLB_ECMP_QUALITY_MEASURE_CONTROLr_OFFSET,0,(r._dlb_ecmp_quality_measure_control), 1)
#define WRITE_DLB_ECMP_QUALITY_MEASURE_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,DLB_ECMP_QUALITY_MEASURE_CONTROLr_BLKACC,1,DLB_ECMP_QUALITY_MEASURE_CONTROLr_OFFSET,0,&(r._dlb_ecmp_quality_measure_control), 1)

/*******************************************************************************
 * End of 'DLB_ECMP_QUALITY_MEASURE_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_QUANTIZED_AVG_QUALITY_MEASURE
 * BLOCKS:   IPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access DLB_ECMP_QUANTIZED_AVG_QUALITY_MEASURE.
 */
#define READ_DLB_ECMP_QUANTIZED_AVG_QUALITY_MEASUREm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_QUANTIZED_AVG_QUALITY_MEASUREm_BLKACC,1,DLB_ECMP_QUANTIZED_AVG_QUALITY_MEASUREm_OFFSET,i,(m._dlb_ecmp_quantized_avg_quality_measure),1)
#define WRITE_DLB_ECMP_QUANTIZED_AVG_QUALITY_MEASUREm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_QUANTIZED_AVG_QUALITY_MEASUREm_BLKACC,1,DLB_ECMP_QUANTIZED_AVG_QUALITY_MEASUREm_OFFSET,i,&(m._dlb_ecmp_quantized_avg_quality_measure),1)

/*******************************************************************************
 * End of 'DLB_ECMP_QUANTIZED_AVG_QUALITY_MEASUREm'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_QUANTIZE_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access DLB_ECMP_QUANTIZE_CONTROL.
 */
#define READ_DLB_ECMP_QUANTIZE_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_QUANTIZE_CONTROLm_BLKACC,1,DLB_ECMP_QUANTIZE_CONTROLm_OFFSET,i,(m._dlb_ecmp_quantize_control),1)
#define WRITE_DLB_ECMP_QUANTIZE_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_QUANTIZE_CONTROLm_BLKACC,1,DLB_ECMP_QUANTIZE_CONTROLm_OFFSET,i,&(m._dlb_ecmp_quantize_control),1)

/*******************************************************************************
 * End of 'DLB_ECMP_QUANTIZE_CONTROLm'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_RAM_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DLB_ECMP_RAM_CONTROL_0.
 */
#define READ_DLB_ECMP_RAM_CONTROL_0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,DLB_ECMP_RAM_CONTROL_0r_BLKACC,1,n,0,DLB_ECMP_RAM_CONTROL_0r_OFFSET,0,(r._dlb_ecmp_ram_control_0),2)
#define WRITE_DLB_ECMP_RAM_CONTROL_0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_RAM_CONTROL_0r_BLKACC,1,n,0,DLB_ECMP_RAM_CONTROL_0r_OFFSET,0,&(r._dlb_ecmp_ram_control_0),2)
#define WRITE_DLB_ECMP_RAM_CONTROL_0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_RAM_CONTROL_0r_BLKACC,1,-1,0,DLB_ECMP_RAM_CONTROL_0r_OFFSET,0,&(r._dlb_ecmp_ram_control_0),2)

/*******************************************************************************
 * End of 'DLB_ECMP_RAM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_RAM_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DLB_ECMP_RAM_CONTROL_1.
 */
#define READ_DLB_ECMP_RAM_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,DLB_ECMP_RAM_CONTROL_1r_BLKACC,1,DLB_ECMP_RAM_CONTROL_1r_OFFSET,0,(r._dlb_ecmp_ram_control_1), 2)
#define WRITE_DLB_ECMP_RAM_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,DLB_ECMP_RAM_CONTROL_1r_BLKACC,1,DLB_ECMP_RAM_CONTROL_1r_OFFSET,0,&(r._dlb_ecmp_ram_control_1), 2)

/*******************************************************************************
 * End of 'DLB_ECMP_RAM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_RANDOM_SELECTION_CONTROL_INST0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DLB_ECMP_RANDOM_SELECTION_CONTROL_INST0.
 */
#define READ_DLB_ECMP_RANDOM_SELECTION_CONTROL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,DLB_ECMP_RANDOM_SELECTION_CONTROL_INST0r_BLKACC,1,n,0,DLB_ECMP_RANDOM_SELECTION_CONTROL_INST0r_OFFSET,0,(r._dlb_ecmp_random_selection_control_inst0),2)
#define WRITE_DLB_ECMP_RANDOM_SELECTION_CONTROL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_RANDOM_SELECTION_CONTROL_INST0r_BLKACC,1,n,0,DLB_ECMP_RANDOM_SELECTION_CONTROL_INST0r_OFFSET,0,&(r._dlb_ecmp_random_selection_control_inst0),2)
#define WRITE_DLB_ECMP_RANDOM_SELECTION_CONTROL_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_RANDOM_SELECTION_CONTROL_INST0r_BLKACC,1,-1,0,DLB_ECMP_RANDOM_SELECTION_CONTROL_INST0r_OFFSET,0,&(r._dlb_ecmp_random_selection_control_inst0),2)

/*******************************************************************************
 * End of 'DLB_ECMP_RANDOM_SELECTION_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_RANDOM_SELECTION_CONTROL_INST1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DLB_ECMP_RANDOM_SELECTION_CONTROL_INST1.
 */
#define READ_DLB_ECMP_RANDOM_SELECTION_CONTROL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,DLB_ECMP_RANDOM_SELECTION_CONTROL_INST1r_BLKACC,1,n,0,DLB_ECMP_RANDOM_SELECTION_CONTROL_INST1r_OFFSET,0,(r._dlb_ecmp_random_selection_control_inst1),2)
#define WRITE_DLB_ECMP_RANDOM_SELECTION_CONTROL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_RANDOM_SELECTION_CONTROL_INST1r_BLKACC,1,n,0,DLB_ECMP_RANDOM_SELECTION_CONTROL_INST1r_OFFSET,0,&(r._dlb_ecmp_random_selection_control_inst1),2)
#define WRITE_DLB_ECMP_RANDOM_SELECTION_CONTROL_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_RANDOM_SELECTION_CONTROL_INST1r_BLKACC,1,-1,0,DLB_ECMP_RANDOM_SELECTION_CONTROL_INST1r_OFFSET,0,&(r._dlb_ecmp_random_selection_control_inst1),2)

/*******************************************************************************
 * End of 'DLB_ECMP_RANDOM_SELECTION_CONTROL_INST1r'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_REFRESH_DISABLE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DLB_ECMP_REFRESH_DISABLE.
 */
#define READ_DLB_ECMP_REFRESH_DISABLEr(u,r) bcmbd_cmicx_reg_block_read(u,DLB_ECMP_REFRESH_DISABLEr_BLKACC,1,DLB_ECMP_REFRESH_DISABLEr_OFFSET,0,(r._dlb_ecmp_refresh_disable), 1)
#define WRITE_DLB_ECMP_REFRESH_DISABLEr(u,r) bcmbd_cmicx_reg_block_write(u,DLB_ECMP_REFRESH_DISABLEr_BLKACC,1,DLB_ECMP_REFRESH_DISABLEr_OFFSET,0,&(r._dlb_ecmp_refresh_disable), 1)

/*******************************************************************************
 * End of 'DLB_ECMP_REFRESH_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_REFRESH_INDEX
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DLB_ECMP_REFRESH_INDEX.
 */
#define READ_DLB_ECMP_REFRESH_INDEXr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,DLB_ECMP_REFRESH_INDEXr_BLKACC,1,n,0,DLB_ECMP_REFRESH_INDEXr_OFFSET,0,(r._dlb_ecmp_refresh_index),1)
#define WRITE_DLB_ECMP_REFRESH_INDEXr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_REFRESH_INDEXr_BLKACC,1,n,0,DLB_ECMP_REFRESH_INDEXr_OFFSET,0,&(r._dlb_ecmp_refresh_index),1)
#define WRITE_DLB_ECMP_REFRESH_INDEXr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_ECMP_REFRESH_INDEXr_BLKACC,1,-1,0,DLB_ECMP_REFRESH_INDEXr_OFFSET,0,&(r._dlb_ecmp_refresh_index),1)

/*******************************************************************************
 * End of 'DLB_ECMP_REFRESH_INDEXr'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DLB_ECMP_SER_CONTROL.
 */
#define READ_DLB_ECMP_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,DLB_ECMP_SER_CONTROLr_BLKACC,1,DLB_ECMP_SER_CONTROLr_OFFSET,0,(r._dlb_ecmp_ser_control), 2)
#define WRITE_DLB_ECMP_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,DLB_ECMP_SER_CONTROLr_BLKACC,1,DLB_ECMP_SER_CONTROLr_OFFSET,0,&(r._dlb_ecmp_ser_control), 2)

/*******************************************************************************
 * End of 'DLB_ECMP_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_SER_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DLB_ECMP_SER_CONTROL_2.
 */
#define READ_DLB_ECMP_SER_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,DLB_ECMP_SER_CONTROL_2r_BLKACC,1,DLB_ECMP_SER_CONTROL_2r_OFFSET,0,(r._dlb_ecmp_ser_control_2), 1)
#define WRITE_DLB_ECMP_SER_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,DLB_ECMP_SER_CONTROL_2r_BLKACC,1,DLB_ECMP_SER_CONTROL_2r_OFFSET,0,&(r._dlb_ecmp_ser_control_2), 1)

/*******************************************************************************
 * End of 'DLB_ECMP_SER_CONTROL_2r'
 */




/*******************************************************************************
 * MEMORY:  DLB_ECMP_SER_FIFO
 * BLOCKS:   IPIPE
 * SIZE:     50
 */
/*
 * These macros can be used to access DLB_ECMP_SER_FIFO.
 */
#define READ_DLB_ECMP_SER_FIFOm(u,i,m) bcmbd_cmicx_mem_block_read(u,DLB_ECMP_SER_FIFOm_BLKACC,1,DLB_ECMP_SER_FIFOm_OFFSET,i,(m._dlb_ecmp_ser_fifo),2)
#define WRITE_DLB_ECMP_SER_FIFOm(u,i,m) bcmbd_cmicx_mem_block_write(u,DLB_ECMP_SER_FIFOm_BLKACC,1,DLB_ECMP_SER_FIFOm_OFFSET,i,&(m._dlb_ecmp_ser_fifo),2)

/*******************************************************************************
 * End of 'DLB_ECMP_SER_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_SER_FIFO_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DLB_ECMP_SER_FIFO_CTRL.
 */
#define READ_DLB_ECMP_SER_FIFO_CTRLr(u,r) bcmbd_cmicx_reg_block_read(u,DLB_ECMP_SER_FIFO_CTRLr_BLKACC,1,DLB_ECMP_SER_FIFO_CTRLr_OFFSET,0,(r._dlb_ecmp_ser_fifo_ctrl), 1)
#define WRITE_DLB_ECMP_SER_FIFO_CTRLr(u,r) bcmbd_cmicx_reg_block_write(u,DLB_ECMP_SER_FIFO_CTRLr_BLKACC,1,DLB_ECMP_SER_FIFO_CTRLr_OFFSET,0,&(r._dlb_ecmp_ser_fifo_ctrl), 1)

/*******************************************************************************
 * End of 'DLB_ECMP_SER_FIFO_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  DLB_ECMP_SER_FIFO_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DLB_ECMP_SER_FIFO_STATUS.
 */
#define READ_DLB_ECMP_SER_FIFO_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,DLB_ECMP_SER_FIFO_STATUSr_BLKACC,1,DLB_ECMP_SER_FIFO_STATUSr_OFFSET,0,(r._dlb_ecmp_ser_fifo_status), 1)
#define WRITE_DLB_ECMP_SER_FIFO_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,DLB_ECMP_SER_FIFO_STATUSr_BLKACC,1,DLB_ECMP_SER_FIFO_STATUSr_OFFSET,0,&(r._dlb_ecmp_ser_fifo_status), 1)

/*******************************************************************************
 * End of 'DLB_ECMP_SER_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  DLB_ID_0_TO_63_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DLB_ID_0_TO_63_ENABLE.
 */
#define READ_DLB_ID_0_TO_63_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,DLB_ID_0_TO_63_ENABLEr_BLKACC,1,DLB_ID_0_TO_63_ENABLEr_OFFSET,0,(r._dlb_id_0_to_63_enable), 2)
#define WRITE_DLB_ID_0_TO_63_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,DLB_ID_0_TO_63_ENABLEr_BLKACC,1,DLB_ID_0_TO_63_ENABLEr_OFFSET,0,&(r._dlb_id_0_to_63_enable), 2)

/*******************************************************************************
 * End of 'DLB_ID_0_TO_63_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  DLB_ID_64_TO_127_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DLB_ID_64_TO_127_ENABLE.
 */
#define READ_DLB_ID_64_TO_127_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,DLB_ID_64_TO_127_ENABLEr_BLKACC,1,DLB_ID_64_TO_127_ENABLEr_OFFSET,0,(r._dlb_id_64_to_127_enable), 2)
#define WRITE_DLB_ID_64_TO_127_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,DLB_ID_64_TO_127_ENABLEr_BLKACC,1,DLB_ID_64_TO_127_ENABLEr_OFFSET,0,&(r._dlb_id_64_to_127_enable), 2)

/*******************************************************************************
 * End of 'DLB_ID_64_TO_127_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  DLB_IETR_CLK_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DLB_IETR_CLK_CTRL.
 */
#define READ_DLB_IETR_CLK_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,DLB_IETR_CLK_CTRLr_BLKACC,1,n,0,DLB_IETR_CLK_CTRLr_OFFSET,0,(r._dlb_ietr_clk_ctrl),1)
#define WRITE_DLB_IETR_CLK_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_IETR_CLK_CTRLr_BLKACC,1,n,0,DLB_IETR_CLK_CTRLr_OFFSET,0,&(r._dlb_ietr_clk_ctrl),1)
#define WRITE_DLB_IETR_CLK_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,DLB_IETR_CLK_CTRLr_BLKACC,1,-1,0,DLB_IETR_CLK_CTRLr_OFFSET,0,&(r._dlb_ietr_clk_ctrl),1)

/*******************************************************************************
 * End of 'DLB_IETR_CLK_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  DOS_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DOS_CONTROL.
 */
#define READ_DOS_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,DOS_CONTROLr_BLKACC,1,DOS_CONTROLr_OFFSET,0,(r._dos_control), 1)
#define WRITE_DOS_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,DOS_CONTROLr_BLKACC,1,DOS_CONTROLr_OFFSET,0,&(r._dos_control), 1)

/*******************************************************************************
 * End of 'DOS_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  DOS_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DOS_CONTROL_2.
 */
#define READ_DOS_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,DOS_CONTROL_2r_BLKACC,1,DOS_CONTROL_2r_OFFSET,0,(r._dos_control_2), 1)
#define WRITE_DOS_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,DOS_CONTROL_2r_BLKACC,1,DOS_CONTROL_2r_OFFSET,0,&(r._dos_control_2), 1)

/*******************************************************************************
 * End of 'DOS_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  DOS_CONTROL_3
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DOS_CONTROL_3.
 */
#define READ_DOS_CONTROL_3r(u,r) bcmbd_cmicx_reg_block_read(u,DOS_CONTROL_3r_BLKACC,1,DOS_CONTROL_3r_OFFSET,0,(r._dos_control_3), 2)
#define WRITE_DOS_CONTROL_3r(u,r) bcmbd_cmicx_reg_block_write(u,DOS_CONTROL_3r_BLKACC,1,DOS_CONTROL_3r_OFFSET,0,&(r._dos_control_3), 2)

/*******************************************************************************
 * End of 'DOS_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  DROP_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DROP_CONTROL_0.
 */
#define READ_DROP_CONTROL_0r(u,r) bcmbd_cmicx_reg_block_read(u,DROP_CONTROL_0r_BLKACC,1,DROP_CONTROL_0r_OFFSET,0,(r._drop_control_0), 1)
#define WRITE_DROP_CONTROL_0r(u,r) bcmbd_cmicx_reg_block_write(u,DROP_CONTROL_0r_BLKACC,1,DROP_CONTROL_0r_OFFSET,0,&(r._drop_control_0), 1)

/*******************************************************************************
 * End of 'DROP_CONTROL_0r'
 */




/*******************************************************************************
 * MEMORY:  DSCP_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access DSCP_TABLE.
 */
#define READ_DSCP_TABLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,DSCP_TABLEm_BLKACC,1,DSCP_TABLEm_OFFSET,i,(m._dscp_table),1)
#define WRITE_DSCP_TABLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,DSCP_TABLEm_BLKACC,1,DSCP_TABLEm_OFFSET,i,&(m._dscp_table),1)

/*******************************************************************************
 * End of 'DSCP_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  EBTOQ_DEBUG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access EBTOQ_DEBUG.
 */
#define READ_EBTOQ_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,EBTOQ_DEBUGr_BLKACC,4,0,p,EBTOQ_DEBUGr_OFFSET,0,(r._ebtoq_debug),1)
#define WRITE_EBTOQ_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,EBTOQ_DEBUGr_BLKACC,4,0,p,EBTOQ_DEBUGr_OFFSET,0,&(r._ebtoq_debug),1)

/*******************************************************************************
 * End of 'EBTOQ_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  EBTOQ_ENQ_DEQ_EOP_PREFETCH_COLLISION_DEBUG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access EBTOQ_ENQ_DEQ_EOP_PREFETCH_COLLISION_DEBUG.
 */
#define READ_EBTOQ_ENQ_DEQ_EOP_PREFETCH_COLLISION_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,EBTOQ_ENQ_DEQ_EOP_PREFETCH_COLLISION_DEBUGr_BLKACC,4,0,p,EBTOQ_ENQ_DEQ_EOP_PREFETCH_COLLISION_DEBUGr_OFFSET,0,(r._ebtoq_enq_deq_eop_prefetch_collision_debug),1)
#define WRITE_EBTOQ_ENQ_DEQ_EOP_PREFETCH_COLLISION_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,EBTOQ_ENQ_DEQ_EOP_PREFETCH_COLLISION_DEBUGr_BLKACC,4,0,p,EBTOQ_ENQ_DEQ_EOP_PREFETCH_COLLISION_DEBUGr_OFFSET,0,&(r._ebtoq_enq_deq_eop_prefetch_collision_debug),1)

/*******************************************************************************
 * End of 'EBTOQ_ENQ_DEQ_EOP_PREFETCH_COLLISION_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  EBTOQ_STATUS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access EBTOQ_STATUS.
 */
#define READ_EBTOQ_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,EBTOQ_STATUSr_BLKACC,4,0,p,EBTOQ_STATUSr_OFFSET,0,(r._ebtoq_status),1)
#define WRITE_EBTOQ_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,EBTOQ_STATUSr_BLKACC,4,0,p,EBTOQ_STATUSr_OFFSET,0,&(r._ebtoq_status),1)

/*******************************************************************************
 * End of 'EBTOQ_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  ECMP_GROUP_DLB_ID_OFFSET
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ECMP_GROUP_DLB_ID_OFFSET.
 */
#define READ_ECMP_GROUP_DLB_ID_OFFSETr(u,r) bcmbd_cmicx_reg_block_read(u,ECMP_GROUP_DLB_ID_OFFSETr_BLKACC,1,ECMP_GROUP_DLB_ID_OFFSETr_OFFSET,0,(r._ecmp_group_dlb_id_offset), 1)
#define WRITE_ECMP_GROUP_DLB_ID_OFFSETr(u,r) bcmbd_cmicx_reg_block_write(u,ECMP_GROUP_DLB_ID_OFFSETr_BLKACC,1,ECMP_GROUP_DLB_ID_OFFSETr_OFFSET,0,&(r._ecmp_group_dlb_id_offset), 1)

/*******************************************************************************
 * End of 'ECMP_GROUP_DLB_ID_OFFSETr'
 */




/*******************************************************************************
 * REGISTER:  ECMP_RANDOM_LB_CONFIG_INST0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ECMP_RANDOM_LB_CONFIG_INST0.
 */
#define READ_ECMP_RANDOM_LB_CONFIG_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ECMP_RANDOM_LB_CONFIG_INST0r_BLKACC,1,n,0,ECMP_RANDOM_LB_CONFIG_INST0r_OFFSET,0,(r._ecmp_random_lb_config_inst0),1)
#define WRITE_ECMP_RANDOM_LB_CONFIG_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ECMP_RANDOM_LB_CONFIG_INST0r_BLKACC,1,n,0,ECMP_RANDOM_LB_CONFIG_INST0r_OFFSET,0,&(r._ecmp_random_lb_config_inst0),1)
#define WRITE_ECMP_RANDOM_LB_CONFIG_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ECMP_RANDOM_LB_CONFIG_INST0r_BLKACC,1,-1,0,ECMP_RANDOM_LB_CONFIG_INST0r_OFFSET,0,&(r._ecmp_random_lb_config_inst0),1)

/*******************************************************************************
 * End of 'ECMP_RANDOM_LB_CONFIG_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ECMP_RANDOM_LB_CONFIG_INST1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ECMP_RANDOM_LB_CONFIG_INST1.
 */
#define READ_ECMP_RANDOM_LB_CONFIG_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ECMP_RANDOM_LB_CONFIG_INST1r_BLKACC,1,n,0,ECMP_RANDOM_LB_CONFIG_INST1r_OFFSET,0,(r._ecmp_random_lb_config_inst1),1)
#define WRITE_ECMP_RANDOM_LB_CONFIG_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ECMP_RANDOM_LB_CONFIG_INST1r_BLKACC,1,n,0,ECMP_RANDOM_LB_CONFIG_INST1r_OFFSET,0,&(r._ecmp_random_lb_config_inst1),1)
#define WRITE_ECMP_RANDOM_LB_CONFIG_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ECMP_RANDOM_LB_CONFIG_INST1r_BLKACC,1,-1,0,ECMP_RANDOM_LB_CONFIG_INST1r_OFFSET,0,&(r._ecmp_random_lb_config_inst1),1)

/*******************************************************************************
 * End of 'ECMP_RANDOM_LB_CONFIG_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ECN_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ECN_CONTROL.
 */
#define READ_ECN_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ECN_CONTROLr_BLKACC,1,ECN_CONTROLr_OFFSET,0,(r._ecn_control), 1)
#define WRITE_ECN_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ECN_CONTROLr_BLKACC,1,ECN_CONTROLr_OFFSET,0,&(r._ecn_control), 1)

/*******************************************************************************
 * End of 'ECN_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EDB_AUX_RESERVED_CREDIT_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_AUX_RESERVED_CREDIT_COUNT.
 */
#define READ_EDB_AUX_RESERVED_CREDIT_COUNTr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_AUX_RESERVED_CREDIT_COUNTr_BLKACC,89,n,0,EDB_AUX_RESERVED_CREDIT_COUNTr_OFFSET,0,(r._edb_aux_reserved_credit_count),1)
#define WRITE_EDB_AUX_RESERVED_CREDIT_COUNTr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_AUX_RESERVED_CREDIT_COUNTr_BLKACC,89,n,0,EDB_AUX_RESERVED_CREDIT_COUNTr_OFFSET,0,&(r._edb_aux_reserved_credit_count),1)
#define WRITE_EDB_AUX_RESERVED_CREDIT_COUNTr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_AUX_RESERVED_CREDIT_COUNTr_BLKACC,89,-1,0,EDB_AUX_RESERVED_CREDIT_COUNTr_OFFSET,0,&(r._edb_aux_reserved_credit_count),1)

/*******************************************************************************
 * End of 'EDB_AUX_RESERVED_CREDIT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  EDB_BUF_CFG_OVERRIDE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_BUF_CFG_OVERRIDE.
 */
#define READ_EDB_BUF_CFG_OVERRIDEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_BUF_CFG_OVERRIDEr_BLKACC,89,n,0,EDB_BUF_CFG_OVERRIDEr_OFFSET,0,(r._edb_buf_cfg_override),1)
#define WRITE_EDB_BUF_CFG_OVERRIDEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_BUF_CFG_OVERRIDEr_BLKACC,89,n,0,EDB_BUF_CFG_OVERRIDEr_OFFSET,0,&(r._edb_buf_cfg_override),1)
#define WRITE_EDB_BUF_CFG_OVERRIDEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_BUF_CFG_OVERRIDEr_BLKACC,89,-1,0,EDB_BUF_CFG_OVERRIDEr_OFFSET,0,&(r._edb_buf_cfg_override),1)

/*******************************************************************************
 * End of 'EDB_BUF_CFG_OVERRIDEr'
 */




/*******************************************************************************
 * REGISTER:  EDB_CM_RCPU_SRC_PORT_FILTER_TABLE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_CM_RCPU_SRC_PORT_FILTER_TABLE.
 */
#define READ_EDB_CM_RCPU_SRC_PORT_FILTER_TABLEr(u,i,r) bcmbd_cmicx_reg_block_read(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLEr_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLEr_OFFSET,i,(r._edb_cm_rcpu_src_port_filter_table), 1)
#define WRITE_EDB_CM_RCPU_SRC_PORT_FILTER_TABLEr(u,i,r) bcmbd_cmicx_reg_block_write(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLEr_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLEr_OFFSET,i,&(r._edb_cm_rcpu_src_port_filter_table), 1)

/*******************************************************************************
 * End of 'EDB_CM_RCPU_SRC_PORT_FILTER_TABLEr'
 */




/*******************************************************************************
 * REGISTER:  EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_127_96
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_127_96.
 */
#define READ_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_127_96r(u,r) bcmbd_cmicx_reg_block_read(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_127_96r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_127_96r_OFFSET,0,(r._edb_cm_rcpu_src_port_filter_table_127_96), 1)
#define WRITE_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_127_96r(u,r) bcmbd_cmicx_reg_block_write(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_127_96r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_127_96r_OFFSET,0,&(r._edb_cm_rcpu_src_port_filter_table_127_96), 1)

/*******************************************************************************
 * End of 'EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_127_96r'
 */




/*******************************************************************************
 * REGISTER:  EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_159_128
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_159_128.
 */
#define READ_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_159_128r(u,r) bcmbd_cmicx_reg_block_read(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_159_128r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_159_128r_OFFSET,0,(r._edb_cm_rcpu_src_port_filter_table_159_128), 1)
#define WRITE_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_159_128r(u,r) bcmbd_cmicx_reg_block_write(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_159_128r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_159_128r_OFFSET,0,&(r._edb_cm_rcpu_src_port_filter_table_159_128), 1)

/*******************************************************************************
 * End of 'EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_159_128r'
 */




/*******************************************************************************
 * REGISTER:  EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_191_160
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_191_160.
 */
#define READ_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_191_160r(u,r) bcmbd_cmicx_reg_block_read(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_191_160r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_191_160r_OFFSET,0,(r._edb_cm_rcpu_src_port_filter_table_191_160), 1)
#define WRITE_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_191_160r(u,r) bcmbd_cmicx_reg_block_write(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_191_160r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_191_160r_OFFSET,0,&(r._edb_cm_rcpu_src_port_filter_table_191_160), 1)

/*******************************************************************************
 * End of 'EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_191_160r'
 */




/*******************************************************************************
 * REGISTER:  EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_223_192
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_223_192.
 */
#define READ_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_223_192r(u,r) bcmbd_cmicx_reg_block_read(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_223_192r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_223_192r_OFFSET,0,(r._edb_cm_rcpu_src_port_filter_table_223_192), 1)
#define WRITE_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_223_192r(u,r) bcmbd_cmicx_reg_block_write(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_223_192r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_223_192r_OFFSET,0,&(r._edb_cm_rcpu_src_port_filter_table_223_192), 1)

/*******************************************************************************
 * End of 'EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_223_192r'
 */




/*******************************************************************************
 * REGISTER:  EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_255_224
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_255_224.
 */
#define READ_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_255_224r(u,r) bcmbd_cmicx_reg_block_read(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_255_224r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_255_224r_OFFSET,0,(r._edb_cm_rcpu_src_port_filter_table_255_224), 1)
#define WRITE_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_255_224r(u,r) bcmbd_cmicx_reg_block_write(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_255_224r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_255_224r_OFFSET,0,&(r._edb_cm_rcpu_src_port_filter_table_255_224), 1)

/*******************************************************************************
 * End of 'EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_255_224r'
 */




/*******************************************************************************
 * REGISTER:  EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_287_256
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_287_256.
 */
#define READ_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_287_256r(u,r) bcmbd_cmicx_reg_block_read(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_287_256r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_287_256r_OFFSET,0,(r._edb_cm_rcpu_src_port_filter_table_287_256), 1)
#define WRITE_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_287_256r(u,r) bcmbd_cmicx_reg_block_write(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_287_256r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_287_256r_OFFSET,0,&(r._edb_cm_rcpu_src_port_filter_table_287_256), 1)

/*******************************************************************************
 * End of 'EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_287_256r'
 */




/*******************************************************************************
 * REGISTER:  EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_31_0
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_31_0.
 */
#define READ_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_31_0r(u,r) bcmbd_cmicx_reg_block_read(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_31_0r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_31_0r_OFFSET,0,(r._edb_cm_rcpu_src_port_filter_table_31_0), 1)
#define WRITE_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_31_0r(u,r) bcmbd_cmicx_reg_block_write(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_31_0r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_31_0r_OFFSET,0,&(r._edb_cm_rcpu_src_port_filter_table_31_0), 1)

/*******************************************************************************
 * End of 'EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_31_0r'
 */




/*******************************************************************************
 * REGISTER:  EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_63_32
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_63_32.
 */
#define READ_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_63_32r(u,r) bcmbd_cmicx_reg_block_read(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_63_32r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_63_32r_OFFSET,0,(r._edb_cm_rcpu_src_port_filter_table_63_32), 1)
#define WRITE_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_63_32r(u,r) bcmbd_cmicx_reg_block_write(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_63_32r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_63_32r_OFFSET,0,&(r._edb_cm_rcpu_src_port_filter_table_63_32), 1)

/*******************************************************************************
 * End of 'EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_63_32r'
 */




/*******************************************************************************
 * REGISTER:  EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_95_64
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_95_64.
 */
#define READ_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_95_64r(u,r) bcmbd_cmicx_reg_block_read(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_95_64r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_95_64r_OFFSET,0,(r._edb_cm_rcpu_src_port_filter_table_95_64), 1)
#define WRITE_EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_95_64r(u,r) bcmbd_cmicx_reg_block_write(u,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_95_64r_BLKACC,89,EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_95_64r_OFFSET,0,&(r._edb_cm_rcpu_src_port_filter_table_95_64), 1)

/*******************************************************************************
 * End of 'EDB_CM_RCPU_SRC_PORT_FILTER_TABLE_95_64r'
 */




/*******************************************************************************
 * REGISTER:  EDB_CONTROL_BUFFER_ECC_EN
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_CONTROL_BUFFER_ECC_EN.
 */
#define READ_EDB_CONTROL_BUFFER_ECC_ENr(u,r) bcmbd_cmicx_reg_block_read(u,EDB_CONTROL_BUFFER_ECC_ENr_BLKACC,89,EDB_CONTROL_BUFFER_ECC_ENr_OFFSET,0,(r._edb_control_buffer_ecc_en), 1)
#define WRITE_EDB_CONTROL_BUFFER_ECC_ENr(u,r) bcmbd_cmicx_reg_block_write(u,EDB_CONTROL_BUFFER_ECC_ENr_BLKACC,89,EDB_CONTROL_BUFFER_ECC_ENr_OFFSET,0,&(r._edb_control_buffer_ecc_en), 1)

/*******************************************************************************
 * End of 'EDB_CONTROL_BUFFER_ECC_ENr'
 */




/*******************************************************************************
 * REGISTER:  EDB_CONTROL_BUFFER_EN_COR_ERR_RPT
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_CONTROL_BUFFER_EN_COR_ERR_RPT.
 */
#define READ_EDB_CONTROL_BUFFER_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_read(u,EDB_CONTROL_BUFFER_EN_COR_ERR_RPTr_BLKACC,89,EDB_CONTROL_BUFFER_EN_COR_ERR_RPTr_OFFSET,0,(r._edb_control_buffer_en_cor_err_rpt), 1)
#define WRITE_EDB_CONTROL_BUFFER_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_write(u,EDB_CONTROL_BUFFER_EN_COR_ERR_RPTr_BLKACC,89,EDB_CONTROL_BUFFER_EN_COR_ERR_RPTr_OFFSET,0,&(r._edb_control_buffer_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'EDB_CONTROL_BUFFER_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  EDB_DATA_BUFFER_ECC_EN
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_DATA_BUFFER_ECC_EN.
 */
#define READ_EDB_DATA_BUFFER_ECC_ENr(u,r) bcmbd_cmicx_reg_block_read(u,EDB_DATA_BUFFER_ECC_ENr_BLKACC,89,EDB_DATA_BUFFER_ECC_ENr_OFFSET,0,(r._edb_data_buffer_ecc_en), 1)
#define WRITE_EDB_DATA_BUFFER_ECC_ENr(u,r) bcmbd_cmicx_reg_block_write(u,EDB_DATA_BUFFER_ECC_ENr_BLKACC,89,EDB_DATA_BUFFER_ECC_ENr_OFFSET,0,&(r._edb_data_buffer_ecc_en), 1)

/*******************************************************************************
 * End of 'EDB_DATA_BUFFER_ECC_ENr'
 */




/*******************************************************************************
 * REGISTER:  EDB_DATA_BUFFER_EN_COR_ERR_RPT
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_DATA_BUFFER_EN_COR_ERR_RPT.
 */
#define READ_EDB_DATA_BUFFER_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_read(u,EDB_DATA_BUFFER_EN_COR_ERR_RPTr_BLKACC,89,EDB_DATA_BUFFER_EN_COR_ERR_RPTr_OFFSET,0,(r._edb_data_buffer_en_cor_err_rpt), 1)
#define WRITE_EDB_DATA_BUFFER_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_write(u,EDB_DATA_BUFFER_EN_COR_ERR_RPTr_BLKACC,89,EDB_DATA_BUFFER_EN_COR_ERR_RPTr_OFFSET,0,&(r._edb_data_buffer_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'EDB_DATA_BUFFER_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  EDB_DBG_A
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_DBG_A.
 */
#define READ_EDB_DBG_Ar(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_DBG_Ar_BLKACC,89,n,0,EDB_DBG_Ar_OFFSET,0,(r._edb_dbg_a),1)
#define WRITE_EDB_DBG_Ar(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_DBG_Ar_BLKACC,89,n,0,EDB_DBG_Ar_OFFSET,0,&(r._edb_dbg_a),1)
#define WRITE_EDB_DBG_Ar_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_DBG_Ar_BLKACC,89,-1,0,EDB_DBG_Ar_OFFSET,0,&(r._edb_dbg_a),1)

/*******************************************************************************
 * End of 'EDB_DBG_Ar'
 */




/*******************************************************************************
 * REGISTER:  EDB_DBG_B
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_DBG_B.
 */
#define READ_EDB_DBG_Br(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_DBG_Br_BLKACC,89,n,0,EDB_DBG_Br_OFFSET,0,(r._edb_dbg_b),1)
#define WRITE_EDB_DBG_Br(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_DBG_Br_BLKACC,89,n,0,EDB_DBG_Br_OFFSET,0,&(r._edb_dbg_b),1)
#define WRITE_EDB_DBG_Br_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_DBG_Br_BLKACC,89,-1,0,EDB_DBG_Br_OFFSET,0,&(r._edb_dbg_b),1)

/*******************************************************************************
 * End of 'EDB_DBG_Br'
 */




/*******************************************************************************
 * REGISTER:  EDB_DBG_C
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_DBG_C.
 */
#define READ_EDB_DBG_Cr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_DBG_Cr_BLKACC,89,n,0,EDB_DBG_Cr_OFFSET,0,(r._edb_dbg_c),1)
#define WRITE_EDB_DBG_Cr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_DBG_Cr_BLKACC,89,n,0,EDB_DBG_Cr_OFFSET,0,&(r._edb_dbg_c),1)
#define WRITE_EDB_DBG_Cr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_DBG_Cr_BLKACC,89,-1,0,EDB_DBG_Cr_OFFSET,0,&(r._edb_dbg_c),1)

/*******************************************************************************
 * End of 'EDB_DBG_Cr'
 */




/*******************************************************************************
 * MEMORY:  EDB_DEVICE_TO_PHYSICAL_PORT_NUMBER_MAPPING
 * BLOCKS:   PORT_IF
 * SIZE:     9
 */
/*
 * These macros can be used to access EDB_DEVICE_TO_PHYSICAL_PORT_NUMBER_MAPPING.
 */
#define READ_EDB_DEVICE_TO_PHYSICAL_PORT_NUMBER_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_read(u,EDB_DEVICE_TO_PHYSICAL_PORT_NUMBER_MAPPINGm_BLKACC,89,EDB_DEVICE_TO_PHYSICAL_PORT_NUMBER_MAPPINGm_OFFSET,i,(m._edb_device_to_physical_port_number_mapping),1)
#define WRITE_EDB_DEVICE_TO_PHYSICAL_PORT_NUMBER_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_write(u,EDB_DEVICE_TO_PHYSICAL_PORT_NUMBER_MAPPINGm_BLKACC,89,EDB_DEVICE_TO_PHYSICAL_PORT_NUMBER_MAPPINGm_OFFSET,i,&(m._edb_device_to_physical_port_number_mapping),1)

/*******************************************************************************
 * End of 'EDB_DEVICE_TO_PHYSICAL_PORT_NUMBER_MAPPINGm'
 */




/*******************************************************************************
 * REGISTER:  EDB_INTR_ENABLE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_INTR_ENABLE.
 */
#define READ_EDB_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,EDB_INTR_ENABLEr_BLKACC,89,EDB_INTR_ENABLEr_OFFSET,0,(r._edb_intr_enable), 1)
#define WRITE_EDB_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,EDB_INTR_ENABLEr_BLKACC,89,EDB_INTR_ENABLEr_OFFSET,0,&(r._edb_intr_enable), 1)

/*******************************************************************************
 * End of 'EDB_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  EDB_INTR_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_INTR_STATUS.
 */
#define READ_EDB_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_INTR_STATUSr_BLKACC,89,n,0,EDB_INTR_STATUSr_OFFSET,0,(r._edb_intr_status),1)
#define WRITE_EDB_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_INTR_STATUSr_BLKACC,89,n,0,EDB_INTR_STATUSr_OFFSET,0,&(r._edb_intr_status),1)
#define WRITE_EDB_INTR_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_INTR_STATUSr_BLKACC,89,-1,0,EDB_INTR_STATUSr_OFFSET,0,&(r._edb_intr_status),1)

/*******************************************************************************
 * End of 'EDB_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  EDB_INT_EN
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_INT_EN.
 */
#define READ_EDB_INT_ENr(u,r) bcmbd_cmicx_reg_block_read(u,EDB_INT_ENr_BLKACC,89,EDB_INT_ENr_OFFSET,0,(r._edb_int_en), 1)
#define WRITE_EDB_INT_ENr(u,r) bcmbd_cmicx_reg_block_write(u,EDB_INT_ENr_BLKACC,89,EDB_INT_ENr_OFFSET,0,&(r._edb_int_en), 1)

/*******************************************************************************
 * End of 'EDB_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  EDB_INT_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_INT_STATUS.
 */
#define READ_EDB_INT_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_INT_STATUSr_BLKACC,89,n,0,EDB_INT_STATUSr_OFFSET,0,(r._edb_int_status),1)
#define WRITE_EDB_INT_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_INT_STATUSr_BLKACC,89,n,0,EDB_INT_STATUSr_OFFSET,0,&(r._edb_int_status),1)
#define WRITE_EDB_INT_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_INT_STATUSr_BLKACC,89,-1,0,EDB_INT_STATUSr_OFFSET,0,&(r._edb_int_status),1)

/*******************************************************************************
 * End of 'EDB_INT_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  EDB_IP_CUT_THRU_CLASS
 * BLOCKS:   PORT_IF
 * SIZE:     4
 */
/*
 * These macros can be used to access EDB_IP_CUT_THRU_CLASS.
 */
#define READ_EDB_IP_CUT_THRU_CLASSm(u,i,m) bcmbd_cmicx_mem_block_read(u,EDB_IP_CUT_THRU_CLASSm_BLKACC,89,EDB_IP_CUT_THRU_CLASSm_OFFSET,i,(m._edb_ip_cut_thru_class),1)
#define WRITE_EDB_IP_CUT_THRU_CLASSm(u,i,m) bcmbd_cmicx_mem_block_write(u,EDB_IP_CUT_THRU_CLASSm_BLKACC,89,EDB_IP_CUT_THRU_CLASSm_OFFSET,i,&(m._edb_ip_cut_thru_class),1)

/*******************************************************************************
 * End of 'EDB_IP_CUT_THRU_CLASSm'
 */




/*******************************************************************************
 * REGISTER:  EDB_MISC_CTRL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_MISC_CTRL.
 */
#define READ_EDB_MISC_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_MISC_CTRLr_BLKACC,89,n,0,EDB_MISC_CTRLr_OFFSET,0,(r._edb_misc_ctrl),1)
#define WRITE_EDB_MISC_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_MISC_CTRLr_BLKACC,89,n,0,EDB_MISC_CTRLr_OFFSET,0,&(r._edb_misc_ctrl),1)
#define WRITE_EDB_MISC_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_MISC_CTRLr_BLKACC,89,-1,0,EDB_MISC_CTRLr_OFFSET,0,&(r._edb_misc_ctrl),1)

/*******************************************************************************
 * End of 'EDB_MISC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  EDB_PM0_BUF_START_END_ADDR
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_PM0_BUF_START_END_ADDR.
 */
#define READ_EDB_PM0_BUF_START_END_ADDRr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_PM0_BUF_START_END_ADDRr_BLKACC,89,n,0,EDB_PM0_BUF_START_END_ADDRr_OFFSET,i,(r._edb_pm0_buf_start_end_addr),1)
#define WRITE_EDB_PM0_BUF_START_END_ADDRr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM0_BUF_START_END_ADDRr_BLKACC,89,n,0,EDB_PM0_BUF_START_END_ADDRr_OFFSET,i,&(r._edb_pm0_buf_start_end_addr),1)
#define WRITE_EDB_PM0_BUF_START_END_ADDRr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM0_BUF_START_END_ADDRr_BLKACC,89,-1,0,EDB_PM0_BUF_START_END_ADDRr_OFFSET,i,&(r._edb_pm0_buf_start_end_addr),1)

/*******************************************************************************
 * End of 'EDB_PM0_BUF_START_END_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  EDB_PM0_BUF_START_END_ADDR_0_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_PM0_BUF_START_END_ADDR_0_1.
 */
#define READ_EDB_PM0_BUF_START_END_ADDR_0_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_PM0_BUF_START_END_ADDR_0_1r_BLKACC,89,n,0,EDB_PM0_BUF_START_END_ADDR_0_1r_OFFSET,0,(r._edb_pm0_buf_start_end_addr_0_1),1)
#define WRITE_EDB_PM0_BUF_START_END_ADDR_0_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM0_BUF_START_END_ADDR_0_1r_BLKACC,89,n,0,EDB_PM0_BUF_START_END_ADDR_0_1r_OFFSET,0,&(r._edb_pm0_buf_start_end_addr_0_1),1)
#define WRITE_EDB_PM0_BUF_START_END_ADDR_0_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM0_BUF_START_END_ADDR_0_1r_BLKACC,89,-1,0,EDB_PM0_BUF_START_END_ADDR_0_1r_OFFSET,0,&(r._edb_pm0_buf_start_end_addr_0_1),1)

/*******************************************************************************
 * End of 'EDB_PM0_BUF_START_END_ADDR_0_1r'
 */




/*******************************************************************************
 * REGISTER:  EDB_PM0_BUF_START_END_ADDR_2_3
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_PM0_BUF_START_END_ADDR_2_3.
 */
#define READ_EDB_PM0_BUF_START_END_ADDR_2_3r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_PM0_BUF_START_END_ADDR_2_3r_BLKACC,89,n,0,EDB_PM0_BUF_START_END_ADDR_2_3r_OFFSET,0,(r._edb_pm0_buf_start_end_addr_2_3),1)
#define WRITE_EDB_PM0_BUF_START_END_ADDR_2_3r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM0_BUF_START_END_ADDR_2_3r_BLKACC,89,n,0,EDB_PM0_BUF_START_END_ADDR_2_3r_OFFSET,0,&(r._edb_pm0_buf_start_end_addr_2_3),1)
#define WRITE_EDB_PM0_BUF_START_END_ADDR_2_3r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM0_BUF_START_END_ADDR_2_3r_BLKACC,89,-1,0,EDB_PM0_BUF_START_END_ADDR_2_3r_OFFSET,0,&(r._edb_pm0_buf_start_end_addr_2_3),1)

/*******************************************************************************
 * End of 'EDB_PM0_BUF_START_END_ADDR_2_3r'
 */




/*******************************************************************************
 * REGISTER:  EDB_PM1_BUF_START_END_ADDR
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_PM1_BUF_START_END_ADDR.
 */
#define READ_EDB_PM1_BUF_START_END_ADDRr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_PM1_BUF_START_END_ADDRr_BLKACC,89,n,0,EDB_PM1_BUF_START_END_ADDRr_OFFSET,i,(r._edb_pm1_buf_start_end_addr),1)
#define WRITE_EDB_PM1_BUF_START_END_ADDRr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM1_BUF_START_END_ADDRr_BLKACC,89,n,0,EDB_PM1_BUF_START_END_ADDRr_OFFSET,i,&(r._edb_pm1_buf_start_end_addr),1)
#define WRITE_EDB_PM1_BUF_START_END_ADDRr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM1_BUF_START_END_ADDRr_BLKACC,89,-1,0,EDB_PM1_BUF_START_END_ADDRr_OFFSET,i,&(r._edb_pm1_buf_start_end_addr),1)

/*******************************************************************************
 * End of 'EDB_PM1_BUF_START_END_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  EDB_PM1_BUF_START_END_ADDR_0_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_PM1_BUF_START_END_ADDR_0_1.
 */
#define READ_EDB_PM1_BUF_START_END_ADDR_0_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_PM1_BUF_START_END_ADDR_0_1r_BLKACC,89,n,0,EDB_PM1_BUF_START_END_ADDR_0_1r_OFFSET,0,(r._edb_pm1_buf_start_end_addr_0_1),1)
#define WRITE_EDB_PM1_BUF_START_END_ADDR_0_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM1_BUF_START_END_ADDR_0_1r_BLKACC,89,n,0,EDB_PM1_BUF_START_END_ADDR_0_1r_OFFSET,0,&(r._edb_pm1_buf_start_end_addr_0_1),1)
#define WRITE_EDB_PM1_BUF_START_END_ADDR_0_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM1_BUF_START_END_ADDR_0_1r_BLKACC,89,-1,0,EDB_PM1_BUF_START_END_ADDR_0_1r_OFFSET,0,&(r._edb_pm1_buf_start_end_addr_0_1),1)

/*******************************************************************************
 * End of 'EDB_PM1_BUF_START_END_ADDR_0_1r'
 */




/*******************************************************************************
 * REGISTER:  EDB_PM1_BUF_START_END_ADDR_2_3
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_PM1_BUF_START_END_ADDR_2_3.
 */
#define READ_EDB_PM1_BUF_START_END_ADDR_2_3r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_PM1_BUF_START_END_ADDR_2_3r_BLKACC,89,n,0,EDB_PM1_BUF_START_END_ADDR_2_3r_OFFSET,0,(r._edb_pm1_buf_start_end_addr_2_3),1)
#define WRITE_EDB_PM1_BUF_START_END_ADDR_2_3r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM1_BUF_START_END_ADDR_2_3r_BLKACC,89,n,0,EDB_PM1_BUF_START_END_ADDR_2_3r_OFFSET,0,&(r._edb_pm1_buf_start_end_addr_2_3),1)
#define WRITE_EDB_PM1_BUF_START_END_ADDR_2_3r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM1_BUF_START_END_ADDR_2_3r_BLKACC,89,-1,0,EDB_PM1_BUF_START_END_ADDR_2_3r_OFFSET,0,&(r._edb_pm1_buf_start_end_addr_2_3),1)

/*******************************************************************************
 * End of 'EDB_PM1_BUF_START_END_ADDR_2_3r'
 */




/*******************************************************************************
 * REGISTER:  EDB_PM2_BUF_START_END_ADDR
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_PM2_BUF_START_END_ADDR.
 */
#define READ_EDB_PM2_BUF_START_END_ADDRr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_PM2_BUF_START_END_ADDRr_BLKACC,89,n,0,EDB_PM2_BUF_START_END_ADDRr_OFFSET,i,(r._edb_pm2_buf_start_end_addr),1)
#define WRITE_EDB_PM2_BUF_START_END_ADDRr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM2_BUF_START_END_ADDRr_BLKACC,89,n,0,EDB_PM2_BUF_START_END_ADDRr_OFFSET,i,&(r._edb_pm2_buf_start_end_addr),1)
#define WRITE_EDB_PM2_BUF_START_END_ADDRr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM2_BUF_START_END_ADDRr_BLKACC,89,-1,0,EDB_PM2_BUF_START_END_ADDRr_OFFSET,i,&(r._edb_pm2_buf_start_end_addr),1)

/*******************************************************************************
 * End of 'EDB_PM2_BUF_START_END_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  EDB_PM2_BUF_START_END_ADDR_0_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_PM2_BUF_START_END_ADDR_0_1.
 */
#define READ_EDB_PM2_BUF_START_END_ADDR_0_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_PM2_BUF_START_END_ADDR_0_1r_BLKACC,89,n,0,EDB_PM2_BUF_START_END_ADDR_0_1r_OFFSET,0,(r._edb_pm2_buf_start_end_addr_0_1),1)
#define WRITE_EDB_PM2_BUF_START_END_ADDR_0_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM2_BUF_START_END_ADDR_0_1r_BLKACC,89,n,0,EDB_PM2_BUF_START_END_ADDR_0_1r_OFFSET,0,&(r._edb_pm2_buf_start_end_addr_0_1),1)
#define WRITE_EDB_PM2_BUF_START_END_ADDR_0_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM2_BUF_START_END_ADDR_0_1r_BLKACC,89,-1,0,EDB_PM2_BUF_START_END_ADDR_0_1r_OFFSET,0,&(r._edb_pm2_buf_start_end_addr_0_1),1)

/*******************************************************************************
 * End of 'EDB_PM2_BUF_START_END_ADDR_0_1r'
 */




/*******************************************************************************
 * REGISTER:  EDB_PM2_BUF_START_END_ADDR_2_3
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_PM2_BUF_START_END_ADDR_2_3.
 */
#define READ_EDB_PM2_BUF_START_END_ADDR_2_3r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_PM2_BUF_START_END_ADDR_2_3r_BLKACC,89,n,0,EDB_PM2_BUF_START_END_ADDR_2_3r_OFFSET,0,(r._edb_pm2_buf_start_end_addr_2_3),1)
#define WRITE_EDB_PM2_BUF_START_END_ADDR_2_3r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM2_BUF_START_END_ADDR_2_3r_BLKACC,89,n,0,EDB_PM2_BUF_START_END_ADDR_2_3r_OFFSET,0,&(r._edb_pm2_buf_start_end_addr_2_3),1)
#define WRITE_EDB_PM2_BUF_START_END_ADDR_2_3r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM2_BUF_START_END_ADDR_2_3r_BLKACC,89,-1,0,EDB_PM2_BUF_START_END_ADDR_2_3r_OFFSET,0,&(r._edb_pm2_buf_start_end_addr_2_3),1)

/*******************************************************************************
 * End of 'EDB_PM2_BUF_START_END_ADDR_2_3r'
 */




/*******************************************************************************
 * REGISTER:  EDB_PM3_BUF_START_END_ADDR
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_PM3_BUF_START_END_ADDR.
 */
#define READ_EDB_PM3_BUF_START_END_ADDRr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_PM3_BUF_START_END_ADDRr_BLKACC,89,n,0,EDB_PM3_BUF_START_END_ADDRr_OFFSET,i,(r._edb_pm3_buf_start_end_addr),1)
#define WRITE_EDB_PM3_BUF_START_END_ADDRr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM3_BUF_START_END_ADDRr_BLKACC,89,n,0,EDB_PM3_BUF_START_END_ADDRr_OFFSET,i,&(r._edb_pm3_buf_start_end_addr),1)
#define WRITE_EDB_PM3_BUF_START_END_ADDRr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM3_BUF_START_END_ADDRr_BLKACC,89,-1,0,EDB_PM3_BUF_START_END_ADDRr_OFFSET,i,&(r._edb_pm3_buf_start_end_addr),1)

/*******************************************************************************
 * End of 'EDB_PM3_BUF_START_END_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  EDB_PM3_BUF_START_END_ADDR_0_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_PM3_BUF_START_END_ADDR_0_1.
 */
#define READ_EDB_PM3_BUF_START_END_ADDR_0_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_PM3_BUF_START_END_ADDR_0_1r_BLKACC,89,n,0,EDB_PM3_BUF_START_END_ADDR_0_1r_OFFSET,0,(r._edb_pm3_buf_start_end_addr_0_1),1)
#define WRITE_EDB_PM3_BUF_START_END_ADDR_0_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM3_BUF_START_END_ADDR_0_1r_BLKACC,89,n,0,EDB_PM3_BUF_START_END_ADDR_0_1r_OFFSET,0,&(r._edb_pm3_buf_start_end_addr_0_1),1)
#define WRITE_EDB_PM3_BUF_START_END_ADDR_0_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM3_BUF_START_END_ADDR_0_1r_BLKACC,89,-1,0,EDB_PM3_BUF_START_END_ADDR_0_1r_OFFSET,0,&(r._edb_pm3_buf_start_end_addr_0_1),1)

/*******************************************************************************
 * End of 'EDB_PM3_BUF_START_END_ADDR_0_1r'
 */




/*******************************************************************************
 * REGISTER:  EDB_PM3_BUF_START_END_ADDR_2_3
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_PM3_BUF_START_END_ADDR_2_3.
 */
#define READ_EDB_PM3_BUF_START_END_ADDR_2_3r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_PM3_BUF_START_END_ADDR_2_3r_BLKACC,89,n,0,EDB_PM3_BUF_START_END_ADDR_2_3r_OFFSET,0,(r._edb_pm3_buf_start_end_addr_2_3),1)
#define WRITE_EDB_PM3_BUF_START_END_ADDR_2_3r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM3_BUF_START_END_ADDR_2_3r_BLKACC,89,n,0,EDB_PM3_BUF_START_END_ADDR_2_3r_OFFSET,0,&(r._edb_pm3_buf_start_end_addr_2_3),1)
#define WRITE_EDB_PM3_BUF_START_END_ADDR_2_3r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PM3_BUF_START_END_ADDR_2_3r_BLKACC,89,-1,0,EDB_PM3_BUF_START_END_ADDR_2_3r_OFFSET,0,&(r._edb_pm3_buf_start_end_addr_2_3),1)

/*******************************************************************************
 * End of 'EDB_PM3_BUF_START_END_ADDR_2_3r'
 */




/*******************************************************************************
 * REGISTER:  EDB_PORT_MODE_OVERRIDE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_PORT_MODE_OVERRIDE.
 */
#define READ_EDB_PORT_MODE_OVERRIDEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_PORT_MODE_OVERRIDEr_BLKACC,89,n,0,EDB_PORT_MODE_OVERRIDEr_OFFSET,0,(r._edb_port_mode_override),1)
#define WRITE_EDB_PORT_MODE_OVERRIDEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PORT_MODE_OVERRIDEr_BLKACC,89,n,0,EDB_PORT_MODE_OVERRIDEr_OFFSET,0,&(r._edb_port_mode_override),1)
#define WRITE_EDB_PORT_MODE_OVERRIDEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PORT_MODE_OVERRIDEr_BLKACC,89,-1,0,EDB_PORT_MODE_OVERRIDEr_OFFSET,0,&(r._edb_port_mode_override),1)

/*******************************************************************************
 * End of 'EDB_PORT_MODE_OVERRIDEr'
 */




/*******************************************************************************
 * REGISTER:  EDB_PUSH_CNT_FIFO_MAX_USED_ENTRIES
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_PUSH_CNT_FIFO_MAX_USED_ENTRIES.
 */
#define READ_EDB_PUSH_CNT_FIFO_MAX_USED_ENTRIESr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_PUSH_CNT_FIFO_MAX_USED_ENTRIESr_BLKACC,89,n,0,EDB_PUSH_CNT_FIFO_MAX_USED_ENTRIESr_OFFSET,0,(r._edb_push_cnt_fifo_max_used_entries),1)
#define WRITE_EDB_PUSH_CNT_FIFO_MAX_USED_ENTRIESr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PUSH_CNT_FIFO_MAX_USED_ENTRIESr_BLKACC,89,n,0,EDB_PUSH_CNT_FIFO_MAX_USED_ENTRIESr_OFFSET,0,&(r._edb_push_cnt_fifo_max_used_entries),1)
#define WRITE_EDB_PUSH_CNT_FIFO_MAX_USED_ENTRIESr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_PUSH_CNT_FIFO_MAX_USED_ENTRIESr_BLKACC,89,-1,0,EDB_PUSH_CNT_FIFO_MAX_USED_ENTRIESr_OFFSET,0,&(r._edb_push_cnt_fifo_max_used_entries),1)

/*******************************************************************************
 * End of 'EDB_PUSH_CNT_FIFO_MAX_USED_ENTRIESr'
 */




/*******************************************************************************
 * REGISTER:  EDB_RAM_TM_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_RAM_TM_CONTROL.
 */
#define READ_EDB_RAM_TM_CONTROLr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_RAM_TM_CONTROLr_BLKACC,89,n,0,EDB_RAM_TM_CONTROLr_OFFSET,i,(r._edb_ram_tm_control),1)
#define WRITE_EDB_RAM_TM_CONTROLr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_RAM_TM_CONTROLr_BLKACC,89,n,0,EDB_RAM_TM_CONTROLr_OFFSET,i,&(r._edb_ram_tm_control),1)
#define WRITE_EDB_RAM_TM_CONTROLr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_RAM_TM_CONTROLr_BLKACC,89,-1,0,EDB_RAM_TM_CONTROLr_OFFSET,i,&(r._edb_ram_tm_control),1)

/*******************************************************************************
 * End of 'EDB_RAM_TM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EDB_RAM_TM_CONTROL_0
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_RAM_TM_CONTROL_0.
 */
#define READ_EDB_RAM_TM_CONTROL_0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_RAM_TM_CONTROL_0r_BLKACC,89,n,0,EDB_RAM_TM_CONTROL_0r_OFFSET,0,(r._edb_ram_tm_control_0),1)
#define WRITE_EDB_RAM_TM_CONTROL_0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_RAM_TM_CONTROL_0r_BLKACC,89,n,0,EDB_RAM_TM_CONTROL_0r_OFFSET,0,&(r._edb_ram_tm_control_0),1)
#define WRITE_EDB_RAM_TM_CONTROL_0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_RAM_TM_CONTROL_0r_BLKACC,89,-1,0,EDB_RAM_TM_CONTROL_0r_OFFSET,0,&(r._edb_ram_tm_control_0),1)

/*******************************************************************************
 * End of 'EDB_RAM_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  EDB_RAM_TM_CONTROL_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_RAM_TM_CONTROL_1.
 */
#define READ_EDB_RAM_TM_CONTROL_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_RAM_TM_CONTROL_1r_BLKACC,89,n,0,EDB_RAM_TM_CONTROL_1r_OFFSET,0,(r._edb_ram_tm_control_1),1)
#define WRITE_EDB_RAM_TM_CONTROL_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_RAM_TM_CONTROL_1r_BLKACC,89,n,0,EDB_RAM_TM_CONTROL_1r_OFFSET,0,&(r._edb_ram_tm_control_1),1)
#define WRITE_EDB_RAM_TM_CONTROL_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_RAM_TM_CONTROL_1r_BLKACC,89,-1,0,EDB_RAM_TM_CONTROL_1r_OFFSET,0,&(r._edb_ram_tm_control_1),1)

/*******************************************************************************
 * End of 'EDB_RAM_TM_CONTROL_1r'
 */




/*******************************************************************************
 * MEMORY:  EDB_SER_FIFO
 * BLOCKS:   PORT_IF
 * SIZE:     50
 */
/*
 * These macros can be used to access EDB_SER_FIFO.
 */
#define READ_EDB_SER_FIFOm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EDB_SER_FIFOm_BLKACC,89,n,0,EDB_SER_FIFOm_OFFSET,i,(m._edb_ser_fifo),2)
#define WRITE_EDB_SER_FIFOm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EDB_SER_FIFOm_BLKACC,89,n,0,EDB_SER_FIFOm_OFFSET,i,&(m._edb_ser_fifo),2)
#define WRITE_EDB_SER_FIFOm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EDB_SER_FIFOm_BLKACC,89,-1,0,EDB_SER_FIFOm_OFFSET,i,&(m._edb_ser_fifo),2)

/*******************************************************************************
 * End of 'EDB_SER_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  EDB_SER_FIFO_CTRL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_SER_FIFO_CTRL.
 */
#define READ_EDB_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_SER_FIFO_CTRLr_BLKACC,89,n,0,EDB_SER_FIFO_CTRLr_OFFSET,0,(r._edb_ser_fifo_ctrl),1)
#define WRITE_EDB_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_SER_FIFO_CTRLr_BLKACC,89,n,0,EDB_SER_FIFO_CTRLr_OFFSET,0,&(r._edb_ser_fifo_ctrl),1)
#define WRITE_EDB_SER_FIFO_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_SER_FIFO_CTRLr_BLKACC,89,-1,0,EDB_SER_FIFO_CTRLr_OFFSET,0,&(r._edb_ser_fifo_ctrl),1)

/*******************************************************************************
 * End of 'EDB_SER_FIFO_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  EDB_SER_FIFO_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_SER_FIFO_STATUS.
 */
#define READ_EDB_SER_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_SER_FIFO_STATUSr_BLKACC,89,n,0,EDB_SER_FIFO_STATUSr_OFFSET,0,(r._edb_ser_fifo_status),1)
#define WRITE_EDB_SER_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_SER_FIFO_STATUSr_BLKACC,89,n,0,EDB_SER_FIFO_STATUSr_OFFSET,0,&(r._edb_ser_fifo_status),1)
#define WRITE_EDB_SER_FIFO_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_SER_FIFO_STATUSr_BLKACC,89,-1,0,EDB_SER_FIFO_STATUSr_OFFSET,0,&(r._edb_ser_fifo_status),1)

/*******************************************************************************
 * End of 'EDB_SER_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  EDB_SPECIAL_DROP_DEBUG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_SPECIAL_DROP_DEBUG.
 */
#define READ_EDB_SPECIAL_DROP_DEBUGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EDB_SPECIAL_DROP_DEBUGr_BLKACC,89,n,0,EDB_SPECIAL_DROP_DEBUGr_OFFSET,0,(r._edb_special_drop_debug),1)
#define WRITE_EDB_SPECIAL_DROP_DEBUGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_SPECIAL_DROP_DEBUGr_BLKACC,89,n,0,EDB_SPECIAL_DROP_DEBUGr_OFFSET,0,&(r._edb_special_drop_debug),1)
#define WRITE_EDB_SPECIAL_DROP_DEBUGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EDB_SPECIAL_DROP_DEBUGr_BLKACC,89,-1,0,EDB_SPECIAL_DROP_DEBUGr_OFFSET,0,&(r._edb_special_drop_debug),1)

/*******************************************************************************
 * End of 'EDB_SPECIAL_DROP_DEBUGr'
 */




/*******************************************************************************
 * MEMORY:  EDB_XMIT_START_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     15
 */
/*
 * These macros can be used to access EDB_XMIT_START_COUNT.
 */
#define READ_EDB_XMIT_START_COUNTm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EDB_XMIT_START_COUNTm_BLKACC,89,n,0,EDB_XMIT_START_COUNTm_OFFSET,i,(m._edb_xmit_start_count),1)
#define WRITE_EDB_XMIT_START_COUNTm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EDB_XMIT_START_COUNTm_BLKACC,89,n,0,EDB_XMIT_START_COUNTm_OFFSET,i,&(m._edb_xmit_start_count),1)
#define WRITE_EDB_XMIT_START_COUNTm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EDB_XMIT_START_COUNTm_BLKACC,89,-1,0,EDB_XMIT_START_COUNTm_OFFSET,i,&(m._edb_xmit_start_count),1)

/*******************************************************************************
 * End of 'EDB_XMIT_START_COUNTm'
 */




/*******************************************************************************
 * REGISTER:  EFP_CAM_BIST_CONFIG_1_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EFP_CAM_BIST_CONFIG_1_64.
 */
#define READ_EFP_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EFP_CAM_BIST_CONFIG_1_64r_BLKACC,2,n,0,EFP_CAM_BIST_CONFIG_1_64r_OFFSET,0,(r._efp_cam_bist_config_1_64),2)
#define WRITE_EFP_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_CAM_BIST_CONFIG_1_64r_BLKACC,2,n,0,EFP_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._efp_cam_bist_config_1_64),2)
#define WRITE_EFP_CAM_BIST_CONFIG_1_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_CAM_BIST_CONFIG_1_64r_BLKACC,2,-1,0,EFP_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._efp_cam_bist_config_1_64),2)

/*******************************************************************************
 * End of 'EFP_CAM_BIST_CONFIG_1_64r'
 */




/*******************************************************************************
 * REGISTER:  EFP_CAM_BIST_CONFIG_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EFP_CAM_BIST_CONFIG_64.
 */
#define READ_EFP_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EFP_CAM_BIST_CONFIG_64r_BLKACC,2,n,0,EFP_CAM_BIST_CONFIG_64r_OFFSET,0,(r._efp_cam_bist_config_64),2)
#define WRITE_EFP_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_CAM_BIST_CONFIG_64r_BLKACC,2,n,0,EFP_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._efp_cam_bist_config_64),2)
#define WRITE_EFP_CAM_BIST_CONFIG_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_CAM_BIST_CONFIG_64r_BLKACC,2,-1,0,EFP_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._efp_cam_bist_config_64),2)

/*******************************************************************************
 * End of 'EFP_CAM_BIST_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  EFP_CAM_BIST_STATUS
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_CAM_BIST_STATUS.
 */
#define READ_EFP_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EFP_CAM_BIST_STATUSr_BLKACC,2,n,0,EFP_CAM_BIST_STATUSr_OFFSET,0,(r._efp_cam_bist_status),1)
#define WRITE_EFP_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_CAM_BIST_STATUSr_BLKACC,2,n,0,EFP_CAM_BIST_STATUSr_OFFSET,0,&(r._efp_cam_bist_status),1)
#define WRITE_EFP_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_CAM_BIST_STATUSr_BLKACC,2,-1,0,EFP_CAM_BIST_STATUSr_OFFSET,0,&(r._efp_cam_bist_status),1)

/*******************************************************************************
 * End of 'EFP_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  EFP_CAM_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EFP_CAM_CONTROL.
 */
#define READ_EFP_CAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EFP_CAM_CONTROLr_BLKACC,2,n,0,EFP_CAM_CONTROLr_OFFSET,0,(r._efp_cam_control),2)
#define WRITE_EFP_CAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_CAM_CONTROLr_BLKACC,2,n,0,EFP_CAM_CONTROLr_OFFSET,0,&(r._efp_cam_control),2)
#define WRITE_EFP_CAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_CAM_CONTROLr_BLKACC,2,-1,0,EFP_CAM_CONTROLr_OFFSET,0,&(r._efp_cam_control),2)

/*******************************************************************************
 * End of 'EFP_CAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EFP_CLASSID_SELECTOR
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EFP_CLASSID_SELECTOR.
 */
#define READ_EFP_CLASSID_SELECTORr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EFP_CLASSID_SELECTORr_BLKACC,2,n,0,EFP_CLASSID_SELECTORr_OFFSET,0,(r._efp_classid_selector),2)
#define WRITE_EFP_CLASSID_SELECTORr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_CLASSID_SELECTORr_BLKACC,2,n,0,EFP_CLASSID_SELECTORr_OFFSET,0,&(r._efp_classid_selector),2)
#define WRITE_EFP_CLASSID_SELECTORr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_CLASSID_SELECTORr_BLKACC&(~(0x1f<<18))|(17<<18),2,-1,0,EFP_CLASSID_SELECTORr_OFFSET,0,&(r._efp_classid_selector),2)

/*******************************************************************************
 * End of 'EFP_CLASSID_SELECTORr'
 */




/*******************************************************************************
 * REGISTER:  EFP_EN_COR_ERR_RPT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_EN_COR_ERR_RPT.
 */
#define READ_EFP_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_read(u,EFP_EN_COR_ERR_RPTr_BLKACC,2,EFP_EN_COR_ERR_RPTr_OFFSET,0,(r._efp_en_cor_err_rpt), 1)
#define WRITE_EFP_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_write(u,EFP_EN_COR_ERR_RPTr_BLKACC,2,EFP_EN_COR_ERR_RPTr_OFFSET,0,&(r._efp_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'EFP_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  EFP_KEY4_L3_CLASSID_SELECTOR
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_KEY4_L3_CLASSID_SELECTOR.
 */
#define READ_EFP_KEY4_L3_CLASSID_SELECTORr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EFP_KEY4_L3_CLASSID_SELECTORr_BLKACC,2,n,0,EFP_KEY4_L3_CLASSID_SELECTORr_OFFSET,0,(r._efp_key4_l3_classid_selector),1)
#define WRITE_EFP_KEY4_L3_CLASSID_SELECTORr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_KEY4_L3_CLASSID_SELECTORr_BLKACC,2,n,0,EFP_KEY4_L3_CLASSID_SELECTORr_OFFSET,0,&(r._efp_key4_l3_classid_selector),1)
#define WRITE_EFP_KEY4_L3_CLASSID_SELECTORr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_KEY4_L3_CLASSID_SELECTORr_BLKACC&(~(0x1f<<18))|(17<<18),2,-1,0,EFP_KEY4_L3_CLASSID_SELECTORr_OFFSET,0,&(r._efp_key4_l3_classid_selector),1)

/*******************************************************************************
 * End of 'EFP_KEY4_L3_CLASSID_SELECTORr'
 */




/*******************************************************************************
 * REGISTER:  EFP_KEY4_MDL_SELECTOR
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_KEY4_MDL_SELECTOR.
 */
#define READ_EFP_KEY4_MDL_SELECTORr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EFP_KEY4_MDL_SELECTORr_BLKACC,2,n,0,EFP_KEY4_MDL_SELECTORr_OFFSET,0,(r._efp_key4_mdl_selector),1)
#define WRITE_EFP_KEY4_MDL_SELECTORr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_KEY4_MDL_SELECTORr_BLKACC,2,n,0,EFP_KEY4_MDL_SELECTORr_OFFSET,0,&(r._efp_key4_mdl_selector),1)
#define WRITE_EFP_KEY4_MDL_SELECTORr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_KEY4_MDL_SELECTORr_BLKACC&(~(0x1f<<18))|(17<<18),2,-1,0,EFP_KEY4_MDL_SELECTORr_OFFSET,0,&(r._efp_key4_mdl_selector),1)

/*******************************************************************************
 * End of 'EFP_KEY4_MDL_SELECTORr'
 */




/*******************************************************************************
 * REGISTER:  EFP_KEY8_L3_CLASSID_SELECTOR
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_KEY8_L3_CLASSID_SELECTOR.
 */
#define READ_EFP_KEY8_L3_CLASSID_SELECTORr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EFP_KEY8_L3_CLASSID_SELECTORr_BLKACC,2,n,0,EFP_KEY8_L3_CLASSID_SELECTORr_OFFSET,0,(r._efp_key8_l3_classid_selector),1)
#define WRITE_EFP_KEY8_L3_CLASSID_SELECTORr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_KEY8_L3_CLASSID_SELECTORr_BLKACC,2,n,0,EFP_KEY8_L3_CLASSID_SELECTORr_OFFSET,0,&(r._efp_key8_l3_classid_selector),1)
#define WRITE_EFP_KEY8_L3_CLASSID_SELECTORr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_KEY8_L3_CLASSID_SELECTORr_BLKACC&(~(0x1f<<18))|(17<<18),2,-1,0,EFP_KEY8_L3_CLASSID_SELECTORr_OFFSET,0,&(r._efp_key8_l3_classid_selector),1)

/*******************************************************************************
 * End of 'EFP_KEY8_L3_CLASSID_SELECTORr'
 */




/*******************************************************************************
 * MEMORY:  EFP_POLICY_TABLE
 * BLOCKS:   EPIPE
 * SIZE:     153
 */
/*
 * These macros can be used to access EFP_POLICY_TABLE.
 */
#define READ_EFP_POLICY_TABLEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EFP_POLICY_TABLEm_BLKACC,2,n,0,EFP_POLICY_TABLEm_OFFSET,i,(m._efp_policy_table),5)
#define WRITE_EFP_POLICY_TABLEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EFP_POLICY_TABLEm_BLKACC,2,n,0,EFP_POLICY_TABLEm_OFFSET,i,&(m._efp_policy_table),5)
#define WRITE_EFP_POLICY_TABLEm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EFP_POLICY_TABLEm_BLKACC,2,-1,0,EFP_POLICY_TABLEm_OFFSET,i,&(m._efp_policy_table),5)

/*******************************************************************************
 * End of 'EFP_POLICY_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  EFP_RAM_CONTROL_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EFP_RAM_CONTROL_64.
 */
#define READ_EFP_RAM_CONTROL_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EFP_RAM_CONTROL_64r_BLKACC,2,n,0,EFP_RAM_CONTROL_64r_OFFSET,0,(r._efp_ram_control_64),2)
#define WRITE_EFP_RAM_CONTROL_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_RAM_CONTROL_64r_BLKACC,2,n,0,EFP_RAM_CONTROL_64r_OFFSET,0,&(r._efp_ram_control_64),2)
#define WRITE_EFP_RAM_CONTROL_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_RAM_CONTROL_64r_BLKACC,2,-1,0,EFP_RAM_CONTROL_64r_OFFSET,0,&(r._efp_ram_control_64),2)

/*******************************************************************************
 * End of 'EFP_RAM_CONTROL_64r'
 */




/*******************************************************************************
 * REGISTER:  EFP_SER_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_SER_CONTROL.
 */
#define READ_EFP_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EFP_SER_CONTROLr_BLKACC,2,EFP_SER_CONTROLr_OFFSET,0,(r._efp_ser_control), 1)
#define WRITE_EFP_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EFP_SER_CONTROLr_BLKACC,2,EFP_SER_CONTROLr_OFFSET,0,&(r._efp_ser_control), 1)

/*******************************************************************************
 * End of 'EFP_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EFP_SLICE_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_SLICE_CONTROL.
 */
#define READ_EFP_SLICE_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EFP_SLICE_CONTROLr_BLKACC,2,n,0,EFP_SLICE_CONTROLr_OFFSET,0,(r._efp_slice_control),1)
#define WRITE_EFP_SLICE_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_SLICE_CONTROLr_BLKACC,2,n,0,EFP_SLICE_CONTROLr_OFFSET,0,&(r._efp_slice_control),1)
#define WRITE_EFP_SLICE_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_SLICE_CONTROLr_BLKACC&(~(0x1f<<18))|(17<<18),2,-1,0,EFP_SLICE_CONTROLr_OFFSET,0,&(r._efp_slice_control),1)

/*******************************************************************************
 * End of 'EFP_SLICE_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EFP_SLICE_MAP
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_SLICE_MAP.
 */
#define READ_EFP_SLICE_MAPr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EFP_SLICE_MAPr_BLKACC,2,n,0,EFP_SLICE_MAPr_OFFSET,0,(r._efp_slice_map),1)
#define WRITE_EFP_SLICE_MAPr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_SLICE_MAPr_BLKACC,2,n,0,EFP_SLICE_MAPr_OFFSET,0,&(r._efp_slice_map),1)
#define WRITE_EFP_SLICE_MAPr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EFP_SLICE_MAPr_BLKACC&(~(0x1f<<18))|(17<<18),2,-1,0,EFP_SLICE_MAPr_OFFSET,0,&(r._efp_slice_map),1)

/*******************************************************************************
 * End of 'EFP_SLICE_MAPr'
 */




/*******************************************************************************
 * MEMORY:  EFP_TCAM
 * BLOCKS:   EPIPE
 * SIZE:     500
 */
/*
 * These macros can be used to access EFP_TCAM.
 */
#define READ_EFP_TCAMm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EFP_TCAMm_BLKACC,2,n,0,EFP_TCAMm_OFFSET,i,(m._efp_tcam),16)
#define WRITE_EFP_TCAMm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EFP_TCAMm_BLKACC,2,n,0,EFP_TCAMm_OFFSET,i,&(m._efp_tcam),16)
#define WRITE_EFP_TCAMm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EFP_TCAMm_BLKACC,2,-1,0,EFP_TCAMm_OFFSET,i,&(m._efp_tcam),16)

/*******************************************************************************
 * End of 'EFP_TCAMm'
 */




/*******************************************************************************
 * REGISTER:  EGR_1588_EGRESS_CTRL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_1588_EGRESS_CTRL.
 */
#define READ_EGR_1588_EGRESS_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_1588_EGRESS_CTRLr_BLKACC,p,EGR_1588_EGRESS_CTRLr_OFFSET,0,(r._egr_1588_egress_ctrl), 1)
#define WRITE_EGR_1588_EGRESS_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_1588_EGRESS_CTRLr_BLKACC,p,EGR_1588_EGRESS_CTRLr_OFFSET,0,&(r._egr_1588_egress_ctrl), 1)

/*******************************************************************************
 * End of 'EGR_1588_EGRESS_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_1588_INGRESS_CTRL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_1588_INGRESS_CTRL.
 */
#define READ_EGR_1588_INGRESS_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_1588_INGRESS_CTRLr_BLKACC,p,EGR_1588_INGRESS_CTRLr_OFFSET,0,(r._egr_1588_ingress_ctrl), 1)
#define WRITE_EGR_1588_INGRESS_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_1588_INGRESS_CTRLr_BLKACC,p,EGR_1588_INGRESS_CTRLr_OFFSET,0,&(r._egr_1588_ingress_ctrl), 1)

/*******************************************************************************
 * End of 'EGR_1588_INGRESS_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_1588_LINK_DELAY_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_1588_LINK_DELAY_64.
 */
#define READ_EGR_1588_LINK_DELAY_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_1588_LINK_DELAY_64r_BLKACC,p,EGR_1588_LINK_DELAY_64r_OFFSET,0,(r._egr_1588_link_delay_64), 2)
#define WRITE_EGR_1588_LINK_DELAY_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_1588_LINK_DELAY_64r_BLKACC,p,EGR_1588_LINK_DELAY_64r_OFFSET,0,&(r._egr_1588_link_delay_64), 2)

/*******************************************************************************
 * End of 'EGR_1588_LINK_DELAY_64r'
 */




/*******************************************************************************
 * REGISTER:  EGR_1588_PARSING_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_1588_PARSING_CONTROL.
 */
#define READ_EGR_1588_PARSING_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_1588_PARSING_CONTROLr_BLKACC,2,EGR_1588_PARSING_CONTROLr_OFFSET,0,(r._egr_1588_parsing_control), 1)
#define WRITE_EGR_1588_PARSING_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_1588_PARSING_CONTROLr_BLKACC,2,EGR_1588_PARSING_CONTROLr_OFFSET,0,&(r._egr_1588_parsing_control), 1)

/*******************************************************************************
 * End of 'EGR_1588_PARSING_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_1588_SA
 * BLOCKS:   EPIPE
 * SIZE:     55
 */
/*
 * These macros can be used to access EGR_1588_SA.
 */
#define READ_EGR_1588_SAm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_1588_SAm_BLKACC,2,EGR_1588_SAm_OFFSET,i,(m._egr_1588_sa),2)
#define WRITE_EGR_1588_SAm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_1588_SAm_BLKACC,2,EGR_1588_SAm_OFFSET,i,&(m._egr_1588_sa),2)

/*******************************************************************************
 * End of 'EGR_1588_SAm'
 */




/*******************************************************************************
 * MEMORY:  EGR_ADAPT_ACTION_TABLE_A
 * BLOCKS:   EPIPE
 * SIZE:     72
 */
/*
 * These macros can be used to access EGR_ADAPT_ACTION_TABLE_A.
 */
#define READ_EGR_ADAPT_ACTION_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_ADAPT_ACTION_TABLE_Am_BLKACC,2,EGR_ADAPT_ACTION_TABLE_Am_OFFSET,i,(m._egr_adapt_action_table_a),3)
#define WRITE_EGR_ADAPT_ACTION_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_ADAPT_ACTION_TABLE_Am_BLKACC,2,EGR_ADAPT_ACTION_TABLE_Am_OFFSET,i,&(m._egr_adapt_action_table_a),3)

/*******************************************************************************
 * End of 'EGR_ADAPT_ACTION_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  EGR_ADAPT_ACTION_TABLE_B
 * BLOCKS:   EPIPE
 * SIZE:     72
 */
/*
 * These macros can be used to access EGR_ADAPT_ACTION_TABLE_B.
 */
#define READ_EGR_ADAPT_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_ADAPT_ACTION_TABLE_Bm_BLKACC,2,EGR_ADAPT_ACTION_TABLE_Bm_OFFSET,i,(m._egr_adapt_action_table_b),3)
#define WRITE_EGR_ADAPT_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_ADAPT_ACTION_TABLE_Bm_BLKACC,2,EGR_ADAPT_ACTION_TABLE_Bm_OFFSET,i,&(m._egr_adapt_action_table_b),3)

/*******************************************************************************
 * End of 'EGR_ADAPT_ACTION_TABLE_Bm'
 */




/*******************************************************************************
 * MEMORY:  EGR_ADAPT_ECC
 * BLOCKS:   EPIPE
 * SIZE:     104
 */
/*
 * These macros can be used to access EGR_ADAPT_ECC.
 */
#define READ_EGR_ADAPT_ECCm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_ADAPT_ECCm_BLKACC,2,EGR_ADAPT_ECCm_OFFSET,i,(m._egr_adapt_ecc),4)
#define WRITE_EGR_ADAPT_ECCm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_ADAPT_ECCm_BLKACC,2,EGR_ADAPT_ECCm_OFFSET,i,&(m._egr_adapt_ecc),4)

/*******************************************************************************
 * End of 'EGR_ADAPT_ECCm'
 */




/*******************************************************************************
 * MEMORY:  EGR_ADAPT_HASH_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     21
 */
/*
 * These macros can be used to access EGR_ADAPT_HASH_CONTROL.
 */
#define READ_EGR_ADAPT_HASH_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_ADAPT_HASH_CONTROLm_BLKACC,2,EGR_ADAPT_HASH_CONTROLm_OFFSET,i,(m._egr_adapt_hash_control),1)
#define WRITE_EGR_ADAPT_HASH_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_ADAPT_HASH_CONTROLm_BLKACC,2,EGR_ADAPT_HASH_CONTROLm_OFFSET,i,&(m._egr_adapt_hash_control),1)

/*******************************************************************************
 * End of 'EGR_ADAPT_HASH_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  EGR_ADAPT_HT_DEBUG_CMD
 * BLOCKS:   EPIPE
 * SIZE:     3
 */
/*
 * These macros can be used to access EGR_ADAPT_HT_DEBUG_CMD.
 */
#define READ_EGR_ADAPT_HT_DEBUG_CMDm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_ADAPT_HT_DEBUG_CMDm_BLKACC,2,EGR_ADAPT_HT_DEBUG_CMDm_OFFSET,i,(m._egr_adapt_ht_debug_cmd),1)
#define WRITE_EGR_ADAPT_HT_DEBUG_CMDm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_ADAPT_HT_DEBUG_CMDm_BLKACC,2,EGR_ADAPT_HT_DEBUG_CMDm_OFFSET,i,&(m._egr_adapt_ht_debug_cmd),1)

/*******************************************************************************
 * End of 'EGR_ADAPT_HT_DEBUG_CMDm'
 */




/*******************************************************************************
 * MEMORY:  EGR_ADAPT_HT_DEBUG_KEY
 * BLOCKS:   EPIPE
 * SIZE:     480
 */
/*
 * These macros can be used to access EGR_ADAPT_HT_DEBUG_KEY.
 */
#define READ_EGR_ADAPT_HT_DEBUG_KEYm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_ADAPT_HT_DEBUG_KEYm_BLKACC,2,EGR_ADAPT_HT_DEBUG_KEYm_OFFSET,i,(m._egr_adapt_ht_debug_key),15)
#define WRITE_EGR_ADAPT_HT_DEBUG_KEYm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_ADAPT_HT_DEBUG_KEYm_BLKACC,2,EGR_ADAPT_HT_DEBUG_KEYm_OFFSET,i,&(m._egr_adapt_ht_debug_key),15)

/*******************************************************************************
 * End of 'EGR_ADAPT_HT_DEBUG_KEYm'
 */




/*******************************************************************************
 * MEMORY:  EGR_ADAPT_HT_DEBUG_RESULT
 * BLOCKS:   EPIPE
 * SIZE:     139
 */
/*
 * These macros can be used to access EGR_ADAPT_HT_DEBUG_RESULT.
 */
#define READ_EGR_ADAPT_HT_DEBUG_RESULTm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_ADAPT_HT_DEBUG_RESULTm_BLKACC,2,EGR_ADAPT_HT_DEBUG_RESULTm_OFFSET,i,(m._egr_adapt_ht_debug_result),5)
#define WRITE_EGR_ADAPT_HT_DEBUG_RESULTm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_ADAPT_HT_DEBUG_RESULTm_BLKACC,2,EGR_ADAPT_HT_DEBUG_RESULTm_OFFSET,i,&(m._egr_adapt_ht_debug_result),5)

/*******************************************************************************
 * End of 'EGR_ADAPT_HT_DEBUG_RESULTm'
 */




/*******************************************************************************
 * MEMORY:  EGR_ADAPT_KEY_ATTRIBUTES
 * BLOCKS:   EPIPE
 * SIZE:     45
 */
/*
 * These macros can be used to access EGR_ADAPT_KEY_ATTRIBUTES.
 */
#define READ_EGR_ADAPT_KEY_ATTRIBUTESm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_ADAPT_KEY_ATTRIBUTESm_BLKACC,2,EGR_ADAPT_KEY_ATTRIBUTESm_OFFSET,i,(m._egr_adapt_key_attributes),2)
#define WRITE_EGR_ADAPT_KEY_ATTRIBUTESm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_ADAPT_KEY_ATTRIBUTESm_BLKACC,2,EGR_ADAPT_KEY_ATTRIBUTESm_OFFSET,i,&(m._egr_adapt_key_attributes),2)

/*******************************************************************************
 * End of 'EGR_ADAPT_KEY_ATTRIBUTESm'
 */




/*******************************************************************************
 * MEMORY:  EGR_ADAPT_REMAP_TABLE_A
 * BLOCKS:   EPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access EGR_ADAPT_REMAP_TABLE_A.
 */
#define READ_EGR_ADAPT_REMAP_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_ADAPT_REMAP_TABLE_Am_BLKACC,2,EGR_ADAPT_REMAP_TABLE_Am_OFFSET,i,(m._egr_adapt_remap_table_a),1)
#define WRITE_EGR_ADAPT_REMAP_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_ADAPT_REMAP_TABLE_Am_BLKACC,2,EGR_ADAPT_REMAP_TABLE_Am_OFFSET,i,&(m._egr_adapt_remap_table_a),1)

/*******************************************************************************
 * End of 'EGR_ADAPT_REMAP_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  EGR_ADAPT_REMAP_TABLE_B
 * BLOCKS:   EPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access EGR_ADAPT_REMAP_TABLE_B.
 */
#define READ_EGR_ADAPT_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_ADAPT_REMAP_TABLE_Bm_BLKACC,2,EGR_ADAPT_REMAP_TABLE_Bm_OFFSET,i,(m._egr_adapt_remap_table_b),1)
#define WRITE_EGR_ADAPT_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_ADAPT_REMAP_TABLE_Bm_BLKACC,2,EGR_ADAPT_REMAP_TABLE_Bm_OFFSET,i,&(m._egr_adapt_remap_table_b),1)

/*******************************************************************************
 * End of 'EGR_ADAPT_REMAP_TABLE_Bm'
 */




/*******************************************************************************
 * MEMORY:  EGR_ADAPT_SINGLE
 * BLOCKS:   EPIPE
 * SIZE:     96
 */
/*
 * These macros can be used to access EGR_ADAPT_SINGLE.
 */
#define READ_EGR_ADAPT_SINGLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_ADAPT_SINGLEm_BLKACC,2,EGR_ADAPT_SINGLEm_OFFSET,i,(m._egr_adapt_single),3)
#define WRITE_EGR_ADAPT_SINGLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_ADAPT_SINGLEm_BLKACC,2,EGR_ADAPT_SINGLEm_OFFSET,i,&(m._egr_adapt_single),3)

/*******************************************************************************
 * End of 'EGR_ADAPT_SINGLEm'
 */




/*******************************************************************************
 * REGISTER:  EGR_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_CONFIG.
 */
#define READ_EGR_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_CONFIGr_BLKACC,2,EGR_CONFIGr_OFFSET,0,(r._egr_config), 1)
#define WRITE_EGR_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_CONFIGr_BLKACC,2,EGR_CONFIGr_OFFSET,0,&(r._egr_config), 1)

/*******************************************************************************
 * End of 'EGR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_CONFIG_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_CONFIG_1.
 */
#define READ_EGR_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_CONFIG_1r_BLKACC,2,EGR_CONFIG_1r_OFFSET,0,(r._egr_config_1), 1)
#define WRITE_EGR_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_CONFIG_1r_BLKACC,2,EGR_CONFIG_1r_OFFSET,0,&(r._egr_config_1), 1)

/*******************************************************************************
 * End of 'EGR_CONFIG_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_COUNTER_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_COUNTER_CONTROL.
 */
#define READ_EGR_COUNTER_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_COUNTER_CONTROLr_BLKACC,p,EGR_COUNTER_CONTROLr_OFFSET,0,(r._egr_counter_control), 1)
#define WRITE_EGR_COUNTER_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_COUNTER_CONTROLr_BLKACC,p,EGR_COUNTER_CONTROLr_OFFSET,0,&(r._egr_counter_control), 1)

/*******************************************************************************
 * End of 'EGR_COUNTER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DBG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DBG.
 */
#define READ_EGR_DBGr(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_DBGr_BLKACC,p,EGR_DBGr_OFFSET,0,(r._egr_dbg), 1)
#define WRITE_EGR_DBGr(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_DBGr_BLKACC,p,EGR_DBGr_OFFSET,0,&(r._egr_dbg), 1)

/*******************************************************************************
 * End of 'EGR_DBGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DBG_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DBG_2.
 */
#define READ_EGR_DBG_2r(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_DBG_2r_BLKACC,p,EGR_DBG_2r_OFFSET,0,(r._egr_dbg_2), 1)
#define WRITE_EGR_DBG_2r(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_DBG_2r_BLKACC,p,EGR_DBG_2r_OFFSET,0,&(r._egr_dbg_2), 1)

/*******************************************************************************
 * End of 'EGR_DBG_2r'
 */




/*******************************************************************************
 * MEMORY:  EGR_DCN_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     19
 */
/*
 * These macros can be used to access EGR_DCN_PROFILE.
 */
#define READ_EGR_DCN_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_DCN_PROFILEm_BLKACC,2,EGR_DCN_PROFILEm_OFFSET,i,(m._egr_dcn_profile),1)
#define WRITE_EGR_DCN_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_DCN_PROFILEm_BLKACC,2,EGR_DCN_PROFILEm_OFFSET,i,&(m._egr_dcn_profile),1)

/*******************************************************************************
 * End of 'EGR_DCN_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_AUX_ARB_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_DII_AUX_ARB_CONTROL.
 */
#define READ_EGR_DII_AUX_ARB_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DII_AUX_ARB_CONTROLr_BLKACC,2,n,0,EGR_DII_AUX_ARB_CONTROLr_OFFSET,0,(r._egr_dii_aux_arb_control),2)
#define WRITE_EGR_DII_AUX_ARB_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_AUX_ARB_CONTROLr_BLKACC,2,n,0,EGR_DII_AUX_ARB_CONTROLr_OFFSET,0,&(r._egr_dii_aux_arb_control),2)
#define WRITE_EGR_DII_AUX_ARB_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_AUX_ARB_CONTROLr_BLKACC,2,-1,0,EGR_DII_AUX_ARB_CONTROLr_OFFSET,0,&(r._egr_dii_aux_arb_control),2)

/*******************************************************************************
 * End of 'EGR_DII_AUX_ARB_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_DEBUG_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DII_DEBUG_CONFIG.
 */
#define READ_EGR_DII_DEBUG_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DII_DEBUG_CONFIGr_BLKACC,2,n,0,EGR_DII_DEBUG_CONFIGr_OFFSET,0,(r._egr_dii_debug_config),1)
#define WRITE_EGR_DII_DEBUG_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_DEBUG_CONFIGr_BLKACC,2,n,0,EGR_DII_DEBUG_CONFIGr_OFFSET,0,&(r._egr_dii_debug_config),1)
#define WRITE_EGR_DII_DEBUG_CONFIGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_DEBUG_CONFIGr_BLKACC,2,-1,0,EGR_DII_DEBUG_CONFIGr_OFFSET,0,&(r._egr_dii_debug_config),1)

/*******************************************************************************
 * End of 'EGR_DII_DEBUG_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_DPP_CTRL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DII_DPP_CTRL.
 */
#define READ_EGR_DII_DPP_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DII_DPP_CTRLr_BLKACC,2,n,0,EGR_DII_DPP_CTRLr_OFFSET,0,(r._egr_dii_dpp_ctrl),1)
#define WRITE_EGR_DII_DPP_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_DPP_CTRLr_BLKACC,2,n,0,EGR_DII_DPP_CTRLr_OFFSET,0,&(r._egr_dii_dpp_ctrl),1)
#define WRITE_EGR_DII_DPP_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_DPP_CTRLr_BLKACC,2,-1,0,EGR_DII_DPP_CTRLr_OFFSET,0,&(r._egr_dii_dpp_ctrl),1)

/*******************************************************************************
 * End of 'EGR_DII_DPP_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_ECC_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DII_ECC_CONTROL.
 */
#define READ_EGR_DII_ECC_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_DII_ECC_CONTROLr_BLKACC,2,EGR_DII_ECC_CONTROLr_OFFSET,0,(r._egr_dii_ecc_control), 1)
#define WRITE_EGR_DII_ECC_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_DII_ECC_CONTROLr_BLKACC,2,EGR_DII_ECC_CONTROLr_OFFSET,0,&(r._egr_dii_ecc_control), 1)

/*******************************************************************************
 * End of 'EGR_DII_ECC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_EVENT_FIFO_STATUS
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DII_EVENT_FIFO_STATUS.
 */
#define READ_EGR_DII_EVENT_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DII_EVENT_FIFO_STATUSr_BLKACC,2,n,0,EGR_DII_EVENT_FIFO_STATUSr_OFFSET,0,(r._egr_dii_event_fifo_status),1)
#define WRITE_EGR_DII_EVENT_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_EVENT_FIFO_STATUSr_BLKACC,2,n,0,EGR_DII_EVENT_FIFO_STATUSr_OFFSET,0,&(r._egr_dii_event_fifo_status),1)
#define WRITE_EGR_DII_EVENT_FIFO_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_EVENT_FIFO_STATUSr_BLKACC,2,-1,0,EGR_DII_EVENT_FIFO_STATUSr_OFFSET,0,&(r._egr_dii_event_fifo_status),1)

/*******************************************************************************
 * End of 'EGR_DII_EVENT_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_EVENT_FIFO_STATUS_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DII_EVENT_FIFO_STATUS_1.
 */
#define READ_EGR_DII_EVENT_FIFO_STATUS_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DII_EVENT_FIFO_STATUS_1r_BLKACC,2,n,0,EGR_DII_EVENT_FIFO_STATUS_1r_OFFSET,0,(r._egr_dii_event_fifo_status_1),1)
#define WRITE_EGR_DII_EVENT_FIFO_STATUS_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_EVENT_FIFO_STATUS_1r_BLKACC,2,n,0,EGR_DII_EVENT_FIFO_STATUS_1r_OFFSET,0,&(r._egr_dii_event_fifo_status_1),1)
#define WRITE_EGR_DII_EVENT_FIFO_STATUS_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_EVENT_FIFO_STATUS_1r_BLKACC,2,-1,0,EGR_DII_EVENT_FIFO_STATUS_1r_OFFSET,0,&(r._egr_dii_event_fifo_status_1),1)

/*******************************************************************************
 * End of 'EGR_DII_EVENT_FIFO_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_HW_RESET_CONTROL_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DII_HW_RESET_CONTROL_0.
 */
#define READ_EGR_DII_HW_RESET_CONTROL_0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DII_HW_RESET_CONTROL_0r_BLKACC,2,n,0,EGR_DII_HW_RESET_CONTROL_0r_OFFSET,0,(r._egr_dii_hw_reset_control_0),1)
#define WRITE_EGR_DII_HW_RESET_CONTROL_0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_HW_RESET_CONTROL_0r_BLKACC,2,n,0,EGR_DII_HW_RESET_CONTROL_0r_OFFSET,0,&(r._egr_dii_hw_reset_control_0),1)
#define WRITE_EGR_DII_HW_RESET_CONTROL_0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_HW_RESET_CONTROL_0r_BLKACC,2,-1,0,EGR_DII_HW_RESET_CONTROL_0r_OFFSET,0,&(r._egr_dii_hw_reset_control_0),1)

/*******************************************************************************
 * End of 'EGR_DII_HW_RESET_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_HW_STATUS
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DII_HW_STATUS.
 */
#define READ_EGR_DII_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DII_HW_STATUSr_BLKACC,2,n,0,EGR_DII_HW_STATUSr_OFFSET,0,(r._egr_dii_hw_status),1)
#define WRITE_EGR_DII_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_HW_STATUSr_BLKACC,2,n,0,EGR_DII_HW_STATUSr_OFFSET,0,&(r._egr_dii_hw_status),1)
#define WRITE_EGR_DII_HW_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_HW_STATUSr_BLKACC,2,-1,0,EGR_DII_HW_STATUSr_OFFSET,0,&(r._egr_dii_hw_status),1)

/*******************************************************************************
 * End of 'EGR_DII_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_INTR_ENABLE
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DII_INTR_ENABLE.
 */
#define READ_EGR_DII_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_DII_INTR_ENABLEr_BLKACC,2,EGR_DII_INTR_ENABLEr_OFFSET,0,(r._egr_dii_intr_enable), 1)
#define WRITE_EGR_DII_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_DII_INTR_ENABLEr_BLKACC,2,EGR_DII_INTR_ENABLEr_OFFSET,0,&(r._egr_dii_intr_enable), 1)

/*******************************************************************************
 * End of 'EGR_DII_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_INTR_STATUS
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DII_INTR_STATUS.
 */
#define READ_EGR_DII_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DII_INTR_STATUSr_BLKACC,2,n,0,EGR_DII_INTR_STATUSr_OFFSET,0,(r._egr_dii_intr_status),1)
#define WRITE_EGR_DII_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_INTR_STATUSr_BLKACC,2,n,0,EGR_DII_INTR_STATUSr_OFFSET,0,&(r._egr_dii_intr_status),1)
#define WRITE_EGR_DII_INTR_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_INTR_STATUSr_BLKACC,2,-1,0,EGR_DII_INTR_STATUSr_OFFSET,0,&(r._egr_dii_intr_status),1)

/*******************************************************************************
 * End of 'EGR_DII_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_NULL_SLOT_CFG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DII_NULL_SLOT_CFG.
 */
#define READ_EGR_DII_NULL_SLOT_CFGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DII_NULL_SLOT_CFGr_BLKACC,2,n,0,EGR_DII_NULL_SLOT_CFGr_OFFSET,0,(r._egr_dii_null_slot_cfg),1)
#define WRITE_EGR_DII_NULL_SLOT_CFGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_NULL_SLOT_CFGr_BLKACC,2,n,0,EGR_DII_NULL_SLOT_CFGr_OFFSET,0,&(r._egr_dii_null_slot_cfg),1)
#define WRITE_EGR_DII_NULL_SLOT_CFGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_NULL_SLOT_CFGr_BLKACC,2,-1,0,EGR_DII_NULL_SLOT_CFGr_OFFSET,0,&(r._egr_dii_null_slot_cfg),1)

/*******************************************************************************
 * End of 'EGR_DII_NULL_SLOT_CFGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_Q_BEGIN
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DII_Q_BEGIN.
 */
#define READ_EGR_DII_Q_BEGINr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DII_Q_BEGINr_BLKACC,2,n,0,EGR_DII_Q_BEGINr_OFFSET,0,(r._egr_dii_q_begin),1)
#define WRITE_EGR_DII_Q_BEGINr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_Q_BEGINr_BLKACC,2,n,0,EGR_DII_Q_BEGINr_OFFSET,0,&(r._egr_dii_q_begin),1)
#define WRITE_EGR_DII_Q_BEGINr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_Q_BEGINr_BLKACC,2,-1,0,EGR_DII_Q_BEGINr_OFFSET,0,&(r._egr_dii_q_begin),1)

/*******************************************************************************
 * End of 'EGR_DII_Q_BEGINr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_RAM_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_DII_RAM_CONTROL.
 */
#define READ_EGR_DII_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DII_RAM_CONTROLr_BLKACC,2,n,0,EGR_DII_RAM_CONTROLr_OFFSET,0,(r._egr_dii_ram_control),2)
#define WRITE_EGR_DII_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_RAM_CONTROLr_BLKACC,2,n,0,EGR_DII_RAM_CONTROLr_OFFSET,0,&(r._egr_dii_ram_control),2)
#define WRITE_EGR_DII_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_RAM_CONTROLr_BLKACC,2,-1,0,EGR_DII_RAM_CONTROLr_OFFSET,0,&(r._egr_dii_ram_control),2)

/*******************************************************************************
 * End of 'EGR_DII_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_SER_CONTROL_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DII_SER_CONTROL_0.
 */
#define READ_EGR_DII_SER_CONTROL_0r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_DII_SER_CONTROL_0r_BLKACC,2,EGR_DII_SER_CONTROL_0r_OFFSET,0,(r._egr_dii_ser_control_0), 1)
#define WRITE_EGR_DII_SER_CONTROL_0r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_DII_SER_CONTROL_0r_BLKACC,2,EGR_DII_SER_CONTROL_0r_OFFSET,0,&(r._egr_dii_ser_control_0), 1)

/*******************************************************************************
 * End of 'EGR_DII_SER_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_SER_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DII_SER_CONTROL_1.
 */
#define READ_EGR_DII_SER_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_DII_SER_CONTROL_1r_BLKACC,2,EGR_DII_SER_CONTROL_1r_OFFSET,0,(r._egr_dii_ser_control_1), 1)
#define WRITE_EGR_DII_SER_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_DII_SER_CONTROL_1r_BLKACC,2,EGR_DII_SER_CONTROL_1r_OFFSET,0,&(r._egr_dii_ser_control_1), 1)

/*******************************************************************************
 * End of 'EGR_DII_SER_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_SER_SCAN_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_DII_SER_SCAN_CONFIG.
 */
#define READ_EGR_DII_SER_SCAN_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DII_SER_SCAN_CONFIGr_BLKACC,2,n,0,EGR_DII_SER_SCAN_CONFIGr_OFFSET,0,(r._egr_dii_ser_scan_config),2)
#define WRITE_EGR_DII_SER_SCAN_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_SER_SCAN_CONFIGr_BLKACC,2,n,0,EGR_DII_SER_SCAN_CONFIGr_OFFSET,0,&(r._egr_dii_ser_scan_config),2)
#define WRITE_EGR_DII_SER_SCAN_CONFIGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_SER_SCAN_CONFIGr_BLKACC,2,-1,0,EGR_DII_SER_SCAN_CONFIGr_OFFSET,0,&(r._egr_dii_ser_scan_config),2)

/*******************************************************************************
 * End of 'EGR_DII_SER_SCAN_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DII_SER_SCAN_STATUS
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DII_SER_SCAN_STATUS.
 */
#define READ_EGR_DII_SER_SCAN_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DII_SER_SCAN_STATUSr_BLKACC,2,n,0,EGR_DII_SER_SCAN_STATUSr_OFFSET,0,(r._egr_dii_ser_scan_status),1)
#define WRITE_EGR_DII_SER_SCAN_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_SER_SCAN_STATUSr_BLKACC,2,n,0,EGR_DII_SER_SCAN_STATUSr_OFFSET,0,&(r._egr_dii_ser_scan_status),1)
#define WRITE_EGR_DII_SER_SCAN_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DII_SER_SCAN_STATUSr_BLKACC,2,-1,0,EGR_DII_SER_SCAN_STATUSr_OFFSET,0,&(r._egr_dii_ser_scan_status),1)

/*******************************************************************************
 * End of 'EGR_DII_SER_SCAN_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DOI_EVENT_FIFO_STATUS
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DOI_EVENT_FIFO_STATUS.
 */
#define READ_EGR_DOI_EVENT_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DOI_EVENT_FIFO_STATUSr_BLKACC,2,n,0,EGR_DOI_EVENT_FIFO_STATUSr_OFFSET,0,(r._egr_doi_event_fifo_status),1)
#define WRITE_EGR_DOI_EVENT_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DOI_EVENT_FIFO_STATUSr_BLKACC,2,n,0,EGR_DOI_EVENT_FIFO_STATUSr_OFFSET,0,&(r._egr_doi_event_fifo_status),1)
#define WRITE_EGR_DOI_EVENT_FIFO_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DOI_EVENT_FIFO_STATUSr_BLKACC,2,-1,0,EGR_DOI_EVENT_FIFO_STATUSr_OFFSET,0,&(r._egr_doi_event_fifo_status),1)

/*******************************************************************************
 * End of 'EGR_DOI_EVENT_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DOI_INTR_ENABLE
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DOI_INTR_ENABLE.
 */
#define READ_EGR_DOI_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_DOI_INTR_ENABLEr_BLKACC,2,EGR_DOI_INTR_ENABLEr_OFFSET,0,(r._egr_doi_intr_enable), 1)
#define WRITE_EGR_DOI_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_DOI_INTR_ENABLEr_BLKACC,2,EGR_DOI_INTR_ENABLEr_OFFSET,0,&(r._egr_doi_intr_enable), 1)

/*******************************************************************************
 * End of 'EGR_DOI_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DOI_INTR_STATUS
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DOI_INTR_STATUS.
 */
#define READ_EGR_DOI_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DOI_INTR_STATUSr_BLKACC,2,n,0,EGR_DOI_INTR_STATUSr_OFFSET,0,(r._egr_doi_intr_status),1)
#define WRITE_EGR_DOI_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DOI_INTR_STATUSr_BLKACC,2,n,0,EGR_DOI_INTR_STATUSr_OFFSET,0,&(r._egr_doi_intr_status),1)
#define WRITE_EGR_DOI_INTR_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DOI_INTR_STATUSr_BLKACC,2,-1,0,EGR_DOI_INTR_STATUSr_OFFSET,0,&(r._egr_doi_intr_status),1)

/*******************************************************************************
 * End of 'EGR_DOI_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DOI_RAM_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_DOI_RAM_CONTROL.
 */
#define READ_EGR_DOI_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DOI_RAM_CONTROLr_BLKACC,2,n,0,EGR_DOI_RAM_CONTROLr_OFFSET,0,(r._egr_doi_ram_control),2)
#define WRITE_EGR_DOI_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DOI_RAM_CONTROLr_BLKACC,2,n,0,EGR_DOI_RAM_CONTROLr_OFFSET,0,&(r._egr_doi_ram_control),2)
#define WRITE_EGR_DOI_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DOI_RAM_CONTROLr_BLKACC,2,-1,0,EGR_DOI_RAM_CONTROLr_OFFSET,0,&(r._egr_doi_ram_control),2)

/*******************************************************************************
 * End of 'EGR_DOI_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DOI_SER_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DOI_SER_CONTROL.
 */
#define READ_EGR_DOI_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_DOI_SER_CONTROLr_BLKACC,2,EGR_DOI_SER_CONTROLr_OFFSET,0,(r._egr_doi_ser_control), 1)
#define WRITE_EGR_DOI_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_DOI_SER_CONTROLr_BLKACC,2,EGR_DOI_SER_CONTROLr_OFFSET,0,&(r._egr_doi_ser_control), 1)

/*******************************************************************************
 * End of 'EGR_DOI_SER_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_DOI_SER_FIFO
 * BLOCKS:   EPIPE
 * SIZE:     50
 */
/*
 * These macros can be used to access EGR_DOI_SER_FIFO.
 */
#define READ_EGR_DOI_SER_FIFOm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EGR_DOI_SER_FIFOm_BLKACC,2,n,0,EGR_DOI_SER_FIFOm_OFFSET,i,(m._egr_doi_ser_fifo),2)
#define WRITE_EGR_DOI_SER_FIFOm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_DOI_SER_FIFOm_BLKACC,2,n,0,EGR_DOI_SER_FIFOm_OFFSET,i,&(m._egr_doi_ser_fifo),2)
#define WRITE_EGR_DOI_SER_FIFOm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_DOI_SER_FIFOm_BLKACC,2,-1,0,EGR_DOI_SER_FIFOm_OFFSET,i,&(m._egr_doi_ser_fifo),2)

/*******************************************************************************
 * End of 'EGR_DOI_SER_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  EGR_DOI_SER_FIFO_CTRL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DOI_SER_FIFO_CTRL.
 */
#define READ_EGR_DOI_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DOI_SER_FIFO_CTRLr_BLKACC,2,n,0,EGR_DOI_SER_FIFO_CTRLr_OFFSET,0,(r._egr_doi_ser_fifo_ctrl),1)
#define WRITE_EGR_DOI_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DOI_SER_FIFO_CTRLr_BLKACC,2,n,0,EGR_DOI_SER_FIFO_CTRLr_OFFSET,0,&(r._egr_doi_ser_fifo_ctrl),1)
#define WRITE_EGR_DOI_SER_FIFO_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DOI_SER_FIFO_CTRLr_BLKACC,2,-1,0,EGR_DOI_SER_FIFO_CTRLr_OFFSET,0,&(r._egr_doi_ser_fifo_ctrl),1)

/*******************************************************************************
 * End of 'EGR_DOI_SER_FIFO_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DOI_SER_FIFO_STATUS
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DOI_SER_FIFO_STATUS.
 */
#define READ_EGR_DOI_SER_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DOI_SER_FIFO_STATUSr_BLKACC,2,n,0,EGR_DOI_SER_FIFO_STATUSr_OFFSET,0,(r._egr_doi_ser_fifo_status),1)
#define WRITE_EGR_DOI_SER_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DOI_SER_FIFO_STATUSr_BLKACC,2,n,0,EGR_DOI_SER_FIFO_STATUSr_OFFSET,0,&(r._egr_doi_ser_fifo_status),1)
#define WRITE_EGR_DOI_SER_FIFO_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DOI_SER_FIFO_STATUSr_BLKACC,2,-1,0,EGR_DOI_SER_FIFO_STATUSr_OFFSET,0,&(r._egr_doi_ser_fifo_status),1)

/*******************************************************************************
 * End of 'EGR_DOI_SER_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DROP_VECTOR
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DROP_VECTOR.
 */
#define READ_EGR_DROP_VECTORr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_DROP_VECTORr_BLKACC,2,n,0,EGR_DROP_VECTORr_OFFSET,0,(r._egr_drop_vector),1)
#define WRITE_EGR_DROP_VECTORr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DROP_VECTORr_BLKACC,2,n,0,EGR_DROP_VECTORr_OFFSET,0,&(r._egr_drop_vector),1)
#define WRITE_EGR_DROP_VECTORr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_DROP_VECTORr_BLKACC,2,-1,0,EGR_DROP_VECTORr_OFFSET,0,&(r._egr_drop_vector),1)

/*******************************************************************************
 * End of 'EGR_DROP_VECTORr'
 */




/*******************************************************************************
 * MEMORY:  EGR_DSCP_TABLE
 * BLOCKS:   EPIPE
 * SIZE:     11
 */
/*
 * These macros can be used to access EGR_DSCP_TABLE.
 */
#define READ_EGR_DSCP_TABLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_DSCP_TABLEm_BLKACC,2,EGR_DSCP_TABLEm_OFFSET,i,(m._egr_dscp_table),1)
#define WRITE_EGR_DSCP_TABLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_DSCP_TABLEm_BLKACC,2,EGR_DSCP_TABLEm_OFFSET,i,&(m._egr_dscp_table),1)

/*******************************************************************************
 * End of 'EGR_DSCP_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  EGR_ECN_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_ECN_CONTROL.
 */
#define READ_EGR_ECN_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_ECN_CONTROLr_BLKACC,2,EGR_ECN_CONTROLr_OFFSET,0,(r._egr_ecn_control), 1)
#define WRITE_EGR_ECN_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_ECN_CONTROLr_BLKACC,2,EGR_ECN_CONTROLr_OFFSET,0,&(r._egr_ecn_control), 1)

/*******************************************************************************
 * End of 'EGR_ECN_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_ECN_COUNTER_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_ECN_COUNTER_64.
 */
#define READ_EGR_ECN_COUNTER_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_ECN_COUNTER_64r_BLKACC,p,EGR_ECN_COUNTER_64r_OFFSET,0,(r._egr_ecn_counter_64), 2)
#define WRITE_EGR_ECN_COUNTER_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_ECN_COUNTER_64r_BLKACC,p,EGR_ECN_COUNTER_64r_OFFSET,0,&(r._egr_ecn_counter_64), 2)

/*******************************************************************************
 * End of 'EGR_ECN_COUNTER_64r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFPMOD_HW_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EFPMOD_HW_CONFIG.
 */
#define READ_EGR_EFPMOD_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EFPMOD_HW_CONFIGr_BLKACC,2,EGR_EFPMOD_HW_CONFIGr_OFFSET,0,(r._egr_efpmod_hw_config), 2)
#define WRITE_EGR_EFPMOD_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EFPMOD_HW_CONFIGr_BLKACC,2,EGR_EFPMOD_HW_CONFIGr_OFFSET,0,&(r._egr_efpmod_hw_config), 2)

/*******************************************************************************
 * End of 'EGR_EFPMOD_HW_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFPMOD_RAM_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EFPMOD_RAM_CONTROL.
 */
#define READ_EGR_EFPMOD_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_EFPMOD_RAM_CONTROLr_BLKACC,2,n,0,EGR_EFPMOD_RAM_CONTROLr_OFFSET,0,(r._egr_efpmod_ram_control),2)
#define WRITE_EGR_EFPMOD_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_EFPMOD_RAM_CONTROLr_BLKACC,2,n,0,EGR_EFPMOD_RAM_CONTROLr_OFFSET,0,&(r._egr_efpmod_ram_control),2)
#define WRITE_EGR_EFPMOD_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_EFPMOD_RAM_CONTROLr_BLKACC,2,-1,0,EGR_EFPMOD_RAM_CONTROLr_OFFSET,0,&(r._egr_efpmod_ram_control),2)

/*******************************************************************************
 * End of 'EGR_EFPMOD_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFPMOD_SER_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EFPMOD_SER_CONTROL.
 */
#define READ_EGR_EFPMOD_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EFPMOD_SER_CONTROLr_BLKACC,2,EGR_EFPMOD_SER_CONTROLr_OFFSET,0,(r._egr_efpmod_ser_control), 1)
#define WRITE_EGR_EFPMOD_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EFPMOD_SER_CONTROLr_BLKACC,2,EGR_EFPMOD_SER_CONTROLr_OFFSET,0,&(r._egr_efpmod_ser_control), 1)

/*******************************************************************************
 * End of 'EGR_EFPMOD_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFPPARS_HW_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EFPPARS_HW_CONFIG.
 */
#define READ_EGR_EFPPARS_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EFPPARS_HW_CONFIGr_BLKACC,2,EGR_EFPPARS_HW_CONFIGr_OFFSET,0,(r._egr_efppars_hw_config), 2)
#define WRITE_EGR_EFPPARS_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EFPPARS_HW_CONFIGr_BLKACC,2,EGR_EFPPARS_HW_CONFIGr_OFFSET,0,&(r._egr_efppars_hw_config), 2)

/*******************************************************************************
 * End of 'EGR_EFPPARS_HW_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFPPARS_OPAQUE_TAG_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EFPPARS_OPAQUE_TAG_CONFIG.
 */
#define READ_EGR_EFPPARS_OPAQUE_TAG_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_read(u,EGR_EFPPARS_OPAQUE_TAG_CONFIGr_BLKACC,2,EGR_EFPPARS_OPAQUE_TAG_CONFIGr_OFFSET,i,(r._egr_efppars_opaque_tag_config), 1)
#define WRITE_EGR_EFPPARS_OPAQUE_TAG_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_write(u,EGR_EFPPARS_OPAQUE_TAG_CONFIGr_BLKACC,2,EGR_EFPPARS_OPAQUE_TAG_CONFIGr_OFFSET,i,&(r._egr_efppars_opaque_tag_config), 1)

/*******************************************************************************
 * End of 'EGR_EFPPARS_OPAQUE_TAG_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFPPARS_OPAQUE_TAG_CONFIG_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EFPPARS_OPAQUE_TAG_CONFIG_0.
 */
#define READ_EGR_EFPPARS_OPAQUE_TAG_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EFPPARS_OPAQUE_TAG_CONFIG_0r_BLKACC,2,EGR_EFPPARS_OPAQUE_TAG_CONFIG_0r_OFFSET,0,(r._egr_efppars_opaque_tag_config_0), 1)
#define WRITE_EGR_EFPPARS_OPAQUE_TAG_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EFPPARS_OPAQUE_TAG_CONFIG_0r_BLKACC,2,EGR_EFPPARS_OPAQUE_TAG_CONFIG_0r_OFFSET,0,&(r._egr_efppars_opaque_tag_config_0), 1)

/*******************************************************************************
 * End of 'EGR_EFPPARS_OPAQUE_TAG_CONFIG_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFPPARS_OPAQUE_TAG_CONFIG_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EFPPARS_OPAQUE_TAG_CONFIG_1.
 */
#define READ_EGR_EFPPARS_OPAQUE_TAG_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EFPPARS_OPAQUE_TAG_CONFIG_1r_BLKACC,2,EGR_EFPPARS_OPAQUE_TAG_CONFIG_1r_OFFSET,0,(r._egr_efppars_opaque_tag_config_1), 1)
#define WRITE_EGR_EFPPARS_OPAQUE_TAG_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EFPPARS_OPAQUE_TAG_CONFIG_1r_BLKACC,2,EGR_EFPPARS_OPAQUE_TAG_CONFIG_1r_OFFSET,0,&(r._egr_efppars_opaque_tag_config_1), 1)

/*******************************************************************************
 * End of 'EGR_EFPPARS_OPAQUE_TAG_CONFIG_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFPPARS_RAM_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EFPPARS_RAM_CONTROL.
 */
#define READ_EGR_EFPPARS_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_EFPPARS_RAM_CONTROLr_BLKACC,2,n,0,EGR_EFPPARS_RAM_CONTROLr_OFFSET,0,(r._egr_efppars_ram_control),2)
#define WRITE_EGR_EFPPARS_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_EFPPARS_RAM_CONTROLr_BLKACC,2,n,0,EGR_EFPPARS_RAM_CONTROLr_OFFSET,0,&(r._egr_efppars_ram_control),2)
#define WRITE_EGR_EFPPARS_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_EFPPARS_RAM_CONTROLr_BLKACC,2,-1,0,EGR_EFPPARS_RAM_CONTROLr_OFFSET,0,&(r._egr_efppars_ram_control),2)

/*******************************************************************************
 * End of 'EGR_EFPPARS_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFPPARS_SER_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EFPPARS_SER_CONTROL.
 */
#define READ_EGR_EFPPARS_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EFPPARS_SER_CONTROLr_BLKACC,2,EGR_EFPPARS_SER_CONTROLr_OFFSET,0,(r._egr_efppars_ser_control), 1)
#define WRITE_EGR_EFPPARS_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EFPPARS_SER_CONTROLr_BLKACC,2,EGR_EFPPARS_SER_CONTROLr_OFFSET,0,&(r._egr_efppars_ser_control), 1)

/*******************************************************************************
 * End of 'EGR_EFPPARS_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFP_HW_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EFP_HW_CONFIG.
 */
#define READ_EGR_EFP_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EFP_HW_CONFIGr_BLKACC,2,EGR_EFP_HW_CONFIGr_OFFSET,0,(r._egr_efp_hw_config), 2)
#define WRITE_EGR_EFP_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EFP_HW_CONFIGr_BLKACC,2,EGR_EFP_HW_CONFIGr_OFFSET,0,&(r._egr_efp_hw_config), 2)

/*******************************************************************************
 * End of 'EGR_EFP_HW_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  EGR_ENABLE
 * BLOCKS:   PORT_IF
 * SIZE:     1
 */
/*
 * These macros can be used to access EGR_ENABLE.
 */
#define READ_EGR_ENABLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_ENABLEm_BLKACC,89,EGR_ENABLEm_OFFSET,i,(m._egr_enable),1)
#define WRITE_EGR_ENABLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_ENABLEm_BLKACC,89,EGR_ENABLEm_OFFSET,i,&(m._egr_enable),1)

/*******************************************************************************
 * End of 'EGR_ENABLEm'
 */




/*******************************************************************************
 * REGISTER:  EGR_EPARS_EN_COR_ERR_RPT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EPARS_EN_COR_ERR_RPT.
 */
#define READ_EGR_EPARS_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EPARS_EN_COR_ERR_RPTr_BLKACC,2,EGR_EPARS_EN_COR_ERR_RPTr_OFFSET,0,(r._egr_epars_en_cor_err_rpt), 1)
#define WRITE_EGR_EPARS_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EPARS_EN_COR_ERR_RPTr_BLKACC,2,EGR_EPARS_EN_COR_ERR_RPTr_OFFSET,0,&(r._egr_epars_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'EGR_EPARS_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EPARS_HW_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EPARS_HW_CONFIG.
 */
#define READ_EGR_EPARS_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EPARS_HW_CONFIGr_BLKACC,2,EGR_EPARS_HW_CONFIGr_OFFSET,0,(r._egr_epars_hw_config), 2)
#define WRITE_EGR_EPARS_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EPARS_HW_CONFIGr_BLKACC,2,EGR_EPARS_HW_CONFIGr_OFFSET,0,&(r._egr_epars_hw_config), 2)

/*******************************************************************************
 * End of 'EGR_EPARS_HW_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EPARS_OPAQUE_TAG_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EPARS_OPAQUE_TAG_CONFIG.
 */
#define READ_EGR_EPARS_OPAQUE_TAG_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_read(u,EGR_EPARS_OPAQUE_TAG_CONFIGr_BLKACC,2,EGR_EPARS_OPAQUE_TAG_CONFIGr_OFFSET,i,(r._egr_epars_opaque_tag_config), 1)
#define WRITE_EGR_EPARS_OPAQUE_TAG_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_write(u,EGR_EPARS_OPAQUE_TAG_CONFIGr_BLKACC,2,EGR_EPARS_OPAQUE_TAG_CONFIGr_OFFSET,i,&(r._egr_epars_opaque_tag_config), 1)

/*******************************************************************************
 * End of 'EGR_EPARS_OPAQUE_TAG_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EPARS_OPAQUE_TAG_CONFIG_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EPARS_OPAQUE_TAG_CONFIG_0.
 */
#define READ_EGR_EPARS_OPAQUE_TAG_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EPARS_OPAQUE_TAG_CONFIG_0r_BLKACC,2,EGR_EPARS_OPAQUE_TAG_CONFIG_0r_OFFSET,0,(r._egr_epars_opaque_tag_config_0), 1)
#define WRITE_EGR_EPARS_OPAQUE_TAG_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EPARS_OPAQUE_TAG_CONFIG_0r_BLKACC,2,EGR_EPARS_OPAQUE_TAG_CONFIG_0r_OFFSET,0,&(r._egr_epars_opaque_tag_config_0), 1)

/*******************************************************************************
 * End of 'EGR_EPARS_OPAQUE_TAG_CONFIG_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EPARS_OPAQUE_TAG_CONFIG_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EPARS_OPAQUE_TAG_CONFIG_1.
 */
#define READ_EGR_EPARS_OPAQUE_TAG_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EPARS_OPAQUE_TAG_CONFIG_1r_BLKACC,2,EGR_EPARS_OPAQUE_TAG_CONFIG_1r_OFFSET,0,(r._egr_epars_opaque_tag_config_1), 1)
#define WRITE_EGR_EPARS_OPAQUE_TAG_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EPARS_OPAQUE_TAG_CONFIG_1r_BLKACC,2,EGR_EPARS_OPAQUE_TAG_CONFIG_1r_OFFSET,0,&(r._egr_epars_opaque_tag_config_1), 1)

/*******************************************************************************
 * End of 'EGR_EPARS_OPAQUE_TAG_CONFIG_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EPARS_RAM_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EPARS_RAM_CONTROL.
 */
#define READ_EGR_EPARS_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_EPARS_RAM_CONTROLr_BLKACC,2,n,0,EGR_EPARS_RAM_CONTROLr_OFFSET,0,(r._egr_epars_ram_control),2)
#define WRITE_EGR_EPARS_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_EPARS_RAM_CONTROLr_BLKACC,2,n,0,EGR_EPARS_RAM_CONTROLr_OFFSET,0,&(r._egr_epars_ram_control),2)
#define WRITE_EGR_EPARS_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_EPARS_RAM_CONTROLr_BLKACC,2,-1,0,EGR_EPARS_RAM_CONTROLr_OFFSET,0,&(r._egr_epars_ram_control),2)

/*******************************************************************************
 * End of 'EGR_EPARS_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EPARS_RAM_MSP_ECC_CTRL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EPARS_RAM_MSP_ECC_CTRL.
 */
#define READ_EGR_EPARS_RAM_MSP_ECC_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_EPARS_RAM_MSP_ECC_CTRLr_BLKACC,2,n,0,EGR_EPARS_RAM_MSP_ECC_CTRLr_OFFSET,0,(r._egr_epars_ram_msp_ecc_ctrl),1)
#define WRITE_EGR_EPARS_RAM_MSP_ECC_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_EPARS_RAM_MSP_ECC_CTRLr_BLKACC,2,n,0,EGR_EPARS_RAM_MSP_ECC_CTRLr_OFFSET,0,&(r._egr_epars_ram_msp_ecc_ctrl),1)
#define WRITE_EGR_EPARS_RAM_MSP_ECC_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_EPARS_RAM_MSP_ECC_CTRLr_BLKACC,2,-1,0,EGR_EPARS_RAM_MSP_ECC_CTRLr_OFFSET,0,&(r._egr_epars_ram_msp_ecc_ctrl),1)

/*******************************************************************************
 * End of 'EGR_EPARS_RAM_MSP_ECC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EPARS_SER_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EPARS_SER_CONTROL.
 */
#define READ_EGR_EPARS_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EPARS_SER_CONTROLr_BLKACC,2,EGR_EPARS_SER_CONTROLr_OFFSET,0,(r._egr_epars_ser_control), 1)
#define WRITE_EGR_EPARS_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EPARS_SER_CONTROLr_BLKACC,2,EGR_EPARS_SER_CONTROLr_OFFSET,0,&(r._egr_epars_ser_control), 1)

/*******************************************************************************
 * End of 'EGR_EPARS_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EPARS_XOR_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EPARS_XOR_CONTROL.
 */
#define READ_EGR_EPARS_XOR_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_EPARS_XOR_CONTROLr_BLKACC,2,n,0,EGR_EPARS_XOR_CONTROLr_OFFSET,0,(r._egr_epars_xor_control),1)
#define WRITE_EGR_EPARS_XOR_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_EPARS_XOR_CONTROLr_BLKACC,2,n,0,EGR_EPARS_XOR_CONTROLr_OFFSET,0,&(r._egr_epars_xor_control),1)
#define WRITE_EGR_EPARS_XOR_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_EPARS_XOR_CONTROLr_BLKACC,2,-1,0,EGR_EPARS_XOR_CONTROLr_OFFSET,0,&(r._egr_epars_xor_control),1)

/*******************************************************************************
 * End of 'EGR_EPARS_XOR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EPMOD_EN_COR_ERR_RPT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EPMOD_EN_COR_ERR_RPT.
 */
#define READ_EGR_EPMOD_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EPMOD_EN_COR_ERR_RPTr_BLKACC,2,EGR_EPMOD_EN_COR_ERR_RPTr_OFFSET,0,(r._egr_epmod_en_cor_err_rpt), 1)
#define WRITE_EGR_EPMOD_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EPMOD_EN_COR_ERR_RPTr_BLKACC,2,EGR_EPMOD_EN_COR_ERR_RPTr_OFFSET,0,&(r._egr_epmod_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'EGR_EPMOD_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EPMOD_HW_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EPMOD_HW_CONFIG.
 */
#define READ_EGR_EPMOD_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EPMOD_HW_CONFIGr_BLKACC,2,EGR_EPMOD_HW_CONFIGr_OFFSET,0,(r._egr_epmod_hw_config), 2)
#define WRITE_EGR_EPMOD_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EPMOD_HW_CONFIGr_BLKACC,2,EGR_EPMOD_HW_CONFIGr_OFFSET,0,&(r._egr_epmod_hw_config), 2)

/*******************************************************************************
 * End of 'EGR_EPMOD_HW_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EPMOD_RAM_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EPMOD_RAM_CONTROL.
 */
#define READ_EGR_EPMOD_RAM_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EPMOD_RAM_CONTROLr_BLKACC,2,EGR_EPMOD_RAM_CONTROLr_OFFSET,0,(r._egr_epmod_ram_control), 2)
#define WRITE_EGR_EPMOD_RAM_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EPMOD_RAM_CONTROLr_BLKACC,2,EGR_EPMOD_RAM_CONTROLr_OFFSET,0,&(r._egr_epmod_ram_control), 2)

/*******************************************************************************
 * End of 'EGR_EPMOD_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EPMOD_SER_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EPMOD_SER_CONTROL.
 */
#define READ_EGR_EPMOD_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EPMOD_SER_CONTROLr_BLKACC,2,EGR_EPMOD_SER_CONTROLr_OFFSET,0,(r._egr_epmod_ser_control), 1)
#define WRITE_EGR_EPMOD_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EPMOD_SER_CONTROLr_BLKACC,2,EGR_EPMOD_SER_CONTROLr_OFFSET,0,&(r._egr_epmod_ser_control), 1)

/*******************************************************************************
 * End of 'EGR_EPMOD_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_ESW_HW_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_ESW_HW_CONFIG.
 */
#define READ_EGR_ESW_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_ESW_HW_CONFIGr_BLKACC,2,EGR_ESW_HW_CONFIGr_OFFSET,0,(r._egr_esw_hw_config), 2)
#define WRITE_EGR_ESW_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_ESW_HW_CONFIGr_BLKACC,2,EGR_ESW_HW_CONFIGr_OFFSET,0,&(r._egr_esw_hw_config), 2)

/*******************************************************************************
 * End of 'EGR_ESW_HW_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EVENT_MASK
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EVENT_MASK.
 */
#define READ_EGR_EVENT_MASKr(u,i,r) bcmbd_cmicx_reg_block_read(u,EGR_EVENT_MASKr_BLKACC,2,EGR_EVENT_MASKr_OFFSET,i,(r._egr_event_mask), 2)
#define WRITE_EGR_EVENT_MASKr(u,i,r) bcmbd_cmicx_reg_block_write(u,EGR_EVENT_MASKr_BLKACC,2,EGR_EVENT_MASKr_OFFSET,i,&(r._egr_event_mask), 2)

/*******************************************************************************
 * End of 'EGR_EVENT_MASKr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EVENT_MASK_0
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EVENT_MASK_0.
 */
#define READ_EGR_EVENT_MASK_0r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EVENT_MASK_0r_BLKACC,2,EGR_EVENT_MASK_0r_OFFSET,0,(r._egr_event_mask_0), 2)
#define WRITE_EGR_EVENT_MASK_0r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EVENT_MASK_0r_BLKACC,2,EGR_EVENT_MASK_0r_OFFSET,0,&(r._egr_event_mask_0), 2)

/*******************************************************************************
 * End of 'EGR_EVENT_MASK_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EVENT_MASK_1
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EVENT_MASK_1.
 */
#define READ_EGR_EVENT_MASK_1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EVENT_MASK_1r_BLKACC,2,EGR_EVENT_MASK_1r_OFFSET,0,(r._egr_event_mask_1), 2)
#define WRITE_EGR_EVENT_MASK_1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EVENT_MASK_1r_BLKACC,2,EGR_EVENT_MASK_1r_OFFSET,0,&(r._egr_event_mask_1), 2)

/*******************************************************************************
 * End of 'EGR_EVENT_MASK_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EVENT_MASK_2
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EVENT_MASK_2.
 */
#define READ_EGR_EVENT_MASK_2r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EVENT_MASK_2r_BLKACC,2,EGR_EVENT_MASK_2r_OFFSET,0,(r._egr_event_mask_2), 2)
#define WRITE_EGR_EVENT_MASK_2r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EVENT_MASK_2r_BLKACC,2,EGR_EVENT_MASK_2r_OFFSET,0,&(r._egr_event_mask_2), 2)

/*******************************************************************************
 * End of 'EGR_EVENT_MASK_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EVENT_MASK_3
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EVENT_MASK_3.
 */
#define READ_EGR_EVENT_MASK_3r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EVENT_MASK_3r_BLKACC,2,EGR_EVENT_MASK_3r_OFFSET,0,(r._egr_event_mask_3), 2)
#define WRITE_EGR_EVENT_MASK_3r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EVENT_MASK_3r_BLKACC,2,EGR_EVENT_MASK_3r_OFFSET,0,&(r._egr_event_mask_3), 2)

/*******************************************************************************
 * End of 'EGR_EVENT_MASK_3r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EVENT_MASK_4
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EVENT_MASK_4.
 */
#define READ_EGR_EVENT_MASK_4r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EVENT_MASK_4r_BLKACC,2,EGR_EVENT_MASK_4r_OFFSET,0,(r._egr_event_mask_4), 2)
#define WRITE_EGR_EVENT_MASK_4r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EVENT_MASK_4r_BLKACC,2,EGR_EVENT_MASK_4r_OFFSET,0,&(r._egr_event_mask_4), 2)

/*******************************************************************************
 * End of 'EGR_EVENT_MASK_4r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EVENT_MASK_5
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EVENT_MASK_5.
 */
#define READ_EGR_EVENT_MASK_5r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EVENT_MASK_5r_BLKACC,2,EGR_EVENT_MASK_5r_OFFSET,0,(r._egr_event_mask_5), 2)
#define WRITE_EGR_EVENT_MASK_5r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EVENT_MASK_5r_BLKACC,2,EGR_EVENT_MASK_5r_OFFSET,0,&(r._egr_event_mask_5), 2)

/*******************************************************************************
 * End of 'EGR_EVENT_MASK_5r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EVENT_MASK_6
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EVENT_MASK_6.
 */
#define READ_EGR_EVENT_MASK_6r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EVENT_MASK_6r_BLKACC,2,EGR_EVENT_MASK_6r_OFFSET,0,(r._egr_event_mask_6), 2)
#define WRITE_EGR_EVENT_MASK_6r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EVENT_MASK_6r_BLKACC,2,EGR_EVENT_MASK_6r_OFFSET,0,&(r._egr_event_mask_6), 2)

/*******************************************************************************
 * End of 'EGR_EVENT_MASK_6r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EVENT_MASK_7
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EVENT_MASK_7.
 */
#define READ_EGR_EVENT_MASK_7r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_EVENT_MASK_7r_BLKACC,2,EGR_EVENT_MASK_7r_OFFSET,0,(r._egr_event_mask_7), 2)
#define WRITE_EGR_EVENT_MASK_7r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_EVENT_MASK_7r_BLKACC,2,EGR_EVENT_MASK_7r_OFFSET,0,&(r._egr_event_mask_7), 2)

/*******************************************************************************
 * End of 'EGR_EVENT_MASK_7r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEXIBLE_IPV6_EXT_HDR
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEXIBLE_IPV6_EXT_HDR.
 */
#define READ_EGR_FLEXIBLE_IPV6_EXT_HDRr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_FLEXIBLE_IPV6_EXT_HDRr_BLKACC,2,EGR_FLEXIBLE_IPV6_EXT_HDRr_OFFSET,0,(r._egr_flexible_ipv6_ext_hdr), 1)
#define WRITE_EGR_FLEXIBLE_IPV6_EXT_HDRr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_FLEXIBLE_IPV6_EXT_HDRr_BLKACC,2,EGR_FLEXIBLE_IPV6_EXT_HDRr_OFFSET,0,&(r._egr_flexible_ipv6_ext_hdr), 1)

/*******************************************************************************
 * End of 'EGR_FLEXIBLE_IPV6_EXT_HDRr'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_OFFSET_TABLE_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     14
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_0_INST0.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_0_INST0m_BLKACC,88,n,0,EGR_FLEX_CTR_OFFSET_TABLE_0_INST0m_OFFSET,i,(m._egr_flex_ctr_offset_table_0_inst0),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_0_INST0m_BLKACC,88,n,0,EGR_FLEX_CTR_OFFSET_TABLE_0_INST0m_OFFSET,i,&(m._egr_flex_ctr_offset_table_0_inst0),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_0_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_0_INST0m_BLKACC,88,-1,0,EGR_FLEX_CTR_OFFSET_TABLE_0_INST0m_OFFSET,i,&(m._egr_flex_ctr_offset_table_0_inst0),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_0_INST0m'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_OFFSET_TABLE_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     14
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_0_INST1.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_0_INST1m_BLKACC,88,n,0,EGR_FLEX_CTR_OFFSET_TABLE_0_INST1m_OFFSET,i,(m._egr_flex_ctr_offset_table_0_inst1),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_0_INST1m_BLKACC,88,n,0,EGR_FLEX_CTR_OFFSET_TABLE_0_INST1m_OFFSET,i,&(m._egr_flex_ctr_offset_table_0_inst1),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_0_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_0_INST1m_BLKACC,88,-1,0,EGR_FLEX_CTR_OFFSET_TABLE_0_INST1m_OFFSET,i,&(m._egr_flex_ctr_offset_table_0_inst1),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_0_INST1m'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_OFFSET_TABLE_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     14
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_1_INST0.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_1_INST0m_BLKACC,88,n,0,EGR_FLEX_CTR_OFFSET_TABLE_1_INST0m_OFFSET,i,(m._egr_flex_ctr_offset_table_1_inst0),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_1_INST0m_BLKACC,88,n,0,EGR_FLEX_CTR_OFFSET_TABLE_1_INST0m_OFFSET,i,&(m._egr_flex_ctr_offset_table_1_inst0),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_1_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_1_INST0m_BLKACC,88,-1,0,EGR_FLEX_CTR_OFFSET_TABLE_1_INST0m_OFFSET,i,&(m._egr_flex_ctr_offset_table_1_inst0),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_1_INST0m'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_OFFSET_TABLE_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     14
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_1_INST1.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_1_INST1m_BLKACC,88,n,0,EGR_FLEX_CTR_OFFSET_TABLE_1_INST1m_OFFSET,i,(m._egr_flex_ctr_offset_table_1_inst1),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_1_INST1m_BLKACC,88,n,0,EGR_FLEX_CTR_OFFSET_TABLE_1_INST1m_OFFSET,i,&(m._egr_flex_ctr_offset_table_1_inst1),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_1_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_1_INST1m_BLKACC,88,-1,0,EGR_FLEX_CTR_OFFSET_TABLE_1_INST1m_OFFSET,i,&(m._egr_flex_ctr_offset_table_1_inst1),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_1_INST1m'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_OFFSET_TABLE_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     14
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_2_INST0.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_2_INST0m_BLKACC,88,n,0,EGR_FLEX_CTR_OFFSET_TABLE_2_INST0m_OFFSET,i,(m._egr_flex_ctr_offset_table_2_inst0),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_2_INST0m_BLKACC,88,n,0,EGR_FLEX_CTR_OFFSET_TABLE_2_INST0m_OFFSET,i,&(m._egr_flex_ctr_offset_table_2_inst0),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_2_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_2_INST0m_BLKACC,88,-1,0,EGR_FLEX_CTR_OFFSET_TABLE_2_INST0m_OFFSET,i,&(m._egr_flex_ctr_offset_table_2_inst0),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_2_INST0m'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_OFFSET_TABLE_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     14
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_2_INST1.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_2_INST1m_BLKACC,88,n,0,EGR_FLEX_CTR_OFFSET_TABLE_2_INST1m_OFFSET,i,(m._egr_flex_ctr_offset_table_2_inst1),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_2_INST1m_BLKACC,88,n,0,EGR_FLEX_CTR_OFFSET_TABLE_2_INST1m_OFFSET,i,&(m._egr_flex_ctr_offset_table_2_inst1),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_2_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_2_INST1m_BLKACC,88,-1,0,EGR_FLEX_CTR_OFFSET_TABLE_2_INST1m_OFFSET,i,&(m._egr_flex_ctr_offset_table_2_inst1),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_2_INST1m'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0r_BLKACC,88,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0r_OFFSET,0,(r._egr_flex_ctr_offset_table_control_0_inst0), 1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0r_BLKACC,88,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0r_OFFSET,0,&(r._egr_flex_ctr_offset_table_control_0_inst0), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1r_BLKACC,88,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1r_OFFSET,0,(r._egr_flex_ctr_offset_table_control_0_inst1), 1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1r_BLKACC,88,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1r_OFFSET,0,&(r._egr_flex_ctr_offset_table_control_0_inst1), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0r_BLKACC,88,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0r_OFFSET,0,(r._egr_flex_ctr_offset_table_control_1_inst0), 1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0r_BLKACC,88,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0r_OFFSET,0,&(r._egr_flex_ctr_offset_table_control_1_inst0), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1r_BLKACC,88,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1r_OFFSET,0,(r._egr_flex_ctr_offset_table_control_1_inst1), 1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1r_BLKACC,88,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1r_OFFSET,0,&(r._egr_flex_ctr_offset_table_control_1_inst1), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0r_BLKACC,88,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0r_OFFSET,0,(r._egr_flex_ctr_offset_table_control_2_inst0), 1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0r_BLKACC,88,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0r_OFFSET,0,&(r._egr_flex_ctr_offset_table_control_2_inst0), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1r_BLKACC,88,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1r_OFFSET,0,(r._egr_flex_ctr_offset_table_control_2_inst1), 1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1r_BLKACC,88,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1r_OFFSET,0,&(r._egr_flex_ctr_offset_table_control_2_inst1), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0.
 */
#define READ_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r_BLKACC,88,n,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r_OFFSET,0,(r._egr_flex_ctr_pkt_attr_selector_key_0_inst0),2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r_BLKACC,88,n,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_0_inst0),2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r_BLKACC,88,-1,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_0_inst0),2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1.
 */
#define READ_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r_BLKACC,88,n,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r_OFFSET,0,(r._egr_flex_ctr_pkt_attr_selector_key_0_inst1),2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r_BLKACC,88,n,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_0_inst1),2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r_BLKACC,88,-1,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_0_inst1),2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0.
 */
#define READ_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r_BLKACC,88,n,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r_OFFSET,0,(r._egr_flex_ctr_pkt_attr_selector_key_1_inst0),2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r_BLKACC,88,n,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_1_inst0),2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r_BLKACC,88,-1,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_1_inst0),2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1.
 */
#define READ_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r_BLKACC,88,n,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r_OFFSET,0,(r._egr_flex_ctr_pkt_attr_selector_key_1_inst1),2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r_BLKACC,88,n,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_1_inst1),2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r_BLKACC,88,-1,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_1_inst1),2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0.
 */
#define READ_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r_BLKACC,88,n,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r_OFFSET,0,(r._egr_flex_ctr_pkt_attr_selector_key_2_inst0),2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r_BLKACC,88,n,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_2_inst0),2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r_BLKACC,88,-1,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_2_inst0),2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1.
 */
#define READ_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r_BLKACC,88,n,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r_OFFSET,0,(r._egr_flex_ctr_pkt_attr_selector_key_2_inst1),2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r_BLKACC,88,n,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_2_inst1),2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r_BLKACC,88,-1,0,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_2_inst1),2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r'
 */




/*******************************************************************************
 * MEMORY:  EGR_FRAGMENT_ID_TABLE_INST0
 * BLOCKS:   EPIPE
 * SIZE:     22
 */
/*
 * These macros can be used to access EGR_FRAGMENT_ID_TABLE_INST0.
 */
#define READ_EGR_FRAGMENT_ID_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EGR_FRAGMENT_ID_TABLE_INST0m_BLKACC,2,n,0,EGR_FRAGMENT_ID_TABLE_INST0m_OFFSET,i,(m._egr_fragment_id_table_inst0),1)
#define WRITE_EGR_FRAGMENT_ID_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FRAGMENT_ID_TABLE_INST0m_BLKACC,2,n,0,EGR_FRAGMENT_ID_TABLE_INST0m_OFFSET,i,&(m._egr_fragment_id_table_inst0),1)
#define WRITE_EGR_FRAGMENT_ID_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FRAGMENT_ID_TABLE_INST0m_BLKACC,2,-1,0,EGR_FRAGMENT_ID_TABLE_INST0m_OFFSET,i,&(m._egr_fragment_id_table_inst0),1)

/*******************************************************************************
 * End of 'EGR_FRAGMENT_ID_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  EGR_FRAGMENT_ID_TABLE_INST1
 * BLOCKS:   EPIPE
 * SIZE:     22
 */
/*
 * These macros can be used to access EGR_FRAGMENT_ID_TABLE_INST1.
 */
#define READ_EGR_FRAGMENT_ID_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EGR_FRAGMENT_ID_TABLE_INST1m_BLKACC,2,n,0,EGR_FRAGMENT_ID_TABLE_INST1m_OFFSET,i,(m._egr_fragment_id_table_inst1),1)
#define WRITE_EGR_FRAGMENT_ID_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FRAGMENT_ID_TABLE_INST1m_BLKACC,2,n,0,EGR_FRAGMENT_ID_TABLE_INST1m_OFFSET,i,&(m._egr_fragment_id_table_inst1),1)
#define WRITE_EGR_FRAGMENT_ID_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_FRAGMENT_ID_TABLE_INST1m_BLKACC,2,-1,0,EGR_FRAGMENT_ID_TABLE_INST1m_OFFSET,i,&(m._egr_fragment_id_table_inst1),1)

/*******************************************************************************
 * End of 'EGR_FRAGMENT_ID_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  EGR_GPP_ATTRIBUTES
 * BLOCKS:   EPIPE
 * SIZE:     6
 */
/*
 * These macros can be used to access EGR_GPP_ATTRIBUTES.
 */
#define READ_EGR_GPP_ATTRIBUTESm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_GPP_ATTRIBUTESm_BLKACC,2,EGR_GPP_ATTRIBUTESm_OFFSET,i,(m._egr_gpp_attributes),1)
#define WRITE_EGR_GPP_ATTRIBUTESm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_GPP_ATTRIBUTESm_BLKACC,2,EGR_GPP_ATTRIBUTESm_OFFSET,i,&(m._egr_gpp_attributes),1)

/*******************************************************************************
 * End of 'EGR_GPP_ATTRIBUTESm'
 */




/*******************************************************************************
 * REGISTER:  EGR_GSH_ETHERTYPE_1
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_GSH_ETHERTYPE_1.
 */
#define READ_EGR_GSH_ETHERTYPE_1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_GSH_ETHERTYPE_1r_BLKACC,2,EGR_GSH_ETHERTYPE_1r_OFFSET,0,(r._egr_gsh_ethertype_1), 2)
#define WRITE_EGR_GSH_ETHERTYPE_1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_GSH_ETHERTYPE_1r_BLKACC,2,EGR_GSH_ETHERTYPE_1r_OFFSET,0,&(r._egr_gsh_ethertype_1), 2)

/*******************************************************************************
 * End of 'EGR_GSH_ETHERTYPE_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_GSH_ETHERTYPE_2
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_GSH_ETHERTYPE_2.
 */
#define READ_EGR_GSH_ETHERTYPE_2r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_GSH_ETHERTYPE_2r_BLKACC,2,EGR_GSH_ETHERTYPE_2r_OFFSET,0,(r._egr_gsh_ethertype_2), 2)
#define WRITE_EGR_GSH_ETHERTYPE_2r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_GSH_ETHERTYPE_2r_BLKACC,2,EGR_GSH_ETHERTYPE_2r_OFFSET,0,&(r._egr_gsh_ethertype_2), 2)

/*******************************************************************************
 * End of 'EGR_GSH_ETHERTYPE_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_HG_HDR_PROT_STATUS_TX_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_HG_HDR_PROT_STATUS_TX_CONTROL.
 */
#define READ_EGR_HG_HDR_PROT_STATUS_TX_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_HG_HDR_PROT_STATUS_TX_CONTROLr_BLKACC,2,EGR_HG_HDR_PROT_STATUS_TX_CONTROLr_OFFSET,0,(r._egr_hg_hdr_prot_status_tx_control), 1)
#define WRITE_EGR_HG_HDR_PROT_STATUS_TX_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_HG_HDR_PROT_STATUS_TX_CONTROLr_BLKACC,2,EGR_HG_HDR_PROT_STATUS_TX_CONTROLr_OFFSET,0,&(r._egr_hg_hdr_prot_status_tx_control), 1)

/*******************************************************************************
 * End of 'EGR_HG_HDR_PROT_STATUS_TX_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_HISTO_DST_PORT_MAP
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_HISTO_DST_PORT_MAP.
 */
#define READ_EGR_HISTO_DST_PORT_MAPr(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_HISTO_DST_PORT_MAPr_BLKACC,p,EGR_HISTO_DST_PORT_MAPr_OFFSET,0,(r._egr_histo_dst_port_map), 1)
#define WRITE_EGR_HISTO_DST_PORT_MAPr(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_HISTO_DST_PORT_MAPr_BLKACC,p,EGR_HISTO_DST_PORT_MAPr_OFFSET,0,&(r._egr_histo_dst_port_map), 1)

/*******************************************************************************
 * End of 'EGR_HISTO_DST_PORT_MAPr'
 */




/*******************************************************************************
 * REGISTER:  EGR_HISTO_MON_0_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_HISTO_MON_0_CONFIG.
 */
#define READ_EGR_HISTO_MON_0_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_HISTO_MON_0_CONFIGr_BLKACC,2,EGR_HISTO_MON_0_CONFIGr_OFFSET,0,(r._egr_histo_mon_0_config), 1)
#define WRITE_EGR_HISTO_MON_0_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_HISTO_MON_0_CONFIGr_BLKACC,2,EGR_HISTO_MON_0_CONFIGr_OFFSET,0,&(r._egr_histo_mon_0_config), 1)

/*******************************************************************************
 * End of 'EGR_HISTO_MON_0_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_HISTO_MON_1_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_HISTO_MON_1_CONFIG.
 */
#define READ_EGR_HISTO_MON_1_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_HISTO_MON_1_CONFIGr_BLKACC,2,EGR_HISTO_MON_1_CONFIGr_OFFSET,0,(r._egr_histo_mon_1_config), 1)
#define WRITE_EGR_HISTO_MON_1_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_HISTO_MON_1_CONFIGr_BLKACC,2,EGR_HISTO_MON_1_CONFIGr_OFFSET,0,&(r._egr_histo_mon_1_config), 1)

/*******************************************************************************
 * End of 'EGR_HISTO_MON_1_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_HISTO_MON_2_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_HISTO_MON_2_CONFIG.
 */
#define READ_EGR_HISTO_MON_2_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_HISTO_MON_2_CONFIGr_BLKACC,2,EGR_HISTO_MON_2_CONFIGr_OFFSET,0,(r._egr_histo_mon_2_config), 1)
#define WRITE_EGR_HISTO_MON_2_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_HISTO_MON_2_CONFIGr_BLKACC,2,EGR_HISTO_MON_2_CONFIGr_OFFSET,0,&(r._egr_histo_mon_2_config), 1)

/*******************************************************************************
 * End of 'EGR_HISTO_MON_2_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_HISTO_MON_3_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_HISTO_MON_3_CONFIG.
 */
#define READ_EGR_HISTO_MON_3_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_HISTO_MON_3_CONFIGr_BLKACC,2,EGR_HISTO_MON_3_CONFIGr_OFFSET,0,(r._egr_histo_mon_3_config), 1)
#define WRITE_EGR_HISTO_MON_3_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_HISTO_MON_3_CONFIGr_BLKACC,2,EGR_HISTO_MON_3_CONFIGr_OFFSET,0,&(r._egr_histo_mon_3_config), 1)

/*******************************************************************************
 * End of 'EGR_HISTO_MON_3_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_HISTO_SRC_PORT_MAP
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_HISTO_SRC_PORT_MAP.
 */
#define READ_EGR_HISTO_SRC_PORT_MAPr(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_HISTO_SRC_PORT_MAPr_BLKACC,p,EGR_HISTO_SRC_PORT_MAPr_OFFSET,0,(r._egr_histo_src_port_map), 1)
#define WRITE_EGR_HISTO_SRC_PORT_MAPr(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_HISTO_SRC_PORT_MAPr_BLKACC,p,EGR_HISTO_SRC_PORT_MAPr_OFFSET,0,&(r._egr_histo_src_port_map), 1)

/*******************************************************************************
 * End of 'EGR_HISTO_SRC_PORT_MAPr'
 */




/*******************************************************************************
 * REGISTER:  EGR_IFA_HDR_CONFIG_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_IFA_HDR_CONFIG_0.
 */
#define READ_EGR_IFA_HDR_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_IFA_HDR_CONFIG_0r_BLKACC,2,EGR_IFA_HDR_CONFIG_0r_OFFSET,0,(r._egr_ifa_hdr_config_0), 1)
#define WRITE_EGR_IFA_HDR_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_IFA_HDR_CONFIG_0r_BLKACC,2,EGR_IFA_HDR_CONFIG_0r_OFFSET,0,&(r._egr_ifa_hdr_config_0), 1)

/*******************************************************************************
 * End of 'EGR_IFA_HDR_CONFIG_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_IFA_HDR_CONFIG_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_IFA_HDR_CONFIG_1.
 */
#define READ_EGR_IFA_HDR_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_IFA_HDR_CONFIG_1r_BLKACC,2,EGR_IFA_HDR_CONFIG_1r_OFFSET,0,(r._egr_ifa_hdr_config_1), 1)
#define WRITE_EGR_IFA_HDR_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_IFA_HDR_CONFIG_1r_BLKACC,2,EGR_IFA_HDR_CONFIG_1r_OFFSET,0,&(r._egr_ifa_hdr_config_1), 1)

/*******************************************************************************
 * End of 'EGR_IFA_HDR_CONFIG_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_INGRESS_PORT_TPID_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_INGRESS_PORT_TPID_SELECT.
 */
#define READ_EGR_INGRESS_PORT_TPID_SELECTr(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_INGRESS_PORT_TPID_SELECTr_BLKACC,p,EGR_INGRESS_PORT_TPID_SELECTr_OFFSET,0,(r._egr_ingress_port_tpid_select), 1)
#define WRITE_EGR_INGRESS_PORT_TPID_SELECTr(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_INGRESS_PORT_TPID_SELECTr_BLKACC,p,EGR_INGRESS_PORT_TPID_SELECTr_OFFSET,0,&(r._egr_ingress_port_tpid_select), 1)

/*******************************************************************************
 * End of 'EGR_INGRESS_PORT_TPID_SELECTr'
 */




/*******************************************************************************
 * MEMORY:  EGR_ING_PORT
 * BLOCKS:   EPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access EGR_ING_PORT.
 */
#define READ_EGR_ING_PORTm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_ING_PORTm_BLKACC,2,EGR_ING_PORTm_OFFSET,i,(m._egr_ing_port),1)
#define WRITE_EGR_ING_PORTm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_ING_PORTm_BLKACC,2,EGR_ING_PORTm_OFFSET,i,&(m._egr_ing_port),1)

/*******************************************************************************
 * End of 'EGR_ING_PORTm'
 */




/*******************************************************************************
 * REGISTER:  EGR_INTR_ENABLE_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_INTR_ENABLE_2.
 */
#define READ_EGR_INTR_ENABLE_2r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_INTR_ENABLE_2r_BLKACC,2,EGR_INTR_ENABLE_2r_OFFSET,0,(r._egr_intr_enable_2), 1)
#define WRITE_EGR_INTR_ENABLE_2r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_INTR_ENABLE_2r_BLKACC,2,EGR_INTR_ENABLE_2r_OFFSET,0,&(r._egr_intr_enable_2), 1)

/*******************************************************************************
 * End of 'EGR_INTR_ENABLE_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_INTR_STATUS_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_INTR_STATUS_2.
 */
#define READ_EGR_INTR_STATUS_2r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_INTR_STATUS_2r_BLKACC,2,n,0,EGR_INTR_STATUS_2r_OFFSET,0,(r._egr_intr_status_2),1)
#define WRITE_EGR_INTR_STATUS_2r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_INTR_STATUS_2r_BLKACC,2,n,0,EGR_INTR_STATUS_2r_OFFSET,0,&(r._egr_intr_status_2),1)
#define WRITE_EGR_INTR_STATUS_2r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_INTR_STATUS_2r_BLKACC,2,-1,0,EGR_INTR_STATUS_2r_OFFSET,0,&(r._egr_intr_status_2),1)

/*******************************************************************************
 * End of 'EGR_INTR_STATUS_2r'
 */




/*******************************************************************************
 * MEMORY:  EGR_INT_ACTION_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     65
 */
/*
 * These macros can be used to access EGR_INT_ACTION_PROFILE.
 */
#define READ_EGR_INT_ACTION_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_INT_ACTION_PROFILEm_BLKACC,2,EGR_INT_ACTION_PROFILEm_OFFSET,i,(m._egr_int_action_profile),3)
#define WRITE_EGR_INT_ACTION_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_INT_ACTION_PROFILEm_BLKACC,2,EGR_INT_ACTION_PROFILEm_OFFSET,i,&(m._egr_int_action_profile),3)

/*******************************************************************************
 * End of 'EGR_INT_ACTION_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_INT_CN_TO_EXP_MAPPING_TABLE
 * BLOCKS:   EPIPE
 * SIZE:     9
 */
/*
 * These macros can be used to access EGR_INT_CN_TO_EXP_MAPPING_TABLE.
 */
#define READ_EGR_INT_CN_TO_EXP_MAPPING_TABLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_INT_CN_TO_EXP_MAPPING_TABLEm_BLKACC,2,EGR_INT_CN_TO_EXP_MAPPING_TABLEm_OFFSET,i,(m._egr_int_cn_to_exp_mapping_table),1)
#define WRITE_EGR_INT_CN_TO_EXP_MAPPING_TABLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_INT_CN_TO_EXP_MAPPING_TABLEm_BLKACC,2,EGR_INT_CN_TO_EXP_MAPPING_TABLEm_OFFSET,i,&(m._egr_int_cn_to_exp_mapping_table),1)

/*******************************************************************************
 * End of 'EGR_INT_CN_TO_EXP_MAPPING_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_INT_CN_TO_IP_MAPPING
 * BLOCKS:   EPIPE
 * SIZE:     5
 */
/*
 * These macros can be used to access EGR_INT_CN_TO_IP_MAPPING.
 */
#define READ_EGR_INT_CN_TO_IP_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_INT_CN_TO_IP_MAPPINGm_BLKACC,2,EGR_INT_CN_TO_IP_MAPPINGm_OFFSET,i,(m._egr_int_cn_to_ip_mapping),1)
#define WRITE_EGR_INT_CN_TO_IP_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_INT_CN_TO_IP_MAPPINGm_BLKACC,2,EGR_INT_CN_TO_IP_MAPPINGm_OFFSET,i,&(m._egr_int_cn_to_ip_mapping),1)

/*******************************************************************************
 * End of 'EGR_INT_CN_TO_IP_MAPPINGm'
 */




/*******************************************************************************
 * MEMORY:  EGR_INT_CN_UPDATE
 * BLOCKS:   EPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access EGR_INT_CN_UPDATE.
 */
#define READ_EGR_INT_CN_UPDATEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_INT_CN_UPDATEm_BLKACC,2,EGR_INT_CN_UPDATEm_OFFSET,i,(m._egr_int_cn_update),1)
#define WRITE_EGR_INT_CN_UPDATEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_INT_CN_UPDATEm_BLKACC,2,EGR_INT_CN_UPDATEm_OFFSET,i,&(m._egr_int_cn_update),1)

/*******************************************************************************
 * End of 'EGR_INT_CN_UPDATEm'
 */




/*******************************************************************************
 * REGISTER:  EGR_INT_EGRESS_TIME_DELTA
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_INT_EGRESS_TIME_DELTA.
 */
#define READ_EGR_INT_EGRESS_TIME_DELTAr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_INT_EGRESS_TIME_DELTAr_BLKACC,2,EGR_INT_EGRESS_TIME_DELTAr_OFFSET,0,(r._egr_int_egress_time_delta), 1)
#define WRITE_EGR_INT_EGRESS_TIME_DELTAr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_INT_EGRESS_TIME_DELTAr_BLKACC,2,EGR_INT_EGRESS_TIME_DELTAr_OFFSET,0,&(r._egr_int_egress_time_delta), 1)

/*******************************************************************************
 * End of 'EGR_INT_EGRESS_TIME_DELTAr'
 */




/*******************************************************************************
 * REGISTER:  EGR_INT_METADATA_FIFO_CTRL_INST0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_INT_METADATA_FIFO_CTRL_INST0.
 */
#define READ_EGR_INT_METADATA_FIFO_CTRL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_INT_METADATA_FIFO_CTRL_INST0r_BLKACC,2,n,0,EGR_INT_METADATA_FIFO_CTRL_INST0r_OFFSET,0,(r._egr_int_metadata_fifo_ctrl_inst0),1)
#define WRITE_EGR_INT_METADATA_FIFO_CTRL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_INT_METADATA_FIFO_CTRL_INST0r_BLKACC,2,n,0,EGR_INT_METADATA_FIFO_CTRL_INST0r_OFFSET,0,&(r._egr_int_metadata_fifo_ctrl_inst0),1)
#define WRITE_EGR_INT_METADATA_FIFO_CTRL_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_INT_METADATA_FIFO_CTRL_INST0r_BLKACC,2,-1,0,EGR_INT_METADATA_FIFO_CTRL_INST0r_OFFSET,0,&(r._egr_int_metadata_fifo_ctrl_inst0),1)

/*******************************************************************************
 * End of 'EGR_INT_METADATA_FIFO_CTRL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_INT_METADATA_FIFO_CTRL_INST1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_INT_METADATA_FIFO_CTRL_INST1.
 */
#define READ_EGR_INT_METADATA_FIFO_CTRL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_INT_METADATA_FIFO_CTRL_INST1r_BLKACC,2,n,0,EGR_INT_METADATA_FIFO_CTRL_INST1r_OFFSET,0,(r._egr_int_metadata_fifo_ctrl_inst1),1)
#define WRITE_EGR_INT_METADATA_FIFO_CTRL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_INT_METADATA_FIFO_CTRL_INST1r_BLKACC,2,n,0,EGR_INT_METADATA_FIFO_CTRL_INST1r_OFFSET,0,&(r._egr_int_metadata_fifo_ctrl_inst1),1)
#define WRITE_EGR_INT_METADATA_FIFO_CTRL_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_INT_METADATA_FIFO_CTRL_INST1r_BLKACC,2,-1,0,EGR_INT_METADATA_FIFO_CTRL_INST1r_OFFSET,0,&(r._egr_int_metadata_fifo_ctrl_inst1),1)

/*******************************************************************************
 * End of 'EGR_INT_METADATA_FIFO_CTRL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  EGR_INT_METADATA_FIFO_INST0
 * BLOCKS:   EPIPE
 * SIZE:     524
 */
/*
 * These macros can be used to access EGR_INT_METADATA_FIFO_INST0.
 */
#define READ_EGR_INT_METADATA_FIFO_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EGR_INT_METADATA_FIFO_INST0m_BLKACC,2,n,0,EGR_INT_METADATA_FIFO_INST0m_OFFSET,i,(m._egr_int_metadata_fifo_inst0),17)
#define WRITE_EGR_INT_METADATA_FIFO_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_INT_METADATA_FIFO_INST0m_BLKACC,2,n,0,EGR_INT_METADATA_FIFO_INST0m_OFFSET,i,&(m._egr_int_metadata_fifo_inst0),17)
#define WRITE_EGR_INT_METADATA_FIFO_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_INT_METADATA_FIFO_INST0m_BLKACC,2,-1,0,EGR_INT_METADATA_FIFO_INST0m_OFFSET,i,&(m._egr_int_metadata_fifo_inst0),17)

/*******************************************************************************
 * End of 'EGR_INT_METADATA_FIFO_INST0m'
 */




/*******************************************************************************
 * MEMORY:  EGR_INT_METADATA_FIFO_INST1
 * BLOCKS:   EPIPE
 * SIZE:     524
 */
/*
 * These macros can be used to access EGR_INT_METADATA_FIFO_INST1.
 */
#define READ_EGR_INT_METADATA_FIFO_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EGR_INT_METADATA_FIFO_INST1m_BLKACC,2,n,0,EGR_INT_METADATA_FIFO_INST1m_OFFSET,i,(m._egr_int_metadata_fifo_inst1),17)
#define WRITE_EGR_INT_METADATA_FIFO_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_INT_METADATA_FIFO_INST1m_BLKACC,2,n,0,EGR_INT_METADATA_FIFO_INST1m_OFFSET,i,&(m._egr_int_metadata_fifo_inst1),17)
#define WRITE_EGR_INT_METADATA_FIFO_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_INT_METADATA_FIFO_INST1m_BLKACC,2,-1,0,EGR_INT_METADATA_FIFO_INST1m_OFFSET,i,&(m._egr_int_metadata_fifo_inst1),17)

/*******************************************************************************
 * End of 'EGR_INT_METADATA_FIFO_INST1m'
 */




/*******************************************************************************
 * REGISTER:  EGR_INT_METADATA_FIFO_STATUS_INST0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_INT_METADATA_FIFO_STATUS_INST0.
 */
#define READ_EGR_INT_METADATA_FIFO_STATUS_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_INT_METADATA_FIFO_STATUS_INST0r_BLKACC,2,n,0,EGR_INT_METADATA_FIFO_STATUS_INST0r_OFFSET,0,(r._egr_int_metadata_fifo_status_inst0),1)
#define WRITE_EGR_INT_METADATA_FIFO_STATUS_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_INT_METADATA_FIFO_STATUS_INST0r_BLKACC,2,n,0,EGR_INT_METADATA_FIFO_STATUS_INST0r_OFFSET,0,&(r._egr_int_metadata_fifo_status_inst0),1)
#define WRITE_EGR_INT_METADATA_FIFO_STATUS_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_INT_METADATA_FIFO_STATUS_INST0r_BLKACC,2,-1,0,EGR_INT_METADATA_FIFO_STATUS_INST0r_OFFSET,0,&(r._egr_int_metadata_fifo_status_inst0),1)

/*******************************************************************************
 * End of 'EGR_INT_METADATA_FIFO_STATUS_INST0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_INT_METADATA_FIFO_STATUS_INST1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_INT_METADATA_FIFO_STATUS_INST1.
 */
#define READ_EGR_INT_METADATA_FIFO_STATUS_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_INT_METADATA_FIFO_STATUS_INST1r_BLKACC,2,n,0,EGR_INT_METADATA_FIFO_STATUS_INST1r_OFFSET,0,(r._egr_int_metadata_fifo_status_inst1),1)
#define WRITE_EGR_INT_METADATA_FIFO_STATUS_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_INT_METADATA_FIFO_STATUS_INST1r_BLKACC,2,n,0,EGR_INT_METADATA_FIFO_STATUS_INST1r_OFFSET,0,&(r._egr_int_metadata_fifo_status_inst1),1)
#define WRITE_EGR_INT_METADATA_FIFO_STATUS_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_INT_METADATA_FIFO_STATUS_INST1r_BLKACC,2,-1,0,EGR_INT_METADATA_FIFO_STATUS_INST1r_OFFSET,0,&(r._egr_int_metadata_fifo_status_inst1),1)

/*******************************************************************************
 * End of 'EGR_INT_METADATA_FIFO_STATUS_INST1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_INT_PORT_META_DATA
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_INT_PORT_META_DATA.
 */
#define READ_EGR_INT_PORT_META_DATAr(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_INT_PORT_META_DATAr_BLKACC,p,EGR_INT_PORT_META_DATAr_OFFSET,0,(r._egr_int_port_meta_data), 1)
#define WRITE_EGR_INT_PORT_META_DATAr(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_INT_PORT_META_DATAr_BLKACC,p,EGR_INT_PORT_META_DATAr_OFFSET,0,&(r._egr_int_port_meta_data), 1)

/*******************************************************************************
 * End of 'EGR_INT_PORT_META_DATAr'
 */




/*******************************************************************************
 * REGISTER:  EGR_INT_SWITCH_ID
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_INT_SWITCH_ID.
 */
#define READ_EGR_INT_SWITCH_IDr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_INT_SWITCH_IDr_BLKACC,2,EGR_INT_SWITCH_IDr_OFFSET,0,(r._egr_int_switch_id), 1)
#define WRITE_EGR_INT_SWITCH_IDr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_INT_SWITCH_IDr_BLKACC,2,EGR_INT_SWITCH_IDr_OFFSET,0,&(r._egr_int_switch_id), 1)

/*******************************************************************************
 * End of 'EGR_INT_SWITCH_IDr'
 */




/*******************************************************************************
 * REGISTER:  EGR_IOAM_HDR_CONFIG_0
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_IOAM_HDR_CONFIG_0.
 */
#define READ_EGR_IOAM_HDR_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_IOAM_HDR_CONFIG_0r_BLKACC,2,EGR_IOAM_HDR_CONFIG_0r_OFFSET,0,(r._egr_ioam_hdr_config_0), 2)
#define WRITE_EGR_IOAM_HDR_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_IOAM_HDR_CONFIG_0r_BLKACC,2,EGR_IOAM_HDR_CONFIG_0r_OFFSET,0,&(r._egr_ioam_hdr_config_0), 2)

/*******************************************************************************
 * End of 'EGR_IOAM_HDR_CONFIG_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_IOAM_HDR_CONFIG_0_V4
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_IOAM_HDR_CONFIG_0_V4.
 */
#define READ_EGR_IOAM_HDR_CONFIG_0_V4r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_IOAM_HDR_CONFIG_0_V4r_BLKACC,2,EGR_IOAM_HDR_CONFIG_0_V4r_OFFSET,0,(r._egr_ioam_hdr_config_0_v4), 1)
#define WRITE_EGR_IOAM_HDR_CONFIG_0_V4r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_IOAM_HDR_CONFIG_0_V4r_BLKACC,2,EGR_IOAM_HDR_CONFIG_0_V4r_OFFSET,0,&(r._egr_ioam_hdr_config_0_v4), 1)

/*******************************************************************************
 * End of 'EGR_IOAM_HDR_CONFIG_0_V4r'
 */




/*******************************************************************************
 * REGISTER:  EGR_IOAM_HDR_CONFIG_0_V6_LWR
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_IOAM_HDR_CONFIG_0_V6_LWR.
 */
#define READ_EGR_IOAM_HDR_CONFIG_0_V6_LWRr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_IOAM_HDR_CONFIG_0_V6_LWRr_BLKACC,2,EGR_IOAM_HDR_CONFIG_0_V6_LWRr_OFFSET,0,(r._egr_ioam_hdr_config_0_v6_lwr), 2)
#define WRITE_EGR_IOAM_HDR_CONFIG_0_V6_LWRr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_IOAM_HDR_CONFIG_0_V6_LWRr_BLKACC,2,EGR_IOAM_HDR_CONFIG_0_V6_LWRr_OFFSET,0,&(r._egr_ioam_hdr_config_0_v6_lwr), 2)

/*******************************************************************************
 * End of 'EGR_IOAM_HDR_CONFIG_0_V6_LWRr'
 */




/*******************************************************************************
 * REGISTER:  EGR_IOAM_HDR_CONFIG_0_V6_UPR
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_IOAM_HDR_CONFIG_0_V6_UPR.
 */
#define READ_EGR_IOAM_HDR_CONFIG_0_V6_UPRr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_IOAM_HDR_CONFIG_0_V6_UPRr_BLKACC,2,EGR_IOAM_HDR_CONFIG_0_V6_UPRr_OFFSET,0,(r._egr_ioam_hdr_config_0_v6_upr), 2)
#define WRITE_EGR_IOAM_HDR_CONFIG_0_V6_UPRr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_IOAM_HDR_CONFIG_0_V6_UPRr_BLKACC,2,EGR_IOAM_HDR_CONFIG_0_V6_UPRr_OFFSET,0,&(r._egr_ioam_hdr_config_0_v6_upr), 2)

/*******************************************************************************
 * End of 'EGR_IOAM_HDR_CONFIG_0_V6_UPRr'
 */




/*******************************************************************************
 * REGISTER:  EGR_IOAM_HDR_CONFIG_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_IOAM_HDR_CONFIG_1.
 */
#define READ_EGR_IOAM_HDR_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_IOAM_HDR_CONFIG_1r_BLKACC,2,EGR_IOAM_HDR_CONFIG_1r_OFFSET,0,(r._egr_ioam_hdr_config_1), 1)
#define WRITE_EGR_IOAM_HDR_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_IOAM_HDR_CONFIG_1r_BLKACC,2,EGR_IOAM_HDR_CONFIG_1r_OFFSET,0,&(r._egr_ioam_hdr_config_1), 1)

/*******************************************************************************
 * End of 'EGR_IOAM_HDR_CONFIG_1r'
 */




/*******************************************************************************
 * MEMORY:  EGR_IPMC
 * BLOCKS:   EPIPE
 * SIZE:     6
 */
/*
 * These macros can be used to access EGR_IPMC.
 */
#define READ_EGR_IPMCm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_IPMCm_BLKACC,2,EGR_IPMCm_OFFSET,i,(m._egr_ipmc),1)
#define WRITE_EGR_IPMCm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_IPMCm_BLKACC,2,EGR_IPMCm_OFFSET,i,&(m._egr_ipmc),1)

/*******************************************************************************
 * End of 'EGR_IPMCm'
 */




/*******************************************************************************
 * REGISTER:  EGR_IPMC_CFG2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_IPMC_CFG2.
 */
#define READ_EGR_IPMC_CFG2r(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_IPMC_CFG2r_BLKACC,p,EGR_IPMC_CFG2r_OFFSET,0,(r._egr_ipmc_cfg2), 1)
#define WRITE_EGR_IPMC_CFG2r(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_IPMC_CFG2r_BLKACC,p,EGR_IPMC_CFG2r_OFFSET,0,&(r._egr_ipmc_cfg2), 1)

/*******************************************************************************
 * End of 'EGR_IPMC_CFG2r'
 */




/*******************************************************************************
 * MEMORY:  EGR_IPV6_PREFIX_LIST
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_IPV6_PREFIX_LIST.
 */
#define READ_EGR_IPV6_PREFIX_LISTm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_IPV6_PREFIX_LISTm_BLKACC,2,EGR_IPV6_PREFIX_LISTm_OFFSET,i,(m._egr_ipv6_prefix_list),2)
#define WRITE_EGR_IPV6_PREFIX_LISTm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_IPV6_PREFIX_LISTm_BLKACC,2,EGR_IPV6_PREFIX_LISTm_OFFSET,i,&(m._egr_ipv6_prefix_list),2)

/*******************************************************************************
 * End of 'EGR_IPV6_PREFIX_LISTm'
 */




/*******************************************************************************
 * MEMORY:  EGR_IP_ECN_TO_EXP_MAPPING_TABLE
 * BLOCKS:   EPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access EGR_IP_ECN_TO_EXP_MAPPING_TABLE.
 */
#define READ_EGR_IP_ECN_TO_EXP_MAPPING_TABLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_IP_ECN_TO_EXP_MAPPING_TABLEm_BLKACC,2,EGR_IP_ECN_TO_EXP_MAPPING_TABLEm_OFFSET,i,(m._egr_ip_ecn_to_exp_mapping_table),1)
#define WRITE_EGR_IP_ECN_TO_EXP_MAPPING_TABLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_IP_ECN_TO_EXP_MAPPING_TABLEm_BLKACC,2,EGR_IP_ECN_TO_EXP_MAPPING_TABLEm_OFFSET,i,&(m._egr_ip_ecn_to_exp_mapping_table),1)

/*******************************************************************************
 * End of 'EGR_IP_ECN_TO_EXP_MAPPING_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_IP_TO_INT_CN_MAPPING
 * BLOCKS:   EPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access EGR_IP_TO_INT_CN_MAPPING.
 */
#define READ_EGR_IP_TO_INT_CN_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_IP_TO_INT_CN_MAPPINGm_BLKACC,2,EGR_IP_TO_INT_CN_MAPPINGm_OFFSET,i,(m._egr_ip_to_int_cn_mapping),1)
#define WRITE_EGR_IP_TO_INT_CN_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_IP_TO_INT_CN_MAPPINGm_BLKACC,2,EGR_IP_TO_INT_CN_MAPPINGm_OFFSET,i,&(m._egr_ip_to_int_cn_mapping),1)

/*******************************************************************************
 * End of 'EGR_IP_TO_INT_CN_MAPPINGm'
 */




/*******************************************************************************
 * MEMORY:  EGR_IP_TUNNEL
 * BLOCKS:   EPIPE
 * SIZE:     252
 */
/*
 * These macros can be used to access EGR_IP_TUNNEL.
 */
#define READ_EGR_IP_TUNNELm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_IP_TUNNELm_BLKACC,2,EGR_IP_TUNNELm_OFFSET,i,(m._egr_ip_tunnel),8)
#define WRITE_EGR_IP_TUNNELm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_IP_TUNNELm_BLKACC,2,EGR_IP_TUNNELm_OFFSET,i,&(m._egr_ip_tunnel),8)

/*******************************************************************************
 * End of 'EGR_IP_TUNNELm'
 */




/*******************************************************************************
 * MEMORY:  EGR_IP_TUNNEL_IPV6
 * BLOCKS:   EPIPE
 * SIZE:     504
 */
/*
 * These macros can be used to access EGR_IP_TUNNEL_IPV6.
 */
#define READ_EGR_IP_TUNNEL_IPV6m(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_IP_TUNNEL_IPV6m_BLKACC,2,EGR_IP_TUNNEL_IPV6m_OFFSET,i,(m._egr_ip_tunnel_ipv6),16)
#define WRITE_EGR_IP_TUNNEL_IPV6m(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_IP_TUNNEL_IPV6m_BLKACC,2,EGR_IP_TUNNEL_IPV6m_OFFSET,i,&(m._egr_ip_tunnel_ipv6),16)

/*******************************************************************************
 * End of 'EGR_IP_TUNNEL_IPV6m'
 */




/*******************************************************************************
 * MEMORY:  EGR_IP_TUNNEL_MPLS
 * BLOCKS:   EPIPE
 * SIZE:     504
 */
/*
 * These macros can be used to access EGR_IP_TUNNEL_MPLS.
 */
#define READ_EGR_IP_TUNNEL_MPLSm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_IP_TUNNEL_MPLSm_BLKACC,2,EGR_IP_TUNNEL_MPLSm_OFFSET,i,(m._egr_ip_tunnel_mpls),16)
#define WRITE_EGR_IP_TUNNEL_MPLSm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_IP_TUNNEL_MPLSm_BLKACC,2,EGR_IP_TUNNEL_MPLSm_OFFSET,i,&(m._egr_ip_tunnel_mpls),16)

/*******************************************************************************
 * End of 'EGR_IP_TUNNEL_MPLSm'
 */




/*******************************************************************************
 * MEMORY:  EGR_L3_INTF
 * BLOCKS:   EPIPE
 * SIZE:     127
 */
/*
 * These macros can be used to access EGR_L3_INTF.
 */
#define READ_EGR_L3_INTFm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_L3_INTFm_BLKACC,2,EGR_L3_INTFm_OFFSET,i,(m._egr_l3_intf),4)
#define WRITE_EGR_L3_INTFm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_L3_INTFm_BLKACC,2,EGR_L3_INTFm_OFFSET,i,&(m._egr_l3_intf),4)

/*******************************************************************************
 * End of 'EGR_L3_INTFm'
 */




/*******************************************************************************
 * MEMORY:  EGR_L3_NEXT_HOP
 * BLOCKS:   EPIPE
 * SIZE:     100
 */
/*
 * These macros can be used to access EGR_L3_NEXT_HOP.
 */
#define READ_EGR_L3_NEXT_HOPm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_L3_NEXT_HOPm_BLKACC,2,EGR_L3_NEXT_HOPm_OFFSET,i,(m._egr_l3_next_hop),4)
#define WRITE_EGR_L3_NEXT_HOPm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_L3_NEXT_HOPm_BLKACC,2,EGR_L3_NEXT_HOPm_OFFSET,i,&(m._egr_l3_next_hop),4)

/*******************************************************************************
 * End of 'EGR_L3_NEXT_HOPm'
 */




/*******************************************************************************
 * MEMORY:  EGR_L3_NEXT_HOP_2
 * BLOCKS:   EPIPE
 * SIZE:     19
 */
/*
 * These macros can be used to access EGR_L3_NEXT_HOP_2.
 */
#define READ_EGR_L3_NEXT_HOP_2m(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_L3_NEXT_HOP_2m_BLKACC,2,EGR_L3_NEXT_HOP_2m_OFFSET,i,(m._egr_l3_next_hop_2),1)
#define WRITE_EGR_L3_NEXT_HOP_2m(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_L3_NEXT_HOP_2m_BLKACC,2,EGR_L3_NEXT_HOP_2m_OFFSET,i,&(m._egr_l3_next_hop_2),1)

/*******************************************************************************
 * End of 'EGR_L3_NEXT_HOP_2m'
 */




/*******************************************************************************
 * MEMORY:  EGR_LATENCY_ECN_INT_CN_UPDATE
 * BLOCKS:   EPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access EGR_LATENCY_ECN_INT_CN_UPDATE.
 */
#define READ_EGR_LATENCY_ECN_INT_CN_UPDATEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_LATENCY_ECN_INT_CN_UPDATEm_BLKACC,2,EGR_LATENCY_ECN_INT_CN_UPDATEm_OFFSET,i,(m._egr_latency_ecn_int_cn_update),1)
#define WRITE_EGR_LATENCY_ECN_INT_CN_UPDATEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_LATENCY_ECN_INT_CN_UPDATEm_BLKACC,2,EGR_LATENCY_ECN_INT_CN_UPDATEm_OFFSET,i,&(m._egr_latency_ecn_int_cn_update),1)

/*******************************************************************************
 * End of 'EGR_LATENCY_ECN_INT_CN_UPDATEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_LATENCY_ECN_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     33
 */
/*
 * These macros can be used to access EGR_LATENCY_ECN_PROFILE.
 */
#define READ_EGR_LATENCY_ECN_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_LATENCY_ECN_PROFILEm_BLKACC,2,EGR_LATENCY_ECN_PROFILEm_OFFSET,i,(m._egr_latency_ecn_profile),2)
#define WRITE_EGR_LATENCY_ECN_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_LATENCY_ECN_PROFILEm_BLKACC,2,EGR_LATENCY_ECN_PROFILEm_OFFSET,i,&(m._egr_latency_ecn_profile),2)

/*******************************************************************************
 * End of 'EGR_LATENCY_ECN_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  EGR_LOOPBACK_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_LOOPBACK_CONTROL.
 */
#define READ_EGR_LOOPBACK_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_LOOPBACK_CONTROLr_BLKACC,2,EGR_LOOPBACK_CONTROLr_OFFSET,0,(r._egr_loopback_control), 1)
#define WRITE_EGR_LOOPBACK_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_LOOPBACK_CONTROLr_BLKACC,2,EGR_LOOPBACK_CONTROLr_OFFSET,0,&(r._egr_loopback_control), 1)

/*******************************************************************************
 * End of 'EGR_LOOPBACK_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_LOOPBACK_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     12
 */
/*
 * These macros can be used to access EGR_LOOPBACK_PROFILE.
 */
#define READ_EGR_LOOPBACK_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_LOOPBACK_PROFILEm_BLKACC,2,EGR_LOOPBACK_PROFILEm_OFFSET,i,(m._egr_loopback_profile),1)
#define WRITE_EGR_LOOPBACK_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_LOOPBACK_PROFILEm_BLKACC,2,EGR_LOOPBACK_PROFILEm_OFFSET,i,&(m._egr_loopback_profile),1)

/*******************************************************************************
 * End of 'EGR_LOOPBACK_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MAC_DA_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     55
 */
/*
 * These macros can be used to access EGR_MAC_DA_PROFILE.
 */
#define READ_EGR_MAC_DA_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MAC_DA_PROFILEm_BLKACC,2,EGR_MAC_DA_PROFILEm_OFFSET,i,(m._egr_mac_da_profile),2)
#define WRITE_EGR_MAC_DA_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MAC_DA_PROFILEm_BLKACC,2,EGR_MAC_DA_PROFILEm_OFFSET,i,&(m._egr_mac_da_profile),2)

/*******************************************************************************
 * End of 'EGR_MAC_DA_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MASK
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access EGR_MASK.
 */
#define READ_EGR_MASKm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MASKm_BLKACC,1,EGR_MASKm_OFFSET,i,(m._egr_mask),9)
#define WRITE_EGR_MASKm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MASKm_BLKACC,1,EGR_MASKm_OFFSET,i,&(m._egr_mask),9)

/*******************************************************************************
 * End of 'EGR_MASKm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MAX_USED_ENTRIES
 * BLOCKS:   PORT_IF
 * SIZE:     13
 */
/*
 * These macros can be used to access EGR_MAX_USED_ENTRIES.
 */
#define READ_EGR_MAX_USED_ENTRIESm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MAX_USED_ENTRIESm_BLKACC,89,EGR_MAX_USED_ENTRIESm_OFFSET,i,(m._egr_max_used_entries),1)
#define WRITE_EGR_MAX_USED_ENTRIESm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MAX_USED_ENTRIESm_BLKACC,89,EGR_MAX_USED_ENTRIESm_OFFSET,i,&(m._egr_max_used_entries),1)

/*******************************************************************************
 * End of 'EGR_MAX_USED_ENTRIESm'
 */




/*******************************************************************************
 * REGISTER:  EGR_MC_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MC_CONTROL_1.
 */
#define READ_EGR_MC_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_MC_CONTROL_1r_BLKACC,2,EGR_MC_CONTROL_1r_OFFSET,0,(r._egr_mc_control_1), 1)
#define WRITE_EGR_MC_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_MC_CONTROL_1r_BLKACC,2,EGR_MC_CONTROL_1r_OFFSET,0,&(r._egr_mc_control_1), 1)

/*******************************************************************************
 * End of 'EGR_MC_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_MC_CONTROL_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MC_CONTROL_2.
 */
#define READ_EGR_MC_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_MC_CONTROL_2r_BLKACC,2,EGR_MC_CONTROL_2r_OFFSET,0,(r._egr_mc_control_2), 1)
#define WRITE_EGR_MC_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_MC_CONTROL_2r_BLKACC,2,EGR_MC_CONTROL_2r_OFFSET,0,&(r._egr_mc_control_2), 1)

/*******************************************************************************
 * End of 'EGR_MC_CONTROL_2r'
 */




/*******************************************************************************
 * MEMORY:  EGR_MD_HDR_ATTRS
 * BLOCKS:   EPIPE
 * SIZE:     49
 */
/*
 * These macros can be used to access EGR_MD_HDR_ATTRS.
 */
#define READ_EGR_MD_HDR_ATTRSm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MD_HDR_ATTRSm_BLKACC,2,EGR_MD_HDR_ATTRSm_OFFSET,i,(m._egr_md_hdr_attrs),2)
#define WRITE_EGR_MD_HDR_ATTRSm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MD_HDR_ATTRSm_BLKACC,2,EGR_MD_HDR_ATTRSm_OFFSET,i,&(m._egr_md_hdr_attrs),2)

/*******************************************************************************
 * End of 'EGR_MD_HDR_ATTRSm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MD_HDR_CONST_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     168
 */
/*
 * These macros can be used to access EGR_MD_HDR_CONST_PROFILE.
 */
#define READ_EGR_MD_HDR_CONST_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MD_HDR_CONST_PROFILEm_BLKACC,2,EGR_MD_HDR_CONST_PROFILEm_OFFSET,i,(m._egr_md_hdr_const_profile),6)
#define WRITE_EGR_MD_HDR_CONST_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MD_HDR_CONST_PROFILEm_BLKACC,2,EGR_MD_HDR_CONST_PROFILEm_OFFSET,i,&(m._egr_md_hdr_const_profile),6)

/*******************************************************************************
 * End of 'EGR_MD_HDR_CONST_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MD_HDR_FS_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     480
 */
/*
 * These macros can be used to access EGR_MD_HDR_FS_PROFILE.
 */
#define READ_EGR_MD_HDR_FS_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MD_HDR_FS_PROFILEm_BLKACC,2,EGR_MD_HDR_FS_PROFILEm_OFFSET,i,(m._egr_md_hdr_fs_profile),15)
#define WRITE_EGR_MD_HDR_FS_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MD_HDR_FS_PROFILEm_BLKACC,2,EGR_MD_HDR_FS_PROFILEm_OFFSET,i,&(m._egr_md_hdr_fs_profile),15)

/*******************************************************************************
 * End of 'EGR_MD_HDR_FS_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_METADATA_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     104
 */
/*
 * These macros can be used to access EGR_METADATA_PROFILE.
 */
#define READ_EGR_METADATA_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_METADATA_PROFILEm_BLKACC,2,EGR_METADATA_PROFILEm_OFFSET,i,(m._egr_metadata_profile),4)
#define WRITE_EGR_METADATA_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_METADATA_PROFILEm_BLKACC,2,EGR_METADATA_PROFILEm_OFFSET,i,&(m._egr_metadata_profile),4)

/*******************************************************************************
 * End of 'EGR_METADATA_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MIRROR_ENCAP_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     7
 */
/*
 * These macros can be used to access EGR_MIRROR_ENCAP_CONTROL.
 */
#define READ_EGR_MIRROR_ENCAP_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MIRROR_ENCAP_CONTROLm_BLKACC,2,EGR_MIRROR_ENCAP_CONTROLm_OFFSET,i,(m._egr_mirror_encap_control),1)
#define WRITE_EGR_MIRROR_ENCAP_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MIRROR_ENCAP_CONTROLm_BLKACC,2,EGR_MIRROR_ENCAP_CONTROLm_OFFSET,i,&(m._egr_mirror_encap_control),1)

/*******************************************************************************
 * End of 'EGR_MIRROR_ENCAP_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MIRROR_ENCAP_DATA_1
 * BLOCKS:   EPIPE
 * SIZE:     384
 */
/*
 * These macros can be used to access EGR_MIRROR_ENCAP_DATA_1.
 */
#define READ_EGR_MIRROR_ENCAP_DATA_1m(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MIRROR_ENCAP_DATA_1m_BLKACC,2,EGR_MIRROR_ENCAP_DATA_1m_OFFSET,i,(m._egr_mirror_encap_data_1),12)
#define WRITE_EGR_MIRROR_ENCAP_DATA_1m(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MIRROR_ENCAP_DATA_1m_BLKACC,2,EGR_MIRROR_ENCAP_DATA_1m_OFFSET,i,&(m._egr_mirror_encap_data_1),12)

/*******************************************************************************
 * End of 'EGR_MIRROR_ENCAP_DATA_1m'
 */




/*******************************************************************************
 * MEMORY:  EGR_MIRROR_ENCAP_DATA_2
 * BLOCKS:   EPIPE
 * SIZE:     288
 */
/*
 * These macros can be used to access EGR_MIRROR_ENCAP_DATA_2.
 */
#define READ_EGR_MIRROR_ENCAP_DATA_2m(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MIRROR_ENCAP_DATA_2m_BLKACC,2,EGR_MIRROR_ENCAP_DATA_2m_OFFSET,i,(m._egr_mirror_encap_data_2),9)
#define WRITE_EGR_MIRROR_ENCAP_DATA_2m(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MIRROR_ENCAP_DATA_2m_BLKACC,2,EGR_MIRROR_ENCAP_DATA_2m_OFFSET,i,&(m._egr_mirror_encap_data_2),9)

/*******************************************************************************
 * End of 'EGR_MIRROR_ENCAP_DATA_2m'
 */




/*******************************************************************************
 * MEMORY:  EGR_MIRROR_ENCAP_DESTINATION
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_MIRROR_ENCAP_DESTINATION.
 */
#define READ_EGR_MIRROR_ENCAP_DESTINATIONm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MIRROR_ENCAP_DESTINATIONm_BLKACC,2,EGR_MIRROR_ENCAP_DESTINATIONm_OFFSET,i,(m._egr_mirror_encap_destination),2)
#define WRITE_EGR_MIRROR_ENCAP_DESTINATIONm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MIRROR_ENCAP_DESTINATIONm_BLKACC,2,EGR_MIRROR_ENCAP_DESTINATIONm_OFFSET,i,&(m._egr_mirror_encap_destination),2)

/*******************************************************************************
 * End of 'EGR_MIRROR_ENCAP_DESTINATIONm'
 */




/*******************************************************************************
 * REGISTER:  EGR_MIRROR_ENCAP_PSAMP
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MIRROR_ENCAP_PSAMP.
 */
#define READ_EGR_MIRROR_ENCAP_PSAMPr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_MIRROR_ENCAP_PSAMPr_BLKACC,2,EGR_MIRROR_ENCAP_PSAMPr_OFFSET,0,(r._egr_mirror_encap_psamp), 1)
#define WRITE_EGR_MIRROR_ENCAP_PSAMPr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_MIRROR_ENCAP_PSAMPr_BLKACC,2,EGR_MIRROR_ENCAP_PSAMPr_OFFSET,0,&(r._egr_mirror_encap_psamp), 1)

/*******************************************************************************
 * End of 'EGR_MIRROR_ENCAP_PSAMPr'
 */




/*******************************************************************************
 * REGISTER:  EGR_MIRROR_PSAMP_FORMAT_2_MONITOR
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MIRROR_PSAMP_FORMAT_2_MONITOR.
 */
#define READ_EGR_MIRROR_PSAMP_FORMAT_2_MONITORr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_MIRROR_PSAMP_FORMAT_2_MONITORr_BLKACC,2,EGR_MIRROR_PSAMP_FORMAT_2_MONITORr_OFFSET,0,(r._egr_mirror_psamp_format_2_monitor), 1)
#define WRITE_EGR_MIRROR_PSAMP_FORMAT_2_MONITORr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_MIRROR_PSAMP_FORMAT_2_MONITORr_BLKACC,2,EGR_MIRROR_PSAMP_FORMAT_2_MONITORr_OFFSET,0,&(r._egr_mirror_psamp_format_2_monitor), 1)

/*******************************************************************************
 * End of 'EGR_MIRROR_PSAMP_FORMAT_2_MONITORr'
 */




/*******************************************************************************
 * MEMORY:  EGR_MIRROR_SEQ_INST0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MIRROR_SEQ_INST0.
 */
#define READ_EGR_MIRROR_SEQ_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EGR_MIRROR_SEQ_INST0m_BLKACC,2,n,0,EGR_MIRROR_SEQ_INST0m_OFFSET,i,(m._egr_mirror_seq_inst0),1)
#define WRITE_EGR_MIRROR_SEQ_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_MIRROR_SEQ_INST0m_BLKACC,2,n,0,EGR_MIRROR_SEQ_INST0m_OFFSET,i,&(m._egr_mirror_seq_inst0),1)
#define WRITE_EGR_MIRROR_SEQ_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_MIRROR_SEQ_INST0m_BLKACC,2,-1,0,EGR_MIRROR_SEQ_INST0m_OFFSET,i,&(m._egr_mirror_seq_inst0),1)

/*******************************************************************************
 * End of 'EGR_MIRROR_SEQ_INST0m'
 */




/*******************************************************************************
 * MEMORY:  EGR_MIRROR_SEQ_INST1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MIRROR_SEQ_INST1.
 */
#define READ_EGR_MIRROR_SEQ_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EGR_MIRROR_SEQ_INST1m_BLKACC,2,n,0,EGR_MIRROR_SEQ_INST1m_OFFSET,i,(m._egr_mirror_seq_inst1),1)
#define WRITE_EGR_MIRROR_SEQ_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_MIRROR_SEQ_INST1m_BLKACC,2,n,0,EGR_MIRROR_SEQ_INST1m_OFFSET,i,&(m._egr_mirror_seq_inst1),1)
#define WRITE_EGR_MIRROR_SEQ_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_MIRROR_SEQ_INST1m_BLKACC,2,-1,0,EGR_MIRROR_SEQ_INST1m_OFFSET,i,&(m._egr_mirror_seq_inst1),1)

/*******************************************************************************
 * End of 'EGR_MIRROR_SEQ_INST1m'
 */




/*******************************************************************************
 * MEMORY:  EGR_MIRROR_SESSION
 * BLOCKS:   EPIPE
 * SIZE:     19
 */
/*
 * These macros can be used to access EGR_MIRROR_SESSION.
 */
#define READ_EGR_MIRROR_SESSIONm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MIRROR_SESSIONm_BLKACC,2,EGR_MIRROR_SESSIONm_OFFSET,i,(m._egr_mirror_session),1)
#define WRITE_EGR_MIRROR_SESSIONm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MIRROR_SESSIONm_BLKACC,2,EGR_MIRROR_SESSIONm_OFFSET,i,&(m._egr_mirror_session),1)

/*******************************************************************************
 * End of 'EGR_MIRROR_SESSIONm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MIRROR_USER_META_DATA
 * BLOCKS:   EPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access EGR_MIRROR_USER_META_DATA.
 */
#define READ_EGR_MIRROR_USER_META_DATAm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MIRROR_USER_META_DATAm_BLKACC,2,EGR_MIRROR_USER_META_DATAm_OFFSET,i,(m._egr_mirror_user_meta_data),1)
#define WRITE_EGR_MIRROR_USER_META_DATAm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MIRROR_USER_META_DATAm_BLKACC,2,EGR_MIRROR_USER_META_DATAm_OFFSET,i,&(m._egr_mirror_user_meta_data),1)

/*******************************************************************************
 * End of 'EGR_MIRROR_USER_META_DATAm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MIRROR_ZERO_OFFSET_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     20
 */
/*
 * These macros can be used to access EGR_MIRROR_ZERO_OFFSET_PROFILE.
 */
#define READ_EGR_MIRROR_ZERO_OFFSET_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MIRROR_ZERO_OFFSET_PROFILEm_BLKACC,2,EGR_MIRROR_ZERO_OFFSET_PROFILEm_OFFSET,i,(m._egr_mirror_zero_offset_profile),1)
#define WRITE_EGR_MIRROR_ZERO_OFFSET_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MIRROR_ZERO_OFFSET_PROFILEm_BLKACC,2,EGR_MIRROR_ZERO_OFFSET_PROFILEm_OFFSET,i,&(m._egr_mirror_zero_offset_profile),1)

/*******************************************************************************
 * End of 'EGR_MIRROR_ZERO_OFFSET_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_0.
 */
#define READ_EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_0r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_0r_BLKACC,2,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_0r_OFFSET,0,(r._egr_mirror_zero_payload_offset_cfg_0), 1)
#define WRITE_EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_0r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_0r_BLKACC,2,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_0r_OFFSET,0,&(r._egr_mirror_zero_payload_offset_cfg_0), 1)

/*******************************************************************************
 * End of 'EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_1.
 */
#define READ_EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_1r_BLKACC,2,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_1r_OFFSET,0,(r._egr_mirror_zero_payload_offset_cfg_1), 1)
#define WRITE_EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_1r_BLKACC,2,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_1r_OFFSET,0,&(r._egr_mirror_zero_payload_offset_cfg_1), 1)

/*******************************************************************************
 * End of 'EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_2.
 */
#define READ_EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_2r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_2r_BLKACC,2,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_2r_OFFSET,0,(r._egr_mirror_zero_payload_offset_cfg_2), 1)
#define WRITE_EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_2r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_2r_BLKACC,2,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_2r_OFFSET,0,&(r._egr_mirror_zero_payload_offset_cfg_2), 1)

/*******************************************************************************
 * End of 'EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_3
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_3.
 */
#define READ_EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_3r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_3r_BLKACC,2,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_3r_OFFSET,0,(r._egr_mirror_zero_payload_offset_cfg_3), 1)
#define WRITE_EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_3r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_3r_BLKACC,2,EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_3r_OFFSET,0,&(r._egr_mirror_zero_payload_offset_cfg_3), 1)

/*******************************************************************************
 * End of 'EGR_MIRROR_ZERO_PAYLOAD_OFFSET_CFG_3r'
 */




/*******************************************************************************
 * REGISTER:  EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_0.
 */
#define READ_EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_0r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_0r_BLKACC,2,EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_0r_OFFSET,0,(r._egr_mirror_zero_payload_parse_cfg_0), 1)
#define WRITE_EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_0r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_0r_BLKACC,2,EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_0r_OFFSET,0,&(r._egr_mirror_zero_payload_parse_cfg_0), 1)

/*******************************************************************************
 * End of 'EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_1.
 */
#define READ_EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_1r_BLKACC,2,EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_1r_OFFSET,0,(r._egr_mirror_zero_payload_parse_cfg_1), 1)
#define WRITE_EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_1r_BLKACC,2,EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_1r_OFFSET,0,&(r._egr_mirror_zero_payload_parse_cfg_1), 1)

/*******************************************************************************
 * End of 'EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_2.
 */
#define READ_EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_2r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_2r_BLKACC,2,EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_2r_OFFSET,0,(r._egr_mirror_zero_payload_parse_cfg_2), 1)
#define WRITE_EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_2r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_2r_BLKACC,2,EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_2r_OFFSET,0,&(r._egr_mirror_zero_payload_parse_cfg_2), 1)

/*******************************************************************************
 * End of 'EGR_MIRROR_ZERO_PAYLOAD_PARSE_CFG_2r'
 */




/*******************************************************************************
 * MEMORY:  EGR_MMU_CELL_CREDIT
 * BLOCKS:   PORT_IF
 * SIZE:     9
 */
/*
 * These macros can be used to access EGR_MMU_CELL_CREDIT.
 */
#define READ_EGR_MMU_CELL_CREDITm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MMU_CELL_CREDITm_BLKACC,89,EGR_MMU_CELL_CREDITm_OFFSET,i,(m._egr_mmu_cell_credit),1)
#define WRITE_EGR_MMU_CELL_CREDITm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MMU_CELL_CREDITm_BLKACC,89,EGR_MMU_CELL_CREDITm_OFFSET,i,&(m._egr_mmu_cell_credit),1)

/*******************************************************************************
 * End of 'EGR_MMU_CELL_CREDITm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MMU_REQUESTS
 * BLOCKS:   PORT_IF
 * SIZE:     9
 */
/*
 * These macros can be used to access EGR_MMU_REQUESTS.
 */
#define READ_EGR_MMU_REQUESTSm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MMU_REQUESTSm_BLKACC,89,EGR_MMU_REQUESTSm_OFFSET,i,(m._egr_mmu_requests),1)
#define WRITE_EGR_MMU_REQUESTSm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MMU_REQUESTSm_BLKACC,89,EGR_MMU_REQUESTSm_OFFSET,i,&(m._egr_mmu_requests),1)

/*******************************************************************************
 * End of 'EGR_MMU_REQUESTSm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MPLS_EXP_MAPPING_1
 * BLOCKS:   EPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access EGR_MPLS_EXP_MAPPING_1.
 */
#define READ_EGR_MPLS_EXP_MAPPING_1m(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MPLS_EXP_MAPPING_1m_BLKACC,2,EGR_MPLS_EXP_MAPPING_1m_OFFSET,i,(m._egr_mpls_exp_mapping_1),1)
#define WRITE_EGR_MPLS_EXP_MAPPING_1m(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MPLS_EXP_MAPPING_1m_BLKACC,2,EGR_MPLS_EXP_MAPPING_1m_OFFSET,i,&(m._egr_mpls_exp_mapping_1),1)

/*******************************************************************************
 * End of 'EGR_MPLS_EXP_MAPPING_1m'
 */




/*******************************************************************************
 * MEMORY:  EGR_MPLS_EXP_MAPPING_2
 * BLOCKS:   EPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access EGR_MPLS_EXP_MAPPING_2.
 */
#define READ_EGR_MPLS_EXP_MAPPING_2m(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MPLS_EXP_MAPPING_2m_BLKACC,2,EGR_MPLS_EXP_MAPPING_2m_OFFSET,i,(m._egr_mpls_exp_mapping_2),1)
#define WRITE_EGR_MPLS_EXP_MAPPING_2m(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MPLS_EXP_MAPPING_2m_BLKACC,2,EGR_MPLS_EXP_MAPPING_2m_OFFSET,i,&(m._egr_mpls_exp_mapping_2),1)

/*******************************************************************************
 * End of 'EGR_MPLS_EXP_MAPPING_2m'
 */




/*******************************************************************************
 * MEMORY:  EGR_MPLS_EXP_PRI_MAPPING
 * BLOCKS:   EPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access EGR_MPLS_EXP_PRI_MAPPING.
 */
#define READ_EGR_MPLS_EXP_PRI_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MPLS_EXP_PRI_MAPPINGm_BLKACC,2,EGR_MPLS_EXP_PRI_MAPPINGm_OFFSET,i,(m._egr_mpls_exp_pri_mapping),1)
#define WRITE_EGR_MPLS_EXP_PRI_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MPLS_EXP_PRI_MAPPINGm_BLKACC,2,EGR_MPLS_EXP_PRI_MAPPINGm_OFFSET,i,&(m._egr_mpls_exp_pri_mapping),1)

/*******************************************************************************
 * End of 'EGR_MPLS_EXP_PRI_MAPPINGm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MPLS_PRI_MAPPING
 * BLOCKS:   EPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access EGR_MPLS_PRI_MAPPING.
 */
#define READ_EGR_MPLS_PRI_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_MPLS_PRI_MAPPINGm_BLKACC,2,EGR_MPLS_PRI_MAPPINGm_OFFSET,i,(m._egr_mpls_pri_mapping),1)
#define WRITE_EGR_MPLS_PRI_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_MPLS_PRI_MAPPINGm_BLKACC,2,EGR_MPLS_PRI_MAPPINGm_OFFSET,i,&(m._egr_mpls_pri_mapping),1)

/*******************************************************************************
 * End of 'EGR_MPLS_PRI_MAPPINGm'
 */




/*******************************************************************************
 * REGISTER:  EGR_MTU
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MTU.
 */
#define READ_EGR_MTUr(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_MTUr_BLKACC,p,EGR_MTUr_OFFSET,0,(r._egr_mtu), 1)
#define WRITE_EGR_MTUr(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_MTUr_BLKACC,p,EGR_MTUr_OFFSET,0,&(r._egr_mtu), 1)

/*******************************************************************************
 * End of 'EGR_MTUr'
 */




/*******************************************************************************
 * REGISTER:  EGR_NHOP_FLEX_CTR_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_NHOP_FLEX_CTR_CONTROL.
 */
#define READ_EGR_NHOP_FLEX_CTR_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_NHOP_FLEX_CTR_CONTROLr_BLKACC,2,EGR_NHOP_FLEX_CTR_CONTROLr_OFFSET,0,(r._egr_nhop_flex_ctr_control), 1)
#define WRITE_EGR_NHOP_FLEX_CTR_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_NHOP_FLEX_CTR_CONTROLr_BLKACC,2,EGR_NHOP_FLEX_CTR_CONTROLr_OFFSET,0,&(r._egr_nhop_flex_ctr_control), 1)

/*******************************************************************************
 * End of 'EGR_NHOP_FLEX_CTR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_NTP_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_NTP_CONFIG.
 */
#define READ_EGR_NTP_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_NTP_CONFIGr_BLKACC,2,EGR_NTP_CONFIGr_OFFSET,0,(r._egr_ntp_config), 1)
#define WRITE_EGR_NTP_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_NTP_CONFIGr_BLKACC,2,EGR_NTP_CONFIGr_OFFSET,0,&(r._egr_ntp_config), 1)

/*******************************************************************************
 * End of 'EGR_NTP_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_OUTER_TPID
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_OUTER_TPID.
 */
#define READ_EGR_OUTER_TPIDr(u,i,r) bcmbd_cmicx_reg_block_read(u,EGR_OUTER_TPIDr_BLKACC,2,EGR_OUTER_TPIDr_OFFSET,i,(r._egr_outer_tpid), 1)
#define WRITE_EGR_OUTER_TPIDr(u,i,r) bcmbd_cmicx_reg_block_write(u,EGR_OUTER_TPIDr_BLKACC,2,EGR_OUTER_TPIDr_OFFSET,i,&(r._egr_outer_tpid), 1)

/*******************************************************************************
 * End of 'EGR_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  EGR_OUTER_TPID_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_OUTER_TPID_0.
 */
#define READ_EGR_OUTER_TPID_0r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_OUTER_TPID_0r_BLKACC,2,EGR_OUTER_TPID_0r_OFFSET,0,(r._egr_outer_tpid_0), 1)
#define WRITE_EGR_OUTER_TPID_0r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_OUTER_TPID_0r_BLKACC,2,EGR_OUTER_TPID_0r_OFFSET,0,&(r._egr_outer_tpid_0), 1)

/*******************************************************************************
 * End of 'EGR_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_OUTER_TPID_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_OUTER_TPID_1.
 */
#define READ_EGR_OUTER_TPID_1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_OUTER_TPID_1r_BLKACC,2,EGR_OUTER_TPID_1r_OFFSET,0,(r._egr_outer_tpid_1), 1)
#define WRITE_EGR_OUTER_TPID_1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_OUTER_TPID_1r_BLKACC,2,EGR_OUTER_TPID_1r_OFFSET,0,&(r._egr_outer_tpid_1), 1)

/*******************************************************************************
 * End of 'EGR_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_OUTER_TPID_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_OUTER_TPID_2.
 */
#define READ_EGR_OUTER_TPID_2r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_OUTER_TPID_2r_BLKACC,2,EGR_OUTER_TPID_2r_OFFSET,0,(r._egr_outer_tpid_2), 1)
#define WRITE_EGR_OUTER_TPID_2r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_OUTER_TPID_2r_BLKACC,2,EGR_OUTER_TPID_2r_OFFSET,0,&(r._egr_outer_tpid_2), 1)

/*******************************************************************************
 * End of 'EGR_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_OUTER_TPID_3
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_OUTER_TPID_3.
 */
#define READ_EGR_OUTER_TPID_3r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_OUTER_TPID_3r_BLKACC,2,EGR_OUTER_TPID_3r_OFFSET,0,(r._egr_outer_tpid_3), 1)
#define WRITE_EGR_OUTER_TPID_3r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_OUTER_TPID_3r_BLKACC,2,EGR_OUTER_TPID_3r_OFFSET,0,&(r._egr_outer_tpid_3), 1)

/*******************************************************************************
 * End of 'EGR_OUTER_TPID_3r'
 */




/*******************************************************************************
 * MEMORY:  EGR_PER_PORT_BUFFER_SFT_RESET
 * BLOCKS:   PORT_IF
 * SIZE:     1
 */
/*
 * These macros can be used to access EGR_PER_PORT_BUFFER_SFT_RESET.
 */
#define READ_EGR_PER_PORT_BUFFER_SFT_RESETm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_PER_PORT_BUFFER_SFT_RESETm_BLKACC,89,EGR_PER_PORT_BUFFER_SFT_RESETm_OFFSET,i,(m._egr_per_port_buffer_sft_reset),1)
#define WRITE_EGR_PER_PORT_BUFFER_SFT_RESETm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_PER_PORT_BUFFER_SFT_RESETm_BLKACC,89,EGR_PER_PORT_BUFFER_SFT_RESETm_OFFSET,i,&(m._egr_per_port_buffer_sft_reset),1)

/*******************************************************************************
 * End of 'EGR_PER_PORT_BUFFER_SFT_RESETm'
 */




/*******************************************************************************
 * REGISTER:  EGR_PKT_MODS_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_PKT_MODS_CONTROL.
 */
#define READ_EGR_PKT_MODS_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_PKT_MODS_CONTROLr_BLKACC,2,EGR_PKT_MODS_CONTROLr_OFFSET,0,(r._egr_pkt_mods_control), 1)
#define WRITE_EGR_PKT_MODS_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_PKT_MODS_CONTROLr_BLKACC,2,EGR_PKT_MODS_CONTROLr_OFFSET,0,&(r._egr_pkt_mods_control), 1)

/*******************************************************************************
 * End of 'EGR_PKT_MODS_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_PKT_MODS_CONTROL_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_PKT_MODS_CONTROL_2.
 */
#define READ_EGR_PKT_MODS_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_PKT_MODS_CONTROL_2r_BLKACC,2,EGR_PKT_MODS_CONTROL_2r_OFFSET,0,(r._egr_pkt_mods_control_2), 1)
#define WRITE_EGR_PKT_MODS_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_PKT_MODS_CONTROL_2r_BLKACC,2,EGR_PKT_MODS_CONTROL_2r_OFFSET,0,&(r._egr_pkt_mods_control_2), 1)

/*******************************************************************************
 * End of 'EGR_PKT_MODS_CONTROL_2r'
 */




/*******************************************************************************
 * MEMORY:  EGR_PORT
 * BLOCKS:   EPIPE
 * SIZE:     47
 */
/*
 * These macros can be used to access EGR_PORT.
 */
#define READ_EGR_PORTm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_PORTm_BLKACC,2,EGR_PORTm_OFFSET,i,(m._egr_port),2)
#define WRITE_EGR_PORTm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_PORTm_BLKACC,2,EGR_PORTm_OFFSET,i,&(m._egr_port),2)

/*******************************************************************************
 * End of 'EGR_PORTm'
 */




/*******************************************************************************
 * REGISTER:  EGR_PORT_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_PORT_1.
 */
#define READ_EGR_PORT_1r(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_PORT_1r_BLKACC,p,EGR_PORT_1r_OFFSET,0,(r._egr_port_1), 1)
#define WRITE_EGR_PORT_1r(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_PORT_1r_BLKACC,p,EGR_PORT_1r_OFFSET,0,&(r._egr_port_1), 1)

/*******************************************************************************
 * End of 'EGR_PORT_1r'
 */




/*******************************************************************************
 * MEMORY:  EGR_PORT_CREDIT_RESET
 * BLOCKS:   PORT_IF
 * SIZE:     1
 */
/*
 * These macros can be used to access EGR_PORT_CREDIT_RESET.
 */
#define READ_EGR_PORT_CREDIT_RESETm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_PORT_CREDIT_RESETm_BLKACC,89,EGR_PORT_CREDIT_RESETm_OFFSET,i,(m._egr_port_credit_reset),1)
#define WRITE_EGR_PORT_CREDIT_RESETm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_PORT_CREDIT_RESETm_BLKACC,89,EGR_PORT_CREDIT_RESETm_OFFSET,i,&(m._egr_port_credit_reset),1)

/*******************************************************************************
 * End of 'EGR_PORT_CREDIT_RESETm'
 */




/*******************************************************************************
 * MEMORY:  EGR_PORT_REQUESTS
 * BLOCKS:   PORT_IF
 * SIZE:     11
 */
/*
 * These macros can be used to access EGR_PORT_REQUESTS.
 */
#define READ_EGR_PORT_REQUESTSm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_PORT_REQUESTSm_BLKACC,89,EGR_PORT_REQUESTSm_OFFSET,i,(m._egr_port_requests),1)
#define WRITE_EGR_PORT_REQUESTSm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_PORT_REQUESTSm_BLKACC,89,EGR_PORT_REQUESTSm_OFFSET,i,&(m._egr_port_requests),1)

/*******************************************************************************
 * End of 'EGR_PORT_REQUESTSm'
 */




/*******************************************************************************
 * MEMORY:  EGR_PRI_CNG_MAP
 * BLOCKS:   EPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access EGR_PRI_CNG_MAP.
 */
#define READ_EGR_PRI_CNG_MAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_PRI_CNG_MAPm_BLKACC,2,EGR_PRI_CNG_MAPm_OFFSET,i,(m._egr_pri_cng_map),1)
#define WRITE_EGR_PRI_CNG_MAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_PRI_CNG_MAPm_BLKACC,2,EGR_PRI_CNG_MAPm_OFFSET,i,&(m._egr_pri_cng_map),1)

/*******************************************************************************
 * End of 'EGR_PRI_CNG_MAPm'
 */




/*******************************************************************************
 * REGISTER:  EGR_PVLAN_EPORT_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_PVLAN_EPORT_CONTROL.
 */
#define READ_EGR_PVLAN_EPORT_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_PVLAN_EPORT_CONTROLr_BLKACC,p,EGR_PVLAN_EPORT_CONTROLr_OFFSET,0,(r._egr_pvlan_eport_control), 1)
#define WRITE_EGR_PVLAN_EPORT_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_PVLAN_EPORT_CONTROLr_BLKACC,p,EGR_PVLAN_EPORT_CONTROLr_OFFSET,0,&(r._egr_pvlan_eport_control), 1)

/*******************************************************************************
 * End of 'EGR_PVLAN_EPORT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_Q_END
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_Q_END.
 */
#define READ_EGR_Q_ENDr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_Q_ENDr_BLKACC,2,n,0,EGR_Q_ENDr_OFFSET,0,(r._egr_q_end),1)
#define WRITE_EGR_Q_ENDr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_Q_ENDr_BLKACC,2,n,0,EGR_Q_ENDr_OFFSET,0,&(r._egr_q_end),1)
#define WRITE_EGR_Q_ENDr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_Q_ENDr_BLKACC,2,-1,0,EGR_Q_ENDr_OFFSET,0,&(r._egr_q_end),1)

/*******************************************************************************
 * End of 'EGR_Q_ENDr'
 */




/*******************************************************************************
 * REGISTER:  EGR_SBS_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SBS_CONTROL.
 */
#define READ_EGR_SBS_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_SBS_CONTROLr_BLKACC,2,EGR_SBS_CONTROLr_OFFSET,0,(r._egr_sbs_control), 1)
#define WRITE_EGR_SBS_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_SBS_CONTROLr_BLKACC,2,EGR_SBS_CONTROLr_OFFSET,0,&(r._egr_sbs_control), 1)

/*******************************************************************************
 * End of 'EGR_SBS_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_SER_FIFO_2
 * BLOCKS:   EPIPE
 * SIZE:     50
 */
/*
 * These macros can be used to access EGR_SER_FIFO_2.
 */
#define READ_EGR_SER_FIFO_2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EGR_SER_FIFO_2m_BLKACC,2,n,0,EGR_SER_FIFO_2m_OFFSET,i,(m._egr_ser_fifo_2),2)
#define WRITE_EGR_SER_FIFO_2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_SER_FIFO_2m_BLKACC,2,n,0,EGR_SER_FIFO_2m_OFFSET,i,&(m._egr_ser_fifo_2),2)
#define WRITE_EGR_SER_FIFO_2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EGR_SER_FIFO_2m_BLKACC,2,-1,0,EGR_SER_FIFO_2m_OFFSET,i,&(m._egr_ser_fifo_2),2)

/*******************************************************************************
 * End of 'EGR_SER_FIFO_2m'
 */




/*******************************************************************************
 * REGISTER:  EGR_SER_FIFO_CTRL_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SER_FIFO_CTRL_2.
 */
#define READ_EGR_SER_FIFO_CTRL_2r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_SER_FIFO_CTRL_2r_BLKACC,2,n,0,EGR_SER_FIFO_CTRL_2r_OFFSET,0,(r._egr_ser_fifo_ctrl_2),1)
#define WRITE_EGR_SER_FIFO_CTRL_2r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_SER_FIFO_CTRL_2r_BLKACC,2,n,0,EGR_SER_FIFO_CTRL_2r_OFFSET,0,&(r._egr_ser_fifo_ctrl_2),1)
#define WRITE_EGR_SER_FIFO_CTRL_2r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_SER_FIFO_CTRL_2r_BLKACC,2,-1,0,EGR_SER_FIFO_CTRL_2r_OFFSET,0,&(r._egr_ser_fifo_ctrl_2),1)

/*******************************************************************************
 * End of 'EGR_SER_FIFO_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_SER_FIFO_STATUS_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SER_FIFO_STATUS_2.
 */
#define READ_EGR_SER_FIFO_STATUS_2r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EGR_SER_FIFO_STATUS_2r_BLKACC,2,n,0,EGR_SER_FIFO_STATUS_2r_OFFSET,0,(r._egr_ser_fifo_status_2),1)
#define WRITE_EGR_SER_FIFO_STATUS_2r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_SER_FIFO_STATUS_2r_BLKACC,2,n,0,EGR_SER_FIFO_STATUS_2r_OFFSET,0,&(r._egr_ser_fifo_status_2),1)
#define WRITE_EGR_SER_FIFO_STATUS_2r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EGR_SER_FIFO_STATUS_2r_BLKACC,2,-1,0,EGR_SER_FIFO_STATUS_2r_OFFSET,0,&(r._egr_ser_fifo_status_2),1)

/*******************************************************************************
 * End of 'EGR_SER_FIFO_STATUS_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_SFLOW_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SFLOW_CONFIG.
 */
#define READ_EGR_SFLOW_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_SFLOW_CONFIGr_BLKACC,2,EGR_SFLOW_CONFIGr_OFFSET,0,(r._egr_sflow_config), 1)
#define WRITE_EGR_SFLOW_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_SFLOW_CONFIGr_BLKACC,2,EGR_SFLOW_CONFIGr_OFFSET,0,&(r._egr_sflow_config), 1)

/*******************************************************************************
 * End of 'EGR_SFLOW_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_SFLOW_CPU_COS_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SFLOW_CPU_COS_CONFIG.
 */
#define READ_EGR_SFLOW_CPU_COS_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_SFLOW_CPU_COS_CONFIGr_BLKACC,1,EGR_SFLOW_CPU_COS_CONFIGr_OFFSET,0,(r._egr_sflow_cpu_cos_config), 1)
#define WRITE_EGR_SFLOW_CPU_COS_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_SFLOW_CPU_COS_CONFIGr_BLKACC,1,EGR_SFLOW_CPU_COS_CONFIGr_OFFSET,0,&(r._egr_sflow_cpu_cos_config), 1)

/*******************************************************************************
 * End of 'EGR_SFLOW_CPU_COS_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_SHAPING_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SHAPING_CONTROL.
 */
#define READ_EGR_SHAPING_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_SHAPING_CONTROLr_BLKACC,p,EGR_SHAPING_CONTROLr_OFFSET,0,(r._egr_shaping_control), 1)
#define WRITE_EGR_SHAPING_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_SHAPING_CONTROLr_BLKACC,p,EGR_SHAPING_CONTROLr_OFFSET,0,&(r._egr_shaping_control), 1)

/*******************************************************************************
 * End of 'EGR_SHAPING_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_SRV6_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SRV6_CONTROL_1.
 */
#define READ_EGR_SRV6_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_SRV6_CONTROL_1r_BLKACC,2,EGR_SRV6_CONTROL_1r_OFFSET,0,(r._egr_srv6_control_1), 1)
#define WRITE_EGR_SRV6_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_SRV6_CONTROL_1r_BLKACC,2,EGR_SRV6_CONTROL_1r_OFFSET,0,&(r._egr_srv6_control_1), 1)

/*******************************************************************************
 * End of 'EGR_SRV6_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_SRV6_CONTROL_2
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_SRV6_CONTROL_2.
 */
#define READ_EGR_SRV6_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_SRV6_CONTROL_2r_BLKACC,2,EGR_SRV6_CONTROL_2r_OFFSET,0,(r._egr_srv6_control_2), 2)
#define WRITE_EGR_SRV6_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_SRV6_CONTROL_2r_BLKACC,2,EGR_SRV6_CONTROL_2r_OFFSET,0,&(r._egr_srv6_control_2), 2)

/*******************************************************************************
 * End of 'EGR_SRV6_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_TS_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_TS_CONTROL.
 */
#define READ_EGR_TS_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_TS_CONTROLr_BLKACC,p,EGR_TS_CONTROLr_OFFSET,0,(r._egr_ts_control), 1)
#define WRITE_EGR_TS_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_TS_CONTROLr_BLKACC,p,EGR_TS_CONTROLr_OFFSET,0,&(r._egr_ts_control), 1)

/*******************************************************************************
 * End of 'EGR_TS_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_TS_CONTROL_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_TS_CONTROL_2.
 */
#define READ_EGR_TS_CONTROL_2r(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_TS_CONTROL_2r_BLKACC,p,EGR_TS_CONTROL_2r_OFFSET,0,(r._egr_ts_control_2), 1)
#define WRITE_EGR_TS_CONTROL_2r(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_TS_CONTROL_2r_BLKACC,p,EGR_TS_CONTROL_2r_OFFSET,0,&(r._egr_ts_control_2), 1)

/*******************************************************************************
 * End of 'EGR_TS_CONTROL_2r'
 */




/*******************************************************************************
 * MEMORY:  EGR_TS_ING_PORT_MAP
 * BLOCKS:   EPIPE
 * SIZE:     29
 */
/*
 * These macros can be used to access EGR_TS_ING_PORT_MAP.
 */
#define READ_EGR_TS_ING_PORT_MAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_TS_ING_PORT_MAPm_BLKACC,2,EGR_TS_ING_PORT_MAPm_OFFSET,i,(m._egr_ts_ing_port_map),1)
#define WRITE_EGR_TS_ING_PORT_MAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_TS_ING_PORT_MAPm_BLKACC,2,EGR_TS_ING_PORT_MAPm_OFFSET,i,&(m._egr_ts_ing_port_map),1)

/*******************************************************************************
 * End of 'EGR_TS_ING_PORT_MAPm'
 */




/*******************************************************************************
 * MEMORY:  EGR_TS_UTC_CONVERSION
 * BLOCKS:   EPIPE
 * SIZE:     128
 */
/*
 * These macros can be used to access EGR_TS_UTC_CONVERSION.
 */
#define READ_EGR_TS_UTC_CONVERSIONm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_TS_UTC_CONVERSIONm_BLKACC,2,EGR_TS_UTC_CONVERSIONm_OFFSET,i,(m._egr_ts_utc_conversion),4)
#define WRITE_EGR_TS_UTC_CONVERSIONm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_TS_UTC_CONVERSIONm_BLKACC,2,EGR_TS_UTC_CONVERSIONm_OFFSET,i,&(m._egr_ts_utc_conversion),4)

/*******************************************************************************
 * End of 'EGR_TS_UTC_CONVERSIONm'
 */




/*******************************************************************************
 * MEMORY:  EGR_TS_UTC_CONVERSION_2
 * BLOCKS:   EPIPE
 * SIZE:     128
 */
/*
 * These macros can be used to access EGR_TS_UTC_CONVERSION_2.
 */
#define READ_EGR_TS_UTC_CONVERSION_2m(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_TS_UTC_CONVERSION_2m_BLKACC,2,EGR_TS_UTC_CONVERSION_2m_OFFSET,i,(m._egr_ts_utc_conversion_2),4)
#define WRITE_EGR_TS_UTC_CONVERSION_2m(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_TS_UTC_CONVERSION_2m_BLKACC,2,EGR_TS_UTC_CONVERSION_2m_OFFSET,i,&(m._egr_ts_utc_conversion_2),4)

/*******************************************************************************
 * End of 'EGR_TS_UTC_CONVERSION_2m'
 */




/*******************************************************************************
 * MEMORY:  EGR_TUNNEL_ECN_ENCAP
 * BLOCKS:   EPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access EGR_TUNNEL_ECN_ENCAP.
 */
#define READ_EGR_TUNNEL_ECN_ENCAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_TUNNEL_ECN_ENCAPm_BLKACC,2,EGR_TUNNEL_ECN_ENCAPm_OFFSET,i,(m._egr_tunnel_ecn_encap),1)
#define WRITE_EGR_TUNNEL_ECN_ENCAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_TUNNEL_ECN_ENCAPm_BLKACC,2,EGR_TUNNEL_ECN_ENCAPm_OFFSET,i,&(m._egr_tunnel_ecn_encap),1)

/*******************************************************************************
 * End of 'EGR_TUNNEL_ECN_ENCAPm'
 */




/*******************************************************************************
 * MEMORY:  EGR_TUNNEL_ECN_ENCAP_2
 * BLOCKS:   EPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access EGR_TUNNEL_ECN_ENCAP_2.
 */
#define READ_EGR_TUNNEL_ECN_ENCAP_2m(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_TUNNEL_ECN_ENCAP_2m_BLKACC,2,EGR_TUNNEL_ECN_ENCAP_2m_OFFSET,i,(m._egr_tunnel_ecn_encap_2),1)
#define WRITE_EGR_TUNNEL_ECN_ENCAP_2m(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_TUNNEL_ECN_ENCAP_2m_BLKACC,2,EGR_TUNNEL_ECN_ENCAP_2m_OFFSET,i,&(m._egr_tunnel_ecn_encap_2),1)

/*******************************************************************************
 * End of 'EGR_TUNNEL_ECN_ENCAP_2m'
 */




/*******************************************************************************
 * REGISTER:  EGR_TUNNEL_ID_MASK
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_TUNNEL_ID_MASK.
 */
#define READ_EGR_TUNNEL_ID_MASKr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_TUNNEL_ID_MASKr_BLKACC,2,EGR_TUNNEL_ID_MASKr_OFFSET,0,(r._egr_tunnel_id_mask), 1)
#define WRITE_EGR_TUNNEL_ID_MASKr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_TUNNEL_ID_MASKr_BLKACC,2,EGR_TUNNEL_ID_MASKr_OFFSET,0,&(r._egr_tunnel_id_mask), 1)

/*******************************************************************************
 * End of 'EGR_TUNNEL_ID_MASKr'
 */




/*******************************************************************************
 * REGISTER:  EGR_TUNNEL_PIMDR1_CFG0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_TUNNEL_PIMDR1_CFG0.
 */
#define READ_EGR_TUNNEL_PIMDR1_CFG0r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_TUNNEL_PIMDR1_CFG0r_BLKACC,2,EGR_TUNNEL_PIMDR1_CFG0r_OFFSET,0,(r._egr_tunnel_pimdr1_cfg0), 1)
#define WRITE_EGR_TUNNEL_PIMDR1_CFG0r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_TUNNEL_PIMDR1_CFG0r_BLKACC,2,EGR_TUNNEL_PIMDR1_CFG0r_OFFSET,0,&(r._egr_tunnel_pimdr1_cfg0), 1)

/*******************************************************************************
 * End of 'EGR_TUNNEL_PIMDR1_CFG0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_TUNNEL_PIMDR1_CFG1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_TUNNEL_PIMDR1_CFG1.
 */
#define READ_EGR_TUNNEL_PIMDR1_CFG1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_TUNNEL_PIMDR1_CFG1r_BLKACC,2,EGR_TUNNEL_PIMDR1_CFG1r_OFFSET,0,(r._egr_tunnel_pimdr1_cfg1), 1)
#define WRITE_EGR_TUNNEL_PIMDR1_CFG1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_TUNNEL_PIMDR1_CFG1r_BLKACC,2,EGR_TUNNEL_PIMDR1_CFG1r_OFFSET,0,&(r._egr_tunnel_pimdr1_cfg1), 1)

/*******************************************************************************
 * End of 'EGR_TUNNEL_PIMDR1_CFG1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_TUNNEL_PIMDR2_CFG0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_TUNNEL_PIMDR2_CFG0.
 */
#define READ_EGR_TUNNEL_PIMDR2_CFG0r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_TUNNEL_PIMDR2_CFG0r_BLKACC,2,EGR_TUNNEL_PIMDR2_CFG0r_OFFSET,0,(r._egr_tunnel_pimdr2_cfg0), 1)
#define WRITE_EGR_TUNNEL_PIMDR2_CFG0r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_TUNNEL_PIMDR2_CFG0r_BLKACC,2,EGR_TUNNEL_PIMDR2_CFG0r_OFFSET,0,&(r._egr_tunnel_pimdr2_cfg0), 1)

/*******************************************************************************
 * End of 'EGR_TUNNEL_PIMDR2_CFG0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_TUNNEL_PIMDR2_CFG1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_TUNNEL_PIMDR2_CFG1.
 */
#define READ_EGR_TUNNEL_PIMDR2_CFG1r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_TUNNEL_PIMDR2_CFG1r_BLKACC,2,EGR_TUNNEL_PIMDR2_CFG1r_OFFSET,0,(r._egr_tunnel_pimdr2_cfg1), 1)
#define WRITE_EGR_TUNNEL_PIMDR2_CFG1r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_TUNNEL_PIMDR2_CFG1r_BLKACC,2,EGR_TUNNEL_PIMDR2_CFG1r_OFFSET,0,&(r._egr_tunnel_pimdr2_cfg1), 1)

/*******************************************************************************
 * End of 'EGR_TUNNEL_PIMDR2_CFG1r'
 */




/*******************************************************************************
 * MEMORY:  EGR_VLAN
 * BLOCKS:   EPIPE
 * SIZE:     367
 */
/*
 * These macros can be used to access EGR_VLAN.
 */
#define READ_EGR_VLANm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_VLANm_BLKACC,2,EGR_VLANm_OFFSET,i,(m._egr_vlan),12)
#define WRITE_EGR_VLANm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_VLANm_BLKACC,2,EGR_VLANm_OFFSET,i,&(m._egr_vlan),12)

/*******************************************************************************
 * End of 'EGR_VLANm'
 */




/*******************************************************************************
 * MEMORY:  EGR_VLAN_2
 * BLOCKS:   EPIPE
 * SIZE:     328
 */
/*
 * These macros can be used to access EGR_VLAN_2.
 */
#define READ_EGR_VLAN_2m(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_VLAN_2m_BLKACC,2,EGR_VLAN_2m_OFFSET,i,(m._egr_vlan_2),11)
#define WRITE_EGR_VLAN_2m(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_VLAN_2m_BLKACC,2,EGR_VLAN_2m_OFFSET,i,&(m._egr_vlan_2),11)

/*******************************************************************************
 * End of 'EGR_VLAN_2m'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VLAN_CONTROL_1.
 */
#define READ_EGR_VLAN_CONTROL_1r(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_VLAN_CONTROL_1r_BLKACC,p,EGR_VLAN_CONTROL_1r_OFFSET,0,(r._egr_vlan_control_1), 1)
#define WRITE_EGR_VLAN_CONTROL_1r(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_VLAN_CONTROL_1r_BLKACC,p,EGR_VLAN_CONTROL_1r_OFFSET,0,&(r._egr_vlan_control_1), 1)

/*******************************************************************************
 * End of 'EGR_VLAN_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_CONTROL_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VLAN_CONTROL_2.
 */
#define READ_EGR_VLAN_CONTROL_2r(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_VLAN_CONTROL_2r_BLKACC,p,EGR_VLAN_CONTROL_2r_OFFSET,0,(r._egr_vlan_control_2), 1)
#define WRITE_EGR_VLAN_CONTROL_2r(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_VLAN_CONTROL_2r_BLKACC,p,EGR_VLAN_CONTROL_2r_OFFSET,0,&(r._egr_vlan_control_2), 1)

/*******************************************************************************
 * End of 'EGR_VLAN_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_CONTROL_3
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VLAN_CONTROL_3.
 */
#define READ_EGR_VLAN_CONTROL_3r(u,p,r) bcmbd_cmicx_reg_port_read(u,EGR_VLAN_CONTROL_3r_BLKACC,p,EGR_VLAN_CONTROL_3r_OFFSET,0,(r._egr_vlan_control_3), 1)
#define WRITE_EGR_VLAN_CONTROL_3r(u,p,r) bcmbd_cmicx_reg_port_write(u,EGR_VLAN_CONTROL_3r_BLKACC,p,EGR_VLAN_CONTROL_3r_OFFSET,0,&(r._egr_vlan_control_3), 1)

/*******************************************************************************
 * End of 'EGR_VLAN_CONTROL_3r'
 */




/*******************************************************************************
 * MEMORY:  EGR_VLAN_STG_A
 * BLOCKS:   EPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access EGR_VLAN_STG_A.
 */
#define READ_EGR_VLAN_STG_Am(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_VLAN_STG_Am_BLKACC,2,EGR_VLAN_STG_Am_OFFSET,i,(m._egr_vlan_stg_a),9)
#define WRITE_EGR_VLAN_STG_Am(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_VLAN_STG_Am_BLKACC,2,EGR_VLAN_STG_Am_OFFSET,i,&(m._egr_vlan_stg_a),9)

/*******************************************************************************
 * End of 'EGR_VLAN_STG_Am'
 */




/*******************************************************************************
 * MEMORY:  EGR_VLAN_STG_B
 * BLOCKS:   EPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access EGR_VLAN_STG_B.
 */
#define READ_EGR_VLAN_STG_Bm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_VLAN_STG_Bm_BLKACC,2,EGR_VLAN_STG_Bm_OFFSET,i,(m._egr_vlan_stg_b),9)
#define WRITE_EGR_VLAN_STG_Bm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_VLAN_STG_Bm_BLKACC,2,EGR_VLAN_STG_Bm_OFFSET,i,&(m._egr_vlan_stg_b),9)

/*******************************************************************************
 * End of 'EGR_VLAN_STG_Bm'
 */




/*******************************************************************************
 * MEMORY:  EGR_VLAN_TAG_ACTION_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     25
 */
/*
 * These macros can be used to access EGR_VLAN_TAG_ACTION_PROFILE.
 */
#define READ_EGR_VLAN_TAG_ACTION_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,EGR_VLAN_TAG_ACTION_PROFILEm_BLKACC,2,EGR_VLAN_TAG_ACTION_PROFILEm_OFFSET,i,(m._egr_vlan_tag_action_profile),1)
#define WRITE_EGR_VLAN_TAG_ACTION_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,EGR_VLAN_TAG_ACTION_PROFILEm_BLKACC,2,EGR_VLAN_TAG_ACTION_PROFILEm_OFFSET,i,&(m._egr_vlan_tag_action_profile),1)

/*******************************************************************************
 * End of 'EGR_VLAN_TAG_ACTION_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  EGR_VXLAN_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_VXLAN_CONTROL.
 */
#define READ_EGR_VXLAN_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_VXLAN_CONTROLr_BLKACC,2,EGR_VXLAN_CONTROLr_OFFSET,0,(r._egr_vxlan_control), 2)
#define WRITE_EGR_VXLAN_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_VXLAN_CONTROLr_BLKACC,2,EGR_VXLAN_CONTROLr_OFFSET,0,&(r._egr_vxlan_control), 2)

/*******************************************************************************
 * End of 'EGR_VXLAN_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_VXLAN_CONTROL_2
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_VXLAN_CONTROL_2.
 */
#define READ_EGR_VXLAN_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_VXLAN_CONTROL_2r_BLKACC,2,EGR_VXLAN_CONTROL_2r_OFFSET,0,(r._egr_vxlan_control_2), 2)
#define WRITE_EGR_VXLAN_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_VXLAN_CONTROL_2r_BLKACC,2,EGR_VXLAN_CONTROL_2r_OFFSET,0,&(r._egr_vxlan_control_2), 2)

/*******************************************************************************
 * End of 'EGR_VXLAN_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_VXLAN_CONTROL_3
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_VXLAN_CONTROL_3.
 */
#define READ_EGR_VXLAN_CONTROL_3r(u,r) bcmbd_cmicx_reg_block_read(u,EGR_VXLAN_CONTROL_3r_BLKACC,2,EGR_VXLAN_CONTROL_3r_OFFSET,0,(r._egr_vxlan_control_3), 2)
#define WRITE_EGR_VXLAN_CONTROL_3r(u,r) bcmbd_cmicx_reg_block_write(u,EGR_VXLAN_CONTROL_3r_BLKACC,2,EGR_VXLAN_CONTROL_3r_OFFSET,0,&(r._egr_vxlan_control_3), 2)

/*******************************************************************************
 * End of 'EGR_VXLAN_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  EGR_WESP_PROTO_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_WESP_PROTO_CONTROL.
 */
#define READ_EGR_WESP_PROTO_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,EGR_WESP_PROTO_CONTROLr_BLKACC,2,EGR_WESP_PROTO_CONTROLr_OFFSET,0,(r._egr_wesp_proto_control), 1)
#define WRITE_EGR_WESP_PROTO_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,EGR_WESP_PROTO_CONTROLr_BLKACC,2,EGR_WESP_PROTO_CONTROLr_OFFSET,0,&(r._egr_wesp_proto_control), 1)

/*******************************************************************************
 * End of 'EGR_WESP_PROTO_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EMIRROR_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access EMIRROR_CONTROL_0.
 */
#define READ_EMIRROR_CONTROL_0m(u,i,m) bcmbd_cmicx_mem_block_read(u,EMIRROR_CONTROL_0m_BLKACC,1,EMIRROR_CONTROL_0m_OFFSET,i,(m._emirror_control_0),9)
#define WRITE_EMIRROR_CONTROL_0m(u,i,m) bcmbd_cmicx_mem_block_write(u,EMIRROR_CONTROL_0m_BLKACC,1,EMIRROR_CONTROL_0m_OFFSET,i,&(m._emirror_control_0),9)

/*******************************************************************************
 * End of 'EMIRROR_CONTROL_0m'
 */




/*******************************************************************************
 * MEMORY:  EMIRROR_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access EMIRROR_CONTROL_1.
 */
#define READ_EMIRROR_CONTROL_1m(u,i,m) bcmbd_cmicx_mem_block_read(u,EMIRROR_CONTROL_1m_BLKACC,1,EMIRROR_CONTROL_1m_OFFSET,i,(m._emirror_control_1),9)
#define WRITE_EMIRROR_CONTROL_1m(u,i,m) bcmbd_cmicx_mem_block_write(u,EMIRROR_CONTROL_1m_BLKACC,1,EMIRROR_CONTROL_1m_OFFSET,i,&(m._emirror_control_1),9)

/*******************************************************************************
 * End of 'EMIRROR_CONTROL_1m'
 */




/*******************************************************************************
 * MEMORY:  EMIRROR_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access EMIRROR_CONTROL_2.
 */
#define READ_EMIRROR_CONTROL_2m(u,i,m) bcmbd_cmicx_mem_block_read(u,EMIRROR_CONTROL_2m_BLKACC,1,EMIRROR_CONTROL_2m_OFFSET,i,(m._emirror_control_2),9)
#define WRITE_EMIRROR_CONTROL_2m(u,i,m) bcmbd_cmicx_mem_block_write(u,EMIRROR_CONTROL_2m_BLKACC,1,EMIRROR_CONTROL_2m_OFFSET,i,&(m._emirror_control_2),9)

/*******************************************************************************
 * End of 'EMIRROR_CONTROL_2m'
 */




/*******************************************************************************
 * MEMORY:  EMIRROR_CONTROL_3
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access EMIRROR_CONTROL_3.
 */
#define READ_EMIRROR_CONTROL_3m(u,i,m) bcmbd_cmicx_mem_block_read(u,EMIRROR_CONTROL_3m_BLKACC,1,EMIRROR_CONTROL_3m_OFFSET,i,(m._emirror_control_3),9)
#define WRITE_EMIRROR_CONTROL_3m(u,i,m) bcmbd_cmicx_mem_block_write(u,EMIRROR_CONTROL_3m_BLKACC,1,EMIRROR_CONTROL_3m_OFFSET,i,&(m._emirror_control_3),9)

/*******************************************************************************
 * End of 'EMIRROR_CONTROL_3m'
 */




/*******************************************************************************
 * MEMORY:  EPC_LINK_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access EPC_LINK_BMAP.
 */
#define READ_EPC_LINK_BMAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,EPC_LINK_BMAPm_BLKACC,1,EPC_LINK_BMAPm_OFFSET,i,(m._epc_link_bmap),9)
#define WRITE_EPC_LINK_BMAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,EPC_LINK_BMAPm_BLKACC,1,EPC_LINK_BMAPm_OFFSET,i,&(m._epc_link_bmap),9)

/*******************************************************************************
 * End of 'EPC_LINK_BMAPm'
 */




/*******************************************************************************
 * REGISTER:  EP_DPR_LATENCY_CONFIG
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access EP_DPR_LATENCY_CONFIG.
 */
#define READ_EP_DPR_LATENCY_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,EP_DPR_LATENCY_CONFIGr_BLKACC,8,EP_DPR_LATENCY_CONFIGr_OFFSET,0,(r._ep_dpr_latency_config), 1)
#define WRITE_EP_DPR_LATENCY_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,EP_DPR_LATENCY_CONFIGr_BLKACC,8,EP_DPR_LATENCY_CONFIGr_OFFSET,0,&(r._ep_dpr_latency_config), 1)

/*******************************************************************************
 * End of 'EP_DPR_LATENCY_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EP_DPR_LATENCY_CONFIG_WR_EN
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access EP_DPR_LATENCY_CONFIG_WR_EN.
 */
#define READ_EP_DPR_LATENCY_CONFIG_WR_ENr(u,r) bcmbd_cmicx_reg_block_read(u,EP_DPR_LATENCY_CONFIG_WR_ENr_BLKACC,8,EP_DPR_LATENCY_CONFIG_WR_ENr_OFFSET,0,(r._ep_dpr_latency_config_wr_en), 1)
#define WRITE_EP_DPR_LATENCY_CONFIG_WR_ENr(u,r) bcmbd_cmicx_reg_block_write(u,EP_DPR_LATENCY_CONFIG_WR_ENr_BLKACC,8,EP_DPR_LATENCY_CONFIG_WR_ENr_OFFSET,0,&(r._ep_dpr_latency_config_wr_en), 1)

/*******************************************************************************
 * End of 'EP_DPR_LATENCY_CONFIG_WR_ENr'
 */




/*******************************************************************************
 * REGISTER:  EP_TO_CMIC_INTR_ENABLE
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EP_TO_CMIC_INTR_ENABLE.
 */
#define READ_EP_TO_CMIC_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,EP_TO_CMIC_INTR_ENABLEr_BLKACC,2,EP_TO_CMIC_INTR_ENABLEr_OFFSET,0,(r._ep_to_cmic_intr_enable), 1)
#define WRITE_EP_TO_CMIC_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,EP_TO_CMIC_INTR_ENABLEr_BLKACC,2,EP_TO_CMIC_INTR_ENABLEr_OFFSET,0,&(r._ep_to_cmic_intr_enable), 1)

/*******************************************************************************
 * End of 'EP_TO_CMIC_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  EP_TO_CMIC_INTR_STATUS
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EP_TO_CMIC_INTR_STATUS.
 */
#define READ_EP_TO_CMIC_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EP_TO_CMIC_INTR_STATUSr_BLKACC,2,n,0,EP_TO_CMIC_INTR_STATUSr_OFFSET,0,(r._ep_to_cmic_intr_status),1)
#define WRITE_EP_TO_CMIC_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EP_TO_CMIC_INTR_STATUSr_BLKACC,2,n,0,EP_TO_CMIC_INTR_STATUSr_OFFSET,0,&(r._ep_to_cmic_intr_status),1)
#define WRITE_EP_TO_CMIC_INTR_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EP_TO_CMIC_INTR_STATUSr_BLKACC,2,-1,0,EP_TO_CMIC_INTR_STATUSr_OFFSET,0,&(r._ep_to_cmic_intr_status),1)

/*******************************************************************************
 * End of 'EP_TO_CMIC_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  ETHERTYPE_MAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETHERTYPE_MAP.
 */
#define READ_ETHERTYPE_MAPr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,ETHERTYPE_MAPr_BLKACC,1,n,0,ETHERTYPE_MAPr_OFFSET,i,(r._ethertype_map),1)
#define WRITE_ETHERTYPE_MAPr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,ETHERTYPE_MAPr_BLKACC,1,n,0,ETHERTYPE_MAPr_OFFSET,i,&(r._ethertype_map),1)
#define WRITE_ETHERTYPE_MAPr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,ETHERTYPE_MAPr_BLKACC&(~(0x1f<<18))|(17<<18),1,-1,0,ETHERTYPE_MAPr_OFFSET,i,&(r._ethertype_map),1)

/*******************************************************************************
 * End of 'ETHERTYPE_MAPr'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_COLOR_EN_EGR_PORT_BMP
 * BLOCKS:   IPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access ETRAP_COLOR_EN_EGR_PORT_BMP.
 */
#define READ_ETRAP_COLOR_EN_EGR_PORT_BMPm(u,i,m) bcmbd_cmicx_mem_block_read(u,ETRAP_COLOR_EN_EGR_PORT_BMPm_BLKACC,1,ETRAP_COLOR_EN_EGR_PORT_BMPm_OFFSET,i,(m._etrap_color_en_egr_port_bmp),9)
#define WRITE_ETRAP_COLOR_EN_EGR_PORT_BMPm(u,i,m) bcmbd_cmicx_mem_block_write(u,ETRAP_COLOR_EN_EGR_PORT_BMPm_BLKACC,1,ETRAP_COLOR_EN_EGR_PORT_BMPm_OFFSET,i,&(m._etrap_color_en_egr_port_bmp),9)

/*******************************************************************************
 * End of 'ETRAP_COLOR_EN_EGR_PORT_BMPm'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_COLOR_EN_INT_PRI
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_COLOR_EN_INT_PRI.
 */
#define READ_ETRAP_COLOR_EN_INT_PRIr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_COLOR_EN_INT_PRIr_BLKACC,1,ETRAP_COLOR_EN_INT_PRIr_OFFSET,0,(r._etrap_color_en_int_pri), 1)
#define WRITE_ETRAP_COLOR_EN_INT_PRIr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_COLOR_EN_INT_PRIr_BLKACC,1,ETRAP_COLOR_EN_INT_PRIr_OFFSET,0,&(r._etrap_color_en_int_pri), 1)

/*******************************************************************************
 * End of 'ETRAP_COLOR_EN_INT_PRIr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_COLOR_EN_PKT_TYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_COLOR_EN_PKT_TYPE.
 */
#define READ_ETRAP_COLOR_EN_PKT_TYPEr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_COLOR_EN_PKT_TYPEr_BLKACC,1,ETRAP_COLOR_EN_PKT_TYPEr_OFFSET,0,(r._etrap_color_en_pkt_type), 1)
#define WRITE_ETRAP_COLOR_EN_PKT_TYPEr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_COLOR_EN_PKT_TYPEr_BLKACC,1,ETRAP_COLOR_EN_PKT_TYPEr_OFFSET,0,&(r._etrap_color_en_pkt_type), 1)

/*******************************************************************************
 * End of 'ETRAP_COLOR_EN_PKT_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_DEBUG_CTRL_INST0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_DEBUG_CTRL_INST0.
 */
#define READ_ETRAP_DEBUG_CTRL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_DEBUG_CTRL_INST0r_BLKACC,1,n,0,ETRAP_DEBUG_CTRL_INST0r_OFFSET,0,(r._etrap_debug_ctrl_inst0),1)
#define WRITE_ETRAP_DEBUG_CTRL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_DEBUG_CTRL_INST0r_BLKACC,1,n,0,ETRAP_DEBUG_CTRL_INST0r_OFFSET,0,&(r._etrap_debug_ctrl_inst0),1)
#define WRITE_ETRAP_DEBUG_CTRL_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_DEBUG_CTRL_INST0r_BLKACC,1,-1,0,ETRAP_DEBUG_CTRL_INST0r_OFFSET,0,&(r._etrap_debug_ctrl_inst0),1)

/*******************************************************************************
 * End of 'ETRAP_DEBUG_CTRL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_DEBUG_CTRL_INST1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_DEBUG_CTRL_INST1.
 */
#define READ_ETRAP_DEBUG_CTRL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_DEBUG_CTRL_INST1r_BLKACC,1,n,0,ETRAP_DEBUG_CTRL_INST1r_OFFSET,0,(r._etrap_debug_ctrl_inst1),1)
#define WRITE_ETRAP_DEBUG_CTRL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_DEBUG_CTRL_INST1r_BLKACC,1,n,0,ETRAP_DEBUG_CTRL_INST1r_OFFSET,0,&(r._etrap_debug_ctrl_inst1),1)
#define WRITE_ETRAP_DEBUG_CTRL_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_DEBUG_CTRL_INST1r_BLKACC,1,-1,0,ETRAP_DEBUG_CTRL_INST1r_OFFSET,0,&(r._etrap_debug_ctrl_inst1),1)

/*******************************************************************************
 * End of 'ETRAP_DEBUG_CTRL_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_EN_COR_ERR_RPT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_EN_COR_ERR_RPT.
 */
#define READ_ETRAP_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_EN_COR_ERR_RPTr_BLKACC,1,ETRAP_EN_COR_ERR_RPTr_OFFSET,0,(r._etrap_en_cor_err_rpt), 1)
#define WRITE_ETRAP_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_EN_COR_ERR_RPTr_BLKACC,1,ETRAP_EN_COR_ERR_RPTr_OFFSET,0,&(r._etrap_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'ETRAP_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_EVENT_FIFO_CTRL_INST0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_EVENT_FIFO_CTRL_INST0.
 */
#define READ_ETRAP_EVENT_FIFO_CTRL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_EVENT_FIFO_CTRL_INST0r_BLKACC,1,n,0,ETRAP_EVENT_FIFO_CTRL_INST0r_OFFSET,0,(r._etrap_event_fifo_ctrl_inst0),1)
#define WRITE_ETRAP_EVENT_FIFO_CTRL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_EVENT_FIFO_CTRL_INST0r_BLKACC,1,n,0,ETRAP_EVENT_FIFO_CTRL_INST0r_OFFSET,0,&(r._etrap_event_fifo_ctrl_inst0),1)
#define WRITE_ETRAP_EVENT_FIFO_CTRL_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_EVENT_FIFO_CTRL_INST0r_BLKACC,1,-1,0,ETRAP_EVENT_FIFO_CTRL_INST0r_OFFSET,0,&(r._etrap_event_fifo_ctrl_inst0),1)

/*******************************************************************************
 * End of 'ETRAP_EVENT_FIFO_CTRL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_EVENT_FIFO_CTRL_INST1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_EVENT_FIFO_CTRL_INST1.
 */
#define READ_ETRAP_EVENT_FIFO_CTRL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_EVENT_FIFO_CTRL_INST1r_BLKACC,1,n,0,ETRAP_EVENT_FIFO_CTRL_INST1r_OFFSET,0,(r._etrap_event_fifo_ctrl_inst1),1)
#define WRITE_ETRAP_EVENT_FIFO_CTRL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_EVENT_FIFO_CTRL_INST1r_BLKACC,1,n,0,ETRAP_EVENT_FIFO_CTRL_INST1r_OFFSET,0,&(r._etrap_event_fifo_ctrl_inst1),1)
#define WRITE_ETRAP_EVENT_FIFO_CTRL_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_EVENT_FIFO_CTRL_INST1r_BLKACC,1,-1,0,ETRAP_EVENT_FIFO_CTRL_INST1r_OFFSET,0,&(r._etrap_event_fifo_ctrl_inst1),1)

/*******************************************************************************
 * End of 'ETRAP_EVENT_FIFO_CTRL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_EVENT_FIFO_INST0
 * BLOCKS:   IPIPE
 * SIZE:     339
 */
/*
 * These macros can be used to access ETRAP_EVENT_FIFO_INST0.
 */
#define READ_ETRAP_EVENT_FIFO_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_EVENT_FIFO_INST0m_BLKACC,1,n,0,ETRAP_EVENT_FIFO_INST0m_OFFSET,i,(m._etrap_event_fifo_inst0),11)
#define WRITE_ETRAP_EVENT_FIFO_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_EVENT_FIFO_INST0m_BLKACC,1,n,0,ETRAP_EVENT_FIFO_INST0m_OFFSET,i,&(m._etrap_event_fifo_inst0),11)
#define WRITE_ETRAP_EVENT_FIFO_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_EVENT_FIFO_INST0m_BLKACC,1,-1,0,ETRAP_EVENT_FIFO_INST0m_OFFSET,i,&(m._etrap_event_fifo_inst0),11)

/*******************************************************************************
 * End of 'ETRAP_EVENT_FIFO_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_EVENT_FIFO_INST1
 * BLOCKS:   IPIPE
 * SIZE:     339
 */
/*
 * These macros can be used to access ETRAP_EVENT_FIFO_INST1.
 */
#define READ_ETRAP_EVENT_FIFO_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_EVENT_FIFO_INST1m_BLKACC,1,n,0,ETRAP_EVENT_FIFO_INST1m_OFFSET,i,(m._etrap_event_fifo_inst1),11)
#define WRITE_ETRAP_EVENT_FIFO_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_EVENT_FIFO_INST1m_BLKACC,1,n,0,ETRAP_EVENT_FIFO_INST1m_OFFSET,i,&(m._etrap_event_fifo_inst1),11)
#define WRITE_ETRAP_EVENT_FIFO_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_EVENT_FIFO_INST1m_BLKACC,1,-1,0,ETRAP_EVENT_FIFO_INST1m_OFFSET,i,&(m._etrap_event_fifo_inst1),11)

/*******************************************************************************
 * End of 'ETRAP_EVENT_FIFO_INST1m'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_EVENT_FIFO_STATUS_INST0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_EVENT_FIFO_STATUS_INST0.
 */
#define READ_ETRAP_EVENT_FIFO_STATUS_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_EVENT_FIFO_STATUS_INST0r_BLKACC,1,n,0,ETRAP_EVENT_FIFO_STATUS_INST0r_OFFSET,0,(r._etrap_event_fifo_status_inst0),1)
#define WRITE_ETRAP_EVENT_FIFO_STATUS_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_EVENT_FIFO_STATUS_INST0r_BLKACC,1,n,0,ETRAP_EVENT_FIFO_STATUS_INST0r_OFFSET,0,&(r._etrap_event_fifo_status_inst0),1)
#define WRITE_ETRAP_EVENT_FIFO_STATUS_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_EVENT_FIFO_STATUS_INST0r_BLKACC,1,-1,0,ETRAP_EVENT_FIFO_STATUS_INST0r_OFFSET,0,&(r._etrap_event_fifo_status_inst0),1)

/*******************************************************************************
 * End of 'ETRAP_EVENT_FIFO_STATUS_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_EVENT_FIFO_STATUS_INST1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_EVENT_FIFO_STATUS_INST1.
 */
#define READ_ETRAP_EVENT_FIFO_STATUS_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_EVENT_FIFO_STATUS_INST1r_BLKACC,1,n,0,ETRAP_EVENT_FIFO_STATUS_INST1r_OFFSET,0,(r._etrap_event_fifo_status_inst1),1)
#define WRITE_ETRAP_EVENT_FIFO_STATUS_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_EVENT_FIFO_STATUS_INST1r_BLKACC,1,n,0,ETRAP_EVENT_FIFO_STATUS_INST1r_OFFSET,0,&(r._etrap_event_fifo_status_inst1),1)
#define WRITE_ETRAP_EVENT_FIFO_STATUS_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_EVENT_FIFO_STATUS_INST1r_BLKACC,1,-1,0,ETRAP_EVENT_FIFO_STATUS_INST1r_OFFSET,0,&(r._etrap_event_fifo_status_inst1),1)

/*******************************************************************************
 * End of 'ETRAP_EVENT_FIFO_STATUS_INST1r'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FILTER_0_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_FILTER_0_TABLE_INST0.
 */
#define READ_ETRAP_FILTER_0_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FILTER_0_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FILTER_0_TABLE_INST0m_OFFSET,i,(m._etrap_filter_0_table_inst0),2)
#define WRITE_ETRAP_FILTER_0_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_0_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FILTER_0_TABLE_INST0m_OFFSET,i,&(m._etrap_filter_0_table_inst0),2)
#define WRITE_ETRAP_FILTER_0_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_0_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FILTER_0_TABLE_INST0m_OFFSET,i,&(m._etrap_filter_0_table_inst0),2)

/*******************************************************************************
 * End of 'ETRAP_FILTER_0_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FILTER_0_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_FILTER_0_TABLE_INST1.
 */
#define READ_ETRAP_FILTER_0_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FILTER_0_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FILTER_0_TABLE_INST1m_OFFSET,i,(m._etrap_filter_0_table_inst1),2)
#define WRITE_ETRAP_FILTER_0_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_0_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FILTER_0_TABLE_INST1m_OFFSET,i,&(m._etrap_filter_0_table_inst1),2)
#define WRITE_ETRAP_FILTER_0_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_0_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FILTER_0_TABLE_INST1m_OFFSET,i,&(m._etrap_filter_0_table_inst1),2)

/*******************************************************************************
 * End of 'ETRAP_FILTER_0_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FILTER_1_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_FILTER_1_TABLE_INST0.
 */
#define READ_ETRAP_FILTER_1_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FILTER_1_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FILTER_1_TABLE_INST0m_OFFSET,i,(m._etrap_filter_1_table_inst0),2)
#define WRITE_ETRAP_FILTER_1_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_1_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FILTER_1_TABLE_INST0m_OFFSET,i,&(m._etrap_filter_1_table_inst0),2)
#define WRITE_ETRAP_FILTER_1_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_1_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FILTER_1_TABLE_INST0m_OFFSET,i,&(m._etrap_filter_1_table_inst0),2)

/*******************************************************************************
 * End of 'ETRAP_FILTER_1_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FILTER_1_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_FILTER_1_TABLE_INST1.
 */
#define READ_ETRAP_FILTER_1_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FILTER_1_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FILTER_1_TABLE_INST1m_OFFSET,i,(m._etrap_filter_1_table_inst1),2)
#define WRITE_ETRAP_FILTER_1_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_1_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FILTER_1_TABLE_INST1m_OFFSET,i,&(m._etrap_filter_1_table_inst1),2)
#define WRITE_ETRAP_FILTER_1_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_1_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FILTER_1_TABLE_INST1m_OFFSET,i,&(m._etrap_filter_1_table_inst1),2)

/*******************************************************************************
 * End of 'ETRAP_FILTER_1_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FILTER_2_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_FILTER_2_TABLE_INST0.
 */
#define READ_ETRAP_FILTER_2_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FILTER_2_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FILTER_2_TABLE_INST0m_OFFSET,i,(m._etrap_filter_2_table_inst0),2)
#define WRITE_ETRAP_FILTER_2_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_2_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FILTER_2_TABLE_INST0m_OFFSET,i,&(m._etrap_filter_2_table_inst0),2)
#define WRITE_ETRAP_FILTER_2_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_2_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FILTER_2_TABLE_INST0m_OFFSET,i,&(m._etrap_filter_2_table_inst0),2)

/*******************************************************************************
 * End of 'ETRAP_FILTER_2_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FILTER_2_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_FILTER_2_TABLE_INST1.
 */
#define READ_ETRAP_FILTER_2_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FILTER_2_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FILTER_2_TABLE_INST1m_OFFSET,i,(m._etrap_filter_2_table_inst1),2)
#define WRITE_ETRAP_FILTER_2_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_2_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FILTER_2_TABLE_INST1m_OFFSET,i,&(m._etrap_filter_2_table_inst1),2)
#define WRITE_ETRAP_FILTER_2_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_2_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FILTER_2_TABLE_INST1m_OFFSET,i,&(m._etrap_filter_2_table_inst1),2)

/*******************************************************************************
 * End of 'ETRAP_FILTER_2_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FILTER_3_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_FILTER_3_TABLE_INST0.
 */
#define READ_ETRAP_FILTER_3_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FILTER_3_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FILTER_3_TABLE_INST0m_OFFSET,i,(m._etrap_filter_3_table_inst0),2)
#define WRITE_ETRAP_FILTER_3_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_3_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FILTER_3_TABLE_INST0m_OFFSET,i,&(m._etrap_filter_3_table_inst0),2)
#define WRITE_ETRAP_FILTER_3_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_3_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FILTER_3_TABLE_INST0m_OFFSET,i,&(m._etrap_filter_3_table_inst0),2)

/*******************************************************************************
 * End of 'ETRAP_FILTER_3_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FILTER_3_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_FILTER_3_TABLE_INST1.
 */
#define READ_ETRAP_FILTER_3_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FILTER_3_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FILTER_3_TABLE_INST1m_OFFSET,i,(m._etrap_filter_3_table_inst1),2)
#define WRITE_ETRAP_FILTER_3_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_3_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FILTER_3_TABLE_INST1m_OFFSET,i,&(m._etrap_filter_3_table_inst1),2)
#define WRITE_ETRAP_FILTER_3_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FILTER_3_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FILTER_3_TABLE_INST1m_OFFSET,i,&(m._etrap_filter_3_table_inst1),2)

/*******************************************************************************
 * End of 'ETRAP_FILTER_3_TABLE_INST1m'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FILT_CFG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_FILT_CFG.
 */
#define READ_ETRAP_FILT_CFGr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_FILT_CFGr_BLKACC,1,ETRAP_FILT_CFGr_OFFSET,0,(r._etrap_filt_cfg), 1)
#define WRITE_ETRAP_FILT_CFGr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_FILT_CFGr_BLKACC,1,ETRAP_FILT_CFGr_OFFSET,0,&(r._etrap_filt_cfg), 1)

/*******************************************************************************
 * End of 'ETRAP_FILT_CFGr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FILT_EXCEED_CTR_INST0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ETRAP_FILT_EXCEED_CTR_INST0.
 */
#define READ_ETRAP_FILT_EXCEED_CTR_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_FILT_EXCEED_CTR_INST0r_BLKACC,1,n,0,ETRAP_FILT_EXCEED_CTR_INST0r_OFFSET,0,(r._etrap_filt_exceed_ctr_inst0),2)
#define WRITE_ETRAP_FILT_EXCEED_CTR_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FILT_EXCEED_CTR_INST0r_BLKACC,1,n,0,ETRAP_FILT_EXCEED_CTR_INST0r_OFFSET,0,&(r._etrap_filt_exceed_ctr_inst0),2)
#define WRITE_ETRAP_FILT_EXCEED_CTR_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FILT_EXCEED_CTR_INST0r_BLKACC,1,-1,0,ETRAP_FILT_EXCEED_CTR_INST0r_OFFSET,0,&(r._etrap_filt_exceed_ctr_inst0),2)

/*******************************************************************************
 * End of 'ETRAP_FILT_EXCEED_CTR_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FILT_EXCEED_CTR_INST1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ETRAP_FILT_EXCEED_CTR_INST1.
 */
#define READ_ETRAP_FILT_EXCEED_CTR_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_FILT_EXCEED_CTR_INST1r_BLKACC,1,n,0,ETRAP_FILT_EXCEED_CTR_INST1r_OFFSET,0,(r._etrap_filt_exceed_ctr_inst1),2)
#define WRITE_ETRAP_FILT_EXCEED_CTR_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FILT_EXCEED_CTR_INST1r_BLKACC,1,n,0,ETRAP_FILT_EXCEED_CTR_INST1r_OFFSET,0,&(r._etrap_filt_exceed_ctr_inst1),2)
#define WRITE_ETRAP_FILT_EXCEED_CTR_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FILT_EXCEED_CTR_INST1r_BLKACC,1,-1,0,ETRAP_FILT_EXCEED_CTR_INST1r_OFFSET,0,&(r._etrap_filt_exceed_ctr_inst1),2)

/*******************************************************************************
 * End of 'ETRAP_FILT_EXCEED_CTR_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FILT_THRESH
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_FILT_THRESH.
 */
#define READ_ETRAP_FILT_THRESHr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_FILT_THRESHr_BLKACC,1,ETRAP_FILT_THRESHr_OFFSET,0,(r._etrap_filt_thresh), 1)
#define WRITE_ETRAP_FILT_THRESHr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_FILT_THRESHr_BLKACC,1,ETRAP_FILT_THRESHr_OFFSET,0,&(r._etrap_filt_thresh), 1)

/*******************************************************************************
 * End of 'ETRAP_FILT_THRESHr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FLOW_CFG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_FLOW_CFG.
 */
#define READ_ETRAP_FLOW_CFGr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_FLOW_CFGr_BLKACC,1,ETRAP_FLOW_CFGr_OFFSET,0,(r._etrap_flow_cfg), 1)
#define WRITE_ETRAP_FLOW_CFGr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_FLOW_CFGr_BLKACC,1,ETRAP_FLOW_CFGr_OFFSET,0,&(r._etrap_flow_cfg), 1)

/*******************************************************************************
 * End of 'ETRAP_FLOW_CFGr'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_COUNT_LEFT_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     145
 */
/*
 * These macros can be used to access ETRAP_FLOW_COUNT_LEFT_TABLE_INST0.
 */
#define READ_ETRAP_FLOW_COUNT_LEFT_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_COUNT_LEFT_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_COUNT_LEFT_TABLE_INST0m_OFFSET,i,(m._etrap_flow_count_left_table_inst0),5)
#define WRITE_ETRAP_FLOW_COUNT_LEFT_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_COUNT_LEFT_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_COUNT_LEFT_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_count_left_table_inst0),5)
#define WRITE_ETRAP_FLOW_COUNT_LEFT_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_COUNT_LEFT_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FLOW_COUNT_LEFT_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_count_left_table_inst0),5)

/*******************************************************************************
 * End of 'ETRAP_FLOW_COUNT_LEFT_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_COUNT_LEFT_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     145
 */
/*
 * These macros can be used to access ETRAP_FLOW_COUNT_LEFT_TABLE_INST1.
 */
#define READ_ETRAP_FLOW_COUNT_LEFT_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_COUNT_LEFT_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_COUNT_LEFT_TABLE_INST1m_OFFSET,i,(m._etrap_flow_count_left_table_inst1),5)
#define WRITE_ETRAP_FLOW_COUNT_LEFT_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_COUNT_LEFT_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_COUNT_LEFT_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_count_left_table_inst1),5)
#define WRITE_ETRAP_FLOW_COUNT_LEFT_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_COUNT_LEFT_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FLOW_COUNT_LEFT_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_count_left_table_inst1),5)

/*******************************************************************************
 * End of 'ETRAP_FLOW_COUNT_LEFT_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_COUNT_RIGHT_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     145
 */
/*
 * These macros can be used to access ETRAP_FLOW_COUNT_RIGHT_TABLE_INST0.
 */
#define READ_ETRAP_FLOW_COUNT_RIGHT_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_COUNT_RIGHT_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_COUNT_RIGHT_TABLE_INST0m_OFFSET,i,(m._etrap_flow_count_right_table_inst0),5)
#define WRITE_ETRAP_FLOW_COUNT_RIGHT_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_COUNT_RIGHT_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_COUNT_RIGHT_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_count_right_table_inst0),5)
#define WRITE_ETRAP_FLOW_COUNT_RIGHT_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_COUNT_RIGHT_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FLOW_COUNT_RIGHT_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_count_right_table_inst0),5)

/*******************************************************************************
 * End of 'ETRAP_FLOW_COUNT_RIGHT_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_COUNT_RIGHT_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     145
 */
/*
 * These macros can be used to access ETRAP_FLOW_COUNT_RIGHT_TABLE_INST1.
 */
#define READ_ETRAP_FLOW_COUNT_RIGHT_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_COUNT_RIGHT_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_COUNT_RIGHT_TABLE_INST1m_OFFSET,i,(m._etrap_flow_count_right_table_inst1),5)
#define WRITE_ETRAP_FLOW_COUNT_RIGHT_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_COUNT_RIGHT_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_COUNT_RIGHT_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_count_right_table_inst1),5)
#define WRITE_ETRAP_FLOW_COUNT_RIGHT_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_COUNT_RIGHT_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FLOW_COUNT_RIGHT_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_count_right_table_inst1),5)

/*******************************************************************************
 * End of 'ETRAP_FLOW_COUNT_RIGHT_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_CTRL_LEFT_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_FLOW_CTRL_LEFT_TABLE_INST0.
 */
#define READ_ETRAP_FLOW_CTRL_LEFT_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_CTRL_LEFT_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_CTRL_LEFT_TABLE_INST0m_OFFSET,i,(m._etrap_flow_ctrl_left_table_inst0),2)
#define WRITE_ETRAP_FLOW_CTRL_LEFT_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_CTRL_LEFT_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_CTRL_LEFT_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_ctrl_left_table_inst0),2)
#define WRITE_ETRAP_FLOW_CTRL_LEFT_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_CTRL_LEFT_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FLOW_CTRL_LEFT_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_ctrl_left_table_inst0),2)

/*******************************************************************************
 * End of 'ETRAP_FLOW_CTRL_LEFT_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_CTRL_LEFT_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_FLOW_CTRL_LEFT_TABLE_INST1.
 */
#define READ_ETRAP_FLOW_CTRL_LEFT_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_CTRL_LEFT_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_CTRL_LEFT_TABLE_INST1m_OFFSET,i,(m._etrap_flow_ctrl_left_table_inst1),2)
#define WRITE_ETRAP_FLOW_CTRL_LEFT_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_CTRL_LEFT_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_CTRL_LEFT_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_ctrl_left_table_inst1),2)
#define WRITE_ETRAP_FLOW_CTRL_LEFT_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_CTRL_LEFT_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FLOW_CTRL_LEFT_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_ctrl_left_table_inst1),2)

/*******************************************************************************
 * End of 'ETRAP_FLOW_CTRL_LEFT_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_CTRL_RIGHT_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_FLOW_CTRL_RIGHT_TABLE_INST0.
 */
#define READ_ETRAP_FLOW_CTRL_RIGHT_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_CTRL_RIGHT_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_CTRL_RIGHT_TABLE_INST0m_OFFSET,i,(m._etrap_flow_ctrl_right_table_inst0),2)
#define WRITE_ETRAP_FLOW_CTRL_RIGHT_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_CTRL_RIGHT_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_CTRL_RIGHT_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_ctrl_right_table_inst0),2)
#define WRITE_ETRAP_FLOW_CTRL_RIGHT_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_CTRL_RIGHT_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FLOW_CTRL_RIGHT_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_ctrl_right_table_inst0),2)

/*******************************************************************************
 * End of 'ETRAP_FLOW_CTRL_RIGHT_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_CTRL_RIGHT_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_FLOW_CTRL_RIGHT_TABLE_INST1.
 */
#define READ_ETRAP_FLOW_CTRL_RIGHT_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_CTRL_RIGHT_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_CTRL_RIGHT_TABLE_INST1m_OFFSET,i,(m._etrap_flow_ctrl_right_table_inst1),2)
#define WRITE_ETRAP_FLOW_CTRL_RIGHT_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_CTRL_RIGHT_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_CTRL_RIGHT_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_ctrl_right_table_inst1),2)
#define WRITE_ETRAP_FLOW_CTRL_RIGHT_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_CTRL_RIGHT_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FLOW_CTRL_RIGHT_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_ctrl_right_table_inst1),2)

/*******************************************************************************
 * End of 'ETRAP_FLOW_CTRL_RIGHT_TABLE_INST1m'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FLOW_DETECT_CTR_INST0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ETRAP_FLOW_DETECT_CTR_INST0.
 */
#define READ_ETRAP_FLOW_DETECT_CTR_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_FLOW_DETECT_CTR_INST0r_BLKACC,1,n,0,ETRAP_FLOW_DETECT_CTR_INST0r_OFFSET,0,(r._etrap_flow_detect_ctr_inst0),2)
#define WRITE_ETRAP_FLOW_DETECT_CTR_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FLOW_DETECT_CTR_INST0r_BLKACC,1,n,0,ETRAP_FLOW_DETECT_CTR_INST0r_OFFSET,0,&(r._etrap_flow_detect_ctr_inst0),2)
#define WRITE_ETRAP_FLOW_DETECT_CTR_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FLOW_DETECT_CTR_INST0r_BLKACC,1,-1,0,ETRAP_FLOW_DETECT_CTR_INST0r_OFFSET,0,&(r._etrap_flow_detect_ctr_inst0),2)

/*******************************************************************************
 * End of 'ETRAP_FLOW_DETECT_CTR_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FLOW_DETECT_CTR_INST1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ETRAP_FLOW_DETECT_CTR_INST1.
 */
#define READ_ETRAP_FLOW_DETECT_CTR_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_FLOW_DETECT_CTR_INST1r_BLKACC,1,n,0,ETRAP_FLOW_DETECT_CTR_INST1r_OFFSET,0,(r._etrap_flow_detect_ctr_inst1),2)
#define WRITE_ETRAP_FLOW_DETECT_CTR_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FLOW_DETECT_CTR_INST1r_BLKACC,1,n,0,ETRAP_FLOW_DETECT_CTR_INST1r_OFFSET,0,&(r._etrap_flow_detect_ctr_inst1),2)
#define WRITE_ETRAP_FLOW_DETECT_CTR_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FLOW_DETECT_CTR_INST1r_BLKACC,1,-1,0,ETRAP_FLOW_DETECT_CTR_INST1r_OFFSET,0,&(r._etrap_flow_detect_ctr_inst1),2)

/*******************************************************************************
 * End of 'ETRAP_FLOW_DETECT_CTR_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FLOW_ELEPH_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_FLOW_ELEPH_THRESHOLD.
 */
#define READ_ETRAP_FLOW_ELEPH_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_FLOW_ELEPH_THRESHOLDr_BLKACC,1,ETRAP_FLOW_ELEPH_THRESHOLDr_OFFSET,0,(r._etrap_flow_eleph_threshold), 1)
#define WRITE_ETRAP_FLOW_ELEPH_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_FLOW_ELEPH_THRESHOLDr_BLKACC,1,ETRAP_FLOW_ELEPH_THRESHOLDr_OFFSET,0,&(r._etrap_flow_eleph_threshold), 1)

/*******************************************************************************
 * End of 'ETRAP_FLOW_ELEPH_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FLOW_ELEPH_THR_RED
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_FLOW_ELEPH_THR_RED.
 */
#define READ_ETRAP_FLOW_ELEPH_THR_REDr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_FLOW_ELEPH_THR_REDr_BLKACC,1,ETRAP_FLOW_ELEPH_THR_REDr_OFFSET,0,(r._etrap_flow_eleph_thr_red), 1)
#define WRITE_ETRAP_FLOW_ELEPH_THR_REDr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_FLOW_ELEPH_THR_REDr_BLKACC,1,ETRAP_FLOW_ELEPH_THR_REDr_OFFSET,0,&(r._etrap_flow_eleph_thr_red), 1)

/*******************************************************************************
 * End of 'ETRAP_FLOW_ELEPH_THR_REDr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FLOW_ELEPH_THR_YEL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_FLOW_ELEPH_THR_YEL.
 */
#define READ_ETRAP_FLOW_ELEPH_THR_YELr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_FLOW_ELEPH_THR_YELr_BLKACC,1,ETRAP_FLOW_ELEPH_THR_YELr_OFFSET,0,(r._etrap_flow_eleph_thr_yel), 1)
#define WRITE_ETRAP_FLOW_ELEPH_THR_YELr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_FLOW_ELEPH_THR_YELr_BLKACC,1,ETRAP_FLOW_ELEPH_THR_YELr_OFFSET,0,&(r._etrap_flow_eleph_thr_yel), 1)

/*******************************************************************************
 * End of 'ETRAP_FLOW_ELEPH_THR_YELr'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_L0_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_L0_TABLE_INST0.
 */
#define READ_ETRAP_FLOW_HASH_L0_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_L0_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L0_TABLE_INST0m_OFFSET,i,(m._etrap_flow_hash_l0_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_L0_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L0_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L0_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_l0_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_L0_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L0_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_L0_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_l0_table_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_L0_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_L0_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_L0_TABLE_INST1.
 */
#define READ_ETRAP_FLOW_HASH_L0_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_L0_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L0_TABLE_INST1m_OFFSET,i,(m._etrap_flow_hash_l0_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_L0_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L0_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L0_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_l0_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_L0_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L0_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_L0_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_l0_table_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_L0_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_L1_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_L1_TABLE_INST0.
 */
#define READ_ETRAP_FLOW_HASH_L1_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_L1_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L1_TABLE_INST0m_OFFSET,i,(m._etrap_flow_hash_l1_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_L1_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L1_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L1_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_l1_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_L1_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L1_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_L1_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_l1_table_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_L1_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_L1_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_L1_TABLE_INST1.
 */
#define READ_ETRAP_FLOW_HASH_L1_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_L1_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L1_TABLE_INST1m_OFFSET,i,(m._etrap_flow_hash_l1_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_L1_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L1_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L1_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_l1_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_L1_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L1_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_L1_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_l1_table_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_L1_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_L2_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_L2_TABLE_INST0.
 */
#define READ_ETRAP_FLOW_HASH_L2_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_L2_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L2_TABLE_INST0m_OFFSET,i,(m._etrap_flow_hash_l2_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_L2_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L2_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L2_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_l2_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_L2_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L2_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_L2_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_l2_table_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_L2_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_L2_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_L2_TABLE_INST1.
 */
#define READ_ETRAP_FLOW_HASH_L2_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_L2_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L2_TABLE_INST1m_OFFSET,i,(m._etrap_flow_hash_l2_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_L2_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L2_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L2_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_l2_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_L2_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L2_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_L2_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_l2_table_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_L2_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_L3_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_L3_TABLE_INST0.
 */
#define READ_ETRAP_FLOW_HASH_L3_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_L3_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L3_TABLE_INST0m_OFFSET,i,(m._etrap_flow_hash_l3_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_L3_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L3_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L3_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_l3_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_L3_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L3_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_L3_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_l3_table_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_L3_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_L3_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_L3_TABLE_INST1.
 */
#define READ_ETRAP_FLOW_HASH_L3_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_L3_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L3_TABLE_INST1m_OFFSET,i,(m._etrap_flow_hash_l3_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_L3_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L3_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L3_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_l3_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_L3_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L3_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_L3_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_l3_table_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_L3_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_L4_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_L4_TABLE_INST0.
 */
#define READ_ETRAP_FLOW_HASH_L4_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_L4_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L4_TABLE_INST0m_OFFSET,i,(m._etrap_flow_hash_l4_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_L4_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L4_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L4_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_l4_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_L4_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L4_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_L4_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_l4_table_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_L4_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_L4_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_L4_TABLE_INST1.
 */
#define READ_ETRAP_FLOW_HASH_L4_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_L4_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L4_TABLE_INST1m_OFFSET,i,(m._etrap_flow_hash_l4_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_L4_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L4_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_L4_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_l4_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_L4_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_L4_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_L4_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_l4_table_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_L4_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_R0_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_R0_TABLE_INST0.
 */
#define READ_ETRAP_FLOW_HASH_R0_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_R0_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R0_TABLE_INST0m_OFFSET,i,(m._etrap_flow_hash_r0_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_R0_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R0_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R0_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_r0_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_R0_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R0_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_R0_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_r0_table_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_R0_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_R0_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_R0_TABLE_INST1.
 */
#define READ_ETRAP_FLOW_HASH_R0_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_R0_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R0_TABLE_INST1m_OFFSET,i,(m._etrap_flow_hash_r0_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_R0_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R0_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R0_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_r0_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_R0_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R0_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_R0_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_r0_table_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_R0_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_R1_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_R1_TABLE_INST0.
 */
#define READ_ETRAP_FLOW_HASH_R1_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_R1_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R1_TABLE_INST0m_OFFSET,i,(m._etrap_flow_hash_r1_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_R1_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R1_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R1_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_r1_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_R1_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R1_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_R1_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_r1_table_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_R1_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_R1_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_R1_TABLE_INST1.
 */
#define READ_ETRAP_FLOW_HASH_R1_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_R1_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R1_TABLE_INST1m_OFFSET,i,(m._etrap_flow_hash_r1_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_R1_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R1_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R1_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_r1_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_R1_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R1_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_R1_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_r1_table_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_R1_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_R2_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_R2_TABLE_INST0.
 */
#define READ_ETRAP_FLOW_HASH_R2_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_R2_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R2_TABLE_INST0m_OFFSET,i,(m._etrap_flow_hash_r2_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_R2_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R2_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R2_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_r2_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_R2_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R2_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_R2_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_r2_table_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_R2_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_R2_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_R2_TABLE_INST1.
 */
#define READ_ETRAP_FLOW_HASH_R2_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_R2_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R2_TABLE_INST1m_OFFSET,i,(m._etrap_flow_hash_r2_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_R2_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R2_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R2_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_r2_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_R2_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R2_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_R2_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_r2_table_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_R2_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_R3_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_R3_TABLE_INST0.
 */
#define READ_ETRAP_FLOW_HASH_R3_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_R3_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R3_TABLE_INST0m_OFFSET,i,(m._etrap_flow_hash_r3_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_R3_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R3_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R3_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_r3_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_R3_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R3_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_R3_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_r3_table_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_R3_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_R3_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_R3_TABLE_INST1.
 */
#define READ_ETRAP_FLOW_HASH_R3_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_R3_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R3_TABLE_INST1m_OFFSET,i,(m._etrap_flow_hash_r3_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_R3_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R3_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R3_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_r3_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_R3_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R3_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_R3_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_r3_table_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_R3_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_R4_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_R4_TABLE_INST0.
 */
#define READ_ETRAP_FLOW_HASH_R4_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_R4_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R4_TABLE_INST0m_OFFSET,i,(m._etrap_flow_hash_r4_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_R4_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R4_TABLE_INST0m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R4_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_r4_table_inst0),3)
#define WRITE_ETRAP_FLOW_HASH_R4_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R4_TABLE_INST0m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_R4_TABLE_INST0m_OFFSET,i,&(m._etrap_flow_hash_r4_table_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_R4_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_FLOW_HASH_R4_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access ETRAP_FLOW_HASH_R4_TABLE_INST1.
 */
#define READ_ETRAP_FLOW_HASH_R4_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_FLOW_HASH_R4_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R4_TABLE_INST1m_OFFSET,i,(m._etrap_flow_hash_r4_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_R4_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R4_TABLE_INST1m_BLKACC,1,n,0,ETRAP_FLOW_HASH_R4_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_r4_table_inst1),3)
#define WRITE_ETRAP_FLOW_HASH_R4_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_FLOW_HASH_R4_TABLE_INST1m_BLKACC,1,-1,0,ETRAP_FLOW_HASH_R4_TABLE_INST1m_OFFSET,i,&(m._etrap_flow_hash_r4_table_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_FLOW_HASH_R4_TABLE_INST1m'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FLOW_INS_FAIL_CTR_INST0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ETRAP_FLOW_INS_FAIL_CTR_INST0.
 */
#define READ_ETRAP_FLOW_INS_FAIL_CTR_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_FLOW_INS_FAIL_CTR_INST0r_BLKACC,1,n,0,ETRAP_FLOW_INS_FAIL_CTR_INST0r_OFFSET,0,(r._etrap_flow_ins_fail_ctr_inst0),2)
#define WRITE_ETRAP_FLOW_INS_FAIL_CTR_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FLOW_INS_FAIL_CTR_INST0r_BLKACC,1,n,0,ETRAP_FLOW_INS_FAIL_CTR_INST0r_OFFSET,0,&(r._etrap_flow_ins_fail_ctr_inst0),2)
#define WRITE_ETRAP_FLOW_INS_FAIL_CTR_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FLOW_INS_FAIL_CTR_INST0r_BLKACC,1,-1,0,ETRAP_FLOW_INS_FAIL_CTR_INST0r_OFFSET,0,&(r._etrap_flow_ins_fail_ctr_inst0),2)

/*******************************************************************************
 * End of 'ETRAP_FLOW_INS_FAIL_CTR_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FLOW_INS_FAIL_CTR_INST1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ETRAP_FLOW_INS_FAIL_CTR_INST1.
 */
#define READ_ETRAP_FLOW_INS_FAIL_CTR_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_FLOW_INS_FAIL_CTR_INST1r_BLKACC,1,n,0,ETRAP_FLOW_INS_FAIL_CTR_INST1r_OFFSET,0,(r._etrap_flow_ins_fail_ctr_inst1),2)
#define WRITE_ETRAP_FLOW_INS_FAIL_CTR_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FLOW_INS_FAIL_CTR_INST1r_BLKACC,1,n,0,ETRAP_FLOW_INS_FAIL_CTR_INST1r_OFFSET,0,&(r._etrap_flow_ins_fail_ctr_inst1),2)
#define WRITE_ETRAP_FLOW_INS_FAIL_CTR_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FLOW_INS_FAIL_CTR_INST1r_BLKACC,1,-1,0,ETRAP_FLOW_INS_FAIL_CTR_INST1r_OFFSET,0,&(r._etrap_flow_ins_fail_ctr_inst1),2)

/*******************************************************************************
 * End of 'ETRAP_FLOW_INS_FAIL_CTR_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FLOW_INS_SUCCESS_CTR_INST0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ETRAP_FLOW_INS_SUCCESS_CTR_INST0.
 */
#define READ_ETRAP_FLOW_INS_SUCCESS_CTR_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_FLOW_INS_SUCCESS_CTR_INST0r_BLKACC,1,n,0,ETRAP_FLOW_INS_SUCCESS_CTR_INST0r_OFFSET,0,(r._etrap_flow_ins_success_ctr_inst0),2)
#define WRITE_ETRAP_FLOW_INS_SUCCESS_CTR_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FLOW_INS_SUCCESS_CTR_INST0r_BLKACC,1,n,0,ETRAP_FLOW_INS_SUCCESS_CTR_INST0r_OFFSET,0,&(r._etrap_flow_ins_success_ctr_inst0),2)
#define WRITE_ETRAP_FLOW_INS_SUCCESS_CTR_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FLOW_INS_SUCCESS_CTR_INST0r_BLKACC,1,-1,0,ETRAP_FLOW_INS_SUCCESS_CTR_INST0r_OFFSET,0,&(r._etrap_flow_ins_success_ctr_inst0),2)

/*******************************************************************************
 * End of 'ETRAP_FLOW_INS_SUCCESS_CTR_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FLOW_INS_SUCCESS_CTR_INST1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ETRAP_FLOW_INS_SUCCESS_CTR_INST1.
 */
#define READ_ETRAP_FLOW_INS_SUCCESS_CTR_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_FLOW_INS_SUCCESS_CTR_INST1r_BLKACC,1,n,0,ETRAP_FLOW_INS_SUCCESS_CTR_INST1r_OFFSET,0,(r._etrap_flow_ins_success_ctr_inst1),2)
#define WRITE_ETRAP_FLOW_INS_SUCCESS_CTR_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FLOW_INS_SUCCESS_CTR_INST1r_BLKACC,1,n,0,ETRAP_FLOW_INS_SUCCESS_CTR_INST1r_OFFSET,0,&(r._etrap_flow_ins_success_ctr_inst1),2)
#define WRITE_ETRAP_FLOW_INS_SUCCESS_CTR_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_FLOW_INS_SUCCESS_CTR_INST1r_BLKACC,1,-1,0,ETRAP_FLOW_INS_SUCCESS_CTR_INST1r_OFFSET,0,&(r._etrap_flow_ins_success_ctr_inst1),2)

/*******************************************************************************
 * End of 'ETRAP_FLOW_INS_SUCCESS_CTR_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_FLOW_RESET_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_FLOW_RESET_THRESHOLD.
 */
#define READ_ETRAP_FLOW_RESET_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_FLOW_RESET_THRESHOLDr_BLKACC,1,ETRAP_FLOW_RESET_THRESHOLDr_OFFSET,0,(r._etrap_flow_reset_threshold), 1)
#define WRITE_ETRAP_FLOW_RESET_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_FLOW_RESET_THRESHOLDr_BLKACC,1,ETRAP_FLOW_RESET_THRESHOLDr_OFFSET,0,&(r._etrap_flow_reset_threshold), 1)

/*******************************************************************************
 * End of 'ETRAP_FLOW_RESET_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_HW_CONFIG_INST0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ETRAP_HW_CONFIG_INST0.
 */
#define READ_ETRAP_HW_CONFIG_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_HW_CONFIG_INST0r_BLKACC,1,n,0,ETRAP_HW_CONFIG_INST0r_OFFSET,0,(r._etrap_hw_config_inst0),2)
#define WRITE_ETRAP_HW_CONFIG_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_HW_CONFIG_INST0r_BLKACC,1,n,0,ETRAP_HW_CONFIG_INST0r_OFFSET,0,&(r._etrap_hw_config_inst0),2)
#define WRITE_ETRAP_HW_CONFIG_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_HW_CONFIG_INST0r_BLKACC,1,-1,0,ETRAP_HW_CONFIG_INST0r_OFFSET,0,&(r._etrap_hw_config_inst0),2)

/*******************************************************************************
 * End of 'ETRAP_HW_CONFIG_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_HW_CONFIG_INST1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ETRAP_HW_CONFIG_INST1.
 */
#define READ_ETRAP_HW_CONFIG_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_HW_CONFIG_INST1r_BLKACC,1,n,0,ETRAP_HW_CONFIG_INST1r_OFFSET,0,(r._etrap_hw_config_inst1),2)
#define WRITE_ETRAP_HW_CONFIG_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_HW_CONFIG_INST1r_BLKACC,1,n,0,ETRAP_HW_CONFIG_INST1r_OFFSET,0,&(r._etrap_hw_config_inst1),2)
#define WRITE_ETRAP_HW_CONFIG_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_HW_CONFIG_INST1r_BLKACC,1,-1,0,ETRAP_HW_CONFIG_INST1r_OFFSET,0,&(r._etrap_hw_config_inst1),2)

/*******************************************************************************
 * End of 'ETRAP_HW_CONFIG_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_HW_CONFIG_INST
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ETRAP_HW_CONFIG_INST.
 */
#define READ_ETRAP_HW_CONFIG_INSTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_HW_CONFIG_INSTr_BLKACC,1,n,0,ETRAP_HW_CONFIG_INSTr_OFFSET,i,(r._etrap_hw_config_inst),2)
#define WRITE_ETRAP_HW_CONFIG_INSTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_HW_CONFIG_INSTr_BLKACC,1,n,0,ETRAP_HW_CONFIG_INSTr_OFFSET,i,&(r._etrap_hw_config_inst),2)
#define WRITE_ETRAP_HW_CONFIG_INSTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_HW_CONFIG_INSTr_BLKACC,1,-1,0,ETRAP_HW_CONFIG_INSTr_OFFSET,i,&(r._etrap_hw_config_inst),2)

/*******************************************************************************
 * End of 'ETRAP_HW_CONFIG_INSTr'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_INT_PRI_REMAP_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access ETRAP_INT_PRI_REMAP_TABLE.
 */
#define READ_ETRAP_INT_PRI_REMAP_TABLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,ETRAP_INT_PRI_REMAP_TABLEm_BLKACC,1,ETRAP_INT_PRI_REMAP_TABLEm_OFFSET,i,(m._etrap_int_pri_remap_table),1)
#define WRITE_ETRAP_INT_PRI_REMAP_TABLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,ETRAP_INT_PRI_REMAP_TABLEm_BLKACC,1,ETRAP_INT_PRI_REMAP_TABLEm_OFFSET,i,&(m._etrap_int_pri_remap_table),1)

/*******************************************************************************
 * End of 'ETRAP_INT_PRI_REMAP_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_LKUP_EN_ING_PORT
 * BLOCKS:   IPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access ETRAP_LKUP_EN_ING_PORT.
 */
#define READ_ETRAP_LKUP_EN_ING_PORTm(u,i,m) bcmbd_cmicx_mem_block_read(u,ETRAP_LKUP_EN_ING_PORTm_BLKACC,1,ETRAP_LKUP_EN_ING_PORTm_OFFSET,i,(m._etrap_lkup_en_ing_port),9)
#define WRITE_ETRAP_LKUP_EN_ING_PORTm(u,i,m) bcmbd_cmicx_mem_block_write(u,ETRAP_LKUP_EN_ING_PORTm_BLKACC,1,ETRAP_LKUP_EN_ING_PORTm_OFFSET,i,&(m._etrap_lkup_en_ing_port),9)

/*******************************************************************************
 * End of 'ETRAP_LKUP_EN_ING_PORTm'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_LKUP_EN_INT_PRI
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_LKUP_EN_INT_PRI.
 */
#define READ_ETRAP_LKUP_EN_INT_PRIr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_LKUP_EN_INT_PRIr_BLKACC,1,ETRAP_LKUP_EN_INT_PRIr_OFFSET,0,(r._etrap_lkup_en_int_pri), 1)
#define WRITE_ETRAP_LKUP_EN_INT_PRIr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_LKUP_EN_INT_PRIr_BLKACC,1,ETRAP_LKUP_EN_INT_PRIr_OFFSET,0,&(r._etrap_lkup_en_int_pri), 1)

/*******************************************************************************
 * End of 'ETRAP_LKUP_EN_INT_PRIr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_LKUP_EN_PKT_TYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_LKUP_EN_PKT_TYPE.
 */
#define READ_ETRAP_LKUP_EN_PKT_TYPEr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_LKUP_EN_PKT_TYPEr_BLKACC,1,ETRAP_LKUP_EN_PKT_TYPEr_OFFSET,0,(r._etrap_lkup_en_pkt_type), 1)
#define WRITE_ETRAP_LKUP_EN_PKT_TYPEr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_LKUP_EN_PKT_TYPEr_BLKACC,1,ETRAP_LKUP_EN_PKT_TYPEr_OFFSET,0,&(r._etrap_lkup_en_pkt_type), 1)

/*******************************************************************************
 * End of 'ETRAP_LKUP_EN_PKT_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_MONITOR_CONFIG_INST0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ETRAP_MONITOR_CONFIG_INST0.
 */
#define READ_ETRAP_MONITOR_CONFIG_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_MONITOR_CONFIG_INST0r_BLKACC,1,n,0,ETRAP_MONITOR_CONFIG_INST0r_OFFSET,0,(r._etrap_monitor_config_inst0),2)
#define WRITE_ETRAP_MONITOR_CONFIG_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_MONITOR_CONFIG_INST0r_BLKACC,1,n,0,ETRAP_MONITOR_CONFIG_INST0r_OFFSET,0,&(r._etrap_monitor_config_inst0),2)
#define WRITE_ETRAP_MONITOR_CONFIG_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_MONITOR_CONFIG_INST0r_BLKACC,1,-1,0,ETRAP_MONITOR_CONFIG_INST0r_OFFSET,0,&(r._etrap_monitor_config_inst0),2)

/*******************************************************************************
 * End of 'ETRAP_MONITOR_CONFIG_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_MONITOR_CONFIG_INST1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ETRAP_MONITOR_CONFIG_INST1.
 */
#define READ_ETRAP_MONITOR_CONFIG_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_MONITOR_CONFIG_INST1r_BLKACC,1,n,0,ETRAP_MONITOR_CONFIG_INST1r_OFFSET,0,(r._etrap_monitor_config_inst1),2)
#define WRITE_ETRAP_MONITOR_CONFIG_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_MONITOR_CONFIG_INST1r_BLKACC,1,n,0,ETRAP_MONITOR_CONFIG_INST1r_OFFSET,0,&(r._etrap_monitor_config_inst1),2)
#define WRITE_ETRAP_MONITOR_CONFIG_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_MONITOR_CONFIG_INST1r_BLKACC,1,-1,0,ETRAP_MONITOR_CONFIG_INST1r_OFFSET,0,&(r._etrap_monitor_config_inst1),2)

/*******************************************************************************
 * End of 'ETRAP_MONITOR_CONFIG_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_MONITOR_MIRROR_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_MONITOR_MIRROR_CONFIG.
 */
#define READ_ETRAP_MONITOR_MIRROR_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_MONITOR_MIRROR_CONFIGr_BLKACC,1,ETRAP_MONITOR_MIRROR_CONFIGr_OFFSET,0,(r._etrap_monitor_mirror_config), 1)
#define WRITE_ETRAP_MONITOR_MIRROR_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_MONITOR_MIRROR_CONFIGr_BLKACC,1,ETRAP_MONITOR_MIRROR_CONFIGr_OFFSET,0,&(r._etrap_monitor_mirror_config), 1)

/*******************************************************************************
 * End of 'ETRAP_MONITOR_MIRROR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_MSEC_INST0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_MSEC_INST0.
 */
#define READ_ETRAP_MSEC_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_MSEC_INST0r_BLKACC,1,n,0,ETRAP_MSEC_INST0r_OFFSET,0,(r._etrap_msec_inst0),1)
#define WRITE_ETRAP_MSEC_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_MSEC_INST0r_BLKACC,1,n,0,ETRAP_MSEC_INST0r_OFFSET,0,&(r._etrap_msec_inst0),1)
#define WRITE_ETRAP_MSEC_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_MSEC_INST0r_BLKACC,1,-1,0,ETRAP_MSEC_INST0r_OFFSET,0,&(r._etrap_msec_inst0),1)

/*******************************************************************************
 * End of 'ETRAP_MSEC_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_MSEC_INST1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_MSEC_INST1.
 */
#define READ_ETRAP_MSEC_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_MSEC_INST1r_BLKACC,1,n,0,ETRAP_MSEC_INST1r_OFFSET,0,(r._etrap_msec_inst1),1)
#define WRITE_ETRAP_MSEC_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_MSEC_INST1r_BLKACC,1,n,0,ETRAP_MSEC_INST1r_OFFSET,0,&(r._etrap_msec_inst1),1)
#define WRITE_ETRAP_MSEC_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_MSEC_INST1r_BLKACC,1,-1,0,ETRAP_MSEC_INST1r_OFFSET,0,&(r._etrap_msec_inst1),1)

/*******************************************************************************
 * End of 'ETRAP_MSEC_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_PROC_EN
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_PROC_EN.
 */
#define READ_ETRAP_PROC_ENr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_PROC_ENr_BLKACC,1,ETRAP_PROC_ENr_OFFSET,0,(r._etrap_proc_en), 1)
#define WRITE_ETRAP_PROC_ENr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_PROC_ENr_BLKACC,1,ETRAP_PROC_ENr_OFFSET,0,&(r._etrap_proc_en), 1)

/*******************************************************************************
 * End of 'ETRAP_PROC_ENr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_PROC_EN_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_PROC_EN_2.
 */
#define READ_ETRAP_PROC_EN_2r(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_PROC_EN_2r_BLKACC,1,ETRAP_PROC_EN_2r_OFFSET,0,(r._etrap_proc_en_2), 1)
#define WRITE_ETRAP_PROC_EN_2r(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_PROC_EN_2r_BLKACC,1,ETRAP_PROC_EN_2r_OFFSET,0,&(r._etrap_proc_en_2), 1)

/*******************************************************************************
 * End of 'ETRAP_PROC_EN_2r'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_QUEUE_EN_EGR_PORT_BMP
 * BLOCKS:   IPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access ETRAP_QUEUE_EN_EGR_PORT_BMP.
 */
#define READ_ETRAP_QUEUE_EN_EGR_PORT_BMPm(u,i,m) bcmbd_cmicx_mem_block_read(u,ETRAP_QUEUE_EN_EGR_PORT_BMPm_BLKACC,1,ETRAP_QUEUE_EN_EGR_PORT_BMPm_OFFSET,i,(m._etrap_queue_en_egr_port_bmp),9)
#define WRITE_ETRAP_QUEUE_EN_EGR_PORT_BMPm(u,i,m) bcmbd_cmicx_mem_block_write(u,ETRAP_QUEUE_EN_EGR_PORT_BMPm_BLKACC,1,ETRAP_QUEUE_EN_EGR_PORT_BMPm_OFFSET,i,&(m._etrap_queue_en_egr_port_bmp),9)

/*******************************************************************************
 * End of 'ETRAP_QUEUE_EN_EGR_PORT_BMPm'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_QUEUE_EN_INT_PRI
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_QUEUE_EN_INT_PRI.
 */
#define READ_ETRAP_QUEUE_EN_INT_PRIr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_QUEUE_EN_INT_PRIr_BLKACC,1,ETRAP_QUEUE_EN_INT_PRIr_OFFSET,0,(r._etrap_queue_en_int_pri), 1)
#define WRITE_ETRAP_QUEUE_EN_INT_PRIr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_QUEUE_EN_INT_PRIr_BLKACC,1,ETRAP_QUEUE_EN_INT_PRIr_OFFSET,0,&(r._etrap_queue_en_int_pri), 1)

/*******************************************************************************
 * End of 'ETRAP_QUEUE_EN_INT_PRIr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_QUEUE_EN_PKT_TYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_QUEUE_EN_PKT_TYPE.
 */
#define READ_ETRAP_QUEUE_EN_PKT_TYPEr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_QUEUE_EN_PKT_TYPEr_BLKACC,1,ETRAP_QUEUE_EN_PKT_TYPEr_OFFSET,0,(r._etrap_queue_en_pkt_type), 1)
#define WRITE_ETRAP_QUEUE_EN_PKT_TYPEr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_QUEUE_EN_PKT_TYPEr_BLKACC,1,ETRAP_QUEUE_EN_PKT_TYPEr_OFFSET,0,&(r._etrap_queue_en_pkt_type), 1)

/*******************************************************************************
 * End of 'ETRAP_QUEUE_EN_PKT_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_SAMPLE_ADDR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_ADDR.
 */
#define READ_ETRAP_SAMPLE_ADDRr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_SAMPLE_ADDRr_BLKACC,1,ETRAP_SAMPLE_ADDRr_OFFSET,0,(r._etrap_sample_addr), 1)
#define WRITE_ETRAP_SAMPLE_ADDRr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_SAMPLE_ADDRr_BLKACC,1,ETRAP_SAMPLE_ADDRr_OFFSET,0,&(r._etrap_sample_addr), 1)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_ADDRr'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST0
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST0.
 */
#define READ_ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST0m_OFFSET,i,(m._etrap_sample_flow_count_left_inst0),5)
#define WRITE_ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST0m_OFFSET,i,&(m._etrap_sample_flow_count_left_inst0),5)
#define WRITE_ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST0m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST0m_OFFSET,i,&(m._etrap_sample_flow_count_left_inst0),5)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST1
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST1.
 */
#define READ_ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST1m_OFFSET,i,(m._etrap_sample_flow_count_left_inst1),5)
#define WRITE_ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST1m_OFFSET,i,&(m._etrap_sample_flow_count_left_inst1),5)
#define WRITE_ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST1m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST1m_OFFSET,i,&(m._etrap_sample_flow_count_left_inst1),5)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_COUNT_LEFT_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST0
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST0.
 */
#define READ_ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST0m_OFFSET,i,(m._etrap_sample_flow_count_right_inst0),5)
#define WRITE_ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST0m_OFFSET,i,&(m._etrap_sample_flow_count_right_inst0),5)
#define WRITE_ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST0m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST0m_OFFSET,i,&(m._etrap_sample_flow_count_right_inst0),5)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST1
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST1.
 */
#define READ_ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST1m_OFFSET,i,(m._etrap_sample_flow_count_right_inst1),5)
#define WRITE_ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST1m_OFFSET,i,&(m._etrap_sample_flow_count_right_inst1),5)
#define WRITE_ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST1m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST1m_OFFSET,i,&(m._etrap_sample_flow_count_right_inst1),5)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_COUNT_RIGHT_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST0
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST0.
 */
#define READ_ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST0m_OFFSET,i,(m._etrap_sample_flow_ctrl_left_inst0),2)
#define WRITE_ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST0m_OFFSET,i,&(m._etrap_sample_flow_ctrl_left_inst0),2)
#define WRITE_ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST0m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST0m_OFFSET,i,&(m._etrap_sample_flow_ctrl_left_inst0),2)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST1
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST1.
 */
#define READ_ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST1m_OFFSET,i,(m._etrap_sample_flow_ctrl_left_inst1),2)
#define WRITE_ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST1m_OFFSET,i,&(m._etrap_sample_flow_ctrl_left_inst1),2)
#define WRITE_ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST1m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST1m_OFFSET,i,&(m._etrap_sample_flow_ctrl_left_inst1),2)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_CTRL_LEFT_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST0
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST0.
 */
#define READ_ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST0m_OFFSET,i,(m._etrap_sample_flow_ctrl_right_inst0),2)
#define WRITE_ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST0m_OFFSET,i,&(m._etrap_sample_flow_ctrl_right_inst0),2)
#define WRITE_ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST0m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST0m_OFFSET,i,&(m._etrap_sample_flow_ctrl_right_inst0),2)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST1
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST1.
 */
#define READ_ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST1m_OFFSET,i,(m._etrap_sample_flow_ctrl_right_inst1),2)
#define WRITE_ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST1m_OFFSET,i,&(m._etrap_sample_flow_ctrl_right_inst1),2)
#define WRITE_ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST1m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST1m_OFFSET,i,&(m._etrap_sample_flow_ctrl_right_inst1),2)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_CTRL_RIGHT_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_L0_INST0
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_L0_INST0.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_L0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_L0_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L0_INST0m_OFFSET,i,(m._etrap_sample_flow_hash_l0_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L0_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L0_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_l0_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L0_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L0_INST0m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_L0_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_l0_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_L0_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_L0_INST1
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_L0_INST1.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_L0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_L0_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L0_INST1m_OFFSET,i,(m._etrap_sample_flow_hash_l0_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L0_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L0_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_l0_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L0_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L0_INST1m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_L0_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_l0_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_L0_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_L1_INST0
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_L1_INST0.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_L1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_L1_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L1_INST0m_OFFSET,i,(m._etrap_sample_flow_hash_l1_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L1_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L1_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_l1_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L1_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L1_INST0m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_L1_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_l1_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_L1_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_L1_INST1
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_L1_INST1.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_L1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_L1_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L1_INST1m_OFFSET,i,(m._etrap_sample_flow_hash_l1_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L1_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L1_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_l1_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L1_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L1_INST1m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_L1_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_l1_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_L1_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_L2_INST0
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_L2_INST0.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_L2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_L2_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L2_INST0m_OFFSET,i,(m._etrap_sample_flow_hash_l2_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L2_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L2_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_l2_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L2_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L2_INST0m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_L2_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_l2_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_L2_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_L2_INST1
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_L2_INST1.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_L2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_L2_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L2_INST1m_OFFSET,i,(m._etrap_sample_flow_hash_l2_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L2_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L2_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_l2_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L2_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L2_INST1m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_L2_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_l2_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_L2_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_L3_INST0
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_L3_INST0.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_L3_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_L3_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L3_INST0m_OFFSET,i,(m._etrap_sample_flow_hash_l3_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L3_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L3_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L3_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_l3_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L3_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L3_INST0m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_L3_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_l3_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_L3_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_L3_INST1
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_L3_INST1.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_L3_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_L3_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L3_INST1m_OFFSET,i,(m._etrap_sample_flow_hash_l3_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L3_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L3_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L3_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_l3_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L3_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L3_INST1m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_L3_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_l3_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_L3_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_L4_INST0
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_L4_INST0.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_L4_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_L4_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L4_INST0m_OFFSET,i,(m._etrap_sample_flow_hash_l4_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L4_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L4_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L4_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_l4_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L4_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L4_INST0m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_L4_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_l4_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_L4_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_L4_INST1
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_L4_INST1.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_L4_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_L4_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L4_INST1m_OFFSET,i,(m._etrap_sample_flow_hash_l4_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L4_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L4_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_L4_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_l4_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_L4_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_L4_INST1m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_L4_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_l4_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_L4_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_R0_INST0
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_R0_INST0.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_R0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_R0_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R0_INST0m_OFFSET,i,(m._etrap_sample_flow_hash_r0_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R0_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R0_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_r0_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R0_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R0_INST0m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_R0_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_r0_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_R0_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_R0_INST1
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_R0_INST1.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_R0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_R0_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R0_INST1m_OFFSET,i,(m._etrap_sample_flow_hash_r0_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R0_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R0_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_r0_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R0_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R0_INST1m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_R0_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_r0_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_R0_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_R1_INST0
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_R1_INST0.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_R1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_R1_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R1_INST0m_OFFSET,i,(m._etrap_sample_flow_hash_r1_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R1_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R1_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_r1_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R1_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R1_INST0m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_R1_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_r1_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_R1_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_R1_INST1
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_R1_INST1.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_R1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_R1_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R1_INST1m_OFFSET,i,(m._etrap_sample_flow_hash_r1_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R1_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R1_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_r1_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R1_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R1_INST1m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_R1_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_r1_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_R1_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_R2_INST0
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_R2_INST0.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_R2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_R2_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R2_INST0m_OFFSET,i,(m._etrap_sample_flow_hash_r2_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R2_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R2_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_r2_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R2_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R2_INST0m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_R2_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_r2_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_R2_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_R2_INST1
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_R2_INST1.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_R2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_R2_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R2_INST1m_OFFSET,i,(m._etrap_sample_flow_hash_r2_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R2_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R2_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_r2_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R2_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R2_INST1m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_R2_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_r2_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_R2_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_R3_INST0
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_R3_INST0.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_R3_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_R3_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R3_INST0m_OFFSET,i,(m._etrap_sample_flow_hash_r3_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R3_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R3_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R3_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_r3_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R3_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R3_INST0m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_R3_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_r3_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_R3_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_R3_INST1
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_R3_INST1.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_R3_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_R3_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R3_INST1m_OFFSET,i,(m._etrap_sample_flow_hash_r3_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R3_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R3_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R3_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_r3_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R3_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R3_INST1m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_R3_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_r3_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_R3_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_R4_INST0
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_R4_INST0.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_R4_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_R4_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R4_INST0m_OFFSET,i,(m._etrap_sample_flow_hash_r4_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R4_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R4_INST0m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R4_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_r4_inst0),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R4_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R4_INST0m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_R4_INST0m_OFFSET,i,&(m._etrap_sample_flow_hash_r4_inst0),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_R4_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ETRAP_SAMPLE_FLOW_HASH_R4_INST1
 * BLOCKS:   IPIPE
 * SIZE:     73
 */
/*
 * These macros can be used to access ETRAP_SAMPLE_FLOW_HASH_R4_INST1.
 */
#define READ_ETRAP_SAMPLE_FLOW_HASH_R4_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ETRAP_SAMPLE_FLOW_HASH_R4_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R4_INST1m_OFFSET,i,(m._etrap_sample_flow_hash_r4_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R4_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R4_INST1m_BLKACC,1,n,0,ETRAP_SAMPLE_FLOW_HASH_R4_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_r4_inst1),3)
#define WRITE_ETRAP_SAMPLE_FLOW_HASH_R4_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ETRAP_SAMPLE_FLOW_HASH_R4_INST1m_BLKACC,1,-1,0,ETRAP_SAMPLE_FLOW_HASH_R4_INST1m_OFFSET,i,&(m._etrap_sample_flow_hash_r4_inst1),3)

/*******************************************************************************
 * End of 'ETRAP_SAMPLE_FLOW_HASH_R4_INST1m'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ETRAP_SER_CONTROL.
 */
#define READ_ETRAP_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_SER_CONTROLr_BLKACC,1,ETRAP_SER_CONTROLr_OFFSET,0,(r._etrap_ser_control), 2)
#define WRITE_ETRAP_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_SER_CONTROLr_BLKACC,1,ETRAP_SER_CONTROLr_OFFSET,0,&(r._etrap_ser_control), 2)

/*******************************************************************************
 * End of 'ETRAP_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_TIMEBASE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_TIMEBASE.
 */
#define READ_ETRAP_TIMEBASEr(u,r) bcmbd_cmicx_reg_block_read(u,ETRAP_TIMEBASEr_BLKACC,1,ETRAP_TIMEBASEr_OFFSET,0,(r._etrap_timebase), 1)
#define WRITE_ETRAP_TIMEBASEr(u,r) bcmbd_cmicx_reg_block_write(u,ETRAP_TIMEBASEr_BLKACC,1,ETRAP_TIMEBASEr_OFFSET,0,&(r._etrap_timebase), 1)

/*******************************************************************************
 * End of 'ETRAP_TIMEBASEr'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_USEC_INST0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_USEC_INST0.
 */
#define READ_ETRAP_USEC_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_USEC_INST0r_BLKACC,1,n,0,ETRAP_USEC_INST0r_OFFSET,0,(r._etrap_usec_inst0),1)
#define WRITE_ETRAP_USEC_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_USEC_INST0r_BLKACC,1,n,0,ETRAP_USEC_INST0r_OFFSET,0,&(r._etrap_usec_inst0),1)
#define WRITE_ETRAP_USEC_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_USEC_INST0r_BLKACC,1,-1,0,ETRAP_USEC_INST0r_OFFSET,0,&(r._etrap_usec_inst0),1)

/*******************************************************************************
 * End of 'ETRAP_USEC_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ETRAP_USEC_INST1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETRAP_USEC_INST1.
 */
#define READ_ETRAP_USEC_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ETRAP_USEC_INST1r_BLKACC,1,n,0,ETRAP_USEC_INST1r_OFFSET,0,(r._etrap_usec_inst1),1)
#define WRITE_ETRAP_USEC_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_USEC_INST1r_BLKACC,1,n,0,ETRAP_USEC_INST1r_OFFSET,0,&(r._etrap_usec_inst1),1)
#define WRITE_ETRAP_USEC_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ETRAP_USEC_INST1r_BLKACC,1,-1,0,ETRAP_USEC_INST1r_OFFSET,0,&(r._etrap_usec_inst1),1)

/*******************************************************************************
 * End of 'ETRAP_USEC_INST1r'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_2
 * BLOCKS:   IPIPE
 * SIZE:     240
 */
/*
 * These macros can be used to access EXACT_MATCH_2.
 */
#define READ_EXACT_MATCH_2m(u,i,m) bcmbd_cmicx_mem_block_read(u,EXACT_MATCH_2m_BLKACC,1,EXACT_MATCH_2m_OFFSET,i,(m._exact_match_2),8)
#define WRITE_EXACT_MATCH_2m(u,i,m) bcmbd_cmicx_mem_block_write(u,EXACT_MATCH_2m_BLKACC,1,EXACT_MATCH_2m_OFFSET,i,&(m._exact_match_2),8)

/*******************************************************************************
 * End of 'EXACT_MATCH_2m'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_4
 * BLOCKS:   IPIPE
 * SIZE:     480
 */
/*
 * These macros can be used to access EXACT_MATCH_4.
 */
#define READ_EXACT_MATCH_4m(u,i,m) bcmbd_cmicx_mem_block_read(u,EXACT_MATCH_4m_BLKACC,1,EXACT_MATCH_4m_OFFSET,i,(m._exact_match_4),15)
#define WRITE_EXACT_MATCH_4m(u,i,m) bcmbd_cmicx_mem_block_write(u,EXACT_MATCH_4m_BLKACC,1,EXACT_MATCH_4m_OFFSET,i,&(m._exact_match_4),15)

/*******************************************************************************
 * End of 'EXACT_MATCH_4m'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_ACTION_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     27
 */
/*
 * These macros can be used to access EXACT_MATCH_ACTION_PROFILE.
 */
#define READ_EXACT_MATCH_ACTION_PROFILEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EXACT_MATCH_ACTION_PROFILEm_BLKACC,1,n,0,EXACT_MATCH_ACTION_PROFILEm_OFFSET,i,(m._exact_match_action_profile),1)
#define WRITE_EXACT_MATCH_ACTION_PROFILEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_ACTION_PROFILEm_BLKACC,1,n,0,EXACT_MATCH_ACTION_PROFILEm_OFFSET,i,&(m._exact_match_action_profile),1)
#define WRITE_EXACT_MATCH_ACTION_PROFILEm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_ACTION_PROFILEm_BLKACC,1,-1,0,EXACT_MATCH_ACTION_PROFILEm_OFFSET,i,&(m._exact_match_action_profile),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_ACTION_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_ACTION_TABLE_A
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EXACT_MATCH_ACTION_TABLE_A.
 */
#define READ_EXACT_MATCH_ACTION_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_read(u,EXACT_MATCH_ACTION_TABLE_Am_BLKACC,1,EXACT_MATCH_ACTION_TABLE_Am_OFFSET,i,(m._exact_match_action_table_a),2)
#define WRITE_EXACT_MATCH_ACTION_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_write(u,EXACT_MATCH_ACTION_TABLE_Am_BLKACC,1,EXACT_MATCH_ACTION_TABLE_Am_OFFSET,i,&(m._exact_match_action_table_a),2)

/*******************************************************************************
 * End of 'EXACT_MATCH_ACTION_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_ACTION_TABLE_B
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EXACT_MATCH_ACTION_TABLE_B.
 */
#define READ_EXACT_MATCH_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_read(u,EXACT_MATCH_ACTION_TABLE_Bm_BLKACC,1,EXACT_MATCH_ACTION_TABLE_Bm_OFFSET,i,(m._exact_match_action_table_b),2)
#define WRITE_EXACT_MATCH_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_write(u,EXACT_MATCH_ACTION_TABLE_Bm_BLKACC,1,EXACT_MATCH_ACTION_TABLE_Bm_OFFSET,i,&(m._exact_match_action_table_b),2)

/*******************************************************************************
 * End of 'EXACT_MATCH_ACTION_TABLE_Bm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_DEFAULT_POLICY
 * BLOCKS:   IPIPE
 * SIZE:     84
 */
/*
 * These macros can be used to access EXACT_MATCH_DEFAULT_POLICY.
 */
#define READ_EXACT_MATCH_DEFAULT_POLICYm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EXACT_MATCH_DEFAULT_POLICYm_BLKACC,1,n,0,EXACT_MATCH_DEFAULT_POLICYm_OFFSET,i,(m._exact_match_default_policy),3)
#define WRITE_EXACT_MATCH_DEFAULT_POLICYm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_DEFAULT_POLICYm_BLKACC,1,n,0,EXACT_MATCH_DEFAULT_POLICYm_OFFSET,i,&(m._exact_match_default_policy),3)
#define WRITE_EXACT_MATCH_DEFAULT_POLICYm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_DEFAULT_POLICYm_BLKACC,1,-1,0,EXACT_MATCH_DEFAULT_POLICYm_OFFSET,i,&(m._exact_match_default_policy),3)

/*******************************************************************************
 * End of 'EXACT_MATCH_DEFAULT_POLICYm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_ECC
 * BLOCKS:   IPIPE
 * SIZE:     128
 */
/*
 * These macros can be used to access EXACT_MATCH_ECC.
 */
#define READ_EXACT_MATCH_ECCm(u,i,m) bcmbd_cmicx_mem_block_read(u,EXACT_MATCH_ECCm_BLKACC,1,EXACT_MATCH_ECCm_OFFSET,i,(m._exact_match_ecc),4)
#define WRITE_EXACT_MATCH_ECCm(u,i,m) bcmbd_cmicx_mem_block_write(u,EXACT_MATCH_ECCm_BLKACC,1,EXACT_MATCH_ECCm_OFFSET,i,&(m._exact_match_ecc),4)

/*******************************************************************************
 * End of 'EXACT_MATCH_ECCm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     24
 */
/*
 * These macros can be used to access EXACT_MATCH_HASH_CONTROL.
 */
#define READ_EXACT_MATCH_HASH_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,EXACT_MATCH_HASH_CONTROLm_BLKACC,1,EXACT_MATCH_HASH_CONTROLm_OFFSET,i,(m._exact_match_hash_control),1)
#define WRITE_EXACT_MATCH_HASH_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,EXACT_MATCH_HASH_CONTROLm_BLKACC,1,EXACT_MATCH_HASH_CONTROLm_OFFSET,i,&(m._exact_match_hash_control),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_HASH_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_HIT_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access EXACT_MATCH_HIT_ONLY.
 */
#define READ_EXACT_MATCH_HIT_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,EXACT_MATCH_HIT_ONLYm_BLKACC,1,EXACT_MATCH_HIT_ONLYm_OFFSET,i,(m._exact_match_hit_only),1)
#define WRITE_EXACT_MATCH_HIT_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,EXACT_MATCH_HIT_ONLYm_BLKACC,1,EXACT_MATCH_HIT_ONLYm_OFFSET,i,&(m._exact_match_hit_only),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_HIT_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_HT_DEBUG_CMD
 * BLOCKS:   IPIPE
 * SIZE:     3
 */
/*
 * These macros can be used to access EXACT_MATCH_HT_DEBUG_CMD.
 */
#define READ_EXACT_MATCH_HT_DEBUG_CMDm(u,i,m) bcmbd_cmicx_mem_block_read(u,EXACT_MATCH_HT_DEBUG_CMDm_BLKACC,1,EXACT_MATCH_HT_DEBUG_CMDm_OFFSET,i,(m._exact_match_ht_debug_cmd),1)
#define WRITE_EXACT_MATCH_HT_DEBUG_CMDm(u,i,m) bcmbd_cmicx_mem_block_write(u,EXACT_MATCH_HT_DEBUG_CMDm_BLKACC,1,EXACT_MATCH_HT_DEBUG_CMDm_OFFSET,i,&(m._exact_match_ht_debug_cmd),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_HT_DEBUG_CMDm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_HT_DEBUG_KEY
 * BLOCKS:   IPIPE
 * SIZE:     480
 */
/*
 * These macros can be used to access EXACT_MATCH_HT_DEBUG_KEY.
 */
#define READ_EXACT_MATCH_HT_DEBUG_KEYm(u,i,m) bcmbd_cmicx_mem_block_read(u,EXACT_MATCH_HT_DEBUG_KEYm_BLKACC,1,EXACT_MATCH_HT_DEBUG_KEYm_OFFSET,i,(m._exact_match_ht_debug_key),15)
#define WRITE_EXACT_MATCH_HT_DEBUG_KEYm(u,i,m) bcmbd_cmicx_mem_block_write(u,EXACT_MATCH_HT_DEBUG_KEYm_BLKACC,1,EXACT_MATCH_HT_DEBUG_KEYm_OFFSET,i,&(m._exact_match_ht_debug_key),15)

/*******************************************************************************
 * End of 'EXACT_MATCH_HT_DEBUG_KEYm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_HT_DEBUG_RESULT
 * BLOCKS:   IPIPE
 * SIZE:     139
 */
/*
 * These macros can be used to access EXACT_MATCH_HT_DEBUG_RESULT.
 */
#define READ_EXACT_MATCH_HT_DEBUG_RESULTm(u,i,m) bcmbd_cmicx_mem_block_read(u,EXACT_MATCH_HT_DEBUG_RESULTm_BLKACC,1,EXACT_MATCH_HT_DEBUG_RESULTm_OFFSET,i,(m._exact_match_ht_debug_result),5)
#define WRITE_EXACT_MATCH_HT_DEBUG_RESULTm(u,i,m) bcmbd_cmicx_mem_block_write(u,EXACT_MATCH_HT_DEBUG_RESULTm_BLKACC,1,EXACT_MATCH_HT_DEBUG_RESULTm_OFFSET,i,&(m._exact_match_ht_debug_result),5)

/*******************************************************************************
 * End of 'EXACT_MATCH_HT_DEBUG_RESULTm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_KEY_ATTRIBUTES
 * BLOCKS:   IPIPE
 * SIZE:     339
 */
/*
 * These macros can be used to access EXACT_MATCH_KEY_ATTRIBUTES.
 */
#define READ_EXACT_MATCH_KEY_ATTRIBUTESm(u,i,m) bcmbd_cmicx_mem_block_read(u,EXACT_MATCH_KEY_ATTRIBUTESm_BLKACC,1,EXACT_MATCH_KEY_ATTRIBUTESm_OFFSET,i,(m._exact_match_key_attributes),11)
#define WRITE_EXACT_MATCH_KEY_ATTRIBUTESm(u,i,m) bcmbd_cmicx_mem_block_write(u,EXACT_MATCH_KEY_ATTRIBUTESm_BLKACC,1,EXACT_MATCH_KEY_ATTRIBUTESm_OFFSET,i,&(m._exact_match_key_attributes),11)

/*******************************************************************************
 * End of 'EXACT_MATCH_KEY_ATTRIBUTESm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_KEY_BUFFER
 * BLOCKS:   IPIPE
 * SIZE:     480
 */
/*
 * These macros can be used to access EXACT_MATCH_KEY_BUFFER.
 */
#define READ_EXACT_MATCH_KEY_BUFFERm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EXACT_MATCH_KEY_BUFFERm_BLKACC,1,n,0,EXACT_MATCH_KEY_BUFFERm_OFFSET,i,(m._exact_match_key_buffer),15)
#define WRITE_EXACT_MATCH_KEY_BUFFERm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_KEY_BUFFERm_BLKACC,1,n,0,EXACT_MATCH_KEY_BUFFERm_OFFSET,i,&(m._exact_match_key_buffer),15)
#define WRITE_EXACT_MATCH_KEY_BUFFERm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_KEY_BUFFERm_BLKACC,1,-1,0,EXACT_MATCH_KEY_BUFFERm_OFFSET,i,&(m._exact_match_key_buffer),15)

/*******************************************************************************
 * End of 'EXACT_MATCH_KEY_BUFFERm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_KEY_GEN_MASK
 * BLOCKS:   IPIPE
 * SIZE:     160
 */
/*
 * These macros can be used to access EXACT_MATCH_KEY_GEN_MASK.
 */
#define READ_EXACT_MATCH_KEY_GEN_MASKm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EXACT_MATCH_KEY_GEN_MASKm_BLKACC,1,n,0,EXACT_MATCH_KEY_GEN_MASKm_OFFSET,i,(m._exact_match_key_gen_mask),5)
#define WRITE_EXACT_MATCH_KEY_GEN_MASKm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_KEY_GEN_MASKm_BLKACC,1,n,0,EXACT_MATCH_KEY_GEN_MASKm_OFFSET,i,&(m._exact_match_key_gen_mask),5)
#define WRITE_EXACT_MATCH_KEY_GEN_MASKm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_KEY_GEN_MASKm_BLKACC,1,-1,0,EXACT_MATCH_KEY_GEN_MASKm_OFFSET,i,&(m._exact_match_key_gen_mask),5)

/*******************************************************************************
 * End of 'EXACT_MATCH_KEY_GEN_MASKm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_KEY_GEN_PROGRAM_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     327
 */
/*
 * These macros can be used to access EXACT_MATCH_KEY_GEN_PROGRAM_PROFILE.
 */
#define READ_EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm_BLKACC,1,n,0,EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm_OFFSET,i,(m._exact_match_key_gen_program_profile),11)
#define WRITE_EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm_BLKACC,1,n,0,EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm_OFFSET,i,&(m._exact_match_key_gen_program_profile),11)
#define WRITE_EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm_BLKACC,1,-1,0,EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm_OFFSET,i,&(m._exact_match_key_gen_program_profile),11)

/*******************************************************************************
 * End of 'EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_LOGICAL_TABLE_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     234
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECTm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECTm_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECTm_OFFSET,i,(m._exact_match_logical_table_select),8)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECTm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECTm_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECTm_OFFSET,i,&(m._exact_match_logical_table_select),8)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECTm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECTm_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECTm_OFFSET,i,&(m._exact_match_logical_table_select),8)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECTm'
 */




/*******************************************************************************
 * REGISTER:  EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r_OFFSET,0,(r._exact_match_logical_table_select_cam_bist_config_1_64),2)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._exact_match_logical_table_select_cam_bist_config_1_64),2)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._exact_match_logical_table_select_cam_bist_config_1_64),2)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r'
 */




/*******************************************************************************
 * REGISTER:  EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r_OFFSET,0,(r._exact_match_logical_table_select_cam_bist_config_64),2)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._exact_match_logical_table_select_cam_bist_config_64),2)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._exact_match_logical_table_select_cam_bist_config_64),2)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUS.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_OFFSET,0,(r._exact_match_logical_table_select_cam_bist_status),1)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_OFFSET,0,&(r._exact_match_logical_table_select_cam_bist_status),1)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_OFFSET,0,&(r._exact_match_logical_table_select_cam_bist_status),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRL.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_OFFSET,0,(r._exact_match_logical_table_select_cam_dbgctrl),2)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_OFFSET,0,&(r._exact_match_logical_table_select_cam_dbgctrl),2)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_OFFSET,0,&(r._exact_match_logical_table_select_cam_dbgctrl),2)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIG.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr_OFFSET,0,(r._exact_match_logical_table_select_config),1)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr_OFFSET,0,&(r._exact_match_logical_table_select_config),1)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr_BLKACC&(~(0x1f<<18))|(17<<18),1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr_OFFSET,0,&(r._exact_match_logical_table_select_config),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     56
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLY.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm_OFFSET,i,(m._exact_match_logical_table_select_data_only),2)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm_OFFSET,i,&(m._exact_match_logical_table_select_data_only),2)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm_OFFSET,i,&(m._exact_match_logical_table_select_data_only),2)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     178
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLY.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm_OFFSET,i,(m._exact_match_logical_table_select_tcam_only),6)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm_OFFSET,i,&(m._exact_match_logical_table_select_tcam_only),6)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm_OFFSET,i,&(m._exact_match_logical_table_select_tcam_only),6)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm'
 */




/*******************************************************************************
 * REGISTER:  EXACT_MATCH_LOGICAL_TABLE_SELECT_TM
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_TM.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_TMr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_TMr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_TMr_OFFSET,0,(r._exact_match_logical_table_select_tm),2)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_TMr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_TMr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_TMr_OFFSET,0,&(r._exact_match_logical_table_select_tm),2)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_TMr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_TMr_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_TMr_OFFSET,0,&(r._exact_match_logical_table_select_tm),2)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_TMr'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_QOS_ACTIONS_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     117
 */
/*
 * These macros can be used to access EXACT_MATCH_QOS_ACTIONS_PROFILE.
 */
#define READ_EXACT_MATCH_QOS_ACTIONS_PROFILEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,EXACT_MATCH_QOS_ACTIONS_PROFILEm_BLKACC,1,n,0,EXACT_MATCH_QOS_ACTIONS_PROFILEm_OFFSET,i,(m._exact_match_qos_actions_profile),4)
#define WRITE_EXACT_MATCH_QOS_ACTIONS_PROFILEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_QOS_ACTIONS_PROFILEm_BLKACC,1,n,0,EXACT_MATCH_QOS_ACTIONS_PROFILEm_OFFSET,i,&(m._exact_match_qos_actions_profile),4)
#define WRITE_EXACT_MATCH_QOS_ACTIONS_PROFILEm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,EXACT_MATCH_QOS_ACTIONS_PROFILEm_BLKACC,1,-1,0,EXACT_MATCH_QOS_ACTIONS_PROFILEm_OFFSET,i,&(m._exact_match_qos_actions_profile),4)

/*******************************************************************************
 * End of 'EXACT_MATCH_QOS_ACTIONS_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_REMAP_TABLE_A
 * BLOCKS:   IPIPE
 * SIZE:     12
 */
/*
 * These macros can be used to access EXACT_MATCH_REMAP_TABLE_A.
 */
#define READ_EXACT_MATCH_REMAP_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_read(u,EXACT_MATCH_REMAP_TABLE_Am_BLKACC,1,EXACT_MATCH_REMAP_TABLE_Am_OFFSET,i,(m._exact_match_remap_table_a),1)
#define WRITE_EXACT_MATCH_REMAP_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_write(u,EXACT_MATCH_REMAP_TABLE_Am_BLKACC,1,EXACT_MATCH_REMAP_TABLE_Am_OFFSET,i,&(m._exact_match_remap_table_a),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_REMAP_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_REMAP_TABLE_B
 * BLOCKS:   IPIPE
 * SIZE:     12
 */
/*
 * These macros can be used to access EXACT_MATCH_REMAP_TABLE_B.
 */
#define READ_EXACT_MATCH_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_read(u,EXACT_MATCH_REMAP_TABLE_Bm_BLKACC,1,EXACT_MATCH_REMAP_TABLE_Bm_OFFSET,i,(m._exact_match_remap_table_b),1)
#define WRITE_EXACT_MATCH_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_write(u,EXACT_MATCH_REMAP_TABLE_Bm_BLKACC,1,EXACT_MATCH_REMAP_TABLE_Bm_OFFSET,i,&(m._exact_match_remap_table_b),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_REMAP_TABLE_Bm'
 */




/*******************************************************************************
 * MEMORY:  E_MIRROR_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     12
 */
/*
 * These macros can be used to access E_MIRROR_CONTROL.
 */
#define READ_E_MIRROR_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,E_MIRROR_CONTROLm_BLKACC,1,E_MIRROR_CONTROLm_OFFSET,i,(m._e_mirror_control),1)
#define WRITE_E_MIRROR_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,E_MIRROR_CONTROLm_BLKACC,1,E_MIRROR_CONTROLm_OFFSET,i,&(m._e_mirror_control),1)

/*******************************************************************************
 * End of 'E_MIRROR_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  FAST_TRUNK_PORTS_1
 * BLOCKS:   IPIPE
 * SIZE:     306
 */
/*
 * These macros can be used to access FAST_TRUNK_PORTS_1.
 */
#define READ_FAST_TRUNK_PORTS_1m(u,i,m) bcmbd_cmicx_mem_block_read(u,FAST_TRUNK_PORTS_1m_BLKACC,1,FAST_TRUNK_PORTS_1m_OFFSET,i,(m._fast_trunk_ports_1),10)
#define WRITE_FAST_TRUNK_PORTS_1m(u,i,m) bcmbd_cmicx_mem_block_write(u,FAST_TRUNK_PORTS_1m_BLKACC,1,FAST_TRUNK_PORTS_1m_OFFSET,i,&(m._fast_trunk_ports_1),10)

/*******************************************************************************
 * End of 'FAST_TRUNK_PORTS_1m'
 */




/*******************************************************************************
 * MEMORY:  FAST_TRUNK_PORTS_2
 * BLOCKS:   IPIPE
 * SIZE:     298
 */
/*
 * These macros can be used to access FAST_TRUNK_PORTS_2.
 */
#define READ_FAST_TRUNK_PORTS_2m(u,i,m) bcmbd_cmicx_mem_block_read(u,FAST_TRUNK_PORTS_2m_BLKACC,1,FAST_TRUNK_PORTS_2m_OFFSET,i,(m._fast_trunk_ports_2),10)
#define WRITE_FAST_TRUNK_PORTS_2m(u,i,m) bcmbd_cmicx_mem_block_write(u,FAST_TRUNK_PORTS_2m_BLKACC,1,FAST_TRUNK_PORTS_2m_OFFSET,i,&(m._fast_trunk_ports_2),10)

/*******************************************************************************
 * End of 'FAST_TRUNK_PORTS_2m'
 */




/*******************************************************************************
 * MEMORY:  FAST_TRUNK_SIZE
 * BLOCKS:   IPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access FAST_TRUNK_SIZE.
 */
#define READ_FAST_TRUNK_SIZEm(u,i,m) bcmbd_cmicx_mem_block_read(u,FAST_TRUNK_SIZEm_BLKACC,1,FAST_TRUNK_SIZEm_OFFSET,i,(m._fast_trunk_size),1)
#define WRITE_FAST_TRUNK_SIZEm(u,i,m) bcmbd_cmicx_mem_block_write(u,FAST_TRUNK_SIZEm_BLKACC,1,FAST_TRUNK_SIZEm_OFFSET,i,&(m._fast_trunk_size),1)

/*******************************************************************************
 * End of 'FAST_TRUNK_SIZEm'
 */




/*******************************************************************************
 * REGISTER:  FIFO_COUNT_SEL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FIFO_COUNT_SEL.
 */
#define READ_FIFO_COUNT_SELr(u,r) bcmbd_cmicx_reg_block_read(u,FIFO_COUNT_SELr_BLKACC,1,FIFO_COUNT_SELr_OFFSET,0,(r._fifo_count_sel), 1)
#define WRITE_FIFO_COUNT_SELr(u,r) bcmbd_cmicx_reg_block_write(u,FIFO_COUNT_SELr_BLKACC,1,FIFO_COUNT_SELr_OFFSET,0,&(r._fifo_count_sel), 1)

/*******************************************************************************
 * End of 'FIFO_COUNT_SELr'
 */




/*******************************************************************************
 * REGISTER:  FLEXIBLE_IPV6_EXT_HDR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEXIBLE_IPV6_EXT_HDR.
 */
#define READ_FLEXIBLE_IPV6_EXT_HDRr(u,r) bcmbd_cmicx_reg_block_read(u,FLEXIBLE_IPV6_EXT_HDRr_BLKACC,1,FLEXIBLE_IPV6_EXT_HDRr_OFFSET,0,(r._flexible_ipv6_ext_hdr), 1)
#define WRITE_FLEXIBLE_IPV6_EXT_HDRr(u,r) bcmbd_cmicx_reg_block_write(u,FLEXIBLE_IPV6_EXT_HDRr_BLKACC,1,FLEXIBLE_IPV6_EXT_HDRr_OFFSET,0,&(r._flexible_ipv6_ext_hdr), 1)

/*******************************************************************************
 * End of 'FLEXIBLE_IPV6_EXT_HDRr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_action_enable_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_action_enable_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_action_enable_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_action_enable_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_action_enable_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_action_enable_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_ACTION_ENABLE_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     126
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_action_table_0_inst0),4)
#define WRITE_FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_action_table_0_inst0),4)
#define WRITE_FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_action_table_0_inst0),4)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     126
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_action_table_0_inst1),4)
#define WRITE_FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_action_table_0_inst1),4)
#define WRITE_FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_action_table_0_inst1),4)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_ACTION_TABLE_0_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     21
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_action_table_1_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_action_table_1_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_action_table_1_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     21
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_action_table_1_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_action_table_1_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_action_table_1_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_ACTION_TABLE_1_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_0_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_0_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_0_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_0_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_0_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_0_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_0_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_1_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_1_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_1_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_1_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_1_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_1_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_1_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_2_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_2_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_2_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_2_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_2_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_2_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_2_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_3_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_3_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_3_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_3_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_3_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_3_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_3_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_4_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_4_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_4_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_4_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_4_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_4_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_4_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_5_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_5_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_5_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_5_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_5_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_5_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_5_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_6_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_6_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_6_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_6_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_6_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_6_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_6_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_7_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_7_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_7_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     87
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_eop_buffer_7_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_7_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_eop_buffer_7_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_EOP_BUFFER_7_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     26
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_op_profile_table_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_op_profile_table_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_op_profile_table_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     26
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_op_profile_table_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_op_profile_table_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_op_profile_table_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_OP_PROFILE_TABLE_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_pool_shadow_pool_map_enable_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_pool_shadow_pool_map_enable_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_pool_shadow_pool_map_enable_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_pool_shadow_pool_map_enable_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_pool_shadow_pool_map_enable_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_pool_shadow_pool_map_enable_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     3
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_pool_shadow_pool_map_table_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_pool_shadow_pool_map_table_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_pool_shadow_pool_map_table_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     3
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_pool_shadow_pool_map_table_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_pool_shadow_pool_map_table_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_pool_shadow_pool_map_table_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_0_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_0_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_0_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_table_0_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_0_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_0_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_0_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_0_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_0_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_0_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_0_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_0_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_0_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_0_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_0_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_table_0_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_0_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_0_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_0_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_0_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_0_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_0_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_0_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_0_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_table_0_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_table_0_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_table_0_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_table_0_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_0_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_1_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_1_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_1_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_table_1_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_1_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_1_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_1_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_1_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_1_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_1_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_1_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_1_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_1_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_1_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_1_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_table_1_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_1_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_1_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_1_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_1_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_1_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_1_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_1_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_1_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_table_1_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_table_1_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_table_1_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_table_1_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_1_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_2_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_2_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_2_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_table_2_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_2_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_2_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_2_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_2_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_2_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_2_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_2_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_2_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_2_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_2_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_2_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_table_2_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_2_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_2_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_2_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_2_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_2_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_2_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_2_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_2_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_table_2_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_table_2_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_table_2_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_table_2_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_2_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_3_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_3_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_3_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_3_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_table_3_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_3_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_3_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_3_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_3_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_3_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_3_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_3_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_3_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_3_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_3_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_3_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_3_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_3_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_table_3_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_3_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_3_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_3_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_3_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_3_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_3_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_3_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_3_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_3_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_table_3_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_table_3_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_table_3_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_table_3_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_3_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_4_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_4_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_4_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_4_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_table_4_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_4_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_4_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_4_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_4_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_4_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_4_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_4_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_4_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_4_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_4_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_4_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_4_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_4_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_table_4_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_4_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_4_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_4_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_4_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_4_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_4_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_4_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_4_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_4_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_table_4_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_table_4_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_table_4_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_table_4_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_4_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_5_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_5_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_5_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_5_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_table_5_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_5_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_5_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_5_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_5_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_5_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_5_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_5_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_5_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_5_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_5_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_5_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_5_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_5_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_table_5_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_5_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_5_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_5_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_5_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_5_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_5_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_5_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_5_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_5_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_table_5_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_table_5_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_table_5_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_table_5_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_5_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_6_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_6_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_6_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_6_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_table_6_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_6_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_6_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_6_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_6_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_6_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_6_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_6_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_6_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_6_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_6_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_6_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_6_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_6_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_table_6_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_6_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_6_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_6_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_6_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_6_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_6_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_6_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_6_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_6_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_table_6_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_table_6_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_table_6_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_table_6_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_6_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_7_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_7_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_7_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_7_INST0m_OFFSET,i,(m._flex_ctr_egr_counter_table_7_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_7_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_7_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_7_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_7_inst0),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_7_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_7_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_7_INST0m_OFFSET,i,&(m._flex_ctr_egr_counter_table_7_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_7_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_COUNTER_TABLE_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_7_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_7_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_7_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_7_INST1m_OFFSET,i,(m._flex_ctr_egr_counter_table_7_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_7_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_7_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TABLE_7_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_7_inst1),3)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_7_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_7_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TABLE_7_INST1m_OFFSET,i,&(m._flex_ctr_egr_counter_table_7_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_7_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_table_7_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_table_7_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_table_7_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_table_7_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TABLE_7_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_active_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_active_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_active_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_active_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_active_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_active_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_ACTIVE_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_0_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_0_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_0_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_0_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_0_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_0_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_10_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_10_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_10_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_10_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_10_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_10_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_10_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_11_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_11_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_11_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_11_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_11_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_11_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_11_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_12_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_12_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_12_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_12_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_12_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_12_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_12_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_13_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_13_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_13_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_13_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_13_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_13_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_13_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_14_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_14_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_14_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_14_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_14_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_14_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_14_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_15_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_15_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_15_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_15_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_15_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_15_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_15_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_1_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_1_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_1_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_1_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_1_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_1_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_2_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_2_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_2_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_2_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_2_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_2_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_3_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_3_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_3_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_3_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_3_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_3_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_4_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_4_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_4_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_4_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_4_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_4_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_4_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_5_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_5_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_5_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_5_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_5_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_5_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_5_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_6_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_6_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_6_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_6_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_6_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_6_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_6_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_7_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_7_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_7_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_7_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_7_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_7_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_7_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_8_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_8_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_8_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_8_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_8_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_8_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_8_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_9_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_9_inst0),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_9_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_trigger_state_9_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_9_inst1),2)
#define WRITE_FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_trigger_state_9_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_TRIGGER_STATE_9_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_0_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_0_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_0_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_0_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_0_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_0_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_1_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_1_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_1_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_1_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_1_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_1_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_2_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_2_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_2_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_2_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_2_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_2_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_3_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_3_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_3_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_3_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_3_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_3_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_4_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_4_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_4_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_4_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_4_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_4_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_4_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_5_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_5_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_5_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_5_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_5_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_5_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_5_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_6_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_6_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_6_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_6_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_6_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_6_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_6_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST0.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST0r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_7_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_7_inst0),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_7_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST1.
 */
#define READ_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST1r_OFFSET,0,(r._flex_ctr_egr_counter_update_control_pool_7_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_7_inst1),1)
#define WRITE_FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_egr_counter_update_control_pool_7_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_COUNTER_UPDATE_CONTROL_POOL_7_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_0_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_0_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_0_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_0_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_0_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_0_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_1_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_1_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_1_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_1_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_1_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_1_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_2_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_2_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_2_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_2_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_2_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_2_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_3_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_3_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_3_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_3_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_3_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_3_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_4_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_4_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_4_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_4_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_4_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_4_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_5_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_5_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_5_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_5_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_5_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_5_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_6_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_6_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_6_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_6_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_6_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_6_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_7_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_7_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_7_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_7_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_7_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_a_threshold_pool_7_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_0_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_0_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_0_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_0_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_0_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_0_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_1_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_1_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_1_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_1_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_1_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_1_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_2_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_2_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_2_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_2_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_2_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_2_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_3_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_3_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_3_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_3_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_3_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_3_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_4_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_4_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_4_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_4_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_4_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_4_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_5_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_5_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_5_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_5_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_5_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_5_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_6_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_6_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_6_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_6_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_6_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_6_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_7_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_7_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_7_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_7_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_7_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_cmd_b_threshold_pool_7_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_0_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_0_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_0_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_0_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_0_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_0_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_1_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_1_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_1_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_1_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_1_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_1_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_2_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_2_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_2_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_2_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_2_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_2_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_3_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_3_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_3_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_3_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_3_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_3_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_4_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_4_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_4_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_4_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_4_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_4_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_4_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_5_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_5_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_5_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_5_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_5_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_5_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_5_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_6_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_6_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_6_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_6_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_6_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_6_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_6_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_7_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_7_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_7_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_control_pool_7_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_7_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_control_pool_7_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_CONTROL_POOL_7_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_0_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_0_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_0_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_0_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_0_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_0_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_1_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_1_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_1_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_1_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_1_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_1_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_2_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_2_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_2_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_2_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_2_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_2_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_3_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_3_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_3_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_3_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_3_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_3_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_4_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_4_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_4_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_4_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_4_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_4_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_4_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_5_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_5_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_5_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_5_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_5_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_5_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_5_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_6_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_6_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_6_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_6_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_6_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_6_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_6_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_7_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_7_inst0),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_7_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_fail_pool_7_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_7_inst1),1)
#define WRITE_FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_fail_pool_7_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_FAIL_POOL_7_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_0_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_0_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_0_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_0_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_0_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_0_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_1_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_1_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_1_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_1_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_1_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_1_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_2_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_2_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_2_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_2_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_2_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_2_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_3_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_3_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_3_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_3_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_3_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_3_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_4_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_4_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_4_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_4_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_4_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_4_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_4_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_5_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_5_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_5_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_5_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_5_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_5_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_5_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_6_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_6_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_6_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_6_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_6_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_6_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_6_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST0.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST0r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_7_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_7_inst0),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_7_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST1.
 */
#define READ_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST1r_OFFSET,0,(r._flex_ctr_egr_eviction_lfsr_seed_pool_7_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_7_inst1),2)
#define WRITE_FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_egr_eviction_lfsr_seed_pool_7_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_EVICTION_LFSR_SEED_POOL_7_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST0.
 */
#define READ_FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST0r_OFFSET,0,(r._flex_ctr_egr_fc_action_misconfig_counter_inst0),2)
#define WRITE_FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST0r_OFFSET,0,&(r._flex_ctr_egr_fc_action_misconfig_counter_inst0),2)
#define WRITE_FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST0r_OFFSET,0,&(r._flex_ctr_egr_fc_action_misconfig_counter_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST1.
 */
#define READ_FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST1r_OFFSET,0,(r._flex_ctr_egr_fc_action_misconfig_counter_inst1),2)
#define WRITE_FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST1r_OFFSET,0,&(r._flex_ctr_egr_fc_action_misconfig_counter_inst1),2)
#define WRITE_FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST1r_OFFSET,0,&(r._flex_ctr_egr_fc_action_misconfig_counter_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_FC_ACTION_MISCONFIG_COUNTER_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST0.
 */
#define READ_FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST0r_OFFSET,0,(r._flex_ctr_egr_fc_too_many_actions_counter_inst0),2)
#define WRITE_FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST0r_OFFSET,0,&(r._flex_ctr_egr_fc_too_many_actions_counter_inst0),2)
#define WRITE_FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST0r_OFFSET,0,&(r._flex_ctr_egr_fc_too_many_actions_counter_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST1.
 */
#define READ_FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST1r_OFFSET,0,(r._flex_ctr_egr_fc_too_many_actions_counter_inst1),2)
#define WRITE_FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST1r_OFFSET,0,&(r._flex_ctr_egr_fc_too_many_actions_counter_inst1),2)
#define WRITE_FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST1r_OFFSET,0,&(r._flex_ctr_egr_fc_too_many_actions_counter_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_FC_TOO_MANY_ACTIONS_COUNTER_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_0_INST0.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_0_INST0r_OFFSET,0,(r._flex_ctr_egr_group_action_0_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_0_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_0_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_0_INST1.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_0_INST1r_OFFSET,0,(r._flex_ctr_egr_group_action_0_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_0_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_0_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_1_INST0.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_1_INST0r_OFFSET,0,(r._flex_ctr_egr_group_action_1_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_1_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_1_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_1_INST1.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_1_INST1r_OFFSET,0,(r._flex_ctr_egr_group_action_1_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_1_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_1_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_2_INST0.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_2_INST0r_OFFSET,0,(r._flex_ctr_egr_group_action_2_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_2_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_2_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_2_INST1.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_2_INST1r_OFFSET,0,(r._flex_ctr_egr_group_action_2_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_2_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_2_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_3_INST0.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_3_INST0r_OFFSET,0,(r._flex_ctr_egr_group_action_3_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_3_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_3_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_3_INST1.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_3_INST1r_OFFSET,0,(r._flex_ctr_egr_group_action_3_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_3_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_3_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST0.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST0r_OFFSET,0,(r._flex_ctr_egr_group_action_bitmap_0_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_0_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_0_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST1.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST1r_OFFSET,0,(r._flex_ctr_egr_group_action_bitmap_0_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_0_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_0_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_BITMAP_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST0.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST0r_OFFSET,0,(r._flex_ctr_egr_group_action_bitmap_1_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_1_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_1_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST1.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST1r_OFFSET,0,(r._flex_ctr_egr_group_action_bitmap_1_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_1_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_1_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_BITMAP_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST0.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST0r_OFFSET,0,(r._flex_ctr_egr_group_action_bitmap_2_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_2_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_2_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST1.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST1r_OFFSET,0,(r._flex_ctr_egr_group_action_bitmap_2_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_2_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_2_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_BITMAP_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST0.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST0r_OFFSET,0,(r._flex_ctr_egr_group_action_bitmap_3_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_3_inst0),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST0r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_3_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST1.
 */
#define READ_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST1r_OFFSET,0,(r._flex_ctr_egr_group_action_bitmap_3_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_3_inst1),1)
#define WRITE_FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST1r_OFFSET,0,&(r._flex_ctr_egr_group_action_bitmap_3_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_GROUP_ACTION_BITMAP_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_INTR_ENABLE
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_INTR_ENABLE.
 */
#define READ_FLEX_CTR_EGR_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_EGR_INTR_ENABLEr_BLKACC,88,FLEX_CTR_EGR_INTR_ENABLEr_OFFSET,0,(r._flex_ctr_egr_intr_enable), 1)
#define WRITE_FLEX_CTR_EGR_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_EGR_INTR_ENABLEr_BLKACC,88,FLEX_CTR_EGR_INTR_ENABLEr_OFFSET,0,&(r._flex_ctr_egr_intr_enable), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_INTR_STATUS
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_INTR_STATUS.
 */
#define READ_FLEX_CTR_EGR_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_INTR_STATUSr_BLKACC,88,n,0,FLEX_CTR_EGR_INTR_STATUSr_OFFSET,0,(r._flex_ctr_egr_intr_status),1)
#define WRITE_FLEX_CTR_EGR_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_INTR_STATUSr_BLKACC,88,n,0,FLEX_CTR_EGR_INTR_STATUSr_OFFSET,0,&(r._flex_ctr_egr_intr_status),1)
#define WRITE_FLEX_CTR_EGR_INTR_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_INTR_STATUSr_BLKACC,88,-1,0,FLEX_CTR_EGR_INTR_STATUSr_OFFSET,0,&(r._flex_ctr_egr_intr_status),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_MEM_RST_CTRL
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_MEM_RST_CTRL.
 */
#define READ_FLEX_CTR_EGR_MEM_RST_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_MEM_RST_CTRLr_BLKACC,88,n,0,FLEX_CTR_EGR_MEM_RST_CTRLr_OFFSET,0,(r._flex_ctr_egr_mem_rst_ctrl),1)
#define WRITE_FLEX_CTR_EGR_MEM_RST_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_MEM_RST_CTRLr_BLKACC,88,n,0,FLEX_CTR_EGR_MEM_RST_CTRLr_OFFSET,0,&(r._flex_ctr_egr_mem_rst_ctrl),1)
#define WRITE_FLEX_CTR_EGR_MEM_RST_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_MEM_RST_CTRLr_BLKACC,88,-1,0,FLEX_CTR_EGR_MEM_RST_CTRLr_OFFSET,0,&(r._flex_ctr_egr_mem_rst_ctrl),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_MEM_RST_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_MEM_RST_STATUS
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_MEM_RST_STATUS.
 */
#define READ_FLEX_CTR_EGR_MEM_RST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_MEM_RST_STATUSr_BLKACC,88,n,0,FLEX_CTR_EGR_MEM_RST_STATUSr_OFFSET,0,(r._flex_ctr_egr_mem_rst_status),1)
#define WRITE_FLEX_CTR_EGR_MEM_RST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_MEM_RST_STATUSr_BLKACC,88,n,0,FLEX_CTR_EGR_MEM_RST_STATUSr_OFFSET,0,&(r._flex_ctr_egr_mem_rst_status),1)
#define WRITE_FLEX_CTR_EGR_MEM_RST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_MEM_RST_STATUSr_BLKACC,88,-1,0,FLEX_CTR_EGR_MEM_RST_STATUSr_OFFSET,0,&(r._flex_ctr_egr_mem_rst_status),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_MEM_RST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_MISC_CTRL
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_MISC_CTRL.
 */
#define READ_FLEX_CTR_EGR_MISC_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_MISC_CTRLr_BLKACC,88,n,0,FLEX_CTR_EGR_MISC_CTRLr_OFFSET,0,(r._flex_ctr_egr_misc_ctrl),1)
#define WRITE_FLEX_CTR_EGR_MISC_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_MISC_CTRLr_BLKACC,88,n,0,FLEX_CTR_EGR_MISC_CTRLr_OFFSET,0,&(r._flex_ctr_egr_misc_ctrl),1)
#define WRITE_FLEX_CTR_EGR_MISC_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_MISC_CTRLr_BLKACC,88,-1,0,FLEX_CTR_EGR_MISC_CTRLr_OFFSET,0,&(r._flex_ctr_egr_misc_ctrl),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_MISC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST0.
 */
#define READ_FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST0r_OFFSET,0,(r._flex_ctr_egr_object_quantization_ctrl_inst0),1)
#define WRITE_FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST0r_OFFSET,0,&(r._flex_ctr_egr_object_quantization_ctrl_inst0),1)
#define WRITE_FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST0r_OFFSET,0,&(r._flex_ctr_egr_object_quantization_ctrl_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST1.
 */
#define READ_FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST1r_OFFSET,0,(r._flex_ctr_egr_object_quantization_ctrl_inst1),1)
#define WRITE_FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST1r_OFFSET,0,&(r._flex_ctr_egr_object_quantization_ctrl_inst1),1)
#define WRITE_FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST1r_OFFSET,0,&(r._flex_ctr_egr_object_quantization_ctrl_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_OBJECT_QUANTIZATION_CTRL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0.
 */
#define READ_FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m_OFFSET,i,(m._flex_ctr_egr_object_quantization_range_check_config_inst0),1)
#define WRITE_FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m_BLKACC,88,n,0,FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m_OFFSET,i,&(m._flex_ctr_egr_object_quantization_range_check_config_inst0),1)
#define WRITE_FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m_BLKACC,88,-1,0,FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m_OFFSET,i,&(m._flex_ctr_egr_object_quantization_range_check_config_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1.
 */
#define READ_FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m_OFFSET,i,(m._flex_ctr_egr_object_quantization_range_check_config_inst1),1)
#define WRITE_FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m_BLKACC,88,n,0,FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m_OFFSET,i,&(m._flex_ctr_egr_object_quantization_range_check_config_inst1),1)
#define WRITE_FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m_BLKACC,88,-1,0,FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m_OFFSET,i,&(m._flex_ctr_egr_object_quantization_range_check_config_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_RAM_TM_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_RAM_TM_CONTROL_INST0.
 */
#define READ_FLEX_CTR_EGR_RAM_TM_CONTROL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_RAM_TM_CONTROL_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_RAM_TM_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_egr_ram_tm_control_inst0),2)
#define WRITE_FLEX_CTR_EGR_RAM_TM_CONTROL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_RAM_TM_CONTROL_INST0r_BLKACC,88,n,0,FLEX_CTR_EGR_RAM_TM_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_egr_ram_tm_control_inst0),2)
#define WRITE_FLEX_CTR_EGR_RAM_TM_CONTROL_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_RAM_TM_CONTROL_INST0r_BLKACC,88,-1,0,FLEX_CTR_EGR_RAM_TM_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_egr_ram_tm_control_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_RAM_TM_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_RAM_TM_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_RAM_TM_CONTROL_INST1.
 */
#define READ_FLEX_CTR_EGR_RAM_TM_CONTROL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_RAM_TM_CONTROL_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_RAM_TM_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_egr_ram_tm_control_inst1),2)
#define WRITE_FLEX_CTR_EGR_RAM_TM_CONTROL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_RAM_TM_CONTROL_INST1r_BLKACC,88,n,0,FLEX_CTR_EGR_RAM_TM_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_egr_ram_tm_control_inst1),2)
#define WRITE_FLEX_CTR_EGR_RAM_TM_CONTROL_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_RAM_TM_CONTROL_INST1r_BLKACC,88,-1,0,FLEX_CTR_EGR_RAM_TM_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_egr_ram_tm_control_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_RAM_TM_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_EGR_SER_FIFO
 * BLOCKS:   FLEX_CTR
 * SIZE:     50
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_SER_FIFO.
 */
#define READ_FLEX_CTR_EGR_SER_FIFOm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_EGR_SER_FIFOm_BLKACC,88,n,0,FLEX_CTR_EGR_SER_FIFOm_OFFSET,i,(m._flex_ctr_egr_ser_fifo),2)
#define WRITE_FLEX_CTR_EGR_SER_FIFOm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_SER_FIFOm_BLKACC,88,n,0,FLEX_CTR_EGR_SER_FIFOm_OFFSET,i,&(m._flex_ctr_egr_ser_fifo),2)
#define WRITE_FLEX_CTR_EGR_SER_FIFOm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_EGR_SER_FIFOm_BLKACC,88,-1,0,FLEX_CTR_EGR_SER_FIFOm_OFFSET,i,&(m._flex_ctr_egr_ser_fifo),2)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_SER_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_SER_FIFO_CTRL
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_SER_FIFO_CTRL.
 */
#define READ_FLEX_CTR_EGR_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_SER_FIFO_CTRLr_BLKACC,88,n,0,FLEX_CTR_EGR_SER_FIFO_CTRLr_OFFSET,0,(r._flex_ctr_egr_ser_fifo_ctrl),1)
#define WRITE_FLEX_CTR_EGR_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_SER_FIFO_CTRLr_BLKACC,88,n,0,FLEX_CTR_EGR_SER_FIFO_CTRLr_OFFSET,0,&(r._flex_ctr_egr_ser_fifo_ctrl),1)
#define WRITE_FLEX_CTR_EGR_SER_FIFO_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_SER_FIFO_CTRLr_BLKACC,88,-1,0,FLEX_CTR_EGR_SER_FIFO_CTRLr_OFFSET,0,&(r._flex_ctr_egr_ser_fifo_ctrl),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_SER_FIFO_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_EGR_SER_FIFO_STATUS
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_EGR_SER_FIFO_STATUS.
 */
#define READ_FLEX_CTR_EGR_SER_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_EGR_SER_FIFO_STATUSr_BLKACC,88,n,0,FLEX_CTR_EGR_SER_FIFO_STATUSr_OFFSET,0,(r._flex_ctr_egr_ser_fifo_status),1)
#define WRITE_FLEX_CTR_EGR_SER_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_SER_FIFO_STATUSr_BLKACC,88,n,0,FLEX_CTR_EGR_SER_FIFO_STATUSr_OFFSET,0,&(r._flex_ctr_egr_ser_fifo_status),1)
#define WRITE_FLEX_CTR_EGR_SER_FIFO_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_EGR_SER_FIFO_STATUSr_BLKACC,88,-1,0,FLEX_CTR_EGR_SER_FIFO_STATUSr_OFFSET,0,&(r._flex_ctr_egr_ser_fifo_status),1)

/*******************************************************************************
 * End of 'FLEX_CTR_EGR_SER_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_action_enable_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_action_enable_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_action_enable_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_action_enable_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_action_enable_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_action_enable_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_ACTION_ENABLE_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     127
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_action_table_0_inst0),4)
#define WRITE_FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_action_table_0_inst0),4)
#define WRITE_FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_action_table_0_inst0),4)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     127
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_action_table_0_inst1),4)
#define WRITE_FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_action_table_0_inst1),4)
#define WRITE_FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_action_table_0_inst1),4)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_ACTION_TABLE_0_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     21
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_action_table_1_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_action_table_1_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_action_table_1_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     21
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_action_table_1_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_action_table_1_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_action_table_1_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_ACTION_TABLE_1_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_0_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_0_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_0_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_0_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_0_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_0_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_0_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_10_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_10_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_10_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_10_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_10_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_10_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_10_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_11_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_11_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_11_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_11_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_11_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_11_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_11_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_1_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_1_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_1_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_1_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_1_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_1_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_1_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_2_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_2_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_2_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_2_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_2_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_2_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_2_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_3_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_3_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_3_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_3_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_3_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_3_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_3_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_4_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_4_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_4_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_4_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_4_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_4_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_4_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_5_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_5_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_5_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_5_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_5_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_5_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_5_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_6_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_6_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_6_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_6_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_6_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_6_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_6_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_7_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_7_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_7_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_7_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_7_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_7_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_7_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_8_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_8_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_8_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_8_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_8_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_8_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_8_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_9_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_9_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_9_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     89
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_eop_buffer_9_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_9_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_eop_buffer_9_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_EOP_BUFFER_9_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     26
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_op_profile_table_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_op_profile_table_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_op_profile_table_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     26
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_op_profile_table_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_op_profile_table_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_op_profile_table_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_OP_PROFILE_TABLE_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_pool_shadow_pool_map_enable_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_pool_shadow_pool_map_enable_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_pool_shadow_pool_map_enable_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_pool_shadow_pool_map_enable_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_pool_shadow_pool_map_enable_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_pool_shadow_pool_map_enable_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_ENABLE_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     4
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_pool_shadow_pool_map_table_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_pool_shadow_pool_map_table_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_pool_shadow_pool_map_table_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     4
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_pool_shadow_pool_map_table_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_pool_shadow_pool_map_table_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_pool_shadow_pool_map_table_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_POOL_SHADOW_POOL_MAP_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_0_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_0_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_0_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_table_0_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_0_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_0_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_0_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_0_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_0_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_0_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_0_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_0_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_0_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_0_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_0_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_table_0_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_0_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_0_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_0_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_0_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_0_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_0_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_0_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_0_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_table_0_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_table_0_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_table_0_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_table_0_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_0_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_10_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_10_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_10_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_10_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_10_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_table_10_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_10_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_10_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_10_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_10_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_10_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_10_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_10_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_10_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_10_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_10_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_10_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_10_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_10_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_10_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_table_10_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_10_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_10_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_10_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_10_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_10_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_10_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_10_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_10_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_10_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_table_10_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_table_10_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_table_10_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_table_10_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_10_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_11_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_11_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_11_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_11_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_11_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_table_11_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_11_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_11_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_11_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_11_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_11_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_11_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_11_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_11_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_11_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_11_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_11_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_11_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_11_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_11_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_table_11_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_11_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_11_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_11_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_11_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_11_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_11_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_11_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_11_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_11_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_table_11_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_table_11_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_table_11_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_table_11_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_11_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_1_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_1_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_1_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_table_1_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_1_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_1_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_1_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_1_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_1_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_1_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_1_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_1_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_1_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_1_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_1_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_table_1_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_1_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_1_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_1_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_1_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_1_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_1_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_1_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_1_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_table_1_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_table_1_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_table_1_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_table_1_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_1_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_2_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_2_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_2_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_table_2_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_2_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_2_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_2_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_2_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_2_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_2_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_2_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_2_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_2_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_2_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_2_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_table_2_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_2_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_2_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_2_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_2_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_2_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_2_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_2_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_2_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_table_2_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_table_2_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_table_2_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_table_2_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_2_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_3_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_3_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_3_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_3_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_table_3_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_3_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_3_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_3_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_3_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_3_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_3_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_3_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_3_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_3_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_3_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_3_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_3_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_3_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_table_3_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_3_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_3_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_3_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_3_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_3_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_3_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_3_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_3_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_3_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_table_3_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_table_3_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_table_3_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_table_3_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_3_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_4_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_4_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_4_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_4_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_table_4_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_4_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_4_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_4_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_4_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_4_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_4_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_4_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_4_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_4_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_4_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_4_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_4_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_4_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_table_4_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_4_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_4_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_4_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_4_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_4_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_4_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_4_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_4_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_4_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_table_4_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_table_4_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_table_4_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_table_4_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_4_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_5_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_5_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_5_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_5_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_table_5_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_5_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_5_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_5_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_5_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_5_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_5_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_5_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_5_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_5_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_5_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_5_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_5_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_5_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_table_5_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_5_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_5_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_5_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_5_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_5_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_5_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_5_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_5_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_5_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_table_5_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_table_5_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_table_5_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_table_5_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_5_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_6_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_6_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_6_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_6_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_table_6_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_6_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_6_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_6_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_6_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_6_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_6_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_6_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_6_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_6_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_6_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_6_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_6_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_6_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_table_6_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_6_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_6_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_6_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_6_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_6_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_6_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_6_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_6_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_6_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_table_6_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_table_6_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_table_6_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_table_6_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_6_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_7_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_7_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_7_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_7_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_table_7_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_7_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_7_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_7_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_7_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_7_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_7_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_7_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_7_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_7_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_7_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_7_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_7_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_7_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_table_7_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_7_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_7_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_7_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_7_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_7_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_7_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_7_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_7_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_7_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_table_7_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_table_7_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_table_7_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_table_7_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_7_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_8_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_8_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_8_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_8_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_8_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_table_8_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_8_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_8_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_8_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_8_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_8_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_8_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_8_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_8_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_8_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_8_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_8_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_8_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_8_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_8_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_table_8_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_8_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_8_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_8_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_8_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_8_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_8_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_8_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_8_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_8_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_table_8_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_table_8_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_table_8_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_table_8_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_8_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_9_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_9_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_9_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_9_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_9_INST0m_OFFSET,i,(m._flex_ctr_ing_counter_table_9_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_9_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_9_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_9_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_9_inst0),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_9_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_9_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_9_INST0m_OFFSET,i,&(m._flex_ctr_ing_counter_table_9_inst0),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_9_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_COUNTER_TABLE_9_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     80
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_9_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_9_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_9_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_9_INST1m_OFFSET,i,(m._flex_ctr_ing_counter_table_9_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_9_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_9_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TABLE_9_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_9_inst1),3)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_9_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_9_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TABLE_9_INST1m_OFFSET,i,&(m._flex_ctr_ing_counter_table_9_inst1),3)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_9_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_table_9_ser_control_inst0), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST0r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_table_9_ser_control_inst0), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_table_9_ser_control_inst1), 1)
#define WRITE_FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST1r_BLKACC,88,FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_table_9_ser_control_inst1), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TABLE_9_SER_CONTROL_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_active_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_active_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_active_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_active_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_active_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_active_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_ACTIVE_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_0_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_0_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_0_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_0_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_0_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_0_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_10_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_10_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_10_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_10_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_10_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_10_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_10_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_11_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_11_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_11_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_11_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_11_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_11_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_11_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_12_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_12_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_12_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_12_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_12_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_12_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_12_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_13_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_13_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_13_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_13_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_13_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_13_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_13_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_14_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_14_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_14_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_14_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_14_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_14_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_14_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_15_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_15_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_15_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_15_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_15_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_15_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_15_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_16_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_16_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_16_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_16_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_16_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_16_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_16_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_17_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_17_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_17_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_17_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_17_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_17_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_17_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_18_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_18_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_18_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_18_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_18_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_18_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_18_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_19_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_19_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_19_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_19_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_19_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_19_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_19_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_1_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_1_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_1_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_1_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_1_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_1_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_20_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_20_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_20_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_20_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_20_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_20_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_20_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_21_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_21_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_21_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_21_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_21_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_21_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_21_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_22_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_22_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_22_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_22_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_22_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_22_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_22_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_23_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_23_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_23_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_23_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_23_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_23_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_23_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_24_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_24_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_24_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_24_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_24_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_24_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_24_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_25_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_25_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_25_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_25_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_25_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_25_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_25_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_26_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_26_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_26_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_26_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_26_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_26_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_26_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_27_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_27_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_27_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_27_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_27_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_27_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_27_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_28_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_28_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_28_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_28_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_28_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_28_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_28_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_29_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_29_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_29_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_29_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_29_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_29_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_29_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_2_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_2_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_2_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_2_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_2_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_2_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_30_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_30_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_30_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_30_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_30_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_30_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_30_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_31_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_31_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_31_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_31_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_31_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_31_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_31_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_3_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_3_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_3_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_3_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_3_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_3_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_4_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_4_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_4_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_4_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_4_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_4_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_4_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_5_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_5_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_5_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_5_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_5_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_5_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_5_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_6_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_6_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_6_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_6_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_6_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_6_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_6_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_7_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_7_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_7_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_7_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_7_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_7_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_7_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_8_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_8_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_8_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_8_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_8_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_8_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_8_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_9_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_9_inst0),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_9_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_trigger_state_9_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_9_inst1),2)
#define WRITE_FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_trigger_state_9_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_TRIGGER_STATE_9_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_0_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_0_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_0_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_0_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_0_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_0_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_10_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_10_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_10_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_10_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_10_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_10_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_10_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_11_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_11_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_11_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_11_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_11_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_11_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_11_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_1_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_1_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_1_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_1_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_1_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_1_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_2_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_2_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_2_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_2_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_2_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_2_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_3_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_3_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_3_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_3_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_3_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_3_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_4_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_4_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_4_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_4_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_4_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_4_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_4_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_5_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_5_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_5_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_5_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_5_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_5_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_5_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_6_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_6_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_6_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_6_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_6_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_6_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_6_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_7_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_7_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_7_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_7_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_7_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_7_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_7_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_8_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_8_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_8_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_8_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_8_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_8_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_8_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST0.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST0r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_9_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_9_inst0),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST0r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_9_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST1.
 */
#define READ_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST1r_OFFSET,0,(r._flex_ctr_ing_counter_update_control_pool_9_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_9_inst1),1)
#define WRITE_FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST1r_OFFSET,0,&(r._flex_ctr_ing_counter_update_control_pool_9_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_COUNTER_UPDATE_CONTROL_POOL_9_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_0_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_0_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_0_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_0_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_0_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_0_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_10_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_10_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_10_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_10_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_10_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_10_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_10_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_11_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_11_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_11_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_11_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_11_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_11_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_11_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_1_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_1_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_1_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_1_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_1_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_1_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_2_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_2_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_2_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_2_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_2_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_2_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_3_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_3_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_3_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_3_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_3_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_3_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_4_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_4_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_4_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_4_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_4_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_4_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_4_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_5_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_5_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_5_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_5_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_5_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_5_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_5_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_6_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_6_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_6_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_6_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_6_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_6_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_6_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_7_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_7_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_7_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_7_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_7_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_7_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_7_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_8_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_8_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_8_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_8_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_8_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_8_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_8_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_9_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_9_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_9_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_9_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_9_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_a_threshold_pool_9_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_A_THRESHOLD_POOL_9_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_0_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_0_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_0_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_0_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_0_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_0_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_10_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_10_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_10_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_10_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_10_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_10_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_10_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_11_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_11_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_11_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_11_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_11_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_11_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_11_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_1_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_1_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_1_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_1_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_1_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_1_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_2_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_2_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_2_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_2_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_2_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_2_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_3_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_3_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_3_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_3_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_3_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_3_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_4_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_4_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_4_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_4_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_4_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_4_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_4_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_5_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_5_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_5_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_5_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_5_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_5_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_5_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_6_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_6_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_6_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_6_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_6_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_6_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_6_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_7_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_7_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_7_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_7_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_7_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_7_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_7_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_8_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_8_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_8_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_8_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_8_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_8_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_8_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_9_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_9_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_9_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_9_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_9_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_cmd_b_threshold_pool_9_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CMD_B_THRESHOLD_POOL_9_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_0_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_0_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_0_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_0_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_0_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_0_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_10_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_10_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_10_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_10_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_10_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_10_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_10_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_11_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_11_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_11_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_11_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_11_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_11_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_11_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_1_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_1_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_1_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_1_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_1_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_1_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_2_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_2_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_2_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_2_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_2_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_2_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_3_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_3_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_3_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_3_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_3_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_3_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_4_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_4_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_4_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_4_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_4_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_4_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_4_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_5_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_5_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_5_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_5_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_5_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_5_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_5_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_6_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_6_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_6_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_6_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_6_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_6_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_6_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_7_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_7_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_7_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_7_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_7_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_7_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_7_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_8_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_8_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_8_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_8_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_8_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_8_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_8_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_9_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_9_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_9_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_control_pool_9_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_9_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_control_pool_9_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_CONTROL_POOL_9_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_0_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_0_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_0_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_0_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_0_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_0_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_10_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_10_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_10_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_10_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_10_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_10_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_10_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_11_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_11_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_11_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_11_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_11_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_11_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_11_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_1_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_1_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_1_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_1_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_1_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_1_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_2_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_2_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_2_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_2_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_2_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_2_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_3_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_3_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_3_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_3_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_3_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_3_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_4_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_4_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_4_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_4_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_4_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_4_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_4_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_5_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_5_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_5_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_5_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_5_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_5_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_5_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_6_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_6_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_6_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_6_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_6_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_6_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_6_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_7_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_7_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_7_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_7_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_7_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_7_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_7_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_8_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_8_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_8_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_8_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_8_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_8_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_8_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_9_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_9_inst0),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_9_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_fail_pool_9_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_9_inst1),1)
#define WRITE_FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_fail_pool_9_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_FAIL_POOL_9_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_0_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_0_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_0_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_0_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_0_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_0_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_10_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_10_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_10_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_10_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_10_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_10_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_10_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_11_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_11_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_11_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_11_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_11_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_11_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_11_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_1_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_1_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_1_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_1_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_1_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_1_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_2_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_2_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_2_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_2_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_2_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_2_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_3_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_3_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_3_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_3_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_3_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_3_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_4_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_4_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_4_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_4_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_4_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_4_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_4_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_5_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_5_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_5_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_5_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_5_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_5_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_5_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_6_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_6_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_6_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_6_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_6_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_6_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_6_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_7_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_7_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_7_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_7_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_7_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_7_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_7_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_8_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_8_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_8_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_8_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_8_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_8_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_8_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST0.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST0r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_9_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_9_inst0),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST0r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_9_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST1.
 */
#define READ_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST1r_OFFSET,0,(r._flex_ctr_ing_eviction_lfsr_seed_pool_9_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_9_inst1),2)
#define WRITE_FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST1r_OFFSET,0,&(r._flex_ctr_ing_eviction_lfsr_seed_pool_9_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_EVICTION_LFSR_SEED_POOL_9_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST0.
 */
#define READ_FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST0r_OFFSET,0,(r._flex_ctr_ing_fc_action_misconfig_counter_inst0),2)
#define WRITE_FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST0r_OFFSET,0,&(r._flex_ctr_ing_fc_action_misconfig_counter_inst0),2)
#define WRITE_FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST0r_OFFSET,0,&(r._flex_ctr_ing_fc_action_misconfig_counter_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST1.
 */
#define READ_FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST1r_OFFSET,0,(r._flex_ctr_ing_fc_action_misconfig_counter_inst1),2)
#define WRITE_FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST1r_OFFSET,0,&(r._flex_ctr_ing_fc_action_misconfig_counter_inst1),2)
#define WRITE_FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST1r_OFFSET,0,&(r._flex_ctr_ing_fc_action_misconfig_counter_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_FC_ACTION_MISCONFIG_COUNTER_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST0.
 */
#define READ_FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST0r_OFFSET,0,(r._flex_ctr_ing_fc_too_many_actions_counter_inst0),2)
#define WRITE_FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST0r_OFFSET,0,&(r._flex_ctr_ing_fc_too_many_actions_counter_inst0),2)
#define WRITE_FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST0r_OFFSET,0,&(r._flex_ctr_ing_fc_too_many_actions_counter_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST1.
 */
#define READ_FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST1r_OFFSET,0,(r._flex_ctr_ing_fc_too_many_actions_counter_inst1),2)
#define WRITE_FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST1r_OFFSET,0,&(r._flex_ctr_ing_fc_too_many_actions_counter_inst1),2)
#define WRITE_FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST1r_OFFSET,0,&(r._flex_ctr_ing_fc_too_many_actions_counter_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_FC_TOO_MANY_ACTIONS_COUNTER_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_0_INST0.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_0_INST0r_OFFSET,0,(r._flex_ctr_ing_group_action_0_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_0_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_0_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_0_INST1.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_0_INST1r_OFFSET,0,(r._flex_ctr_ing_group_action_0_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_0_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_0_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_1_INST0.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_1_INST0r_OFFSET,0,(r._flex_ctr_ing_group_action_1_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_1_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_1_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_1_INST1.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_1_INST1r_OFFSET,0,(r._flex_ctr_ing_group_action_1_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_1_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_1_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_2_INST0.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_2_INST0r_OFFSET,0,(r._flex_ctr_ing_group_action_2_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_2_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_2_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_2_INST1.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_2_INST1r_OFFSET,0,(r._flex_ctr_ing_group_action_2_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_2_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_2_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_3_INST0.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_3_INST0r_OFFSET,0,(r._flex_ctr_ing_group_action_3_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_3_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_3_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_3_INST1.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_3_INST1r_OFFSET,0,(r._flex_ctr_ing_group_action_3_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_3_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_3_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST0.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST0r_OFFSET,0,(r._flex_ctr_ing_group_action_bitmap_0_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_0_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_0_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST1.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST1r_OFFSET,0,(r._flex_ctr_ing_group_action_bitmap_0_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_0_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_0_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_BITMAP_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST0.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST0r_OFFSET,0,(r._flex_ctr_ing_group_action_bitmap_1_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_1_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_1_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST1.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST1r_OFFSET,0,(r._flex_ctr_ing_group_action_bitmap_1_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_1_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_1_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_BITMAP_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST0.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST0r_OFFSET,0,(r._flex_ctr_ing_group_action_bitmap_2_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_2_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_2_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST1.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST1r_OFFSET,0,(r._flex_ctr_ing_group_action_bitmap_2_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_2_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_2_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_BITMAP_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST0.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST0r_OFFSET,0,(r._flex_ctr_ing_group_action_bitmap_3_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_3_inst0),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST0r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_3_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST1.
 */
#define READ_FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST1r_OFFSET,0,(r._flex_ctr_ing_group_action_bitmap_3_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_3_inst1),1)
#define WRITE_FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST1r_OFFSET,0,&(r._flex_ctr_ing_group_action_bitmap_3_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_GROUP_ACTION_BITMAP_3_INST1r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_INTR_ENABLE
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_INTR_ENABLE.
 */
#define READ_FLEX_CTR_ING_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_ING_INTR_ENABLEr_BLKACC,88,FLEX_CTR_ING_INTR_ENABLEr_OFFSET,0,(r._flex_ctr_ing_intr_enable), 1)
#define WRITE_FLEX_CTR_ING_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_ING_INTR_ENABLEr_BLKACC,88,FLEX_CTR_ING_INTR_ENABLEr_OFFSET,0,&(r._flex_ctr_ing_intr_enable), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_INTR_STATUS
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_INTR_STATUS.
 */
#define READ_FLEX_CTR_ING_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_INTR_STATUSr_BLKACC,88,n,0,FLEX_CTR_ING_INTR_STATUSr_OFFSET,0,(r._flex_ctr_ing_intr_status),1)
#define WRITE_FLEX_CTR_ING_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_INTR_STATUSr_BLKACC,88,n,0,FLEX_CTR_ING_INTR_STATUSr_OFFSET,0,&(r._flex_ctr_ing_intr_status),1)
#define WRITE_FLEX_CTR_ING_INTR_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_INTR_STATUSr_BLKACC,88,-1,0,FLEX_CTR_ING_INTR_STATUSr_OFFSET,0,&(r._flex_ctr_ing_intr_status),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_MEM_RST_CTRL
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_MEM_RST_CTRL.
 */
#define READ_FLEX_CTR_ING_MEM_RST_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_MEM_RST_CTRLr_BLKACC,88,n,0,FLEX_CTR_ING_MEM_RST_CTRLr_OFFSET,0,(r._flex_ctr_ing_mem_rst_ctrl),1)
#define WRITE_FLEX_CTR_ING_MEM_RST_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_MEM_RST_CTRLr_BLKACC,88,n,0,FLEX_CTR_ING_MEM_RST_CTRLr_OFFSET,0,&(r._flex_ctr_ing_mem_rst_ctrl),1)
#define WRITE_FLEX_CTR_ING_MEM_RST_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_MEM_RST_CTRLr_BLKACC,88,-1,0,FLEX_CTR_ING_MEM_RST_CTRLr_OFFSET,0,&(r._flex_ctr_ing_mem_rst_ctrl),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_MEM_RST_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_MEM_RST_STATUS
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_MEM_RST_STATUS.
 */
#define READ_FLEX_CTR_ING_MEM_RST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_MEM_RST_STATUSr_BLKACC,88,n,0,FLEX_CTR_ING_MEM_RST_STATUSr_OFFSET,0,(r._flex_ctr_ing_mem_rst_status),1)
#define WRITE_FLEX_CTR_ING_MEM_RST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_MEM_RST_STATUSr_BLKACC,88,n,0,FLEX_CTR_ING_MEM_RST_STATUSr_OFFSET,0,&(r._flex_ctr_ing_mem_rst_status),1)
#define WRITE_FLEX_CTR_ING_MEM_RST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_MEM_RST_STATUSr_BLKACC,88,-1,0,FLEX_CTR_ING_MEM_RST_STATUSr_OFFSET,0,&(r._flex_ctr_ing_mem_rst_status),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_MEM_RST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_MISC_CTRL
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_MISC_CTRL.
 */
#define READ_FLEX_CTR_ING_MISC_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_MISC_CTRLr_BLKACC,88,n,0,FLEX_CTR_ING_MISC_CTRLr_OFFSET,0,(r._flex_ctr_ing_misc_ctrl),1)
#define WRITE_FLEX_CTR_ING_MISC_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_MISC_CTRLr_BLKACC,88,n,0,FLEX_CTR_ING_MISC_CTRLr_OFFSET,0,&(r._flex_ctr_ing_misc_ctrl),1)
#define WRITE_FLEX_CTR_ING_MISC_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_MISC_CTRLr_BLKACC,88,-1,0,FLEX_CTR_ING_MISC_CTRLr_OFFSET,0,&(r._flex_ctr_ing_misc_ctrl),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_MISC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST0.
 */
#define READ_FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST0r_OFFSET,0,(r._flex_ctr_ing_object_quantization_ctrl_inst0),1)
#define WRITE_FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST0r_OFFSET,0,&(r._flex_ctr_ing_object_quantization_ctrl_inst0),1)
#define WRITE_FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST0r_OFFSET,0,&(r._flex_ctr_ing_object_quantization_ctrl_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST1.
 */
#define READ_FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST1r_OFFSET,0,(r._flex_ctr_ing_object_quantization_ctrl_inst1),1)
#define WRITE_FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST1r_OFFSET,0,&(r._flex_ctr_ing_object_quantization_ctrl_inst1),1)
#define WRITE_FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST1r_OFFSET,0,&(r._flex_ctr_ing_object_quantization_ctrl_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_OBJECT_QUANTIZATION_CTRL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0.
 */
#define READ_FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m_OFFSET,i,(m._flex_ctr_ing_object_quantization_range_check_config_inst0),1)
#define WRITE_FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m_BLKACC,88,n,0,FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m_OFFSET,i,&(m._flex_ctr_ing_object_quantization_range_check_config_inst0),1)
#define WRITE_FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m_BLKACC,88,-1,0,FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m_OFFSET,i,&(m._flex_ctr_ing_object_quantization_range_check_config_inst0),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST0m'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1.
 */
#define READ_FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m_OFFSET,i,(m._flex_ctr_ing_object_quantization_range_check_config_inst1),1)
#define WRITE_FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m_BLKACC,88,n,0,FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m_OFFSET,i,&(m._flex_ctr_ing_object_quantization_range_check_config_inst1),1)
#define WRITE_FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m_BLKACC,88,-1,0,FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m_OFFSET,i,&(m._flex_ctr_ing_object_quantization_range_check_config_inst1),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_OBJECT_QUANTIZATION_RANGE_CHECK_CONFIG_INST1m'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_RAM_TM_CONTROL_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_RAM_TM_CONTROL_INST0.
 */
#define READ_FLEX_CTR_ING_RAM_TM_CONTROL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_RAM_TM_CONTROL_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_RAM_TM_CONTROL_INST0r_OFFSET,0,(r._flex_ctr_ing_ram_tm_control_inst0),2)
#define WRITE_FLEX_CTR_ING_RAM_TM_CONTROL_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_RAM_TM_CONTROL_INST0r_BLKACC,88,n,0,FLEX_CTR_ING_RAM_TM_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_ing_ram_tm_control_inst0),2)
#define WRITE_FLEX_CTR_ING_RAM_TM_CONTROL_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_RAM_TM_CONTROL_INST0r_BLKACC,88,-1,0,FLEX_CTR_ING_RAM_TM_CONTROL_INST0r_OFFSET,0,&(r._flex_ctr_ing_ram_tm_control_inst0),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_RAM_TM_CONTROL_INST0r'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_RAM_TM_CONTROL_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access FLEX_CTR_ING_RAM_TM_CONTROL_INST1.
 */
#define READ_FLEX_CTR_ING_RAM_TM_CONTROL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_RAM_TM_CONTROL_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_RAM_TM_CONTROL_INST1r_OFFSET,0,(r._flex_ctr_ing_ram_tm_control_inst1),2)
#define WRITE_FLEX_CTR_ING_RAM_TM_CONTROL_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_RAM_TM_CONTROL_INST1r_BLKACC,88,n,0,FLEX_CTR_ING_RAM_TM_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_ing_ram_tm_control_inst1),2)
#define WRITE_FLEX_CTR_ING_RAM_TM_CONTROL_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_RAM_TM_CONTROL_INST1r_BLKACC,88,-1,0,FLEX_CTR_ING_RAM_TM_CONTROL_INST1r_OFFSET,0,&(r._flex_ctr_ing_ram_tm_control_inst1),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_RAM_TM_CONTROL_INST1r'
 */




/*******************************************************************************
 * MEMORY:  FLEX_CTR_ING_SER_FIFO
 * BLOCKS:   FLEX_CTR
 * SIZE:     50
 */
/*
 * These macros can be used to access FLEX_CTR_ING_SER_FIFO.
 */
#define READ_FLEX_CTR_ING_SER_FIFOm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FLEX_CTR_ING_SER_FIFOm_BLKACC,88,n,0,FLEX_CTR_ING_SER_FIFOm_OFFSET,i,(m._flex_ctr_ing_ser_fifo),2)
#define WRITE_FLEX_CTR_ING_SER_FIFOm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_SER_FIFOm_BLKACC,88,n,0,FLEX_CTR_ING_SER_FIFOm_OFFSET,i,&(m._flex_ctr_ing_ser_fifo),2)
#define WRITE_FLEX_CTR_ING_SER_FIFOm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FLEX_CTR_ING_SER_FIFOm_BLKACC,88,-1,0,FLEX_CTR_ING_SER_FIFOm_OFFSET,i,&(m._flex_ctr_ing_ser_fifo),2)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_SER_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_SER_FIFO_CTRL
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_SER_FIFO_CTRL.
 */
#define READ_FLEX_CTR_ING_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_SER_FIFO_CTRLr_BLKACC,88,n,0,FLEX_CTR_ING_SER_FIFO_CTRLr_OFFSET,0,(r._flex_ctr_ing_ser_fifo_ctrl),1)
#define WRITE_FLEX_CTR_ING_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_SER_FIFO_CTRLr_BLKACC,88,n,0,FLEX_CTR_ING_SER_FIFO_CTRLr_OFFSET,0,&(r._flex_ctr_ing_ser_fifo_ctrl),1)
#define WRITE_FLEX_CTR_ING_SER_FIFO_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_SER_FIFO_CTRLr_BLKACC,88,-1,0,FLEX_CTR_ING_SER_FIFO_CTRLr_OFFSET,0,&(r._flex_ctr_ing_ser_fifo_ctrl),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_SER_FIFO_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_ING_SER_FIFO_STATUS
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_ING_SER_FIFO_STATUS.
 */
#define READ_FLEX_CTR_ING_SER_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FLEX_CTR_ING_SER_FIFO_STATUSr_BLKACC,88,n,0,FLEX_CTR_ING_SER_FIFO_STATUSr_OFFSET,0,(r._flex_ctr_ing_ser_fifo_status),1)
#define WRITE_FLEX_CTR_ING_SER_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_SER_FIFO_STATUSr_BLKACC,88,n,0,FLEX_CTR_ING_SER_FIFO_STATUSr_OFFSET,0,&(r._flex_ctr_ing_ser_fifo_status),1)
#define WRITE_FLEX_CTR_ING_SER_FIFO_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FLEX_CTR_ING_SER_FIFO_STATUSr_BLKACC,88,-1,0,FLEX_CTR_ING_SER_FIFO_STATUSr_OFFSET,0,&(r._flex_ctr_ing_ser_fifo_status),1)

/*******************************************************************************
 * End of 'FLEX_CTR_ING_SER_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  FLEX_CTR_SBS_CONTROL
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEX_CTR_SBS_CONTROL.
 */
#define READ_FLEX_CTR_SBS_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,FLEX_CTR_SBS_CONTROLr_BLKACC,88,FLEX_CTR_SBS_CONTROLr_OFFSET,0,(r._flex_ctr_sbs_control), 1)
#define WRITE_FLEX_CTR_SBS_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,FLEX_CTR_SBS_CONTROLr_BLKACC,88,FLEX_CTR_SBS_CONTROLr_OFFSET,0,&(r._flex_ctr_sbs_control), 1)

/*******************************************************************************
 * End of 'FLEX_CTR_SBS_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  FLOW_COUNT_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FLOW_COUNT_CONTROL_0.
 */
#define READ_FLOW_COUNT_CONTROL_0r(u,r) bcmbd_cmicx_reg_block_read(u,FLOW_COUNT_CONTROL_0r_BLKACC,1,FLOW_COUNT_CONTROL_0r_OFFSET,0,(r._flow_count_control_0), 1)
#define WRITE_FLOW_COUNT_CONTROL_0r(u,r) bcmbd_cmicx_reg_block_write(u,FLOW_COUNT_CONTROL_0r_BLKACC,1,FLOW_COUNT_CONTROL_0r_OFFSET,0,&(r._flow_count_control_0), 1)

/*******************************************************************************
 * End of 'FLOW_COUNT_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  FLOW_COUNT_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access FLOW_COUNT_CONTROL_1.
 */
#define READ_FLOW_COUNT_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,FLOW_COUNT_CONTROL_1r_BLKACC,1,FLOW_COUNT_CONTROL_1r_OFFSET,0,(r._flow_count_control_1), 2)
#define WRITE_FLOW_COUNT_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,FLOW_COUNT_CONTROL_1r_BLKACC,1,FLOW_COUNT_CONTROL_1r_OFFSET,0,&(r._flow_count_control_1), 2)

/*******************************************************************************
 * End of 'FLOW_COUNT_CONTROL_1r'
 */




/*******************************************************************************
 * MEMORY:  FLOW_COUNT_PORT_CONTEXT
 * BLOCKS:   IPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access FLOW_COUNT_PORT_CONTEXT.
 */
#define READ_FLOW_COUNT_PORT_CONTEXTm(u,i,m) bcmbd_cmicx_mem_block_read(u,FLOW_COUNT_PORT_CONTEXTm_BLKACC,1,FLOW_COUNT_PORT_CONTEXTm_OFFSET,i,(m._flow_count_port_context),1)
#define WRITE_FLOW_COUNT_PORT_CONTEXTm(u,i,m) bcmbd_cmicx_mem_block_write(u,FLOW_COUNT_PORT_CONTEXTm_BLKACC,1,FLOW_COUNT_PORT_CONTEXTm_OFFSET,i,&(m._flow_count_port_context),1)

/*******************************************************************************
 * End of 'FLOW_COUNT_PORT_CONTEXTm'
 */




/*******************************************************************************
 * REGISTER:  FP_TM
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access FP_TM.
 */
#define READ_FP_TMr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,FP_TMr_BLKACC,1,n,0,FP_TMr_OFFSET,0,(r._fp_tm),2)
#define WRITE_FP_TMr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,FP_TMr_BLKACC,1,n,0,FP_TMr_OFFSET,0,&(r._fp_tm),2)
#define WRITE_FP_TMr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,FP_TMr_BLKACC,1,-1,0,FP_TMr_OFFSET,0,&(r._fp_tm),2)

/*******************************************************************************
 * End of 'FP_TMr'
 */




/*******************************************************************************
 * MEMORY:  FP_UDF_OFFSET
 * BLOCKS:   IPIPE
 * SIZE:     214
 */
/*
 * These macros can be used to access FP_UDF_OFFSET.
 */
#define READ_FP_UDF_OFFSETm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FP_UDF_OFFSETm_BLKACC,1,n,0,FP_UDF_OFFSETm_OFFSET,i,(m._fp_udf_offset),7)
#define WRITE_FP_UDF_OFFSETm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FP_UDF_OFFSETm_BLKACC,1,n,0,FP_UDF_OFFSETm_OFFSET,i,&(m._fp_udf_offset),7)
#define WRITE_FP_UDF_OFFSETm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FP_UDF_OFFSETm_BLKACC,1,-1,0,FP_UDF_OFFSETm_OFFSET,i,&(m._fp_udf_offset),7)

/*******************************************************************************
 * End of 'FP_UDF_OFFSETm'
 */




/*******************************************************************************
 * MEMORY:  FP_UDF_TCAM
 * BLOCKS:   IPIPE
 * SIZE:     178
 */
/*
 * These macros can be used to access FP_UDF_TCAM.
 */
#define READ_FP_UDF_TCAMm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,FP_UDF_TCAMm_BLKACC,1,n,0,FP_UDF_TCAMm_OFFSET,i,(m._fp_udf_tcam),6)
#define WRITE_FP_UDF_TCAMm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,FP_UDF_TCAMm_BLKACC,1,n,0,FP_UDF_TCAMm_OFFSET,i,&(m._fp_udf_tcam),6)
#define WRITE_FP_UDF_TCAMm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,FP_UDF_TCAMm_BLKACC,1,-1,0,FP_UDF_TCAMm_OFFSET,i,&(m._fp_udf_tcam),6)

/*******************************************************************************
 * End of 'FP_UDF_TCAMm'
 */




/*******************************************************************************
 * REGISTER:  FROM_REMOTE_CPU_DA0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access FROM_REMOTE_CPU_DA0.
 */
#define READ_FROM_REMOTE_CPU_DA0r(u,r) bcmbd_cmicx_reg_block_read(u,FROM_REMOTE_CPU_DA0r_BLKACC,1,FROM_REMOTE_CPU_DA0r_OFFSET,0,(r._from_remote_cpu_da0), 2)
#define WRITE_FROM_REMOTE_CPU_DA0r(u,r) bcmbd_cmicx_reg_block_write(u,FROM_REMOTE_CPU_DA0r_BLKACC,1,FROM_REMOTE_CPU_DA0r_OFFSET,0,&(r._from_remote_cpu_da0), 2)

/*******************************************************************************
 * End of 'FROM_REMOTE_CPU_DA0r'
 */




/*******************************************************************************
 * REGISTER:  FROM_REMOTE_CPU_DA1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access FROM_REMOTE_CPU_DA1.
 */
#define READ_FROM_REMOTE_CPU_DA1r(u,r) bcmbd_cmicx_reg_block_read(u,FROM_REMOTE_CPU_DA1r_BLKACC,1,FROM_REMOTE_CPU_DA1r_OFFSET,0,(r._from_remote_cpu_da1), 2)
#define WRITE_FROM_REMOTE_CPU_DA1r(u,r) bcmbd_cmicx_reg_block_write(u,FROM_REMOTE_CPU_DA1r_BLKACC,1,FROM_REMOTE_CPU_DA1r_OFFSET,0,&(r._from_remote_cpu_da1), 2)

/*******************************************************************************
 * End of 'FROM_REMOTE_CPU_DA1r'
 */




/*******************************************************************************
 * REGISTER:  FROM_REMOTE_CPU_DA
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access FROM_REMOTE_CPU_DA.
 */
#define READ_FROM_REMOTE_CPU_DAr(u,i,r) bcmbd_cmicx_reg_block_read(u,FROM_REMOTE_CPU_DAr_BLKACC,1,FROM_REMOTE_CPU_DAr_OFFSET,i,(r._from_remote_cpu_da), 2)
#define WRITE_FROM_REMOTE_CPU_DAr(u,i,r) bcmbd_cmicx_reg_block_write(u,FROM_REMOTE_CPU_DAr_BLKACC,1,FROM_REMOTE_CPU_DAr_OFFSET,i,&(r._from_remote_cpu_da), 2)

/*******************************************************************************
 * End of 'FROM_REMOTE_CPU_DAr'
 */




/*******************************************************************************
 * REGISTER:  FROM_REMOTE_CPU_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FROM_REMOTE_CPU_ETHERTYPE.
 */
#define READ_FROM_REMOTE_CPU_ETHERTYPEr(u,r) bcmbd_cmicx_reg_block_read(u,FROM_REMOTE_CPU_ETHERTYPEr_BLKACC,1,FROM_REMOTE_CPU_ETHERTYPEr_OFFSET,0,(r._from_remote_cpu_ethertype), 1)
#define WRITE_FROM_REMOTE_CPU_ETHERTYPEr(u,r) bcmbd_cmicx_reg_block_write(u,FROM_REMOTE_CPU_ETHERTYPEr_BLKACC,1,FROM_REMOTE_CPU_ETHERTYPEr_OFFSET,0,&(r._from_remote_cpu_ethertype), 1)

/*******************************************************************************
 * End of 'FROM_REMOTE_CPU_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  FROM_REMOTE_CPU_SIGNATURE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FROM_REMOTE_CPU_SIGNATURE.
 */
#define READ_FROM_REMOTE_CPU_SIGNATUREr(u,r) bcmbd_cmicx_reg_block_read(u,FROM_REMOTE_CPU_SIGNATUREr_BLKACC,1,FROM_REMOTE_CPU_SIGNATUREr_OFFSET,0,(r._from_remote_cpu_signature), 1)
#define WRITE_FROM_REMOTE_CPU_SIGNATUREr(u,r) bcmbd_cmicx_reg_block_write(u,FROM_REMOTE_CPU_SIGNATUREr_BLKACC,1,FROM_REMOTE_CPU_SIGNATUREr_OFFSET,0,&(r._from_remote_cpu_signature), 1)

/*******************************************************************************
 * End of 'FROM_REMOTE_CPU_SIGNATUREr'
 */




/*******************************************************************************
 * REGISTER:  GLOBAL_MPLS_RANGE_1_LOWER
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access GLOBAL_MPLS_RANGE_1_LOWER.
 */
#define READ_GLOBAL_MPLS_RANGE_1_LOWERr(u,r) bcmbd_cmicx_reg_block_read(u,GLOBAL_MPLS_RANGE_1_LOWERr_BLKACC,1,GLOBAL_MPLS_RANGE_1_LOWERr_OFFSET,0,(r._global_mpls_range_1_lower), 1)
#define WRITE_GLOBAL_MPLS_RANGE_1_LOWERr(u,r) bcmbd_cmicx_reg_block_write(u,GLOBAL_MPLS_RANGE_1_LOWERr_BLKACC,1,GLOBAL_MPLS_RANGE_1_LOWERr_OFFSET,0,&(r._global_mpls_range_1_lower), 1)

/*******************************************************************************
 * End of 'GLOBAL_MPLS_RANGE_1_LOWERr'
 */




/*******************************************************************************
 * REGISTER:  GLOBAL_MPLS_RANGE_1_UPPER
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access GLOBAL_MPLS_RANGE_1_UPPER.
 */
#define READ_GLOBAL_MPLS_RANGE_1_UPPERr(u,r) bcmbd_cmicx_reg_block_read(u,GLOBAL_MPLS_RANGE_1_UPPERr_BLKACC,1,GLOBAL_MPLS_RANGE_1_UPPERr_OFFSET,0,(r._global_mpls_range_1_upper), 1)
#define WRITE_GLOBAL_MPLS_RANGE_1_UPPERr(u,r) bcmbd_cmicx_reg_block_write(u,GLOBAL_MPLS_RANGE_1_UPPERr_BLKACC,1,GLOBAL_MPLS_RANGE_1_UPPERr_OFFSET,0,&(r._global_mpls_range_1_upper), 1)

/*******************************************************************************
 * End of 'GLOBAL_MPLS_RANGE_1_UPPERr'
 */




/*******************************************************************************
 * REGISTER:  GLOBAL_MPLS_RANGE_2_LOWER
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access GLOBAL_MPLS_RANGE_2_LOWER.
 */
#define READ_GLOBAL_MPLS_RANGE_2_LOWERr(u,r) bcmbd_cmicx_reg_block_read(u,GLOBAL_MPLS_RANGE_2_LOWERr_BLKACC,1,GLOBAL_MPLS_RANGE_2_LOWERr_OFFSET,0,(r._global_mpls_range_2_lower), 1)
#define WRITE_GLOBAL_MPLS_RANGE_2_LOWERr(u,r) bcmbd_cmicx_reg_block_write(u,GLOBAL_MPLS_RANGE_2_LOWERr_BLKACC,1,GLOBAL_MPLS_RANGE_2_LOWERr_OFFSET,0,&(r._global_mpls_range_2_lower), 1)

/*******************************************************************************
 * End of 'GLOBAL_MPLS_RANGE_2_LOWERr'
 */




/*******************************************************************************
 * REGISTER:  GLOBAL_MPLS_RANGE_2_UPPER
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access GLOBAL_MPLS_RANGE_2_UPPER.
 */
#define READ_GLOBAL_MPLS_RANGE_2_UPPERr(u,r) bcmbd_cmicx_reg_block_read(u,GLOBAL_MPLS_RANGE_2_UPPERr_BLKACC,1,GLOBAL_MPLS_RANGE_2_UPPERr_OFFSET,0,(r._global_mpls_range_2_upper), 1)
#define WRITE_GLOBAL_MPLS_RANGE_2_UPPERr(u,r) bcmbd_cmicx_reg_block_write(u,GLOBAL_MPLS_RANGE_2_UPPERr_BLKACC,1,GLOBAL_MPLS_RANGE_2_UPPERr_OFFSET,0,&(r._global_mpls_range_2_upper), 1)

/*******************************************************************************
 * End of 'GLOBAL_MPLS_RANGE_2_UPPERr'
 */




/*******************************************************************************
 * REGISTER:  GLOBAL_MPLS_RANGE_LOWER
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access GLOBAL_MPLS_RANGE_LOWER.
 */
#define READ_GLOBAL_MPLS_RANGE_LOWERr(u,i,r) bcmbd_cmicx_reg_block_read(u,GLOBAL_MPLS_RANGE_LOWERr_BLKACC,1,GLOBAL_MPLS_RANGE_LOWERr_OFFSET,(i)*2,(r._global_mpls_range_lower), 1)
#define WRITE_GLOBAL_MPLS_RANGE_LOWERr(u,i,r) bcmbd_cmicx_reg_block_write(u,GLOBAL_MPLS_RANGE_LOWERr_BLKACC,1,GLOBAL_MPLS_RANGE_LOWERr_OFFSET,(i)*2,&(r._global_mpls_range_lower), 1)

/*******************************************************************************
 * End of 'GLOBAL_MPLS_RANGE_LOWERr'
 */




/*******************************************************************************
 * REGISTER:  GLOBAL_MPLS_RANGE_UPPER
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access GLOBAL_MPLS_RANGE_UPPER.
 */
#define READ_GLOBAL_MPLS_RANGE_UPPERr(u,i,r) bcmbd_cmicx_reg_block_read(u,GLOBAL_MPLS_RANGE_UPPERr_BLKACC,1,GLOBAL_MPLS_RANGE_UPPERr_OFFSET,(i)*2,(r._global_mpls_range_upper), 1)
#define WRITE_GLOBAL_MPLS_RANGE_UPPERr(u,i,r) bcmbd_cmicx_reg_block_write(u,GLOBAL_MPLS_RANGE_UPPERr_BLKACC,1,GLOBAL_MPLS_RANGE_UPPERr_OFFSET,(i)*2,&(r._global_mpls_range_upper), 1)

/*******************************************************************************
 * End of 'GLOBAL_MPLS_RANGE_UPPERr'
 */




/*******************************************************************************
 * MEMORY:  GTP_PORT_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access GTP_PORT_TABLE.
 */
#define READ_GTP_PORT_TABLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,GTP_PORT_TABLEm_BLKACC,1,GTP_PORT_TABLEm_OFFSET,i,(m._gtp_port_table),2)
#define WRITE_GTP_PORT_TABLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,GTP_PORT_TABLEm_BLKACC,1,GTP_PORT_TABLEm_OFFSET,i,&(m._gtp_port_table),2)

/*******************************************************************************
 * End of 'GTP_PORT_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access HASH_CONTROL.
 */
#define READ_HASH_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,HASH_CONTROLr_BLKACC,1,HASH_CONTROLr_OFFSET,0,(r._hash_control), 1)
#define WRITE_HASH_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,HASH_CONTROLr_BLKACC,1,HASH_CONTROLr_OFFSET,0,&(r._hash_control), 1)

/*******************************************************************************
 * End of 'HASH_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IADAPT_HW_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IADAPT_HW_CONFIG.
 */
#define READ_IADAPT_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,IADAPT_HW_CONFIGr_BLKACC,1,IADAPT_HW_CONFIGr_OFFSET,0,(r._iadapt_hw_config), 2)
#define WRITE_IADAPT_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,IADAPT_HW_CONFIGr_BLKACC,1,IADAPT_HW_CONFIGr_OFFSET,0,&(r._iadapt_hw_config), 2)

/*******************************************************************************
 * End of 'IADAPT_HW_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  ICMP_ERROR_TYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ICMP_ERROR_TYPE.
 */
#define READ_ICMP_ERROR_TYPEr(u,r) bcmbd_cmicx_reg_block_read(u,ICMP_ERROR_TYPEr_BLKACC,1,ICMP_ERROR_TYPEr_OFFSET,0,(r._icmp_error_type), 1)
#define WRITE_ICMP_ERROR_TYPEr(u,r) bcmbd_cmicx_reg_block_write(u,ICMP_ERROR_TYPEr_BLKACC,1,ICMP_ERROR_TYPEr_OFFSET,0,&(r._icmp_error_type), 1)

/*******************************************************************************
 * End of 'ICMP_ERROR_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA0_BUFFER_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA0_BUFFER_CONFIG.
 */
#define READ_IDB_CA0_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA0_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_CA0_BUFFER_CONFIGr_OFFSET,i,(r._idb_ca0_buffer_config),1)
#define WRITE_IDB_CA0_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_CA0_BUFFER_CONFIGr_OFFSET,i,&(r._idb_ca0_buffer_config),1)
#define WRITE_IDB_CA0_BUFFER_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_BUFFER_CONFIGr_BLKACC,89,-1,0,IDB_CA0_BUFFER_CONFIGr_OFFSET,i,&(r._idb_ca0_buffer_config),1)

/*******************************************************************************
 * End of 'IDB_CA0_BUFFER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA0_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA0_CONTROL.
 */
#define READ_IDB_CA0_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA0_CONTROLr_BLKACC,89,n,0,IDB_CA0_CONTROLr_OFFSET,0,(r._idb_ca0_control),1)
#define WRITE_IDB_CA0_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_CONTROLr_BLKACC,89,n,0,IDB_CA0_CONTROLr_OFFSET,0,&(r._idb_ca0_control),1)
#define WRITE_IDB_CA0_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_CONTROLr_BLKACC,89,-1,0,IDB_CA0_CONTROLr_OFFSET,0,&(r._idb_ca0_control),1)

/*******************************************************************************
 * End of 'IDB_CA0_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA0_CT_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA0_CT_CONTROL.
 */
#define READ_IDB_CA0_CT_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA0_CT_CONTROLr_BLKACC,89,n,0,IDB_CA0_CT_CONTROLr_OFFSET,0,(r._idb_ca0_ct_control),1)
#define WRITE_IDB_CA0_CT_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_CT_CONTROLr_BLKACC,89,n,0,IDB_CA0_CT_CONTROLr_OFFSET,0,&(r._idb_ca0_ct_control),1)
#define WRITE_IDB_CA0_CT_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_CT_CONTROLr_BLKACC,89,-1,0,IDB_CA0_CT_CONTROLr_OFFSET,0,&(r._idb_ca0_ct_control),1)

/*******************************************************************************
 * End of 'IDB_CA0_CT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA0_DBG_A
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA0_DBG_A.
 */
#define READ_IDB_CA0_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA0_DBG_Ar_BLKACC,89,n,0,IDB_CA0_DBG_Ar_OFFSET,i,(r._idb_ca0_dbg_a),1)
#define WRITE_IDB_CA0_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_DBG_Ar_BLKACC,89,n,0,IDB_CA0_DBG_Ar_OFFSET,i,&(r._idb_ca0_dbg_a),1)
#define WRITE_IDB_CA0_DBG_Ar_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_DBG_Ar_BLKACC,89,-1,0,IDB_CA0_DBG_Ar_OFFSET,i,&(r._idb_ca0_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_CA0_DBG_Ar'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA0_DBG_B
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA0_DBG_B.
 */
#define READ_IDB_CA0_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA0_DBG_Br_BLKACC,89,n,0,IDB_CA0_DBG_Br_OFFSET,i,(r._idb_ca0_dbg_b),1)
#define WRITE_IDB_CA0_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_DBG_Br_BLKACC,89,n,0,IDB_CA0_DBG_Br_OFFSET,i,&(r._idb_ca0_dbg_b),1)
#define WRITE_IDB_CA0_DBG_Br_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_DBG_Br_BLKACC,89,-1,0,IDB_CA0_DBG_Br_OFFSET,i,&(r._idb_ca0_dbg_b),1)

/*******************************************************************************
 * End of 'IDB_CA0_DBG_Br'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA0_HW_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA0_HW_STATUS.
 */
#define READ_IDB_CA0_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA0_HW_STATUSr_BLKACC,89,n,0,IDB_CA0_HW_STATUSr_OFFSET,0,(r._idb_ca0_hw_status),1)
#define WRITE_IDB_CA0_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_HW_STATUSr_BLKACC,89,n,0,IDB_CA0_HW_STATUSr_OFFSET,0,&(r._idb_ca0_hw_status),1)
#define WRITE_IDB_CA0_HW_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_HW_STATUSr_BLKACC,89,-1,0,IDB_CA0_HW_STATUSr_OFFSET,0,&(r._idb_ca0_hw_status),1)

/*******************************************************************************
 * End of 'IDB_CA0_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA0_HW_STATUS_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA0_HW_STATUS_1.
 */
#define READ_IDB_CA0_HW_STATUS_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA0_HW_STATUS_1r_BLKACC,89,n,0,IDB_CA0_HW_STATUS_1r_OFFSET,0,(r._idb_ca0_hw_status_1),1)
#define WRITE_IDB_CA0_HW_STATUS_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_HW_STATUS_1r_BLKACC,89,n,0,IDB_CA0_HW_STATUS_1r_OFFSET,0,&(r._idb_ca0_hw_status_1),1)
#define WRITE_IDB_CA0_HW_STATUS_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_HW_STATUS_1r_BLKACC,89,-1,0,IDB_CA0_HW_STATUS_1r_OFFSET,0,&(r._idb_ca0_hw_status_1),1)

/*******************************************************************************
 * End of 'IDB_CA0_HW_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA0_HW_STATUS_2
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA0_HW_STATUS_2.
 */
#define READ_IDB_CA0_HW_STATUS_2r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA0_HW_STATUS_2r_BLKACC,89,n,0,IDB_CA0_HW_STATUS_2r_OFFSET,0,(r._idb_ca0_hw_status_2),1)
#define WRITE_IDB_CA0_HW_STATUS_2r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_HW_STATUS_2r_BLKACC,89,n,0,IDB_CA0_HW_STATUS_2r_OFFSET,0,&(r._idb_ca0_hw_status_2),1)
#define WRITE_IDB_CA0_HW_STATUS_2r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_HW_STATUS_2r_BLKACC,89,-1,0,IDB_CA0_HW_STATUS_2r_OFFSET,0,&(r._idb_ca0_hw_status_2),1)

/*******************************************************************************
 * End of 'IDB_CA0_HW_STATUS_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA0_SER_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_CA0_SER_CONTROL.
 */
#define READ_IDB_CA0_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA0_SER_CONTROLr_BLKACC,89,n,0,IDB_CA0_SER_CONTROLr_OFFSET,0,(r._idb_ca0_ser_control),2)
#define WRITE_IDB_CA0_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_SER_CONTROLr_BLKACC,89,n,0,IDB_CA0_SER_CONTROLr_OFFSET,0,&(r._idb_ca0_ser_control),2)
#define WRITE_IDB_CA0_SER_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA0_SER_CONTROLr_BLKACC,89,-1,0,IDB_CA0_SER_CONTROLr_OFFSET,0,&(r._idb_ca0_ser_control),2)

/*******************************************************************************
 * End of 'IDB_CA0_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA1_BUFFER_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA1_BUFFER_CONFIG.
 */
#define READ_IDB_CA1_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA1_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_CA1_BUFFER_CONFIGr_OFFSET,i,(r._idb_ca1_buffer_config),1)
#define WRITE_IDB_CA1_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_CA1_BUFFER_CONFIGr_OFFSET,i,&(r._idb_ca1_buffer_config),1)
#define WRITE_IDB_CA1_BUFFER_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_BUFFER_CONFIGr_BLKACC,89,-1,0,IDB_CA1_BUFFER_CONFIGr_OFFSET,i,&(r._idb_ca1_buffer_config),1)

/*******************************************************************************
 * End of 'IDB_CA1_BUFFER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA1_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA1_CONTROL.
 */
#define READ_IDB_CA1_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA1_CONTROLr_BLKACC,89,n,0,IDB_CA1_CONTROLr_OFFSET,0,(r._idb_ca1_control),1)
#define WRITE_IDB_CA1_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_CONTROLr_BLKACC,89,n,0,IDB_CA1_CONTROLr_OFFSET,0,&(r._idb_ca1_control),1)
#define WRITE_IDB_CA1_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_CONTROLr_BLKACC,89,-1,0,IDB_CA1_CONTROLr_OFFSET,0,&(r._idb_ca1_control),1)

/*******************************************************************************
 * End of 'IDB_CA1_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA1_CT_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA1_CT_CONTROL.
 */
#define READ_IDB_CA1_CT_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA1_CT_CONTROLr_BLKACC,89,n,0,IDB_CA1_CT_CONTROLr_OFFSET,0,(r._idb_ca1_ct_control),1)
#define WRITE_IDB_CA1_CT_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_CT_CONTROLr_BLKACC,89,n,0,IDB_CA1_CT_CONTROLr_OFFSET,0,&(r._idb_ca1_ct_control),1)
#define WRITE_IDB_CA1_CT_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_CT_CONTROLr_BLKACC,89,-1,0,IDB_CA1_CT_CONTROLr_OFFSET,0,&(r._idb_ca1_ct_control),1)

/*******************************************************************************
 * End of 'IDB_CA1_CT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA1_DBG_A
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA1_DBG_A.
 */
#define READ_IDB_CA1_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA1_DBG_Ar_BLKACC,89,n,0,IDB_CA1_DBG_Ar_OFFSET,i,(r._idb_ca1_dbg_a),1)
#define WRITE_IDB_CA1_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_DBG_Ar_BLKACC,89,n,0,IDB_CA1_DBG_Ar_OFFSET,i,&(r._idb_ca1_dbg_a),1)
#define WRITE_IDB_CA1_DBG_Ar_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_DBG_Ar_BLKACC,89,-1,0,IDB_CA1_DBG_Ar_OFFSET,i,&(r._idb_ca1_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_CA1_DBG_Ar'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA1_DBG_B
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA1_DBG_B.
 */
#define READ_IDB_CA1_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA1_DBG_Br_BLKACC,89,n,0,IDB_CA1_DBG_Br_OFFSET,i,(r._idb_ca1_dbg_b),1)
#define WRITE_IDB_CA1_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_DBG_Br_BLKACC,89,n,0,IDB_CA1_DBG_Br_OFFSET,i,&(r._idb_ca1_dbg_b),1)
#define WRITE_IDB_CA1_DBG_Br_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_DBG_Br_BLKACC,89,-1,0,IDB_CA1_DBG_Br_OFFSET,i,&(r._idb_ca1_dbg_b),1)

/*******************************************************************************
 * End of 'IDB_CA1_DBG_Br'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA1_HW_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA1_HW_STATUS.
 */
#define READ_IDB_CA1_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA1_HW_STATUSr_BLKACC,89,n,0,IDB_CA1_HW_STATUSr_OFFSET,0,(r._idb_ca1_hw_status),1)
#define WRITE_IDB_CA1_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_HW_STATUSr_BLKACC,89,n,0,IDB_CA1_HW_STATUSr_OFFSET,0,&(r._idb_ca1_hw_status),1)
#define WRITE_IDB_CA1_HW_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_HW_STATUSr_BLKACC,89,-1,0,IDB_CA1_HW_STATUSr_OFFSET,0,&(r._idb_ca1_hw_status),1)

/*******************************************************************************
 * End of 'IDB_CA1_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA1_HW_STATUS_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA1_HW_STATUS_1.
 */
#define READ_IDB_CA1_HW_STATUS_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA1_HW_STATUS_1r_BLKACC,89,n,0,IDB_CA1_HW_STATUS_1r_OFFSET,0,(r._idb_ca1_hw_status_1),1)
#define WRITE_IDB_CA1_HW_STATUS_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_HW_STATUS_1r_BLKACC,89,n,0,IDB_CA1_HW_STATUS_1r_OFFSET,0,&(r._idb_ca1_hw_status_1),1)
#define WRITE_IDB_CA1_HW_STATUS_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_HW_STATUS_1r_BLKACC,89,-1,0,IDB_CA1_HW_STATUS_1r_OFFSET,0,&(r._idb_ca1_hw_status_1),1)

/*******************************************************************************
 * End of 'IDB_CA1_HW_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA1_HW_STATUS_2
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA1_HW_STATUS_2.
 */
#define READ_IDB_CA1_HW_STATUS_2r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA1_HW_STATUS_2r_BLKACC,89,n,0,IDB_CA1_HW_STATUS_2r_OFFSET,0,(r._idb_ca1_hw_status_2),1)
#define WRITE_IDB_CA1_HW_STATUS_2r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_HW_STATUS_2r_BLKACC,89,n,0,IDB_CA1_HW_STATUS_2r_OFFSET,0,&(r._idb_ca1_hw_status_2),1)
#define WRITE_IDB_CA1_HW_STATUS_2r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_HW_STATUS_2r_BLKACC,89,-1,0,IDB_CA1_HW_STATUS_2r_OFFSET,0,&(r._idb_ca1_hw_status_2),1)

/*******************************************************************************
 * End of 'IDB_CA1_HW_STATUS_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA1_SER_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_CA1_SER_CONTROL.
 */
#define READ_IDB_CA1_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA1_SER_CONTROLr_BLKACC,89,n,0,IDB_CA1_SER_CONTROLr_OFFSET,0,(r._idb_ca1_ser_control),2)
#define WRITE_IDB_CA1_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_SER_CONTROLr_BLKACC,89,n,0,IDB_CA1_SER_CONTROLr_OFFSET,0,&(r._idb_ca1_ser_control),2)
#define WRITE_IDB_CA1_SER_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA1_SER_CONTROLr_BLKACC,89,-1,0,IDB_CA1_SER_CONTROLr_OFFSET,0,&(r._idb_ca1_ser_control),2)

/*******************************************************************************
 * End of 'IDB_CA1_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA2_BUFFER_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA2_BUFFER_CONFIG.
 */
#define READ_IDB_CA2_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA2_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_CA2_BUFFER_CONFIGr_OFFSET,i,(r._idb_ca2_buffer_config),1)
#define WRITE_IDB_CA2_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_CA2_BUFFER_CONFIGr_OFFSET,i,&(r._idb_ca2_buffer_config),1)
#define WRITE_IDB_CA2_BUFFER_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_BUFFER_CONFIGr_BLKACC,89,-1,0,IDB_CA2_BUFFER_CONFIGr_OFFSET,i,&(r._idb_ca2_buffer_config),1)

/*******************************************************************************
 * End of 'IDB_CA2_BUFFER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA2_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA2_CONTROL.
 */
#define READ_IDB_CA2_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA2_CONTROLr_BLKACC,89,n,0,IDB_CA2_CONTROLr_OFFSET,0,(r._idb_ca2_control),1)
#define WRITE_IDB_CA2_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_CONTROLr_BLKACC,89,n,0,IDB_CA2_CONTROLr_OFFSET,0,&(r._idb_ca2_control),1)
#define WRITE_IDB_CA2_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_CONTROLr_BLKACC,89,-1,0,IDB_CA2_CONTROLr_OFFSET,0,&(r._idb_ca2_control),1)

/*******************************************************************************
 * End of 'IDB_CA2_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA2_CT_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA2_CT_CONTROL.
 */
#define READ_IDB_CA2_CT_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA2_CT_CONTROLr_BLKACC,89,n,0,IDB_CA2_CT_CONTROLr_OFFSET,0,(r._idb_ca2_ct_control),1)
#define WRITE_IDB_CA2_CT_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_CT_CONTROLr_BLKACC,89,n,0,IDB_CA2_CT_CONTROLr_OFFSET,0,&(r._idb_ca2_ct_control),1)
#define WRITE_IDB_CA2_CT_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_CT_CONTROLr_BLKACC,89,-1,0,IDB_CA2_CT_CONTROLr_OFFSET,0,&(r._idb_ca2_ct_control),1)

/*******************************************************************************
 * End of 'IDB_CA2_CT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA2_DBG_A
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA2_DBG_A.
 */
#define READ_IDB_CA2_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA2_DBG_Ar_BLKACC,89,n,0,IDB_CA2_DBG_Ar_OFFSET,i,(r._idb_ca2_dbg_a),1)
#define WRITE_IDB_CA2_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_DBG_Ar_BLKACC,89,n,0,IDB_CA2_DBG_Ar_OFFSET,i,&(r._idb_ca2_dbg_a),1)
#define WRITE_IDB_CA2_DBG_Ar_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_DBG_Ar_BLKACC,89,-1,0,IDB_CA2_DBG_Ar_OFFSET,i,&(r._idb_ca2_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_CA2_DBG_Ar'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA2_DBG_B
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA2_DBG_B.
 */
#define READ_IDB_CA2_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA2_DBG_Br_BLKACC,89,n,0,IDB_CA2_DBG_Br_OFFSET,i,(r._idb_ca2_dbg_b),1)
#define WRITE_IDB_CA2_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_DBG_Br_BLKACC,89,n,0,IDB_CA2_DBG_Br_OFFSET,i,&(r._idb_ca2_dbg_b),1)
#define WRITE_IDB_CA2_DBG_Br_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_DBG_Br_BLKACC,89,-1,0,IDB_CA2_DBG_Br_OFFSET,i,&(r._idb_ca2_dbg_b),1)

/*******************************************************************************
 * End of 'IDB_CA2_DBG_Br'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA2_HW_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA2_HW_STATUS.
 */
#define READ_IDB_CA2_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA2_HW_STATUSr_BLKACC,89,n,0,IDB_CA2_HW_STATUSr_OFFSET,0,(r._idb_ca2_hw_status),1)
#define WRITE_IDB_CA2_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_HW_STATUSr_BLKACC,89,n,0,IDB_CA2_HW_STATUSr_OFFSET,0,&(r._idb_ca2_hw_status),1)
#define WRITE_IDB_CA2_HW_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_HW_STATUSr_BLKACC,89,-1,0,IDB_CA2_HW_STATUSr_OFFSET,0,&(r._idb_ca2_hw_status),1)

/*******************************************************************************
 * End of 'IDB_CA2_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA2_HW_STATUS_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA2_HW_STATUS_1.
 */
#define READ_IDB_CA2_HW_STATUS_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA2_HW_STATUS_1r_BLKACC,89,n,0,IDB_CA2_HW_STATUS_1r_OFFSET,0,(r._idb_ca2_hw_status_1),1)
#define WRITE_IDB_CA2_HW_STATUS_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_HW_STATUS_1r_BLKACC,89,n,0,IDB_CA2_HW_STATUS_1r_OFFSET,0,&(r._idb_ca2_hw_status_1),1)
#define WRITE_IDB_CA2_HW_STATUS_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_HW_STATUS_1r_BLKACC,89,-1,0,IDB_CA2_HW_STATUS_1r_OFFSET,0,&(r._idb_ca2_hw_status_1),1)

/*******************************************************************************
 * End of 'IDB_CA2_HW_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA2_HW_STATUS_2
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA2_HW_STATUS_2.
 */
#define READ_IDB_CA2_HW_STATUS_2r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA2_HW_STATUS_2r_BLKACC,89,n,0,IDB_CA2_HW_STATUS_2r_OFFSET,0,(r._idb_ca2_hw_status_2),1)
#define WRITE_IDB_CA2_HW_STATUS_2r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_HW_STATUS_2r_BLKACC,89,n,0,IDB_CA2_HW_STATUS_2r_OFFSET,0,&(r._idb_ca2_hw_status_2),1)
#define WRITE_IDB_CA2_HW_STATUS_2r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_HW_STATUS_2r_BLKACC,89,-1,0,IDB_CA2_HW_STATUS_2r_OFFSET,0,&(r._idb_ca2_hw_status_2),1)

/*******************************************************************************
 * End of 'IDB_CA2_HW_STATUS_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA2_SER_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_CA2_SER_CONTROL.
 */
#define READ_IDB_CA2_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA2_SER_CONTROLr_BLKACC,89,n,0,IDB_CA2_SER_CONTROLr_OFFSET,0,(r._idb_ca2_ser_control),2)
#define WRITE_IDB_CA2_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_SER_CONTROLr_BLKACC,89,n,0,IDB_CA2_SER_CONTROLr_OFFSET,0,&(r._idb_ca2_ser_control),2)
#define WRITE_IDB_CA2_SER_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA2_SER_CONTROLr_BLKACC,89,-1,0,IDB_CA2_SER_CONTROLr_OFFSET,0,&(r._idb_ca2_ser_control),2)

/*******************************************************************************
 * End of 'IDB_CA2_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA3_BUFFER_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA3_BUFFER_CONFIG.
 */
#define READ_IDB_CA3_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA3_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_CA3_BUFFER_CONFIGr_OFFSET,i,(r._idb_ca3_buffer_config),1)
#define WRITE_IDB_CA3_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_CA3_BUFFER_CONFIGr_OFFSET,i,&(r._idb_ca3_buffer_config),1)
#define WRITE_IDB_CA3_BUFFER_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_BUFFER_CONFIGr_BLKACC,89,-1,0,IDB_CA3_BUFFER_CONFIGr_OFFSET,i,&(r._idb_ca3_buffer_config),1)

/*******************************************************************************
 * End of 'IDB_CA3_BUFFER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA3_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA3_CONTROL.
 */
#define READ_IDB_CA3_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA3_CONTROLr_BLKACC,89,n,0,IDB_CA3_CONTROLr_OFFSET,0,(r._idb_ca3_control),1)
#define WRITE_IDB_CA3_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_CONTROLr_BLKACC,89,n,0,IDB_CA3_CONTROLr_OFFSET,0,&(r._idb_ca3_control),1)
#define WRITE_IDB_CA3_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_CONTROLr_BLKACC,89,-1,0,IDB_CA3_CONTROLr_OFFSET,0,&(r._idb_ca3_control),1)

/*******************************************************************************
 * End of 'IDB_CA3_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA3_CT_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA3_CT_CONTROL.
 */
#define READ_IDB_CA3_CT_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA3_CT_CONTROLr_BLKACC,89,n,0,IDB_CA3_CT_CONTROLr_OFFSET,0,(r._idb_ca3_ct_control),1)
#define WRITE_IDB_CA3_CT_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_CT_CONTROLr_BLKACC,89,n,0,IDB_CA3_CT_CONTROLr_OFFSET,0,&(r._idb_ca3_ct_control),1)
#define WRITE_IDB_CA3_CT_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_CT_CONTROLr_BLKACC,89,-1,0,IDB_CA3_CT_CONTROLr_OFFSET,0,&(r._idb_ca3_ct_control),1)

/*******************************************************************************
 * End of 'IDB_CA3_CT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA3_DBG_A
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA3_DBG_A.
 */
#define READ_IDB_CA3_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA3_DBG_Ar_BLKACC,89,n,0,IDB_CA3_DBG_Ar_OFFSET,i,(r._idb_ca3_dbg_a),1)
#define WRITE_IDB_CA3_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_DBG_Ar_BLKACC,89,n,0,IDB_CA3_DBG_Ar_OFFSET,i,&(r._idb_ca3_dbg_a),1)
#define WRITE_IDB_CA3_DBG_Ar_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_DBG_Ar_BLKACC,89,-1,0,IDB_CA3_DBG_Ar_OFFSET,i,&(r._idb_ca3_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_CA3_DBG_Ar'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA3_DBG_B
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA3_DBG_B.
 */
#define READ_IDB_CA3_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA3_DBG_Br_BLKACC,89,n,0,IDB_CA3_DBG_Br_OFFSET,i,(r._idb_ca3_dbg_b),1)
#define WRITE_IDB_CA3_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_DBG_Br_BLKACC,89,n,0,IDB_CA3_DBG_Br_OFFSET,i,&(r._idb_ca3_dbg_b),1)
#define WRITE_IDB_CA3_DBG_Br_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_DBG_Br_BLKACC,89,-1,0,IDB_CA3_DBG_Br_OFFSET,i,&(r._idb_ca3_dbg_b),1)

/*******************************************************************************
 * End of 'IDB_CA3_DBG_Br'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA3_HW_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA3_HW_STATUS.
 */
#define READ_IDB_CA3_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA3_HW_STATUSr_BLKACC,89,n,0,IDB_CA3_HW_STATUSr_OFFSET,0,(r._idb_ca3_hw_status),1)
#define WRITE_IDB_CA3_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_HW_STATUSr_BLKACC,89,n,0,IDB_CA3_HW_STATUSr_OFFSET,0,&(r._idb_ca3_hw_status),1)
#define WRITE_IDB_CA3_HW_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_HW_STATUSr_BLKACC,89,-1,0,IDB_CA3_HW_STATUSr_OFFSET,0,&(r._idb_ca3_hw_status),1)

/*******************************************************************************
 * End of 'IDB_CA3_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA3_HW_STATUS_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA3_HW_STATUS_1.
 */
#define READ_IDB_CA3_HW_STATUS_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA3_HW_STATUS_1r_BLKACC,89,n,0,IDB_CA3_HW_STATUS_1r_OFFSET,0,(r._idb_ca3_hw_status_1),1)
#define WRITE_IDB_CA3_HW_STATUS_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_HW_STATUS_1r_BLKACC,89,n,0,IDB_CA3_HW_STATUS_1r_OFFSET,0,&(r._idb_ca3_hw_status_1),1)
#define WRITE_IDB_CA3_HW_STATUS_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_HW_STATUS_1r_BLKACC,89,-1,0,IDB_CA3_HW_STATUS_1r_OFFSET,0,&(r._idb_ca3_hw_status_1),1)

/*******************************************************************************
 * End of 'IDB_CA3_HW_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA3_HW_STATUS_2
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA3_HW_STATUS_2.
 */
#define READ_IDB_CA3_HW_STATUS_2r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA3_HW_STATUS_2r_BLKACC,89,n,0,IDB_CA3_HW_STATUS_2r_OFFSET,0,(r._idb_ca3_hw_status_2),1)
#define WRITE_IDB_CA3_HW_STATUS_2r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_HW_STATUS_2r_BLKACC,89,n,0,IDB_CA3_HW_STATUS_2r_OFFSET,0,&(r._idb_ca3_hw_status_2),1)
#define WRITE_IDB_CA3_HW_STATUS_2r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_HW_STATUS_2r_BLKACC,89,-1,0,IDB_CA3_HW_STATUS_2r_OFFSET,0,&(r._idb_ca3_hw_status_2),1)

/*******************************************************************************
 * End of 'IDB_CA3_HW_STATUS_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA3_SER_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_CA3_SER_CONTROL.
 */
#define READ_IDB_CA3_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA3_SER_CONTROLr_BLKACC,89,n,0,IDB_CA3_SER_CONTROLr_OFFSET,0,(r._idb_ca3_ser_control),2)
#define WRITE_IDB_CA3_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_SER_CONTROLr_BLKACC,89,n,0,IDB_CA3_SER_CONTROLr_OFFSET,0,&(r._idb_ca3_ser_control),2)
#define WRITE_IDB_CA3_SER_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA3_SER_CONTROLr_BLKACC,89,-1,0,IDB_CA3_SER_CONTROLr_OFFSET,0,&(r._idb_ca3_ser_control),2)

/*******************************************************************************
 * End of 'IDB_CA3_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_AUX_BUFFER_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_AUX_BUFFER_CONFIG.
 */
#define READ_IDB_CA_AUX_BUFFER_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA_AUX_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_CA_AUX_BUFFER_CONFIGr_OFFSET,0,(r._idb_ca_aux_buffer_config),1)
#define WRITE_IDB_CA_AUX_BUFFER_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_AUX_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_CA_AUX_BUFFER_CONFIGr_OFFSET,0,&(r._idb_ca_aux_buffer_config),1)
#define WRITE_IDB_CA_AUX_BUFFER_CONFIGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_AUX_BUFFER_CONFIGr_BLKACC,89,-1,0,IDB_CA_AUX_BUFFER_CONFIGr_OFFSET,0,&(r._idb_ca_aux_buffer_config),1)

/*******************************************************************************
 * End of 'IDB_CA_AUX_BUFFER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_AUX_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_AUX_CONTROL.
 */
#define READ_IDB_CA_AUX_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA_AUX_CONTROLr_BLKACC,89,n,0,IDB_CA_AUX_CONTROLr_OFFSET,0,(r._idb_ca_aux_control),1)
#define WRITE_IDB_CA_AUX_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_AUX_CONTROLr_BLKACC,89,n,0,IDB_CA_AUX_CONTROLr_OFFSET,0,&(r._idb_ca_aux_control),1)
#define WRITE_IDB_CA_AUX_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_AUX_CONTROLr_BLKACC,89,-1,0,IDB_CA_AUX_CONTROLr_OFFSET,0,&(r._idb_ca_aux_control),1)

/*******************************************************************************
 * End of 'IDB_CA_AUX_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_AUX_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_AUX_ECC_STATUS.
 */
#define READ_IDB_CA_AUX_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA_AUX_ECC_STATUSr_BLKACC,89,n,0,IDB_CA_AUX_ECC_STATUSr_OFFSET,0,(r._idb_ca_aux_ecc_status),1)
#define WRITE_IDB_CA_AUX_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_AUX_ECC_STATUSr_BLKACC,89,n,0,IDB_CA_AUX_ECC_STATUSr_OFFSET,0,&(r._idb_ca_aux_ecc_status),1)
#define WRITE_IDB_CA_AUX_ECC_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_AUX_ECC_STATUSr_BLKACC,89,-1,0,IDB_CA_AUX_ECC_STATUSr_OFFSET,0,&(r._idb_ca_aux_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_CA_AUX_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_AUX_HW_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_AUX_HW_STATUS.
 */
#define READ_IDB_CA_AUX_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA_AUX_HW_STATUSr_BLKACC,89,n,0,IDB_CA_AUX_HW_STATUSr_OFFSET,0,(r._idb_ca_aux_hw_status),1)
#define WRITE_IDB_CA_AUX_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_AUX_HW_STATUSr_BLKACC,89,n,0,IDB_CA_AUX_HW_STATUSr_OFFSET,0,&(r._idb_ca_aux_hw_status),1)
#define WRITE_IDB_CA_AUX_HW_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_AUX_HW_STATUSr_BLKACC,89,-1,0,IDB_CA_AUX_HW_STATUSr_OFFSET,0,&(r._idb_ca_aux_hw_status),1)

/*******************************************************************************
 * End of 'IDB_CA_AUX_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_AUX_SER_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_CA_AUX_SER_CONTROL.
 */
#define READ_IDB_CA_AUX_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,IDB_CA_AUX_SER_CONTROLr_BLKACC,89,IDB_CA_AUX_SER_CONTROLr_OFFSET,0,(r._idb_ca_aux_ser_control), 2)
#define WRITE_IDB_CA_AUX_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,IDB_CA_AUX_SER_CONTROLr_BLKACC,89,IDB_CA_AUX_SER_CONTROLr_OFFSET,0,&(r._idb_ca_aux_ser_control), 2)

/*******************************************************************************
 * End of 'IDB_CA_AUX_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_CONTROL_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_CONTROL_1.
 */
#define READ_IDB_CA_CONTROL_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA_CONTROL_1r_BLKACC,89,n,0,IDB_CA_CONTROL_1r_OFFSET,i,(r._idb_ca_control_1),1)
#define WRITE_IDB_CA_CONTROL_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_CONTROL_1r_BLKACC,89,n,0,IDB_CA_CONTROL_1r_OFFSET,i,&(r._idb_ca_control_1),1)
#define WRITE_IDB_CA_CONTROL_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_CONTROL_1r_BLKACC,89,-1,0,IDB_CA_CONTROL_1r_OFFSET,i,&(r._idb_ca_control_1),1)

/*******************************************************************************
 * End of 'IDB_CA_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_CONTROL_2
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_CONTROL_2.
 */
#define READ_IDB_CA_CONTROL_2r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA_CONTROL_2r_BLKACC,89,n,0,IDB_CA_CONTROL_2r_OFFSET,i,(r._idb_ca_control_2),1)
#define WRITE_IDB_CA_CONTROL_2r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_CONTROL_2r_BLKACC,89,n,0,IDB_CA_CONTROL_2r_OFFSET,i,&(r._idb_ca_control_2),1)
#define WRITE_IDB_CA_CONTROL_2r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_CONTROL_2r_BLKACC,89,-1,0,IDB_CA_CONTROL_2r_OFFSET,i,&(r._idb_ca_control_2),1)

/*******************************************************************************
 * End of 'IDB_CA_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_ECC_STATUS.
 */
#define READ_IDB_CA_ECC_STATUSr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA_ECC_STATUSr_BLKACC,89,n,0,IDB_CA_ECC_STATUSr_OFFSET,i,(r._idb_ca_ecc_status),1)
#define WRITE_IDB_CA_ECC_STATUSr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_ECC_STATUSr_BLKACC,89,n,0,IDB_CA_ECC_STATUSr_OFFSET,i,&(r._idb_ca_ecc_status),1)
#define WRITE_IDB_CA_ECC_STATUSr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_ECC_STATUSr_BLKACC,89,-1,0,IDB_CA_ECC_STATUSr_OFFSET,i,&(r._idb_ca_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_CA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_RAM_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_CA_RAM_CONTROL.
 */
#define READ_IDB_CA_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_CA_RAM_CONTROLr_BLKACC,89,n,0,IDB_CA_RAM_CONTROLr_OFFSET,0,(r._idb_ca_ram_control),2)
#define WRITE_IDB_CA_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_RAM_CONTROLr_BLKACC,89,n,0,IDB_CA_RAM_CONTROLr_OFFSET,0,&(r._idb_ca_ram_control),2)
#define WRITE_IDB_CA_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_CA_RAM_CONTROLr_BLKACC,89,-1,0,IDB_CA_RAM_CONTROLr_OFFSET,0,&(r._idb_ca_ram_control),2)

/*******************************************************************************
 * End of 'IDB_CA_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_DBG_B
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_DBG_B.
 */
#define READ_IDB_DBG_Br(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_DBG_Br_BLKACC,89,n,0,IDB_DBG_Br_OFFSET,0,(r._idb_dbg_b),1)
#define WRITE_IDB_DBG_Br(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_DBG_Br_BLKACC,89,n,0,IDB_DBG_Br_OFFSET,0,&(r._idb_dbg_b),1)
#define WRITE_IDB_DBG_Br_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_DBG_Br_BLKACC,89,-1,0,IDB_DBG_Br_OFFSET,0,&(r._idb_dbg_b),1)

/*******************************************************************************
 * End of 'IDB_DBG_Br'
 */




/*******************************************************************************
 * REGISTER:  IDB_INTR_ENABLE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_INTR_ENABLE.
 */
#define READ_IDB_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,IDB_INTR_ENABLEr_BLKACC,89,IDB_INTR_ENABLEr_OFFSET,0,(r._idb_intr_enable), 1)
#define WRITE_IDB_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,IDB_INTR_ENABLEr_BLKACC,89,IDB_INTR_ENABLEr_OFFSET,0,&(r._idb_intr_enable), 1)

/*******************************************************************************
 * End of 'IDB_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_INTR_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_INTR_STATUS.
 */
#define READ_IDB_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_INTR_STATUSr_BLKACC,89,n,0,IDB_INTR_STATUSr_OFFSET,0,(r._idb_intr_status),1)
#define WRITE_IDB_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_INTR_STATUSr_BLKACC,89,n,0,IDB_INTR_STATUSr_OFFSET,0,&(r._idb_intr_status),1)
#define WRITE_IDB_INTR_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_INTR_STATUSr_BLKACC,89,-1,0,IDB_INTR_STATUSr_OFFSET,0,&(r._idb_intr_status),1)

/*******************************************************************************
 * End of 'IDB_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_NULL_SLOT_PORT_NUM
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_NULL_SLOT_PORT_NUM.
 */
#define READ_IDB_NULL_SLOT_PORT_NUMr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_NULL_SLOT_PORT_NUMr_BLKACC,89,n,0,IDB_NULL_SLOT_PORT_NUMr_OFFSET,0,(r._idb_null_slot_port_num),1)
#define WRITE_IDB_NULL_SLOT_PORT_NUMr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_NULL_SLOT_PORT_NUMr_BLKACC,89,n,0,IDB_NULL_SLOT_PORT_NUMr_OFFSET,0,&(r._idb_null_slot_port_num),1)
#define WRITE_IDB_NULL_SLOT_PORT_NUMr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_NULL_SLOT_PORT_NUMr_BLKACC,89,-1,0,IDB_NULL_SLOT_PORT_NUMr_OFFSET,0,&(r._idb_null_slot_port_num),1)

/*******************************************************************************
 * End of 'IDB_NULL_SLOT_PORT_NUMr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_BUFFER_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_BUFFER_CONFIG.
 */
#define READ_IDB_OBM0_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_OBM0_BUFFER_CONFIGr_OFFSET,i,(r._idb_obm0_buffer_config),1)
#define WRITE_IDB_OBM0_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_OBM0_BUFFER_CONFIGr_OFFSET,i,&(r._idb_obm0_buffer_config),1)
#define WRITE_IDB_OBM0_BUFFER_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_BUFFER_CONFIGr_BLKACC,89,-1,0,IDB_OBM0_BUFFER_CONFIGr_OFFSET,i,&(r._idb_obm0_buffer_config),1)

/*******************************************************************************
 * End of 'IDB_OBM0_BUFFER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_CONTROL.
 */
#define READ_IDB_OBM0_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_CONTROLr_BLKACC,89,n,0,IDB_OBM0_CONTROLr_OFFSET,0,(r._idb_obm0_control),2)
#define WRITE_IDB_OBM0_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_CONTROLr_BLKACC,89,n,0,IDB_OBM0_CONTROLr_OFFSET,0,&(r._idb_obm0_control),2)
#define WRITE_IDB_OBM0_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_CONTROLr_BLKACC,89,-1,0,IDB_OBM0_CONTROLr_OFFSET,0,&(r._idb_obm0_control),2)

/*******************************************************************************
 * End of 'IDB_OBM0_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_CTRL_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_CTRL_ECC_STATUS.
 */
#define READ_IDB_OBM0_CTRL_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_CTRL_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM0_CTRL_ECC_STATUSr_OFFSET,0,(r._idb_obm0_ctrl_ecc_status),1)
#define WRITE_IDB_OBM0_CTRL_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_CTRL_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM0_CTRL_ECC_STATUSr_OFFSET,0,&(r._idb_obm0_ctrl_ecc_status),1)
#define WRITE_IDB_OBM0_CTRL_ECC_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_CTRL_ECC_STATUSr_BLKACC,89,-1,0,IDB_OBM0_CTRL_ECC_STATUSr_OFFSET,0,&(r._idb_obm0_ctrl_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM0_CTRL_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_CT_THRESHOLD
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_CT_THRESHOLD.
 */
#define READ_IDB_OBM0_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_CT_THRESHOLDr_BLKACC,89,n,0,IDB_OBM0_CT_THRESHOLDr_OFFSET,i,(r._idb_obm0_ct_threshold),2)
#define WRITE_IDB_OBM0_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_CT_THRESHOLDr_BLKACC,89,n,0,IDB_OBM0_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm0_ct_threshold),2)
#define WRITE_IDB_OBM0_CT_THRESHOLDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_CT_THRESHOLDr_BLKACC,89,-1,0,IDB_OBM0_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm0_ct_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM0_CT_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_DATA_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_DATA_ECC_STATUS.
 */
#define READ_IDB_OBM0_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_DATA_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM0_DATA_ECC_STATUSr_OFFSET,0,(r._idb_obm0_data_ecc_status),1)
#define WRITE_IDB_OBM0_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_DATA_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM0_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm0_data_ecc_status),1)
#define WRITE_IDB_OBM0_DATA_ECC_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_DATA_ECC_STATUSr_BLKACC,89,-1,0,IDB_OBM0_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm0_data_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM0_DATA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_DBG_A
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_DBG_A.
 */
#define READ_IDB_OBM0_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_DBG_Ar_BLKACC,89,n,0,IDB_OBM0_DBG_Ar_OFFSET,i,(r._idb_obm0_dbg_a),1)
#define WRITE_IDB_OBM0_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_DBG_Ar_BLKACC,89,n,0,IDB_OBM0_DBG_Ar_OFFSET,i,&(r._idb_obm0_dbg_a),1)
#define WRITE_IDB_OBM0_DBG_Ar_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_DBG_Ar_BLKACC,89,-1,0,IDB_OBM0_DBG_Ar_OFFSET,i,&(r._idb_obm0_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_OBM0_DBG_Ar'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_DBG_B
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_DBG_B.
 */
#define READ_IDB_OBM0_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_DBG_Br_BLKACC,89,n,0,IDB_OBM0_DBG_Br_OFFSET,i,(r._idb_obm0_dbg_b),1)
#define WRITE_IDB_OBM0_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_DBG_Br_BLKACC,89,n,0,IDB_OBM0_DBG_Br_OFFSET,i,&(r._idb_obm0_dbg_b),1)
#define WRITE_IDB_OBM0_DBG_Br_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_DBG_Br_BLKACC,89,-1,0,IDB_OBM0_DBG_Br_OFFSET,i,&(r._idb_obm0_dbg_b),1)

/*******************************************************************************
 * End of 'IDB_OBM0_DBG_Br'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_DSCP_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_DSCP_MAP_PORT0.
 */
#define READ_IDB_OBM0_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_DSCP_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM0_DSCP_MAP_PORT0m_OFFSET,i,(m._idb_obm0_dscp_map_port0),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM0_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm0_dscp_map_port0),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM0_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm0_dscp_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM0_DSCP_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_DSCP_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_DSCP_MAP_PORT1.
 */
#define READ_IDB_OBM0_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_DSCP_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM0_DSCP_MAP_PORT1m_OFFSET,i,(m._idb_obm0_dscp_map_port1),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM0_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm0_dscp_map_port1),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM0_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm0_dscp_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM0_DSCP_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_DSCP_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_DSCP_MAP_PORT2.
 */
#define READ_IDB_OBM0_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_DSCP_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM0_DSCP_MAP_PORT2m_OFFSET,i,(m._idb_obm0_dscp_map_port2),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM0_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm0_dscp_map_port2),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM0_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm0_dscp_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM0_DSCP_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_DSCP_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_DSCP_MAP_PORT3.
 */
#define READ_IDB_OBM0_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_DSCP_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM0_DSCP_MAP_PORT3m_OFFSET,i,(m._idb_obm0_dscp_map_port3),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM0_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm0_dscp_map_port3),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM0_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm0_dscp_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM0_DSCP_MAP_PORT3m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_ETAG_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_ETAG_MAP_PORT0.
 */
#define READ_IDB_OBM0_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_ETAG_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM0_ETAG_MAP_PORT0m_OFFSET,i,(m._idb_obm0_etag_map_port0),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM0_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm0_etag_map_port0),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM0_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm0_etag_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM0_ETAG_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_ETAG_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_ETAG_MAP_PORT1.
 */
#define READ_IDB_OBM0_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_ETAG_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM0_ETAG_MAP_PORT1m_OFFSET,i,(m._idb_obm0_etag_map_port1),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM0_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm0_etag_map_port1),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM0_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm0_etag_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM0_ETAG_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_ETAG_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_ETAG_MAP_PORT2.
 */
#define READ_IDB_OBM0_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_ETAG_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM0_ETAG_MAP_PORT2m_OFFSET,i,(m._idb_obm0_etag_map_port2),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM0_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm0_etag_map_port2),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM0_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm0_etag_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM0_ETAG_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_ETAG_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_ETAG_MAP_PORT3.
 */
#define READ_IDB_OBM0_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_ETAG_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM0_ETAG_MAP_PORT3m_OFFSET,i,(m._idb_obm0_etag_map_port3),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM0_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm0_etag_map_port3),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM0_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm0_etag_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM0_ETAG_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_FC_THRESHOLD
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_FC_THRESHOLD.
 */
#define READ_IDB_OBM0_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_FC_THRESHOLDr_BLKACC,89,n,0,IDB_OBM0_FC_THRESHOLDr_OFFSET,i,(r._idb_obm0_fc_threshold),2)
#define WRITE_IDB_OBM0_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_FC_THRESHOLDr_BLKACC,89,n,0,IDB_OBM0_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm0_fc_threshold),2)
#define WRITE_IDB_OBM0_FC_THRESHOLDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_FC_THRESHOLDr_BLKACC,89,-1,0,IDB_OBM0_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm0_fc_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM0_FC_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_FC_THRESHOLD_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_FC_THRESHOLD_1.
 */
#define READ_IDB_OBM0_FC_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_FC_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM0_FC_THRESHOLD_1r_OFFSET,i,(r._idb_obm0_fc_threshold_1),2)
#define WRITE_IDB_OBM0_FC_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_FC_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM0_FC_THRESHOLD_1r_OFFSET,i,&(r._idb_obm0_fc_threshold_1),2)
#define WRITE_IDB_OBM0_FC_THRESHOLD_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_FC_THRESHOLD_1r_BLKACC,89,-1,0,IDB_OBM0_FC_THRESHOLD_1r_OFFSET,i,&(r._idb_obm0_fc_threshold_1),2)

/*******************************************************************************
 * End of 'IDB_OBM0_FC_THRESHOLD_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_FLOW_CONTROL_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_FLOW_CONTROL_CONFIG.
 */
#define READ_IDB_OBM0_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_FLOW_CONTROL_CONFIGr_BLKACC,89,n,0,IDB_OBM0_FLOW_CONTROL_CONFIGr_OFFSET,i,(r._idb_obm0_flow_control_config),2)
#define WRITE_IDB_OBM0_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_FLOW_CONTROL_CONFIGr_BLKACC,89,n,0,IDB_OBM0_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm0_flow_control_config),2)
#define WRITE_IDB_OBM0_FLOW_CONTROL_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_FLOW_CONTROL_CONFIGr_BLKACC,89,-1,0,IDB_OBM0_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm0_flow_control_config),2)

/*******************************************************************************
 * End of 'IDB_OBM0_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_FLOW_CONTROL_EVENT_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_FLOW_CONTROL_EVENT_COUNT.
 */
#define READ_IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr_BLKACC,89,n,0,IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,(r._idb_obm0_flow_control_event_count),2)
#define WRITE_IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr_BLKACC,89,n,0,IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm0_flow_control_event_count),2)
#define WRITE_IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr_BLKACC,89,-1,0,IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm0_flow_control_event_count),2)

/*******************************************************************************
 * End of 'IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_GSH_ETHERTYPE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_GSH_ETHERTYPE.
 */
#define READ_IDB_OBM0_GSH_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_GSH_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM0_GSH_ETHERTYPEr_OFFSET,0,(r._idb_obm0_gsh_ethertype),1)
#define WRITE_IDB_OBM0_GSH_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_GSH_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM0_GSH_ETHERTYPEr_OFFSET,0,&(r._idb_obm0_gsh_ethertype),1)
#define WRITE_IDB_OBM0_GSH_ETHERTYPEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_GSH_ETHERTYPEr_BLKACC,89,-1,0,IDB_OBM0_GSH_ETHERTYPEr_OFFSET,0,&(r._idb_obm0_gsh_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM0_GSH_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_HW_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_HW_STATUS.
 */
#define READ_IDB_OBM0_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_HW_STATUSr_BLKACC,89,n,0,IDB_OBM0_HW_STATUSr_OFFSET,0,(r._idb_obm0_hw_status),1)
#define WRITE_IDB_OBM0_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_HW_STATUSr_BLKACC,89,n,0,IDB_OBM0_HW_STATUSr_OFFSET,0,&(r._idb_obm0_hw_status),1)
#define WRITE_IDB_OBM0_HW_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_HW_STATUSr_BLKACC,89,-1,0,IDB_OBM0_HW_STATUSr_OFFSET,0,&(r._idb_obm0_hw_status),1)

/*******************************************************************************
 * End of 'IDB_OBM0_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_INNER_TPID
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_INNER_TPID.
 */
#define READ_IDB_OBM0_INNER_TPIDr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_INNER_TPIDr_BLKACC,89,n,0,IDB_OBM0_INNER_TPIDr_OFFSET,0,(r._idb_obm0_inner_tpid),1)
#define WRITE_IDB_OBM0_INNER_TPIDr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_INNER_TPIDr_BLKACC,89,n,0,IDB_OBM0_INNER_TPIDr_OFFSET,0,&(r._idb_obm0_inner_tpid),1)
#define WRITE_IDB_OBM0_INNER_TPIDr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_INNER_TPIDr_BLKACC,89,-1,0,IDB_OBM0_INNER_TPIDr_OFFSET,0,&(r._idb_obm0_inner_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM0_INNER_TPIDr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_IOM_STATS_WINDOW_RESULTS
 * BLOCKS:   PORT_IF
 * SIZE:     241
 */
/*
 * These macros can be used to access IDB_OBM0_IOM_STATS_WINDOW_RESULTS.
 */
#define READ_IDB_OBM0_IOM_STATS_WINDOW_RESULTSm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_IOM_STATS_WINDOW_RESULTSm_BLKACC,89,n,0,IDB_OBM0_IOM_STATS_WINDOW_RESULTSm_OFFSET,i,(m._idb_obm0_iom_stats_window_results),8)
#define WRITE_IDB_OBM0_IOM_STATS_WINDOW_RESULTSm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_IOM_STATS_WINDOW_RESULTSm_BLKACC,89,n,0,IDB_OBM0_IOM_STATS_WINDOW_RESULTSm_OFFSET,i,&(m._idb_obm0_iom_stats_window_results),8)
#define WRITE_IDB_OBM0_IOM_STATS_WINDOW_RESULTSm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_IOM_STATS_WINDOW_RESULTSm_BLKACC,89,-1,0,IDB_OBM0_IOM_STATS_WINDOW_RESULTSm_OFFSET,i,&(m._idb_obm0_iom_stats_window_results),8)

/*******************************************************************************
 * End of 'IDB_OBM0_IOM_STATS_WINDOW_RESULTSm'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless0_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSLESS0_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSLESS0_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossless0_pkt_drop_count),2)
#define WRITE_IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless0_pkt_drop_count),2)
#define WRITE_IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless0_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless1_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSLESS1_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSLESS1_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossless1_pkt_drop_count),2)
#define WRITE_IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless1_pkt_drop_count),2)
#define WRITE_IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless1_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_hi_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSY_HI_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSY_HI_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossy_hi_pkt_drop_count),2)
#define WRITE_IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_hi_pkt_drop_count),2)
#define WRITE_IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_hi_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_lo_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSY_LO_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSY_LO_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossy_lo_pkt_drop_count),2)
#define WRITE_IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_lo_pkt_drop_count),2)
#define WRITE_IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_lo_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_MAX_USAGE
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_MAX_USAGE.
 */
#define READ_IDB_OBM0_MAX_USAGEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_MAX_USAGEr_BLKACC,89,n,0,IDB_OBM0_MAX_USAGEr_OFFSET,0,(r._idb_obm0_max_usage),2)
#define WRITE_IDB_OBM0_MAX_USAGEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_MAX_USAGEr_BLKACC,89,n,0,IDB_OBM0_MAX_USAGEr_OFFSET,0,&(r._idb_obm0_max_usage),2)
#define WRITE_IDB_OBM0_MAX_USAGEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_MAX_USAGEr_BLKACC,89,-1,0,IDB_OBM0_MAX_USAGEr_OFFSET,0,&(r._idb_obm0_max_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM0_MAX_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_MAX_USAGE_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_MAX_USAGE_1.
 */
#define READ_IDB_OBM0_MAX_USAGE_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_MAX_USAGE_1r_BLKACC,89,n,0,IDB_OBM0_MAX_USAGE_1r_OFFSET,0,(r._idb_obm0_max_usage_1),1)
#define WRITE_IDB_OBM0_MAX_USAGE_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_MAX_USAGE_1r_BLKACC,89,n,0,IDB_OBM0_MAX_USAGE_1r_OFFSET,0,&(r._idb_obm0_max_usage_1),1)
#define WRITE_IDB_OBM0_MAX_USAGE_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_MAX_USAGE_1r_BLKACC,89,-1,0,IDB_OBM0_MAX_USAGE_1r_OFFSET,0,&(r._idb_obm0_max_usage_1),1)

/*******************************************************************************
 * End of 'IDB_OBM0_MAX_USAGE_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_MAX_USAGE_SELECT
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_MAX_USAGE_SELECT.
 */
#define READ_IDB_OBM0_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_MAX_USAGE_SELECTr_BLKACC,89,n,0,IDB_OBM0_MAX_USAGE_SELECTr_OFFSET,0,(r._idb_obm0_max_usage_select),1)
#define WRITE_IDB_OBM0_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_MAX_USAGE_SELECTr_BLKACC,89,n,0,IDB_OBM0_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm0_max_usage_select),1)
#define WRITE_IDB_OBM0_MAX_USAGE_SELECTr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_MAX_USAGE_SELECTr_BLKACC,89,-1,0,IDB_OBM0_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm0_max_usage_select),1)

/*******************************************************************************
 * End of 'IDB_OBM0_MAX_USAGE_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_MONITOR_STATS_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_MONITOR_STATS_CONFIG.
 */
#define READ_IDB_OBM0_MONITOR_STATS_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_MONITOR_STATS_CONFIGr_BLKACC,89,n,0,IDB_OBM0_MONITOR_STATS_CONFIGr_OFFSET,i,(r._idb_obm0_monitor_stats_config),1)
#define WRITE_IDB_OBM0_MONITOR_STATS_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_MONITOR_STATS_CONFIGr_BLKACC,89,n,0,IDB_OBM0_MONITOR_STATS_CONFIGr_OFFSET,i,&(r._idb_obm0_monitor_stats_config),1)
#define WRITE_IDB_OBM0_MONITOR_STATS_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_MONITOR_STATS_CONFIGr_BLKACC,89,-1,0,IDB_OBM0_MONITOR_STATS_CONFIGr_OFFSET,i,&(r._idb_obm0_monitor_stats_config),1)

/*******************************************************************************
 * End of 'IDB_OBM0_MONITOR_STATS_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_NIV_ETHERTYPE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_NIV_ETHERTYPE.
 */
#define READ_IDB_OBM0_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_NIV_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM0_NIV_ETHERTYPEr_OFFSET,0,(r._idb_obm0_niv_ethertype),1)
#define WRITE_IDB_OBM0_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_NIV_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM0_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm0_niv_ethertype),1)
#define WRITE_IDB_OBM0_NIV_ETHERTYPEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_NIV_ETHERTYPEr_BLKACC,89,-1,0,IDB_OBM0_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm0_niv_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM0_NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OPAQUE_TAG_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OPAQUE_TAG_CONFIG.
 */
#define READ_IDB_OBM0_OPAQUE_TAG_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_OPAQUE_TAG_CONFIGr_BLKACC,89,n,0,IDB_OBM0_OPAQUE_TAG_CONFIGr_OFFSET,i,(r._idb_obm0_opaque_tag_config),1)
#define WRITE_IDB_OBM0_OPAQUE_TAG_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OPAQUE_TAG_CONFIGr_BLKACC,89,n,0,IDB_OBM0_OPAQUE_TAG_CONFIGr_OFFSET,i,&(r._idb_obm0_opaque_tag_config),1)
#define WRITE_IDB_OBM0_OPAQUE_TAG_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OPAQUE_TAG_CONFIGr_BLKACC,89,-1,0,IDB_OBM0_OPAQUE_TAG_CONFIGr_OFFSET,i,&(r._idb_obm0_opaque_tag_config),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OPAQUE_TAG_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OPAQUE_TAG_CONFIG_0
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OPAQUE_TAG_CONFIG_0.
 */
#define READ_IDB_OBM0_OPAQUE_TAG_CONFIG_0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_OPAQUE_TAG_CONFIG_0r_BLKACC,89,n,0,IDB_OBM0_OPAQUE_TAG_CONFIG_0r_OFFSET,0,(r._idb_obm0_opaque_tag_config_0),1)
#define WRITE_IDB_OBM0_OPAQUE_TAG_CONFIG_0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OPAQUE_TAG_CONFIG_0r_BLKACC,89,n,0,IDB_OBM0_OPAQUE_TAG_CONFIG_0r_OFFSET,0,&(r._idb_obm0_opaque_tag_config_0),1)
#define WRITE_IDB_OBM0_OPAQUE_TAG_CONFIG_0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OPAQUE_TAG_CONFIG_0r_BLKACC,89,-1,0,IDB_OBM0_OPAQUE_TAG_CONFIG_0r_OFFSET,0,&(r._idb_obm0_opaque_tag_config_0),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OPAQUE_TAG_CONFIG_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OPAQUE_TAG_CONFIG_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OPAQUE_TAG_CONFIG_1.
 */
#define READ_IDB_OBM0_OPAQUE_TAG_CONFIG_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_OPAQUE_TAG_CONFIG_1r_BLKACC,89,n,0,IDB_OBM0_OPAQUE_TAG_CONFIG_1r_OFFSET,0,(r._idb_obm0_opaque_tag_config_1),1)
#define WRITE_IDB_OBM0_OPAQUE_TAG_CONFIG_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OPAQUE_TAG_CONFIG_1r_BLKACC,89,n,0,IDB_OBM0_OPAQUE_TAG_CONFIG_1r_OFFSET,0,&(r._idb_obm0_opaque_tag_config_1),1)
#define WRITE_IDB_OBM0_OPAQUE_TAG_CONFIG_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OPAQUE_TAG_CONFIG_1r_BLKACC,89,-1,0,IDB_OBM0_OPAQUE_TAG_CONFIG_1r_OFFSET,0,&(r._idb_obm0_opaque_tag_config_1),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OPAQUE_TAG_CONFIG_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OUTER_TPID
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OUTER_TPID.
 */
#define READ_IDB_OBM0_OUTER_TPIDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_OUTER_TPIDr_BLKACC,89,n,0,IDB_OBM0_OUTER_TPIDr_OFFSET,i,(r._idb_obm0_outer_tpid),1)
#define WRITE_IDB_OBM0_OUTER_TPIDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OUTER_TPIDr_BLKACC,89,n,0,IDB_OBM0_OUTER_TPIDr_OFFSET,i,&(r._idb_obm0_outer_tpid),1)
#define WRITE_IDB_OBM0_OUTER_TPIDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OUTER_TPIDr_BLKACC,89,-1,0,IDB_OBM0_OUTER_TPIDr_OFFSET,i,&(r._idb_obm0_outer_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OUTER_TPID_0
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OUTER_TPID_0.
 */
#define READ_IDB_OBM0_OUTER_TPID_0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_OUTER_TPID_0r_BLKACC,89,n,0,IDB_OBM0_OUTER_TPID_0r_OFFSET,0,(r._idb_obm0_outer_tpid_0),1)
#define WRITE_IDB_OBM0_OUTER_TPID_0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_0r_BLKACC,89,n,0,IDB_OBM0_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm0_outer_tpid_0),1)
#define WRITE_IDB_OBM0_OUTER_TPID_0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_0r_BLKACC,89,-1,0,IDB_OBM0_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm0_outer_tpid_0),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OUTER_TPID_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OUTER_TPID_1.
 */
#define READ_IDB_OBM0_OUTER_TPID_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_OUTER_TPID_1r_BLKACC,89,n,0,IDB_OBM0_OUTER_TPID_1r_OFFSET,0,(r._idb_obm0_outer_tpid_1),1)
#define WRITE_IDB_OBM0_OUTER_TPID_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_1r_BLKACC,89,n,0,IDB_OBM0_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm0_outer_tpid_1),1)
#define WRITE_IDB_OBM0_OUTER_TPID_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_1r_BLKACC,89,-1,0,IDB_OBM0_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm0_outer_tpid_1),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OUTER_TPID_2
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OUTER_TPID_2.
 */
#define READ_IDB_OBM0_OUTER_TPID_2r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_OUTER_TPID_2r_BLKACC,89,n,0,IDB_OBM0_OUTER_TPID_2r_OFFSET,0,(r._idb_obm0_outer_tpid_2),1)
#define WRITE_IDB_OBM0_OUTER_TPID_2r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_2r_BLKACC,89,n,0,IDB_OBM0_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm0_outer_tpid_2),1)
#define WRITE_IDB_OBM0_OUTER_TPID_2r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_2r_BLKACC,89,-1,0,IDB_OBM0_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm0_outer_tpid_2),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OUTER_TPID_3
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OUTER_TPID_3.
 */
#define READ_IDB_OBM0_OUTER_TPID_3r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_OUTER_TPID_3r_BLKACC,89,n,0,IDB_OBM0_OUTER_TPID_3r_OFFSET,0,(r._idb_obm0_outer_tpid_3),1)
#define WRITE_IDB_OBM0_OUTER_TPID_3r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_3r_BLKACC,89,n,0,IDB_OBM0_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm0_outer_tpid_3),1)
#define WRITE_IDB_OBM0_OUTER_TPID_3r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_3r_BLKACC,89,-1,0,IDB_OBM0_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm0_outer_tpid_3),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OUTER_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OVERSUB_MON_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OVERSUB_MON_ECC_STATUS.
 */
#define READ_IDB_OBM0_OVERSUB_MON_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_OVERSUB_MON_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM0_OVERSUB_MON_ECC_STATUSr_OFFSET,0,(r._idb_obm0_oversub_mon_ecc_status),1)
#define WRITE_IDB_OBM0_OVERSUB_MON_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OVERSUB_MON_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM0_OVERSUB_MON_ECC_STATUSr_OFFSET,0,&(r._idb_obm0_oversub_mon_ecc_status),1)
#define WRITE_IDB_OBM0_OVERSUB_MON_ECC_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_OVERSUB_MON_ECC_STATUSr_BLKACC,89,-1,0,IDB_OBM0_OVERSUB_MON_ECC_STATUSr_OFFSET,0,&(r._idb_obm0_oversub_mon_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OVERSUB_MON_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_PE_ETHERTYPE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_PE_ETHERTYPE.
 */
#define READ_IDB_OBM0_PE_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_PE_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM0_PE_ETHERTYPEr_OFFSET,0,(r._idb_obm0_pe_ethertype),1)
#define WRITE_IDB_OBM0_PE_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_PE_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM0_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm0_pe_ethertype),1)
#define WRITE_IDB_OBM0_PE_ETHERTYPEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_PE_ETHERTYPEr_BLKACC,89,-1,0,IDB_OBM0_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm0_pe_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM0_PE_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_PORT_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_PORT_CONFIG.
 */
#define READ_IDB_OBM0_PORT_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_PORT_CONFIGr_BLKACC,89,n,0,IDB_OBM0_PORT_CONFIGr_OFFSET,i,(r._idb_obm0_port_config),1)
#define WRITE_IDB_OBM0_PORT_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_PORT_CONFIGr_BLKACC,89,n,0,IDB_OBM0_PORT_CONFIGr_OFFSET,i,&(r._idb_obm0_port_config),1)
#define WRITE_IDB_OBM0_PORT_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_PORT_CONFIGr_BLKACC,89,-1,0,IDB_OBM0_PORT_CONFIGr_OFFSET,i,&(r._idb_obm0_port_config),1)

/*******************************************************************************
 * End of 'IDB_OBM0_PORT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_PRI_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_PRI_MAP_PORT0.
 */
#define READ_IDB_OBM0_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_PRI_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM0_PRI_MAP_PORT0m_OFFSET,i,(m._idb_obm0_pri_map_port0),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM0_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm0_pri_map_port0),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM0_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm0_pri_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM0_PRI_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_PRI_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_PRI_MAP_PORT1.
 */
#define READ_IDB_OBM0_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_PRI_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM0_PRI_MAP_PORT1m_OFFSET,i,(m._idb_obm0_pri_map_port1),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM0_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm0_pri_map_port1),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM0_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm0_pri_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM0_PRI_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_PRI_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_PRI_MAP_PORT2.
 */
#define READ_IDB_OBM0_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_PRI_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM0_PRI_MAP_PORT2m_OFFSET,i,(m._idb_obm0_pri_map_port2),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM0_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm0_pri_map_port2),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM0_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm0_pri_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM0_PRI_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_PRI_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_PRI_MAP_PORT3.
 */
#define READ_IDB_OBM0_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_PRI_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM0_PRI_MAP_PORT3m_OFFSET,i,(m._idb_obm0_pri_map_port3),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM0_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm0_pri_map_port3),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM0_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm0_pri_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM0_PRI_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_PROTOCOL_CONTROL_0
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_PROTOCOL_CONTROL_0.
 */
#define READ_IDB_OBM0_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_PROTOCOL_CONTROL_0r_BLKACC,89,n,0,IDB_OBM0_PROTOCOL_CONTROL_0r_OFFSET,i,(r._idb_obm0_protocol_control_0),2)
#define WRITE_IDB_OBM0_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_PROTOCOL_CONTROL_0r_BLKACC,89,n,0,IDB_OBM0_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm0_protocol_control_0),2)
#define WRITE_IDB_OBM0_PROTOCOL_CONTROL_0r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_PROTOCOL_CONTROL_0r_BLKACC,89,-1,0,IDB_OBM0_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm0_protocol_control_0),2)

/*******************************************************************************
 * End of 'IDB_OBM0_PROTOCOL_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_PROTOCOL_CONTROL_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_PROTOCOL_CONTROL_1.
 */
#define READ_IDB_OBM0_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_PROTOCOL_CONTROL_1r_BLKACC,89,n,0,IDB_OBM0_PROTOCOL_CONTROL_1r_OFFSET,i,(r._idb_obm0_protocol_control_1),2)
#define WRITE_IDB_OBM0_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_PROTOCOL_CONTROL_1r_BLKACC,89,n,0,IDB_OBM0_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm0_protocol_control_1),2)
#define WRITE_IDB_OBM0_PROTOCOL_CONTROL_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_PROTOCOL_CONTROL_1r_BLKACC,89,-1,0,IDB_OBM0_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm0_protocol_control_1),2)

/*******************************************************************************
 * End of 'IDB_OBM0_PROTOCOL_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_PROTOCOL_CONTROL_2
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_PROTOCOL_CONTROL_2.
 */
#define READ_IDB_OBM0_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_PROTOCOL_CONTROL_2r_BLKACC,89,n,0,IDB_OBM0_PROTOCOL_CONTROL_2r_OFFSET,i,(r._idb_obm0_protocol_control_2),2)
#define WRITE_IDB_OBM0_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_PROTOCOL_CONTROL_2r_BLKACC,89,n,0,IDB_OBM0_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm0_protocol_control_2),2)
#define WRITE_IDB_OBM0_PROTOCOL_CONTROL_2r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_PROTOCOL_CONTROL_2r_BLKACC,89,-1,0,IDB_OBM0_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm0_protocol_control_2),2)

/*******************************************************************************
 * End of 'IDB_OBM0_PROTOCOL_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_RAM_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_RAM_CONTROL.
 */
#define READ_IDB_OBM0_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_RAM_CONTROLr_BLKACC,89,n,0,IDB_OBM0_RAM_CONTROLr_OFFSET,0,(r._idb_obm0_ram_control),2)
#define WRITE_IDB_OBM0_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_RAM_CONTROLr_BLKACC,89,n,0,IDB_OBM0_RAM_CONTROLr_OFFSET,0,&(r._idb_obm0_ram_control),2)
#define WRITE_IDB_OBM0_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_RAM_CONTROLr_BLKACC,89,-1,0,IDB_OBM0_RAM_CONTROLr_OFFSET,0,&(r._idb_obm0_ram_control),2)

/*******************************************************************************
 * End of 'IDB_OBM0_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_SER_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_SER_CONTROL.
 */
#define READ_IDB_OBM0_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_SER_CONTROLr_BLKACC,89,n,0,IDB_OBM0_SER_CONTROLr_OFFSET,0,(r._idb_obm0_ser_control),1)
#define WRITE_IDB_OBM0_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_SER_CONTROLr_BLKACC,89,n,0,IDB_OBM0_SER_CONTROLr_OFFSET,0,&(r._idb_obm0_ser_control),1)
#define WRITE_IDB_OBM0_SER_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_SER_CONTROLr_BLKACC,89,-1,0,IDB_OBM0_SER_CONTROLr_OFFSET,0,&(r._idb_obm0_ser_control),1)

/*******************************************************************************
 * End of 'IDB_OBM0_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_SHARED_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_SHARED_CONFIG.
 */
#define READ_IDB_OBM0_SHARED_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_SHARED_CONFIGr_BLKACC,89,n,0,IDB_OBM0_SHARED_CONFIGr_OFFSET,0,(r._idb_obm0_shared_config),1)
#define WRITE_IDB_OBM0_SHARED_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_SHARED_CONFIGr_BLKACC,89,n,0,IDB_OBM0_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm0_shared_config),1)
#define WRITE_IDB_OBM0_SHARED_CONFIGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_SHARED_CONFIGr_BLKACC,89,-1,0,IDB_OBM0_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm0_shared_config),1)

/*******************************************************************************
 * End of 'IDB_OBM0_SHARED_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_TC_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_TC_MAP_PORT0.
 */
#define READ_IDB_OBM0_TC_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_TC_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM0_TC_MAP_PORT0m_OFFSET,i,(m._idb_obm0_tc_map_port0),1)
#define WRITE_IDB_OBM0_TC_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_TC_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM0_TC_MAP_PORT0m_OFFSET,i,&(m._idb_obm0_tc_map_port0),1)
#define WRITE_IDB_OBM0_TC_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_TC_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM0_TC_MAP_PORT0m_OFFSET,i,&(m._idb_obm0_tc_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM0_TC_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_TC_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_TC_MAP_PORT1.
 */
#define READ_IDB_OBM0_TC_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_TC_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM0_TC_MAP_PORT1m_OFFSET,i,(m._idb_obm0_tc_map_port1),1)
#define WRITE_IDB_OBM0_TC_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_TC_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM0_TC_MAP_PORT1m_OFFSET,i,&(m._idb_obm0_tc_map_port1),1)
#define WRITE_IDB_OBM0_TC_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_TC_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM0_TC_MAP_PORT1m_OFFSET,i,&(m._idb_obm0_tc_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM0_TC_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_TC_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_TC_MAP_PORT2.
 */
#define READ_IDB_OBM0_TC_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_TC_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM0_TC_MAP_PORT2m_OFFSET,i,(m._idb_obm0_tc_map_port2),1)
#define WRITE_IDB_OBM0_TC_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_TC_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM0_TC_MAP_PORT2m_OFFSET,i,&(m._idb_obm0_tc_map_port2),1)
#define WRITE_IDB_OBM0_TC_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_TC_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM0_TC_MAP_PORT2m_OFFSET,i,&(m._idb_obm0_tc_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM0_TC_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_TC_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_TC_MAP_PORT3.
 */
#define READ_IDB_OBM0_TC_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM0_TC_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM0_TC_MAP_PORT3m_OFFSET,i,(m._idb_obm0_tc_map_port3),1)
#define WRITE_IDB_OBM0_TC_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_TC_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM0_TC_MAP_PORT3m_OFFSET,i,&(m._idb_obm0_tc_map_port3),1)
#define WRITE_IDB_OBM0_TC_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM0_TC_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM0_TC_MAP_PORT3m_OFFSET,i,&(m._idb_obm0_tc_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM0_TC_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_TDM
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_TDM.
 */
#define READ_IDB_OBM0_TDMr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_TDMr_BLKACC,89,n,0,IDB_OBM0_TDMr_OFFSET,0,(r._idb_obm0_tdm),1)
#define WRITE_IDB_OBM0_TDMr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_TDMr_BLKACC,89,n,0,IDB_OBM0_TDMr_OFFSET,0,&(r._idb_obm0_tdm),1)
#define WRITE_IDB_OBM0_TDMr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_TDMr_BLKACC,89,-1,0,IDB_OBM0_TDMr_OFFSET,0,&(r._idb_obm0_tdm),1)

/*******************************************************************************
 * End of 'IDB_OBM0_TDMr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_THRESHOLD
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_THRESHOLD.
 */
#define READ_IDB_OBM0_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_THRESHOLDr_BLKACC,89,n,0,IDB_OBM0_THRESHOLDr_OFFSET,i,(r._idb_obm0_threshold),2)
#define WRITE_IDB_OBM0_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_THRESHOLDr_BLKACC,89,n,0,IDB_OBM0_THRESHOLDr_OFFSET,i,&(r._idb_obm0_threshold),2)
#define WRITE_IDB_OBM0_THRESHOLDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_THRESHOLDr_BLKACC,89,-1,0,IDB_OBM0_THRESHOLDr_OFFSET,i,&(r._idb_obm0_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM0_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_THRESHOLD_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_THRESHOLD_1.
 */
#define READ_IDB_OBM0_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM0_THRESHOLD_1r_OFFSET,i,(r._idb_obm0_threshold_1),2)
#define WRITE_IDB_OBM0_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM0_THRESHOLD_1r_OFFSET,i,&(r._idb_obm0_threshold_1),2)
#define WRITE_IDB_OBM0_THRESHOLD_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_THRESHOLD_1r_BLKACC,89,-1,0,IDB_OBM0_THRESHOLD_1r_OFFSET,i,&(r._idb_obm0_threshold_1),2)

/*******************************************************************************
 * End of 'IDB_OBM0_THRESHOLD_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_USAGE
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_USAGE.
 */
#define READ_IDB_OBM0_USAGEr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_USAGEr_BLKACC,89,n,0,IDB_OBM0_USAGEr_OFFSET,i,(r._idb_obm0_usage),2)
#define WRITE_IDB_OBM0_USAGEr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_USAGEr_BLKACC,89,n,0,IDB_OBM0_USAGEr_OFFSET,i,&(r._idb_obm0_usage),2)
#define WRITE_IDB_OBM0_USAGEr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_USAGEr_BLKACC,89,-1,0,IDB_OBM0_USAGEr_OFFSET,i,&(r._idb_obm0_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM0_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_USAGE_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_USAGE_1.
 */
#define READ_IDB_OBM0_USAGE_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM0_USAGE_1r_BLKACC,89,n,0,IDB_OBM0_USAGE_1r_OFFSET,i,(r._idb_obm0_usage_1),2)
#define WRITE_IDB_OBM0_USAGE_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_USAGE_1r_BLKACC,89,n,0,IDB_OBM0_USAGE_1r_OFFSET,i,&(r._idb_obm0_usage_1),2)
#define WRITE_IDB_OBM0_USAGE_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM0_USAGE_1r_BLKACC,89,-1,0,IDB_OBM0_USAGE_1r_OFFSET,i,&(r._idb_obm0_usage_1),2)

/*******************************************************************************
 * End of 'IDB_OBM0_USAGE_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_BUFFER_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_BUFFER_CONFIG.
 */
#define READ_IDB_OBM1_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_OBM1_BUFFER_CONFIGr_OFFSET,i,(r._idb_obm1_buffer_config),1)
#define WRITE_IDB_OBM1_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_OBM1_BUFFER_CONFIGr_OFFSET,i,&(r._idb_obm1_buffer_config),1)
#define WRITE_IDB_OBM1_BUFFER_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_BUFFER_CONFIGr_BLKACC,89,-1,0,IDB_OBM1_BUFFER_CONFIGr_OFFSET,i,&(r._idb_obm1_buffer_config),1)

/*******************************************************************************
 * End of 'IDB_OBM1_BUFFER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_CONTROL.
 */
#define READ_IDB_OBM1_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_CONTROLr_BLKACC,89,n,0,IDB_OBM1_CONTROLr_OFFSET,0,(r._idb_obm1_control),2)
#define WRITE_IDB_OBM1_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_CONTROLr_BLKACC,89,n,0,IDB_OBM1_CONTROLr_OFFSET,0,&(r._idb_obm1_control),2)
#define WRITE_IDB_OBM1_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_CONTROLr_BLKACC,89,-1,0,IDB_OBM1_CONTROLr_OFFSET,0,&(r._idb_obm1_control),2)

/*******************************************************************************
 * End of 'IDB_OBM1_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_CTRL_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_CTRL_ECC_STATUS.
 */
#define READ_IDB_OBM1_CTRL_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_CTRL_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM1_CTRL_ECC_STATUSr_OFFSET,0,(r._idb_obm1_ctrl_ecc_status),1)
#define WRITE_IDB_OBM1_CTRL_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_CTRL_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM1_CTRL_ECC_STATUSr_OFFSET,0,&(r._idb_obm1_ctrl_ecc_status),1)
#define WRITE_IDB_OBM1_CTRL_ECC_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_CTRL_ECC_STATUSr_BLKACC,89,-1,0,IDB_OBM1_CTRL_ECC_STATUSr_OFFSET,0,&(r._idb_obm1_ctrl_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM1_CTRL_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_CT_THRESHOLD
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_CT_THRESHOLD.
 */
#define READ_IDB_OBM1_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_CT_THRESHOLDr_BLKACC,89,n,0,IDB_OBM1_CT_THRESHOLDr_OFFSET,i,(r._idb_obm1_ct_threshold),2)
#define WRITE_IDB_OBM1_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_CT_THRESHOLDr_BLKACC,89,n,0,IDB_OBM1_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm1_ct_threshold),2)
#define WRITE_IDB_OBM1_CT_THRESHOLDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_CT_THRESHOLDr_BLKACC,89,-1,0,IDB_OBM1_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm1_ct_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM1_CT_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_DATA_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_DATA_ECC_STATUS.
 */
#define READ_IDB_OBM1_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_DATA_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM1_DATA_ECC_STATUSr_OFFSET,0,(r._idb_obm1_data_ecc_status),1)
#define WRITE_IDB_OBM1_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_DATA_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM1_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm1_data_ecc_status),1)
#define WRITE_IDB_OBM1_DATA_ECC_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_DATA_ECC_STATUSr_BLKACC,89,-1,0,IDB_OBM1_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm1_data_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM1_DATA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_DBG_A
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_DBG_A.
 */
#define READ_IDB_OBM1_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_DBG_Ar_BLKACC,89,n,0,IDB_OBM1_DBG_Ar_OFFSET,i,(r._idb_obm1_dbg_a),1)
#define WRITE_IDB_OBM1_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_DBG_Ar_BLKACC,89,n,0,IDB_OBM1_DBG_Ar_OFFSET,i,&(r._idb_obm1_dbg_a),1)
#define WRITE_IDB_OBM1_DBG_Ar_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_DBG_Ar_BLKACC,89,-1,0,IDB_OBM1_DBG_Ar_OFFSET,i,&(r._idb_obm1_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_OBM1_DBG_Ar'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_DBG_B
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_DBG_B.
 */
#define READ_IDB_OBM1_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_DBG_Br_BLKACC,89,n,0,IDB_OBM1_DBG_Br_OFFSET,i,(r._idb_obm1_dbg_b),1)
#define WRITE_IDB_OBM1_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_DBG_Br_BLKACC,89,n,0,IDB_OBM1_DBG_Br_OFFSET,i,&(r._idb_obm1_dbg_b),1)
#define WRITE_IDB_OBM1_DBG_Br_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_DBG_Br_BLKACC,89,-1,0,IDB_OBM1_DBG_Br_OFFSET,i,&(r._idb_obm1_dbg_b),1)

/*******************************************************************************
 * End of 'IDB_OBM1_DBG_Br'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_DSCP_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_DSCP_MAP_PORT0.
 */
#define READ_IDB_OBM1_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_DSCP_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM1_DSCP_MAP_PORT0m_OFFSET,i,(m._idb_obm1_dscp_map_port0),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM1_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm1_dscp_map_port0),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM1_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm1_dscp_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM1_DSCP_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_DSCP_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_DSCP_MAP_PORT1.
 */
#define READ_IDB_OBM1_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_DSCP_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM1_DSCP_MAP_PORT1m_OFFSET,i,(m._idb_obm1_dscp_map_port1),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM1_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm1_dscp_map_port1),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM1_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm1_dscp_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM1_DSCP_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_DSCP_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_DSCP_MAP_PORT2.
 */
#define READ_IDB_OBM1_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_DSCP_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM1_DSCP_MAP_PORT2m_OFFSET,i,(m._idb_obm1_dscp_map_port2),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM1_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm1_dscp_map_port2),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM1_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm1_dscp_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM1_DSCP_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_DSCP_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_DSCP_MAP_PORT3.
 */
#define READ_IDB_OBM1_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_DSCP_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM1_DSCP_MAP_PORT3m_OFFSET,i,(m._idb_obm1_dscp_map_port3),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM1_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm1_dscp_map_port3),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM1_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm1_dscp_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM1_DSCP_MAP_PORT3m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_ETAG_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_ETAG_MAP_PORT0.
 */
#define READ_IDB_OBM1_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_ETAG_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM1_ETAG_MAP_PORT0m_OFFSET,i,(m._idb_obm1_etag_map_port0),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM1_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm1_etag_map_port0),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM1_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm1_etag_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM1_ETAG_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_ETAG_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_ETAG_MAP_PORT1.
 */
#define READ_IDB_OBM1_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_ETAG_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM1_ETAG_MAP_PORT1m_OFFSET,i,(m._idb_obm1_etag_map_port1),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM1_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm1_etag_map_port1),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM1_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm1_etag_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM1_ETAG_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_ETAG_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_ETAG_MAP_PORT2.
 */
#define READ_IDB_OBM1_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_ETAG_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM1_ETAG_MAP_PORT2m_OFFSET,i,(m._idb_obm1_etag_map_port2),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM1_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm1_etag_map_port2),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM1_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm1_etag_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM1_ETAG_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_ETAG_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_ETAG_MAP_PORT3.
 */
#define READ_IDB_OBM1_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_ETAG_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM1_ETAG_MAP_PORT3m_OFFSET,i,(m._idb_obm1_etag_map_port3),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM1_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm1_etag_map_port3),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM1_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm1_etag_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM1_ETAG_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_FC_THRESHOLD
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_FC_THRESHOLD.
 */
#define READ_IDB_OBM1_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_FC_THRESHOLDr_BLKACC,89,n,0,IDB_OBM1_FC_THRESHOLDr_OFFSET,i,(r._idb_obm1_fc_threshold),2)
#define WRITE_IDB_OBM1_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_FC_THRESHOLDr_BLKACC,89,n,0,IDB_OBM1_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm1_fc_threshold),2)
#define WRITE_IDB_OBM1_FC_THRESHOLDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_FC_THRESHOLDr_BLKACC,89,-1,0,IDB_OBM1_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm1_fc_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM1_FC_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_FC_THRESHOLD_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_FC_THRESHOLD_1.
 */
#define READ_IDB_OBM1_FC_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_FC_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM1_FC_THRESHOLD_1r_OFFSET,i,(r._idb_obm1_fc_threshold_1),2)
#define WRITE_IDB_OBM1_FC_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_FC_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM1_FC_THRESHOLD_1r_OFFSET,i,&(r._idb_obm1_fc_threshold_1),2)
#define WRITE_IDB_OBM1_FC_THRESHOLD_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_FC_THRESHOLD_1r_BLKACC,89,-1,0,IDB_OBM1_FC_THRESHOLD_1r_OFFSET,i,&(r._idb_obm1_fc_threshold_1),2)

/*******************************************************************************
 * End of 'IDB_OBM1_FC_THRESHOLD_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_FLOW_CONTROL_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_FLOW_CONTROL_CONFIG.
 */
#define READ_IDB_OBM1_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_FLOW_CONTROL_CONFIGr_BLKACC,89,n,0,IDB_OBM1_FLOW_CONTROL_CONFIGr_OFFSET,i,(r._idb_obm1_flow_control_config),2)
#define WRITE_IDB_OBM1_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_FLOW_CONTROL_CONFIGr_BLKACC,89,n,0,IDB_OBM1_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm1_flow_control_config),2)
#define WRITE_IDB_OBM1_FLOW_CONTROL_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_FLOW_CONTROL_CONFIGr_BLKACC,89,-1,0,IDB_OBM1_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm1_flow_control_config),2)

/*******************************************************************************
 * End of 'IDB_OBM1_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_FLOW_CONTROL_EVENT_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_FLOW_CONTROL_EVENT_COUNT.
 */
#define READ_IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr_BLKACC,89,n,0,IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,(r._idb_obm1_flow_control_event_count),2)
#define WRITE_IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr_BLKACC,89,n,0,IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm1_flow_control_event_count),2)
#define WRITE_IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr_BLKACC,89,-1,0,IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm1_flow_control_event_count),2)

/*******************************************************************************
 * End of 'IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_GSH_ETHERTYPE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_GSH_ETHERTYPE.
 */
#define READ_IDB_OBM1_GSH_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_GSH_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM1_GSH_ETHERTYPEr_OFFSET,0,(r._idb_obm1_gsh_ethertype),1)
#define WRITE_IDB_OBM1_GSH_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_GSH_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM1_GSH_ETHERTYPEr_OFFSET,0,&(r._idb_obm1_gsh_ethertype),1)
#define WRITE_IDB_OBM1_GSH_ETHERTYPEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_GSH_ETHERTYPEr_BLKACC,89,-1,0,IDB_OBM1_GSH_ETHERTYPEr_OFFSET,0,&(r._idb_obm1_gsh_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM1_GSH_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_HW_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_HW_STATUS.
 */
#define READ_IDB_OBM1_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_HW_STATUSr_BLKACC,89,n,0,IDB_OBM1_HW_STATUSr_OFFSET,0,(r._idb_obm1_hw_status),1)
#define WRITE_IDB_OBM1_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_HW_STATUSr_BLKACC,89,n,0,IDB_OBM1_HW_STATUSr_OFFSET,0,&(r._idb_obm1_hw_status),1)
#define WRITE_IDB_OBM1_HW_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_HW_STATUSr_BLKACC,89,-1,0,IDB_OBM1_HW_STATUSr_OFFSET,0,&(r._idb_obm1_hw_status),1)

/*******************************************************************************
 * End of 'IDB_OBM1_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_INNER_TPID
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_INNER_TPID.
 */
#define READ_IDB_OBM1_INNER_TPIDr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_INNER_TPIDr_BLKACC,89,n,0,IDB_OBM1_INNER_TPIDr_OFFSET,0,(r._idb_obm1_inner_tpid),1)
#define WRITE_IDB_OBM1_INNER_TPIDr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_INNER_TPIDr_BLKACC,89,n,0,IDB_OBM1_INNER_TPIDr_OFFSET,0,&(r._idb_obm1_inner_tpid),1)
#define WRITE_IDB_OBM1_INNER_TPIDr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_INNER_TPIDr_BLKACC,89,-1,0,IDB_OBM1_INNER_TPIDr_OFFSET,0,&(r._idb_obm1_inner_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM1_INNER_TPIDr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_IOM_STATS_WINDOW_RESULTS
 * BLOCKS:   PORT_IF
 * SIZE:     241
 */
/*
 * These macros can be used to access IDB_OBM1_IOM_STATS_WINDOW_RESULTS.
 */
#define READ_IDB_OBM1_IOM_STATS_WINDOW_RESULTSm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_IOM_STATS_WINDOW_RESULTSm_BLKACC,89,n,0,IDB_OBM1_IOM_STATS_WINDOW_RESULTSm_OFFSET,i,(m._idb_obm1_iom_stats_window_results),8)
#define WRITE_IDB_OBM1_IOM_STATS_WINDOW_RESULTSm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_IOM_STATS_WINDOW_RESULTSm_BLKACC,89,n,0,IDB_OBM1_IOM_STATS_WINDOW_RESULTSm_OFFSET,i,&(m._idb_obm1_iom_stats_window_results),8)
#define WRITE_IDB_OBM1_IOM_STATS_WINDOW_RESULTSm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_IOM_STATS_WINDOW_RESULTSm_BLKACC,89,-1,0,IDB_OBM1_IOM_STATS_WINDOW_RESULTSm_OFFSET,i,&(m._idb_obm1_iom_stats_window_results),8)

/*******************************************************************************
 * End of 'IDB_OBM1_IOM_STATS_WINDOW_RESULTSm'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless0_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSLESS0_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSLESS0_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossless0_pkt_drop_count),2)
#define WRITE_IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless0_pkt_drop_count),2)
#define WRITE_IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless0_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless1_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSLESS1_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSLESS1_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossless1_pkt_drop_count),2)
#define WRITE_IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless1_pkt_drop_count),2)
#define WRITE_IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless1_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_hi_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSY_HI_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSY_HI_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossy_hi_pkt_drop_count),2)
#define WRITE_IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_hi_pkt_drop_count),2)
#define WRITE_IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_hi_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_lo_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSY_LO_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSY_LO_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossy_lo_pkt_drop_count),2)
#define WRITE_IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_lo_pkt_drop_count),2)
#define WRITE_IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_lo_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_MAX_USAGE
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_MAX_USAGE.
 */
#define READ_IDB_OBM1_MAX_USAGEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_MAX_USAGEr_BLKACC,89,n,0,IDB_OBM1_MAX_USAGEr_OFFSET,0,(r._idb_obm1_max_usage),2)
#define WRITE_IDB_OBM1_MAX_USAGEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_MAX_USAGEr_BLKACC,89,n,0,IDB_OBM1_MAX_USAGEr_OFFSET,0,&(r._idb_obm1_max_usage),2)
#define WRITE_IDB_OBM1_MAX_USAGEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_MAX_USAGEr_BLKACC,89,-1,0,IDB_OBM1_MAX_USAGEr_OFFSET,0,&(r._idb_obm1_max_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM1_MAX_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_MAX_USAGE_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_MAX_USAGE_1.
 */
#define READ_IDB_OBM1_MAX_USAGE_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_MAX_USAGE_1r_BLKACC,89,n,0,IDB_OBM1_MAX_USAGE_1r_OFFSET,0,(r._idb_obm1_max_usage_1),1)
#define WRITE_IDB_OBM1_MAX_USAGE_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_MAX_USAGE_1r_BLKACC,89,n,0,IDB_OBM1_MAX_USAGE_1r_OFFSET,0,&(r._idb_obm1_max_usage_1),1)
#define WRITE_IDB_OBM1_MAX_USAGE_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_MAX_USAGE_1r_BLKACC,89,-1,0,IDB_OBM1_MAX_USAGE_1r_OFFSET,0,&(r._idb_obm1_max_usage_1),1)

/*******************************************************************************
 * End of 'IDB_OBM1_MAX_USAGE_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_MAX_USAGE_SELECT
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_MAX_USAGE_SELECT.
 */
#define READ_IDB_OBM1_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_MAX_USAGE_SELECTr_BLKACC,89,n,0,IDB_OBM1_MAX_USAGE_SELECTr_OFFSET,0,(r._idb_obm1_max_usage_select),1)
#define WRITE_IDB_OBM1_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_MAX_USAGE_SELECTr_BLKACC,89,n,0,IDB_OBM1_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm1_max_usage_select),1)
#define WRITE_IDB_OBM1_MAX_USAGE_SELECTr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_MAX_USAGE_SELECTr_BLKACC,89,-1,0,IDB_OBM1_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm1_max_usage_select),1)

/*******************************************************************************
 * End of 'IDB_OBM1_MAX_USAGE_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_MONITOR_STATS_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_MONITOR_STATS_CONFIG.
 */
#define READ_IDB_OBM1_MONITOR_STATS_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_MONITOR_STATS_CONFIGr_BLKACC,89,n,0,IDB_OBM1_MONITOR_STATS_CONFIGr_OFFSET,i,(r._idb_obm1_monitor_stats_config),1)
#define WRITE_IDB_OBM1_MONITOR_STATS_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_MONITOR_STATS_CONFIGr_BLKACC,89,n,0,IDB_OBM1_MONITOR_STATS_CONFIGr_OFFSET,i,&(r._idb_obm1_monitor_stats_config),1)
#define WRITE_IDB_OBM1_MONITOR_STATS_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_MONITOR_STATS_CONFIGr_BLKACC,89,-1,0,IDB_OBM1_MONITOR_STATS_CONFIGr_OFFSET,i,&(r._idb_obm1_monitor_stats_config),1)

/*******************************************************************************
 * End of 'IDB_OBM1_MONITOR_STATS_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_NIV_ETHERTYPE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_NIV_ETHERTYPE.
 */
#define READ_IDB_OBM1_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_NIV_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM1_NIV_ETHERTYPEr_OFFSET,0,(r._idb_obm1_niv_ethertype),1)
#define WRITE_IDB_OBM1_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_NIV_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM1_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm1_niv_ethertype),1)
#define WRITE_IDB_OBM1_NIV_ETHERTYPEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_NIV_ETHERTYPEr_BLKACC,89,-1,0,IDB_OBM1_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm1_niv_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM1_NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OPAQUE_TAG_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OPAQUE_TAG_CONFIG.
 */
#define READ_IDB_OBM1_OPAQUE_TAG_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_OPAQUE_TAG_CONFIGr_BLKACC,89,n,0,IDB_OBM1_OPAQUE_TAG_CONFIGr_OFFSET,i,(r._idb_obm1_opaque_tag_config),1)
#define WRITE_IDB_OBM1_OPAQUE_TAG_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OPAQUE_TAG_CONFIGr_BLKACC,89,n,0,IDB_OBM1_OPAQUE_TAG_CONFIGr_OFFSET,i,&(r._idb_obm1_opaque_tag_config),1)
#define WRITE_IDB_OBM1_OPAQUE_TAG_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OPAQUE_TAG_CONFIGr_BLKACC,89,-1,0,IDB_OBM1_OPAQUE_TAG_CONFIGr_OFFSET,i,&(r._idb_obm1_opaque_tag_config),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OPAQUE_TAG_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OPAQUE_TAG_CONFIG_0
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OPAQUE_TAG_CONFIG_0.
 */
#define READ_IDB_OBM1_OPAQUE_TAG_CONFIG_0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_OPAQUE_TAG_CONFIG_0r_BLKACC,89,n,0,IDB_OBM1_OPAQUE_TAG_CONFIG_0r_OFFSET,0,(r._idb_obm1_opaque_tag_config_0),1)
#define WRITE_IDB_OBM1_OPAQUE_TAG_CONFIG_0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OPAQUE_TAG_CONFIG_0r_BLKACC,89,n,0,IDB_OBM1_OPAQUE_TAG_CONFIG_0r_OFFSET,0,&(r._idb_obm1_opaque_tag_config_0),1)
#define WRITE_IDB_OBM1_OPAQUE_TAG_CONFIG_0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OPAQUE_TAG_CONFIG_0r_BLKACC,89,-1,0,IDB_OBM1_OPAQUE_TAG_CONFIG_0r_OFFSET,0,&(r._idb_obm1_opaque_tag_config_0),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OPAQUE_TAG_CONFIG_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OPAQUE_TAG_CONFIG_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OPAQUE_TAG_CONFIG_1.
 */
#define READ_IDB_OBM1_OPAQUE_TAG_CONFIG_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_OPAQUE_TAG_CONFIG_1r_BLKACC,89,n,0,IDB_OBM1_OPAQUE_TAG_CONFIG_1r_OFFSET,0,(r._idb_obm1_opaque_tag_config_1),1)
#define WRITE_IDB_OBM1_OPAQUE_TAG_CONFIG_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OPAQUE_TAG_CONFIG_1r_BLKACC,89,n,0,IDB_OBM1_OPAQUE_TAG_CONFIG_1r_OFFSET,0,&(r._idb_obm1_opaque_tag_config_1),1)
#define WRITE_IDB_OBM1_OPAQUE_TAG_CONFIG_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OPAQUE_TAG_CONFIG_1r_BLKACC,89,-1,0,IDB_OBM1_OPAQUE_TAG_CONFIG_1r_OFFSET,0,&(r._idb_obm1_opaque_tag_config_1),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OPAQUE_TAG_CONFIG_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OUTER_TPID
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OUTER_TPID.
 */
#define READ_IDB_OBM1_OUTER_TPIDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_OUTER_TPIDr_BLKACC,89,n,0,IDB_OBM1_OUTER_TPIDr_OFFSET,i,(r._idb_obm1_outer_tpid),1)
#define WRITE_IDB_OBM1_OUTER_TPIDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OUTER_TPIDr_BLKACC,89,n,0,IDB_OBM1_OUTER_TPIDr_OFFSET,i,&(r._idb_obm1_outer_tpid),1)
#define WRITE_IDB_OBM1_OUTER_TPIDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OUTER_TPIDr_BLKACC,89,-1,0,IDB_OBM1_OUTER_TPIDr_OFFSET,i,&(r._idb_obm1_outer_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OUTER_TPID_0
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OUTER_TPID_0.
 */
#define READ_IDB_OBM1_OUTER_TPID_0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_OUTER_TPID_0r_BLKACC,89,n,0,IDB_OBM1_OUTER_TPID_0r_OFFSET,0,(r._idb_obm1_outer_tpid_0),1)
#define WRITE_IDB_OBM1_OUTER_TPID_0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_0r_BLKACC,89,n,0,IDB_OBM1_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm1_outer_tpid_0),1)
#define WRITE_IDB_OBM1_OUTER_TPID_0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_0r_BLKACC,89,-1,0,IDB_OBM1_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm1_outer_tpid_0),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OUTER_TPID_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OUTER_TPID_1.
 */
#define READ_IDB_OBM1_OUTER_TPID_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_OUTER_TPID_1r_BLKACC,89,n,0,IDB_OBM1_OUTER_TPID_1r_OFFSET,0,(r._idb_obm1_outer_tpid_1),1)
#define WRITE_IDB_OBM1_OUTER_TPID_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_1r_BLKACC,89,n,0,IDB_OBM1_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm1_outer_tpid_1),1)
#define WRITE_IDB_OBM1_OUTER_TPID_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_1r_BLKACC,89,-1,0,IDB_OBM1_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm1_outer_tpid_1),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OUTER_TPID_2
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OUTER_TPID_2.
 */
#define READ_IDB_OBM1_OUTER_TPID_2r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_OUTER_TPID_2r_BLKACC,89,n,0,IDB_OBM1_OUTER_TPID_2r_OFFSET,0,(r._idb_obm1_outer_tpid_2),1)
#define WRITE_IDB_OBM1_OUTER_TPID_2r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_2r_BLKACC,89,n,0,IDB_OBM1_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm1_outer_tpid_2),1)
#define WRITE_IDB_OBM1_OUTER_TPID_2r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_2r_BLKACC,89,-1,0,IDB_OBM1_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm1_outer_tpid_2),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OUTER_TPID_3
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OUTER_TPID_3.
 */
#define READ_IDB_OBM1_OUTER_TPID_3r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_OUTER_TPID_3r_BLKACC,89,n,0,IDB_OBM1_OUTER_TPID_3r_OFFSET,0,(r._idb_obm1_outer_tpid_3),1)
#define WRITE_IDB_OBM1_OUTER_TPID_3r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_3r_BLKACC,89,n,0,IDB_OBM1_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm1_outer_tpid_3),1)
#define WRITE_IDB_OBM1_OUTER_TPID_3r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_3r_BLKACC,89,-1,0,IDB_OBM1_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm1_outer_tpid_3),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OUTER_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OVERSUB_MON_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OVERSUB_MON_ECC_STATUS.
 */
#define READ_IDB_OBM1_OVERSUB_MON_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_OVERSUB_MON_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM1_OVERSUB_MON_ECC_STATUSr_OFFSET,0,(r._idb_obm1_oversub_mon_ecc_status),1)
#define WRITE_IDB_OBM1_OVERSUB_MON_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OVERSUB_MON_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM1_OVERSUB_MON_ECC_STATUSr_OFFSET,0,&(r._idb_obm1_oversub_mon_ecc_status),1)
#define WRITE_IDB_OBM1_OVERSUB_MON_ECC_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_OVERSUB_MON_ECC_STATUSr_BLKACC,89,-1,0,IDB_OBM1_OVERSUB_MON_ECC_STATUSr_OFFSET,0,&(r._idb_obm1_oversub_mon_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OVERSUB_MON_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_PE_ETHERTYPE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_PE_ETHERTYPE.
 */
#define READ_IDB_OBM1_PE_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_PE_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM1_PE_ETHERTYPEr_OFFSET,0,(r._idb_obm1_pe_ethertype),1)
#define WRITE_IDB_OBM1_PE_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_PE_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM1_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm1_pe_ethertype),1)
#define WRITE_IDB_OBM1_PE_ETHERTYPEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_PE_ETHERTYPEr_BLKACC,89,-1,0,IDB_OBM1_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm1_pe_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM1_PE_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_PORT_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_PORT_CONFIG.
 */
#define READ_IDB_OBM1_PORT_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_PORT_CONFIGr_BLKACC,89,n,0,IDB_OBM1_PORT_CONFIGr_OFFSET,i,(r._idb_obm1_port_config),1)
#define WRITE_IDB_OBM1_PORT_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_PORT_CONFIGr_BLKACC,89,n,0,IDB_OBM1_PORT_CONFIGr_OFFSET,i,&(r._idb_obm1_port_config),1)
#define WRITE_IDB_OBM1_PORT_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_PORT_CONFIGr_BLKACC,89,-1,0,IDB_OBM1_PORT_CONFIGr_OFFSET,i,&(r._idb_obm1_port_config),1)

/*******************************************************************************
 * End of 'IDB_OBM1_PORT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_PRI_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_PRI_MAP_PORT0.
 */
#define READ_IDB_OBM1_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_PRI_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM1_PRI_MAP_PORT0m_OFFSET,i,(m._idb_obm1_pri_map_port0),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM1_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm1_pri_map_port0),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM1_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm1_pri_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM1_PRI_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_PRI_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_PRI_MAP_PORT1.
 */
#define READ_IDB_OBM1_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_PRI_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM1_PRI_MAP_PORT1m_OFFSET,i,(m._idb_obm1_pri_map_port1),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM1_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm1_pri_map_port1),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM1_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm1_pri_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM1_PRI_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_PRI_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_PRI_MAP_PORT2.
 */
#define READ_IDB_OBM1_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_PRI_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM1_PRI_MAP_PORT2m_OFFSET,i,(m._idb_obm1_pri_map_port2),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM1_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm1_pri_map_port2),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM1_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm1_pri_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM1_PRI_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_PRI_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_PRI_MAP_PORT3.
 */
#define READ_IDB_OBM1_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_PRI_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM1_PRI_MAP_PORT3m_OFFSET,i,(m._idb_obm1_pri_map_port3),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM1_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm1_pri_map_port3),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM1_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm1_pri_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM1_PRI_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_PROTOCOL_CONTROL_0
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_PROTOCOL_CONTROL_0.
 */
#define READ_IDB_OBM1_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_PROTOCOL_CONTROL_0r_BLKACC,89,n,0,IDB_OBM1_PROTOCOL_CONTROL_0r_OFFSET,i,(r._idb_obm1_protocol_control_0),2)
#define WRITE_IDB_OBM1_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_PROTOCOL_CONTROL_0r_BLKACC,89,n,0,IDB_OBM1_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm1_protocol_control_0),2)
#define WRITE_IDB_OBM1_PROTOCOL_CONTROL_0r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_PROTOCOL_CONTROL_0r_BLKACC,89,-1,0,IDB_OBM1_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm1_protocol_control_0),2)

/*******************************************************************************
 * End of 'IDB_OBM1_PROTOCOL_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_PROTOCOL_CONTROL_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_PROTOCOL_CONTROL_1.
 */
#define READ_IDB_OBM1_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_PROTOCOL_CONTROL_1r_BLKACC,89,n,0,IDB_OBM1_PROTOCOL_CONTROL_1r_OFFSET,i,(r._idb_obm1_protocol_control_1),2)
#define WRITE_IDB_OBM1_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_PROTOCOL_CONTROL_1r_BLKACC,89,n,0,IDB_OBM1_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm1_protocol_control_1),2)
#define WRITE_IDB_OBM1_PROTOCOL_CONTROL_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_PROTOCOL_CONTROL_1r_BLKACC,89,-1,0,IDB_OBM1_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm1_protocol_control_1),2)

/*******************************************************************************
 * End of 'IDB_OBM1_PROTOCOL_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_PROTOCOL_CONTROL_2
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_PROTOCOL_CONTROL_2.
 */
#define READ_IDB_OBM1_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_PROTOCOL_CONTROL_2r_BLKACC,89,n,0,IDB_OBM1_PROTOCOL_CONTROL_2r_OFFSET,i,(r._idb_obm1_protocol_control_2),2)
#define WRITE_IDB_OBM1_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_PROTOCOL_CONTROL_2r_BLKACC,89,n,0,IDB_OBM1_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm1_protocol_control_2),2)
#define WRITE_IDB_OBM1_PROTOCOL_CONTROL_2r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_PROTOCOL_CONTROL_2r_BLKACC,89,-1,0,IDB_OBM1_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm1_protocol_control_2),2)

/*******************************************************************************
 * End of 'IDB_OBM1_PROTOCOL_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_RAM_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_RAM_CONTROL.
 */
#define READ_IDB_OBM1_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_RAM_CONTROLr_BLKACC,89,n,0,IDB_OBM1_RAM_CONTROLr_OFFSET,0,(r._idb_obm1_ram_control),2)
#define WRITE_IDB_OBM1_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_RAM_CONTROLr_BLKACC,89,n,0,IDB_OBM1_RAM_CONTROLr_OFFSET,0,&(r._idb_obm1_ram_control),2)
#define WRITE_IDB_OBM1_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_RAM_CONTROLr_BLKACC,89,-1,0,IDB_OBM1_RAM_CONTROLr_OFFSET,0,&(r._idb_obm1_ram_control),2)

/*******************************************************************************
 * End of 'IDB_OBM1_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_SER_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_SER_CONTROL.
 */
#define READ_IDB_OBM1_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_SER_CONTROLr_BLKACC,89,n,0,IDB_OBM1_SER_CONTROLr_OFFSET,0,(r._idb_obm1_ser_control),1)
#define WRITE_IDB_OBM1_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_SER_CONTROLr_BLKACC,89,n,0,IDB_OBM1_SER_CONTROLr_OFFSET,0,&(r._idb_obm1_ser_control),1)
#define WRITE_IDB_OBM1_SER_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_SER_CONTROLr_BLKACC,89,-1,0,IDB_OBM1_SER_CONTROLr_OFFSET,0,&(r._idb_obm1_ser_control),1)

/*******************************************************************************
 * End of 'IDB_OBM1_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_SHARED_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_SHARED_CONFIG.
 */
#define READ_IDB_OBM1_SHARED_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_SHARED_CONFIGr_BLKACC,89,n,0,IDB_OBM1_SHARED_CONFIGr_OFFSET,0,(r._idb_obm1_shared_config),1)
#define WRITE_IDB_OBM1_SHARED_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_SHARED_CONFIGr_BLKACC,89,n,0,IDB_OBM1_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm1_shared_config),1)
#define WRITE_IDB_OBM1_SHARED_CONFIGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_SHARED_CONFIGr_BLKACC,89,-1,0,IDB_OBM1_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm1_shared_config),1)

/*******************************************************************************
 * End of 'IDB_OBM1_SHARED_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_TC_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_TC_MAP_PORT0.
 */
#define READ_IDB_OBM1_TC_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_TC_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM1_TC_MAP_PORT0m_OFFSET,i,(m._idb_obm1_tc_map_port0),1)
#define WRITE_IDB_OBM1_TC_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_TC_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM1_TC_MAP_PORT0m_OFFSET,i,&(m._idb_obm1_tc_map_port0),1)
#define WRITE_IDB_OBM1_TC_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_TC_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM1_TC_MAP_PORT0m_OFFSET,i,&(m._idb_obm1_tc_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM1_TC_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_TC_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_TC_MAP_PORT1.
 */
#define READ_IDB_OBM1_TC_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_TC_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM1_TC_MAP_PORT1m_OFFSET,i,(m._idb_obm1_tc_map_port1),1)
#define WRITE_IDB_OBM1_TC_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_TC_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM1_TC_MAP_PORT1m_OFFSET,i,&(m._idb_obm1_tc_map_port1),1)
#define WRITE_IDB_OBM1_TC_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_TC_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM1_TC_MAP_PORT1m_OFFSET,i,&(m._idb_obm1_tc_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM1_TC_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_TC_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_TC_MAP_PORT2.
 */
#define READ_IDB_OBM1_TC_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_TC_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM1_TC_MAP_PORT2m_OFFSET,i,(m._idb_obm1_tc_map_port2),1)
#define WRITE_IDB_OBM1_TC_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_TC_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM1_TC_MAP_PORT2m_OFFSET,i,&(m._idb_obm1_tc_map_port2),1)
#define WRITE_IDB_OBM1_TC_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_TC_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM1_TC_MAP_PORT2m_OFFSET,i,&(m._idb_obm1_tc_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM1_TC_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_TC_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_TC_MAP_PORT3.
 */
#define READ_IDB_OBM1_TC_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM1_TC_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM1_TC_MAP_PORT3m_OFFSET,i,(m._idb_obm1_tc_map_port3),1)
#define WRITE_IDB_OBM1_TC_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_TC_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM1_TC_MAP_PORT3m_OFFSET,i,&(m._idb_obm1_tc_map_port3),1)
#define WRITE_IDB_OBM1_TC_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM1_TC_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM1_TC_MAP_PORT3m_OFFSET,i,&(m._idb_obm1_tc_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM1_TC_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_TDM
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_TDM.
 */
#define READ_IDB_OBM1_TDMr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_TDMr_BLKACC,89,n,0,IDB_OBM1_TDMr_OFFSET,0,(r._idb_obm1_tdm),1)
#define WRITE_IDB_OBM1_TDMr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_TDMr_BLKACC,89,n,0,IDB_OBM1_TDMr_OFFSET,0,&(r._idb_obm1_tdm),1)
#define WRITE_IDB_OBM1_TDMr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_TDMr_BLKACC,89,-1,0,IDB_OBM1_TDMr_OFFSET,0,&(r._idb_obm1_tdm),1)

/*******************************************************************************
 * End of 'IDB_OBM1_TDMr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_THRESHOLD
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_THRESHOLD.
 */
#define READ_IDB_OBM1_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_THRESHOLDr_BLKACC,89,n,0,IDB_OBM1_THRESHOLDr_OFFSET,i,(r._idb_obm1_threshold),2)
#define WRITE_IDB_OBM1_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_THRESHOLDr_BLKACC,89,n,0,IDB_OBM1_THRESHOLDr_OFFSET,i,&(r._idb_obm1_threshold),2)
#define WRITE_IDB_OBM1_THRESHOLDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_THRESHOLDr_BLKACC,89,-1,0,IDB_OBM1_THRESHOLDr_OFFSET,i,&(r._idb_obm1_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM1_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_THRESHOLD_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_THRESHOLD_1.
 */
#define READ_IDB_OBM1_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM1_THRESHOLD_1r_OFFSET,i,(r._idb_obm1_threshold_1),2)
#define WRITE_IDB_OBM1_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM1_THRESHOLD_1r_OFFSET,i,&(r._idb_obm1_threshold_1),2)
#define WRITE_IDB_OBM1_THRESHOLD_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_THRESHOLD_1r_BLKACC,89,-1,0,IDB_OBM1_THRESHOLD_1r_OFFSET,i,&(r._idb_obm1_threshold_1),2)

/*******************************************************************************
 * End of 'IDB_OBM1_THRESHOLD_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_USAGE
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_USAGE.
 */
#define READ_IDB_OBM1_USAGEr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_USAGEr_BLKACC,89,n,0,IDB_OBM1_USAGEr_OFFSET,i,(r._idb_obm1_usage),2)
#define WRITE_IDB_OBM1_USAGEr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_USAGEr_BLKACC,89,n,0,IDB_OBM1_USAGEr_OFFSET,i,&(r._idb_obm1_usage),2)
#define WRITE_IDB_OBM1_USAGEr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_USAGEr_BLKACC,89,-1,0,IDB_OBM1_USAGEr_OFFSET,i,&(r._idb_obm1_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM1_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_USAGE_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_USAGE_1.
 */
#define READ_IDB_OBM1_USAGE_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM1_USAGE_1r_BLKACC,89,n,0,IDB_OBM1_USAGE_1r_OFFSET,i,(r._idb_obm1_usage_1),2)
#define WRITE_IDB_OBM1_USAGE_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_USAGE_1r_BLKACC,89,n,0,IDB_OBM1_USAGE_1r_OFFSET,i,&(r._idb_obm1_usage_1),2)
#define WRITE_IDB_OBM1_USAGE_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM1_USAGE_1r_BLKACC,89,-1,0,IDB_OBM1_USAGE_1r_OFFSET,i,&(r._idb_obm1_usage_1),2)

/*******************************************************************************
 * End of 'IDB_OBM1_USAGE_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_BUFFER_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_BUFFER_CONFIG.
 */
#define READ_IDB_OBM2_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_OBM2_BUFFER_CONFIGr_OFFSET,i,(r._idb_obm2_buffer_config),1)
#define WRITE_IDB_OBM2_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_OBM2_BUFFER_CONFIGr_OFFSET,i,&(r._idb_obm2_buffer_config),1)
#define WRITE_IDB_OBM2_BUFFER_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_BUFFER_CONFIGr_BLKACC,89,-1,0,IDB_OBM2_BUFFER_CONFIGr_OFFSET,i,&(r._idb_obm2_buffer_config),1)

/*******************************************************************************
 * End of 'IDB_OBM2_BUFFER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_CONTROL.
 */
#define READ_IDB_OBM2_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_CONTROLr_BLKACC,89,n,0,IDB_OBM2_CONTROLr_OFFSET,0,(r._idb_obm2_control),2)
#define WRITE_IDB_OBM2_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_CONTROLr_BLKACC,89,n,0,IDB_OBM2_CONTROLr_OFFSET,0,&(r._idb_obm2_control),2)
#define WRITE_IDB_OBM2_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_CONTROLr_BLKACC,89,-1,0,IDB_OBM2_CONTROLr_OFFSET,0,&(r._idb_obm2_control),2)

/*******************************************************************************
 * End of 'IDB_OBM2_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_CTRL_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_CTRL_ECC_STATUS.
 */
#define READ_IDB_OBM2_CTRL_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_CTRL_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM2_CTRL_ECC_STATUSr_OFFSET,0,(r._idb_obm2_ctrl_ecc_status),1)
#define WRITE_IDB_OBM2_CTRL_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_CTRL_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM2_CTRL_ECC_STATUSr_OFFSET,0,&(r._idb_obm2_ctrl_ecc_status),1)
#define WRITE_IDB_OBM2_CTRL_ECC_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_CTRL_ECC_STATUSr_BLKACC,89,-1,0,IDB_OBM2_CTRL_ECC_STATUSr_OFFSET,0,&(r._idb_obm2_ctrl_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM2_CTRL_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_CT_THRESHOLD
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_CT_THRESHOLD.
 */
#define READ_IDB_OBM2_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_CT_THRESHOLDr_BLKACC,89,n,0,IDB_OBM2_CT_THRESHOLDr_OFFSET,i,(r._idb_obm2_ct_threshold),2)
#define WRITE_IDB_OBM2_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_CT_THRESHOLDr_BLKACC,89,n,0,IDB_OBM2_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm2_ct_threshold),2)
#define WRITE_IDB_OBM2_CT_THRESHOLDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_CT_THRESHOLDr_BLKACC,89,-1,0,IDB_OBM2_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm2_ct_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM2_CT_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_DATA_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_DATA_ECC_STATUS.
 */
#define READ_IDB_OBM2_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_DATA_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM2_DATA_ECC_STATUSr_OFFSET,0,(r._idb_obm2_data_ecc_status),1)
#define WRITE_IDB_OBM2_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_DATA_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM2_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm2_data_ecc_status),1)
#define WRITE_IDB_OBM2_DATA_ECC_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_DATA_ECC_STATUSr_BLKACC,89,-1,0,IDB_OBM2_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm2_data_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM2_DATA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_DBG_A
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_DBG_A.
 */
#define READ_IDB_OBM2_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_DBG_Ar_BLKACC,89,n,0,IDB_OBM2_DBG_Ar_OFFSET,i,(r._idb_obm2_dbg_a),1)
#define WRITE_IDB_OBM2_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_DBG_Ar_BLKACC,89,n,0,IDB_OBM2_DBG_Ar_OFFSET,i,&(r._idb_obm2_dbg_a),1)
#define WRITE_IDB_OBM2_DBG_Ar_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_DBG_Ar_BLKACC,89,-1,0,IDB_OBM2_DBG_Ar_OFFSET,i,&(r._idb_obm2_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_OBM2_DBG_Ar'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_DBG_B
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_DBG_B.
 */
#define READ_IDB_OBM2_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_DBG_Br_BLKACC,89,n,0,IDB_OBM2_DBG_Br_OFFSET,i,(r._idb_obm2_dbg_b),1)
#define WRITE_IDB_OBM2_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_DBG_Br_BLKACC,89,n,0,IDB_OBM2_DBG_Br_OFFSET,i,&(r._idb_obm2_dbg_b),1)
#define WRITE_IDB_OBM2_DBG_Br_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_DBG_Br_BLKACC,89,-1,0,IDB_OBM2_DBG_Br_OFFSET,i,&(r._idb_obm2_dbg_b),1)

/*******************************************************************************
 * End of 'IDB_OBM2_DBG_Br'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_DSCP_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_DSCP_MAP_PORT0.
 */
#define READ_IDB_OBM2_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_DSCP_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM2_DSCP_MAP_PORT0m_OFFSET,i,(m._idb_obm2_dscp_map_port0),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM2_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm2_dscp_map_port0),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM2_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm2_dscp_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM2_DSCP_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_DSCP_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_DSCP_MAP_PORT1.
 */
#define READ_IDB_OBM2_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_DSCP_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM2_DSCP_MAP_PORT1m_OFFSET,i,(m._idb_obm2_dscp_map_port1),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM2_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm2_dscp_map_port1),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM2_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm2_dscp_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM2_DSCP_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_DSCP_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_DSCP_MAP_PORT2.
 */
#define READ_IDB_OBM2_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_DSCP_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM2_DSCP_MAP_PORT2m_OFFSET,i,(m._idb_obm2_dscp_map_port2),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM2_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm2_dscp_map_port2),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM2_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm2_dscp_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM2_DSCP_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_DSCP_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_DSCP_MAP_PORT3.
 */
#define READ_IDB_OBM2_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_DSCP_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM2_DSCP_MAP_PORT3m_OFFSET,i,(m._idb_obm2_dscp_map_port3),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM2_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm2_dscp_map_port3),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM2_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm2_dscp_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM2_DSCP_MAP_PORT3m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_ETAG_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_ETAG_MAP_PORT0.
 */
#define READ_IDB_OBM2_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_ETAG_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM2_ETAG_MAP_PORT0m_OFFSET,i,(m._idb_obm2_etag_map_port0),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM2_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm2_etag_map_port0),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM2_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm2_etag_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM2_ETAG_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_ETAG_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_ETAG_MAP_PORT1.
 */
#define READ_IDB_OBM2_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_ETAG_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM2_ETAG_MAP_PORT1m_OFFSET,i,(m._idb_obm2_etag_map_port1),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM2_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm2_etag_map_port1),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM2_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm2_etag_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM2_ETAG_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_ETAG_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_ETAG_MAP_PORT2.
 */
#define READ_IDB_OBM2_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_ETAG_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM2_ETAG_MAP_PORT2m_OFFSET,i,(m._idb_obm2_etag_map_port2),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM2_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm2_etag_map_port2),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM2_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm2_etag_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM2_ETAG_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_ETAG_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_ETAG_MAP_PORT3.
 */
#define READ_IDB_OBM2_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_ETAG_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM2_ETAG_MAP_PORT3m_OFFSET,i,(m._idb_obm2_etag_map_port3),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM2_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm2_etag_map_port3),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM2_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm2_etag_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM2_ETAG_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_FC_THRESHOLD
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_FC_THRESHOLD.
 */
#define READ_IDB_OBM2_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_FC_THRESHOLDr_BLKACC,89,n,0,IDB_OBM2_FC_THRESHOLDr_OFFSET,i,(r._idb_obm2_fc_threshold),2)
#define WRITE_IDB_OBM2_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_FC_THRESHOLDr_BLKACC,89,n,0,IDB_OBM2_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm2_fc_threshold),2)
#define WRITE_IDB_OBM2_FC_THRESHOLDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_FC_THRESHOLDr_BLKACC,89,-1,0,IDB_OBM2_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm2_fc_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM2_FC_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_FC_THRESHOLD_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_FC_THRESHOLD_1.
 */
#define READ_IDB_OBM2_FC_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_FC_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM2_FC_THRESHOLD_1r_OFFSET,i,(r._idb_obm2_fc_threshold_1),2)
#define WRITE_IDB_OBM2_FC_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_FC_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM2_FC_THRESHOLD_1r_OFFSET,i,&(r._idb_obm2_fc_threshold_1),2)
#define WRITE_IDB_OBM2_FC_THRESHOLD_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_FC_THRESHOLD_1r_BLKACC,89,-1,0,IDB_OBM2_FC_THRESHOLD_1r_OFFSET,i,&(r._idb_obm2_fc_threshold_1),2)

/*******************************************************************************
 * End of 'IDB_OBM2_FC_THRESHOLD_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_FLOW_CONTROL_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_FLOW_CONTROL_CONFIG.
 */
#define READ_IDB_OBM2_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_FLOW_CONTROL_CONFIGr_BLKACC,89,n,0,IDB_OBM2_FLOW_CONTROL_CONFIGr_OFFSET,i,(r._idb_obm2_flow_control_config),2)
#define WRITE_IDB_OBM2_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_FLOW_CONTROL_CONFIGr_BLKACC,89,n,0,IDB_OBM2_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm2_flow_control_config),2)
#define WRITE_IDB_OBM2_FLOW_CONTROL_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_FLOW_CONTROL_CONFIGr_BLKACC,89,-1,0,IDB_OBM2_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm2_flow_control_config),2)

/*******************************************************************************
 * End of 'IDB_OBM2_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_FLOW_CONTROL_EVENT_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_FLOW_CONTROL_EVENT_COUNT.
 */
#define READ_IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr_BLKACC,89,n,0,IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,(r._idb_obm2_flow_control_event_count),2)
#define WRITE_IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr_BLKACC,89,n,0,IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm2_flow_control_event_count),2)
#define WRITE_IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr_BLKACC,89,-1,0,IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm2_flow_control_event_count),2)

/*******************************************************************************
 * End of 'IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_GSH_ETHERTYPE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_GSH_ETHERTYPE.
 */
#define READ_IDB_OBM2_GSH_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_GSH_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM2_GSH_ETHERTYPEr_OFFSET,0,(r._idb_obm2_gsh_ethertype),1)
#define WRITE_IDB_OBM2_GSH_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_GSH_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM2_GSH_ETHERTYPEr_OFFSET,0,&(r._idb_obm2_gsh_ethertype),1)
#define WRITE_IDB_OBM2_GSH_ETHERTYPEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_GSH_ETHERTYPEr_BLKACC,89,-1,0,IDB_OBM2_GSH_ETHERTYPEr_OFFSET,0,&(r._idb_obm2_gsh_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM2_GSH_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_HW_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_HW_STATUS.
 */
#define READ_IDB_OBM2_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_HW_STATUSr_BLKACC,89,n,0,IDB_OBM2_HW_STATUSr_OFFSET,0,(r._idb_obm2_hw_status),1)
#define WRITE_IDB_OBM2_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_HW_STATUSr_BLKACC,89,n,0,IDB_OBM2_HW_STATUSr_OFFSET,0,&(r._idb_obm2_hw_status),1)
#define WRITE_IDB_OBM2_HW_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_HW_STATUSr_BLKACC,89,-1,0,IDB_OBM2_HW_STATUSr_OFFSET,0,&(r._idb_obm2_hw_status),1)

/*******************************************************************************
 * End of 'IDB_OBM2_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_INNER_TPID
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_INNER_TPID.
 */
#define READ_IDB_OBM2_INNER_TPIDr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_INNER_TPIDr_BLKACC,89,n,0,IDB_OBM2_INNER_TPIDr_OFFSET,0,(r._idb_obm2_inner_tpid),1)
#define WRITE_IDB_OBM2_INNER_TPIDr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_INNER_TPIDr_BLKACC,89,n,0,IDB_OBM2_INNER_TPIDr_OFFSET,0,&(r._idb_obm2_inner_tpid),1)
#define WRITE_IDB_OBM2_INNER_TPIDr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_INNER_TPIDr_BLKACC,89,-1,0,IDB_OBM2_INNER_TPIDr_OFFSET,0,&(r._idb_obm2_inner_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM2_INNER_TPIDr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_IOM_STATS_WINDOW_RESULTS
 * BLOCKS:   PORT_IF
 * SIZE:     241
 */
/*
 * These macros can be used to access IDB_OBM2_IOM_STATS_WINDOW_RESULTS.
 */
#define READ_IDB_OBM2_IOM_STATS_WINDOW_RESULTSm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_IOM_STATS_WINDOW_RESULTSm_BLKACC,89,n,0,IDB_OBM2_IOM_STATS_WINDOW_RESULTSm_OFFSET,i,(m._idb_obm2_iom_stats_window_results),8)
#define WRITE_IDB_OBM2_IOM_STATS_WINDOW_RESULTSm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_IOM_STATS_WINDOW_RESULTSm_BLKACC,89,n,0,IDB_OBM2_IOM_STATS_WINDOW_RESULTSm_OFFSET,i,&(m._idb_obm2_iom_stats_window_results),8)
#define WRITE_IDB_OBM2_IOM_STATS_WINDOW_RESULTSm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_IOM_STATS_WINDOW_RESULTSm_BLKACC,89,-1,0,IDB_OBM2_IOM_STATS_WINDOW_RESULTSm_OFFSET,i,&(m._idb_obm2_iom_stats_window_results),8)

/*******************************************************************************
 * End of 'IDB_OBM2_IOM_STATS_WINDOW_RESULTSm'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless0_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSLESS0_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSLESS0_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossless0_pkt_drop_count),2)
#define WRITE_IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless0_pkt_drop_count),2)
#define WRITE_IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless0_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless1_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSLESS1_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSLESS1_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossless1_pkt_drop_count),2)
#define WRITE_IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless1_pkt_drop_count),2)
#define WRITE_IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless1_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_hi_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSY_HI_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSY_HI_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossy_hi_pkt_drop_count),2)
#define WRITE_IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_hi_pkt_drop_count),2)
#define WRITE_IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_hi_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_lo_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSY_LO_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSY_LO_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossy_lo_pkt_drop_count),2)
#define WRITE_IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_lo_pkt_drop_count),2)
#define WRITE_IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_lo_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_MAX_USAGE
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_MAX_USAGE.
 */
#define READ_IDB_OBM2_MAX_USAGEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_MAX_USAGEr_BLKACC,89,n,0,IDB_OBM2_MAX_USAGEr_OFFSET,0,(r._idb_obm2_max_usage),2)
#define WRITE_IDB_OBM2_MAX_USAGEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_MAX_USAGEr_BLKACC,89,n,0,IDB_OBM2_MAX_USAGEr_OFFSET,0,&(r._idb_obm2_max_usage),2)
#define WRITE_IDB_OBM2_MAX_USAGEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_MAX_USAGEr_BLKACC,89,-1,0,IDB_OBM2_MAX_USAGEr_OFFSET,0,&(r._idb_obm2_max_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM2_MAX_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_MAX_USAGE_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_MAX_USAGE_1.
 */
#define READ_IDB_OBM2_MAX_USAGE_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_MAX_USAGE_1r_BLKACC,89,n,0,IDB_OBM2_MAX_USAGE_1r_OFFSET,0,(r._idb_obm2_max_usage_1),1)
#define WRITE_IDB_OBM2_MAX_USAGE_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_MAX_USAGE_1r_BLKACC,89,n,0,IDB_OBM2_MAX_USAGE_1r_OFFSET,0,&(r._idb_obm2_max_usage_1),1)
#define WRITE_IDB_OBM2_MAX_USAGE_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_MAX_USAGE_1r_BLKACC,89,-1,0,IDB_OBM2_MAX_USAGE_1r_OFFSET,0,&(r._idb_obm2_max_usage_1),1)

/*******************************************************************************
 * End of 'IDB_OBM2_MAX_USAGE_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_MAX_USAGE_SELECT
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_MAX_USAGE_SELECT.
 */
#define READ_IDB_OBM2_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_MAX_USAGE_SELECTr_BLKACC,89,n,0,IDB_OBM2_MAX_USAGE_SELECTr_OFFSET,0,(r._idb_obm2_max_usage_select),1)
#define WRITE_IDB_OBM2_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_MAX_USAGE_SELECTr_BLKACC,89,n,0,IDB_OBM2_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm2_max_usage_select),1)
#define WRITE_IDB_OBM2_MAX_USAGE_SELECTr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_MAX_USAGE_SELECTr_BLKACC,89,-1,0,IDB_OBM2_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm2_max_usage_select),1)

/*******************************************************************************
 * End of 'IDB_OBM2_MAX_USAGE_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_MONITOR_STATS_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_MONITOR_STATS_CONFIG.
 */
#define READ_IDB_OBM2_MONITOR_STATS_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_MONITOR_STATS_CONFIGr_BLKACC,89,n,0,IDB_OBM2_MONITOR_STATS_CONFIGr_OFFSET,i,(r._idb_obm2_monitor_stats_config),1)
#define WRITE_IDB_OBM2_MONITOR_STATS_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_MONITOR_STATS_CONFIGr_BLKACC,89,n,0,IDB_OBM2_MONITOR_STATS_CONFIGr_OFFSET,i,&(r._idb_obm2_monitor_stats_config),1)
#define WRITE_IDB_OBM2_MONITOR_STATS_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_MONITOR_STATS_CONFIGr_BLKACC,89,-1,0,IDB_OBM2_MONITOR_STATS_CONFIGr_OFFSET,i,&(r._idb_obm2_monitor_stats_config),1)

/*******************************************************************************
 * End of 'IDB_OBM2_MONITOR_STATS_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_NIV_ETHERTYPE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_NIV_ETHERTYPE.
 */
#define READ_IDB_OBM2_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_NIV_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM2_NIV_ETHERTYPEr_OFFSET,0,(r._idb_obm2_niv_ethertype),1)
#define WRITE_IDB_OBM2_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_NIV_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM2_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm2_niv_ethertype),1)
#define WRITE_IDB_OBM2_NIV_ETHERTYPEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_NIV_ETHERTYPEr_BLKACC,89,-1,0,IDB_OBM2_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm2_niv_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM2_NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OPAQUE_TAG_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OPAQUE_TAG_CONFIG.
 */
#define READ_IDB_OBM2_OPAQUE_TAG_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_OPAQUE_TAG_CONFIGr_BLKACC,89,n,0,IDB_OBM2_OPAQUE_TAG_CONFIGr_OFFSET,i,(r._idb_obm2_opaque_tag_config),1)
#define WRITE_IDB_OBM2_OPAQUE_TAG_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OPAQUE_TAG_CONFIGr_BLKACC,89,n,0,IDB_OBM2_OPAQUE_TAG_CONFIGr_OFFSET,i,&(r._idb_obm2_opaque_tag_config),1)
#define WRITE_IDB_OBM2_OPAQUE_TAG_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OPAQUE_TAG_CONFIGr_BLKACC,89,-1,0,IDB_OBM2_OPAQUE_TAG_CONFIGr_OFFSET,i,&(r._idb_obm2_opaque_tag_config),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OPAQUE_TAG_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OPAQUE_TAG_CONFIG_0
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OPAQUE_TAG_CONFIG_0.
 */
#define READ_IDB_OBM2_OPAQUE_TAG_CONFIG_0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_OPAQUE_TAG_CONFIG_0r_BLKACC,89,n,0,IDB_OBM2_OPAQUE_TAG_CONFIG_0r_OFFSET,0,(r._idb_obm2_opaque_tag_config_0),1)
#define WRITE_IDB_OBM2_OPAQUE_TAG_CONFIG_0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OPAQUE_TAG_CONFIG_0r_BLKACC,89,n,0,IDB_OBM2_OPAQUE_TAG_CONFIG_0r_OFFSET,0,&(r._idb_obm2_opaque_tag_config_0),1)
#define WRITE_IDB_OBM2_OPAQUE_TAG_CONFIG_0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OPAQUE_TAG_CONFIG_0r_BLKACC,89,-1,0,IDB_OBM2_OPAQUE_TAG_CONFIG_0r_OFFSET,0,&(r._idb_obm2_opaque_tag_config_0),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OPAQUE_TAG_CONFIG_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OPAQUE_TAG_CONFIG_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OPAQUE_TAG_CONFIG_1.
 */
#define READ_IDB_OBM2_OPAQUE_TAG_CONFIG_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_OPAQUE_TAG_CONFIG_1r_BLKACC,89,n,0,IDB_OBM2_OPAQUE_TAG_CONFIG_1r_OFFSET,0,(r._idb_obm2_opaque_tag_config_1),1)
#define WRITE_IDB_OBM2_OPAQUE_TAG_CONFIG_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OPAQUE_TAG_CONFIG_1r_BLKACC,89,n,0,IDB_OBM2_OPAQUE_TAG_CONFIG_1r_OFFSET,0,&(r._idb_obm2_opaque_tag_config_1),1)
#define WRITE_IDB_OBM2_OPAQUE_TAG_CONFIG_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OPAQUE_TAG_CONFIG_1r_BLKACC,89,-1,0,IDB_OBM2_OPAQUE_TAG_CONFIG_1r_OFFSET,0,&(r._idb_obm2_opaque_tag_config_1),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OPAQUE_TAG_CONFIG_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OUTER_TPID
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OUTER_TPID.
 */
#define READ_IDB_OBM2_OUTER_TPIDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_OUTER_TPIDr_BLKACC,89,n,0,IDB_OBM2_OUTER_TPIDr_OFFSET,i,(r._idb_obm2_outer_tpid),1)
#define WRITE_IDB_OBM2_OUTER_TPIDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OUTER_TPIDr_BLKACC,89,n,0,IDB_OBM2_OUTER_TPIDr_OFFSET,i,&(r._idb_obm2_outer_tpid),1)
#define WRITE_IDB_OBM2_OUTER_TPIDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OUTER_TPIDr_BLKACC,89,-1,0,IDB_OBM2_OUTER_TPIDr_OFFSET,i,&(r._idb_obm2_outer_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OUTER_TPID_0
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OUTER_TPID_0.
 */
#define READ_IDB_OBM2_OUTER_TPID_0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_OUTER_TPID_0r_BLKACC,89,n,0,IDB_OBM2_OUTER_TPID_0r_OFFSET,0,(r._idb_obm2_outer_tpid_0),1)
#define WRITE_IDB_OBM2_OUTER_TPID_0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_0r_BLKACC,89,n,0,IDB_OBM2_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm2_outer_tpid_0),1)
#define WRITE_IDB_OBM2_OUTER_TPID_0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_0r_BLKACC,89,-1,0,IDB_OBM2_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm2_outer_tpid_0),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OUTER_TPID_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OUTER_TPID_1.
 */
#define READ_IDB_OBM2_OUTER_TPID_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_OUTER_TPID_1r_BLKACC,89,n,0,IDB_OBM2_OUTER_TPID_1r_OFFSET,0,(r._idb_obm2_outer_tpid_1),1)
#define WRITE_IDB_OBM2_OUTER_TPID_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_1r_BLKACC,89,n,0,IDB_OBM2_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm2_outer_tpid_1),1)
#define WRITE_IDB_OBM2_OUTER_TPID_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_1r_BLKACC,89,-1,0,IDB_OBM2_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm2_outer_tpid_1),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OUTER_TPID_2
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OUTER_TPID_2.
 */
#define READ_IDB_OBM2_OUTER_TPID_2r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_OUTER_TPID_2r_BLKACC,89,n,0,IDB_OBM2_OUTER_TPID_2r_OFFSET,0,(r._idb_obm2_outer_tpid_2),1)
#define WRITE_IDB_OBM2_OUTER_TPID_2r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_2r_BLKACC,89,n,0,IDB_OBM2_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm2_outer_tpid_2),1)
#define WRITE_IDB_OBM2_OUTER_TPID_2r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_2r_BLKACC,89,-1,0,IDB_OBM2_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm2_outer_tpid_2),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OUTER_TPID_3
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OUTER_TPID_3.
 */
#define READ_IDB_OBM2_OUTER_TPID_3r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_OUTER_TPID_3r_BLKACC,89,n,0,IDB_OBM2_OUTER_TPID_3r_OFFSET,0,(r._idb_obm2_outer_tpid_3),1)
#define WRITE_IDB_OBM2_OUTER_TPID_3r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_3r_BLKACC,89,n,0,IDB_OBM2_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm2_outer_tpid_3),1)
#define WRITE_IDB_OBM2_OUTER_TPID_3r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_3r_BLKACC,89,-1,0,IDB_OBM2_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm2_outer_tpid_3),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OUTER_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OVERSUB_MON_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OVERSUB_MON_ECC_STATUS.
 */
#define READ_IDB_OBM2_OVERSUB_MON_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_OVERSUB_MON_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM2_OVERSUB_MON_ECC_STATUSr_OFFSET,0,(r._idb_obm2_oversub_mon_ecc_status),1)
#define WRITE_IDB_OBM2_OVERSUB_MON_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OVERSUB_MON_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM2_OVERSUB_MON_ECC_STATUSr_OFFSET,0,&(r._idb_obm2_oversub_mon_ecc_status),1)
#define WRITE_IDB_OBM2_OVERSUB_MON_ECC_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_OVERSUB_MON_ECC_STATUSr_BLKACC,89,-1,0,IDB_OBM2_OVERSUB_MON_ECC_STATUSr_OFFSET,0,&(r._idb_obm2_oversub_mon_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OVERSUB_MON_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_PE_ETHERTYPE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_PE_ETHERTYPE.
 */
#define READ_IDB_OBM2_PE_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_PE_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM2_PE_ETHERTYPEr_OFFSET,0,(r._idb_obm2_pe_ethertype),1)
#define WRITE_IDB_OBM2_PE_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_PE_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM2_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm2_pe_ethertype),1)
#define WRITE_IDB_OBM2_PE_ETHERTYPEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_PE_ETHERTYPEr_BLKACC,89,-1,0,IDB_OBM2_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm2_pe_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM2_PE_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_PORT_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_PORT_CONFIG.
 */
#define READ_IDB_OBM2_PORT_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_PORT_CONFIGr_BLKACC,89,n,0,IDB_OBM2_PORT_CONFIGr_OFFSET,i,(r._idb_obm2_port_config),1)
#define WRITE_IDB_OBM2_PORT_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_PORT_CONFIGr_BLKACC,89,n,0,IDB_OBM2_PORT_CONFIGr_OFFSET,i,&(r._idb_obm2_port_config),1)
#define WRITE_IDB_OBM2_PORT_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_PORT_CONFIGr_BLKACC,89,-1,0,IDB_OBM2_PORT_CONFIGr_OFFSET,i,&(r._idb_obm2_port_config),1)

/*******************************************************************************
 * End of 'IDB_OBM2_PORT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_PRI_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_PRI_MAP_PORT0.
 */
#define READ_IDB_OBM2_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_PRI_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM2_PRI_MAP_PORT0m_OFFSET,i,(m._idb_obm2_pri_map_port0),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM2_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm2_pri_map_port0),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM2_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm2_pri_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM2_PRI_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_PRI_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_PRI_MAP_PORT1.
 */
#define READ_IDB_OBM2_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_PRI_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM2_PRI_MAP_PORT1m_OFFSET,i,(m._idb_obm2_pri_map_port1),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM2_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm2_pri_map_port1),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM2_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm2_pri_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM2_PRI_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_PRI_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_PRI_MAP_PORT2.
 */
#define READ_IDB_OBM2_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_PRI_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM2_PRI_MAP_PORT2m_OFFSET,i,(m._idb_obm2_pri_map_port2),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM2_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm2_pri_map_port2),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM2_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm2_pri_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM2_PRI_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_PRI_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_PRI_MAP_PORT3.
 */
#define READ_IDB_OBM2_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_PRI_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM2_PRI_MAP_PORT3m_OFFSET,i,(m._idb_obm2_pri_map_port3),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM2_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm2_pri_map_port3),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM2_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm2_pri_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM2_PRI_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_PROTOCOL_CONTROL_0
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_PROTOCOL_CONTROL_0.
 */
#define READ_IDB_OBM2_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_PROTOCOL_CONTROL_0r_BLKACC,89,n,0,IDB_OBM2_PROTOCOL_CONTROL_0r_OFFSET,i,(r._idb_obm2_protocol_control_0),2)
#define WRITE_IDB_OBM2_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_PROTOCOL_CONTROL_0r_BLKACC,89,n,0,IDB_OBM2_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm2_protocol_control_0),2)
#define WRITE_IDB_OBM2_PROTOCOL_CONTROL_0r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_PROTOCOL_CONTROL_0r_BLKACC,89,-1,0,IDB_OBM2_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm2_protocol_control_0),2)

/*******************************************************************************
 * End of 'IDB_OBM2_PROTOCOL_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_PROTOCOL_CONTROL_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_PROTOCOL_CONTROL_1.
 */
#define READ_IDB_OBM2_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_PROTOCOL_CONTROL_1r_BLKACC,89,n,0,IDB_OBM2_PROTOCOL_CONTROL_1r_OFFSET,i,(r._idb_obm2_protocol_control_1),2)
#define WRITE_IDB_OBM2_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_PROTOCOL_CONTROL_1r_BLKACC,89,n,0,IDB_OBM2_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm2_protocol_control_1),2)
#define WRITE_IDB_OBM2_PROTOCOL_CONTROL_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_PROTOCOL_CONTROL_1r_BLKACC,89,-1,0,IDB_OBM2_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm2_protocol_control_1),2)

/*******************************************************************************
 * End of 'IDB_OBM2_PROTOCOL_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_PROTOCOL_CONTROL_2
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_PROTOCOL_CONTROL_2.
 */
#define READ_IDB_OBM2_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_PROTOCOL_CONTROL_2r_BLKACC,89,n,0,IDB_OBM2_PROTOCOL_CONTROL_2r_OFFSET,i,(r._idb_obm2_protocol_control_2),2)
#define WRITE_IDB_OBM2_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_PROTOCOL_CONTROL_2r_BLKACC,89,n,0,IDB_OBM2_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm2_protocol_control_2),2)
#define WRITE_IDB_OBM2_PROTOCOL_CONTROL_2r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_PROTOCOL_CONTROL_2r_BLKACC,89,-1,0,IDB_OBM2_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm2_protocol_control_2),2)

/*******************************************************************************
 * End of 'IDB_OBM2_PROTOCOL_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_RAM_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_RAM_CONTROL.
 */
#define READ_IDB_OBM2_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_RAM_CONTROLr_BLKACC,89,n,0,IDB_OBM2_RAM_CONTROLr_OFFSET,0,(r._idb_obm2_ram_control),2)
#define WRITE_IDB_OBM2_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_RAM_CONTROLr_BLKACC,89,n,0,IDB_OBM2_RAM_CONTROLr_OFFSET,0,&(r._idb_obm2_ram_control),2)
#define WRITE_IDB_OBM2_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_RAM_CONTROLr_BLKACC,89,-1,0,IDB_OBM2_RAM_CONTROLr_OFFSET,0,&(r._idb_obm2_ram_control),2)

/*******************************************************************************
 * End of 'IDB_OBM2_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_SER_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_SER_CONTROL.
 */
#define READ_IDB_OBM2_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_SER_CONTROLr_BLKACC,89,n,0,IDB_OBM2_SER_CONTROLr_OFFSET,0,(r._idb_obm2_ser_control),1)
#define WRITE_IDB_OBM2_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_SER_CONTROLr_BLKACC,89,n,0,IDB_OBM2_SER_CONTROLr_OFFSET,0,&(r._idb_obm2_ser_control),1)
#define WRITE_IDB_OBM2_SER_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_SER_CONTROLr_BLKACC,89,-1,0,IDB_OBM2_SER_CONTROLr_OFFSET,0,&(r._idb_obm2_ser_control),1)

/*******************************************************************************
 * End of 'IDB_OBM2_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_SHARED_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_SHARED_CONFIG.
 */
#define READ_IDB_OBM2_SHARED_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_SHARED_CONFIGr_BLKACC,89,n,0,IDB_OBM2_SHARED_CONFIGr_OFFSET,0,(r._idb_obm2_shared_config),1)
#define WRITE_IDB_OBM2_SHARED_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_SHARED_CONFIGr_BLKACC,89,n,0,IDB_OBM2_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm2_shared_config),1)
#define WRITE_IDB_OBM2_SHARED_CONFIGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_SHARED_CONFIGr_BLKACC,89,-1,0,IDB_OBM2_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm2_shared_config),1)

/*******************************************************************************
 * End of 'IDB_OBM2_SHARED_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_TC_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_TC_MAP_PORT0.
 */
#define READ_IDB_OBM2_TC_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_TC_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM2_TC_MAP_PORT0m_OFFSET,i,(m._idb_obm2_tc_map_port0),1)
#define WRITE_IDB_OBM2_TC_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_TC_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM2_TC_MAP_PORT0m_OFFSET,i,&(m._idb_obm2_tc_map_port0),1)
#define WRITE_IDB_OBM2_TC_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_TC_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM2_TC_MAP_PORT0m_OFFSET,i,&(m._idb_obm2_tc_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM2_TC_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_TC_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_TC_MAP_PORT1.
 */
#define READ_IDB_OBM2_TC_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_TC_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM2_TC_MAP_PORT1m_OFFSET,i,(m._idb_obm2_tc_map_port1),1)
#define WRITE_IDB_OBM2_TC_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_TC_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM2_TC_MAP_PORT1m_OFFSET,i,&(m._idb_obm2_tc_map_port1),1)
#define WRITE_IDB_OBM2_TC_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_TC_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM2_TC_MAP_PORT1m_OFFSET,i,&(m._idb_obm2_tc_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM2_TC_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_TC_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_TC_MAP_PORT2.
 */
#define READ_IDB_OBM2_TC_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_TC_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM2_TC_MAP_PORT2m_OFFSET,i,(m._idb_obm2_tc_map_port2),1)
#define WRITE_IDB_OBM2_TC_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_TC_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM2_TC_MAP_PORT2m_OFFSET,i,&(m._idb_obm2_tc_map_port2),1)
#define WRITE_IDB_OBM2_TC_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_TC_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM2_TC_MAP_PORT2m_OFFSET,i,&(m._idb_obm2_tc_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM2_TC_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_TC_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_TC_MAP_PORT3.
 */
#define READ_IDB_OBM2_TC_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM2_TC_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM2_TC_MAP_PORT3m_OFFSET,i,(m._idb_obm2_tc_map_port3),1)
#define WRITE_IDB_OBM2_TC_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_TC_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM2_TC_MAP_PORT3m_OFFSET,i,&(m._idb_obm2_tc_map_port3),1)
#define WRITE_IDB_OBM2_TC_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM2_TC_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM2_TC_MAP_PORT3m_OFFSET,i,&(m._idb_obm2_tc_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM2_TC_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_TDM
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_TDM.
 */
#define READ_IDB_OBM2_TDMr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_TDMr_BLKACC,89,n,0,IDB_OBM2_TDMr_OFFSET,0,(r._idb_obm2_tdm),1)
#define WRITE_IDB_OBM2_TDMr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_TDMr_BLKACC,89,n,0,IDB_OBM2_TDMr_OFFSET,0,&(r._idb_obm2_tdm),1)
#define WRITE_IDB_OBM2_TDMr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_TDMr_BLKACC,89,-1,0,IDB_OBM2_TDMr_OFFSET,0,&(r._idb_obm2_tdm),1)

/*******************************************************************************
 * End of 'IDB_OBM2_TDMr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_THRESHOLD
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_THRESHOLD.
 */
#define READ_IDB_OBM2_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_THRESHOLDr_BLKACC,89,n,0,IDB_OBM2_THRESHOLDr_OFFSET,i,(r._idb_obm2_threshold),2)
#define WRITE_IDB_OBM2_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_THRESHOLDr_BLKACC,89,n,0,IDB_OBM2_THRESHOLDr_OFFSET,i,&(r._idb_obm2_threshold),2)
#define WRITE_IDB_OBM2_THRESHOLDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_THRESHOLDr_BLKACC,89,-1,0,IDB_OBM2_THRESHOLDr_OFFSET,i,&(r._idb_obm2_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM2_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_THRESHOLD_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_THRESHOLD_1.
 */
#define READ_IDB_OBM2_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM2_THRESHOLD_1r_OFFSET,i,(r._idb_obm2_threshold_1),2)
#define WRITE_IDB_OBM2_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM2_THRESHOLD_1r_OFFSET,i,&(r._idb_obm2_threshold_1),2)
#define WRITE_IDB_OBM2_THRESHOLD_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_THRESHOLD_1r_BLKACC,89,-1,0,IDB_OBM2_THRESHOLD_1r_OFFSET,i,&(r._idb_obm2_threshold_1),2)

/*******************************************************************************
 * End of 'IDB_OBM2_THRESHOLD_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_USAGE
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_USAGE.
 */
#define READ_IDB_OBM2_USAGEr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_USAGEr_BLKACC,89,n,0,IDB_OBM2_USAGEr_OFFSET,i,(r._idb_obm2_usage),2)
#define WRITE_IDB_OBM2_USAGEr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_USAGEr_BLKACC,89,n,0,IDB_OBM2_USAGEr_OFFSET,i,&(r._idb_obm2_usage),2)
#define WRITE_IDB_OBM2_USAGEr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_USAGEr_BLKACC,89,-1,0,IDB_OBM2_USAGEr_OFFSET,i,&(r._idb_obm2_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM2_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_USAGE_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_USAGE_1.
 */
#define READ_IDB_OBM2_USAGE_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM2_USAGE_1r_BLKACC,89,n,0,IDB_OBM2_USAGE_1r_OFFSET,i,(r._idb_obm2_usage_1),2)
#define WRITE_IDB_OBM2_USAGE_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_USAGE_1r_BLKACC,89,n,0,IDB_OBM2_USAGE_1r_OFFSET,i,&(r._idb_obm2_usage_1),2)
#define WRITE_IDB_OBM2_USAGE_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM2_USAGE_1r_BLKACC,89,-1,0,IDB_OBM2_USAGE_1r_OFFSET,i,&(r._idb_obm2_usage_1),2)

/*******************************************************************************
 * End of 'IDB_OBM2_USAGE_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_BUFFER_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_BUFFER_CONFIG.
 */
#define READ_IDB_OBM3_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_OBM3_BUFFER_CONFIGr_OFFSET,i,(r._idb_obm3_buffer_config),1)
#define WRITE_IDB_OBM3_BUFFER_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_BUFFER_CONFIGr_BLKACC,89,n,0,IDB_OBM3_BUFFER_CONFIGr_OFFSET,i,&(r._idb_obm3_buffer_config),1)
#define WRITE_IDB_OBM3_BUFFER_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_BUFFER_CONFIGr_BLKACC,89,-1,0,IDB_OBM3_BUFFER_CONFIGr_OFFSET,i,&(r._idb_obm3_buffer_config),1)

/*******************************************************************************
 * End of 'IDB_OBM3_BUFFER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_CONTROL.
 */
#define READ_IDB_OBM3_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_CONTROLr_BLKACC,89,n,0,IDB_OBM3_CONTROLr_OFFSET,0,(r._idb_obm3_control),2)
#define WRITE_IDB_OBM3_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_CONTROLr_BLKACC,89,n,0,IDB_OBM3_CONTROLr_OFFSET,0,&(r._idb_obm3_control),2)
#define WRITE_IDB_OBM3_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_CONTROLr_BLKACC,89,-1,0,IDB_OBM3_CONTROLr_OFFSET,0,&(r._idb_obm3_control),2)

/*******************************************************************************
 * End of 'IDB_OBM3_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_CTRL_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_CTRL_ECC_STATUS.
 */
#define READ_IDB_OBM3_CTRL_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_CTRL_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM3_CTRL_ECC_STATUSr_OFFSET,0,(r._idb_obm3_ctrl_ecc_status),1)
#define WRITE_IDB_OBM3_CTRL_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_CTRL_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM3_CTRL_ECC_STATUSr_OFFSET,0,&(r._idb_obm3_ctrl_ecc_status),1)
#define WRITE_IDB_OBM3_CTRL_ECC_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_CTRL_ECC_STATUSr_BLKACC,89,-1,0,IDB_OBM3_CTRL_ECC_STATUSr_OFFSET,0,&(r._idb_obm3_ctrl_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM3_CTRL_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_CT_THRESHOLD
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_CT_THRESHOLD.
 */
#define READ_IDB_OBM3_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_CT_THRESHOLDr_BLKACC,89,n,0,IDB_OBM3_CT_THRESHOLDr_OFFSET,i,(r._idb_obm3_ct_threshold),2)
#define WRITE_IDB_OBM3_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_CT_THRESHOLDr_BLKACC,89,n,0,IDB_OBM3_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm3_ct_threshold),2)
#define WRITE_IDB_OBM3_CT_THRESHOLDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_CT_THRESHOLDr_BLKACC,89,-1,0,IDB_OBM3_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm3_ct_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM3_CT_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_DATA_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_DATA_ECC_STATUS.
 */
#define READ_IDB_OBM3_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_DATA_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM3_DATA_ECC_STATUSr_OFFSET,0,(r._idb_obm3_data_ecc_status),1)
#define WRITE_IDB_OBM3_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_DATA_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM3_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm3_data_ecc_status),1)
#define WRITE_IDB_OBM3_DATA_ECC_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_DATA_ECC_STATUSr_BLKACC,89,-1,0,IDB_OBM3_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm3_data_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM3_DATA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_DBG_A
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_DBG_A.
 */
#define READ_IDB_OBM3_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_DBG_Ar_BLKACC,89,n,0,IDB_OBM3_DBG_Ar_OFFSET,i,(r._idb_obm3_dbg_a),1)
#define WRITE_IDB_OBM3_DBG_Ar(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_DBG_Ar_BLKACC,89,n,0,IDB_OBM3_DBG_Ar_OFFSET,i,&(r._idb_obm3_dbg_a),1)
#define WRITE_IDB_OBM3_DBG_Ar_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_DBG_Ar_BLKACC,89,-1,0,IDB_OBM3_DBG_Ar_OFFSET,i,&(r._idb_obm3_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_OBM3_DBG_Ar'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_DBG_B
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_DBG_B.
 */
#define READ_IDB_OBM3_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_DBG_Br_BLKACC,89,n,0,IDB_OBM3_DBG_Br_OFFSET,i,(r._idb_obm3_dbg_b),1)
#define WRITE_IDB_OBM3_DBG_Br(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_DBG_Br_BLKACC,89,n,0,IDB_OBM3_DBG_Br_OFFSET,i,&(r._idb_obm3_dbg_b),1)
#define WRITE_IDB_OBM3_DBG_Br_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_DBG_Br_BLKACC,89,-1,0,IDB_OBM3_DBG_Br_OFFSET,i,&(r._idb_obm3_dbg_b),1)

/*******************************************************************************
 * End of 'IDB_OBM3_DBG_Br'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_DSCP_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_DSCP_MAP_PORT0.
 */
#define READ_IDB_OBM3_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_DSCP_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM3_DSCP_MAP_PORT0m_OFFSET,i,(m._idb_obm3_dscp_map_port0),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM3_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm3_dscp_map_port0),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM3_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm3_dscp_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM3_DSCP_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_DSCP_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_DSCP_MAP_PORT1.
 */
#define READ_IDB_OBM3_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_DSCP_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM3_DSCP_MAP_PORT1m_OFFSET,i,(m._idb_obm3_dscp_map_port1),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM3_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm3_dscp_map_port1),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM3_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm3_dscp_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM3_DSCP_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_DSCP_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_DSCP_MAP_PORT2.
 */
#define READ_IDB_OBM3_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_DSCP_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM3_DSCP_MAP_PORT2m_OFFSET,i,(m._idb_obm3_dscp_map_port2),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM3_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm3_dscp_map_port2),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM3_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm3_dscp_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM3_DSCP_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_DSCP_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_DSCP_MAP_PORT3.
 */
#define READ_IDB_OBM3_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_DSCP_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM3_DSCP_MAP_PORT3m_OFFSET,i,(m._idb_obm3_dscp_map_port3),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM3_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm3_dscp_map_port3),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM3_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm3_dscp_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM3_DSCP_MAP_PORT3m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_ETAG_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_ETAG_MAP_PORT0.
 */
#define READ_IDB_OBM3_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_ETAG_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM3_ETAG_MAP_PORT0m_OFFSET,i,(m._idb_obm3_etag_map_port0),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM3_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm3_etag_map_port0),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM3_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm3_etag_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM3_ETAG_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_ETAG_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_ETAG_MAP_PORT1.
 */
#define READ_IDB_OBM3_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_ETAG_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM3_ETAG_MAP_PORT1m_OFFSET,i,(m._idb_obm3_etag_map_port1),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM3_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm3_etag_map_port1),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM3_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm3_etag_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM3_ETAG_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_ETAG_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_ETAG_MAP_PORT2.
 */
#define READ_IDB_OBM3_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_ETAG_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM3_ETAG_MAP_PORT2m_OFFSET,i,(m._idb_obm3_etag_map_port2),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM3_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm3_etag_map_port2),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM3_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm3_etag_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM3_ETAG_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_ETAG_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_ETAG_MAP_PORT3.
 */
#define READ_IDB_OBM3_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_ETAG_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM3_ETAG_MAP_PORT3m_OFFSET,i,(m._idb_obm3_etag_map_port3),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM3_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm3_etag_map_port3),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM3_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm3_etag_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM3_ETAG_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_FC_THRESHOLD
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_FC_THRESHOLD.
 */
#define READ_IDB_OBM3_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_FC_THRESHOLDr_BLKACC,89,n,0,IDB_OBM3_FC_THRESHOLDr_OFFSET,i,(r._idb_obm3_fc_threshold),2)
#define WRITE_IDB_OBM3_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_FC_THRESHOLDr_BLKACC,89,n,0,IDB_OBM3_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm3_fc_threshold),2)
#define WRITE_IDB_OBM3_FC_THRESHOLDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_FC_THRESHOLDr_BLKACC,89,-1,0,IDB_OBM3_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm3_fc_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM3_FC_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_FC_THRESHOLD_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_FC_THRESHOLD_1.
 */
#define READ_IDB_OBM3_FC_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_FC_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM3_FC_THRESHOLD_1r_OFFSET,i,(r._idb_obm3_fc_threshold_1),2)
#define WRITE_IDB_OBM3_FC_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_FC_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM3_FC_THRESHOLD_1r_OFFSET,i,&(r._idb_obm3_fc_threshold_1),2)
#define WRITE_IDB_OBM3_FC_THRESHOLD_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_FC_THRESHOLD_1r_BLKACC,89,-1,0,IDB_OBM3_FC_THRESHOLD_1r_OFFSET,i,&(r._idb_obm3_fc_threshold_1),2)

/*******************************************************************************
 * End of 'IDB_OBM3_FC_THRESHOLD_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_FLOW_CONTROL_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_FLOW_CONTROL_CONFIG.
 */
#define READ_IDB_OBM3_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_FLOW_CONTROL_CONFIGr_BLKACC,89,n,0,IDB_OBM3_FLOW_CONTROL_CONFIGr_OFFSET,i,(r._idb_obm3_flow_control_config),2)
#define WRITE_IDB_OBM3_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_FLOW_CONTROL_CONFIGr_BLKACC,89,n,0,IDB_OBM3_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm3_flow_control_config),2)
#define WRITE_IDB_OBM3_FLOW_CONTROL_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_FLOW_CONTROL_CONFIGr_BLKACC,89,-1,0,IDB_OBM3_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm3_flow_control_config),2)

/*******************************************************************************
 * End of 'IDB_OBM3_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_FLOW_CONTROL_EVENT_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_FLOW_CONTROL_EVENT_COUNT.
 */
#define READ_IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr_BLKACC,89,n,0,IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,(r._idb_obm3_flow_control_event_count),2)
#define WRITE_IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr_BLKACC,89,n,0,IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm3_flow_control_event_count),2)
#define WRITE_IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr_BLKACC,89,-1,0,IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm3_flow_control_event_count),2)

/*******************************************************************************
 * End of 'IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_GSH_ETHERTYPE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_GSH_ETHERTYPE.
 */
#define READ_IDB_OBM3_GSH_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_GSH_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM3_GSH_ETHERTYPEr_OFFSET,0,(r._idb_obm3_gsh_ethertype),1)
#define WRITE_IDB_OBM3_GSH_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_GSH_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM3_GSH_ETHERTYPEr_OFFSET,0,&(r._idb_obm3_gsh_ethertype),1)
#define WRITE_IDB_OBM3_GSH_ETHERTYPEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_GSH_ETHERTYPEr_BLKACC,89,-1,0,IDB_OBM3_GSH_ETHERTYPEr_OFFSET,0,&(r._idb_obm3_gsh_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM3_GSH_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_HW_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_HW_STATUS.
 */
#define READ_IDB_OBM3_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_HW_STATUSr_BLKACC,89,n,0,IDB_OBM3_HW_STATUSr_OFFSET,0,(r._idb_obm3_hw_status),1)
#define WRITE_IDB_OBM3_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_HW_STATUSr_BLKACC,89,n,0,IDB_OBM3_HW_STATUSr_OFFSET,0,&(r._idb_obm3_hw_status),1)
#define WRITE_IDB_OBM3_HW_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_HW_STATUSr_BLKACC,89,-1,0,IDB_OBM3_HW_STATUSr_OFFSET,0,&(r._idb_obm3_hw_status),1)

/*******************************************************************************
 * End of 'IDB_OBM3_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_INNER_TPID
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_INNER_TPID.
 */
#define READ_IDB_OBM3_INNER_TPIDr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_INNER_TPIDr_BLKACC,89,n,0,IDB_OBM3_INNER_TPIDr_OFFSET,0,(r._idb_obm3_inner_tpid),1)
#define WRITE_IDB_OBM3_INNER_TPIDr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_INNER_TPIDr_BLKACC,89,n,0,IDB_OBM3_INNER_TPIDr_OFFSET,0,&(r._idb_obm3_inner_tpid),1)
#define WRITE_IDB_OBM3_INNER_TPIDr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_INNER_TPIDr_BLKACC,89,-1,0,IDB_OBM3_INNER_TPIDr_OFFSET,0,&(r._idb_obm3_inner_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM3_INNER_TPIDr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_IOM_STATS_WINDOW_RESULTS
 * BLOCKS:   PORT_IF
 * SIZE:     241
 */
/*
 * These macros can be used to access IDB_OBM3_IOM_STATS_WINDOW_RESULTS.
 */
#define READ_IDB_OBM3_IOM_STATS_WINDOW_RESULTSm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_IOM_STATS_WINDOW_RESULTSm_BLKACC,89,n,0,IDB_OBM3_IOM_STATS_WINDOW_RESULTSm_OFFSET,i,(m._idb_obm3_iom_stats_window_results),8)
#define WRITE_IDB_OBM3_IOM_STATS_WINDOW_RESULTSm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_IOM_STATS_WINDOW_RESULTSm_BLKACC,89,n,0,IDB_OBM3_IOM_STATS_WINDOW_RESULTSm_OFFSET,i,&(m._idb_obm3_iom_stats_window_results),8)
#define WRITE_IDB_OBM3_IOM_STATS_WINDOW_RESULTSm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_IOM_STATS_WINDOW_RESULTSm_BLKACC,89,-1,0,IDB_OBM3_IOM_STATS_WINDOW_RESULTSm_OFFSET,i,&(m._idb_obm3_iom_stats_window_results),8)

/*******************************************************************************
 * End of 'IDB_OBM3_IOM_STATS_WINDOW_RESULTSm'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless0_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSLESS0_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSLESS0_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossless0_pkt_drop_count),2)
#define WRITE_IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless0_pkt_drop_count),2)
#define WRITE_IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless0_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless1_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSLESS1_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSLESS1_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossless1_pkt_drop_count),2)
#define WRITE_IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless1_pkt_drop_count),2)
#define WRITE_IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless1_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_hi_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSY_HI_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSY_HI_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossy_hi_pkt_drop_count),2)
#define WRITE_IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_hi_pkt_drop_count),2)
#define WRITE_IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_hi_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_lo_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSY_LO_PKT_DROP_COUNT
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSY_LO_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossy_lo_pkt_drop_count),2)
#define WRITE_IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,89,n,0,IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_lo_pkt_drop_count),2)
#define WRITE_IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,89,-1,0,IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_lo_pkt_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_MAX_USAGE
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_MAX_USAGE.
 */
#define READ_IDB_OBM3_MAX_USAGEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_MAX_USAGEr_BLKACC,89,n,0,IDB_OBM3_MAX_USAGEr_OFFSET,0,(r._idb_obm3_max_usage),2)
#define WRITE_IDB_OBM3_MAX_USAGEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_MAX_USAGEr_BLKACC,89,n,0,IDB_OBM3_MAX_USAGEr_OFFSET,0,&(r._idb_obm3_max_usage),2)
#define WRITE_IDB_OBM3_MAX_USAGEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_MAX_USAGEr_BLKACC,89,-1,0,IDB_OBM3_MAX_USAGEr_OFFSET,0,&(r._idb_obm3_max_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM3_MAX_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_MAX_USAGE_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_MAX_USAGE_1.
 */
#define READ_IDB_OBM3_MAX_USAGE_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_MAX_USAGE_1r_BLKACC,89,n,0,IDB_OBM3_MAX_USAGE_1r_OFFSET,0,(r._idb_obm3_max_usage_1),1)
#define WRITE_IDB_OBM3_MAX_USAGE_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_MAX_USAGE_1r_BLKACC,89,n,0,IDB_OBM3_MAX_USAGE_1r_OFFSET,0,&(r._idb_obm3_max_usage_1),1)
#define WRITE_IDB_OBM3_MAX_USAGE_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_MAX_USAGE_1r_BLKACC,89,-1,0,IDB_OBM3_MAX_USAGE_1r_OFFSET,0,&(r._idb_obm3_max_usage_1),1)

/*******************************************************************************
 * End of 'IDB_OBM3_MAX_USAGE_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_MAX_USAGE_SELECT
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_MAX_USAGE_SELECT.
 */
#define READ_IDB_OBM3_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_MAX_USAGE_SELECTr_BLKACC,89,n,0,IDB_OBM3_MAX_USAGE_SELECTr_OFFSET,0,(r._idb_obm3_max_usage_select),1)
#define WRITE_IDB_OBM3_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_MAX_USAGE_SELECTr_BLKACC,89,n,0,IDB_OBM3_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm3_max_usage_select),1)
#define WRITE_IDB_OBM3_MAX_USAGE_SELECTr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_MAX_USAGE_SELECTr_BLKACC,89,-1,0,IDB_OBM3_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm3_max_usage_select),1)

/*******************************************************************************
 * End of 'IDB_OBM3_MAX_USAGE_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_MONITOR_STATS_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_MONITOR_STATS_CONFIG.
 */
#define READ_IDB_OBM3_MONITOR_STATS_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_MONITOR_STATS_CONFIGr_BLKACC,89,n,0,IDB_OBM3_MONITOR_STATS_CONFIGr_OFFSET,i,(r._idb_obm3_monitor_stats_config),1)
#define WRITE_IDB_OBM3_MONITOR_STATS_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_MONITOR_STATS_CONFIGr_BLKACC,89,n,0,IDB_OBM3_MONITOR_STATS_CONFIGr_OFFSET,i,&(r._idb_obm3_monitor_stats_config),1)
#define WRITE_IDB_OBM3_MONITOR_STATS_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_MONITOR_STATS_CONFIGr_BLKACC,89,-1,0,IDB_OBM3_MONITOR_STATS_CONFIGr_OFFSET,i,&(r._idb_obm3_monitor_stats_config),1)

/*******************************************************************************
 * End of 'IDB_OBM3_MONITOR_STATS_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_NIV_ETHERTYPE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_NIV_ETHERTYPE.
 */
#define READ_IDB_OBM3_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_NIV_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM3_NIV_ETHERTYPEr_OFFSET,0,(r._idb_obm3_niv_ethertype),1)
#define WRITE_IDB_OBM3_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_NIV_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM3_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm3_niv_ethertype),1)
#define WRITE_IDB_OBM3_NIV_ETHERTYPEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_NIV_ETHERTYPEr_BLKACC,89,-1,0,IDB_OBM3_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm3_niv_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM3_NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OPAQUE_TAG_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OPAQUE_TAG_CONFIG.
 */
#define READ_IDB_OBM3_OPAQUE_TAG_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_OPAQUE_TAG_CONFIGr_BLKACC,89,n,0,IDB_OBM3_OPAQUE_TAG_CONFIGr_OFFSET,i,(r._idb_obm3_opaque_tag_config),1)
#define WRITE_IDB_OBM3_OPAQUE_TAG_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OPAQUE_TAG_CONFIGr_BLKACC,89,n,0,IDB_OBM3_OPAQUE_TAG_CONFIGr_OFFSET,i,&(r._idb_obm3_opaque_tag_config),1)
#define WRITE_IDB_OBM3_OPAQUE_TAG_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OPAQUE_TAG_CONFIGr_BLKACC,89,-1,0,IDB_OBM3_OPAQUE_TAG_CONFIGr_OFFSET,i,&(r._idb_obm3_opaque_tag_config),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OPAQUE_TAG_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OPAQUE_TAG_CONFIG_0
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OPAQUE_TAG_CONFIG_0.
 */
#define READ_IDB_OBM3_OPAQUE_TAG_CONFIG_0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_OPAQUE_TAG_CONFIG_0r_BLKACC,89,n,0,IDB_OBM3_OPAQUE_TAG_CONFIG_0r_OFFSET,0,(r._idb_obm3_opaque_tag_config_0),1)
#define WRITE_IDB_OBM3_OPAQUE_TAG_CONFIG_0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OPAQUE_TAG_CONFIG_0r_BLKACC,89,n,0,IDB_OBM3_OPAQUE_TAG_CONFIG_0r_OFFSET,0,&(r._idb_obm3_opaque_tag_config_0),1)
#define WRITE_IDB_OBM3_OPAQUE_TAG_CONFIG_0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OPAQUE_TAG_CONFIG_0r_BLKACC,89,-1,0,IDB_OBM3_OPAQUE_TAG_CONFIG_0r_OFFSET,0,&(r._idb_obm3_opaque_tag_config_0),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OPAQUE_TAG_CONFIG_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OPAQUE_TAG_CONFIG_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OPAQUE_TAG_CONFIG_1.
 */
#define READ_IDB_OBM3_OPAQUE_TAG_CONFIG_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_OPAQUE_TAG_CONFIG_1r_BLKACC,89,n,0,IDB_OBM3_OPAQUE_TAG_CONFIG_1r_OFFSET,0,(r._idb_obm3_opaque_tag_config_1),1)
#define WRITE_IDB_OBM3_OPAQUE_TAG_CONFIG_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OPAQUE_TAG_CONFIG_1r_BLKACC,89,n,0,IDB_OBM3_OPAQUE_TAG_CONFIG_1r_OFFSET,0,&(r._idb_obm3_opaque_tag_config_1),1)
#define WRITE_IDB_OBM3_OPAQUE_TAG_CONFIG_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OPAQUE_TAG_CONFIG_1r_BLKACC,89,-1,0,IDB_OBM3_OPAQUE_TAG_CONFIG_1r_OFFSET,0,&(r._idb_obm3_opaque_tag_config_1),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OPAQUE_TAG_CONFIG_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OUTER_TPID
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OUTER_TPID.
 */
#define READ_IDB_OBM3_OUTER_TPIDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_OUTER_TPIDr_BLKACC,89,n,0,IDB_OBM3_OUTER_TPIDr_OFFSET,i,(r._idb_obm3_outer_tpid),1)
#define WRITE_IDB_OBM3_OUTER_TPIDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OUTER_TPIDr_BLKACC,89,n,0,IDB_OBM3_OUTER_TPIDr_OFFSET,i,&(r._idb_obm3_outer_tpid),1)
#define WRITE_IDB_OBM3_OUTER_TPIDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OUTER_TPIDr_BLKACC,89,-1,0,IDB_OBM3_OUTER_TPIDr_OFFSET,i,&(r._idb_obm3_outer_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OUTER_TPID_0
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OUTER_TPID_0.
 */
#define READ_IDB_OBM3_OUTER_TPID_0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_OUTER_TPID_0r_BLKACC,89,n,0,IDB_OBM3_OUTER_TPID_0r_OFFSET,0,(r._idb_obm3_outer_tpid_0),1)
#define WRITE_IDB_OBM3_OUTER_TPID_0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_0r_BLKACC,89,n,0,IDB_OBM3_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm3_outer_tpid_0),1)
#define WRITE_IDB_OBM3_OUTER_TPID_0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_0r_BLKACC,89,-1,0,IDB_OBM3_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm3_outer_tpid_0),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OUTER_TPID_1
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OUTER_TPID_1.
 */
#define READ_IDB_OBM3_OUTER_TPID_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_OUTER_TPID_1r_BLKACC,89,n,0,IDB_OBM3_OUTER_TPID_1r_OFFSET,0,(r._idb_obm3_outer_tpid_1),1)
#define WRITE_IDB_OBM3_OUTER_TPID_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_1r_BLKACC,89,n,0,IDB_OBM3_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm3_outer_tpid_1),1)
#define WRITE_IDB_OBM3_OUTER_TPID_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_1r_BLKACC,89,-1,0,IDB_OBM3_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm3_outer_tpid_1),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OUTER_TPID_2
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OUTER_TPID_2.
 */
#define READ_IDB_OBM3_OUTER_TPID_2r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_OUTER_TPID_2r_BLKACC,89,n,0,IDB_OBM3_OUTER_TPID_2r_OFFSET,0,(r._idb_obm3_outer_tpid_2),1)
#define WRITE_IDB_OBM3_OUTER_TPID_2r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_2r_BLKACC,89,n,0,IDB_OBM3_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm3_outer_tpid_2),1)
#define WRITE_IDB_OBM3_OUTER_TPID_2r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_2r_BLKACC,89,-1,0,IDB_OBM3_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm3_outer_tpid_2),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OUTER_TPID_3
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OUTER_TPID_3.
 */
#define READ_IDB_OBM3_OUTER_TPID_3r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_OUTER_TPID_3r_BLKACC,89,n,0,IDB_OBM3_OUTER_TPID_3r_OFFSET,0,(r._idb_obm3_outer_tpid_3),1)
#define WRITE_IDB_OBM3_OUTER_TPID_3r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_3r_BLKACC,89,n,0,IDB_OBM3_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm3_outer_tpid_3),1)
#define WRITE_IDB_OBM3_OUTER_TPID_3r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_3r_BLKACC,89,-1,0,IDB_OBM3_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm3_outer_tpid_3),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OUTER_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OVERSUB_MON_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OVERSUB_MON_ECC_STATUS.
 */
#define READ_IDB_OBM3_OVERSUB_MON_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_OVERSUB_MON_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM3_OVERSUB_MON_ECC_STATUSr_OFFSET,0,(r._idb_obm3_oversub_mon_ecc_status),1)
#define WRITE_IDB_OBM3_OVERSUB_MON_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OVERSUB_MON_ECC_STATUSr_BLKACC,89,n,0,IDB_OBM3_OVERSUB_MON_ECC_STATUSr_OFFSET,0,&(r._idb_obm3_oversub_mon_ecc_status),1)
#define WRITE_IDB_OBM3_OVERSUB_MON_ECC_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_OVERSUB_MON_ECC_STATUSr_BLKACC,89,-1,0,IDB_OBM3_OVERSUB_MON_ECC_STATUSr_OFFSET,0,&(r._idb_obm3_oversub_mon_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OVERSUB_MON_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_PE_ETHERTYPE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_PE_ETHERTYPE.
 */
#define READ_IDB_OBM3_PE_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_PE_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM3_PE_ETHERTYPEr_OFFSET,0,(r._idb_obm3_pe_ethertype),1)
#define WRITE_IDB_OBM3_PE_ETHERTYPEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_PE_ETHERTYPEr_BLKACC,89,n,0,IDB_OBM3_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm3_pe_ethertype),1)
#define WRITE_IDB_OBM3_PE_ETHERTYPEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_PE_ETHERTYPEr_BLKACC,89,-1,0,IDB_OBM3_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm3_pe_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM3_PE_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_PORT_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_PORT_CONFIG.
 */
#define READ_IDB_OBM3_PORT_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_PORT_CONFIGr_BLKACC,89,n,0,IDB_OBM3_PORT_CONFIGr_OFFSET,i,(r._idb_obm3_port_config),1)
#define WRITE_IDB_OBM3_PORT_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_PORT_CONFIGr_BLKACC,89,n,0,IDB_OBM3_PORT_CONFIGr_OFFSET,i,&(r._idb_obm3_port_config),1)
#define WRITE_IDB_OBM3_PORT_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_PORT_CONFIGr_BLKACC,89,-1,0,IDB_OBM3_PORT_CONFIGr_OFFSET,i,&(r._idb_obm3_port_config),1)

/*******************************************************************************
 * End of 'IDB_OBM3_PORT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_PRI_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_PRI_MAP_PORT0.
 */
#define READ_IDB_OBM3_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_PRI_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM3_PRI_MAP_PORT0m_OFFSET,i,(m._idb_obm3_pri_map_port0),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM3_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm3_pri_map_port0),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM3_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm3_pri_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM3_PRI_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_PRI_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_PRI_MAP_PORT1.
 */
#define READ_IDB_OBM3_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_PRI_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM3_PRI_MAP_PORT1m_OFFSET,i,(m._idb_obm3_pri_map_port1),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM3_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm3_pri_map_port1),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM3_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm3_pri_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM3_PRI_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_PRI_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_PRI_MAP_PORT2.
 */
#define READ_IDB_OBM3_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_PRI_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM3_PRI_MAP_PORT2m_OFFSET,i,(m._idb_obm3_pri_map_port2),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM3_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm3_pri_map_port2),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM3_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm3_pri_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM3_PRI_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_PRI_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_PRI_MAP_PORT3.
 */
#define READ_IDB_OBM3_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_PRI_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM3_PRI_MAP_PORT3m_OFFSET,i,(m._idb_obm3_pri_map_port3),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM3_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm3_pri_map_port3),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM3_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm3_pri_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM3_PRI_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_PROTOCOL_CONTROL_0
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_PROTOCOL_CONTROL_0.
 */
#define READ_IDB_OBM3_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_PROTOCOL_CONTROL_0r_BLKACC,89,n,0,IDB_OBM3_PROTOCOL_CONTROL_0r_OFFSET,i,(r._idb_obm3_protocol_control_0),2)
#define WRITE_IDB_OBM3_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_PROTOCOL_CONTROL_0r_BLKACC,89,n,0,IDB_OBM3_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm3_protocol_control_0),2)
#define WRITE_IDB_OBM3_PROTOCOL_CONTROL_0r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_PROTOCOL_CONTROL_0r_BLKACC,89,-1,0,IDB_OBM3_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm3_protocol_control_0),2)

/*******************************************************************************
 * End of 'IDB_OBM3_PROTOCOL_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_PROTOCOL_CONTROL_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_PROTOCOL_CONTROL_1.
 */
#define READ_IDB_OBM3_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_PROTOCOL_CONTROL_1r_BLKACC,89,n,0,IDB_OBM3_PROTOCOL_CONTROL_1r_OFFSET,i,(r._idb_obm3_protocol_control_1),2)
#define WRITE_IDB_OBM3_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_PROTOCOL_CONTROL_1r_BLKACC,89,n,0,IDB_OBM3_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm3_protocol_control_1),2)
#define WRITE_IDB_OBM3_PROTOCOL_CONTROL_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_PROTOCOL_CONTROL_1r_BLKACC,89,-1,0,IDB_OBM3_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm3_protocol_control_1),2)

/*******************************************************************************
 * End of 'IDB_OBM3_PROTOCOL_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_PROTOCOL_CONTROL_2
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_PROTOCOL_CONTROL_2.
 */
#define READ_IDB_OBM3_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_PROTOCOL_CONTROL_2r_BLKACC,89,n,0,IDB_OBM3_PROTOCOL_CONTROL_2r_OFFSET,i,(r._idb_obm3_protocol_control_2),2)
#define WRITE_IDB_OBM3_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_PROTOCOL_CONTROL_2r_BLKACC,89,n,0,IDB_OBM3_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm3_protocol_control_2),2)
#define WRITE_IDB_OBM3_PROTOCOL_CONTROL_2r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_PROTOCOL_CONTROL_2r_BLKACC,89,-1,0,IDB_OBM3_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm3_protocol_control_2),2)

/*******************************************************************************
 * End of 'IDB_OBM3_PROTOCOL_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_RAM_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_RAM_CONTROL.
 */
#define READ_IDB_OBM3_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_RAM_CONTROLr_BLKACC,89,n,0,IDB_OBM3_RAM_CONTROLr_OFFSET,0,(r._idb_obm3_ram_control),2)
#define WRITE_IDB_OBM3_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_RAM_CONTROLr_BLKACC,89,n,0,IDB_OBM3_RAM_CONTROLr_OFFSET,0,&(r._idb_obm3_ram_control),2)
#define WRITE_IDB_OBM3_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_RAM_CONTROLr_BLKACC,89,-1,0,IDB_OBM3_RAM_CONTROLr_OFFSET,0,&(r._idb_obm3_ram_control),2)

/*******************************************************************************
 * End of 'IDB_OBM3_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_SER_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_SER_CONTROL.
 */
#define READ_IDB_OBM3_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_SER_CONTROLr_BLKACC,89,n,0,IDB_OBM3_SER_CONTROLr_OFFSET,0,(r._idb_obm3_ser_control),1)
#define WRITE_IDB_OBM3_SER_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_SER_CONTROLr_BLKACC,89,n,0,IDB_OBM3_SER_CONTROLr_OFFSET,0,&(r._idb_obm3_ser_control),1)
#define WRITE_IDB_OBM3_SER_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_SER_CONTROLr_BLKACC,89,-1,0,IDB_OBM3_SER_CONTROLr_OFFSET,0,&(r._idb_obm3_ser_control),1)

/*******************************************************************************
 * End of 'IDB_OBM3_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_SHARED_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_SHARED_CONFIG.
 */
#define READ_IDB_OBM3_SHARED_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_SHARED_CONFIGr_BLKACC,89,n,0,IDB_OBM3_SHARED_CONFIGr_OFFSET,0,(r._idb_obm3_shared_config),1)
#define WRITE_IDB_OBM3_SHARED_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_SHARED_CONFIGr_BLKACC,89,n,0,IDB_OBM3_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm3_shared_config),1)
#define WRITE_IDB_OBM3_SHARED_CONFIGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_SHARED_CONFIGr_BLKACC,89,-1,0,IDB_OBM3_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm3_shared_config),1)

/*******************************************************************************
 * End of 'IDB_OBM3_SHARED_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_TC_MAP_PORT0
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_TC_MAP_PORT0.
 */
#define READ_IDB_OBM3_TC_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_TC_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM3_TC_MAP_PORT0m_OFFSET,i,(m._idb_obm3_tc_map_port0),1)
#define WRITE_IDB_OBM3_TC_MAP_PORT0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_TC_MAP_PORT0m_BLKACC,89,n,0,IDB_OBM3_TC_MAP_PORT0m_OFFSET,i,&(m._idb_obm3_tc_map_port0),1)
#define WRITE_IDB_OBM3_TC_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_TC_MAP_PORT0m_BLKACC,89,-1,0,IDB_OBM3_TC_MAP_PORT0m_OFFSET,i,&(m._idb_obm3_tc_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM3_TC_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_TC_MAP_PORT1
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_TC_MAP_PORT1.
 */
#define READ_IDB_OBM3_TC_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_TC_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM3_TC_MAP_PORT1m_OFFSET,i,(m._idb_obm3_tc_map_port1),1)
#define WRITE_IDB_OBM3_TC_MAP_PORT1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_TC_MAP_PORT1m_BLKACC,89,n,0,IDB_OBM3_TC_MAP_PORT1m_OFFSET,i,&(m._idb_obm3_tc_map_port1),1)
#define WRITE_IDB_OBM3_TC_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_TC_MAP_PORT1m_BLKACC,89,-1,0,IDB_OBM3_TC_MAP_PORT1m_OFFSET,i,&(m._idb_obm3_tc_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM3_TC_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_TC_MAP_PORT2
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_TC_MAP_PORT2.
 */
#define READ_IDB_OBM3_TC_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_TC_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM3_TC_MAP_PORT2m_OFFSET,i,(m._idb_obm3_tc_map_port2),1)
#define WRITE_IDB_OBM3_TC_MAP_PORT2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_TC_MAP_PORT2m_BLKACC,89,n,0,IDB_OBM3_TC_MAP_PORT2m_OFFSET,i,&(m._idb_obm3_tc_map_port2),1)
#define WRITE_IDB_OBM3_TC_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_TC_MAP_PORT2m_BLKACC,89,-1,0,IDB_OBM3_TC_MAP_PORT2m_OFFSET,i,&(m._idb_obm3_tc_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM3_TC_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_TC_MAP_PORT3
 * BLOCKS:   PORT_IF
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_TC_MAP_PORT3.
 */
#define READ_IDB_OBM3_TC_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IDB_OBM3_TC_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM3_TC_MAP_PORT3m_OFFSET,i,(m._idb_obm3_tc_map_port3),1)
#define WRITE_IDB_OBM3_TC_MAP_PORT3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_TC_MAP_PORT3m_BLKACC,89,n,0,IDB_OBM3_TC_MAP_PORT3m_OFFSET,i,&(m._idb_obm3_tc_map_port3),1)
#define WRITE_IDB_OBM3_TC_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IDB_OBM3_TC_MAP_PORT3m_BLKACC,89,-1,0,IDB_OBM3_TC_MAP_PORT3m_OFFSET,i,&(m._idb_obm3_tc_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM3_TC_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_TDM
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_TDM.
 */
#define READ_IDB_OBM3_TDMr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_TDMr_BLKACC,89,n,0,IDB_OBM3_TDMr_OFFSET,0,(r._idb_obm3_tdm),1)
#define WRITE_IDB_OBM3_TDMr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_TDMr_BLKACC,89,n,0,IDB_OBM3_TDMr_OFFSET,0,&(r._idb_obm3_tdm),1)
#define WRITE_IDB_OBM3_TDMr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_TDMr_BLKACC,89,-1,0,IDB_OBM3_TDMr_OFFSET,0,&(r._idb_obm3_tdm),1)

/*******************************************************************************
 * End of 'IDB_OBM3_TDMr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_THRESHOLD
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_THRESHOLD.
 */
#define READ_IDB_OBM3_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_THRESHOLDr_BLKACC,89,n,0,IDB_OBM3_THRESHOLDr_OFFSET,i,(r._idb_obm3_threshold),2)
#define WRITE_IDB_OBM3_THRESHOLDr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_THRESHOLDr_BLKACC,89,n,0,IDB_OBM3_THRESHOLDr_OFFSET,i,&(r._idb_obm3_threshold),2)
#define WRITE_IDB_OBM3_THRESHOLDr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_THRESHOLDr_BLKACC,89,-1,0,IDB_OBM3_THRESHOLDr_OFFSET,i,&(r._idb_obm3_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM3_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_THRESHOLD_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_THRESHOLD_1.
 */
#define READ_IDB_OBM3_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM3_THRESHOLD_1r_OFFSET,i,(r._idb_obm3_threshold_1),2)
#define WRITE_IDB_OBM3_THRESHOLD_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_THRESHOLD_1r_BLKACC,89,n,0,IDB_OBM3_THRESHOLD_1r_OFFSET,i,&(r._idb_obm3_threshold_1),2)
#define WRITE_IDB_OBM3_THRESHOLD_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_THRESHOLD_1r_BLKACC,89,-1,0,IDB_OBM3_THRESHOLD_1r_OFFSET,i,&(r._idb_obm3_threshold_1),2)

/*******************************************************************************
 * End of 'IDB_OBM3_THRESHOLD_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_USAGE
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_USAGE.
 */
#define READ_IDB_OBM3_USAGEr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_USAGEr_BLKACC,89,n,0,IDB_OBM3_USAGEr_OFFSET,i,(r._idb_obm3_usage),2)
#define WRITE_IDB_OBM3_USAGEr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_USAGEr_BLKACC,89,n,0,IDB_OBM3_USAGEr_OFFSET,i,&(r._idb_obm3_usage),2)
#define WRITE_IDB_OBM3_USAGEr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_USAGEr_BLKACC,89,-1,0,IDB_OBM3_USAGEr_OFFSET,i,&(r._idb_obm3_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM3_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_USAGE_1
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_USAGE_1.
 */
#define READ_IDB_OBM3_USAGE_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM3_USAGE_1r_BLKACC,89,n,0,IDB_OBM3_USAGE_1r_OFFSET,i,(r._idb_obm3_usage_1),2)
#define WRITE_IDB_OBM3_USAGE_1r(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_USAGE_1r_BLKACC,89,n,0,IDB_OBM3_USAGE_1r_OFFSET,i,&(r._idb_obm3_usage_1),2)
#define WRITE_IDB_OBM3_USAGE_1r_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM3_USAGE_1r_BLKACC,89,-1,0,IDB_OBM3_USAGE_1r_OFFSET,i,&(r._idb_obm3_usage_1),2)

/*******************************************************************************
 * End of 'IDB_OBM3_USAGE_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM_MONITOR_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM_MONITOR_CONFIG.
 */
#define READ_IDB_OBM_MONITOR_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_OBM_MONITOR_CONFIGr_BLKACC,89,n,0,IDB_OBM_MONITOR_CONFIGr_OFFSET,0,(r._idb_obm_monitor_config),2)
#define WRITE_IDB_OBM_MONITOR_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM_MONITOR_CONFIGr_BLKACC,89,n,0,IDB_OBM_MONITOR_CONFIGr_OFFSET,0,&(r._idb_obm_monitor_config),2)
#define WRITE_IDB_OBM_MONITOR_CONFIGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_OBM_MONITOR_CONFIGr_BLKACC,89,-1,0,IDB_OBM_MONITOR_CONFIGr_OFFSET,0,&(r._idb_obm_monitor_config),2)

/*******************************************************************************
 * End of 'IDB_OBM_MONITOR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_PA_RESET_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_PA_RESET_CONTROL.
 */
#define READ_IDB_PA_RESET_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_PA_RESET_CONTROLr_BLKACC,89,n,0,IDB_PA_RESET_CONTROLr_OFFSET,0,(r._idb_pa_reset_control),1)
#define WRITE_IDB_PA_RESET_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_PA_RESET_CONTROLr_BLKACC,89,n,0,IDB_PA_RESET_CONTROLr_OFFSET,0,&(r._idb_pa_reset_control),1)
#define WRITE_IDB_PA_RESET_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_PA_RESET_CONTROLr_BLKACC,89,-1,0,IDB_PA_RESET_CONTROLr_OFFSET,0,&(r._idb_pa_reset_control),1)

/*******************************************************************************
 * End of 'IDB_PA_RESET_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_PFC_MON_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_PFC_MON_CONFIG.
 */
#define READ_IDB_PFC_MON_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_PFC_MON_CONFIGr_BLKACC,89,n,0,IDB_PFC_MON_CONFIGr_OFFSET,0,(r._idb_pfc_mon_config),2)
#define WRITE_IDB_PFC_MON_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_PFC_MON_CONFIGr_BLKACC,89,n,0,IDB_PFC_MON_CONFIGr_OFFSET,0,&(r._idb_pfc_mon_config),2)
#define WRITE_IDB_PFC_MON_CONFIGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_PFC_MON_CONFIGr_BLKACC,89,-1,0,IDB_PFC_MON_CONFIGr_OFFSET,0,&(r._idb_pfc_mon_config),2)

/*******************************************************************************
 * End of 'IDB_PFC_MON_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_PFC_MON_ECC_STATUS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_PFC_MON_ECC_STATUS.
 */
#define READ_IDB_PFC_MON_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_PFC_MON_ECC_STATUSr_BLKACC,89,n,0,IDB_PFC_MON_ECC_STATUSr_OFFSET,0,(r._idb_pfc_mon_ecc_status),1)
#define WRITE_IDB_PFC_MON_ECC_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_PFC_MON_ECC_STATUSr_BLKACC,89,n,0,IDB_PFC_MON_ECC_STATUSr_OFFSET,0,&(r._idb_pfc_mon_ecc_status),1)
#define WRITE_IDB_PFC_MON_ECC_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_PFC_MON_ECC_STATUSr_BLKACC,89,-1,0,IDB_PFC_MON_ECC_STATUSr_OFFSET,0,&(r._idb_pfc_mon_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_PFC_MON_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_PFC_MON_INIT
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_PFC_MON_INIT.
 */
#define READ_IDB_PFC_MON_INITr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IDB_PFC_MON_INITr_BLKACC,89,n,0,IDB_PFC_MON_INITr_OFFSET,0,(r._idb_pfc_mon_init),1)
#define WRITE_IDB_PFC_MON_INITr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_PFC_MON_INITr_BLKACC,89,n,0,IDB_PFC_MON_INITr_OFFSET,0,&(r._idb_pfc_mon_init),1)
#define WRITE_IDB_PFC_MON_INITr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IDB_PFC_MON_INITr_BLKACC,89,-1,0,IDB_PFC_MON_INITr_OFFSET,0,&(r._idb_pfc_mon_init),1)

/*******************************************************************************
 * End of 'IDB_PFC_MON_INITr'
 */




/*******************************************************************************
 * REGISTER:  IDB_PFC_MON_SER_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_PFC_MON_SER_CONTROL.
 */
#define READ_IDB_PFC_MON_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,IDB_PFC_MON_SER_CONTROLr_BLKACC,89,IDB_PFC_MON_SER_CONTROLr_OFFSET,0,(r._idb_pfc_mon_ser_control), 1)
#define WRITE_IDB_PFC_MON_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,IDB_PFC_MON_SER_CONTROLr_BLKACC,89,IDB_PFC_MON_SER_CONTROLr_OFFSET,0,&(r._idb_pfc_mon_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_PFC_MON_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IFA_DETECT_CONFIG_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFA_DETECT_CONFIG_0.
 */
#define READ_IFA_DETECT_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_read(u,IFA_DETECT_CONFIG_0r_BLKACC,1,IFA_DETECT_CONFIG_0r_OFFSET,0,(r._ifa_detect_config_0), 1)
#define WRITE_IFA_DETECT_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_write(u,IFA_DETECT_CONFIG_0r_BLKACC,1,IFA_DETECT_CONFIG_0r_OFFSET,0,&(r._ifa_detect_config_0), 1)

/*******************************************************************************
 * End of 'IFA_DETECT_CONFIG_0r'
 */




/*******************************************************************************
 * REGISTER:  IFA_HDR_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFA_HDR_CONFIG.
 */
#define READ_IFA_HDR_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,IFA_HDR_CONFIGr_BLKACC,1,IFA_HDR_CONFIGr_OFFSET,0,(r._ifa_hdr_config), 1)
#define WRITE_IFA_HDR_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,IFA_HDR_CONFIGr_BLKACC,1,IFA_HDR_CONFIGr_OFFSET,0,&(r._ifa_hdr_config), 1)

/*******************************************************************************
 * End of 'IFA_HDR_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IFP_AND_REDIRECTION_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access IFP_AND_REDIRECTION_PROFILE.
 */
#define READ_IFP_AND_REDIRECTION_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,IFP_AND_REDIRECTION_PROFILEm_BLKACC,1,IFP_AND_REDIRECTION_PROFILEm_OFFSET,i,(m._ifp_and_redirection_profile),9)
#define WRITE_IFP_AND_REDIRECTION_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,IFP_AND_REDIRECTION_PROFILEm_BLKACC,1,IFP_AND_REDIRECTION_PROFILEm_OFFSET,i,&(m._ifp_and_redirection_profile),9)

/*******************************************************************************
 * End of 'IFP_AND_REDIRECTION_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  IFP_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_CAM_DBGCTRL.
 */
#define READ_IFP_CAM_DBGCTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_CAM_DBGCTRLr_BLKACC,1,n,0,IFP_CAM_DBGCTRLr_OFFSET,0,(r._ifp_cam_dbgctrl),2)
#define WRITE_IFP_CAM_DBGCTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_CAM_DBGCTRLr_BLKACC,1,n,0,IFP_CAM_DBGCTRLr_OFFSET,0,&(r._ifp_cam_dbgctrl),2)
#define WRITE_IFP_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_CAM_DBGCTRLr_BLKACC,1,-1,0,IFP_CAM_DBGCTRLr_OFFSET,0,&(r._ifp_cam_dbgctrl),2)

/*******************************************************************************
 * End of 'IFP_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_CONFIG.
 */
#define READ_IFP_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_CONFIGr_BLKACC,1,n,0,IFP_CONFIGr_OFFSET,i,(r._ifp_config),1)
#define WRITE_IFP_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_CONFIGr_BLKACC,1,n,0,IFP_CONFIGr_OFFSET,i,&(r._ifp_config),1)
#define WRITE_IFP_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_CONFIGr_BLKACC&(~(0x1f<<18))|(17<<18),1,-1,0,IFP_CONFIGr_OFFSET,i,&(r._ifp_config),1)

/*******************************************************************************
 * End of 'IFP_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IFP_COS_MAP
 * BLOCKS:   IPIPE
 * SIZE:     11
 */
/*
 * These macros can be used to access IFP_COS_MAP.
 */
#define READ_IFP_COS_MAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,IFP_COS_MAPm_BLKACC,1,IFP_COS_MAPm_OFFSET,i,(m._ifp_cos_map),1)
#define WRITE_IFP_COS_MAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,IFP_COS_MAPm_BLKACC,1,IFP_COS_MAPm_OFFSET,i,&(m._ifp_cos_map),1)

/*******************************************************************************
 * End of 'IFP_COS_MAPm'
 */




/*******************************************************************************
 * MEMORY:  IFP_DROP_VECTOR_MASK
 * BLOCKS:   IPIPE
 * SIZE:     512
 */
/*
 * These macros can be used to access IFP_DROP_VECTOR_MASK.
 */
#define READ_IFP_DROP_VECTOR_MASKm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_DROP_VECTOR_MASKm_BLKACC,1,n,0,IFP_DROP_VECTOR_MASKm_OFFSET,i,(m._ifp_drop_vector_mask),16)
#define WRITE_IFP_DROP_VECTOR_MASKm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_DROP_VECTOR_MASKm_BLKACC,1,n,0,IFP_DROP_VECTOR_MASKm_OFFSET,i,&(m._ifp_drop_vector_mask),16)
#define WRITE_IFP_DROP_VECTOR_MASKm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_DROP_VECTOR_MASKm_BLKACC,1,-1,0,IFP_DROP_VECTOR_MASKm_OFFSET,i,&(m._ifp_drop_vector_mask),16)

/*******************************************************************************
 * End of 'IFP_DROP_VECTOR_MASKm'
 */




/*******************************************************************************
 * REGISTER:  IFP_ECMP_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_ECMP_HASH_CONTROL.
 */
#define READ_IFP_ECMP_HASH_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,IFP_ECMP_HASH_CONTROLr_BLKACC,1,IFP_ECMP_HASH_CONTROLr_OFFSET,0,(r._ifp_ecmp_hash_control), 1)
#define WRITE_IFP_ECMP_HASH_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,IFP_ECMP_HASH_CONTROLr_BLKACC,1,IFP_ECMP_HASH_CONTROLr_OFFSET,0,&(r._ifp_ecmp_hash_control), 1)

/*******************************************************************************
 * End of 'IFP_ECMP_HASH_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  IFP_EGRESS_PORT_CHECK_FOR_DROP
 * BLOCKS:   IPIPE
 * SIZE:     283
 */
/*
 * These macros can be used to access IFP_EGRESS_PORT_CHECK_FOR_DROP.
 */
#define READ_IFP_EGRESS_PORT_CHECK_FOR_DROPm(u,i,m) bcmbd_cmicx_mem_block_read(u,IFP_EGRESS_PORT_CHECK_FOR_DROPm_BLKACC,1,IFP_EGRESS_PORT_CHECK_FOR_DROPm_OFFSET,i,(m._ifp_egress_port_check_for_drop),9)
#define WRITE_IFP_EGRESS_PORT_CHECK_FOR_DROPm(u,i,m) bcmbd_cmicx_mem_block_write(u,IFP_EGRESS_PORT_CHECK_FOR_DROPm_BLKACC,1,IFP_EGRESS_PORT_CHECK_FOR_DROPm_OFFSET,i,&(m._ifp_egress_port_check_for_drop),9)

/*******************************************************************************
 * End of 'IFP_EGRESS_PORT_CHECK_FOR_DROPm'
 */




/*******************************************************************************
 * MEMORY:  IFP_EGRESS_PORT_CHECK_FOR_REDIRECT
 * BLOCKS:   IPIPE
 * SIZE:     283
 */
/*
 * These macros can be used to access IFP_EGRESS_PORT_CHECK_FOR_REDIRECT.
 */
#define READ_IFP_EGRESS_PORT_CHECK_FOR_REDIRECTm(u,i,m) bcmbd_cmicx_mem_block_read(u,IFP_EGRESS_PORT_CHECK_FOR_REDIRECTm_BLKACC,1,IFP_EGRESS_PORT_CHECK_FOR_REDIRECTm_OFFSET,i,(m._ifp_egress_port_check_for_redirect),9)
#define WRITE_IFP_EGRESS_PORT_CHECK_FOR_REDIRECTm(u,i,m) bcmbd_cmicx_mem_block_write(u,IFP_EGRESS_PORT_CHECK_FOR_REDIRECTm_BLKACC,1,IFP_EGRESS_PORT_CHECK_FOR_REDIRECTm_OFFSET,i,&(m._ifp_egress_port_check_for_redirect),9)

/*******************************************************************************
 * End of 'IFP_EGRESS_PORT_CHECK_FOR_REDIRECTm'
 */




/*******************************************************************************
 * REGISTER:  IFP_HW_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_HW_CONFIG.
 */
#define READ_IFP_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,IFP_HW_CONFIGr_BLKACC,1,IFP_HW_CONFIGr_OFFSET,0,(r._ifp_hw_config), 2)
#define WRITE_IFP_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,IFP_HW_CONFIGr_BLKACC,1,IFP_HW_CONFIGr_OFFSET,0,&(r._ifp_hw_config), 2)

/*******************************************************************************
 * End of 'IFP_HW_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IFP_I2E_CLASSID_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access IFP_I2E_CLASSID_SELECT.
 */
#define READ_IFP_I2E_CLASSID_SELECTm(u,i,m) bcmbd_cmicx_mem_block_read(u,IFP_I2E_CLASSID_SELECTm_BLKACC,1,IFP_I2E_CLASSID_SELECTm_OFFSET,i,(m._ifp_i2e_classid_select),1)
#define WRITE_IFP_I2E_CLASSID_SELECTm(u,i,m) bcmbd_cmicx_mem_block_write(u,IFP_I2E_CLASSID_SELECTm_BLKACC,1,IFP_I2E_CLASSID_SELECTm_OFFSET,i,&(m._ifp_i2e_classid_select),1)

/*******************************************************************************
 * End of 'IFP_I2E_CLASSID_SELECTm'
 */




/*******************************************************************************
 * MEMORY:  IFP_KEY_GEN_PROGRAM_PROFILE2
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IFP_KEY_GEN_PROGRAM_PROFILE2.
 */
#define READ_IFP_KEY_GEN_PROGRAM_PROFILE2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_KEY_GEN_PROGRAM_PROFILE2m_BLKACC,1,n,0,IFP_KEY_GEN_PROGRAM_PROFILE2m_OFFSET,i,(m._ifp_key_gen_program_profile2),1)
#define WRITE_IFP_KEY_GEN_PROGRAM_PROFILE2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_KEY_GEN_PROGRAM_PROFILE2m_BLKACC,1,n,0,IFP_KEY_GEN_PROGRAM_PROFILE2m_OFFSET,i,&(m._ifp_key_gen_program_profile2),1)
#define WRITE_IFP_KEY_GEN_PROGRAM_PROFILE2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_KEY_GEN_PROGRAM_PROFILE2m_BLKACC,1,-1,0,IFP_KEY_GEN_PROGRAM_PROFILE2m_OFFSET,i,&(m._ifp_key_gen_program_profile2),1)

/*******************************************************************************
 * End of 'IFP_KEY_GEN_PROGRAM_PROFILE2m'
 */




/*******************************************************************************
 * MEMORY:  IFP_KEY_GEN_PROGRAM_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     327
 */
/*
 * These macros can be used to access IFP_KEY_GEN_PROGRAM_PROFILE.
 */
#define READ_IFP_KEY_GEN_PROGRAM_PROFILEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_KEY_GEN_PROGRAM_PROFILEm_BLKACC,1,n,0,IFP_KEY_GEN_PROGRAM_PROFILEm_OFFSET,i,(m._ifp_key_gen_program_profile),11)
#define WRITE_IFP_KEY_GEN_PROGRAM_PROFILEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_KEY_GEN_PROGRAM_PROFILEm_BLKACC,1,n,0,IFP_KEY_GEN_PROGRAM_PROFILEm_OFFSET,i,&(m._ifp_key_gen_program_profile),11)
#define WRITE_IFP_KEY_GEN_PROGRAM_PROFILEm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_KEY_GEN_PROGRAM_PROFILEm_BLKACC,1,-1,0,IFP_KEY_GEN_PROGRAM_PROFILEm_OFFSET,i,&(m._ifp_key_gen_program_profile),11)

/*******************************************************************************
 * End of 'IFP_KEY_GEN_PROGRAM_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  IFP_KEY_GEN_PROGRAM_PROFILE_ISDW
 * BLOCKS:   IPIPE
 * SIZE:     60
 */
/*
 * These macros can be used to access IFP_KEY_GEN_PROGRAM_PROFILE_ISDW.
 */
#define READ_IFP_KEY_GEN_PROGRAM_PROFILE_ISDWm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_KEY_GEN_PROGRAM_PROFILE_ISDWm_BLKACC,1,n,0,IFP_KEY_GEN_PROGRAM_PROFILE_ISDWm_OFFSET,i,(m._ifp_key_gen_program_profile_isdw),2)
#define WRITE_IFP_KEY_GEN_PROGRAM_PROFILE_ISDWm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_KEY_GEN_PROGRAM_PROFILE_ISDWm_BLKACC,1,n,0,IFP_KEY_GEN_PROGRAM_PROFILE_ISDWm_OFFSET,i,&(m._ifp_key_gen_program_profile_isdw),2)
#define WRITE_IFP_KEY_GEN_PROGRAM_PROFILE_ISDWm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_KEY_GEN_PROGRAM_PROFILE_ISDWm_BLKACC,1,-1,0,IFP_KEY_GEN_PROGRAM_PROFILE_ISDWm_OFFSET,i,&(m._ifp_key_gen_program_profile_isdw),2)

/*******************************************************************************
 * End of 'IFP_KEY_GEN_PROGRAM_PROFILE_ISDWm'
 */




/*******************************************************************************
 * MEMORY:  IFP_LOGICAL_TABLE_ACTION_PRIORITY
 * BLOCKS:   IPIPE
 * SIZE:     80
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_ACTION_PRIORITY.
 */
#define READ_IFP_LOGICAL_TABLE_ACTION_PRIORITYm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_LOGICAL_TABLE_ACTION_PRIORITYm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_ACTION_PRIORITYm_OFFSET,i,(m._ifp_logical_table_action_priority),3)
#define WRITE_IFP_LOGICAL_TABLE_ACTION_PRIORITYm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_LOGICAL_TABLE_ACTION_PRIORITYm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_ACTION_PRIORITYm_OFFSET,i,&(m._ifp_logical_table_action_priority),3)
#define WRITE_IFP_LOGICAL_TABLE_ACTION_PRIORITYm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_LOGICAL_TABLE_ACTION_PRIORITYm_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_ACTION_PRIORITYm_OFFSET,i,&(m._ifp_logical_table_action_priority),3)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_ACTION_PRIORITYm'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_CONFIG.
 */
#define READ_IFP_LOGICAL_TABLE_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_LOGICAL_TABLE_CONFIGr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_CONFIGr_OFFSET,i,(r._ifp_logical_table_config),2)
#define WRITE_IFP_LOGICAL_TABLE_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_CONFIGr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_CONFIGr_OFFSET,i,&(r._ifp_logical_table_config),2)
#define WRITE_IFP_LOGICAL_TABLE_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_CONFIGr_BLKACC&(~(0x1f<<18))|(17<<18),1,-1,0,IFP_LOGICAL_TABLE_CONFIGr_OFFSET,i,&(r._ifp_logical_table_config),2)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IFP_LOGICAL_TABLE_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT.
 */
#define READ_IFP_LOGICAL_TABLE_SELECTm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_LOGICAL_TABLE_SELECTm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECTm_OFFSET,i,(m._ifp_logical_table_select),9)
#define WRITE_IFP_LOGICAL_TABLE_SELECTm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_LOGICAL_TABLE_SELECTm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECTm_OFFSET,i,&(m._ifp_logical_table_select),9)
#define WRITE_IFP_LOGICAL_TABLE_SELECTm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_LOGICAL_TABLE_SELECTm_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECTm_OFFSET,i,&(m._ifp_logical_table_select),9)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECTm'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r_OFFSET,0,(r._ifp_logical_table_select_cam_bist_config_1_64),2)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._ifp_logical_table_select_cam_bist_config_1_64),2)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._ifp_logical_table_select_cam_bist_config_1_64),2)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_1_64r'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r_OFFSET,0,(r._ifp_logical_table_select_cam_bist_config_64),2)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._ifp_logical_table_select_cam_bist_config_64),2)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._ifp_logical_table_select_cam_bist_config_64),2)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUS.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_OFFSET,0,(r._ifp_logical_table_select_cam_bist_status),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_OFFSET,0,&(r._ifp_logical_table_select_cam_bist_status),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_OFFSET,0,&(r._ifp_logical_table_select_cam_bist_status),1)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRL.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_OFFSET,0,(r._ifp_logical_table_select_cam_dbgctrl),2)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_OFFSET,0,&(r._ifp_logical_table_select_cam_dbgctrl),2)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_OFFSET,0,&(r._ifp_logical_table_select_cam_dbgctrl),2)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_SELECT_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_CONFIG.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_CONFIGr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CONFIGr_OFFSET,0,(r._ifp_logical_table_select_config),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CONFIGr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CONFIGr_OFFSET,0,&(r._ifp_logical_table_select_config),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CONFIGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CONFIGr_BLKACC&(~(0x1f<<18))|(17<<18),1,-1,0,IFP_LOGICAL_TABLE_SELECT_CONFIGr_OFFSET,0,&(r._ifp_logical_table_select_config),1)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_SELECT_DATA_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_DATA_CTRL.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr_OFFSET,0,(r._ifp_logical_table_select_data_ctrl),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr_OFFSET,0,&(r._ifp_logical_table_select_data_ctrl),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr_OFFSET,0,&(r._ifp_logical_table_select_data_ctrl),1)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  IFP_LOGICAL_TABLE_SELECT_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     62
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_DATA_ONLY.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm_OFFSET,i,(m._ifp_logical_table_select_data_only),2)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm_OFFSET,i,&(m._ifp_logical_table_select_data_only),2)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm_OFFSET,i,&(m._ifp_logical_table_select_data_only),2)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  IFP_LOGICAL_TABLE_SELECT_TCAM_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     210
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_TCAM_ONLY.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm_OFFSET,i,(m._ifp_logical_table_select_tcam_only),7)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm_OFFSET,i,&(m._ifp_logical_table_select_tcam_only),7)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm_OFFSET,i,&(m._ifp_logical_table_select_tcam_only),7)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_SELECT_TM
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_TM.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_TMr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_TMr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_TMr_OFFSET,0,(r._ifp_logical_table_select_tm),2)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_TMr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_TMr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_TMr_OFFSET,0,&(r._ifp_logical_table_select_tm),2)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_TMr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_TMr_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_TMr_OFFSET,0,&(r._ifp_logical_table_select_tm),2)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_TMr'
 */




/*******************************************************************************
 * REGISTER:  IFP_METER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_METER_CONTROL.
 */
#define READ_IFP_METER_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_read(u,IFP_METER_CONTROLr_BLKACC,p,IFP_METER_CONTROLr_OFFSET,0,(r._ifp_meter_control), 1)
#define WRITE_IFP_METER_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_write(u,IFP_METER_CONTROLr_BLKACC,p,IFP_METER_CONTROLr_OFFSET,0,&(r._ifp_meter_control), 1)

/*******************************************************************************
 * End of 'IFP_METER_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  IFP_METER_TABLE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     85
 */
/*
 * These macros can be used to access IFP_METER_TABLE_INST0.
 */
#define READ_IFP_METER_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_METER_TABLE_INST0m_BLKACC,1,n,0,IFP_METER_TABLE_INST0m_OFFSET,i,(m._ifp_meter_table_inst0),3)
#define WRITE_IFP_METER_TABLE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_METER_TABLE_INST0m_BLKACC,1,n,0,IFP_METER_TABLE_INST0m_OFFSET,i,&(m._ifp_meter_table_inst0),3)
#define WRITE_IFP_METER_TABLE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_METER_TABLE_INST0m_BLKACC,1,-1,0,IFP_METER_TABLE_INST0m_OFFSET,i,&(m._ifp_meter_table_inst0),3)

/*******************************************************************************
 * End of 'IFP_METER_TABLE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  IFP_METER_TABLE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     85
 */
/*
 * These macros can be used to access IFP_METER_TABLE_INST1.
 */
#define READ_IFP_METER_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_METER_TABLE_INST1m_BLKACC,1,n,0,IFP_METER_TABLE_INST1m_OFFSET,i,(m._ifp_meter_table_inst1),3)
#define WRITE_IFP_METER_TABLE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_METER_TABLE_INST1m_BLKACC,1,n,0,IFP_METER_TABLE_INST1m_OFFSET,i,&(m._ifp_meter_table_inst1),3)
#define WRITE_IFP_METER_TABLE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_METER_TABLE_INST1m_BLKACC,1,-1,0,IFP_METER_TABLE_INST1m_OFFSET,i,&(m._ifp_meter_table_inst1),3)

/*******************************************************************************
 * End of 'IFP_METER_TABLE_INST1m'
 */




/*******************************************************************************
 * MEMORY:  IFP_OR_REDIRECTION_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access IFP_OR_REDIRECTION_PROFILE.
 */
#define READ_IFP_OR_REDIRECTION_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,IFP_OR_REDIRECTION_PROFILEm_BLKACC,1,IFP_OR_REDIRECTION_PROFILEm_OFFSET,i,(m._ifp_or_redirection_profile),9)
#define WRITE_IFP_OR_REDIRECTION_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,IFP_OR_REDIRECTION_PROFILEm_BLKACC,1,IFP_OR_REDIRECTION_PROFILEm_OFFSET,i,&(m._ifp_or_redirection_profile),9)

/*******************************************************************************
 * End of 'IFP_OR_REDIRECTION_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  IFP_PARITY_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_PARITY_CONTROL.
 */
#define READ_IFP_PARITY_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,IFP_PARITY_CONTROLr_BLKACC,1,IFP_PARITY_CONTROLr_OFFSET,0,(r._ifp_parity_control), 1)
#define WRITE_IFP_PARITY_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,IFP_PARITY_CONTROLr_BLKACC,1,IFP_PARITY_CONTROLr_OFFSET,0,&(r._ifp_parity_control), 1)

/*******************************************************************************
 * End of 'IFP_PARITY_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  IFP_POLICY_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     386
 */
/*
 * These macros can be used to access IFP_POLICY_TABLE.
 */
#define READ_IFP_POLICY_TABLEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_POLICY_TABLEm_BLKACC,1,n,0,IFP_POLICY_TABLEm_OFFSET,i,(m._ifp_policy_table),13)
#define WRITE_IFP_POLICY_TABLEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_POLICY_TABLEm_BLKACC,1,n,0,IFP_POLICY_TABLEm_OFFSET,i,&(m._ifp_policy_table),13)
#define WRITE_IFP_POLICY_TABLEm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_POLICY_TABLEm_BLKACC,1,-1,0,IFP_POLICY_TABLEm_OFFSET,i,&(m._ifp_policy_table),13)

/*******************************************************************************
 * End of 'IFP_POLICY_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  IFP_PORT_METER_MAP
 * BLOCKS:   IPIPE
 * SIZE:     29
 */
/*
 * These macros can be used to access IFP_PORT_METER_MAP.
 */
#define READ_IFP_PORT_METER_MAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,IFP_PORT_METER_MAPm_BLKACC,1,IFP_PORT_METER_MAPm_OFFSET,i,(m._ifp_port_meter_map),1)
#define WRITE_IFP_PORT_METER_MAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,IFP_PORT_METER_MAPm_BLKACC,1,IFP_PORT_METER_MAPm_OFFSET,i,&(m._ifp_port_meter_map),1)

/*******************************************************************************
 * End of 'IFP_PORT_METER_MAPm'
 */




/*******************************************************************************
 * MEMORY:  IFP_RANGE_CHECK
 * BLOCKS:   IPIPE
 * SIZE:     52
 */
/*
 * These macros can be used to access IFP_RANGE_CHECK.
 */
#define READ_IFP_RANGE_CHECKm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_RANGE_CHECKm_BLKACC,1,n,0,IFP_RANGE_CHECKm_OFFSET,i,(m._ifp_range_check),2)
#define WRITE_IFP_RANGE_CHECKm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_RANGE_CHECKm_BLKACC,1,n,0,IFP_RANGE_CHECKm_OFFSET,i,&(m._ifp_range_check),2)
#define WRITE_IFP_RANGE_CHECKm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_RANGE_CHECKm_BLKACC,1,-1,0,IFP_RANGE_CHECKm_OFFSET,i,&(m._ifp_range_check),2)

/*******************************************************************************
 * End of 'IFP_RANGE_CHECKm'
 */




/*******************************************************************************
 * MEMORY:  IFP_RANGE_CHECK_MASK_A
 * BLOCKS:   IPIPE
 * SIZE:     512
 */
/*
 * These macros can be used to access IFP_RANGE_CHECK_MASK_A.
 */
#define READ_IFP_RANGE_CHECK_MASK_Am(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_RANGE_CHECK_MASK_Am_BLKACC,1,n,0,IFP_RANGE_CHECK_MASK_Am_OFFSET,i,(m._ifp_range_check_mask_a),16)
#define WRITE_IFP_RANGE_CHECK_MASK_Am(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_RANGE_CHECK_MASK_Am_BLKACC,1,n,0,IFP_RANGE_CHECK_MASK_Am_OFFSET,i,&(m._ifp_range_check_mask_a),16)
#define WRITE_IFP_RANGE_CHECK_MASK_Am_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_RANGE_CHECK_MASK_Am_BLKACC,1,-1,0,IFP_RANGE_CHECK_MASK_Am_OFFSET,i,&(m._ifp_range_check_mask_a),16)

/*******************************************************************************
 * End of 'IFP_RANGE_CHECK_MASK_Am'
 */




/*******************************************************************************
 * MEMORY:  IFP_RANGE_CHECK_MASK_B
 * BLOCKS:   IPIPE
 * SIZE:     512
 */
/*
 * These macros can be used to access IFP_RANGE_CHECK_MASK_B.
 */
#define READ_IFP_RANGE_CHECK_MASK_Bm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_RANGE_CHECK_MASK_Bm_BLKACC,1,n,0,IFP_RANGE_CHECK_MASK_Bm_OFFSET,i,(m._ifp_range_check_mask_b),16)
#define WRITE_IFP_RANGE_CHECK_MASK_Bm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_RANGE_CHECK_MASK_Bm_BLKACC,1,n,0,IFP_RANGE_CHECK_MASK_Bm_OFFSET,i,&(m._ifp_range_check_mask_b),16)
#define WRITE_IFP_RANGE_CHECK_MASK_Bm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_RANGE_CHECK_MASK_Bm_BLKACC,1,-1,0,IFP_RANGE_CHECK_MASK_Bm_OFFSET,i,&(m._ifp_range_check_mask_b),16)

/*******************************************************************************
 * End of 'IFP_RANGE_CHECK_MASK_Bm'
 */




/*******************************************************************************
 * REGISTER:  IFP_REFRESH_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_REFRESH_CONFIG.
 */
#define READ_IFP_REFRESH_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_REFRESH_CONFIGr_BLKACC,1,n,0,IFP_REFRESH_CONFIGr_OFFSET,0,(r._ifp_refresh_config),1)
#define WRITE_IFP_REFRESH_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_REFRESH_CONFIGr_BLKACC,1,n,0,IFP_REFRESH_CONFIGr_OFFSET,0,&(r._ifp_refresh_config),1)
#define WRITE_IFP_REFRESH_CONFIGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_REFRESH_CONFIGr_BLKACC&(~(0x1f<<18))|(17<<18),1,-1,0,IFP_REFRESH_CONFIGr_OFFSET,0,&(r._ifp_refresh_config),1)

/*******************************************************************************
 * End of 'IFP_REFRESH_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IFP_SLICE_METER_MAP_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_SLICE_METER_MAP_ENABLE.
 */
#define READ_IFP_SLICE_METER_MAP_ENABLEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_SLICE_METER_MAP_ENABLEr_BLKACC,1,n,0,IFP_SLICE_METER_MAP_ENABLEr_OFFSET,0,(r._ifp_slice_meter_map_enable),1)
#define WRITE_IFP_SLICE_METER_MAP_ENABLEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_SLICE_METER_MAP_ENABLEr_BLKACC,1,n,0,IFP_SLICE_METER_MAP_ENABLEr_OFFSET,0,&(r._ifp_slice_meter_map_enable),1)
#define WRITE_IFP_SLICE_METER_MAP_ENABLEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_SLICE_METER_MAP_ENABLEr_BLKACC&(~(0x1f<<18))|(17<<18),1,-1,0,IFP_SLICE_METER_MAP_ENABLEr_OFFSET,0,&(r._ifp_slice_meter_map_enable),1)

/*******************************************************************************
 * End of 'IFP_SLICE_METER_MAP_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  IFP_SPARE_DEBUG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_SPARE_DEBUG.
 */
#define READ_IFP_SPARE_DEBUGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_SPARE_DEBUGr_BLKACC,1,n,0,IFP_SPARE_DEBUGr_OFFSET,0,(r._ifp_spare_debug),2)
#define WRITE_IFP_SPARE_DEBUGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_SPARE_DEBUGr_BLKACC,1,n,0,IFP_SPARE_DEBUGr_OFFSET,0,&(r._ifp_spare_debug),2)
#define WRITE_IFP_SPARE_DEBUGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_SPARE_DEBUGr_BLKACC,1,-1,0,IFP_SPARE_DEBUGr_OFFSET,0,&(r._ifp_spare_debug),2)

/*******************************************************************************
 * End of 'IFP_SPARE_DEBUGr'
 */




/*******************************************************************************
 * MEMORY:  IFP_TCAM
 * BLOCKS:   IPIPE
 * SIZE:     340
 */
/*
 * These macros can be used to access IFP_TCAM.
 */
#define READ_IFP_TCAMm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IFP_TCAMm_BLKACC,1,n,0,IFP_TCAMm_OFFSET,i,(m._ifp_tcam),11)
#define WRITE_IFP_TCAMm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_TCAMm_BLKACC,1,n,0,IFP_TCAMm_OFFSET,i,&(m._ifp_tcam),11)
#define WRITE_IFP_TCAMm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IFP_TCAMm_BLKACC,1,-1,0,IFP_TCAMm_OFFSET,i,&(m._ifp_tcam),11)

/*******************************************************************************
 * End of 'IFP_TCAMm'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL0_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL0_BIST_STATUS.
 */
#define READ_IFP_TCAM_POOL0_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_TCAM_POOL0_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_POOL0_BIST_STATUSr_OFFSET,0,(r._ifp_tcam_pool0_bist_status),1)
#define WRITE_IFP_TCAM_POOL0_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL0_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_POOL0_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_pool0_bist_status),1)
#define WRITE_IFP_TCAM_POOL0_BIST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL0_BIST_STATUSr_BLKACC,1,-1,0,IFP_TCAM_POOL0_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_pool0_bist_status),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL0_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL0_CAM_BIST_CONFIG_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_TCAM_POOL0_CAM_BIST_CONFIG_1_64.
 */
#define READ_IFP_TCAM_POOL0_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_TCAM_POOL0_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,IFP_TCAM_POOL0_CAM_BIST_CONFIG_1_64r_OFFSET,0,(r._ifp_tcam_pool0_cam_bist_config_1_64),2)
#define WRITE_IFP_TCAM_POOL0_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL0_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,IFP_TCAM_POOL0_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._ifp_tcam_pool0_cam_bist_config_1_64),2)
#define WRITE_IFP_TCAM_POOL0_CAM_BIST_CONFIG_1_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL0_CAM_BIST_CONFIG_1_64r_BLKACC,1,-1,0,IFP_TCAM_POOL0_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._ifp_tcam_pool0_cam_bist_config_1_64),2)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL0_CAM_BIST_CONFIG_1_64r'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL0_CAM_BIST_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_TCAM_POOL0_CAM_BIST_CONFIG_64.
 */
#define READ_IFP_TCAM_POOL0_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_TCAM_POOL0_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,IFP_TCAM_POOL0_CAM_BIST_CONFIG_64r_OFFSET,0,(r._ifp_tcam_pool0_cam_bist_config_64),2)
#define WRITE_IFP_TCAM_POOL0_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL0_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,IFP_TCAM_POOL0_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._ifp_tcam_pool0_cam_bist_config_64),2)
#define WRITE_IFP_TCAM_POOL0_CAM_BIST_CONFIG_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL0_CAM_BIST_CONFIG_64r_BLKACC,1,-1,0,IFP_TCAM_POOL0_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._ifp_tcam_pool0_cam_bist_config_64),2)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL0_CAM_BIST_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL1_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL1_BIST_STATUS.
 */
#define READ_IFP_TCAM_POOL1_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_TCAM_POOL1_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_POOL1_BIST_STATUSr_OFFSET,0,(r._ifp_tcam_pool1_bist_status),1)
#define WRITE_IFP_TCAM_POOL1_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL1_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_POOL1_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_pool1_bist_status),1)
#define WRITE_IFP_TCAM_POOL1_BIST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL1_BIST_STATUSr_BLKACC,1,-1,0,IFP_TCAM_POOL1_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_pool1_bist_status),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL1_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL1_CAM_BIST_CONFIG_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_TCAM_POOL1_CAM_BIST_CONFIG_1_64.
 */
#define READ_IFP_TCAM_POOL1_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_TCAM_POOL1_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,IFP_TCAM_POOL1_CAM_BIST_CONFIG_1_64r_OFFSET,0,(r._ifp_tcam_pool1_cam_bist_config_1_64),2)
#define WRITE_IFP_TCAM_POOL1_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL1_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,IFP_TCAM_POOL1_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._ifp_tcam_pool1_cam_bist_config_1_64),2)
#define WRITE_IFP_TCAM_POOL1_CAM_BIST_CONFIG_1_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL1_CAM_BIST_CONFIG_1_64r_BLKACC,1,-1,0,IFP_TCAM_POOL1_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._ifp_tcam_pool1_cam_bist_config_1_64),2)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL1_CAM_BIST_CONFIG_1_64r'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL1_CAM_BIST_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_TCAM_POOL1_CAM_BIST_CONFIG_64.
 */
#define READ_IFP_TCAM_POOL1_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_TCAM_POOL1_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,IFP_TCAM_POOL1_CAM_BIST_CONFIG_64r_OFFSET,0,(r._ifp_tcam_pool1_cam_bist_config_64),2)
#define WRITE_IFP_TCAM_POOL1_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL1_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,IFP_TCAM_POOL1_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._ifp_tcam_pool1_cam_bist_config_64),2)
#define WRITE_IFP_TCAM_POOL1_CAM_BIST_CONFIG_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL1_CAM_BIST_CONFIG_64r_BLKACC,1,-1,0,IFP_TCAM_POOL1_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._ifp_tcam_pool1_cam_bist_config_64),2)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL1_CAM_BIST_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL2_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL2_BIST_STATUS.
 */
#define READ_IFP_TCAM_POOL2_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_TCAM_POOL2_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_POOL2_BIST_STATUSr_OFFSET,0,(r._ifp_tcam_pool2_bist_status),1)
#define WRITE_IFP_TCAM_POOL2_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL2_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_POOL2_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_pool2_bist_status),1)
#define WRITE_IFP_TCAM_POOL2_BIST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL2_BIST_STATUSr_BLKACC,1,-1,0,IFP_TCAM_POOL2_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_pool2_bist_status),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL2_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL2_CAM_BIST_CONFIG_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_TCAM_POOL2_CAM_BIST_CONFIG_1_64.
 */
#define READ_IFP_TCAM_POOL2_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_TCAM_POOL2_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,IFP_TCAM_POOL2_CAM_BIST_CONFIG_1_64r_OFFSET,0,(r._ifp_tcam_pool2_cam_bist_config_1_64),2)
#define WRITE_IFP_TCAM_POOL2_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL2_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,IFP_TCAM_POOL2_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._ifp_tcam_pool2_cam_bist_config_1_64),2)
#define WRITE_IFP_TCAM_POOL2_CAM_BIST_CONFIG_1_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL2_CAM_BIST_CONFIG_1_64r_BLKACC,1,-1,0,IFP_TCAM_POOL2_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._ifp_tcam_pool2_cam_bist_config_1_64),2)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL2_CAM_BIST_CONFIG_1_64r'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL2_CAM_BIST_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_TCAM_POOL2_CAM_BIST_CONFIG_64.
 */
#define READ_IFP_TCAM_POOL2_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFP_TCAM_POOL2_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,IFP_TCAM_POOL2_CAM_BIST_CONFIG_64r_OFFSET,0,(r._ifp_tcam_pool2_cam_bist_config_64),2)
#define WRITE_IFP_TCAM_POOL2_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL2_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,IFP_TCAM_POOL2_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._ifp_tcam_pool2_cam_bist_config_64),2)
#define WRITE_IFP_TCAM_POOL2_CAM_BIST_CONFIG_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFP_TCAM_POOL2_CAM_BIST_CONFIG_64r_BLKACC,1,-1,0,IFP_TCAM_POOL2_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._ifp_tcam_pool2_cam_bist_config_64),2)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL2_CAM_BIST_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  IFWD1_EN_COR_ERR_RPT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFWD1_EN_COR_ERR_RPT.
 */
#define READ_IFWD1_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_read(u,IFWD1_EN_COR_ERR_RPTr_BLKACC,1,IFWD1_EN_COR_ERR_RPTr_OFFSET,0,(r._ifwd1_en_cor_err_rpt), 1)
#define WRITE_IFWD1_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_write(u,IFWD1_EN_COR_ERR_RPTr_BLKACC,1,IFWD1_EN_COR_ERR_RPTr_OFFSET,0,&(r._ifwd1_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'IFWD1_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  IFWD1_HW_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFWD1_HW_CONFIG.
 */
#define READ_IFWD1_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,IFWD1_HW_CONFIGr_BLKACC,1,IFWD1_HW_CONFIGr_OFFSET,0,(r._ifwd1_hw_config), 2)
#define WRITE_IFWD1_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,IFWD1_HW_CONFIGr_BLKACC,1,IFWD1_HW_CONFIGr_OFFSET,0,&(r._ifwd1_hw_config), 2)

/*******************************************************************************
 * End of 'IFWD1_HW_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IFWD1_RAM_DBGCTRL_0_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFWD1_RAM_DBGCTRL_0_64.
 */
#define READ_IFWD1_RAM_DBGCTRL_0_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IFWD1_RAM_DBGCTRL_0_64r_BLKACC,1,n,0,IFWD1_RAM_DBGCTRL_0_64r_OFFSET,0,(r._ifwd1_ram_dbgctrl_0_64),2)
#define WRITE_IFWD1_RAM_DBGCTRL_0_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IFWD1_RAM_DBGCTRL_0_64r_BLKACC,1,n,0,IFWD1_RAM_DBGCTRL_0_64r_OFFSET,0,&(r._ifwd1_ram_dbgctrl_0_64),2)
#define WRITE_IFWD1_RAM_DBGCTRL_0_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IFWD1_RAM_DBGCTRL_0_64r_BLKACC,1,-1,0,IFWD1_RAM_DBGCTRL_0_64r_OFFSET,0,&(r._ifwd1_ram_dbgctrl_0_64),2)

/*******************************************************************************
 * End of 'IFWD1_RAM_DBGCTRL_0_64r'
 */




/*******************************************************************************
 * REGISTER:  IFWD1_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFWD1_SER_CONTROL.
 */
#define READ_IFWD1_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,IFWD1_SER_CONTROLr_BLKACC,1,IFWD1_SER_CONTROLr_OFFSET,0,(r._ifwd1_ser_control), 1)
#define WRITE_IFWD1_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,IFWD1_SER_CONTROLr_BLKACC,1,IFWD1_SER_CONTROLr_OFFSET,0,&(r._ifwd1_ser_control), 1)

/*******************************************************************************
 * End of 'IFWD1_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IFWD2_HW_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFWD2_HW_CONFIG.
 */
#define READ_IFWD2_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,IFWD2_HW_CONFIGr_BLKACC,1,IFWD2_HW_CONFIGr_OFFSET,0,(r._ifwd2_hw_config), 2)
#define WRITE_IFWD2_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,IFWD2_HW_CONFIGr_BLKACC,1,IFWD2_HW_CONFIGr_OFFSET,0,&(r._ifwd2_hw_config), 2)

/*******************************************************************************
 * End of 'IFWD2_HW_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IGMP_MLD_PKT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IGMP_MLD_PKT_CONTROL.
 */
#define READ_IGMP_MLD_PKT_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_read(u,IGMP_MLD_PKT_CONTROLr_BLKACC,1,IGMP_MLD_PKT_CONTROLr_OFFSET,i,(r._igmp_mld_pkt_control), 1)
#define WRITE_IGMP_MLD_PKT_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_write(u,IGMP_MLD_PKT_CONTROLr_BLKACC,1,IGMP_MLD_PKT_CONTROLr_OFFSET,i,&(r._igmp_mld_pkt_control), 1)

/*******************************************************************************
 * End of 'IGMP_MLD_PKT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ILPM_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ILPM_SER_CONTROL.
 */
#define READ_ILPM_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ILPM_SER_CONTROLr_BLKACC,1,ILPM_SER_CONTROLr_OFFSET,0,(r._ilpm_ser_control), 1)
#define WRITE_ILPM_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ILPM_SER_CONTROLr_BLKACC,1,ILPM_SER_CONTROLr_OFFSET,0,&(r._ilpm_ser_control), 1)

/*******************************************************************************
 * End of 'ILPM_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IMRP4_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IMRP4_64.
 */
#define READ_IMRP4_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,IMRP4_64r_BLKACC,p,IMRP4_64r_OFFSET,0,(r._imrp4_64), 2)
#define WRITE_IMRP4_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,IMRP4_64r_BLKACC,p,IMRP4_64r_OFFSET,0,&(r._imrp4_64), 2)

/*******************************************************************************
 * End of 'IMRP4_64r'
 */




/*******************************************************************************
 * REGISTER:  IMRP6_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IMRP6_64.
 */
#define READ_IMRP6_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,IMRP6_64r_BLKACC,p,IMRP6_64r_OFFSET,0,(r._imrp6_64), 2)
#define WRITE_IMRP6_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,IMRP6_64r_BLKACC,p,IMRP6_64r_OFFSET,0,&(r._imrp6_64), 2)

/*******************************************************************************
 * End of 'IMRP6_64r'
 */




/*******************************************************************************
 * MEMORY:  ING_1588_INGRESS_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     39
 */
/*
 * These macros can be used to access ING_1588_INGRESS_CTRL.
 */
#define READ_ING_1588_INGRESS_CTRLm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_1588_INGRESS_CTRLm_BLKACC,1,ING_1588_INGRESS_CTRLm_OFFSET,i,(m._ing_1588_ingress_ctrl),2)
#define WRITE_ING_1588_INGRESS_CTRLm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_1588_INGRESS_CTRLm_BLKACC,1,ING_1588_INGRESS_CTRLm_OFFSET,i,&(m._ing_1588_ingress_ctrl),2)

/*******************************************************************************
 * End of 'ING_1588_INGRESS_CTRLm'
 */




/*******************************************************************************
 * REGISTER:  ING_1588_PARSING_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_1588_PARSING_CONTROL.
 */
#define READ_ING_1588_PARSING_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ING_1588_PARSING_CONTROLr_BLKACC,1,ING_1588_PARSING_CONTROLr_OFFSET,0,(r._ing_1588_parsing_control), 1)
#define WRITE_ING_1588_PARSING_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ING_1588_PARSING_CONTROLr_BLKACC,1,ING_1588_PARSING_CONTROLr_OFFSET,0,&(r._ing_1588_parsing_control), 1)

/*******************************************************************************
 * End of 'ING_1588_PARSING_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ING_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_CONFIG_64.
 */
#define READ_ING_CONFIG_64r(u,r) bcmbd_cmicx_reg_block_read(u,ING_CONFIG_64r_BLKACC,1,ING_CONFIG_64r_OFFSET,0,(r._ing_config_64), 2)
#define WRITE_ING_CONFIG_64r(u,r) bcmbd_cmicx_reg_block_write(u,ING_CONFIG_64r_BLKACC,1,ING_CONFIG_64r_OFFSET,0,&(r._ing_config_64), 2)

/*******************************************************************************
 * End of 'ING_CONFIG_64r'
 */




/*******************************************************************************
 * MEMORY:  ING_DEST_PORT_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access ING_DEST_PORT_ENABLE.
 */
#define READ_ING_DEST_PORT_ENABLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_DEST_PORT_ENABLEm_BLKACC,1,ING_DEST_PORT_ENABLEm_OFFSET,i,(m._ing_dest_port_enable),9)
#define WRITE_ING_DEST_PORT_ENABLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_DEST_PORT_ENABLEm_BLKACC,1,ING_DEST_PORT_ENABLEm_OFFSET,i,&(m._ing_dest_port_enable),9)

/*******************************************************************************
 * End of 'ING_DEST_PORT_ENABLEm'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_AUX_ARB_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_DII_AUX_ARB_CONTROL.
 */
#define READ_ING_DII_AUX_ARB_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DII_AUX_ARB_CONTROLr_BLKACC,1,n,0,ING_DII_AUX_ARB_CONTROLr_OFFSET,0,(r._ing_dii_aux_arb_control),2)
#define WRITE_ING_DII_AUX_ARB_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_AUX_ARB_CONTROLr_BLKACC,1,n,0,ING_DII_AUX_ARB_CONTROLr_OFFSET,0,&(r._ing_dii_aux_arb_control),2)
#define WRITE_ING_DII_AUX_ARB_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_AUX_ARB_CONTROLr_BLKACC,1,-1,0,ING_DII_AUX_ARB_CONTROLr_OFFSET,0,&(r._ing_dii_aux_arb_control),2)

/*******************************************************************************
 * End of 'ING_DII_AUX_ARB_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_DEBUG_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DII_DEBUG_CONFIG.
 */
#define READ_ING_DII_DEBUG_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DII_DEBUG_CONFIGr_BLKACC,1,n,0,ING_DII_DEBUG_CONFIGr_OFFSET,0,(r._ing_dii_debug_config),1)
#define WRITE_ING_DII_DEBUG_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_DEBUG_CONFIGr_BLKACC,1,n,0,ING_DII_DEBUG_CONFIGr_OFFSET,0,&(r._ing_dii_debug_config),1)
#define WRITE_ING_DII_DEBUG_CONFIGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_DEBUG_CONFIGr_BLKACC,1,-1,0,ING_DII_DEBUG_CONFIGr_OFFSET,0,&(r._ing_dii_debug_config),1)

/*******************************************************************************
 * End of 'ING_DII_DEBUG_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_DPP_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DII_DPP_CTRL.
 */
#define READ_ING_DII_DPP_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DII_DPP_CTRLr_BLKACC,1,n,0,ING_DII_DPP_CTRLr_OFFSET,0,(r._ing_dii_dpp_ctrl),1)
#define WRITE_ING_DII_DPP_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_DPP_CTRLr_BLKACC,1,n,0,ING_DII_DPP_CTRLr_OFFSET,0,&(r._ing_dii_dpp_ctrl),1)
#define WRITE_ING_DII_DPP_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_DPP_CTRLr_BLKACC,1,-1,0,ING_DII_DPP_CTRLr_OFFSET,0,&(r._ing_dii_dpp_ctrl),1)

/*******************************************************************************
 * End of 'ING_DII_DPP_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_ECC_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DII_ECC_CONTROL.
 */
#define READ_ING_DII_ECC_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ING_DII_ECC_CONTROLr_BLKACC,1,ING_DII_ECC_CONTROLr_OFFSET,0,(r._ing_dii_ecc_control), 1)
#define WRITE_ING_DII_ECC_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ING_DII_ECC_CONTROLr_BLKACC,1,ING_DII_ECC_CONTROLr_OFFSET,0,&(r._ing_dii_ecc_control), 1)

/*******************************************************************************
 * End of 'ING_DII_ECC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_EVENT_FIFO_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DII_EVENT_FIFO_STATUS.
 */
#define READ_ING_DII_EVENT_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DII_EVENT_FIFO_STATUSr_BLKACC,1,n,0,ING_DII_EVENT_FIFO_STATUSr_OFFSET,0,(r._ing_dii_event_fifo_status),1)
#define WRITE_ING_DII_EVENT_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_EVENT_FIFO_STATUSr_BLKACC,1,n,0,ING_DII_EVENT_FIFO_STATUSr_OFFSET,0,&(r._ing_dii_event_fifo_status),1)
#define WRITE_ING_DII_EVENT_FIFO_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_EVENT_FIFO_STATUSr_BLKACC,1,-1,0,ING_DII_EVENT_FIFO_STATUSr_OFFSET,0,&(r._ing_dii_event_fifo_status),1)

/*******************************************************************************
 * End of 'ING_DII_EVENT_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_EVENT_FIFO_STATUS_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DII_EVENT_FIFO_STATUS_1.
 */
#define READ_ING_DII_EVENT_FIFO_STATUS_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DII_EVENT_FIFO_STATUS_1r_BLKACC,1,n,0,ING_DII_EVENT_FIFO_STATUS_1r_OFFSET,0,(r._ing_dii_event_fifo_status_1),1)
#define WRITE_ING_DII_EVENT_FIFO_STATUS_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_EVENT_FIFO_STATUS_1r_BLKACC,1,n,0,ING_DII_EVENT_FIFO_STATUS_1r_OFFSET,0,&(r._ing_dii_event_fifo_status_1),1)
#define WRITE_ING_DII_EVENT_FIFO_STATUS_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_EVENT_FIFO_STATUS_1r_BLKACC,1,-1,0,ING_DII_EVENT_FIFO_STATUS_1r_OFFSET,0,&(r._ing_dii_event_fifo_status_1),1)

/*******************************************************************************
 * End of 'ING_DII_EVENT_FIFO_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_HW_RESET_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DII_HW_RESET_CONTROL_0.
 */
#define READ_ING_DII_HW_RESET_CONTROL_0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DII_HW_RESET_CONTROL_0r_BLKACC,1,n,0,ING_DII_HW_RESET_CONTROL_0r_OFFSET,0,(r._ing_dii_hw_reset_control_0),1)
#define WRITE_ING_DII_HW_RESET_CONTROL_0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_HW_RESET_CONTROL_0r_BLKACC,1,n,0,ING_DII_HW_RESET_CONTROL_0r_OFFSET,0,&(r._ing_dii_hw_reset_control_0),1)
#define WRITE_ING_DII_HW_RESET_CONTROL_0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_HW_RESET_CONTROL_0r_BLKACC,1,-1,0,ING_DII_HW_RESET_CONTROL_0r_OFFSET,0,&(r._ing_dii_hw_reset_control_0),1)

/*******************************************************************************
 * End of 'ING_DII_HW_RESET_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_HW_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DII_HW_STATUS.
 */
#define READ_ING_DII_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DII_HW_STATUSr_BLKACC,1,n,0,ING_DII_HW_STATUSr_OFFSET,0,(r._ing_dii_hw_status),1)
#define WRITE_ING_DII_HW_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_HW_STATUSr_BLKACC,1,n,0,ING_DII_HW_STATUSr_OFFSET,0,&(r._ing_dii_hw_status),1)
#define WRITE_ING_DII_HW_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_HW_STATUSr_BLKACC,1,-1,0,ING_DII_HW_STATUSr_OFFSET,0,&(r._ing_dii_hw_status),1)

/*******************************************************************************
 * End of 'ING_DII_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_INTR_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DII_INTR_ENABLE.
 */
#define READ_ING_DII_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,ING_DII_INTR_ENABLEr_BLKACC,1,ING_DII_INTR_ENABLEr_OFFSET,0,(r._ing_dii_intr_enable), 1)
#define WRITE_ING_DII_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,ING_DII_INTR_ENABLEr_BLKACC,1,ING_DII_INTR_ENABLEr_OFFSET,0,&(r._ing_dii_intr_enable), 1)

/*******************************************************************************
 * End of 'ING_DII_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_INTR_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DII_INTR_STATUS.
 */
#define READ_ING_DII_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DII_INTR_STATUSr_BLKACC,1,n,0,ING_DII_INTR_STATUSr_OFFSET,0,(r._ing_dii_intr_status),1)
#define WRITE_ING_DII_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_INTR_STATUSr_BLKACC,1,n,0,ING_DII_INTR_STATUSr_OFFSET,0,&(r._ing_dii_intr_status),1)
#define WRITE_ING_DII_INTR_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_INTR_STATUSr_BLKACC,1,-1,0,ING_DII_INTR_STATUSr_OFFSET,0,&(r._ing_dii_intr_status),1)

/*******************************************************************************
 * End of 'ING_DII_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_NULL_SLOT_CFG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DII_NULL_SLOT_CFG.
 */
#define READ_ING_DII_NULL_SLOT_CFGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DII_NULL_SLOT_CFGr_BLKACC,1,n,0,ING_DII_NULL_SLOT_CFGr_OFFSET,0,(r._ing_dii_null_slot_cfg),1)
#define WRITE_ING_DII_NULL_SLOT_CFGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_NULL_SLOT_CFGr_BLKACC,1,n,0,ING_DII_NULL_SLOT_CFGr_OFFSET,0,&(r._ing_dii_null_slot_cfg),1)
#define WRITE_ING_DII_NULL_SLOT_CFGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_NULL_SLOT_CFGr_BLKACC,1,-1,0,ING_DII_NULL_SLOT_CFGr_OFFSET,0,&(r._ing_dii_null_slot_cfg),1)

/*******************************************************************************
 * End of 'ING_DII_NULL_SLOT_CFGr'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_Q_BEGIN
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DII_Q_BEGIN.
 */
#define READ_ING_DII_Q_BEGINr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DII_Q_BEGINr_BLKACC,1,n,0,ING_DII_Q_BEGINr_OFFSET,0,(r._ing_dii_q_begin),1)
#define WRITE_ING_DII_Q_BEGINr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_Q_BEGINr_BLKACC,1,n,0,ING_DII_Q_BEGINr_OFFSET,0,&(r._ing_dii_q_begin),1)
#define WRITE_ING_DII_Q_BEGINr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_Q_BEGINr_BLKACC,1,-1,0,ING_DII_Q_BEGINr_OFFSET,0,&(r._ing_dii_q_begin),1)

/*******************************************************************************
 * End of 'ING_DII_Q_BEGINr'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_DII_RAM_CONTROL.
 */
#define READ_ING_DII_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DII_RAM_CONTROLr_BLKACC,1,n,0,ING_DII_RAM_CONTROLr_OFFSET,0,(r._ing_dii_ram_control),2)
#define WRITE_ING_DII_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_RAM_CONTROLr_BLKACC,1,n,0,ING_DII_RAM_CONTROLr_OFFSET,0,&(r._ing_dii_ram_control),2)
#define WRITE_ING_DII_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_RAM_CONTROLr_BLKACC,1,-1,0,ING_DII_RAM_CONTROLr_OFFSET,0,&(r._ing_dii_ram_control),2)

/*******************************************************************************
 * End of 'ING_DII_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_SER_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DII_SER_CONTROL_0.
 */
#define READ_ING_DII_SER_CONTROL_0r(u,r) bcmbd_cmicx_reg_block_read(u,ING_DII_SER_CONTROL_0r_BLKACC,1,ING_DII_SER_CONTROL_0r_OFFSET,0,(r._ing_dii_ser_control_0), 1)
#define WRITE_ING_DII_SER_CONTROL_0r(u,r) bcmbd_cmicx_reg_block_write(u,ING_DII_SER_CONTROL_0r_BLKACC,1,ING_DII_SER_CONTROL_0r_OFFSET,0,&(r._ing_dii_ser_control_0), 1)

/*******************************************************************************
 * End of 'ING_DII_SER_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_SER_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DII_SER_CONTROL_1.
 */
#define READ_ING_DII_SER_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,ING_DII_SER_CONTROL_1r_BLKACC,1,ING_DII_SER_CONTROL_1r_OFFSET,0,(r._ing_dii_ser_control_1), 1)
#define WRITE_ING_DII_SER_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,ING_DII_SER_CONTROL_1r_BLKACC,1,ING_DII_SER_CONTROL_1r_OFFSET,0,&(r._ing_dii_ser_control_1), 1)

/*******************************************************************************
 * End of 'ING_DII_SER_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_SER_SCAN_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_DII_SER_SCAN_CONFIG.
 */
#define READ_ING_DII_SER_SCAN_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DII_SER_SCAN_CONFIGr_BLKACC,1,n,0,ING_DII_SER_SCAN_CONFIGr_OFFSET,0,(r._ing_dii_ser_scan_config),2)
#define WRITE_ING_DII_SER_SCAN_CONFIGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_SER_SCAN_CONFIGr_BLKACC,1,n,0,ING_DII_SER_SCAN_CONFIGr_OFFSET,0,&(r._ing_dii_ser_scan_config),2)
#define WRITE_ING_DII_SER_SCAN_CONFIGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_SER_SCAN_CONFIGr_BLKACC,1,-1,0,ING_DII_SER_SCAN_CONFIGr_OFFSET,0,&(r._ing_dii_ser_scan_config),2)

/*******************************************************************************
 * End of 'ING_DII_SER_SCAN_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  ING_DII_SER_SCAN_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DII_SER_SCAN_STATUS.
 */
#define READ_ING_DII_SER_SCAN_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DII_SER_SCAN_STATUSr_BLKACC,1,n,0,ING_DII_SER_SCAN_STATUSr_OFFSET,0,(r._ing_dii_ser_scan_status),1)
#define WRITE_ING_DII_SER_SCAN_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_SER_SCAN_STATUSr_BLKACC,1,n,0,ING_DII_SER_SCAN_STATUSr_OFFSET,0,&(r._ing_dii_ser_scan_status),1)
#define WRITE_ING_DII_SER_SCAN_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DII_SER_SCAN_STATUSr_BLKACC,1,-1,0,ING_DII_SER_SCAN_STATUSr_OFFSET,0,&(r._ing_dii_ser_scan_status),1)

/*******************************************************************************
 * End of 'ING_DII_SER_SCAN_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  ING_DOI_EVENT_FIFO_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DOI_EVENT_FIFO_STATUS.
 */
#define READ_ING_DOI_EVENT_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DOI_EVENT_FIFO_STATUSr_BLKACC,1,n,0,ING_DOI_EVENT_FIFO_STATUSr_OFFSET,0,(r._ing_doi_event_fifo_status),1)
#define WRITE_ING_DOI_EVENT_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DOI_EVENT_FIFO_STATUSr_BLKACC,1,n,0,ING_DOI_EVENT_FIFO_STATUSr_OFFSET,0,&(r._ing_doi_event_fifo_status),1)
#define WRITE_ING_DOI_EVENT_FIFO_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DOI_EVENT_FIFO_STATUSr_BLKACC,1,-1,0,ING_DOI_EVENT_FIFO_STATUSr_OFFSET,0,&(r._ing_doi_event_fifo_status),1)

/*******************************************************************************
 * End of 'ING_DOI_EVENT_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  ING_DOI_INTR_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DOI_INTR_ENABLE.
 */
#define READ_ING_DOI_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,ING_DOI_INTR_ENABLEr_BLKACC,1,ING_DOI_INTR_ENABLEr_OFFSET,0,(r._ing_doi_intr_enable), 1)
#define WRITE_ING_DOI_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,ING_DOI_INTR_ENABLEr_BLKACC,1,ING_DOI_INTR_ENABLEr_OFFSET,0,&(r._ing_doi_intr_enable), 1)

/*******************************************************************************
 * End of 'ING_DOI_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  ING_DOI_INTR_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DOI_INTR_STATUS.
 */
#define READ_ING_DOI_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DOI_INTR_STATUSr_BLKACC,1,n,0,ING_DOI_INTR_STATUSr_OFFSET,0,(r._ing_doi_intr_status),1)
#define WRITE_ING_DOI_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DOI_INTR_STATUSr_BLKACC,1,n,0,ING_DOI_INTR_STATUSr_OFFSET,0,&(r._ing_doi_intr_status),1)
#define WRITE_ING_DOI_INTR_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DOI_INTR_STATUSr_BLKACC,1,-1,0,ING_DOI_INTR_STATUSr_OFFSET,0,&(r._ing_doi_intr_status),1)

/*******************************************************************************
 * End of 'ING_DOI_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  ING_DOI_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_DOI_RAM_CONTROL.
 */
#define READ_ING_DOI_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DOI_RAM_CONTROLr_BLKACC,1,n,0,ING_DOI_RAM_CONTROLr_OFFSET,0,(r._ing_doi_ram_control),2)
#define WRITE_ING_DOI_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DOI_RAM_CONTROLr_BLKACC,1,n,0,ING_DOI_RAM_CONTROLr_OFFSET,0,&(r._ing_doi_ram_control),2)
#define WRITE_ING_DOI_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DOI_RAM_CONTROLr_BLKACC,1,-1,0,ING_DOI_RAM_CONTROLr_OFFSET,0,&(r._ing_doi_ram_control),2)

/*******************************************************************************
 * End of 'ING_DOI_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ING_DOI_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DOI_SER_CONTROL.
 */
#define READ_ING_DOI_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ING_DOI_SER_CONTROLr_BLKACC,1,ING_DOI_SER_CONTROLr_OFFSET,0,(r._ing_doi_ser_control), 1)
#define WRITE_ING_DOI_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ING_DOI_SER_CONTROLr_BLKACC,1,ING_DOI_SER_CONTROLr_OFFSET,0,&(r._ing_doi_ser_control), 1)

/*******************************************************************************
 * End of 'ING_DOI_SER_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  ING_DOI_SER_FIFO
 * BLOCKS:   IPIPE
 * SIZE:     50
 */
/*
 * These macros can be used to access ING_DOI_SER_FIFO.
 */
#define READ_ING_DOI_SER_FIFOm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ING_DOI_SER_FIFOm_BLKACC,1,n,0,ING_DOI_SER_FIFOm_OFFSET,i,(m._ing_doi_ser_fifo),2)
#define WRITE_ING_DOI_SER_FIFOm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_DOI_SER_FIFOm_BLKACC,1,n,0,ING_DOI_SER_FIFOm_OFFSET,i,&(m._ing_doi_ser_fifo),2)
#define WRITE_ING_DOI_SER_FIFOm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_DOI_SER_FIFOm_BLKACC,1,-1,0,ING_DOI_SER_FIFOm_OFFSET,i,&(m._ing_doi_ser_fifo),2)

/*******************************************************************************
 * End of 'ING_DOI_SER_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  ING_DOI_SER_FIFO_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DOI_SER_FIFO_CTRL.
 */
#define READ_ING_DOI_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DOI_SER_FIFO_CTRLr_BLKACC,1,n,0,ING_DOI_SER_FIFO_CTRLr_OFFSET,0,(r._ing_doi_ser_fifo_ctrl),1)
#define WRITE_ING_DOI_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DOI_SER_FIFO_CTRLr_BLKACC,1,n,0,ING_DOI_SER_FIFO_CTRLr_OFFSET,0,&(r._ing_doi_ser_fifo_ctrl),1)
#define WRITE_ING_DOI_SER_FIFO_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DOI_SER_FIFO_CTRLr_BLKACC,1,-1,0,ING_DOI_SER_FIFO_CTRLr_OFFSET,0,&(r._ing_doi_ser_fifo_ctrl),1)

/*******************************************************************************
 * End of 'ING_DOI_SER_FIFO_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  ING_DOI_SER_FIFO_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DOI_SER_FIFO_STATUS.
 */
#define READ_ING_DOI_SER_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_DOI_SER_FIFO_STATUSr_BLKACC,1,n,0,ING_DOI_SER_FIFO_STATUSr_OFFSET,0,(r._ing_doi_ser_fifo_status),1)
#define WRITE_ING_DOI_SER_FIFO_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DOI_SER_FIFO_STATUSr_BLKACC,1,n,0,ING_DOI_SER_FIFO_STATUSr_OFFSET,0,&(r._ing_doi_ser_fifo_status),1)
#define WRITE_ING_DOI_SER_FIFO_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_DOI_SER_FIFO_STATUSr_BLKACC,1,-1,0,ING_DOI_SER_FIFO_STATUSr_OFFSET,0,&(r._ing_doi_ser_fifo_status),1)

/*******************************************************************************
 * End of 'ING_DOI_SER_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  ING_ECN_COUNTER_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_ECN_COUNTER_64.
 */
#define READ_ING_ECN_COUNTER_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,ING_ECN_COUNTER_64r_BLKACC,p,ING_ECN_COUNTER_64r_OFFSET,0,(r._ing_ecn_counter_64), 2)
#define WRITE_ING_ECN_COUNTER_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,ING_ECN_COUNTER_64r_BLKACC,p,ING_ECN_COUNTER_64r_OFFSET,0,&(r._ing_ecn_counter_64), 2)

/*******************************************************************************
 * End of 'ING_ECN_COUNTER_64r'
 */




/*******************************************************************************
 * MEMORY:  ING_EGRMSKBMAP
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access ING_EGRMSKBMAP.
 */
#define READ_ING_EGRMSKBMAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_EGRMSKBMAPm_BLKACC,1,ING_EGRMSKBMAPm_OFFSET,i,(m._ing_egrmskbmap),9)
#define WRITE_ING_EGRMSKBMAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_EGRMSKBMAPm_BLKACC,1,ING_EGRMSKBMAPm_OFFSET,i,&(m._ing_egrmskbmap),9)

/*******************************************************************************
 * End of 'ING_EGRMSKBMAPm'
 */




/*******************************************************************************
 * MEMORY:  ING_EN_EFILTER_BITMAP
 * BLOCKS:   IPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access ING_EN_EFILTER_BITMAP.
 */
#define READ_ING_EN_EFILTER_BITMAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_EN_EFILTER_BITMAPm_BLKACC,1,ING_EN_EFILTER_BITMAPm_OFFSET,i,(m._ing_en_efilter_bitmap),9)
#define WRITE_ING_EN_EFILTER_BITMAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_EN_EFILTER_BITMAPm_BLKACC,1,ING_EN_EFILTER_BITMAPm_OFFSET,i,&(m._ing_en_efilter_bitmap),9)

/*******************************************************************************
 * End of 'ING_EN_EFILTER_BITMAPm'
 */




/*******************************************************************************
 * REGISTER:  ING_EVENT_DEBUG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_EVENT_DEBUG.
 */
#define READ_ING_EVENT_DEBUGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_EVENT_DEBUGr_BLKACC,1,n,0,ING_EVENT_DEBUGr_OFFSET,0,(r._ing_event_debug),1)
#define WRITE_ING_EVENT_DEBUGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_EVENT_DEBUGr_BLKACC,1,n,0,ING_EVENT_DEBUGr_OFFSET,0,&(r._ing_event_debug),1)
#define WRITE_ING_EVENT_DEBUGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_EVENT_DEBUGr_BLKACC,1,-1,0,ING_EVENT_DEBUGr_OFFSET,0,&(r._ing_event_debug),1)

/*******************************************************************************
 * End of 'ING_EVENT_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  ING_EVENT_DEBUG_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_EVENT_DEBUG_2.
 */
#define READ_ING_EVENT_DEBUG_2r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_EVENT_DEBUG_2r_BLKACC,1,n,0,ING_EVENT_DEBUG_2r_OFFSET,0,(r._ing_event_debug_2),1)
#define WRITE_ING_EVENT_DEBUG_2r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_EVENT_DEBUG_2r_BLKACC,1,n,0,ING_EVENT_DEBUG_2r_OFFSET,0,&(r._ing_event_debug_2),1)
#define WRITE_ING_EVENT_DEBUG_2r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_EVENT_DEBUG_2r_BLKACC,1,-1,0,ING_EVENT_DEBUG_2r_OFFSET,0,&(r._ing_event_debug_2),1)

/*******************************************************************************
 * End of 'ING_EVENT_DEBUG_2r'
 */




/*******************************************************************************
 * REGISTER:  ING_EVENT_DEBUG_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_EVENT_DEBUG_3.
 */
#define READ_ING_EVENT_DEBUG_3r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_EVENT_DEBUG_3r_BLKACC,1,n,0,ING_EVENT_DEBUG_3r_OFFSET,0,(r._ing_event_debug_3),1)
#define WRITE_ING_EVENT_DEBUG_3r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_EVENT_DEBUG_3r_BLKACC,1,n,0,ING_EVENT_DEBUG_3r_OFFSET,0,&(r._ing_event_debug_3),1)
#define WRITE_ING_EVENT_DEBUG_3r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_EVENT_DEBUG_3r_BLKACC,1,-1,0,ING_EVENT_DEBUG_3r_OFFSET,0,&(r._ing_event_debug_3),1)

/*******************************************************************************
 * End of 'ING_EVENT_DEBUG_3r'
 */




/*******************************************************************************
 * REGISTER:  ING_EVENT_DEBUG_4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_EVENT_DEBUG_4.
 */
#define READ_ING_EVENT_DEBUG_4r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_EVENT_DEBUG_4r_BLKACC,1,n,0,ING_EVENT_DEBUG_4r_OFFSET,0,(r._ing_event_debug_4),1)
#define WRITE_ING_EVENT_DEBUG_4r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_EVENT_DEBUG_4r_BLKACC,1,n,0,ING_EVENT_DEBUG_4r_OFFSET,0,&(r._ing_event_debug_4),1)
#define WRITE_ING_EVENT_DEBUG_4r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_EVENT_DEBUG_4r_BLKACC,1,-1,0,ING_EVENT_DEBUG_4r_OFFSET,0,&(r._ing_event_debug_4),1)

/*******************************************************************************
 * End of 'ING_EVENT_DEBUG_4r'
 */




/*******************************************************************************
 * MEMORY:  ING_EVENT_MASK_0
 * BLOCKS:   IPIPE
 * SIZE:     224
 */
/*
 * These macros can be used to access ING_EVENT_MASK_0.
 */
#define READ_ING_EVENT_MASK_0m(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_EVENT_MASK_0m_BLKACC,1,ING_EVENT_MASK_0m_OFFSET,i,(m._ing_event_mask_0),7)
#define WRITE_ING_EVENT_MASK_0m(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_EVENT_MASK_0m_BLKACC,1,ING_EVENT_MASK_0m_OFFSET,i,&(m._ing_event_mask_0),7)

/*******************************************************************************
 * End of 'ING_EVENT_MASK_0m'
 */




/*******************************************************************************
 * MEMORY:  ING_EVENT_MASK_1
 * BLOCKS:   IPIPE
 * SIZE:     224
 */
/*
 * These macros can be used to access ING_EVENT_MASK_1.
 */
#define READ_ING_EVENT_MASK_1m(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_EVENT_MASK_1m_BLKACC,1,ING_EVENT_MASK_1m_OFFSET,i,(m._ing_event_mask_1),7)
#define WRITE_ING_EVENT_MASK_1m(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_EVENT_MASK_1m_BLKACC,1,ING_EVENT_MASK_1m_OFFSET,i,&(m._ing_event_mask_1),7)

/*******************************************************************************
 * End of 'ING_EVENT_MASK_1m'
 */




/*******************************************************************************
 * MEMORY:  ING_EVENT_MASK_2
 * BLOCKS:   IPIPE
 * SIZE:     224
 */
/*
 * These macros can be used to access ING_EVENT_MASK_2.
 */
#define READ_ING_EVENT_MASK_2m(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_EVENT_MASK_2m_BLKACC,1,ING_EVENT_MASK_2m_OFFSET,i,(m._ing_event_mask_2),7)
#define WRITE_ING_EVENT_MASK_2m(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_EVENT_MASK_2m_BLKACC,1,ING_EVENT_MASK_2m_OFFSET,i,&(m._ing_event_mask_2),7)

/*******************************************************************************
 * End of 'ING_EVENT_MASK_2m'
 */




/*******************************************************************************
 * MEMORY:  ING_EVENT_MASK_3
 * BLOCKS:   IPIPE
 * SIZE:     224
 */
/*
 * These macros can be used to access ING_EVENT_MASK_3.
 */
#define READ_ING_EVENT_MASK_3m(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_EVENT_MASK_3m_BLKACC,1,ING_EVENT_MASK_3m_OFFSET,i,(m._ing_event_mask_3),7)
#define WRITE_ING_EVENT_MASK_3m(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_EVENT_MASK_3m_BLKACC,1,ING_EVENT_MASK_3m_OFFSET,i,&(m._ing_event_mask_3),7)

/*******************************************************************************
 * End of 'ING_EVENT_MASK_3m'
 */




/*******************************************************************************
 * MEMORY:  ING_EVENT_MASK_4
 * BLOCKS:   IPIPE
 * SIZE:     224
 */
/*
 * These macros can be used to access ING_EVENT_MASK_4.
 */
#define READ_ING_EVENT_MASK_4m(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_EVENT_MASK_4m_BLKACC,1,ING_EVENT_MASK_4m_OFFSET,i,(m._ing_event_mask_4),7)
#define WRITE_ING_EVENT_MASK_4m(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_EVENT_MASK_4m_BLKACC,1,ING_EVENT_MASK_4m_OFFSET,i,&(m._ing_event_mask_4),7)

/*******************************************************************************
 * End of 'ING_EVENT_MASK_4m'
 */




/*******************************************************************************
 * MEMORY:  ING_EVENT_MASK_5
 * BLOCKS:   IPIPE
 * SIZE:     224
 */
/*
 * These macros can be used to access ING_EVENT_MASK_5.
 */
#define READ_ING_EVENT_MASK_5m(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_EVENT_MASK_5m_BLKACC,1,ING_EVENT_MASK_5m_OFFSET,i,(m._ing_event_mask_5),7)
#define WRITE_ING_EVENT_MASK_5m(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_EVENT_MASK_5m_BLKACC,1,ING_EVENT_MASK_5m_OFFSET,i,&(m._ing_event_mask_5),7)

/*******************************************************************************
 * End of 'ING_EVENT_MASK_5m'
 */




/*******************************************************************************
 * MEMORY:  ING_EVENT_MASK_6
 * BLOCKS:   IPIPE
 * SIZE:     224
 */
/*
 * These macros can be used to access ING_EVENT_MASK_6.
 */
#define READ_ING_EVENT_MASK_6m(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_EVENT_MASK_6m_BLKACC,1,ING_EVENT_MASK_6m_OFFSET,i,(m._ing_event_mask_6),7)
#define WRITE_ING_EVENT_MASK_6m(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_EVENT_MASK_6m_BLKACC,1,ING_EVENT_MASK_6m_OFFSET,i,&(m._ing_event_mask_6),7)

/*******************************************************************************
 * End of 'ING_EVENT_MASK_6m'
 */




/*******************************************************************************
 * MEMORY:  ING_EVENT_MASK_7
 * BLOCKS:   IPIPE
 * SIZE:     224
 */
/*
 * These macros can be used to access ING_EVENT_MASK_7.
 */
#define READ_ING_EVENT_MASK_7m(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_EVENT_MASK_7m_BLKACC,1,ING_EVENT_MASK_7m_OFFSET,i,(m._ing_event_mask_7),7)
#define WRITE_ING_EVENT_MASK_7m(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_EVENT_MASK_7m_BLKACC,1,ING_EVENT_MASK_7m_OFFSET,i,&(m._ing_event_mask_7),7)

/*******************************************************************************
 * End of 'ING_EVENT_MASK_7m'
 */




/*******************************************************************************
 * MEMORY:  ING_EXP_TO_IP_ECN_MAPPING
 * BLOCKS:   IPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access ING_EXP_TO_IP_ECN_MAPPING.
 */
#define READ_ING_EXP_TO_IP_ECN_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_EXP_TO_IP_ECN_MAPPINGm_BLKACC,1,ING_EXP_TO_IP_ECN_MAPPINGm_OFFSET,i,(m._ing_exp_to_ip_ecn_mapping),1)
#define WRITE_ING_EXP_TO_IP_ECN_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_EXP_TO_IP_ECN_MAPPINGm_BLKACC,1,ING_EXP_TO_IP_ECN_MAPPINGm_OFFSET,i,&(m._ing_exp_to_ip_ecn_mapping),1)

/*******************************************************************************
 * End of 'ING_EXP_TO_IP_ECN_MAPPINGm'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     14
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_0_INST0.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_0_INST0m_BLKACC,88,n,0,ING_FLEX_CTR_OFFSET_TABLE_0_INST0m_OFFSET,i,(m._ing_flex_ctr_offset_table_0_inst0),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_0_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_0_INST0m_BLKACC,88,n,0,ING_FLEX_CTR_OFFSET_TABLE_0_INST0m_OFFSET,i,&(m._ing_flex_ctr_offset_table_0_inst0),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_0_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_0_INST0m_BLKACC,88,-1,0,ING_FLEX_CTR_OFFSET_TABLE_0_INST0m_OFFSET,i,&(m._ing_flex_ctr_offset_table_0_inst0),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_0_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     14
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_0_INST1.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_0_INST1m_BLKACC,88,n,0,ING_FLEX_CTR_OFFSET_TABLE_0_INST1m_OFFSET,i,(m._ing_flex_ctr_offset_table_0_inst1),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_0_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_0_INST1m_BLKACC,88,n,0,ING_FLEX_CTR_OFFSET_TABLE_0_INST1m_OFFSET,i,&(m._ing_flex_ctr_offset_table_0_inst1),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_0_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_0_INST1m_BLKACC,88,-1,0,ING_FLEX_CTR_OFFSET_TABLE_0_INST1m_OFFSET,i,&(m._ing_flex_ctr_offset_table_0_inst1),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_0_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     14
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_1_INST0.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_1_INST0m_BLKACC,88,n,0,ING_FLEX_CTR_OFFSET_TABLE_1_INST0m_OFFSET,i,(m._ing_flex_ctr_offset_table_1_inst0),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_1_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_1_INST0m_BLKACC,88,n,0,ING_FLEX_CTR_OFFSET_TABLE_1_INST0m_OFFSET,i,&(m._ing_flex_ctr_offset_table_1_inst0),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_1_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_1_INST0m_BLKACC,88,-1,0,ING_FLEX_CTR_OFFSET_TABLE_1_INST0m_OFFSET,i,&(m._ing_flex_ctr_offset_table_1_inst0),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_1_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     14
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_1_INST1.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_1_INST1m_BLKACC,88,n,0,ING_FLEX_CTR_OFFSET_TABLE_1_INST1m_OFFSET,i,(m._ing_flex_ctr_offset_table_1_inst1),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_1_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_1_INST1m_BLKACC,88,n,0,ING_FLEX_CTR_OFFSET_TABLE_1_INST1m_OFFSET,i,&(m._ing_flex_ctr_offset_table_1_inst1),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_1_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_1_INST1m_BLKACC,88,-1,0,ING_FLEX_CTR_OFFSET_TABLE_1_INST1m_OFFSET,i,&(m._ing_flex_ctr_offset_table_1_inst1),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_1_INST1m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     14
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_2_INST0.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_2_INST0m_BLKACC,88,n,0,ING_FLEX_CTR_OFFSET_TABLE_2_INST0m_OFFSET,i,(m._ing_flex_ctr_offset_table_2_inst0),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_2_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_2_INST0m_BLKACC,88,n,0,ING_FLEX_CTR_OFFSET_TABLE_2_INST0m_OFFSET,i,&(m._ing_flex_ctr_offset_table_2_inst0),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_2_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_2_INST0m_BLKACC,88,-1,0,ING_FLEX_CTR_OFFSET_TABLE_2_INST0m_OFFSET,i,&(m._ing_flex_ctr_offset_table_2_inst0),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_2_INST0m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     14
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_2_INST1.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_2_INST1m_BLKACC,88,n,0,ING_FLEX_CTR_OFFSET_TABLE_2_INST1m_OFFSET,i,(m._ing_flex_ctr_offset_table_2_inst1),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_2_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_2_INST1m_BLKACC,88,n,0,ING_FLEX_CTR_OFFSET_TABLE_2_INST1m_OFFSET,i,&(m._ing_flex_ctr_offset_table_2_inst1),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_2_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_2_INST1m_BLKACC,88,-1,0,ING_FLEX_CTR_OFFSET_TABLE_2_INST1m_OFFSET,i,&(m._ing_flex_ctr_offset_table_2_inst1),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_2_INST1m'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0r_BLKACC,88,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_0_inst0), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0r_BLKACC,88,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_0_inst0), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1r_BLKACC,88,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_0_inst1), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1r_BLKACC,88,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_0_inst1), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0r_BLKACC,88,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_1_inst0), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0r_BLKACC,88,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_1_inst0), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1r_BLKACC,88,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_1_inst1), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1r_BLKACC,88,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_1_inst1), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0r(u,r) bcmbd_cmicx_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0r_BLKACC,88,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_2_inst0), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0r(u,r) bcmbd_cmicx_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0r_BLKACC,88,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_2_inst0), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1r(u,r) bcmbd_cmicx_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1r_BLKACC,88,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_2_inst1), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1r(u,r) bcmbd_cmicx_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1r_BLKACC,88,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_2_inst1), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r_BLKACC,88,n,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_0_inst0),2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r_BLKACC,88,n,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_0_inst0),2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r_BLKACC,88,-1,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_0_inst0),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r_BLKACC,88,n,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_0_inst1),2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r_BLKACC,88,n,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_0_inst1),2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r_BLKACC,88,-1,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_0_inst1),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r_BLKACC,88,n,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_1_inst0),2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r_BLKACC,88,n,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_1_inst0),2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r_BLKACC,88,-1,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_1_inst0),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r_BLKACC,88,n,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_1_inst1),2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r_BLKACC,88,n,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_1_inst1),2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r_BLKACC,88,-1,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_1_inst1),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r_BLKACC,88,n,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_2_inst0),2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r_BLKACC,88,n,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_2_inst0),2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r_BLKACC,88,-1,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_2_inst0),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST0r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1
 * BLOCKS:   FLEX_CTR
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r_BLKACC,88,n,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_2_inst1),2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r_BLKACC,88,n,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_2_inst1),2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r_BLKACC,88,-1,0,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_2_inst1),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2_INST1r'
 */




/*******************************************************************************
 * REGISTER:  ING_GSH_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_GSH_ETHERTYPE.
 */
#define READ_ING_GSH_ETHERTYPEr(u,r) bcmbd_cmicx_reg_block_read(u,ING_GSH_ETHERTYPEr_BLKACC,1,ING_GSH_ETHERTYPEr_OFFSET,0,(r._ing_gsh_ethertype), 2)
#define WRITE_ING_GSH_ETHERTYPEr(u,r) bcmbd_cmicx_reg_block_write(u,ING_GSH_ETHERTYPEr_BLKACC,1,ING_GSH_ETHERTYPEr_OFFSET,0,&(r._ing_gsh_ethertype), 2)

/*******************************************************************************
 * End of 'ING_GSH_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  ING_GTP_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_GTP_CONTROL.
 */
#define READ_ING_GTP_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ING_GTP_CONTROLr_BLKACC,1,ING_GTP_CONTROLr_OFFSET,0,(r._ing_gtp_control), 1)
#define WRITE_ING_GTP_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ING_GTP_CONTROLr_BLKACC,1,ING_GTP_CONTROLr_OFFSET,0,&(r._ing_gtp_control), 1)

/*******************************************************************************
 * End of 'ING_GTP_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ING_HASH_CONFIG_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_HASH_CONFIG_0.
 */
#define READ_ING_HASH_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_read(u,ING_HASH_CONFIG_0r_BLKACC,1,ING_HASH_CONFIG_0r_OFFSET,0,(r._ing_hash_config_0), 1)
#define WRITE_ING_HASH_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_write(u,ING_HASH_CONFIG_0r_BLKACC,1,ING_HASH_CONFIG_0r_OFFSET,0,&(r._ing_hash_config_0), 1)

/*******************************************************************************
 * End of 'ING_HASH_CONFIG_0r'
 */




/*******************************************************************************
 * MEMORY:  ING_IDB_TO_DEVICE_PORT_MAP
 * BLOCKS:   PORT_IF
 * SIZE:     6
 */
/*
 * These macros can be used to access ING_IDB_TO_DEVICE_PORT_MAP.
 */
#define READ_ING_IDB_TO_DEVICE_PORT_MAPm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ING_IDB_TO_DEVICE_PORT_MAPm_BLKACC,89,n,0,ING_IDB_TO_DEVICE_PORT_MAPm_OFFSET,i,(m._ing_idb_to_device_port_map),1)
#define WRITE_ING_IDB_TO_DEVICE_PORT_MAPm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_IDB_TO_DEVICE_PORT_MAPm_BLKACC,89,n,0,ING_IDB_TO_DEVICE_PORT_MAPm_OFFSET,i,&(m._ing_idb_to_device_port_map),1)
#define WRITE_ING_IDB_TO_DEVICE_PORT_MAPm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_IDB_TO_DEVICE_PORT_MAPm_BLKACC,89,-1,0,ING_IDB_TO_DEVICE_PORT_MAPm_OFFSET,i,&(m._ing_idb_to_device_port_map),1)

/*******************************************************************************
 * End of 'ING_IDB_TO_DEVICE_PORT_MAPm'
 */




/*******************************************************************************
 * MEMORY:  ING_IPV6_MC_RESERVED_ADDRESS
 * BLOCKS:   IPIPE
 * SIZE:     256
 */
/*
 * These macros can be used to access ING_IPV6_MC_RESERVED_ADDRESS.
 */
#define READ_ING_IPV6_MC_RESERVED_ADDRESSm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_IPV6_MC_RESERVED_ADDRESSm_BLKACC,1,ING_IPV6_MC_RESERVED_ADDRESSm_OFFSET,i,(m._ing_ipv6_mc_reserved_address),8)
#define WRITE_ING_IPV6_MC_RESERVED_ADDRESSm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_IPV6_MC_RESERVED_ADDRESSm_BLKACC,1,ING_IPV6_MC_RESERVED_ADDRESSm_OFFSET,i,&(m._ing_ipv6_mc_reserved_address),8)

/*******************************************************************************
 * End of 'ING_IPV6_MC_RESERVED_ADDRESSm'
 */




/*******************************************************************************
 * MEMORY:  ING_L3_NEXT_HOP
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access ING_L3_NEXT_HOP.
 */
#define READ_ING_L3_NEXT_HOPm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_L3_NEXT_HOPm_BLKACC,1,ING_L3_NEXT_HOPm_OFFSET,i,(m._ing_l3_next_hop),2)
#define WRITE_ING_L3_NEXT_HOPm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_L3_NEXT_HOPm_BLKACC,1,ING_L3_NEXT_HOPm_OFFSET,i,&(m._ing_l3_next_hop),2)

/*******************************************************************************
 * End of 'ING_L3_NEXT_HOPm'
 */




/*******************************************************************************
 * REGISTER:  ING_MIRROR_COS_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_MIRROR_COS_CONTROL.
 */
#define READ_ING_MIRROR_COS_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ING_MIRROR_COS_CONTROLr_BLKACC,1,ING_MIRROR_COS_CONTROLr_OFFSET,0,(r._ing_mirror_cos_control), 1)
#define WRITE_ING_MIRROR_COS_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ING_MIRROR_COS_CONTROLr_BLKACC,1,ING_MIRROR_COS_CONTROLr_OFFSET,0,&(r._ing_mirror_cos_control), 1)

/*******************************************************************************
 * End of 'ING_MIRROR_COS_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  ING_MIRROR_EVENT_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     56
 */
/*
 * These macros can be used to access ING_MIRROR_EVENT_PROFILE.
 */
#define READ_ING_MIRROR_EVENT_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_MIRROR_EVENT_PROFILEm_BLKACC,1,ING_MIRROR_EVENT_PROFILEm_OFFSET,i,(m._ing_mirror_event_profile),2)
#define WRITE_ING_MIRROR_EVENT_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_MIRROR_EVENT_PROFILEm_BLKACC,1,ING_MIRROR_EVENT_PROFILEm_OFFSET,i,&(m._ing_mirror_event_profile),2)

/*******************************************************************************
 * End of 'ING_MIRROR_EVENT_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  ING_MIRROR_EVENT_PROFILE_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     39
 */
/*
 * These macros can be used to access ING_MIRROR_EVENT_PROFILE_DATA_ONLY.
 */
#define READ_ING_MIRROR_EVENT_PROFILE_DATA_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_MIRROR_EVENT_PROFILE_DATA_ONLYm_BLKACC,1,ING_MIRROR_EVENT_PROFILE_DATA_ONLYm_OFFSET,i,(m._ing_mirror_event_profile_data_only),2)
#define WRITE_ING_MIRROR_EVENT_PROFILE_DATA_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_MIRROR_EVENT_PROFILE_DATA_ONLYm_BLKACC,1,ING_MIRROR_EVENT_PROFILE_DATA_ONLYm_OFFSET,i,&(m._ing_mirror_event_profile_data_only),2)

/*******************************************************************************
 * End of 'ING_MIRROR_EVENT_PROFILE_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  ING_MIRROR_EVENT_PROFILE_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     17
 */
/*
 * These macros can be used to access ING_MIRROR_EVENT_PROFILE_ONLY.
 */
#define READ_ING_MIRROR_EVENT_PROFILE_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_MIRROR_EVENT_PROFILE_ONLYm_BLKACC,1,ING_MIRROR_EVENT_PROFILE_ONLYm_OFFSET,i,(m._ing_mirror_event_profile_only),1)
#define WRITE_ING_MIRROR_EVENT_PROFILE_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_MIRROR_EVENT_PROFILE_ONLYm_BLKACC,1,ING_MIRROR_EVENT_PROFILE_ONLYm_OFFSET,i,&(m._ing_mirror_event_profile_only),1)

/*******************************************************************************
 * End of 'ING_MIRROR_EVENT_PROFILE_ONLYm'
 */




/*******************************************************************************
 * REGISTER:  ING_MIRROR_ON_DROP_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_MIRROR_ON_DROP_CONFIG.
 */
#define READ_ING_MIRROR_ON_DROP_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,ING_MIRROR_ON_DROP_CONFIGr_BLKACC,1,ING_MIRROR_ON_DROP_CONFIGr_OFFSET,0,(r._ing_mirror_on_drop_config), 1)
#define WRITE_ING_MIRROR_ON_DROP_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,ING_MIRROR_ON_DROP_CONFIGr_BLKACC,1,ING_MIRROR_ON_DROP_CONFIGr_OFFSET,0,&(r._ing_mirror_on_drop_config), 1)

/*******************************************************************************
 * End of 'ING_MIRROR_ON_DROP_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  ING_MIRROR_SESSION
 * BLOCKS:   IPIPE
 * SIZE:     14
 */
/*
 * These macros can be used to access ING_MIRROR_SESSION.
 */
#define READ_ING_MIRROR_SESSIONm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_MIRROR_SESSIONm_BLKACC,1,ING_MIRROR_SESSIONm_OFFSET,i,(m._ing_mirror_session),1)
#define WRITE_ING_MIRROR_SESSIONm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_MIRROR_SESSIONm_BLKACC,1,ING_MIRROR_SESSIONm_OFFSET,i,&(m._ing_mirror_session),1)

/*******************************************************************************
 * End of 'ING_MIRROR_SESSIONm'
 */




/*******************************************************************************
 * REGISTER:  ING_MISC_CONFIG2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_MISC_CONFIG2.
 */
#define READ_ING_MISC_CONFIG2r(u,r) bcmbd_cmicx_reg_block_read(u,ING_MISC_CONFIG2r_BLKACC,1,ING_MISC_CONFIG2r_OFFSET,0,(r._ing_misc_config2), 1)
#define WRITE_ING_MISC_CONFIG2r(u,r) bcmbd_cmicx_reg_block_write(u,ING_MISC_CONFIG2r_BLKACC,1,ING_MISC_CONFIG2r_OFFSET,0,&(r._ing_misc_config2), 1)

/*******************************************************************************
 * End of 'ING_MISC_CONFIG2r'
 */




/*******************************************************************************
 * REGISTER:  ING_MISC_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_MISC_CONFIG.
 */
#define READ_ING_MISC_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,ING_MISC_CONFIGr_BLKACC,1,ING_MISC_CONFIGr_OFFSET,0,(r._ing_misc_config), 1)
#define WRITE_ING_MISC_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,ING_MISC_CONFIGr_BLKACC,1,ING_MISC_CONFIGr_OFFSET,0,&(r._ing_misc_config), 1)

/*******************************************************************************
 * End of 'ING_MISC_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  ING_MPLS_EXP_MAPPING
 * BLOCKS:   IPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access ING_MPLS_EXP_MAPPING.
 */
#define READ_ING_MPLS_EXP_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_MPLS_EXP_MAPPINGm_BLKACC,1,ING_MPLS_EXP_MAPPINGm_OFFSET,i,(m._ing_mpls_exp_mapping),1)
#define WRITE_ING_MPLS_EXP_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_MPLS_EXP_MAPPINGm_BLKACC,1,ING_MPLS_EXP_MAPPINGm_OFFSET,i,&(m._ing_mpls_exp_mapping),1)

/*******************************************************************************
 * End of 'ING_MPLS_EXP_MAPPINGm'
 */




/*******************************************************************************
 * MEMORY:  ING_OUTER_DOT1P_MAPPING_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access ING_OUTER_DOT1P_MAPPING_TABLE.
 */
#define READ_ING_OUTER_DOT1P_MAPPING_TABLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_OUTER_DOT1P_MAPPING_TABLEm_BLKACC,1,ING_OUTER_DOT1P_MAPPING_TABLEm_OFFSET,i,(m._ing_outer_dot1p_mapping_table),1)
#define WRITE_ING_OUTER_DOT1P_MAPPING_TABLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_OUTER_DOT1P_MAPPING_TABLEm_BLKACC,1,ING_OUTER_DOT1P_MAPPING_TABLEm_OFFSET,i,&(m._ing_outer_dot1p_mapping_table),1)

/*******************************************************************************
 * End of 'ING_OUTER_DOT1P_MAPPING_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  ING_OUTER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_OUTER_TPID.
 */
#define READ_ING_OUTER_TPIDr(u,i,r) bcmbd_cmicx_reg_block_read(u,ING_OUTER_TPIDr_BLKACC,1,ING_OUTER_TPIDr_OFFSET,i,(r._ing_outer_tpid), 1)
#define WRITE_ING_OUTER_TPIDr(u,i,r) bcmbd_cmicx_reg_block_write(u,ING_OUTER_TPIDr_BLKACC,1,ING_OUTER_TPIDr_OFFSET,i,&(r._ing_outer_tpid), 1)

/*******************************************************************************
 * End of 'ING_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  ING_OUTER_TPID_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_OUTER_TPID_0.
 */
#define READ_ING_OUTER_TPID_0r(u,r) bcmbd_cmicx_reg_block_read(u,ING_OUTER_TPID_0r_BLKACC,1,ING_OUTER_TPID_0r_OFFSET,0,(r._ing_outer_tpid_0), 1)
#define WRITE_ING_OUTER_TPID_0r(u,r) bcmbd_cmicx_reg_block_write(u,ING_OUTER_TPID_0r_BLKACC,1,ING_OUTER_TPID_0r_OFFSET,0,&(r._ing_outer_tpid_0), 1)

/*******************************************************************************
 * End of 'ING_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  ING_OUTER_TPID_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_OUTER_TPID_1.
 */
#define READ_ING_OUTER_TPID_1r(u,r) bcmbd_cmicx_reg_block_read(u,ING_OUTER_TPID_1r_BLKACC,1,ING_OUTER_TPID_1r_OFFSET,0,(r._ing_outer_tpid_1), 1)
#define WRITE_ING_OUTER_TPID_1r(u,r) bcmbd_cmicx_reg_block_write(u,ING_OUTER_TPID_1r_BLKACC,1,ING_OUTER_TPID_1r_OFFSET,0,&(r._ing_outer_tpid_1), 1)

/*******************************************************************************
 * End of 'ING_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  ING_OUTER_TPID_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_OUTER_TPID_2.
 */
#define READ_ING_OUTER_TPID_2r(u,r) bcmbd_cmicx_reg_block_read(u,ING_OUTER_TPID_2r_BLKACC,1,ING_OUTER_TPID_2r_OFFSET,0,(r._ing_outer_tpid_2), 1)
#define WRITE_ING_OUTER_TPID_2r(u,r) bcmbd_cmicx_reg_block_write(u,ING_OUTER_TPID_2r_BLKACC,1,ING_OUTER_TPID_2r_OFFSET,0,&(r._ing_outer_tpid_2), 1)

/*******************************************************************************
 * End of 'ING_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  ING_OUTER_TPID_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_OUTER_TPID_3.
 */
#define READ_ING_OUTER_TPID_3r(u,r) bcmbd_cmicx_reg_block_read(u,ING_OUTER_TPID_3r_BLKACC,1,ING_OUTER_TPID_3r_OFFSET,0,(r._ing_outer_tpid_3), 1)
#define WRITE_ING_OUTER_TPID_3r(u,r) bcmbd_cmicx_reg_block_write(u,ING_OUTER_TPID_3r_BLKACC,1,ING_OUTER_TPID_3r_OFFSET,0,&(r._ing_outer_tpid_3), 1)

/*******************************************************************************
 * End of 'ING_OUTER_TPID_3r'
 */




/*******************************************************************************
 * MEMORY:  ING_PHY_TO_IDB_PORT_MAP
 * BLOCKS:   PORT_IF
 * SIZE:     5
 */
/*
 * These macros can be used to access ING_PHY_TO_IDB_PORT_MAP.
 */
#define READ_ING_PHY_TO_IDB_PORT_MAPm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ING_PHY_TO_IDB_PORT_MAPm_BLKACC,89,n,0,ING_PHY_TO_IDB_PORT_MAPm_OFFSET,i,(m._ing_phy_to_idb_port_map),1)
#define WRITE_ING_PHY_TO_IDB_PORT_MAPm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_PHY_TO_IDB_PORT_MAPm_BLKACC,89,n,0,ING_PHY_TO_IDB_PORT_MAPm_OFFSET,i,&(m._ing_phy_to_idb_port_map),1)
#define WRITE_ING_PHY_TO_IDB_PORT_MAPm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_PHY_TO_IDB_PORT_MAPm_BLKACC,89,-1,0,ING_PHY_TO_IDB_PORT_MAPm_OFFSET,i,&(m._ing_phy_to_idb_port_map),1)

/*******************************************************************************
 * End of 'ING_PHY_TO_IDB_PORT_MAPm'
 */




/*******************************************************************************
 * MEMORY:  ING_PRI_CNG_MAP
 * BLOCKS:   IPIPE
 * SIZE:     11
 */
/*
 * These macros can be used to access ING_PRI_CNG_MAP.
 */
#define READ_ING_PRI_CNG_MAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_PRI_CNG_MAPm_BLKACC,1,ING_PRI_CNG_MAPm_OFFSET,i,(m._ing_pri_cng_map),1)
#define WRITE_ING_PRI_CNG_MAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_PRI_CNG_MAPm_BLKACC,1,ING_PRI_CNG_MAPm_OFFSET,i,&(m._ing_pri_cng_map),1)

/*******************************************************************************
 * End of 'ING_PRI_CNG_MAPm'
 */




/*******************************************************************************
 * REGISTER:  ING_PROC_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_PROC_CONTROL.
 */
#define READ_ING_PROC_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ING_PROC_CONTROLr_BLKACC,1,ING_PROC_CONTROLr_OFFSET,0,(r._ing_proc_control), 1)
#define WRITE_ING_PROC_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ING_PROC_CONTROLr_BLKACC,1,ING_PROC_CONTROLr_OFFSET,0,&(r._ing_proc_control), 1)

/*******************************************************************************
 * End of 'ING_PROC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ING_SCTP_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_SCTP_CONTROL.
 */
#define READ_ING_SCTP_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ING_SCTP_CONTROLr_BLKACC,1,ING_SCTP_CONTROLr_OFFSET,0,(r._ing_sctp_control), 1)
#define WRITE_ING_SCTP_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ING_SCTP_CONTROLr_BLKACC,1,ING_SCTP_CONTROLr_OFFSET,0,&(r._ing_sctp_control), 1)

/*******************************************************************************
 * End of 'ING_SCTP_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  ING_SER_FIFO
 * BLOCKS:   IPIPE
 * SIZE:     50
 */
/*
 * These macros can be used to access ING_SER_FIFO.
 */
#define READ_ING_SER_FIFOm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,ING_SER_FIFOm_BLKACC,1,n,0,ING_SER_FIFOm_OFFSET,i,(m._ing_ser_fifo),2)
#define WRITE_ING_SER_FIFOm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_SER_FIFOm_BLKACC,1,n,0,ING_SER_FIFOm_OFFSET,i,&(m._ing_ser_fifo),2)
#define WRITE_ING_SER_FIFOm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,ING_SER_FIFOm_BLKACC,1,-1,0,ING_SER_FIFOm_OFFSET,i,&(m._ing_ser_fifo),2)

/*******************************************************************************
 * End of 'ING_SER_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  ING_SER_FIFO_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_SER_FIFO_CTRL.
 */
#define READ_ING_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ING_SER_FIFO_CTRLr_BLKACC,1,n,0,ING_SER_FIFO_CTRLr_OFFSET,0,(r._ing_ser_fifo_ctrl),1)
#define WRITE_ING_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ING_SER_FIFO_CTRLr_BLKACC,1,n,0,ING_SER_FIFO_CTRLr_OFFSET,0,&(r._ing_ser_fifo_ctrl),1)
#define WRITE_ING_SER_FIFO_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ING_SER_FIFO_CTRLr_BLKACC,1,-1,0,ING_SER_FIFO_CTRLr_OFFSET,0,&(r._ing_ser_fifo_ctrl),1)

/*******************************************************************************
 * End of 'ING_SER_FIFO_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  ING_SRV6_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_SRV6_CONTROL.
 */
#define READ_ING_SRV6_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ING_SRV6_CONTROLr_BLKACC,1,ING_SRV6_CONTROLr_OFFSET,0,(r._ing_srv6_control), 1)
#define WRITE_ING_SRV6_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ING_SRV6_CONTROLr_BLKACC,1,ING_SRV6_CONTROLr_OFFSET,0,&(r._ing_srv6_control), 1)

/*******************************************************************************
 * End of 'ING_SRV6_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ING_SRV6_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_SRV6_CONTROL_1.
 */
#define READ_ING_SRV6_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,ING_SRV6_CONTROL_1r_BLKACC,1,ING_SRV6_CONTROL_1r_OFFSET,0,(r._ing_srv6_control_1), 2)
#define WRITE_ING_SRV6_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,ING_SRV6_CONTROL_1r_BLKACC,1,ING_SRV6_CONTROL_1r_OFFSET,0,&(r._ing_srv6_control_1), 2)

/*******************************************************************************
 * End of 'ING_SRV6_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  ING_SRV6_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_SRV6_CONTROL_2.
 */
#define READ_ING_SRV6_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,ING_SRV6_CONTROL_2r_BLKACC,1,ING_SRV6_CONTROL_2r_OFFSET,0,(r._ing_srv6_control_2), 2)
#define WRITE_ING_SRV6_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,ING_SRV6_CONTROL_2r_BLKACC,1,ING_SRV6_CONTROL_2r_OFFSET,0,&(r._ing_srv6_control_2), 2)

/*******************************************************************************
 * End of 'ING_SRV6_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  ING_SRV6_CONTROL_3
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_SRV6_CONTROL_3.
 */
#define READ_ING_SRV6_CONTROL_3r(u,r) bcmbd_cmicx_reg_block_read(u,ING_SRV6_CONTROL_3r_BLKACC,1,ING_SRV6_CONTROL_3r_OFFSET,0,(r._ing_srv6_control_3), 2)
#define WRITE_ING_SRV6_CONTROL_3r(u,r) bcmbd_cmicx_reg_block_write(u,ING_SRV6_CONTROL_3r_BLKACC,1,ING_SRV6_CONTROL_3r_OFFSET,0,&(r._ing_srv6_control_3), 2)

/*******************************************************************************
 * End of 'ING_SRV6_CONTROL_3r'
 */




/*******************************************************************************
 * MEMORY:  ING_TUNNEL_ECN_DECAP
 * BLOCKS:   IPIPE
 * SIZE:     6
 */
/*
 * These macros can be used to access ING_TUNNEL_ECN_DECAP.
 */
#define READ_ING_TUNNEL_ECN_DECAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_TUNNEL_ECN_DECAPm_BLKACC,1,ING_TUNNEL_ECN_DECAPm_OFFSET,i,(m._ing_tunnel_ecn_decap),1)
#define WRITE_ING_TUNNEL_ECN_DECAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_TUNNEL_ECN_DECAPm_BLKACC,1,ING_TUNNEL_ECN_DECAPm_OFFSET,i,&(m._ing_tunnel_ecn_decap),1)

/*******************************************************************************
 * End of 'ING_TUNNEL_ECN_DECAPm'
 */




/*******************************************************************************
 * MEMORY:  ING_UNTAGGED_PHB
 * BLOCKS:   IPIPE
 * SIZE:     6
 */
/*
 * These macros can be used to access ING_UNTAGGED_PHB.
 */
#define READ_ING_UNTAGGED_PHBm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_UNTAGGED_PHBm_BLKACC,1,ING_UNTAGGED_PHBm_OFFSET,i,(m._ing_untagged_phb),1)
#define WRITE_ING_UNTAGGED_PHBm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_UNTAGGED_PHBm_BLKACC,1,ING_UNTAGGED_PHBm_OFFSET,i,&(m._ing_untagged_phb),1)

/*******************************************************************************
 * End of 'ING_UNTAGGED_PHBm'
 */




/*******************************************************************************
 * MEMORY:  ING_VLAN_TAG_ACTION_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     20
 */
/*
 * These macros can be used to access ING_VLAN_TAG_ACTION_PROFILE.
 */
#define READ_ING_VLAN_TAG_ACTION_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,ING_VLAN_TAG_ACTION_PROFILEm_BLKACC,1,ING_VLAN_TAG_ACTION_PROFILEm_OFFSET,i,(m._ing_vlan_tag_action_profile),1)
#define WRITE_ING_VLAN_TAG_ACTION_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,ING_VLAN_TAG_ACTION_PROFILEm_BLKACC,1,ING_VLAN_TAG_ACTION_PROFILEm_OFFSET,i,&(m._ing_vlan_tag_action_profile),1)

/*******************************************************************************
 * End of 'ING_VLAN_TAG_ACTION_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  ING_WESP_PROTO_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_WESP_PROTO_CONTROL.
 */
#define READ_ING_WESP_PROTO_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ING_WESP_PROTO_CONTROLr_BLKACC,1,ING_WESP_PROTO_CONTROLr_OFFSET,0,(r._ing_wesp_proto_control), 1)
#define WRITE_ING_WESP_PROTO_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ING_WESP_PROTO_CONTROLr_BLKACC,1,ING_WESP_PROTO_CONTROLr_OFFSET,0,&(r._ing_wesp_proto_control), 1)

/*******************************************************************************
 * End of 'ING_WESP_PROTO_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  INNER_L2_OUTER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INNER_L2_OUTER_TPID.
 */
#define READ_INNER_L2_OUTER_TPIDr(u,i,r) bcmbd_cmicx_reg_block_read(u,INNER_L2_OUTER_TPIDr_BLKACC,1,INNER_L2_OUTER_TPIDr_OFFSET,i,(r._inner_l2_outer_tpid), 1)
#define WRITE_INNER_L2_OUTER_TPIDr(u,i,r) bcmbd_cmicx_reg_block_write(u,INNER_L2_OUTER_TPIDr_BLKACC,1,INNER_L2_OUTER_TPIDr_OFFSET,i,&(r._inner_l2_outer_tpid), 1)

/*******************************************************************************
 * End of 'INNER_L2_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  INNER_L2_OUTER_TPID_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INNER_L2_OUTER_TPID_0.
 */
#define READ_INNER_L2_OUTER_TPID_0r(u,r) bcmbd_cmicx_reg_block_read(u,INNER_L2_OUTER_TPID_0r_BLKACC,1,INNER_L2_OUTER_TPID_0r_OFFSET,0,(r._inner_l2_outer_tpid_0), 1)
#define WRITE_INNER_L2_OUTER_TPID_0r(u,r) bcmbd_cmicx_reg_block_write(u,INNER_L2_OUTER_TPID_0r_BLKACC,1,INNER_L2_OUTER_TPID_0r_OFFSET,0,&(r._inner_l2_outer_tpid_0), 1)

/*******************************************************************************
 * End of 'INNER_L2_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  INNER_L2_OUTER_TPID_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INNER_L2_OUTER_TPID_1.
 */
#define READ_INNER_L2_OUTER_TPID_1r(u,r) bcmbd_cmicx_reg_block_read(u,INNER_L2_OUTER_TPID_1r_BLKACC,1,INNER_L2_OUTER_TPID_1r_OFFSET,0,(r._inner_l2_outer_tpid_1), 1)
#define WRITE_INNER_L2_OUTER_TPID_1r(u,r) bcmbd_cmicx_reg_block_write(u,INNER_L2_OUTER_TPID_1r_BLKACC,1,INNER_L2_OUTER_TPID_1r_OFFSET,0,&(r._inner_l2_outer_tpid_1), 1)

/*******************************************************************************
 * End of 'INNER_L2_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  INNER_L2_OUTER_TPID_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INNER_L2_OUTER_TPID_2.
 */
#define READ_INNER_L2_OUTER_TPID_2r(u,r) bcmbd_cmicx_reg_block_read(u,INNER_L2_OUTER_TPID_2r_BLKACC,1,INNER_L2_OUTER_TPID_2r_OFFSET,0,(r._inner_l2_outer_tpid_2), 1)
#define WRITE_INNER_L2_OUTER_TPID_2r(u,r) bcmbd_cmicx_reg_block_write(u,INNER_L2_OUTER_TPID_2r_BLKACC,1,INNER_L2_OUTER_TPID_2r_OFFSET,0,&(r._inner_l2_outer_tpid_2), 1)

/*******************************************************************************
 * End of 'INNER_L2_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  INNER_L2_OUTER_TPID_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INNER_L2_OUTER_TPID_3.
 */
#define READ_INNER_L2_OUTER_TPID_3r(u,r) bcmbd_cmicx_reg_block_read(u,INNER_L2_OUTER_TPID_3r_BLKACC,1,INNER_L2_OUTER_TPID_3r_OFFSET,0,(r._inner_l2_outer_tpid_3), 1)
#define WRITE_INNER_L2_OUTER_TPID_3r(u,r) bcmbd_cmicx_reg_block_write(u,INNER_L2_OUTER_TPID_3r_BLKACC,1,INNER_L2_OUTER_TPID_3r_OFFSET,0,&(r._inner_l2_outer_tpid_3), 1)

/*******************************************************************************
 * End of 'INNER_L2_OUTER_TPID_3r'
 */




/*******************************************************************************
 * MEMORY:  INSTRUMENTATION_TRIGGERS_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access INSTRUMENTATION_TRIGGERS_ENABLE.
 */
#define READ_INSTRUMENTATION_TRIGGERS_ENABLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,INSTRUMENTATION_TRIGGERS_ENABLEm_BLKACC,1,INSTRUMENTATION_TRIGGERS_ENABLEm_OFFSET,i,(m._instrumentation_triggers_enable),9)
#define WRITE_INSTRUMENTATION_TRIGGERS_ENABLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,INSTRUMENTATION_TRIGGERS_ENABLEm_BLKACC,1,INSTRUMENTATION_TRIGGERS_ENABLEm_OFFSET,i,&(m._instrumentation_triggers_enable),9)

/*******************************************************************************
 * End of 'INSTRUMENTATION_TRIGGERS_ENABLEm'
 */




/*******************************************************************************
 * REGISTER:  INSTRUMENT_CPU_COS_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INSTRUMENT_CPU_COS_CONFIG.
 */
#define READ_INSTRUMENT_CPU_COS_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,INSTRUMENT_CPU_COS_CONFIGr_BLKACC,1,INSTRUMENT_CPU_COS_CONFIGr_OFFSET,0,(r._instrument_cpu_cos_config), 1)
#define WRITE_INSTRUMENT_CPU_COS_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,INSTRUMENT_CPU_COS_CONFIGr_BLKACC,1,INSTRUMENT_CPU_COS_CONFIGr_OFFSET,0,&(r._instrument_cpu_cos_config), 1)

/*******************************************************************************
 * End of 'INSTRUMENT_CPU_COS_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  INTR_CONFIG_MASK
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INTR_CONFIG_MASK.
 */
#define READ_INTR_CONFIG_MASKr(u,i,r) bcmbd_cmicx_reg_block_read(u,INTR_CONFIG_MASKr_BLKACC,1,INTR_CONFIG_MASKr_OFFSET,i,(r._intr_config_mask), 1)
#define WRITE_INTR_CONFIG_MASKr(u,i,r) bcmbd_cmicx_reg_block_write(u,INTR_CONFIG_MASKr_BLKACC,1,INTR_CONFIG_MASKr_OFFSET,i,&(r._intr_config_mask), 1)

/*******************************************************************************
 * End of 'INTR_CONFIG_MASKr'
 */




/*******************************************************************************
 * REGISTER:  INTR_CONFIG_MASK_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INTR_CONFIG_MASK_0.
 */
#define READ_INTR_CONFIG_MASK_0r(u,r) bcmbd_cmicx_reg_block_read(u,INTR_CONFIG_MASK_0r_BLKACC,1,INTR_CONFIG_MASK_0r_OFFSET,0,(r._intr_config_mask_0), 1)
#define WRITE_INTR_CONFIG_MASK_0r(u,r) bcmbd_cmicx_reg_block_write(u,INTR_CONFIG_MASK_0r_BLKACC,1,INTR_CONFIG_MASK_0r_OFFSET,0,&(r._intr_config_mask_0), 1)

/*******************************************************************************
 * End of 'INTR_CONFIG_MASK_0r'
 */




/*******************************************************************************
 * REGISTER:  INTR_CONFIG_MASK_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INTR_CONFIG_MASK_1.
 */
#define READ_INTR_CONFIG_MASK_1r(u,r) bcmbd_cmicx_reg_block_read(u,INTR_CONFIG_MASK_1r_BLKACC,1,INTR_CONFIG_MASK_1r_OFFSET,0,(r._intr_config_mask_1), 1)
#define WRITE_INTR_CONFIG_MASK_1r(u,r) bcmbd_cmicx_reg_block_write(u,INTR_CONFIG_MASK_1r_BLKACC,1,INTR_CONFIG_MASK_1r_OFFSET,0,&(r._intr_config_mask_1), 1)

/*******************************************************************************
 * End of 'INTR_CONFIG_MASK_1r'
 */




/*******************************************************************************
 * REGISTER:  INTR_CONFIG_MASK_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INTR_CONFIG_MASK_2.
 */
#define READ_INTR_CONFIG_MASK_2r(u,r) bcmbd_cmicx_reg_block_read(u,INTR_CONFIG_MASK_2r_BLKACC,1,INTR_CONFIG_MASK_2r_OFFSET,0,(r._intr_config_mask_2), 1)
#define WRITE_INTR_CONFIG_MASK_2r(u,r) bcmbd_cmicx_reg_block_write(u,INTR_CONFIG_MASK_2r_BLKACC,1,INTR_CONFIG_MASK_2r_OFFSET,0,&(r._intr_config_mask_2), 1)

/*******************************************************************************
 * End of 'INTR_CONFIG_MASK_2r'
 */




/*******************************************************************************
 * REGISTER:  INTR_CONFIG_MASK_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INTR_CONFIG_MASK_3.
 */
#define READ_INTR_CONFIG_MASK_3r(u,r) bcmbd_cmicx_reg_block_read(u,INTR_CONFIG_MASK_3r_BLKACC,1,INTR_CONFIG_MASK_3r_OFFSET,0,(r._intr_config_mask_3), 1)
#define WRITE_INTR_CONFIG_MASK_3r(u,r) bcmbd_cmicx_reg_block_write(u,INTR_CONFIG_MASK_3r_BLKACC,1,INTR_CONFIG_MASK_3r_OFFSET,0,&(r._intr_config_mask_3), 1)

/*******************************************************************************
 * End of 'INTR_CONFIG_MASK_3r'
 */




/*******************************************************************************
 * REGISTER:  INTR_CONFIG_MASK_4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INTR_CONFIG_MASK_4.
 */
#define READ_INTR_CONFIG_MASK_4r(u,r) bcmbd_cmicx_reg_block_read(u,INTR_CONFIG_MASK_4r_BLKACC,1,INTR_CONFIG_MASK_4r_OFFSET,0,(r._intr_config_mask_4), 1)
#define WRITE_INTR_CONFIG_MASK_4r(u,r) bcmbd_cmicx_reg_block_write(u,INTR_CONFIG_MASK_4r_BLKACC,1,INTR_CONFIG_MASK_4r_OFFSET,0,&(r._intr_config_mask_4), 1)

/*******************************************************************************
 * End of 'INTR_CONFIG_MASK_4r'
 */




/*******************************************************************************
 * REGISTER:  INTR_CONFIG_MASK_5
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INTR_CONFIG_MASK_5.
 */
#define READ_INTR_CONFIG_MASK_5r(u,r) bcmbd_cmicx_reg_block_read(u,INTR_CONFIG_MASK_5r_BLKACC,1,INTR_CONFIG_MASK_5r_OFFSET,0,(r._intr_config_mask_5), 1)
#define WRITE_INTR_CONFIG_MASK_5r(u,r) bcmbd_cmicx_reg_block_write(u,INTR_CONFIG_MASK_5r_BLKACC,1,INTR_CONFIG_MASK_5r_OFFSET,0,&(r._intr_config_mask_5), 1)

/*******************************************************************************
 * End of 'INTR_CONFIG_MASK_5r'
 */




/*******************************************************************************
 * REGISTER:  INTR_CONFIG_MASK_6
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INTR_CONFIG_MASK_6.
 */
#define READ_INTR_CONFIG_MASK_6r(u,r) bcmbd_cmicx_reg_block_read(u,INTR_CONFIG_MASK_6r_BLKACC,1,INTR_CONFIG_MASK_6r_OFFSET,0,(r._intr_config_mask_6), 1)
#define WRITE_INTR_CONFIG_MASK_6r(u,r) bcmbd_cmicx_reg_block_write(u,INTR_CONFIG_MASK_6r_BLKACC,1,INTR_CONFIG_MASK_6r_OFFSET,0,&(r._intr_config_mask_6), 1)

/*******************************************************************************
 * End of 'INTR_CONFIG_MASK_6r'
 */




/*******************************************************************************
 * REGISTER:  INTR_CONFIG_MASK_7
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INTR_CONFIG_MASK_7.
 */
#define READ_INTR_CONFIG_MASK_7r(u,r) bcmbd_cmicx_reg_block_read(u,INTR_CONFIG_MASK_7r_BLKACC,1,INTR_CONFIG_MASK_7r_OFFSET,0,(r._intr_config_mask_7), 1)
#define WRITE_INTR_CONFIG_MASK_7r(u,r) bcmbd_cmicx_reg_block_write(u,INTR_CONFIG_MASK_7r_BLKACC,1,INTR_CONFIG_MASK_7r_OFFSET,0,&(r._intr_config_mask_7), 1)

/*******************************************************************************
 * End of 'INTR_CONFIG_MASK_7r'
 */




/*******************************************************************************
 * MEMORY:  INT_CN_TO_MMUIF_MAPPING
 * BLOCKS:   IPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access INT_CN_TO_MMUIF_MAPPING.
 */
#define READ_INT_CN_TO_MMUIF_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_read(u,INT_CN_TO_MMUIF_MAPPINGm_BLKACC,1,INT_CN_TO_MMUIF_MAPPINGm_OFFSET,i,(m._int_cn_to_mmuif_mapping),1)
#define WRITE_INT_CN_TO_MMUIF_MAPPINGm(u,i,m) bcmbd_cmicx_mem_block_write(u,INT_CN_TO_MMUIF_MAPPINGm_BLKACC,1,INT_CN_TO_MMUIF_MAPPINGm_OFFSET,i,&(m._int_cn_to_mmuif_mapping),1)

/*******************************************************************************
 * End of 'INT_CN_TO_MMUIF_MAPPINGm'
 */




/*******************************************************************************
 * REGISTER:  INT_DP_DETECT_CONFIG_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access INT_DP_DETECT_CONFIG_0.
 */
#define READ_INT_DP_DETECT_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_read(u,INT_DP_DETECT_CONFIG_0r_BLKACC,1,INT_DP_DETECT_CONFIG_0r_OFFSET,0,(r._int_dp_detect_config_0), 2)
#define WRITE_INT_DP_DETECT_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_write(u,INT_DP_DETECT_CONFIG_0r_BLKACC,1,INT_DP_DETECT_CONFIG_0r_OFFSET,0,&(r._int_dp_detect_config_0), 2)

/*******************************************************************************
 * End of 'INT_DP_DETECT_CONFIG_0r'
 */




/*******************************************************************************
 * REGISTER:  INT_DP_DETECT_CONFIG_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access INT_DP_DETECT_CONFIG_1.
 */
#define READ_INT_DP_DETECT_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_read(u,INT_DP_DETECT_CONFIG_1r_BLKACC,1,INT_DP_DETECT_CONFIG_1r_OFFSET,0,(r._int_dp_detect_config_1), 2)
#define WRITE_INT_DP_DETECT_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_write(u,INT_DP_DETECT_CONFIG_1r_BLKACC,1,INT_DP_DETECT_CONFIG_1r_OFFSET,0,&(r._int_dp_detect_config_1), 2)

/*******************************************************************************
 * End of 'INT_DP_DETECT_CONFIG_1r'
 */




/*******************************************************************************
 * REGISTER:  INT_DP_DETECT_CONFIG_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access INT_DP_DETECT_CONFIG_2.
 */
#define READ_INT_DP_DETECT_CONFIG_2r(u,r) bcmbd_cmicx_reg_block_read(u,INT_DP_DETECT_CONFIG_2r_BLKACC,1,INT_DP_DETECT_CONFIG_2r_OFFSET,0,(r._int_dp_detect_config_2), 2)
#define WRITE_INT_DP_DETECT_CONFIG_2r(u,r) bcmbd_cmicx_reg_block_write(u,INT_DP_DETECT_CONFIG_2r_BLKACC,1,INT_DP_DETECT_CONFIG_2r_OFFSET,0,&(r._int_dp_detect_config_2), 2)

/*******************************************************************************
 * End of 'INT_DP_DETECT_CONFIG_2r'
 */




/*******************************************************************************
 * REGISTER:  INT_PROCESS_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INT_PROCESS_CONFIG.
 */
#define READ_INT_PROCESS_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,INT_PROCESS_CONFIGr_BLKACC,1,INT_PROCESS_CONFIGr_OFFSET,0,(r._int_process_config), 1)
#define WRITE_INT_PROCESS_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,INT_PROCESS_CONFIGr_BLKACC,1,INT_PROCESS_CONFIGr_OFFSET,0,&(r._int_process_config), 1)

/*******************************************************************************
 * End of 'INT_PROCESS_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  INT_TURNAROUND_EN_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access INT_TURNAROUND_EN_BMAP.
 */
#define READ_INT_TURNAROUND_EN_BMAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,INT_TURNAROUND_EN_BMAPm_BLKACC,1,INT_TURNAROUND_EN_BMAPm_OFFSET,i,(m._int_turnaround_en_bmap),9)
#define WRITE_INT_TURNAROUND_EN_BMAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,INT_TURNAROUND_EN_BMAPm_BLKACC,1,INT_TURNAROUND_EN_BMAPm_OFFSET,i,&(m._int_turnaround_en_bmap),9)

/*******************************************************************************
 * End of 'INT_TURNAROUND_EN_BMAPm'
 */




/*******************************************************************************
 * REGISTER:  IOAM_DETECT_CONFIG_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IOAM_DETECT_CONFIG_0.
 */
#define READ_IOAM_DETECT_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_read(u,IOAM_DETECT_CONFIG_0r_BLKACC,1,IOAM_DETECT_CONFIG_0r_OFFSET,0,(r._ioam_detect_config_0), 2)
#define WRITE_IOAM_DETECT_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_write(u,IOAM_DETECT_CONFIG_0r_BLKACC,1,IOAM_DETECT_CONFIG_0r_OFFSET,0,&(r._ioam_detect_config_0), 2)

/*******************************************************************************
 * End of 'IOAM_DETECT_CONFIG_0r'
 */




/*******************************************************************************
 * REGISTER:  IP4_INTR_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IP4_INTR_ENABLE.
 */
#define READ_IP4_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,IP4_INTR_ENABLEr_BLKACC,1,IP4_INTR_ENABLEr_OFFSET,0,(r._ip4_intr_enable), 1)
#define WRITE_IP4_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,IP4_INTR_ENABLEr_BLKACC,1,IP4_INTR_ENABLEr_OFFSET,0,&(r._ip4_intr_enable), 1)

/*******************************************************************************
 * End of 'IP4_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  IP4_INTR_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IP4_INTR_STATUS.
 */
#define READ_IP4_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IP4_INTR_STATUSr_BLKACC,1,n,0,IP4_INTR_STATUSr_OFFSET,0,(r._ip4_intr_status),1)
#define WRITE_IP4_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IP4_INTR_STATUSr_BLKACC,1,n,0,IP4_INTR_STATUSr_OFFSET,0,&(r._ip4_intr_status),1)
#define WRITE_IP4_INTR_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IP4_INTR_STATUSr_BLKACC,1,-1,0,IP4_INTR_STATUSr_OFFSET,0,&(r._ip4_intr_status),1)

/*******************************************************************************
 * End of 'IP4_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IPARS_HW_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IPARS_HW_CONFIG.
 */
#define READ_IPARS_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,IPARS_HW_CONFIGr_BLKACC,1,IPARS_HW_CONFIGr_OFFSET,0,(r._ipars_hw_config), 2)
#define WRITE_IPARS_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,IPARS_HW_CONFIGr_BLKACC,1,IPARS_HW_CONFIGr_OFFSET,0,&(r._ipars_hw_config), 2)

/*******************************************************************************
 * End of 'IPARS_HW_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IPEP_COMMON_INTR_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IPEP_COMMON_INTR_STATUS.
 */
#define READ_IPEP_COMMON_INTR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,IPEP_COMMON_INTR_STATUSr_BLKACC,1,IPEP_COMMON_INTR_STATUSr_OFFSET,0,(r._ipep_common_intr_status), 1)
#define WRITE_IPEP_COMMON_INTR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,IPEP_COMMON_INTR_STATUSr_BLKACC,1,IPEP_COMMON_INTR_STATUSr_OFFSET,0,&(r._ipep_common_intr_status), 1)

/*******************************************************************************
 * End of 'IPEP_COMMON_INTR_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  IPV4_IN_IPV6_PREFIX_MATCH_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     97
 */
/*
 * These macros can be used to access IPV4_IN_IPV6_PREFIX_MATCH_TABLE.
 */
#define READ_IPV4_IN_IPV6_PREFIX_MATCH_TABLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,IPV4_IN_IPV6_PREFIX_MATCH_TABLEm_BLKACC,1,IPV4_IN_IPV6_PREFIX_MATCH_TABLEm_OFFSET,i,(m._ipv4_in_ipv6_prefix_match_table),4)
#define WRITE_IPV4_IN_IPV6_PREFIX_MATCH_TABLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,IPV4_IN_IPV6_PREFIX_MATCH_TABLEm_BLKACC,1,IPV4_IN_IPV6_PREFIX_MATCH_TABLEm_OFFSET,i,&(m._ipv4_in_ipv6_prefix_match_table),4)

/*******************************************************************************
 * End of 'IPV4_IN_IPV6_PREFIX_MATCH_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  IPV6_MIN_FRAG_SIZE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IPV6_MIN_FRAG_SIZE.
 */
#define READ_IPV6_MIN_FRAG_SIZEr(u,r) bcmbd_cmicx_reg_block_read(u,IPV6_MIN_FRAG_SIZEr_BLKACC,1,IPV6_MIN_FRAG_SIZEr_OFFSET,0,(r._ipv6_min_frag_size), 1)
#define WRITE_IPV6_MIN_FRAG_SIZEr(u,r) bcmbd_cmicx_reg_block_write(u,IPV6_MIN_FRAG_SIZEr_BLKACC,1,IPV6_MIN_FRAG_SIZEr_OFFSET,0,&(r._ipv6_min_frag_size), 1)

/*******************************************************************************
 * End of 'IPV6_MIN_FRAG_SIZEr'
 */




/*******************************************************************************
 * REGISTER:  IP_DPR_LATENCY_CONFIG
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access IP_DPR_LATENCY_CONFIG.
 */
#define READ_IP_DPR_LATENCY_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,IP_DPR_LATENCY_CONFIGr_BLKACC,8,IP_DPR_LATENCY_CONFIGr_OFFSET,0,(r._ip_dpr_latency_config), 1)
#define WRITE_IP_DPR_LATENCY_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,IP_DPR_LATENCY_CONFIGr_BLKACC,8,IP_DPR_LATENCY_CONFIGr_OFFSET,0,&(r._ip_dpr_latency_config), 1)

/*******************************************************************************
 * End of 'IP_DPR_LATENCY_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IP_DPR_LATENCY_CONFIG_WR_EN
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access IP_DPR_LATENCY_CONFIG_WR_EN.
 */
#define READ_IP_DPR_LATENCY_CONFIG_WR_ENr(u,r) bcmbd_cmicx_reg_block_read(u,IP_DPR_LATENCY_CONFIG_WR_ENr_BLKACC,8,IP_DPR_LATENCY_CONFIG_WR_ENr_OFFSET,0,(r._ip_dpr_latency_config_wr_en), 1)
#define WRITE_IP_DPR_LATENCY_CONFIG_WR_ENr(u,r) bcmbd_cmicx_reg_block_write(u,IP_DPR_LATENCY_CONFIG_WR_ENr_BLKACC,8,IP_DPR_LATENCY_CONFIG_WR_ENr_OFFSET,0,&(r._ip_dpr_latency_config_wr_en), 1)

/*******************************************************************************
 * End of 'IP_DPR_LATENCY_CONFIG_WR_ENr'
 */




/*******************************************************************************
 * MEMORY:  IP_OPTION_CONTROL_PROFILE_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     6
 */
/*
 * These macros can be used to access IP_OPTION_CONTROL_PROFILE_TABLE.
 */
#define READ_IP_OPTION_CONTROL_PROFILE_TABLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,IP_OPTION_CONTROL_PROFILE_TABLEm_BLKACC,1,IP_OPTION_CONTROL_PROFILE_TABLEm_OFFSET,i,(m._ip_option_control_profile_table),1)
#define WRITE_IP_OPTION_CONTROL_PROFILE_TABLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,IP_OPTION_CONTROL_PROFILE_TABLEm_BLKACC,1,IP_OPTION_CONTROL_PROFILE_TABLEm_OFFSET,i,&(m._ip_option_control_profile_table),1)

/*******************************************************************************
 * End of 'IP_OPTION_CONTROL_PROFILE_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  IP_PROTO_MAP
 * BLOCKS:   IPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access IP_PROTO_MAP.
 */
#define READ_IP_PROTO_MAPm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,IP_PROTO_MAPm_BLKACC,1,n,0,IP_PROTO_MAPm_OFFSET,i,(m._ip_proto_map),1)
#define WRITE_IP_PROTO_MAPm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,IP_PROTO_MAPm_BLKACC,1,n,0,IP_PROTO_MAPm_OFFSET,i,&(m._ip_proto_map),1)
#define WRITE_IP_PROTO_MAPm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,IP_PROTO_MAPm_BLKACC,1,-1,0,IP_PROTO_MAPm_OFFSET,i,&(m._ip_proto_map),1)

/*******************************************************************************
 * End of 'IP_PROTO_MAPm'
 */




/*******************************************************************************
 * REGISTER:  IP_TO_CMIC_INTR_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IP_TO_CMIC_INTR_ENABLE.
 */
#define READ_IP_TO_CMIC_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,IP_TO_CMIC_INTR_ENABLEr_BLKACC,1,IP_TO_CMIC_INTR_ENABLEr_OFFSET,0,(r._ip_to_cmic_intr_enable), 1)
#define WRITE_IP_TO_CMIC_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,IP_TO_CMIC_INTR_ENABLEr_BLKACC,1,IP_TO_CMIC_INTR_ENABLEr_OFFSET,0,&(r._ip_to_cmic_intr_enable), 1)

/*******************************************************************************
 * End of 'IP_TO_CMIC_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  IP_TO_CMIC_INTR_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IP_TO_CMIC_INTR_STATUS.
 */
#define READ_IP_TO_CMIC_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IP_TO_CMIC_INTR_STATUSr_BLKACC,1,n,0,IP_TO_CMIC_INTR_STATUSr_OFFSET,0,(r._ip_to_cmic_intr_status),1)
#define WRITE_IP_TO_CMIC_INTR_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IP_TO_CMIC_INTR_STATUSr_BLKACC,1,n,0,IP_TO_CMIC_INTR_STATUSr_OFFSET,0,&(r._ip_to_cmic_intr_status),1)
#define WRITE_IP_TO_CMIC_INTR_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IP_TO_CMIC_INTR_STATUSr_BLKACC,1,-1,0,IP_TO_CMIC_INTR_STATUSr_OFFSET,0,&(r._ip_to_cmic_intr_status),1)

/*******************************************************************************
 * End of 'IP_TO_CMIC_INTR_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  IP_TO_INT_CN_MAPPING_1
 * BLOCKS:   IPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access IP_TO_INT_CN_MAPPING_1.
 */
#define READ_IP_TO_INT_CN_MAPPING_1m(u,i,m) bcmbd_cmicx_mem_block_read(u,IP_TO_INT_CN_MAPPING_1m_BLKACC,1,IP_TO_INT_CN_MAPPING_1m_OFFSET,i,(m._ip_to_int_cn_mapping_1),1)
#define WRITE_IP_TO_INT_CN_MAPPING_1m(u,i,m) bcmbd_cmicx_mem_block_write(u,IP_TO_INT_CN_MAPPING_1m_BLKACC,1,IP_TO_INT_CN_MAPPING_1m_OFFSET,i,&(m._ip_to_int_cn_mapping_1),1)

/*******************************************************************************
 * End of 'IP_TO_INT_CN_MAPPING_1m'
 */




/*******************************************************************************
 * MEMORY:  IP_TO_INT_CN_MAPPING_2
 * BLOCKS:   IPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access IP_TO_INT_CN_MAPPING_2.
 */
#define READ_IP_TO_INT_CN_MAPPING_2m(u,i,m) bcmbd_cmicx_mem_block_read(u,IP_TO_INT_CN_MAPPING_2m_BLKACC,1,IP_TO_INT_CN_MAPPING_2m_OFFSET,i,(m._ip_to_int_cn_mapping_2),1)
#define WRITE_IP_TO_INT_CN_MAPPING_2m(u,i,m) bcmbd_cmicx_mem_block_write(u,IP_TO_INT_CN_MAPPING_2m_BLKACC,1,IP_TO_INT_CN_MAPPING_2m_OFFSET,i,&(m._ip_to_int_cn_mapping_2),1)

/*******************************************************************************
 * End of 'IP_TO_INT_CN_MAPPING_2m'
 */




/*******************************************************************************
 * MEMORY:  IP_TO_INT_CN_MAPPING_PROFILE_SELECT_1
 * BLOCKS:   IPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access IP_TO_INT_CN_MAPPING_PROFILE_SELECT_1.
 */
#define READ_IP_TO_INT_CN_MAPPING_PROFILE_SELECT_1m(u,i,m) bcmbd_cmicx_mem_block_read(u,IP_TO_INT_CN_MAPPING_PROFILE_SELECT_1m_BLKACC,1,IP_TO_INT_CN_MAPPING_PROFILE_SELECT_1m_OFFSET,i,(m._ip_to_int_cn_mapping_profile_select_1),1)
#define WRITE_IP_TO_INT_CN_MAPPING_PROFILE_SELECT_1m(u,i,m) bcmbd_cmicx_mem_block_write(u,IP_TO_INT_CN_MAPPING_PROFILE_SELECT_1m_BLKACC,1,IP_TO_INT_CN_MAPPING_PROFILE_SELECT_1m_OFFSET,i,&(m._ip_to_int_cn_mapping_profile_select_1),1)

/*******************************************************************************
 * End of 'IP_TO_INT_CN_MAPPING_PROFILE_SELECT_1m'
 */




/*******************************************************************************
 * MEMORY:  IP_TO_INT_CN_MAPPING_PROFILE_SELECT_2
 * BLOCKS:   IPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access IP_TO_INT_CN_MAPPING_PROFILE_SELECT_2.
 */
#define READ_IP_TO_INT_CN_MAPPING_PROFILE_SELECT_2m(u,i,m) bcmbd_cmicx_mem_block_read(u,IP_TO_INT_CN_MAPPING_PROFILE_SELECT_2m_BLKACC,1,IP_TO_INT_CN_MAPPING_PROFILE_SELECT_2m_OFFSET,i,(m._ip_to_int_cn_mapping_profile_select_2),1)
#define WRITE_IP_TO_INT_CN_MAPPING_PROFILE_SELECT_2m(u,i,m) bcmbd_cmicx_mem_block_write(u,IP_TO_INT_CN_MAPPING_PROFILE_SELECT_2m_BLKACC,1,IP_TO_INT_CN_MAPPING_PROFILE_SELECT_2m_OFFSET,i,&(m._ip_to_int_cn_mapping_profile_select_2),1)

/*******************************************************************************
 * End of 'IP_TO_INT_CN_MAPPING_PROFILE_SELECT_2m'
 */




/*******************************************************************************
 * REGISTER:  IRSEL_EN_COR_ERR_RPT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IRSEL_EN_COR_ERR_RPT.
 */
#define READ_IRSEL_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_read(u,IRSEL_EN_COR_ERR_RPTr_BLKACC,1,IRSEL_EN_COR_ERR_RPTr_OFFSET,0,(r._irsel_en_cor_err_rpt), 1)
#define WRITE_IRSEL_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_write(u,IRSEL_EN_COR_ERR_RPTr_BLKACC,1,IRSEL_EN_COR_ERR_RPTr_OFFSET,0,&(r._irsel_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'IRSEL_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  IRSEL_HW_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IRSEL_HW_CONFIG.
 */
#define READ_IRSEL_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,IRSEL_HW_CONFIGr_BLKACC,1,IRSEL_HW_CONFIGr_OFFSET,0,(r._irsel_hw_config), 2)
#define WRITE_IRSEL_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,IRSEL_HW_CONFIGr_BLKACC,1,IRSEL_HW_CONFIGr_OFFSET,0,&(r._irsel_hw_config), 2)

/*******************************************************************************
 * End of 'IRSEL_HW_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IRSEL_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IRSEL_SER_CONTROL.
 */
#define READ_IRSEL_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,IRSEL_SER_CONTROLr_BLKACC,1,IRSEL_SER_CONTROLr_OFFSET,0,(r._irsel_ser_control), 1)
#define WRITE_IRSEL_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,IRSEL_SER_CONTROLr_BLKACC,1,IRSEL_SER_CONTROLr_OFFSET,0,&(r._irsel_ser_control), 1)

/*******************************************************************************
 * End of 'IRSEL_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ISW_ECC_EN
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISW_ECC_EN.
 */
#define READ_ISW_ECC_ENr(u,r) bcmbd_cmicx_reg_block_read(u,ISW_ECC_ENr_BLKACC,1,ISW_ECC_ENr_OFFSET,0,(r._isw_ecc_en), 1)
#define WRITE_ISW_ECC_ENr(u,r) bcmbd_cmicx_reg_block_write(u,ISW_ECC_ENr_BLKACC,1,ISW_ECC_ENr_OFFSET,0,&(r._isw_ecc_en), 1)

/*******************************************************************************
 * End of 'ISW_ECC_ENr'
 */




/*******************************************************************************
 * REGISTER:  ISW_EN_COR_ERR_RPT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISW_EN_COR_ERR_RPT.
 */
#define READ_ISW_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_read(u,ISW_EN_COR_ERR_RPTr_BLKACC,1,ISW_EN_COR_ERR_RPTr_OFFSET,0,(r._isw_en_cor_err_rpt), 1)
#define WRITE_ISW_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_block_write(u,ISW_EN_COR_ERR_RPTr_BLKACC,1,ISW_EN_COR_ERR_RPTr_OFFSET,0,&(r._isw_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'ISW_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  ISW_HW_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ISW_HW_CONFIG.
 */
#define READ_ISW_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,ISW_HW_CONFIGr_BLKACC,1,ISW_HW_CONFIGr_OFFSET,0,(r._isw_hw_config), 2)
#define WRITE_ISW_HW_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,ISW_HW_CONFIGr_BLKACC,1,ISW_HW_CONFIGr_OFFSET,0,&(r._isw_hw_config), 2)

/*******************************************************************************
 * End of 'ISW_HW_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  ISW_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ISW_RAM_CONTROL.
 */
#define READ_ISW_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,ISW_RAM_CONTROLr_BLKACC,1,n,0,ISW_RAM_CONTROLr_OFFSET,0,(r._isw_ram_control),2)
#define WRITE_ISW_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,ISW_RAM_CONTROLr_BLKACC,1,n,0,ISW_RAM_CONTROLr_OFFSET,0,&(r._isw_ram_control),2)
#define WRITE_ISW_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,ISW_RAM_CONTROLr_BLKACC,1,-1,0,ISW_RAM_CONTROLr_OFFSET,0,&(r._isw_ram_control),2)

/*******************************************************************************
 * End of 'ISW_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ISW_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISW_SER_CONTROL.
 */
#define READ_ISW_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,ISW_SER_CONTROLr_BLKACC,1,ISW_SER_CONTROLr_OFFSET,0,(r._isw_ser_control), 1)
#define WRITE_ISW_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,ISW_SER_CONTROLr_BLKACC,1,ISW_SER_CONTROLr_OFFSET,0,&(r._isw_ser_control), 1)

/*******************************************************************************
 * End of 'ISW_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IS_CAL_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IS_CAL_CONFIG.
 */
#define READ_IS_CAL_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IS_CAL_CONFIGr_BLKACC,89,n,0,IS_CAL_CONFIGr_OFFSET,i,(r._is_cal_config),2)
#define WRITE_IS_CAL_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IS_CAL_CONFIGr_BLKACC,89,n,0,IS_CAL_CONFIGr_OFFSET,i,&(r._is_cal_config),2)
#define WRITE_IS_CAL_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IS_CAL_CONFIGr_BLKACC,89,-1,0,IS_CAL_CONFIGr_OFFSET,i,&(r._is_cal_config),2)

/*******************************************************************************
 * End of 'IS_CAL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IS_CBMG_VALUE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_CBMG_VALUE.
 */
#define READ_IS_CBMG_VALUEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IS_CBMG_VALUEr_BLKACC,89,n,0,IS_CBMG_VALUEr_OFFSET,0,(r._is_cbmg_value),1)
#define WRITE_IS_CBMG_VALUEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IS_CBMG_VALUEr_BLKACC,89,n,0,IS_CBMG_VALUEr_OFFSET,0,&(r._is_cbmg_value),1)
#define WRITE_IS_CBMG_VALUEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IS_CBMG_VALUEr_BLKACC,89,-1,0,IS_CBMG_VALUEr_OFFSET,0,&(r._is_cbmg_value),1)

/*******************************************************************************
 * End of 'IS_CBMG_VALUEr'
 */




/*******************************************************************************
 * REGISTER:  IS_CMIC_RESERVED
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_CMIC_RESERVED.
 */
#define READ_IS_CMIC_RESERVEDr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IS_CMIC_RESERVEDr_BLKACC,89,n,0,IS_CMIC_RESERVEDr_OFFSET,0,(r._is_cmic_reserved),1)
#define WRITE_IS_CMIC_RESERVEDr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IS_CMIC_RESERVEDr_BLKACC,89,n,0,IS_CMIC_RESERVEDr_OFFSET,0,&(r._is_cmic_reserved),1)
#define WRITE_IS_CMIC_RESERVEDr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IS_CMIC_RESERVEDr_BLKACC,89,-1,0,IS_CMIC_RESERVEDr_OFFSET,0,&(r._is_cmic_reserved),1)

/*******************************************************************************
 * End of 'IS_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  IS_CPU_MGMT_LB_RATIOS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_CPU_MGMT_LB_RATIOS.
 */
#define READ_IS_CPU_MGMT_LB_RATIOSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IS_CPU_MGMT_LB_RATIOSr_BLKACC,89,n,0,IS_CPU_MGMT_LB_RATIOSr_OFFSET,0,(r._is_cpu_mgmt_lb_ratios),1)
#define WRITE_IS_CPU_MGMT_LB_RATIOSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IS_CPU_MGMT_LB_RATIOSr_BLKACC,89,n,0,IS_CPU_MGMT_LB_RATIOSr_OFFSET,0,&(r._is_cpu_mgmt_lb_ratios),1)
#define WRITE_IS_CPU_MGMT_LB_RATIOSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IS_CPU_MGMT_LB_RATIOSr_BLKACC,89,-1,0,IS_CPU_MGMT_LB_RATIOSr_OFFSET,0,&(r._is_cpu_mgmt_lb_ratios),1)

/*******************************************************************************
 * End of 'IS_CPU_MGMT_LB_RATIOSr'
 */




/*******************************************************************************
 * REGISTER:  IS_FEATURE_CTRL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_FEATURE_CTRL.
 */
#define READ_IS_FEATURE_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IS_FEATURE_CTRLr_BLKACC,89,n,0,IS_FEATURE_CTRLr_OFFSET,0,(r._is_feature_ctrl),1)
#define WRITE_IS_FEATURE_CTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IS_FEATURE_CTRLr_BLKACC,89,n,0,IS_FEATURE_CTRLr_OFFSET,0,&(r._is_feature_ctrl),1)
#define WRITE_IS_FEATURE_CTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IS_FEATURE_CTRLr_BLKACC,89,-1,0,IS_FEATURE_CTRLr_OFFSET,0,&(r._is_feature_ctrl),1)

/*******************************************************************************
 * End of 'IS_FEATURE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  IS_MAX_SPACING
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_MAX_SPACING.
 */
#define READ_IS_MAX_SPACINGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IS_MAX_SPACINGr_BLKACC,89,n,0,IS_MAX_SPACINGr_OFFSET,0,(r._is_max_spacing),1)
#define WRITE_IS_MAX_SPACINGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IS_MAX_SPACINGr_BLKACC,89,n,0,IS_MAX_SPACINGr_OFFSET,0,&(r._is_max_spacing),1)
#define WRITE_IS_MAX_SPACINGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IS_MAX_SPACINGr_BLKACC,89,-1,0,IS_MAX_SPACINGr_OFFSET,0,&(r._is_max_spacing),1)

/*******************************************************************************
 * End of 'IS_MAX_SPACINGr'
 */




/*******************************************************************************
 * REGISTER:  IS_MIN_CELL_SPACING
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_MIN_CELL_SPACING.
 */
#define READ_IS_MIN_CELL_SPACINGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IS_MIN_CELL_SPACINGr_BLKACC,89,n,0,IS_MIN_CELL_SPACINGr_OFFSET,0,(r._is_min_cell_spacing),1)
#define WRITE_IS_MIN_CELL_SPACINGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IS_MIN_CELL_SPACINGr_BLKACC,89,n,0,IS_MIN_CELL_SPACINGr_OFFSET,0,&(r._is_min_cell_spacing),1)
#define WRITE_IS_MIN_CELL_SPACINGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IS_MIN_CELL_SPACINGr_BLKACC,89,-1,0,IS_MIN_CELL_SPACINGr_OFFSET,0,&(r._is_min_cell_spacing),1)

/*******************************************************************************
 * End of 'IS_MIN_CELL_SPACINGr'
 */




/*******************************************************************************
 * REGISTER:  IS_MIN_CELL_SPACING_EOP_TO_SOP
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_MIN_CELL_SPACING_EOP_TO_SOP.
 */
#define READ_IS_MIN_CELL_SPACING_EOP_TO_SOPr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IS_MIN_CELL_SPACING_EOP_TO_SOPr_BLKACC,89,n,0,IS_MIN_CELL_SPACING_EOP_TO_SOPr_OFFSET,0,(r._is_min_cell_spacing_eop_to_sop),1)
#define WRITE_IS_MIN_CELL_SPACING_EOP_TO_SOPr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IS_MIN_CELL_SPACING_EOP_TO_SOPr_BLKACC,89,n,0,IS_MIN_CELL_SPACING_EOP_TO_SOPr_OFFSET,0,&(r._is_min_cell_spacing_eop_to_sop),1)
#define WRITE_IS_MIN_CELL_SPACING_EOP_TO_SOPr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IS_MIN_CELL_SPACING_EOP_TO_SOPr_BLKACC,89,-1,0,IS_MIN_CELL_SPACING_EOP_TO_SOPr_OFFSET,0,&(r._is_min_cell_spacing_eop_to_sop),1)

/*******************************************************************************
 * End of 'IS_MIN_CELL_SPACING_EOP_TO_SOPr'
 */




/*******************************************************************************
 * REGISTER:  IS_MIN_PORT_PICK_SPACING_WITHIN_PKT
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_MIN_PORT_PICK_SPACING_WITHIN_PKT.
 */
#define READ_IS_MIN_PORT_PICK_SPACING_WITHIN_PKTr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IS_MIN_PORT_PICK_SPACING_WITHIN_PKTr_BLKACC,89,n,0,IS_MIN_PORT_PICK_SPACING_WITHIN_PKTr_OFFSET,0,(r._is_min_port_pick_spacing_within_pkt),1)
#define WRITE_IS_MIN_PORT_PICK_SPACING_WITHIN_PKTr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IS_MIN_PORT_PICK_SPACING_WITHIN_PKTr_BLKACC,89,n,0,IS_MIN_PORT_PICK_SPACING_WITHIN_PKTr_OFFSET,0,&(r._is_min_port_pick_spacing_within_pkt),1)
#define WRITE_IS_MIN_PORT_PICK_SPACING_WITHIN_PKTr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IS_MIN_PORT_PICK_SPACING_WITHIN_PKTr_BLKACC,89,-1,0,IS_MIN_PORT_PICK_SPACING_WITHIN_PKTr_OFFSET,0,&(r._is_min_port_pick_spacing_within_pkt),1)

/*******************************************************************************
 * End of 'IS_MIN_PORT_PICK_SPACING_WITHIN_PKTr'
 */




/*******************************************************************************
 * REGISTER:  IS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAY
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAY.
 */
#define READ_IS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr_BLKACC,89,n,0,IS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr_OFFSET,0,(r._is_mmu_pksch_pkt_credit_return_delay),1)
#define WRITE_IS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr_BLKACC,89,n,0,IS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr_OFFSET,0,&(r._is_mmu_pksch_pkt_credit_return_delay),1)
#define WRITE_IS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr_BLKACC,89,-1,0,IS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr_OFFSET,0,&(r._is_mmu_pksch_pkt_credit_return_delay),1)

/*******************************************************************************
 * End of 'IS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr'
 */




/*******************************************************************************
 * REGISTER:  IS_PKSCH_CAL_CONFIG
 * BLOCKS:   PORT_IF
 * SIZE:     64
 */
/*
 * These macros can be used to access IS_PKSCH_CAL_CONFIG.
 */
#define READ_IS_PKSCH_CAL_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_read(u,IS_PKSCH_CAL_CONFIGr_BLKACC,89,n,0,IS_PKSCH_CAL_CONFIGr_OFFSET,i,(r._is_pksch_cal_config),2)
#define WRITE_IS_PKSCH_CAL_CONFIGr(u,n,i,r) bcmbd_cmicx_reg_unique_block_write(u,IS_PKSCH_CAL_CONFIGr_BLKACC,89,n,0,IS_PKSCH_CAL_CONFIGr_OFFSET,i,&(r._is_pksch_cal_config),2)
#define WRITE_IS_PKSCH_CAL_CONFIGr_ALL(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,IS_PKSCH_CAL_CONFIGr_BLKACC,89,-1,0,IS_PKSCH_CAL_CONFIGr_OFFSET,i,&(r._is_pksch_cal_config),2)

/*******************************************************************************
 * End of 'IS_PKSCH_CAL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IS_PKSCH_CPU_MGMT_LB_RATIOS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_PKSCH_CPU_MGMT_LB_RATIOS.
 */
#define READ_IS_PKSCH_CPU_MGMT_LB_RATIOSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IS_PKSCH_CPU_MGMT_LB_RATIOSr_BLKACC,89,n,0,IS_PKSCH_CPU_MGMT_LB_RATIOSr_OFFSET,0,(r._is_pksch_cpu_mgmt_lb_ratios),1)
#define WRITE_IS_PKSCH_CPU_MGMT_LB_RATIOSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IS_PKSCH_CPU_MGMT_LB_RATIOSr_BLKACC,89,n,0,IS_PKSCH_CPU_MGMT_LB_RATIOSr_OFFSET,0,&(r._is_pksch_cpu_mgmt_lb_ratios),1)
#define WRITE_IS_PKSCH_CPU_MGMT_LB_RATIOSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IS_PKSCH_CPU_MGMT_LB_RATIOSr_BLKACC,89,-1,0,IS_PKSCH_CPU_MGMT_LB_RATIOSr_OFFSET,0,&(r._is_pksch_cpu_mgmt_lb_ratios),1)

/*******************************************************************************
 * End of 'IS_PKSCH_CPU_MGMT_LB_RATIOSr'
 */




/*******************************************************************************
 * REGISTER:  IS_PKSCH_CREDIT_STS
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_PKSCH_CREDIT_STS.
 */
#define READ_IS_PKSCH_CREDIT_STSr(u,p,r) bcmbd_cmicx_reg_port_read(u,IS_PKSCH_CREDIT_STSr_BLKACC,p,IS_PKSCH_CREDIT_STSr_OFFSET,0,(r._is_pksch_credit_sts), 1)
#define WRITE_IS_PKSCH_CREDIT_STSr(u,p,r) bcmbd_cmicx_reg_port_write(u,IS_PKSCH_CREDIT_STSr_BLKACC,p,IS_PKSCH_CREDIT_STSr_OFFSET,0,&(r._is_pksch_credit_sts), 1)

/*******************************************************************************
 * End of 'IS_PKSCH_CREDIT_STSr'
 */




/*******************************************************************************
 * REGISTER:  IS_PKSCH_PKT_CREDITS_PER_PIPE
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_PKSCH_PKT_CREDITS_PER_PIPE.
 */
#define READ_IS_PKSCH_PKT_CREDITS_PER_PIPEr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IS_PKSCH_PKT_CREDITS_PER_PIPEr_BLKACC,89,n,0,IS_PKSCH_PKT_CREDITS_PER_PIPEr_OFFSET,0,(r._is_pksch_pkt_credits_per_pipe),1)
#define WRITE_IS_PKSCH_PKT_CREDITS_PER_PIPEr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IS_PKSCH_PKT_CREDITS_PER_PIPEr_BLKACC,89,n,0,IS_PKSCH_PKT_CREDITS_PER_PIPEr_OFFSET,0,&(r._is_pksch_pkt_credits_per_pipe),1)
#define WRITE_IS_PKSCH_PKT_CREDITS_PER_PIPEr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IS_PKSCH_PKT_CREDITS_PER_PIPEr_BLKACC,89,-1,0,IS_PKSCH_PKT_CREDITS_PER_PIPEr_OFFSET,0,&(r._is_pksch_pkt_credits_per_pipe),1)

/*******************************************************************************
 * End of 'IS_PKSCH_PKT_CREDITS_PER_PIPEr'
 */




/*******************************************************************************
 * REGISTER:  IS_PKSCH_PKT_CREDITS_PER_PORT
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_PKSCH_PKT_CREDITS_PER_PORT.
 */
#define READ_IS_PKSCH_PKT_CREDITS_PER_PORTr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IS_PKSCH_PKT_CREDITS_PER_PORTr_BLKACC,89,n,0,IS_PKSCH_PKT_CREDITS_PER_PORTr_OFFSET,0,(r._is_pksch_pkt_credits_per_port),1)
#define WRITE_IS_PKSCH_PKT_CREDITS_PER_PORTr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IS_PKSCH_PKT_CREDITS_PER_PORTr_BLKACC,89,n,0,IS_PKSCH_PKT_CREDITS_PER_PORTr_OFFSET,0,&(r._is_pksch_pkt_credits_per_port),1)
#define WRITE_IS_PKSCH_PKT_CREDITS_PER_PORTr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IS_PKSCH_PKT_CREDITS_PER_PORTr_BLKACC,89,-1,0,IS_PKSCH_PKT_CREDITS_PER_PORTr_OFFSET,0,&(r._is_pksch_pkt_credits_per_port),1)

/*******************************************************************************
 * End of 'IS_PKSCH_PKT_CREDITS_PER_PORTr'
 */




/*******************************************************************************
 * REGISTER:  IS_URG_CELL_SPACING
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_URG_CELL_SPACING.
 */
#define READ_IS_URG_CELL_SPACINGr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,IS_URG_CELL_SPACINGr_BLKACC,89,n,0,IS_URG_CELL_SPACINGr_OFFSET,0,(r._is_urg_cell_spacing),1)
#define WRITE_IS_URG_CELL_SPACINGr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,IS_URG_CELL_SPACINGr_BLKACC,89,n,0,IS_URG_CELL_SPACINGr_OFFSET,0,&(r._is_urg_cell_spacing),1)
#define WRITE_IS_URG_CELL_SPACINGr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,IS_URG_CELL_SPACINGr_BLKACC,89,-1,0,IS_URG_CELL_SPACINGr_OFFSET,0,&(r._is_urg_cell_spacing),1)

/*******************************************************************************
 * End of 'IS_URG_CELL_SPACINGr'
 */




/*******************************************************************************
 * MEMORY:  I_MIRROR_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     25
 */
/*
 * These macros can be used to access I_MIRROR_CONTROL.
 */
#define READ_I_MIRROR_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,I_MIRROR_CONTROLm_BLKACC,1,I_MIRROR_CONTROLm_OFFSET,i,(m._i_mirror_control),1)
#define WRITE_I_MIRROR_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,I_MIRROR_CONTROLm_BLKACC,1,I_MIRROR_CONTROLm_OFFSET,i,&(m._i_mirror_control),1)

/*******************************************************************************
 * End of 'I_MIRROR_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  KNOWN_MCAST_BLOCK_MASK
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access KNOWN_MCAST_BLOCK_MASK.
 */
#define READ_KNOWN_MCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicx_mem_block_read(u,KNOWN_MCAST_BLOCK_MASKm_BLKACC,1,KNOWN_MCAST_BLOCK_MASKm_OFFSET,i,(m._known_mcast_block_mask),9)
#define WRITE_KNOWN_MCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicx_mem_block_write(u,KNOWN_MCAST_BLOCK_MASKm_BLKACC,1,KNOWN_MCAST_BLOCK_MASKm_OFFSET,i,&(m._known_mcast_block_mask),9)

/*******************************************************************************
 * End of 'KNOWN_MCAST_BLOCK_MASKm'
 */




/*******************************************************************************
 * REGISTER:  L2GRE_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2GRE_CONTROL.
 */
#define READ_L2GRE_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,L2GRE_CONTROLr_BLKACC,1,L2GRE_CONTROLr_OFFSET,0,(r._l2gre_control), 1)
#define WRITE_L2GRE_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,L2GRE_CONTROLr_BLKACC,1,L2GRE_CONTROLr_OFFSET,0,&(r._l2gre_control), 1)

/*******************************************************************************
 * End of 'L2GRE_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  L2MC
 * BLOCKS:   IPIPE
 * SIZE:     283
 */
/*
 * These macros can be used to access L2MC.
 */
#define READ_L2MCm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2MCm_BLKACC,1,L2MCm_OFFSET,i,(m._l2mc),9)
#define WRITE_L2MCm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2MCm_BLKACC,1,L2MCm_OFFSET,i,&(m._l2mc),9)

/*******************************************************************************
 * End of 'L2MCm'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_ACTION_TABLE_A
 * BLOCKS:   IPIPE
 * SIZE:     72
 */
/*
 * These macros can be used to access L2_ENTRY_ACTION_TABLE_A.
 */
#define READ_L2_ENTRY_ACTION_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_ENTRY_ACTION_TABLE_Am_BLKACC,1,L2_ENTRY_ACTION_TABLE_Am_OFFSET,i,(m._l2_entry_action_table_a),3)
#define WRITE_L2_ENTRY_ACTION_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_ENTRY_ACTION_TABLE_Am_BLKACC,1,L2_ENTRY_ACTION_TABLE_Am_OFFSET,i,&(m._l2_entry_action_table_a),3)

/*******************************************************************************
 * End of 'L2_ENTRY_ACTION_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_ACTION_TABLE_B
 * BLOCKS:   IPIPE
 * SIZE:     72
 */
/*
 * These macros can be used to access L2_ENTRY_ACTION_TABLE_B.
 */
#define READ_L2_ENTRY_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_ENTRY_ACTION_TABLE_Bm_BLKACC,1,L2_ENTRY_ACTION_TABLE_Bm_OFFSET,i,(m._l2_entry_action_table_b),3)
#define WRITE_L2_ENTRY_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_ENTRY_ACTION_TABLE_Bm_BLKACC,1,L2_ENTRY_ACTION_TABLE_Bm_OFFSET,i,&(m._l2_entry_action_table_b),3)

/*******************************************************************************
 * End of 'L2_ENTRY_ACTION_TABLE_Bm'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_ECC
 * BLOCKS:   IPIPE
 * SIZE:     104
 */
/*
 * These macros can be used to access L2_ENTRY_ECC.
 */
#define READ_L2_ENTRY_ECCm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_ENTRY_ECCm_BLKACC,1,L2_ENTRY_ECCm_OFFSET,i,(m._l2_entry_ecc),4)
#define WRITE_L2_ENTRY_ECCm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_ENTRY_ECCm_BLKACC,1,L2_ENTRY_ECCm_OFFSET,i,&(m._l2_entry_ecc),4)

/*******************************************************************************
 * End of 'L2_ENTRY_ECCm'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     21
 */
/*
 * These macros can be used to access L2_ENTRY_HASH_CONTROL.
 */
#define READ_L2_ENTRY_HASH_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_ENTRY_HASH_CONTROLm_BLKACC,1,L2_ENTRY_HASH_CONTROLm_OFFSET,i,(m._l2_entry_hash_control),1)
#define WRITE_L2_ENTRY_HASH_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_ENTRY_HASH_CONTROLm_BLKACC,1,L2_ENTRY_HASH_CONTROLm_OFFSET,i,&(m._l2_entry_hash_control),1)

/*******************************************************************************
 * End of 'L2_ENTRY_HASH_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_HT_DEBUG_CMD
 * BLOCKS:   IPIPE
 * SIZE:     3
 */
/*
 * These macros can be used to access L2_ENTRY_HT_DEBUG_CMD.
 */
#define READ_L2_ENTRY_HT_DEBUG_CMDm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_ENTRY_HT_DEBUG_CMDm_BLKACC,1,L2_ENTRY_HT_DEBUG_CMDm_OFFSET,i,(m._l2_entry_ht_debug_cmd),1)
#define WRITE_L2_ENTRY_HT_DEBUG_CMDm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_ENTRY_HT_DEBUG_CMDm_BLKACC,1,L2_ENTRY_HT_DEBUG_CMDm_OFFSET,i,&(m._l2_entry_ht_debug_cmd),1)

/*******************************************************************************
 * End of 'L2_ENTRY_HT_DEBUG_CMDm'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_HT_DEBUG_KEY
 * BLOCKS:   IPIPE
 * SIZE:     480
 */
/*
 * These macros can be used to access L2_ENTRY_HT_DEBUG_KEY.
 */
#define READ_L2_ENTRY_HT_DEBUG_KEYm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_ENTRY_HT_DEBUG_KEYm_BLKACC,1,L2_ENTRY_HT_DEBUG_KEYm_OFFSET,i,(m._l2_entry_ht_debug_key),15)
#define WRITE_L2_ENTRY_HT_DEBUG_KEYm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_ENTRY_HT_DEBUG_KEYm_BLKACC,1,L2_ENTRY_HT_DEBUG_KEYm_OFFSET,i,&(m._l2_entry_ht_debug_key),15)

/*******************************************************************************
 * End of 'L2_ENTRY_HT_DEBUG_KEYm'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_HT_DEBUG_RESULT
 * BLOCKS:   IPIPE
 * SIZE:     139
 */
/*
 * These macros can be used to access L2_ENTRY_HT_DEBUG_RESULT.
 */
#define READ_L2_ENTRY_HT_DEBUG_RESULTm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_ENTRY_HT_DEBUG_RESULTm_BLKACC,1,L2_ENTRY_HT_DEBUG_RESULTm_OFFSET,i,(m._l2_entry_ht_debug_result),5)
#define WRITE_L2_ENTRY_HT_DEBUG_RESULTm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_ENTRY_HT_DEBUG_RESULTm_BLKACC,1,L2_ENTRY_HT_DEBUG_RESULTm_OFFSET,i,&(m._l2_entry_ht_debug_result),5)

/*******************************************************************************
 * End of 'L2_ENTRY_HT_DEBUG_RESULTm'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_KEY_ATTRIBUTES
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access L2_ENTRY_KEY_ATTRIBUTES.
 */
#define READ_L2_ENTRY_KEY_ATTRIBUTESm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_ENTRY_KEY_ATTRIBUTESm_BLKACC,1,L2_ENTRY_KEY_ATTRIBUTESm_OFFSET,i,(m._l2_entry_key_attributes),3)
#define WRITE_L2_ENTRY_KEY_ATTRIBUTESm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_ENTRY_KEY_ATTRIBUTESm_BLKACC,1,L2_ENTRY_KEY_ATTRIBUTESm_OFFSET,i,&(m._l2_entry_key_attributes),3)

/*******************************************************************************
 * End of 'L2_ENTRY_KEY_ATTRIBUTESm'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_KEY_BUFFER_0
 * BLOCKS:   IPIPE
 * SIZE:     96
 */
/*
 * These macros can be used to access L2_ENTRY_KEY_BUFFER_0.
 */
#define READ_L2_ENTRY_KEY_BUFFER_0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,L2_ENTRY_KEY_BUFFER_0m_BLKACC,1,n,0,L2_ENTRY_KEY_BUFFER_0m_OFFSET,i,(m._l2_entry_key_buffer_0),3)
#define WRITE_L2_ENTRY_KEY_BUFFER_0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,L2_ENTRY_KEY_BUFFER_0m_BLKACC,1,n,0,L2_ENTRY_KEY_BUFFER_0m_OFFSET,i,&(m._l2_entry_key_buffer_0),3)
#define WRITE_L2_ENTRY_KEY_BUFFER_0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,L2_ENTRY_KEY_BUFFER_0m_BLKACC,1,-1,0,L2_ENTRY_KEY_BUFFER_0m_OFFSET,i,&(m._l2_entry_key_buffer_0),3)

/*******************************************************************************
 * End of 'L2_ENTRY_KEY_BUFFER_0m'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_KEY_BUFFER_1
 * BLOCKS:   IPIPE
 * SIZE:     96
 */
/*
 * These macros can be used to access L2_ENTRY_KEY_BUFFER_1.
 */
#define READ_L2_ENTRY_KEY_BUFFER_1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,L2_ENTRY_KEY_BUFFER_1m_BLKACC,1,n,0,L2_ENTRY_KEY_BUFFER_1m_OFFSET,i,(m._l2_entry_key_buffer_1),3)
#define WRITE_L2_ENTRY_KEY_BUFFER_1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,L2_ENTRY_KEY_BUFFER_1m_BLKACC,1,n,0,L2_ENTRY_KEY_BUFFER_1m_OFFSET,i,&(m._l2_entry_key_buffer_1),3)
#define WRITE_L2_ENTRY_KEY_BUFFER_1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,L2_ENTRY_KEY_BUFFER_1m_BLKACC,1,-1,0,L2_ENTRY_KEY_BUFFER_1m_OFFSET,i,&(m._l2_entry_key_buffer_1),3)

/*******************************************************************************
 * End of 'L2_ENTRY_KEY_BUFFER_1m'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_REMAP_TABLE_A
 * BLOCKS:   IPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access L2_ENTRY_REMAP_TABLE_A.
 */
#define READ_L2_ENTRY_REMAP_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_ENTRY_REMAP_TABLE_Am_BLKACC,1,L2_ENTRY_REMAP_TABLE_Am_OFFSET,i,(m._l2_entry_remap_table_a),1)
#define WRITE_L2_ENTRY_REMAP_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_ENTRY_REMAP_TABLE_Am_BLKACC,1,L2_ENTRY_REMAP_TABLE_Am_OFFSET,i,&(m._l2_entry_remap_table_a),1)

/*******************************************************************************
 * End of 'L2_ENTRY_REMAP_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_REMAP_TABLE_B
 * BLOCKS:   IPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access L2_ENTRY_REMAP_TABLE_B.
 */
#define READ_L2_ENTRY_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_ENTRY_REMAP_TABLE_Bm_BLKACC,1,L2_ENTRY_REMAP_TABLE_Bm_OFFSET,i,(m._l2_entry_remap_table_b),1)
#define WRITE_L2_ENTRY_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_ENTRY_REMAP_TABLE_Bm_BLKACC,1,L2_ENTRY_REMAP_TABLE_Bm_OFFSET,i,&(m._l2_entry_remap_table_b),1)

/*******************************************************************************
 * End of 'L2_ENTRY_REMAP_TABLE_Bm'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_SINGLE
 * BLOCKS:   IPIPE
 * SIZE:     96
 */
/*
 * These macros can be used to access L2_ENTRY_SINGLE.
 */
#define READ_L2_ENTRY_SINGLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_ENTRY_SINGLEm_BLKACC,1,L2_ENTRY_SINGLEm_OFFSET,i,(m._l2_entry_single),3)
#define WRITE_L2_ENTRY_SINGLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_ENTRY_SINGLEm_BLKACC,1,L2_ENTRY_SINGLEm_OFFSET,i,&(m._l2_entry_single),3)

/*******************************************************************************
 * End of 'L2_ENTRY_SINGLEm'
 */




/*******************************************************************************
 * MEMORY:  L2_HITDA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access L2_HITDA_ONLY.
 */
#define READ_L2_HITDA_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_HITDA_ONLYm_BLKACC,1,L2_HITDA_ONLYm_OFFSET,i,(m._l2_hitda_only),1)
#define WRITE_L2_HITDA_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_HITDA_ONLYm_BLKACC,1,L2_HITDA_ONLYm_OFFSET,i,&(m._l2_hitda_only),1)

/*******************************************************************************
 * End of 'L2_HITDA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L2_HITSA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access L2_HITSA_ONLY.
 */
#define READ_L2_HITSA_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_HITSA_ONLYm_BLKACC,1,L2_HITSA_ONLYm_OFFSET,i,(m._l2_hitsa_only),1)
#define WRITE_L2_HITSA_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_HITSA_ONLYm_BLKACC,1,L2_HITSA_ONLYm_OFFSET,i,&(m._l2_hitsa_only),1)

/*******************************************************************************
 * End of 'L2_HITSA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L2_LEARN_CACHE
 * BLOCKS:   IPIPE
 * SIZE:     96
 */
/*
 * These macros can be used to access L2_LEARN_CACHE.
 */
#define READ_L2_LEARN_CACHEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,L2_LEARN_CACHEm_BLKACC,1,n,0,L2_LEARN_CACHEm_OFFSET,i,(m._l2_learn_cache),3)
#define WRITE_L2_LEARN_CACHEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,L2_LEARN_CACHEm_BLKACC,1,n,0,L2_LEARN_CACHEm_OFFSET,i,&(m._l2_learn_cache),3)
#define WRITE_L2_LEARN_CACHEm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,L2_LEARN_CACHEm_BLKACC,1,-1,0,L2_LEARN_CACHEm_OFFSET,i,&(m._l2_learn_cache),3)

/*******************************************************************************
 * End of 'L2_LEARN_CACHEm'
 */




/*******************************************************************************
 * REGISTER:  L2_LEARN_CACHE_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_LEARN_CACHE_STATUS.
 */
#define READ_L2_LEARN_CACHE_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L2_LEARN_CACHE_STATUSr_BLKACC,1,n,0,L2_LEARN_CACHE_STATUSr_OFFSET,0,(r._l2_learn_cache_status),1)
#define WRITE_L2_LEARN_CACHE_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L2_LEARN_CACHE_STATUSr_BLKACC,1,n,0,L2_LEARN_CACHE_STATUSr_OFFSET,0,&(r._l2_learn_cache_status),1)
#define WRITE_L2_LEARN_CACHE_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L2_LEARN_CACHE_STATUSr_BLKACC,1,-1,0,L2_LEARN_CACHE_STATUSr_OFFSET,0,&(r._l2_learn_cache_status),1)

/*******************************************************************************
 * End of 'L2_LEARN_CACHE_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  L2_LEARN_COPY_CACHE_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_LEARN_COPY_CACHE_CTRL.
 */
#define READ_L2_LEARN_COPY_CACHE_CTRLr(u,r) bcmbd_cmicx_reg_block_read(u,L2_LEARN_COPY_CACHE_CTRLr_BLKACC,1,L2_LEARN_COPY_CACHE_CTRLr_OFFSET,0,(r._l2_learn_copy_cache_ctrl), 1)
#define WRITE_L2_LEARN_COPY_CACHE_CTRLr(u,r) bcmbd_cmicx_reg_block_write(u,L2_LEARN_COPY_CACHE_CTRLr_BLKACC,1,L2_LEARN_COPY_CACHE_CTRLr_OFFSET,0,&(r._l2_learn_copy_cache_ctrl), 1)

/*******************************************************************************
 * End of 'L2_LEARN_COPY_CACHE_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  L2_USER_ENTRY
 * BLOCKS:   IPIPE
 * SIZE:     215
 */
/*
 * These macros can be used to access L2_USER_ENTRY.
 */
#define READ_L2_USER_ENTRYm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_USER_ENTRYm_BLKACC,1,L2_USER_ENTRYm_OFFSET,i,(m._l2_user_entry),7)
#define WRITE_L2_USER_ENTRYm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_USER_ENTRYm_BLKACC,1,L2_USER_ENTRYm_OFFSET,i,&(m._l2_user_entry),7)

/*******************************************************************************
 * End of 'L2_USER_ENTRYm'
 */




/*******************************************************************************
 * REGISTER:  L2_USER_ENTRY_CAM_BIST_CONFIG_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access L2_USER_ENTRY_CAM_BIST_CONFIG_1_64.
 */
#define READ_L2_USER_ENTRY_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L2_USER_ENTRY_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,L2_USER_ENTRY_CAM_BIST_CONFIG_1_64r_OFFSET,0,(r._l2_user_entry_cam_bist_config_1_64),2)
#define WRITE_L2_USER_ENTRY_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L2_USER_ENTRY_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,L2_USER_ENTRY_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._l2_user_entry_cam_bist_config_1_64),2)
#define WRITE_L2_USER_ENTRY_CAM_BIST_CONFIG_1_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L2_USER_ENTRY_CAM_BIST_CONFIG_1_64r_BLKACC,1,-1,0,L2_USER_ENTRY_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._l2_user_entry_cam_bist_config_1_64),2)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_CAM_BIST_CONFIG_1_64r'
 */




/*******************************************************************************
 * REGISTER:  L2_USER_ENTRY_CAM_BIST_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access L2_USER_ENTRY_CAM_BIST_CONFIG_64.
 */
#define READ_L2_USER_ENTRY_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L2_USER_ENTRY_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,L2_USER_ENTRY_CAM_BIST_CONFIG_64r_OFFSET,0,(r._l2_user_entry_cam_bist_config_64),2)
#define WRITE_L2_USER_ENTRY_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L2_USER_ENTRY_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,L2_USER_ENTRY_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._l2_user_entry_cam_bist_config_64),2)
#define WRITE_L2_USER_ENTRY_CAM_BIST_CONFIG_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L2_USER_ENTRY_CAM_BIST_CONFIG_64r_BLKACC,1,-1,0,L2_USER_ENTRY_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._l2_user_entry_cam_bist_config_64),2)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_CAM_BIST_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  L2_USER_ENTRY_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_USER_ENTRY_CAM_BIST_STATUS.
 */
#define READ_L2_USER_ENTRY_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L2_USER_ENTRY_CAM_BIST_STATUSr_BLKACC,1,n,0,L2_USER_ENTRY_CAM_BIST_STATUSr_OFFSET,0,(r._l2_user_entry_cam_bist_status),1)
#define WRITE_L2_USER_ENTRY_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L2_USER_ENTRY_CAM_BIST_STATUSr_BLKACC,1,n,0,L2_USER_ENTRY_CAM_BIST_STATUSr_OFFSET,0,&(r._l2_user_entry_cam_bist_status),1)
#define WRITE_L2_USER_ENTRY_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L2_USER_ENTRY_CAM_BIST_STATUSr_BLKACC,1,-1,0,L2_USER_ENTRY_CAM_BIST_STATUSr_OFFSET,0,&(r._l2_user_entry_cam_bist_status),1)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  L2_USER_ENTRY_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access L2_USER_ENTRY_CAM_DBGCTRL.
 */
#define READ_L2_USER_ENTRY_CAM_DBGCTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L2_USER_ENTRY_CAM_DBGCTRLr_BLKACC,1,n,0,L2_USER_ENTRY_CAM_DBGCTRLr_OFFSET,0,(r._l2_user_entry_cam_dbgctrl),2)
#define WRITE_L2_USER_ENTRY_CAM_DBGCTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L2_USER_ENTRY_CAM_DBGCTRLr_BLKACC,1,n,0,L2_USER_ENTRY_CAM_DBGCTRLr_OFFSET,0,&(r._l2_user_entry_cam_dbgctrl),2)
#define WRITE_L2_USER_ENTRY_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L2_USER_ENTRY_CAM_DBGCTRLr_BLKACC,1,-1,0,L2_USER_ENTRY_CAM_DBGCTRLr_OFFSET,0,&(r._l2_user_entry_cam_dbgctrl),2)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * MEMORY:  L2_USER_ENTRY_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     37
 */
/*
 * These macros can be used to access L2_USER_ENTRY_DATA_ONLY.
 */
#define READ_L2_USER_ENTRY_DATA_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_USER_ENTRY_DATA_ONLYm_BLKACC,1,L2_USER_ENTRY_DATA_ONLYm_OFFSET,i,(m._l2_user_entry_data_only),2)
#define WRITE_L2_USER_ENTRY_DATA_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_USER_ENTRY_DATA_ONLYm_BLKACC,1,L2_USER_ENTRY_DATA_ONLYm_OFFSET,i,&(m._l2_user_entry_data_only),2)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L2_USER_ENTRY_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     178
 */
/*
 * These macros can be used to access L2_USER_ENTRY_ONLY.
 */
#define READ_L2_USER_ENTRY_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,L2_USER_ENTRY_ONLYm_BLKACC,1,L2_USER_ENTRY_ONLYm_OFFSET,i,(m._l2_user_entry_only),6)
#define WRITE_L2_USER_ENTRY_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,L2_USER_ENTRY_ONLYm_BLKACC,1,L2_USER_ENTRY_ONLYm_OFFSET,i,&(m._l2_user_entry_only),6)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_LEVEL2
 * BLOCKS:   IPIPE
 * SIZE:     480
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_LEVEL2.
 */
#define READ_L3_DEFIP_ALPM_LEVEL2m(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_ALPM_LEVEL2m_BLKACC,1,L3_DEFIP_ALPM_LEVEL2m_OFFSET,i,(m._l3_defip_alpm_level2),15)
#define WRITE_L3_DEFIP_ALPM_LEVEL2m(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_ALPM_LEVEL2m_BLKACC,1,L3_DEFIP_ALPM_LEVEL2m_OFFSET,i,&(m._l3_defip_alpm_level2),15)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_LEVEL2m'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_LEVEL2_ECC
 * BLOCKS:   IPIPE
 * SIZE:     128
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_LEVEL2_ECC.
 */
#define READ_L3_DEFIP_ALPM_LEVEL2_ECCm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_ALPM_LEVEL2_ECCm_BLKACC,1,L3_DEFIP_ALPM_LEVEL2_ECCm_OFFSET,i,(m._l3_defip_alpm_level2_ecc),4)
#define WRITE_L3_DEFIP_ALPM_LEVEL2_ECCm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_ALPM_LEVEL2_ECCm_BLKACC,1,L3_DEFIP_ALPM_LEVEL2_ECCm_OFFSET,i,&(m._l3_defip_alpm_level2_ecc),4)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_LEVEL2_ECCm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_LEVEL2_HIT_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_LEVEL2_HIT_ONLY.
 */
#define READ_L3_DEFIP_ALPM_LEVEL2_HIT_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_ALPM_LEVEL2_HIT_ONLYm_BLKACC,1,L3_DEFIP_ALPM_LEVEL2_HIT_ONLYm_OFFSET,i,(m._l3_defip_alpm_level2_hit_only),1)
#define WRITE_L3_DEFIP_ALPM_LEVEL2_HIT_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_ALPM_LEVEL2_HIT_ONLYm_BLKACC,1,L3_DEFIP_ALPM_LEVEL2_HIT_ONLYm_OFFSET,i,&(m._l3_defip_alpm_level2_hit_only),1)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_LEVEL2_HIT_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_LEVEL2_SINGLE
 * BLOCKS:   IPIPE
 * SIZE:     120
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_LEVEL2_SINGLE.
 */
#define READ_L3_DEFIP_ALPM_LEVEL2_SINGLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_ALPM_LEVEL2_SINGLEm_BLKACC,1,L3_DEFIP_ALPM_LEVEL2_SINGLEm_OFFSET,i,(m._l3_defip_alpm_level2_single),4)
#define WRITE_L3_DEFIP_ALPM_LEVEL2_SINGLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_ALPM_LEVEL2_SINGLEm_BLKACC,1,L3_DEFIP_ALPM_LEVEL2_SINGLEm_OFFSET,i,&(m._l3_defip_alpm_level2_single),4)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_LEVEL2_SINGLEm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_LEVEL3
 * BLOCKS:   IPIPE
 * SIZE:     480
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_LEVEL3.
 */
#define READ_L3_DEFIP_ALPM_LEVEL3m(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_ALPM_LEVEL3m_BLKACC,1,L3_DEFIP_ALPM_LEVEL3m_OFFSET,i,(m._l3_defip_alpm_level3),15)
#define WRITE_L3_DEFIP_ALPM_LEVEL3m(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_ALPM_LEVEL3m_BLKACC,1,L3_DEFIP_ALPM_LEVEL3m_OFFSET,i,&(m._l3_defip_alpm_level3),15)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_LEVEL3m'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_LEVEL3_ECC
 * BLOCKS:   IPIPE
 * SIZE:     128
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_LEVEL3_ECC.
 */
#define READ_L3_DEFIP_ALPM_LEVEL3_ECCm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_ALPM_LEVEL3_ECCm_BLKACC,1,L3_DEFIP_ALPM_LEVEL3_ECCm_OFFSET,i,(m._l3_defip_alpm_level3_ecc),4)
#define WRITE_L3_DEFIP_ALPM_LEVEL3_ECCm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_ALPM_LEVEL3_ECCm_BLKACC,1,L3_DEFIP_ALPM_LEVEL3_ECCm_OFFSET,i,&(m._l3_defip_alpm_level3_ecc),4)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_LEVEL3_ECCm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_LEVEL3_HIT_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_LEVEL3_HIT_ONLY.
 */
#define READ_L3_DEFIP_ALPM_LEVEL3_HIT_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_ALPM_LEVEL3_HIT_ONLYm_BLKACC,1,L3_DEFIP_ALPM_LEVEL3_HIT_ONLYm_OFFSET,i,(m._l3_defip_alpm_level3_hit_only),1)
#define WRITE_L3_DEFIP_ALPM_LEVEL3_HIT_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_ALPM_LEVEL3_HIT_ONLYm_BLKACC,1,L3_DEFIP_ALPM_LEVEL3_HIT_ONLYm_OFFSET,i,&(m._l3_defip_alpm_level3_hit_only),1)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_LEVEL3_HIT_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_LEVEL3_SINGLE
 * BLOCKS:   IPIPE
 * SIZE:     120
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_LEVEL3_SINGLE.
 */
#define READ_L3_DEFIP_ALPM_LEVEL3_SINGLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_ALPM_LEVEL3_SINGLEm_BLKACC,1,L3_DEFIP_ALPM_LEVEL3_SINGLEm_OFFSET,i,(m._l3_defip_alpm_level3_single),4)
#define WRITE_L3_DEFIP_ALPM_LEVEL3_SINGLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_ALPM_LEVEL3_SINGLEm_BLKACC,1,L3_DEFIP_ALPM_LEVEL3_SINGLEm_OFFSET,i,&(m._l3_defip_alpm_level3_single),4)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_LEVEL3_SINGLEm'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_CAM_BIST_CONFIG_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access L3_DEFIP_CAM_BIST_CONFIG_1_64.
 */
#define READ_L3_DEFIP_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L3_DEFIP_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,L3_DEFIP_CAM_BIST_CONFIG_1_64r_OFFSET,0,(r._l3_defip_cam_bist_config_1_64),2)
#define WRITE_L3_DEFIP_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L3_DEFIP_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,L3_DEFIP_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._l3_defip_cam_bist_config_1_64),2)
#define WRITE_L3_DEFIP_CAM_BIST_CONFIG_1_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L3_DEFIP_CAM_BIST_CONFIG_1_64r_BLKACC,1,-1,0,L3_DEFIP_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._l3_defip_cam_bist_config_1_64),2)

/*******************************************************************************
 * End of 'L3_DEFIP_CAM_BIST_CONFIG_1_64r'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_CAM_BIST_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access L3_DEFIP_CAM_BIST_CONFIG_64.
 */
#define READ_L3_DEFIP_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L3_DEFIP_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,L3_DEFIP_CAM_BIST_CONFIG_64r_OFFSET,0,(r._l3_defip_cam_bist_config_64),2)
#define WRITE_L3_DEFIP_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L3_DEFIP_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,L3_DEFIP_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._l3_defip_cam_bist_config_64),2)
#define WRITE_L3_DEFIP_CAM_BIST_CONFIG_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L3_DEFIP_CAM_BIST_CONFIG_64r_BLKACC,1,-1,0,L3_DEFIP_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._l3_defip_cam_bist_config_64),2)

/*******************************************************************************
 * End of 'L3_DEFIP_CAM_BIST_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_CAM_BIST_STATUS.
 */
#define READ_L3_DEFIP_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L3_DEFIP_CAM_BIST_STATUSr_BLKACC,1,n,0,L3_DEFIP_CAM_BIST_STATUSr_OFFSET,0,(r._l3_defip_cam_bist_status),1)
#define WRITE_L3_DEFIP_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L3_DEFIP_CAM_BIST_STATUSr_BLKACC,1,n,0,L3_DEFIP_CAM_BIST_STATUSr_OFFSET,0,&(r._l3_defip_cam_bist_status),1)
#define WRITE_L3_DEFIP_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L3_DEFIP_CAM_BIST_STATUSr_BLKACC,1,-1,0,L3_DEFIP_CAM_BIST_STATUSr_OFFSET,0,&(r._l3_defip_cam_bist_status),1)

/*******************************************************************************
 * End of 'L3_DEFIP_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access L3_DEFIP_CAM_DBGCTRL.
 */
#define READ_L3_DEFIP_CAM_DBGCTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L3_DEFIP_CAM_DBGCTRLr_BLKACC,1,n,0,L3_DEFIP_CAM_DBGCTRLr_OFFSET,0,(r._l3_defip_cam_dbgctrl),2)
#define WRITE_L3_DEFIP_CAM_DBGCTRLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L3_DEFIP_CAM_DBGCTRLr_BLKACC,1,n,0,L3_DEFIP_CAM_DBGCTRLr_OFFSET,0,&(r._l3_defip_cam_dbgctrl),2)
#define WRITE_L3_DEFIP_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L3_DEFIP_CAM_DBGCTRLr_BLKACC,1,-1,0,L3_DEFIP_CAM_DBGCTRLr_OFFSET,0,&(r._l3_defip_cam_dbgctrl),2)

/*******************************************************************************
 * End of 'L3_DEFIP_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_DATA_LEVEL1
 * BLOCKS:   IPIPE
 * SIZE:     214
 */
/*
 * These macros can be used to access L3_DEFIP_DATA_LEVEL1.
 */
#define READ_L3_DEFIP_DATA_LEVEL1m(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_DATA_LEVEL1m_BLKACC,1,L3_DEFIP_DATA_LEVEL1m_OFFSET,i,(m._l3_defip_data_level1),7)
#define WRITE_L3_DEFIP_DATA_LEVEL1m(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_DATA_LEVEL1m_BLKACC,1,L3_DEFIP_DATA_LEVEL1m_OFFSET,i,&(m._l3_defip_data_level1),7)

/*******************************************************************************
 * End of 'L3_DEFIP_DATA_LEVEL1m'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_DATA_LEVEL1_WIDE
 * BLOCKS:   IPIPE
 * SIZE:     214
 */
/*
 * These macros can be used to access L3_DEFIP_DATA_LEVEL1_WIDE.
 */
#define READ_L3_DEFIP_DATA_LEVEL1_WIDEm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_DATA_LEVEL1_WIDEm_BLKACC,1,L3_DEFIP_DATA_LEVEL1_WIDEm_OFFSET,i,(m._l3_defip_data_level1_wide),7)
#define WRITE_L3_DEFIP_DATA_LEVEL1_WIDEm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_DATA_LEVEL1_WIDEm_BLKACC,1,L3_DEFIP_DATA_LEVEL1_WIDEm_OFFSET,i,&(m._l3_defip_data_level1_wide),7)

/*******************************************************************************
 * End of 'L3_DEFIP_DATA_LEVEL1_WIDEm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_LEVEL1
 * BLOCKS:   IPIPE
 * SIZE:     424
 */
/*
 * These macros can be used to access L3_DEFIP_LEVEL1.
 */
#define READ_L3_DEFIP_LEVEL1m(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_LEVEL1m_BLKACC,1,L3_DEFIP_LEVEL1m_OFFSET,i,(m._l3_defip_level1),14)
#define WRITE_L3_DEFIP_LEVEL1m(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_LEVEL1m_BLKACC,1,L3_DEFIP_LEVEL1m_OFFSET,i,&(m._l3_defip_level1),14)

/*******************************************************************************
 * End of 'L3_DEFIP_LEVEL1m'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_LEVEL1_HIT_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access L3_DEFIP_LEVEL1_HIT_ONLY.
 */
#define READ_L3_DEFIP_LEVEL1_HIT_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_LEVEL1_HIT_ONLYm_BLKACC,1,L3_DEFIP_LEVEL1_HIT_ONLYm_OFFSET,i,(m._l3_defip_level1_hit_only),1)
#define WRITE_L3_DEFIP_LEVEL1_HIT_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_LEVEL1_HIT_ONLYm_BLKACC,1,L3_DEFIP_LEVEL1_HIT_ONLYm_OFFSET,i,&(m._l3_defip_level1_hit_only),1)

/*******************************************************************************
 * End of 'L3_DEFIP_LEVEL1_HIT_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_LEVEL1_WIDE
 * BLOCKS:   IPIPE
 * SIZE:     538
 */
/*
 * These macros can be used to access L3_DEFIP_LEVEL1_WIDE.
 */
#define READ_L3_DEFIP_LEVEL1_WIDEm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_LEVEL1_WIDEm_BLKACC,1,L3_DEFIP_LEVEL1_WIDEm_OFFSET,i,(m._l3_defip_level1_wide),17)
#define WRITE_L3_DEFIP_LEVEL1_WIDEm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_LEVEL1_WIDEm_BLKACC,1,L3_DEFIP_LEVEL1_WIDEm_OFFSET,i,&(m._l3_defip_level1_wide),17)

/*******************************************************************************
 * End of 'L3_DEFIP_LEVEL1_WIDEm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_PAIR_LEVEL1
 * BLOCKS:   IPIPE
 * SIZE:     634
 */
/*
 * These macros can be used to access L3_DEFIP_PAIR_LEVEL1.
 */
#define READ_L3_DEFIP_PAIR_LEVEL1m(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_PAIR_LEVEL1m_BLKACC,1,L3_DEFIP_PAIR_LEVEL1m_OFFSET,i,(m._l3_defip_pair_level1),20)
#define WRITE_L3_DEFIP_PAIR_LEVEL1m(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_PAIR_LEVEL1m_BLKACC,1,L3_DEFIP_PAIR_LEVEL1m_OFFSET,i,&(m._l3_defip_pair_level1),20)

/*******************************************************************************
 * End of 'L3_DEFIP_PAIR_LEVEL1m'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_PAIR_LEVEL1_WIDE
 * BLOCKS:   IPIPE
 * SIZE:     862
 */
/*
 * These macros can be used to access L3_DEFIP_PAIR_LEVEL1_WIDE.
 */
#define READ_L3_DEFIP_PAIR_LEVEL1_WIDEm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_PAIR_LEVEL1_WIDEm_BLKACC,1,L3_DEFIP_PAIR_LEVEL1_WIDEm_OFFSET,i,(m._l3_defip_pair_level1_wide),27)
#define WRITE_L3_DEFIP_PAIR_LEVEL1_WIDEm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_PAIR_LEVEL1_WIDEm_BLKACC,1,L3_DEFIP_PAIR_LEVEL1_WIDEm_OFFSET,i,&(m._l3_defip_pair_level1_wide),27)

/*******************************************************************************
 * End of 'L3_DEFIP_PAIR_LEVEL1_WIDEm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_TCAM_LEVEL1
 * BLOCKS:   IPIPE
 * SIZE:     210
 */
/*
 * These macros can be used to access L3_DEFIP_TCAM_LEVEL1.
 */
#define READ_L3_DEFIP_TCAM_LEVEL1m(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_TCAM_LEVEL1m_BLKACC,1,L3_DEFIP_TCAM_LEVEL1m_OFFSET,i,(m._l3_defip_tcam_level1),7)
#define WRITE_L3_DEFIP_TCAM_LEVEL1m(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_TCAM_LEVEL1m_BLKACC,1,L3_DEFIP_TCAM_LEVEL1m_OFFSET,i,&(m._l3_defip_tcam_level1),7)

/*******************************************************************************
 * End of 'L3_DEFIP_TCAM_LEVEL1m'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_TCAM_LEVEL1_WIDE
 * BLOCKS:   IPIPE
 * SIZE:     324
 */
/*
 * These macros can be used to access L3_DEFIP_TCAM_LEVEL1_WIDE.
 */
#define READ_L3_DEFIP_TCAM_LEVEL1_WIDEm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_DEFIP_TCAM_LEVEL1_WIDEm_BLKACC,1,L3_DEFIP_TCAM_LEVEL1_WIDEm_OFFSET,i,(m._l3_defip_tcam_level1_wide),11)
#define WRITE_L3_DEFIP_TCAM_LEVEL1_WIDEm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_DEFIP_TCAM_LEVEL1_WIDEm_BLKACC,1,L3_DEFIP_TCAM_LEVEL1_WIDEm_OFFSET,i,&(m._l3_defip_tcam_level1_wide),11)

/*******************************************************************************
 * End of 'L3_DEFIP_TCAM_LEVEL1_WIDEm'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_WIDE_CAM_BIST_CONFIG_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access L3_DEFIP_WIDE_CAM_BIST_CONFIG_1_64.
 */
#define READ_L3_DEFIP_WIDE_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L3_DEFIP_WIDE_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,L3_DEFIP_WIDE_CAM_BIST_CONFIG_1_64r_OFFSET,0,(r._l3_defip_wide_cam_bist_config_1_64),2)
#define WRITE_L3_DEFIP_WIDE_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L3_DEFIP_WIDE_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,L3_DEFIP_WIDE_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._l3_defip_wide_cam_bist_config_1_64),2)
#define WRITE_L3_DEFIP_WIDE_CAM_BIST_CONFIG_1_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L3_DEFIP_WIDE_CAM_BIST_CONFIG_1_64r_BLKACC,1,-1,0,L3_DEFIP_WIDE_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._l3_defip_wide_cam_bist_config_1_64),2)

/*******************************************************************************
 * End of 'L3_DEFIP_WIDE_CAM_BIST_CONFIG_1_64r'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_WIDE_CAM_BIST_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access L3_DEFIP_WIDE_CAM_BIST_CONFIG_64.
 */
#define READ_L3_DEFIP_WIDE_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L3_DEFIP_WIDE_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,L3_DEFIP_WIDE_CAM_BIST_CONFIG_64r_OFFSET,0,(r._l3_defip_wide_cam_bist_config_64),2)
#define WRITE_L3_DEFIP_WIDE_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L3_DEFIP_WIDE_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,L3_DEFIP_WIDE_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._l3_defip_wide_cam_bist_config_64),2)
#define WRITE_L3_DEFIP_WIDE_CAM_BIST_CONFIG_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L3_DEFIP_WIDE_CAM_BIST_CONFIG_64r_BLKACC,1,-1,0,L3_DEFIP_WIDE_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._l3_defip_wide_cam_bist_config_64),2)

/*******************************************************************************
 * End of 'L3_DEFIP_WIDE_CAM_BIST_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_WIDE_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_WIDE_CAM_BIST_STATUS.
 */
#define READ_L3_DEFIP_WIDE_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L3_DEFIP_WIDE_CAM_BIST_STATUSr_BLKACC,1,n,0,L3_DEFIP_WIDE_CAM_BIST_STATUSr_OFFSET,0,(r._l3_defip_wide_cam_bist_status),1)
#define WRITE_L3_DEFIP_WIDE_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L3_DEFIP_WIDE_CAM_BIST_STATUSr_BLKACC,1,n,0,L3_DEFIP_WIDE_CAM_BIST_STATUSr_OFFSET,0,&(r._l3_defip_wide_cam_bist_status),1)
#define WRITE_L3_DEFIP_WIDE_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L3_DEFIP_WIDE_CAM_BIST_STATUSr_BLKACC,1,-1,0,L3_DEFIP_WIDE_CAM_BIST_STATUSr_OFFSET,0,&(r._l3_defip_wide_cam_bist_status),1)

/*******************************************************************************
 * End of 'L3_DEFIP_WIDE_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  L3_ECMP
 * BLOCKS:   IPIPE
 * SIZE:     69
 */
/*
 * These macros can be used to access L3_ECMP.
 */
#define READ_L3_ECMPm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_ECMPm_BLKACC,1,L3_ECMPm_OFFSET,i,(m._l3_ecmp),3)
#define WRITE_L3_ECMPm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_ECMPm_BLKACC,1,L3_ECMPm_OFFSET,i,&(m._l3_ecmp),3)

/*******************************************************************************
 * End of 'L3_ECMPm'
 */




/*******************************************************************************
 * MEMORY:  L3_ECMP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     42
 */
/*
 * These macros can be used to access L3_ECMP_COUNT.
 */
#define READ_L3_ECMP_COUNTm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_ECMP_COUNTm_BLKACC,1,L3_ECMP_COUNTm_OFFSET,i,(m._l3_ecmp_count),2)
#define WRITE_L3_ECMP_COUNTm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_ECMP_COUNTm_BLKACC,1,L3_ECMP_COUNTm_OFFSET,i,&(m._l3_ecmp_count),2)

/*******************************************************************************
 * End of 'L3_ECMP_COUNTm'
 */




/*******************************************************************************
 * REGISTER:  L3_ECMP_GROUP_FLEX_CTR_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_ECMP_GROUP_FLEX_CTR_CONTROL.
 */
#define READ_L3_ECMP_GROUP_FLEX_CTR_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,L3_ECMP_GROUP_FLEX_CTR_CONTROLr_BLKACC,1,L3_ECMP_GROUP_FLEX_CTR_CONTROLr_OFFSET,0,(r._l3_ecmp_group_flex_ctr_control), 1)
#define WRITE_L3_ECMP_GROUP_FLEX_CTR_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,L3_ECMP_GROUP_FLEX_CTR_CONTROLr_BLKACC,1,L3_ECMP_GROUP_FLEX_CTR_CONTROLr_OFFSET,0,&(r._l3_ecmp_group_flex_ctr_control), 1)

/*******************************************************************************
 * End of 'L3_ECMP_GROUP_FLEX_CTR_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  L3_IIF
 * BLOCKS:   IPIPE
 * SIZE:     80
 */
/*
 * These macros can be used to access L3_IIF.
 */
#define READ_L3_IIFm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_IIFm_BLKACC,1,L3_IIFm_OFFSET,i,(m._l3_iif),3)
#define WRITE_L3_IIFm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_IIFm_BLKACC,1,L3_IIFm_OFFSET,i,&(m._l3_iif),3)

/*******************************************************************************
 * End of 'L3_IIFm'
 */




/*******************************************************************************
 * MEMORY:  L3_IIF_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     30
 */
/*
 * These macros can be used to access L3_IIF_PROFILE.
 */
#define READ_L3_IIF_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_IIF_PROFILEm_BLKACC,1,L3_IIF_PROFILEm_OFFSET,i,(m._l3_iif_profile),1)
#define WRITE_L3_IIF_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_IIF_PROFILEm_BLKACC,1,L3_IIF_PROFILEm_OFFSET,i,&(m._l3_iif_profile),1)

/*******************************************************************************
 * End of 'L3_IIF_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  L3_IPMC
 * BLOCKS:   IPIPE
 * SIZE:     558
 */
/*
 * These macros can be used to access L3_IPMC.
 */
#define READ_L3_IPMCm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_IPMCm_BLKACC,1,L3_IPMCm_OFFSET,i,(m._l3_ipmc),18)
#define WRITE_L3_IPMCm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_IPMCm_BLKACC,1,L3_IPMCm_OFFSET,i,&(m._l3_ipmc),18)

/*******************************************************************************
 * End of 'L3_IPMCm'
 */




/*******************************************************************************
 * MEMORY:  L3_MTU_VALUES
 * BLOCKS:   IPIPE
 * SIZE:     20
 */
/*
 * These macros can be used to access L3_MTU_VALUES.
 */
#define READ_L3_MTU_VALUESm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_MTU_VALUESm_BLKACC,1,L3_MTU_VALUESm_OFFSET,i,(m._l3_mtu_values),1)
#define WRITE_L3_MTU_VALUESm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_MTU_VALUESm_BLKACC,1,L3_MTU_VALUESm_OFFSET,i,&(m._l3_mtu_values),1)

/*******************************************************************************
 * End of 'L3_MTU_VALUESm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_ACTION_TABLE_A
 * BLOCKS:   IPIPE
 * SIZE:     72
 */
/*
 * These macros can be used to access L3_TUNNEL_ACTION_TABLE_A.
 */
#define READ_L3_TUNNEL_ACTION_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_ACTION_TABLE_Am_BLKACC,1,L3_TUNNEL_ACTION_TABLE_Am_OFFSET,i,(m._l3_tunnel_action_table_a),3)
#define WRITE_L3_TUNNEL_ACTION_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_ACTION_TABLE_Am_BLKACC,1,L3_TUNNEL_ACTION_TABLE_Am_OFFSET,i,&(m._l3_tunnel_action_table_a),3)

/*******************************************************************************
 * End of 'L3_TUNNEL_ACTION_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_ACTION_TABLE_B
 * BLOCKS:   IPIPE
 * SIZE:     72
 */
/*
 * These macros can be used to access L3_TUNNEL_ACTION_TABLE_B.
 */
#define READ_L3_TUNNEL_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_ACTION_TABLE_Bm_BLKACC,1,L3_TUNNEL_ACTION_TABLE_Bm_OFFSET,i,(m._l3_tunnel_action_table_b),3)
#define WRITE_L3_TUNNEL_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_ACTION_TABLE_Bm_BLKACC,1,L3_TUNNEL_ACTION_TABLE_Bm_OFFSET,i,&(m._l3_tunnel_action_table_b),3)

/*******************************************************************************
 * End of 'L3_TUNNEL_ACTION_TABLE_Bm'
 */




/*******************************************************************************
 * REGISTER:  L3_TUNNEL_CAM_BIST_CONFIG_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access L3_TUNNEL_CAM_BIST_CONFIG_1_64.
 */
#define READ_L3_TUNNEL_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L3_TUNNEL_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,L3_TUNNEL_CAM_BIST_CONFIG_1_64r_OFFSET,0,(r._l3_tunnel_cam_bist_config_1_64),2)
#define WRITE_L3_TUNNEL_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L3_TUNNEL_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,L3_TUNNEL_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._l3_tunnel_cam_bist_config_1_64),2)
#define WRITE_L3_TUNNEL_CAM_BIST_CONFIG_1_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L3_TUNNEL_CAM_BIST_CONFIG_1_64r_BLKACC,1,-1,0,L3_TUNNEL_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._l3_tunnel_cam_bist_config_1_64),2)

/*******************************************************************************
 * End of 'L3_TUNNEL_CAM_BIST_CONFIG_1_64r'
 */




/*******************************************************************************
 * REGISTER:  L3_TUNNEL_CAM_BIST_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access L3_TUNNEL_CAM_BIST_CONFIG_64.
 */
#define READ_L3_TUNNEL_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L3_TUNNEL_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,L3_TUNNEL_CAM_BIST_CONFIG_64r_OFFSET,0,(r._l3_tunnel_cam_bist_config_64),2)
#define WRITE_L3_TUNNEL_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L3_TUNNEL_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,L3_TUNNEL_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._l3_tunnel_cam_bist_config_64),2)
#define WRITE_L3_TUNNEL_CAM_BIST_CONFIG_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L3_TUNNEL_CAM_BIST_CONFIG_64r_BLKACC,1,-1,0,L3_TUNNEL_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._l3_tunnel_cam_bist_config_64),2)

/*******************************************************************************
 * End of 'L3_TUNNEL_CAM_BIST_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  L3_TUNNEL_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_TUNNEL_CAM_BIST_STATUS.
 */
#define READ_L3_TUNNEL_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L3_TUNNEL_CAM_BIST_STATUSr_BLKACC,1,n,0,L3_TUNNEL_CAM_BIST_STATUSr_OFFSET,0,(r._l3_tunnel_cam_bist_status),1)
#define WRITE_L3_TUNNEL_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L3_TUNNEL_CAM_BIST_STATUSr_BLKACC,1,n,0,L3_TUNNEL_CAM_BIST_STATUSr_OFFSET,0,&(r._l3_tunnel_cam_bist_status),1)
#define WRITE_L3_TUNNEL_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L3_TUNNEL_CAM_BIST_STATUSr_BLKACC,1,-1,0,L3_TUNNEL_CAM_BIST_STATUSr_OFFSET,0,&(r._l3_tunnel_cam_bist_status),1)

/*******************************************************************************
 * End of 'L3_TUNNEL_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  L3_TUNNEL_CAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access L3_TUNNEL_CAM_CONTROL.
 */
#define READ_L3_TUNNEL_CAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,L3_TUNNEL_CAM_CONTROLr_BLKACC,1,n,0,L3_TUNNEL_CAM_CONTROLr_OFFSET,0,(r._l3_tunnel_cam_control),2)
#define WRITE_L3_TUNNEL_CAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,L3_TUNNEL_CAM_CONTROLr_BLKACC,1,n,0,L3_TUNNEL_CAM_CONTROLr_OFFSET,0,&(r._l3_tunnel_cam_control),2)
#define WRITE_L3_TUNNEL_CAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,L3_TUNNEL_CAM_CONTROLr_BLKACC,1,-1,0,L3_TUNNEL_CAM_CONTROLr_OFFSET,0,&(r._l3_tunnel_cam_control),2)

/*******************************************************************************
 * End of 'L3_TUNNEL_CAM_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_DOUBLE
 * BLOCKS:   IPIPE
 * SIZE:     192
 */
/*
 * These macros can be used to access L3_TUNNEL_DOUBLE.
 */
#define READ_L3_TUNNEL_DOUBLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_DOUBLEm_BLKACC,1,L3_TUNNEL_DOUBLEm_OFFSET,i,(m._l3_tunnel_double),6)
#define WRITE_L3_TUNNEL_DOUBLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_DOUBLEm_BLKACC,1,L3_TUNNEL_DOUBLEm_OFFSET,i,&(m._l3_tunnel_double),6)

/*******************************************************************************
 * End of 'L3_TUNNEL_DOUBLEm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_ECC
 * BLOCKS:   IPIPE
 * SIZE:     104
 */
/*
 * These macros can be used to access L3_TUNNEL_ECC.
 */
#define READ_L3_TUNNEL_ECCm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_ECCm_BLKACC,1,L3_TUNNEL_ECCm_OFFSET,i,(m._l3_tunnel_ecc),4)
#define WRITE_L3_TUNNEL_ECCm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_ECCm_BLKACC,1,L3_TUNNEL_ECCm_OFFSET,i,&(m._l3_tunnel_ecc),4)

/*******************************************************************************
 * End of 'L3_TUNNEL_ECCm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access L3_TUNNEL_HASH_CONTROL.
 */
#define READ_L3_TUNNEL_HASH_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_HASH_CONTROLm_BLKACC,1,L3_TUNNEL_HASH_CONTROLm_OFFSET,i,(m._l3_tunnel_hash_control),2)
#define WRITE_L3_TUNNEL_HASH_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_HASH_CONTROLm_BLKACC,1,L3_TUNNEL_HASH_CONTROLm_OFFSET,i,&(m._l3_tunnel_hash_control),2)

/*******************************************************************************
 * End of 'L3_TUNNEL_HASH_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_HT_DEBUG_CMD
 * BLOCKS:   IPIPE
 * SIZE:     3
 */
/*
 * These macros can be used to access L3_TUNNEL_HT_DEBUG_CMD.
 */
#define READ_L3_TUNNEL_HT_DEBUG_CMDm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_HT_DEBUG_CMDm_BLKACC,1,L3_TUNNEL_HT_DEBUG_CMDm_OFFSET,i,(m._l3_tunnel_ht_debug_cmd),1)
#define WRITE_L3_TUNNEL_HT_DEBUG_CMDm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_HT_DEBUG_CMDm_BLKACC,1,L3_TUNNEL_HT_DEBUG_CMDm_OFFSET,i,&(m._l3_tunnel_ht_debug_cmd),1)

/*******************************************************************************
 * End of 'L3_TUNNEL_HT_DEBUG_CMDm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_HT_DEBUG_KEY
 * BLOCKS:   IPIPE
 * SIZE:     480
 */
/*
 * These macros can be used to access L3_TUNNEL_HT_DEBUG_KEY.
 */
#define READ_L3_TUNNEL_HT_DEBUG_KEYm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_HT_DEBUG_KEYm_BLKACC,1,L3_TUNNEL_HT_DEBUG_KEYm_OFFSET,i,(m._l3_tunnel_ht_debug_key),15)
#define WRITE_L3_TUNNEL_HT_DEBUG_KEYm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_HT_DEBUG_KEYm_BLKACC,1,L3_TUNNEL_HT_DEBUG_KEYm_OFFSET,i,&(m._l3_tunnel_ht_debug_key),15)

/*******************************************************************************
 * End of 'L3_TUNNEL_HT_DEBUG_KEYm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_HT_DEBUG_RESULT
 * BLOCKS:   IPIPE
 * SIZE:     139
 */
/*
 * These macros can be used to access L3_TUNNEL_HT_DEBUG_RESULT.
 */
#define READ_L3_TUNNEL_HT_DEBUG_RESULTm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_HT_DEBUG_RESULTm_BLKACC,1,L3_TUNNEL_HT_DEBUG_RESULTm_OFFSET,i,(m._l3_tunnel_ht_debug_result),5)
#define WRITE_L3_TUNNEL_HT_DEBUG_RESULTm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_HT_DEBUG_RESULTm_BLKACC,1,L3_TUNNEL_HT_DEBUG_RESULTm_OFFSET,i,&(m._l3_tunnel_ht_debug_result),5)

/*******************************************************************************
 * End of 'L3_TUNNEL_HT_DEBUG_RESULTm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_KEY_ATTRIBUTES
 * BLOCKS:   IPIPE
 * SIZE:     328
 */
/*
 * These macros can be used to access L3_TUNNEL_KEY_ATTRIBUTES.
 */
#define READ_L3_TUNNEL_KEY_ATTRIBUTESm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_KEY_ATTRIBUTESm_BLKACC,1,L3_TUNNEL_KEY_ATTRIBUTESm_OFFSET,i,(m._l3_tunnel_key_attributes),11)
#define WRITE_L3_TUNNEL_KEY_ATTRIBUTESm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_KEY_ATTRIBUTESm_BLKACC,1,L3_TUNNEL_KEY_ATTRIBUTESm_OFFSET,i,&(m._l3_tunnel_key_attributes),11)

/*******************************************************************************
 * End of 'L3_TUNNEL_KEY_ATTRIBUTESm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_KEY_BUFFER
 * BLOCKS:   IPIPE
 * SIZE:     384
 */
/*
 * These macros can be used to access L3_TUNNEL_KEY_BUFFER.
 */
#define READ_L3_TUNNEL_KEY_BUFFERm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,L3_TUNNEL_KEY_BUFFERm_BLKACC,1,n,0,L3_TUNNEL_KEY_BUFFERm_OFFSET,i,(m._l3_tunnel_key_buffer),12)
#define WRITE_L3_TUNNEL_KEY_BUFFERm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,L3_TUNNEL_KEY_BUFFERm_BLKACC,1,n,0,L3_TUNNEL_KEY_BUFFERm_OFFSET,i,&(m._l3_tunnel_key_buffer),12)
#define WRITE_L3_TUNNEL_KEY_BUFFERm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,L3_TUNNEL_KEY_BUFFERm_BLKACC,1,-1,0,L3_TUNNEL_KEY_BUFFERm_OFFSET,i,&(m._l3_tunnel_key_buffer),12)

/*******************************************************************************
 * End of 'L3_TUNNEL_KEY_BUFFERm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_PAIR_TCAM
 * BLOCKS:   IPIPE
 * SIZE:     793
 */
/*
 * These macros can be used to access L3_TUNNEL_PAIR_TCAM.
 */
#define READ_L3_TUNNEL_PAIR_TCAMm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_PAIR_TCAMm_BLKACC,1,L3_TUNNEL_PAIR_TCAMm_OFFSET,i,(m._l3_tunnel_pair_tcam),25)
#define WRITE_L3_TUNNEL_PAIR_TCAMm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_PAIR_TCAMm_BLKACC,1,L3_TUNNEL_PAIR_TCAMm_OFFSET,i,&(m._l3_tunnel_pair_tcam),25)

/*******************************************************************************
 * End of 'L3_TUNNEL_PAIR_TCAMm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_QUAD
 * BLOCKS:   IPIPE
 * SIZE:     384
 */
/*
 * These macros can be used to access L3_TUNNEL_QUAD.
 */
#define READ_L3_TUNNEL_QUADm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_QUADm_BLKACC,1,L3_TUNNEL_QUADm_OFFSET,i,(m._l3_tunnel_quad),12)
#define WRITE_L3_TUNNEL_QUADm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_QUADm_BLKACC,1,L3_TUNNEL_QUADm_OFFSET,i,&(m._l3_tunnel_quad),12)

/*******************************************************************************
 * End of 'L3_TUNNEL_QUADm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_REMAP_TABLE_A
 * BLOCKS:   IPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access L3_TUNNEL_REMAP_TABLE_A.
 */
#define READ_L3_TUNNEL_REMAP_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_REMAP_TABLE_Am_BLKACC,1,L3_TUNNEL_REMAP_TABLE_Am_OFFSET,i,(m._l3_tunnel_remap_table_a),1)
#define WRITE_L3_TUNNEL_REMAP_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_REMAP_TABLE_Am_BLKACC,1,L3_TUNNEL_REMAP_TABLE_Am_OFFSET,i,&(m._l3_tunnel_remap_table_a),1)

/*******************************************************************************
 * End of 'L3_TUNNEL_REMAP_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_REMAP_TABLE_B
 * BLOCKS:   IPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access L3_TUNNEL_REMAP_TABLE_B.
 */
#define READ_L3_TUNNEL_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_REMAP_TABLE_Bm_BLKACC,1,L3_TUNNEL_REMAP_TABLE_Bm_OFFSET,i,(m._l3_tunnel_remap_table_b),1)
#define WRITE_L3_TUNNEL_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_REMAP_TABLE_Bm_BLKACC,1,L3_TUNNEL_REMAP_TABLE_Bm_OFFSET,i,&(m._l3_tunnel_remap_table_b),1)

/*******************************************************************************
 * End of 'L3_TUNNEL_REMAP_TABLE_Bm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_SINGLE
 * BLOCKS:   IPIPE
 * SIZE:     96
 */
/*
 * These macros can be used to access L3_TUNNEL_SINGLE.
 */
#define READ_L3_TUNNEL_SINGLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_SINGLEm_BLKACC,1,L3_TUNNEL_SINGLEm_OFFSET,i,(m._l3_tunnel_single),3)
#define WRITE_L3_TUNNEL_SINGLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_SINGLEm_BLKACC,1,L3_TUNNEL_SINGLEm_OFFSET,i,&(m._l3_tunnel_single),3)

/*******************************************************************************
 * End of 'L3_TUNNEL_SINGLEm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_TCAM
 * BLOCKS:   IPIPE
 * SIZE:     469
 */
/*
 * These macros can be used to access L3_TUNNEL_TCAM.
 */
#define READ_L3_TUNNEL_TCAMm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_TCAMm_BLKACC,1,L3_TUNNEL_TCAMm_OFFSET,i,(m._l3_tunnel_tcam),15)
#define WRITE_L3_TUNNEL_TCAMm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_TCAMm_BLKACC,1,L3_TUNNEL_TCAMm_OFFSET,i,&(m._l3_tunnel_tcam),15)

/*******************************************************************************
 * End of 'L3_TUNNEL_TCAMm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_TCAM_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     145
 */
/*
 * These macros can be used to access L3_TUNNEL_TCAM_DATA_ONLY.
 */
#define READ_L3_TUNNEL_TCAM_DATA_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_TCAM_DATA_ONLYm_BLKACC,1,L3_TUNNEL_TCAM_DATA_ONLYm_OFFSET,i,(m._l3_tunnel_tcam_data_only),5)
#define WRITE_L3_TUNNEL_TCAM_DATA_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_TCAM_DATA_ONLYm_BLKACC,1,L3_TUNNEL_TCAM_DATA_ONLYm_OFFSET,i,&(m._l3_tunnel_tcam_data_only),5)

/*******************************************************************************
 * End of 'L3_TUNNEL_TCAM_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_TCAM_KEY_BUFFER
 * BLOCKS:   IPIPE
 * SIZE:     304
 */
/*
 * These macros can be used to access L3_TUNNEL_TCAM_KEY_BUFFER.
 */
#define READ_L3_TUNNEL_TCAM_KEY_BUFFERm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,L3_TUNNEL_TCAM_KEY_BUFFERm_BLKACC,1,n,0,L3_TUNNEL_TCAM_KEY_BUFFERm_OFFSET,i,(m._l3_tunnel_tcam_key_buffer),10)
#define WRITE_L3_TUNNEL_TCAM_KEY_BUFFERm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,L3_TUNNEL_TCAM_KEY_BUFFERm_BLKACC,1,n,0,L3_TUNNEL_TCAM_KEY_BUFFERm_OFFSET,i,&(m._l3_tunnel_tcam_key_buffer),10)
#define WRITE_L3_TUNNEL_TCAM_KEY_BUFFERm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,L3_TUNNEL_TCAM_KEY_BUFFERm_BLKACC,1,-1,0,L3_TUNNEL_TCAM_KEY_BUFFERm_OFFSET,i,&(m._l3_tunnel_tcam_key_buffer),10)

/*******************************************************************************
 * End of 'L3_TUNNEL_TCAM_KEY_BUFFERm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_TCAM_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     324
 */
/*
 * These macros can be used to access L3_TUNNEL_TCAM_ONLY.
 */
#define READ_L3_TUNNEL_TCAM_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,L3_TUNNEL_TCAM_ONLYm_BLKACC,1,L3_TUNNEL_TCAM_ONLYm_OFFSET,i,(m._l3_tunnel_tcam_only),11)
#define WRITE_L3_TUNNEL_TCAM_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,L3_TUNNEL_TCAM_ONLYm_BLKACC,1,L3_TUNNEL_TCAM_ONLYm_OFFSET,i,&(m._l3_tunnel_tcam_only),11)

/*******************************************************************************
 * End of 'L3_TUNNEL_TCAM_ONLYm'
 */




/*******************************************************************************
 * SWFORMAT:  L3_TUNNEL_TCAM_SW_KEY
 * BLOCKS:   IPIPE
 * SIZE:     76
 */
/*******************************************************************************
 * End of 'L3_TUNNEL_TCAM_SW_KEY'
 */




/*******************************************************************************
 * REGISTER:  LEARN_AT_EOP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access LEARN_AT_EOP.
 */
#define READ_LEARN_AT_EOPr(u,r) bcmbd_cmicx_reg_block_read(u,LEARN_AT_EOPr_BLKACC,1,LEARN_AT_EOPr_OFFSET,0,(r._learn_at_eop), 1)
#define WRITE_LEARN_AT_EOPr(u,r) bcmbd_cmicx_reg_block_write(u,LEARN_AT_EOPr_BLKACC,1,LEARN_AT_EOPr_OFFSET,0,&(r._learn_at_eop), 1)

/*******************************************************************************
 * End of 'LEARN_AT_EOPr'
 */




/*******************************************************************************
 * MEMORY:  LINK_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access LINK_STATUS.
 */
#define READ_LINK_STATUSm(u,i,m) bcmbd_cmicx_mem_block_read(u,LINK_STATUSm_BLKACC,1,LINK_STATUSm_OFFSET,i,(m._link_status),9)
#define WRITE_LINK_STATUSm(u,i,m) bcmbd_cmicx_mem_block_write(u,LINK_STATUSm_BLKACC,1,LINK_STATUSm_OFFSET,i,&(m._link_status),9)

/*******************************************************************************
 * End of 'LINK_STATUSm'
 */




/*******************************************************************************
 * MEMORY:  LPM_IP_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     190
 */
/*
 * These macros can be used to access LPM_IP_CONTROL.
 */
#define READ_LPM_IP_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,LPM_IP_CONTROLm_BLKACC,1,LPM_IP_CONTROLm_OFFSET,i,(m._lpm_ip_control),6)
#define WRITE_LPM_IP_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,LPM_IP_CONTROLm_BLKACC,1,LPM_IP_CONTROLm_OFFSET,i,&(m._lpm_ip_control),6)

/*******************************************************************************
 * End of 'LPM_IP_CONTROLm'
 */




/*******************************************************************************
 * REGISTER:  LPM_LANE_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access LPM_LANE_CTRL.
 */
#define READ_LPM_LANE_CTRLr(u,r) bcmbd_cmicx_reg_block_read(u,LPM_LANE_CTRLr_BLKACC,1,LPM_LANE_CTRLr_OFFSET,0,(r._lpm_lane_ctrl), 1)
#define WRITE_LPM_LANE_CTRLr(u,r) bcmbd_cmicx_reg_block_write(u,LPM_LANE_CTRLr_BLKACC,1,LPM_LANE_CTRLr_OFFSET,0,&(r._lpm_lane_ctrl), 1)

/*******************************************************************************
 * End of 'LPM_LANE_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  LPM_UNIFIED_KEY_BUFFER_0
 * BLOCKS:   IPIPE
 * SIZE:     291
 */
/*
 * These macros can be used to access LPM_UNIFIED_KEY_BUFFER_0.
 */
#define READ_LPM_UNIFIED_KEY_BUFFER_0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,LPM_UNIFIED_KEY_BUFFER_0m_BLKACC,1,n,0,LPM_UNIFIED_KEY_BUFFER_0m_OFFSET,i,(m._lpm_unified_key_buffer_0),10)
#define WRITE_LPM_UNIFIED_KEY_BUFFER_0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,LPM_UNIFIED_KEY_BUFFER_0m_BLKACC,1,n,0,LPM_UNIFIED_KEY_BUFFER_0m_OFFSET,i,&(m._lpm_unified_key_buffer_0),10)
#define WRITE_LPM_UNIFIED_KEY_BUFFER_0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,LPM_UNIFIED_KEY_BUFFER_0m_BLKACC,1,-1,0,LPM_UNIFIED_KEY_BUFFER_0m_OFFSET,i,&(m._lpm_unified_key_buffer_0),10)

/*******************************************************************************
 * End of 'LPM_UNIFIED_KEY_BUFFER_0m'
 */




/*******************************************************************************
 * MEMORY:  LPM_UNIFIED_KEY_BUFFER_1
 * BLOCKS:   IPIPE
 * SIZE:     291
 */
/*
 * These macros can be used to access LPM_UNIFIED_KEY_BUFFER_1.
 */
#define READ_LPM_UNIFIED_KEY_BUFFER_1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,LPM_UNIFIED_KEY_BUFFER_1m_BLKACC,1,n,0,LPM_UNIFIED_KEY_BUFFER_1m_OFFSET,i,(m._lpm_unified_key_buffer_1),10)
#define WRITE_LPM_UNIFIED_KEY_BUFFER_1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,LPM_UNIFIED_KEY_BUFFER_1m_BLKACC,1,n,0,LPM_UNIFIED_KEY_BUFFER_1m_OFFSET,i,&(m._lpm_unified_key_buffer_1),10)
#define WRITE_LPM_UNIFIED_KEY_BUFFER_1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,LPM_UNIFIED_KEY_BUFFER_1m_BLKACC,1,-1,0,LPM_UNIFIED_KEY_BUFFER_1m_OFFSET,i,&(m._lpm_unified_key_buffer_1),10)

/*******************************************************************************
 * End of 'LPM_UNIFIED_KEY_BUFFER_1m'
 */




/*******************************************************************************
 * MEMORY:  LPM_UNIFIED_KEY_BUFFER_2
 * BLOCKS:   IPIPE
 * SIZE:     183
 */
/*
 * These macros can be used to access LPM_UNIFIED_KEY_BUFFER_2.
 */
#define READ_LPM_UNIFIED_KEY_BUFFER_2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,LPM_UNIFIED_KEY_BUFFER_2m_BLKACC,1,n,0,LPM_UNIFIED_KEY_BUFFER_2m_OFFSET,i,(m._lpm_unified_key_buffer_2),6)
#define WRITE_LPM_UNIFIED_KEY_BUFFER_2m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,LPM_UNIFIED_KEY_BUFFER_2m_BLKACC,1,n,0,LPM_UNIFIED_KEY_BUFFER_2m_OFFSET,i,&(m._lpm_unified_key_buffer_2),6)
#define WRITE_LPM_UNIFIED_KEY_BUFFER_2m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,LPM_UNIFIED_KEY_BUFFER_2m_BLKACC,1,-1,0,LPM_UNIFIED_KEY_BUFFER_2m_OFFSET,i,&(m._lpm_unified_key_buffer_2),6)

/*******************************************************************************
 * End of 'LPM_UNIFIED_KEY_BUFFER_2m'
 */




/*******************************************************************************
 * MEMORY:  LPM_UNIFIED_KEY_BUFFER_3
 * BLOCKS:   IPIPE
 * SIZE:     183
 */
/*
 * These macros can be used to access LPM_UNIFIED_KEY_BUFFER_3.
 */
#define READ_LPM_UNIFIED_KEY_BUFFER_3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,LPM_UNIFIED_KEY_BUFFER_3m_BLKACC,1,n,0,LPM_UNIFIED_KEY_BUFFER_3m_OFFSET,i,(m._lpm_unified_key_buffer_3),6)
#define WRITE_LPM_UNIFIED_KEY_BUFFER_3m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,LPM_UNIFIED_KEY_BUFFER_3m_BLKACC,1,n,0,LPM_UNIFIED_KEY_BUFFER_3m_OFFSET,i,&(m._lpm_unified_key_buffer_3),6)
#define WRITE_LPM_UNIFIED_KEY_BUFFER_3m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,LPM_UNIFIED_KEY_BUFFER_3m_BLKACC,1,-1,0,LPM_UNIFIED_KEY_BUFFER_3m_OFFSET,i,&(m._lpm_unified_key_buffer_3),6)

/*******************************************************************************
 * End of 'LPM_UNIFIED_KEY_BUFFER_3m'
 */




/*******************************************************************************
 * MEMORY:  LPORT_TAB
 * BLOCKS:   IPIPE
 * SIZE:     191
 */
/*
 * These macros can be used to access LPORT_TAB.
 */
#define READ_LPORT_TABm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,LPORT_TABm_BLKACC,1,n,0,LPORT_TABm_OFFSET,i,(m._lport_tab),6)
#define WRITE_LPORT_TABm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,LPORT_TABm_BLKACC,1,n,0,LPORT_TABm_OFFSET,i,&(m._lport_tab),6)
#define WRITE_LPORT_TABm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,LPORT_TABm_BLKACC,1,-1,0,LPORT_TABm_OFFSET,i,&(m._lport_tab),6)

/*******************************************************************************
 * End of 'LPORT_TABm'
 */




/*******************************************************************************
 * MEMORY:  MAC_BLOCK
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access MAC_BLOCK.
 */
#define READ_MAC_BLOCKm(u,i,m) bcmbd_cmicx_mem_block_read(u,MAC_BLOCKm_BLKACC,1,MAC_BLOCKm_OFFSET,i,(m._mac_block),9)
#define WRITE_MAC_BLOCKm(u,i,m) bcmbd_cmicx_mem_block_write(u,MAC_BLOCKm_BLKACC,1,MAC_BLOCKm_OFFSET,i,&(m._mac_block),9)

/*******************************************************************************
 * End of 'MAC_BLOCKm'
 */




/*******************************************************************************
 * REGISTER:  MC_CONTROL_4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MC_CONTROL_4.
 */
#define READ_MC_CONTROL_4r(u,r) bcmbd_cmicx_reg_block_read(u,MC_CONTROL_4r_BLKACC,1,MC_CONTROL_4r_OFFSET,0,(r._mc_control_4), 1)
#define WRITE_MC_CONTROL_4r(u,r) bcmbd_cmicx_reg_block_write(u,MC_CONTROL_4r_BLKACC,1,MC_CONTROL_4r_OFFSET,0,&(r._mc_control_4), 1)

/*******************************************************************************
 * End of 'MC_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  MC_CONTROL_5
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MC_CONTROL_5.
 */
#define READ_MC_CONTROL_5r(u,r) bcmbd_cmicx_reg_block_read(u,MC_CONTROL_5r_BLKACC,1,MC_CONTROL_5r_OFFSET,0,(r._mc_control_5), 1)
#define WRITE_MC_CONTROL_5r(u,r) bcmbd_cmicx_reg_block_write(u,MC_CONTROL_5r_BLKACC,1,MC_CONTROL_5r_OFFSET,0,&(r._mc_control_5), 1)

/*******************************************************************************
 * End of 'MC_CONTROL_5r'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_BUFFER_CONFIG
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_BUFFER_CONFIG.
 */
#define READ_MGMT_OBM_BUFFER_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_BUFFER_CONFIGr_BLKACC,101,MGMT_OBM_BUFFER_CONFIGr_OFFSET,i,(r._mgmt_obm_buffer_config), 1)
#define WRITE_MGMT_OBM_BUFFER_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_BUFFER_CONFIGr_BLKACC,101,MGMT_OBM_BUFFER_CONFIGr_OFFSET,i,&(r._mgmt_obm_buffer_config), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_BUFFER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_CONTROL
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_CONTROL.
 */
#define READ_MGMT_OBM_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_CONTROLr_BLKACC,101,MGMT_OBM_CONTROLr_OFFSET,0,(r._mgmt_obm_control), 1)
#define WRITE_MGMT_OBM_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_CONTROLr_BLKACC,101,MGMT_OBM_CONTROLr_OFFSET,0,&(r._mgmt_obm_control), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_CTRL_ECC_STATUS
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_CTRL_ECC_STATUS.
 */
#define READ_MGMT_OBM_CTRL_ECC_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_CTRL_ECC_STATUSr_BLKACC,101,MGMT_OBM_CTRL_ECC_STATUSr_OFFSET,0,(r._mgmt_obm_ctrl_ecc_status), 1)
#define WRITE_MGMT_OBM_CTRL_ECC_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_CTRL_ECC_STATUSr_BLKACC,101,MGMT_OBM_CTRL_ECC_STATUSr_OFFSET,0,&(r._mgmt_obm_ctrl_ecc_status), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_CTRL_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_DATA_ECC_STATUS
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_DATA_ECC_STATUS.
 */
#define READ_MGMT_OBM_DATA_ECC_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_DATA_ECC_STATUSr_BLKACC,101,MGMT_OBM_DATA_ECC_STATUSr_OFFSET,0,(r._mgmt_obm_data_ecc_status), 1)
#define WRITE_MGMT_OBM_DATA_ECC_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_DATA_ECC_STATUSr_BLKACC,101,MGMT_OBM_DATA_ECC_STATUSr_OFFSET,0,&(r._mgmt_obm_data_ecc_status), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_DATA_ECC_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  MGMT_OBM_DSCP_MAP_PORT0
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_DSCP_MAP_PORT0.
 */
#define READ_MGMT_OBM_DSCP_MAP_PORT0m(u,i,m) bcmbd_cmicx_mem_block_read(u,MGMT_OBM_DSCP_MAP_PORT0m_BLKACC,101,MGMT_OBM_DSCP_MAP_PORT0m_OFFSET,i,(m._mgmt_obm_dscp_map_port0),1)
#define WRITE_MGMT_OBM_DSCP_MAP_PORT0m(u,i,m) bcmbd_cmicx_mem_block_write(u,MGMT_OBM_DSCP_MAP_PORT0m_BLKACC,101,MGMT_OBM_DSCP_MAP_PORT0m_OFFSET,i,&(m._mgmt_obm_dscp_map_port0),1)

/*******************************************************************************
 * End of 'MGMT_OBM_DSCP_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  MGMT_OBM_DSCP_MAP_PORT1
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_DSCP_MAP_PORT1.
 */
#define READ_MGMT_OBM_DSCP_MAP_PORT1m(u,i,m) bcmbd_cmicx_mem_block_read(u,MGMT_OBM_DSCP_MAP_PORT1m_BLKACC,101,MGMT_OBM_DSCP_MAP_PORT1m_OFFSET,i,(m._mgmt_obm_dscp_map_port1),1)
#define WRITE_MGMT_OBM_DSCP_MAP_PORT1m(u,i,m) bcmbd_cmicx_mem_block_write(u,MGMT_OBM_DSCP_MAP_PORT1m_BLKACC,101,MGMT_OBM_DSCP_MAP_PORT1m_OFFSET,i,&(m._mgmt_obm_dscp_map_port1),1)

/*******************************************************************************
 * End of 'MGMT_OBM_DSCP_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  MGMT_OBM_ETAG_MAP_PORT0
 * BLOCKS:   MGMT_OBM
 * SIZE:     16
 */
/*
 * These macros can be used to access MGMT_OBM_ETAG_MAP_PORT0.
 */
#define READ_MGMT_OBM_ETAG_MAP_PORT0m(u,i,m) bcmbd_cmicx_mem_block_read(u,MGMT_OBM_ETAG_MAP_PORT0m_BLKACC,101,MGMT_OBM_ETAG_MAP_PORT0m_OFFSET,i,(m._mgmt_obm_etag_map_port0),1)
#define WRITE_MGMT_OBM_ETAG_MAP_PORT0m(u,i,m) bcmbd_cmicx_mem_block_write(u,MGMT_OBM_ETAG_MAP_PORT0m_BLKACC,101,MGMT_OBM_ETAG_MAP_PORT0m_OFFSET,i,&(m._mgmt_obm_etag_map_port0),1)

/*******************************************************************************
 * End of 'MGMT_OBM_ETAG_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  MGMT_OBM_ETAG_MAP_PORT1
 * BLOCKS:   MGMT_OBM
 * SIZE:     16
 */
/*
 * These macros can be used to access MGMT_OBM_ETAG_MAP_PORT1.
 */
#define READ_MGMT_OBM_ETAG_MAP_PORT1m(u,i,m) bcmbd_cmicx_mem_block_read(u,MGMT_OBM_ETAG_MAP_PORT1m_BLKACC,101,MGMT_OBM_ETAG_MAP_PORT1m_OFFSET,i,(m._mgmt_obm_etag_map_port1),1)
#define WRITE_MGMT_OBM_ETAG_MAP_PORT1m(u,i,m) bcmbd_cmicx_mem_block_write(u,MGMT_OBM_ETAG_MAP_PORT1m_BLKACC,101,MGMT_OBM_ETAG_MAP_PORT1m_OFFSET,i,&(m._mgmt_obm_etag_map_port1),1)

/*******************************************************************************
 * End of 'MGMT_OBM_ETAG_MAP_PORT1m'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_FC_THRESHOLD
 * BLOCKS:   MGMT_OBM
 * SIZE:     64
 */
/*
 * These macros can be used to access MGMT_OBM_FC_THRESHOLD.
 */
#define READ_MGMT_OBM_FC_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_FC_THRESHOLDr_BLKACC,101,MGMT_OBM_FC_THRESHOLDr_OFFSET,i,(r._mgmt_obm_fc_threshold), 2)
#define WRITE_MGMT_OBM_FC_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_FC_THRESHOLDr_BLKACC,101,MGMT_OBM_FC_THRESHOLDr_OFFSET,i,&(r._mgmt_obm_fc_threshold), 2)

/*******************************************************************************
 * End of 'MGMT_OBM_FC_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_FC_THRESHOLD_1
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_FC_THRESHOLD_1.
 */
#define READ_MGMT_OBM_FC_THRESHOLD_1r(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_FC_THRESHOLD_1r_BLKACC,101,MGMT_OBM_FC_THRESHOLD_1r_OFFSET,i,(r._mgmt_obm_fc_threshold_1), 1)
#define WRITE_MGMT_OBM_FC_THRESHOLD_1r(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_FC_THRESHOLD_1r_BLKACC,101,MGMT_OBM_FC_THRESHOLD_1r_OFFSET,i,&(r._mgmt_obm_fc_threshold_1), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_FC_THRESHOLD_1r'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_FLOW_CONTROL_CONFIG
 * BLOCKS:   MGMT_OBM
 * SIZE:     64
 */
/*
 * These macros can be used to access MGMT_OBM_FLOW_CONTROL_CONFIG.
 */
#define READ_MGMT_OBM_FLOW_CONTROL_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_FLOW_CONTROL_CONFIGr_BLKACC,101,MGMT_OBM_FLOW_CONTROL_CONFIGr_OFFSET,i,(r._mgmt_obm_flow_control_config), 2)
#define WRITE_MGMT_OBM_FLOW_CONTROL_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_FLOW_CONTROL_CONFIGr_BLKACC,101,MGMT_OBM_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._mgmt_obm_flow_control_config), 2)

/*******************************************************************************
 * End of 'MGMT_OBM_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_FLOW_CONTROL_EVENT_COUNT
 * BLOCKS:   MGMT_OBM
 * SIZE:     64
 */
/*
 * These macros can be used to access MGMT_OBM_FLOW_CONTROL_EVENT_COUNT.
 */
#define READ_MGMT_OBM_FLOW_CONTROL_EVENT_COUNTr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_FLOW_CONTROL_EVENT_COUNTr_BLKACC,101,MGMT_OBM_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,(r._mgmt_obm_flow_control_event_count), 2)
#define WRITE_MGMT_OBM_FLOW_CONTROL_EVENT_COUNTr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_FLOW_CONTROL_EVENT_COUNTr_BLKACC,101,MGMT_OBM_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._mgmt_obm_flow_control_event_count), 2)

/*******************************************************************************
 * End of 'MGMT_OBM_FLOW_CONTROL_EVENT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_GSH_ETHERTYPE
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_GSH_ETHERTYPE.
 */
#define READ_MGMT_OBM_GSH_ETHERTYPEr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_GSH_ETHERTYPEr_BLKACC,101,MGMT_OBM_GSH_ETHERTYPEr_OFFSET,0,(r._mgmt_obm_gsh_ethertype), 1)
#define WRITE_MGMT_OBM_GSH_ETHERTYPEr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_GSH_ETHERTYPEr_BLKACC,101,MGMT_OBM_GSH_ETHERTYPEr_OFFSET,0,&(r._mgmt_obm_gsh_ethertype), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_GSH_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_INNER_TPID
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_INNER_TPID.
 */
#define READ_MGMT_OBM_INNER_TPIDr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_INNER_TPIDr_BLKACC,101,MGMT_OBM_INNER_TPIDr_OFFSET,0,(r._mgmt_obm_inner_tpid), 1)
#define WRITE_MGMT_OBM_INNER_TPIDr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_INNER_TPIDr_BLKACC,101,MGMT_OBM_INNER_TPIDr_OFFSET,0,&(r._mgmt_obm_inner_tpid), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_INNER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_INTR_ENABLE
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_INTR_ENABLE.
 */
#define READ_MGMT_OBM_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_INTR_ENABLEr_BLKACC,101,MGMT_OBM_INTR_ENABLEr_OFFSET,0,(r._mgmt_obm_intr_enable), 1)
#define WRITE_MGMT_OBM_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_INTR_ENABLEr_BLKACC,101,MGMT_OBM_INTR_ENABLEr_OFFSET,0,&(r._mgmt_obm_intr_enable), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_INTR_STATUS
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_INTR_STATUS.
 */
#define READ_MGMT_OBM_INTR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_INTR_STATUSr_BLKACC,101,MGMT_OBM_INTR_STATUSr_OFFSET,0,(r._mgmt_obm_intr_status), 1)
#define WRITE_MGMT_OBM_INTR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_INTR_STATUSr_BLKACC,101,MGMT_OBM_INTR_STATUSr_OFFSET,0,&(r._mgmt_obm_intr_status), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_INTR_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  MGMT_OBM_IOM_STATS_WINDOW_RESULTS
 * BLOCKS:   MGMT_OBM
 * SIZE:     216
 */
/*
 * These macros can be used to access MGMT_OBM_IOM_STATS_WINDOW_RESULTS.
 */
#define READ_MGMT_OBM_IOM_STATS_WINDOW_RESULTSm(u,i,m) bcmbd_cmicx_mem_block_read(u,MGMT_OBM_IOM_STATS_WINDOW_RESULTSm_BLKACC,101,MGMT_OBM_IOM_STATS_WINDOW_RESULTSm_OFFSET,i,(m._mgmt_obm_iom_stats_window_results),7)
#define WRITE_MGMT_OBM_IOM_STATS_WINDOW_RESULTSm(u,i,m) bcmbd_cmicx_mem_block_write(u,MGMT_OBM_IOM_STATS_WINDOW_RESULTSm_BLKACC,101,MGMT_OBM_IOM_STATS_WINDOW_RESULTSm_OFFSET,i,&(m._mgmt_obm_iom_stats_window_results),7)

/*******************************************************************************
 * End of 'MGMT_OBM_IOM_STATS_WINDOW_RESULTSm'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_LOSSLESS0_BYTE_DROP_COUNT
 * BLOCKS:   MGMT_OBM
 * SIZE:     64
 */
/*
 * These macros can be used to access MGMT_OBM_LOSSLESS0_BYTE_DROP_COUNT.
 */
#define READ_MGMT_OBM_LOSSLESS0_BYTE_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,(r._mgmt_obm_lossless0_byte_drop_count), 2)
#define WRITE_MGMT_OBM_LOSSLESS0_BYTE_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._mgmt_obm_lossless0_byte_drop_count), 2)

/*******************************************************************************
 * End of 'MGMT_OBM_LOSSLESS0_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_LOSSLESS0_PKT_DROP_COUNT
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_LOSSLESS0_PKT_DROP_COUNT.
 */
#define READ_MGMT_OBM_LOSSLESS0_PKT_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,(r._mgmt_obm_lossless0_pkt_drop_count), 1)
#define WRITE_MGMT_OBM_LOSSLESS0_PKT_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._mgmt_obm_lossless0_pkt_drop_count), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_LOSSLESS0_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_LOSSLESS1_BYTE_DROP_COUNT
 * BLOCKS:   MGMT_OBM
 * SIZE:     64
 */
/*
 * These macros can be used to access MGMT_OBM_LOSSLESS1_BYTE_DROP_COUNT.
 */
#define READ_MGMT_OBM_LOSSLESS1_BYTE_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,(r._mgmt_obm_lossless1_byte_drop_count), 2)
#define WRITE_MGMT_OBM_LOSSLESS1_BYTE_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._mgmt_obm_lossless1_byte_drop_count), 2)

/*******************************************************************************
 * End of 'MGMT_OBM_LOSSLESS1_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_LOSSLESS1_PKT_DROP_COUNT
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_LOSSLESS1_PKT_DROP_COUNT.
 */
#define READ_MGMT_OBM_LOSSLESS1_PKT_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,(r._mgmt_obm_lossless1_pkt_drop_count), 1)
#define WRITE_MGMT_OBM_LOSSLESS1_PKT_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._mgmt_obm_lossless1_pkt_drop_count), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_LOSSLESS1_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_LOSSY_HI_BYTE_DROP_COUNT
 * BLOCKS:   MGMT_OBM
 * SIZE:     64
 */
/*
 * These macros can be used to access MGMT_OBM_LOSSY_HI_BYTE_DROP_COUNT.
 */
#define READ_MGMT_OBM_LOSSY_HI_BYTE_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,(r._mgmt_obm_lossy_hi_byte_drop_count), 2)
#define WRITE_MGMT_OBM_LOSSY_HI_BYTE_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._mgmt_obm_lossy_hi_byte_drop_count), 2)

/*******************************************************************************
 * End of 'MGMT_OBM_LOSSY_HI_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_LOSSY_HI_PKT_DROP_COUNT
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_LOSSY_HI_PKT_DROP_COUNT.
 */
#define READ_MGMT_OBM_LOSSY_HI_PKT_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,(r._mgmt_obm_lossy_hi_pkt_drop_count), 1)
#define WRITE_MGMT_OBM_LOSSY_HI_PKT_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._mgmt_obm_lossy_hi_pkt_drop_count), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_LOSSY_HI_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_LOSSY_LO_BYTE_DROP_COUNT
 * BLOCKS:   MGMT_OBM
 * SIZE:     64
 */
/*
 * These macros can be used to access MGMT_OBM_LOSSY_LO_BYTE_DROP_COUNT.
 */
#define READ_MGMT_OBM_LOSSY_LO_BYTE_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,(r._mgmt_obm_lossy_lo_byte_drop_count), 2)
#define WRITE_MGMT_OBM_LOSSY_LO_BYTE_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._mgmt_obm_lossy_lo_byte_drop_count), 2)

/*******************************************************************************
 * End of 'MGMT_OBM_LOSSY_LO_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_LOSSY_LO_PKT_DROP_COUNT
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_LOSSY_LO_PKT_DROP_COUNT.
 */
#define READ_MGMT_OBM_LOSSY_LO_PKT_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,(r._mgmt_obm_lossy_lo_pkt_drop_count), 1)
#define WRITE_MGMT_OBM_LOSSY_LO_PKT_DROP_COUNTr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,101,MGMT_OBM_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._mgmt_obm_lossy_lo_pkt_drop_count), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_LOSSY_LO_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_MAX_USAGE
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_MAX_USAGE.
 */
#define READ_MGMT_OBM_MAX_USAGEr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_MAX_USAGEr_BLKACC,101,MGMT_OBM_MAX_USAGEr_OFFSET,0,(r._mgmt_obm_max_usage), 1)
#define WRITE_MGMT_OBM_MAX_USAGEr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_MAX_USAGEr_BLKACC,101,MGMT_OBM_MAX_USAGEr_OFFSET,0,&(r._mgmt_obm_max_usage), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_MAX_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_MAX_USAGE_SELECT
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_MAX_USAGE_SELECT.
 */
#define READ_MGMT_OBM_MAX_USAGE_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_MAX_USAGE_SELECTr_BLKACC,101,MGMT_OBM_MAX_USAGE_SELECTr_OFFSET,0,(r._mgmt_obm_max_usage_select), 1)
#define WRITE_MGMT_OBM_MAX_USAGE_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_MAX_USAGE_SELECTr_BLKACC,101,MGMT_OBM_MAX_USAGE_SELECTr_OFFSET,0,&(r._mgmt_obm_max_usage_select), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_MAX_USAGE_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_MONITOR_CONFIG
 * BLOCKS:   MGMT_OBM
 * SIZE:     64
 */
/*
 * These macros can be used to access MGMT_OBM_MONITOR_CONFIG.
 */
#define READ_MGMT_OBM_MONITOR_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_MONITOR_CONFIGr_BLKACC,101,MGMT_OBM_MONITOR_CONFIGr_OFFSET,0,(r._mgmt_obm_monitor_config), 2)
#define WRITE_MGMT_OBM_MONITOR_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_MONITOR_CONFIGr_BLKACC,101,MGMT_OBM_MONITOR_CONFIGr_OFFSET,0,&(r._mgmt_obm_monitor_config), 2)

/*******************************************************************************
 * End of 'MGMT_OBM_MONITOR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_MONITOR_STATS_CONFIG
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_MONITOR_STATS_CONFIG.
 */
#define READ_MGMT_OBM_MONITOR_STATS_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_MONITOR_STATS_CONFIGr_BLKACC,101,MGMT_OBM_MONITOR_STATS_CONFIGr_OFFSET,i,(r._mgmt_obm_monitor_stats_config), 1)
#define WRITE_MGMT_OBM_MONITOR_STATS_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_MONITOR_STATS_CONFIGr_BLKACC,101,MGMT_OBM_MONITOR_STATS_CONFIGr_OFFSET,i,&(r._mgmt_obm_monitor_stats_config), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_MONITOR_STATS_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_NIV_ETHERTYPE
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_NIV_ETHERTYPE.
 */
#define READ_MGMT_OBM_NIV_ETHERTYPEr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_NIV_ETHERTYPEr_BLKACC,101,MGMT_OBM_NIV_ETHERTYPEr_OFFSET,0,(r._mgmt_obm_niv_ethertype), 1)
#define WRITE_MGMT_OBM_NIV_ETHERTYPEr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_NIV_ETHERTYPEr_BLKACC,101,MGMT_OBM_NIV_ETHERTYPEr_OFFSET,0,&(r._mgmt_obm_niv_ethertype), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_OPAQUE_TAG_CONFIG
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_OPAQUE_TAG_CONFIG.
 */
#define READ_MGMT_OBM_OPAQUE_TAG_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_OPAQUE_TAG_CONFIGr_BLKACC,101,MGMT_OBM_OPAQUE_TAG_CONFIGr_OFFSET,i,(r._mgmt_obm_opaque_tag_config), 1)
#define WRITE_MGMT_OBM_OPAQUE_TAG_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_OPAQUE_TAG_CONFIGr_BLKACC,101,MGMT_OBM_OPAQUE_TAG_CONFIGr_OFFSET,i,&(r._mgmt_obm_opaque_tag_config), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_OPAQUE_TAG_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_OPAQUE_TAG_CONFIG_0
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_OPAQUE_TAG_CONFIG_0.
 */
#define READ_MGMT_OBM_OPAQUE_TAG_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_OPAQUE_TAG_CONFIG_0r_BLKACC,101,MGMT_OBM_OPAQUE_TAG_CONFIG_0r_OFFSET,0,(r._mgmt_obm_opaque_tag_config_0), 1)
#define WRITE_MGMT_OBM_OPAQUE_TAG_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_OPAQUE_TAG_CONFIG_0r_BLKACC,101,MGMT_OBM_OPAQUE_TAG_CONFIG_0r_OFFSET,0,&(r._mgmt_obm_opaque_tag_config_0), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_OPAQUE_TAG_CONFIG_0r'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_OPAQUE_TAG_CONFIG_1
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_OPAQUE_TAG_CONFIG_1.
 */
#define READ_MGMT_OBM_OPAQUE_TAG_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_OPAQUE_TAG_CONFIG_1r_BLKACC,101,MGMT_OBM_OPAQUE_TAG_CONFIG_1r_OFFSET,0,(r._mgmt_obm_opaque_tag_config_1), 1)
#define WRITE_MGMT_OBM_OPAQUE_TAG_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_OPAQUE_TAG_CONFIG_1r_BLKACC,101,MGMT_OBM_OPAQUE_TAG_CONFIG_1r_OFFSET,0,&(r._mgmt_obm_opaque_tag_config_1), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_OPAQUE_TAG_CONFIG_1r'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_OUTER_TPID
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_OUTER_TPID.
 */
#define READ_MGMT_OBM_OUTER_TPIDr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_OUTER_TPIDr_BLKACC,101,MGMT_OBM_OUTER_TPIDr_OFFSET,i,(r._mgmt_obm_outer_tpid), 1)
#define WRITE_MGMT_OBM_OUTER_TPIDr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_OUTER_TPIDr_BLKACC,101,MGMT_OBM_OUTER_TPIDr_OFFSET,i,&(r._mgmt_obm_outer_tpid), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_OUTER_TPID_0
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_OUTER_TPID_0.
 */
#define READ_MGMT_OBM_OUTER_TPID_0r(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_OUTER_TPID_0r_BLKACC,101,MGMT_OBM_OUTER_TPID_0r_OFFSET,0,(r._mgmt_obm_outer_tpid_0), 1)
#define WRITE_MGMT_OBM_OUTER_TPID_0r(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_OUTER_TPID_0r_BLKACC,101,MGMT_OBM_OUTER_TPID_0r_OFFSET,0,&(r._mgmt_obm_outer_tpid_0), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_OUTER_TPID_1
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_OUTER_TPID_1.
 */
#define READ_MGMT_OBM_OUTER_TPID_1r(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_OUTER_TPID_1r_BLKACC,101,MGMT_OBM_OUTER_TPID_1r_OFFSET,0,(r._mgmt_obm_outer_tpid_1), 1)
#define WRITE_MGMT_OBM_OUTER_TPID_1r(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_OUTER_TPID_1r_BLKACC,101,MGMT_OBM_OUTER_TPID_1r_OFFSET,0,&(r._mgmt_obm_outer_tpid_1), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_OUTER_TPID_2
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_OUTER_TPID_2.
 */
#define READ_MGMT_OBM_OUTER_TPID_2r(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_OUTER_TPID_2r_BLKACC,101,MGMT_OBM_OUTER_TPID_2r_OFFSET,0,(r._mgmt_obm_outer_tpid_2), 1)
#define WRITE_MGMT_OBM_OUTER_TPID_2r(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_OUTER_TPID_2r_BLKACC,101,MGMT_OBM_OUTER_TPID_2r_OFFSET,0,&(r._mgmt_obm_outer_tpid_2), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_OUTER_TPID_3
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_OUTER_TPID_3.
 */
#define READ_MGMT_OBM_OUTER_TPID_3r(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_OUTER_TPID_3r_BLKACC,101,MGMT_OBM_OUTER_TPID_3r_OFFSET,0,(r._mgmt_obm_outer_tpid_3), 1)
#define WRITE_MGMT_OBM_OUTER_TPID_3r(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_OUTER_TPID_3r_BLKACC,101,MGMT_OBM_OUTER_TPID_3r_OFFSET,0,&(r._mgmt_obm_outer_tpid_3), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_OUTER_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_OVERSUB_MON_ECC_STATUS
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_OVERSUB_MON_ECC_STATUS.
 */
#define READ_MGMT_OBM_OVERSUB_MON_ECC_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_OVERSUB_MON_ECC_STATUSr_BLKACC,101,MGMT_OBM_OVERSUB_MON_ECC_STATUSr_OFFSET,0,(r._mgmt_obm_oversub_mon_ecc_status), 1)
#define WRITE_MGMT_OBM_OVERSUB_MON_ECC_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_OVERSUB_MON_ECC_STATUSr_BLKACC,101,MGMT_OBM_OVERSUB_MON_ECC_STATUSr_OFFSET,0,&(r._mgmt_obm_oversub_mon_ecc_status), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_OVERSUB_MON_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_PE_ETHERTYPE
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_PE_ETHERTYPE.
 */
#define READ_MGMT_OBM_PE_ETHERTYPEr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_PE_ETHERTYPEr_BLKACC,101,MGMT_OBM_PE_ETHERTYPEr_OFFSET,0,(r._mgmt_obm_pe_ethertype), 1)
#define WRITE_MGMT_OBM_PE_ETHERTYPEr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_PE_ETHERTYPEr_BLKACC,101,MGMT_OBM_PE_ETHERTYPEr_OFFSET,0,&(r._mgmt_obm_pe_ethertype), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_PE_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_PORT_CONFIG
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_PORT_CONFIG.
 */
#define READ_MGMT_OBM_PORT_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_PORT_CONFIGr_BLKACC,101,MGMT_OBM_PORT_CONFIGr_OFFSET,i,(r._mgmt_obm_port_config), 1)
#define WRITE_MGMT_OBM_PORT_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_PORT_CONFIGr_BLKACC,101,MGMT_OBM_PORT_CONFIGr_OFFSET,i,&(r._mgmt_obm_port_config), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_PORT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  MGMT_OBM_PRI_MAP_PORT0
 * BLOCKS:   MGMT_OBM
 * SIZE:     16
 */
/*
 * These macros can be used to access MGMT_OBM_PRI_MAP_PORT0.
 */
#define READ_MGMT_OBM_PRI_MAP_PORT0m(u,i,m) bcmbd_cmicx_mem_block_read(u,MGMT_OBM_PRI_MAP_PORT0m_BLKACC,101,MGMT_OBM_PRI_MAP_PORT0m_OFFSET,i,(m._mgmt_obm_pri_map_port0),1)
#define WRITE_MGMT_OBM_PRI_MAP_PORT0m(u,i,m) bcmbd_cmicx_mem_block_write(u,MGMT_OBM_PRI_MAP_PORT0m_BLKACC,101,MGMT_OBM_PRI_MAP_PORT0m_OFFSET,i,&(m._mgmt_obm_pri_map_port0),1)

/*******************************************************************************
 * End of 'MGMT_OBM_PRI_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  MGMT_OBM_PRI_MAP_PORT1
 * BLOCKS:   MGMT_OBM
 * SIZE:     16
 */
/*
 * These macros can be used to access MGMT_OBM_PRI_MAP_PORT1.
 */
#define READ_MGMT_OBM_PRI_MAP_PORT1m(u,i,m) bcmbd_cmicx_mem_block_read(u,MGMT_OBM_PRI_MAP_PORT1m_BLKACC,101,MGMT_OBM_PRI_MAP_PORT1m_OFFSET,i,(m._mgmt_obm_pri_map_port1),1)
#define WRITE_MGMT_OBM_PRI_MAP_PORT1m(u,i,m) bcmbd_cmicx_mem_block_write(u,MGMT_OBM_PRI_MAP_PORT1m_BLKACC,101,MGMT_OBM_PRI_MAP_PORT1m_OFFSET,i,&(m._mgmt_obm_pri_map_port1),1)

/*******************************************************************************
 * End of 'MGMT_OBM_PRI_MAP_PORT1m'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_PROTOCOL_CONTROL_0
 * BLOCKS:   MGMT_OBM
 * SIZE:     64
 */
/*
 * These macros can be used to access MGMT_OBM_PROTOCOL_CONTROL_0.
 */
#define READ_MGMT_OBM_PROTOCOL_CONTROL_0r(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_PROTOCOL_CONTROL_0r_BLKACC,101,MGMT_OBM_PROTOCOL_CONTROL_0r_OFFSET,i,(r._mgmt_obm_protocol_control_0), 2)
#define WRITE_MGMT_OBM_PROTOCOL_CONTROL_0r(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_PROTOCOL_CONTROL_0r_BLKACC,101,MGMT_OBM_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._mgmt_obm_protocol_control_0), 2)

/*******************************************************************************
 * End of 'MGMT_OBM_PROTOCOL_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_PROTOCOL_CONTROL_1
 * BLOCKS:   MGMT_OBM
 * SIZE:     64
 */
/*
 * These macros can be used to access MGMT_OBM_PROTOCOL_CONTROL_1.
 */
#define READ_MGMT_OBM_PROTOCOL_CONTROL_1r(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_PROTOCOL_CONTROL_1r_BLKACC,101,MGMT_OBM_PROTOCOL_CONTROL_1r_OFFSET,i,(r._mgmt_obm_protocol_control_1), 2)
#define WRITE_MGMT_OBM_PROTOCOL_CONTROL_1r(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_PROTOCOL_CONTROL_1r_BLKACC,101,MGMT_OBM_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._mgmt_obm_protocol_control_1), 2)

/*******************************************************************************
 * End of 'MGMT_OBM_PROTOCOL_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_PROTOCOL_CONTROL_2
 * BLOCKS:   MGMT_OBM
 * SIZE:     64
 */
/*
 * These macros can be used to access MGMT_OBM_PROTOCOL_CONTROL_2.
 */
#define READ_MGMT_OBM_PROTOCOL_CONTROL_2r(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_PROTOCOL_CONTROL_2r_BLKACC,101,MGMT_OBM_PROTOCOL_CONTROL_2r_OFFSET,i,(r._mgmt_obm_protocol_control_2), 2)
#define WRITE_MGMT_OBM_PROTOCOL_CONTROL_2r(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_PROTOCOL_CONTROL_2r_BLKACC,101,MGMT_OBM_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._mgmt_obm_protocol_control_2), 2)

/*******************************************************************************
 * End of 'MGMT_OBM_PROTOCOL_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_RAM_CONTROL
 * BLOCKS:   MGMT_OBM
 * SIZE:     64
 */
/*
 * These macros can be used to access MGMT_OBM_RAM_CONTROL.
 */
#define READ_MGMT_OBM_RAM_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_RAM_CONTROLr_BLKACC,101,MGMT_OBM_RAM_CONTROLr_OFFSET,0,(r._mgmt_obm_ram_control), 2)
#define WRITE_MGMT_OBM_RAM_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_RAM_CONTROLr_BLKACC,101,MGMT_OBM_RAM_CONTROLr_OFFSET,0,&(r._mgmt_obm_ram_control), 2)

/*******************************************************************************
 * End of 'MGMT_OBM_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_SER_CONTROL
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_SER_CONTROL.
 */
#define READ_MGMT_OBM_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_SER_CONTROLr_BLKACC,101,MGMT_OBM_SER_CONTROLr_OFFSET,0,(r._mgmt_obm_ser_control), 1)
#define WRITE_MGMT_OBM_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_SER_CONTROLr_BLKACC,101,MGMT_OBM_SER_CONTROLr_OFFSET,0,&(r._mgmt_obm_ser_control), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_SHARED_CONFIG
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_SHARED_CONFIG.
 */
#define READ_MGMT_OBM_SHARED_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_SHARED_CONFIGr_BLKACC,101,MGMT_OBM_SHARED_CONFIGr_OFFSET,0,(r._mgmt_obm_shared_config), 1)
#define WRITE_MGMT_OBM_SHARED_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_SHARED_CONFIGr_BLKACC,101,MGMT_OBM_SHARED_CONFIGr_OFFSET,0,&(r._mgmt_obm_shared_config), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_SHARED_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  MGMT_OBM_TC_MAP_PORT0
 * BLOCKS:   MGMT_OBM
 * SIZE:     16
 */
/*
 * These macros can be used to access MGMT_OBM_TC_MAP_PORT0.
 */
#define READ_MGMT_OBM_TC_MAP_PORT0m(u,i,m) bcmbd_cmicx_mem_block_read(u,MGMT_OBM_TC_MAP_PORT0m_BLKACC,101,MGMT_OBM_TC_MAP_PORT0m_OFFSET,i,(m._mgmt_obm_tc_map_port0),1)
#define WRITE_MGMT_OBM_TC_MAP_PORT0m(u,i,m) bcmbd_cmicx_mem_block_write(u,MGMT_OBM_TC_MAP_PORT0m_BLKACC,101,MGMT_OBM_TC_MAP_PORT0m_OFFSET,i,&(m._mgmt_obm_tc_map_port0),1)

/*******************************************************************************
 * End of 'MGMT_OBM_TC_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  MGMT_OBM_TC_MAP_PORT1
 * BLOCKS:   MGMT_OBM
 * SIZE:     16
 */
/*
 * These macros can be used to access MGMT_OBM_TC_MAP_PORT1.
 */
#define READ_MGMT_OBM_TC_MAP_PORT1m(u,i,m) bcmbd_cmicx_mem_block_read(u,MGMT_OBM_TC_MAP_PORT1m_BLKACC,101,MGMT_OBM_TC_MAP_PORT1m_OFFSET,i,(m._mgmt_obm_tc_map_port1),1)
#define WRITE_MGMT_OBM_TC_MAP_PORT1m(u,i,m) bcmbd_cmicx_mem_block_write(u,MGMT_OBM_TC_MAP_PORT1m_BLKACC,101,MGMT_OBM_TC_MAP_PORT1m_OFFSET,i,&(m._mgmt_obm_tc_map_port1),1)

/*******************************************************************************
 * End of 'MGMT_OBM_TC_MAP_PORT1m'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_TDM
 * BLOCKS:   MGMT_OBM
 * SIZE:     32
 */
/*
 * These macros can be used to access MGMT_OBM_TDM.
 */
#define READ_MGMT_OBM_TDMr(u,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_TDMr_BLKACC,101,MGMT_OBM_TDMr_OFFSET,0,(r._mgmt_obm_tdm), 1)
#define WRITE_MGMT_OBM_TDMr(u,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_TDMr_BLKACC,101,MGMT_OBM_TDMr_OFFSET,0,&(r._mgmt_obm_tdm), 1)

/*******************************************************************************
 * End of 'MGMT_OBM_TDMr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_THRESHOLD
 * BLOCKS:   MGMT_OBM
 * SIZE:     64
 */
/*
 * These macros can be used to access MGMT_OBM_THRESHOLD.
 */
#define READ_MGMT_OBM_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_THRESHOLDr_BLKACC,101,MGMT_OBM_THRESHOLDr_OFFSET,i,(r._mgmt_obm_threshold), 2)
#define WRITE_MGMT_OBM_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_THRESHOLDr_BLKACC,101,MGMT_OBM_THRESHOLDr_OFFSET,i,&(r._mgmt_obm_threshold), 2)

/*******************************************************************************
 * End of 'MGMT_OBM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  MGMT_OBM_USAGE
 * BLOCKS:   MGMT_OBM
 * SIZE:     64
 */
/*
 * These macros can be used to access MGMT_OBM_USAGE.
 */
#define READ_MGMT_OBM_USAGEr(u,i,r) bcmbd_cmicx_reg_block_read(u,MGMT_OBM_USAGEr_BLKACC,101,MGMT_OBM_USAGEr_OFFSET,i,(r._mgmt_obm_usage), 2)
#define WRITE_MGMT_OBM_USAGEr(u,i,r) bcmbd_cmicx_reg_block_write(u,MGMT_OBM_USAGEr_BLKACC,101,MGMT_OBM_USAGEr_OFFSET,i,&(r._mgmt_obm_usage), 2)

/*******************************************************************************
 * End of 'MGMT_OBM_USAGEr'
 */




/*******************************************************************************
 * MEMORY:  MINI_UFT_SHARED_BANKS_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     39
 */
/*
 * These macros can be used to access MINI_UFT_SHARED_BANKS_CONTROL.
 */
#define READ_MINI_UFT_SHARED_BANKS_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,MINI_UFT_SHARED_BANKS_CONTROLm_BLKACC,1,MINI_UFT_SHARED_BANKS_CONTROLm_OFFSET,i,(m._mini_uft_shared_banks_control),2)
#define WRITE_MINI_UFT_SHARED_BANKS_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,MINI_UFT_SHARED_BANKS_CONTROLm_BLKACC,1,MINI_UFT_SHARED_BANKS_CONTROLm_OFFSET,i,&(m._mini_uft_shared_banks_control),2)

/*******************************************************************************
 * End of 'MINI_UFT_SHARED_BANKS_CONTROLm'
 */




/*******************************************************************************
 * REGISTER:  MIRROR_CPU_COS_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MIRROR_CPU_COS_CONFIG.
 */
#define READ_MIRROR_CPU_COS_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,MIRROR_CPU_COS_CONFIGr_BLKACC,1,MIRROR_CPU_COS_CONFIGr_OFFSET,0,(r._mirror_cpu_cos_config), 1)
#define WRITE_MIRROR_CPU_COS_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,MIRROR_CPU_COS_CONFIGr_BLKACC,1,MIRROR_CPU_COS_CONFIGr_OFFSET,0,&(r._mirror_cpu_cos_config), 1)

/*******************************************************************************
 * End of 'MIRROR_CPU_COS_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MIRROR_RQE_Q_NUM
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MIRROR_RQE_Q_NUM.
 */
#define READ_MIRROR_RQE_Q_NUMr(u,r) bcmbd_cmicx_reg_block_read(u,MIRROR_RQE_Q_NUMr_BLKACC,1,MIRROR_RQE_Q_NUMr_OFFSET,0,(r._mirror_rqe_q_num), 1)
#define WRITE_MIRROR_RQE_Q_NUMr(u,r) bcmbd_cmicx_reg_block_write(u,MIRROR_RQE_Q_NUMr_BLKACC,1,MIRROR_RQE_Q_NUMr_OFFSET,0,&(r._mirror_rqe_q_num), 1)

/*******************************************************************************
 * End of 'MIRROR_RQE_Q_NUMr'
 */




/*******************************************************************************
 * REGISTER:  MMRP_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMRP_CONTROL_1.
 */
#define READ_MMRP_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,MMRP_CONTROL_1r_BLKACC,1,MMRP_CONTROL_1r_OFFSET,0,(r._mmrp_control_1), 1)
#define WRITE_MMRP_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,MMRP_CONTROL_1r_BLKACC,1,MMRP_CONTROL_1r_OFFSET,0,&(r._mmrp_control_1), 1)

/*******************************************************************************
 * End of 'MMRP_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  MMRP_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMRP_CONTROL_2.
 */
#define READ_MMRP_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,MMRP_CONTROL_2r_BLKACC,1,MMRP_CONTROL_2r_OFFSET,0,(r._mmrp_control_2), 1)
#define WRITE_MMRP_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,MMRP_CONTROL_2r_BLKACC,1,MMRP_CONTROL_2r_OFFSET,0,&(r._mmrp_control_2), 1)

/*******************************************************************************
 * End of 'MMRP_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_CCP_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CCP_CMIC_RESERVED.
 */
#define READ_MMU_CCP_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CCP_CMIC_RESERVEDr_BLKACC,3,0,0,MMU_CCP_CMIC_RESERVEDr_OFFSET,0,(r._mmu_ccp_cmic_reserved),1)
#define WRITE_MMU_CCP_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CCP_CMIC_RESERVEDr_BLKACC,3,0,0,MMU_CCP_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_ccp_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_CCP_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK0m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK0m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK0m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK0m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK0m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK0m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank0_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank0_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank0_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank0_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK0_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK10
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK10.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK10m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK10m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK10m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank10),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK10m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK10m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK10m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank10),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK10m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK10m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK10m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank10),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK10m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank10_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank10_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank10_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank10_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK10_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK11
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK11.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK11m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK11m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK11m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank11),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK11m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK11m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK11m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank11),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK11m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK11m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK11m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank11),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK11m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank11_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank11_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank11_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank11_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK11_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK12
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK12.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK12m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK12m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK12m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank12),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK12m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK12m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK12m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank12),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK12m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK12m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK12m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank12),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK12m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank12_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank12_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank12_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank12_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK12_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK13
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK13.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK13m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK13m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK13m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank13),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK13m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK13m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK13m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank13),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK13m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK13m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK13m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank13),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK13m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank13_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank13_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank13_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank13_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK13_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK14
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK14.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK14m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK14m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK14m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank14),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK14m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK14m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK14m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank14),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK14m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK14m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK14m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank14),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK14m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank14_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank14_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank14_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank14_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK14_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK15
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK15.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK15m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK15m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK15m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank15),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK15m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK15m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK15m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank15),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK15m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK15m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK15m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank15),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK15m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank15_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank15_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank15_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank15_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK15_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK16
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK16.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK16m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK16m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK16m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank16),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK16m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK16m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK16m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank16),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK16m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK16m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK16m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank16),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK16m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank16_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank16_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank16_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank16_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK16_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK17
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK17.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK17m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK17m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK17m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank17),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK17m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK17m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK17m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank17),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK17m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK17m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK17m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank17),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK17m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank17_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank17_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank17_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank17_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK17_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK18
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK18.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK18m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK18m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK18m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank18),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK18m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK18m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK18m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank18),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK18m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK18m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK18m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank18),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK18m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank18_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank18_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank18_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank18_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK18_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK19
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK19.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK19m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK19m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK19m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank19),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK19m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK19m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK19m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank19),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK19m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK19m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK19m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank19),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK19m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank19_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank19_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank19_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank19_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK19_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK1m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK1m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK1m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK1m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK1m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK1m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank1_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank1_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank1_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank1_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK1_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK20
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK20.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK20m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK20m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK20m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank20),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK20m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK20m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK20m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank20),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK20m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK20m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK20m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank20),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK20m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank20_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank20_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank20_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank20_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK20_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK21
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK21.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK21m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK21m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK21m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank21),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK21m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK21m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK21m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank21),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK21m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK21m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK21m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank21),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK21m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank21_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank21_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank21_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank21_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK21_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK22
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK22.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK22m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK22m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK22m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank22),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK22m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK22m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK22m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank22),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK22m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK22m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK22m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank22),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK22m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank22_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank22_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank22_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank22_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK22_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK23
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK23.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK23m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK23m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK23m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank23),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK23m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK23m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK23m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank23),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK23m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK23m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK23m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank23),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK23m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank23_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank23_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank23_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank23_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK23_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK24
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK24.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK24m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK24m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK24m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank24),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK24m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK24m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK24m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank24),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK24m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK24m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK24m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank24),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK24m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank24_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank24_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank24_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank24_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK24_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK25
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK25.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK25m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK25m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK25m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank25),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK25m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK25m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK25m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank25),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK25m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK25m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK25m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank25),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK25m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank25_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank25_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank25_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank25_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK25_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK26
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK26.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK26m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK26m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK26m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank26),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK26m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK26m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK26m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank26),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK26m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK26m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK26m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank26),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK26m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank26_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank26_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank26_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank26_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK26_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK27
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK27.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK27m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK27m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK27m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank27),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK27m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK27m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK27m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank27),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK27m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK27m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK27m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank27),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK27m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank27_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank27_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank27_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank27_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK27_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK28
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK28.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK28m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK28m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK28m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank28),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK28m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK28m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK28m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank28),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK28m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK28m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK28m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank28),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK28m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank28_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank28_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank28_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank28_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK28_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK29
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK29.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK29m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK29m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK29m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank29),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK29m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK29m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK29m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank29),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK29m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK29m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK29m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank29),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK29m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank29_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank29_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank29_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank29_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK29_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK2
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK2.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK2m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK2m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK2m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank2),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK2m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK2m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK2m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank2),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK2m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK2m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK2m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank2),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank2_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank2_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank2_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank2_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK2_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK30
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK30.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK30m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK30m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK30m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank30),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK30m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK30m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK30m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank30),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK30m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK30m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK30m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank30),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK30m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank30_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank30_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank30_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank30_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK30_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK31
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK31.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK31m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK31m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK31m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank31),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK31m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK31m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK31m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank31),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK31m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK31m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK31m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank31),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK31m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank31_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank31_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank31_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank31_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK31_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK32
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK32.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK32m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK32m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK32m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank32),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK32m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK32m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK32m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank32),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK32m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK32m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK32m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank32),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK32m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank32_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank32_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank32_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank32_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK32_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK33
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK33.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK33m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK33m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK33m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank33),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK33m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK33m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK33m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank33),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK33m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK33m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK33m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank33),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK33m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank33_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank33_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank33_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank33_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK33_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK3
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK3.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK3m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK3m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK3m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank3),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK3m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK3m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK3m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank3),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK3m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK3m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK3m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank3),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank3_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank3_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank3_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank3_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK3_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK4
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK4.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK4m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK4m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK4m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank4),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK4m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK4m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK4m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank4),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK4m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK4m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK4m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank4),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank4_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank4_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank4_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank4_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK4_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK5
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK5.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK5m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK5m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK5m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank5),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK5m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK5m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK5m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank5),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK5m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK5m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK5m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank5),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank5_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank5_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank5_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank5_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK5_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK6
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK6.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK6m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK6m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK6m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank6),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK6m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK6m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK6m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank6),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK6m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK6m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK6m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank6),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank6_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank6_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank6_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank6_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK6_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK7
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK7.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK7m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK7m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK7m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank7),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK7m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK7m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK7m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank7),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK7m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK7m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK7m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank7),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank7_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank7_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank7_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank7_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK7_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK8
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK8.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK8m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK8m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK8m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank8),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK8m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK8m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK8m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank8),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK8m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK8m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK8m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank8),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK8m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank8_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank8_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank8_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank8_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK8_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK9
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK9.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK9m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK9m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK9m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank9),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK9m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK9m_BLKACC,3,n,p,MMU_CCP_COPY_COUNT_INFO_BANK9m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank9),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK9m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK9m_BLKACC,3,-1,p,MMU_CCP_COPY_COUNT_INFO_BANK9m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank9),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK9m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM0_ITM0.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank9_mmu_itm0_itm0),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank9_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM1_ITM1.
 */
#define READ_MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_ccp_copy_count_info_bank9_mmu_itm1_itm1),1)
#define WRITE_MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_ccp_copy_count_info_bank9_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_CCP_COPY_COUNT_INFO_BANK9_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * REGISTER:  MMU_CCP_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CCP_ENABLE_ECCP_MEM.
 */
#define READ_MMU_CCP_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CCP_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_CCP_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_ccp_enable_eccp_mem),1)
#define WRITE_MMU_CCP_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CCP_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_CCP_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_ccp_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_CCP_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CCP_EN_COR_ERR_RPT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CCP_EN_COR_ERR_RPT.
 */
#define READ_MMU_CCP_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CCP_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_CCP_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_ccp_en_cor_err_rpt),1)
#define WRITE_MMU_CCP_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CCP_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_CCP_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_ccp_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_CCP_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CCP_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CCP_TMBUS.
 */
#define READ_MMU_CCP_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CCP_TMBUSr_BLKACC,3,0,0,MMU_CCP_TMBUSr_OFFSET,0,(r._mmu_ccp_tmbus),2)
#define WRITE_MMU_CCP_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CCP_TMBUSr_BLKACC,3,0,0,MMU_CCP_TMBUSr_OFFSET,0,&(r._mmu_ccp_tmbus),2)

/*******************************************************************************
 * End of 'MMU_CCP_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK0_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK0_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK0_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK0_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK0_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk0_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK0_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK0_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK0_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk0_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK0_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK10_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK10_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK10_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK10_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK10_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk10_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK10_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK10_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK10_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk10_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK10_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK11_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK11_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK11_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK11_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK11_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk11_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK11_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK11_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK11_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk11_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK11_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK12_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK12_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK12_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK12_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK12_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk12_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK12_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK12_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK12_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk12_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK12_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK13_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK13_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK13_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK13_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK13_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk13_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK13_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK13_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK13_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk13_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK13_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK14_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK14_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK14_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK14_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK14_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk14_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK14_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK14_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK14_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk14_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK14_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK15_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK15_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK15_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK15_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK15_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk15_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK15_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK15_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK15_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk15_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK15_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK16_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK16_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK16_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK16_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK16_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk16_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK16_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK16_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK16_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk16_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK16_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK17_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK17_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK17_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK17_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK17_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk17_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK17_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK17_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK17_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk17_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK17_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK18_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK18_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK18_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK18_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK18_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk18_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK18_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK18_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK18_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk18_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK18_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK19_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK19_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK19_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK19_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK19_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk19_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK19_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK19_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK19_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk19_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK19_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK1_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK1_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK1_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK1_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK1_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk1_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK1_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK1_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK1_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk1_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK1_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK20_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK20_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK20_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK20_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK20_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk20_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK20_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK20_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK20_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk20_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK20_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK21_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK21_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK21_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK21_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK21_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk21_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK21_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK21_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK21_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk21_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK21_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK22_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK22_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK22_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK22_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK22_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk22_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK22_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK22_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK22_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk22_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK22_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK23_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK23_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK23_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK23_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK23_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk23_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK23_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK23_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK23_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk23_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK23_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK24_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK24_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK24_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK24_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK24_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk24_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK24_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK24_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK24_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk24_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK24_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK25_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK25_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK25_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK25_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK25_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk25_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK25_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK25_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK25_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk25_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK25_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK26_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK26_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK26_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK26_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK26_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk26_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK26_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK26_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK26_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk26_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK26_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK27_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK27_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK27_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK27_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK27_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk27_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK27_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK27_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK27_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk27_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK27_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK28_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK28_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK28_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK28_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK28_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk28_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK28_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK28_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK28_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk28_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK28_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK29_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK29_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK29_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK29_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK29_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk29_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK29_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK29_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK29_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk29_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK29_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK2_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK2_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK2_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK2_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK2_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk2_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK2_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK2_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK2_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk2_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK2_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK30_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK30_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK30_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK30_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK30_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk30_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK30_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK30_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK30_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk30_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK30_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK31_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK31_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK31_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK31_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK31_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk31_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK31_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK31_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK31_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk31_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK31_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK32_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK32_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK32_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK32_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK32_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk32_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK32_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK32_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK32_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk32_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK32_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK33_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK33_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK33_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK33_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK33_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk33_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK33_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK33_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK33_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk33_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK33_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK3_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK3_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK3_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK3_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK3_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk3_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK3_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK3_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK3_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk3_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK3_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK4_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK4_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK4_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK4_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK4_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk4_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK4_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK4_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK4_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk4_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK4_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK5_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK5_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK5_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK5_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK5_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk5_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK5_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK5_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK5_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk5_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK5_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK6_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK6_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK6_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK6_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK6_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk6_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK6_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK6_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK6_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk6_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK6_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK7_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK7_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK7_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK7_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK7_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk7_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK7_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK7_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK7_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk7_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK7_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK8_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK8_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK8_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK8_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK8_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk8_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK8_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK8_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK8_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk8_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK8_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_BNK9_RANKER
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_BNK9_RANKER.
 */
#define READ_MMU_CFAP_ARBITER_BNK9_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_BNK9_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK9_RANKERr_OFFSET,0,(r._mmu_cfap_arbiter_bnk9_ranker),1)
#define WRITE_MMU_CFAP_ARBITER_BNK9_RANKERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_BNK9_RANKERr_BLKACC,3,0,p,MMU_CFAP_ARBITER_BNK9_RANKERr_OFFSET,0,&(r._mmu_cfap_arbiter_bnk9_ranker),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_BNK9_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_CONTROL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_CONTROL.
 */
#define READ_MMU_CFAP_ARBITER_CONTROLr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_CONTROLr_BLKACC,3,0,p,MMU_CFAP_ARBITER_CONTROLr_OFFSET,0,(r._mmu_cfap_arbiter_control),1)
#define WRITE_MMU_CFAP_ARBITER_CONTROLr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_CONTROLr_BLKACC,3,0,p,MMU_CFAP_ARBITER_CONTROLr_OFFSET,0,&(r._mmu_cfap_arbiter_control),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_MASK
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_MASK.
 */
#define READ_MMU_CFAP_ARBITER_MASKr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_MASKr_BLKACC,3,0,p,MMU_CFAP_ARBITER_MASKr_OFFSET,0,(r._mmu_cfap_arbiter_mask),1)
#define WRITE_MMU_CFAP_ARBITER_MASKr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_MASKr_BLKACC,3,0,p,MMU_CFAP_ARBITER_MASKr_OFFSET,0,&(r._mmu_cfap_arbiter_mask),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_MASKr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ARBITER_RANDOM_SEED
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_ARBITER_RANDOM_SEED.
 */
#define READ_MMU_CFAP_ARBITER_RANDOM_SEEDr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ARBITER_RANDOM_SEEDr_BLKACC,3,0,p,MMU_CFAP_ARBITER_RANDOM_SEEDr_OFFSET,i,(r._mmu_cfap_arbiter_random_seed),2)
#define WRITE_MMU_CFAP_ARBITER_RANDOM_SEEDr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ARBITER_RANDOM_SEEDr_BLKACC,3,0,p,MMU_CFAP_ARBITER_RANDOM_SEEDr_OFFSET,i,&(r._mmu_cfap_arbiter_random_seed),2)

/*******************************************************************************
 * End of 'MMU_CFAP_ARBITER_RANDOM_SEEDr'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK0
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK0.
 */
#define READ_MMU_CFAP_BANK0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK0m_BLKACC,3,0,p,MMU_CFAP_BANK0m_OFFSET,i,(m._mmu_cfap_bank0),1)
#define WRITE_MMU_CFAP_BANK0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK0m_BLKACC,3,0,p,MMU_CFAP_BANK0m_OFFSET,i,&(m._mmu_cfap_bank0),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK10
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK10.
 */
#define READ_MMU_CFAP_BANK10m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK10m_BLKACC,3,0,p,MMU_CFAP_BANK10m_OFFSET,i,(m._mmu_cfap_bank10),1)
#define WRITE_MMU_CFAP_BANK10m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK10m_BLKACC,3,0,p,MMU_CFAP_BANK10m_OFFSET,i,&(m._mmu_cfap_bank10),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK10m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK11
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK11.
 */
#define READ_MMU_CFAP_BANK11m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK11m_BLKACC,3,0,p,MMU_CFAP_BANK11m_OFFSET,i,(m._mmu_cfap_bank11),1)
#define WRITE_MMU_CFAP_BANK11m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK11m_BLKACC,3,0,p,MMU_CFAP_BANK11m_OFFSET,i,&(m._mmu_cfap_bank11),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK11m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK12
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK12.
 */
#define READ_MMU_CFAP_BANK12m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK12m_BLKACC,3,0,p,MMU_CFAP_BANK12m_OFFSET,i,(m._mmu_cfap_bank12),1)
#define WRITE_MMU_CFAP_BANK12m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK12m_BLKACC,3,0,p,MMU_CFAP_BANK12m_OFFSET,i,&(m._mmu_cfap_bank12),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK12m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK13
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK13.
 */
#define READ_MMU_CFAP_BANK13m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK13m_BLKACC,3,0,p,MMU_CFAP_BANK13m_OFFSET,i,(m._mmu_cfap_bank13),1)
#define WRITE_MMU_CFAP_BANK13m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK13m_BLKACC,3,0,p,MMU_CFAP_BANK13m_OFFSET,i,&(m._mmu_cfap_bank13),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK13m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK14
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK14.
 */
#define READ_MMU_CFAP_BANK14m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK14m_BLKACC,3,0,p,MMU_CFAP_BANK14m_OFFSET,i,(m._mmu_cfap_bank14),1)
#define WRITE_MMU_CFAP_BANK14m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK14m_BLKACC,3,0,p,MMU_CFAP_BANK14m_OFFSET,i,&(m._mmu_cfap_bank14),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK14m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK15
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK15.
 */
#define READ_MMU_CFAP_BANK15m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK15m_BLKACC,3,0,p,MMU_CFAP_BANK15m_OFFSET,i,(m._mmu_cfap_bank15),1)
#define WRITE_MMU_CFAP_BANK15m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK15m_BLKACC,3,0,p,MMU_CFAP_BANK15m_OFFSET,i,&(m._mmu_cfap_bank15),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK15m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK16
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK16.
 */
#define READ_MMU_CFAP_BANK16m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK16m_BLKACC,3,0,p,MMU_CFAP_BANK16m_OFFSET,i,(m._mmu_cfap_bank16),1)
#define WRITE_MMU_CFAP_BANK16m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK16m_BLKACC,3,0,p,MMU_CFAP_BANK16m_OFFSET,i,&(m._mmu_cfap_bank16),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK16m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK17
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK17.
 */
#define READ_MMU_CFAP_BANK17m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK17m_BLKACC,3,0,p,MMU_CFAP_BANK17m_OFFSET,i,(m._mmu_cfap_bank17),1)
#define WRITE_MMU_CFAP_BANK17m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK17m_BLKACC,3,0,p,MMU_CFAP_BANK17m_OFFSET,i,&(m._mmu_cfap_bank17),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK17m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK18
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK18.
 */
#define READ_MMU_CFAP_BANK18m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK18m_BLKACC,3,0,p,MMU_CFAP_BANK18m_OFFSET,i,(m._mmu_cfap_bank18),1)
#define WRITE_MMU_CFAP_BANK18m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK18m_BLKACC,3,0,p,MMU_CFAP_BANK18m_OFFSET,i,&(m._mmu_cfap_bank18),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK18m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK19
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK19.
 */
#define READ_MMU_CFAP_BANK19m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK19m_BLKACC,3,0,p,MMU_CFAP_BANK19m_OFFSET,i,(m._mmu_cfap_bank19),1)
#define WRITE_MMU_CFAP_BANK19m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK19m_BLKACC,3,0,p,MMU_CFAP_BANK19m_OFFSET,i,&(m._mmu_cfap_bank19),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK19m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK1
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK1.
 */
#define READ_MMU_CFAP_BANK1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK1m_BLKACC,3,0,p,MMU_CFAP_BANK1m_OFFSET,i,(m._mmu_cfap_bank1),1)
#define WRITE_MMU_CFAP_BANK1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK1m_BLKACC,3,0,p,MMU_CFAP_BANK1m_OFFSET,i,&(m._mmu_cfap_bank1),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK20
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK20.
 */
#define READ_MMU_CFAP_BANK20m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK20m_BLKACC,3,0,p,MMU_CFAP_BANK20m_OFFSET,i,(m._mmu_cfap_bank20),1)
#define WRITE_MMU_CFAP_BANK20m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK20m_BLKACC,3,0,p,MMU_CFAP_BANK20m_OFFSET,i,&(m._mmu_cfap_bank20),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK20m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK21
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK21.
 */
#define READ_MMU_CFAP_BANK21m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK21m_BLKACC,3,0,p,MMU_CFAP_BANK21m_OFFSET,i,(m._mmu_cfap_bank21),1)
#define WRITE_MMU_CFAP_BANK21m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK21m_BLKACC,3,0,p,MMU_CFAP_BANK21m_OFFSET,i,&(m._mmu_cfap_bank21),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK21m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK22
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK22.
 */
#define READ_MMU_CFAP_BANK22m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK22m_BLKACC,3,0,p,MMU_CFAP_BANK22m_OFFSET,i,(m._mmu_cfap_bank22),1)
#define WRITE_MMU_CFAP_BANK22m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK22m_BLKACC,3,0,p,MMU_CFAP_BANK22m_OFFSET,i,&(m._mmu_cfap_bank22),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK22m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK23
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK23.
 */
#define READ_MMU_CFAP_BANK23m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK23m_BLKACC,3,0,p,MMU_CFAP_BANK23m_OFFSET,i,(m._mmu_cfap_bank23),1)
#define WRITE_MMU_CFAP_BANK23m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK23m_BLKACC,3,0,p,MMU_CFAP_BANK23m_OFFSET,i,&(m._mmu_cfap_bank23),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK23m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK24
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK24.
 */
#define READ_MMU_CFAP_BANK24m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK24m_BLKACC,3,0,p,MMU_CFAP_BANK24m_OFFSET,i,(m._mmu_cfap_bank24),1)
#define WRITE_MMU_CFAP_BANK24m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK24m_BLKACC,3,0,p,MMU_CFAP_BANK24m_OFFSET,i,&(m._mmu_cfap_bank24),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK24m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK25
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK25.
 */
#define READ_MMU_CFAP_BANK25m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK25m_BLKACC,3,0,p,MMU_CFAP_BANK25m_OFFSET,i,(m._mmu_cfap_bank25),1)
#define WRITE_MMU_CFAP_BANK25m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK25m_BLKACC,3,0,p,MMU_CFAP_BANK25m_OFFSET,i,&(m._mmu_cfap_bank25),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK25m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK26
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK26.
 */
#define READ_MMU_CFAP_BANK26m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK26m_BLKACC,3,0,p,MMU_CFAP_BANK26m_OFFSET,i,(m._mmu_cfap_bank26),1)
#define WRITE_MMU_CFAP_BANK26m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK26m_BLKACC,3,0,p,MMU_CFAP_BANK26m_OFFSET,i,&(m._mmu_cfap_bank26),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK26m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK27
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK27.
 */
#define READ_MMU_CFAP_BANK27m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK27m_BLKACC,3,0,p,MMU_CFAP_BANK27m_OFFSET,i,(m._mmu_cfap_bank27),1)
#define WRITE_MMU_CFAP_BANK27m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK27m_BLKACC,3,0,p,MMU_CFAP_BANK27m_OFFSET,i,&(m._mmu_cfap_bank27),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK27m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK28
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK28.
 */
#define READ_MMU_CFAP_BANK28m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK28m_BLKACC,3,0,p,MMU_CFAP_BANK28m_OFFSET,i,(m._mmu_cfap_bank28),1)
#define WRITE_MMU_CFAP_BANK28m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK28m_BLKACC,3,0,p,MMU_CFAP_BANK28m_OFFSET,i,&(m._mmu_cfap_bank28),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK28m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK29
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK29.
 */
#define READ_MMU_CFAP_BANK29m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK29m_BLKACC,3,0,p,MMU_CFAP_BANK29m_OFFSET,i,(m._mmu_cfap_bank29),1)
#define WRITE_MMU_CFAP_BANK29m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK29m_BLKACC,3,0,p,MMU_CFAP_BANK29m_OFFSET,i,&(m._mmu_cfap_bank29),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK29m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK2
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK2.
 */
#define READ_MMU_CFAP_BANK2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK2m_BLKACC,3,0,p,MMU_CFAP_BANK2m_OFFSET,i,(m._mmu_cfap_bank2),1)
#define WRITE_MMU_CFAP_BANK2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK2m_BLKACC,3,0,p,MMU_CFAP_BANK2m_OFFSET,i,&(m._mmu_cfap_bank2),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK30
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK30.
 */
#define READ_MMU_CFAP_BANK30m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK30m_BLKACC,3,0,p,MMU_CFAP_BANK30m_OFFSET,i,(m._mmu_cfap_bank30),1)
#define WRITE_MMU_CFAP_BANK30m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK30m_BLKACC,3,0,p,MMU_CFAP_BANK30m_OFFSET,i,&(m._mmu_cfap_bank30),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK30m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK31
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK31.
 */
#define READ_MMU_CFAP_BANK31m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK31m_BLKACC,3,0,p,MMU_CFAP_BANK31m_OFFSET,i,(m._mmu_cfap_bank31),1)
#define WRITE_MMU_CFAP_BANK31m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK31m_BLKACC,3,0,p,MMU_CFAP_BANK31m_OFFSET,i,&(m._mmu_cfap_bank31),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK31m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK32
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK32.
 */
#define READ_MMU_CFAP_BANK32m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK32m_BLKACC,3,0,p,MMU_CFAP_BANK32m_OFFSET,i,(m._mmu_cfap_bank32),1)
#define WRITE_MMU_CFAP_BANK32m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK32m_BLKACC,3,0,p,MMU_CFAP_BANK32m_OFFSET,i,&(m._mmu_cfap_bank32),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK32m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK33
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK33.
 */
#define READ_MMU_CFAP_BANK33m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK33m_BLKACC,3,0,p,MMU_CFAP_BANK33m_OFFSET,i,(m._mmu_cfap_bank33),1)
#define WRITE_MMU_CFAP_BANK33m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK33m_BLKACC,3,0,p,MMU_CFAP_BANK33m_OFFSET,i,&(m._mmu_cfap_bank33),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK33m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK3
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK3.
 */
#define READ_MMU_CFAP_BANK3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK3m_BLKACC,3,0,p,MMU_CFAP_BANK3m_OFFSET,i,(m._mmu_cfap_bank3),1)
#define WRITE_MMU_CFAP_BANK3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK3m_BLKACC,3,0,p,MMU_CFAP_BANK3m_OFFSET,i,&(m._mmu_cfap_bank3),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK4
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK4.
 */
#define READ_MMU_CFAP_BANK4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK4m_BLKACC,3,0,p,MMU_CFAP_BANK4m_OFFSET,i,(m._mmu_cfap_bank4),1)
#define WRITE_MMU_CFAP_BANK4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK4m_BLKACC,3,0,p,MMU_CFAP_BANK4m_OFFSET,i,&(m._mmu_cfap_bank4),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK5
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK5.
 */
#define READ_MMU_CFAP_BANK5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK5m_BLKACC,3,0,p,MMU_CFAP_BANK5m_OFFSET,i,(m._mmu_cfap_bank5),1)
#define WRITE_MMU_CFAP_BANK5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK5m_BLKACC,3,0,p,MMU_CFAP_BANK5m_OFFSET,i,&(m._mmu_cfap_bank5),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK6
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK6.
 */
#define READ_MMU_CFAP_BANK6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK6m_BLKACC,3,0,p,MMU_CFAP_BANK6m_OFFSET,i,(m._mmu_cfap_bank6),1)
#define WRITE_MMU_CFAP_BANK6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK6m_BLKACC,3,0,p,MMU_CFAP_BANK6m_OFFSET,i,&(m._mmu_cfap_bank6),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK7
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK7.
 */
#define READ_MMU_CFAP_BANK7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK7m_BLKACC,3,0,p,MMU_CFAP_BANK7m_OFFSET,i,(m._mmu_cfap_bank7),1)
#define WRITE_MMU_CFAP_BANK7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK7m_BLKACC,3,0,p,MMU_CFAP_BANK7m_OFFSET,i,&(m._mmu_cfap_bank7),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK8
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK8.
 */
#define READ_MMU_CFAP_BANK8m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK8m_BLKACC,3,0,p,MMU_CFAP_BANK8m_OFFSET,i,(m._mmu_cfap_bank8),1)
#define WRITE_MMU_CFAP_BANK8m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK8m_BLKACC,3,0,p,MMU_CFAP_BANK8m_OFFSET,i,&(m._mmu_cfap_bank8),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK8m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK9
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK9.
 */
#define READ_MMU_CFAP_BANK9m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CFAP_BANK9m_BLKACC,3,0,p,MMU_CFAP_BANK9m_OFFSET,i,(m._mmu_cfap_bank9),1)
#define WRITE_MMU_CFAP_BANK9m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CFAP_BANK9m_BLKACC,3,0,p,MMU_CFAP_BANK9m_OFFSET,i,&(m._mmu_cfap_bank9),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK9m'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_BANKDISABLE_64
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_BANKDISABLE_64.
 */
#define READ_MMU_CFAP_BANKDISABLE_64r(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_BANKDISABLE_64r_BLKACC,3,0,p,MMU_CFAP_BANKDISABLE_64r_OFFSET,0,(r._mmu_cfap_bankdisable_64),2)
#define WRITE_MMU_CFAP_BANKDISABLE_64r(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_BANKDISABLE_64r_BLKACC,3,0,p,MMU_CFAP_BANKDISABLE_64r_OFFSET,0,&(r._mmu_cfap_bankdisable_64),2)

/*******************************************************************************
 * End of 'MMU_CFAP_BANKDISABLE_64r'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_BANKFULL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANKFULL.
 */
#define READ_MMU_CFAP_BANKFULLr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_BANKFULLr_BLKACC,3,0,p,MMU_CFAP_BANKFULLr_OFFSET,0,(r._mmu_cfap_bankfull),1)
#define WRITE_MMU_CFAP_BANKFULLr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_BANKFULLr_BLKACC,3,0,p,MMU_CFAP_BANKFULLr_OFFSET,0,&(r._mmu_cfap_bankfull),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANKFULLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_BANKSTATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANKSTATUS.
 */
#define READ_MMU_CFAP_BANKSTATUSr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_BANKSTATUSr_BLKACC,3,0,p,MMU_CFAP_BANKSTATUSr_OFFSET,i,(r._mmu_cfap_bankstatus),1)
#define WRITE_MMU_CFAP_BANKSTATUSr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_BANKSTATUSr_BLKACC,3,0,p,MMU_CFAP_BANKSTATUSr_OFFSET,i,&(r._mmu_cfap_bankstatus),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANKSTATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_BANK_PREFETCH_FIFO_LH
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_BANK_PREFETCH_FIFO_LH.
 */
#define READ_MMU_CFAP_BANK_PREFETCH_FIFO_LHr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_BANK_PREFETCH_FIFO_LHr_BLKACC,3,0,p,MMU_CFAP_BANK_PREFETCH_FIFO_LHr_OFFSET,i,(r._mmu_cfap_bank_prefetch_fifo_lh),2)
#define WRITE_MMU_CFAP_BANK_PREFETCH_FIFO_LHr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_BANK_PREFETCH_FIFO_LHr_BLKACC,3,0,p,MMU_CFAP_BANK_PREFETCH_FIFO_LHr_OFFSET,i,&(r._mmu_cfap_bank_prefetch_fifo_lh),2)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK_PREFETCH_FIFO_LHr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_BANK_PREFETCH_FIFO_UH
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_BANK_PREFETCH_FIFO_UH.
 */
#define READ_MMU_CFAP_BANK_PREFETCH_FIFO_UHr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_BANK_PREFETCH_FIFO_UHr_BLKACC,3,0,p,MMU_CFAP_BANK_PREFETCH_FIFO_UHr_OFFSET,i,(r._mmu_cfap_bank_prefetch_fifo_uh),2)
#define WRITE_MMU_CFAP_BANK_PREFETCH_FIFO_UHr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_BANK_PREFETCH_FIFO_UHr_BLKACC,3,0,p,MMU_CFAP_BANK_PREFETCH_FIFO_UHr_OFFSET,i,&(r._mmu_cfap_bank_prefetch_fifo_uh),2)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK_PREFETCH_FIFO_UHr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_BANK_STAT_MONITOR
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BANK_STAT_MONITOR.
 */
#define READ_MMU_CFAP_BANK_STAT_MONITORr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_BANK_STAT_MONITORr_BLKACC,3,0,p,MMU_CFAP_BANK_STAT_MONITORr_OFFSET,0,(r._mmu_cfap_bank_stat_monitor),1)
#define WRITE_MMU_CFAP_BANK_STAT_MONITORr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_BANK_STAT_MONITORr_BLKACC,3,0,p,MMU_CFAP_BANK_STAT_MONITORr_OFFSET,0,&(r._mmu_cfap_bank_stat_monitor),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK_STAT_MONITORr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_BSTCONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BSTCONFIG.
 */
#define READ_MMU_CFAP_BSTCONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_BSTCONFIGr_BLKACC,3,0,p,MMU_CFAP_BSTCONFIGr_OFFSET,0,(r._mmu_cfap_bstconfig),1)
#define WRITE_MMU_CFAP_BSTCONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_BSTCONFIGr_BLKACC,3,0,p,MMU_CFAP_BSTCONFIGr_OFFSET,0,&(r._mmu_cfap_bstconfig),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BSTCONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_BSTSTAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BSTSTAT.
 */
#define READ_MMU_CFAP_BSTSTATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_BSTSTATr_BLKACC,3,0,p,MMU_CFAP_BSTSTATr_OFFSET,0,(r._mmu_cfap_bststat),1)
#define WRITE_MMU_CFAP_BSTSTATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_BSTSTATr_BLKACC,3,0,p,MMU_CFAP_BSTSTATr_OFFSET,0,&(r._mmu_cfap_bststat),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BSTSTATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_BSTTHRS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_BSTTHRS.
 */
#define READ_MMU_CFAP_BSTTHRSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_BSTTHRSr_BLKACC,3,0,p,MMU_CFAP_BSTTHRSr_OFFSET,0,(r._mmu_cfap_bstthrs),1)
#define WRITE_MMU_CFAP_BSTTHRSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_BSTTHRSr_BLKACC,3,0,p,MMU_CFAP_BSTTHRSr_OFFSET,0,&(r._mmu_cfap_bstthrs),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BSTTHRSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_CMIC_RESERVED.
 */
#define READ_MMU_CFAP_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_CFAP_CMIC_RESERVEDr_OFFSET,0,(r._mmu_cfap_cmic_reserved),1)
#define WRITE_MMU_CFAP_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_CFAP_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_cfap_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_CFAP_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_CONFIG.
 */
#define READ_MMU_CFAP_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_CONFIGr_BLKACC,3,0,p,MMU_CFAP_CONFIGr_OFFSET,0,(r._mmu_cfap_config),1)
#define WRITE_MMU_CFAP_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_CONFIGr_BLKACC,3,0,p,MMU_CFAP_CONFIGr_OFFSET,0,&(r._mmu_cfap_config),1)

/*******************************************************************************
 * End of 'MMU_CFAP_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_DROP_CBP
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_DROP_CBP.
 */
#define READ_MMU_CFAP_DROP_CBPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_DROP_CBPr_BLKACC,3,0,p,MMU_CFAP_DROP_CBPr_OFFSET,0,(r._mmu_cfap_drop_cbp),2)
#define WRITE_MMU_CFAP_DROP_CBPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_DROP_CBPr_BLKACC,3,0,p,MMU_CFAP_DROP_CBPr_OFFSET,0,&(r._mmu_cfap_drop_cbp),2)

/*******************************************************************************
 * End of 'MMU_CFAP_DROP_CBPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_DROP_COLLISION
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_DROP_COLLISION.
 */
#define READ_MMU_CFAP_DROP_COLLISIONr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_DROP_COLLISIONr_BLKACC,3,0,p,MMU_CFAP_DROP_COLLISIONr_OFFSET,0,(r._mmu_cfap_drop_collision),2)
#define WRITE_MMU_CFAP_DROP_COLLISIONr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_DROP_COLLISIONr_BLKACC,3,0,p,MMU_CFAP_DROP_COLLISIONr_OFFSET,0,&(r._mmu_cfap_drop_collision),2)

/*******************************************************************************
 * End of 'MMU_CFAP_DROP_COLLISIONr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_DROP_FULL
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_DROP_FULL.
 */
#define READ_MMU_CFAP_DROP_FULLr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_DROP_FULLr_BLKACC,3,0,p,MMU_CFAP_DROP_FULLr_OFFSET,0,(r._mmu_cfap_drop_full),2)
#define WRITE_MMU_CFAP_DROP_FULLr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_DROP_FULLr_BLKACC,3,0,p,MMU_CFAP_DROP_FULLr_OFFSET,0,&(r._mmu_cfap_drop_full),2)

/*******************************************************************************
 * End of 'MMU_CFAP_DROP_FULLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_ENABLE_ECCP_MEM.
 */
#define READ_MMU_CFAP_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_CFAP_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_cfap_enable_eccp_mem),2)
#define WRITE_MMU_CFAP_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_CFAP_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_cfap_enable_eccp_mem),2)

/*******************************************************************************
 * End of 'MMU_CFAP_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_EN_COR_ERR_RPT
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_EN_COR_ERR_RPT.
 */
#define READ_MMU_CFAP_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_CFAP_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_cfap_en_cor_err_rpt),2)
#define WRITE_MMU_CFAP_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_CFAP_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_cfap_en_cor_err_rpt),2)

/*******************************************************************************
 * End of 'MMU_CFAP_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_FILL_LEVEL_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_FILL_LEVEL_CONFIG.
 */
#define READ_MMU_CFAP_FILL_LEVEL_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_FILL_LEVEL_CONFIGr_BLKACC,3,0,0,MMU_CFAP_FILL_LEVEL_CONFIGr_OFFSET,0,(r._mmu_cfap_fill_level_config),1)
#define WRITE_MMU_CFAP_FILL_LEVEL_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_FILL_LEVEL_CONFIGr_BLKACC,3,0,0,MMU_CFAP_FILL_LEVEL_CONFIGr_OFFSET,0,&(r._mmu_cfap_fill_level_config),1)

/*******************************************************************************
 * End of 'MMU_CFAP_FILL_LEVEL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_FULLCOL_CONTROL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_FULLCOL_CONTROL.
 */
#define READ_MMU_CFAP_FULLCOL_CONTROLr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_FULLCOL_CONTROLr_BLKACC,3,0,p,MMU_CFAP_FULLCOL_CONTROLr_OFFSET,0,(r._mmu_cfap_fullcol_control),1)
#define WRITE_MMU_CFAP_FULLCOL_CONTROLr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_FULLCOL_CONTROLr_BLKACC,3,0,p,MMU_CFAP_FULLCOL_CONTROLr_OFFSET,0,&(r._mmu_cfap_fullcol_control),1)

/*******************************************************************************
 * End of 'MMU_CFAP_FULLCOL_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_FULLTHRESHOLDSET
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_FULLTHRESHOLDSET.
 */
#define READ_MMU_CFAP_FULLTHRESHOLDSETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_FULLTHRESHOLDSETr_BLKACC,3,0,p,MMU_CFAP_FULLTHRESHOLDSETr_OFFSET,0,(r._mmu_cfap_fullthresholdset),1)
#define WRITE_MMU_CFAP_FULLTHRESHOLDSETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_FULLTHRESHOLDSETr_BLKACC,3,0,p,MMU_CFAP_FULLTHRESHOLDSETr_OFFSET,0,&(r._mmu_cfap_fullthresholdset),1)

/*******************************************************************************
 * End of 'MMU_CFAP_FULLTHRESHOLDSETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_FULL_RESUME_OFFSET
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_FULL_RESUME_OFFSET.
 */
#define READ_MMU_CFAP_FULL_RESUME_OFFSETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_FULL_RESUME_OFFSETr_BLKACC,3,0,p,MMU_CFAP_FULL_RESUME_OFFSETr_OFFSET,0,(r._mmu_cfap_full_resume_offset),1)
#define WRITE_MMU_CFAP_FULL_RESUME_OFFSETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_FULL_RESUME_OFFSETr_BLKACC,3,0,p,MMU_CFAP_FULL_RESUME_OFFSETr_OFFSET,0,&(r._mmu_cfap_full_resume_offset),1)

/*******************************************************************************
 * End of 'MMU_CFAP_FULL_RESUME_OFFSETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_INIT_64
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_INIT_64.
 */
#define READ_MMU_CFAP_INIT_64r(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_INIT_64r_BLKACC,3,0,p,MMU_CFAP_INIT_64r_OFFSET,0,(r._mmu_cfap_init_64),2)
#define WRITE_MMU_CFAP_INIT_64r(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_INIT_64r_BLKACC,3,0,p,MMU_CFAP_INIT_64r_OFFSET,0,&(r._mmu_cfap_init_64),2)

/*******************************************************************************
 * End of 'MMU_CFAP_INIT_64r'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_INT2_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_INT2_EN.
 */
#define READ_MMU_CFAP_INT2_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_INT2_ENr_BLKACC,3,0,0,MMU_CFAP_INT2_ENr_OFFSET,0,(r._mmu_cfap_int2_en),1)
#define WRITE_MMU_CFAP_INT2_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_INT2_ENr_BLKACC,3,0,0,MMU_CFAP_INT2_ENr_OFFSET,0,&(r._mmu_cfap_int2_en),1)

/*******************************************************************************
 * End of 'MMU_CFAP_INT2_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_INT2_SET
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_INT2_SET.
 */
#define READ_MMU_CFAP_INT2_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_INT2_SETr_BLKACC,3,0,p,MMU_CFAP_INT2_SETr_OFFSET,0,(r._mmu_cfap_int2_set),2)
#define WRITE_MMU_CFAP_INT2_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_INT2_SETr_BLKACC,3,0,p,MMU_CFAP_INT2_SETr_OFFSET,0,&(r._mmu_cfap_int2_set),2)

/*******************************************************************************
 * End of 'MMU_CFAP_INT2_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_INT2_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_INT2_STAT.
 */
#define READ_MMU_CFAP_INT2_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_INT2_STATr_BLKACC,3,0,p,MMU_CFAP_INT2_STATr_OFFSET,0,(r._mmu_cfap_int2_stat),1)
#define WRITE_MMU_CFAP_INT2_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_INT2_STATr_BLKACC,3,0,p,MMU_CFAP_INT2_STATr_OFFSET,0,&(r._mmu_cfap_int2_stat),1)

/*******************************************************************************
 * End of 'MMU_CFAP_INT2_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_INT_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_INT_EN.
 */
#define READ_MMU_CFAP_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_INT_ENr_BLKACC,3,0,0,MMU_CFAP_INT_ENr_OFFSET,0,(r._mmu_cfap_int_en),2)
#define WRITE_MMU_CFAP_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_INT_ENr_BLKACC,3,0,0,MMU_CFAP_INT_ENr_OFFSET,0,&(r._mmu_cfap_int_en),2)

/*******************************************************************************
 * End of 'MMU_CFAP_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_INT_SET
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_INT_SET.
 */
#define READ_MMU_CFAP_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_INT_SETr_BLKACC,3,0,p,MMU_CFAP_INT_SETr_OFFSET,0,(r._mmu_cfap_int_set),2)
#define WRITE_MMU_CFAP_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_INT_SETr_BLKACC,3,0,p,MMU_CFAP_INT_SETr_OFFSET,0,&(r._mmu_cfap_int_set),2)

/*******************************************************************************
 * End of 'MMU_CFAP_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_INT_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_INT_STAT.
 */
#define READ_MMU_CFAP_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_INT_STATr_BLKACC,3,0,p,MMU_CFAP_INT_STATr_OFFSET,0,(r._mmu_cfap_int_stat),2)
#define WRITE_MMU_CFAP_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_INT_STATr_BLKACC,3,0,p,MMU_CFAP_INT_STATr_OFFSET,0,&(r._mmu_cfap_int_stat),2)

/*******************************************************************************
 * End of 'MMU_CFAP_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_RESERVED_KNOBS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_RESERVED_KNOBS.
 */
#define READ_MMU_CFAP_RESERVED_KNOBSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_RESERVED_KNOBSr_BLKACC,3,0,0,MMU_CFAP_RESERVED_KNOBSr_OFFSET,0,(r._mmu_cfap_reserved_knobs),1)
#define WRITE_MMU_CFAP_RESERVED_KNOBSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_RESERVED_KNOBSr_BLKACC,3,0,0,MMU_CFAP_RESERVED_KNOBSr_OFFSET,0,&(r._mmu_cfap_reserved_knobs),1)

/*******************************************************************************
 * End of 'MMU_CFAP_RESERVED_KNOBSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_STATUS.
 */
#define READ_MMU_CFAP_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_STATUSr_BLKACC,3,0,p,MMU_CFAP_STATUSr_OFFSET,0,(r._mmu_cfap_status),1)
#define WRITE_MMU_CFAP_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_STATUSr_BLKACC,3,0,p,MMU_CFAP_STATUSr_OFFSET,0,&(r._mmu_cfap_status),1)

/*******************************************************************************
 * End of 'MMU_CFAP_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_TMBUS.
 */
#define READ_MMU_CFAP_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CFAP_TMBUSr_BLKACC,3,0,0,MMU_CFAP_TMBUSr_OFFSET,0,(r._mmu_cfap_tmbus),2)
#define WRITE_MMU_CFAP_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CFAP_TMBUSr_BLKACC,3,0,0,MMU_CFAP_TMBUSr_OFFSET,0,&(r._mmu_cfap_tmbus),2)

/*******************************************************************************
 * End of 'MMU_CFAP_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CRB_CMIC_RESERVED.
 */
#define READ_MMU_CRB_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_CMIC_RESERVEDr_BLKACC,3,0,0,MMU_CRB_CMIC_RESERVEDr_OFFSET,0,(r._mmu_crb_cmic_reserved),1)
#define WRITE_MMU_CRB_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_CMIC_RESERVEDr_BLKACC,3,0,0,MMU_CRB_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_crb_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_CRB_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CRB_CONFIG.
 */
#define READ_MMU_CRB_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_CONFIGr_BLKACC,3,0,0,MMU_CRB_CONFIGr_OFFSET,0,(r._mmu_crb_config),1)
#define WRITE_MMU_CRB_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_CONFIGr_BLKACC,3,0,0,MMU_CRB_CONFIGr_OFFSET,0,&(r._mmu_crb_config),1)

/*******************************************************************************
 * End of 'MMU_CRB_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_CPU_INT_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CRB_CPU_INT_EN.
 */
#define READ_MMU_CRB_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_CPU_INT_ENr_BLKACC,3,0,0,MMU_CRB_CPU_INT_ENr_OFFSET,0,(r._mmu_crb_cpu_int_en),1)
#define WRITE_MMU_CRB_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_CPU_INT_ENr_BLKACC,3,0,0,MMU_CRB_CPU_INT_ENr_OFFSET,0,&(r._mmu_crb_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_CRB_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_CPU_INT_SET
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CRB_CPU_INT_SET.
 */
#define READ_MMU_CRB_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_CPU_INT_SETr_BLKACC,3,0,p,MMU_CRB_CPU_INT_SETr_OFFSET,0,(r._mmu_crb_cpu_int_set),1)
#define WRITE_MMU_CRB_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_CPU_INT_SETr_BLKACC,3,0,p,MMU_CRB_CPU_INT_SETr_OFFSET,0,&(r._mmu_crb_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_CRB_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_CPU_INT_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CRB_CPU_INT_STAT.
 */
#define READ_MMU_CRB_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_CPU_INT_STATr_BLKACC,3,0,p,MMU_CRB_CPU_INT_STATr_OFFSET,0,(r._mmu_crb_cpu_int_stat),1)
#define WRITE_MMU_CRB_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_CPU_INT_STATr_BLKACC,3,0,p,MMU_CRB_CPU_INT_STATr_OFFSET,0,&(r._mmu_crb_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_CRB_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_CPU_INT_STAT_LOG
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CRB_CPU_INT_STAT_LOG.
 */
#define READ_MMU_CRB_CPU_INT_STAT_LOGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_CPU_INT_STAT_LOGr_BLKACC,3,0,p,MMU_CRB_CPU_INT_STAT_LOGr_OFFSET,0,(r._mmu_crb_cpu_int_stat_log),2)
#define WRITE_MMU_CRB_CPU_INT_STAT_LOGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_CPU_INT_STAT_LOGr_BLKACC,3,0,p,MMU_CRB_CPU_INT_STAT_LOGr_OFFSET,0,&(r._mmu_crb_cpu_int_stat_log),2)

/*******************************************************************************
 * End of 'MMU_CRB_CPU_INT_STAT_LOGr'
 */




/*******************************************************************************
 * MEMORY:  MMU_CRB_CT_DELAY_LINE_IP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     100
 */
/*
 * These macros can be used to access MMU_CRB_CT_DELAY_LINE_IP_MEM.
 */
#define READ_MMU_CRB_CT_DELAY_LINE_IP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CRB_CT_DELAY_LINE_IP_MEMm_BLKACC,3,0,p,MMU_CRB_CT_DELAY_LINE_IP_MEMm_OFFSET,i,(m._mmu_crb_ct_delay_line_ip_mem),4)
#define WRITE_MMU_CRB_CT_DELAY_LINE_IP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CRB_CT_DELAY_LINE_IP_MEMm_BLKACC,3,0,p,MMU_CRB_CT_DELAY_LINE_IP_MEMm_OFFSET,i,&(m._mmu_crb_ct_delay_line_ip_mem),4)

/*******************************************************************************
 * End of 'MMU_CRB_CT_DELAY_LINE_IP_MEMm'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_DEBUG_CNT_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CRB_DEBUG_CNT_CONFIG.
 */
#define READ_MMU_CRB_DEBUG_CNT_CONFIGr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_DEBUG_CNT_CONFIGr_BLKACC,3,0,p,MMU_CRB_DEBUG_CNT_CONFIGr_OFFSET,i,(r._mmu_crb_debug_cnt_config),2)
#define WRITE_MMU_CRB_DEBUG_CNT_CONFIGr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_DEBUG_CNT_CONFIGr_BLKACC,3,0,p,MMU_CRB_DEBUG_CNT_CONFIGr_OFFSET,i,&(r._mmu_crb_debug_cnt_config),2)

/*******************************************************************************
 * End of 'MMU_CRB_DEBUG_CNT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_DEBUG_CT_PKT_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CRB_DEBUG_CT_PKT_COUNT.
 */
#define READ_MMU_CRB_DEBUG_CT_PKT_COUNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_DEBUG_CT_PKT_COUNTr_BLKACC,3,0,p,MMU_CRB_DEBUG_CT_PKT_COUNTr_OFFSET,i,(r._mmu_crb_debug_ct_pkt_count),2)
#define WRITE_MMU_CRB_DEBUG_CT_PKT_COUNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_DEBUG_CT_PKT_COUNTr_BLKACC,3,0,p,MMU_CRB_DEBUG_CT_PKT_COUNTr_OFFSET,i,&(r._mmu_crb_debug_ct_pkt_count),2)

/*******************************************************************************
 * End of 'MMU_CRB_DEBUG_CT_PKT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_DEVICE_PORT_TO_MMU_PORT_MAPPING
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CRB_DEVICE_PORT_TO_MMU_PORT_MAPPING.
 */
#define READ_MMU_CRB_DEVICE_PORT_TO_MMU_PORT_MAPPINGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_DEVICE_PORT_TO_MMU_PORT_MAPPINGr_BLKACC,3,0,p,MMU_CRB_DEVICE_PORT_TO_MMU_PORT_MAPPINGr_OFFSET,0,(r._mmu_crb_device_port_to_mmu_port_mapping),1)
#define WRITE_MMU_CRB_DEVICE_PORT_TO_MMU_PORT_MAPPINGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_DEVICE_PORT_TO_MMU_PORT_MAPPINGr_BLKACC,3,0,p,MMU_CRB_DEVICE_PORT_TO_MMU_PORT_MAPPINGr_OFFSET,0,&(r._mmu_crb_device_port_to_mmu_port_mapping),1)

/*******************************************************************************
 * End of 'MMU_CRB_DEVICE_PORT_TO_MMU_PORT_MAPPINGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CRB_ENABLE_ECCP_MEM.
 */
#define READ_MMU_CRB_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_CRB_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_crb_enable_eccp_mem),1)
#define WRITE_MMU_CRB_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_CRB_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_crb_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_CRB_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_EN_COR_ERR_RPT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CRB_EN_COR_ERR_RPT.
 */
#define READ_MMU_CRB_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_CRB_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_crb_en_cor_err_rpt),1)
#define WRITE_MMU_CRB_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_CRB_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_crb_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_CRB_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_INVALID_DESTINATION_PKT_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CRB_INVALID_DESTINATION_PKT_COUNT.
 */
#define READ_MMU_CRB_INVALID_DESTINATION_PKT_COUNTr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_INVALID_DESTINATION_PKT_COUNTr_BLKACC,3,0,p,MMU_CRB_INVALID_DESTINATION_PKT_COUNTr_OFFSET,0,(r._mmu_crb_invalid_destination_pkt_count),2)
#define WRITE_MMU_CRB_INVALID_DESTINATION_PKT_COUNTr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_INVALID_DESTINATION_PKT_COUNTr_BLKACC,3,0,p,MMU_CRB_INVALID_DESTINATION_PKT_COUNTr_OFFSET,0,&(r._mmu_crb_invalid_destination_pkt_count),2)

/*******************************************************************************
 * End of 'MMU_CRB_INVALID_DESTINATION_PKT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_INVALID_DESTINATION_PKT_ID
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CRB_INVALID_DESTINATION_PKT_ID.
 */
#define READ_MMU_CRB_INVALID_DESTINATION_PKT_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_INVALID_DESTINATION_PKT_IDr_BLKACC,3,0,p,MMU_CRB_INVALID_DESTINATION_PKT_IDr_OFFSET,0,(r._mmu_crb_invalid_destination_pkt_id),1)
#define WRITE_MMU_CRB_INVALID_DESTINATION_PKT_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_INVALID_DESTINATION_PKT_IDr_BLKACC,3,0,p,MMU_CRB_INVALID_DESTINATION_PKT_IDr_OFFSET,0,&(r._mmu_crb_invalid_destination_pkt_id),1)

/*******************************************************************************
 * End of 'MMU_CRB_INVALID_DESTINATION_PKT_IDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_PKT_DROP_CNTR_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CRB_PKT_DROP_CNTR_STAT.
 */
#define READ_MMU_CRB_PKT_DROP_CNTR_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_PKT_DROP_CNTR_STATr_BLKACC,3,0,p,MMU_CRB_PKT_DROP_CNTR_STATr_OFFSET,0,(r._mmu_crb_pkt_drop_cntr_stat),2)
#define WRITE_MMU_CRB_PKT_DROP_CNTR_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_PKT_DROP_CNTR_STATr_BLKACC,3,0,p,MMU_CRB_PKT_DROP_CNTR_STATr_OFFSET,0,&(r._mmu_crb_pkt_drop_cntr_stat),2)

/*******************************************************************************
 * End of 'MMU_CRB_PKT_DROP_CNTR_STATr'
 */




/*******************************************************************************
 * MEMORY:  MMU_CRB_RL_DELAY_LINE_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     63
 */
/*
 * These macros can be used to access MMU_CRB_RL_DELAY_LINE_MEM.
 */
#define READ_MMU_CRB_RL_DELAY_LINE_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CRB_RL_DELAY_LINE_MEMm_BLKACC,3,0,p,MMU_CRB_RL_DELAY_LINE_MEMm_OFFSET,i,(m._mmu_crb_rl_delay_line_mem),2)
#define WRITE_MMU_CRB_RL_DELAY_LINE_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CRB_RL_DELAY_LINE_MEMm_BLKACC,3,0,p,MMU_CRB_RL_DELAY_LINE_MEMm_OFFSET,i,&(m._mmu_crb_rl_delay_line_mem),2)

/*******************************************************************************
 * End of 'MMU_CRB_RL_DELAY_LINE_MEMm'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_SRC_PORT_CFG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CRB_SRC_PORT_CFG.
 */
#define READ_MMU_CRB_SRC_PORT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_SRC_PORT_CFGr_BLKACC,3,0,p,MMU_CRB_SRC_PORT_CFGr_OFFSET,0,(r._mmu_crb_src_port_cfg),1)
#define WRITE_MMU_CRB_SRC_PORT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_SRC_PORT_CFGr_BLKACC,3,0,p,MMU_CRB_SRC_PORT_CFGr_OFFSET,0,&(r._mmu_crb_src_port_cfg),1)

/*******************************************************************************
 * End of 'MMU_CRB_SRC_PORT_CFGr'
 */




/*******************************************************************************
 * MEMORY:  MMU_CRB_THD_DELAY_LINE_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     110
 */
/*
 * These macros can be used to access MMU_CRB_THD_DELAY_LINE_MEM.
 */
#define READ_MMU_CRB_THD_DELAY_LINE_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_CRB_THD_DELAY_LINE_MEMm_BLKACC,3,0,p,MMU_CRB_THD_DELAY_LINE_MEMm_OFFSET,i,(m._mmu_crb_thd_delay_line_mem),4)
#define WRITE_MMU_CRB_THD_DELAY_LINE_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_CRB_THD_DELAY_LINE_MEMm_BLKACC,3,0,p,MMU_CRB_THD_DELAY_LINE_MEMm_OFFSET,i,&(m._mmu_crb_thd_delay_line_mem),4)

/*******************************************************************************
 * End of 'MMU_CRB_THD_DELAY_LINE_MEMm'
 */




/*******************************************************************************
 * REGISTER:  MMU_CRB_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CRB_TMBUS.
 */
#define READ_MMU_CRB_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_CRB_TMBUSr_BLKACC,3,0,0,MMU_CRB_TMBUSr_OFFSET,0,(r._mmu_crb_tmbus),2)
#define WRITE_MMU_CRB_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_CRB_TMBUSr_BLKACC,3,0,0,MMU_CRB_TMBUSr_OFFSET,0,&(r._mmu_crb_tmbus),2)

/*******************************************************************************
 * End of 'MMU_CRB_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFG_CMIC_RESERVED
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFG_CMIC_RESERVED.
 */
#define READ_MMU_EBCFG_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFG_CMIC_RESERVEDr_BLKACC,4,0,p,MMU_EBCFG_CMIC_RESERVEDr_OFFSET,0,(r._mmu_ebcfg_cmic_reserved),1)
#define WRITE_MMU_EBCFG_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFG_CMIC_RESERVEDr_BLKACC,4,0,p,MMU_EBCFG_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_ebcfg_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_EBCFG_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFG_CPU_INT_EN
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFG_CPU_INT_EN.
 */
#define READ_MMU_EBCFG_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFG_CPU_INT_ENr_BLKACC,4,0,0,MMU_EBCFG_CPU_INT_ENr_OFFSET,0,(r._mmu_ebcfg_cpu_int_en),1)
#define WRITE_MMU_EBCFG_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFG_CPU_INT_ENr_BLKACC,4,0,0,MMU_EBCFG_CPU_INT_ENr_OFFSET,0,&(r._mmu_ebcfg_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_EBCFG_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFG_CPU_INT_SET
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFG_CPU_INT_SET.
 */
#define READ_MMU_EBCFG_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFG_CPU_INT_SETr_BLKACC,4,0,p,MMU_EBCFG_CPU_INT_SETr_OFFSET,0,(r._mmu_ebcfg_cpu_int_set),1)
#define WRITE_MMU_EBCFG_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFG_CPU_INT_SETr_BLKACC,4,0,p,MMU_EBCFG_CPU_INT_SETr_OFFSET,0,&(r._mmu_ebcfg_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_EBCFG_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFG_CPU_INT_STAT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFG_CPU_INT_STAT.
 */
#define READ_MMU_EBCFG_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFG_CPU_INT_STATr_BLKACC,4,0,p,MMU_EBCFG_CPU_INT_STATr_OFFSET,0,(r._mmu_ebcfg_cpu_int_stat),1)
#define WRITE_MMU_EBCFG_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFG_CPU_INT_STATr_BLKACC,4,0,p,MMU_EBCFG_CPU_INT_STATr_OFFSET,0,&(r._mmu_ebcfg_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_EBCFG_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFG_ECC_SINGLE_BIT_ERRORS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFG_ECC_SINGLE_BIT_ERRORS.
 */
#define READ_MMU_EBCFG_ECC_SINGLE_BIT_ERRORSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFG_ECC_SINGLE_BIT_ERRORSr_BLKACC,4,0,p,MMU_EBCFG_ECC_SINGLE_BIT_ERRORSr_OFFSET,0,(r._mmu_ebcfg_ecc_single_bit_errors),1)
#define WRITE_MMU_EBCFG_ECC_SINGLE_BIT_ERRORSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFG_ECC_SINGLE_BIT_ERRORSr_BLKACC,4,0,p,MMU_EBCFG_ECC_SINGLE_BIT_ERRORSr_OFFSET,0,&(r._mmu_ebcfg_ecc_single_bit_errors),1)

/*******************************************************************************
 * End of 'MMU_EBCFG_ECC_SINGLE_BIT_ERRORSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBCFG_MEM_FAIL_ADDR_64
 * BLOCKS:   MMU_EB
 * SIZE:     35
 */
/*
 * These macros can be used to access MMU_EBCFG_MEM_FAIL_ADDR_64.
 */
#define READ_MMU_EBCFG_MEM_FAIL_ADDR_64m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBCFG_MEM_FAIL_ADDR_64m_BLKACC,4,0,p,MMU_EBCFG_MEM_FAIL_ADDR_64m_OFFSET,i,(m._mmu_ebcfg_mem_fail_addr_64),2)
#define WRITE_MMU_EBCFG_MEM_FAIL_ADDR_64m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBCFG_MEM_FAIL_ADDR_64m_BLKACC,4,0,p,MMU_EBCFG_MEM_FAIL_ADDR_64m_OFFSET,i,&(m._mmu_ebcfg_mem_fail_addr_64),2)

/*******************************************************************************
 * End of 'MMU_EBCFG_MEM_FAIL_ADDR_64m'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFG_MEM_FAIL_INT_CTR
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFG_MEM_FAIL_INT_CTR.
 */
#define READ_MMU_EBCFG_MEM_FAIL_INT_CTRr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFG_MEM_FAIL_INT_CTRr_BLKACC,4,0,p,MMU_EBCFG_MEM_FAIL_INT_CTRr_OFFSET,0,(r._mmu_ebcfg_mem_fail_int_ctr),1)
#define WRITE_MMU_EBCFG_MEM_FAIL_INT_CTRr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFG_MEM_FAIL_INT_CTRr_BLKACC,4,0,p,MMU_EBCFG_MEM_FAIL_INT_CTRr_OFFSET,0,&(r._mmu_ebcfg_mem_fail_int_ctr),1)

/*******************************************************************************
 * End of 'MMU_EBCFG_MEM_FAIL_INT_CTRr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFG_MEM_SER_FIFO_STS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFG_MEM_SER_FIFO_STS.
 */
#define READ_MMU_EBCFG_MEM_SER_FIFO_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFG_MEM_SER_FIFO_STSr_BLKACC,4,0,p,MMU_EBCFG_MEM_SER_FIFO_STSr_OFFSET,0,(r._mmu_ebcfg_mem_ser_fifo_sts),1)
#define WRITE_MMU_EBCFG_MEM_SER_FIFO_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFG_MEM_SER_FIFO_STSr_BLKACC,4,0,p,MMU_EBCFG_MEM_SER_FIFO_STSr_OFFSET,0,&(r._mmu_ebcfg_mem_ser_fifo_sts),1)

/*******************************************************************************
 * End of 'MMU_EBCFG_MEM_SER_FIFO_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_CMIC_RESERVED
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_CMIC_RESERVED.
 */
#define READ_MMU_EBCFP_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_CMIC_RESERVEDr_BLKACC,4,0,p,MMU_EBCFP_CMIC_RESERVEDr_OFFSET,0,(r._mmu_ebcfp_cmic_reserved),1)
#define WRITE_MMU_EBCFP_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_CMIC_RESERVEDr_BLKACC,4,0,p,MMU_EBCFP_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_ebcfp_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_CPU_INT_EN
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_CPU_INT_EN.
 */
#define READ_MMU_EBCFP_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_CPU_INT_ENr_BLKACC,4,0,0,MMU_EBCFP_CPU_INT_ENr_OFFSET,0,(r._mmu_ebcfp_cpu_int_en),1)
#define WRITE_MMU_EBCFP_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_CPU_INT_ENr_BLKACC,4,0,0,MMU_EBCFP_CPU_INT_ENr_OFFSET,0,&(r._mmu_ebcfp_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_CPU_INT_SET
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_CPU_INT_SET.
 */
#define READ_MMU_EBCFP_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_CPU_INT_SETr_BLKACC,4,0,p,MMU_EBCFP_CPU_INT_SETr_OFFSET,0,(r._mmu_ebcfp_cpu_int_set),1)
#define WRITE_MMU_EBCFP_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_CPU_INT_SETr_BLKACC,4,0,p,MMU_EBCFP_CPU_INT_SETr_OFFSET,0,&(r._mmu_ebcfp_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_CPU_INT_STAT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_CPU_INT_STAT.
 */
#define READ_MMU_EBCFP_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_CPU_INT_STATr_BLKACC,4,0,p,MMU_EBCFP_CPU_INT_STATr_OFFSET,0,(r._mmu_ebcfp_cpu_int_stat),1)
#define WRITE_MMU_EBCFP_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_CPU_INT_STATr_BLKACC,4,0,p,MMU_EBCFP_CPU_INT_STATr_OFFSET,0,&(r._mmu_ebcfp_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_DD_PURGE_STATUS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_DD_PURGE_STATUS.
 */
#define READ_MMU_EBCFP_DD_PURGE_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_DD_PURGE_STATUSr_BLKACC,4,0,p,MMU_EBCFP_DD_PURGE_STATUSr_OFFSET,0,(r._mmu_ebcfp_dd_purge_status),1)
#define WRITE_MMU_EBCFP_DD_PURGE_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_DD_PURGE_STATUSr_BLKACC,4,0,p,MMU_EBCFP_DD_PURGE_STATUSr_OFFSET,0,&(r._mmu_ebcfp_dd_purge_status),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_DD_PURGE_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_EGR_PORT_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_EGR_PORT_CFG.
 */
#define READ_MMU_EBCFP_EGR_PORT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_EGR_PORT_CFGr_BLKACC,4,0,p,MMU_EBCFP_EGR_PORT_CFGr_OFFSET,0,(r._mmu_ebcfp_egr_port_cfg),1)
#define WRITE_MMU_EBCFP_EGR_PORT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_EGR_PORT_CFGr_BLKACC,4,0,p,MMU_EBCFP_EGR_PORT_CFGr_OFFSET,0,&(r._mmu_ebcfp_egr_port_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_EGR_PORT_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_ENABLE_ECCP_MEM.
 */
#define READ_MMU_EBCFP_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_ENABLE_ECCP_MEMr_BLKACC,4,0,0,MMU_EBCFP_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_ebcfp_enable_eccp_mem),1)
#define WRITE_MMU_EBCFP_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_ENABLE_ECCP_MEMr_BLKACC,4,0,0,MMU_EBCFP_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_ebcfp_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_EN_COR_ERR_RPT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_EN_COR_ERR_RPT.
 */
#define READ_MMU_EBCFP_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_EN_COR_ERR_RPTr_BLKACC,4,0,0,MMU_EBCFP_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_ebcfp_en_cor_err_rpt),1)
#define WRITE_MMU_EBCFP_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_EN_COR_ERR_RPTr_BLKACC,4,0,0,MMU_EBCFP_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_ebcfp_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBCFP_FAP_BITMAP_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     39
 */
/*
 * These macros can be used to access MMU_EBCFP_FAP_BITMAP_MEM.
 */
#define READ_MMU_EBCFP_FAP_BITMAP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBCFP_FAP_BITMAP_MEMm_BLKACC,4,0,p,MMU_EBCFP_FAP_BITMAP_MEMm_OFFSET,i,(m._mmu_ebcfp_fap_bitmap_mem),2)
#define WRITE_MMU_EBCFP_FAP_BITMAP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBCFP_FAP_BITMAP_MEMm_BLKACC,4,0,p,MMU_EBCFP_FAP_BITMAP_MEMm_OFFSET,i,&(m._mmu_ebcfp_fap_bitmap_mem),2)

/*******************************************************************************
 * End of 'MMU_EBCFP_FAP_BITMAP_MEMm'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_FAP_FULL_THRESHOLD_RESET
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_FAP_FULL_THRESHOLD_RESET.
 */
#define READ_MMU_EBCFP_FAP_FULL_THRESHOLD_RESETr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_FAP_FULL_THRESHOLD_RESETr_BLKACC,4,0,0,MMU_EBCFP_FAP_FULL_THRESHOLD_RESETr_OFFSET,0,(r._mmu_ebcfp_fap_full_threshold_reset),1)
#define WRITE_MMU_EBCFP_FAP_FULL_THRESHOLD_RESETr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_FAP_FULL_THRESHOLD_RESETr_BLKACC,4,0,0,MMU_EBCFP_FAP_FULL_THRESHOLD_RESETr_OFFSET,0,&(r._mmu_ebcfp_fap_full_threshold_reset),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_FAP_FULL_THRESHOLD_RESETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_FAP_FULL_THRESHOLD_SET
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_FAP_FULL_THRESHOLD_SET.
 */
#define READ_MMU_EBCFP_FAP_FULL_THRESHOLD_SETr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_FAP_FULL_THRESHOLD_SETr_BLKACC,4,0,0,MMU_EBCFP_FAP_FULL_THRESHOLD_SETr_OFFSET,0,(r._mmu_ebcfp_fap_full_threshold_set),1)
#define WRITE_MMU_EBCFP_FAP_FULL_THRESHOLD_SETr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_FAP_FULL_THRESHOLD_SETr_BLKACC,4,0,0,MMU_EBCFP_FAP_FULL_THRESHOLD_SETr_OFFSET,0,&(r._mmu_ebcfp_fap_full_threshold_set),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_FAP_FULL_THRESHOLD_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_FORCE_CPU_INIT_TO_FAP
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_FORCE_CPU_INIT_TO_FAP.
 */
#define READ_MMU_EBCFP_FORCE_CPU_INIT_TO_FAPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_FORCE_CPU_INIT_TO_FAPr_BLKACC,4,0,p,MMU_EBCFP_FORCE_CPU_INIT_TO_FAPr_OFFSET,0,(r._mmu_ebcfp_force_cpu_init_to_fap),1)
#define WRITE_MMU_EBCFP_FORCE_CPU_INIT_TO_FAPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_FORCE_CPU_INIT_TO_FAPr_BLKACC,4,0,p,MMU_EBCFP_FORCE_CPU_INIT_TO_FAPr_OFFSET,0,&(r._mmu_ebcfp_force_cpu_init_to_fap),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_FORCE_CPU_INIT_TO_FAPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_INIT_DONE
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_INIT_DONE.
 */
#define READ_MMU_EBCFP_INIT_DONEr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_INIT_DONEr_BLKACC,4,0,p,MMU_EBCFP_INIT_DONEr_OFFSET,0,(r._mmu_ebcfp_init_done),1)
#define WRITE_MMU_EBCFP_INIT_DONEr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_INIT_DONEr_BLKACC,4,0,p,MMU_EBCFP_INIT_DONEr_OFFSET,0,&(r._mmu_ebcfp_init_done),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_INIT_DONEr'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBCFP_LAT_ABS_FIFO
 * BLOCKS:   MMU_EB
 * SIZE:     215
 */
/*
 * These macros can be used to access MMU_EBCFP_LAT_ABS_FIFO.
 */
#define READ_MMU_EBCFP_LAT_ABS_FIFOm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBCFP_LAT_ABS_FIFOm_BLKACC,4,0,p,MMU_EBCFP_LAT_ABS_FIFOm_OFFSET,i,(m._mmu_ebcfp_lat_abs_fifo),7)
#define WRITE_MMU_EBCFP_LAT_ABS_FIFOm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBCFP_LAT_ABS_FIFOm_BLKACC,4,0,p,MMU_EBCFP_LAT_ABS_FIFOm_OFFSET,i,&(m._mmu_ebcfp_lat_abs_fifo),7)

/*******************************************************************************
 * End of 'MMU_EBCFP_LAT_ABS_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_MMUQ_EBGRP_PROFILE
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_MMUQ_EBGRP_PROFILE.
 */
#define READ_MMU_EBCFP_MMUQ_EBGRP_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_MMUQ_EBGRP_PROFILEr_BLKACC,4,0,0,MMU_EBCFP_MMUQ_EBGRP_PROFILEr_OFFSET,i,(r._mmu_ebcfp_mmuq_ebgrp_profile),1)
#define WRITE_MMU_EBCFP_MMUQ_EBGRP_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_MMUQ_EBGRP_PROFILEr_BLKACC,4,0,0,MMU_EBCFP_MMUQ_EBGRP_PROFILEr_OFFSET,i,&(r._mmu_ebcfp_mmuq_ebgrp_profile),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_MMUQ_EBGRP_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_MMU_PORT_TO_DEVICE_PORT_MAPPING
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_MMU_PORT_TO_DEVICE_PORT_MAPPING.
 */
#define READ_MMU_EBCFP_MMU_PORT_TO_DEVICE_PORT_MAPPINGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_MMU_PORT_TO_DEVICE_PORT_MAPPINGr_BLKACC,4,0,p,MMU_EBCFP_MMU_PORT_TO_DEVICE_PORT_MAPPINGr_OFFSET,0,(r._mmu_ebcfp_mmu_port_to_device_port_mapping),1)
#define WRITE_MMU_EBCFP_MMU_PORT_TO_DEVICE_PORT_MAPPINGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_MMU_PORT_TO_DEVICE_PORT_MAPPINGr_BLKACC,4,0,p,MMU_EBCFP_MMU_PORT_TO_DEVICE_PORT_MAPPINGr_OFFSET,0,&(r._mmu_ebcfp_mmu_port_to_device_port_mapping),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_MMU_PORT_TO_DEVICE_PORT_MAPPINGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_MTRO_PORT_PROFILE_STATUS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_MTRO_PORT_PROFILE_STATUS.
 */
#define READ_MMU_EBCFP_MTRO_PORT_PROFILE_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_MTRO_PORT_PROFILE_STATUSr_BLKACC,4,0,p,MMU_EBCFP_MTRO_PORT_PROFILE_STATUSr_OFFSET,0,(r._mmu_ebcfp_mtro_port_profile_status),1)
#define WRITE_MMU_EBCFP_MTRO_PORT_PROFILE_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_MTRO_PORT_PROFILE_STATUSr_BLKACC,4,0,p,MMU_EBCFP_MTRO_PORT_PROFILE_STATUSr_OFFSET,0,&(r._mmu_ebcfp_mtro_port_profile_status),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_MTRO_PORT_PROFILE_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBCFP_MXM_TAG_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     13
 */
/*
 * These macros can be used to access MMU_EBCFP_MXM_TAG_MEM.
 */
#define READ_MMU_EBCFP_MXM_TAG_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBCFP_MXM_TAG_MEMm_BLKACC,4,0,p,MMU_EBCFP_MXM_TAG_MEMm_OFFSET,i,(m._mmu_ebcfp_mxm_tag_mem),1)
#define WRITE_MMU_EBCFP_MXM_TAG_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBCFP_MXM_TAG_MEMm_BLKACC,4,0,p,MMU_EBCFP_MXM_TAG_MEMm_OFFSET,i,&(m._mmu_ebcfp_mxm_tag_mem),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_MXM_TAG_MEMm'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_POOL_COUNTER
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCFP_POOL_COUNTER.
 */
#define READ_MMU_EBCFP_POOL_COUNTERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_POOL_COUNTERr_BLKACC,4,0,p,MMU_EBCFP_POOL_COUNTERr_OFFSET,0,(r._mmu_ebcfp_pool_counter),1)
#define WRITE_MMU_EBCFP_POOL_COUNTERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_POOL_COUNTERr_BLKACC,4,0,p,MMU_EBCFP_POOL_COUNTERr_OFFSET,0,&(r._mmu_ebcfp_pool_counter),1)

/*******************************************************************************
 * End of 'MMU_EBCFP_POOL_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCFP_TMBUS
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBCFP_TMBUS.
 */
#define READ_MMU_EBCFP_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCFP_TMBUSr_BLKACC,4,0,0,MMU_EBCFP_TMBUSr_OFFSET,0,(r._mmu_ebcfp_tmbus),2)
#define WRITE_MMU_EBCFP_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCFP_TMBUSr_BLKACC,4,0,0,MMU_EBCFP_TMBUSr_OFFSET,0,&(r._mmu_ebcfp_tmbus),2)

/*******************************************************************************
 * End of 'MMU_EBCFP_TMBUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBCR_CELL_INFO_TILE0
 * BLOCKS:   MMU_EB
 * SIZE:     30
 */
/*
 * These macros can be used to access MMU_EBCR_CELL_INFO_TILE0.
 */
#define READ_MMU_EBCR_CELL_INFO_TILE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBCR_CELL_INFO_TILE0m_BLKACC,4,0,p,MMU_EBCR_CELL_INFO_TILE0m_OFFSET,i,(m._mmu_ebcr_cell_info_tile0),1)
#define WRITE_MMU_EBCR_CELL_INFO_TILE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBCR_CELL_INFO_TILE0m_BLKACC,4,0,p,MMU_EBCR_CELL_INFO_TILE0m_OFFSET,i,&(m._mmu_ebcr_cell_info_tile0),1)

/*******************************************************************************
 * End of 'MMU_EBCR_CELL_INFO_TILE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBCR_CELL_INFO_TILE1
 * BLOCKS:   MMU_EB
 * SIZE:     30
 */
/*
 * These macros can be used to access MMU_EBCR_CELL_INFO_TILE1.
 */
#define READ_MMU_EBCR_CELL_INFO_TILE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBCR_CELL_INFO_TILE1m_BLKACC,4,0,p,MMU_EBCR_CELL_INFO_TILE1m_OFFSET,i,(m._mmu_ebcr_cell_info_tile1),1)
#define WRITE_MMU_EBCR_CELL_INFO_TILE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBCR_CELL_INFO_TILE1m_BLKACC,4,0,p,MMU_EBCR_CELL_INFO_TILE1m_OFFSET,i,&(m._mmu_ebcr_cell_info_tile1),1)

/*******************************************************************************
 * End of 'MMU_EBCR_CELL_INFO_TILE1m'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCR_CMIC_RESERVED
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCR_CMIC_RESERVED.
 */
#define READ_MMU_EBCR_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCR_CMIC_RESERVEDr_BLKACC,4,0,0,MMU_EBCR_CMIC_RESERVEDr_OFFSET,0,(r._mmu_ebcr_cmic_reserved),1)
#define WRITE_MMU_EBCR_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCR_CMIC_RESERVEDr_BLKACC,4,0,0,MMU_EBCR_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_ebcr_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_EBCR_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCR_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCR_ENABLE_ECCP_MEM.
 */
#define READ_MMU_EBCR_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCR_ENABLE_ECCP_MEMr_BLKACC,4,0,0,MMU_EBCR_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_ebcr_enable_eccp_mem),1)
#define WRITE_MMU_EBCR_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCR_ENABLE_ECCP_MEMr_BLKACC,4,0,0,MMU_EBCR_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_ebcr_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_EBCR_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCR_EN_COR_ERR_RPT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCR_EN_COR_ERR_RPT.
 */
#define READ_MMU_EBCR_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCR_EN_COR_ERR_RPTr_BLKACC,4,0,0,MMU_EBCR_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_ebcr_en_cor_err_rpt),1)
#define WRITE_MMU_EBCR_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCR_EN_COR_ERR_RPTr_BLKACC,4,0,0,MMU_EBCR_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_ebcr_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_EBCR_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCR_TILE0_STATE_VECTOR
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBCR_TILE0_STATE_VECTOR.
 */
#define READ_MMU_EBCR_TILE0_STATE_VECTORr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCR_TILE0_STATE_VECTORr_BLKACC,4,0,p,MMU_EBCR_TILE0_STATE_VECTORr_OFFSET,i,(r._mmu_ebcr_tile0_state_vector),2)
#define WRITE_MMU_EBCR_TILE0_STATE_VECTORr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCR_TILE0_STATE_VECTORr_BLKACC,4,0,p,MMU_EBCR_TILE0_STATE_VECTORr_OFFSET,i,&(r._mmu_ebcr_tile0_state_vector),2)

/*******************************************************************************
 * End of 'MMU_EBCR_TILE0_STATE_VECTORr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCR_TILE1_STATE_VECTOR
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBCR_TILE1_STATE_VECTOR.
 */
#define READ_MMU_EBCR_TILE1_STATE_VECTORr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCR_TILE1_STATE_VECTORr_BLKACC,4,0,p,MMU_EBCR_TILE1_STATE_VECTORr_OFFSET,i,(r._mmu_ebcr_tile1_state_vector),2)
#define WRITE_MMU_EBCR_TILE1_STATE_VECTORr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCR_TILE1_STATE_VECTORr_BLKACC,4,0,p,MMU_EBCR_TILE1_STATE_VECTORr_OFFSET,i,&(r._mmu_ebcr_tile1_state_vector),2)

/*******************************************************************************
 * End of 'MMU_EBCR_TILE1_STATE_VECTORr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCR_TMBUS
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBCR_TMBUS.
 */
#define READ_MMU_EBCR_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCR_TMBUSr_BLKACC,4,0,0,MMU_EBCR_TMBUSr_OFFSET,0,(r._mmu_ebcr_tmbus),2)
#define WRITE_MMU_EBCR_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCR_TMBUSr_BLKACC,4,0,0,MMU_EBCR_TMBUSr_OFFSET,0,&(r._mmu_ebcr_tmbus),2)

/*******************************************************************************
 * End of 'MMU_EBCR_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_BURST_CTRL_STS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_BURST_CTRL_STS.
 */
#define READ_MMU_EBCTM_BURST_CTRL_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_BURST_CTRL_STSr_BLKACC,4,0,p,MMU_EBCTM_BURST_CTRL_STSr_OFFSET,0,(r._mmu_ebctm_burst_ctrl_sts),1)
#define WRITE_MMU_EBCTM_BURST_CTRL_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_BURST_CTRL_STSr_BLKACC,4,0,p,MMU_EBCTM_BURST_CTRL_STSr_OFFSET,0,&(r._mmu_ebctm_burst_ctrl_sts),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_BURST_CTRL_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CMIC_RESERVED
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CMIC_RESERVED.
 */
#define READ_MMU_EBCTM_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CMIC_RESERVEDr_BLKACC,4,0,0,MMU_EBCTM_CMIC_RESERVEDr_OFFSET,0,(r._mmu_ebctm_cmic_reserved),1)
#define WRITE_MMU_EBCTM_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CMIC_RESERVEDr_BLKACC,4,0,0,MMU_EBCTM_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_ebctm_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CNTR_0_STS
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBCTM_CNTR_0_STS.
 */
#define READ_MMU_EBCTM_CNTR_0_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CNTR_0_STSr_BLKACC,4,0,p,MMU_EBCTM_CNTR_0_STSr_OFFSET,0,(r._mmu_ebctm_cntr_0_sts),2)
#define WRITE_MMU_EBCTM_CNTR_0_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CNTR_0_STSr_BLKACC,4,0,p,MMU_EBCTM_CNTR_0_STSr_OFFSET,0,&(r._mmu_ebctm_cntr_0_sts),2)

/*******************************************************************************
 * End of 'MMU_EBCTM_CNTR_0_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CNTR_1_STS
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBCTM_CNTR_1_STS.
 */
#define READ_MMU_EBCTM_CNTR_1_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CNTR_1_STSr_BLKACC,4,0,p,MMU_EBCTM_CNTR_1_STSr_OFFSET,0,(r._mmu_ebctm_cntr_1_sts),2)
#define WRITE_MMU_EBCTM_CNTR_1_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CNTR_1_STSr_BLKACC,4,0,p,MMU_EBCTM_CNTR_1_STSr_OFFSET,0,&(r._mmu_ebctm_cntr_1_sts),2)

/*******************************************************************************
 * End of 'MMU_EBCTM_CNTR_1_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CNTR_2_STS
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBCTM_CNTR_2_STS.
 */
#define READ_MMU_EBCTM_CNTR_2_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CNTR_2_STSr_BLKACC,4,0,p,MMU_EBCTM_CNTR_2_STSr_OFFSET,0,(r._mmu_ebctm_cntr_2_sts),2)
#define WRITE_MMU_EBCTM_CNTR_2_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CNTR_2_STSr_BLKACC,4,0,p,MMU_EBCTM_CNTR_2_STSr_OFFSET,0,&(r._mmu_ebctm_cntr_2_sts),2)

/*******************************************************************************
 * End of 'MMU_EBCTM_CNTR_2_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CNTR_3_STS
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBCTM_CNTR_3_STS.
 */
#define READ_MMU_EBCTM_CNTR_3_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CNTR_3_STSr_BLKACC,4,0,p,MMU_EBCTM_CNTR_3_STSr_OFFSET,0,(r._mmu_ebctm_cntr_3_sts),2)
#define WRITE_MMU_EBCTM_CNTR_3_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CNTR_3_STSr_BLKACC,4,0,p,MMU_EBCTM_CNTR_3_STSr_OFFSET,0,&(r._mmu_ebctm_cntr_3_sts),2)

/*******************************************************************************
 * End of 'MMU_EBCTM_CNTR_3_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CPU_INT_EN
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CPU_INT_EN.
 */
#define READ_MMU_EBCTM_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CPU_INT_ENr_BLKACC,4,0,0,MMU_EBCTM_CPU_INT_ENr_OFFSET,0,(r._mmu_ebctm_cpu_int_en),1)
#define WRITE_MMU_EBCTM_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CPU_INT_ENr_BLKACC,4,0,0,MMU_EBCTM_CPU_INT_ENr_OFFSET,0,&(r._mmu_ebctm_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CPU_INT_SET
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CPU_INT_SET.
 */
#define READ_MMU_EBCTM_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CPU_INT_SETr_BLKACC,4,0,p,MMU_EBCTM_CPU_INT_SETr_OFFSET,0,(r._mmu_ebctm_cpu_int_set),1)
#define WRITE_MMU_EBCTM_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CPU_INT_SETr_BLKACC,4,0,p,MMU_EBCTM_CPU_INT_SETr_OFFSET,0,&(r._mmu_ebctm_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CPU_INT_STAT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CPU_INT_STAT.
 */
#define READ_MMU_EBCTM_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CPU_INT_STATr_BLKACC,4,0,p,MMU_EBCTM_CPU_INT_STATr_OFFSET,0,(r._mmu_ebctm_cpu_int_stat),1)
#define WRITE_MMU_EBCTM_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CPU_INT_STATr_BLKACC,4,0,p,MMU_EBCTM_CPU_INT_STATr_OFFSET,0,&(r._mmu_ebctm_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CPU_INT_STAT_LOG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CPU_INT_STAT_LOG.
 */
#define READ_MMU_EBCTM_CPU_INT_STAT_LOGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CPU_INT_STAT_LOGr_BLKACC,4,0,p,MMU_EBCTM_CPU_INT_STAT_LOGr_OFFSET,0,(r._mmu_ebctm_cpu_int_stat_log),1)
#define WRITE_MMU_EBCTM_CPU_INT_STAT_LOGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CPU_INT_STAT_LOGr_BLKACC,4,0,p,MMU_EBCTM_CPU_INT_STAT_LOGr_OFFSET,0,&(r._mmu_ebctm_cpu_int_stat_log),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CPU_INT_STAT_LOGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CT_BUDGET_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CT_BUDGET_CFG.
 */
#define READ_MMU_EBCTM_CT_BUDGET_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CT_BUDGET_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_BUDGET_CFGr_OFFSET,0,(r._mmu_ebctm_ct_budget_cfg),1)
#define WRITE_MMU_EBCTM_CT_BUDGET_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CT_BUDGET_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_BUDGET_CFGr_OFFSET,0,&(r._mmu_ebctm_ct_budget_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CT_BUDGET_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CT_BUDGET_SAF_COMMITMENT_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CT_BUDGET_SAF_COMMITMENT_CFG.
 */
#define READ_MMU_EBCTM_CT_BUDGET_SAF_COMMITMENT_CFGr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CT_BUDGET_SAF_COMMITMENT_CFGr_BLKACC,4,0,p,MMU_EBCTM_CT_BUDGET_SAF_COMMITMENT_CFGr_OFFSET,i,(r._mmu_ebctm_ct_budget_saf_commitment_cfg),1)
#define WRITE_MMU_EBCTM_CT_BUDGET_SAF_COMMITMENT_CFGr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CT_BUDGET_SAF_COMMITMENT_CFGr_BLKACC,4,0,p,MMU_EBCTM_CT_BUDGET_SAF_COMMITMENT_CFGr_OFFSET,i,&(r._mmu_ebctm_ct_budget_saf_commitment_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CT_BUDGET_SAF_COMMITMENT_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CT_FSM_STS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CT_FSM_STS.
 */
#define READ_MMU_EBCTM_CT_FSM_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CT_FSM_STSr_BLKACC,4,0,p,MMU_EBCTM_CT_FSM_STSr_OFFSET,0,(r._mmu_ebctm_ct_fsm_sts),1)
#define WRITE_MMU_EBCTM_CT_FSM_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CT_FSM_STSr_BLKACC,4,0,p,MMU_EBCTM_CT_FSM_STSr_OFFSET,0,&(r._mmu_ebctm_ct_fsm_sts),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CT_FSM_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CT_SPEED_0_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CT_SPEED_0_CFG.
 */
#define READ_MMU_EBCTM_CT_SPEED_0_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CT_SPEED_0_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_0_CFGr_OFFSET,0,(r._mmu_ebctm_ct_speed_0_cfg),1)
#define WRITE_MMU_EBCTM_CT_SPEED_0_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CT_SPEED_0_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_0_CFGr_OFFSET,0,&(r._mmu_ebctm_ct_speed_0_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CT_SPEED_0_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CT_SPEED_1_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CT_SPEED_1_CFG.
 */
#define READ_MMU_EBCTM_CT_SPEED_1_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CT_SPEED_1_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_1_CFGr_OFFSET,0,(r._mmu_ebctm_ct_speed_1_cfg),1)
#define WRITE_MMU_EBCTM_CT_SPEED_1_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CT_SPEED_1_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_1_CFGr_OFFSET,0,&(r._mmu_ebctm_ct_speed_1_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CT_SPEED_1_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CT_SPEED_2_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CT_SPEED_2_CFG.
 */
#define READ_MMU_EBCTM_CT_SPEED_2_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CT_SPEED_2_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_2_CFGr_OFFSET,0,(r._mmu_ebctm_ct_speed_2_cfg),1)
#define WRITE_MMU_EBCTM_CT_SPEED_2_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CT_SPEED_2_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_2_CFGr_OFFSET,0,&(r._mmu_ebctm_ct_speed_2_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CT_SPEED_2_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CT_SPEED_3_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CT_SPEED_3_CFG.
 */
#define READ_MMU_EBCTM_CT_SPEED_3_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CT_SPEED_3_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_3_CFGr_OFFSET,0,(r._mmu_ebctm_ct_speed_3_cfg),1)
#define WRITE_MMU_EBCTM_CT_SPEED_3_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CT_SPEED_3_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_3_CFGr_OFFSET,0,&(r._mmu_ebctm_ct_speed_3_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CT_SPEED_3_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CT_SPEED_4_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CT_SPEED_4_CFG.
 */
#define READ_MMU_EBCTM_CT_SPEED_4_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CT_SPEED_4_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_4_CFGr_OFFSET,0,(r._mmu_ebctm_ct_speed_4_cfg),1)
#define WRITE_MMU_EBCTM_CT_SPEED_4_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CT_SPEED_4_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_4_CFGr_OFFSET,0,&(r._mmu_ebctm_ct_speed_4_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CT_SPEED_4_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CT_SPEED_5_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CT_SPEED_5_CFG.
 */
#define READ_MMU_EBCTM_CT_SPEED_5_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CT_SPEED_5_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_5_CFGr_OFFSET,0,(r._mmu_ebctm_ct_speed_5_cfg),1)
#define WRITE_MMU_EBCTM_CT_SPEED_5_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CT_SPEED_5_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_5_CFGr_OFFSET,0,&(r._mmu_ebctm_ct_speed_5_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CT_SPEED_5_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CT_SPEED_6_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CT_SPEED_6_CFG.
 */
#define READ_MMU_EBCTM_CT_SPEED_6_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CT_SPEED_6_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_6_CFGr_OFFSET,0,(r._mmu_ebctm_ct_speed_6_cfg),1)
#define WRITE_MMU_EBCTM_CT_SPEED_6_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CT_SPEED_6_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_6_CFGr_OFFSET,0,&(r._mmu_ebctm_ct_speed_6_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CT_SPEED_6_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_CT_SPEED_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_CT_SPEED_CFG.
 */
#define READ_MMU_EBCTM_CT_SPEED_CFGr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_CT_SPEED_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_CFGr_OFFSET,i,(r._mmu_ebctm_ct_speed_cfg),1)
#define WRITE_MMU_EBCTM_CT_SPEED_CFGr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_CT_SPEED_CFGr_BLKACC,4,0,0,MMU_EBCTM_CT_SPEED_CFGr_OFFSET,i,&(r._mmu_ebctm_ct_speed_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_CT_SPEED_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_EB_TCT_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_EB_TCT_CFG.
 */
#define READ_MMU_EBCTM_EB_TCT_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_EB_TCT_CFGr_BLKACC,4,0,0,MMU_EBCTM_EB_TCT_CFGr_OFFSET,0,(r._mmu_ebctm_eb_tct_cfg),1)
#define WRITE_MMU_EBCTM_EB_TCT_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_EB_TCT_CFGr_BLKACC,4,0,0,MMU_EBCTM_EB_TCT_CFGr_OFFSET,0,&(r._mmu_ebctm_eb_tct_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_EB_TCT_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_EPORT_CT_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_EPORT_CT_CFG.
 */
#define READ_MMU_EBCTM_EPORT_CT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_EPORT_CT_CFGr_BLKACC,4,0,p,MMU_EBCTM_EPORT_CT_CFGr_OFFSET,0,(r._mmu_ebctm_eport_ct_cfg),1)
#define WRITE_MMU_EBCTM_EPORT_CT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_EPORT_CT_CFGr_BLKACC,4,0,p,MMU_EBCTM_EPORT_CT_CFGr_OFFSET,0,&(r._mmu_ebctm_eport_ct_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_EPORT_CT_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_EPORT_TCT_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_EPORT_TCT_CFG.
 */
#define READ_MMU_EBCTM_EPORT_TCT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_EPORT_TCT_CFGr_BLKACC,4,0,p,MMU_EBCTM_EPORT_TCT_CFGr_OFFSET,0,(r._mmu_ebctm_eport_tct_cfg),1)
#define WRITE_MMU_EBCTM_EPORT_TCT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_EPORT_TCT_CFGr_BLKACC,4,0,p,MMU_EBCTM_EPORT_TCT_CFGr_OFFSET,0,&(r._mmu_ebctm_eport_tct_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_EPORT_TCT_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_0_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_0_CFG.
 */
#define READ_MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_0_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_0_CFGr_BLKACC,4,0,0,MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_0_CFGr_OFFSET,0,(r._mmu_ebctm_min_mop_spacing_speed_bucket_0_cfg),1)
#define WRITE_MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_0_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_0_CFGr_BLKACC,4,0,0,MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_0_CFGr_OFFSET,0,&(r._mmu_ebctm_min_mop_spacing_speed_bucket_0_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_0_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_1_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_1_CFG.
 */
#define READ_MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_1_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_1_CFGr_BLKACC,4,0,0,MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_1_CFGr_OFFSET,0,(r._mmu_ebctm_min_mop_spacing_speed_bucket_1_cfg),1)
#define WRITE_MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_1_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_1_CFGr_BLKACC,4,0,0,MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_1_CFGr_OFFSET,0,&(r._mmu_ebctm_min_mop_spacing_speed_bucket_1_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_1_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_2_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_2_CFG.
 */
#define READ_MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_2_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_2_CFGr_BLKACC,4,0,0,MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_2_CFGr_OFFSET,0,(r._mmu_ebctm_min_mop_spacing_speed_bucket_2_cfg),1)
#define WRITE_MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_2_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_2_CFGr_BLKACC,4,0,0,MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_2_CFGr_OFFSET,0,&(r._mmu_ebctm_min_mop_spacing_speed_bucket_2_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_MIN_MOP_SPACING_SPEED_BUCKET_2_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_PORT_EMPTY_STS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_PORT_EMPTY_STS.
 */
#define READ_MMU_EBCTM_PORT_EMPTY_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_PORT_EMPTY_STSr_BLKACC,4,0,p,MMU_EBCTM_PORT_EMPTY_STSr_OFFSET,0,(r._mmu_ebctm_port_empty_sts),1)
#define WRITE_MMU_EBCTM_PORT_EMPTY_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_PORT_EMPTY_STSr_BLKACC,4,0,p,MMU_EBCTM_PORT_EMPTY_STSr_OFFSET,0,&(r._mmu_ebctm_port_empty_sts),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_PORT_EMPTY_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_SRC_SPEED_0_TO_SPEED_BUCKET_MAP_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_SRC_SPEED_0_TO_SPEED_BUCKET_MAP_CFG.
 */
#define READ_MMU_EBCTM_SRC_SPEED_0_TO_SPEED_BUCKET_MAP_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_SRC_SPEED_0_TO_SPEED_BUCKET_MAP_CFGr_BLKACC,4,0,0,MMU_EBCTM_SRC_SPEED_0_TO_SPEED_BUCKET_MAP_CFGr_OFFSET,0,(r._mmu_ebctm_src_speed_0_to_speed_bucket_map_cfg),1)
#define WRITE_MMU_EBCTM_SRC_SPEED_0_TO_SPEED_BUCKET_MAP_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_SRC_SPEED_0_TO_SPEED_BUCKET_MAP_CFGr_BLKACC,4,0,0,MMU_EBCTM_SRC_SPEED_0_TO_SPEED_BUCKET_MAP_CFGr_OFFSET,0,&(r._mmu_ebctm_src_speed_0_to_speed_bucket_map_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_SRC_SPEED_0_TO_SPEED_BUCKET_MAP_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_SRC_SPEED_1_TO_SPEED_BUCKET_MAP_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_SRC_SPEED_1_TO_SPEED_BUCKET_MAP_CFG.
 */
#define READ_MMU_EBCTM_SRC_SPEED_1_TO_SPEED_BUCKET_MAP_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_SRC_SPEED_1_TO_SPEED_BUCKET_MAP_CFGr_BLKACC,4,0,0,MMU_EBCTM_SRC_SPEED_1_TO_SPEED_BUCKET_MAP_CFGr_OFFSET,0,(r._mmu_ebctm_src_speed_1_to_speed_bucket_map_cfg),1)
#define WRITE_MMU_EBCTM_SRC_SPEED_1_TO_SPEED_BUCKET_MAP_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_SRC_SPEED_1_TO_SPEED_BUCKET_MAP_CFGr_BLKACC,4,0,0,MMU_EBCTM_SRC_SPEED_1_TO_SPEED_BUCKET_MAP_CFGr_OFFSET,0,&(r._mmu_ebctm_src_speed_1_to_speed_bucket_map_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_SRC_SPEED_1_TO_SPEED_BUCKET_MAP_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_SRC_SPEED_2_TO_SPEED_BUCKET_MAP_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_SRC_SPEED_2_TO_SPEED_BUCKET_MAP_CFG.
 */
#define READ_MMU_EBCTM_SRC_SPEED_2_TO_SPEED_BUCKET_MAP_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_SRC_SPEED_2_TO_SPEED_BUCKET_MAP_CFGr_BLKACC,4,0,0,MMU_EBCTM_SRC_SPEED_2_TO_SPEED_BUCKET_MAP_CFGr_OFFSET,0,(r._mmu_ebctm_src_speed_2_to_speed_bucket_map_cfg),1)
#define WRITE_MMU_EBCTM_SRC_SPEED_2_TO_SPEED_BUCKET_MAP_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_SRC_SPEED_2_TO_SPEED_BUCKET_MAP_CFGr_BLKACC,4,0,0,MMU_EBCTM_SRC_SPEED_2_TO_SPEED_BUCKET_MAP_CFGr_OFFSET,0,&(r._mmu_ebctm_src_speed_2_to_speed_bucket_map_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_SRC_SPEED_2_TO_SPEED_BUCKET_MAP_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_SRC_SPEED_3_TO_SPEED_BUCKET_MAP_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_SRC_SPEED_3_TO_SPEED_BUCKET_MAP_CFG.
 */
#define READ_MMU_EBCTM_SRC_SPEED_3_TO_SPEED_BUCKET_MAP_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_SRC_SPEED_3_TO_SPEED_BUCKET_MAP_CFGr_BLKACC,4,0,0,MMU_EBCTM_SRC_SPEED_3_TO_SPEED_BUCKET_MAP_CFGr_OFFSET,0,(r._mmu_ebctm_src_speed_3_to_speed_bucket_map_cfg),1)
#define WRITE_MMU_EBCTM_SRC_SPEED_3_TO_SPEED_BUCKET_MAP_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_SRC_SPEED_3_TO_SPEED_BUCKET_MAP_CFGr_BLKACC,4,0,0,MMU_EBCTM_SRC_SPEED_3_TO_SPEED_BUCKET_MAP_CFGr_OFFSET,0,&(r._mmu_ebctm_src_speed_3_to_speed_bucket_map_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_SRC_SPEED_3_TO_SPEED_BUCKET_MAP_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_SRC_SPEED_4_TO_SPEED_BUCKET_MAP_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_SRC_SPEED_4_TO_SPEED_BUCKET_MAP_CFG.
 */
#define READ_MMU_EBCTM_SRC_SPEED_4_TO_SPEED_BUCKET_MAP_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_SRC_SPEED_4_TO_SPEED_BUCKET_MAP_CFGr_BLKACC,4,0,0,MMU_EBCTM_SRC_SPEED_4_TO_SPEED_BUCKET_MAP_CFGr_OFFSET,0,(r._mmu_ebctm_src_speed_4_to_speed_bucket_map_cfg),1)
#define WRITE_MMU_EBCTM_SRC_SPEED_4_TO_SPEED_BUCKET_MAP_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_SRC_SPEED_4_TO_SPEED_BUCKET_MAP_CFGr_BLKACC,4,0,0,MMU_EBCTM_SRC_SPEED_4_TO_SPEED_BUCKET_MAP_CFGr_OFFSET,0,&(r._mmu_ebctm_src_speed_4_to_speed_bucket_map_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_SRC_SPEED_4_TO_SPEED_BUCKET_MAP_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_SRC_SPEED_5_TO_SPEED_BUCKET_MAP_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_SRC_SPEED_5_TO_SPEED_BUCKET_MAP_CFG.
 */
#define READ_MMU_EBCTM_SRC_SPEED_5_TO_SPEED_BUCKET_MAP_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_SRC_SPEED_5_TO_SPEED_BUCKET_MAP_CFGr_BLKACC,4,0,0,MMU_EBCTM_SRC_SPEED_5_TO_SPEED_BUCKET_MAP_CFGr_OFFSET,0,(r._mmu_ebctm_src_speed_5_to_speed_bucket_map_cfg),1)
#define WRITE_MMU_EBCTM_SRC_SPEED_5_TO_SPEED_BUCKET_MAP_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_SRC_SPEED_5_TO_SPEED_BUCKET_MAP_CFGr_BLKACC,4,0,0,MMU_EBCTM_SRC_SPEED_5_TO_SPEED_BUCKET_MAP_CFGr_OFFSET,0,&(r._mmu_ebctm_src_speed_5_to_speed_bucket_map_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_SRC_SPEED_5_TO_SPEED_BUCKET_MAP_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_SRC_SPEED_6_TO_SPEED_BUCKET_MAP_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBCTM_SRC_SPEED_6_TO_SPEED_BUCKET_MAP_CFG.
 */
#define READ_MMU_EBCTM_SRC_SPEED_6_TO_SPEED_BUCKET_MAP_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_SRC_SPEED_6_TO_SPEED_BUCKET_MAP_CFGr_BLKACC,4,0,0,MMU_EBCTM_SRC_SPEED_6_TO_SPEED_BUCKET_MAP_CFGr_OFFSET,0,(r._mmu_ebctm_src_speed_6_to_speed_bucket_map_cfg),1)
#define WRITE_MMU_EBCTM_SRC_SPEED_6_TO_SPEED_BUCKET_MAP_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_SRC_SPEED_6_TO_SPEED_BUCKET_MAP_CFGr_BLKACC,4,0,0,MMU_EBCTM_SRC_SPEED_6_TO_SPEED_BUCKET_MAP_CFGr_OFFSET,0,&(r._mmu_ebctm_src_speed_6_to_speed_bucket_map_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBCTM_SRC_SPEED_6_TO_SPEED_BUCKET_MAP_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_TCT_ENTER_SPEED_CFG_0
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBCTM_TCT_ENTER_SPEED_CFG_0.
 */
#define READ_MMU_EBCTM_TCT_ENTER_SPEED_CFG_0r(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_TCT_ENTER_SPEED_CFG_0r_BLKACC,4,0,0,MMU_EBCTM_TCT_ENTER_SPEED_CFG_0r_OFFSET,i,(r._mmu_ebctm_tct_enter_speed_cfg_0),2)
#define WRITE_MMU_EBCTM_TCT_ENTER_SPEED_CFG_0r(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_TCT_ENTER_SPEED_CFG_0r_BLKACC,4,0,0,MMU_EBCTM_TCT_ENTER_SPEED_CFG_0r_OFFSET,i,&(r._mmu_ebctm_tct_enter_speed_cfg_0),2)

/*******************************************************************************
 * End of 'MMU_EBCTM_TCT_ENTER_SPEED_CFG_0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_TCT_ENTER_SPEED_CFG_1
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBCTM_TCT_ENTER_SPEED_CFG_1.
 */
#define READ_MMU_EBCTM_TCT_ENTER_SPEED_CFG_1r(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_TCT_ENTER_SPEED_CFG_1r_BLKACC,4,0,0,MMU_EBCTM_TCT_ENTER_SPEED_CFG_1r_OFFSET,i,(r._mmu_ebctm_tct_enter_speed_cfg_1),2)
#define WRITE_MMU_EBCTM_TCT_ENTER_SPEED_CFG_1r(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_TCT_ENTER_SPEED_CFG_1r_BLKACC,4,0,0,MMU_EBCTM_TCT_ENTER_SPEED_CFG_1r_OFFSET,i,&(r._mmu_ebctm_tct_enter_speed_cfg_1),2)

/*******************************************************************************
 * End of 'MMU_EBCTM_TCT_ENTER_SPEED_CFG_1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBCTM_TCT_EXIT_SPEED_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBCTM_TCT_EXIT_SPEED_CFG.
 */
#define READ_MMU_EBCTM_TCT_EXIT_SPEED_CFGr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBCTM_TCT_EXIT_SPEED_CFGr_BLKACC,4,0,0,MMU_EBCTM_TCT_EXIT_SPEED_CFGr_OFFSET,i,(r._mmu_ebctm_tct_exit_speed_cfg),2)
#define WRITE_MMU_EBCTM_TCT_EXIT_SPEED_CFGr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBCTM_TCT_EXIT_SPEED_CFGr_BLKACC,4,0,0,MMU_EBCTM_TCT_EXIT_SPEED_CFGr_OFFSET,i,&(r._mmu_ebctm_tct_exit_speed_cfg),2)

/*******************************************************************************
 * End of 'MMU_EBCTM_TCT_EXIT_SPEED_CFGr'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB0_PAYLOAD_SLICE0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB0_PAYLOAD_SLICE0.
 */
#define READ_MMU_EBMB0_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB0_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE0m_OFFSET,i,(m._mmu_ebmb0_payload_slice0),8)
#define WRITE_MMU_EBMB0_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB0_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE0m_OFFSET,i,&(m._mmu_ebmb0_payload_slice0),8)

/*******************************************************************************
 * End of 'MMU_EBMB0_PAYLOAD_SLICE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB0_PAYLOAD_SLICE1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB0_PAYLOAD_SLICE1.
 */
#define READ_MMU_EBMB0_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB0_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE1m_OFFSET,i,(m._mmu_ebmb0_payload_slice1),8)
#define WRITE_MMU_EBMB0_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB0_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE1m_OFFSET,i,&(m._mmu_ebmb0_payload_slice1),8)

/*******************************************************************************
 * End of 'MMU_EBMB0_PAYLOAD_SLICE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB0_PAYLOAD_SLICE2
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB0_PAYLOAD_SLICE2.
 */
#define READ_MMU_EBMB0_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB0_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE2m_OFFSET,i,(m._mmu_ebmb0_payload_slice2),8)
#define WRITE_MMU_EBMB0_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB0_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE2m_OFFSET,i,&(m._mmu_ebmb0_payload_slice2),8)

/*******************************************************************************
 * End of 'MMU_EBMB0_PAYLOAD_SLICE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB0_PAYLOAD_SLICE3
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB0_PAYLOAD_SLICE3.
 */
#define READ_MMU_EBMB0_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB0_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE3m_OFFSET,i,(m._mmu_ebmb0_payload_slice3),8)
#define WRITE_MMU_EBMB0_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB0_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE3m_OFFSET,i,&(m._mmu_ebmb0_payload_slice3),8)

/*******************************************************************************
 * End of 'MMU_EBMB0_PAYLOAD_SLICE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB0_PAYLOAD_SLICE4
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB0_PAYLOAD_SLICE4.
 */
#define READ_MMU_EBMB0_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB0_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE4m_OFFSET,i,(m._mmu_ebmb0_payload_slice4),8)
#define WRITE_MMU_EBMB0_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB0_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE4m_OFFSET,i,&(m._mmu_ebmb0_payload_slice4),8)

/*******************************************************************************
 * End of 'MMU_EBMB0_PAYLOAD_SLICE4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB0_PAYLOAD_SLICE5
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB0_PAYLOAD_SLICE5.
 */
#define READ_MMU_EBMB0_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB0_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE5m_OFFSET,i,(m._mmu_ebmb0_payload_slice5),8)
#define WRITE_MMU_EBMB0_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB0_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE5m_OFFSET,i,&(m._mmu_ebmb0_payload_slice5),8)

/*******************************************************************************
 * End of 'MMU_EBMB0_PAYLOAD_SLICE5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB0_PAYLOAD_SLICE6
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB0_PAYLOAD_SLICE6.
 */
#define READ_MMU_EBMB0_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB0_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE6m_OFFSET,i,(m._mmu_ebmb0_payload_slice6),8)
#define WRITE_MMU_EBMB0_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB0_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE6m_OFFSET,i,&(m._mmu_ebmb0_payload_slice6),8)

/*******************************************************************************
 * End of 'MMU_EBMB0_PAYLOAD_SLICE6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB0_PAYLOAD_SLICE7
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB0_PAYLOAD_SLICE7.
 */
#define READ_MMU_EBMB0_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB0_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE7m_OFFSET,i,(m._mmu_ebmb0_payload_slice7),8)
#define WRITE_MMU_EBMB0_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB0_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB0_PAYLOAD_SLICE7m_OFFSET,i,&(m._mmu_ebmb0_payload_slice7),8)

/*******************************************************************************
 * End of 'MMU_EBMB0_PAYLOAD_SLICE7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB1_PAYLOAD_SLICE0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB1_PAYLOAD_SLICE0.
 */
#define READ_MMU_EBMB1_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB1_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE0m_OFFSET,i,(m._mmu_ebmb1_payload_slice0),8)
#define WRITE_MMU_EBMB1_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB1_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE0m_OFFSET,i,&(m._mmu_ebmb1_payload_slice0),8)

/*******************************************************************************
 * End of 'MMU_EBMB1_PAYLOAD_SLICE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB1_PAYLOAD_SLICE1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB1_PAYLOAD_SLICE1.
 */
#define READ_MMU_EBMB1_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB1_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE1m_OFFSET,i,(m._mmu_ebmb1_payload_slice1),8)
#define WRITE_MMU_EBMB1_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB1_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE1m_OFFSET,i,&(m._mmu_ebmb1_payload_slice1),8)

/*******************************************************************************
 * End of 'MMU_EBMB1_PAYLOAD_SLICE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB1_PAYLOAD_SLICE2
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB1_PAYLOAD_SLICE2.
 */
#define READ_MMU_EBMB1_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB1_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE2m_OFFSET,i,(m._mmu_ebmb1_payload_slice2),8)
#define WRITE_MMU_EBMB1_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB1_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE2m_OFFSET,i,&(m._mmu_ebmb1_payload_slice2),8)

/*******************************************************************************
 * End of 'MMU_EBMB1_PAYLOAD_SLICE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB1_PAYLOAD_SLICE3
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB1_PAYLOAD_SLICE3.
 */
#define READ_MMU_EBMB1_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB1_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE3m_OFFSET,i,(m._mmu_ebmb1_payload_slice3),8)
#define WRITE_MMU_EBMB1_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB1_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE3m_OFFSET,i,&(m._mmu_ebmb1_payload_slice3),8)

/*******************************************************************************
 * End of 'MMU_EBMB1_PAYLOAD_SLICE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB1_PAYLOAD_SLICE4
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB1_PAYLOAD_SLICE4.
 */
#define READ_MMU_EBMB1_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB1_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE4m_OFFSET,i,(m._mmu_ebmb1_payload_slice4),8)
#define WRITE_MMU_EBMB1_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB1_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE4m_OFFSET,i,&(m._mmu_ebmb1_payload_slice4),8)

/*******************************************************************************
 * End of 'MMU_EBMB1_PAYLOAD_SLICE4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB1_PAYLOAD_SLICE5
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB1_PAYLOAD_SLICE5.
 */
#define READ_MMU_EBMB1_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB1_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE5m_OFFSET,i,(m._mmu_ebmb1_payload_slice5),8)
#define WRITE_MMU_EBMB1_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB1_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE5m_OFFSET,i,&(m._mmu_ebmb1_payload_slice5),8)

/*******************************************************************************
 * End of 'MMU_EBMB1_PAYLOAD_SLICE5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB1_PAYLOAD_SLICE6
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB1_PAYLOAD_SLICE6.
 */
#define READ_MMU_EBMB1_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB1_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE6m_OFFSET,i,(m._mmu_ebmb1_payload_slice6),8)
#define WRITE_MMU_EBMB1_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB1_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE6m_OFFSET,i,&(m._mmu_ebmb1_payload_slice6),8)

/*******************************************************************************
 * End of 'MMU_EBMB1_PAYLOAD_SLICE6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB1_PAYLOAD_SLICE7
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB1_PAYLOAD_SLICE7.
 */
#define READ_MMU_EBMB1_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB1_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE7m_OFFSET,i,(m._mmu_ebmb1_payload_slice7),8)
#define WRITE_MMU_EBMB1_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB1_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB1_PAYLOAD_SLICE7m_OFFSET,i,&(m._mmu_ebmb1_payload_slice7),8)

/*******************************************************************************
 * End of 'MMU_EBMB1_PAYLOAD_SLICE7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB2_PAYLOAD_SLICE0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB2_PAYLOAD_SLICE0.
 */
#define READ_MMU_EBMB2_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB2_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE0m_OFFSET,i,(m._mmu_ebmb2_payload_slice0),8)
#define WRITE_MMU_EBMB2_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB2_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE0m_OFFSET,i,&(m._mmu_ebmb2_payload_slice0),8)

/*******************************************************************************
 * End of 'MMU_EBMB2_PAYLOAD_SLICE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB2_PAYLOAD_SLICE1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB2_PAYLOAD_SLICE1.
 */
#define READ_MMU_EBMB2_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB2_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE1m_OFFSET,i,(m._mmu_ebmb2_payload_slice1),8)
#define WRITE_MMU_EBMB2_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB2_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE1m_OFFSET,i,&(m._mmu_ebmb2_payload_slice1),8)

/*******************************************************************************
 * End of 'MMU_EBMB2_PAYLOAD_SLICE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB2_PAYLOAD_SLICE2
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB2_PAYLOAD_SLICE2.
 */
#define READ_MMU_EBMB2_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB2_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE2m_OFFSET,i,(m._mmu_ebmb2_payload_slice2),8)
#define WRITE_MMU_EBMB2_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB2_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE2m_OFFSET,i,&(m._mmu_ebmb2_payload_slice2),8)

/*******************************************************************************
 * End of 'MMU_EBMB2_PAYLOAD_SLICE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB2_PAYLOAD_SLICE3
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB2_PAYLOAD_SLICE3.
 */
#define READ_MMU_EBMB2_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB2_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE3m_OFFSET,i,(m._mmu_ebmb2_payload_slice3),8)
#define WRITE_MMU_EBMB2_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB2_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE3m_OFFSET,i,&(m._mmu_ebmb2_payload_slice3),8)

/*******************************************************************************
 * End of 'MMU_EBMB2_PAYLOAD_SLICE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB2_PAYLOAD_SLICE4
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB2_PAYLOAD_SLICE4.
 */
#define READ_MMU_EBMB2_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB2_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE4m_OFFSET,i,(m._mmu_ebmb2_payload_slice4),8)
#define WRITE_MMU_EBMB2_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB2_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE4m_OFFSET,i,&(m._mmu_ebmb2_payload_slice4),8)

/*******************************************************************************
 * End of 'MMU_EBMB2_PAYLOAD_SLICE4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB2_PAYLOAD_SLICE5
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB2_PAYLOAD_SLICE5.
 */
#define READ_MMU_EBMB2_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB2_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE5m_OFFSET,i,(m._mmu_ebmb2_payload_slice5),8)
#define WRITE_MMU_EBMB2_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB2_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE5m_OFFSET,i,&(m._mmu_ebmb2_payload_slice5),8)

/*******************************************************************************
 * End of 'MMU_EBMB2_PAYLOAD_SLICE5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB2_PAYLOAD_SLICE6
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB2_PAYLOAD_SLICE6.
 */
#define READ_MMU_EBMB2_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB2_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE6m_OFFSET,i,(m._mmu_ebmb2_payload_slice6),8)
#define WRITE_MMU_EBMB2_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB2_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE6m_OFFSET,i,&(m._mmu_ebmb2_payload_slice6),8)

/*******************************************************************************
 * End of 'MMU_EBMB2_PAYLOAD_SLICE6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB2_PAYLOAD_SLICE7
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB2_PAYLOAD_SLICE7.
 */
#define READ_MMU_EBMB2_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB2_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE7m_OFFSET,i,(m._mmu_ebmb2_payload_slice7),8)
#define WRITE_MMU_EBMB2_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB2_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB2_PAYLOAD_SLICE7m_OFFSET,i,&(m._mmu_ebmb2_payload_slice7),8)

/*******************************************************************************
 * End of 'MMU_EBMB2_PAYLOAD_SLICE7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB3_PAYLOAD_SLICE0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB3_PAYLOAD_SLICE0.
 */
#define READ_MMU_EBMB3_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB3_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE0m_OFFSET,i,(m._mmu_ebmb3_payload_slice0),8)
#define WRITE_MMU_EBMB3_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB3_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE0m_OFFSET,i,&(m._mmu_ebmb3_payload_slice0),8)

/*******************************************************************************
 * End of 'MMU_EBMB3_PAYLOAD_SLICE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB3_PAYLOAD_SLICE1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB3_PAYLOAD_SLICE1.
 */
#define READ_MMU_EBMB3_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB3_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE1m_OFFSET,i,(m._mmu_ebmb3_payload_slice1),8)
#define WRITE_MMU_EBMB3_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB3_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE1m_OFFSET,i,&(m._mmu_ebmb3_payload_slice1),8)

/*******************************************************************************
 * End of 'MMU_EBMB3_PAYLOAD_SLICE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB3_PAYLOAD_SLICE2
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB3_PAYLOAD_SLICE2.
 */
#define READ_MMU_EBMB3_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB3_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE2m_OFFSET,i,(m._mmu_ebmb3_payload_slice2),8)
#define WRITE_MMU_EBMB3_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB3_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE2m_OFFSET,i,&(m._mmu_ebmb3_payload_slice2),8)

/*******************************************************************************
 * End of 'MMU_EBMB3_PAYLOAD_SLICE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB3_PAYLOAD_SLICE3
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB3_PAYLOAD_SLICE3.
 */
#define READ_MMU_EBMB3_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB3_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE3m_OFFSET,i,(m._mmu_ebmb3_payload_slice3),8)
#define WRITE_MMU_EBMB3_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB3_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE3m_OFFSET,i,&(m._mmu_ebmb3_payload_slice3),8)

/*******************************************************************************
 * End of 'MMU_EBMB3_PAYLOAD_SLICE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB3_PAYLOAD_SLICE4
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB3_PAYLOAD_SLICE4.
 */
#define READ_MMU_EBMB3_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB3_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE4m_OFFSET,i,(m._mmu_ebmb3_payload_slice4),8)
#define WRITE_MMU_EBMB3_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB3_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE4m_OFFSET,i,&(m._mmu_ebmb3_payload_slice4),8)

/*******************************************************************************
 * End of 'MMU_EBMB3_PAYLOAD_SLICE4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB3_PAYLOAD_SLICE5
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB3_PAYLOAD_SLICE5.
 */
#define READ_MMU_EBMB3_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB3_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE5m_OFFSET,i,(m._mmu_ebmb3_payload_slice5),8)
#define WRITE_MMU_EBMB3_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB3_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE5m_OFFSET,i,&(m._mmu_ebmb3_payload_slice5),8)

/*******************************************************************************
 * End of 'MMU_EBMB3_PAYLOAD_SLICE5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB3_PAYLOAD_SLICE6
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB3_PAYLOAD_SLICE6.
 */
#define READ_MMU_EBMB3_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB3_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE6m_OFFSET,i,(m._mmu_ebmb3_payload_slice6),8)
#define WRITE_MMU_EBMB3_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB3_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE6m_OFFSET,i,&(m._mmu_ebmb3_payload_slice6),8)

/*******************************************************************************
 * End of 'MMU_EBMB3_PAYLOAD_SLICE6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB3_PAYLOAD_SLICE7
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB3_PAYLOAD_SLICE7.
 */
#define READ_MMU_EBMB3_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB3_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE7m_OFFSET,i,(m._mmu_ebmb3_payload_slice7),8)
#define WRITE_MMU_EBMB3_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB3_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB3_PAYLOAD_SLICE7m_OFFSET,i,&(m._mmu_ebmb3_payload_slice7),8)

/*******************************************************************************
 * End of 'MMU_EBMB3_PAYLOAD_SLICE7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB4_PAYLOAD_SLICE0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB4_PAYLOAD_SLICE0.
 */
#define READ_MMU_EBMB4_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB4_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE0m_OFFSET,i,(m._mmu_ebmb4_payload_slice0),8)
#define WRITE_MMU_EBMB4_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB4_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE0m_OFFSET,i,&(m._mmu_ebmb4_payload_slice0),8)

/*******************************************************************************
 * End of 'MMU_EBMB4_PAYLOAD_SLICE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB4_PAYLOAD_SLICE1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB4_PAYLOAD_SLICE1.
 */
#define READ_MMU_EBMB4_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB4_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE1m_OFFSET,i,(m._mmu_ebmb4_payload_slice1),8)
#define WRITE_MMU_EBMB4_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB4_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE1m_OFFSET,i,&(m._mmu_ebmb4_payload_slice1),8)

/*******************************************************************************
 * End of 'MMU_EBMB4_PAYLOAD_SLICE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB4_PAYLOAD_SLICE2
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB4_PAYLOAD_SLICE2.
 */
#define READ_MMU_EBMB4_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB4_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE2m_OFFSET,i,(m._mmu_ebmb4_payload_slice2),8)
#define WRITE_MMU_EBMB4_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB4_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE2m_OFFSET,i,&(m._mmu_ebmb4_payload_slice2),8)

/*******************************************************************************
 * End of 'MMU_EBMB4_PAYLOAD_SLICE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB4_PAYLOAD_SLICE3
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB4_PAYLOAD_SLICE3.
 */
#define READ_MMU_EBMB4_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB4_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE3m_OFFSET,i,(m._mmu_ebmb4_payload_slice3),8)
#define WRITE_MMU_EBMB4_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB4_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE3m_OFFSET,i,&(m._mmu_ebmb4_payload_slice3),8)

/*******************************************************************************
 * End of 'MMU_EBMB4_PAYLOAD_SLICE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB4_PAYLOAD_SLICE4
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB4_PAYLOAD_SLICE4.
 */
#define READ_MMU_EBMB4_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB4_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE4m_OFFSET,i,(m._mmu_ebmb4_payload_slice4),8)
#define WRITE_MMU_EBMB4_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB4_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE4m_OFFSET,i,&(m._mmu_ebmb4_payload_slice4),8)

/*******************************************************************************
 * End of 'MMU_EBMB4_PAYLOAD_SLICE4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB4_PAYLOAD_SLICE5
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB4_PAYLOAD_SLICE5.
 */
#define READ_MMU_EBMB4_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB4_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE5m_OFFSET,i,(m._mmu_ebmb4_payload_slice5),8)
#define WRITE_MMU_EBMB4_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB4_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE5m_OFFSET,i,&(m._mmu_ebmb4_payload_slice5),8)

/*******************************************************************************
 * End of 'MMU_EBMB4_PAYLOAD_SLICE5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB4_PAYLOAD_SLICE6
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB4_PAYLOAD_SLICE6.
 */
#define READ_MMU_EBMB4_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB4_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE6m_OFFSET,i,(m._mmu_ebmb4_payload_slice6),8)
#define WRITE_MMU_EBMB4_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB4_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE6m_OFFSET,i,&(m._mmu_ebmb4_payload_slice6),8)

/*******************************************************************************
 * End of 'MMU_EBMB4_PAYLOAD_SLICE6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB4_PAYLOAD_SLICE7
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB4_PAYLOAD_SLICE7.
 */
#define READ_MMU_EBMB4_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB4_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE7m_OFFSET,i,(m._mmu_ebmb4_payload_slice7),8)
#define WRITE_MMU_EBMB4_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB4_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB4_PAYLOAD_SLICE7m_OFFSET,i,&(m._mmu_ebmb4_payload_slice7),8)

/*******************************************************************************
 * End of 'MMU_EBMB4_PAYLOAD_SLICE7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB5_PAYLOAD_SLICE0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB5_PAYLOAD_SLICE0.
 */
#define READ_MMU_EBMB5_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB5_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE0m_OFFSET,i,(m._mmu_ebmb5_payload_slice0),8)
#define WRITE_MMU_EBMB5_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB5_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE0m_OFFSET,i,&(m._mmu_ebmb5_payload_slice0),8)

/*******************************************************************************
 * End of 'MMU_EBMB5_PAYLOAD_SLICE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB5_PAYLOAD_SLICE1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB5_PAYLOAD_SLICE1.
 */
#define READ_MMU_EBMB5_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB5_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE1m_OFFSET,i,(m._mmu_ebmb5_payload_slice1),8)
#define WRITE_MMU_EBMB5_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB5_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE1m_OFFSET,i,&(m._mmu_ebmb5_payload_slice1),8)

/*******************************************************************************
 * End of 'MMU_EBMB5_PAYLOAD_SLICE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB5_PAYLOAD_SLICE2
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB5_PAYLOAD_SLICE2.
 */
#define READ_MMU_EBMB5_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB5_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE2m_OFFSET,i,(m._mmu_ebmb5_payload_slice2),8)
#define WRITE_MMU_EBMB5_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB5_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE2m_OFFSET,i,&(m._mmu_ebmb5_payload_slice2),8)

/*******************************************************************************
 * End of 'MMU_EBMB5_PAYLOAD_SLICE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB5_PAYLOAD_SLICE3
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB5_PAYLOAD_SLICE3.
 */
#define READ_MMU_EBMB5_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB5_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE3m_OFFSET,i,(m._mmu_ebmb5_payload_slice3),8)
#define WRITE_MMU_EBMB5_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB5_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE3m_OFFSET,i,&(m._mmu_ebmb5_payload_slice3),8)

/*******************************************************************************
 * End of 'MMU_EBMB5_PAYLOAD_SLICE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB5_PAYLOAD_SLICE4
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB5_PAYLOAD_SLICE4.
 */
#define READ_MMU_EBMB5_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB5_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE4m_OFFSET,i,(m._mmu_ebmb5_payload_slice4),8)
#define WRITE_MMU_EBMB5_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB5_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE4m_OFFSET,i,&(m._mmu_ebmb5_payload_slice4),8)

/*******************************************************************************
 * End of 'MMU_EBMB5_PAYLOAD_SLICE4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB5_PAYLOAD_SLICE5
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB5_PAYLOAD_SLICE5.
 */
#define READ_MMU_EBMB5_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB5_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE5m_OFFSET,i,(m._mmu_ebmb5_payload_slice5),8)
#define WRITE_MMU_EBMB5_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB5_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE5m_OFFSET,i,&(m._mmu_ebmb5_payload_slice5),8)

/*******************************************************************************
 * End of 'MMU_EBMB5_PAYLOAD_SLICE5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB5_PAYLOAD_SLICE6
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB5_PAYLOAD_SLICE6.
 */
#define READ_MMU_EBMB5_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB5_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE6m_OFFSET,i,(m._mmu_ebmb5_payload_slice6),8)
#define WRITE_MMU_EBMB5_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB5_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE6m_OFFSET,i,&(m._mmu_ebmb5_payload_slice6),8)

/*******************************************************************************
 * End of 'MMU_EBMB5_PAYLOAD_SLICE6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB5_PAYLOAD_SLICE7
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB5_PAYLOAD_SLICE7.
 */
#define READ_MMU_EBMB5_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB5_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE7m_OFFSET,i,(m._mmu_ebmb5_payload_slice7),8)
#define WRITE_MMU_EBMB5_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB5_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB5_PAYLOAD_SLICE7m_OFFSET,i,&(m._mmu_ebmb5_payload_slice7),8)

/*******************************************************************************
 * End of 'MMU_EBMB5_PAYLOAD_SLICE7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB6_PAYLOAD_SLICE0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB6_PAYLOAD_SLICE0.
 */
#define READ_MMU_EBMB6_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB6_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE0m_OFFSET,i,(m._mmu_ebmb6_payload_slice0),8)
#define WRITE_MMU_EBMB6_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB6_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE0m_OFFSET,i,&(m._mmu_ebmb6_payload_slice0),8)

/*******************************************************************************
 * End of 'MMU_EBMB6_PAYLOAD_SLICE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB6_PAYLOAD_SLICE1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB6_PAYLOAD_SLICE1.
 */
#define READ_MMU_EBMB6_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB6_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE1m_OFFSET,i,(m._mmu_ebmb6_payload_slice1),8)
#define WRITE_MMU_EBMB6_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB6_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE1m_OFFSET,i,&(m._mmu_ebmb6_payload_slice1),8)

/*******************************************************************************
 * End of 'MMU_EBMB6_PAYLOAD_SLICE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB6_PAYLOAD_SLICE2
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB6_PAYLOAD_SLICE2.
 */
#define READ_MMU_EBMB6_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB6_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE2m_OFFSET,i,(m._mmu_ebmb6_payload_slice2),8)
#define WRITE_MMU_EBMB6_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB6_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE2m_OFFSET,i,&(m._mmu_ebmb6_payload_slice2),8)

/*******************************************************************************
 * End of 'MMU_EBMB6_PAYLOAD_SLICE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB6_PAYLOAD_SLICE3
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB6_PAYLOAD_SLICE3.
 */
#define READ_MMU_EBMB6_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB6_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE3m_OFFSET,i,(m._mmu_ebmb6_payload_slice3),8)
#define WRITE_MMU_EBMB6_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB6_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE3m_OFFSET,i,&(m._mmu_ebmb6_payload_slice3),8)

/*******************************************************************************
 * End of 'MMU_EBMB6_PAYLOAD_SLICE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB6_PAYLOAD_SLICE4
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB6_PAYLOAD_SLICE4.
 */
#define READ_MMU_EBMB6_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB6_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE4m_OFFSET,i,(m._mmu_ebmb6_payload_slice4),8)
#define WRITE_MMU_EBMB6_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB6_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE4m_OFFSET,i,&(m._mmu_ebmb6_payload_slice4),8)

/*******************************************************************************
 * End of 'MMU_EBMB6_PAYLOAD_SLICE4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB6_PAYLOAD_SLICE5
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB6_PAYLOAD_SLICE5.
 */
#define READ_MMU_EBMB6_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB6_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE5m_OFFSET,i,(m._mmu_ebmb6_payload_slice5),8)
#define WRITE_MMU_EBMB6_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB6_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE5m_OFFSET,i,&(m._mmu_ebmb6_payload_slice5),8)

/*******************************************************************************
 * End of 'MMU_EBMB6_PAYLOAD_SLICE5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB6_PAYLOAD_SLICE6
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB6_PAYLOAD_SLICE6.
 */
#define READ_MMU_EBMB6_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB6_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE6m_OFFSET,i,(m._mmu_ebmb6_payload_slice6),8)
#define WRITE_MMU_EBMB6_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB6_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE6m_OFFSET,i,&(m._mmu_ebmb6_payload_slice6),8)

/*******************************************************************************
 * End of 'MMU_EBMB6_PAYLOAD_SLICE6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB6_PAYLOAD_SLICE7
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB6_PAYLOAD_SLICE7.
 */
#define READ_MMU_EBMB6_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB6_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE7m_OFFSET,i,(m._mmu_ebmb6_payload_slice7),8)
#define WRITE_MMU_EBMB6_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB6_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB6_PAYLOAD_SLICE7m_OFFSET,i,&(m._mmu_ebmb6_payload_slice7),8)

/*******************************************************************************
 * End of 'MMU_EBMB6_PAYLOAD_SLICE7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB7_PAYLOAD_SLICE0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB7_PAYLOAD_SLICE0.
 */
#define READ_MMU_EBMB7_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB7_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE0m_OFFSET,i,(m._mmu_ebmb7_payload_slice0),8)
#define WRITE_MMU_EBMB7_PAYLOAD_SLICE0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB7_PAYLOAD_SLICE0m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE0m_OFFSET,i,&(m._mmu_ebmb7_payload_slice0),8)

/*******************************************************************************
 * End of 'MMU_EBMB7_PAYLOAD_SLICE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB7_PAYLOAD_SLICE1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB7_PAYLOAD_SLICE1.
 */
#define READ_MMU_EBMB7_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB7_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE1m_OFFSET,i,(m._mmu_ebmb7_payload_slice1),8)
#define WRITE_MMU_EBMB7_PAYLOAD_SLICE1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB7_PAYLOAD_SLICE1m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE1m_OFFSET,i,&(m._mmu_ebmb7_payload_slice1),8)

/*******************************************************************************
 * End of 'MMU_EBMB7_PAYLOAD_SLICE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB7_PAYLOAD_SLICE2
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB7_PAYLOAD_SLICE2.
 */
#define READ_MMU_EBMB7_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB7_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE2m_OFFSET,i,(m._mmu_ebmb7_payload_slice2),8)
#define WRITE_MMU_EBMB7_PAYLOAD_SLICE2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB7_PAYLOAD_SLICE2m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE2m_OFFSET,i,&(m._mmu_ebmb7_payload_slice2),8)

/*******************************************************************************
 * End of 'MMU_EBMB7_PAYLOAD_SLICE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB7_PAYLOAD_SLICE3
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB7_PAYLOAD_SLICE3.
 */
#define READ_MMU_EBMB7_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB7_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE3m_OFFSET,i,(m._mmu_ebmb7_payload_slice3),8)
#define WRITE_MMU_EBMB7_PAYLOAD_SLICE3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB7_PAYLOAD_SLICE3m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE3m_OFFSET,i,&(m._mmu_ebmb7_payload_slice3),8)

/*******************************************************************************
 * End of 'MMU_EBMB7_PAYLOAD_SLICE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB7_PAYLOAD_SLICE4
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB7_PAYLOAD_SLICE4.
 */
#define READ_MMU_EBMB7_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB7_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE4m_OFFSET,i,(m._mmu_ebmb7_payload_slice4),8)
#define WRITE_MMU_EBMB7_PAYLOAD_SLICE4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB7_PAYLOAD_SLICE4m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE4m_OFFSET,i,&(m._mmu_ebmb7_payload_slice4),8)

/*******************************************************************************
 * End of 'MMU_EBMB7_PAYLOAD_SLICE4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB7_PAYLOAD_SLICE5
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB7_PAYLOAD_SLICE5.
 */
#define READ_MMU_EBMB7_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB7_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE5m_OFFSET,i,(m._mmu_ebmb7_payload_slice5),8)
#define WRITE_MMU_EBMB7_PAYLOAD_SLICE5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB7_PAYLOAD_SLICE5m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE5m_OFFSET,i,&(m._mmu_ebmb7_payload_slice5),8)

/*******************************************************************************
 * End of 'MMU_EBMB7_PAYLOAD_SLICE5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB7_PAYLOAD_SLICE6
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB7_PAYLOAD_SLICE6.
 */
#define READ_MMU_EBMB7_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB7_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE6m_OFFSET,i,(m._mmu_ebmb7_payload_slice6),8)
#define WRITE_MMU_EBMB7_PAYLOAD_SLICE6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB7_PAYLOAD_SLICE6m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE6m_OFFSET,i,&(m._mmu_ebmb7_payload_slice6),8)

/*******************************************************************************
 * End of 'MMU_EBMB7_PAYLOAD_SLICE6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB7_PAYLOAD_SLICE7
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_EBMB7_PAYLOAD_SLICE7.
 */
#define READ_MMU_EBMB7_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB7_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE7m_OFFSET,i,(m._mmu_ebmb7_payload_slice7),8)
#define WRITE_MMU_EBMB7_PAYLOAD_SLICE7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB7_PAYLOAD_SLICE7m_BLKACC,3,0,p,MMU_EBMB7_PAYLOAD_SLICE7m_OFFSET,i,&(m._mmu_ebmb7_payload_slice7),8)

/*******************************************************************************
 * End of 'MMU_EBMB7_PAYLOAD_SLICE7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBMB_CCBE_SLICE
 * BLOCKS:   MMU_EB
 * SIZE:     96
 */
/*
 * These macros can be used to access MMU_EBMB_CCBE_SLICE.
 */
#define READ_MMU_EBMB_CCBE_SLICEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBMB_CCBE_SLICEm_BLKACC,4,0,p,MMU_EBMB_CCBE_SLICEm_OFFSET,i,(m._mmu_ebmb_ccbe_slice),3)
#define WRITE_MMU_EBMB_CCBE_SLICEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBMB_CCBE_SLICEm_BLKACC,4,0,p,MMU_EBMB_CCBE_SLICEm_OFFSET,i,&(m._mmu_ebmb_ccbe_slice),3)

/*******************************************************************************
 * End of 'MMU_EBMB_CCBE_SLICEm'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBMB_CMIC_RESERVED
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBMB_CMIC_RESERVED.
 */
#define READ_MMU_EBMB_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBMB_CMIC_RESERVEDr_BLKACC,4,0,p,MMU_EBMB_CMIC_RESERVEDr_OFFSET,0,(r._mmu_ebmb_cmic_reserved),1)
#define WRITE_MMU_EBMB_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBMB_CMIC_RESERVEDr_BLKACC,4,0,p,MMU_EBMB_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_ebmb_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_EBMB_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBMB_DEBUG
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBMB_DEBUG.
 */
#define READ_MMU_EBMB_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBMB_DEBUGr_BLKACC,4,0,p,MMU_EBMB_DEBUGr_OFFSET,0,(r._mmu_ebmb_debug),2)
#define WRITE_MMU_EBMB_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBMB_DEBUGr_BLKACC,4,0,p,MMU_EBMB_DEBUGr_OFFSET,0,&(r._mmu_ebmb_debug),2)

/*******************************************************************************
 * End of 'MMU_EBMB_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBMB_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBMB_ENABLE_ECCP_MEM.
 */
#define READ_MMU_EBMB_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBMB_ENABLE_ECCP_MEMr_BLKACC,4,0,0,MMU_EBMB_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_ebmb_enable_eccp_mem),1)
#define WRITE_MMU_EBMB_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBMB_ENABLE_ECCP_MEMr_BLKACC,4,0,0,MMU_EBMB_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_ebmb_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_EBMB_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBMB_EN_COR_ERR_RPT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBMB_EN_COR_ERR_RPT.
 */
#define READ_MMU_EBMB_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBMB_EN_COR_ERR_RPTr_BLKACC,4,0,0,MMU_EBMB_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_ebmb_en_cor_err_rpt),1)
#define WRITE_MMU_EBMB_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBMB_EN_COR_ERR_RPTr_BLKACC,4,0,0,MMU_EBMB_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_ebmb_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_EBMB_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG0
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG0.
 */
#define READ_MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG0r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG0r_BLKACC,4,0,0,MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG0r_OFFSET,0,(r._mmu_ebmb_int_unavailable_resp_config0),2)
#define WRITE_MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG0r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG0r_BLKACC,4,0,0,MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG0r_OFFSET,0,&(r._mmu_ebmb_int_unavailable_resp_config0),2)

/*******************************************************************************
 * End of 'MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG1
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG1.
 */
#define READ_MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG1r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG1r_BLKACC,4,0,0,MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG1r_OFFSET,0,(r._mmu_ebmb_int_unavailable_resp_config1),2)
#define WRITE_MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG1r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG1r_BLKACC,4,0,0,MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG1r_OFFSET,0,&(r._mmu_ebmb_int_unavailable_resp_config1),2)

/*******************************************************************************
 * End of 'MMU_EBMB_INT_UNAVAILABLE_RESP_CONFIG1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBMB_TMBUS
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBMB_TMBUS.
 */
#define READ_MMU_EBMB_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBMB_TMBUSr_BLKACC,4,0,0,MMU_EBMB_TMBUSr_OFFSET,0,(r._mmu_ebmb_tmbus),2)
#define WRITE_MMU_EBMB_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBMB_TMBUSr_BLKACC,4,0,0,MMU_EBMB_TMBUSr_OFFSET,0,&(r._mmu_ebmb_tmbus),2)

/*******************************************************************************
 * End of 'MMU_EBMB_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_COUNTER_OVERFLOW
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_COUNTER_OVERFLOW.
 */
#define READ_MMU_EBPCC_COUNTER_OVERFLOWr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_COUNTER_OVERFLOWr_BLKACC,4,0,p,MMU_EBPCC_COUNTER_OVERFLOWr_OFFSET,0,(r._mmu_ebpcc_counter_overflow),1)
#define WRITE_MMU_EBPCC_COUNTER_OVERFLOWr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_COUNTER_OVERFLOWr_BLKACC,4,0,p,MMU_EBPCC_COUNTER_OVERFLOWr_OFFSET,0,&(r._mmu_ebpcc_counter_overflow),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_COUNTER_OVERFLOWr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_COUNTER_UNDERFLOW
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_COUNTER_UNDERFLOW.
 */
#define READ_MMU_EBPCC_COUNTER_UNDERFLOWr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_COUNTER_UNDERFLOWr_BLKACC,4,0,p,MMU_EBPCC_COUNTER_UNDERFLOWr_OFFSET,0,(r._mmu_ebpcc_counter_underflow),1)
#define WRITE_MMU_EBPCC_COUNTER_UNDERFLOWr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_COUNTER_UNDERFLOWr_BLKACC,4,0,p,MMU_EBPCC_COUNTER_UNDERFLOWr_OFFSET,0,&(r._mmu_ebpcc_counter_underflow),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_COUNTER_UNDERFLOWr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_CPU_INT_EN
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_CPU_INT_EN.
 */
#define READ_MMU_EBPCC_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_CPU_INT_ENr_BLKACC,4,0,0,MMU_EBPCC_CPU_INT_ENr_OFFSET,0,(r._mmu_ebpcc_cpu_int_en),1)
#define WRITE_MMU_EBPCC_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_CPU_INT_ENr_BLKACC,4,0,0,MMU_EBPCC_CPU_INT_ENr_OFFSET,0,&(r._mmu_ebpcc_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_CPU_INT_SET
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_CPU_INT_SET.
 */
#define READ_MMU_EBPCC_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_CPU_INT_SETr_BLKACC,4,0,p,MMU_EBPCC_CPU_INT_SETr_OFFSET,0,(r._mmu_ebpcc_cpu_int_set),1)
#define WRITE_MMU_EBPCC_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_CPU_INT_SETr_BLKACC,4,0,p,MMU_EBPCC_CPU_INT_SETr_OFFSET,0,&(r._mmu_ebpcc_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_CPU_INT_STAT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_CPU_INT_STAT.
 */
#define READ_MMU_EBPCC_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_CPU_INT_STATr_BLKACC,4,0,p,MMU_EBPCC_CPU_INT_STATr_OFFSET,0,(r._mmu_ebpcc_cpu_int_stat),1)
#define WRITE_MMU_EBPCC_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_CPU_INT_STATr_BLKACC,4,0,p,MMU_EBPCC_CPU_INT_STATr_OFFSET,0,&(r._mmu_ebpcc_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_EBQUEUE_CELL_CNT_STS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_EBQUEUE_CELL_CNT_STS.
 */
#define READ_MMU_EBPCC_EBQUEUE_CELL_CNT_STSr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_EBQUEUE_CELL_CNT_STSr_BLKACC,4,0,p,MMU_EBPCC_EBQUEUE_CELL_CNT_STSr_OFFSET,i,(r._mmu_ebpcc_ebqueue_cell_cnt_sts),1)
#define WRITE_MMU_EBPCC_EBQUEUE_CELL_CNT_STSr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_EBQUEUE_CELL_CNT_STSr_BLKACC,4,0,p,MMU_EBPCC_EBQUEUE_CELL_CNT_STSr_OFFSET,i,&(r._mmu_ebpcc_ebqueue_cell_cnt_sts),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_EBQUEUE_CELL_CNT_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_EPORT_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_EPORT_CFG.
 */
#define READ_MMU_EBPCC_EPORT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_EPORT_CFGr_BLKACC,4,0,p,MMU_EBPCC_EPORT_CFGr_OFFSET,0,(r._mmu_ebpcc_eport_cfg),1)
#define WRITE_MMU_EBPCC_EPORT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_EPORT_CFGr_BLKACC,4,0,p,MMU_EBPCC_EPORT_CFGr_OFFSET,0,&(r._mmu_ebpcc_eport_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_EPORT_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_MAX_CELL_THD
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_MAX_CELL_THD.
 */
#define READ_MMU_EBPCC_MAX_CELL_THDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_MAX_CELL_THDr_BLKACC,4,0,p,MMU_EBPCC_MAX_CELL_THDr_OFFSET,0,(r._mmu_ebpcc_max_cell_thd),1)
#define WRITE_MMU_EBPCC_MAX_CELL_THDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_MAX_CELL_THDr_BLKACC,4,0,p,MMU_EBPCC_MAX_CELL_THDr_OFFSET,0,&(r._mmu_ebpcc_max_cell_thd),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_MAX_CELL_THDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_MMUQ_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_MMUQ_CFG.
 */
#define READ_MMU_EBPCC_MMUQ_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_MMUQ_CFGr_BLKACC,4,0,0,MMU_EBPCC_MMUQ_CFGr_OFFSET,0,(r._mmu_ebpcc_mmuq_cfg),1)
#define WRITE_MMU_EBPCC_MMUQ_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_MMUQ_CFGr_BLKACC,4,0,0,MMU_EBPCC_MMUQ_CFGr_OFFSET,0,&(r._mmu_ebpcc_mmuq_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_MMUQ_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_MMUQ_SCHQ_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_MMUQ_SCHQ_CFG.
 */
#define READ_MMU_EBPCC_MMUQ_SCHQ_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_MMUQ_SCHQ_CFGr_BLKACC,4,0,p,MMU_EBPCC_MMUQ_SCHQ_CFGr_OFFSET,0,(r._mmu_ebpcc_mmuq_schq_cfg),1)
#define WRITE_MMU_EBPCC_MMUQ_SCHQ_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_MMUQ_SCHQ_CFGr_BLKACC,4,0,p,MMU_EBPCC_MMUQ_SCHQ_CFGr_OFFSET,0,&(r._mmu_ebpcc_mmuq_schq_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_MMUQ_SCHQ_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_MMUQ_SCHQ_PROFILE
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPCC_MMUQ_SCHQ_PROFILE.
 */
#define READ_MMU_EBPCC_MMUQ_SCHQ_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_MMUQ_SCHQ_PROFILEr_BLKACC,4,0,0,MMU_EBPCC_MMUQ_SCHQ_PROFILEr_OFFSET,i,(r._mmu_ebpcc_mmuq_schq_profile),2)
#define WRITE_MMU_EBPCC_MMUQ_SCHQ_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_MMUQ_SCHQ_PROFILEr_BLKACC,4,0,0,MMU_EBPCC_MMUQ_SCHQ_PROFILEr_OFFSET,i,&(r._mmu_ebpcc_mmuq_schq_profile),2)

/*******************************************************************************
 * End of 'MMU_EBPCC_MMUQ_SCHQ_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_0_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_0_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_0_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_0_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_0_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_threshold0_speed_0_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_0_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_0_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_0_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_threshold0_speed_0_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_0_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_1_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_1_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_1_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_1_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_1_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_threshold0_speed_1_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_1_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_1_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_1_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_threshold0_speed_1_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_1_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_2_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_2_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_2_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_2_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_2_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_threshold0_speed_2_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_2_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_2_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_2_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_threshold0_speed_2_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_2_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_3_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_3_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_3_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_3_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_3_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_threshold0_speed_3_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_3_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_3_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_3_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_threshold0_speed_3_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_3_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_4_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_4_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_4_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_4_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_4_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_threshold0_speed_4_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_4_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_4_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_4_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_threshold0_speed_4_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_4_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_5_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_5_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_5_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_5_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_5_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_threshold0_speed_5_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_5_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_5_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_5_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_threshold0_speed_5_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_5_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_6_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_6_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_6_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_6_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_6_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_threshold0_speed_6_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_6_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_6_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_6_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_threshold0_speed_6_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_THRESHOLD0_SPEED_6_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_0_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_0_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_0_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_0_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_0_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_threshold1_speed_0_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_0_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_0_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_0_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_threshold1_speed_0_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_0_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_1_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_1_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_1_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_1_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_1_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_threshold1_speed_1_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_1_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_1_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_1_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_threshold1_speed_1_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_1_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_2_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_2_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_2_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_2_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_2_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_threshold1_speed_2_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_2_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_2_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_2_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_threshold1_speed_2_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_2_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_3_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_3_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_3_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_3_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_3_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_threshold1_speed_3_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_3_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_3_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_3_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_threshold1_speed_3_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_3_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_4_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_4_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_4_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_4_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_4_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_threshold1_speed_4_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_4_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_4_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_4_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_threshold1_speed_4_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_4_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_5_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_5_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_5_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_5_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_5_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_threshold1_speed_5_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_5_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_5_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_5_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_threshold1_speed_5_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_5_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_6_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_6_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_6_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_6_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_6_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_threshold1_speed_6_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_6_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_6_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_6_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_threshold1_speed_6_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_THRESHOLD1_SPEED_6_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_0_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_0_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_0_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_0_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_0_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_warm_up_speed_0_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_0_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_0_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_0_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_warm_up_speed_0_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_0_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_1_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_1_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_1_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_1_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_1_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_warm_up_speed_1_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_1_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_1_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_1_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_warm_up_speed_1_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_1_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_2_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_2_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_2_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_2_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_2_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_warm_up_speed_2_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_2_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_2_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_2_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_warm_up_speed_2_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_2_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_3_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_3_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_3_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_3_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_3_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_warm_up_speed_3_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_3_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_3_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_3_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_warm_up_speed_3_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_3_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_4_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_4_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_4_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_4_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_4_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_warm_up_speed_4_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_4_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_4_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_4_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_warm_up_speed_4_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_4_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_5_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_5_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_5_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_5_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_5_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_warm_up_speed_5_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_5_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_5_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_5_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_warm_up_speed_5_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_5_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_6_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_6_CFG.
 */
#define READ_MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_6_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_6_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_6_CFGr_OFFSET,0,(r._mmu_ebpcc_portdeficit_warm_up_speed_6_cfg),1)
#define WRITE_MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_6_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_6_CFGr_BLKACC,4,0,0,MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_6_CFGr_OFFSET,0,&(r._mmu_ebpcc_portdeficit_warm_up_speed_6_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_PORTDEFICIT_WARM_UP_SPEED_6_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_RSVD_REG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_RSVD_REG.
 */
#define READ_MMU_EBPCC_RSVD_REGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_RSVD_REGr_BLKACC,4,0,p,MMU_EBPCC_RSVD_REGr_OFFSET,0,(r._mmu_ebpcc_rsvd_reg),1)
#define WRITE_MMU_EBPCC_RSVD_REGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_RSVD_REGr_BLKACC,4,0,p,MMU_EBPCC_RSVD_REGr_OFFSET,0,&(r._mmu_ebpcc_rsvd_reg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_RSVD_REGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_TCT_SPEED_0_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_TCT_SPEED_0_CFG.
 */
#define READ_MMU_EBPCC_TCT_SPEED_0_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_TCT_SPEED_0_CFGr_BLKACC,4,0,0,MMU_EBPCC_TCT_SPEED_0_CFGr_OFFSET,0,(r._mmu_ebpcc_tct_speed_0_cfg),1)
#define WRITE_MMU_EBPCC_TCT_SPEED_0_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_TCT_SPEED_0_CFGr_BLKACC,4,0,0,MMU_EBPCC_TCT_SPEED_0_CFGr_OFFSET,0,&(r._mmu_ebpcc_tct_speed_0_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_TCT_SPEED_0_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_TCT_SPEED_1_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_TCT_SPEED_1_CFG.
 */
#define READ_MMU_EBPCC_TCT_SPEED_1_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_TCT_SPEED_1_CFGr_BLKACC,4,0,0,MMU_EBPCC_TCT_SPEED_1_CFGr_OFFSET,0,(r._mmu_ebpcc_tct_speed_1_cfg),1)
#define WRITE_MMU_EBPCC_TCT_SPEED_1_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_TCT_SPEED_1_CFGr_BLKACC,4,0,0,MMU_EBPCC_TCT_SPEED_1_CFGr_OFFSET,0,&(r._mmu_ebpcc_tct_speed_1_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_TCT_SPEED_1_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_TCT_SPEED_2_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_TCT_SPEED_2_CFG.
 */
#define READ_MMU_EBPCC_TCT_SPEED_2_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_TCT_SPEED_2_CFGr_BLKACC,4,0,0,MMU_EBPCC_TCT_SPEED_2_CFGr_OFFSET,0,(r._mmu_ebpcc_tct_speed_2_cfg),1)
#define WRITE_MMU_EBPCC_TCT_SPEED_2_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_TCT_SPEED_2_CFGr_BLKACC,4,0,0,MMU_EBPCC_TCT_SPEED_2_CFGr_OFFSET,0,&(r._mmu_ebpcc_tct_speed_2_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_TCT_SPEED_2_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_TCT_SPEED_3_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_TCT_SPEED_3_CFG.
 */
#define READ_MMU_EBPCC_TCT_SPEED_3_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_TCT_SPEED_3_CFGr_BLKACC,4,0,0,MMU_EBPCC_TCT_SPEED_3_CFGr_OFFSET,0,(r._mmu_ebpcc_tct_speed_3_cfg),1)
#define WRITE_MMU_EBPCC_TCT_SPEED_3_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_TCT_SPEED_3_CFGr_BLKACC,4,0,0,MMU_EBPCC_TCT_SPEED_3_CFGr_OFFSET,0,&(r._mmu_ebpcc_tct_speed_3_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_TCT_SPEED_3_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_TCT_SPEED_4_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_TCT_SPEED_4_CFG.
 */
#define READ_MMU_EBPCC_TCT_SPEED_4_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_TCT_SPEED_4_CFGr_BLKACC,4,0,0,MMU_EBPCC_TCT_SPEED_4_CFGr_OFFSET,0,(r._mmu_ebpcc_tct_speed_4_cfg),1)
#define WRITE_MMU_EBPCC_TCT_SPEED_4_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_TCT_SPEED_4_CFGr_BLKACC,4,0,0,MMU_EBPCC_TCT_SPEED_4_CFGr_OFFSET,0,&(r._mmu_ebpcc_tct_speed_4_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_TCT_SPEED_4_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_TCT_SPEED_5_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_TCT_SPEED_5_CFG.
 */
#define READ_MMU_EBPCC_TCT_SPEED_5_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_TCT_SPEED_5_CFGr_BLKACC,4,0,0,MMU_EBPCC_TCT_SPEED_5_CFGr_OFFSET,0,(r._mmu_ebpcc_tct_speed_5_cfg),1)
#define WRITE_MMU_EBPCC_TCT_SPEED_5_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_TCT_SPEED_5_CFGr_BLKACC,4,0,0,MMU_EBPCC_TCT_SPEED_5_CFGr_OFFSET,0,&(r._mmu_ebpcc_tct_speed_5_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_TCT_SPEED_5_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPCC_TCT_SPEED_6_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPCC_TCT_SPEED_6_CFG.
 */
#define READ_MMU_EBPCC_TCT_SPEED_6_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPCC_TCT_SPEED_6_CFGr_BLKACC,4,0,0,MMU_EBPCC_TCT_SPEED_6_CFGr_OFFSET,0,(r._mmu_ebpcc_tct_speed_6_cfg),1)
#define WRITE_MMU_EBPCC_TCT_SPEED_6_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPCC_TCT_SPEED_6_CFGr_BLKACC,4,0,0,MMU_EBPCC_TCT_SPEED_6_CFGr_OFFSET,0,&(r._mmu_ebpcc_tct_speed_6_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPCC_TCT_SPEED_6_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPMB_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPMB_CMIC_RESERVED.
 */
#define READ_MMU_EBPMB_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPMB_CMIC_RESERVEDr_BLKACC,3,0,0,MMU_EBPMB_CMIC_RESERVEDr_OFFSET,0,(r._mmu_ebpmb_cmic_reserved),1)
#define WRITE_MMU_EBPMB_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPMB_CMIC_RESERVEDr_BLKACC,3,0,0,MMU_EBPMB_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_ebpmb_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_EBPMB_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPMB_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPMB_TMBUS.
 */
#define READ_MMU_EBPMB_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPMB_TMBUSr_BLKACC,3,0,0,MMU_EBPMB_TMBUSr_OFFSET,0,(r._mmu_ebpmb_tmbus),2)
#define WRITE_MMU_EBPMB_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPMB_TMBUSr_BLKACC,3,0,0,MMU_EBPMB_TMBUSr_OFFSET,0,&(r._mmu_ebpmb_tmbus),2)

/*******************************************************************************
 * End of 'MMU_EBPMB_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_CAL_CONFIG
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_CAL_CONFIG.
 */
#define READ_MMU_EBPTS_CAL_CONFIGr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_CAL_CONFIGr_BLKACC,4,0,p,MMU_EBPTS_CAL_CONFIGr_OFFSET,i,(r._mmu_ebpts_cal_config),2)
#define WRITE_MMU_EBPTS_CAL_CONFIGr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_CAL_CONFIGr_BLKACC,4,0,p,MMU_EBPTS_CAL_CONFIGr_OFFSET,i,&(r._mmu_ebpts_cal_config),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_CAL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_CBMG_VALUE
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_CBMG_VALUE.
 */
#define READ_MMU_EBPTS_CBMG_VALUEr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_CBMG_VALUEr_BLKACC,4,0,p,MMU_EBPTS_CBMG_VALUEr_OFFSET,0,(r._mmu_ebpts_cbmg_value),1)
#define WRITE_MMU_EBPTS_CBMG_VALUEr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_CBMG_VALUEr_BLKACC,4,0,p,MMU_EBPTS_CBMG_VALUEr_OFFSET,0,&(r._mmu_ebpts_cbmg_value),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_CBMG_VALUEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_CMIC_RESERVED
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_CMIC_RESERVED.
 */
#define READ_MMU_EBPTS_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_CMIC_RESERVEDr_BLKACC,4,0,0,MMU_EBPTS_CMIC_RESERVEDr_OFFSET,0,(r._mmu_ebpts_cmic_reserved),1)
#define WRITE_MMU_EBPTS_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_CMIC_RESERVEDr_BLKACC,4,0,0,MMU_EBPTS_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_ebpts_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_CPU_MGMT_LB_RATIOS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_CPU_MGMT_LB_RATIOS.
 */
#define READ_MMU_EBPTS_CPU_MGMT_LB_RATIOSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_CPU_MGMT_LB_RATIOSr_BLKACC,4,0,p,MMU_EBPTS_CPU_MGMT_LB_RATIOSr_OFFSET,0,(r._mmu_ebpts_cpu_mgmt_lb_ratios),1)
#define WRITE_MMU_EBPTS_CPU_MGMT_LB_RATIOSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_CPU_MGMT_LB_RATIOSr_BLKACC,4,0,p,MMU_EBPTS_CPU_MGMT_LB_RATIOSr_OFFSET,0,&(r._mmu_ebpts_cpu_mgmt_lb_ratios),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_CPU_MGMT_LB_RATIOSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_DEBUG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_DEBUG.
 */
#define READ_MMU_EBPTS_EBSHP_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_DEBUGr_BLKACC,4,0,p,MMU_EBPTS_EBSHP_DEBUGr_OFFSET,0,(r._mmu_ebpts_ebshp_debug),1)
#define WRITE_MMU_EBPTS_EBSHP_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_DEBUGr_BLKACC,4,0,p,MMU_EBPTS_EBSHP_DEBUGr_OFFSET,0,&(r._mmu_ebpts_ebshp_debug),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_GLB_CONFIG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_GLB_CONFIG.
 */
#define READ_MMU_EBPTS_EBSHP_GLB_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_GLB_CONFIGr_BLKACC,4,0,p,MMU_EBPTS_EBSHP_GLB_CONFIGr_OFFSET,0,(r._mmu_ebpts_ebshp_glb_config),1)
#define WRITE_MMU_EBPTS_EBSHP_GLB_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_GLB_CONFIGr_BLKACC,4,0,p,MMU_EBPTS_EBSHP_GLB_CONFIGr_OFFSET,0,&(r._mmu_ebpts_ebshp_glb_config),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_GLB_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_CFG.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_CFGr_BLKACC,4,0,p,MMU_EBPTS_EBSHP_PORT_CFGr_OFFSET,0,(r._mmu_ebpts_ebshp_port_cfg),1)
#define WRITE_MMU_EBPTS_EBSHP_PORT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_CFGr_BLKACC,4,0,p,MMU_EBPTS_EBSHP_PORT_CFGr_OFFSET,0,&(r._mmu_ebpts_ebshp_port_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_0
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_0.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_0r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_0r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_0r_OFFSET,0,(r._mmu_ebpts_ebshp_port_speed_cfg0_0),2)
#define WRITE_MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_0r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_0r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_0r_OFFSET,0,&(r._mmu_ebpts_ebshp_port_speed_cfg0_0),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_1
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_1.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_1r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_1r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_1r_OFFSET,0,(r._mmu_ebpts_ebshp_port_speed_cfg0_1),2)
#define WRITE_MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_1r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_1r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_1r_OFFSET,0,&(r._mmu_ebpts_ebshp_port_speed_cfg0_1),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_2
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_2.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_2r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_2r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_2r_OFFSET,0,(r._mmu_ebpts_ebshp_port_speed_cfg0_2),2)
#define WRITE_MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_2r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_2r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_2r_OFFSET,0,&(r._mmu_ebpts_ebshp_port_speed_cfg0_2),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_3
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_3.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_3r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_3r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_3r_OFFSET,0,(r._mmu_ebpts_ebshp_port_speed_cfg0_3),2)
#define WRITE_MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_3r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_3r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_3r_OFFSET,0,&(r._mmu_ebpts_ebshp_port_speed_cfg0_3),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_4
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_4.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_4r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_4r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_4r_OFFSET,0,(r._mmu_ebpts_ebshp_port_speed_cfg0_4),2)
#define WRITE_MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_4r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_4r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_4r_OFFSET,0,&(r._mmu_ebpts_ebshp_port_speed_cfg0_4),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_4r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_5
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_5.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_5r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_5r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_5r_OFFSET,0,(r._mmu_ebpts_ebshp_port_speed_cfg0_5),2)
#define WRITE_MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_5r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_5r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_5r_OFFSET,0,&(r._mmu_ebpts_ebshp_port_speed_cfg0_5),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_5r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_6
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_6.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_6r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_6r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_6r_OFFSET,0,(r._mmu_ebpts_ebshp_port_speed_cfg0_6),2)
#define WRITE_MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_6r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_6r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_6r_OFFSET,0,&(r._mmu_ebpts_ebshp_port_speed_cfg0_6),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_SPEED_CFG0_6r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_0
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_0.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_0r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_0r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_0r_OFFSET,0,(r._mmu_ebpts_ebshp_port_speed_cfg1_0),2)
#define WRITE_MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_0r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_0r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_0r_OFFSET,0,&(r._mmu_ebpts_ebshp_port_speed_cfg1_0),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_1
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_1.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_1r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_1r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_1r_OFFSET,0,(r._mmu_ebpts_ebshp_port_speed_cfg1_1),2)
#define WRITE_MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_1r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_1r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_1r_OFFSET,0,&(r._mmu_ebpts_ebshp_port_speed_cfg1_1),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_2
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_2.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_2r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_2r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_2r_OFFSET,0,(r._mmu_ebpts_ebshp_port_speed_cfg1_2),2)
#define WRITE_MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_2r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_2r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_2r_OFFSET,0,&(r._mmu_ebpts_ebshp_port_speed_cfg1_2),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_3
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_3.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_3r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_3r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_3r_OFFSET,0,(r._mmu_ebpts_ebshp_port_speed_cfg1_3),2)
#define WRITE_MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_3r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_3r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_3r_OFFSET,0,&(r._mmu_ebpts_ebshp_port_speed_cfg1_3),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_4
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_4.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_4r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_4r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_4r_OFFSET,0,(r._mmu_ebpts_ebshp_port_speed_cfg1_4),2)
#define WRITE_MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_4r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_4r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_4r_OFFSET,0,&(r._mmu_ebpts_ebshp_port_speed_cfg1_4),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_4r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_5
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_5.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_5r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_5r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_5r_OFFSET,0,(r._mmu_ebpts_ebshp_port_speed_cfg1_5),2)
#define WRITE_MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_5r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_5r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_5r_OFFSET,0,&(r._mmu_ebpts_ebshp_port_speed_cfg1_5),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_5r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_6
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_6.
 */
#define READ_MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_6r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_6r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_6r_OFFSET,0,(r._mmu_ebpts_ebshp_port_speed_cfg1_6),2)
#define WRITE_MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_6r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_6r_BLKACC,4,0,0,MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_6r_OFFSET,0,&(r._mmu_ebpts_ebshp_port_speed_cfg1_6),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_PORT_SPEED_CFG1_6r'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBPTS_EBSHP_SHAPE_BUS_LATENCY_FIFO
 * BLOCKS:   MMU_EB
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_EBPTS_EBSHP_SHAPE_BUS_LATENCY_FIFO.
 */
#define READ_MMU_EBPTS_EBSHP_SHAPE_BUS_LATENCY_FIFOm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBPTS_EBSHP_SHAPE_BUS_LATENCY_FIFOm_BLKACC,4,0,p,MMU_EBPTS_EBSHP_SHAPE_BUS_LATENCY_FIFOm_OFFSET,i,(m._mmu_ebpts_ebshp_shape_bus_latency_fifo),1)
#define WRITE_MMU_EBPTS_EBSHP_SHAPE_BUS_LATENCY_FIFOm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBPTS_EBSHP_SHAPE_BUS_LATENCY_FIFOm_BLKACC,4,0,p,MMU_EBPTS_EBSHP_SHAPE_BUS_LATENCY_FIFOm_OFFSET,i,&(m._mmu_ebpts_ebshp_shape_bus_latency_fifo),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_EBSHP_SHAPE_BUS_LATENCY_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EDB_CREDIT_COUNTER
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_EDB_CREDIT_COUNTER.
 */
#define READ_MMU_EBPTS_EDB_CREDIT_COUNTERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EDB_CREDIT_COUNTERr_BLKACC,4,0,p,MMU_EBPTS_EDB_CREDIT_COUNTERr_OFFSET,0,(r._mmu_ebpts_edb_credit_counter),1)
#define WRITE_MMU_EBPTS_EDB_CREDIT_COUNTERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EDB_CREDIT_COUNTERr_BLKACC,4,0,p,MMU_EBPTS_EDB_CREDIT_COUNTERr_OFFSET,0,&(r._mmu_ebpts_edb_credit_counter),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_EDB_CREDIT_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_0
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_0.
 */
#define READ_MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_0r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_0r_BLKACC,4,0,0,MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_0r_OFFSET,0,(r._mmu_ebpts_edb_port_credit_threshold_0),1)
#define WRITE_MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_0r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_0r_BLKACC,4,0,0,MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_0r_OFFSET,0,&(r._mmu_ebpts_edb_port_credit_threshold_0),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_1
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_1.
 */
#define READ_MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_1r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_1r_BLKACC,4,0,0,MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_1r_OFFSET,0,(r._mmu_ebpts_edb_port_credit_threshold_1),1)
#define WRITE_MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_1r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_1r_BLKACC,4,0,0,MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_1r_OFFSET,0,&(r._mmu_ebpts_edb_port_credit_threshold_1),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_EDB_PORT_CREDIT_THRESHOLD_1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_ENABLE_ECCP_MEM.
 */
#define READ_MMU_EBPTS_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_ENABLE_ECCP_MEMr_BLKACC,4,0,0,MMU_EBPTS_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_ebpts_enable_eccp_mem),1)
#define WRITE_MMU_EBPTS_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_ENABLE_ECCP_MEMr_BLKACC,4,0,0,MMU_EBPTS_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_ebpts_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_EN_COR_ERR_RPT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_EN_COR_ERR_RPT.
 */
#define READ_MMU_EBPTS_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_EN_COR_ERR_RPTr_BLKACC,4,0,0,MMU_EBPTS_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_ebpts_en_cor_err_rpt),1)
#define WRITE_MMU_EBPTS_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_EN_COR_ERR_RPTr_BLKACC,4,0,0,MMU_EBPTS_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_ebpts_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_FEATURE_CTRL
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_FEATURE_CTRL.
 */
#define READ_MMU_EBPTS_FEATURE_CTRLr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_FEATURE_CTRLr_BLKACC,4,0,p,MMU_EBPTS_FEATURE_CTRLr_OFFSET,0,(r._mmu_ebpts_feature_ctrl),1)
#define WRITE_MMU_EBPTS_FEATURE_CTRLr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_FEATURE_CTRLr_BLKACC,4,0,p,MMU_EBPTS_FEATURE_CTRLr_OFFSET,0,&(r._mmu_ebpts_feature_ctrl),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_FEATURE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_MAX_SPACING
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_MAX_SPACING.
 */
#define READ_MMU_EBPTS_MAX_SPACINGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_MAX_SPACINGr_BLKACC,4,0,p,MMU_EBPTS_MAX_SPACINGr_OFFSET,0,(r._mmu_ebpts_max_spacing),1)
#define WRITE_MMU_EBPTS_MAX_SPACINGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_MAX_SPACINGr_BLKACC,4,0,p,MMU_EBPTS_MAX_SPACINGr_OFFSET,0,&(r._mmu_ebpts_max_spacing),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_MAX_SPACINGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_MIN_CELL_SPACING
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_MIN_CELL_SPACING.
 */
#define READ_MMU_EBPTS_MIN_CELL_SPACINGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_MIN_CELL_SPACINGr_BLKACC,4,0,0,MMU_EBPTS_MIN_CELL_SPACINGr_OFFSET,0,(r._mmu_ebpts_min_cell_spacing),1)
#define WRITE_MMU_EBPTS_MIN_CELL_SPACINGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_MIN_CELL_SPACINGr_BLKACC,4,0,0,MMU_EBPTS_MIN_CELL_SPACINGr_OFFSET,0,&(r._mmu_ebpts_min_cell_spacing),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_MIN_CELL_SPACINGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_MIN_CELL_SPACING_EOP_TO_SOP
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_MIN_CELL_SPACING_EOP_TO_SOP.
 */
#define READ_MMU_EBPTS_MIN_CELL_SPACING_EOP_TO_SOPr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_MIN_CELL_SPACING_EOP_TO_SOPr_BLKACC,4,0,0,MMU_EBPTS_MIN_CELL_SPACING_EOP_TO_SOPr_OFFSET,0,(r._mmu_ebpts_min_cell_spacing_eop_to_sop),1)
#define WRITE_MMU_EBPTS_MIN_CELL_SPACING_EOP_TO_SOPr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_MIN_CELL_SPACING_EOP_TO_SOPr_BLKACC,4,0,0,MMU_EBPTS_MIN_CELL_SPACING_EOP_TO_SOPr_OFFSET,0,&(r._mmu_ebpts_min_cell_spacing_eop_to_sop),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_MIN_CELL_SPACING_EOP_TO_SOPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_MIN_PORT_PICK_SPACING_WITHIN_PKT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_MIN_PORT_PICK_SPACING_WITHIN_PKT.
 */
#define READ_MMU_EBPTS_MIN_PORT_PICK_SPACING_WITHIN_PKTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_MIN_PORT_PICK_SPACING_WITHIN_PKTr_BLKACC,4,0,0,MMU_EBPTS_MIN_PORT_PICK_SPACING_WITHIN_PKTr_OFFSET,0,(r._mmu_ebpts_min_port_pick_spacing_within_pkt),1)
#define WRITE_MMU_EBPTS_MIN_PORT_PICK_SPACING_WITHIN_PKTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_MIN_PORT_PICK_SPACING_WITHIN_PKTr_BLKACC,4,0,0,MMU_EBPTS_MIN_PORT_PICK_SPACING_WITHIN_PKTr_OFFSET,0,&(r._mmu_ebpts_min_port_pick_spacing_within_pkt),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_MIN_PORT_PICK_SPACING_WITHIN_PKTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAY
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAY.
 */
#define READ_MMU_EBPTS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr_BLKACC,4,0,0,MMU_EBPTS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr_OFFSET,0,(r._mmu_ebpts_mmu_pksch_pkt_credit_return_delay),1)
#define WRITE_MMU_EBPTS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr_BLKACC,4,0,0,MMU_EBPTS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr_OFFSET,0,&(r._mmu_ebpts_mmu_pksch_pkt_credit_return_delay),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_MMU_PKSCH_PKT_CREDIT_RETURN_DELAYr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_MMU_PORT_TO_PHY_PORT_MAPPING
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_MMU_PORT_TO_PHY_PORT_MAPPING.
 */
#define READ_MMU_EBPTS_MMU_PORT_TO_PHY_PORT_MAPPINGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_MMU_PORT_TO_PHY_PORT_MAPPINGr_BLKACC,4,0,p,MMU_EBPTS_MMU_PORT_TO_PHY_PORT_MAPPINGr_OFFSET,0,(r._mmu_ebpts_mmu_port_to_phy_port_mapping),1)
#define WRITE_MMU_EBPTS_MMU_PORT_TO_PHY_PORT_MAPPINGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_MMU_PORT_TO_PHY_PORT_MAPPINGr_BLKACC,4,0,p,MMU_EBPTS_MMU_PORT_TO_PHY_PORT_MAPPINGr_OFFSET,0,&(r._mmu_ebpts_mmu_port_to_phy_port_mapping),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_MMU_PORT_TO_PHY_PORT_MAPPINGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_PKSCH_CAL_CONFIG
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_PKSCH_CAL_CONFIG.
 */
#define READ_MMU_EBPTS_PKSCH_CAL_CONFIGr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_PKSCH_CAL_CONFIGr_BLKACC,4,0,p,MMU_EBPTS_PKSCH_CAL_CONFIGr_OFFSET,i,(r._mmu_ebpts_pksch_cal_config),2)
#define WRITE_MMU_EBPTS_PKSCH_CAL_CONFIGr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_PKSCH_CAL_CONFIGr_BLKACC,4,0,p,MMU_EBPTS_PKSCH_CAL_CONFIGr_OFFSET,i,&(r._mmu_ebpts_pksch_cal_config),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_PKSCH_CAL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_PKSCH_CPU_MGMT_LB_RATIOS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_PKSCH_CPU_MGMT_LB_RATIOS.
 */
#define READ_MMU_EBPTS_PKSCH_CPU_MGMT_LB_RATIOSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_PKSCH_CPU_MGMT_LB_RATIOSr_BLKACC,4,0,p,MMU_EBPTS_PKSCH_CPU_MGMT_LB_RATIOSr_OFFSET,0,(r._mmu_ebpts_pksch_cpu_mgmt_lb_ratios),1)
#define WRITE_MMU_EBPTS_PKSCH_CPU_MGMT_LB_RATIOSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_PKSCH_CPU_MGMT_LB_RATIOSr_BLKACC,4,0,p,MMU_EBPTS_PKSCH_CPU_MGMT_LB_RATIOSr_OFFSET,0,&(r._mmu_ebpts_pksch_cpu_mgmt_lb_ratios),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_PKSCH_CPU_MGMT_LB_RATIOSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_PKSCH_CREDIT_STS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_PKSCH_CREDIT_STS.
 */
#define READ_MMU_EBPTS_PKSCH_CREDIT_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_PKSCH_CREDIT_STSr_BLKACC,4,0,p,MMU_EBPTS_PKSCH_CREDIT_STSr_OFFSET,0,(r._mmu_ebpts_pksch_credit_sts),1)
#define WRITE_MMU_EBPTS_PKSCH_CREDIT_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_PKSCH_CREDIT_STSr_BLKACC,4,0,p,MMU_EBPTS_PKSCH_CREDIT_STSr_OFFSET,0,&(r._mmu_ebpts_pksch_credit_sts),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_PKSCH_CREDIT_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PIPE
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PIPE.
 */
#define READ_MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PIPEr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PIPEr_BLKACC,4,0,0,MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PIPEr_OFFSET,0,(r._mmu_ebpts_pksch_pkt_credits_per_pipe),1)
#define WRITE_MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PIPEr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PIPEr_BLKACC,4,0,0,MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PIPEr_OFFSET,0,&(r._mmu_ebpts_pksch_pkt_credits_per_pipe),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PIPEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PORT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PORT.
 */
#define READ_MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PORTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PORTr_BLKACC,4,0,0,MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PORTr_OFFSET,0,(r._mmu_ebpts_pksch_pkt_credits_per_port),1)
#define WRITE_MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PORTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PORTr_BLKACC,4,0,0,MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PORTr_OFFSET,0,&(r._mmu_ebpts_pksch_pkt_credits_per_port),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_PKSCH_PKT_CREDITS_PER_PORTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_TMBUS
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBPTS_TMBUS.
 */
#define READ_MMU_EBPTS_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_TMBUSr_BLKACC,4,0,0,MMU_EBPTS_TMBUSr_OFFSET,0,(r._mmu_ebpts_tmbus),2)
#define WRITE_MMU_EBPTS_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_TMBUSr_BLKACC,4,0,0,MMU_EBPTS_TMBUSr_OFFSET,0,&(r._mmu_ebpts_tmbus),2)

/*******************************************************************************
 * End of 'MMU_EBPTS_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBPTS_URG_CELL_SPACING
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBPTS_URG_CELL_SPACING.
 */
#define READ_MMU_EBPTS_URG_CELL_SPACINGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBPTS_URG_CELL_SPACINGr_BLKACC,4,0,0,MMU_EBPTS_URG_CELL_SPACINGr_OFFSET,0,(r._mmu_ebpts_urg_cell_spacing),1)
#define WRITE_MMU_EBPTS_URG_CELL_SPACINGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBPTS_URG_CELL_SPACINGr_BLKACC,4,0,0,MMU_EBPTS_URG_CELL_SPACINGr_OFFSET,0,&(r._mmu_ebpts_urg_cell_spacing),1)

/*******************************************************************************
 * End of 'MMU_EBPTS_URG_CELL_SPACINGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBQS_CMIC_RESERVED
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBQS_CMIC_RESERVED.
 */
#define READ_MMU_EBQS_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBQS_CMIC_RESERVEDr_BLKACC,4,0,0,MMU_EBQS_CMIC_RESERVEDr_OFFSET,0,(r._mmu_ebqs_cmic_reserved),1)
#define WRITE_MMU_EBQS_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBQS_CMIC_RESERVEDr_BLKACC,4,0,0,MMU_EBQS_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_ebqs_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_EBQS_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBQS_CPU_INT_EN
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBQS_CPU_INT_EN.
 */
#define READ_MMU_EBQS_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBQS_CPU_INT_ENr_BLKACC,4,0,0,MMU_EBQS_CPU_INT_ENr_OFFSET,0,(r._mmu_ebqs_cpu_int_en),1)
#define WRITE_MMU_EBQS_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBQS_CPU_INT_ENr_BLKACC,4,0,0,MMU_EBQS_CPU_INT_ENr_OFFSET,0,&(r._mmu_ebqs_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_EBQS_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBQS_CPU_INT_SET
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBQS_CPU_INT_SET.
 */
#define READ_MMU_EBQS_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBQS_CPU_INT_SETr_BLKACC,4,0,p,MMU_EBQS_CPU_INT_SETr_OFFSET,0,(r._mmu_ebqs_cpu_int_set),1)
#define WRITE_MMU_EBQS_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBQS_CPU_INT_SETr_BLKACC,4,0,p,MMU_EBQS_CPU_INT_SETr_OFFSET,0,&(r._mmu_ebqs_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_EBQS_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBQS_CPU_INT_STAT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBQS_CPU_INT_STAT.
 */
#define READ_MMU_EBQS_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBQS_CPU_INT_STATr_BLKACC,4,0,p,MMU_EBQS_CPU_INT_STATr_OFFSET,0,(r._mmu_ebqs_cpu_int_stat),1)
#define WRITE_MMU_EBQS_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBQS_CPU_INT_STATr_BLKACC,4,0,p,MMU_EBQS_CPU_INT_STATr_OFFSET,0,&(r._mmu_ebqs_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_EBQS_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBQS_CPU_INT_STAT_LOG
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBQS_CPU_INT_STAT_LOG.
 */
#define READ_MMU_EBQS_CPU_INT_STAT_LOGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBQS_CPU_INT_STAT_LOGr_BLKACC,4,0,p,MMU_EBQS_CPU_INT_STAT_LOGr_OFFSET,0,(r._mmu_ebqs_cpu_int_stat_log),2)
#define WRITE_MMU_EBQS_CPU_INT_STAT_LOGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBQS_CPU_INT_STAT_LOGr_BLKACC,4,0,p,MMU_EBQS_CPU_INT_STAT_LOGr_OFFSET,0,&(r._mmu_ebqs_cpu_int_stat_log),2)

/*******************************************************************************
 * End of 'MMU_EBQS_CPU_INT_STAT_LOGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBQS_DEBUG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBQS_DEBUG.
 */
#define READ_MMU_EBQS_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBQS_DEBUGr_BLKACC,4,0,p,MMU_EBQS_DEBUGr_OFFSET,0,(r._mmu_ebqs_debug),1)
#define WRITE_MMU_EBQS_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBQS_DEBUGr_BLKACC,4,0,p,MMU_EBQS_DEBUGr_OFFSET,0,&(r._mmu_ebqs_debug),1)

/*******************************************************************************
 * End of 'MMU_EBQS_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBQS_EBPTS_PREFETCH_CNTL
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBQS_EBPTS_PREFETCH_CNTL.
 */
#define READ_MMU_EBQS_EBPTS_PREFETCH_CNTLr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBQS_EBPTS_PREFETCH_CNTLr_BLKACC,4,0,0,MMU_EBQS_EBPTS_PREFETCH_CNTLr_OFFSET,0,(r._mmu_ebqs_ebpts_prefetch_cntl),1)
#define WRITE_MMU_EBQS_EBPTS_PREFETCH_CNTLr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBQS_EBPTS_PREFETCH_CNTLr_BLKACC,4,0,0,MMU_EBQS_EBPTS_PREFETCH_CNTLr_OFFSET,0,&(r._mmu_ebqs_ebpts_prefetch_cntl),1)

/*******************************************************************************
 * End of 'MMU_EBQS_EBPTS_PREFETCH_CNTLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBQS_PORT_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBQS_PORT_CFG.
 */
#define READ_MMU_EBQS_PORT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBQS_PORT_CFGr_BLKACC,4,0,p,MMU_EBQS_PORT_CFGr_OFFSET,0,(r._mmu_ebqs_port_cfg),1)
#define WRITE_MMU_EBQS_PORT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBQS_PORT_CFGr_BLKACC,4,0,p,MMU_EBQS_PORT_CFGr_OFFSET,0,&(r._mmu_ebqs_port_cfg),1)

/*******************************************************************************
 * End of 'MMU_EBQS_PORT_CFGr'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBTOQ_CB
 * BLOCKS:   MMU_EB
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_EBTOQ_CB.
 */
#define READ_MMU_EBTOQ_CBm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBTOQ_CBm_BLKACC,4,0,p,MMU_EBTOQ_CBm_OFFSET,i,(m._mmu_ebtoq_cb),1)
#define WRITE_MMU_EBTOQ_CBm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBTOQ_CBm_BLKACC,4,0,p,MMU_EBTOQ_CBm_OFFSET,i,&(m._mmu_ebtoq_cb),1)

/*******************************************************************************
 * End of 'MMU_EBTOQ_CBm'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBTOQ_CBN
 * BLOCKS:   MMU_EB
 * SIZE:     20
 */
/*
 * These macros can be used to access MMU_EBTOQ_CBN.
 */
#define READ_MMU_EBTOQ_CBNm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBTOQ_CBNm_BLKACC,4,0,p,MMU_EBTOQ_CBNm_OFFSET,i,(m._mmu_ebtoq_cbn),1)
#define WRITE_MMU_EBTOQ_CBNm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBTOQ_CBNm_BLKACC,4,0,p,MMU_EBTOQ_CBNm_OFFSET,i,&(m._mmu_ebtoq_cbn),1)

/*******************************************************************************
 * End of 'MMU_EBTOQ_CBNm'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBTOQ_CFP
 * BLOCKS:   MMU_EB
 * SIZE:     26
 */
/*
 * These macros can be used to access MMU_EBTOQ_CFP.
 */
#define READ_MMU_EBTOQ_CFPm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBTOQ_CFPm_BLKACC,4,0,p,MMU_EBTOQ_CFPm_OFFSET,i,(m._mmu_ebtoq_cfp),1)
#define WRITE_MMU_EBTOQ_CFPm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBTOQ_CFPm_BLKACC,4,0,p,MMU_EBTOQ_CFPm_OFFSET,i,&(m._mmu_ebtoq_cfp),1)

/*******************************************************************************
 * End of 'MMU_EBTOQ_CFPm'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBTOQ_CMIC_RESERVED
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBTOQ_CMIC_RESERVED.
 */
#define READ_MMU_EBTOQ_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBTOQ_CMIC_RESERVEDr_BLKACC,4,0,p,MMU_EBTOQ_CMIC_RESERVEDr_OFFSET,0,(r._mmu_ebtoq_cmic_reserved),1)
#define WRITE_MMU_EBTOQ_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBTOQ_CMIC_RESERVEDr_BLKACC,4,0,p,MMU_EBTOQ_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_ebtoq_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_EBTOQ_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBTOQ_CPU_INT_EN
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBTOQ_CPU_INT_EN.
 */
#define READ_MMU_EBTOQ_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBTOQ_CPU_INT_ENr_BLKACC,4,0,0,MMU_EBTOQ_CPU_INT_ENr_OFFSET,0,(r._mmu_ebtoq_cpu_int_en),1)
#define WRITE_MMU_EBTOQ_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBTOQ_CPU_INT_ENr_BLKACC,4,0,0,MMU_EBTOQ_CPU_INT_ENr_OFFSET,0,&(r._mmu_ebtoq_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_EBTOQ_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBTOQ_CPU_INT_SET
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBTOQ_CPU_INT_SET.
 */
#define READ_MMU_EBTOQ_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBTOQ_CPU_INT_SETr_BLKACC,4,0,p,MMU_EBTOQ_CPU_INT_SETr_OFFSET,0,(r._mmu_ebtoq_cpu_int_set),1)
#define WRITE_MMU_EBTOQ_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBTOQ_CPU_INT_SETr_BLKACC,4,0,p,MMU_EBTOQ_CPU_INT_SETr_OFFSET,0,&(r._mmu_ebtoq_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_EBTOQ_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBTOQ_CPU_INT_STAT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBTOQ_CPU_INT_STAT.
 */
#define READ_MMU_EBTOQ_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBTOQ_CPU_INT_STATr_BLKACC,4,0,p,MMU_EBTOQ_CPU_INT_STATr_OFFSET,0,(r._mmu_ebtoq_cpu_int_stat),1)
#define WRITE_MMU_EBTOQ_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBTOQ_CPU_INT_STATr_BLKACC,4,0,p,MMU_EBTOQ_CPU_INT_STATr_OFFSET,0,&(r._mmu_ebtoq_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_EBTOQ_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBTOQ_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBTOQ_ENABLE_ECCP_MEM.
 */
#define READ_MMU_EBTOQ_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBTOQ_ENABLE_ECCP_MEMr_BLKACC,4,0,0,MMU_EBTOQ_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_ebtoq_enable_eccp_mem),1)
#define WRITE_MMU_EBTOQ_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBTOQ_ENABLE_ECCP_MEMr_BLKACC,4,0,0,MMU_EBTOQ_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_ebtoq_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_EBTOQ_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBTOQ_EN_COR_ERR_RPT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBTOQ_EN_COR_ERR_RPT.
 */
#define READ_MMU_EBTOQ_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBTOQ_EN_COR_ERR_RPTr_BLKACC,4,0,0,MMU_EBTOQ_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_ebtoq_en_cor_err_rpt),1)
#define WRITE_MMU_EBTOQ_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBTOQ_EN_COR_ERR_RPTr_BLKACC,4,0,0,MMU_EBTOQ_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_ebtoq_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_EBTOQ_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBTOQ_FORCE_CPU_INIT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EBTOQ_FORCE_CPU_INIT.
 */
#define READ_MMU_EBTOQ_FORCE_CPU_INITr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBTOQ_FORCE_CPU_INITr_BLKACC,4,0,p,MMU_EBTOQ_FORCE_CPU_INITr_OFFSET,0,(r._mmu_ebtoq_force_cpu_init),1)
#define WRITE_MMU_EBTOQ_FORCE_CPU_INITr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBTOQ_FORCE_CPU_INITr_BLKACC,4,0,p,MMU_EBTOQ_FORCE_CPU_INITr_OFFSET,0,&(r._mmu_ebtoq_force_cpu_init),1)

/*******************************************************************************
 * End of 'MMU_EBTOQ_FORCE_CPU_INITr'
 */




/*******************************************************************************
 * MEMORY:  MMU_EBTOQ_QDB
 * BLOCKS:   MMU_EB
 * SIZE:     93
 */
/*
 * These macros can be used to access MMU_EBTOQ_QDB.
 */
#define READ_MMU_EBTOQ_QDBm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_EBTOQ_QDBm_BLKACC,4,0,p,MMU_EBTOQ_QDBm_OFFSET,i,(m._mmu_ebtoq_qdb),3)
#define WRITE_MMU_EBTOQ_QDBm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_EBTOQ_QDBm_BLKACC,4,0,p,MMU_EBTOQ_QDBm_OFFSET,i,&(m._mmu_ebtoq_qdb),3)

/*******************************************************************************
 * End of 'MMU_EBTOQ_QDBm'
 */




/*******************************************************************************
 * REGISTER:  MMU_EBTOQ_TMBUS
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EBTOQ_TMBUS.
 */
#define READ_MMU_EBTOQ_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_EBTOQ_TMBUSr_BLKACC,4,0,0,MMU_EBTOQ_TMBUSr_OFFSET,0,(r._mmu_ebtoq_tmbus),2)
#define WRITE_MMU_EBTOQ_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_EBTOQ_TMBUSr_BLKACC,4,0,0,MMU_EBTOQ_TMBUSr_OFFSET,0,&(r._mmu_ebtoq_tmbus),2)

/*******************************************************************************
 * End of 'MMU_EBTOQ_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_BST_SNAPSHOT_ACTION_EN
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_BST_SNAPSHOT_ACTION_EN.
 */
#define READ_MMU_GLBCFG_BST_SNAPSHOT_ACTION_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_BST_SNAPSHOT_ACTION_ENr_BLKACC,5,0,0,MMU_GLBCFG_BST_SNAPSHOT_ACTION_ENr_OFFSET,0,(r._mmu_glbcfg_bst_snapshot_action_en),1)
#define WRITE_MMU_GLBCFG_BST_SNAPSHOT_ACTION_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_BST_SNAPSHOT_ACTION_ENr_BLKACC,5,0,0,MMU_GLBCFG_BST_SNAPSHOT_ACTION_ENr_OFFSET,0,&(r._mmu_glbcfg_bst_snapshot_action_en),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_BST_SNAPSHOT_ACTION_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_BST_TRACKING_ENABLE
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_BST_TRACKING_ENABLE.
 */
#define READ_MMU_GLBCFG_BST_TRACKING_ENABLEr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_BST_TRACKING_ENABLEr_BLKACC,5,0,0,MMU_GLBCFG_BST_TRACKING_ENABLEr_OFFSET,0,(r._mmu_glbcfg_bst_tracking_enable),1)
#define WRITE_MMU_GLBCFG_BST_TRACKING_ENABLEr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_BST_TRACKING_ENABLEr_BLKACC,5,0,0,MMU_GLBCFG_BST_TRACKING_ENABLEr_OFFSET,0,&(r._mmu_glbcfg_bst_tracking_enable),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_BST_TRACKING_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_CMIC_RESERVED
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_CMIC_RESERVED.
 */
#define READ_MMU_GLBCFG_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_CMIC_RESERVEDr_BLKACC,5,0,0,MMU_GLBCFG_CMIC_RESERVEDr_OFFSET,0,(r._mmu_glbcfg_cmic_reserved),1)
#define WRITE_MMU_GLBCFG_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_CMIC_RESERVEDr_BLKACC,5,0,0,MMU_GLBCFG_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_glbcfg_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_CPU_INT_EN
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_CPU_INT_EN.
 */
#define READ_MMU_GLBCFG_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_CPU_INT_ENr_BLKACC,5,0,0,MMU_GLBCFG_CPU_INT_ENr_OFFSET,0,(r._mmu_glbcfg_cpu_int_en),1)
#define WRITE_MMU_GLBCFG_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_CPU_INT_ENr_BLKACC,5,0,0,MMU_GLBCFG_CPU_INT_ENr_OFFSET,0,&(r._mmu_glbcfg_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_CPU_INT_INST_EN
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_CPU_INT_INST_EN.
 */
#define READ_MMU_GLBCFG_CPU_INT_INST_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_CPU_INT_INST_ENr_BLKACC,5,0,0,MMU_GLBCFG_CPU_INT_INST_ENr_OFFSET,0,(r._mmu_glbcfg_cpu_int_inst_en),1)
#define WRITE_MMU_GLBCFG_CPU_INT_INST_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_CPU_INT_INST_ENr_BLKACC,5,0,0,MMU_GLBCFG_CPU_INT_INST_ENr_OFFSET,0,&(r._mmu_glbcfg_cpu_int_inst_en),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_CPU_INT_INST_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_CPU_INT_INST_SET
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_CPU_INT_INST_SET.
 */
#define READ_MMU_GLBCFG_CPU_INT_INST_SETr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_CPU_INT_INST_SETr_BLKACC,5,0,0,MMU_GLBCFG_CPU_INT_INST_SETr_OFFSET,0,(r._mmu_glbcfg_cpu_int_inst_set),1)
#define WRITE_MMU_GLBCFG_CPU_INT_INST_SETr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_CPU_INT_INST_SETr_BLKACC,5,0,0,MMU_GLBCFG_CPU_INT_INST_SETr_OFFSET,0,&(r._mmu_glbcfg_cpu_int_inst_set),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_CPU_INT_INST_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_CPU_INT_INST_STAT
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_CPU_INT_INST_STAT.
 */
#define READ_MMU_GLBCFG_CPU_INT_INST_STATr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_CPU_INT_INST_STATr_BLKACC,5,0,0,MMU_GLBCFG_CPU_INT_INST_STATr_OFFSET,0,(r._mmu_glbcfg_cpu_int_inst_stat),1)
#define WRITE_MMU_GLBCFG_CPU_INT_INST_STATr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_CPU_INT_INST_STATr_BLKACC,5,0,0,MMU_GLBCFG_CPU_INT_INST_STATr_OFFSET,0,&(r._mmu_glbcfg_cpu_int_inst_stat),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_CPU_INT_INST_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_CPU_INT_SET
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_CPU_INT_SET.
 */
#define READ_MMU_GLBCFG_CPU_INT_SETr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_CPU_INT_SETr_BLKACC,5,0,0,MMU_GLBCFG_CPU_INT_SETr_OFFSET,0,(r._mmu_glbcfg_cpu_int_set),1)
#define WRITE_MMU_GLBCFG_CPU_INT_SETr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_CPU_INT_SETr_BLKACC,5,0,0,MMU_GLBCFG_CPU_INT_SETr_OFFSET,0,&(r._mmu_glbcfg_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_CPU_INT_STAT
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_CPU_INT_STAT.
 */
#define READ_MMU_GLBCFG_CPU_INT_STATr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_CPU_INT_STATr_BLKACC,5,0,0,MMU_GLBCFG_CPU_INT_STATr_OFFSET,0,(r._mmu_glbcfg_cpu_int_stat),1)
#define WRITE_MMU_GLBCFG_CPU_INT_STATr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_CPU_INT_STATr_BLKACC,5,0,0,MMU_GLBCFG_CPU_INT_STATr_OFFSET,0,&(r._mmu_glbcfg_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_ECC_SINGLE_BIT_ERRORS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_ECC_SINGLE_BIT_ERRORS.
 */
#define READ_MMU_GLBCFG_ECC_SINGLE_BIT_ERRORSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_ECC_SINGLE_BIT_ERRORSr_BLKACC,5,0,0,MMU_GLBCFG_ECC_SINGLE_BIT_ERRORSr_OFFSET,0,(r._mmu_glbcfg_ecc_single_bit_errors),1)
#define WRITE_MMU_GLBCFG_ECC_SINGLE_BIT_ERRORSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_ECC_SINGLE_BIT_ERRORSr_BLKACC,5,0,0,MMU_GLBCFG_ECC_SINGLE_BIT_ERRORSr_OFFSET,0,&(r._mmu_glbcfg_ecc_single_bit_errors),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_ECC_SINGLE_BIT_ERRORSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_GLBCFG_MEM_FAIL_ADDR_64
 * BLOCKS:   MMU_GLB
 * SIZE:     35
 */
/*
 * These macros can be used to access MMU_GLBCFG_MEM_FAIL_ADDR_64.
 */
#define READ_MMU_GLBCFG_MEM_FAIL_ADDR_64m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_GLBCFG_MEM_FAIL_ADDR_64m_BLKACC,5,0,0,MMU_GLBCFG_MEM_FAIL_ADDR_64m_OFFSET,i,(m._mmu_glbcfg_mem_fail_addr_64),2)
#define WRITE_MMU_GLBCFG_MEM_FAIL_ADDR_64m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_GLBCFG_MEM_FAIL_ADDR_64m_BLKACC,5,0,0,MMU_GLBCFG_MEM_FAIL_ADDR_64m_OFFSET,i,&(m._mmu_glbcfg_mem_fail_addr_64),2)

/*******************************************************************************
 * End of 'MMU_GLBCFG_MEM_FAIL_ADDR_64m'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_MEM_FAIL_INT_CTR
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_MEM_FAIL_INT_CTR.
 */
#define READ_MMU_GLBCFG_MEM_FAIL_INT_CTRr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_MEM_FAIL_INT_CTRr_BLKACC,5,0,0,MMU_GLBCFG_MEM_FAIL_INT_CTRr_OFFSET,0,(r._mmu_glbcfg_mem_fail_int_ctr),1)
#define WRITE_MMU_GLBCFG_MEM_FAIL_INT_CTRr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_MEM_FAIL_INT_CTRr_BLKACC,5,0,0,MMU_GLBCFG_MEM_FAIL_INT_CTRr_OFFSET,0,&(r._mmu_glbcfg_mem_fail_int_ctr),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_MEM_FAIL_INT_CTRr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_MEM_SER_FIFO_STS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_MEM_SER_FIFO_STS.
 */
#define READ_MMU_GLBCFG_MEM_SER_FIFO_STSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_MEM_SER_FIFO_STSr_BLKACC,5,0,0,MMU_GLBCFG_MEM_SER_FIFO_STSr_OFFSET,0,(r._mmu_glbcfg_mem_ser_fifo_sts),1)
#define WRITE_MMU_GLBCFG_MEM_SER_FIFO_STSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_MEM_SER_FIFO_STSr_BLKACC,5,0,0,MMU_GLBCFG_MEM_SER_FIFO_STSr_OFFSET,0,&(r._mmu_glbcfg_mem_ser_fifo_sts),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_MEM_SER_FIFO_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_MISCCONFIG
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_MISCCONFIG.
 */
#define READ_MMU_GLBCFG_MISCCONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_MISCCONFIGr_BLKACC,5,0,0,MMU_GLBCFG_MISCCONFIGr_OFFSET,0,(r._mmu_glbcfg_miscconfig),1)
#define WRITE_MMU_GLBCFG_MISCCONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_MISCCONFIGr_BLKACC,5,0,0,MMU_GLBCFG_MISCCONFIGr_OFFSET,0,&(r._mmu_glbcfg_miscconfig),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_MISCCONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_PKTSTAT
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_PKTSTAT.
 */
#define READ_MMU_GLBCFG_PKTSTATr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_PKTSTATr_BLKACC,5,0,0,MMU_GLBCFG_PKTSTATr_OFFSET,0,(r._mmu_glbcfg_pktstat),1)
#define WRITE_MMU_GLBCFG_PKTSTATr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_PKTSTATr_BLKACC,5,0,0,MMU_GLBCFG_PKTSTATr_OFFSET,0,&(r._mmu_glbcfg_pktstat),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_PKTSTATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_SPLITTER
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLBCFG_SPLITTER.
 */
#define READ_MMU_GLBCFG_SPLITTERr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_SPLITTERr_BLKACC,5,0,0,MMU_GLBCFG_SPLITTERr_OFFSET,0,(r._mmu_glbcfg_splitter),1)
#define WRITE_MMU_GLBCFG_SPLITTERr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_SPLITTERr_BLKACC,5,0,0,MMU_GLBCFG_SPLITTERr_OFFSET,0,&(r._mmu_glbcfg_splitter),1)

/*******************************************************************************
 * End of 'MMU_GLBCFG_SPLITTERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_TIMESTAMP
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_GLBCFG_TIMESTAMP.
 */
#define READ_MMU_GLBCFG_TIMESTAMPr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_TIMESTAMPr_BLKACC,5,0,0,MMU_GLBCFG_TIMESTAMPr_OFFSET,0,(r._mmu_glbcfg_timestamp),2)
#define WRITE_MMU_GLBCFG_TIMESTAMPr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_TIMESTAMPr_BLKACC,5,0,0,MMU_GLBCFG_TIMESTAMPr_OFFSET,0,&(r._mmu_glbcfg_timestamp),2)

/*******************************************************************************
 * End of 'MMU_GLBCFG_TIMESTAMPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_TMBUS
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_GLBCFG_TMBUS.
 */
#define READ_MMU_GLBCFG_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_TMBUSr_BLKACC,5,0,0,MMU_GLBCFG_TMBUSr_OFFSET,0,(r._mmu_glbcfg_tmbus),2)
#define WRITE_MMU_GLBCFG_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_TMBUSr_BLKACC,5,0,0,MMU_GLBCFG_TMBUSr_OFFSET,0,&(r._mmu_glbcfg_tmbus),2)

/*******************************************************************************
 * End of 'MMU_GLBCFG_TMBUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_GLBCFG_TOD_TIMESTAMP
 * BLOCKS:   MMU_GLB
 * SIZE:     96
 */
/*
 * These macros can be used to access MMU_GLBCFG_TOD_TIMESTAMP.
 */
#define READ_MMU_GLBCFG_TOD_TIMESTAMPm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_GLBCFG_TOD_TIMESTAMPm_BLKACC,5,0,0,MMU_GLBCFG_TOD_TIMESTAMPm_OFFSET,i,(m._mmu_glbcfg_tod_timestamp),3)
#define WRITE_MMU_GLBCFG_TOD_TIMESTAMPm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_GLBCFG_TOD_TIMESTAMPm_BLKACC,5,0,0,MMU_GLBCFG_TOD_TIMESTAMPm_OFFSET,i,&(m._mmu_glbcfg_tod_timestamp),3)

/*******************************************************************************
 * End of 'MMU_GLBCFG_TOD_TIMESTAMPm'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLBCFG_UTC_TIMESTAMP
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_GLBCFG_UTC_TIMESTAMP.
 */
#define READ_MMU_GLBCFG_UTC_TIMESTAMPr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLBCFG_UTC_TIMESTAMPr_BLKACC,5,0,0,MMU_GLBCFG_UTC_TIMESTAMPr_OFFSET,0,(r._mmu_glbcfg_utc_timestamp),2)
#define WRITE_MMU_GLBCFG_UTC_TIMESTAMPr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLBCFG_UTC_TIMESTAMPr_BLKACC,5,0,0,MMU_GLBCFG_UTC_TIMESTAMPr_OFFSET,0,&(r._mmu_glbcfg_utc_timestamp),2)

/*******************************************************************************
 * End of 'MMU_GLBCFG_UTC_TIMESTAMPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLB_INT_EN
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLB_INT_EN.
 */
#define READ_MMU_GLB_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLB_INT_ENr_BLKACC,5,0,0,MMU_GLB_INT_ENr_OFFSET,0,(r._mmu_glb_int_en),1)
#define WRITE_MMU_GLB_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLB_INT_ENr_BLKACC,5,0,0,MMU_GLB_INT_ENr_OFFSET,0,&(r._mmu_glb_int_en),1)

/*******************************************************************************
 * End of 'MMU_GLB_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLB_INT_SET
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLB_INT_SET.
 */
#define READ_MMU_GLB_INT_SETr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLB_INT_SETr_BLKACC,5,0,0,MMU_GLB_INT_SETr_OFFSET,0,(r._mmu_glb_int_set),1)
#define WRITE_MMU_GLB_INT_SETr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLB_INT_SETr_BLKACC,5,0,0,MMU_GLB_INT_SETr_OFFSET,0,&(r._mmu_glb_int_set),1)

/*******************************************************************************
 * End of 'MMU_GLB_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GLB_INT_STAT
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GLB_INT_STAT.
 */
#define READ_MMU_GLB_INT_STATr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_GLB_INT_STATr_BLKACC,5,0,0,MMU_GLB_INT_STATr_OFFSET,0,(r._mmu_glb_int_stat),1)
#define WRITE_MMU_GLB_INT_STATr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_GLB_INT_STATr_BLKACC,5,0,0,MMU_GLB_INT_STATr_OFFSET,0,&(r._mmu_glb_int_stat),1)

/*******************************************************************************
 * End of 'MMU_GLB_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_CMIC_RESERVED
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_CMIC_RESERVED.
 */
#define READ_MMU_INTFI_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_CMIC_RESERVEDr_BLKACC,4,0,p,MMU_INTFI_CMIC_RESERVEDr_OFFSET,0,(r._mmu_intfi_cmic_reserved),1)
#define WRITE_MMU_INTFI_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_CMIC_RESERVEDr_BLKACC,4,0,p,MMU_INTFI_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_intfi_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_INTFI_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_CPU_INT_EN
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_CPU_INT_EN.
 */
#define READ_MMU_INTFI_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_CPU_INT_ENr_BLKACC,4,0,0,MMU_INTFI_CPU_INT_ENr_OFFSET,0,(r._mmu_intfi_cpu_int_en),1)
#define WRITE_MMU_INTFI_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_CPU_INT_ENr_BLKACC,4,0,0,MMU_INTFI_CPU_INT_ENr_OFFSET,0,&(r._mmu_intfi_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_INTFI_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_CPU_INT_SET
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_CPU_INT_SET.
 */
#define READ_MMU_INTFI_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_CPU_INT_SETr_BLKACC,4,0,p,MMU_INTFI_CPU_INT_SETr_OFFSET,0,(r._mmu_intfi_cpu_int_set),1)
#define WRITE_MMU_INTFI_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_CPU_INT_SETr_BLKACC,4,0,p,MMU_INTFI_CPU_INT_SETr_OFFSET,0,&(r._mmu_intfi_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_INTFI_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_CPU_INT_STAT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_CPU_INT_STAT.
 */
#define READ_MMU_INTFI_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_CPU_INT_STATr_BLKACC,4,0,p,MMU_INTFI_CPU_INT_STATr_OFFSET,0,(r._mmu_intfi_cpu_int_stat),1)
#define WRITE_MMU_INTFI_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_CPU_INT_STATr_BLKACC,4,0,p,MMU_INTFI_CPU_INT_STATr_OFFSET,0,&(r._mmu_intfi_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_INTFI_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_DD_TIMER
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_DD_TIMER.
 */
#define READ_MMU_INTFI_DD_TIMERr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_DD_TIMERr_BLKACC,4,0,p,MMU_INTFI_DD_TIMERr_OFFSET,0,(r._mmu_intfi_dd_timer),1)
#define WRITE_MMU_INTFI_DD_TIMERr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_DD_TIMERr_BLKACC,4,0,p,MMU_INTFI_DD_TIMERr_OFFSET,0,&(r._mmu_intfi_dd_timer),1)

/*******************************************************************************
 * End of 'MMU_INTFI_DD_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_DD_TIMER_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_INTFI_DD_TIMER_CFG.
 */
#define READ_MMU_INTFI_DD_TIMER_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_DD_TIMER_CFGr_BLKACC,4,0,p,MMU_INTFI_DD_TIMER_CFGr_OFFSET,0,(r._mmu_intfi_dd_timer_cfg),2)
#define WRITE_MMU_INTFI_DD_TIMER_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_DD_TIMER_CFGr_BLKACC,4,0,p,MMU_INTFI_DD_TIMER_CFGr_OFFSET,0,&(r._mmu_intfi_dd_timer_cfg),2)

/*******************************************************************************
 * End of 'MMU_INTFI_DD_TIMER_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_DD_TIMER_ENABLE
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_DD_TIMER_ENABLE.
 */
#define READ_MMU_INTFI_DD_TIMER_ENABLEr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_DD_TIMER_ENABLEr_BLKACC,4,0,p,MMU_INTFI_DD_TIMER_ENABLEr_OFFSET,0,(r._mmu_intfi_dd_timer_enable),1)
#define WRITE_MMU_INTFI_DD_TIMER_ENABLEr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_DD_TIMER_ENABLEr_BLKACC,4,0,p,MMU_INTFI_DD_TIMER_ENABLEr_OFFSET,0,&(r._mmu_intfi_dd_timer_enable),1)

/*******************************************************************************
 * End of 'MMU_INTFI_DD_TIMER_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_DD_TIMER_INT_MASK
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_DD_TIMER_INT_MASK.
 */
#define READ_MMU_INTFI_DD_TIMER_INT_MASKr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_DD_TIMER_INT_MASKr_BLKACC,4,0,p,MMU_INTFI_DD_TIMER_INT_MASKr_OFFSET,0,(r._mmu_intfi_dd_timer_int_mask),1)
#define WRITE_MMU_INTFI_DD_TIMER_INT_MASKr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_DD_TIMER_INT_MASKr_BLKACC,4,0,p,MMU_INTFI_DD_TIMER_INT_MASKr_OFFSET,0,&(r._mmu_intfi_dd_timer_int_mask),1)

/*******************************************************************************
 * End of 'MMU_INTFI_DD_TIMER_INT_MASKr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_DD_TIMER_INT_SET
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_DD_TIMER_INT_SET.
 */
#define READ_MMU_INTFI_DD_TIMER_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_DD_TIMER_INT_SETr_BLKACC,4,0,p,MMU_INTFI_DD_TIMER_INT_SETr_OFFSET,0,(r._mmu_intfi_dd_timer_int_set),1)
#define WRITE_MMU_INTFI_DD_TIMER_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_DD_TIMER_INT_SETr_BLKACC,4,0,p,MMU_INTFI_DD_TIMER_INT_SETr_OFFSET,0,&(r._mmu_intfi_dd_timer_int_set),1)

/*******************************************************************************
 * End of 'MMU_INTFI_DD_TIMER_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_DD_TIMER_INT_STATUS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_DD_TIMER_INT_STATUS.
 */
#define READ_MMU_INTFI_DD_TIMER_INT_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_DD_TIMER_INT_STATUSr_BLKACC,4,0,p,MMU_INTFI_DD_TIMER_INT_STATUSr_OFFSET,0,(r._mmu_intfi_dd_timer_int_status),1)
#define WRITE_MMU_INTFI_DD_TIMER_INT_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_DD_TIMER_INT_STATUSr_BLKACC,4,0,p,MMU_INTFI_DD_TIMER_INT_STATUSr_OFFSET,0,&(r._mmu_intfi_dd_timer_int_status),1)

/*******************************************************************************
 * End of 'MMU_INTFI_DD_TIMER_INT_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_EGR_PORT_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_EGR_PORT_CFG.
 */
#define READ_MMU_INTFI_EGR_PORT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_EGR_PORT_CFGr_BLKACC,4,0,p,MMU_INTFI_EGR_PORT_CFGr_OFFSET,0,(r._mmu_intfi_egr_port_cfg),1)
#define WRITE_MMU_INTFI_EGR_PORT_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_EGR_PORT_CFGr_BLKACC,4,0,p,MMU_INTFI_EGR_PORT_CFGr_OFFSET,0,&(r._mmu_intfi_egr_port_cfg),1)

/*******************************************************************************
 * End of 'MMU_INTFI_EGR_PORT_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_ENABLE
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_ENABLE.
 */
#define READ_MMU_INTFI_ENABLEr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_ENABLEr_BLKACC,4,0,0,MMU_INTFI_ENABLEr_OFFSET,0,(r._mmu_intfi_enable),1)
#define WRITE_MMU_INTFI_ENABLEr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_ENABLEr_BLKACC,4,0,0,MMU_INTFI_ENABLEr_OFFSET,0,&(r._mmu_intfi_enable),1)

/*******************************************************************************
 * End of 'MMU_INTFI_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_IGNORE_PFC_XOFF_PKT_DISCARD
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_IGNORE_PFC_XOFF_PKT_DISCARD.
 */
#define READ_MMU_INTFI_IGNORE_PFC_XOFF_PKT_DISCARDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_IGNORE_PFC_XOFF_PKT_DISCARDr_BLKACC,4,0,0,MMU_INTFI_IGNORE_PFC_XOFF_PKT_DISCARDr_OFFSET,0,(r._mmu_intfi_ignore_pfc_xoff_pkt_discard),1)
#define WRITE_MMU_INTFI_IGNORE_PFC_XOFF_PKT_DISCARDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_IGNORE_PFC_XOFF_PKT_DISCARDr_BLKACC,4,0,0,MMU_INTFI_IGNORE_PFC_XOFF_PKT_DISCARDr_OFFSET,0,&(r._mmu_intfi_ignore_pfc_xoff_pkt_discard),1)

/*******************************************************************************
 * End of 'MMU_INTFI_IGNORE_PFC_XOFF_PKT_DISCARDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_IGNORE_PORT_PFC_XOFF
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_IGNORE_PORT_PFC_XOFF.
 */
#define READ_MMU_INTFI_IGNORE_PORT_PFC_XOFFr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_IGNORE_PORT_PFC_XOFFr_BLKACC,4,0,p,MMU_INTFI_IGNORE_PORT_PFC_XOFFr_OFFSET,0,(r._mmu_intfi_ignore_port_pfc_xoff),1)
#define WRITE_MMU_INTFI_IGNORE_PORT_PFC_XOFFr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_IGNORE_PORT_PFC_XOFFr_BLKACC,4,0,p,MMU_INTFI_IGNORE_PORT_PFC_XOFFr_OFFSET,0,&(r._mmu_intfi_ignore_port_pfc_xoff),1)

/*******************************************************************************
 * End of 'MMU_INTFI_IGNORE_PORT_PFC_XOFFr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_MMU_PORT_TO_MMU_QUEUES_FC_BKP
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_MMU_PORT_TO_MMU_QUEUES_FC_BKP.
 */
#define READ_MMU_INTFI_MMU_PORT_TO_MMU_QUEUES_FC_BKPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_MMU_PORT_TO_MMU_QUEUES_FC_BKPr_BLKACC,4,0,p,MMU_INTFI_MMU_PORT_TO_MMU_QUEUES_FC_BKPr_OFFSET,0,(r._mmu_intfi_mmu_port_to_mmu_queues_fc_bkp),1)
#define WRITE_MMU_INTFI_MMU_PORT_TO_MMU_QUEUES_FC_BKPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_MMU_PORT_TO_MMU_QUEUES_FC_BKPr_BLKACC,4,0,p,MMU_INTFI_MMU_PORT_TO_MMU_QUEUES_FC_BKPr_OFFSET,0,&(r._mmu_intfi_mmu_port_to_mmu_queues_fc_bkp),1)

/*******************************************************************************
 * End of 'MMU_INTFI_MMU_PORT_TO_MMU_QUEUES_FC_BKPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_MMU_PORT_TO_PHY_PORT_MAPPING
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_MMU_PORT_TO_PHY_PORT_MAPPING.
 */
#define READ_MMU_INTFI_MMU_PORT_TO_PHY_PORT_MAPPINGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_MMU_PORT_TO_PHY_PORT_MAPPINGr_BLKACC,4,0,p,MMU_INTFI_MMU_PORT_TO_PHY_PORT_MAPPINGr_OFFSET,0,(r._mmu_intfi_mmu_port_to_phy_port_mapping),1)
#define WRITE_MMU_INTFI_MMU_PORT_TO_PHY_PORT_MAPPINGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_MMU_PORT_TO_PHY_PORT_MAPPINGr_BLKACC,4,0,p,MMU_INTFI_MMU_PORT_TO_PHY_PORT_MAPPINGr_OFFSET,0,&(r._mmu_intfi_mmu_port_to_phy_port_mapping),1)

/*******************************************************************************
 * End of 'MMU_INTFI_MMU_PORT_TO_PHY_PORT_MAPPINGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_PFCPRI_PROFILE
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_PFCPRI_PROFILE.
 */
#define READ_MMU_INTFI_PFCPRI_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_PFCPRI_PROFILEr_BLKACC,4,0,0,MMU_INTFI_PFCPRI_PROFILEr_OFFSET,i,(r._mmu_intfi_pfcpri_profile),1)
#define WRITE_MMU_INTFI_PFCPRI_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_PFCPRI_PROFILEr_BLKACC,4,0,0,MMU_INTFI_PFCPRI_PROFILEr_OFFSET,i,&(r._mmu_intfi_pfcpri_profile),1)

/*******************************************************************************
 * End of 'MMU_INTFI_PFCPRI_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_PORT_BKP_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_PORT_BKP_CFG.
 */
#define READ_MMU_INTFI_PORT_BKP_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_PORT_BKP_CFGr_BLKACC,4,0,p,MMU_INTFI_PORT_BKP_CFGr_OFFSET,0,(r._mmu_intfi_port_bkp_cfg),1)
#define WRITE_MMU_INTFI_PORT_BKP_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_PORT_BKP_CFGr_BLKACC,4,0,p,MMU_INTFI_PORT_BKP_CFGr_OFFSET,0,&(r._mmu_intfi_port_bkp_cfg),1)

/*******************************************************************************
 * End of 'MMU_INTFI_PORT_BKP_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_PORT_FC_BKP
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_PORT_FC_BKP.
 */
#define READ_MMU_INTFI_PORT_FC_BKPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_PORT_FC_BKPr_BLKACC,4,0,p,MMU_INTFI_PORT_FC_BKPr_OFFSET,0,(r._mmu_intfi_port_fc_bkp),1)
#define WRITE_MMU_INTFI_PORT_FC_BKPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_PORT_FC_BKPr_BLKACC,4,0,p,MMU_INTFI_PORT_FC_BKPr_OFFSET,0,&(r._mmu_intfi_port_fc_bkp),1)

/*******************************************************************************
 * End of 'MMU_INTFI_PORT_FC_BKPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFI_PORT_PFC_STATE
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFI_PORT_PFC_STATE.
 */
#define READ_MMU_INTFI_PORT_PFC_STATEr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFI_PORT_PFC_STATEr_BLKACC,4,0,p,MMU_INTFI_PORT_PFC_STATEr_OFFSET,0,(r._mmu_intfi_port_pfc_state),1)
#define WRITE_MMU_INTFI_PORT_PFC_STATEr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFI_PORT_PFC_STATEr_BLKACC,4,0,p,MMU_INTFI_PORT_PFC_STATEr_OFFSET,0,&(r._mmu_intfi_port_pfc_state),1)

/*******************************************************************************
 * End of 'MMU_INTFI_PORT_PFC_STATEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFO_CMIC_RESERVED
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_INTFO_CMIC_RESERVED.
 */
#define READ_MMU_INTFO_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFO_CMIC_RESERVEDr_BLKACC,5,0,0,MMU_INTFO_CMIC_RESERVEDr_OFFSET,0,(r._mmu_intfo_cmic_reserved),2)
#define WRITE_MMU_INTFO_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFO_CMIC_RESERVEDr_BLKACC,5,0,0,MMU_INTFO_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_intfo_cmic_reserved),2)

/*******************************************************************************
 * End of 'MMU_INTFO_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFO_FC_TX_CONFIG_1
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFO_FC_TX_CONFIG_1.
 */
#define READ_MMU_INTFO_FC_TX_CONFIG_1r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFO_FC_TX_CONFIG_1r_BLKACC,5,0,0,MMU_INTFO_FC_TX_CONFIG_1r_OFFSET,0,(r._mmu_intfo_fc_tx_config_1),1)
#define WRITE_MMU_INTFO_FC_TX_CONFIG_1r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFO_FC_TX_CONFIG_1r_BLKACC,5,0,0,MMU_INTFO_FC_TX_CONFIG_1r_OFFSET,0,&(r._mmu_intfo_fc_tx_config_1),1)

/*******************************************************************************
 * End of 'MMU_INTFO_FC_TX_CONFIG_1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFO_FC_TX_CONFIG_2
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFO_FC_TX_CONFIG_2.
 */
#define READ_MMU_INTFO_FC_TX_CONFIG_2r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFO_FC_TX_CONFIG_2r_BLKACC,5,0,0,MMU_INTFO_FC_TX_CONFIG_2r_OFFSET,0,(r._mmu_intfo_fc_tx_config_2),1)
#define WRITE_MMU_INTFO_FC_TX_CONFIG_2r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFO_FC_TX_CONFIG_2r_BLKACC,5,0,0,MMU_INTFO_FC_TX_CONFIG_2r_OFFSET,0,&(r._mmu_intfo_fc_tx_config_2),1)

/*******************************************************************************
 * End of 'MMU_INTFO_FC_TX_CONFIG_2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFO_MMU_PORT_TO_PHY_PORT_MAPPING
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFO_MMU_PORT_TO_PHY_PORT_MAPPING.
 */
#define READ_MMU_INTFO_MMU_PORT_TO_PHY_PORT_MAPPINGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFO_MMU_PORT_TO_PHY_PORT_MAPPINGr_BLKACC,5,0,p,MMU_INTFO_MMU_PORT_TO_PHY_PORT_MAPPINGr_OFFSET,0,(r._mmu_intfo_mmu_port_to_phy_port_mapping),1)
#define WRITE_MMU_INTFO_MMU_PORT_TO_PHY_PORT_MAPPINGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFO_MMU_PORT_TO_PHY_PORT_MAPPINGr_BLKACC,5,0,p,MMU_INTFO_MMU_PORT_TO_PHY_PORT_MAPPINGr_OFFSET,0,&(r._mmu_intfo_mmu_port_to_phy_port_mapping),1)

/*******************************************************************************
 * End of 'MMU_INTFO_MMU_PORT_TO_PHY_PORT_MAPPINGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFO_TO_XPORT_BKP
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFO_TO_XPORT_BKP.
 */
#define READ_MMU_INTFO_TO_XPORT_BKPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFO_TO_XPORT_BKPr_BLKACC,5,0,p,MMU_INTFO_TO_XPORT_BKPr_OFFSET,0,(r._mmu_intfo_to_xport_bkp),1)
#define WRITE_MMU_INTFO_TO_XPORT_BKPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFO_TO_XPORT_BKPr_BLKACC,5,0,p,MMU_INTFO_TO_XPORT_BKPr_OFFSET,0,&(r._mmu_intfo_to_xport_bkp),1)

/*******************************************************************************
 * End of 'MMU_INTFO_TO_XPORT_BKPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFO_XPORT_BKP_HW_UPDATE_DIS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFO_XPORT_BKP_HW_UPDATE_DIS.
 */
#define READ_MMU_INTFO_XPORT_BKP_HW_UPDATE_DISr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_INTFO_XPORT_BKP_HW_UPDATE_DISr_BLKACC,5,0,p,MMU_INTFO_XPORT_BKP_HW_UPDATE_DISr_OFFSET,0,(r._mmu_intfo_xport_bkp_hw_update_dis),1)
#define WRITE_MMU_INTFO_XPORT_BKP_HW_UPDATE_DISr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_INTFO_XPORT_BKP_HW_UPDATE_DISr_BLKACC,5,0,p,MMU_INTFO_XPORT_BKP_HW_UPDATE_DISr_OFFSET,0,&(r._mmu_intfo_xport_bkp_hw_update_dis),1)

/*******************************************************************************
 * End of 'MMU_INTFO_XPORT_BKP_HW_UPDATE_DISr'
 */




/*******************************************************************************
 * REGISTER:  MMU_ITMCFG_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_ITMCFG_CMIC_RESERVED.
 */
#define READ_MMU_ITMCFG_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_ITMCFG_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_ITMCFG_CMIC_RESERVEDr_OFFSET,0,(r._mmu_itmcfg_cmic_reserved),1)
#define WRITE_MMU_ITMCFG_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_ITMCFG_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_ITMCFG_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_itmcfg_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_ITMCFG_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_ITMCFG_CPU_INT_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_ITMCFG_CPU_INT_EN.
 */
#define READ_MMU_ITMCFG_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_ITMCFG_CPU_INT_ENr_BLKACC,3,0,0,MMU_ITMCFG_CPU_INT_ENr_OFFSET,0,(r._mmu_itmcfg_cpu_int_en),1)
#define WRITE_MMU_ITMCFG_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_ITMCFG_CPU_INT_ENr_BLKACC,3,0,0,MMU_ITMCFG_CPU_INT_ENr_OFFSET,0,&(r._mmu_itmcfg_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_ITMCFG_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_ITMCFG_CPU_INT_SET
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_ITMCFG_CPU_INT_SET.
 */
#define READ_MMU_ITMCFG_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_ITMCFG_CPU_INT_SETr_BLKACC,3,0,p,MMU_ITMCFG_CPU_INT_SETr_OFFSET,0,(r._mmu_itmcfg_cpu_int_set),1)
#define WRITE_MMU_ITMCFG_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_ITMCFG_CPU_INT_SETr_BLKACC,3,0,p,MMU_ITMCFG_CPU_INT_SETr_OFFSET,0,&(r._mmu_itmcfg_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_ITMCFG_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_ITMCFG_CPU_INT_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_ITMCFG_CPU_INT_STAT.
 */
#define READ_MMU_ITMCFG_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_ITMCFG_CPU_INT_STATr_BLKACC,3,0,p,MMU_ITMCFG_CPU_INT_STATr_OFFSET,0,(r._mmu_itmcfg_cpu_int_stat),1)
#define WRITE_MMU_ITMCFG_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_ITMCFG_CPU_INT_STATr_BLKACC,3,0,p,MMU_ITMCFG_CPU_INT_STATr_OFFSET,0,&(r._mmu_itmcfg_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_ITMCFG_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_ITMCFG_ECC_SINGLE_BIT_ERRORS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_ITMCFG_ECC_SINGLE_BIT_ERRORS.
 */
#define READ_MMU_ITMCFG_ECC_SINGLE_BIT_ERRORSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_ITMCFG_ECC_SINGLE_BIT_ERRORSr_BLKACC,3,0,p,MMU_ITMCFG_ECC_SINGLE_BIT_ERRORSr_OFFSET,0,(r._mmu_itmcfg_ecc_single_bit_errors),1)
#define WRITE_MMU_ITMCFG_ECC_SINGLE_BIT_ERRORSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_ITMCFG_ECC_SINGLE_BIT_ERRORSr_BLKACC,3,0,p,MMU_ITMCFG_ECC_SINGLE_BIT_ERRORSr_OFFSET,0,&(r._mmu_itmcfg_ecc_single_bit_errors),1)

/*******************************************************************************
 * End of 'MMU_ITMCFG_ECC_SINGLE_BIT_ERRORSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_ITMCFG_MEM_FAIL_ADDR_64
 * BLOCKS:   MMU_ITM
 * SIZE:     35
 */
/*
 * These macros can be used to access MMU_ITMCFG_MEM_FAIL_ADDR_64.
 */
#define READ_MMU_ITMCFG_MEM_FAIL_ADDR_64m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_ITMCFG_MEM_FAIL_ADDR_64m_BLKACC,3,0,p,MMU_ITMCFG_MEM_FAIL_ADDR_64m_OFFSET,i,(m._mmu_itmcfg_mem_fail_addr_64),2)
#define WRITE_MMU_ITMCFG_MEM_FAIL_ADDR_64m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_ITMCFG_MEM_FAIL_ADDR_64m_BLKACC,3,0,p,MMU_ITMCFG_MEM_FAIL_ADDR_64m_OFFSET,i,&(m._mmu_itmcfg_mem_fail_addr_64),2)

/*******************************************************************************
 * End of 'MMU_ITMCFG_MEM_FAIL_ADDR_64m'
 */




/*******************************************************************************
 * REGISTER:  MMU_ITMCFG_MEM_FAIL_INT_CTR
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_ITMCFG_MEM_FAIL_INT_CTR.
 */
#define READ_MMU_ITMCFG_MEM_FAIL_INT_CTRr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_ITMCFG_MEM_FAIL_INT_CTRr_BLKACC,3,0,p,MMU_ITMCFG_MEM_FAIL_INT_CTRr_OFFSET,0,(r._mmu_itmcfg_mem_fail_int_ctr),1)
#define WRITE_MMU_ITMCFG_MEM_FAIL_INT_CTRr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_ITMCFG_MEM_FAIL_INT_CTRr_BLKACC,3,0,p,MMU_ITMCFG_MEM_FAIL_INT_CTRr_OFFSET,0,&(r._mmu_itmcfg_mem_fail_int_ctr),1)

/*******************************************************************************
 * End of 'MMU_ITMCFG_MEM_FAIL_INT_CTRr'
 */




/*******************************************************************************
 * REGISTER:  MMU_ITMCFG_MEM_SER_FIFO_STS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_ITMCFG_MEM_SER_FIFO_STS.
 */
#define READ_MMU_ITMCFG_MEM_SER_FIFO_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_ITMCFG_MEM_SER_FIFO_STSr_BLKACC,3,0,p,MMU_ITMCFG_MEM_SER_FIFO_STSr_OFFSET,0,(r._mmu_itmcfg_mem_ser_fifo_sts),1)
#define WRITE_MMU_ITMCFG_MEM_SER_FIFO_STSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_ITMCFG_MEM_SER_FIFO_STSr_BLKACC,3,0,p,MMU_ITMCFG_MEM_SER_FIFO_STSr_OFFSET,0,&(r._mmu_itmcfg_mem_ser_fifo_sts),1)

/*******************************************************************************
 * End of 'MMU_ITMCFG_MEM_SER_FIFO_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_MB_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MB_CMIC_RESERVED.
 */
#define READ_MMU_MB_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MB_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_MB_CMIC_RESERVEDr_OFFSET,0,(r._mmu_mb_cmic_reserved),1)
#define WRITE_MMU_MB_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MB_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_MB_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_mb_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_MB_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_MB_DEBUG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MB_DEBUG.
 */
#define READ_MMU_MB_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MB_DEBUGr_BLKACC,3,0,p,MMU_MB_DEBUGr_OFFSET,0,(r._mmu_mb_debug),1)
#define WRITE_MMU_MB_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MB_DEBUGr_BLKACC,3,0,p,MMU_MB_DEBUGr_OFFSET,0,&(r._mmu_mb_debug),1)

/*******************************************************************************
 * End of 'MMU_MB_DEBUGr'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE0_CPU
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE0_CPU.
 */
#define READ_MMU_MB_PAYLOAD_SLICE0_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE0_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE0_CPUm_OFFSET,i,(m._mmu_mb_payload_slice0_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE0_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE0_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE0_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice0_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE0_CPUm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE0_CPUm_BLKACC,3,-1,p,MMU_MB_PAYLOAD_SLICE0_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice0_cpu),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE0_CPUm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM0_ITM0.
 */
#define READ_MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_mb_payload_slice0_cpu_mmu_itm0_itm0),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_mb_payload_slice0_cpu_mmu_itm0_itm0),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM1_ITM1.
 */
#define READ_MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_mb_payload_slice0_cpu_mmu_itm1_itm1),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_mb_payload_slice0_cpu_mmu_itm1_itm1),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE0_CPU_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE1_CPU
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE1_CPU.
 */
#define READ_MMU_MB_PAYLOAD_SLICE1_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE1_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE1_CPUm_OFFSET,i,(m._mmu_mb_payload_slice1_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE1_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE1_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE1_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice1_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE1_CPUm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE1_CPUm_BLKACC,3,-1,p,MMU_MB_PAYLOAD_SLICE1_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice1_cpu),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE1_CPUm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM0_ITM0.
 */
#define READ_MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_mb_payload_slice1_cpu_mmu_itm0_itm0),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_mb_payload_slice1_cpu_mmu_itm0_itm0),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM1_ITM1.
 */
#define READ_MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_mb_payload_slice1_cpu_mmu_itm1_itm1),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_mb_payload_slice1_cpu_mmu_itm1_itm1),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE1_CPU_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE2_CPU
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE2_CPU.
 */
#define READ_MMU_MB_PAYLOAD_SLICE2_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE2_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE2_CPUm_OFFSET,i,(m._mmu_mb_payload_slice2_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE2_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE2_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE2_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice2_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE2_CPUm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE2_CPUm_BLKACC,3,-1,p,MMU_MB_PAYLOAD_SLICE2_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice2_cpu),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE2_CPUm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM0_ITM0.
 */
#define READ_MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_mb_payload_slice2_cpu_mmu_itm0_itm0),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_mb_payload_slice2_cpu_mmu_itm0_itm0),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM1_ITM1.
 */
#define READ_MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_mb_payload_slice2_cpu_mmu_itm1_itm1),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_mb_payload_slice2_cpu_mmu_itm1_itm1),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE2_CPU_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE3_CPU
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE3_CPU.
 */
#define READ_MMU_MB_PAYLOAD_SLICE3_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE3_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE3_CPUm_OFFSET,i,(m._mmu_mb_payload_slice3_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE3_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE3_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE3_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice3_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE3_CPUm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE3_CPUm_BLKACC,3,-1,p,MMU_MB_PAYLOAD_SLICE3_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice3_cpu),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE3_CPUm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM0_ITM0.
 */
#define READ_MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_mb_payload_slice3_cpu_mmu_itm0_itm0),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_mb_payload_slice3_cpu_mmu_itm0_itm0),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM1_ITM1.
 */
#define READ_MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_mb_payload_slice3_cpu_mmu_itm1_itm1),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_mb_payload_slice3_cpu_mmu_itm1_itm1),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE3_CPU_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE4_CPU
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE4_CPU.
 */
#define READ_MMU_MB_PAYLOAD_SLICE4_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE4_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE4_CPUm_OFFSET,i,(m._mmu_mb_payload_slice4_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE4_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE4_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE4_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice4_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE4_CPUm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE4_CPUm_BLKACC,3,-1,p,MMU_MB_PAYLOAD_SLICE4_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice4_cpu),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE4_CPUm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM0_ITM0.
 */
#define READ_MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_mb_payload_slice4_cpu_mmu_itm0_itm0),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_mb_payload_slice4_cpu_mmu_itm0_itm0),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM1_ITM1.
 */
#define READ_MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_mb_payload_slice4_cpu_mmu_itm1_itm1),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_mb_payload_slice4_cpu_mmu_itm1_itm1),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE4_CPU_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE5_CPU
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE5_CPU.
 */
#define READ_MMU_MB_PAYLOAD_SLICE5_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE5_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE5_CPUm_OFFSET,i,(m._mmu_mb_payload_slice5_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE5_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE5_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE5_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice5_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE5_CPUm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE5_CPUm_BLKACC,3,-1,p,MMU_MB_PAYLOAD_SLICE5_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice5_cpu),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE5_CPUm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM0_ITM0.
 */
#define READ_MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_mb_payload_slice5_cpu_mmu_itm0_itm0),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_mb_payload_slice5_cpu_mmu_itm0_itm0),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM1_ITM1.
 */
#define READ_MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_mb_payload_slice5_cpu_mmu_itm1_itm1),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_mb_payload_slice5_cpu_mmu_itm1_itm1),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE5_CPU_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE6_CPU
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE6_CPU.
 */
#define READ_MMU_MB_PAYLOAD_SLICE6_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE6_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE6_CPUm_OFFSET,i,(m._mmu_mb_payload_slice6_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE6_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE6_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE6_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice6_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE6_CPUm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE6_CPUm_BLKACC,3,-1,p,MMU_MB_PAYLOAD_SLICE6_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice6_cpu),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE6_CPUm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM0_ITM0.
 */
#define READ_MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_mb_payload_slice6_cpu_mmu_itm0_itm0),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_mb_payload_slice6_cpu_mmu_itm0_itm0),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM1_ITM1.
 */
#define READ_MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_mb_payload_slice6_cpu_mmu_itm1_itm1),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_mb_payload_slice6_cpu_mmu_itm1_itm1),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE6_CPU_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE7_CPU
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE7_CPU.
 */
#define READ_MMU_MB_PAYLOAD_SLICE7_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE7_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE7_CPUm_OFFSET,i,(m._mmu_mb_payload_slice7_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE7_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE7_CPUm_BLKACC,3,n,p,MMU_MB_PAYLOAD_SLICE7_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice7_cpu),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE7_CPUm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE7_CPUm_BLKACC,3,-1,p,MMU_MB_PAYLOAD_SLICE7_CPUm_OFFSET,i,&(m._mmu_mb_payload_slice7_cpu),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE7_CPUm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM0_ITM0.
 */
#define READ_MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_mb_payload_slice7_cpu_mmu_itm0_itm0),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_mb_payload_slice7_cpu_mmu_itm0_itm0),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     256
 */
/*
 * These macros can be used to access MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM1_ITM1.
 */
#define READ_MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_mb_payload_slice7_cpu_mmu_itm1_itm1),8)
#define WRITE_MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_mb_payload_slice7_cpu_mmu_itm1_itm1),8)

/*******************************************************************************
 * End of 'MMU_MB_PAYLOAD_SLICE7_CPU_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * REGISTER:  MMU_MB_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_MB_TMBUS.
 */
#define READ_MMU_MB_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MB_TMBUSr_BLKACC,3,0,0,MMU_MB_TMBUSr_OFFSET,0,(r._mmu_mb_tmbus),2)
#define WRITE_MMU_MB_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MB_TMBUSr_BLKACC,3,0,0,MMU_MB_TMBUSr_OFFSET,0,&(r._mmu_mb_tmbus),2)

/*******************************************************************************
 * End of 'MMU_MB_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTP_COS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTP_COS.
 */
#define READ_MMU_MTP_COSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTP_COSr_BLKACC,3,0,0,MMU_MTP_COSr_OFFSET,0,(r._mmu_mtp_cos),1)
#define WRITE_MMU_MTP_COSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTP_COSr_BLKACC,3,0,0,MMU_MTP_COSr_OFFSET,0,&(r._mmu_mtp_cos),1)

/*******************************************************************************
 * End of 'MMU_MTP_COSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTP_CPU_COS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTP_CPU_COS.
 */
#define READ_MMU_MTP_CPU_COSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTP_CPU_COSr_BLKACC,3,0,0,MMU_MTP_CPU_COSr_OFFSET,0,(r._mmu_mtp_cpu_cos),1)
#define WRITE_MMU_MTP_CPU_COSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTP_CPU_COSr_BLKACC,3,0,0,MMU_MTP_CPU_COSr_OFFSET,0,&(r._mmu_mtp_cpu_cos),1)

/*******************************************************************************
 * End of 'MMU_MTP_CPU_COSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_BUCKET_CPU_L1
 * BLOCKS:   MMU_EB
 * SIZE:     68
 */
/*
 * These macros can be used to access MMU_MTRO_BUCKET_CPU_L1.
 */
#define READ_MMU_MTRO_BUCKET_CPU_L1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MTRO_BUCKET_CPU_L1m_BLKACC,4,0,p,MMU_MTRO_BUCKET_CPU_L1m_OFFSET,i,(m._mmu_mtro_bucket_cpu_l1),3)
#define WRITE_MMU_MTRO_BUCKET_CPU_L1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MTRO_BUCKET_CPU_L1m_BLKACC,4,0,p,MMU_MTRO_BUCKET_CPU_L1m_OFFSET,i,&(m._mmu_mtro_bucket_cpu_l1),3)

/*******************************************************************************
 * End of 'MMU_MTRO_BUCKET_CPU_L1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_BUCKET_L0
 * BLOCKS:   MMU_EB
 * SIZE:     68
 */
/*
 * These macros can be used to access MMU_MTRO_BUCKET_L0.
 */
#define READ_MMU_MTRO_BUCKET_L0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MTRO_BUCKET_L0m_BLKACC,4,0,p,MMU_MTRO_BUCKET_L0m_OFFSET,i,(m._mmu_mtro_bucket_l0),3)
#define WRITE_MMU_MTRO_BUCKET_L0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MTRO_BUCKET_L0m_BLKACC,4,0,p,MMU_MTRO_BUCKET_L0m_OFFSET,i,&(m._mmu_mtro_bucket_l0),3)

/*******************************************************************************
 * End of 'MMU_MTRO_BUCKET_L0m'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTRO_CONFIG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTRO_CONFIG.
 */
#define READ_MMU_MTRO_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTRO_CONFIGr_BLKACC,4,0,0,MMU_MTRO_CONFIGr_OFFSET,0,(r._mmu_mtro_config),1)
#define WRITE_MMU_MTRO_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTRO_CONFIGr_BLKACC,4,0,0,MMU_MTRO_CONFIGr_OFFSET,0,&(r._mmu_mtro_config),1)

/*******************************************************************************
 * End of 'MMU_MTRO_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTRO_COUNTER_OVERFLOW
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTRO_COUNTER_OVERFLOW.
 */
#define READ_MMU_MTRO_COUNTER_OVERFLOWr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTRO_COUNTER_OVERFLOWr_BLKACC,4,0,p,MMU_MTRO_COUNTER_OVERFLOWr_OFFSET,0,(r._mmu_mtro_counter_overflow),1)
#define WRITE_MMU_MTRO_COUNTER_OVERFLOWr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTRO_COUNTER_OVERFLOWr_BLKACC,4,0,p,MMU_MTRO_COUNTER_OVERFLOWr_OFFSET,0,&(r._mmu_mtro_counter_overflow),1)

/*******************************************************************************
 * End of 'MMU_MTRO_COUNTER_OVERFLOWr'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTRO_CPU_INT_EN
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTRO_CPU_INT_EN.
 */
#define READ_MMU_MTRO_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTRO_CPU_INT_ENr_BLKACC,4,0,0,MMU_MTRO_CPU_INT_ENr_OFFSET,0,(r._mmu_mtro_cpu_int_en),1)
#define WRITE_MMU_MTRO_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTRO_CPU_INT_ENr_BLKACC,4,0,0,MMU_MTRO_CPU_INT_ENr_OFFSET,0,&(r._mmu_mtro_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_MTRO_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTRO_CPU_INT_SET
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTRO_CPU_INT_SET.
 */
#define READ_MMU_MTRO_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTRO_CPU_INT_SETr_BLKACC,4,0,p,MMU_MTRO_CPU_INT_SETr_OFFSET,0,(r._mmu_mtro_cpu_int_set),1)
#define WRITE_MMU_MTRO_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTRO_CPU_INT_SETr_BLKACC,4,0,p,MMU_MTRO_CPU_INT_SETr_OFFSET,0,&(r._mmu_mtro_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_MTRO_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTRO_CPU_INT_STAT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTRO_CPU_INT_STAT.
 */
#define READ_MMU_MTRO_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTRO_CPU_INT_STATr_BLKACC,4,0,p,MMU_MTRO_CPU_INT_STATr_OFFSET,0,(r._mmu_mtro_cpu_int_stat),1)
#define WRITE_MMU_MTRO_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTRO_CPU_INT_STATr_BLKACC,4,0,p,MMU_MTRO_CPU_INT_STATr_OFFSET,0,&(r._mmu_mtro_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_MTRO_CPU_INT_STATr'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_CPU_L1_A
 * BLOCKS:   MMU_EB
 * SIZE:     73
 */
/*
 * These macros can be used to access MMU_MTRO_CPU_L1_A.
 */
#define READ_MMU_MTRO_CPU_L1_Am(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MTRO_CPU_L1_Am_BLKACC,4,0,0,MMU_MTRO_CPU_L1_Am_OFFSET,i,(m._mmu_mtro_cpu_l1_a),3)
#define WRITE_MMU_MTRO_CPU_L1_Am(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MTRO_CPU_L1_Am_BLKACC,4,0,0,MMU_MTRO_CPU_L1_Am_OFFSET,i,&(m._mmu_mtro_cpu_l1_a),3)

/*******************************************************************************
 * End of 'MMU_MTRO_CPU_L1_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_CPU_L1_B
 * BLOCKS:   MMU_EB
 * SIZE:     73
 */
/*
 * These macros can be used to access MMU_MTRO_CPU_L1_B.
 */
#define READ_MMU_MTRO_CPU_L1_Bm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MTRO_CPU_L1_Bm_BLKACC,4,0,0,MMU_MTRO_CPU_L1_Bm_OFFSET,i,(m._mmu_mtro_cpu_l1_b),3)
#define WRITE_MMU_MTRO_CPU_L1_Bm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MTRO_CPU_L1_Bm_BLKACC,4,0,0,MMU_MTRO_CPU_L1_Bm_OFFSET,i,&(m._mmu_mtro_cpu_l1_b),3)

/*******************************************************************************
 * End of 'MMU_MTRO_CPU_L1_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_CPU_L1_C
 * BLOCKS:   MMU_EB
 * SIZE:     73
 */
/*
 * These macros can be used to access MMU_MTRO_CPU_L1_C.
 */
#define READ_MMU_MTRO_CPU_L1_Cm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MTRO_CPU_L1_Cm_BLKACC,4,0,0,MMU_MTRO_CPU_L1_Cm_OFFSET,i,(m._mmu_mtro_cpu_l1_c),3)
#define WRITE_MMU_MTRO_CPU_L1_Cm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MTRO_CPU_L1_Cm_BLKACC,4,0,0,MMU_MTRO_CPU_L1_Cm_OFFSET,i,&(m._mmu_mtro_cpu_l1_c),3)

/*******************************************************************************
 * End of 'MMU_MTRO_CPU_L1_Cm'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTRO_CPU_L1_TO_L0_MAPPING
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTRO_CPU_L1_TO_L0_MAPPING.
 */
#define READ_MMU_MTRO_CPU_L1_TO_L0_MAPPINGr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTRO_CPU_L1_TO_L0_MAPPINGr_BLKACC,4,0,0,MMU_MTRO_CPU_L1_TO_L0_MAPPINGr_OFFSET,i,(r._mmu_mtro_cpu_l1_to_l0_mapping),1)
#define WRITE_MMU_MTRO_CPU_L1_TO_L0_MAPPINGr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTRO_CPU_L1_TO_L0_MAPPINGr_BLKACC,4,0,0,MMU_MTRO_CPU_L1_TO_L0_MAPPINGr_OFFSET,i,&(r._mmu_mtro_cpu_l1_to_l0_mapping),1)

/*******************************************************************************
 * End of 'MMU_MTRO_CPU_L1_TO_L0_MAPPINGr'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_EGRMETERINGBUCKET
 * BLOCKS:   MMU_EB
 * SIZE:     30
 */
/*
 * These macros can be used to access MMU_MTRO_EGRMETERINGBUCKET.
 */
#define READ_MMU_MTRO_EGRMETERINGBUCKETm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MTRO_EGRMETERINGBUCKETm_BLKACC,4,0,p,MMU_MTRO_EGRMETERINGBUCKETm_OFFSET,i,(m._mmu_mtro_egrmeteringbucket),1)
#define WRITE_MMU_MTRO_EGRMETERINGBUCKETm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MTRO_EGRMETERINGBUCKETm_BLKACC,4,0,p,MMU_MTRO_EGRMETERINGBUCKETm_OFFSET,i,&(m._mmu_mtro_egrmeteringbucket),1)

/*******************************************************************************
 * End of 'MMU_MTRO_EGRMETERINGBUCKETm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_EGRMETERINGCONFIG
 * BLOCKS:   MMU_EB
 * SIZE:     33
 */
/*
 * These macros can be used to access MMU_MTRO_EGRMETERINGCONFIG.
 */
#define READ_MMU_MTRO_EGRMETERINGCONFIGm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MTRO_EGRMETERINGCONFIGm_BLKACC,4,0,p,MMU_MTRO_EGRMETERINGCONFIGm_OFFSET,i,(m._mmu_mtro_egrmeteringconfig),2)
#define WRITE_MMU_MTRO_EGRMETERINGCONFIGm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MTRO_EGRMETERINGCONFIGm_BLKACC,4,0,p,MMU_MTRO_EGRMETERINGCONFIGm_OFFSET,i,&(m._mmu_mtro_egrmeteringconfig),2)

/*******************************************************************************
 * End of 'MMU_MTRO_EGRMETERINGCONFIGm'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTRO_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTRO_ENABLE_ECCP_MEM.
 */
#define READ_MMU_MTRO_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTRO_ENABLE_ECCP_MEMr_BLKACC,4,0,0,MMU_MTRO_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_mtro_enable_eccp_mem),1)
#define WRITE_MMU_MTRO_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTRO_ENABLE_ECCP_MEMr_BLKACC,4,0,0,MMU_MTRO_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_mtro_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_MTRO_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTRO_EN_COR_ERR_RPT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTRO_EN_COR_ERR_RPT.
 */
#define READ_MMU_MTRO_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTRO_EN_COR_ERR_RPTr_BLKACC,4,0,0,MMU_MTRO_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_mtro_en_cor_err_rpt),1)
#define WRITE_MMU_MTRO_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTRO_EN_COR_ERR_RPTr_BLKACC,4,0,0,MMU_MTRO_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_mtro_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_MTRO_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTRO_HULL_MODE_ENABLE
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTRO_HULL_MODE_ENABLE.
 */
#define READ_MMU_MTRO_HULL_MODE_ENABLEr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTRO_HULL_MODE_ENABLEr_BLKACC,4,0,p,MMU_MTRO_HULL_MODE_ENABLEr_OFFSET,0,(r._mmu_mtro_hull_mode_enable),1)
#define WRITE_MMU_MTRO_HULL_MODE_ENABLEr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTRO_HULL_MODE_ENABLEr_BLKACC,4,0,p,MMU_MTRO_HULL_MODE_ENABLEr_OFFSET,0,&(r._mmu_mtro_hull_mode_enable),1)

/*******************************************************************************
 * End of 'MMU_MTRO_HULL_MODE_ENABLEr'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_L0_A
 * BLOCKS:   MMU_EB
 * SIZE:     73
 */
/*
 * These macros can be used to access MMU_MTRO_L0_A.
 */
#define READ_MMU_MTRO_L0_Am(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MTRO_L0_Am_BLKACC,4,0,p,MMU_MTRO_L0_Am_OFFSET,i,(m._mmu_mtro_l0_a),3)
#define WRITE_MMU_MTRO_L0_Am(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MTRO_L0_Am_BLKACC,4,0,p,MMU_MTRO_L0_Am_OFFSET,i,&(m._mmu_mtro_l0_a),3)

/*******************************************************************************
 * End of 'MMU_MTRO_L0_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_L0_B
 * BLOCKS:   MMU_EB
 * SIZE:     73
 */
/*
 * These macros can be used to access MMU_MTRO_L0_B.
 */
#define READ_MMU_MTRO_L0_Bm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MTRO_L0_Bm_BLKACC,4,0,p,MMU_MTRO_L0_Bm_OFFSET,i,(m._mmu_mtro_l0_b),3)
#define WRITE_MMU_MTRO_L0_Bm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MTRO_L0_Bm_BLKACC,4,0,p,MMU_MTRO_L0_Bm_OFFSET,i,&(m._mmu_mtro_l0_b),3)

/*******************************************************************************
 * End of 'MMU_MTRO_L0_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_L0_C
 * BLOCKS:   MMU_EB
 * SIZE:     73
 */
/*
 * These macros can be used to access MMU_MTRO_L0_C.
 */
#define READ_MMU_MTRO_L0_Cm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_MTRO_L0_Cm_BLKACC,4,0,p,MMU_MTRO_L0_Cm_OFFSET,i,(m._mmu_mtro_l0_c),3)
#define WRITE_MMU_MTRO_L0_Cm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_MTRO_L0_Cm_BLKACC,4,0,p,MMU_MTRO_L0_Cm_OFFSET,i,&(m._mmu_mtro_l0_c),3)

/*******************************************************************************
 * End of 'MMU_MTRO_L0_Cm'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTRO_MMUQ_SCHQ_CFG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTRO_MMUQ_SCHQ_CFG.
 */
#define READ_MMU_MTRO_MMUQ_SCHQ_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTRO_MMUQ_SCHQ_CFGr_BLKACC,4,0,p,MMU_MTRO_MMUQ_SCHQ_CFGr_OFFSET,0,(r._mmu_mtro_mmuq_schq_cfg),1)
#define WRITE_MMU_MTRO_MMUQ_SCHQ_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTRO_MMUQ_SCHQ_CFGr_BLKACC,4,0,p,MMU_MTRO_MMUQ_SCHQ_CFGr_OFFSET,0,&(r._mmu_mtro_mmuq_schq_cfg),1)

/*******************************************************************************
 * End of 'MMU_MTRO_MMUQ_SCHQ_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTRO_MMUQ_SCHQ_PROFILE
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_MTRO_MMUQ_SCHQ_PROFILE.
 */
#define READ_MMU_MTRO_MMUQ_SCHQ_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTRO_MMUQ_SCHQ_PROFILEr_BLKACC,4,0,0,MMU_MTRO_MMUQ_SCHQ_PROFILEr_OFFSET,i,(r._mmu_mtro_mmuq_schq_profile),2)
#define WRITE_MMU_MTRO_MMUQ_SCHQ_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTRO_MMUQ_SCHQ_PROFILEr_BLKACC,4,0,0,MMU_MTRO_MMUQ_SCHQ_PROFILEr_OFFSET,i,&(r._mmu_mtro_mmuq_schq_profile),2)

/*******************************************************************************
 * End of 'MMU_MTRO_MMUQ_SCHQ_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTRO_PORT_ENTITY_DISABLE
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTRO_PORT_ENTITY_DISABLE.
 */
#define READ_MMU_MTRO_PORT_ENTITY_DISABLEr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTRO_PORT_ENTITY_DISABLEr_BLKACC,4,0,p,MMU_MTRO_PORT_ENTITY_DISABLEr_OFFSET,0,(r._mmu_mtro_port_entity_disable),1)
#define WRITE_MMU_MTRO_PORT_ENTITY_DISABLEr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTRO_PORT_ENTITY_DISABLEr_BLKACC,4,0,p,MMU_MTRO_PORT_ENTITY_DISABLEr_OFFSET,0,&(r._mmu_mtro_port_entity_disable),1)

/*******************************************************************************
 * End of 'MMU_MTRO_PORT_ENTITY_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTRO_RSVD_REG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTRO_RSVD_REG.
 */
#define READ_MMU_MTRO_RSVD_REGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTRO_RSVD_REGr_BLKACC,4,0,p,MMU_MTRO_RSVD_REGr_OFFSET,0,(r._mmu_mtro_rsvd_reg),1)
#define WRITE_MMU_MTRO_RSVD_REGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTRO_RSVD_REGr_BLKACC,4,0,p,MMU_MTRO_RSVD_REGr_OFFSET,0,&(r._mmu_mtro_rsvd_reg),1)

/*******************************************************************************
 * End of 'MMU_MTRO_RSVD_REGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_MTRO_TMBUS
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_MTRO_TMBUS.
 */
#define READ_MMU_MTRO_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_MTRO_TMBUSr_BLKACC,4,0,0,MMU_MTRO_TMBUSr_OFFSET,0,(r._mmu_mtro_tmbus),2)
#define WRITE_MMU_MTRO_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_MTRO_TMBUSr_BLKACC,4,0,0,MMU_MTRO_TMBUSr_OFFSET,0,&(r._mmu_mtro_tmbus),2)

/*******************************************************************************
 * End of 'MMU_MTRO_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_OQS_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_OQS_CMIC_RESERVED.
 */
#define READ_MMU_OQS_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_OQS_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_OQS_CMIC_RESERVEDr_OFFSET,0,(r._mmu_oqs_cmic_reserved),1)
#define WRITE_MMU_OQS_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_OQS_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_OQS_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_oqs_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_OQS_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_OQS_CPU_INT_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_OQS_CPU_INT_EN.
 */
#define READ_MMU_OQS_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_OQS_CPU_INT_ENr_BLKACC,3,0,0,MMU_OQS_CPU_INT_ENr_OFFSET,0,(r._mmu_oqs_cpu_int_en),1)
#define WRITE_MMU_OQS_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_OQS_CPU_INT_ENr_BLKACC,3,0,0,MMU_OQS_CPU_INT_ENr_OFFSET,0,&(r._mmu_oqs_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_OQS_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_OQS_CPU_INT_SET
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_OQS_CPU_INT_SET.
 */
#define READ_MMU_OQS_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_OQS_CPU_INT_SETr_BLKACC,3,0,p,MMU_OQS_CPU_INT_SETr_OFFSET,0,(r._mmu_oqs_cpu_int_set),1)
#define WRITE_MMU_OQS_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_OQS_CPU_INT_SETr_BLKACC,3,0,p,MMU_OQS_CPU_INT_SETr_OFFSET,0,&(r._mmu_oqs_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_OQS_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_OQS_CPU_INT_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_OQS_CPU_INT_STAT.
 */
#define READ_MMU_OQS_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_OQS_CPU_INT_STATr_BLKACC,3,0,p,MMU_OQS_CPU_INT_STATr_OFFSET,0,(r._mmu_oqs_cpu_int_stat),1)
#define WRITE_MMU_OQS_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_OQS_CPU_INT_STATr_BLKACC,3,0,p,MMU_OQS_CPU_INT_STATr_OFFSET,0,&(r._mmu_oqs_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_OQS_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_OQS_DEBUG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_OQS_DEBUG.
 */
#define READ_MMU_OQS_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_OQS_DEBUGr_BLKACC,3,0,p,MMU_OQS_DEBUGr_OFFSET,0,(r._mmu_oqs_debug),1)
#define WRITE_MMU_OQS_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_OQS_DEBUGr_BLKACC,3,0,p,MMU_OQS_DEBUGr_OFFSET,0,&(r._mmu_oqs_debug),1)

/*******************************************************************************
 * End of 'MMU_OQS_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_OQS_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_OQS_ENABLE_ECCP_MEM.
 */
#define READ_MMU_OQS_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_OQS_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_OQS_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_oqs_enable_eccp_mem),1)
#define WRITE_MMU_OQS_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_OQS_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_OQS_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_oqs_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_OQS_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_OQS_ENQ_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_OQS_ENQ_CONFIG.
 */
#define READ_MMU_OQS_ENQ_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_OQS_ENQ_CONFIGr_BLKACC,3,0,0,MMU_OQS_ENQ_CONFIGr_OFFSET,0,(r._mmu_oqs_enq_config),1)
#define WRITE_MMU_OQS_ENQ_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_OQS_ENQ_CONFIGr_BLKACC,3,0,0,MMU_OQS_ENQ_CONFIGr_OFFSET,0,&(r._mmu_oqs_enq_config),1)

/*******************************************************************************
 * End of 'MMU_OQS_ENQ_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_OQS_EN_COR_ERR_RPT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_OQS_EN_COR_ERR_RPT.
 */
#define READ_MMU_OQS_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_OQS_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_OQS_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_oqs_en_cor_err_rpt),1)
#define WRITE_MMU_OQS_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_OQS_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_OQS_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_oqs_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_OQS_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK0_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK0_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK0_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK0_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK0_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank0_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK0_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK0_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK0_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank0_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK0_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK10_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK10_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK10_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK10_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK10_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank10_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK10_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK10_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK10_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank10_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK10_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK11_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK11_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK11_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK11_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK11_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank11_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK11_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK11_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK11_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank11_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK11_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK12_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK12_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK12_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK12_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK12_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank12_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK12_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK12_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK12_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank12_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK12_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK13_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK13_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK13_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK13_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK13_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank13_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK13_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK13_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK13_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank13_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK13_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK14_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK14_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK14_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK14_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK14_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank14_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK14_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK14_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK14_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank14_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK14_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK15_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK15_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK15_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK15_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK15_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank15_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK15_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK15_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK15_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank15_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK15_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK16_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK16_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK16_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK16_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK16_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank16_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK16_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK16_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK16_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank16_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK16_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK1_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK1_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK1_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK1_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK1_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank1_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK1_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK1_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK1_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank1_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK1_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK2_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK2_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK2_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK2_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK2_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank2_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK2_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK2_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK2_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank2_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK2_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK3_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK3_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK3_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK3_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK3_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank3_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK3_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK3_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK3_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank3_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK3_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK4_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK4_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK4_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK4_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK4_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank4_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK4_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK4_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK4_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank4_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK4_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK5_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK5_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK5_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK5_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK5_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank5_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK5_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK5_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK5_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank5_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK5_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK6_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK6_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK6_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK6_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK6_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank6_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK6_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK6_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK6_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank6_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK6_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK7_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK7_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK7_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK7_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK7_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank7_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK7_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK7_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK7_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank7_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK7_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK8_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK8_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK8_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK8_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK8_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank8_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK8_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK8_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK8_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank8_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK8_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FIFO_BANK9_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     111
 */
/*
 * These macros can be used to access MMU_OQS_FIFO_BANK9_MEM.
 */
#define READ_MMU_OQS_FIFO_BANK9_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FIFO_BANK9_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK9_MEMm_OFFSET,i,(m._mmu_oqs_fifo_bank9_mem),4)
#define WRITE_MMU_OQS_FIFO_BANK9_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FIFO_BANK9_MEMm_BLKACC,3,0,p,MMU_OQS_FIFO_BANK9_MEMm_OFFSET,i,&(m._mmu_oqs_fifo_bank9_mem),4)

/*******************************************************************************
 * End of 'MMU_OQS_FIFO_BANK9_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_FREE_BLOCK_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     96
 */
/*
 * These macros can be used to access MMU_OQS_FREE_BLOCK_MEM.
 */
#define READ_MMU_OQS_FREE_BLOCK_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_FREE_BLOCK_MEMm_BLKACC,3,0,p,MMU_OQS_FREE_BLOCK_MEMm_OFFSET,i,(m._mmu_oqs_free_block_mem),3)
#define WRITE_MMU_OQS_FREE_BLOCK_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_FREE_BLOCK_MEMm_BLKACC,3,0,p,MMU_OQS_FREE_BLOCK_MEMm_OFFSET,i,&(m._mmu_oqs_free_block_mem),3)

/*******************************************************************************
 * End of 'MMU_OQS_FREE_BLOCK_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_INST0_BANK_BMP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_OQS_INST0_BANK_BMP_MEM.
 */
#define READ_MMU_OQS_INST0_BANK_BMP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_INST0_BANK_BMP_MEMm_BLKACC,3,0,p,MMU_OQS_INST0_BANK_BMP_MEMm_OFFSET,i,(m._mmu_oqs_inst0_bank_bmp_mem),1)
#define WRITE_MMU_OQS_INST0_BANK_BMP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_INST0_BANK_BMP_MEMm_BLKACC,3,0,p,MMU_OQS_INST0_BANK_BMP_MEMm_OFFSET,i,&(m._mmu_oqs_inst0_bank_bmp_mem),1)

/*******************************************************************************
 * End of 'MMU_OQS_INST0_BANK_BMP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_INST0_LLIST_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_OQS_INST0_LLIST_MEM.
 */
#define READ_MMU_OQS_INST0_LLIST_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_INST0_LLIST_MEMm_BLKACC,3,0,p,MMU_OQS_INST0_LLIST_MEMm_OFFSET,i,(m._mmu_oqs_inst0_llist_mem),1)
#define WRITE_MMU_OQS_INST0_LLIST_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_INST0_LLIST_MEMm_BLKACC,3,0,p,MMU_OQS_INST0_LLIST_MEMm_OFFSET,i,&(m._mmu_oqs_inst0_llist_mem),1)

/*******************************************************************************
 * End of 'MMU_OQS_INST0_LLIST_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_INST1_BANK_BMP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_OQS_INST1_BANK_BMP_MEM.
 */
#define READ_MMU_OQS_INST1_BANK_BMP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_INST1_BANK_BMP_MEMm_BLKACC,3,0,p,MMU_OQS_INST1_BANK_BMP_MEMm_OFFSET,i,(m._mmu_oqs_inst1_bank_bmp_mem),1)
#define WRITE_MMU_OQS_INST1_BANK_BMP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_INST1_BANK_BMP_MEMm_BLKACC,3,0,p,MMU_OQS_INST1_BANK_BMP_MEMm_OFFSET,i,&(m._mmu_oqs_inst1_bank_bmp_mem),1)

/*******************************************************************************
 * End of 'MMU_OQS_INST1_BANK_BMP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_INST1_LLIST_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_OQS_INST1_LLIST_MEM.
 */
#define READ_MMU_OQS_INST1_LLIST_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_INST1_LLIST_MEMm_BLKACC,3,0,p,MMU_OQS_INST1_LLIST_MEMm_OFFSET,i,(m._mmu_oqs_inst1_llist_mem),1)
#define WRITE_MMU_OQS_INST1_LLIST_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_INST1_LLIST_MEMm_BLKACC,3,0,p,MMU_OQS_INST1_LLIST_MEMm_OFFSET,i,&(m._mmu_oqs_inst1_llist_mem),1)

/*******************************************************************************
 * End of 'MMU_OQS_INST1_LLIST_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_INST2_BANK_BMP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_OQS_INST2_BANK_BMP_MEM.
 */
#define READ_MMU_OQS_INST2_BANK_BMP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_INST2_BANK_BMP_MEMm_BLKACC,3,0,p,MMU_OQS_INST2_BANK_BMP_MEMm_OFFSET,i,(m._mmu_oqs_inst2_bank_bmp_mem),1)
#define WRITE_MMU_OQS_INST2_BANK_BMP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_INST2_BANK_BMP_MEMm_BLKACC,3,0,p,MMU_OQS_INST2_BANK_BMP_MEMm_OFFSET,i,&(m._mmu_oqs_inst2_bank_bmp_mem),1)

/*******************************************************************************
 * End of 'MMU_OQS_INST2_BANK_BMP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_INST2_LLIST_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_OQS_INST2_LLIST_MEM.
 */
#define READ_MMU_OQS_INST2_LLIST_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_INST2_LLIST_MEMm_BLKACC,3,0,p,MMU_OQS_INST2_LLIST_MEMm_OFFSET,i,(m._mmu_oqs_inst2_llist_mem),1)
#define WRITE_MMU_OQS_INST2_LLIST_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_INST2_LLIST_MEMm_BLKACC,3,0,p,MMU_OQS_INST2_LLIST_MEMm_OFFSET,i,&(m._mmu_oqs_inst2_llist_mem),1)

/*******************************************************************************
 * End of 'MMU_OQS_INST2_LLIST_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_INST3_BANK_BMP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_OQS_INST3_BANK_BMP_MEM.
 */
#define READ_MMU_OQS_INST3_BANK_BMP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_INST3_BANK_BMP_MEMm_BLKACC,3,0,p,MMU_OQS_INST3_BANK_BMP_MEMm_OFFSET,i,(m._mmu_oqs_inst3_bank_bmp_mem),1)
#define WRITE_MMU_OQS_INST3_BANK_BMP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_INST3_BANK_BMP_MEMm_BLKACC,3,0,p,MMU_OQS_INST3_BANK_BMP_MEMm_OFFSET,i,&(m._mmu_oqs_inst3_bank_bmp_mem),1)

/*******************************************************************************
 * End of 'MMU_OQS_INST3_BANK_BMP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_OQS_INST3_LLIST_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_OQS_INST3_LLIST_MEM.
 */
#define READ_MMU_OQS_INST3_LLIST_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_OQS_INST3_LLIST_MEMm_BLKACC,3,0,p,MMU_OQS_INST3_LLIST_MEMm_OFFSET,i,(m._mmu_oqs_inst3_llist_mem),1)
#define WRITE_MMU_OQS_INST3_LLIST_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_OQS_INST3_LLIST_MEMm_BLKACC,3,0,p,MMU_OQS_INST3_LLIST_MEMm_OFFSET,i,&(m._mmu_oqs_inst3_llist_mem),1)

/*******************************************************************************
 * End of 'MMU_OQS_INST3_LLIST_MEMm'
 */




/*******************************************************************************
 * REGISTER:  MMU_OQS_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_OQS_STAT.
 */
#define READ_MMU_OQS_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_OQS_STATr_BLKACC,3,0,p,MMU_OQS_STATr_OFFSET,0,(r._mmu_oqs_stat),1)
#define WRITE_MMU_OQS_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_OQS_STATr_BLKACC,3,0,p,MMU_OQS_STATr_OFFSET,0,&(r._mmu_oqs_stat),1)

/*******************************************************************************
 * End of 'MMU_OQS_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_OQS_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_OQS_TMBUS.
 */
#define READ_MMU_OQS_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_OQS_TMBUSr_BLKACC,3,0,0,MMU_OQS_TMBUSr_OFFSET,0,(r._mmu_oqs_tmbus),2)
#define WRITE_MMU_OQS_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_OQS_TMBUSr_BLKACC,3,0,0,MMU_OQS_TMBUSr_OFFSET,0,&(r._mmu_oqs_tmbus),2)

/*******************************************************************************
 * End of 'MMU_OQS_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PORT_MMUQ_SCHQ_CFG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PORT_MMUQ_SCHQ_CFG.
 */
#define READ_MMU_PORT_MMUQ_SCHQ_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PORT_MMUQ_SCHQ_CFGr_BLKACC,3,0,p,MMU_PORT_MMUQ_SCHQ_CFGr_OFFSET,0,(r._mmu_port_mmuq_schq_cfg),1)
#define WRITE_MMU_PORT_MMUQ_SCHQ_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PORT_MMUQ_SCHQ_CFGr_BLKACC,3,0,p,MMU_PORT_MMUQ_SCHQ_CFGr_OFFSET,0,&(r._mmu_port_mmuq_schq_cfg),1)

/*******************************************************************************
 * End of 'MMU_PORT_MMUQ_SCHQ_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PPSCH_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PPSCH_CMIC_RESERVED.
 */
#define READ_MMU_PPSCH_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PPSCH_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_PPSCH_CMIC_RESERVEDr_OFFSET,0,(r._mmu_ppsch_cmic_reserved),1)
#define WRITE_MMU_PPSCH_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PPSCH_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_PPSCH_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_ppsch_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_PPSCH_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PPSCH_EB_3_0_RL_CREDIT
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_PPSCH_EB_3_0_RL_CREDIT.
 */
#define READ_MMU_PPSCH_EB_3_0_RL_CREDITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PPSCH_EB_3_0_RL_CREDITr_BLKACC,3,0,p,MMU_PPSCH_EB_3_0_RL_CREDITr_OFFSET,i,(r._mmu_ppsch_eb_3_0_rl_credit),2)
#define WRITE_MMU_PPSCH_EB_3_0_RL_CREDITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PPSCH_EB_3_0_RL_CREDITr_BLKACC,3,0,p,MMU_PPSCH_EB_3_0_RL_CREDITr_OFFSET,i,&(r._mmu_ppsch_eb_3_0_rl_credit),2)

/*******************************************************************************
 * End of 'MMU_PPSCH_EB_3_0_RL_CREDITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PPSCH_EB_7_4_RL_CREDIT
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_PPSCH_EB_7_4_RL_CREDIT.
 */
#define READ_MMU_PPSCH_EB_7_4_RL_CREDITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PPSCH_EB_7_4_RL_CREDITr_BLKACC,3,0,p,MMU_PPSCH_EB_7_4_RL_CREDITr_OFFSET,i,(r._mmu_ppsch_eb_7_4_rl_credit),2)
#define WRITE_MMU_PPSCH_EB_7_4_RL_CREDITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PPSCH_EB_7_4_RL_CREDITr_BLKACC,3,0,p,MMU_PPSCH_EB_7_4_RL_CREDITr_OFFSET,i,&(r._mmu_ppsch_eb_7_4_rl_credit),2)

/*******************************************************************************
 * End of 'MMU_PPSCH_EB_7_4_RL_CREDITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PPSCH_ITM_BUBBLE_INSERTION_CYCLE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PPSCH_ITM_BUBBLE_INSERTION_CYCLE.
 */
#define READ_MMU_PPSCH_ITM_BUBBLE_INSERTION_CYCLEr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PPSCH_ITM_BUBBLE_INSERTION_CYCLEr_BLKACC,3,0,0,MMU_PPSCH_ITM_BUBBLE_INSERTION_CYCLEr_OFFSET,0,(r._mmu_ppsch_itm_bubble_insertion_cycle),1)
#define WRITE_MMU_PPSCH_ITM_BUBBLE_INSERTION_CYCLEr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PPSCH_ITM_BUBBLE_INSERTION_CYCLEr_BLKACC,3,0,0,MMU_PPSCH_ITM_BUBBLE_INSERTION_CYCLEr_OFFSET,0,&(r._mmu_ppsch_itm_bubble_insertion_cycle),1)

/*******************************************************************************
 * End of 'MMU_PPSCH_ITM_BUBBLE_INSERTION_CYCLEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PPSCH_S2_TO_S1_CREDIT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PPSCH_S2_TO_S1_CREDIT.
 */
#define READ_MMU_PPSCH_S2_TO_S1_CREDITr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PPSCH_S2_TO_S1_CREDITr_BLKACC,3,0,p,MMU_PPSCH_S2_TO_S1_CREDITr_OFFSET,0,(r._mmu_ppsch_s2_to_s1_credit),1)
#define WRITE_MMU_PPSCH_S2_TO_S1_CREDITr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PPSCH_S2_TO_S1_CREDITr_BLKACC,3,0,p,MMU_PPSCH_S2_TO_S1_CREDITr_OFFSET,0,&(r._mmu_ppsch_s2_to_s1_credit),1)

/*******************************************************************************
 * End of 'MMU_PPSCH_S2_TO_S1_CREDITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PPSCH_SCHQ_MMUQ_PROFILE
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_PPSCH_SCHQ_MMUQ_PROFILE.
 */
#define READ_MMU_PPSCH_SCHQ_MMUQ_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PPSCH_SCHQ_MMUQ_PROFILEr_BLKACC,3,0,0,MMU_PPSCH_SCHQ_MMUQ_PROFILEr_OFFSET,i,(r._mmu_ppsch_schq_mmuq_profile),2)
#define WRITE_MMU_PPSCH_SCHQ_MMUQ_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PPSCH_SCHQ_MMUQ_PROFILEr_BLKACC,3,0,0,MMU_PPSCH_SCHQ_MMUQ_PROFILEr_OFFSET,i,&(r._mmu_ppsch_schq_mmuq_profile),2)

/*******************************************************************************
 * End of 'MMU_PPSCH_SCHQ_MMUQ_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PPSCH_STAGE1_EB_PACING_CFG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PPSCH_STAGE1_EB_PACING_CFG.
 */
#define READ_MMU_PPSCH_STAGE1_EB_PACING_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PPSCH_STAGE1_EB_PACING_CFGr_BLKACC,3,0,0,MMU_PPSCH_STAGE1_EB_PACING_CFGr_OFFSET,0,(r._mmu_ppsch_stage1_eb_pacing_cfg),1)
#define WRITE_MMU_PPSCH_STAGE1_EB_PACING_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PPSCH_STAGE1_EB_PACING_CFGr_BLKACC,3,0,0,MMU_PPSCH_STAGE1_EB_PACING_CFGr_OFFSET,0,&(r._mmu_ppsch_stage1_eb_pacing_cfg),1)

/*******************************************************************************
 * End of 'MMU_PPSCH_STAGE1_EB_PACING_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PTSCH_CAL_CONFIG
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_PTSCH_CAL_CONFIG.
 */
#define READ_MMU_PTSCH_CAL_CONFIGr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PTSCH_CAL_CONFIGr_BLKACC,4,0,p,MMU_PTSCH_CAL_CONFIGr_OFFSET,i,(r._mmu_ptsch_cal_config),2)
#define WRITE_MMU_PTSCH_CAL_CONFIGr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PTSCH_CAL_CONFIGr_BLKACC,4,0,p,MMU_PTSCH_CAL_CONFIGr_OFFSET,i,&(r._mmu_ptsch_cal_config),2)

/*******************************************************************************
 * End of 'MMU_PTSCH_CAL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PTSCH_CMIC_RESERVED
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PTSCH_CMIC_RESERVED.
 */
#define READ_MMU_PTSCH_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PTSCH_CMIC_RESERVEDr_BLKACC,4,0,0,MMU_PTSCH_CMIC_RESERVEDr_OFFSET,0,(r._mmu_ptsch_cmic_reserved),1)
#define WRITE_MMU_PTSCH_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PTSCH_CMIC_RESERVEDr_BLKACC,4,0,0,MMU_PTSCH_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_ptsch_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_PTSCH_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PTSCH_CPU_MGMT_LB_RATIOS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PTSCH_CPU_MGMT_LB_RATIOS.
 */
#define READ_MMU_PTSCH_CPU_MGMT_LB_RATIOSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PTSCH_CPU_MGMT_LB_RATIOSr_BLKACC,4,0,p,MMU_PTSCH_CPU_MGMT_LB_RATIOSr_OFFSET,0,(r._mmu_ptsch_cpu_mgmt_lb_ratios),1)
#define WRITE_MMU_PTSCH_CPU_MGMT_LB_RATIOSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PTSCH_CPU_MGMT_LB_RATIOSr_BLKACC,4,0,p,MMU_PTSCH_CPU_MGMT_LB_RATIOSr_OFFSET,0,&(r._mmu_ptsch_cpu_mgmt_lb_ratios),1)

/*******************************************************************************
 * End of 'MMU_PTSCH_CPU_MGMT_LB_RATIOSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PTSCH_EB_CREDIT_CONFIG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PTSCH_EB_CREDIT_CONFIG.
 */
#define READ_MMU_PTSCH_EB_CREDIT_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PTSCH_EB_CREDIT_CONFIGr_BLKACC,4,0,p,MMU_PTSCH_EB_CREDIT_CONFIGr_OFFSET,0,(r._mmu_ptsch_eb_credit_config),1)
#define WRITE_MMU_PTSCH_EB_CREDIT_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PTSCH_EB_CREDIT_CONFIGr_BLKACC,4,0,p,MMU_PTSCH_EB_CREDIT_CONFIGr_OFFSET,0,&(r._mmu_ptsch_eb_credit_config),1)

/*******************************************************************************
 * End of 'MMU_PTSCH_EB_CREDIT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PTSCH_FEATURE_CTRL
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PTSCH_FEATURE_CTRL.
 */
#define READ_MMU_PTSCH_FEATURE_CTRLr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PTSCH_FEATURE_CTRLr_BLKACC,4,0,p,MMU_PTSCH_FEATURE_CTRLr_OFFSET,0,(r._mmu_ptsch_feature_ctrl),1)
#define WRITE_MMU_PTSCH_FEATURE_CTRLr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PTSCH_FEATURE_CTRLr_BLKACC,4,0,p,MMU_PTSCH_FEATURE_CTRLr_OFFSET,0,&(r._mmu_ptsch_feature_ctrl),1)

/*******************************************************************************
 * End of 'MMU_PTSCH_FEATURE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PTSCH_PENALTY_MIN_SPACING
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PTSCH_PENALTY_MIN_SPACING.
 */
#define READ_MMU_PTSCH_PENALTY_MIN_SPACINGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PTSCH_PENALTY_MIN_SPACINGr_BLKACC,4,0,0,MMU_PTSCH_PENALTY_MIN_SPACINGr_OFFSET,0,(r._mmu_ptsch_penalty_min_spacing),1)
#define WRITE_MMU_PTSCH_PENALTY_MIN_SPACINGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PTSCH_PENALTY_MIN_SPACINGr_BLKACC,4,0,0,MMU_PTSCH_PENALTY_MIN_SPACINGr_OFFSET,0,&(r._mmu_ptsch_penalty_min_spacing),1)

/*******************************************************************************
 * End of 'MMU_PTSCH_PENALTY_MIN_SPACINGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_CPU_MIN_SPACING
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_CPU_MIN_SPACING.
 */
#define READ_MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_CPU_MIN_SPACINGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_CPU_MIN_SPACINGr_BLKACC,4,0,0,MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_CPU_MIN_SPACINGr_OFFSET,0,(r._mmu_ptsch_pipe_pick_to_same_port_cpu_min_spacing),1)
#define WRITE_MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_CPU_MIN_SPACINGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_CPU_MIN_SPACINGr_BLKACC,4,0,0,MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_CPU_MIN_SPACINGr_OFFSET,0,&(r._mmu_ptsch_pipe_pick_to_same_port_cpu_min_spacing),1)

/*******************************************************************************
 * End of 'MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_CPU_MIN_SPACINGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_PICK_MIN_SPACING
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_PICK_MIN_SPACING.
 */
#define READ_MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_PICK_MIN_SPACINGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_PICK_MIN_SPACINGr_BLKACC,4,0,0,MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_PICK_MIN_SPACINGr_OFFSET,0,(r._mmu_ptsch_pipe_pick_to_same_port_pick_min_spacing),2)
#define WRITE_MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_PICK_MIN_SPACINGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_PICK_MIN_SPACINGr_BLKACC,4,0,0,MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_PICK_MIN_SPACINGr_OFFSET,0,&(r._mmu_ptsch_pipe_pick_to_same_port_pick_min_spacing),2)

/*******************************************************************************
 * End of 'MMU_PTSCH_PIPE_PICK_TO_SAME_PORT_PICK_MIN_SPACINGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PTSCH_REGULAR_MIN_SPACING
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PTSCH_REGULAR_MIN_SPACING.
 */
#define READ_MMU_PTSCH_REGULAR_MIN_SPACINGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_PTSCH_REGULAR_MIN_SPACINGr_BLKACC,4,0,0,MMU_PTSCH_REGULAR_MIN_SPACINGr_OFFSET,0,(r._mmu_ptsch_regular_min_spacing),1)
#define WRITE_MMU_PTSCH_REGULAR_MIN_SPACINGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_PTSCH_REGULAR_MIN_SPACINGr_BLKACC,4,0,0,MMU_PTSCH_REGULAR_MIN_SPACINGr_OFFSET,0,&(r._mmu_ptsch_regular_min_spacing),1)

/*******************************************************************************
 * End of 'MMU_PTSCH_REGULAR_MIN_SPACINGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_QSCH_CPU_L1_QUEUE_MASK
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_QSCH_CPU_L1_QUEUE_MASK.
 */
#define READ_MMU_QSCH_CPU_L1_QUEUE_MASKr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_QSCH_CPU_L1_QUEUE_MASKr_BLKACC,4,0,0,MMU_QSCH_CPU_L1_QUEUE_MASKr_OFFSET,0,(r._mmu_qsch_cpu_l1_queue_mask),2)
#define WRITE_MMU_QSCH_CPU_L1_QUEUE_MASKr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_QSCH_CPU_L1_QUEUE_MASKr_BLKACC,4,0,0,MMU_QSCH_CPU_L1_QUEUE_MASKr_OFFSET,0,&(r._mmu_qsch_cpu_l1_queue_mask),2)

/*******************************************************************************
 * End of 'MMU_QSCH_CPU_L1_QUEUE_MASKr'
 */




/*******************************************************************************
 * REGISTER:  MMU_QSCH_CPU_L1_TO_L0_MAPPING
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_QSCH_CPU_L1_TO_L0_MAPPING.
 */
#define READ_MMU_QSCH_CPU_L1_TO_L0_MAPPINGr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_QSCH_CPU_L1_TO_L0_MAPPINGr_BLKACC,4,0,0,MMU_QSCH_CPU_L1_TO_L0_MAPPINGr_OFFSET,i,(r._mmu_qsch_cpu_l1_to_l0_mapping),1)
#define WRITE_MMU_QSCH_CPU_L1_TO_L0_MAPPINGr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_QSCH_CPU_L1_TO_L0_MAPPINGr_BLKACC,4,0,0,MMU_QSCH_CPU_L1_TO_L0_MAPPINGr_OFFSET,i,&(r._mmu_qsch_cpu_l1_to_l0_mapping),1)

/*******************************************************************************
 * End of 'MMU_QSCH_CPU_L1_TO_L0_MAPPINGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_QSCH_CPU_PORT_CONFIG
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_QSCH_CPU_PORT_CONFIG.
 */
#define READ_MMU_QSCH_CPU_PORT_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_QSCH_CPU_PORT_CONFIGr_BLKACC,4,0,0,MMU_QSCH_CPU_PORT_CONFIGr_OFFSET,0,(r._mmu_qsch_cpu_port_config),2)
#define WRITE_MMU_QSCH_CPU_PORT_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_QSCH_CPU_PORT_CONFIGr_BLKACC,4,0,0,MMU_QSCH_CPU_PORT_CONFIGr_OFFSET,0,&(r._mmu_qsch_cpu_port_config),2)

/*******************************************************************************
 * End of 'MMU_QSCH_CPU_PORT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_QSCH_DEBUG_FORCE_CPU_COSMASK
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_QSCH_DEBUG_FORCE_CPU_COSMASK.
 */
#define READ_MMU_QSCH_DEBUG_FORCE_CPU_COSMASKr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_QSCH_DEBUG_FORCE_CPU_COSMASKr_BLKACC,4,0,0,MMU_QSCH_DEBUG_FORCE_CPU_COSMASKr_OFFSET,0,(r._mmu_qsch_debug_force_cpu_cosmask),1)
#define WRITE_MMU_QSCH_DEBUG_FORCE_CPU_COSMASKr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_QSCH_DEBUG_FORCE_CPU_COSMASKr_BLKACC,4,0,0,MMU_QSCH_DEBUG_FORCE_CPU_COSMASKr_OFFSET,0,&(r._mmu_qsch_debug_force_cpu_cosmask),1)

/*******************************************************************************
 * End of 'MMU_QSCH_DEBUG_FORCE_CPU_COSMASKr'
 */




/*******************************************************************************
 * REGISTER:  MMU_QSCH_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_QSCH_ENABLE_ECCP_MEM.
 */
#define READ_MMU_QSCH_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_QSCH_ENABLE_ECCP_MEMr_BLKACC,4,0,0,MMU_QSCH_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_qsch_enable_eccp_mem),1)
#define WRITE_MMU_QSCH_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_QSCH_ENABLE_ECCP_MEMr_BLKACC,4,0,0,MMU_QSCH_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_qsch_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_QSCH_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_QSCH_EN_COR_ERR_RPT
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_QSCH_EN_COR_ERR_RPT.
 */
#define READ_MMU_QSCH_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_QSCH_EN_COR_ERR_RPTr_BLKACC,4,0,0,MMU_QSCH_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_qsch_en_cor_err_rpt),1)
#define WRITE_MMU_QSCH_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_QSCH_EN_COR_ERR_RPTr_BLKACC,4,0,0,MMU_QSCH_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_qsch_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_QSCH_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * MEMORY:  MMU_QSCH_L0_ACCUM_COMP_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_QSCH_L0_ACCUM_COMP_MEM.
 */
#define READ_MMU_QSCH_L0_ACCUM_COMP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_QSCH_L0_ACCUM_COMP_MEMm_BLKACC,4,0,p,MMU_QSCH_L0_ACCUM_COMP_MEMm_OFFSET,i,(m._mmu_qsch_l0_accum_comp_mem),1)
#define WRITE_MMU_QSCH_L0_ACCUM_COMP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_QSCH_L0_ACCUM_COMP_MEMm_BLKACC,4,0,p,MMU_QSCH_L0_ACCUM_COMP_MEMm_OFFSET,i,&(m._mmu_qsch_l0_accum_comp_mem),1)

/*******************************************************************************
 * End of 'MMU_QSCH_L0_ACCUM_COMP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_QSCH_L0_CREDIT_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     31
 */
/*
 * These macros can be used to access MMU_QSCH_L0_CREDIT_MEM.
 */
#define READ_MMU_QSCH_L0_CREDIT_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_QSCH_L0_CREDIT_MEMm_BLKACC,4,0,p,MMU_QSCH_L0_CREDIT_MEMm_OFFSET,i,(m._mmu_qsch_l0_credit_mem),1)
#define WRITE_MMU_QSCH_L0_CREDIT_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_QSCH_L0_CREDIT_MEMm_BLKACC,4,0,p,MMU_QSCH_L0_CREDIT_MEMm_OFFSET,i,&(m._mmu_qsch_l0_credit_mem),1)

/*******************************************************************************
 * End of 'MMU_QSCH_L0_CREDIT_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_QSCH_L0_FIRST_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     20
 */
/*
 * These macros can be used to access MMU_QSCH_L0_FIRST_MEM.
 */
#define READ_MMU_QSCH_L0_FIRST_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_QSCH_L0_FIRST_MEMm_BLKACC,4,0,p,MMU_QSCH_L0_FIRST_MEMm_OFFSET,i,(m._mmu_qsch_l0_first_mem),1)
#define WRITE_MMU_QSCH_L0_FIRST_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_QSCH_L0_FIRST_MEMm_BLKACC,4,0,p,MMU_QSCH_L0_FIRST_MEMm_OFFSET,i,&(m._mmu_qsch_l0_first_mem),1)

/*******************************************************************************
 * End of 'MMU_QSCH_L0_FIRST_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_QSCH_L0_WEIGHT_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     12
 */
/*
 * These macros can be used to access MMU_QSCH_L0_WEIGHT_MEM.
 */
#define READ_MMU_QSCH_L0_WEIGHT_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_QSCH_L0_WEIGHT_MEMm_BLKACC,4,0,p,MMU_QSCH_L0_WEIGHT_MEMm_OFFSET,i,(m._mmu_qsch_l0_weight_mem),1)
#define WRITE_MMU_QSCH_L0_WEIGHT_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_QSCH_L0_WEIGHT_MEMm_BLKACC,4,0,p,MMU_QSCH_L0_WEIGHT_MEMm_OFFSET,i,&(m._mmu_qsch_l0_weight_mem),1)

/*******************************************************************************
 * End of 'MMU_QSCH_L0_WEIGHT_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_QSCH_L1_ACCUM_COMP_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_QSCH_L1_ACCUM_COMP_MEM.
 */
#define READ_MMU_QSCH_L1_ACCUM_COMP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_QSCH_L1_ACCUM_COMP_MEMm_BLKACC,4,0,p,MMU_QSCH_L1_ACCUM_COMP_MEMm_OFFSET,i,(m._mmu_qsch_l1_accum_comp_mem),1)
#define WRITE_MMU_QSCH_L1_ACCUM_COMP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_QSCH_L1_ACCUM_COMP_MEMm_BLKACC,4,0,p,MMU_QSCH_L1_ACCUM_COMP_MEMm_OFFSET,i,&(m._mmu_qsch_l1_accum_comp_mem),1)

/*******************************************************************************
 * End of 'MMU_QSCH_L1_ACCUM_COMP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_QSCH_L1_CREDIT_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     31
 */
/*
 * These macros can be used to access MMU_QSCH_L1_CREDIT_MEM.
 */
#define READ_MMU_QSCH_L1_CREDIT_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_QSCH_L1_CREDIT_MEMm_BLKACC,4,0,p,MMU_QSCH_L1_CREDIT_MEMm_OFFSET,i,(m._mmu_qsch_l1_credit_mem),1)
#define WRITE_MMU_QSCH_L1_CREDIT_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_QSCH_L1_CREDIT_MEMm_BLKACC,4,0,p,MMU_QSCH_L1_CREDIT_MEMm_OFFSET,i,&(m._mmu_qsch_l1_credit_mem),1)

/*******************************************************************************
 * End of 'MMU_QSCH_L1_CREDIT_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_QSCH_L1_FIRST_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     20
 */
/*
 * These macros can be used to access MMU_QSCH_L1_FIRST_MEM.
 */
#define READ_MMU_QSCH_L1_FIRST_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_QSCH_L1_FIRST_MEMm_BLKACC,4,0,p,MMU_QSCH_L1_FIRST_MEMm_OFFSET,i,(m._mmu_qsch_l1_first_mem),1)
#define WRITE_MMU_QSCH_L1_FIRST_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_QSCH_L1_FIRST_MEMm_BLKACC,4,0,p,MMU_QSCH_L1_FIRST_MEMm_OFFSET,i,&(m._mmu_qsch_l1_first_mem),1)

/*******************************************************************************
 * End of 'MMU_QSCH_L1_FIRST_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_QSCH_L1_WEIGHT_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     12
 */
/*
 * These macros can be used to access MMU_QSCH_L1_WEIGHT_MEM.
 */
#define READ_MMU_QSCH_L1_WEIGHT_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_QSCH_L1_WEIGHT_MEMm_BLKACC,4,0,p,MMU_QSCH_L1_WEIGHT_MEMm_OFFSET,i,(m._mmu_qsch_l1_weight_mem),1)
#define WRITE_MMU_QSCH_L1_WEIGHT_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_QSCH_L1_WEIGHT_MEMm_BLKACC,4,0,p,MMU_QSCH_L1_WEIGHT_MEMm_OFFSET,i,&(m._mmu_qsch_l1_weight_mem),1)

/*******************************************************************************
 * End of 'MMU_QSCH_L1_WEIGHT_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_QSCH_L2_ACCUM_COMP_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_QSCH_L2_ACCUM_COMP_MEM.
 */
#define READ_MMU_QSCH_L2_ACCUM_COMP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_QSCH_L2_ACCUM_COMP_MEMm_BLKACC,4,0,p,MMU_QSCH_L2_ACCUM_COMP_MEMm_OFFSET,i,(m._mmu_qsch_l2_accum_comp_mem),1)
#define WRITE_MMU_QSCH_L2_ACCUM_COMP_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_QSCH_L2_ACCUM_COMP_MEMm_BLKACC,4,0,p,MMU_QSCH_L2_ACCUM_COMP_MEMm_OFFSET,i,&(m._mmu_qsch_l2_accum_comp_mem),1)

/*******************************************************************************
 * End of 'MMU_QSCH_L2_ACCUM_COMP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_QSCH_L2_CREDIT_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     31
 */
/*
 * These macros can be used to access MMU_QSCH_L2_CREDIT_MEM.
 */
#define READ_MMU_QSCH_L2_CREDIT_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_QSCH_L2_CREDIT_MEMm_BLKACC,4,0,p,MMU_QSCH_L2_CREDIT_MEMm_OFFSET,i,(m._mmu_qsch_l2_credit_mem),1)
#define WRITE_MMU_QSCH_L2_CREDIT_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_QSCH_L2_CREDIT_MEMm_BLKACC,4,0,p,MMU_QSCH_L2_CREDIT_MEMm_OFFSET,i,&(m._mmu_qsch_l2_credit_mem),1)

/*******************************************************************************
 * End of 'MMU_QSCH_L2_CREDIT_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_QSCH_L2_WEIGHT_MEM
 * BLOCKS:   MMU_EB
 * SIZE:     20
 */
/*
 * These macros can be used to access MMU_QSCH_L2_WEIGHT_MEM.
 */
#define READ_MMU_QSCH_L2_WEIGHT_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_QSCH_L2_WEIGHT_MEMm_BLKACC,4,0,p,MMU_QSCH_L2_WEIGHT_MEMm_OFFSET,i,(m._mmu_qsch_l2_weight_mem),1)
#define WRITE_MMU_QSCH_L2_WEIGHT_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_QSCH_L2_WEIGHT_MEMm_BLKACC,4,0,p,MMU_QSCH_L2_WEIGHT_MEMm_OFFSET,i,&(m._mmu_qsch_l2_weight_mem),1)

/*******************************************************************************
 * End of 'MMU_QSCH_L2_WEIGHT_MEMm'
 */




/*******************************************************************************
 * REGISTER:  MMU_QSCH_MMUQ_TO_SCHQ_MAP
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_QSCH_MMUQ_TO_SCHQ_MAP.
 */
#define READ_MMU_QSCH_MMUQ_TO_SCHQ_MAPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_QSCH_MMUQ_TO_SCHQ_MAPr_BLKACC,4,0,p,MMU_QSCH_MMUQ_TO_SCHQ_MAPr_OFFSET,0,(r._mmu_qsch_mmuq_to_schq_map),1)
#define WRITE_MMU_QSCH_MMUQ_TO_SCHQ_MAPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_QSCH_MMUQ_TO_SCHQ_MAPr_BLKACC,4,0,p,MMU_QSCH_MMUQ_TO_SCHQ_MAPr_OFFSET,0,&(r._mmu_qsch_mmuq_to_schq_map),1)

/*******************************************************************************
 * End of 'MMU_QSCH_MMUQ_TO_SCHQ_MAPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_QSCH_PORT_CONFIG
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_QSCH_PORT_CONFIG.
 */
#define READ_MMU_QSCH_PORT_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_QSCH_PORT_CONFIGr_BLKACC,4,0,p,MMU_QSCH_PORT_CONFIGr_OFFSET,0,(r._mmu_qsch_port_config),2)
#define WRITE_MMU_QSCH_PORT_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_QSCH_PORT_CONFIGr_BLKACC,4,0,p,MMU_QSCH_PORT_CONFIGr_OFFSET,0,&(r._mmu_qsch_port_config),2)

/*******************************************************************************
 * End of 'MMU_QSCH_PORT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_QSCH_PORT_EMPTY_STATUS
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_QSCH_PORT_EMPTY_STATUS.
 */
#define READ_MMU_QSCH_PORT_EMPTY_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_QSCH_PORT_EMPTY_STATUSr_BLKACC,4,0,p,MMU_QSCH_PORT_EMPTY_STATUSr_OFFSET,0,(r._mmu_qsch_port_empty_status),1)
#define WRITE_MMU_QSCH_PORT_EMPTY_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_QSCH_PORT_EMPTY_STATUSr_BLKACC,4,0,p,MMU_QSCH_PORT_EMPTY_STATUSr_OFFSET,0,&(r._mmu_qsch_port_empty_status),1)

/*******************************************************************************
 * End of 'MMU_QSCH_PORT_EMPTY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_QSCH_PORT_FLUSH
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_QSCH_PORT_FLUSH.
 */
#define READ_MMU_QSCH_PORT_FLUSHr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_QSCH_PORT_FLUSHr_BLKACC,4,0,p,MMU_QSCH_PORT_FLUSHr_OFFSET,0,(r._mmu_qsch_port_flush),1)
#define WRITE_MMU_QSCH_PORT_FLUSHr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_QSCH_PORT_FLUSHr_BLKACC,4,0,p,MMU_QSCH_PORT_FLUSHr_OFFSET,0,&(r._mmu_qsch_port_flush),1)

/*******************************************************************************
 * End of 'MMU_QSCH_PORT_FLUSHr'
 */




/*******************************************************************************
 * REGISTER:  MMU_QSCH_RESERVED
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_QSCH_RESERVED.
 */
#define READ_MMU_QSCH_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_QSCH_RESERVEDr_BLKACC,4,0,p,MMU_QSCH_RESERVEDr_OFFSET,0,(r._mmu_qsch_reserved),1)
#define WRITE_MMU_QSCH_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_QSCH_RESERVEDr_BLKACC,4,0,p,MMU_QSCH_RESERVEDr_OFFSET,0,&(r._mmu_qsch_reserved),1)

/*******************************************************************************
 * End of 'MMU_QSCH_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_QSCH_SPECIAL_CONFIG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_QSCH_SPECIAL_CONFIG.
 */
#define READ_MMU_QSCH_SPECIAL_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_QSCH_SPECIAL_CONFIGr_BLKACC,4,0,p,MMU_QSCH_SPECIAL_CONFIGr_OFFSET,0,(r._mmu_qsch_special_config),1)
#define WRITE_MMU_QSCH_SPECIAL_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_QSCH_SPECIAL_CONFIGr_BLKACC,4,0,p,MMU_QSCH_SPECIAL_CONFIGr_OFFSET,0,&(r._mmu_qsch_special_config),1)

/*******************************************************************************
 * End of 'MMU_QSCH_SPECIAL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_QSCH_TMBUS
 * BLOCKS:   MMU_EB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_QSCH_TMBUS.
 */
#define READ_MMU_QSCH_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_QSCH_TMBUSr_BLKACC,4,0,0,MMU_QSCH_TMBUSr_OFFSET,0,(r._mmu_qsch_tmbus),2)
#define WRITE_MMU_QSCH_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_QSCH_TMBUSr_BLKACC,4,0,0,MMU_QSCH_TMBUSr_OFFSET,0,&(r._mmu_qsch_tmbus),2)

/*******************************************************************************
 * End of 'MMU_QSCH_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_QSCH_VOQ_FAIRNESS_CONFIG
 * BLOCKS:   MMU_EB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_QSCH_VOQ_FAIRNESS_CONFIG.
 */
#define READ_MMU_QSCH_VOQ_FAIRNESS_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_QSCH_VOQ_FAIRNESS_CONFIGr_BLKACC,4,0,0,MMU_QSCH_VOQ_FAIRNESS_CONFIGr_OFFSET,0,(r._mmu_qsch_voq_fairness_config),1)
#define WRITE_MMU_QSCH_VOQ_FAIRNESS_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_QSCH_VOQ_FAIRNESS_CONFIGr_BLKACC,4,0,0,MMU_QSCH_VOQ_FAIRNESS_CONFIGr_OFFSET,0,&(r._mmu_qsch_voq_fairness_config),1)

/*******************************************************************************
 * End of 'MMU_QSCH_VOQ_FAIRNESS_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  MMU_REPL_GROUP_INFO_TBL
 * BLOCKS:   MMU_ITM
 * SIZE:     294
 */
/*
 * These macros can be used to access MMU_REPL_GROUP_INFO_TBL.
 */
#define READ_MMU_REPL_GROUP_INFO_TBLm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_REPL_GROUP_INFO_TBLm_BLKACC,3,0,0,MMU_REPL_GROUP_INFO_TBLm_OFFSET,i,(m._mmu_repl_group_info_tbl),10)
#define WRITE_MMU_REPL_GROUP_INFO_TBLm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_REPL_GROUP_INFO_TBLm_BLKACC,3,0,0,MMU_REPL_GROUP_INFO_TBLm_OFFSET,i,&(m._mmu_repl_group_info_tbl),10)

/*******************************************************************************
 * End of 'MMU_REPL_GROUP_INFO_TBLm'
 */




/*******************************************************************************
 * MEMORY:  MMU_REPL_HEAD_TBL
 * BLOCKS:   MMU_ITM
 * SIZE:     22
 */
/*
 * These macros can be used to access MMU_REPL_HEAD_TBL.
 */
#define READ_MMU_REPL_HEAD_TBLm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_REPL_HEAD_TBLm_BLKACC,3,0,0,MMU_REPL_HEAD_TBLm_OFFSET,i,(m._mmu_repl_head_tbl),1)
#define WRITE_MMU_REPL_HEAD_TBLm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_REPL_HEAD_TBLm_BLKACC,3,0,0,MMU_REPL_HEAD_TBLm_OFFSET,i,&(m._mmu_repl_head_tbl),1)

/*******************************************************************************
 * End of 'MMU_REPL_HEAD_TBLm'
 */




/*******************************************************************************
 * MEMORY:  MMU_REPL_LIST_TBL
 * BLOCKS:   MMU_ITM
 * SIZE:     101
 */
/*
 * These macros can be used to access MMU_REPL_LIST_TBL.
 */
#define READ_MMU_REPL_LIST_TBLm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_REPL_LIST_TBLm_BLKACC,3,0,0,MMU_REPL_LIST_TBLm_OFFSET,i,(m._mmu_repl_list_tbl),4)
#define WRITE_MMU_REPL_LIST_TBLm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_REPL_LIST_TBLm_BLKACC,3,0,0,MMU_REPL_LIST_TBLm_OFFSET,i,&(m._mmu_repl_list_tbl),4)

/*******************************************************************************
 * End of 'MMU_REPL_LIST_TBLm'
 */




/*******************************************************************************
 * MEMORY:  MMU_REPL_STATE_TBL
 * BLOCKS:   MMU_ITM
 * SIZE:     31
 */
/*
 * These macros can be used to access MMU_REPL_STATE_TBL.
 */
#define READ_MMU_REPL_STATE_TBLm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_REPL_STATE_TBLm_BLKACC,3,0,p,MMU_REPL_STATE_TBLm_OFFSET,i,(m._mmu_repl_state_tbl),1)
#define WRITE_MMU_REPL_STATE_TBLm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_REPL_STATE_TBLm_BLKACC,3,0,p,MMU_REPL_STATE_TBLm_OFFSET,i,&(m._mmu_repl_state_tbl),1)

/*******************************************************************************
 * End of 'MMU_REPL_STATE_TBLm'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_BANK_THD
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RL_BANK_THD.
 */
#define READ_MMU_RL_BANK_THDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_BANK_THDr_BLKACC,3,0,0,MMU_RL_BANK_THDr_OFFSET,0,(r._mmu_rl_bank_thd),1)
#define WRITE_MMU_RL_BANK_THDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_BANK_THDr_BLKACC,3,0,0,MMU_RL_BANK_THDr_OFFSET,0,&(r._mmu_rl_bank_thd),1)

/*******************************************************************************
 * End of 'MMU_RL_BANK_THDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_BQFF_EMPTY_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_BQFF_EMPTY_STATUS.
 */
#define READ_MMU_RL_BQFF_EMPTY_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_BQFF_EMPTY_STATUSr_BLKACC,3,0,p,MMU_RL_BQFF_EMPTY_STATUSr_OFFSET,0,(r._mmu_rl_bqff_empty_status),2)
#define WRITE_MMU_RL_BQFF_EMPTY_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_BQFF_EMPTY_STATUSr_BLKACC,3,0,p,MMU_RL_BQFF_EMPTY_STATUSr_OFFSET,0,&(r._mmu_rl_bqff_empty_status),2)

/*******************************************************************************
 * End of 'MMU_RL_BQFF_EMPTY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_BQFF_FULL_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_BQFF_FULL_STATUS.
 */
#define READ_MMU_RL_BQFF_FULL_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_BQFF_FULL_STATUSr_BLKACC,3,0,p,MMU_RL_BQFF_FULL_STATUSr_OFFSET,0,(r._mmu_rl_bqff_full_status),2)
#define WRITE_MMU_RL_BQFF_FULL_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_BQFF_FULL_STATUSr_BLKACC,3,0,p,MMU_RL_BQFF_FULL_STATUSr_OFFSET,0,&(r._mmu_rl_bqff_full_status),2)

/*******************************************************************************
 * End of 'MMU_RL_BQFF_FULL_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_BQFF_OVRF_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_BQFF_OVRF_STATUS.
 */
#define READ_MMU_RL_BQFF_OVRF_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_BQFF_OVRF_STATUSr_BLKACC,3,0,p,MMU_RL_BQFF_OVRF_STATUSr_OFFSET,0,(r._mmu_rl_bqff_ovrf_status),2)
#define WRITE_MMU_RL_BQFF_OVRF_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_BQFF_OVRF_STATUSr_BLKACC,3,0,p,MMU_RL_BQFF_OVRF_STATUSr_OFFSET,0,&(r._mmu_rl_bqff_ovrf_status),2)

/*******************************************************************************
 * End of 'MMU_RL_BQFF_OVRF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_BQFF_UNDF_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_BQFF_UNDF_STATUS.
 */
#define READ_MMU_RL_BQFF_UNDF_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_BQFF_UNDF_STATUSr_BLKACC,3,0,p,MMU_RL_BQFF_UNDF_STATUSr_OFFSET,0,(r._mmu_rl_bqff_undf_status),2)
#define WRITE_MMU_RL_BQFF_UNDF_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_BQFF_UNDF_STATUSr_BLKACC,3,0,p,MMU_RL_BQFF_UNDF_STATUSr_OFFSET,0,&(r._mmu_rl_bqff_undf_status),2)

/*******************************************************************************
 * End of 'MMU_RL_BQFF_UNDF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RL_CMIC_RESERVED.
 */
#define READ_MMU_RL_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_RL_CMIC_RESERVEDr_OFFSET,0,(r._mmu_rl_cmic_reserved),1)
#define WRITE_MMU_RL_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_RL_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_rl_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_RL_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RL_CONFIG.
 */
#define READ_MMU_RL_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_CONFIGr_BLKACC,3,0,0,MMU_RL_CONFIGr_OFFSET,0,(r._mmu_rl_config),1)
#define WRITE_MMU_RL_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_CONFIGr_BLKACC,3,0,0,MMU_RL_CONFIGr_OFFSET,0,&(r._mmu_rl_config),1)

/*******************************************************************************
 * End of 'MMU_RL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_CPU_INT_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RL_CPU_INT_EN.
 */
#define READ_MMU_RL_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_CPU_INT_ENr_BLKACC,3,0,0,MMU_RL_CPU_INT_ENr_OFFSET,0,(r._mmu_rl_cpu_int_en),1)
#define WRITE_MMU_RL_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_CPU_INT_ENr_BLKACC,3,0,0,MMU_RL_CPU_INT_ENr_OFFSET,0,&(r._mmu_rl_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_RL_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_CPU_INT_SET
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RL_CPU_INT_SET.
 */
#define READ_MMU_RL_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_CPU_INT_SETr_BLKACC,3,0,p,MMU_RL_CPU_INT_SETr_OFFSET,0,(r._mmu_rl_cpu_int_set),1)
#define WRITE_MMU_RL_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_CPU_INT_SETr_BLKACC,3,0,p,MMU_RL_CPU_INT_SETr_OFFSET,0,&(r._mmu_rl_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_RL_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_CPU_INT_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RL_CPU_INT_STAT.
 */
#define READ_MMU_RL_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_CPU_INT_STATr_BLKACC,3,0,p,MMU_RL_CPU_INT_STATr_OFFSET,0,(r._mmu_rl_cpu_int_stat),1)
#define WRITE_MMU_RL_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_CPU_INT_STATr_BLKACC,3,0,p,MMU_RL_CPU_INT_STATr_OFFSET,0,&(r._mmu_rl_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_RL_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_CT_TILE_ACTIVITY2
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_CT_TILE_ACTIVITY2.
 */
#define READ_MMU_RL_CT_TILE_ACTIVITY2r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_CT_TILE_ACTIVITY2r_BLKACC,3,0,0,MMU_RL_CT_TILE_ACTIVITY2r_OFFSET,0,(r._mmu_rl_ct_tile_activity2),2)
#define WRITE_MMU_RL_CT_TILE_ACTIVITY2r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_CT_TILE_ACTIVITY2r_BLKACC,3,0,0,MMU_RL_CT_TILE_ACTIVITY2r_OFFSET,0,&(r._mmu_rl_ct_tile_activity2),2)

/*******************************************************************************
 * End of 'MMU_RL_CT_TILE_ACTIVITY2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_CT_TILE_ACTIVITY
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_CT_TILE_ACTIVITY.
 */
#define READ_MMU_RL_CT_TILE_ACTIVITYr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_CT_TILE_ACTIVITYr_BLKACC,3,0,0,MMU_RL_CT_TILE_ACTIVITYr_OFFSET,0,(r._mmu_rl_ct_tile_activity),2)
#define WRITE_MMU_RL_CT_TILE_ACTIVITYr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_CT_TILE_ACTIVITYr_BLKACC,3,0,0,MMU_RL_CT_TILE_ACTIVITYr_OFFSET,0,&(r._mmu_rl_ct_tile_activity),2)

/*******************************************************************************
 * End of 'MMU_RL_CT_TILE_ACTIVITYr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_DEBUG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RL_DEBUG.
 */
#define READ_MMU_RL_DEBUGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_DEBUGr_BLKACC,3,0,0,MMU_RL_DEBUGr_OFFSET,0,(r._mmu_rl_debug),1)
#define WRITE_MMU_RL_DEBUGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_DEBUGr_BLKACC,3,0,0,MMU_RL_DEBUGr_OFFSET,0,&(r._mmu_rl_debug),1)

/*******************************************************************************
 * End of 'MMU_RL_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_DEBUG_CFG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RL_DEBUG_CFG.
 */
#define READ_MMU_RL_DEBUG_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_DEBUG_CFGr_BLKACC,3,0,0,MMU_RL_DEBUG_CFGr_OFFSET,0,(r._mmu_rl_debug_cfg),1)
#define WRITE_MMU_RL_DEBUG_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_DEBUG_CFGr_BLKACC,3,0,0,MMU_RL_DEBUG_CFGr_OFFSET,0,&(r._mmu_rl_debug_cfg),1)

/*******************************************************************************
 * End of 'MMU_RL_DEBUG_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_DEBUG_CNT_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_DEBUG_CNT_CONFIG.
 */
#define READ_MMU_RL_DEBUG_CNT_CONFIGr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_DEBUG_CNT_CONFIGr_BLKACC,3,0,p,MMU_RL_DEBUG_CNT_CONFIGr_OFFSET,i,(r._mmu_rl_debug_cnt_config),2)
#define WRITE_MMU_RL_DEBUG_CNT_CONFIGr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_DEBUG_CNT_CONFIGr_BLKACC,3,0,p,MMU_RL_DEBUG_CNT_CONFIGr_OFFSET,i,&(r._mmu_rl_debug_cnt_config),2)

/*******************************************************************************
 * End of 'MMU_RL_DEBUG_CNT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_DEBUG_PKT_CNT
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_DEBUG_PKT_CNT.
 */
#define READ_MMU_RL_DEBUG_PKT_CNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_DEBUG_PKT_CNTr_BLKACC,3,0,p,MMU_RL_DEBUG_PKT_CNTr_OFFSET,i,(r._mmu_rl_debug_pkt_cnt),2)
#define WRITE_MMU_RL_DEBUG_PKT_CNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_DEBUG_PKT_CNTr_BLKACC,3,0,p,MMU_RL_DEBUG_PKT_CNTr_OFFSET,i,&(r._mmu_rl_debug_pkt_cnt),2)

/*******************************************************************************
 * End of 'MMU_RL_DEBUG_PKT_CNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_EBFF_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RL_EBFF_CONFIG.
 */
#define READ_MMU_RL_EBFF_CONFIGr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_EBFF_CONFIGr_BLKACC,3,0,0,MMU_RL_EBFF_CONFIGr_OFFSET,i,(r._mmu_rl_ebff_config),1)
#define WRITE_MMU_RL_EBFF_CONFIGr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_EBFF_CONFIGr_BLKACC,3,0,0,MMU_RL_EBFF_CONFIGr_OFFSET,i,&(r._mmu_rl_ebff_config),1)

/*******************************************************************************
 * End of 'MMU_RL_EBFF_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_EBFF_DEBUG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RL_EBFF_DEBUG.
 */
#define READ_MMU_RL_EBFF_DEBUGr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_EBFF_DEBUGr_BLKACC,3,0,p,MMU_RL_EBFF_DEBUGr_OFFSET,i,(r._mmu_rl_ebff_debug),1)
#define WRITE_MMU_RL_EBFF_DEBUGr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_EBFF_DEBUGr_BLKACC,3,0,p,MMU_RL_EBFF_DEBUGr_OFFSET,i,&(r._mmu_rl_ebff_debug),1)

/*******************************************************************************
 * End of 'MMU_RL_EBFF_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_EBFF_DEBUG_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_EBFF_DEBUG_STATUS.
 */
#define READ_MMU_RL_EBFF_DEBUG_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_EBFF_DEBUG_STATUSr_BLKACC,3,0,p,MMU_RL_EBFF_DEBUG_STATUSr_OFFSET,0,(r._mmu_rl_ebff_debug_status),2)
#define WRITE_MMU_RL_EBFF_DEBUG_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_EBFF_DEBUG_STATUSr_BLKACC,3,0,p,MMU_RL_EBFF_DEBUG_STATUSr_OFFSET,0,&(r._mmu_rl_ebff_debug_status),2)

/*******************************************************************************
 * End of 'MMU_RL_EBFF_DEBUG_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_EBFF_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_EBFF_STATUS.
 */
#define READ_MMU_RL_EBFF_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_EBFF_STATUSr_BLKACC,3,0,p,MMU_RL_EBFF_STATUSr_OFFSET,0,(r._mmu_rl_ebff_status),2)
#define WRITE_MMU_RL_EBFF_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_EBFF_STATUSr_BLKACC,3,0,p,MMU_RL_EBFF_STATUSr_OFFSET,0,&(r._mmu_rl_ebff_status),2)

/*******************************************************************************
 * End of 'MMU_RL_EBFF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_EBP_OVRD
 * BLOCKS:   MMU_ITM
 * SIZE:     6
 */
/*
 * These macros can be used to access MMU_RL_EBP_OVRD.
 */
#define READ_MMU_RL_EBP_OVRDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_EBP_OVRDr_BLKACC,3,0,0,MMU_RL_EBP_OVRDr_OFFSET,0,(r._mmu_rl_ebp_ovrd),1)
#define WRITE_MMU_RL_EBP_OVRDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_EBP_OVRDr_BLKACC,3,0,0,MMU_RL_EBP_OVRDr_OFFSET,0,&(r._mmu_rl_ebp_ovrd),1)

/*******************************************************************************
 * End of 'MMU_RL_EBP_OVRDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RL_ENABLE_ECCP_MEM.
 */
#define READ_MMU_RL_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_RL_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_rl_enable_eccp_mem),1)
#define WRITE_MMU_RL_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_RL_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_rl_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_RL_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_EN_COR_ERR_RPT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RL_EN_COR_ERR_RPT.
 */
#define READ_MMU_RL_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_RL_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_rl_en_cor_err_rpt),1)
#define WRITE_MMU_RL_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_RL_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_rl_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_RL_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK0
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK0.
 */
#define READ_MMU_RL_FBANK0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK0m_BLKACC,3,0,p,MMU_RL_FBANK0m_OFFSET,i,(m._mmu_rl_fbank0),5)
#define WRITE_MMU_RL_FBANK0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK0m_BLKACC,3,0,p,MMU_RL_FBANK0m_OFFSET,i,&(m._mmu_rl_fbank0),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK10
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK10.
 */
#define READ_MMU_RL_FBANK10m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK10m_BLKACC,3,0,p,MMU_RL_FBANK10m_OFFSET,i,(m._mmu_rl_fbank10),5)
#define WRITE_MMU_RL_FBANK10m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK10m_BLKACC,3,0,p,MMU_RL_FBANK10m_OFFSET,i,&(m._mmu_rl_fbank10),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK10m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK11
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK11.
 */
#define READ_MMU_RL_FBANK11m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK11m_BLKACC,3,0,p,MMU_RL_FBANK11m_OFFSET,i,(m._mmu_rl_fbank11),5)
#define WRITE_MMU_RL_FBANK11m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK11m_BLKACC,3,0,p,MMU_RL_FBANK11m_OFFSET,i,&(m._mmu_rl_fbank11),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK11m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK12
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK12.
 */
#define READ_MMU_RL_FBANK12m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK12m_BLKACC,3,0,p,MMU_RL_FBANK12m_OFFSET,i,(m._mmu_rl_fbank12),5)
#define WRITE_MMU_RL_FBANK12m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK12m_BLKACC,3,0,p,MMU_RL_FBANK12m_OFFSET,i,&(m._mmu_rl_fbank12),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK12m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK13
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK13.
 */
#define READ_MMU_RL_FBANK13m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK13m_BLKACC,3,0,p,MMU_RL_FBANK13m_OFFSET,i,(m._mmu_rl_fbank13),5)
#define WRITE_MMU_RL_FBANK13m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK13m_BLKACC,3,0,p,MMU_RL_FBANK13m_OFFSET,i,&(m._mmu_rl_fbank13),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK13m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK14
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK14.
 */
#define READ_MMU_RL_FBANK14m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK14m_BLKACC,3,0,p,MMU_RL_FBANK14m_OFFSET,i,(m._mmu_rl_fbank14),5)
#define WRITE_MMU_RL_FBANK14m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK14m_BLKACC,3,0,p,MMU_RL_FBANK14m_OFFSET,i,&(m._mmu_rl_fbank14),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK14m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK15
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK15.
 */
#define READ_MMU_RL_FBANK15m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK15m_BLKACC,3,0,p,MMU_RL_FBANK15m_OFFSET,i,(m._mmu_rl_fbank15),5)
#define WRITE_MMU_RL_FBANK15m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK15m_BLKACC,3,0,p,MMU_RL_FBANK15m_OFFSET,i,&(m._mmu_rl_fbank15),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK15m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK16
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK16.
 */
#define READ_MMU_RL_FBANK16m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK16m_BLKACC,3,0,p,MMU_RL_FBANK16m_OFFSET,i,(m._mmu_rl_fbank16),5)
#define WRITE_MMU_RL_FBANK16m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK16m_BLKACC,3,0,p,MMU_RL_FBANK16m_OFFSET,i,&(m._mmu_rl_fbank16),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK16m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK17
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK17.
 */
#define READ_MMU_RL_FBANK17m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK17m_BLKACC,3,0,p,MMU_RL_FBANK17m_OFFSET,i,(m._mmu_rl_fbank17),5)
#define WRITE_MMU_RL_FBANK17m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK17m_BLKACC,3,0,p,MMU_RL_FBANK17m_OFFSET,i,&(m._mmu_rl_fbank17),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK17m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK18
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK18.
 */
#define READ_MMU_RL_FBANK18m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK18m_BLKACC,3,0,p,MMU_RL_FBANK18m_OFFSET,i,(m._mmu_rl_fbank18),5)
#define WRITE_MMU_RL_FBANK18m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK18m_BLKACC,3,0,p,MMU_RL_FBANK18m_OFFSET,i,&(m._mmu_rl_fbank18),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK18m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK19
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK19.
 */
#define READ_MMU_RL_FBANK19m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK19m_BLKACC,3,0,p,MMU_RL_FBANK19m_OFFSET,i,(m._mmu_rl_fbank19),5)
#define WRITE_MMU_RL_FBANK19m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK19m_BLKACC,3,0,p,MMU_RL_FBANK19m_OFFSET,i,&(m._mmu_rl_fbank19),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK19m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK1
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK1.
 */
#define READ_MMU_RL_FBANK1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK1m_BLKACC,3,0,p,MMU_RL_FBANK1m_OFFSET,i,(m._mmu_rl_fbank1),5)
#define WRITE_MMU_RL_FBANK1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK1m_BLKACC,3,0,p,MMU_RL_FBANK1m_OFFSET,i,&(m._mmu_rl_fbank1),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK20
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK20.
 */
#define READ_MMU_RL_FBANK20m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK20m_BLKACC,3,0,p,MMU_RL_FBANK20m_OFFSET,i,(m._mmu_rl_fbank20),5)
#define WRITE_MMU_RL_FBANK20m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK20m_BLKACC,3,0,p,MMU_RL_FBANK20m_OFFSET,i,&(m._mmu_rl_fbank20),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK20m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK21
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK21.
 */
#define READ_MMU_RL_FBANK21m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK21m_BLKACC,3,0,p,MMU_RL_FBANK21m_OFFSET,i,(m._mmu_rl_fbank21),5)
#define WRITE_MMU_RL_FBANK21m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK21m_BLKACC,3,0,p,MMU_RL_FBANK21m_OFFSET,i,&(m._mmu_rl_fbank21),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK21m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK22
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK22.
 */
#define READ_MMU_RL_FBANK22m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK22m_BLKACC,3,0,p,MMU_RL_FBANK22m_OFFSET,i,(m._mmu_rl_fbank22),5)
#define WRITE_MMU_RL_FBANK22m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK22m_BLKACC,3,0,p,MMU_RL_FBANK22m_OFFSET,i,&(m._mmu_rl_fbank22),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK22m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK23
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK23.
 */
#define READ_MMU_RL_FBANK23m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK23m_BLKACC,3,0,p,MMU_RL_FBANK23m_OFFSET,i,(m._mmu_rl_fbank23),5)
#define WRITE_MMU_RL_FBANK23m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK23m_BLKACC,3,0,p,MMU_RL_FBANK23m_OFFSET,i,&(m._mmu_rl_fbank23),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK23m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK24
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK24.
 */
#define READ_MMU_RL_FBANK24m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK24m_BLKACC,3,0,p,MMU_RL_FBANK24m_OFFSET,i,(m._mmu_rl_fbank24),5)
#define WRITE_MMU_RL_FBANK24m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK24m_BLKACC,3,0,p,MMU_RL_FBANK24m_OFFSET,i,&(m._mmu_rl_fbank24),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK24m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK25
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK25.
 */
#define READ_MMU_RL_FBANK25m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK25m_BLKACC,3,0,p,MMU_RL_FBANK25m_OFFSET,i,(m._mmu_rl_fbank25),5)
#define WRITE_MMU_RL_FBANK25m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK25m_BLKACC,3,0,p,MMU_RL_FBANK25m_OFFSET,i,&(m._mmu_rl_fbank25),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK25m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK26
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK26.
 */
#define READ_MMU_RL_FBANK26m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK26m_BLKACC,3,0,p,MMU_RL_FBANK26m_OFFSET,i,(m._mmu_rl_fbank26),5)
#define WRITE_MMU_RL_FBANK26m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK26m_BLKACC,3,0,p,MMU_RL_FBANK26m_OFFSET,i,&(m._mmu_rl_fbank26),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK26m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK27
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK27.
 */
#define READ_MMU_RL_FBANK27m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK27m_BLKACC,3,0,p,MMU_RL_FBANK27m_OFFSET,i,(m._mmu_rl_fbank27),5)
#define WRITE_MMU_RL_FBANK27m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK27m_BLKACC,3,0,p,MMU_RL_FBANK27m_OFFSET,i,&(m._mmu_rl_fbank27),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK27m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK28
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK28.
 */
#define READ_MMU_RL_FBANK28m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK28m_BLKACC,3,0,p,MMU_RL_FBANK28m_OFFSET,i,(m._mmu_rl_fbank28),5)
#define WRITE_MMU_RL_FBANK28m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK28m_BLKACC,3,0,p,MMU_RL_FBANK28m_OFFSET,i,&(m._mmu_rl_fbank28),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK28m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK29
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK29.
 */
#define READ_MMU_RL_FBANK29m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK29m_BLKACC,3,0,p,MMU_RL_FBANK29m_OFFSET,i,(m._mmu_rl_fbank29),5)
#define WRITE_MMU_RL_FBANK29m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK29m_BLKACC,3,0,p,MMU_RL_FBANK29m_OFFSET,i,&(m._mmu_rl_fbank29),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK29m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK2
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK2.
 */
#define READ_MMU_RL_FBANK2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK2m_BLKACC,3,0,p,MMU_RL_FBANK2m_OFFSET,i,(m._mmu_rl_fbank2),5)
#define WRITE_MMU_RL_FBANK2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK2m_BLKACC,3,0,p,MMU_RL_FBANK2m_OFFSET,i,&(m._mmu_rl_fbank2),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK30
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK30.
 */
#define READ_MMU_RL_FBANK30m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK30m_BLKACC,3,0,p,MMU_RL_FBANK30m_OFFSET,i,(m._mmu_rl_fbank30),5)
#define WRITE_MMU_RL_FBANK30m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK30m_BLKACC,3,0,p,MMU_RL_FBANK30m_OFFSET,i,&(m._mmu_rl_fbank30),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK30m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK31
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK31.
 */
#define READ_MMU_RL_FBANK31m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK31m_BLKACC,3,0,p,MMU_RL_FBANK31m_OFFSET,i,(m._mmu_rl_fbank31),5)
#define WRITE_MMU_RL_FBANK31m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK31m_BLKACC,3,0,p,MMU_RL_FBANK31m_OFFSET,i,&(m._mmu_rl_fbank31),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK31m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK3
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK3.
 */
#define READ_MMU_RL_FBANK3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK3m_BLKACC,3,0,p,MMU_RL_FBANK3m_OFFSET,i,(m._mmu_rl_fbank3),5)
#define WRITE_MMU_RL_FBANK3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK3m_BLKACC,3,0,p,MMU_RL_FBANK3m_OFFSET,i,&(m._mmu_rl_fbank3),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK4
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK4.
 */
#define READ_MMU_RL_FBANK4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK4m_BLKACC,3,0,p,MMU_RL_FBANK4m_OFFSET,i,(m._mmu_rl_fbank4),5)
#define WRITE_MMU_RL_FBANK4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK4m_BLKACC,3,0,p,MMU_RL_FBANK4m_OFFSET,i,&(m._mmu_rl_fbank4),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK5
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK5.
 */
#define READ_MMU_RL_FBANK5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK5m_BLKACC,3,0,p,MMU_RL_FBANK5m_OFFSET,i,(m._mmu_rl_fbank5),5)
#define WRITE_MMU_RL_FBANK5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK5m_BLKACC,3,0,p,MMU_RL_FBANK5m_OFFSET,i,&(m._mmu_rl_fbank5),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK6
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK6.
 */
#define READ_MMU_RL_FBANK6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK6m_BLKACC,3,0,p,MMU_RL_FBANK6m_OFFSET,i,(m._mmu_rl_fbank6),5)
#define WRITE_MMU_RL_FBANK6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK6m_BLKACC,3,0,p,MMU_RL_FBANK6m_OFFSET,i,&(m._mmu_rl_fbank6),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK7
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK7.
 */
#define READ_MMU_RL_FBANK7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK7m_BLKACC,3,0,p,MMU_RL_FBANK7m_OFFSET,i,(m._mmu_rl_fbank7),5)
#define WRITE_MMU_RL_FBANK7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK7m_BLKACC,3,0,p,MMU_RL_FBANK7m_OFFSET,i,&(m._mmu_rl_fbank7),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK8
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK8.
 */
#define READ_MMU_RL_FBANK8m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK8m_BLKACC,3,0,p,MMU_RL_FBANK8m_OFFSET,i,(m._mmu_rl_fbank8),5)
#define WRITE_MMU_RL_FBANK8m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK8m_BLKACC,3,0,p,MMU_RL_FBANK8m_OFFSET,i,&(m._mmu_rl_fbank8),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK8m'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_FBANK9
 * BLOCKS:   MMU_ITM
 * SIZE:     156
 */
/*
 * These macros can be used to access MMU_RL_FBANK9.
 */
#define READ_MMU_RL_FBANK9m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_FBANK9m_BLKACC,3,0,p,MMU_RL_FBANK9m_OFFSET,i,(m._mmu_rl_fbank9),5)
#define WRITE_MMU_RL_FBANK9m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_FBANK9m_BLKACC,3,0,p,MMU_RL_FBANK9m_OFFSET,i,&(m._mmu_rl_fbank9),5)

/*******************************************************************************
 * End of 'MMU_RL_FBANK9m'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_RQEFF_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RL_RQEFF_STATUS.
 */
#define READ_MMU_RL_RQEFF_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_RQEFF_STATUSr_BLKACC,3,0,p,MMU_RL_RQEFF_STATUSr_OFFSET,0,(r._mmu_rl_rqeff_status),1)
#define WRITE_MMU_RL_RQEFF_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_RQEFF_STATUSr_BLKACC,3,0,p,MMU_RL_RQEFF_STATUSr_OFFSET,0,&(r._mmu_rl_rqeff_status),1)

/*******************************************************************************
 * End of 'MMU_RL_RQEFF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_RQE_FIFO_DEBUG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RL_RQE_FIFO_DEBUG.
 */
#define READ_MMU_RL_RQE_FIFO_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_RQE_FIFO_DEBUGr_BLKACC,3,0,p,MMU_RL_RQE_FIFO_DEBUGr_OFFSET,0,(r._mmu_rl_rqe_fifo_debug),1)
#define WRITE_MMU_RL_RQE_FIFO_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_RQE_FIFO_DEBUGr_BLKACC,3,0,p,MMU_RL_RQE_FIFO_DEBUGr_OFFSET,0,&(r._mmu_rl_rqe_fifo_debug),1)

/*******************************************************************************
 * End of 'MMU_RL_RQE_FIFO_DEBUGr'
 */




/*******************************************************************************
 * MEMORY:  MMU_RL_RQE_FIFO_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     520
 */
/*
 * These macros can be used to access MMU_RL_RQE_FIFO_MEM.
 */
#define READ_MMU_RL_RQE_FIFO_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RL_RQE_FIFO_MEMm_BLKACC,3,0,p,MMU_RL_RQE_FIFO_MEMm_OFFSET,i,(m._mmu_rl_rqe_fifo_mem),17)
#define WRITE_MMU_RL_RQE_FIFO_MEMm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RL_RQE_FIFO_MEMm_BLKACC,3,0,p,MMU_RL_RQE_FIFO_MEMm_OFFSET,i,&(m._mmu_rl_rqe_fifo_mem),17)

/*******************************************************************************
 * End of 'MMU_RL_RQE_FIFO_MEMm'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_TMBUS.
 */
#define READ_MMU_RL_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_TMBUSr_BLKACC,3,0,0,MMU_RL_TMBUSr_OFFSET,0,(r._mmu_rl_tmbus),2)
#define WRITE_MMU_RL_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_TMBUSr_BLKACC,3,0,0,MMU_RL_TMBUSr_OFFSET,0,&(r._mmu_rl_tmbus),2)

/*******************************************************************************
 * End of 'MMU_RL_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_WBFF_EMPTY_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_WBFF_EMPTY_STATUS.
 */
#define READ_MMU_RL_WBFF_EMPTY_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_WBFF_EMPTY_STATUSr_BLKACC,3,0,p,MMU_RL_WBFF_EMPTY_STATUSr_OFFSET,0,(r._mmu_rl_wbff_empty_status),2)
#define WRITE_MMU_RL_WBFF_EMPTY_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_WBFF_EMPTY_STATUSr_BLKACC,3,0,p,MMU_RL_WBFF_EMPTY_STATUSr_OFFSET,0,&(r._mmu_rl_wbff_empty_status),2)

/*******************************************************************************
 * End of 'MMU_RL_WBFF_EMPTY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_WBFF_FULL_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_WBFF_FULL_STATUS.
 */
#define READ_MMU_RL_WBFF_FULL_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_WBFF_FULL_STATUSr_BLKACC,3,0,p,MMU_RL_WBFF_FULL_STATUSr_OFFSET,0,(r._mmu_rl_wbff_full_status),2)
#define WRITE_MMU_RL_WBFF_FULL_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_WBFF_FULL_STATUSr_BLKACC,3,0,p,MMU_RL_WBFF_FULL_STATUSr_OFFSET,0,&(r._mmu_rl_wbff_full_status),2)

/*******************************************************************************
 * End of 'MMU_RL_WBFF_FULL_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_WBFF_OVRF_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_WBFF_OVRF_STATUS.
 */
#define READ_MMU_RL_WBFF_OVRF_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_WBFF_OVRF_STATUSr_BLKACC,3,0,p,MMU_RL_WBFF_OVRF_STATUSr_OFFSET,0,(r._mmu_rl_wbff_ovrf_status),2)
#define WRITE_MMU_RL_WBFF_OVRF_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_WBFF_OVRF_STATUSr_BLKACC,3,0,p,MMU_RL_WBFF_OVRF_STATUSr_OFFSET,0,&(r._mmu_rl_wbff_ovrf_status),2)

/*******************************************************************************
 * End of 'MMU_RL_WBFF_OVRF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RL_WBFF_UNDF_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RL_WBFF_UNDF_STATUS.
 */
#define READ_MMU_RL_WBFF_UNDF_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RL_WBFF_UNDF_STATUSr_BLKACC,3,0,p,MMU_RL_WBFF_UNDF_STATUSr_OFFSET,0,(r._mmu_rl_wbff_undf_status),2)
#define WRITE_MMU_RL_WBFF_UNDF_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RL_WBFF_UNDF_STATUSr_BLKACC,3,0,p,MMU_RL_WBFF_UNDF_STATUSr_OFFSET,0,&(r._mmu_rl_wbff_undf_status),2)

/*******************************************************************************
 * End of 'MMU_RL_WBFF_UNDF_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_RQE_CELL_FREE_LIST
 * BLOCKS:   MMU_ITM
 * SIZE:     22
 */
/*
 * These macros can be used to access MMU_RQE_CELL_FREE_LIST.
 */
#define READ_MMU_RQE_CELL_FREE_LISTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RQE_CELL_FREE_LISTm_BLKACC,3,0,p,MMU_RQE_CELL_FREE_LISTm_OFFSET,i,(m._mmu_rqe_cell_free_list),1)
#define WRITE_MMU_RQE_CELL_FREE_LISTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RQE_CELL_FREE_LISTm_BLKACC,3,0,p,MMU_RQE_CELL_FREE_LISTm_OFFSET,i,&(m._mmu_rqe_cell_free_list),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_FREE_LISTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_RQE_CELL_LINK_LIST
 * BLOCKS:   MMU_ITM
 * SIZE:     15
 */
/*
 * These macros can be used to access MMU_RQE_CELL_LINK_LIST.
 */
#define READ_MMU_RQE_CELL_LINK_LISTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RQE_CELL_LINK_LISTm_BLKACC,3,0,p,MMU_RQE_CELL_LINK_LISTm_OFFSET,i,(m._mmu_rqe_cell_link_list),1)
#define WRITE_MMU_RQE_CELL_LINK_LISTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RQE_CELL_LINK_LISTm_BLKACC,3,0,p,MMU_RQE_CELL_LINK_LISTm_OFFSET,i,&(m._mmu_rqe_cell_link_list),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_LINK_LISTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_RQE_CELL_QUEUE
 * BLOCKS:   MMU_ITM
 * SIZE:     193
 */
/*
 * These macros can be used to access MMU_RQE_CELL_QUEUE.
 */
#define READ_MMU_RQE_CELL_QUEUEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RQE_CELL_QUEUEm_BLKACC,3,0,p,MMU_RQE_CELL_QUEUEm_OFFSET,i,(m._mmu_rqe_cell_queue),7)
#define WRITE_MMU_RQE_CELL_QUEUEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RQE_CELL_QUEUEm_BLKACC,3,0,p,MMU_RQE_CELL_QUEUEm_OFFSET,i,&(m._mmu_rqe_cell_queue),7)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_QUEUEm'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_CELL_QUEUE_HEADA
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_CELL_QUEUE_HEADA.
 */
#define READ_MMU_RQE_CELL_QUEUE_HEADAr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_CELL_QUEUE_HEADAr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_HEADAr_OFFSET,i,(r._mmu_rqe_cell_queue_heada),1)
#define WRITE_MMU_RQE_CELL_QUEUE_HEADAr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_CELL_QUEUE_HEADAr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_HEADAr_OFFSET,i,&(r._mmu_rqe_cell_queue_heada),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_QUEUE_HEADAr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_CELL_QUEUE_HEADB
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_CELL_QUEUE_HEADB.
 */
#define READ_MMU_RQE_CELL_QUEUE_HEADBr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_CELL_QUEUE_HEADBr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_HEADBr_OFFSET,i,(r._mmu_rqe_cell_queue_headb),1)
#define WRITE_MMU_RQE_CELL_QUEUE_HEADBr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_CELL_QUEUE_HEADBr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_HEADBr_OFFSET,i,&(r._mmu_rqe_cell_queue_headb),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_QUEUE_HEADBr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_CELL_QUEUE_HEADC
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_CELL_QUEUE_HEADC.
 */
#define READ_MMU_RQE_CELL_QUEUE_HEADCr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_CELL_QUEUE_HEADCr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_HEADCr_OFFSET,i,(r._mmu_rqe_cell_queue_headc),1)
#define WRITE_MMU_RQE_CELL_QUEUE_HEADCr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_CELL_QUEUE_HEADCr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_HEADCr_OFFSET,i,&(r._mmu_rqe_cell_queue_headc),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_QUEUE_HEADCr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_CELL_QUEUE_HEADD
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_CELL_QUEUE_HEADD.
 */
#define READ_MMU_RQE_CELL_QUEUE_HEADDr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_CELL_QUEUE_HEADDr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_HEADDr_OFFSET,i,(r._mmu_rqe_cell_queue_headd),1)
#define WRITE_MMU_RQE_CELL_QUEUE_HEADDr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_CELL_QUEUE_HEADDr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_HEADDr_OFFSET,i,&(r._mmu_rqe_cell_queue_headd),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_QUEUE_HEADDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_CELL_QUEUE_HEADE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_CELL_QUEUE_HEADE.
 */
#define READ_MMU_RQE_CELL_QUEUE_HEADEr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_CELL_QUEUE_HEADEr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_HEADEr_OFFSET,i,(r._mmu_rqe_cell_queue_heade),1)
#define WRITE_MMU_RQE_CELL_QUEUE_HEADEr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_CELL_QUEUE_HEADEr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_HEADEr_OFFSET,i,&(r._mmu_rqe_cell_queue_heade),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_QUEUE_HEADEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_CELL_QUEUE_HEAD_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_CELL_QUEUE_HEAD_STAT.
 */
#define READ_MMU_RQE_CELL_QUEUE_HEAD_STATr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_CELL_QUEUE_HEAD_STATr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_HEAD_STATr_OFFSET,i,(r._mmu_rqe_cell_queue_head_stat),1)
#define WRITE_MMU_RQE_CELL_QUEUE_HEAD_STATr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_CELL_QUEUE_HEAD_STATr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_HEAD_STATr_OFFSET,i,&(r._mmu_rqe_cell_queue_head_stat),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_QUEUE_HEAD_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_CELL_QUEUE_LEVEL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_CELL_QUEUE_LEVEL.
 */
#define READ_MMU_RQE_CELL_QUEUE_LEVELr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_CELL_QUEUE_LEVELr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_LEVELr_OFFSET,0,(r._mmu_rqe_cell_queue_level),1)
#define WRITE_MMU_RQE_CELL_QUEUE_LEVELr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_CELL_QUEUE_LEVELr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_LEVELr_OFFSET,0,&(r._mmu_rqe_cell_queue_level),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_QUEUE_LEVELr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_CELL_QUEUE_TAILA
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_CELL_QUEUE_TAILA.
 */
#define READ_MMU_RQE_CELL_QUEUE_TAILAr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_CELL_QUEUE_TAILAr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_TAILAr_OFFSET,i,(r._mmu_rqe_cell_queue_taila),1)
#define WRITE_MMU_RQE_CELL_QUEUE_TAILAr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_CELL_QUEUE_TAILAr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_TAILAr_OFFSET,i,&(r._mmu_rqe_cell_queue_taila),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_QUEUE_TAILAr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_CELL_QUEUE_TAILB
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_CELL_QUEUE_TAILB.
 */
#define READ_MMU_RQE_CELL_QUEUE_TAILBr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_CELL_QUEUE_TAILBr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_TAILBr_OFFSET,i,(r._mmu_rqe_cell_queue_tailb),1)
#define WRITE_MMU_RQE_CELL_QUEUE_TAILBr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_CELL_QUEUE_TAILBr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_TAILBr_OFFSET,i,&(r._mmu_rqe_cell_queue_tailb),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_QUEUE_TAILBr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_CELL_QUEUE_TAILC
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_CELL_QUEUE_TAILC.
 */
#define READ_MMU_RQE_CELL_QUEUE_TAILCr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_CELL_QUEUE_TAILCr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_TAILCr_OFFSET,i,(r._mmu_rqe_cell_queue_tailc),1)
#define WRITE_MMU_RQE_CELL_QUEUE_TAILCr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_CELL_QUEUE_TAILCr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_TAILCr_OFFSET,i,&(r._mmu_rqe_cell_queue_tailc),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_QUEUE_TAILCr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_CELL_QUEUE_TAILD
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_CELL_QUEUE_TAILD.
 */
#define READ_MMU_RQE_CELL_QUEUE_TAILDr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_CELL_QUEUE_TAILDr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_TAILDr_OFFSET,i,(r._mmu_rqe_cell_queue_taild),1)
#define WRITE_MMU_RQE_CELL_QUEUE_TAILDr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_CELL_QUEUE_TAILDr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_TAILDr_OFFSET,i,&(r._mmu_rqe_cell_queue_taild),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_QUEUE_TAILDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_CELL_QUEUE_TAILE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_CELL_QUEUE_TAILE.
 */
#define READ_MMU_RQE_CELL_QUEUE_TAILEr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_CELL_QUEUE_TAILEr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_TAILEr_OFFSET,i,(r._mmu_rqe_cell_queue_taile),1)
#define WRITE_MMU_RQE_CELL_QUEUE_TAILEr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_CELL_QUEUE_TAILEr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_TAILEr_OFFSET,i,&(r._mmu_rqe_cell_queue_taile),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_QUEUE_TAILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_CELL_QUEUE_TAIL_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_CELL_QUEUE_TAIL_STAT.
 */
#define READ_MMU_RQE_CELL_QUEUE_TAIL_STATr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_CELL_QUEUE_TAIL_STATr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_TAIL_STATr_OFFSET,i,(r._mmu_rqe_cell_queue_tail_stat),1)
#define WRITE_MMU_RQE_CELL_QUEUE_TAIL_STATr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_CELL_QUEUE_TAIL_STATr_BLKACC,3,0,p,MMU_RQE_CELL_QUEUE_TAIL_STATr_OFFSET,i,&(r._mmu_rqe_cell_queue_tail_stat),1)

/*******************************************************************************
 * End of 'MMU_RQE_CELL_QUEUE_TAIL_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_CMIC_RESERVED.
 */
#define READ_MMU_RQE_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_RQE_CMIC_RESERVEDr_OFFSET,0,(r._mmu_rqe_cmic_reserved),1)
#define WRITE_MMU_RQE_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_RQE_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_rqe_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_RQE_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * MEMORY:  MMU_RQE_DEVICE_TO_MMU_PORT_MAPPING
 * BLOCKS:   MMU_ITM
 * SIZE:     14
 */
/*
 * These macros can be used to access MMU_RQE_DEVICE_TO_MMU_PORT_MAPPING.
 */
#define READ_MMU_RQE_DEVICE_TO_MMU_PORT_MAPPINGm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RQE_DEVICE_TO_MMU_PORT_MAPPINGm_BLKACC,3,0,0,MMU_RQE_DEVICE_TO_MMU_PORT_MAPPINGm_OFFSET,i,(m._mmu_rqe_device_to_mmu_port_mapping),1)
#define WRITE_MMU_RQE_DEVICE_TO_MMU_PORT_MAPPINGm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RQE_DEVICE_TO_MMU_PORT_MAPPINGm_BLKACC,3,0,0,MMU_RQE_DEVICE_TO_MMU_PORT_MAPPINGm_OFFSET,i,&(m._mmu_rqe_device_to_mmu_port_mapping),1)

/*******************************************************************************
 * End of 'MMU_RQE_DEVICE_TO_MMU_PORT_MAPPINGm'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_DYNAMIC_PROGRAMMING_CONTROL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_DYNAMIC_PROGRAMMING_CONTROL.
 */
#define READ_MMU_RQE_DYNAMIC_PROGRAMMING_CONTROLr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_DYNAMIC_PROGRAMMING_CONTROLr_BLKACC,3,0,0,MMU_RQE_DYNAMIC_PROGRAMMING_CONTROLr_OFFSET,0,(r._mmu_rqe_dynamic_programming_control),1)
#define WRITE_MMU_RQE_DYNAMIC_PROGRAMMING_CONTROLr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_DYNAMIC_PROGRAMMING_CONTROLr_BLKACC,3,0,0,MMU_RQE_DYNAMIC_PROGRAMMING_CONTROLr_OFFSET,0,&(r._mmu_rqe_dynamic_programming_control),1)

/*******************************************************************************
 * End of 'MMU_RQE_DYNAMIC_PROGRAMMING_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_ENABLE_ECCP_MEM.
 */
#define READ_MMU_RQE_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_RQE_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_rqe_enable_eccp_mem),1)
#define WRITE_MMU_RQE_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_RQE_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_rqe_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_RQE_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_EN_COR_ERR_RPT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_EN_COR_ERR_RPT.
 */
#define READ_MMU_RQE_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_RQE_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_rqe_en_cor_err_rpt),1)
#define WRITE_MMU_RQE_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_RQE_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_rqe_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_RQE_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_FREELIST_CONTROL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_FREELIST_CONTROL.
 */
#define READ_MMU_RQE_FREELIST_CONTROLr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_FREELIST_CONTROLr_BLKACC,3,0,p,MMU_RQE_FREELIST_CONTROLr_OFFSET,0,(r._mmu_rqe_freelist_control),1)
#define WRITE_MMU_RQE_FREELIST_CONTROLr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_FREELIST_CONTROLr_BLKACC,3,0,p,MMU_RQE_FREELIST_CONTROLr_OFFSET,0,&(r._mmu_rqe_freelist_control),1)

/*******************************************************************************
 * End of 'MMU_RQE_FREELIST_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  MMU_RQE_INFO_TABLE
 * BLOCKS:   MMU_ITM
 * SIZE:     680
 */
/*
 * These macros can be used to access MMU_RQE_INFO_TABLE.
 */
#define READ_MMU_RQE_INFO_TABLEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RQE_INFO_TABLEm_BLKACC,3,0,p,MMU_RQE_INFO_TABLEm_OFFSET,i,(m._mmu_rqe_info_table),22)
#define WRITE_MMU_RQE_INFO_TABLEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RQE_INFO_TABLEm_BLKACC,3,0,p,MMU_RQE_INFO_TABLEm_OFFSET,i,&(m._mmu_rqe_info_table),22)

/*******************************************************************************
 * End of 'MMU_RQE_INFO_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_INT_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_INT_EN.
 */
#define READ_MMU_RQE_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_INT_ENr_BLKACC,3,0,0,MMU_RQE_INT_ENr_OFFSET,0,(r._mmu_rqe_int_en),1)
#define WRITE_MMU_RQE_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_INT_ENr_BLKACC,3,0,0,MMU_RQE_INT_ENr_OFFSET,0,&(r._mmu_rqe_int_en),1)

/*******************************************************************************
 * End of 'MMU_RQE_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_INT_SET
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_INT_SET.
 */
#define READ_MMU_RQE_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_INT_SETr_BLKACC,3,0,p,MMU_RQE_INT_SETr_OFFSET,0,(r._mmu_rqe_int_set),1)
#define WRITE_MMU_RQE_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_INT_SETr_BLKACC,3,0,p,MMU_RQE_INT_SETr_OFFSET,0,&(r._mmu_rqe_int_set),1)

/*******************************************************************************
 * End of 'MMU_RQE_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_INT_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_INT_STAT.
 */
#define READ_MMU_RQE_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_INT_STATr_BLKACC,3,0,p,MMU_RQE_INT_STATr_OFFSET,0,(r._mmu_rqe_int_stat),1)
#define WRITE_MMU_RQE_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_INT_STATr_BLKACC,3,0,p,MMU_RQE_INT_STATr_OFFSET,0,&(r._mmu_rqe_int_stat),1)

/*******************************************************************************
 * End of 'MMU_RQE_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_INVALID_DST
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_INVALID_DST.
 */
#define READ_MMU_RQE_INVALID_DSTr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_INVALID_DSTr_BLKACC,3,0,p,MMU_RQE_INVALID_DSTr_OFFSET,0,(r._mmu_rqe_invalid_dst),1)
#define WRITE_MMU_RQE_INVALID_DSTr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_INVALID_DSTr_BLKACC,3,0,p,MMU_RQE_INVALID_DSTr_OFFSET,0,&(r._mmu_rqe_invalid_dst),1)

/*******************************************************************************
 * End of 'MMU_RQE_INVALID_DSTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_L3_PURGE_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_L3_PURGE_STAT.
 */
#define READ_MMU_RQE_L3_PURGE_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_L3_PURGE_STATr_BLKACC,3,0,p,MMU_RQE_L3_PURGE_STATr_OFFSET,0,(r._mmu_rqe_l3_purge_stat),1)
#define WRITE_MMU_RQE_L3_PURGE_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_L3_PURGE_STATr_BLKACC,3,0,p,MMU_RQE_L3_PURGE_STATr_OFFSET,0,&(r._mmu_rqe_l3_purge_stat),1)

/*******************************************************************************
 * End of 'MMU_RQE_L3_PURGE_STATr'
 */




/*******************************************************************************
 * MEMORY:  MMU_RQE_LAST_ACCEPT
 * BLOCKS:   MMU_ITM
 * SIZE:     95
 */
/*
 * These macros can be used to access MMU_RQE_LAST_ACCEPT.
 */
#define READ_MMU_RQE_LAST_ACCEPTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RQE_LAST_ACCEPTm_BLKACC,3,0,p,MMU_RQE_LAST_ACCEPTm_OFFSET,i,(m._mmu_rqe_last_accept),3)
#define WRITE_MMU_RQE_LAST_ACCEPTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RQE_LAST_ACCEPTm_BLKACC,3,0,p,MMU_RQE_LAST_ACCEPTm_OFFSET,i,&(m._mmu_rqe_last_accept),3)

/*******************************************************************************
 * End of 'MMU_RQE_LAST_ACCEPTm'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_EN.
 */
#define READ_MMU_RQE_MAX_SHAPER_ENr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_ENr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_ENr_OFFSET,i,(r._mmu_rqe_max_shaper_en),1)
#define WRITE_MMU_RQE_MAX_SHAPER_ENr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_ENr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_ENr_OFFSET,i,&(r._mmu_rqe_max_shaper_en),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_EN_PIPE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_EN_PIPE.
 */
#define READ_MMU_RQE_MAX_SHAPER_EN_PIPEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_EN_PIPEr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_EN_PIPEr_OFFSET,i,(r._mmu_rqe_max_shaper_en_pipe),1)
#define WRITE_MMU_RQE_MAX_SHAPER_EN_PIPEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_EN_PIPEr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_EN_PIPEr_OFFSET,i,&(r._mmu_rqe_max_shaper_en_pipe),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_EN_PIPEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_EN_PREFETCH
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_EN_PREFETCH.
 */
#define READ_MMU_RQE_MAX_SHAPER_EN_PREFETCHr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_EN_PREFETCHr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_EN_PREFETCHr_OFFSET,i,(r._mmu_rqe_max_shaper_en_prefetch),1)
#define WRITE_MMU_RQE_MAX_SHAPER_EN_PREFETCHr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_EN_PREFETCHr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_EN_PREFETCHr_OFFSET,i,&(r._mmu_rqe_max_shaper_en_prefetch),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_EN_PREFETCHr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_EN_SCC
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_EN_SCC.
 */
#define READ_MMU_RQE_MAX_SHAPER_EN_SCCr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_EN_SCCr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_EN_SCCr_OFFSET,i,(r._mmu_rqe_max_shaper_en_scc),1)
#define WRITE_MMU_RQE_MAX_SHAPER_EN_SCCr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_EN_SCCr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_EN_SCCr_OFFSET,i,&(r._mmu_rqe_max_shaper_en_scc),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_EN_SCCr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_EN_SREP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_EN_SREP.
 */
#define READ_MMU_RQE_MAX_SHAPER_EN_SREPr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_EN_SREPr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_EN_SREPr_OFFSET,i,(r._mmu_rqe_max_shaper_en_srep),1)
#define WRITE_MMU_RQE_MAX_SHAPER_EN_SREPr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_EN_SREPr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_EN_SREPr_OFFSET,i,&(r._mmu_rqe_max_shaper_en_srep),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_EN_SREPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_LIMIT_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_LIMIT_COUNT.
 */
#define READ_MMU_RQE_MAX_SHAPER_LIMIT_COUNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_LIMIT_COUNTr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_LIMIT_COUNTr_OFFSET,i,(r._mmu_rqe_max_shaper_limit_count),1)
#define WRITE_MMU_RQE_MAX_SHAPER_LIMIT_COUNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_LIMIT_COUNTr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_LIMIT_COUNTr_OFFSET,i,&(r._mmu_rqe_max_shaper_limit_count),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_LIMIT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PIPE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PIPE.
 */
#define READ_MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PIPEr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PIPEr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PIPEr_OFFSET,i,(r._mmu_rqe_max_shaper_limit_count_pipe),1)
#define WRITE_MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PIPEr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PIPEr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PIPEr_OFFSET,i,&(r._mmu_rqe_max_shaper_limit_count_pipe),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PIPEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PREFETCH
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PREFETCH.
 */
#define READ_MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PREFETCHr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PREFETCHr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PREFETCHr_OFFSET,i,(r._mmu_rqe_max_shaper_limit_count_prefetch),1)
#define WRITE_MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PREFETCHr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PREFETCHr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PREFETCHr_OFFSET,i,&(r._mmu_rqe_max_shaper_limit_count_prefetch),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_LIMIT_COUNT_PREFETCHr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SCC
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SCC.
 */
#define READ_MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SCCr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SCCr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SCCr_OFFSET,i,(r._mmu_rqe_max_shaper_limit_count_scc),1)
#define WRITE_MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SCCr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SCCr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SCCr_OFFSET,i,&(r._mmu_rqe_max_shaper_limit_count_scc),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SCCr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SREP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SREP.
 */
#define READ_MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SREPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SREPr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SREPr_OFFSET,i,(r._mmu_rqe_max_shaper_limit_count_srep),1)
#define WRITE_MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SREPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SREPr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SREPr_OFFSET,i,&(r._mmu_rqe_max_shaper_limit_count_srep),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_LIMIT_COUNT_SREPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_RATE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_RATE.
 */
#define READ_MMU_RQE_MAX_SHAPER_RATEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_RATEr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_RATEr_OFFSET,i,(r._mmu_rqe_max_shaper_rate),1)
#define WRITE_MMU_RQE_MAX_SHAPER_RATEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_RATEr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_RATEr_OFFSET,i,&(r._mmu_rqe_max_shaper_rate),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_RATEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_RATE_PIPE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_RATE_PIPE.
 */
#define READ_MMU_RQE_MAX_SHAPER_RATE_PIPEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_RATE_PIPEr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_RATE_PIPEr_OFFSET,i,(r._mmu_rqe_max_shaper_rate_pipe),1)
#define WRITE_MMU_RQE_MAX_SHAPER_RATE_PIPEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_RATE_PIPEr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_RATE_PIPEr_OFFSET,i,&(r._mmu_rqe_max_shaper_rate_pipe),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_RATE_PIPEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_RATE_PREFETCH
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_RATE_PREFETCH.
 */
#define READ_MMU_RQE_MAX_SHAPER_RATE_PREFETCHr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_RATE_PREFETCHr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_RATE_PREFETCHr_OFFSET,i,(r._mmu_rqe_max_shaper_rate_prefetch),1)
#define WRITE_MMU_RQE_MAX_SHAPER_RATE_PREFETCHr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_RATE_PREFETCHr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_RATE_PREFETCHr_OFFSET,i,&(r._mmu_rqe_max_shaper_rate_prefetch),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_RATE_PREFETCHr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_RATE_SCC
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_RATE_SCC.
 */
#define READ_MMU_RQE_MAX_SHAPER_RATE_SCCr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_RATE_SCCr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_RATE_SCCr_OFFSET,i,(r._mmu_rqe_max_shaper_rate_scc),1)
#define WRITE_MMU_RQE_MAX_SHAPER_RATE_SCCr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_RATE_SCCr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_RATE_SCCr_OFFSET,i,&(r._mmu_rqe_max_shaper_rate_scc),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_RATE_SCCr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_RATE_SREP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_RATE_SREP.
 */
#define READ_MMU_RQE_MAX_SHAPER_RATE_SREPr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_RATE_SREPr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_RATE_SREPr_OFFSET,i,(r._mmu_rqe_max_shaper_rate_srep),1)
#define WRITE_MMU_RQE_MAX_SHAPER_RATE_SREPr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_RATE_SREPr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_RATE_SREPr_OFFSET,i,&(r._mmu_rqe_max_shaper_rate_srep),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_RATE_SREPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_THRESHOLD
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_THRESHOLD.
 */
#define READ_MMU_RQE_MAX_SHAPER_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_THRESHOLDr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_THRESHOLDr_OFFSET,i,(r._mmu_rqe_max_shaper_threshold),1)
#define WRITE_MMU_RQE_MAX_SHAPER_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_THRESHOLDr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_THRESHOLDr_OFFSET,i,&(r._mmu_rqe_max_shaper_threshold),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR.
 */
#define READ_MMU_RQE_MAX_SHAPER_THRESHOLD_CLEARr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEARr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEARr_OFFSET,i,(r._mmu_rqe_max_shaper_threshold_clear),1)
#define WRITE_MMU_RQE_MAX_SHAPER_THRESHOLD_CLEARr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEARr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEARr_OFFSET,i,&(r._mmu_rqe_max_shaper_threshold_clear),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_THRESHOLD_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PIPE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PIPE.
 */
#define READ_MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PIPEr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PIPEr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PIPEr_OFFSET,i,(r._mmu_rqe_max_shaper_threshold_clear_pipe),1)
#define WRITE_MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PIPEr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PIPEr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PIPEr_OFFSET,i,&(r._mmu_rqe_max_shaper_threshold_clear_pipe),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PIPEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PREFETCH
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PREFETCH.
 */
#define READ_MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PREFETCHr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PREFETCHr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PREFETCHr_OFFSET,i,(r._mmu_rqe_max_shaper_threshold_clear_prefetch),1)
#define WRITE_MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PREFETCHr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PREFETCHr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PREFETCHr_OFFSET,i,&(r._mmu_rqe_max_shaper_threshold_clear_prefetch),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_PREFETCHr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SCC
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SCC.
 */
#define READ_MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SCCr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SCCr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SCCr_OFFSET,i,(r._mmu_rqe_max_shaper_threshold_clear_scc),1)
#define WRITE_MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SCCr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SCCr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SCCr_OFFSET,i,&(r._mmu_rqe_max_shaper_threshold_clear_scc),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SCCr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SREP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SREP.
 */
#define READ_MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SREPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SREPr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SREPr_OFFSET,i,(r._mmu_rqe_max_shaper_threshold_clear_srep),1)
#define WRITE_MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SREPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SREPr_BLKACC,3,0,p,MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SREPr_OFFSET,i,&(r._mmu_rqe_max_shaper_threshold_clear_srep),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_THRESHOLD_CLEAR_SREPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_THRESHOLD_PIPE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_THRESHOLD_PIPE.
 */
#define READ_MMU_RQE_MAX_SHAPER_THRESHOLD_PIPEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_THRESHOLD_PIPEr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_THRESHOLD_PIPEr_OFFSET,i,(r._mmu_rqe_max_shaper_threshold_pipe),1)
#define WRITE_MMU_RQE_MAX_SHAPER_THRESHOLD_PIPEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_THRESHOLD_PIPEr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_THRESHOLD_PIPEr_OFFSET,i,&(r._mmu_rqe_max_shaper_threshold_pipe),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_THRESHOLD_PIPEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_THRESHOLD_PREFETCH
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_THRESHOLD_PREFETCH.
 */
#define READ_MMU_RQE_MAX_SHAPER_THRESHOLD_PREFETCHr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_THRESHOLD_PREFETCHr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_THRESHOLD_PREFETCHr_OFFSET,i,(r._mmu_rqe_max_shaper_threshold_prefetch),1)
#define WRITE_MMU_RQE_MAX_SHAPER_THRESHOLD_PREFETCHr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_THRESHOLD_PREFETCHr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_THRESHOLD_PREFETCHr_OFFSET,i,&(r._mmu_rqe_max_shaper_threshold_prefetch),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_THRESHOLD_PREFETCHr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_THRESHOLD_SCC
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_THRESHOLD_SCC.
 */
#define READ_MMU_RQE_MAX_SHAPER_THRESHOLD_SCCr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_THRESHOLD_SCCr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_THRESHOLD_SCCr_OFFSET,i,(r._mmu_rqe_max_shaper_threshold_scc),1)
#define WRITE_MMU_RQE_MAX_SHAPER_THRESHOLD_SCCr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_THRESHOLD_SCCr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_THRESHOLD_SCCr_OFFSET,i,&(r._mmu_rqe_max_shaper_threshold_scc),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_THRESHOLD_SCCr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_MAX_SHAPER_THRESHOLD_SREP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_MAX_SHAPER_THRESHOLD_SREP.
 */
#define READ_MMU_RQE_MAX_SHAPER_THRESHOLD_SREPr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_MAX_SHAPER_THRESHOLD_SREPr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_THRESHOLD_SREPr_OFFSET,i,(r._mmu_rqe_max_shaper_threshold_srep),1)
#define WRITE_MMU_RQE_MAX_SHAPER_THRESHOLD_SREPr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_MAX_SHAPER_THRESHOLD_SREPr_BLKACC,3,0,0,MMU_RQE_MAX_SHAPER_THRESHOLD_SREPr_OFFSET,i,&(r._mmu_rqe_max_shaper_threshold_srep),1)

/*******************************************************************************
 * End of 'MMU_RQE_MAX_SHAPER_THRESHOLD_SREPr'
 */




/*******************************************************************************
 * MEMORY:  MMU_RQE_PIPELINE_FCFIFO
 * BLOCKS:   MMU_ITM
 * SIZE:     117
 */
/*
 * These macros can be used to access MMU_RQE_PIPELINE_FCFIFO.
 */
#define READ_MMU_RQE_PIPELINE_FCFIFOm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RQE_PIPELINE_FCFIFOm_BLKACC,3,0,p,MMU_RQE_PIPELINE_FCFIFOm_OFFSET,i,(m._mmu_rqe_pipeline_fcfifo),4)
#define WRITE_MMU_RQE_PIPELINE_FCFIFOm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RQE_PIPELINE_FCFIFOm_BLKACC,3,0,p,MMU_RQE_PIPELINE_FCFIFOm_OFFSET,i,&(m._mmu_rqe_pipeline_fcfifo),4)

/*******************************************************************************
 * End of 'MMU_RQE_PIPELINE_FCFIFOm'
 */




/*******************************************************************************
 * MEMORY:  MMU_RQE_PKTQ_FREE_LIST
 * BLOCKS:   MMU_ITM
 * SIZE:     22
 */
/*
 * These macros can be used to access MMU_RQE_PKTQ_FREE_LIST.
 */
#define READ_MMU_RQE_PKTQ_FREE_LISTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RQE_PKTQ_FREE_LISTm_BLKACC,3,0,p,MMU_RQE_PKTQ_FREE_LISTm_OFFSET,i,(m._mmu_rqe_pktq_free_list),1)
#define WRITE_MMU_RQE_PKTQ_FREE_LISTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RQE_PKTQ_FREE_LISTm_BLKACC,3,0,p,MMU_RQE_PKTQ_FREE_LISTm_OFFSET,i,&(m._mmu_rqe_pktq_free_list),1)

/*******************************************************************************
 * End of 'MMU_RQE_PKTQ_FREE_LISTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_RQE_PKTQ_LINK_LIST
 * BLOCKS:   MMU_ITM
 * SIZE:     15
 */
/*
 * These macros can be used to access MMU_RQE_PKTQ_LINK_LIST.
 */
#define READ_MMU_RQE_PKTQ_LINK_LISTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RQE_PKTQ_LINK_LISTm_BLKACC,3,0,p,MMU_RQE_PKTQ_LINK_LISTm_OFFSET,i,(m._mmu_rqe_pktq_link_list),1)
#define WRITE_MMU_RQE_PKTQ_LINK_LISTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RQE_PKTQ_LINK_LISTm_BLKACC,3,0,p,MMU_RQE_PKTQ_LINK_LISTm_OFFSET,i,&(m._mmu_rqe_pktq_link_list),1)

/*******************************************************************************
 * End of 'MMU_RQE_PKTQ_LINK_LISTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_RQE_PKT_QUEUE
 * BLOCKS:   MMU_ITM
 * SIZE:     474
 */
/*
 * These macros can be used to access MMU_RQE_PKT_QUEUE.
 */
#define READ_MMU_RQE_PKT_QUEUEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RQE_PKT_QUEUEm_BLKACC,3,0,p,MMU_RQE_PKT_QUEUEm_OFFSET,i,(m._mmu_rqe_pkt_queue),15)
#define WRITE_MMU_RQE_PKT_QUEUEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RQE_PKT_QUEUEm_BLKACC,3,0,p,MMU_RQE_PKT_QUEUEm_OFFSET,i,&(m._mmu_rqe_pkt_queue),15)

/*******************************************************************************
 * End of 'MMU_RQE_PKT_QUEUEm'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PKT_QUEUE_HEAD
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PKT_QUEUE_HEAD.
 */
#define READ_MMU_RQE_PKT_QUEUE_HEADr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PKT_QUEUE_HEADr_BLKACC,3,0,p,MMU_RQE_PKT_QUEUE_HEADr_OFFSET,i,(r._mmu_rqe_pkt_queue_head),1)
#define WRITE_MMU_RQE_PKT_QUEUE_HEADr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PKT_QUEUE_HEADr_BLKACC,3,0,p,MMU_RQE_PKT_QUEUE_HEADr_OFFSET,i,&(r._mmu_rqe_pkt_queue_head),1)

/*******************************************************************************
 * End of 'MMU_RQE_PKT_QUEUE_HEADr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PKT_QUEUE_LEVEL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PKT_QUEUE_LEVEL.
 */
#define READ_MMU_RQE_PKT_QUEUE_LEVELr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PKT_QUEUE_LEVELr_BLKACC,3,0,p,MMU_RQE_PKT_QUEUE_LEVELr_OFFSET,0,(r._mmu_rqe_pkt_queue_level),1)
#define WRITE_MMU_RQE_PKT_QUEUE_LEVELr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PKT_QUEUE_LEVELr_BLKACC,3,0,p,MMU_RQE_PKT_QUEUE_LEVELr_OFFSET,0,&(r._mmu_rqe_pkt_queue_level),1)

/*******************************************************************************
 * End of 'MMU_RQE_PKT_QUEUE_LEVELr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PKT_QUEUE_TAIL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PKT_QUEUE_TAIL.
 */
#define READ_MMU_RQE_PKT_QUEUE_TAILr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PKT_QUEUE_TAILr_BLKACC,3,0,p,MMU_RQE_PKT_QUEUE_TAILr_OFFSET,i,(r._mmu_rqe_pkt_queue_tail),1)
#define WRITE_MMU_RQE_PKT_QUEUE_TAILr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PKT_QUEUE_TAILr_BLKACC,3,0,p,MMU_RQE_PKT_QUEUE_TAILr_OFFSET,i,&(r._mmu_rqe_pkt_queue_tail),1)

/*******************************************************************************
 * End of 'MMU_RQE_PKT_QUEUE_TAILr'
 */




/*******************************************************************************
 * MEMORY:  MMU_RQE_PKT_STATE
 * BLOCKS:   MMU_ITM
 * SIZE:     26
 */
/*
 * These macros can be used to access MMU_RQE_PKT_STATE.
 */
#define READ_MMU_RQE_PKT_STATEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RQE_PKT_STATEm_BLKACC,3,0,p,MMU_RQE_PKT_STATEm_OFFSET,i,(m._mmu_rqe_pkt_state),1)
#define WRITE_MMU_RQE_PKT_STATEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RQE_PKT_STATEm_BLKACC,3,0,p,MMU_RQE_PKT_STATEm_OFFSET,i,&(m._mmu_rqe_pkt_state),1)

/*******************************************************************************
 * End of 'MMU_RQE_PKT_STATEm'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PRIORITY_SCHEDULING_TYPE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PRIORITY_SCHEDULING_TYPE.
 */
#define READ_MMU_RQE_PRIORITY_SCHEDULING_TYPEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PRIORITY_SCHEDULING_TYPEr_BLKACC,3,0,0,MMU_RQE_PRIORITY_SCHEDULING_TYPEr_OFFSET,i,(r._mmu_rqe_priority_scheduling_type),1)
#define WRITE_MMU_RQE_PRIORITY_SCHEDULING_TYPEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PRIORITY_SCHEDULING_TYPEr_BLKACC,3,0,0,MMU_RQE_PRIORITY_SCHEDULING_TYPEr_OFFSET,i,&(r._mmu_rqe_priority_scheduling_type),1)

/*******************************************************************************
 * End of 'MMU_RQE_PRIORITY_SCHEDULING_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PRIORITY_SCHEDULING_TYPE_PIPE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PRIORITY_SCHEDULING_TYPE_PIPE.
 */
#define READ_MMU_RQE_PRIORITY_SCHEDULING_TYPE_PIPEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PRIORITY_SCHEDULING_TYPE_PIPEr_BLKACC,3,0,0,MMU_RQE_PRIORITY_SCHEDULING_TYPE_PIPEr_OFFSET,i,(r._mmu_rqe_priority_scheduling_type_pipe),1)
#define WRITE_MMU_RQE_PRIORITY_SCHEDULING_TYPE_PIPEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PRIORITY_SCHEDULING_TYPE_PIPEr_BLKACC,3,0,0,MMU_RQE_PRIORITY_SCHEDULING_TYPE_PIPEr_OFFSET,i,&(r._mmu_rqe_priority_scheduling_type_pipe),1)

/*******************************************************************************
 * End of 'MMU_RQE_PRIORITY_SCHEDULING_TYPE_PIPEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PRIORITY_SCHEDULING_TYPE_PREFETCH
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PRIORITY_SCHEDULING_TYPE_PREFETCH.
 */
#define READ_MMU_RQE_PRIORITY_SCHEDULING_TYPE_PREFETCHr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PRIORITY_SCHEDULING_TYPE_PREFETCHr_BLKACC,3,0,0,MMU_RQE_PRIORITY_SCHEDULING_TYPE_PREFETCHr_OFFSET,i,(r._mmu_rqe_priority_scheduling_type_prefetch),1)
#define WRITE_MMU_RQE_PRIORITY_SCHEDULING_TYPE_PREFETCHr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PRIORITY_SCHEDULING_TYPE_PREFETCHr_BLKACC,3,0,0,MMU_RQE_PRIORITY_SCHEDULING_TYPE_PREFETCHr_OFFSET,i,&(r._mmu_rqe_priority_scheduling_type_prefetch),1)

/*******************************************************************************
 * End of 'MMU_RQE_PRIORITY_SCHEDULING_TYPE_PREFETCHr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PRIORITY_SCHEDULING_TYPE_SCC
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PRIORITY_SCHEDULING_TYPE_SCC.
 */
#define READ_MMU_RQE_PRIORITY_SCHEDULING_TYPE_SCCr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PRIORITY_SCHEDULING_TYPE_SCCr_BLKACC,3,0,0,MMU_RQE_PRIORITY_SCHEDULING_TYPE_SCCr_OFFSET,i,(r._mmu_rqe_priority_scheduling_type_scc),1)
#define WRITE_MMU_RQE_PRIORITY_SCHEDULING_TYPE_SCCr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PRIORITY_SCHEDULING_TYPE_SCCr_BLKACC,3,0,0,MMU_RQE_PRIORITY_SCHEDULING_TYPE_SCCr_OFFSET,i,&(r._mmu_rqe_priority_scheduling_type_scc),1)

/*******************************************************************************
 * End of 'MMU_RQE_PRIORITY_SCHEDULING_TYPE_SCCr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PRIORITY_SCHEDULING_TYPE_SREP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PRIORITY_SCHEDULING_TYPE_SREP.
 */
#define READ_MMU_RQE_PRIORITY_SCHEDULING_TYPE_SREPr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PRIORITY_SCHEDULING_TYPE_SREPr_BLKACC,3,0,0,MMU_RQE_PRIORITY_SCHEDULING_TYPE_SREPr_OFFSET,i,(r._mmu_rqe_priority_scheduling_type_srep),1)
#define WRITE_MMU_RQE_PRIORITY_SCHEDULING_TYPE_SREPr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PRIORITY_SCHEDULING_TYPE_SREPr_BLKACC,3,0,0,MMU_RQE_PRIORITY_SCHEDULING_TYPE_SREPr_OFFSET,i,&(r._mmu_rqe_priority_scheduling_type_srep),1)

/*******************************************************************************
 * End of 'MMU_RQE_PRIORITY_SCHEDULING_TYPE_SREPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PRIORITY_WERR_WEIGHT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PRIORITY_WERR_WEIGHT.
 */
#define READ_MMU_RQE_PRIORITY_WERR_WEIGHTr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PRIORITY_WERR_WEIGHTr_BLKACC,3,0,0,MMU_RQE_PRIORITY_WERR_WEIGHTr_OFFSET,i,(r._mmu_rqe_priority_werr_weight),1)
#define WRITE_MMU_RQE_PRIORITY_WERR_WEIGHTr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PRIORITY_WERR_WEIGHTr_BLKACC,3,0,0,MMU_RQE_PRIORITY_WERR_WEIGHTr_OFFSET,i,&(r._mmu_rqe_priority_werr_weight),1)

/*******************************************************************************
 * End of 'MMU_RQE_PRIORITY_WERR_WEIGHTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PRIORITY_WERR_WEIGHT_PIPE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PRIORITY_WERR_WEIGHT_PIPE.
 */
#define READ_MMU_RQE_PRIORITY_WERR_WEIGHT_PIPEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PRIORITY_WERR_WEIGHT_PIPEr_BLKACC,3,0,0,MMU_RQE_PRIORITY_WERR_WEIGHT_PIPEr_OFFSET,i,(r._mmu_rqe_priority_werr_weight_pipe),1)
#define WRITE_MMU_RQE_PRIORITY_WERR_WEIGHT_PIPEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PRIORITY_WERR_WEIGHT_PIPEr_BLKACC,3,0,0,MMU_RQE_PRIORITY_WERR_WEIGHT_PIPEr_OFFSET,i,&(r._mmu_rqe_priority_werr_weight_pipe),1)

/*******************************************************************************
 * End of 'MMU_RQE_PRIORITY_WERR_WEIGHT_PIPEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PRIORITY_WERR_WEIGHT_PREFETCH
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PRIORITY_WERR_WEIGHT_PREFETCH.
 */
#define READ_MMU_RQE_PRIORITY_WERR_WEIGHT_PREFETCHr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PRIORITY_WERR_WEIGHT_PREFETCHr_BLKACC,3,0,0,MMU_RQE_PRIORITY_WERR_WEIGHT_PREFETCHr_OFFSET,i,(r._mmu_rqe_priority_werr_weight_prefetch),1)
#define WRITE_MMU_RQE_PRIORITY_WERR_WEIGHT_PREFETCHr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PRIORITY_WERR_WEIGHT_PREFETCHr_BLKACC,3,0,0,MMU_RQE_PRIORITY_WERR_WEIGHT_PREFETCHr_OFFSET,i,&(r._mmu_rqe_priority_werr_weight_prefetch),1)

/*******************************************************************************
 * End of 'MMU_RQE_PRIORITY_WERR_WEIGHT_PREFETCHr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PRIORITY_WERR_WEIGHT_SCC
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PRIORITY_WERR_WEIGHT_SCC.
 */
#define READ_MMU_RQE_PRIORITY_WERR_WEIGHT_SCCr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PRIORITY_WERR_WEIGHT_SCCr_BLKACC,3,0,0,MMU_RQE_PRIORITY_WERR_WEIGHT_SCCr_OFFSET,i,(r._mmu_rqe_priority_werr_weight_scc),1)
#define WRITE_MMU_RQE_PRIORITY_WERR_WEIGHT_SCCr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PRIORITY_WERR_WEIGHT_SCCr_BLKACC,3,0,0,MMU_RQE_PRIORITY_WERR_WEIGHT_SCCr_OFFSET,i,&(r._mmu_rqe_priority_werr_weight_scc),1)

/*******************************************************************************
 * End of 'MMU_RQE_PRIORITY_WERR_WEIGHT_SCCr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PRIORITY_WERR_WEIGHT_SREP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PRIORITY_WERR_WEIGHT_SREP.
 */
#define READ_MMU_RQE_PRIORITY_WERR_WEIGHT_SREPr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PRIORITY_WERR_WEIGHT_SREPr_BLKACC,3,0,0,MMU_RQE_PRIORITY_WERR_WEIGHT_SREPr_OFFSET,i,(r._mmu_rqe_priority_werr_weight_srep),1)
#define WRITE_MMU_RQE_PRIORITY_WERR_WEIGHT_SREPr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PRIORITY_WERR_WEIGHT_SREPr_BLKACC,3,0,0,MMU_RQE_PRIORITY_WERR_WEIGHT_SREPr_OFFSET,i,&(r._mmu_rqe_priority_werr_weight_srep),1)

/*******************************************************************************
 * End of 'MMU_RQE_PRIORITY_WERR_WEIGHT_SREPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PTAIL_PHEAD_CNT_CELLQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PTAIL_PHEAD_CNT_CELLQ.
 */
#define READ_MMU_RQE_PTAIL_PHEAD_CNT_CELLQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PTAIL_PHEAD_CNT_CELLQr_BLKACC,3,0,p,MMU_RQE_PTAIL_PHEAD_CNT_CELLQr_OFFSET,i,(r._mmu_rqe_ptail_phead_cnt_cellq),1)
#define WRITE_MMU_RQE_PTAIL_PHEAD_CNT_CELLQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PTAIL_PHEAD_CNT_CELLQr_BLKACC,3,0,p,MMU_RQE_PTAIL_PHEAD_CNT_CELLQr_OFFSET,i,&(r._mmu_rqe_ptail_phead_cnt_cellq),1)

/*******************************************************************************
 * End of 'MMU_RQE_PTAIL_PHEAD_CNT_CELLQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_PTAIL_PREFETCH_CNT_PKTQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_PTAIL_PREFETCH_CNT_PKTQ.
 */
#define READ_MMU_RQE_PTAIL_PREFETCH_CNT_PKTQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_PTAIL_PREFETCH_CNT_PKTQr_BLKACC,3,0,p,MMU_RQE_PTAIL_PREFETCH_CNT_PKTQr_OFFSET,i,(r._mmu_rqe_ptail_prefetch_cnt_pktq),1)
#define WRITE_MMU_RQE_PTAIL_PREFETCH_CNT_PKTQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_PTAIL_PREFETCH_CNT_PKTQr_BLKACC,3,0,p,MMU_RQE_PTAIL_PREFETCH_CNT_PKTQr_OFFSET,i,&(r._mmu_rqe_ptail_prefetch_cnt_pktq),1)

/*******************************************************************************
 * End of 'MMU_RQE_PTAIL_PREFETCH_CNT_PKTQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_QUEUE_SNAPSHOT_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_QUEUE_SNAPSHOT_EN.
 */
#define READ_MMU_RQE_QUEUE_SNAPSHOT_ENr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_QUEUE_SNAPSHOT_ENr_BLKACC,3,0,p,MMU_RQE_QUEUE_SNAPSHOT_ENr_OFFSET,0,(r._mmu_rqe_queue_snapshot_en),1)
#define WRITE_MMU_RQE_QUEUE_SNAPSHOT_ENr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_QUEUE_SNAPSHOT_ENr_BLKACC,3,0,p,MMU_RQE_QUEUE_SNAPSHOT_ENr_OFFSET,0,&(r._mmu_rqe_queue_snapshot_en),1)

/*******************************************************************************
 * End of 'MMU_RQE_QUEUE_SNAPSHOT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_REPL_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_REPL_CONFIG.
 */
#define READ_MMU_RQE_REPL_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_REPL_CONFIGr_BLKACC,3,0,0,MMU_RQE_REPL_CONFIGr_OFFSET,0,(r._mmu_rqe_repl_config),1)
#define WRITE_MMU_RQE_REPL_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_REPL_CONFIGr_BLKACC,3,0,0,MMU_RQE_REPL_CONFIGr_OFFSET,0,&(r._mmu_rqe_repl_config),1)

/*******************************************************************************
 * End of 'MMU_RQE_REPL_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  MMU_RQE_REPL_PORT_AGG_MAP
 * BLOCKS:   MMU_ITM
 * SIZE:     14
 */
/*
 * These macros can be used to access MMU_RQE_REPL_PORT_AGG_MAP.
 */
#define READ_MMU_RQE_REPL_PORT_AGG_MAPm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RQE_REPL_PORT_AGG_MAPm_BLKACC,3,0,0,MMU_RQE_REPL_PORT_AGG_MAPm_OFFSET,i,(m._mmu_rqe_repl_port_agg_map),1)
#define WRITE_MMU_RQE_REPL_PORT_AGG_MAPm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RQE_REPL_PORT_AGG_MAPm_BLKACC,3,0,0,MMU_RQE_REPL_PORT_AGG_MAPm_OFFSET,i,&(m._mmu_rqe_repl_port_agg_map),1)

/*******************************************************************************
 * End of 'MMU_RQE_REPL_PORT_AGG_MAPm'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_SCH_GLOBAL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_SCH_GLOBAL.
 */
#define READ_MMU_RQE_SCH_GLOBALr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_SCH_GLOBALr_BLKACC,3,0,0,MMU_RQE_SCH_GLOBALr_OFFSET,0,(r._mmu_rqe_sch_global),1)
#define WRITE_MMU_RQE_SCH_GLOBALr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_SCH_GLOBALr_BLKACC,3,0,0,MMU_RQE_SCH_GLOBALr_OFFSET,0,&(r._mmu_rqe_sch_global),1)

/*******************************************************************************
 * End of 'MMU_RQE_SCH_GLOBALr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_SCH_INACTIVE_CONTROL
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RQE_SCH_INACTIVE_CONTROL.
 */
#define READ_MMU_RQE_SCH_INACTIVE_CONTROLr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_SCH_INACTIVE_CONTROLr_BLKACC,3,0,0,MMU_RQE_SCH_INACTIVE_CONTROLr_OFFSET,0,(r._mmu_rqe_sch_inactive_control),2)
#define WRITE_MMU_RQE_SCH_INACTIVE_CONTROLr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_SCH_INACTIVE_CONTROLr_BLKACC,3,0,0,MMU_RQE_SCH_INACTIVE_CONTROLr_OFFSET,0,&(r._mmu_rqe_sch_inactive_control),2)

/*******************************************************************************
 * End of 'MMU_RQE_SCH_INACTIVE_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  MMU_RQE_SPACIAL_ICC_FIFO
 * BLOCKS:   MMU_ITM
 * SIZE:     752
 */
/*
 * These macros can be used to access MMU_RQE_SPACIAL_ICC_FIFO.
 */
#define READ_MMU_RQE_SPACIAL_ICC_FIFOm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RQE_SPACIAL_ICC_FIFOm_BLKACC,3,0,p,MMU_RQE_SPACIAL_ICC_FIFOm_OFFSET,i,(m._mmu_rqe_spacial_icc_fifo),24)
#define WRITE_MMU_RQE_SPACIAL_ICC_FIFOm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RQE_SPACIAL_ICC_FIFOm_BLKACC,3,0,p,MMU_RQE_SPACIAL_ICC_FIFOm_OFFSET,i,&(m._mmu_rqe_spacial_icc_fifo),24)

/*******************************************************************************
 * End of 'MMU_RQE_SPACIAL_ICC_FIFOm'
 */




/*******************************************************************************
 * MEMORY:  MMU_RQE_SPACIAL_REPL_FIFO
 * BLOCKS:   MMU_ITM
 * SIZE:     125
 */
/*
 * These macros can be used to access MMU_RQE_SPACIAL_REPL_FIFO.
 */
#define READ_MMU_RQE_SPACIAL_REPL_FIFOm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_RQE_SPACIAL_REPL_FIFOm_BLKACC,3,0,p,MMU_RQE_SPACIAL_REPL_FIFOm_OFFSET,i,(m._mmu_rqe_spacial_repl_fifo),4)
#define WRITE_MMU_RQE_SPACIAL_REPL_FIFOm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_RQE_SPACIAL_REPL_FIFOm_BLKACC,3,0,p,MMU_RQE_SPACIAL_REPL_FIFOm_OFFSET,i,&(m._mmu_rqe_spacial_repl_fifo),4)

/*******************************************************************************
 * End of 'MMU_RQE_SPACIAL_REPL_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RQE_TMBUS.
 */
#define READ_MMU_RQE_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_TMBUSr_BLKACC,3,0,0,MMU_RQE_TMBUSr_OFFSET,0,(r._mmu_rqe_tmbus),2)
#define WRITE_MMU_RQE_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_TMBUSr_BLKACC,3,0,0,MMU_RQE_TMBUSr_OFFSET,0,&(r._mmu_rqe_tmbus),2)

/*******************************************************************************
 * End of 'MMU_RQE_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_TX_CREDIT_TO_RL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_TX_CREDIT_TO_RL.
 */
#define READ_MMU_RQE_TX_CREDIT_TO_RLr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_TX_CREDIT_TO_RLr_BLKACC,3,0,0,MMU_RQE_TX_CREDIT_TO_RLr_OFFSET,0,(r._mmu_rqe_tx_credit_to_rl),1)
#define WRITE_MMU_RQE_TX_CREDIT_TO_RLr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_TX_CREDIT_TO_RLr_BLKACC,3,0,0,MMU_RQE_TX_CREDIT_TO_RLr_OFFSET,0,&(r._mmu_rqe_tx_credit_to_rl),1)

/*******************************************************************************
 * End of 'MMU_RQE_TX_CREDIT_TO_RLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_TX_CREDIT_TO_TOQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_TX_CREDIT_TO_TOQ.
 */
#define READ_MMU_RQE_TX_CREDIT_TO_TOQr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_TX_CREDIT_TO_TOQr_BLKACC,3,0,0,MMU_RQE_TX_CREDIT_TO_TOQr_OFFSET,0,(r._mmu_rqe_tx_credit_to_toq),1)
#define WRITE_MMU_RQE_TX_CREDIT_TO_TOQr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_TX_CREDIT_TO_TOQr_BLKACC,3,0,0,MMU_RQE_TX_CREDIT_TO_TOQr_OFFSET,0,&(r._mmu_rqe_tx_credit_to_toq),1)

/*******************************************************************************
 * End of 'MMU_RQE_TX_CREDIT_TO_TOQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_MAXSC_CLEAR
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_MAXSC_CLEAR.
 */
#define READ_MMU_RQE_WERR_MAXSC_CLEARr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_MAXSC_CLEARr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_CLEARr_OFFSET,0,(r._mmu_rqe_werr_maxsc_clear),1)
#define WRITE_MMU_RQE_WERR_MAXSC_CLEARr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_MAXSC_CLEARr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_CLEARr_OFFSET,0,&(r._mmu_rqe_werr_maxsc_clear),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_MAXSC_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_MAXSC_CLEAR_PIPE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_MAXSC_CLEAR_PIPE.
 */
#define READ_MMU_RQE_WERR_MAXSC_CLEAR_PIPEr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_MAXSC_CLEAR_PIPEr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_CLEAR_PIPEr_OFFSET,0,(r._mmu_rqe_werr_maxsc_clear_pipe),1)
#define WRITE_MMU_RQE_WERR_MAXSC_CLEAR_PIPEr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_MAXSC_CLEAR_PIPEr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_CLEAR_PIPEr_OFFSET,0,&(r._mmu_rqe_werr_maxsc_clear_pipe),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_MAXSC_CLEAR_PIPEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_MAXSC_CLEAR_PREFETCH
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_MAXSC_CLEAR_PREFETCH.
 */
#define READ_MMU_RQE_WERR_MAXSC_CLEAR_PREFETCHr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_MAXSC_CLEAR_PREFETCHr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_CLEAR_PREFETCHr_OFFSET,0,(r._mmu_rqe_werr_maxsc_clear_prefetch),1)
#define WRITE_MMU_RQE_WERR_MAXSC_CLEAR_PREFETCHr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_MAXSC_CLEAR_PREFETCHr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_CLEAR_PREFETCHr_OFFSET,0,&(r._mmu_rqe_werr_maxsc_clear_prefetch),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_MAXSC_CLEAR_PREFETCHr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_MAXSC_CLEAR_SCC
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_MAXSC_CLEAR_SCC.
 */
#define READ_MMU_RQE_WERR_MAXSC_CLEAR_SCCr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_MAXSC_CLEAR_SCCr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_CLEAR_SCCr_OFFSET,0,(r._mmu_rqe_werr_maxsc_clear_scc),1)
#define WRITE_MMU_RQE_WERR_MAXSC_CLEAR_SCCr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_MAXSC_CLEAR_SCCr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_CLEAR_SCCr_OFFSET,0,&(r._mmu_rqe_werr_maxsc_clear_scc),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_MAXSC_CLEAR_SCCr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_MAXSC_CLEAR_SREP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_MAXSC_CLEAR_SREP.
 */
#define READ_MMU_RQE_WERR_MAXSC_CLEAR_SREPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_MAXSC_CLEAR_SREPr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_CLEAR_SREPr_OFFSET,0,(r._mmu_rqe_werr_maxsc_clear_srep),1)
#define WRITE_MMU_RQE_WERR_MAXSC_CLEAR_SREPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_MAXSC_CLEAR_SREPr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_CLEAR_SREPr_OFFSET,0,&(r._mmu_rqe_werr_maxsc_clear_srep),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_MAXSC_CLEAR_SREPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_MAXSC_RESET
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_MAXSC_RESET.
 */
#define READ_MMU_RQE_WERR_MAXSC_RESETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_MAXSC_RESETr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_RESETr_OFFSET,0,(r._mmu_rqe_werr_maxsc_reset),1)
#define WRITE_MMU_RQE_WERR_MAXSC_RESETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_MAXSC_RESETr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_RESETr_OFFSET,0,&(r._mmu_rqe_werr_maxsc_reset),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_MAXSC_RESETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_MAXSC_RESET_PIPE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_MAXSC_RESET_PIPE.
 */
#define READ_MMU_RQE_WERR_MAXSC_RESET_PIPEr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_MAXSC_RESET_PIPEr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_RESET_PIPEr_OFFSET,0,(r._mmu_rqe_werr_maxsc_reset_pipe),1)
#define WRITE_MMU_RQE_WERR_MAXSC_RESET_PIPEr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_MAXSC_RESET_PIPEr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_RESET_PIPEr_OFFSET,0,&(r._mmu_rqe_werr_maxsc_reset_pipe),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_MAXSC_RESET_PIPEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_MAXSC_RESET_PREFETCH
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_MAXSC_RESET_PREFETCH.
 */
#define READ_MMU_RQE_WERR_MAXSC_RESET_PREFETCHr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_MAXSC_RESET_PREFETCHr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_RESET_PREFETCHr_OFFSET,0,(r._mmu_rqe_werr_maxsc_reset_prefetch),1)
#define WRITE_MMU_RQE_WERR_MAXSC_RESET_PREFETCHr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_MAXSC_RESET_PREFETCHr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_RESET_PREFETCHr_OFFSET,0,&(r._mmu_rqe_werr_maxsc_reset_prefetch),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_MAXSC_RESET_PREFETCHr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_MAXSC_RESET_SCC
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_MAXSC_RESET_SCC.
 */
#define READ_MMU_RQE_WERR_MAXSC_RESET_SCCr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_MAXSC_RESET_SCCr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_RESET_SCCr_OFFSET,0,(r._mmu_rqe_werr_maxsc_reset_scc),1)
#define WRITE_MMU_RQE_WERR_MAXSC_RESET_SCCr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_MAXSC_RESET_SCCr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_RESET_SCCr_OFFSET,0,&(r._mmu_rqe_werr_maxsc_reset_scc),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_MAXSC_RESET_SCCr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_MAXSC_RESET_SREP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_MAXSC_RESET_SREP.
 */
#define READ_MMU_RQE_WERR_MAXSC_RESET_SREPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_MAXSC_RESET_SREPr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_RESET_SREPr_OFFSET,0,(r._mmu_rqe_werr_maxsc_reset_srep),1)
#define WRITE_MMU_RQE_WERR_MAXSC_RESET_SREPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_MAXSC_RESET_SREPr_BLKACC,3,0,p,MMU_RQE_WERR_MAXSC_RESET_SREPr_OFFSET,0,&(r._mmu_rqe_werr_maxsc_reset_srep),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_MAXSC_RESET_SREPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_WORKING_COUNTS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_WORKING_COUNTS.
 */
#define READ_MMU_RQE_WERR_WORKING_COUNTSr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_WORKING_COUNTSr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTSr_OFFSET,i,(r._mmu_rqe_werr_working_counts),1)
#define WRITE_MMU_RQE_WERR_WORKING_COUNTSr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_WORKING_COUNTSr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTSr_OFFSET,i,&(r._mmu_rqe_werr_working_counts),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_WORKING_COUNTSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_WORKING_COUNTS_CLEAR
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_WORKING_COUNTS_CLEAR.
 */
#define READ_MMU_RQE_WERR_WORKING_COUNTS_CLEARr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_WORKING_COUNTS_CLEARr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_CLEARr_OFFSET,i,(r._mmu_rqe_werr_working_counts_clear),1)
#define WRITE_MMU_RQE_WERR_WORKING_COUNTS_CLEARr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_WORKING_COUNTS_CLEARr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_CLEARr_OFFSET,i,&(r._mmu_rqe_werr_working_counts_clear),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_WORKING_COUNTS_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PIPE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PIPE.
 */
#define READ_MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PIPEr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PIPEr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PIPEr_OFFSET,i,(r._mmu_rqe_werr_working_counts_clear_pipe),1)
#define WRITE_MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PIPEr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PIPEr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PIPEr_OFFSET,i,&(r._mmu_rqe_werr_working_counts_clear_pipe),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PIPEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PREFETCH
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PREFETCH.
 */
#define READ_MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PREFETCHr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PREFETCHr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PREFETCHr_OFFSET,i,(r._mmu_rqe_werr_working_counts_clear_prefetch),1)
#define WRITE_MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PREFETCHr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PREFETCHr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PREFETCHr_OFFSET,i,&(r._mmu_rqe_werr_working_counts_clear_prefetch),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_WORKING_COUNTS_CLEAR_PREFETCHr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SCC
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SCC.
 */
#define READ_MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SCCr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SCCr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SCCr_OFFSET,i,(r._mmu_rqe_werr_working_counts_clear_scc),1)
#define WRITE_MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SCCr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SCCr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SCCr_OFFSET,i,&(r._mmu_rqe_werr_working_counts_clear_scc),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SCCr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SREP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SREP.
 */
#define READ_MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SREPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SREPr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SREPr_OFFSET,i,(r._mmu_rqe_werr_working_counts_clear_srep),1)
#define WRITE_MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SREPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SREPr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SREPr_OFFSET,i,&(r._mmu_rqe_werr_working_counts_clear_srep),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_WORKING_COUNTS_CLEAR_SREPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_WORKING_COUNTS_PIPE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_WORKING_COUNTS_PIPE.
 */
#define READ_MMU_RQE_WERR_WORKING_COUNTS_PIPEr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_WORKING_COUNTS_PIPEr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_PIPEr_OFFSET,i,(r._mmu_rqe_werr_working_counts_pipe),1)
#define WRITE_MMU_RQE_WERR_WORKING_COUNTS_PIPEr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_WORKING_COUNTS_PIPEr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_PIPEr_OFFSET,i,&(r._mmu_rqe_werr_working_counts_pipe),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_WORKING_COUNTS_PIPEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_WORKING_COUNTS_PREFETCH
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_WORKING_COUNTS_PREFETCH.
 */
#define READ_MMU_RQE_WERR_WORKING_COUNTS_PREFETCHr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_WORKING_COUNTS_PREFETCHr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_PREFETCHr_OFFSET,i,(r._mmu_rqe_werr_working_counts_prefetch),1)
#define WRITE_MMU_RQE_WERR_WORKING_COUNTS_PREFETCHr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_WORKING_COUNTS_PREFETCHr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_PREFETCHr_OFFSET,i,&(r._mmu_rqe_werr_working_counts_prefetch),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_WORKING_COUNTS_PREFETCHr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_WORKING_COUNTS_SCC
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_WORKING_COUNTS_SCC.
 */
#define READ_MMU_RQE_WERR_WORKING_COUNTS_SCCr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_WORKING_COUNTS_SCCr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_SCCr_OFFSET,i,(r._mmu_rqe_werr_working_counts_scc),1)
#define WRITE_MMU_RQE_WERR_WORKING_COUNTS_SCCr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_WORKING_COUNTS_SCCr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_SCCr_OFFSET,i,&(r._mmu_rqe_werr_working_counts_scc),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_WORKING_COUNTS_SCCr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_WERR_WORKING_COUNTS_SREP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_WERR_WORKING_COUNTS_SREP.
 */
#define READ_MMU_RQE_WERR_WORKING_COUNTS_SREPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_RQE_WERR_WORKING_COUNTS_SREPr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_SREPr_OFFSET,i,(r._mmu_rqe_werr_working_counts_srep),1)
#define WRITE_MMU_RQE_WERR_WORKING_COUNTS_SREPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_RQE_WERR_WORKING_COUNTS_SREPr_BLKACC,3,0,p,MMU_RQE_WERR_WORKING_COUNTS_SREPr_OFFSET,i,&(r._mmu_rqe_werr_working_counts_srep),1)

/*******************************************************************************
 * End of 'MMU_RQE_WERR_WORKING_COUNTS_SREPr'
 */




/*******************************************************************************
 * MEMORY:  MMU_SCB_AGGREGATE_FIFO_BANK0
 * BLOCKS:   MMU_ITM
 * SIZE:     115
 */
/*
 * These macros can be used to access MMU_SCB_AGGREGATE_FIFO_BANK0.
 */
#define READ_MMU_SCB_AGGREGATE_FIFO_BANK0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_SCB_AGGREGATE_FIFO_BANK0m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK0m_OFFSET,i,(m._mmu_scb_aggregate_fifo_bank0),4)
#define WRITE_MMU_SCB_AGGREGATE_FIFO_BANK0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_SCB_AGGREGATE_FIFO_BANK0m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK0m_OFFSET,i,&(m._mmu_scb_aggregate_fifo_bank0),4)

/*******************************************************************************
 * End of 'MMU_SCB_AGGREGATE_FIFO_BANK0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_SCB_AGGREGATE_FIFO_BANK1
 * BLOCKS:   MMU_ITM
 * SIZE:     115
 */
/*
 * These macros can be used to access MMU_SCB_AGGREGATE_FIFO_BANK1.
 */
#define READ_MMU_SCB_AGGREGATE_FIFO_BANK1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_SCB_AGGREGATE_FIFO_BANK1m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK1m_OFFSET,i,(m._mmu_scb_aggregate_fifo_bank1),4)
#define WRITE_MMU_SCB_AGGREGATE_FIFO_BANK1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_SCB_AGGREGATE_FIFO_BANK1m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK1m_OFFSET,i,&(m._mmu_scb_aggregate_fifo_bank1),4)

/*******************************************************************************
 * End of 'MMU_SCB_AGGREGATE_FIFO_BANK1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_SCB_AGGREGATE_FIFO_BANK2
 * BLOCKS:   MMU_ITM
 * SIZE:     115
 */
/*
 * These macros can be used to access MMU_SCB_AGGREGATE_FIFO_BANK2.
 */
#define READ_MMU_SCB_AGGREGATE_FIFO_BANK2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_SCB_AGGREGATE_FIFO_BANK2m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK2m_OFFSET,i,(m._mmu_scb_aggregate_fifo_bank2),4)
#define WRITE_MMU_SCB_AGGREGATE_FIFO_BANK2m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_SCB_AGGREGATE_FIFO_BANK2m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK2m_OFFSET,i,&(m._mmu_scb_aggregate_fifo_bank2),4)

/*******************************************************************************
 * End of 'MMU_SCB_AGGREGATE_FIFO_BANK2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_SCB_AGGREGATE_FIFO_BANK3
 * BLOCKS:   MMU_ITM
 * SIZE:     115
 */
/*
 * These macros can be used to access MMU_SCB_AGGREGATE_FIFO_BANK3.
 */
#define READ_MMU_SCB_AGGREGATE_FIFO_BANK3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_SCB_AGGREGATE_FIFO_BANK3m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK3m_OFFSET,i,(m._mmu_scb_aggregate_fifo_bank3),4)
#define WRITE_MMU_SCB_AGGREGATE_FIFO_BANK3m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_SCB_AGGREGATE_FIFO_BANK3m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK3m_OFFSET,i,&(m._mmu_scb_aggregate_fifo_bank3),4)

/*******************************************************************************
 * End of 'MMU_SCB_AGGREGATE_FIFO_BANK3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_SCB_AGGREGATE_FIFO_BANK4
 * BLOCKS:   MMU_ITM
 * SIZE:     115
 */
/*
 * These macros can be used to access MMU_SCB_AGGREGATE_FIFO_BANK4.
 */
#define READ_MMU_SCB_AGGREGATE_FIFO_BANK4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_SCB_AGGREGATE_FIFO_BANK4m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK4m_OFFSET,i,(m._mmu_scb_aggregate_fifo_bank4),4)
#define WRITE_MMU_SCB_AGGREGATE_FIFO_BANK4m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_SCB_AGGREGATE_FIFO_BANK4m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK4m_OFFSET,i,&(m._mmu_scb_aggregate_fifo_bank4),4)

/*******************************************************************************
 * End of 'MMU_SCB_AGGREGATE_FIFO_BANK4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_SCB_AGGREGATE_FIFO_BANK5
 * BLOCKS:   MMU_ITM
 * SIZE:     115
 */
/*
 * These macros can be used to access MMU_SCB_AGGREGATE_FIFO_BANK5.
 */
#define READ_MMU_SCB_AGGREGATE_FIFO_BANK5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_SCB_AGGREGATE_FIFO_BANK5m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK5m_OFFSET,i,(m._mmu_scb_aggregate_fifo_bank5),4)
#define WRITE_MMU_SCB_AGGREGATE_FIFO_BANK5m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_SCB_AGGREGATE_FIFO_BANK5m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK5m_OFFSET,i,&(m._mmu_scb_aggregate_fifo_bank5),4)

/*******************************************************************************
 * End of 'MMU_SCB_AGGREGATE_FIFO_BANK5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_SCB_AGGREGATE_FIFO_BANK6
 * BLOCKS:   MMU_ITM
 * SIZE:     115
 */
/*
 * These macros can be used to access MMU_SCB_AGGREGATE_FIFO_BANK6.
 */
#define READ_MMU_SCB_AGGREGATE_FIFO_BANK6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_SCB_AGGREGATE_FIFO_BANK6m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK6m_OFFSET,i,(m._mmu_scb_aggregate_fifo_bank6),4)
#define WRITE_MMU_SCB_AGGREGATE_FIFO_BANK6m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_SCB_AGGREGATE_FIFO_BANK6m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK6m_OFFSET,i,&(m._mmu_scb_aggregate_fifo_bank6),4)

/*******************************************************************************
 * End of 'MMU_SCB_AGGREGATE_FIFO_BANK6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_SCB_AGGREGATE_FIFO_BANK7
 * BLOCKS:   MMU_ITM
 * SIZE:     115
 */
/*
 * These macros can be used to access MMU_SCB_AGGREGATE_FIFO_BANK7.
 */
#define READ_MMU_SCB_AGGREGATE_FIFO_BANK7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_SCB_AGGREGATE_FIFO_BANK7m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK7m_OFFSET,i,(m._mmu_scb_aggregate_fifo_bank7),4)
#define WRITE_MMU_SCB_AGGREGATE_FIFO_BANK7m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_SCB_AGGREGATE_FIFO_BANK7m_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_BANK7m_OFFSET,i,&(m._mmu_scb_aggregate_fifo_bank7),4)

/*******************************************************************************
 * End of 'MMU_SCB_AGGREGATE_FIFO_BANK7m'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_AGGREGATE_FIFO_DB
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCB_AGGREGATE_FIFO_DB.
 */
#define READ_MMU_SCB_AGGREGATE_FIFO_DBr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_AGGREGATE_FIFO_DBr_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_DBr_OFFSET,0,(r._mmu_scb_aggregate_fifo_db),1)
#define WRITE_MMU_SCB_AGGREGATE_FIFO_DBr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_AGGREGATE_FIFO_DBr_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_DBr_OFFSET,0,&(r._mmu_scb_aggregate_fifo_db),1)

/*******************************************************************************
 * End of 'MMU_SCB_AGGREGATE_FIFO_DBr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_AGGREGATE_FIFO_PIPE_DB
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCB_AGGREGATE_FIFO_PIPE_DB.
 */
#define READ_MMU_SCB_AGGREGATE_FIFO_PIPE_DBr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_AGGREGATE_FIFO_PIPE_DBr_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_PIPE_DBr_OFFSET,0,(r._mmu_scb_aggregate_fifo_pipe_db),1)
#define WRITE_MMU_SCB_AGGREGATE_FIFO_PIPE_DBr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_AGGREGATE_FIFO_PIPE_DBr_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_PIPE_DBr_OFFSET,0,&(r._mmu_scb_aggregate_fifo_pipe_db),1)

/*******************************************************************************
 * End of 'MMU_SCB_AGGREGATE_FIFO_PIPE_DBr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_AGGREGATE_FIFO_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_SCB_AGGREGATE_FIFO_STATUS.
 */
#define READ_MMU_SCB_AGGREGATE_FIFO_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_AGGREGATE_FIFO_STATUSr_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_STATUSr_OFFSET,0,(r._mmu_scb_aggregate_fifo_status),2)
#define WRITE_MMU_SCB_AGGREGATE_FIFO_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_AGGREGATE_FIFO_STATUSr_BLKACC,3,0,p,MMU_SCB_AGGREGATE_FIFO_STATUSr_OFFSET,0,&(r._mmu_scb_aggregate_fifo_status),2)

/*******************************************************************************
 * End of 'MMU_SCB_AGGREGATE_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCB_CMIC_RESERVED.
 */
#define READ_MMU_SCB_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_SCB_CMIC_RESERVEDr_OFFSET,0,(r._mmu_scb_cmic_reserved),1)
#define WRITE_MMU_SCB_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_SCB_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_scb_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_SCB_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_CPU_INT_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_SCB_CPU_INT_EN.
 */
#define READ_MMU_SCB_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_CPU_INT_ENr_BLKACC,3,0,0,MMU_SCB_CPU_INT_ENr_OFFSET,0,(r._mmu_scb_cpu_int_en),2)
#define WRITE_MMU_SCB_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_CPU_INT_ENr_BLKACC,3,0,0,MMU_SCB_CPU_INT_ENr_OFFSET,0,&(r._mmu_scb_cpu_int_en),2)

/*******************************************************************************
 * End of 'MMU_SCB_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_CPU_INT_SET
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_SCB_CPU_INT_SET.
 */
#define READ_MMU_SCB_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_CPU_INT_SETr_BLKACC,3,0,p,MMU_SCB_CPU_INT_SETr_OFFSET,0,(r._mmu_scb_cpu_int_set),2)
#define WRITE_MMU_SCB_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_CPU_INT_SETr_BLKACC,3,0,p,MMU_SCB_CPU_INT_SETr_OFFSET,0,&(r._mmu_scb_cpu_int_set),2)

/*******************************************************************************
 * End of 'MMU_SCB_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_CPU_INT_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_SCB_CPU_INT_STAT.
 */
#define READ_MMU_SCB_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_CPU_INT_STATr_BLKACC,3,0,p,MMU_SCB_CPU_INT_STATr_OFFSET,0,(r._mmu_scb_cpu_int_stat),2)
#define WRITE_MMU_SCB_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_CPU_INT_STATr_BLKACC,3,0,p,MMU_SCB_CPU_INT_STATr_OFFSET,0,&(r._mmu_scb_cpu_int_stat),2)

/*******************************************************************************
 * End of 'MMU_SCB_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_DEBUG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCB_DEBUG.
 */
#define READ_MMU_SCB_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_DEBUGr_BLKACC,3,0,p,MMU_SCB_DEBUGr_OFFSET,0,(r._mmu_scb_debug),1)
#define WRITE_MMU_SCB_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_DEBUGr_BLKACC,3,0,p,MMU_SCB_DEBUGr_OFFSET,0,&(r._mmu_scb_debug),1)

/*******************************************************************************
 * End of 'MMU_SCB_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCB_ENABLE_ECCP_MEM.
 */
#define READ_MMU_SCB_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_SCB_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_scb_enable_eccp_mem),1)
#define WRITE_MMU_SCB_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_SCB_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_scb_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_SCB_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_EN_COR_ERR_RPT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCB_EN_COR_ERR_RPT.
 */
#define READ_MMU_SCB_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_SCB_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_scb_en_cor_err_rpt),1)
#define WRITE_MMU_SCB_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_SCB_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_scb_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_SCB_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_FORCE_INIT_DONE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCB_FORCE_INIT_DONE.
 */
#define READ_MMU_SCB_FORCE_INIT_DONEr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_FORCE_INIT_DONEr_BLKACC,3,0,p,MMU_SCB_FORCE_INIT_DONEr_OFFSET,0,(r._mmu_scb_force_init_done),1)
#define WRITE_MMU_SCB_FORCE_INIT_DONEr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_FORCE_INIT_DONEr_BLKACC,3,0,p,MMU_SCB_FORCE_INIT_DONEr_OFFSET,0,&(r._mmu_scb_force_init_done),1)

/*******************************************************************************
 * End of 'MMU_SCB_FORCE_INIT_DONEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_PIPE_ACCUMULATOR_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCB_PIPE_ACCUMULATOR_STATUS.
 */
#define READ_MMU_SCB_PIPE_ACCUMULATOR_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_PIPE_ACCUMULATOR_STATUSr_BLKACC,3,0,p,MMU_SCB_PIPE_ACCUMULATOR_STATUSr_OFFSET,0,(r._mmu_scb_pipe_accumulator_status),1)
#define WRITE_MMU_SCB_PIPE_ACCUMULATOR_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_PIPE_ACCUMULATOR_STATUSr_BLKACC,3,0,p,MMU_SCB_PIPE_ACCUMULATOR_STATUSr_OFFSET,0,&(r._mmu_scb_pipe_accumulator_status),1)

/*******************************************************************************
 * End of 'MMU_SCB_PIPE_ACCUMULATOR_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_SCB_PIPE_CELL_LL
 * BLOCKS:   MMU_ITM
 * SIZE:     15
 */
/*
 * These macros can be used to access MMU_SCB_PIPE_CELL_LL.
 */
#define READ_MMU_SCB_PIPE_CELL_LLm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_SCB_PIPE_CELL_LLm_BLKACC,3,0,p,MMU_SCB_PIPE_CELL_LLm_OFFSET,i,(m._mmu_scb_pipe_cell_ll),1)
#define WRITE_MMU_SCB_PIPE_CELL_LLm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_SCB_PIPE_CELL_LLm_BLKACC,3,0,p,MMU_SCB_PIPE_CELL_LLm_OFFSET,i,&(m._mmu_scb_pipe_cell_ll),1)

/*******************************************************************************
 * End of 'MMU_SCB_PIPE_CELL_LLm'
 */




/*******************************************************************************
 * MEMORY:  MMU_SCB_PIPE_CELL_STORAGE
 * BLOCKS:   MMU_ITM
 * SIZE:     89
 */
/*
 * These macros can be used to access MMU_SCB_PIPE_CELL_STORAGE.
 */
#define READ_MMU_SCB_PIPE_CELL_STORAGEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_SCB_PIPE_CELL_STORAGEm_BLKACC,3,0,p,MMU_SCB_PIPE_CELL_STORAGEm_OFFSET,i,(m._mmu_scb_pipe_cell_storage),3)
#define WRITE_MMU_SCB_PIPE_CELL_STORAGEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_SCB_PIPE_CELL_STORAGEm_BLKACC,3,0,p,MMU_SCB_PIPE_CELL_STORAGEm_OFFSET,i,&(m._mmu_scb_pipe_cell_storage),3)

/*******************************************************************************
 * End of 'MMU_SCB_PIPE_CELL_STORAGEm'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_PIPE_CELL_STORAGE_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCB_PIPE_CELL_STORAGE_STATUS.
 */
#define READ_MMU_SCB_PIPE_CELL_STORAGE_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_PIPE_CELL_STORAGE_STATUSr_BLKACC,3,0,p,MMU_SCB_PIPE_CELL_STORAGE_STATUSr_OFFSET,0,(r._mmu_scb_pipe_cell_storage_status),1)
#define WRITE_MMU_SCB_PIPE_CELL_STORAGE_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_PIPE_CELL_STORAGE_STATUSr_BLKACC,3,0,p,MMU_SCB_PIPE_CELL_STORAGE_STATUSr_OFFSET,0,&(r._mmu_scb_pipe_cell_storage_status),1)

/*******************************************************************************
 * End of 'MMU_SCB_PIPE_CELL_STORAGE_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_SCB_PIPE_FAP
 * BLOCKS:   MMU_ITM
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_SCB_PIPE_FAP.
 */
#define READ_MMU_SCB_PIPE_FAPm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_SCB_PIPE_FAPm_BLKACC,3,0,p,MMU_SCB_PIPE_FAPm_OFFSET,i,(m._mmu_scb_pipe_fap),1)
#define WRITE_MMU_SCB_PIPE_FAPm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_SCB_PIPE_FAPm_BLKACC,3,0,p,MMU_SCB_PIPE_FAPm_OFFSET,i,&(m._mmu_scb_pipe_fap),1)

/*******************************************************************************
 * End of 'MMU_SCB_PIPE_FAPm'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_PIPE_FAP_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCB_PIPE_FAP_STATUS.
 */
#define READ_MMU_SCB_PIPE_FAP_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_PIPE_FAP_STATUSr_BLKACC,3,0,p,MMU_SCB_PIPE_FAP_STATUSr_OFFSET,0,(r._mmu_scb_pipe_fap_status),1)
#define WRITE_MMU_SCB_PIPE_FAP_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_PIPE_FAP_STATUSr_BLKACC,3,0,p,MMU_SCB_PIPE_FAP_STATUSr_OFFSET,0,&(r._mmu_scb_pipe_fap_status),1)

/*******************************************************************************
 * End of 'MMU_SCB_PIPE_FAP_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_SCB_PIPE_PDB
 * BLOCKS:   MMU_ITM
 * SIZE:     125
 */
/*
 * These macros can be used to access MMU_SCB_PIPE_PDB.
 */
#define READ_MMU_SCB_PIPE_PDBm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_SCB_PIPE_PDBm_BLKACC,3,0,p,MMU_SCB_PIPE_PDBm_OFFSET,i,(m._mmu_scb_pipe_pdb),4)
#define WRITE_MMU_SCB_PIPE_PDBm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_SCB_PIPE_PDBm_BLKACC,3,0,p,MMU_SCB_PIPE_PDBm_OFFSET,i,&(m._mmu_scb_pipe_pdb),4)

/*******************************************************************************
 * End of 'MMU_SCB_PIPE_PDBm'
 */




/*******************************************************************************
 * MEMORY:  MMU_SCB_PIPE_PKT_FIFO
 * BLOCKS:   MMU_ITM
 * SIZE:     92
 */
/*
 * These macros can be used to access MMU_SCB_PIPE_PKT_FIFO.
 */
#define READ_MMU_SCB_PIPE_PKT_FIFOm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_SCB_PIPE_PKT_FIFOm_BLKACC,3,0,p,MMU_SCB_PIPE_PKT_FIFOm_OFFSET,i,(m._mmu_scb_pipe_pkt_fifo),3)
#define WRITE_MMU_SCB_PIPE_PKT_FIFOm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_SCB_PIPE_PKT_FIFOm_BLKACC,3,0,p,MMU_SCB_PIPE_PKT_FIFOm_OFFSET,i,&(m._mmu_scb_pipe_pkt_fifo),3)

/*******************************************************************************
 * End of 'MMU_SCB_PIPE_PKT_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_PIPE_PKT_FIFO_MEM_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCB_PIPE_PKT_FIFO_MEM_STATUS.
 */
#define READ_MMU_SCB_PIPE_PKT_FIFO_MEM_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_PIPE_PKT_FIFO_MEM_STATUSr_BLKACC,3,0,p,MMU_SCB_PIPE_PKT_FIFO_MEM_STATUSr_OFFSET,0,(r._mmu_scb_pipe_pkt_fifo_mem_status),1)
#define WRITE_MMU_SCB_PIPE_PKT_FIFO_MEM_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_PIPE_PKT_FIFO_MEM_STATUSr_BLKACC,3,0,p,MMU_SCB_PIPE_PKT_FIFO_MEM_STATUSr_OFFSET,0,&(r._mmu_scb_pipe_pkt_fifo_mem_status),1)

/*******************************************************************************
 * End of 'MMU_SCB_PIPE_PKT_FIFO_MEM_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_PIPE_PKT_PREFETCH_FIFO_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCB_PIPE_PKT_PREFETCH_FIFO_STATUS.
 */
#define READ_MMU_SCB_PIPE_PKT_PREFETCH_FIFO_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_PIPE_PKT_PREFETCH_FIFO_STATUSr_BLKACC,3,0,p,MMU_SCB_PIPE_PKT_PREFETCH_FIFO_STATUSr_OFFSET,0,(r._mmu_scb_pipe_pkt_prefetch_fifo_status),1)
#define WRITE_MMU_SCB_PIPE_PKT_PREFETCH_FIFO_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_PIPE_PKT_PREFETCH_FIFO_STATUSr_BLKACC,3,0,p,MMU_SCB_PIPE_PKT_PREFETCH_FIFO_STATUSr_OFFSET,0,&(r._mmu_scb_pipe_pkt_prefetch_fifo_status),1)

/*******************************************************************************
 * End of 'MMU_SCB_PIPE_PKT_PREFETCH_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCB_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_SCB_TMBUS.
 */
#define READ_MMU_SCB_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_SCB_TMBUSr_BLKACC,3,0,0,MMU_SCB_TMBUSr_OFFSET,0,(r._mmu_scb_tmbus),2)
#define WRITE_MMU_SCB_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_SCB_TMBUSr_BLKACC,3,0,0,MMU_SCB_TMBUSr_OFFSET,0,&(r._mmu_scb_tmbus),2)

/*******************************************************************************
 * End of 'MMU_SCB_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_BSTCONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_BSTCONFIG.
 */
#define READ_MMU_THDI_BSTCONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_BSTCONFIGr_BLKACC,3,0,p,MMU_THDI_BSTCONFIGr_OFFSET,0,(r._mmu_thdi_bstconfig),1)
#define WRITE_MMU_THDI_BSTCONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_BSTCONFIGr_BLKACC,3,0,p,MMU_THDI_BSTCONFIGr_OFFSET,0,&(r._mmu_thdi_bstconfig),1)

/*******************************************************************************
 * End of 'MMU_THDI_BSTCONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_BST_HDRM_POOL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_BST_HDRM_POOL.
 */
#define READ_MMU_THDI_BST_HDRM_POOLr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_BST_HDRM_POOLr_BLKACC,3,0,0,MMU_THDI_BST_HDRM_POOLr_OFFSET,i,(r._mmu_thdi_bst_hdrm_pool),1)
#define WRITE_MMU_THDI_BST_HDRM_POOLr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_BST_HDRM_POOLr_BLKACC,3,0,0,MMU_THDI_BST_HDRM_POOLr_OFFSET,i,&(r._mmu_thdi_bst_hdrm_pool),1)

/*******************************************************************************
 * End of 'MMU_THDI_BST_HDRM_POOLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_BST_HDRM_POOL_CNT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_BST_HDRM_POOL_CNT.
 */
#define READ_MMU_THDI_BST_HDRM_POOL_CNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_BST_HDRM_POOL_CNTr_BLKACC,3,0,p,MMU_THDI_BST_HDRM_POOL_CNTr_OFFSET,i,(r._mmu_thdi_bst_hdrm_pool_cnt),1)
#define WRITE_MMU_THDI_BST_HDRM_POOL_CNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_BST_HDRM_POOL_CNTr_BLKACC,3,0,p,MMU_THDI_BST_HDRM_POOL_CNTr_OFFSET,i,&(r._mmu_thdi_bst_hdrm_pool_cnt),1)

/*******************************************************************************
 * End of 'MMU_THDI_BST_HDRM_POOL_CNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_BST_PG_HDRM_PROFILE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_BST_PG_HDRM_PROFILE.
 */
#define READ_MMU_THDI_BST_PG_HDRM_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_BST_PG_HDRM_PROFILEr_BLKACC,3,0,0,MMU_THDI_BST_PG_HDRM_PROFILEr_OFFSET,i,(r._mmu_thdi_bst_pg_hdrm_profile),1)
#define WRITE_MMU_THDI_BST_PG_HDRM_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_BST_PG_HDRM_PROFILEr_BLKACC,3,0,0,MMU_THDI_BST_PG_HDRM_PROFILEr_OFFSET,i,&(r._mmu_thdi_bst_pg_hdrm_profile),1)

/*******************************************************************************
 * End of 'MMU_THDI_BST_PG_HDRM_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_BST_PG_SHARED_PROFILE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_BST_PG_SHARED_PROFILE.
 */
#define READ_MMU_THDI_BST_PG_SHARED_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_BST_PG_SHARED_PROFILEr_BLKACC,3,0,0,MMU_THDI_BST_PG_SHARED_PROFILEr_OFFSET,i,(r._mmu_thdi_bst_pg_shared_profile),1)
#define WRITE_MMU_THDI_BST_PG_SHARED_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_BST_PG_SHARED_PROFILEr_BLKACC,3,0,0,MMU_THDI_BST_PG_SHARED_PROFILEr_OFFSET,i,&(r._mmu_thdi_bst_pg_shared_profile),1)

/*******************************************************************************
 * End of 'MMU_THDI_BST_PG_SHARED_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_BST_PORTSP_SHARED_PROFILE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_BST_PORTSP_SHARED_PROFILE.
 */
#define READ_MMU_THDI_BST_PORTSP_SHARED_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_BST_PORTSP_SHARED_PROFILEr_BLKACC,3,0,0,MMU_THDI_BST_PORTSP_SHARED_PROFILEr_OFFSET,i,(r._mmu_thdi_bst_portsp_shared_profile),1)
#define WRITE_MMU_THDI_BST_PORTSP_SHARED_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_BST_PORTSP_SHARED_PROFILEr_BLKACC,3,0,0,MMU_THDI_BST_PORTSP_SHARED_PROFILEr_OFFSET,i,&(r._mmu_thdi_bst_portsp_shared_profile),1)

/*******************************************************************************
 * End of 'MMU_THDI_BST_PORTSP_SHARED_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_BST_SP_SHARED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_BST_SP_SHARED.
 */
#define READ_MMU_THDI_BST_SP_SHAREDr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_BST_SP_SHAREDr_BLKACC,3,0,0,MMU_THDI_BST_SP_SHAREDr_OFFSET,i,(r._mmu_thdi_bst_sp_shared),1)
#define WRITE_MMU_THDI_BST_SP_SHAREDr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_BST_SP_SHAREDr_BLKACC,3,0,0,MMU_THDI_BST_SP_SHAREDr_OFFSET,i,&(r._mmu_thdi_bst_sp_shared),1)

/*******************************************************************************
 * End of 'MMU_THDI_BST_SP_SHAREDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_BST_SP_SHARED_CNT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_BST_SP_SHARED_CNT.
 */
#define READ_MMU_THDI_BST_SP_SHARED_CNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_BST_SP_SHARED_CNTr_BLKACC,3,0,p,MMU_THDI_BST_SP_SHARED_CNTr_OFFSET,i,(r._mmu_thdi_bst_sp_shared_cnt),1)
#define WRITE_MMU_THDI_BST_SP_SHARED_CNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_BST_SP_SHARED_CNTr_BLKACC,3,0,p,MMU_THDI_BST_SP_SHARED_CNTr_OFFSET,i,&(r._mmu_thdi_bst_sp_shared_cnt),1)

/*******************************************************************************
 * End of 'MMU_THDI_BST_SP_SHARED_CNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_BST_TRIGGER_STATUS_TYPE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_BST_TRIGGER_STATUS_TYPE.
 */
#define READ_MMU_THDI_BST_TRIGGER_STATUS_TYPEr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_BST_TRIGGER_STATUS_TYPEr_BLKACC,3,0,p,MMU_THDI_BST_TRIGGER_STATUS_TYPEr_OFFSET,0,(r._mmu_thdi_bst_trigger_status_type),1)
#define WRITE_MMU_THDI_BST_TRIGGER_STATUS_TYPEr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_BST_TRIGGER_STATUS_TYPEr_BLKACC,3,0,p,MMU_THDI_BST_TRIGGER_STATUS_TYPEr_OFFSET,0,&(r._mmu_thdi_bst_trigger_status_type),1)

/*******************************************************************************
 * End of 'MMU_THDI_BST_TRIGGER_STATUS_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_BUFFER_CELL_LIMIT_SP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_BUFFER_CELL_LIMIT_SP.
 */
#define READ_MMU_THDI_BUFFER_CELL_LIMIT_SPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_BUFFER_CELL_LIMIT_SPr_BLKACC,3,0,p,MMU_THDI_BUFFER_CELL_LIMIT_SPr_OFFSET,i,(r._mmu_thdi_buffer_cell_limit_sp),1)
#define WRITE_MMU_THDI_BUFFER_CELL_LIMIT_SPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_BUFFER_CELL_LIMIT_SPr_BLKACC,3,0,p,MMU_THDI_BUFFER_CELL_LIMIT_SPr_OFFSET,i,&(r._mmu_thdi_buffer_cell_limit_sp),1)

/*******************************************************************************
 * End of 'MMU_THDI_BUFFER_CELL_LIMIT_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_BYPASS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_BYPASS.
 */
#define READ_MMU_THDI_BYPASSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_BYPASSr_BLKACC,3,0,0,MMU_THDI_BYPASSr_OFFSET,0,(r._mmu_thdi_bypass),1)
#define WRITE_MMU_THDI_BYPASSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_BYPASSr_BLKACC,3,0,0,MMU_THDI_BYPASSr_OFFSET,0,&(r._mmu_thdi_bypass),1)

/*******************************************************************************
 * End of 'MMU_THDI_BYPASSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_CELL_RESET_LIMIT_OFFSET_SP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_CELL_RESET_LIMIT_OFFSET_SP.
 */
#define READ_MMU_THDI_CELL_RESET_LIMIT_OFFSET_SPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_CELL_RESET_LIMIT_OFFSET_SPr_BLKACC,3,0,p,MMU_THDI_CELL_RESET_LIMIT_OFFSET_SPr_OFFSET,i,(r._mmu_thdi_cell_reset_limit_offset_sp),1)
#define WRITE_MMU_THDI_CELL_RESET_LIMIT_OFFSET_SPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_CELL_RESET_LIMIT_OFFSET_SPr_BLKACC,3,0,p,MMU_THDI_CELL_RESET_LIMIT_OFFSET_SPr_OFFSET,i,&(r._mmu_thdi_cell_reset_limit_offset_sp),1)

/*******************************************************************************
 * End of 'MMU_THDI_CELL_RESET_LIMIT_OFFSET_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_CELL_SPAP_RED_OFFSET_SP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_CELL_SPAP_RED_OFFSET_SP.
 */
#define READ_MMU_THDI_CELL_SPAP_RED_OFFSET_SPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_CELL_SPAP_RED_OFFSET_SPr_BLKACC,3,0,p,MMU_THDI_CELL_SPAP_RED_OFFSET_SPr_OFFSET,i,(r._mmu_thdi_cell_spap_red_offset_sp),1)
#define WRITE_MMU_THDI_CELL_SPAP_RED_OFFSET_SPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_CELL_SPAP_RED_OFFSET_SPr_BLKACC,3,0,p,MMU_THDI_CELL_SPAP_RED_OFFSET_SPr_OFFSET,i,&(r._mmu_thdi_cell_spap_red_offset_sp),1)

/*******************************************************************************
 * End of 'MMU_THDI_CELL_SPAP_RED_OFFSET_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_CELL_SPAP_YELLOW_OFFSET_SP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_CELL_SPAP_YELLOW_OFFSET_SP.
 */
#define READ_MMU_THDI_CELL_SPAP_YELLOW_OFFSET_SPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_CELL_SPAP_YELLOW_OFFSET_SPr_BLKACC,3,0,p,MMU_THDI_CELL_SPAP_YELLOW_OFFSET_SPr_OFFSET,i,(r._mmu_thdi_cell_spap_yellow_offset_sp),1)
#define WRITE_MMU_THDI_CELL_SPAP_YELLOW_OFFSET_SPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_CELL_SPAP_YELLOW_OFFSET_SPr_BLKACC,3,0,p,MMU_THDI_CELL_SPAP_YELLOW_OFFSET_SPr_OFFSET,i,&(r._mmu_thdi_cell_spap_yellow_offset_sp),1)

/*******************************************************************************
 * End of 'MMU_THDI_CELL_SPAP_YELLOW_OFFSET_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_CMIC_RESERVED.
 */
#define READ_MMU_THDI_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_THDI_CMIC_RESERVEDr_OFFSET,0,(r._mmu_thdi_cmic_reserved),1)
#define WRITE_MMU_THDI_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_THDI_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_thdi_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_THDI_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_CPU_INT_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_CPU_INT_EN.
 */
#define READ_MMU_THDI_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_CPU_INT_ENr_BLKACC,3,0,0,MMU_THDI_CPU_INT_ENr_OFFSET,0,(r._mmu_thdi_cpu_int_en),1)
#define WRITE_MMU_THDI_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_CPU_INT_ENr_BLKACC,3,0,0,MMU_THDI_CPU_INT_ENr_OFFSET,0,&(r._mmu_thdi_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_THDI_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_CPU_INT_EN_INST
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_CPU_INT_EN_INST.
 */
#define READ_MMU_THDI_CPU_INT_EN_INSTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_CPU_INT_EN_INSTr_BLKACC,3,0,0,MMU_THDI_CPU_INT_EN_INSTr_OFFSET,0,(r._mmu_thdi_cpu_int_en_inst),1)
#define WRITE_MMU_THDI_CPU_INT_EN_INSTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_CPU_INT_EN_INSTr_BLKACC,3,0,0,MMU_THDI_CPU_INT_EN_INSTr_OFFSET,0,&(r._mmu_thdi_cpu_int_en_inst),1)

/*******************************************************************************
 * End of 'MMU_THDI_CPU_INT_EN_INSTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_CPU_INT_SET
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_CPU_INT_SET.
 */
#define READ_MMU_THDI_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_CPU_INT_SETr_BLKACC,3,0,p,MMU_THDI_CPU_INT_SETr_OFFSET,0,(r._mmu_thdi_cpu_int_set),1)
#define WRITE_MMU_THDI_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_CPU_INT_SETr_BLKACC,3,0,p,MMU_THDI_CPU_INT_SETr_OFFSET,0,&(r._mmu_thdi_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_THDI_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_CPU_INT_SET_INST
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_CPU_INT_SET_INST.
 */
#define READ_MMU_THDI_CPU_INT_SET_INSTr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_CPU_INT_SET_INSTr_BLKACC,3,0,p,MMU_THDI_CPU_INT_SET_INSTr_OFFSET,0,(r._mmu_thdi_cpu_int_set_inst),1)
#define WRITE_MMU_THDI_CPU_INT_SET_INSTr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_CPU_INT_SET_INSTr_BLKACC,3,0,p,MMU_THDI_CPU_INT_SET_INSTr_OFFSET,0,&(r._mmu_thdi_cpu_int_set_inst),1)

/*******************************************************************************
 * End of 'MMU_THDI_CPU_INT_SET_INSTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_CPU_INT_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_CPU_INT_STAT.
 */
#define READ_MMU_THDI_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_CPU_INT_STATr_BLKACC,3,0,p,MMU_THDI_CPU_INT_STATr_OFFSET,0,(r._mmu_thdi_cpu_int_stat),1)
#define WRITE_MMU_THDI_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_CPU_INT_STATr_BLKACC,3,0,p,MMU_THDI_CPU_INT_STATr_OFFSET,0,&(r._mmu_thdi_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_THDI_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_CPU_INT_STAT_INST
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_CPU_INT_STAT_INST.
 */
#define READ_MMU_THDI_CPU_INT_STAT_INSTr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_CPU_INT_STAT_INSTr_BLKACC,3,0,p,MMU_THDI_CPU_INT_STAT_INSTr_OFFSET,0,(r._mmu_thdi_cpu_int_stat_inst),1)
#define WRITE_MMU_THDI_CPU_INT_STAT_INSTr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_CPU_INT_STAT_INSTr_BLKACC,3,0,p,MMU_THDI_CPU_INT_STAT_INSTr_OFFSET,0,&(r._mmu_thdi_cpu_int_stat_inst),1)

/*******************************************************************************
 * End of 'MMU_THDI_CPU_INT_STAT_INSTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_CPU_SPID_OVERRIDE_CTRL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_CPU_SPID_OVERRIDE_CTRL.
 */
#define READ_MMU_THDI_CPU_SPID_OVERRIDE_CTRLr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_CPU_SPID_OVERRIDE_CTRLr_BLKACC,3,0,0,MMU_THDI_CPU_SPID_OVERRIDE_CTRLr_OFFSET,0,(r._mmu_thdi_cpu_spid_override_ctrl),1)
#define WRITE_MMU_THDI_CPU_SPID_OVERRIDE_CTRLr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_CPU_SPID_OVERRIDE_CTRLr_BLKACC,3,0,0,MMU_THDI_CPU_SPID_OVERRIDE_CTRLr_OFFSET,0,&(r._mmu_thdi_cpu_spid_override_ctrl),1)

/*******************************************************************************
 * End of 'MMU_THDI_CPU_SPID_OVERRIDE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_ENABLE_ECCP_MEM.
 */
#define READ_MMU_THDI_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_THDI_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_thdi_enable_eccp_mem),1)
#define WRITE_MMU_THDI_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_THDI_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_thdi_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_THDI_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_EN_COR_ERR_RPT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_EN_COR_ERR_RPT.
 */
#define READ_MMU_THDI_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_THDI_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_thdi_en_cor_err_rpt),1)
#define WRITE_MMU_THDI_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_THDI_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_thdi_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_THDI_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_FLOW_CONTROL_XOFF_STATE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_FLOW_CONTROL_XOFF_STATE.
 */
#define READ_MMU_THDI_FLOW_CONTROL_XOFF_STATEr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_FLOW_CONTROL_XOFF_STATEr_BLKACC,3,0,p,MMU_THDI_FLOW_CONTROL_XOFF_STATEr_OFFSET,0,(r._mmu_thdi_flow_control_xoff_state),1)
#define WRITE_MMU_THDI_FLOW_CONTROL_XOFF_STATEr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_FLOW_CONTROL_XOFF_STATEr_BLKACC,3,0,p,MMU_THDI_FLOW_CONTROL_XOFF_STATEr_OFFSET,0,&(r._mmu_thdi_flow_control_xoff_state),1)

/*******************************************************************************
 * End of 'MMU_THDI_FLOW_CONTROL_XOFF_STATEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_HDRM_BUFFER_CELL_LIMIT_HP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_HDRM_BUFFER_CELL_LIMIT_HP.
 */
#define READ_MMU_THDI_HDRM_BUFFER_CELL_LIMIT_HPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_HDRM_BUFFER_CELL_LIMIT_HPr_BLKACC,3,0,p,MMU_THDI_HDRM_BUFFER_CELL_LIMIT_HPr_OFFSET,i,(r._mmu_thdi_hdrm_buffer_cell_limit_hp),1)
#define WRITE_MMU_THDI_HDRM_BUFFER_CELL_LIMIT_HPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_HDRM_BUFFER_CELL_LIMIT_HPr_BLKACC,3,0,p,MMU_THDI_HDRM_BUFFER_CELL_LIMIT_HPr_OFFSET,i,&(r._mmu_thdi_hdrm_buffer_cell_limit_hp),1)

/*******************************************************************************
 * End of 'MMU_THDI_HDRM_BUFFER_CELL_LIMIT_HPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_HDRM_POOL_COUNT_HP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_HDRM_POOL_COUNT_HP.
 */
#define READ_MMU_THDI_HDRM_POOL_COUNT_HPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_HDRM_POOL_COUNT_HPr_BLKACC,3,0,p,MMU_THDI_HDRM_POOL_COUNT_HPr_OFFSET,i,(r._mmu_thdi_hdrm_pool_count_hp),1)
#define WRITE_MMU_THDI_HDRM_POOL_COUNT_HPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_HDRM_POOL_COUNT_HPr_BLKACC,3,0,p,MMU_THDI_HDRM_POOL_COUNT_HPr_OFFSET,i,&(r._mmu_thdi_hdrm_pool_count_hp),1)

/*******************************************************************************
 * End of 'MMU_THDI_HDRM_POOL_COUNT_HPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_HDRM_POOL_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_HDRM_POOL_STATUS.
 */
#define READ_MMU_THDI_HDRM_POOL_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_HDRM_POOL_STATUSr_BLKACC,3,0,p,MMU_THDI_HDRM_POOL_STATUSr_OFFSET,0,(r._mmu_thdi_hdrm_pool_status),1)
#define WRITE_MMU_THDI_HDRM_POOL_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_HDRM_POOL_STATUSr_BLKACC,3,0,p,MMU_THDI_HDRM_POOL_STATUSr_OFFSET,0,&(r._mmu_thdi_hdrm_pool_status),1)

/*******************************************************************************
 * End of 'MMU_THDI_HDRM_POOL_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_ING_PORT_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_ING_PORT_CONFIG.
 */
#define READ_MMU_THDI_ING_PORT_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_ING_PORT_CONFIGr_BLKACC,3,0,p,MMU_THDI_ING_PORT_CONFIGr_OFFSET,0,(r._mmu_thdi_ing_port_config),1)
#define WRITE_MMU_THDI_ING_PORT_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_ING_PORT_CONFIGr_BLKACC,3,0,p,MMU_THDI_ING_PORT_CONFIGr_OFFSET,0,&(r._mmu_thdi_ing_port_config),1)

/*******************************************************************************
 * End of 'MMU_THDI_ING_PORT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_LOSSLESS_PG_DROP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_LOSSLESS_PG_DROP.
 */
#define READ_MMU_THDI_LOSSLESS_PG_DROPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_LOSSLESS_PG_DROPr_BLKACC,3,0,p,MMU_THDI_LOSSLESS_PG_DROPr_OFFSET,0,(r._mmu_thdi_lossless_pg_drop),1)
#define WRITE_MMU_THDI_LOSSLESS_PG_DROPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_LOSSLESS_PG_DROPr_BLKACC,3,0,p,MMU_THDI_LOSSLESS_PG_DROPr_OFFSET,0,&(r._mmu_thdi_lossless_pg_drop),1)

/*******************************************************************************
 * End of 'MMU_THDI_LOSSLESS_PG_DROPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_MC_SPID_OVERRIDE_CTRL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_MC_SPID_OVERRIDE_CTRL.
 */
#define READ_MMU_THDI_MC_SPID_OVERRIDE_CTRLr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_MC_SPID_OVERRIDE_CTRLr_BLKACC,3,0,0,MMU_THDI_MC_SPID_OVERRIDE_CTRLr_OFFSET,0,(r._mmu_thdi_mc_spid_override_ctrl),1)
#define WRITE_MMU_THDI_MC_SPID_OVERRIDE_CTRLr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_MC_SPID_OVERRIDE_CTRLr_BLKACC,3,0,0,MMU_THDI_MC_SPID_OVERRIDE_CTRLr_OFFSET,0,&(r._mmu_thdi_mc_spid_override_ctrl),1)

/*******************************************************************************
 * End of 'MMU_THDI_MC_SPID_OVERRIDE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_MEM_INIT_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_MEM_INIT_STATUS.
 */
#define READ_MMU_THDI_MEM_INIT_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_MEM_INIT_STATUSr_BLKACC,3,0,p,MMU_THDI_MEM_INIT_STATUSr_OFFSET,0,(r._mmu_thdi_mem_init_status),1)
#define WRITE_MMU_THDI_MEM_INIT_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_MEM_INIT_STATUSr_BLKACC,3,0,p,MMU_THDI_MEM_INIT_STATUSr_OFFSET,0,&(r._mmu_thdi_mem_init_status),1)

/*******************************************************************************
 * End of 'MMU_THDI_MEM_INIT_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_MIRROR_SPID_OVERRIDE_CTRL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_MIRROR_SPID_OVERRIDE_CTRL.
 */
#define READ_MMU_THDI_MIRROR_SPID_OVERRIDE_CTRLr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_MIRROR_SPID_OVERRIDE_CTRLr_BLKACC,3,0,0,MMU_THDI_MIRROR_SPID_OVERRIDE_CTRLr_OFFSET,0,(r._mmu_thdi_mirror_spid_override_ctrl),1)
#define WRITE_MMU_THDI_MIRROR_SPID_OVERRIDE_CTRLr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_MIRROR_SPID_OVERRIDE_CTRLr_BLKACC,3,0,0,MMU_THDI_MIRROR_SPID_OVERRIDE_CTRLr_OFFSET,0,&(r._mmu_thdi_mirror_spid_override_ctrl),1)

/*******************************************************************************
 * End of 'MMU_THDI_MIRROR_SPID_OVERRIDE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_NONUC_INPPRI_PG_PROFILE
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDI_NONUC_INPPRI_PG_PROFILE.
 */
#define READ_MMU_THDI_NONUC_INPPRI_PG_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_NONUC_INPPRI_PG_PROFILEr_BLKACC,3,0,0,MMU_THDI_NONUC_INPPRI_PG_PROFILEr_OFFSET,i,(r._mmu_thdi_nonuc_inppri_pg_profile),2)
#define WRITE_MMU_THDI_NONUC_INPPRI_PG_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_NONUC_INPPRI_PG_PROFILEr_BLKACC,3,0,0,MMU_THDI_NONUC_INPPRI_PG_PROFILEr_OFFSET,i,&(r._mmu_thdi_nonuc_inppri_pg_profile),2)

/*******************************************************************************
 * End of 'MMU_THDI_NONUC_INPPRI_PG_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_PFCPRI_PG_PROFILE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_PFCPRI_PG_PROFILE.
 */
#define READ_MMU_THDI_PFCPRI_PG_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_PFCPRI_PG_PROFILEr_BLKACC,3,0,0,MMU_THDI_PFCPRI_PG_PROFILEr_OFFSET,i,(r._mmu_thdi_pfcpri_pg_profile),1)
#define WRITE_MMU_THDI_PFCPRI_PG_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_PFCPRI_PG_PROFILEr_BLKACC,3,0,0,MMU_THDI_PFCPRI_PG_PROFILEr_OFFSET,i,&(r._mmu_thdi_pfcpri_pg_profile),1)

/*******************************************************************************
 * End of 'MMU_THDI_PFCPRI_PG_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_PG_PROFILE
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDI_PG_PROFILE.
 */
#define READ_MMU_THDI_PG_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_PG_PROFILEr_BLKACC,3,0,0,MMU_THDI_PG_PROFILEr_OFFSET,i,(r._mmu_thdi_pg_profile),2)
#define WRITE_MMU_THDI_PG_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_PG_PROFILEr_BLKACC,3,0,0,MMU_THDI_PG_PROFILEr_OFFSET,i,&(r._mmu_thdi_pg_profile),2)

/*******************************************************************************
 * End of 'MMU_THDI_PG_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_PIPE_COUNTER_OVERFLOW_ID
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_PIPE_COUNTER_OVERFLOW_ID.
 */
#define READ_MMU_THDI_PIPE_COUNTER_OVERFLOW_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_PIPE_COUNTER_OVERFLOW_IDr_BLKACC,3,0,p,MMU_THDI_PIPE_COUNTER_OVERFLOW_IDr_OFFSET,0,(r._mmu_thdi_pipe_counter_overflow_id),1)
#define WRITE_MMU_THDI_PIPE_COUNTER_OVERFLOW_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_PIPE_COUNTER_OVERFLOW_IDr_BLKACC,3,0,p,MMU_THDI_PIPE_COUNTER_OVERFLOW_IDr_OFFSET,0,&(r._mmu_thdi_pipe_counter_overflow_id),1)

/*******************************************************************************
 * End of 'MMU_THDI_PIPE_COUNTER_OVERFLOW_IDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_PIPE_COUNTER_UNDERFLOW_ID
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_PIPE_COUNTER_UNDERFLOW_ID.
 */
#define READ_MMU_THDI_PIPE_COUNTER_UNDERFLOW_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_PIPE_COUNTER_UNDERFLOW_IDr_BLKACC,3,0,p,MMU_THDI_PIPE_COUNTER_UNDERFLOW_IDr_OFFSET,0,(r._mmu_thdi_pipe_counter_underflow_id),1)
#define WRITE_MMU_THDI_PIPE_COUNTER_UNDERFLOW_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_PIPE_COUNTER_UNDERFLOW_IDr_BLKACC,3,0,p,MMU_THDI_PIPE_COUNTER_UNDERFLOW_IDr_OFFSET,0,&(r._mmu_thdi_pipe_counter_underflow_id),1)

/*******************************************************************************
 * End of 'MMU_THDI_PIPE_COUNTER_UNDERFLOW_IDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_POOL_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_POOL_CONFIG.
 */
#define READ_MMU_THDI_POOL_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_POOL_CONFIGr_BLKACC,3,0,p,MMU_THDI_POOL_CONFIGr_OFFSET,0,(r._mmu_thdi_pool_config),1)
#define WRITE_MMU_THDI_POOL_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_POOL_CONFIGr_BLKACC,3,0,p,MMU_THDI_POOL_CONFIGr_OFFSET,0,&(r._mmu_thdi_pool_config),1)

/*******************************************************************************
 * End of 'MMU_THDI_POOL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_POOL_COUNTER_OVERFLOW_ID
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_POOL_COUNTER_OVERFLOW_ID.
 */
#define READ_MMU_THDI_POOL_COUNTER_OVERFLOW_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_POOL_COUNTER_OVERFLOW_IDr_BLKACC,3,0,p,MMU_THDI_POOL_COUNTER_OVERFLOW_IDr_OFFSET,0,(r._mmu_thdi_pool_counter_overflow_id),1)
#define WRITE_MMU_THDI_POOL_COUNTER_OVERFLOW_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_POOL_COUNTER_OVERFLOW_IDr_BLKACC,3,0,p,MMU_THDI_POOL_COUNTER_OVERFLOW_IDr_OFFSET,0,&(r._mmu_thdi_pool_counter_overflow_id),1)

/*******************************************************************************
 * End of 'MMU_THDI_POOL_COUNTER_OVERFLOW_IDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_POOL_COUNTER_UNDERFLOW_ID
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_POOL_COUNTER_UNDERFLOW_ID.
 */
#define READ_MMU_THDI_POOL_COUNTER_UNDERFLOW_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_POOL_COUNTER_UNDERFLOW_IDr_BLKACC,3,0,p,MMU_THDI_POOL_COUNTER_UNDERFLOW_IDr_OFFSET,0,(r._mmu_thdi_pool_counter_underflow_id),1)
#define WRITE_MMU_THDI_POOL_COUNTER_UNDERFLOW_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_POOL_COUNTER_UNDERFLOW_IDr_BLKACC,3,0,p,MMU_THDI_POOL_COUNTER_UNDERFLOW_IDr_OFFSET,0,&(r._mmu_thdi_pool_counter_underflow_id),1)

/*******************************************************************************
 * End of 'MMU_THDI_POOL_COUNTER_UNDERFLOW_IDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_POOL_DROP_COUNT_HP
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDI_POOL_DROP_COUNT_HP.
 */
#define READ_MMU_THDI_POOL_DROP_COUNT_HPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_POOL_DROP_COUNT_HPr_BLKACC,3,0,p,MMU_THDI_POOL_DROP_COUNT_HPr_OFFSET,i,(r._mmu_thdi_pool_drop_count_hp),2)
#define WRITE_MMU_THDI_POOL_DROP_COUNT_HPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_POOL_DROP_COUNT_HPr_BLKACC,3,0,p,MMU_THDI_POOL_DROP_COUNT_HPr_OFFSET,i,&(r._mmu_thdi_pool_drop_count_hp),2)

/*******************************************************************************
 * End of 'MMU_THDI_POOL_DROP_COUNT_HPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_POOL_DROP_STATE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_POOL_DROP_STATE.
 */
#define READ_MMU_THDI_POOL_DROP_STATEr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_POOL_DROP_STATEr_BLKACC,3,0,p,MMU_THDI_POOL_DROP_STATEr_OFFSET,0,(r._mmu_thdi_pool_drop_state),1)
#define WRITE_MMU_THDI_POOL_DROP_STATEr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_POOL_DROP_STATEr_BLKACC,3,0,p,MMU_THDI_POOL_DROP_STATEr_OFFSET,0,&(r._mmu_thdi_pool_drop_state),1)

/*******************************************************************************
 * End of 'MMU_THDI_POOL_DROP_STATEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_POOL_SHARED_COUNT_SP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_POOL_SHARED_COUNT_SP.
 */
#define READ_MMU_THDI_POOL_SHARED_COUNT_SPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_POOL_SHARED_COUNT_SPr_BLKACC,3,0,p,MMU_THDI_POOL_SHARED_COUNT_SPr_OFFSET,i,(r._mmu_thdi_pool_shared_count_sp),1)
#define WRITE_MMU_THDI_POOL_SHARED_COUNT_SPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_POOL_SHARED_COUNT_SPr_BLKACC,3,0,p,MMU_THDI_POOL_SHARED_COUNT_SPr_OFFSET,i,&(r._mmu_thdi_pool_shared_count_sp),1)

/*******************************************************************************
 * End of 'MMU_THDI_POOL_SHARED_COUNT_SPr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORTSP_BST
 * BLOCKS:   MMU_ITM
 * SIZE:     80
 */
/*
 * These macros can be used to access MMU_THDI_PORTSP_BST.
 */
#define READ_MMU_THDI_PORTSP_BSTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORTSP_BSTm_BLKACC,3,0,p,MMU_THDI_PORTSP_BSTm_OFFSET,i,(m._mmu_thdi_portsp_bst),3)
#define WRITE_MMU_THDI_PORTSP_BSTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORTSP_BSTm_BLKACC,3,0,p,MMU_THDI_PORTSP_BSTm_OFFSET,i,&(m._mmu_thdi_portsp_bst),3)

/*******************************************************************************
 * End of 'MMU_THDI_PORTSP_BSTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORTSP_CONFIG1
 * BLOCKS:   MMU_ITM
 * SIZE:     225
 */
/*
 * These macros can be used to access MMU_THDI_PORTSP_CONFIG1.
 */
#define READ_MMU_THDI_PORTSP_CONFIG1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORTSP_CONFIG1m_BLKACC,3,0,p,MMU_THDI_PORTSP_CONFIG1m_OFFSET,i,(m._mmu_thdi_portsp_config1),8)
#define WRITE_MMU_THDI_PORTSP_CONFIG1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORTSP_CONFIG1m_BLKACC,3,0,p,MMU_THDI_PORTSP_CONFIG1m_OFFSET,i,&(m._mmu_thdi_portsp_config1),8)

/*******************************************************************************
 * End of 'MMU_THDI_PORTSP_CONFIG1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORTSP_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     225
 */
/*
 * These macros can be used to access MMU_THDI_PORTSP_CONFIG.
 */
#define READ_MMU_THDI_PORTSP_CONFIGm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORTSP_CONFIGm_BLKACC,3,0,p,MMU_THDI_PORTSP_CONFIGm_OFFSET,i,(m._mmu_thdi_portsp_config),8)
#define WRITE_MMU_THDI_PORTSP_CONFIGm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORTSP_CONFIGm_BLKACC,3,0,p,MMU_THDI_PORTSP_CONFIGm_OFFSET,i,&(m._mmu_thdi_portsp_config),8)

/*******************************************************************************
 * End of 'MMU_THDI_PORTSP_CONFIGm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORTSP_COUNTER
 * BLOCKS:   MMU_ITM
 * SIZE:     153
 */
/*
 * These macros can be used to access MMU_THDI_PORTSP_COUNTER.
 */
#define READ_MMU_THDI_PORTSP_COUNTERm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORTSP_COUNTERm_BLKACC,3,0,p,MMU_THDI_PORTSP_COUNTERm_OFFSET,i,(m._mmu_thdi_portsp_counter),5)
#define WRITE_MMU_THDI_PORTSP_COUNTERm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORTSP_COUNTERm_BLKACC,3,0,p,MMU_THDI_PORTSP_COUNTERm_OFFSET,i,&(m._mmu_thdi_portsp_counter),5)

/*******************************************************************************
 * End of 'MMU_THDI_PORTSP_COUNTERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORT_BST_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     68
 */
/*
 * These macros can be used to access MMU_THDI_PORT_BST_CONFIG.
 */
#define READ_MMU_THDI_PORT_BST_CONFIGm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORT_BST_CONFIGm_BLKACC,3,0,p,MMU_THDI_PORT_BST_CONFIGm_OFFSET,i,(m._mmu_thdi_port_bst_config),3)
#define WRITE_MMU_THDI_PORT_BST_CONFIGm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORT_BST_CONFIGm_BLKACC,3,0,p,MMU_THDI_PORT_BST_CONFIGm_OFFSET,i,&(m._mmu_thdi_port_bst_config),3)

/*******************************************************************************
 * End of 'MMU_THDI_PORT_BST_CONFIGm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_PORT_LIMIT_STATES
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_PORT_LIMIT_STATES.
 */
#define READ_MMU_THDI_PORT_LIMIT_STATESr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_PORT_LIMIT_STATESr_BLKACC,3,0,p,MMU_THDI_PORT_LIMIT_STATESr_OFFSET,0,(r._mmu_thdi_port_limit_states),1)
#define WRITE_MMU_THDI_PORT_LIMIT_STATESr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_PORT_LIMIT_STATESr_BLKACC,3,0,p,MMU_THDI_PORT_LIMIT_STATESr_OFFSET,0,&(r._mmu_thdi_port_limit_states),1)

/*******************************************************************************
 * End of 'MMU_THDI_PORT_LIMIT_STATESr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORT_PG_HDRM_BST
 * BLOCKS:   MMU_ITM
 * SIZE:     153
 */
/*
 * These macros can be used to access MMU_THDI_PORT_PG_HDRM_BST.
 */
#define READ_MMU_THDI_PORT_PG_HDRM_BSTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORT_PG_HDRM_BSTm_BLKACC,3,0,p,MMU_THDI_PORT_PG_HDRM_BSTm_OFFSET,i,(m._mmu_thdi_port_pg_hdrm_bst),5)
#define WRITE_MMU_THDI_PORT_PG_HDRM_BSTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORT_PG_HDRM_BSTm_BLKACC,3,0,p,MMU_THDI_PORT_PG_HDRM_BSTm_OFFSET,i,&(m._mmu_thdi_port_pg_hdrm_bst),5)

/*******************************************************************************
 * End of 'MMU_THDI_PORT_PG_HDRM_BSTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORT_PG_HDRM_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     153
 */
/*
 * These macros can be used to access MMU_THDI_PORT_PG_HDRM_CONFIG.
 */
#define READ_MMU_THDI_PORT_PG_HDRM_CONFIGm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORT_PG_HDRM_CONFIGm_BLKACC,3,0,p,MMU_THDI_PORT_PG_HDRM_CONFIGm_OFFSET,i,(m._mmu_thdi_port_pg_hdrm_config),5)
#define WRITE_MMU_THDI_PORT_PG_HDRM_CONFIGm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORT_PG_HDRM_CONFIGm_BLKACC,3,0,p,MMU_THDI_PORT_PG_HDRM_CONFIGm_OFFSET,i,&(m._mmu_thdi_port_pg_hdrm_config),5)

/*******************************************************************************
 * End of 'MMU_THDI_PORT_PG_HDRM_CONFIGm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORT_PG_HDRM_COUNTER
 * BLOCKS:   MMU_ITM
 * SIZE:     153
 */
/*
 * These macros can be used to access MMU_THDI_PORT_PG_HDRM_COUNTER.
 */
#define READ_MMU_THDI_PORT_PG_HDRM_COUNTERm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORT_PG_HDRM_COUNTERm_BLKACC,3,0,p,MMU_THDI_PORT_PG_HDRM_COUNTERm_OFFSET,i,(m._mmu_thdi_port_pg_hdrm_counter),5)
#define WRITE_MMU_THDI_PORT_PG_HDRM_COUNTERm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORT_PG_HDRM_COUNTERm_BLKACC,3,0,p,MMU_THDI_PORT_PG_HDRM_COUNTERm_OFFSET,i,&(m._mmu_thdi_port_pg_hdrm_counter),5)

/*******************************************************************************
 * End of 'MMU_THDI_PORT_PG_HDRM_COUNTERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORT_PG_MIN_CONFIG1
 * BLOCKS:   MMU_ITM
 * SIZE:     161
 */
/*
 * These macros can be used to access MMU_THDI_PORT_PG_MIN_CONFIG1.
 */
#define READ_MMU_THDI_PORT_PG_MIN_CONFIG1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORT_PG_MIN_CONFIG1m_BLKACC,3,0,p,MMU_THDI_PORT_PG_MIN_CONFIG1m_OFFSET,i,(m._mmu_thdi_port_pg_min_config1),6)
#define WRITE_MMU_THDI_PORT_PG_MIN_CONFIG1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORT_PG_MIN_CONFIG1m_BLKACC,3,0,p,MMU_THDI_PORT_PG_MIN_CONFIG1m_OFFSET,i,&(m._mmu_thdi_port_pg_min_config1),6)

/*******************************************************************************
 * End of 'MMU_THDI_PORT_PG_MIN_CONFIG1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORT_PG_MIN_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     161
 */
/*
 * These macros can be used to access MMU_THDI_PORT_PG_MIN_CONFIG.
 */
#define READ_MMU_THDI_PORT_PG_MIN_CONFIGm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORT_PG_MIN_CONFIGm_BLKACC,3,0,p,MMU_THDI_PORT_PG_MIN_CONFIGm_OFFSET,i,(m._mmu_thdi_port_pg_min_config),6)
#define WRITE_MMU_THDI_PORT_PG_MIN_CONFIGm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORT_PG_MIN_CONFIGm_BLKACC,3,0,p,MMU_THDI_PORT_PG_MIN_CONFIGm_OFFSET,i,&(m._mmu_thdi_port_pg_min_config),6)

/*******************************************************************************
 * End of 'MMU_THDI_PORT_PG_MIN_CONFIGm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORT_PG_MIN_COUNTER
 * BLOCKS:   MMU_ITM
 * SIZE:     153
 */
/*
 * These macros can be used to access MMU_THDI_PORT_PG_MIN_COUNTER.
 */
#define READ_MMU_THDI_PORT_PG_MIN_COUNTERm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORT_PG_MIN_COUNTERm_BLKACC,3,0,p,MMU_THDI_PORT_PG_MIN_COUNTERm_OFFSET,i,(m._mmu_thdi_port_pg_min_counter),5)
#define WRITE_MMU_THDI_PORT_PG_MIN_COUNTERm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORT_PG_MIN_COUNTERm_BLKACC,3,0,p,MMU_THDI_PORT_PG_MIN_COUNTERm_OFFSET,i,&(m._mmu_thdi_port_pg_min_counter),5)

/*******************************************************************************
 * End of 'MMU_THDI_PORT_PG_MIN_COUNTERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORT_PG_RESUME_CONFIG1
 * BLOCKS:   MMU_ITM
 * SIZE:     306
 */
/*
 * These macros can be used to access MMU_THDI_PORT_PG_RESUME_CONFIG1.
 */
#define READ_MMU_THDI_PORT_PG_RESUME_CONFIG1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORT_PG_RESUME_CONFIG1m_BLKACC,3,0,p,MMU_THDI_PORT_PG_RESUME_CONFIG1m_OFFSET,i,(m._mmu_thdi_port_pg_resume_config1),10)
#define WRITE_MMU_THDI_PORT_PG_RESUME_CONFIG1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORT_PG_RESUME_CONFIG1m_BLKACC,3,0,p,MMU_THDI_PORT_PG_RESUME_CONFIG1m_OFFSET,i,&(m._mmu_thdi_port_pg_resume_config1),10)

/*******************************************************************************
 * End of 'MMU_THDI_PORT_PG_RESUME_CONFIG1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORT_PG_RESUME_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     306
 */
/*
 * These macros can be used to access MMU_THDI_PORT_PG_RESUME_CONFIG.
 */
#define READ_MMU_THDI_PORT_PG_RESUME_CONFIGm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORT_PG_RESUME_CONFIGm_BLKACC,3,0,p,MMU_THDI_PORT_PG_RESUME_CONFIGm_OFFSET,i,(m._mmu_thdi_port_pg_resume_config),10)
#define WRITE_MMU_THDI_PORT_PG_RESUME_CONFIGm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORT_PG_RESUME_CONFIGm_BLKACC,3,0,p,MMU_THDI_PORT_PG_RESUME_CONFIGm_OFFSET,i,&(m._mmu_thdi_port_pg_resume_config),10)

/*******************************************************************************
 * End of 'MMU_THDI_PORT_PG_RESUME_CONFIGm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORT_PG_SHARED_BST
 * BLOCKS:   MMU_ITM
 * SIZE:     153
 */
/*
 * These macros can be used to access MMU_THDI_PORT_PG_SHARED_BST.
 */
#define READ_MMU_THDI_PORT_PG_SHARED_BSTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORT_PG_SHARED_BSTm_BLKACC,3,0,p,MMU_THDI_PORT_PG_SHARED_BSTm_OFFSET,i,(m._mmu_thdi_port_pg_shared_bst),5)
#define WRITE_MMU_THDI_PORT_PG_SHARED_BSTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORT_PG_SHARED_BSTm_BLKACC,3,0,p,MMU_THDI_PORT_PG_SHARED_BSTm_OFFSET,i,&(m._mmu_thdi_port_pg_shared_bst),5)

/*******************************************************************************
 * End of 'MMU_THDI_PORT_PG_SHARED_BSTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORT_PG_SHARED_CONFIG1
 * BLOCKS:   MMU_ITM
 * SIZE:     161
 */
/*
 * These macros can be used to access MMU_THDI_PORT_PG_SHARED_CONFIG1.
 */
#define READ_MMU_THDI_PORT_PG_SHARED_CONFIG1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORT_PG_SHARED_CONFIG1m_BLKACC,3,0,p,MMU_THDI_PORT_PG_SHARED_CONFIG1m_OFFSET,i,(m._mmu_thdi_port_pg_shared_config1),6)
#define WRITE_MMU_THDI_PORT_PG_SHARED_CONFIG1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORT_PG_SHARED_CONFIG1m_BLKACC,3,0,p,MMU_THDI_PORT_PG_SHARED_CONFIG1m_OFFSET,i,&(m._mmu_thdi_port_pg_shared_config1),6)

/*******************************************************************************
 * End of 'MMU_THDI_PORT_PG_SHARED_CONFIG1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORT_PG_SHARED_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     161
 */
/*
 * These macros can be used to access MMU_THDI_PORT_PG_SHARED_CONFIG.
 */
#define READ_MMU_THDI_PORT_PG_SHARED_CONFIGm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORT_PG_SHARED_CONFIGm_BLKACC,3,0,p,MMU_THDI_PORT_PG_SHARED_CONFIGm_OFFSET,i,(m._mmu_thdi_port_pg_shared_config),6)
#define WRITE_MMU_THDI_PORT_PG_SHARED_CONFIGm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORT_PG_SHARED_CONFIGm_BLKACC,3,0,p,MMU_THDI_PORT_PG_SHARED_CONFIGm_OFFSET,i,&(m._mmu_thdi_port_pg_shared_config),6)

/*******************************************************************************
 * End of 'MMU_THDI_PORT_PG_SHARED_CONFIGm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDI_PORT_PG_SHARED_COUNTER
 * BLOCKS:   MMU_ITM
 * SIZE:     153
 */
/*
 * These macros can be used to access MMU_THDI_PORT_PG_SHARED_COUNTER.
 */
#define READ_MMU_THDI_PORT_PG_SHARED_COUNTERm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDI_PORT_PG_SHARED_COUNTERm_BLKACC,3,0,p,MMU_THDI_PORT_PG_SHARED_COUNTERm_OFFSET,i,(m._mmu_thdi_port_pg_shared_counter),5)
#define WRITE_MMU_THDI_PORT_PG_SHARED_COUNTERm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDI_PORT_PG_SHARED_COUNTERm_BLKACC,3,0,p,MMU_THDI_PORT_PG_SHARED_COUNTERm_OFFSET,i,&(m._mmu_thdi_port_pg_shared_counter),5)

/*******************************************************************************
 * End of 'MMU_THDI_PORT_PG_SHARED_COUNTERm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_SCR_CNT_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_SCR_CNT_STATUS.
 */
#define READ_MMU_THDI_SCR_CNT_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_SCR_CNT_STATUSr_BLKACC,3,0,p,MMU_THDI_SCR_CNT_STATUSr_OFFSET,0,(r._mmu_thdi_scr_cnt_status),1)
#define WRITE_MMU_THDI_SCR_CNT_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_SCR_CNT_STATUSr_BLKACC,3,0,p,MMU_THDI_SCR_CNT_STATUSr_OFFSET,0,&(r._mmu_thdi_scr_cnt_status),1)

/*******************************************************************************
 * End of 'MMU_THDI_SCR_CNT_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDI_TMBUS.
 */
#define READ_MMU_THDI_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_TMBUSr_BLKACC,3,0,0,MMU_THDI_TMBUSr_OFFSET,0,(r._mmu_thdi_tmbus),2)
#define WRITE_MMU_THDI_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_TMBUSr_BLKACC,3,0,0,MMU_THDI_TMBUSr_OFFSET,0,&(r._mmu_thdi_tmbus),2)

/*******************************************************************************
 * End of 'MMU_THDI_TMBUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_UC_INPPRI_PG_PROFILE
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDI_UC_INPPRI_PG_PROFILE.
 */
#define READ_MMU_THDI_UC_INPPRI_PG_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDI_UC_INPPRI_PG_PROFILEr_BLKACC,3,0,0,MMU_THDI_UC_INPPRI_PG_PROFILEr_OFFSET,i,(r._mmu_thdi_uc_inppri_pg_profile),2)
#define WRITE_MMU_THDI_UC_INPPRI_PG_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDI_UC_INPPRI_PG_PROFILEr_BLKACC,3,0,0,MMU_THDI_UC_INPPRI_PG_PROFILEr_OFFSET,i,&(r._mmu_thdi_uc_inppri_pg_profile),2)

/*******************************************************************************
 * End of 'MMU_THDI_UC_INPPRI_PG_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_ADT_HI_PRI_ALPHA_INDEX
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_ADT_HI_PRI_ALPHA_INDEX.
 */
#define READ_MMU_THDO_ADT_HI_PRI_ALPHA_INDEXr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_ADT_HI_PRI_ALPHA_INDEXr_BLKACC,3,0,p,MMU_THDO_ADT_HI_PRI_ALPHA_INDEXr_OFFSET,0,(r._mmu_thdo_adt_hi_pri_alpha_index),1)
#define WRITE_MMU_THDO_ADT_HI_PRI_ALPHA_INDEXr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_ADT_HI_PRI_ALPHA_INDEXr_BLKACC,3,0,p,MMU_THDO_ADT_HI_PRI_ALPHA_INDEXr_OFFSET,0,&(r._mmu_thdo_adt_hi_pri_alpha_index),1)

/*******************************************************************************
 * End of 'MMU_THDO_ADT_HI_PRI_ALPHA_INDEXr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_ADT_HI_PRI_COUNT_SP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_ADT_HI_PRI_COUNT_SP.
 */
#define READ_MMU_THDO_ADT_HI_PRI_COUNT_SPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_ADT_HI_PRI_COUNT_SPr_BLKACC,3,0,p,MMU_THDO_ADT_HI_PRI_COUNT_SPr_OFFSET,i,(r._mmu_thdo_adt_hi_pri_count_sp),1)
#define WRITE_MMU_THDO_ADT_HI_PRI_COUNT_SPr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_ADT_HI_PRI_COUNT_SPr_BLKACC,3,0,p,MMU_THDO_ADT_HI_PRI_COUNT_SPr_OFFSET,i,&(r._mmu_thdo_adt_hi_pri_count_sp),1)

/*******************************************************************************
 * End of 'MMU_THDO_ADT_HI_PRI_COUNT_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_ADT_MARGIN_LEVEL_COUNTER
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_ADT_MARGIN_LEVEL_COUNTER.
 */
#define READ_MMU_THDO_ADT_MARGIN_LEVEL_COUNTERr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_ADT_MARGIN_LEVEL_COUNTERr_BLKACC,3,0,p,MMU_THDO_ADT_MARGIN_LEVEL_COUNTERr_OFFSET,i,(r._mmu_thdo_adt_margin_level_counter),2)
#define WRITE_MMU_THDO_ADT_MARGIN_LEVEL_COUNTERr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_ADT_MARGIN_LEVEL_COUNTERr_BLKACC,3,0,p,MMU_THDO_ADT_MARGIN_LEVEL_COUNTERr_OFFSET,i,&(r._mmu_thdo_adt_margin_level_counter),2)

/*******************************************************************************
 * End of 'MMU_THDO_ADT_MARGIN_LEVEL_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_ADT_MONITOR_POOL_ID
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_ADT_MONITOR_POOL_ID.
 */
#define READ_MMU_THDO_ADT_MONITOR_POOL_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_ADT_MONITOR_POOL_IDr_BLKACC,3,0,p,MMU_THDO_ADT_MONITOR_POOL_IDr_OFFSET,0,(r._mmu_thdo_adt_monitor_pool_id),1)
#define WRITE_MMU_THDO_ADT_MONITOR_POOL_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_ADT_MONITOR_POOL_IDr_BLKACC,3,0,p,MMU_THDO_ADT_MONITOR_POOL_IDr_OFFSET,0,&(r._mmu_thdo_adt_monitor_pool_id),1)

/*******************************************************************************
 * End of 'MMU_THDO_ADT_MONITOR_POOL_IDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_ADT_SP0_MARGIN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_ADT_SP0_MARGIN.
 */
#define READ_MMU_THDO_ADT_SP0_MARGINr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_ADT_SP0_MARGINr_BLKACC,3,0,p,MMU_THDO_ADT_SP0_MARGINr_OFFSET,i,(r._mmu_thdo_adt_sp0_margin),1)
#define WRITE_MMU_THDO_ADT_SP0_MARGINr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_ADT_SP0_MARGINr_BLKACC,3,0,p,MMU_THDO_ADT_SP0_MARGINr_OFFSET,i,&(r._mmu_thdo_adt_sp0_margin),1)

/*******************************************************************************
 * End of 'MMU_THDO_ADT_SP0_MARGINr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_ADT_SP1_MARGIN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_ADT_SP1_MARGIN.
 */
#define READ_MMU_THDO_ADT_SP1_MARGINr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_ADT_SP1_MARGINr_BLKACC,3,0,p,MMU_THDO_ADT_SP1_MARGINr_OFFSET,i,(r._mmu_thdo_adt_sp1_margin),1)
#define WRITE_MMU_THDO_ADT_SP1_MARGINr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_ADT_SP1_MARGINr_BLKACC,3,0,p,MMU_THDO_ADT_SP1_MARGINr_OFFSET,i,&(r._mmu_thdo_adt_sp1_margin),1)

/*******************************************************************************
 * End of 'MMU_THDO_ADT_SP1_MARGINr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_ADT_SP2_MARGIN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_ADT_SP2_MARGIN.
 */
#define READ_MMU_THDO_ADT_SP2_MARGINr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_ADT_SP2_MARGINr_BLKACC,3,0,p,MMU_THDO_ADT_SP2_MARGINr_OFFSET,i,(r._mmu_thdo_adt_sp2_margin),1)
#define WRITE_MMU_THDO_ADT_SP2_MARGINr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_ADT_SP2_MARGINr_BLKACC,3,0,p,MMU_THDO_ADT_SP2_MARGINr_OFFSET,i,&(r._mmu_thdo_adt_sp2_margin),1)

/*******************************************************************************
 * End of 'MMU_THDO_ADT_SP2_MARGINr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_ADT_SP3_MARGIN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_ADT_SP3_MARGIN.
 */
#define READ_MMU_THDO_ADT_SP3_MARGINr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_ADT_SP3_MARGINr_BLKACC,3,0,p,MMU_THDO_ADT_SP3_MARGINr_OFFSET,i,(r._mmu_thdo_adt_sp3_margin),1)
#define WRITE_MMU_THDO_ADT_SP3_MARGINr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_ADT_SP3_MARGINr_BLKACC,3,0,p,MMU_THDO_ADT_SP3_MARGINr_OFFSET,i,&(r._mmu_thdo_adt_sp3_margin),1)

/*******************************************************************************
 * End of 'MMU_THDO_ADT_SP3_MARGINr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_BST_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_BST_CONFIG.
 */
#define READ_MMU_THDO_BST_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_BST_CONFIGr_BLKACC,3,0,0,MMU_THDO_BST_CONFIGr_OFFSET,0,(r._mmu_thdo_bst_config),1)
#define WRITE_MMU_THDO_BST_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_BST_CONFIGr_BLKACC,3,0,0,MMU_THDO_BST_CONFIGr_OFFSET,0,&(r._mmu_thdo_bst_config),1)

/*******************************************************************************
 * End of 'MMU_THDO_BST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_BST_CPU_INT_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_BST_CPU_INT_EN.
 */
#define READ_MMU_THDO_BST_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_BST_CPU_INT_ENr_BLKACC,3,0,0,MMU_THDO_BST_CPU_INT_ENr_OFFSET,0,(r._mmu_thdo_bst_cpu_int_en),1)
#define WRITE_MMU_THDO_BST_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_BST_CPU_INT_ENr_BLKACC,3,0,0,MMU_THDO_BST_CPU_INT_ENr_OFFSET,0,&(r._mmu_thdo_bst_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_THDO_BST_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_BST_CPU_INT_SET
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_BST_CPU_INT_SET.
 */
#define READ_MMU_THDO_BST_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_BST_CPU_INT_SETr_BLKACC,3,0,p,MMU_THDO_BST_CPU_INT_SETr_OFFSET,0,(r._mmu_thdo_bst_cpu_int_set),1)
#define WRITE_MMU_THDO_BST_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_BST_CPU_INT_SETr_BLKACC,3,0,p,MMU_THDO_BST_CPU_INT_SETr_OFFSET,0,&(r._mmu_thdo_bst_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_THDO_BST_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_BST_CPU_INT_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_BST_CPU_INT_STAT.
 */
#define READ_MMU_THDO_BST_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_BST_CPU_INT_STATr_BLKACC,3,0,p,MMU_THDO_BST_CPU_INT_STATr_OFFSET,0,(r._mmu_thdo_bst_cpu_int_stat),1)
#define WRITE_MMU_THDO_BST_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_BST_CPU_INT_STATr_BLKACC,3,0,p,MMU_THDO_BST_CPU_INT_STATr_OFFSET,0,&(r._mmu_thdo_bst_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_THDO_BST_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_BST_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_BST_ENABLE_ECCP_MEM.
 */
#define READ_MMU_THDO_BST_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_BST_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_THDO_BST_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_thdo_bst_enable_eccp_mem),1)
#define WRITE_MMU_THDO_BST_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_BST_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_THDO_BST_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_thdo_bst_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_THDO_BST_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_BST_EN_COR_ERR_RPT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_BST_EN_COR_ERR_RPT.
 */
#define READ_MMU_THDO_BST_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_BST_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_THDO_BST_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_thdo_bst_en_cor_err_rpt),1)
#define WRITE_MMU_THDO_BST_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_BST_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_THDO_BST_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_thdo_bst_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_THDO_BST_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_BST_SHARED_PORT
 * BLOCKS:   MMU_ITM
 * SIZE:     112
 */
/*
 * These macros can be used to access MMU_THDO_BST_SHARED_PORT.
 */
#define READ_MMU_THDO_BST_SHARED_PORTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_BST_SHARED_PORTm_BLKACC,3,0,p,MMU_THDO_BST_SHARED_PORTm_OFFSET,i,(m._mmu_thdo_bst_shared_port),4)
#define WRITE_MMU_THDO_BST_SHARED_PORTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_BST_SHARED_PORTm_BLKACC,3,0,p,MMU_THDO_BST_SHARED_PORTm_OFFSET,i,&(m._mmu_thdo_bst_shared_port),4)

/*******************************************************************************
 * End of 'MMU_THDO_BST_SHARED_PORTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_BST_SHARED_PORTSP_MC
 * BLOCKS:   MMU_ITM
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_THDO_BST_SHARED_PORTSP_MC.
 */
#define READ_MMU_THDO_BST_SHARED_PORTSP_MCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_BST_SHARED_PORTSP_MCm_BLKACC,3,0,p,MMU_THDO_BST_SHARED_PORTSP_MCm_OFFSET,i,(m._mmu_thdo_bst_shared_portsp_mc),1)
#define WRITE_MMU_THDO_BST_SHARED_PORTSP_MCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_BST_SHARED_PORTSP_MCm_BLKACC,3,0,p,MMU_THDO_BST_SHARED_PORTSP_MCm_OFFSET,i,&(m._mmu_thdo_bst_shared_portsp_mc),1)

/*******************************************************************************
 * End of 'MMU_THDO_BST_SHARED_PORTSP_MCm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_BST_SHARED_PORTSP_MC_PKTSTAT
 * BLOCKS:   MMU_ITM
 * SIZE:     128
 */
/*
 * These macros can be used to access MMU_THDO_BST_SHARED_PORTSP_MC_PKTSTAT.
 */
#define READ_MMU_THDO_BST_SHARED_PORTSP_MC_PKTSTATm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_BST_SHARED_PORTSP_MC_PKTSTATm_BLKACC,3,0,p,MMU_THDO_BST_SHARED_PORTSP_MC_PKTSTATm_OFFSET,i,(m._mmu_thdo_bst_shared_portsp_mc_pktstat),4)
#define WRITE_MMU_THDO_BST_SHARED_PORTSP_MC_PKTSTATm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_BST_SHARED_PORTSP_MC_PKTSTATm_BLKACC,3,0,p,MMU_THDO_BST_SHARED_PORTSP_MC_PKTSTATm_OFFSET,i,&(m._mmu_thdo_bst_shared_portsp_mc_pktstat),4)

/*******************************************************************************
 * End of 'MMU_THDO_BST_SHARED_PORTSP_MC_PKTSTATm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_BST_STAT1
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_BST_STAT1.
 */
#define READ_MMU_THDO_BST_STAT1r(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_BST_STAT1r_BLKACC,3,0,p,MMU_THDO_BST_STAT1r_OFFSET,0,(r._mmu_thdo_bst_stat1),1)
#define WRITE_MMU_THDO_BST_STAT1r(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_BST_STAT1r_BLKACC,3,0,p,MMU_THDO_BST_STAT1r_OFFSET,0,&(r._mmu_thdo_bst_stat1),1)

/*******************************************************************************
 * End of 'MMU_THDO_BST_STAT1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_BST_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_BST_STAT.
 */
#define READ_MMU_THDO_BST_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_BST_STATr_BLKACC,3,0,p,MMU_THDO_BST_STATr_OFFSET,0,(r._mmu_thdo_bst_stat),1)
#define WRITE_MMU_THDO_BST_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_BST_STATr_BLKACC,3,0,p,MMU_THDO_BST_STATr_OFFSET,0,&(r._mmu_thdo_bst_stat),1)

/*******************************************************************************
 * End of 'MMU_THDO_BST_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_BST_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_BST_TMBUS.
 */
#define READ_MMU_THDO_BST_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_BST_TMBUSr_BLKACC,3,0,0,MMU_THDO_BST_TMBUSr_OFFSET,0,(r._mmu_thdo_bst_tmbus),2)
#define WRITE_MMU_THDO_BST_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_BST_TMBUSr_BLKACC,3,0,0,MMU_THDO_BST_TMBUSr_OFFSET,0,&(r._mmu_thdo_bst_tmbus),2)

/*******************************************************************************
 * End of 'MMU_THDO_BST_TMBUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_BST_TOTAL_QUEUE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_BST_TOTAL_QUEUE.
 */
#define READ_MMU_THDO_BST_TOTAL_QUEUEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_BST_TOTAL_QUEUEm_BLKACC,3,0,p,MMU_THDO_BST_TOTAL_QUEUEm_OFFSET,i,(m._mmu_thdo_bst_total_queue),1)
#define WRITE_MMU_THDO_BST_TOTAL_QUEUEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_BST_TOTAL_QUEUEm_BLKACC,3,0,p,MMU_THDO_BST_TOTAL_QUEUEm_OFFSET,i,&(m._mmu_thdo_bst_total_queue),1)

/*******************************************************************************
 * End of 'MMU_THDO_BST_TOTAL_QUEUEm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_BST_TOTAL_QUEUE_PKTSTAT
 * BLOCKS:   MMU_ITM
 * SIZE:     128
 */
/*
 * These macros can be used to access MMU_THDO_BST_TOTAL_QUEUE_PKTSTAT.
 */
#define READ_MMU_THDO_BST_TOTAL_QUEUE_PKTSTATm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_BST_TOTAL_QUEUE_PKTSTATm_BLKACC,3,0,p,MMU_THDO_BST_TOTAL_QUEUE_PKTSTATm_OFFSET,i,(m._mmu_thdo_bst_total_queue_pktstat),4)
#define WRITE_MMU_THDO_BST_TOTAL_QUEUE_PKTSTATm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_BST_TOTAL_QUEUE_PKTSTATm_BLKACC,3,0,p,MMU_THDO_BST_TOTAL_QUEUE_PKTSTATm_OFFSET,i,&(m._mmu_thdo_bst_total_queue_pktstat),4)

/*******************************************************************************
 * End of 'MMU_THDO_BST_TOTAL_QUEUE_PKTSTATm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_BYPASS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_BYPASS.
 */
#define READ_MMU_THDO_BYPASSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_BYPASSr_BLKACC,3,0,0,MMU_THDO_BYPASSr_OFFSET,0,(r._mmu_thdo_bypass),1)
#define WRITE_MMU_THDO_BYPASSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_BYPASSr_BLKACC,3,0,0,MMU_THDO_BYPASSr_OFFSET,0,&(r._mmu_thdo_bypass),1)

/*******************************************************************************
 * End of 'MMU_THDO_BYPASSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_CMIC_RESERVED.
 */
#define READ_MMU_THDO_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_CMIC_RESERVEDr_BLKACC,3,0,0,MMU_THDO_CMIC_RESERVEDr_OFFSET,0,(r._mmu_thdo_cmic_reserved),1)
#define WRITE_MMU_THDO_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_CMIC_RESERVEDr_BLKACC,3,0,0,MMU_THDO_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_thdo_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_THDO_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_CONFIG.
 */
#define READ_MMU_THDO_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_CONFIGr_BLKACC,3,0,0,MMU_THDO_CONFIGr_OFFSET,0,(r._mmu_thdo_config),1)
#define WRITE_MMU_THDO_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_CONFIGr_BLKACC,3,0,0,MMU_THDO_CONFIGr_OFFSET,0,&(r._mmu_thdo_config),1)

/*******************************************************************************
 * End of 'MMU_THDO_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_CONFIG_MC_QGROUP
 * BLOCKS:   MMU_ITM
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDO_CONFIG_MC_QGROUP.
 */
#define READ_MMU_THDO_CONFIG_MC_QGROUPm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_CONFIG_MC_QGROUPm_BLKACC,3,0,0,MMU_THDO_CONFIG_MC_QGROUPm_OFFSET,i,(m._mmu_thdo_config_mc_qgroup),1)
#define WRITE_MMU_THDO_CONFIG_MC_QGROUPm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_CONFIG_MC_QGROUPm_BLKACC,3,0,0,MMU_THDO_CONFIG_MC_QGROUPm_OFFSET,i,&(m._mmu_thdo_config_mc_qgroup),1)

/*******************************************************************************
 * End of 'MMU_THDO_CONFIG_MC_QGROUPm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_CONFIG_PORT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_CONFIG_PORT.
 */
#define READ_MMU_THDO_CONFIG_PORTr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_CONFIG_PORTr_BLKACC,3,0,0,MMU_THDO_CONFIG_PORTr_OFFSET,i,(r._mmu_thdo_config_port),1)
#define WRITE_MMU_THDO_CONFIG_PORTr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_CONFIG_PORTr_BLKACC,3,0,0,MMU_THDO_CONFIG_PORTr_OFFSET,i,&(r._mmu_thdo_config_port),1)

/*******************************************************************************
 * End of 'MMU_THDO_CONFIG_PORTr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_CONFIG_PORTSP_MC
 * BLOCKS:   MMU_ITM
 * SIZE:     66
 */
/*
 * These macros can be used to access MMU_THDO_CONFIG_PORTSP_MC.
 */
#define READ_MMU_THDO_CONFIG_PORTSP_MCm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_CONFIG_PORTSP_MCm_BLKACC,3,0,0,MMU_THDO_CONFIG_PORTSP_MCm_OFFSET,i,(m._mmu_thdo_config_portsp_mc),3)
#define WRITE_MMU_THDO_CONFIG_PORTSP_MCm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_CONFIG_PORTSP_MCm_BLKACC,3,0,0,MMU_THDO_CONFIG_PORTSP_MCm_OFFSET,i,&(m._mmu_thdo_config_portsp_mc),3)

/*******************************************************************************
 * End of 'MMU_THDO_CONFIG_PORTSP_MCm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_CONFIG_PORT_UC0
 * BLOCKS:   MMU_ITM
 * SIZE:     248
 */
/*
 * These macros can be used to access MMU_THDO_CONFIG_PORT_UC0.
 */
#define READ_MMU_THDO_CONFIG_PORT_UC0m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_CONFIG_PORT_UC0m_BLKACC,3,0,0,MMU_THDO_CONFIG_PORT_UC0m_OFFSET,i,(m._mmu_thdo_config_port_uc0),8)
#define WRITE_MMU_THDO_CONFIG_PORT_UC0m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_CONFIG_PORT_UC0m_BLKACC,3,0,0,MMU_THDO_CONFIG_PORT_UC0m_OFFSET,i,&(m._mmu_thdo_config_port_uc0),8)

/*******************************************************************************
 * End of 'MMU_THDO_CONFIG_PORT_UC0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_CONFIG_PORT_UC1
 * BLOCKS:   MMU_ITM
 * SIZE:     248
 */
/*
 * These macros can be used to access MMU_THDO_CONFIG_PORT_UC1.
 */
#define READ_MMU_THDO_CONFIG_PORT_UC1m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_CONFIG_PORT_UC1m_BLKACC,3,0,0,MMU_THDO_CONFIG_PORT_UC1m_OFFSET,i,(m._mmu_thdo_config_port_uc1),8)
#define WRITE_MMU_THDO_CONFIG_PORT_UC1m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_CONFIG_PORT_UC1m_BLKACC,3,0,0,MMU_THDO_CONFIG_PORT_UC1m_OFFSET,i,&(m._mmu_thdo_config_port_uc1),8)

/*******************************************************************************
 * End of 'MMU_THDO_CONFIG_PORT_UC1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_CONFIG_UC_QGROUP0
 * BLOCKS:   MMU_ITM
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDO_CONFIG_UC_QGROUP0.
 */
#define READ_MMU_THDO_CONFIG_UC_QGROUP0m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_CONFIG_UC_QGROUP0m_BLKACC,3,0,0,MMU_THDO_CONFIG_UC_QGROUP0m_OFFSET,i,(m._mmu_thdo_config_uc_qgroup0),1)
#define WRITE_MMU_THDO_CONFIG_UC_QGROUP0m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_CONFIG_UC_QGROUP0m_BLKACC,3,0,0,MMU_THDO_CONFIG_UC_QGROUP0m_OFFSET,i,&(m._mmu_thdo_config_uc_qgroup0),1)

/*******************************************************************************
 * End of 'MMU_THDO_CONFIG_UC_QGROUP0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_CONFIG_UC_QGROUP1
 * BLOCKS:   MMU_ITM
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDO_CONFIG_UC_QGROUP1.
 */
#define READ_MMU_THDO_CONFIG_UC_QGROUP1m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_CONFIG_UC_QGROUP1m_BLKACC,3,0,0,MMU_THDO_CONFIG_UC_QGROUP1m_OFFSET,i,(m._mmu_thdo_config_uc_qgroup1),1)
#define WRITE_MMU_THDO_CONFIG_UC_QGROUP1m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_CONFIG_UC_QGROUP1m_BLKACC,3,0,0,MMU_THDO_CONFIG_UC_QGROUP1m_OFFSET,i,&(m._mmu_thdo_config_uc_qgroup1),1)

/*******************************************************************************
 * End of 'MMU_THDO_CONFIG_UC_QGROUP1m'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_COUNTER_MC_OVERFLOW_SIZE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_COUNTER_MC_OVERFLOW_SIZE.
 */
#define READ_MMU_THDO_COUNTER_MC_OVERFLOW_SIZEr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_COUNTER_MC_OVERFLOW_SIZEr_BLKACC,3,0,0,MMU_THDO_COUNTER_MC_OVERFLOW_SIZEr_OFFSET,0,(r._mmu_thdo_counter_mc_overflow_size),1)
#define WRITE_MMU_THDO_COUNTER_MC_OVERFLOW_SIZEr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_COUNTER_MC_OVERFLOW_SIZEr_BLKACC,3,0,0,MMU_THDO_COUNTER_MC_OVERFLOW_SIZEr_OFFSET,0,&(r._mmu_thdo_counter_mc_overflow_size),1)

/*******************************************************************************
 * End of 'MMU_THDO_COUNTER_MC_OVERFLOW_SIZEr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_COUNTER_MC_QGROUP
 * BLOCKS:   MMU_ITM
 * SIZE:     20
 */
/*
 * These macros can be used to access MMU_THDO_COUNTER_MC_QGROUP.
 */
#define READ_MMU_THDO_COUNTER_MC_QGROUPm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_COUNTER_MC_QGROUPm_BLKACC,3,0,p,MMU_THDO_COUNTER_MC_QGROUPm_OFFSET,i,(m._mmu_thdo_counter_mc_qgroup),1)
#define WRITE_MMU_THDO_COUNTER_MC_QGROUPm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_COUNTER_MC_QGROUPm_BLKACC,3,0,p,MMU_THDO_COUNTER_MC_QGROUPm_OFFSET,i,&(m._mmu_thdo_counter_mc_qgroup),1)

/*******************************************************************************
 * End of 'MMU_THDO_COUNTER_MC_QGROUPm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_COUNTER_OVERFLOW_ID
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_COUNTER_OVERFLOW_ID.
 */
#define READ_MMU_THDO_COUNTER_OVERFLOW_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_COUNTER_OVERFLOW_IDr_BLKACC,3,0,p,MMU_THDO_COUNTER_OVERFLOW_IDr_OFFSET,0,(r._mmu_thdo_counter_overflow_id),1)
#define WRITE_MMU_THDO_COUNTER_OVERFLOW_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_COUNTER_OVERFLOW_IDr_BLKACC,3,0,p,MMU_THDO_COUNTER_OVERFLOW_IDr_OFFSET,0,&(r._mmu_thdo_counter_overflow_id),1)

/*******************************************************************************
 * End of 'MMU_THDO_COUNTER_OVERFLOW_IDr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_COUNTER_PORTSP_MC
 * BLOCKS:   MMU_ITM
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDO_COUNTER_PORTSP_MC.
 */
#define READ_MMU_THDO_COUNTER_PORTSP_MCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_COUNTER_PORTSP_MCm_BLKACC,3,0,p,MMU_THDO_COUNTER_PORTSP_MCm_OFFSET,i,(m._mmu_thdo_counter_portsp_mc),1)
#define WRITE_MMU_THDO_COUNTER_PORTSP_MCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_COUNTER_PORTSP_MCm_BLKACC,3,0,p,MMU_THDO_COUNTER_PORTSP_MCm_OFFSET,i,&(m._mmu_thdo_counter_portsp_mc),1)

/*******************************************************************************
 * End of 'MMU_THDO_COUNTER_PORTSP_MCm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_COUNTER_PORT_UC
 * BLOCKS:   MMU_ITM
 * SIZE:     164
 */
/*
 * These macros can be used to access MMU_THDO_COUNTER_PORT_UC.
 */
#define READ_MMU_THDO_COUNTER_PORT_UCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_COUNTER_PORT_UCm_BLKACC,3,0,p,MMU_THDO_COUNTER_PORT_UCm_OFFSET,i,(m._mmu_thdo_counter_port_uc),6)
#define WRITE_MMU_THDO_COUNTER_PORT_UCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_COUNTER_PORT_UCm_BLKACC,3,0,p,MMU_THDO_COUNTER_PORT_UCm_OFFSET,i,&(m._mmu_thdo_counter_port_uc),6)

/*******************************************************************************
 * End of 'MMU_THDO_COUNTER_PORT_UCm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_COUNTER_QUEUE
 * BLOCKS:   MMU_ITM
 * SIZE:     66
 */
/*
 * These macros can be used to access MMU_THDO_COUNTER_QUEUE.
 */
#define READ_MMU_THDO_COUNTER_QUEUEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_COUNTER_QUEUEm_BLKACC,3,0,p,MMU_THDO_COUNTER_QUEUEm_OFFSET,i,(m._mmu_thdo_counter_queue),3)
#define WRITE_MMU_THDO_COUNTER_QUEUEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_COUNTER_QUEUEm_BLKACC,3,0,p,MMU_THDO_COUNTER_QUEUEm_OFFSET,i,&(m._mmu_thdo_counter_queue),3)

/*******************************************************************************
 * End of 'MMU_THDO_COUNTER_QUEUEm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_COUNTER_UC_OVERFLOW_SIZE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_COUNTER_UC_OVERFLOW_SIZE.
 */
#define READ_MMU_THDO_COUNTER_UC_OVERFLOW_SIZEr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_COUNTER_UC_OVERFLOW_SIZEr_BLKACC,3,0,0,MMU_THDO_COUNTER_UC_OVERFLOW_SIZEr_OFFSET,0,(r._mmu_thdo_counter_uc_overflow_size),1)
#define WRITE_MMU_THDO_COUNTER_UC_OVERFLOW_SIZEr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_COUNTER_UC_OVERFLOW_SIZEr_BLKACC,3,0,0,MMU_THDO_COUNTER_UC_OVERFLOW_SIZEr_OFFSET,0,&(r._mmu_thdo_counter_uc_overflow_size),1)

/*******************************************************************************
 * End of 'MMU_THDO_COUNTER_UC_OVERFLOW_SIZEr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_COUNTER_UC_QGROUP
 * BLOCKS:   MMU_ITM
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDO_COUNTER_UC_QGROUP.
 */
#define READ_MMU_THDO_COUNTER_UC_QGROUPm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_COUNTER_UC_QGROUPm_BLKACC,3,0,p,MMU_THDO_COUNTER_UC_QGROUPm_OFFSET,i,(m._mmu_thdo_counter_uc_qgroup),1)
#define WRITE_MMU_THDO_COUNTER_UC_QGROUPm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_COUNTER_UC_QGROUPm_BLKACC,3,0,p,MMU_THDO_COUNTER_UC_QGROUPm_OFFSET,i,&(m._mmu_thdo_counter_uc_qgroup),1)

/*******************************************************************************
 * End of 'MMU_THDO_COUNTER_UC_QGROUPm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_COUNTER_UNDERFLOW_ID
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_COUNTER_UNDERFLOW_ID.
 */
#define READ_MMU_THDO_COUNTER_UNDERFLOW_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_COUNTER_UNDERFLOW_IDr_BLKACC,3,0,p,MMU_THDO_COUNTER_UNDERFLOW_IDr_OFFSET,0,(r._mmu_thdo_counter_underflow_id),1)
#define WRITE_MMU_THDO_COUNTER_UNDERFLOW_IDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_COUNTER_UNDERFLOW_IDr_BLKACC,3,0,p,MMU_THDO_COUNTER_UNDERFLOW_IDr_OFFSET,0,&(r._mmu_thdo_counter_underflow_id),1)

/*******************************************************************************
 * End of 'MMU_THDO_COUNTER_UNDERFLOW_IDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_CPU_INT_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_CPU_INT_EN.
 */
#define READ_MMU_THDO_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_CPU_INT_ENr_BLKACC,3,0,0,MMU_THDO_CPU_INT_ENr_OFFSET,0,(r._mmu_thdo_cpu_int_en),1)
#define WRITE_MMU_THDO_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_CPU_INT_ENr_BLKACC,3,0,0,MMU_THDO_CPU_INT_ENr_OFFSET,0,&(r._mmu_thdo_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_THDO_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_CPU_INT_SET
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_CPU_INT_SET.
 */
#define READ_MMU_THDO_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_CPU_INT_SETr_BLKACC,3,0,p,MMU_THDO_CPU_INT_SETr_OFFSET,0,(r._mmu_thdo_cpu_int_set),1)
#define WRITE_MMU_THDO_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_CPU_INT_SETr_BLKACC,3,0,p,MMU_THDO_CPU_INT_SETr_OFFSET,0,&(r._mmu_thdo_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_THDO_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_CPU_INT_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_CPU_INT_STAT.
 */
#define READ_MMU_THDO_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_CPU_INT_STATr_BLKACC,3,0,p,MMU_THDO_CPU_INT_STATr_OFFSET,0,(r._mmu_thdo_cpu_int_stat),1)
#define WRITE_MMU_THDO_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_CPU_INT_STATr_BLKACC,3,0,p,MMU_THDO_CPU_INT_STATr_OFFSET,0,&(r._mmu_thdo_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_THDO_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_CPU_QUEUE_DROP_STATES
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_CPU_QUEUE_DROP_STATES.
 */
#define READ_MMU_THDO_CPU_QUEUE_DROP_STATESr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_CPU_QUEUE_DROP_STATESr_BLKACC,3,0,p,MMU_THDO_CPU_QUEUE_DROP_STATESr_OFFSET,i,(r._mmu_thdo_cpu_queue_drop_states),2)
#define WRITE_MMU_THDO_CPU_QUEUE_DROP_STATESr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_CPU_QUEUE_DROP_STATESr_BLKACC,3,0,p,MMU_THDO_CPU_QUEUE_DROP_STATESr_OFFSET,i,&(r._mmu_thdo_cpu_queue_drop_states),2)

/*******************************************************************************
 * End of 'MMU_THDO_CPU_QUEUE_DROP_STATESr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_CPU_QUEUE_DROP_STATES_11_00
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_CPU_QUEUE_DROP_STATES_11_00.
 */
#define READ_MMU_THDO_CPU_QUEUE_DROP_STATES_11_00r(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_CPU_QUEUE_DROP_STATES_11_00r_BLKACC,3,0,p,MMU_THDO_CPU_QUEUE_DROP_STATES_11_00r_OFFSET,0,(r._mmu_thdo_cpu_queue_drop_states_11_00),2)
#define WRITE_MMU_THDO_CPU_QUEUE_DROP_STATES_11_00r(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_CPU_QUEUE_DROP_STATES_11_00r_BLKACC,3,0,p,MMU_THDO_CPU_QUEUE_DROP_STATES_11_00r_OFFSET,0,&(r._mmu_thdo_cpu_queue_drop_states_11_00),2)

/*******************************************************************************
 * End of 'MMU_THDO_CPU_QUEUE_DROP_STATES_11_00r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_CPU_QUEUE_DROP_STATES_23_12
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_CPU_QUEUE_DROP_STATES_23_12.
 */
#define READ_MMU_THDO_CPU_QUEUE_DROP_STATES_23_12r(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_CPU_QUEUE_DROP_STATES_23_12r_BLKACC,3,0,p,MMU_THDO_CPU_QUEUE_DROP_STATES_23_12r_OFFSET,0,(r._mmu_thdo_cpu_queue_drop_states_23_12),2)
#define WRITE_MMU_THDO_CPU_QUEUE_DROP_STATES_23_12r(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_CPU_QUEUE_DROP_STATES_23_12r_BLKACC,3,0,p,MMU_THDO_CPU_QUEUE_DROP_STATES_23_12r_OFFSET,0,&(r._mmu_thdo_cpu_queue_drop_states_23_12),2)

/*******************************************************************************
 * End of 'MMU_THDO_CPU_QUEUE_DROP_STATES_23_12r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_CPU_QUEUE_DROP_STATES_35_24
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_CPU_QUEUE_DROP_STATES_35_24.
 */
#define READ_MMU_THDO_CPU_QUEUE_DROP_STATES_35_24r(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_CPU_QUEUE_DROP_STATES_35_24r_BLKACC,3,0,p,MMU_THDO_CPU_QUEUE_DROP_STATES_35_24r_OFFSET,0,(r._mmu_thdo_cpu_queue_drop_states_35_24),2)
#define WRITE_MMU_THDO_CPU_QUEUE_DROP_STATES_35_24r(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_CPU_QUEUE_DROP_STATES_35_24r_BLKACC,3,0,p,MMU_THDO_CPU_QUEUE_DROP_STATES_35_24r_OFFSET,0,&(r._mmu_thdo_cpu_queue_drop_states_35_24),2)

/*******************************************************************************
 * End of 'MMU_THDO_CPU_QUEUE_DROP_STATES_35_24r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_CPU_QUEUE_DROP_STATES_47_36
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_CPU_QUEUE_DROP_STATES_47_36.
 */
#define READ_MMU_THDO_CPU_QUEUE_DROP_STATES_47_36r(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_CPU_QUEUE_DROP_STATES_47_36r_BLKACC,3,0,p,MMU_THDO_CPU_QUEUE_DROP_STATES_47_36r_OFFSET,0,(r._mmu_thdo_cpu_queue_drop_states_47_36),2)
#define WRITE_MMU_THDO_CPU_QUEUE_DROP_STATES_47_36r(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_CPU_QUEUE_DROP_STATES_47_36r_BLKACC,3,0,p,MMU_THDO_CPU_QUEUE_DROP_STATES_47_36r_OFFSET,0,&(r._mmu_thdo_cpu_queue_drop_states_47_36),2)

/*******************************************************************************
 * End of 'MMU_THDO_CPU_QUEUE_DROP_STATES_47_36r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_DCN_DROP_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_DCN_DROP_COUNT.
 */
#define READ_MMU_THDO_DCN_DROP_COUNTr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_DCN_DROP_COUNTr_BLKACC,3,0,p,MMU_THDO_DCN_DROP_COUNTr_OFFSET,0,(r._mmu_thdo_dcn_drop_count),2)
#define WRITE_MMU_THDO_DCN_DROP_COUNTr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_DCN_DROP_COUNTr_BLKACC,3,0,p,MMU_THDO_DCN_DROP_COUNTr_OFFSET,0,&(r._mmu_thdo_dcn_drop_count),2)

/*******************************************************************************
 * End of 'MMU_THDO_DCN_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_DCN_HWM_COR
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_DCN_HWM_COR.
 */
#define READ_MMU_THDO_DCN_HWM_CORr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_DCN_HWM_CORr_BLKACC,3,0,0,MMU_THDO_DCN_HWM_CORr_OFFSET,0,(r._mmu_thdo_dcn_hwm_cor),1)
#define WRITE_MMU_THDO_DCN_HWM_CORr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_DCN_HWM_CORr_BLKACC,3,0,0,MMU_THDO_DCN_HWM_CORr_OFFSET,0,&(r._mmu_thdo_dcn_hwm_cor),1)

/*******************************************************************************
 * End of 'MMU_THDO_DCN_HWM_CORr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_DCN_POOL_LIMIT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_DCN_POOL_LIMIT.
 */
#define READ_MMU_THDO_DCN_POOL_LIMITr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_DCN_POOL_LIMITr_BLKACC,3,0,0,MMU_THDO_DCN_POOL_LIMITr_OFFSET,0,(r._mmu_thdo_dcn_pool_limit),1)
#define WRITE_MMU_THDO_DCN_POOL_LIMITr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_DCN_POOL_LIMITr_BLKACC,3,0,0,MMU_THDO_DCN_POOL_LIMITr_OFFSET,0,&(r._mmu_thdo_dcn_pool_limit),1)

/*******************************************************************************
 * End of 'MMU_THDO_DCN_POOL_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_DCN_POOL_OCCUPANCY_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_DCN_POOL_OCCUPANCY_COUNT.
 */
#define READ_MMU_THDO_DCN_POOL_OCCUPANCY_COUNTr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_DCN_POOL_OCCUPANCY_COUNTr_BLKACC,3,0,p,MMU_THDO_DCN_POOL_OCCUPANCY_COUNTr_OFFSET,0,(r._mmu_thdo_dcn_pool_occupancy_count),1)
#define WRITE_MMU_THDO_DCN_POOL_OCCUPANCY_COUNTr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_DCN_POOL_OCCUPANCY_COUNTr_BLKACC,3,0,p,MMU_THDO_DCN_POOL_OCCUPANCY_COUNTr_OFFSET,0,&(r._mmu_thdo_dcn_pool_occupancy_count),1)

/*******************************************************************************
 * End of 'MMU_THDO_DCN_POOL_OCCUPANCY_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_DCN_POOL_OCCUPANCY_HWM
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_DCN_POOL_OCCUPANCY_HWM.
 */
#define READ_MMU_THDO_DCN_POOL_OCCUPANCY_HWMr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_DCN_POOL_OCCUPANCY_HWMr_BLKACC,3,0,p,MMU_THDO_DCN_POOL_OCCUPANCY_HWMr_OFFSET,0,(r._mmu_thdo_dcn_pool_occupancy_hwm),1)
#define WRITE_MMU_THDO_DCN_POOL_OCCUPANCY_HWMr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_DCN_POOL_OCCUPANCY_HWMr_BLKACC,3,0,p,MMU_THDO_DCN_POOL_OCCUPANCY_HWMr_OFFSET,0,&(r._mmu_thdo_dcn_pool_occupancy_hwm),1)

/*******************************************************************************
 * End of 'MMU_THDO_DCN_POOL_OCCUPANCY_HWMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_DCN_PROFILE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_DCN_PROFILE.
 */
#define READ_MMU_THDO_DCN_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_DCN_PROFILEr_BLKACC,3,0,0,MMU_THDO_DCN_PROFILEr_OFFSET,i,(r._mmu_thdo_dcn_profile),1)
#define WRITE_MMU_THDO_DCN_PROFILEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_DCN_PROFILEr_BLKACC,3,0,0,MMU_THDO_DCN_PROFILEr_OFFSET,i,&(r._mmu_thdo_dcn_profile),1)

/*******************************************************************************
 * End of 'MMU_THDO_DCN_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_DCN_QNUM
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_DCN_QNUM.
 */
#define READ_MMU_THDO_DCN_QNUMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_DCN_QNUMr_BLKACC,3,0,0,MMU_THDO_DCN_QNUMr_OFFSET,0,(r._mmu_thdo_dcn_qnum),1)
#define WRITE_MMU_THDO_DCN_QNUMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_DCN_QNUMr_BLKACC,3,0,0,MMU_THDO_DCN_QNUMr_OFFSET,0,&(r._mmu_thdo_dcn_qnum),1)

/*******************************************************************************
 * End of 'MMU_THDO_DCN_QNUMr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_DEVICE_PORT_MAP
 * BLOCKS:   MMU_ITM
 * SIZE:     14
 */
/*
 * These macros can be used to access MMU_THDO_DEVICE_PORT_MAP.
 */
#define READ_MMU_THDO_DEVICE_PORT_MAPm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_DEVICE_PORT_MAPm_BLKACC,3,0,0,MMU_THDO_DEVICE_PORT_MAPm_OFFSET,i,(m._mmu_thdo_device_port_map),1)
#define WRITE_MMU_THDO_DEVICE_PORT_MAPm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_DEVICE_PORT_MAPm_BLKACC,3,0,0,MMU_THDO_DEVICE_PORT_MAPm_OFFSET,i,&(m._mmu_thdo_device_port_map),1)

/*******************************************************************************
 * End of 'MMU_THDO_DEVICE_PORT_MAPm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_EBST_FIFO
 * BLOCKS:   MMU_ITM
 * SIZE:     94
 */
/*
 * These macros can be used to access MMU_THDO_EBST_FIFO.
 */
#define READ_MMU_THDO_EBST_FIFOm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_EBST_FIFOm_BLKACC,3,0,p,MMU_THDO_EBST_FIFOm_OFFSET,i,(m._mmu_thdo_ebst_fifo),3)
#define WRITE_MMU_THDO_EBST_FIFOm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_EBST_FIFOm_BLKACC,3,0,p,MMU_THDO_EBST_FIFOm_OFFSET,i,&(m._mmu_thdo_ebst_fifo),3)

/*******************************************************************************
 * End of 'MMU_THDO_EBST_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_EBST_FIFO_POINTERS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_EBST_FIFO_POINTERS.
 */
#define READ_MMU_THDO_EBST_FIFO_POINTERSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_EBST_FIFO_POINTERSr_BLKACC,3,0,p,MMU_THDO_EBST_FIFO_POINTERSr_OFFSET,0,(r._mmu_thdo_ebst_fifo_pointers),1)
#define WRITE_MMU_THDO_EBST_FIFO_POINTERSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_EBST_FIFO_POINTERSr_BLKACC,3,0,p,MMU_THDO_EBST_FIFO_POINTERSr_OFFSET,0,&(r._mmu_thdo_ebst_fifo_pointers),1)

/*******************************************************************************
 * End of 'MMU_THDO_EBST_FIFO_POINTERSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_EBST_POP
 * BLOCKS:   MMU_ITM
 * SIZE:     86
 */
/*
 * These macros can be used to access MMU_THDO_EBST_POP.
 */
#define READ_MMU_THDO_EBST_POPm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_EBST_POPm_BLKACC,3,0,p,MMU_THDO_EBST_POPm_OFFSET,i,(m._mmu_thdo_ebst_pop),3)
#define WRITE_MMU_THDO_EBST_POPm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_EBST_POPm_BLKACC,3,0,p,MMU_THDO_EBST_POPm_OFFSET,i,&(m._mmu_thdo_ebst_pop),3)

/*******************************************************************************
 * End of 'MMU_THDO_EBST_POPm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_EBST_PORT_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     19
 */
/*
 * These macros can be used to access MMU_THDO_EBST_PORT_CONFIG.
 */
#define READ_MMU_THDO_EBST_PORT_CONFIGm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_EBST_PORT_CONFIGm_BLKACC,3,0,0,MMU_THDO_EBST_PORT_CONFIGm_OFFSET,i,(m._mmu_thdo_ebst_port_config),1)
#define WRITE_MMU_THDO_EBST_PORT_CONFIGm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_EBST_PORT_CONFIGm_BLKACC,3,0,0,MMU_THDO_EBST_PORT_CONFIGm_OFFSET,i,&(m._mmu_thdo_ebst_port_config),1)

/*******************************************************************************
 * End of 'MMU_THDO_EBST_PORT_CONFIGm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_EBST_PROFILE_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_EBST_PROFILE_CONFIG.
 */
#define READ_MMU_THDO_EBST_PROFILE_CONFIGr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_EBST_PROFILE_CONFIGr_BLKACC,3,0,0,MMU_THDO_EBST_PROFILE_CONFIGr_OFFSET,i,(r._mmu_thdo_ebst_profile_config),2)
#define WRITE_MMU_THDO_EBST_PROFILE_CONFIGr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_EBST_PROFILE_CONFIGr_BLKACC,3,0,0,MMU_THDO_EBST_PROFILE_CONFIGr_OFFSET,i,&(r._mmu_thdo_ebst_profile_config),2)

/*******************************************************************************
 * End of 'MMU_THDO_EBST_PROFILE_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_EBST_SCAN_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_EBST_SCAN_CONFIG.
 */
#define READ_MMU_THDO_EBST_SCAN_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_EBST_SCAN_CONFIGr_BLKACC,3,0,0,MMU_THDO_EBST_SCAN_CONFIGr_OFFSET,0,(r._mmu_thdo_ebst_scan_config),2)
#define WRITE_MMU_THDO_EBST_SCAN_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_EBST_SCAN_CONFIGr_BLKACC,3,0,0,MMU_THDO_EBST_SCAN_CONFIGr_OFFSET,0,&(r._mmu_thdo_ebst_scan_config),2)

/*******************************************************************************
 * End of 'MMU_THDO_EBST_SCAN_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_ENABLE_ECCP_MEM.
 */
#define READ_MMU_THDO_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_THDO_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_thdo_enable_eccp_mem),2)
#define WRITE_MMU_THDO_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_THDO_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_thdo_enable_eccp_mem),2)

/*******************************************************************************
 * End of 'MMU_THDO_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_ENGINE_ENABLES_CFG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_ENGINE_ENABLES_CFG.
 */
#define READ_MMU_THDO_ENGINE_ENABLES_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_ENGINE_ENABLES_CFGr_BLKACC,3,0,p,MMU_THDO_ENGINE_ENABLES_CFGr_OFFSET,0,(r._mmu_thdo_engine_enables_cfg),1)
#define WRITE_MMU_THDO_ENGINE_ENABLES_CFGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_ENGINE_ENABLES_CFGr_BLKACC,3,0,p,MMU_THDO_ENGINE_ENABLES_CFGr_OFFSET,0,&(r._mmu_thdo_engine_enables_cfg),1)

/*******************************************************************************
 * End of 'MMU_THDO_ENGINE_ENABLES_CFGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_EN_COR_ERR_RPT
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_EN_COR_ERR_RPT.
 */
#define READ_MMU_THDO_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_THDO_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_thdo_en_cor_err_rpt),2)
#define WRITE_MMU_THDO_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_THDO_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_thdo_en_cor_err_rpt),2)

/*******************************************************************************
 * End of 'MMU_THDO_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_INT_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_INT_CONFIG.
 */
#define READ_MMU_THDO_INT_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_INT_CONFIGr_BLKACC,3,0,0,MMU_THDO_INT_CONFIGr_OFFSET,0,(r._mmu_thdo_int_config),1)
#define WRITE_MMU_THDO_INT_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_INT_CONFIGr_BLKACC,3,0,0,MMU_THDO_INT_CONFIGr_OFFSET,0,&(r._mmu_thdo_int_config),1)

/*******************************************************************************
 * End of 'MMU_THDO_INT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_BUFFER_AVAIL_IN_POOL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_BUFFER_AVAIL_IN_POOL.
 */
#define READ_MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_BUFFER_AVAIL_IN_POOLr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_BUFFER_AVAIL_IN_POOLr_BLKACC,3,0,0,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_BUFFER_AVAIL_IN_POOLr_OFFSET,0,(r._mmu_thdo_int_unavailable_resp_config_buffer_avail_in_pool),1)
#define WRITE_MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_BUFFER_AVAIL_IN_POOLr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_BUFFER_AVAIL_IN_POOLr_BLKACC,3,0,0,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_BUFFER_AVAIL_IN_POOLr_OFFSET,0,&(r._mmu_thdo_int_unavailable_resp_config_buffer_avail_in_pool),1)

/*******************************************************************************
 * End of 'MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_BUFFER_AVAIL_IN_POOLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_MIN_BUFFER_AVAIL_IN_POOL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_MIN_BUFFER_AVAIL_IN_POOL.
 */
#define READ_MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_MIN_BUFFER_AVAIL_IN_POOLr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_MIN_BUFFER_AVAIL_IN_POOLr_BLKACC,3,0,0,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_MIN_BUFFER_AVAIL_IN_POOLr_OFFSET,0,(r._mmu_thdo_int_unavailable_resp_config_min_buffer_avail_in_pool),1)
#define WRITE_MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_MIN_BUFFER_AVAIL_IN_POOLr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_MIN_BUFFER_AVAIL_IN_POOLr_BLKACC,3,0,0,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_MIN_BUFFER_AVAIL_IN_POOLr_OFFSET,0,&(r._mmu_thdo_int_unavailable_resp_config_min_buffer_avail_in_pool),1)

/*******************************************************************************
 * End of 'MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_MIN_BUFFER_AVAIL_IN_POOLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_BUFFER_USAGE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_BUFFER_USAGE.
 */
#define READ_MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_BUFFER_USAGEr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_BUFFER_USAGEr_BLKACC,3,0,0,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_BUFFER_USAGEr_OFFSET,0,(r._mmu_thdo_int_unavailable_resp_config_queue_buffer_usage),1)
#define WRITE_MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_BUFFER_USAGEr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_BUFFER_USAGEr_BLKACC,3,0,0,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_BUFFER_USAGEr_OFFSET,0,&(r._mmu_thdo_int_unavailable_resp_config_queue_buffer_usage),1)

/*******************************************************************************
 * End of 'MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_BUFFER_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_WATERMARK
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_WATERMARK.
 */
#define READ_MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_WATERMARKr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_WATERMARKr_BLKACC,3,0,0,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_WATERMARKr_OFFSET,0,(r._mmu_thdo_int_unavailable_resp_config_queue_watermark),1)
#define WRITE_MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_WATERMARKr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_WATERMARKr_BLKACC,3,0,0,MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_WATERMARKr_OFFSET,0,&(r._mmu_thdo_int_unavailable_resp_config_queue_watermark),1)

/*******************************************************************************
 * End of 'MMU_THDO_INT_UNAVAILABLE_RESP_CONFIG_QUEUE_WATERMARKr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_IPG_SIZE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_IPG_SIZE.
 */
#define READ_MMU_THDO_IPG_SIZEr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_IPG_SIZEr_BLKACC,3,0,0,MMU_THDO_IPG_SIZEr_OFFSET,0,(r._mmu_thdo_ipg_size),1)
#define WRITE_MMU_THDO_IPG_SIZEr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_IPG_SIZEr_BLKACC,3,0,0,MMU_THDO_IPG_SIZEr_OFFSET,0,&(r._mmu_thdo_ipg_size),1)

/*******************************************************************************
 * End of 'MMU_THDO_IPG_SIZEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_CPU_QUEUE_TOT_BST_THRESHOLD
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_CPU_QUEUE_TOT_BST_THRESHOLD.
 */
#define READ_MMU_THDO_MC_CPU_QUEUE_TOT_BST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_CPU_QUEUE_TOT_BST_THRESHOLDr_BLKACC,3,0,0,MMU_THDO_MC_CPU_QUEUE_TOT_BST_THRESHOLDr_OFFSET,i,(r._mmu_thdo_mc_cpu_queue_tot_bst_threshold),1)
#define WRITE_MMU_THDO_MC_CPU_QUEUE_TOT_BST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_CPU_QUEUE_TOT_BST_THRESHOLDr_BLKACC,3,0,0,MMU_THDO_MC_CPU_QUEUE_TOT_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdo_mc_cpu_queue_tot_bst_threshold),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_CPU_QUEUE_TOT_BST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_CQE_PRT_SP_BST_THRESHOLD
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_CQE_PRT_SP_BST_THRESHOLD.
 */
#define READ_MMU_THDO_MC_CQE_PRT_SP_BST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_CQE_PRT_SP_BST_THRESHOLDr_BLKACC,3,0,0,MMU_THDO_MC_CQE_PRT_SP_BST_THRESHOLDr_OFFSET,i,(r._mmu_thdo_mc_cqe_prt_sp_bst_threshold),1)
#define WRITE_MMU_THDO_MC_CQE_PRT_SP_BST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_CQE_PRT_SP_BST_THRESHOLDr_BLKACC,3,0,0,MMU_THDO_MC_CQE_PRT_SP_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdo_mc_cqe_prt_sp_bst_threshold),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_CQE_PRT_SP_BST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_CQE_SP_BST_THRESHOLD
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_CQE_SP_BST_THRESHOLD.
 */
#define READ_MMU_THDO_MC_CQE_SP_BST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_CQE_SP_BST_THRESHOLDr_BLKACC,3,0,0,MMU_THDO_MC_CQE_SP_BST_THRESHOLDr_OFFSET,i,(r._mmu_thdo_mc_cqe_sp_bst_threshold),1)
#define WRITE_MMU_THDO_MC_CQE_SP_BST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_CQE_SP_BST_THRESHOLDr_BLKACC,3,0,0,MMU_THDO_MC_CQE_SP_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdo_mc_cqe_sp_bst_threshold),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_CQE_SP_BST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_POOL_BST_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_POOL_BST_COUNT.
 */
#define READ_MMU_THDO_MC_POOL_BST_COUNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_POOL_BST_COUNTr_BLKACC,3,0,p,MMU_THDO_MC_POOL_BST_COUNTr_OFFSET,i,(r._mmu_thdo_mc_pool_bst_count),1)
#define WRITE_MMU_THDO_MC_POOL_BST_COUNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_POOL_BST_COUNTr_BLKACC,3,0,p,MMU_THDO_MC_POOL_BST_COUNTr_OFFSET,i,&(r._mmu_thdo_mc_pool_bst_count),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_POOL_BST_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_QUEUE_TOT_BST_THRESHOLD
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_QUEUE_TOT_BST_THRESHOLD.
 */
#define READ_MMU_THDO_MC_QUEUE_TOT_BST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_QUEUE_TOT_BST_THRESHOLDr_BLKACC,3,0,0,MMU_THDO_MC_QUEUE_TOT_BST_THRESHOLDr_OFFSET,i,(r._mmu_thdo_mc_queue_tot_bst_threshold),1)
#define WRITE_MMU_THDO_MC_QUEUE_TOT_BST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_QUEUE_TOT_BST_THRESHOLDr_BLKACC,3,0,0,MMU_THDO_MC_QUEUE_TOT_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdo_mc_queue_tot_bst_threshold),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_QUEUE_TOT_BST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_SHARED_CQE_DYNAMIC_THRESH_CAP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_SHARED_CQE_DYNAMIC_THRESH_CAP.
 */
#define READ_MMU_THDO_MC_SHARED_CQE_DYNAMIC_THRESH_CAPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_SHARED_CQE_DYNAMIC_THRESH_CAPr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_DYNAMIC_THRESH_CAPr_OFFSET,0,(r._mmu_thdo_mc_shared_cqe_dynamic_thresh_cap),1)
#define WRITE_MMU_THDO_MC_SHARED_CQE_DYNAMIC_THRESH_CAPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_SHARED_CQE_DYNAMIC_THRESH_CAPr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_DYNAMIC_THRESH_CAPr_OFFSET,0,&(r._mmu_thdo_mc_shared_cqe_dynamic_thresh_cap),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_SHARED_CQE_DYNAMIC_THRESH_CAPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_SHARED_CQE_POOL_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_SHARED_CQE_POOL_CONFIG.
 */
#define READ_MMU_THDO_MC_SHARED_CQE_POOL_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_SHARED_CQE_POOL_CONFIGr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_CONFIGr_OFFSET,0,(r._mmu_thdo_mc_shared_cqe_pool_config),1)
#define WRITE_MMU_THDO_MC_SHARED_CQE_POOL_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_SHARED_CQE_POOL_CONFIGr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_CONFIGr_OFFSET,0,&(r._mmu_thdo_mc_shared_cqe_pool_config),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_SHARED_CQE_POOL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_SHARED_CQE_POOL_DROP_STATES
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_SHARED_CQE_POOL_DROP_STATES.
 */
#define READ_MMU_THDO_MC_SHARED_CQE_POOL_DROP_STATESr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_SHARED_CQE_POOL_DROP_STATESr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_DROP_STATESr_OFFSET,0,(r._mmu_thdo_mc_shared_cqe_pool_drop_states),1)
#define WRITE_MMU_THDO_MC_SHARED_CQE_POOL_DROP_STATESr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_SHARED_CQE_POOL_DROP_STATESr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_DROP_STATESr_OFFSET,0,&(r._mmu_thdo_mc_shared_cqe_pool_drop_states),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_SHARED_CQE_POOL_DROP_STATESr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_SHARED_CQE_POOL_RED_RESUME_LIMIT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_SHARED_CQE_POOL_RED_RESUME_LIMIT.
 */
#define READ_MMU_THDO_MC_SHARED_CQE_POOL_RED_RESUME_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_SHARED_CQE_POOL_RED_RESUME_LIMITr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_RED_RESUME_LIMITr_OFFSET,i,(r._mmu_thdo_mc_shared_cqe_pool_red_resume_limit),1)
#define WRITE_MMU_THDO_MC_SHARED_CQE_POOL_RED_RESUME_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_SHARED_CQE_POOL_RED_RESUME_LIMITr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_RED_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdo_mc_shared_cqe_pool_red_resume_limit),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_SHARED_CQE_POOL_RED_RESUME_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_SHARED_CQE_POOL_RED_SHARED_LIMIT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_SHARED_CQE_POOL_RED_SHARED_LIMIT.
 */
#define READ_MMU_THDO_MC_SHARED_CQE_POOL_RED_SHARED_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_SHARED_CQE_POOL_RED_SHARED_LIMITr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_RED_SHARED_LIMITr_OFFSET,i,(r._mmu_thdo_mc_shared_cqe_pool_red_shared_limit),1)
#define WRITE_MMU_THDO_MC_SHARED_CQE_POOL_RED_SHARED_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_SHARED_CQE_POOL_RED_SHARED_LIMITr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_RED_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdo_mc_shared_cqe_pool_red_shared_limit),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_SHARED_CQE_POOL_RED_SHARED_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_SHARED_CQE_POOL_RESUME_LIMIT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_SHARED_CQE_POOL_RESUME_LIMIT.
 */
#define READ_MMU_THDO_MC_SHARED_CQE_POOL_RESUME_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_SHARED_CQE_POOL_RESUME_LIMITr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_RESUME_LIMITr_OFFSET,i,(r._mmu_thdo_mc_shared_cqe_pool_resume_limit),1)
#define WRITE_MMU_THDO_MC_SHARED_CQE_POOL_RESUME_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_SHARED_CQE_POOL_RESUME_LIMITr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdo_mc_shared_cqe_pool_resume_limit),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_SHARED_CQE_POOL_RESUME_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_SHARED_CQE_POOL_SHARED_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_SHARED_CQE_POOL_SHARED_COUNT.
 */
#define READ_MMU_THDO_MC_SHARED_CQE_POOL_SHARED_COUNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_SHARED_CQE_POOL_SHARED_COUNTr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_SHARED_COUNTr_OFFSET,i,(r._mmu_thdo_mc_shared_cqe_pool_shared_count),1)
#define WRITE_MMU_THDO_MC_SHARED_CQE_POOL_SHARED_COUNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_SHARED_CQE_POOL_SHARED_COUNTr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_SHARED_COUNTr_OFFSET,i,&(r._mmu_thdo_mc_shared_cqe_pool_shared_count),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_SHARED_CQE_POOL_SHARED_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_SHARED_CQE_POOL_SHARED_LIMIT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_SHARED_CQE_POOL_SHARED_LIMIT.
 */
#define READ_MMU_THDO_MC_SHARED_CQE_POOL_SHARED_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_SHARED_CQE_POOL_SHARED_LIMITr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_SHARED_LIMITr_OFFSET,i,(r._mmu_thdo_mc_shared_cqe_pool_shared_limit),1)
#define WRITE_MMU_THDO_MC_SHARED_CQE_POOL_SHARED_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_SHARED_CQE_POOL_SHARED_LIMITr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdo_mc_shared_cqe_pool_shared_limit),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_SHARED_CQE_POOL_SHARED_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_RESUME_LIMIT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_RESUME_LIMIT.
 */
#define READ_MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_RESUME_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_RESUME_LIMITr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_RESUME_LIMITr_OFFSET,i,(r._mmu_thdo_mc_shared_cqe_pool_yellow_resume_limit),1)
#define WRITE_MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_RESUME_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_RESUME_LIMITr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdo_mc_shared_cqe_pool_yellow_resume_limit),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_RESUME_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_SHARED_LIMIT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_SHARED_LIMIT.
 */
#define READ_MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_SHARED_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_SHARED_LIMITr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_SHARED_LIMITr_OFFSET,i,(r._mmu_thdo_mc_shared_cqe_pool_yellow_shared_limit),1)
#define WRITE_MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_SHARED_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_SHARED_LIMITr_BLKACC,3,0,p,MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdo_mc_shared_cqe_pool_yellow_shared_limit),1)

/*******************************************************************************
 * End of 'MMU_THDO_MC_SHARED_CQE_POOL_YELLOW_SHARED_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MIRROR_ON_DROP_LIMIT_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MIRROR_ON_DROP_LIMIT_CONFIG.
 */
#define READ_MMU_THDO_MIRROR_ON_DROP_LIMIT_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MIRROR_ON_DROP_LIMIT_CONFIGr_BLKACC,3,0,0,MMU_THDO_MIRROR_ON_DROP_LIMIT_CONFIGr_OFFSET,0,(r._mmu_thdo_mirror_on_drop_limit_config),1)
#define WRITE_MMU_THDO_MIRROR_ON_DROP_LIMIT_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MIRROR_ON_DROP_LIMIT_CONFIGr_BLKACC,3,0,0,MMU_THDO_MIRROR_ON_DROP_LIMIT_CONFIGr_OFFSET,0,&(r._mmu_thdo_mirror_on_drop_limit_config),1)

/*******************************************************************************
 * End of 'MMU_THDO_MIRROR_ON_DROP_LIMIT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MIRROR_ON_DROP_MODTAG_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MIRROR_ON_DROP_MODTAG_CONFIG.
 */
#define READ_MMU_THDO_MIRROR_ON_DROP_MODTAG_CONFIGr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MIRROR_ON_DROP_MODTAG_CONFIGr_BLKACC,3,0,0,MMU_THDO_MIRROR_ON_DROP_MODTAG_CONFIGr_OFFSET,i,(r._mmu_thdo_mirror_on_drop_modtag_config),1)
#define WRITE_MMU_THDO_MIRROR_ON_DROP_MODTAG_CONFIGr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MIRROR_ON_DROP_MODTAG_CONFIGr_BLKACC,3,0,0,MMU_THDO_MIRROR_ON_DROP_MODTAG_CONFIGr_OFFSET,i,&(r._mmu_thdo_mirror_on_drop_modtag_config),1)

/*******************************************************************************
 * End of 'MMU_THDO_MIRROR_ON_DROP_MODTAG_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MIRROR_ON_DROP_POOL_HIGHWATERMARK_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MIRROR_ON_DROP_POOL_HIGHWATERMARK_COUNT.
 */
#define READ_MMU_THDO_MIRROR_ON_DROP_POOL_HIGHWATERMARK_COUNTr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MIRROR_ON_DROP_POOL_HIGHWATERMARK_COUNTr_BLKACC,3,0,p,MMU_THDO_MIRROR_ON_DROP_POOL_HIGHWATERMARK_COUNTr_OFFSET,0,(r._mmu_thdo_mirror_on_drop_pool_highwatermark_count),1)
#define WRITE_MMU_THDO_MIRROR_ON_DROP_POOL_HIGHWATERMARK_COUNTr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MIRROR_ON_DROP_POOL_HIGHWATERMARK_COUNTr_BLKACC,3,0,p,MMU_THDO_MIRROR_ON_DROP_POOL_HIGHWATERMARK_COUNTr_OFFSET,0,&(r._mmu_thdo_mirror_on_drop_pool_highwatermark_count),1)

/*******************************************************************************
 * End of 'MMU_THDO_MIRROR_ON_DROP_POOL_HIGHWATERMARK_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MIRROR_ON_DROP_POOL_OCCUPANCY_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MIRROR_ON_DROP_POOL_OCCUPANCY_COUNT.
 */
#define READ_MMU_THDO_MIRROR_ON_DROP_POOL_OCCUPANCY_COUNTr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MIRROR_ON_DROP_POOL_OCCUPANCY_COUNTr_BLKACC,3,0,p,MMU_THDO_MIRROR_ON_DROP_POOL_OCCUPANCY_COUNTr_OFFSET,0,(r._mmu_thdo_mirror_on_drop_pool_occupancy_count),1)
#define WRITE_MMU_THDO_MIRROR_ON_DROP_POOL_OCCUPANCY_COUNTr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MIRROR_ON_DROP_POOL_OCCUPANCY_COUNTr_BLKACC,3,0,p,MMU_THDO_MIRROR_ON_DROP_POOL_OCCUPANCY_COUNTr_OFFSET,0,&(r._mmu_thdo_mirror_on_drop_pool_occupancy_count),1)

/*******************************************************************************
 * End of 'MMU_THDO_MIRROR_ON_DROP_POOL_OCCUPANCY_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MIRROR_ON_DROP_PROB_PROFILE_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_MIRROR_ON_DROP_PROB_PROFILE_CONFIG.
 */
#define READ_MMU_THDO_MIRROR_ON_DROP_PROB_PROFILE_CONFIGr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MIRROR_ON_DROP_PROB_PROFILE_CONFIGr_BLKACC,3,0,0,MMU_THDO_MIRROR_ON_DROP_PROB_PROFILE_CONFIGr_OFFSET,i,(r._mmu_thdo_mirror_on_drop_prob_profile_config),2)
#define WRITE_MMU_THDO_MIRROR_ON_DROP_PROB_PROFILE_CONFIGr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MIRROR_ON_DROP_PROB_PROFILE_CONFIGr_BLKACC,3,0,0,MMU_THDO_MIRROR_ON_DROP_PROB_PROFILE_CONFIGr_OFFSET,i,&(r._mmu_thdo_mirror_on_drop_prob_profile_config),2)

/*******************************************************************************
 * End of 'MMU_THDO_MIRROR_ON_DROP_PROB_PROFILE_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MIRROR_ON_DROP_PROFILE_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MIRROR_ON_DROP_PROFILE_CONFIG.
 */
#define READ_MMU_THDO_MIRROR_ON_DROP_PROFILE_CONFIGr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MIRROR_ON_DROP_PROFILE_CONFIGr_BLKACC,3,0,0,MMU_THDO_MIRROR_ON_DROP_PROFILE_CONFIGr_OFFSET,i,(r._mmu_thdo_mirror_on_drop_profile_config),1)
#define WRITE_MMU_THDO_MIRROR_ON_DROP_PROFILE_CONFIGr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MIRROR_ON_DROP_PROFILE_CONFIGr_BLKACC,3,0,0,MMU_THDO_MIRROR_ON_DROP_PROFILE_CONFIGr_OFFSET,i,&(r._mmu_thdo_mirror_on_drop_profile_config),1)

/*******************************************************************************
 * End of 'MMU_THDO_MIRROR_ON_DROP_PROFILE_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MIRROR_ON_DROP_SAMPLE_DROP_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_MIRROR_ON_DROP_SAMPLE_DROP_COUNT.
 */
#define READ_MMU_THDO_MIRROR_ON_DROP_SAMPLE_DROP_COUNTr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MIRROR_ON_DROP_SAMPLE_DROP_COUNTr_BLKACC,3,0,p,MMU_THDO_MIRROR_ON_DROP_SAMPLE_DROP_COUNTr_OFFSET,0,(r._mmu_thdo_mirror_on_drop_sample_drop_count),2)
#define WRITE_MMU_THDO_MIRROR_ON_DROP_SAMPLE_DROP_COUNTr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MIRROR_ON_DROP_SAMPLE_DROP_COUNTr_BLKACC,3,0,p,MMU_THDO_MIRROR_ON_DROP_SAMPLE_DROP_COUNTr_OFFSET,0,&(r._mmu_thdo_mirror_on_drop_sample_drop_count),2)

/*******************************************************************************
 * End of 'MMU_THDO_MIRROR_ON_DROP_SAMPLE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MIRROR_ON_DROP_SAMPLE_ENQ_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_MIRROR_ON_DROP_SAMPLE_ENQ_COUNT.
 */
#define READ_MMU_THDO_MIRROR_ON_DROP_SAMPLE_ENQ_COUNTr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MIRROR_ON_DROP_SAMPLE_ENQ_COUNTr_BLKACC,3,0,p,MMU_THDO_MIRROR_ON_DROP_SAMPLE_ENQ_COUNTr_OFFSET,0,(r._mmu_thdo_mirror_on_drop_sample_enq_count),2)
#define WRITE_MMU_THDO_MIRROR_ON_DROP_SAMPLE_ENQ_COUNTr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MIRROR_ON_DROP_SAMPLE_ENQ_COUNTr_BLKACC,3,0,p,MMU_THDO_MIRROR_ON_DROP_SAMPLE_ENQ_COUNTr_OFFSET,0,&(r._mmu_thdo_mirror_on_drop_sample_enq_count),2)

/*******************************************************************************
 * End of 'MMU_THDO_MIRROR_ON_DROP_SAMPLE_ENQ_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_MIRROR_ON_DROP_TAG_OCCUPANCY
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_MIRROR_ON_DROP_TAG_OCCUPANCY.
 */
#define READ_MMU_THDO_MIRROR_ON_DROP_TAG_OCCUPANCYr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_MIRROR_ON_DROP_TAG_OCCUPANCYr_BLKACC,3,0,p,MMU_THDO_MIRROR_ON_DROP_TAG_OCCUPANCYr_OFFSET,i,(r._mmu_thdo_mirror_on_drop_tag_occupancy),1)
#define WRITE_MMU_THDO_MIRROR_ON_DROP_TAG_OCCUPANCYr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_MIRROR_ON_DROP_TAG_OCCUPANCYr_BLKACC,3,0,p,MMU_THDO_MIRROR_ON_DROP_TAG_OCCUPANCYr_OFFSET,i,&(r._mmu_thdo_mirror_on_drop_tag_occupancy),1)

/*******************************************************************************
 * End of 'MMU_THDO_MIRROR_ON_DROP_TAG_OCCUPANCYr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_PORT_DCN_PROFILE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_PORT_DCN_PROFILE.
 */
#define READ_MMU_THDO_PORT_DCN_PROFILEr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_PORT_DCN_PROFILEr_BLKACC,3,0,p,MMU_THDO_PORT_DCN_PROFILEr_OFFSET,0,(r._mmu_thdo_port_dcn_profile),1)
#define WRITE_MMU_THDO_PORT_DCN_PROFILEr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_PORT_DCN_PROFILEr_BLKACC,3,0,p,MMU_THDO_PORT_DCN_PROFILEr_OFFSET,0,&(r._mmu_thdo_port_dcn_profile),1)

/*******************************************************************************
 * End of 'MMU_THDO_PORT_DCN_PROFILEr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_PORT_DROP_COUNT_MC
 * BLOCKS:   MMU_ITM
 * SIZE:     82
 */
/*
 * These macros can be used to access MMU_THDO_PORT_DROP_COUNT_MC.
 */
#define READ_MMU_THDO_PORT_DROP_COUNT_MCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_PORT_DROP_COUNT_MCm_BLKACC,3,0,p,MMU_THDO_PORT_DROP_COUNT_MCm_OFFSET,i,(m._mmu_thdo_port_drop_count_mc),3)
#define WRITE_MMU_THDO_PORT_DROP_COUNT_MCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_PORT_DROP_COUNT_MCm_BLKACC,3,0,p,MMU_THDO_PORT_DROP_COUNT_MCm_OFFSET,i,&(m._mmu_thdo_port_drop_count_mc),3)

/*******************************************************************************
 * End of 'MMU_THDO_PORT_DROP_COUNT_MCm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_PORT_DROP_COUNT_UC
 * BLOCKS:   MMU_ITM
 * SIZE:     157
 */
/*
 * These macros can be used to access MMU_THDO_PORT_DROP_COUNT_UC.
 */
#define READ_MMU_THDO_PORT_DROP_COUNT_UCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_PORT_DROP_COUNT_UCm_BLKACC,3,0,p,MMU_THDO_PORT_DROP_COUNT_UCm_OFFSET,i,(m._mmu_thdo_port_drop_count_uc),5)
#define WRITE_MMU_THDO_PORT_DROP_COUNT_UCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_PORT_DROP_COUNT_UCm_BLKACC,3,0,p,MMU_THDO_PORT_DROP_COUNT_UCm_OFFSET,i,&(m._mmu_thdo_port_drop_count_uc),5)

/*******************************************************************************
 * End of 'MMU_THDO_PORT_DROP_COUNT_UCm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_PORT_Q_DROP_STATE
 * BLOCKS:   MMU_ITM
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDO_PORT_Q_DROP_STATE.
 */
#define READ_MMU_THDO_PORT_Q_DROP_STATEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_PORT_Q_DROP_STATEm_BLKACC,3,0,p,MMU_THDO_PORT_Q_DROP_STATEm_OFFSET,i,(m._mmu_thdo_port_q_drop_state),2)
#define WRITE_MMU_THDO_PORT_Q_DROP_STATEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_PORT_Q_DROP_STATEm_BLKACC,3,0,p,MMU_THDO_PORT_Q_DROP_STATEm_OFFSET,i,&(m._mmu_thdo_port_q_drop_state),2)

/*******************************************************************************
 * End of 'MMU_THDO_PORT_Q_DROP_STATEm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_PORT_Q_DROP_STATE_MC
 * BLOCKS:   MMU_ITM
 * SIZE:     30
 */
/*
 * These macros can be used to access MMU_THDO_PORT_Q_DROP_STATE_MC.
 */
#define READ_MMU_THDO_PORT_Q_DROP_STATE_MCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_PORT_Q_DROP_STATE_MCm_BLKACC,3,0,p,MMU_THDO_PORT_Q_DROP_STATE_MCm_OFFSET,i,(m._mmu_thdo_port_q_drop_state_mc),1)
#define WRITE_MMU_THDO_PORT_Q_DROP_STATE_MCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_PORT_Q_DROP_STATE_MCm_BLKACC,3,0,p,MMU_THDO_PORT_Q_DROP_STATE_MCm_OFFSET,i,&(m._mmu_thdo_port_q_drop_state_mc),1)

/*******************************************************************************
 * End of 'MMU_THDO_PORT_Q_DROP_STATE_MCm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_PORT_Q_DROP_STATE_SH
 * BLOCKS:   MMU_ITM
 * SIZE:     18
 */
/*
 * These macros can be used to access MMU_THDO_PORT_Q_DROP_STATE_SH.
 */
#define READ_MMU_THDO_PORT_Q_DROP_STATE_SHm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_PORT_Q_DROP_STATE_SHm_BLKACC,3,0,p,MMU_THDO_PORT_Q_DROP_STATE_SHm_OFFSET,i,(m._mmu_thdo_port_q_drop_state_sh),1)
#define WRITE_MMU_THDO_PORT_Q_DROP_STATE_SHm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_PORT_Q_DROP_STATE_SHm_BLKACC,3,0,p,MMU_THDO_PORT_Q_DROP_STATE_SHm_OFFSET,i,&(m._mmu_thdo_port_q_drop_state_sh),1)

/*******************************************************************************
 * End of 'MMU_THDO_PORT_Q_DROP_STATE_SHm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_PORT_SP_DROP_STATE_MC
 * BLOCKS:   MMU_ITM
 * SIZE:     18
 */
/*
 * These macros can be used to access MMU_THDO_PORT_SP_DROP_STATE_MC.
 */
#define READ_MMU_THDO_PORT_SP_DROP_STATE_MCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_PORT_SP_DROP_STATE_MCm_BLKACC,3,0,p,MMU_THDO_PORT_SP_DROP_STATE_MCm_OFFSET,i,(m._mmu_thdo_port_sp_drop_state_mc),1)
#define WRITE_MMU_THDO_PORT_SP_DROP_STATE_MCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_PORT_SP_DROP_STATE_MCm_BLKACC,3,0,p,MMU_THDO_PORT_SP_DROP_STATE_MCm_OFFSET,i,&(m._mmu_thdo_port_sp_drop_state_mc),1)

/*******************************************************************************
 * End of 'MMU_THDO_PORT_SP_DROP_STATE_MCm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_PORT_SP_DROP_STATE_UC
 * BLOCKS:   MMU_ITM
 * SIZE:     12
 */
/*
 * These macros can be used to access MMU_THDO_PORT_SP_DROP_STATE_UC.
 */
#define READ_MMU_THDO_PORT_SP_DROP_STATE_UCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_PORT_SP_DROP_STATE_UCm_BLKACC,3,0,p,MMU_THDO_PORT_SP_DROP_STATE_UCm_OFFSET,i,(m._mmu_thdo_port_sp_drop_state_uc),1)
#define WRITE_MMU_THDO_PORT_SP_DROP_STATE_UCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_PORT_SP_DROP_STATE_UCm_BLKACC,3,0,p,MMU_THDO_PORT_SP_DROP_STATE_UCm_OFFSET,i,&(m._mmu_thdo_port_sp_drop_state_uc),1)

/*******************************************************************************
 * End of 'MMU_THDO_PORT_SP_DROP_STATE_UCm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_PRT_SP_SHR_BST_THRESHOLD
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_PRT_SP_SHR_BST_THRESHOLD.
 */
#define READ_MMU_THDO_PRT_SP_SHR_BST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_PRT_SP_SHR_BST_THRESHOLDr_BLKACC,3,0,0,MMU_THDO_PRT_SP_SHR_BST_THRESHOLDr_OFFSET,i,(r._mmu_thdo_prt_sp_shr_bst_threshold),1)
#define WRITE_MMU_THDO_PRT_SP_SHR_BST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_PRT_SP_SHR_BST_THRESHOLDr_BLKACC,3,0,0,MMU_THDO_PRT_SP_SHR_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdo_prt_sp_shr_bst_threshold),1)

/*******************************************************************************
 * End of 'MMU_THDO_PRT_SP_SHR_BST_THRESHOLDr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_QUEUE_AVG_ARRIVAL_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_QUEUE_AVG_ARRIVAL_COUNT.
 */
#define READ_MMU_THDO_QUEUE_AVG_ARRIVAL_COUNTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_QUEUE_AVG_ARRIVAL_COUNTm_BLKACC,3,0,p,MMU_THDO_QUEUE_AVG_ARRIVAL_COUNTm_OFFSET,i,(m._mmu_thdo_queue_avg_arrival_count),1)
#define WRITE_MMU_THDO_QUEUE_AVG_ARRIVAL_COUNTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_QUEUE_AVG_ARRIVAL_COUNTm_BLKACC,3,0,p,MMU_THDO_QUEUE_AVG_ARRIVAL_COUNTm_OFFSET,i,&(m._mmu_thdo_queue_avg_arrival_count),1)

/*******************************************************************************
 * End of 'MMU_THDO_QUEUE_AVG_ARRIVAL_COUNTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_QUEUE_CONFIG1
 * BLOCKS:   MMU_ITM
 * SIZE:     94
 */
/*
 * These macros can be used to access MMU_THDO_QUEUE_CONFIG1.
 */
#define READ_MMU_THDO_QUEUE_CONFIG1m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_QUEUE_CONFIG1m_BLKACC,3,0,0,MMU_THDO_QUEUE_CONFIG1m_OFFSET,i,(m._mmu_thdo_queue_config1),3)
#define WRITE_MMU_THDO_QUEUE_CONFIG1m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_QUEUE_CONFIG1m_BLKACC,3,0,0,MMU_THDO_QUEUE_CONFIG1m_OFFSET,i,&(m._mmu_thdo_queue_config1),3)

/*******************************************************************************
 * End of 'MMU_THDO_QUEUE_CONFIG1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_QUEUE_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     94
 */
/*
 * These macros can be used to access MMU_THDO_QUEUE_CONFIG.
 */
#define READ_MMU_THDO_QUEUE_CONFIGm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_QUEUE_CONFIGm_BLKACC,3,0,0,MMU_THDO_QUEUE_CONFIGm_OFFSET,i,(m._mmu_thdo_queue_config),3)
#define WRITE_MMU_THDO_QUEUE_CONFIGm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_QUEUE_CONFIGm_BLKACC,3,0,0,MMU_THDO_QUEUE_CONFIGm_OFFSET,i,&(m._mmu_thdo_queue_config),3)

/*******************************************************************************
 * End of 'MMU_THDO_QUEUE_CONFIGm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_QUEUE_DROP_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     127
 */
/*
 * These macros can be used to access MMU_THDO_QUEUE_DROP_COUNT.
 */
#define READ_MMU_THDO_QUEUE_DROP_COUNTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_QUEUE_DROP_COUNTm_BLKACC,3,0,p,MMU_THDO_QUEUE_DROP_COUNTm_OFFSET,i,(m._mmu_thdo_queue_drop_count),4)
#define WRITE_MMU_THDO_QUEUE_DROP_COUNTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_QUEUE_DROP_COUNTm_BLKACC,3,0,p,MMU_THDO_QUEUE_DROP_COUNTm_OFFSET,i,&(m._mmu_thdo_queue_drop_count),4)

/*******************************************************************************
 * End of 'MMU_THDO_QUEUE_DROP_COUNTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_QUEUE_INST_ARRIVAL_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_QUEUE_INST_ARRIVAL_COUNT.
 */
#define READ_MMU_THDO_QUEUE_INST_ARRIVAL_COUNTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_QUEUE_INST_ARRIVAL_COUNTm_BLKACC,3,0,p,MMU_THDO_QUEUE_INST_ARRIVAL_COUNTm_OFFSET,i,(m._mmu_thdo_queue_inst_arrival_count),1)
#define WRITE_MMU_THDO_QUEUE_INST_ARRIVAL_COUNTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_QUEUE_INST_ARRIVAL_COUNTm_BLKACC,3,0,p,MMU_THDO_QUEUE_INST_ARRIVAL_COUNTm_OFFSET,i,&(m._mmu_thdo_queue_inst_arrival_count),1)

/*******************************************************************************
 * End of 'MMU_THDO_QUEUE_INST_ARRIVAL_COUNTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_QUEUE_RESUME_OFFSET1
 * BLOCKS:   MMU_ITM
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDO_QUEUE_RESUME_OFFSET1.
 */
#define READ_MMU_THDO_QUEUE_RESUME_OFFSET1m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_QUEUE_RESUME_OFFSET1m_BLKACC,3,0,0,MMU_THDO_QUEUE_RESUME_OFFSET1m_OFFSET,i,(m._mmu_thdo_queue_resume_offset1),1)
#define WRITE_MMU_THDO_QUEUE_RESUME_OFFSET1m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_QUEUE_RESUME_OFFSET1m_BLKACC,3,0,0,MMU_THDO_QUEUE_RESUME_OFFSET1m_OFFSET,i,&(m._mmu_thdo_queue_resume_offset1),1)

/*******************************************************************************
 * End of 'MMU_THDO_QUEUE_RESUME_OFFSET1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_QUEUE_RESUME_OFFSET
 * BLOCKS:   MMU_ITM
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDO_QUEUE_RESUME_OFFSET.
 */
#define READ_MMU_THDO_QUEUE_RESUME_OFFSETm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_QUEUE_RESUME_OFFSETm_BLKACC,3,0,0,MMU_THDO_QUEUE_RESUME_OFFSETm_OFFSET,i,(m._mmu_thdo_queue_resume_offset),1)
#define WRITE_MMU_THDO_QUEUE_RESUME_OFFSETm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_QUEUE_RESUME_OFFSETm_BLKACC,3,0,0,MMU_THDO_QUEUE_RESUME_OFFSETm_OFFSET,i,&(m._mmu_thdo_queue_resume_offset),1)

/*******************************************************************************
 * End of 'MMU_THDO_QUEUE_RESUME_OFFSETm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_QUE_TOT_BST_THRESHOLD
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_QUE_TOT_BST_THRESHOLD.
 */
#define READ_MMU_THDO_QUE_TOT_BST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_QUE_TOT_BST_THRESHOLDr_BLKACC,3,0,0,MMU_THDO_QUE_TOT_BST_THRESHOLDr_OFFSET,i,(r._mmu_thdo_que_tot_bst_threshold),1)
#define WRITE_MMU_THDO_QUE_TOT_BST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_QUE_TOT_BST_THRESHOLDr_BLKACC,3,0,0,MMU_THDO_QUE_TOT_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdo_que_tot_bst_threshold),1)

/*******************************************************************************
 * End of 'MMU_THDO_QUE_TOT_BST_THRESHOLDr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_Q_TO_QGRP_MAPD0
 * BLOCKS:   MMU_ITM
 * SIZE:     13
 */
/*
 * These macros can be used to access MMU_THDO_Q_TO_QGRP_MAPD0.
 */
#define READ_MMU_THDO_Q_TO_QGRP_MAPD0m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_Q_TO_QGRP_MAPD0m_BLKACC,3,0,0,MMU_THDO_Q_TO_QGRP_MAPD0m_OFFSET,i,(m._mmu_thdo_q_to_qgrp_mapd0),1)
#define WRITE_MMU_THDO_Q_TO_QGRP_MAPD0m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_Q_TO_QGRP_MAPD0m_BLKACC,3,0,0,MMU_THDO_Q_TO_QGRP_MAPD0m_OFFSET,i,&(m._mmu_thdo_q_to_qgrp_mapd0),1)

/*******************************************************************************
 * End of 'MMU_THDO_Q_TO_QGRP_MAPD0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_Q_TO_QGRP_MAPD1
 * BLOCKS:   MMU_ITM
 * SIZE:     13
 */
/*
 * These macros can be used to access MMU_THDO_Q_TO_QGRP_MAPD1.
 */
#define READ_MMU_THDO_Q_TO_QGRP_MAPD1m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_Q_TO_QGRP_MAPD1m_BLKACC,3,0,0,MMU_THDO_Q_TO_QGRP_MAPD1m_OFFSET,i,(m._mmu_thdo_q_to_qgrp_mapd1),1)
#define WRITE_MMU_THDO_Q_TO_QGRP_MAPD1m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_Q_TO_QGRP_MAPD1m_BLKACC,3,0,0,MMU_THDO_Q_TO_QGRP_MAPD1m_OFFSET,i,&(m._mmu_thdo_q_to_qgrp_mapd1),1)

/*******************************************************************************
 * End of 'MMU_THDO_Q_TO_QGRP_MAPD1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_RESUME_PORT_MC0
 * BLOCKS:   MMU_ITM
 * SIZE:     58
 */
/*
 * These macros can be used to access MMU_THDO_RESUME_PORT_MC0.
 */
#define READ_MMU_THDO_RESUME_PORT_MC0m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_RESUME_PORT_MC0m_BLKACC,3,0,0,MMU_THDO_RESUME_PORT_MC0m_OFFSET,i,(m._mmu_thdo_resume_port_mc0),2)
#define WRITE_MMU_THDO_RESUME_PORT_MC0m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_RESUME_PORT_MC0m_BLKACC,3,0,0,MMU_THDO_RESUME_PORT_MC0m_OFFSET,i,&(m._mmu_thdo_resume_port_mc0),2)

/*******************************************************************************
 * End of 'MMU_THDO_RESUME_PORT_MC0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_RESUME_PORT_MC1
 * BLOCKS:   MMU_ITM
 * SIZE:     58
 */
/*
 * These macros can be used to access MMU_THDO_RESUME_PORT_MC1.
 */
#define READ_MMU_THDO_RESUME_PORT_MC1m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_RESUME_PORT_MC1m_BLKACC,3,0,0,MMU_THDO_RESUME_PORT_MC1m_OFFSET,i,(m._mmu_thdo_resume_port_mc1),2)
#define WRITE_MMU_THDO_RESUME_PORT_MC1m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_RESUME_PORT_MC1m_BLKACC,3,0,0,MMU_THDO_RESUME_PORT_MC1m_OFFSET,i,&(m._mmu_thdo_resume_port_mc1),2)

/*******************************************************************************
 * End of 'MMU_THDO_RESUME_PORT_MC1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_RESUME_PORT_UC0
 * BLOCKS:   MMU_ITM
 * SIZE:     58
 */
/*
 * These macros can be used to access MMU_THDO_RESUME_PORT_UC0.
 */
#define READ_MMU_THDO_RESUME_PORT_UC0m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_RESUME_PORT_UC0m_BLKACC,3,0,0,MMU_THDO_RESUME_PORT_UC0m_OFFSET,i,(m._mmu_thdo_resume_port_uc0),2)
#define WRITE_MMU_THDO_RESUME_PORT_UC0m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_RESUME_PORT_UC0m_BLKACC,3,0,0,MMU_THDO_RESUME_PORT_UC0m_OFFSET,i,&(m._mmu_thdo_resume_port_uc0),2)

/*******************************************************************************
 * End of 'MMU_THDO_RESUME_PORT_UC0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_RESUME_PORT_UC1
 * BLOCKS:   MMU_ITM
 * SIZE:     58
 */
/*
 * These macros can be used to access MMU_THDO_RESUME_PORT_UC1.
 */
#define READ_MMU_THDO_RESUME_PORT_UC1m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_RESUME_PORT_UC1m_BLKACC,3,0,0,MMU_THDO_RESUME_PORT_UC1m_OFFSET,i,(m._mmu_thdo_resume_port_uc1),2)
#define WRITE_MMU_THDO_RESUME_PORT_UC1m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_RESUME_PORT_UC1m_BLKACC,3,0,0,MMU_THDO_RESUME_PORT_UC1m_OFFSET,i,&(m._mmu_thdo_resume_port_uc1),2)

/*******************************************************************************
 * End of 'MMU_THDO_RESUME_PORT_UC1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_RESUME_QUEUE
 * BLOCKS:   MMU_ITM
 * SIZE:     61
 */
/*
 * These macros can be used to access MMU_THDO_RESUME_QUEUE.
 */
#define READ_MMU_THDO_RESUME_QUEUEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_RESUME_QUEUEm_BLKACC,3,0,p,MMU_THDO_RESUME_QUEUEm_OFFSET,i,(m._mmu_thdo_resume_queue),2)
#define WRITE_MMU_THDO_RESUME_QUEUEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_RESUME_QUEUEm_BLKACC,3,0,p,MMU_THDO_RESUME_QUEUEm_OFFSET,i,&(m._mmu_thdo_resume_queue),2)

/*******************************************************************************
 * End of 'MMU_THDO_RESUME_QUEUEm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_SHARED_DB_DYNAMIC_THRESH_CAP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_SHARED_DB_DYNAMIC_THRESH_CAP.
 */
#define READ_MMU_THDO_SHARED_DB_DYNAMIC_THRESH_CAPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_SHARED_DB_DYNAMIC_THRESH_CAPr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_DYNAMIC_THRESH_CAPr_OFFSET,0,(r._mmu_thdo_shared_db_dynamic_thresh_cap),1)
#define WRITE_MMU_THDO_SHARED_DB_DYNAMIC_THRESH_CAPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_SHARED_DB_DYNAMIC_THRESH_CAPr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_DYNAMIC_THRESH_CAPr_OFFSET,0,&(r._mmu_thdo_shared_db_dynamic_thresh_cap),1)

/*******************************************************************************
 * End of 'MMU_THDO_SHARED_DB_DYNAMIC_THRESH_CAPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_SHARED_DB_POOL_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_SHARED_DB_POOL_CONFIG.
 */
#define READ_MMU_THDO_SHARED_DB_POOL_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_SHARED_DB_POOL_CONFIGr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_CONFIGr_OFFSET,0,(r._mmu_thdo_shared_db_pool_config),1)
#define WRITE_MMU_THDO_SHARED_DB_POOL_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_SHARED_DB_POOL_CONFIGr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_CONFIGr_OFFSET,0,&(r._mmu_thdo_shared_db_pool_config),1)

/*******************************************************************************
 * End of 'MMU_THDO_SHARED_DB_POOL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_SHARED_DB_POOL_DROP_STATES
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_SHARED_DB_POOL_DROP_STATES.
 */
#define READ_MMU_THDO_SHARED_DB_POOL_DROP_STATESr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_SHARED_DB_POOL_DROP_STATESr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_DROP_STATESr_OFFSET,0,(r._mmu_thdo_shared_db_pool_drop_states),1)
#define WRITE_MMU_THDO_SHARED_DB_POOL_DROP_STATESr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_SHARED_DB_POOL_DROP_STATESr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_DROP_STATESr_OFFSET,0,&(r._mmu_thdo_shared_db_pool_drop_states),1)

/*******************************************************************************
 * End of 'MMU_THDO_SHARED_DB_POOL_DROP_STATESr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_SHARED_DB_POOL_RED_RESUME_LIMIT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_SHARED_DB_POOL_RED_RESUME_LIMIT.
 */
#define READ_MMU_THDO_SHARED_DB_POOL_RED_RESUME_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_SHARED_DB_POOL_RED_RESUME_LIMITr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_RED_RESUME_LIMITr_OFFSET,i,(r._mmu_thdo_shared_db_pool_red_resume_limit),1)
#define WRITE_MMU_THDO_SHARED_DB_POOL_RED_RESUME_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_SHARED_DB_POOL_RED_RESUME_LIMITr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_RED_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdo_shared_db_pool_red_resume_limit),1)

/*******************************************************************************
 * End of 'MMU_THDO_SHARED_DB_POOL_RED_RESUME_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_SHARED_DB_POOL_RED_SHARED_LIMIT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_SHARED_DB_POOL_RED_SHARED_LIMIT.
 */
#define READ_MMU_THDO_SHARED_DB_POOL_RED_SHARED_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_SHARED_DB_POOL_RED_SHARED_LIMITr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_RED_SHARED_LIMITr_OFFSET,i,(r._mmu_thdo_shared_db_pool_red_shared_limit),1)
#define WRITE_MMU_THDO_SHARED_DB_POOL_RED_SHARED_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_SHARED_DB_POOL_RED_SHARED_LIMITr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_RED_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdo_shared_db_pool_red_shared_limit),1)

/*******************************************************************************
 * End of 'MMU_THDO_SHARED_DB_POOL_RED_SHARED_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_SHARED_DB_POOL_RESUME_LIMIT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_SHARED_DB_POOL_RESUME_LIMIT.
 */
#define READ_MMU_THDO_SHARED_DB_POOL_RESUME_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_SHARED_DB_POOL_RESUME_LIMITr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_RESUME_LIMITr_OFFSET,i,(r._mmu_thdo_shared_db_pool_resume_limit),1)
#define WRITE_MMU_THDO_SHARED_DB_POOL_RESUME_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_SHARED_DB_POOL_RESUME_LIMITr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdo_shared_db_pool_resume_limit),1)

/*******************************************************************************
 * End of 'MMU_THDO_SHARED_DB_POOL_RESUME_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_SHARED_DB_POOL_SHARED_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_SHARED_DB_POOL_SHARED_COUNT.
 */
#define READ_MMU_THDO_SHARED_DB_POOL_SHARED_COUNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_SHARED_DB_POOL_SHARED_COUNTr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_SHARED_COUNTr_OFFSET,i,(r._mmu_thdo_shared_db_pool_shared_count),1)
#define WRITE_MMU_THDO_SHARED_DB_POOL_SHARED_COUNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_SHARED_DB_POOL_SHARED_COUNTr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_SHARED_COUNTr_OFFSET,i,&(r._mmu_thdo_shared_db_pool_shared_count),1)

/*******************************************************************************
 * End of 'MMU_THDO_SHARED_DB_POOL_SHARED_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_LOSSLESS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_LOSSLESS.
 */
#define READ_MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_LOSSLESSr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_LOSSLESSr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_LOSSLESSr_OFFSET,i,(r._mmu_thdo_shared_db_pool_shared_count_debug_lossless),1)
#define WRITE_MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_LOSSLESSr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_LOSSLESSr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_LOSSLESSr_OFFSET,i,&(r._mmu_thdo_shared_db_pool_shared_count_debug_lossless),1)

/*******************************************************************************
 * End of 'MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_LOSSLESSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_MC
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_MC.
 */
#define READ_MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_MCr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_MCr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_MCr_OFFSET,i,(r._mmu_thdo_shared_db_pool_shared_count_debug_mc),1)
#define WRITE_MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_MCr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_MCr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_MCr_OFFSET,i,&(r._mmu_thdo_shared_db_pool_shared_count_debug_mc),1)

/*******************************************************************************
 * End of 'MMU_THDO_SHARED_DB_POOL_SHARED_COUNT_DEBUG_MCr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_SHARED_DB_POOL_SHARED_LIMIT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_SHARED_DB_POOL_SHARED_LIMIT.
 */
#define READ_MMU_THDO_SHARED_DB_POOL_SHARED_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_SHARED_DB_POOL_SHARED_LIMITr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_SHARED_LIMITr_OFFSET,i,(r._mmu_thdo_shared_db_pool_shared_limit),1)
#define WRITE_MMU_THDO_SHARED_DB_POOL_SHARED_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_SHARED_DB_POOL_SHARED_LIMITr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdo_shared_db_pool_shared_limit),1)

/*******************************************************************************
 * End of 'MMU_THDO_SHARED_DB_POOL_SHARED_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_SHARED_DB_POOL_YELLOW_RESUME_LIMIT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_SHARED_DB_POOL_YELLOW_RESUME_LIMIT.
 */
#define READ_MMU_THDO_SHARED_DB_POOL_YELLOW_RESUME_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_SHARED_DB_POOL_YELLOW_RESUME_LIMITr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_YELLOW_RESUME_LIMITr_OFFSET,i,(r._mmu_thdo_shared_db_pool_yellow_resume_limit),1)
#define WRITE_MMU_THDO_SHARED_DB_POOL_YELLOW_RESUME_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_SHARED_DB_POOL_YELLOW_RESUME_LIMITr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_YELLOW_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdo_shared_db_pool_yellow_resume_limit),1)

/*******************************************************************************
 * End of 'MMU_THDO_SHARED_DB_POOL_YELLOW_RESUME_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_SHARED_DB_POOL_YELLOW_SHARED_LIMIT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_SHARED_DB_POOL_YELLOW_SHARED_LIMIT.
 */
#define READ_MMU_THDO_SHARED_DB_POOL_YELLOW_SHARED_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_SHARED_DB_POOL_YELLOW_SHARED_LIMITr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_YELLOW_SHARED_LIMITr_OFFSET,i,(r._mmu_thdo_shared_db_pool_yellow_shared_limit),1)
#define WRITE_MMU_THDO_SHARED_DB_POOL_YELLOW_SHARED_LIMITr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_SHARED_DB_POOL_YELLOW_SHARED_LIMITr_BLKACC,3,0,p,MMU_THDO_SHARED_DB_POOL_YELLOW_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdo_shared_db_pool_yellow_shared_limit),1)

/*******************************************************************************
 * End of 'MMU_THDO_SHARED_DB_POOL_YELLOW_SHARED_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_SP_SHR_BST_THRESHOLD
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_SP_SHR_BST_THRESHOLD.
 */
#define READ_MMU_THDO_SP_SHR_BST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_SP_SHR_BST_THRESHOLDr_BLKACC,3,0,0,MMU_THDO_SP_SHR_BST_THRESHOLDr_OFFSET,i,(r._mmu_thdo_sp_shr_bst_threshold),1)
#define WRITE_MMU_THDO_SP_SHR_BST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_SP_SHR_BST_THRESHOLDr_BLKACC,3,0,0,MMU_THDO_SP_SHR_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdo_sp_shr_bst_threshold),1)

/*******************************************************************************
 * End of 'MMU_THDO_SP_SHR_BST_THRESHOLDr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_SRC_PORT_DROP_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     44
 */
/*
 * These macros can be used to access MMU_THDO_SRC_PORT_DROP_COUNT.
 */
#define READ_MMU_THDO_SRC_PORT_DROP_COUNTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_SRC_PORT_DROP_COUNTm_BLKACC,3,0,p,MMU_THDO_SRC_PORT_DROP_COUNTm_OFFSET,i,(m._mmu_thdo_src_port_drop_count),2)
#define WRITE_MMU_THDO_SRC_PORT_DROP_COUNTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_SRC_PORT_DROP_COUNTm_BLKACC,3,0,p,MMU_THDO_SRC_PORT_DROP_COUNTm_OFFSET,i,&(m._mmu_thdo_src_port_drop_count),2)

/*******************************************************************************
 * End of 'MMU_THDO_SRC_PORT_DROP_COUNTm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDO_TMBUS.
 */
#define READ_MMU_THDO_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_TMBUSr_BLKACC,3,0,0,MMU_THDO_TMBUSr_OFFSET,0,(r._mmu_thdo_tmbus),2)
#define WRITE_MMU_THDO_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_TMBUSr_BLKACC,3,0,0,MMU_THDO_TMBUSr_OFFSET,0,&(r._mmu_thdo_tmbus),2)

/*******************************************************************************
 * End of 'MMU_THDO_TMBUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_TOTAL_COUNTER_QUEUE_SH
 * BLOCKS:   MMU_ITM
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDO_TOTAL_COUNTER_QUEUE_SH.
 */
#define READ_MMU_THDO_TOTAL_COUNTER_QUEUE_SHm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_TOTAL_COUNTER_QUEUE_SHm_BLKACC,3,0,p,MMU_THDO_TOTAL_COUNTER_QUEUE_SHm_OFFSET,i,(m._mmu_thdo_total_counter_queue_sh),1)
#define WRITE_MMU_THDO_TOTAL_COUNTER_QUEUE_SHm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_TOTAL_COUNTER_QUEUE_SHm_BLKACC,3,0,p,MMU_THDO_TOTAL_COUNTER_QUEUE_SHm_OFFSET,i,&(m._mmu_thdo_total_counter_queue_sh),1)

/*******************************************************************************
 * End of 'MMU_THDO_TOTAL_COUNTER_QUEUE_SHm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_TOTAL_PORT_COUNTER
 * BLOCKS:   MMU_ITM
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDO_TOTAL_PORT_COUNTER.
 */
#define READ_MMU_THDO_TOTAL_PORT_COUNTERm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_TOTAL_PORT_COUNTERm_BLKACC,3,0,p,MMU_THDO_TOTAL_PORT_COUNTERm_OFFSET,i,(m._mmu_thdo_total_port_counter),1)
#define WRITE_MMU_THDO_TOTAL_PORT_COUNTERm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_TOTAL_PORT_COUNTERm_BLKACC,3,0,p,MMU_THDO_TOTAL_PORT_COUNTERm_OFFSET,i,&(m._mmu_thdo_total_port_counter),1)

/*******************************************************************************
 * End of 'MMU_THDO_TOTAL_PORT_COUNTERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_TOTAL_PORT_COUNTER_MC
 * BLOCKS:   MMU_ITM
 * SIZE:     20
 */
/*
 * These macros can be used to access MMU_THDO_TOTAL_PORT_COUNTER_MC.
 */
#define READ_MMU_THDO_TOTAL_PORT_COUNTER_MCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_TOTAL_PORT_COUNTER_MCm_BLKACC,3,0,p,MMU_THDO_TOTAL_PORT_COUNTER_MCm_OFFSET,i,(m._mmu_thdo_total_port_counter_mc),1)
#define WRITE_MMU_THDO_TOTAL_PORT_COUNTER_MCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_TOTAL_PORT_COUNTER_MCm_BLKACC,3,0,p,MMU_THDO_TOTAL_PORT_COUNTER_MCm_OFFSET,i,&(m._mmu_thdo_total_port_counter_mc),1)

/*******************************************************************************
 * End of 'MMU_THDO_TOTAL_PORT_COUNTER_MCm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_TOTAL_PORT_COUNTER_MC_SH
 * BLOCKS:   MMU_ITM
 * SIZE:     20
 */
/*
 * These macros can be used to access MMU_THDO_TOTAL_PORT_COUNTER_MC_SH.
 */
#define READ_MMU_THDO_TOTAL_PORT_COUNTER_MC_SHm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_TOTAL_PORT_COUNTER_MC_SHm_BLKACC,3,0,p,MMU_THDO_TOTAL_PORT_COUNTER_MC_SHm_OFFSET,i,(m._mmu_thdo_total_port_counter_mc_sh),1)
#define WRITE_MMU_THDO_TOTAL_PORT_COUNTER_MC_SHm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_TOTAL_PORT_COUNTER_MC_SHm_BLKACC,3,0,p,MMU_THDO_TOTAL_PORT_COUNTER_MC_SHm_OFFSET,i,&(m._mmu_thdo_total_port_counter_mc_sh),1)

/*******************************************************************************
 * End of 'MMU_THDO_TOTAL_PORT_COUNTER_MC_SHm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_TOTAL_PORT_COUNTER_SH
 * BLOCKS:   MMU_ITM
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDO_TOTAL_PORT_COUNTER_SH.
 */
#define READ_MMU_THDO_TOTAL_PORT_COUNTER_SHm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_TOTAL_PORT_COUNTER_SHm_BLKACC,3,0,p,MMU_THDO_TOTAL_PORT_COUNTER_SHm_OFFSET,i,(m._mmu_thdo_total_port_counter_sh),1)
#define WRITE_MMU_THDO_TOTAL_PORT_COUNTER_SHm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_TOTAL_PORT_COUNTER_SHm_BLKACC,3,0,p,MMU_THDO_TOTAL_PORT_COUNTER_SHm_OFFSET,i,&(m._mmu_thdo_total_port_counter_sh),1)

/*******************************************************************************
 * End of 'MMU_THDO_TOTAL_PORT_COUNTER_SHm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_UC_POOL_BST_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_UC_POOL_BST_COUNT.
 */
#define READ_MMU_THDO_UC_POOL_BST_COUNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_UC_POOL_BST_COUNTr_BLKACC,3,0,p,MMU_THDO_UC_POOL_BST_COUNTr_OFFSET,i,(r._mmu_thdo_uc_pool_bst_count),1)
#define WRITE_MMU_THDO_UC_POOL_BST_COUNTr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_UC_POOL_BST_COUNTr_BLKACC,3,0,p,MMU_THDO_UC_POOL_BST_COUNTr_OFFSET,i,&(r._mmu_thdo_uc_pool_bst_count),1)

/*******************************************************************************
 * End of 'MMU_THDO_UC_POOL_BST_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDO_VOQ_FAIRNESS_CFG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDO_VOQ_FAIRNESS_CFG.
 */
#define READ_MMU_THDO_VOQ_FAIRNESS_CFGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDO_VOQ_FAIRNESS_CFGr_BLKACC,3,0,0,MMU_THDO_VOQ_FAIRNESS_CFGr_OFFSET,0,(r._mmu_thdo_voq_fairness_cfg),1)
#define WRITE_MMU_THDO_VOQ_FAIRNESS_CFGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDO_VOQ_FAIRNESS_CFGr_BLKACC,3,0,0,MMU_THDO_VOQ_FAIRNESS_CFGr_OFFSET,0,&(r._mmu_thdo_voq_fairness_cfg),1)

/*******************************************************************************
 * End of 'MMU_THDO_VOQ_FAIRNESS_CFGr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDO_WRED_SH_COUNTER_PORT_UC
 * BLOCKS:   MMU_ITM
 * SIZE:     80
 */
/*
 * These macros can be used to access MMU_THDO_WRED_SH_COUNTER_PORT_UC.
 */
#define READ_MMU_THDO_WRED_SH_COUNTER_PORT_UCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_THDO_WRED_SH_COUNTER_PORT_UCm_BLKACC,3,0,p,MMU_THDO_WRED_SH_COUNTER_PORT_UCm_OFFSET,i,(m._mmu_thdo_wred_sh_counter_port_uc),3)
#define WRITE_MMU_THDO_WRED_SH_COUNTER_PORT_UCm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_THDO_WRED_SH_COUNTER_PORT_UCm_BLKACC,3,0,p,MMU_THDO_WRED_SH_COUNTER_PORT_UCm_OFFSET,i,&(m._mmu_thdo_wred_sh_counter_port_uc),3)

/*******************************************************************************
 * End of 'MMU_THDO_WRED_SH_COUNTER_PORT_UCm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_BST_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_BST_CONFIG.
 */
#define READ_MMU_THDR_QE_BST_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_BST_CONFIGr_BLKACC,3,0,p,MMU_THDR_QE_BST_CONFIGr_OFFSET,0,(r._mmu_thdr_qe_bst_config),1)
#define WRITE_MMU_THDR_QE_BST_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_BST_CONFIGr_BLKACC,3,0,p,MMU_THDR_QE_BST_CONFIGr_OFFSET,0,&(r._mmu_thdr_qe_bst_config),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_BST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_BST_COUNT_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_BST_COUNT_PRIQ.
 */
#define READ_MMU_THDR_QE_BST_COUNT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_BST_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_BST_COUNT_PRIQr_OFFSET,i,(r._mmu_thdr_qe_bst_count_priq),1)
#define WRITE_MMU_THDR_QE_BST_COUNT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_BST_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_BST_COUNT_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_bst_count_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_BST_COUNT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_BST_COUNT_SP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_BST_COUNT_SP.
 */
#define READ_MMU_THDR_QE_BST_COUNT_SPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_BST_COUNT_SPr_BLKACC,3,0,p,MMU_THDR_QE_BST_COUNT_SPr_OFFSET,0,(r._mmu_thdr_qe_bst_count_sp),1)
#define WRITE_MMU_THDR_QE_BST_COUNT_SPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_BST_COUNT_SPr_BLKACC,3,0,p,MMU_THDR_QE_BST_COUNT_SPr_OFFSET,0,&(r._mmu_thdr_qe_bst_count_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_BST_COUNT_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_BST_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_BST_STAT.
 */
#define READ_MMU_THDR_QE_BST_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_BST_STATr_BLKACC,3,0,p,MMU_THDR_QE_BST_STATr_OFFSET,0,(r._mmu_thdr_qe_bst_stat),1)
#define WRITE_MMU_THDR_QE_BST_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_BST_STATr_BLKACC,3,0,p,MMU_THDR_QE_BST_STATr_OFFSET,0,&(r._mmu_thdr_qe_bst_stat),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_BST_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_BST_THRESHOLD_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_BST_THRESHOLD_PRIQ.
 */
#define READ_MMU_THDR_QE_BST_THRESHOLD_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_BST_THRESHOLD_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_BST_THRESHOLD_PRIQr_OFFSET,i,(r._mmu_thdr_qe_bst_threshold_priq),1)
#define WRITE_MMU_THDR_QE_BST_THRESHOLD_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_BST_THRESHOLD_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_BST_THRESHOLD_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_bst_threshold_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_BST_THRESHOLD_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_BST_THRESHOLD_SP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_BST_THRESHOLD_SP.
 */
#define READ_MMU_THDR_QE_BST_THRESHOLD_SPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_BST_THRESHOLD_SPr_BLKACC,3,0,p,MMU_THDR_QE_BST_THRESHOLD_SPr_OFFSET,0,(r._mmu_thdr_qe_bst_threshold_sp),1)
#define WRITE_MMU_THDR_QE_BST_THRESHOLD_SPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_BST_THRESHOLD_SPr_BLKACC,3,0,p,MMU_THDR_QE_BST_THRESHOLD_SPr_OFFSET,0,&(r._mmu_thdr_qe_bst_threshold_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_BST_THRESHOLD_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_BYPASS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_BYPASS.
 */
#define READ_MMU_THDR_QE_BYPASSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_BYPASSr_BLKACC,3,0,p,MMU_THDR_QE_BYPASSr_OFFSET,0,(r._mmu_thdr_qe_bypass),1)
#define WRITE_MMU_THDR_QE_BYPASSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_BYPASSr_BLKACC,3,0,p,MMU_THDR_QE_BYPASSr_OFFSET,0,&(r._mmu_thdr_qe_bypass),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_BYPASSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_CONFIG1_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_CONFIG1_PRIQ.
 */
#define READ_MMU_THDR_QE_CONFIG1_PRIQr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_CONFIG1_PRIQr_BLKACC,3,0,0,MMU_THDR_QE_CONFIG1_PRIQr_OFFSET,i,(r._mmu_thdr_qe_config1_priq),1)
#define WRITE_MMU_THDR_QE_CONFIG1_PRIQr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_CONFIG1_PRIQr_BLKACC,3,0,0,MMU_THDR_QE_CONFIG1_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_config1_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_CONFIG1_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_CONFIG.
 */
#define READ_MMU_THDR_QE_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_CONFIGr_BLKACC,3,0,0,MMU_THDR_QE_CONFIGr_OFFSET,0,(r._mmu_thdr_qe_config),1)
#define WRITE_MMU_THDR_QE_CONFIGr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_CONFIGr_BLKACC,3,0,0,MMU_THDR_QE_CONFIGr_OFFSET,0,&(r._mmu_thdr_qe_config),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_CONFIG_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_CONFIG_PRIQ.
 */
#define READ_MMU_THDR_QE_CONFIG_PRIQr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_CONFIG_PRIQr_BLKACC,3,0,0,MMU_THDR_QE_CONFIG_PRIQr_OFFSET,i,(r._mmu_thdr_qe_config_priq),1)
#define WRITE_MMU_THDR_QE_CONFIG_PRIQr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_CONFIG_PRIQr_BLKACC,3,0,0,MMU_THDR_QE_CONFIG_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_config_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_CONFIG_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_CONFIG_SP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_CONFIG_SP.
 */
#define READ_MMU_THDR_QE_CONFIG_SPr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_CONFIG_SPr_BLKACC,3,0,0,MMU_THDR_QE_CONFIG_SPr_OFFSET,0,(r._mmu_thdr_qe_config_sp),1)
#define WRITE_MMU_THDR_QE_CONFIG_SPr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_CONFIG_SPr_BLKACC,3,0,0,MMU_THDR_QE_CONFIG_SPr_OFFSET,0,&(r._mmu_thdr_qe_config_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_CONFIG_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_COUNTER_OVERFLOW
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_COUNTER_OVERFLOW.
 */
#define READ_MMU_THDR_QE_COUNTER_OVERFLOWr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_COUNTER_OVERFLOWr_BLKACC,3,0,p,MMU_THDR_QE_COUNTER_OVERFLOWr_OFFSET,0,(r._mmu_thdr_qe_counter_overflow),1)
#define WRITE_MMU_THDR_QE_COUNTER_OVERFLOWr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_COUNTER_OVERFLOWr_BLKACC,3,0,p,MMU_THDR_QE_COUNTER_OVERFLOWr_OFFSET,0,&(r._mmu_thdr_qe_counter_overflow),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_COUNTER_OVERFLOWr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_COUNTER_OVERFLOW_SIZE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_COUNTER_OVERFLOW_SIZE.
 */
#define READ_MMU_THDR_QE_COUNTER_OVERFLOW_SIZEr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_COUNTER_OVERFLOW_SIZEr_BLKACC,3,0,p,MMU_THDR_QE_COUNTER_OVERFLOW_SIZEr_OFFSET,0,(r._mmu_thdr_qe_counter_overflow_size),1)
#define WRITE_MMU_THDR_QE_COUNTER_OVERFLOW_SIZEr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_COUNTER_OVERFLOW_SIZEr_BLKACC,3,0,p,MMU_THDR_QE_COUNTER_OVERFLOW_SIZEr_OFFSET,0,&(r._mmu_thdr_qe_counter_overflow_size),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_COUNTER_OVERFLOW_SIZEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_COUNTER_UNDERFLOW
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_COUNTER_UNDERFLOW.
 */
#define READ_MMU_THDR_QE_COUNTER_UNDERFLOWr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_COUNTER_UNDERFLOWr_BLKACC,3,0,p,MMU_THDR_QE_COUNTER_UNDERFLOWr_OFFSET,0,(r._mmu_thdr_qe_counter_underflow),1)
#define WRITE_MMU_THDR_QE_COUNTER_UNDERFLOWr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_COUNTER_UNDERFLOWr_BLKACC,3,0,p,MMU_THDR_QE_COUNTER_UNDERFLOWr_OFFSET,0,&(r._mmu_thdr_qe_counter_underflow),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_COUNTER_UNDERFLOWr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_CPU_INT_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_CPU_INT_EN.
 */
#define READ_MMU_THDR_QE_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_CPU_INT_ENr_BLKACC,3,0,0,MMU_THDR_QE_CPU_INT_ENr_OFFSET,0,(r._mmu_thdr_qe_cpu_int_en),1)
#define WRITE_MMU_THDR_QE_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_CPU_INT_ENr_BLKACC,3,0,0,MMU_THDR_QE_CPU_INT_ENr_OFFSET,0,&(r._mmu_thdr_qe_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_CPU_INT_EN_INST
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_CPU_INT_EN_INST.
 */
#define READ_MMU_THDR_QE_CPU_INT_EN_INSTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_CPU_INT_EN_INSTr_BLKACC,3,0,0,MMU_THDR_QE_CPU_INT_EN_INSTr_OFFSET,0,(r._mmu_thdr_qe_cpu_int_en_inst),1)
#define WRITE_MMU_THDR_QE_CPU_INT_EN_INSTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_CPU_INT_EN_INSTr_BLKACC,3,0,0,MMU_THDR_QE_CPU_INT_EN_INSTr_OFFSET,0,&(r._mmu_thdr_qe_cpu_int_en_inst),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_CPU_INT_EN_INSTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_CPU_INT_SET
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_CPU_INT_SET.
 */
#define READ_MMU_THDR_QE_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_CPU_INT_SETr_BLKACC,3,0,p,MMU_THDR_QE_CPU_INT_SETr_OFFSET,0,(r._mmu_thdr_qe_cpu_int_set),1)
#define WRITE_MMU_THDR_QE_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_CPU_INT_SETr_BLKACC,3,0,p,MMU_THDR_QE_CPU_INT_SETr_OFFSET,0,&(r._mmu_thdr_qe_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_CPU_INT_SET_INST
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_CPU_INT_SET_INST.
 */
#define READ_MMU_THDR_QE_CPU_INT_SET_INSTr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_CPU_INT_SET_INSTr_BLKACC,3,0,p,MMU_THDR_QE_CPU_INT_SET_INSTr_OFFSET,0,(r._mmu_thdr_qe_cpu_int_set_inst),1)
#define WRITE_MMU_THDR_QE_CPU_INT_SET_INSTr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_CPU_INT_SET_INSTr_BLKACC,3,0,p,MMU_THDR_QE_CPU_INT_SET_INSTr_OFFSET,0,&(r._mmu_thdr_qe_cpu_int_set_inst),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_CPU_INT_SET_INSTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_CPU_INT_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_CPU_INT_STAT.
 */
#define READ_MMU_THDR_QE_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_CPU_INT_STATr_BLKACC,3,0,p,MMU_THDR_QE_CPU_INT_STATr_OFFSET,0,(r._mmu_thdr_qe_cpu_int_stat),1)
#define WRITE_MMU_THDR_QE_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_CPU_INT_STATr_BLKACC,3,0,p,MMU_THDR_QE_CPU_INT_STATr_OFFSET,0,&(r._mmu_thdr_qe_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_CPU_INT_STAT_INST
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_CPU_INT_STAT_INST.
 */
#define READ_MMU_THDR_QE_CPU_INT_STAT_INSTr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_CPU_INT_STAT_INSTr_BLKACC,3,0,p,MMU_THDR_QE_CPU_INT_STAT_INSTr_OFFSET,0,(r._mmu_thdr_qe_cpu_int_stat_inst),1)
#define WRITE_MMU_THDR_QE_CPU_INT_STAT_INSTr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_CPU_INT_STAT_INSTr_BLKACC,3,0,p,MMU_THDR_QE_CPU_INT_STAT_INSTr_OFFSET,0,&(r._mmu_thdr_qe_cpu_int_stat_inst),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_CPU_INT_STAT_INSTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_DROP_COUNT_BYTE_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDR_QE_DROP_COUNT_BYTE_PRIQ.
 */
#define READ_MMU_THDR_QE_DROP_COUNT_BYTE_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_DROP_COUNT_BYTE_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_DROP_COUNT_BYTE_PRIQr_OFFSET,i,(r._mmu_thdr_qe_drop_count_byte_priq),2)
#define WRITE_MMU_THDR_QE_DROP_COUNT_BYTE_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_DROP_COUNT_BYTE_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_DROP_COUNT_BYTE_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_drop_count_byte_priq),2)

/*******************************************************************************
 * End of 'MMU_THDR_QE_DROP_COUNT_BYTE_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_DROP_COUNT_PKT_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDR_QE_DROP_COUNT_PKT_PRIQ.
 */
#define READ_MMU_THDR_QE_DROP_COUNT_PKT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_DROP_COUNT_PKT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_DROP_COUNT_PKT_PRIQr_OFFSET,i,(r._mmu_thdr_qe_drop_count_pkt_priq),2)
#define WRITE_MMU_THDR_QE_DROP_COUNT_PKT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_DROP_COUNT_PKT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_DROP_COUNT_PKT_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_drop_count_pkt_priq),2)

/*******************************************************************************
 * End of 'MMU_THDR_QE_DROP_COUNT_PKT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_DROP_COUNT_RED_PKT_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDR_QE_DROP_COUNT_RED_PKT_PRIQ.
 */
#define READ_MMU_THDR_QE_DROP_COUNT_RED_PKT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_DROP_COUNT_RED_PKT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_DROP_COUNT_RED_PKT_PRIQr_OFFSET,i,(r._mmu_thdr_qe_drop_count_red_pkt_priq),2)
#define WRITE_MMU_THDR_QE_DROP_COUNT_RED_PKT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_DROP_COUNT_RED_PKT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_DROP_COUNT_RED_PKT_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_drop_count_red_pkt_priq),2)

/*******************************************************************************
 * End of 'MMU_THDR_QE_DROP_COUNT_RED_PKT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_DROP_COUNT_YELLOW_PKT_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDR_QE_DROP_COUNT_YELLOW_PKT_PRIQ.
 */
#define READ_MMU_THDR_QE_DROP_COUNT_YELLOW_PKT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_DROP_COUNT_YELLOW_PKT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_DROP_COUNT_YELLOW_PKT_PRIQr_OFFSET,i,(r._mmu_thdr_qe_drop_count_yellow_pkt_priq),2)
#define WRITE_MMU_THDR_QE_DROP_COUNT_YELLOW_PKT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_DROP_COUNT_YELLOW_PKT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_DROP_COUNT_YELLOW_PKT_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_drop_count_yellow_pkt_priq),2)

/*******************************************************************************
 * End of 'MMU_THDR_QE_DROP_COUNT_YELLOW_PKT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_LIMIT_MIN_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_LIMIT_MIN_PRIQ.
 */
#define READ_MMU_THDR_QE_LIMIT_MIN_PRIQr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_LIMIT_MIN_PRIQr_BLKACC,3,0,0,MMU_THDR_QE_LIMIT_MIN_PRIQr_OFFSET,i,(r._mmu_thdr_qe_limit_min_priq),1)
#define WRITE_MMU_THDR_QE_LIMIT_MIN_PRIQr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_LIMIT_MIN_PRIQr_BLKACC,3,0,0,MMU_THDR_QE_LIMIT_MIN_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_limit_min_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_LIMIT_MIN_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_MIN_COUNT_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_MIN_COUNT_PRIQ.
 */
#define READ_MMU_THDR_QE_MIN_COUNT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_MIN_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_MIN_COUNT_PRIQr_OFFSET,i,(r._mmu_thdr_qe_min_count_priq),1)
#define WRITE_MMU_THDR_QE_MIN_COUNT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_MIN_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_MIN_COUNT_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_min_count_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_MIN_COUNT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQ.
 */
#define READ_MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQr_BLKACC,3,0,0,MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQr_OFFSET,i,(r._mmu_thdr_qe_reset_offset_color_priq),1)
#define WRITE_MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQr_BLKACC,3,0,0,MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_reset_offset_color_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_RESUME_COLOR_LIMIT_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_RESUME_COLOR_LIMIT_PRIQ.
 */
#define READ_MMU_THDR_QE_RESUME_COLOR_LIMIT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_RESUME_COLOR_LIMIT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_RESUME_COLOR_LIMIT_PRIQr_OFFSET,i,(r._mmu_thdr_qe_resume_color_limit_priq),1)
#define WRITE_MMU_THDR_QE_RESUME_COLOR_LIMIT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_RESUME_COLOR_LIMIT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_RESUME_COLOR_LIMIT_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_resume_color_limit_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_RESUME_COLOR_LIMIT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_RESUME_COLOR_LIMIT_SP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_RESUME_COLOR_LIMIT_SP.
 */
#define READ_MMU_THDR_QE_RESUME_COLOR_LIMIT_SPr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_RESUME_COLOR_LIMIT_SPr_BLKACC,3,0,0,MMU_THDR_QE_RESUME_COLOR_LIMIT_SPr_OFFSET,0,(r._mmu_thdr_qe_resume_color_limit_sp),1)
#define WRITE_MMU_THDR_QE_RESUME_COLOR_LIMIT_SPr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_RESUME_COLOR_LIMIT_SPr_BLKACC,3,0,0,MMU_THDR_QE_RESUME_COLOR_LIMIT_SPr_OFFSET,0,&(r._mmu_thdr_qe_resume_color_limit_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_RESUME_COLOR_LIMIT_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_RESUME_LIMIT_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_RESUME_LIMIT_PRIQ.
 */
#define READ_MMU_THDR_QE_RESUME_LIMIT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_RESUME_LIMIT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_RESUME_LIMIT_PRIQr_OFFSET,i,(r._mmu_thdr_qe_resume_limit_priq),1)
#define WRITE_MMU_THDR_QE_RESUME_LIMIT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_RESUME_LIMIT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_RESUME_LIMIT_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_resume_limit_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_RESUME_LIMIT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_RSVD_REG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_RSVD_REG.
 */
#define READ_MMU_THDR_QE_RSVD_REGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_RSVD_REGr_BLKACC,3,0,p,MMU_THDR_QE_RSVD_REGr_OFFSET,0,(r._mmu_thdr_qe_rsvd_reg),1)
#define WRITE_MMU_THDR_QE_RSVD_REGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_RSVD_REGr_BLKACC,3,0,p,MMU_THDR_QE_RSVD_REGr_OFFSET,0,&(r._mmu_thdr_qe_rsvd_reg),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_RSVD_REGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_SHARED_COLOR_LIMIT_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_SHARED_COLOR_LIMIT_PRIQ.
 */
#define READ_MMU_THDR_QE_SHARED_COLOR_LIMIT_PRIQr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_SHARED_COLOR_LIMIT_PRIQr_BLKACC,3,0,0,MMU_THDR_QE_SHARED_COLOR_LIMIT_PRIQr_OFFSET,i,(r._mmu_thdr_qe_shared_color_limit_priq),1)
#define WRITE_MMU_THDR_QE_SHARED_COLOR_LIMIT_PRIQr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_SHARED_COLOR_LIMIT_PRIQr_BLKACC,3,0,0,MMU_THDR_QE_SHARED_COLOR_LIMIT_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_shared_color_limit_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_SHARED_COLOR_LIMIT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_SHARED_COLOR_LIMIT_SP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_SHARED_COLOR_LIMIT_SP.
 */
#define READ_MMU_THDR_QE_SHARED_COLOR_LIMIT_SPr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_SHARED_COLOR_LIMIT_SPr_BLKACC,3,0,0,MMU_THDR_QE_SHARED_COLOR_LIMIT_SPr_OFFSET,0,(r._mmu_thdr_qe_shared_color_limit_sp),1)
#define WRITE_MMU_THDR_QE_SHARED_COLOR_LIMIT_SPr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_SHARED_COLOR_LIMIT_SPr_BLKACC,3,0,0,MMU_THDR_QE_SHARED_COLOR_LIMIT_SPr_OFFSET,0,&(r._mmu_thdr_qe_shared_color_limit_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_SHARED_COLOR_LIMIT_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_SHARED_COUNT_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_SHARED_COUNT_PRIQ.
 */
#define READ_MMU_THDR_QE_SHARED_COUNT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_SHARED_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_SHARED_COUNT_PRIQr_OFFSET,i,(r._mmu_thdr_qe_shared_count_priq),1)
#define WRITE_MMU_THDR_QE_SHARED_COUNT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_SHARED_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_SHARED_COUNT_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_shared_count_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_SHARED_COUNT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_SHARED_COUNT_SP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_SHARED_COUNT_SP.
 */
#define READ_MMU_THDR_QE_SHARED_COUNT_SPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_SHARED_COUNT_SPr_BLKACC,3,0,p,MMU_THDR_QE_SHARED_COUNT_SPr_OFFSET,0,(r._mmu_thdr_qe_shared_count_sp),1)
#define WRITE_MMU_THDR_QE_SHARED_COUNT_SPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_SHARED_COUNT_SPr_BLKACC,3,0,p,MMU_THDR_QE_SHARED_COUNT_SPr_OFFSET,0,&(r._mmu_thdr_qe_shared_count_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_SHARED_COUNT_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_STATUS_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_STATUS_PRIQ.
 */
#define READ_MMU_THDR_QE_STATUS_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_STATUS_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_STATUS_PRIQr_OFFSET,i,(r._mmu_thdr_qe_status_priq),1)
#define WRITE_MMU_THDR_QE_STATUS_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_STATUS_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_STATUS_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_status_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_STATUS_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_STATUS_SP
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_STATUS_SP.
 */
#define READ_MMU_THDR_QE_STATUS_SPr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_STATUS_SPr_BLKACC,3,0,p,MMU_THDR_QE_STATUS_SPr_OFFSET,0,(r._mmu_thdr_qe_status_sp),1)
#define WRITE_MMU_THDR_QE_STATUS_SPr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_STATUS_SPr_BLKACC,3,0,p,MMU_THDR_QE_STATUS_SPr_OFFSET,0,&(r._mmu_thdr_qe_status_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_STATUS_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_TOTAL_COUNT_PRIQ
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_TOTAL_COUNT_PRIQ.
 */
#define READ_MMU_THDR_QE_TOTAL_COUNT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_THDR_QE_TOTAL_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_TOTAL_COUNT_PRIQr_OFFSET,i,(r._mmu_thdr_qe_total_count_priq),1)
#define WRITE_MMU_THDR_QE_TOTAL_COUNT_PRIQr(u,p,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_THDR_QE_TOTAL_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_TOTAL_COUNT_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_total_count_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_TOTAL_COUNT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_CMIC_RESERVED.
 */
#define READ_MMU_TOQ_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_TOQ_CMIC_RESERVEDr_OFFSET,0,(r._mmu_toq_cmic_reserved),1)
#define WRITE_MMU_TOQ_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_TOQ_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_toq_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_TOQ_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_TOQ_CONFIG.
 */
#define READ_MMU_TOQ_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_CONFIGr_BLKACC,3,0,p,MMU_TOQ_CONFIGr_OFFSET,0,(r._mmu_toq_config),2)
#define WRITE_MMU_TOQ_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_CONFIGr_BLKACC,3,0,p,MMU_TOQ_CONFIGr_OFFSET,0,&(r._mmu_toq_config),2)

/*******************************************************************************
 * End of 'MMU_TOQ_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_CPU_INT_EN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_CPU_INT_EN.
 */
#define READ_MMU_TOQ_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_CPU_INT_ENr_BLKACC,3,0,0,MMU_TOQ_CPU_INT_ENr_OFFSET,0,(r._mmu_toq_cpu_int_en),1)
#define WRITE_MMU_TOQ_CPU_INT_ENr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_CPU_INT_ENr_BLKACC,3,0,0,MMU_TOQ_CPU_INT_ENr_OFFSET,0,&(r._mmu_toq_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_TOQ_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_CPU_INT_SET
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_CPU_INT_SET.
 */
#define READ_MMU_TOQ_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_CPU_INT_SETr_BLKACC,3,0,p,MMU_TOQ_CPU_INT_SETr_OFFSET,0,(r._mmu_toq_cpu_int_set),1)
#define WRITE_MMU_TOQ_CPU_INT_SETr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_CPU_INT_SETr_BLKACC,3,0,p,MMU_TOQ_CPU_INT_SETr_OFFSET,0,&(r._mmu_toq_cpu_int_set),1)

/*******************************************************************************
 * End of 'MMU_TOQ_CPU_INT_SETr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_CPU_INT_STAT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_CPU_INT_STAT.
 */
#define READ_MMU_TOQ_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_CPU_INT_STATr_BLKACC,3,0,p,MMU_TOQ_CPU_INT_STATr_OFFSET,0,(r._mmu_toq_cpu_int_stat),1)
#define WRITE_MMU_TOQ_CPU_INT_STATr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_CPU_INT_STATr_BLKACC,3,0,p,MMU_TOQ_CPU_INT_STATr_OFFSET,0,&(r._mmu_toq_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_TOQ_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_CQEB_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_CMIC_RESERVED.
 */
#define READ_MMU_TOQ_CQEB_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_CQEB_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_TOQ_CQEB_CMIC_RESERVEDr_OFFSET,0,(r._mmu_toq_cqeb_cmic_reserved),1)
#define WRITE_MMU_TOQ_CQEB_CMIC_RESERVEDr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_CQEB_CMIC_RESERVEDr_BLKACC,3,0,p,MMU_TOQ_CQEB_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_toq_cqeb_cmic_reserved),1)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_CQEB_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_CONFIG.
 */
#define READ_MMU_TOQ_CQEB_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_CQEB_CONFIGr_BLKACC,3,0,p,MMU_TOQ_CQEB_CONFIGr_OFFSET,0,(r._mmu_toq_cqeb_config),1)
#define WRITE_MMU_TOQ_CQEB_CONFIGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_CQEB_CONFIGr_BLKACC,3,0,p,MMU_TOQ_CQEB_CONFIGr_OFFSET,0,&(r._mmu_toq_cqeb_config),1)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_DEQ_STAGING_MEM0
 * BLOCKS:   MMU_ITM
 * SIZE:     729
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_DEQ_STAGING_MEM0.
 */
#define READ_MMU_TOQ_CQEB_DEQ_STAGING_MEM0m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_DEQ_STAGING_MEM0m_BLKACC,3,n,p,MMU_TOQ_CQEB_DEQ_STAGING_MEM0m_OFFSET,i,(m._mmu_toq_cqeb_deq_staging_mem0),23)
#define WRITE_MMU_TOQ_CQEB_DEQ_STAGING_MEM0m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_DEQ_STAGING_MEM0m_BLKACC,3,n,p,MMU_TOQ_CQEB_DEQ_STAGING_MEM0m_OFFSET,i,&(m._mmu_toq_cqeb_deq_staging_mem0),23)
#define WRITE_MMU_TOQ_CQEB_DEQ_STAGING_MEM0m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_DEQ_STAGING_MEM0m_BLKACC,3,-1,p,MMU_TOQ_CQEB_DEQ_STAGING_MEM0m_OFFSET,i,&(m._mmu_toq_cqeb_deq_staging_mem0),23)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_DEQ_STAGING_MEM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     729
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_cqeb_deq_staging_mem0_mmu_itm0_itm0),23)
#define WRITE_MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_cqeb_deq_staging_mem0_mmu_itm0_itm0),23)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     729
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_cqeb_deq_staging_mem0_mmu_itm1_itm1),23)
#define WRITE_MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_cqeb_deq_staging_mem0_mmu_itm1_itm1),23)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_DEQ_STAGING_MEM0_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_DEQ_STAGING_MEM1
 * BLOCKS:   MMU_ITM
 * SIZE:     729
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_DEQ_STAGING_MEM1.
 */
#define READ_MMU_TOQ_CQEB_DEQ_STAGING_MEM1m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_DEQ_STAGING_MEM1m_BLKACC,3,n,p,MMU_TOQ_CQEB_DEQ_STAGING_MEM1m_OFFSET,i,(m._mmu_toq_cqeb_deq_staging_mem1),23)
#define WRITE_MMU_TOQ_CQEB_DEQ_STAGING_MEM1m(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_DEQ_STAGING_MEM1m_BLKACC,3,n,p,MMU_TOQ_CQEB_DEQ_STAGING_MEM1m_OFFSET,i,&(m._mmu_toq_cqeb_deq_staging_mem1),23)
#define WRITE_MMU_TOQ_CQEB_DEQ_STAGING_MEM1m_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_DEQ_STAGING_MEM1m_BLKACC,3,-1,p,MMU_TOQ_CQEB_DEQ_STAGING_MEM1m_OFFSET,i,&(m._mmu_toq_cqeb_deq_staging_mem1),23)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_DEQ_STAGING_MEM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     729
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_cqeb_deq_staging_mem1_mmu_itm0_itm0),23)
#define WRITE_MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_cqeb_deq_staging_mem1_mmu_itm0_itm0),23)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     729
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_cqeb_deq_staging_mem1_mmu_itm1_itm1),23)
#define WRITE_MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_cqeb_deq_staging_mem1_mmu_itm1_itm1),23)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_DEQ_STAGING_MEM1_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_CQEB_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_ENABLE_ECCP_MEM.
 */
#define READ_MMU_TOQ_CQEB_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_CQEB_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_TOQ_CQEB_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_toq_cqeb_enable_eccp_mem),1)
#define WRITE_MMU_TOQ_CQEB_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_CQEB_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_TOQ_CQEB_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_toq_cqeb_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_CQEB_EN_COR_ERR_RPT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_EN_COR_ERR_RPT.
 */
#define READ_MMU_TOQ_CQEB_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_CQEB_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_TOQ_CQEB_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_toq_cqeb_en_cor_err_rpt),1)
#define WRITE_MMU_TOQ_CQEB_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_CQEB_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_TOQ_CQEB_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_toq_cqeb_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_CQEB_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_STATUS.
 */
#define READ_MMU_TOQ_CQEB_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_CQEB_STATUSr_BLKACC,3,0,p,MMU_TOQ_CQEB_STATUSr_OFFSET,0,(r._mmu_toq_cqeb_status),1)
#define WRITE_MMU_TOQ_CQEB_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_CQEB_STATUSr_BLKACC,3,0,p,MMU_TOQ_CQEB_STATUSr_OFFSET,0,&(r._mmu_toq_cqeb_status),1)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_CQEB_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_TMBUS.
 */
#define READ_MMU_TOQ_CQEB_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_CQEB_TMBUSr_BLKACC,3,0,0,MMU_TOQ_CQEB_TMBUSr_OFFSET,0,(r._mmu_toq_cqeb_tmbus),2)
#define WRITE_MMU_TOQ_CQEB_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_CQEB_TMBUSr_BLKACC,3,0,0,MMU_TOQ_CQEB_TMBUSr_OFFSET,0,&(r._mmu_toq_cqeb_tmbus),2)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_TMBUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU
 * BLOCKS:   MMU_ITM
 * SIZE:     475
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU.
 */
#define READ_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPUm_BLKACC,3,n,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPUm_OFFSET,i,(m._mmu_toq_cqeb_voqdb_head_partial_cpu),15)
#define WRITE_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPUm_BLKACC,3,n,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPUm_OFFSET,i,&(m._mmu_toq_cqeb_voqdb_head_partial_cpu),15)
#define WRITE_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPUm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPUm_BLKACC,3,-1,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPUm_OFFSET,i,&(m._mmu_toq_cqeb_voqdb_head_partial_cpu),15)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPUm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     475
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_cqeb_voqdb_head_partial_cpu_mmu_itm0_itm0),15)
#define WRITE_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_cqeb_voqdb_head_partial_cpu_mmu_itm0_itm0),15)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     475
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_cqeb_voqdb_head_partial_cpu_mmu_itm1_itm1),15)
#define WRITE_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_cqeb_voqdb_head_partial_cpu_mmu_itm1_itm1),15)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_CPU_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER
 * BLOCKS:   MMU_ITM
 * SIZE:     325
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER.
 */
#define READ_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWERm_BLKACC,3,n,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWERm_OFFSET,i,(m._mmu_toq_cqeb_voqdb_head_partial_lower),11)
#define WRITE_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWERm_BLKACC,3,n,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWERm_OFFSET,i,&(m._mmu_toq_cqeb_voqdb_head_partial_lower),11)
#define WRITE_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWERm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWERm_BLKACC,3,-1,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWERm_OFFSET,i,&(m._mmu_toq_cqeb_voqdb_head_partial_lower),11)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     325
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_cqeb_voqdb_head_partial_lower_mmu_itm0_itm0),11)
#define WRITE_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_cqeb_voqdb_head_partial_lower_mmu_itm0_itm0),11)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     325
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_cqeb_voqdb_head_partial_lower_mmu_itm1_itm1),11)
#define WRITE_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_cqeb_voqdb_head_partial_lower_mmu_itm1_itm1),11)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_LOWER_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER
 * BLOCKS:   MMU_ITM
 * SIZE:     475
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER.
 */
#define READ_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPERm_BLKACC,3,n,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPERm_OFFSET,i,(m._mmu_toq_cqeb_voqdb_head_partial_upper),15)
#define WRITE_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPERm_BLKACC,3,n,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPERm_OFFSET,i,&(m._mmu_toq_cqeb_voqdb_head_partial_upper),15)
#define WRITE_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPERm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPERm_BLKACC,3,-1,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPERm_OFFSET,i,&(m._mmu_toq_cqeb_voqdb_head_partial_upper),15)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     475
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_cqeb_voqdb_head_partial_upper_mmu_itm0_itm0),15)
#define WRITE_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_cqeb_voqdb_head_partial_upper_mmu_itm0_itm0),15)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     475
 */
/*
 * These macros can be used to access MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_cqeb_voqdb_head_partial_upper_mmu_itm1_itm1),15)
#define WRITE_MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_cqeb_voqdb_head_partial_upper_mmu_itm1_itm1),15)

/*******************************************************************************
 * End of 'MMU_TOQ_CQEB_VOQDB_HEAD_PARTIAL_UPPER_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_DEBUG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_DEBUG.
 */
#define READ_MMU_TOQ_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_DEBUGr_BLKACC,3,0,p,MMU_TOQ_DEBUGr_OFFSET,0,(r._mmu_toq_debug),1)
#define WRITE_MMU_TOQ_DEBUGr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_DEBUGr_BLKACC,3,0,p,MMU_TOQ_DEBUGr_OFFSET,0,&(r._mmu_toq_debug),1)

/*******************************************************************************
 * End of 'MMU_TOQ_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_ENABLE_ECCP_MEM.
 */
#define READ_MMU_TOQ_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_TOQ_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_toq_enable_eccp_mem),1)
#define WRITE_MMU_TOQ_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_TOQ_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_toq_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_TOQ_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_EN_COR_ERR_RPT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_EN_COR_ERR_RPT.
 */
#define READ_MMU_TOQ_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_TOQ_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_toq_en_cor_err_rpt),1)
#define WRITE_MMU_TOQ_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_TOQ_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_toq_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_TOQ_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_MC_ARB_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_MC_ARB_STATUS.
 */
#define READ_MMU_TOQ_MC_ARB_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_MC_ARB_STATUSr_BLKACC,3,0,p,MMU_TOQ_MC_ARB_STATUSr_OFFSET,0,(r._mmu_toq_mc_arb_status),1)
#define WRITE_MMU_TOQ_MC_ARB_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_MC_ARB_STATUSr_BLKACC,3,0,p,MMU_TOQ_MC_ARB_STATUSr_OFFSET,0,&(r._mmu_toq_mc_arb_status),1)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_ARB_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_CQEB
 * BLOCKS:   MMU_ITM
 * SIZE:     569
 */
/*
 * These macros can be used to access MMU_TOQ_MC_CQEB.
 */
#define READ_MMU_TOQ_MC_CQEBm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_CQEBm_BLKACC,3,n,p,MMU_TOQ_MC_CQEBm_OFFSET,i,(m._mmu_toq_mc_cqeb),18)
#define WRITE_MMU_TOQ_MC_CQEBm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_CQEBm_BLKACC,3,n,p,MMU_TOQ_MC_CQEBm_OFFSET,i,&(m._mmu_toq_mc_cqeb),18)
#define WRITE_MMU_TOQ_MC_CQEBm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_CQEBm_BLKACC,3,-1,p,MMU_TOQ_MC_CQEBm_OFFSET,i,&(m._mmu_toq_mc_cqeb),18)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_CQEBm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_CQEBN
 * BLOCKS:   MMU_ITM
 * SIZE:     25
 */
/*
 * These macros can be used to access MMU_TOQ_MC_CQEBN.
 */
#define READ_MMU_TOQ_MC_CQEBNm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_CQEBNm_BLKACC,3,n,p,MMU_TOQ_MC_CQEBNm_OFFSET,i,(m._mmu_toq_mc_cqebn),1)
#define WRITE_MMU_TOQ_MC_CQEBNm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_CQEBNm_BLKACC,3,n,p,MMU_TOQ_MC_CQEBNm_OFFSET,i,&(m._mmu_toq_mc_cqebn),1)
#define WRITE_MMU_TOQ_MC_CQEBNm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_CQEBNm_BLKACC,3,-1,p,MMU_TOQ_MC_CQEBNm_OFFSET,i,&(m._mmu_toq_mc_cqebn),1)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_CQEBNm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_CQEBN_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     25
 */
/*
 * These macros can be used to access MMU_TOQ_MC_CQEBN_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_MC_CQEBN_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_CQEBN_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_MC_CQEBN_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_mc_cqebn_mmu_itm0_itm0),1)
#define WRITE_MMU_TOQ_MC_CQEBN_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_CQEBN_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_MC_CQEBN_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_mc_cqebn_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_CQEBN_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_CQEBN_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     25
 */
/*
 * These macros can be used to access MMU_TOQ_MC_CQEBN_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_MC_CQEBN_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_CQEBN_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_MC_CQEBN_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_mc_cqebn_mmu_itm1_itm1),1)
#define WRITE_MMU_TOQ_MC_CQEBN_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_CQEBN_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_MC_CQEBN_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_mc_cqebn_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_CQEBN_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_CQEB_FAP
 * BLOCKS:   MMU_ITM
 * SIZE:     22
 */
/*
 * These macros can be used to access MMU_TOQ_MC_CQEB_FAP.
 */
#define READ_MMU_TOQ_MC_CQEB_FAPm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_CQEB_FAPm_BLKACC,3,n,p,MMU_TOQ_MC_CQEB_FAPm_OFFSET,i,(m._mmu_toq_mc_cqeb_fap),1)
#define WRITE_MMU_TOQ_MC_CQEB_FAPm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_CQEB_FAPm_BLKACC,3,n,p,MMU_TOQ_MC_CQEB_FAPm_OFFSET,i,&(m._mmu_toq_mc_cqeb_fap),1)
#define WRITE_MMU_TOQ_MC_CQEB_FAPm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_CQEB_FAPm_BLKACC,3,-1,p,MMU_TOQ_MC_CQEB_FAPm_OFFSET,i,&(m._mmu_toq_mc_cqeb_fap),1)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_CQEB_FAPm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_CQEB_FAP_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     22
 */
/*
 * These macros can be used to access MMU_TOQ_MC_CQEB_FAP_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_MC_CQEB_FAP_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_CQEB_FAP_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_MC_CQEB_FAP_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_mc_cqeb_fap_mmu_itm0_itm0),1)
#define WRITE_MMU_TOQ_MC_CQEB_FAP_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_CQEB_FAP_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_MC_CQEB_FAP_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_mc_cqeb_fap_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_CQEB_FAP_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_CQEB_FAP_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     22
 */
/*
 * These macros can be used to access MMU_TOQ_MC_CQEB_FAP_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_MC_CQEB_FAP_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_CQEB_FAP_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_MC_CQEB_FAP_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_mc_cqeb_fap_mmu_itm1_itm1),1)
#define WRITE_MMU_TOQ_MC_CQEB_FAP_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_CQEB_FAP_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_MC_CQEB_FAP_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_mc_cqeb_fap_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_CQEB_FAP_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_CQEB_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     569
 */
/*
 * These macros can be used to access MMU_TOQ_MC_CQEB_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_MC_CQEB_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_CQEB_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_MC_CQEB_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_mc_cqeb_mmu_itm0_itm0),18)
#define WRITE_MMU_TOQ_MC_CQEB_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_CQEB_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_MC_CQEB_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_mc_cqeb_mmu_itm0_itm0),18)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_CQEB_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_CQEB_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     569
 */
/*
 * These macros can be used to access MMU_TOQ_MC_CQEB_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_MC_CQEB_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_CQEB_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_MC_CQEB_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_mc_cqeb_mmu_itm1_itm1),18)
#define WRITE_MMU_TOQ_MC_CQEB_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_CQEB_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_MC_CQEB_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_mc_cqeb_mmu_itm1_itm1),18)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_CQEB_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_DELAY_LINE_LOWER
 * BLOCKS:   MMU_ITM
 * SIZE:     566
 */
/*
 * These macros can be used to access MMU_TOQ_MC_DELAY_LINE_LOWER.
 */
#define READ_MMU_TOQ_MC_DELAY_LINE_LOWERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_DELAY_LINE_LOWERm_BLKACC,3,n,p,MMU_TOQ_MC_DELAY_LINE_LOWERm_OFFSET,i,(m._mmu_toq_mc_delay_line_lower),18)
#define WRITE_MMU_TOQ_MC_DELAY_LINE_LOWERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_DELAY_LINE_LOWERm_BLKACC,3,n,p,MMU_TOQ_MC_DELAY_LINE_LOWERm_OFFSET,i,&(m._mmu_toq_mc_delay_line_lower),18)
#define WRITE_MMU_TOQ_MC_DELAY_LINE_LOWERm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_DELAY_LINE_LOWERm_BLKACC,3,-1,p,MMU_TOQ_MC_DELAY_LINE_LOWERm_OFFSET,i,&(m._mmu_toq_mc_delay_line_lower),18)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_DELAY_LINE_LOWERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     566
 */
/*
 * These macros can be used to access MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_mc_delay_line_lower_mmu_itm0_itm0),18)
#define WRITE_MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_mc_delay_line_lower_mmu_itm0_itm0),18)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     566
 */
/*
 * These macros can be used to access MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_mc_delay_line_lower_mmu_itm1_itm1),18)
#define WRITE_MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_mc_delay_line_lower_mmu_itm1_itm1),18)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_DELAY_LINE_LOWER_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_DELAY_LINE_UPPER
 * BLOCKS:   MMU_ITM
 * SIZE:     566
 */
/*
 * These macros can be used to access MMU_TOQ_MC_DELAY_LINE_UPPER.
 */
#define READ_MMU_TOQ_MC_DELAY_LINE_UPPERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_DELAY_LINE_UPPERm_BLKACC,3,n,p,MMU_TOQ_MC_DELAY_LINE_UPPERm_OFFSET,i,(m._mmu_toq_mc_delay_line_upper),18)
#define WRITE_MMU_TOQ_MC_DELAY_LINE_UPPERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_DELAY_LINE_UPPERm_BLKACC,3,n,p,MMU_TOQ_MC_DELAY_LINE_UPPERm_OFFSET,i,&(m._mmu_toq_mc_delay_line_upper),18)
#define WRITE_MMU_TOQ_MC_DELAY_LINE_UPPERm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_DELAY_LINE_UPPERm_BLKACC,3,-1,p,MMU_TOQ_MC_DELAY_LINE_UPPERm_OFFSET,i,&(m._mmu_toq_mc_delay_line_upper),18)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_DELAY_LINE_UPPERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     566
 */
/*
 * These macros can be used to access MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_mc_delay_line_upper_mmu_itm0_itm0),18)
#define WRITE_MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_mc_delay_line_upper_mmu_itm0_itm0),18)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     566
 */
/*
 * These macros can be used to access MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_mc_delay_line_upper_mmu_itm1_itm1),18)
#define WRITE_MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_mc_delay_line_upper_mmu_itm1_itm1),18)

/*******************************************************************************
 * End of 'MMU_TOQ_MC_DELAY_LINE_UPPER_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_OQS_STAGING_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     107
 */
/*
 * These macros can be used to access MMU_TOQ_OQS_STAGING_MEM.
 */
#define READ_MMU_TOQ_OQS_STAGING_MEMm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_OQS_STAGING_MEMm_BLKACC,3,n,p,MMU_TOQ_OQS_STAGING_MEMm_OFFSET,i,(m._mmu_toq_oqs_staging_mem),4)
#define WRITE_MMU_TOQ_OQS_STAGING_MEMm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_OQS_STAGING_MEMm_BLKACC,3,n,p,MMU_TOQ_OQS_STAGING_MEMm_OFFSET,i,&(m._mmu_toq_oqs_staging_mem),4)
#define WRITE_MMU_TOQ_OQS_STAGING_MEMm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_OQS_STAGING_MEMm_BLKACC,3,-1,p,MMU_TOQ_OQS_STAGING_MEMm_OFFSET,i,&(m._mmu_toq_oqs_staging_mem),4)

/*******************************************************************************
 * End of 'MMU_TOQ_OQS_STAGING_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_OQS_STAGING_MEM_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     107
 */
/*
 * These macros can be used to access MMU_TOQ_OQS_STAGING_MEM_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_OQS_STAGING_MEM_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_OQS_STAGING_MEM_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_OQS_STAGING_MEM_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_oqs_staging_mem_mmu_itm0_itm0),4)
#define WRITE_MMU_TOQ_OQS_STAGING_MEM_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_OQS_STAGING_MEM_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_OQS_STAGING_MEM_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_oqs_staging_mem_mmu_itm0_itm0),4)

/*******************************************************************************
 * End of 'MMU_TOQ_OQS_STAGING_MEM_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_OQS_STAGING_MEM_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     107
 */
/*
 * These macros can be used to access MMU_TOQ_OQS_STAGING_MEM_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_OQS_STAGING_MEM_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_OQS_STAGING_MEM_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_OQS_STAGING_MEM_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_oqs_staging_mem_mmu_itm1_itm1),4)
#define WRITE_MMU_TOQ_OQS_STAGING_MEM_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_OQS_STAGING_MEM_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_OQS_STAGING_MEM_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_oqs_staging_mem_mmu_itm1_itm1),4)

/*******************************************************************************
 * End of 'MMU_TOQ_OQS_STAGING_MEM_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_PORT_QTAIL_BANK_DB
 * BLOCKS:   MMU_ITM
 * SIZE:     68
 */
/*
 * These macros can be used to access MMU_TOQ_PORT_QTAIL_BANK_DB.
 */
#define READ_MMU_TOQ_PORT_QTAIL_BANK_DBm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_PORT_QTAIL_BANK_DBm_BLKACC,3,n,p,MMU_TOQ_PORT_QTAIL_BANK_DBm_OFFSET,i,(m._mmu_toq_port_qtail_bank_db),3)
#define WRITE_MMU_TOQ_PORT_QTAIL_BANK_DBm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_PORT_QTAIL_BANK_DBm_BLKACC,3,n,p,MMU_TOQ_PORT_QTAIL_BANK_DBm_OFFSET,i,&(m._mmu_toq_port_qtail_bank_db),3)
#define WRITE_MMU_TOQ_PORT_QTAIL_BANK_DBm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_PORT_QTAIL_BANK_DBm_BLKACC,3,-1,p,MMU_TOQ_PORT_QTAIL_BANK_DBm_OFFSET,i,&(m._mmu_toq_port_qtail_bank_db),3)

/*******************************************************************************
 * End of 'MMU_TOQ_PORT_QTAIL_BANK_DBm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     68
 */
/*
 * These macros can be used to access MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_port_qtail_bank_db_mmu_itm0_itm0),3)
#define WRITE_MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_port_qtail_bank_db_mmu_itm0_itm0),3)

/*******************************************************************************
 * End of 'MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     68
 */
/*
 * These macros can be used to access MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_port_qtail_bank_db_mmu_itm1_itm1),3)
#define WRITE_MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_port_qtail_bank_db_mmu_itm1_itm1),3)

/*******************************************************************************
 * End of 'MMU_TOQ_PORT_QTAIL_BANK_DB_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_PORT_QTAIL_CNT_DB
 * BLOCKS:   MMU_ITM
 * SIZE:     80
 */
/*
 * These macros can be used to access MMU_TOQ_PORT_QTAIL_CNT_DB.
 */
#define READ_MMU_TOQ_PORT_QTAIL_CNT_DBm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_PORT_QTAIL_CNT_DBm_BLKACC,3,n,p,MMU_TOQ_PORT_QTAIL_CNT_DBm_OFFSET,i,(m._mmu_toq_port_qtail_cnt_db),3)
#define WRITE_MMU_TOQ_PORT_QTAIL_CNT_DBm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_PORT_QTAIL_CNT_DBm_BLKACC,3,n,p,MMU_TOQ_PORT_QTAIL_CNT_DBm_OFFSET,i,&(m._mmu_toq_port_qtail_cnt_db),3)
#define WRITE_MMU_TOQ_PORT_QTAIL_CNT_DBm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_PORT_QTAIL_CNT_DBm_BLKACC,3,-1,p,MMU_TOQ_PORT_QTAIL_CNT_DBm_OFFSET,i,&(m._mmu_toq_port_qtail_cnt_db),3)

/*******************************************************************************
 * End of 'MMU_TOQ_PORT_QTAIL_CNT_DBm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     80
 */
/*
 * These macros can be used to access MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_port_qtail_cnt_db_mmu_itm0_itm0),3)
#define WRITE_MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_port_qtail_cnt_db_mmu_itm0_itm0),3)

/*******************************************************************************
 * End of 'MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     80
 */
/*
 * These macros can be used to access MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_port_qtail_cnt_db_mmu_itm1_itm1),3)
#define WRITE_MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_port_qtail_cnt_db_mmu_itm1_itm1),3)

/*******************************************************************************
 * End of 'MMU_TOQ_PORT_QTAIL_CNT_DB_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_Q_MIRROR_ON_DROP_DESTINATION_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_Q_MIRROR_ON_DROP_DESTINATION_CONFIG.
 */
#define READ_MMU_TOQ_Q_MIRROR_ON_DROP_DESTINATION_CONFIGr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_Q_MIRROR_ON_DROP_DESTINATION_CONFIGr_BLKACC,3,0,0,MMU_TOQ_Q_MIRROR_ON_DROP_DESTINATION_CONFIGr_OFFSET,i,(r._mmu_toq_q_mirror_on_drop_destination_config),1)
#define WRITE_MMU_TOQ_Q_MIRROR_ON_DROP_DESTINATION_CONFIGr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_Q_MIRROR_ON_DROP_DESTINATION_CONFIGr_BLKACC,3,0,0,MMU_TOQ_Q_MIRROR_ON_DROP_DESTINATION_CONFIGr_OFFSET,i,&(r._mmu_toq_q_mirror_on_drop_destination_config),1)

/*******************************************************************************
 * End of 'MMU_TOQ_Q_MIRROR_ON_DROP_DESTINATION_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_Q_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_TOQ_Q_TMBUS.
 */
#define READ_MMU_TOQ_Q_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_Q_TMBUSr_BLKACC,3,0,0,MMU_TOQ_Q_TMBUSr_OFFSET,0,(r._mmu_toq_q_tmbus),2)
#define WRITE_MMU_TOQ_Q_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_Q_TMBUSr_BLKACC,3,0,0,MMU_TOQ_Q_TMBUSr_OFFSET,0,&(r._mmu_toq_q_tmbus),2)

/*******************************************************************************
 * End of 'MMU_TOQ_Q_TMBUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_RQE_RECEPTION_FIFO
 * BLOCKS:   MMU_ITM
 * SIZE:     333
 */
/*
 * These macros can be used to access MMU_TOQ_RQE_RECEPTION_FIFO.
 */
#define READ_MMU_TOQ_RQE_RECEPTION_FIFOm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_RQE_RECEPTION_FIFOm_BLKACC,3,n,p,MMU_TOQ_RQE_RECEPTION_FIFOm_OFFSET,i,(m._mmu_toq_rqe_reception_fifo),11)
#define WRITE_MMU_TOQ_RQE_RECEPTION_FIFOm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_RQE_RECEPTION_FIFOm_BLKACC,3,n,p,MMU_TOQ_RQE_RECEPTION_FIFOm_OFFSET,i,&(m._mmu_toq_rqe_reception_fifo),11)
#define WRITE_MMU_TOQ_RQE_RECEPTION_FIFOm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_RQE_RECEPTION_FIFOm_BLKACC,3,-1,p,MMU_TOQ_RQE_RECEPTION_FIFOm_OFFSET,i,&(m._mmu_toq_rqe_reception_fifo),11)

/*******************************************************************************
 * End of 'MMU_TOQ_RQE_RECEPTION_FIFOm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     333
 */
/*
 * These macros can be used to access MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_rqe_reception_fifo_mmu_itm0_itm0),11)
#define WRITE_MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_rqe_reception_fifo_mmu_itm0_itm0),11)

/*******************************************************************************
 * End of 'MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     333
 */
/*
 * These macros can be used to access MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_rqe_reception_fifo_mmu_itm1_itm1),11)
#define WRITE_MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_rqe_reception_fifo_mmu_itm1_itm1),11)

/*******************************************************************************
 * End of 'MMU_TOQ_RQE_RECEPTION_FIFO_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_STATUS.
 */
#define READ_MMU_TOQ_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_TOQ_STATUSr_BLKACC,3,0,p,MMU_TOQ_STATUSr_OFFSET,0,(r._mmu_toq_status),1)
#define WRITE_MMU_TOQ_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_TOQ_STATUSr_BLKACC,3,0,p,MMU_TOQ_STATUSr_OFFSET,0,&(r._mmu_toq_status),1)

/*******************************************************************************
 * End of 'MMU_TOQ_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEBN_LOWER
 * BLOCKS:   MMU_ITM
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEBN_LOWER.
 */
#define READ_MMU_TOQ_UC_CQEBN_LOWERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEBN_LOWERm_BLKACC,3,n,p,MMU_TOQ_UC_CQEBN_LOWERm_OFFSET,i,(m._mmu_toq_uc_cqebn_lower),1)
#define WRITE_MMU_TOQ_UC_CQEBN_LOWERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEBN_LOWERm_BLKACC,3,n,p,MMU_TOQ_UC_CQEBN_LOWERm_OFFSET,i,&(m._mmu_toq_uc_cqebn_lower),1)
#define WRITE_MMU_TOQ_UC_CQEBN_LOWERm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEBN_LOWERm_BLKACC,3,-1,p,MMU_TOQ_UC_CQEBN_LOWERm_OFFSET,i,&(m._mmu_toq_uc_cqebn_lower),1)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEBN_LOWERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_uc_cqebn_lower_mmu_itm0_itm0),1)
#define WRITE_MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_uc_cqebn_lower_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_uc_cqebn_lower_mmu_itm1_itm1),1)
#define WRITE_MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_uc_cqebn_lower_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEBN_LOWER_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEBN_UPPER
 * BLOCKS:   MMU_ITM
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEBN_UPPER.
 */
#define READ_MMU_TOQ_UC_CQEBN_UPPERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEBN_UPPERm_BLKACC,3,n,p,MMU_TOQ_UC_CQEBN_UPPERm_OFFSET,i,(m._mmu_toq_uc_cqebn_upper),1)
#define WRITE_MMU_TOQ_UC_CQEBN_UPPERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEBN_UPPERm_BLKACC,3,n,p,MMU_TOQ_UC_CQEBN_UPPERm_OFFSET,i,&(m._mmu_toq_uc_cqebn_upper),1)
#define WRITE_MMU_TOQ_UC_CQEBN_UPPERm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEBN_UPPERm_BLKACC,3,-1,p,MMU_TOQ_UC_CQEBN_UPPERm_OFFSET,i,&(m._mmu_toq_uc_cqebn_upper),1)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEBN_UPPERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_uc_cqebn_upper_mmu_itm0_itm0),1)
#define WRITE_MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_uc_cqebn_upper_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_uc_cqebn_upper_mmu_itm1_itm1),1)
#define WRITE_MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_uc_cqebn_upper_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEBN_UPPER_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEB_FAP
 * BLOCKS:   MMU_ITM
 * SIZE:     22
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEB_FAP.
 */
#define READ_MMU_TOQ_UC_CQEB_FAPm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEB_FAPm_BLKACC,3,n,p,MMU_TOQ_UC_CQEB_FAPm_OFFSET,i,(m._mmu_toq_uc_cqeb_fap),1)
#define WRITE_MMU_TOQ_UC_CQEB_FAPm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEB_FAPm_BLKACC,3,n,p,MMU_TOQ_UC_CQEB_FAPm_OFFSET,i,&(m._mmu_toq_uc_cqeb_fap),1)
#define WRITE_MMU_TOQ_UC_CQEB_FAPm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEB_FAPm_BLKACC,3,-1,p,MMU_TOQ_UC_CQEB_FAPm_OFFSET,i,&(m._mmu_toq_uc_cqeb_fap),1)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEB_FAPm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEB_FAP_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     22
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEB_FAP_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_UC_CQEB_FAP_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEB_FAP_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_UC_CQEB_FAP_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_uc_cqeb_fap_mmu_itm0_itm0),1)
#define WRITE_MMU_TOQ_UC_CQEB_FAP_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEB_FAP_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_UC_CQEB_FAP_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_uc_cqeb_fap_mmu_itm0_itm0),1)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEB_FAP_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEB_FAP_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     22
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEB_FAP_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_UC_CQEB_FAP_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEB_FAP_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_UC_CQEB_FAP_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_uc_cqeb_fap_mmu_itm1_itm1),1)
#define WRITE_MMU_TOQ_UC_CQEB_FAP_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEB_FAP_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_UC_CQEB_FAP_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_uc_cqeb_fap_mmu_itm1_itm1),1)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEB_FAP_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEB_LOWER
 * BLOCKS:   MMU_ITM
 * SIZE:     388
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEB_LOWER.
 */
#define READ_MMU_TOQ_UC_CQEB_LOWERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEB_LOWERm_BLKACC,3,n,p,MMU_TOQ_UC_CQEB_LOWERm_OFFSET,i,(m._mmu_toq_uc_cqeb_lower),13)
#define WRITE_MMU_TOQ_UC_CQEB_LOWERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEB_LOWERm_BLKACC,3,n,p,MMU_TOQ_UC_CQEB_LOWERm_OFFSET,i,&(m._mmu_toq_uc_cqeb_lower),13)
#define WRITE_MMU_TOQ_UC_CQEB_LOWERm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEB_LOWERm_BLKACC,3,-1,p,MMU_TOQ_UC_CQEB_LOWERm_OFFSET,i,&(m._mmu_toq_uc_cqeb_lower),13)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEB_LOWERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEB_LOWER_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     388
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEB_LOWER_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_UC_CQEB_LOWER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEB_LOWER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_UC_CQEB_LOWER_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_uc_cqeb_lower_mmu_itm0_itm0),13)
#define WRITE_MMU_TOQ_UC_CQEB_LOWER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEB_LOWER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_UC_CQEB_LOWER_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_uc_cqeb_lower_mmu_itm0_itm0),13)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEB_LOWER_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEB_LOWER_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     388
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEB_LOWER_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_UC_CQEB_LOWER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEB_LOWER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_UC_CQEB_LOWER_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_uc_cqeb_lower_mmu_itm1_itm1),13)
#define WRITE_MMU_TOQ_UC_CQEB_LOWER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEB_LOWER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_UC_CQEB_LOWER_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_uc_cqeb_lower_mmu_itm1_itm1),13)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEB_LOWER_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEB_UPPER
 * BLOCKS:   MMU_ITM
 * SIZE:     388
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEB_UPPER.
 */
#define READ_MMU_TOQ_UC_CQEB_UPPERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEB_UPPERm_BLKACC,3,n,p,MMU_TOQ_UC_CQEB_UPPERm_OFFSET,i,(m._mmu_toq_uc_cqeb_upper),13)
#define WRITE_MMU_TOQ_UC_CQEB_UPPERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEB_UPPERm_BLKACC,3,n,p,MMU_TOQ_UC_CQEB_UPPERm_OFFSET,i,&(m._mmu_toq_uc_cqeb_upper),13)
#define WRITE_MMU_TOQ_UC_CQEB_UPPERm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEB_UPPERm_BLKACC,3,-1,p,MMU_TOQ_UC_CQEB_UPPERm_OFFSET,i,&(m._mmu_toq_uc_cqeb_upper),13)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEB_UPPERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEB_UPPER_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     388
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEB_UPPER_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_UC_CQEB_UPPER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEB_UPPER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_UC_CQEB_UPPER_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_uc_cqeb_upper_mmu_itm0_itm0),13)
#define WRITE_MMU_TOQ_UC_CQEB_UPPER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEB_UPPER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_UC_CQEB_UPPER_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_uc_cqeb_upper_mmu_itm0_itm0),13)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEB_UPPER_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_UC_CQEB_UPPER_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     388
 */
/*
 * These macros can be used to access MMU_TOQ_UC_CQEB_UPPER_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_UC_CQEB_UPPER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_UC_CQEB_UPPER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_UC_CQEB_UPPER_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_uc_cqeb_upper_mmu_itm1_itm1),13)
#define WRITE_MMU_TOQ_UC_CQEB_UPPER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_UC_CQEB_UPPER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_UC_CQEB_UPPER_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_uc_cqeb_upper_mmu_itm1_itm1),13)

/*******************************************************************************
 * End of 'MMU_TOQ_UC_CQEB_UPPER_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_CPU
 * BLOCKS:   MMU_ITM
 * SIZE:     78
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_CPU.
 */
#define READ_MMU_TOQ_VOQDB_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_CPUm_BLKACC,3,n,p,MMU_TOQ_VOQDB_CPUm_OFFSET,i,(m._mmu_toq_voqdb_cpu),3)
#define WRITE_MMU_TOQ_VOQDB_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_CPUm_BLKACC,3,n,p,MMU_TOQ_VOQDB_CPUm_OFFSET,i,&(m._mmu_toq_voqdb_cpu),3)
#define WRITE_MMU_TOQ_VOQDB_CPUm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_CPUm_BLKACC,3,-1,p,MMU_TOQ_VOQDB_CPUm_OFFSET,i,&(m._mmu_toq_voqdb_cpu),3)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_CPUm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_CPU_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     78
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_CPU_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_VOQDB_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQDB_CPU_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_voqdb_cpu_mmu_itm0_itm0),3)
#define WRITE_MMU_TOQ_VOQDB_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQDB_CPU_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_voqdb_cpu_mmu_itm0_itm0),3)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_CPU_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_CPU_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     78
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_CPU_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_VOQDB_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQDB_CPU_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_voqdb_cpu_mmu_itm1_itm1),3)
#define WRITE_MMU_TOQ_VOQDB_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQDB_CPU_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_voqdb_cpu_mmu_itm1_itm1),3)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_CPU_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_LOWER
 * BLOCKS:   MMU_ITM
 * SIZE:     78
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_LOWER.
 */
#define READ_MMU_TOQ_VOQDB_LOWERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_LOWERm_BLKACC,3,n,p,MMU_TOQ_VOQDB_LOWERm_OFFSET,i,(m._mmu_toq_voqdb_lower),3)
#define WRITE_MMU_TOQ_VOQDB_LOWERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_LOWERm_BLKACC,3,n,p,MMU_TOQ_VOQDB_LOWERm_OFFSET,i,&(m._mmu_toq_voqdb_lower),3)
#define WRITE_MMU_TOQ_VOQDB_LOWERm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_LOWERm_BLKACC,3,-1,p,MMU_TOQ_VOQDB_LOWERm_OFFSET,i,&(m._mmu_toq_voqdb_lower),3)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_LOWERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_LOWER_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     78
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_LOWER_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_VOQDB_LOWER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_LOWER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQDB_LOWER_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_voqdb_lower_mmu_itm0_itm0),3)
#define WRITE_MMU_TOQ_VOQDB_LOWER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_LOWER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQDB_LOWER_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_voqdb_lower_mmu_itm0_itm0),3)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_LOWER_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_LOWER_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     78
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_LOWER_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_VOQDB_LOWER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_LOWER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQDB_LOWER_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_voqdb_lower_mmu_itm1_itm1),3)
#define WRITE_MMU_TOQ_VOQDB_LOWER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_LOWER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQDB_LOWER_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_voqdb_lower_mmu_itm1_itm1),3)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_LOWER_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU
 * BLOCKS:   MMU_ITM
 * SIZE:     475
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU.
 */
#define READ_MMU_TOQ_VOQDB_TAIL_PARTIAL_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_CPUm_BLKACC,3,n,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_CPUm_OFFSET,i,(m._mmu_toq_voqdb_tail_partial_cpu),15)
#define WRITE_MMU_TOQ_VOQDB_TAIL_PARTIAL_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_CPUm_BLKACC,3,n,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_CPUm_OFFSET,i,&(m._mmu_toq_voqdb_tail_partial_cpu),15)
#define WRITE_MMU_TOQ_VOQDB_TAIL_PARTIAL_CPUm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_CPUm_BLKACC,3,-1,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_CPUm_OFFSET,i,&(m._mmu_toq_voqdb_tail_partial_cpu),15)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_TAIL_PARTIAL_CPUm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     475
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_voqdb_tail_partial_cpu_mmu_itm0_itm0),15)
#define WRITE_MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_voqdb_tail_partial_cpu_mmu_itm0_itm0),15)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     475
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_voqdb_tail_partial_cpu_mmu_itm1_itm1),15)
#define WRITE_MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_voqdb_tail_partial_cpu_mmu_itm1_itm1),15)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_TAIL_PARTIAL_CPU_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER
 * BLOCKS:   MMU_ITM
 * SIZE:     325
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER.
 */
#define READ_MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWERm_BLKACC,3,n,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWERm_OFFSET,i,(m._mmu_toq_voqdb_tail_partial_lower),11)
#define WRITE_MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWERm_BLKACC,3,n,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWERm_OFFSET,i,&(m._mmu_toq_voqdb_tail_partial_lower),11)
#define WRITE_MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWERm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWERm_BLKACC,3,-1,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWERm_OFFSET,i,&(m._mmu_toq_voqdb_tail_partial_lower),11)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     325
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_voqdb_tail_partial_lower_mmu_itm0_itm0),11)
#define WRITE_MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_voqdb_tail_partial_lower_mmu_itm0_itm0),11)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     325
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_voqdb_tail_partial_lower_mmu_itm1_itm1),11)
#define WRITE_MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_voqdb_tail_partial_lower_mmu_itm1_itm1),11)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_TAIL_PARTIAL_LOWER_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER
 * BLOCKS:   MMU_ITM
 * SIZE:     475
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER.
 */
#define READ_MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPERm_BLKACC,3,n,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPERm_OFFSET,i,(m._mmu_toq_voqdb_tail_partial_upper),15)
#define WRITE_MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPERm_BLKACC,3,n,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPERm_OFFSET,i,&(m._mmu_toq_voqdb_tail_partial_upper),15)
#define WRITE_MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPERm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPERm_BLKACC,3,-1,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPERm_OFFSET,i,&(m._mmu_toq_voqdb_tail_partial_upper),15)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     475
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_voqdb_tail_partial_upper_mmu_itm0_itm0),15)
#define WRITE_MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_voqdb_tail_partial_upper_mmu_itm0_itm0),15)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     475
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_voqdb_tail_partial_upper_mmu_itm1_itm1),15)
#define WRITE_MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_voqdb_tail_partial_upper_mmu_itm1_itm1),15)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_TAIL_PARTIAL_UPPER_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_UPPER
 * BLOCKS:   MMU_ITM
 * SIZE:     78
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_UPPER.
 */
#define READ_MMU_TOQ_VOQDB_UPPERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_UPPERm_BLKACC,3,n,p,MMU_TOQ_VOQDB_UPPERm_OFFSET,i,(m._mmu_toq_voqdb_upper),3)
#define WRITE_MMU_TOQ_VOQDB_UPPERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_UPPERm_BLKACC,3,n,p,MMU_TOQ_VOQDB_UPPERm_OFFSET,i,&(m._mmu_toq_voqdb_upper),3)
#define WRITE_MMU_TOQ_VOQDB_UPPERm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_UPPERm_BLKACC,3,-1,p,MMU_TOQ_VOQDB_UPPERm_OFFSET,i,&(m._mmu_toq_voqdb_upper),3)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_UPPERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_UPPER_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     78
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_UPPER_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_VOQDB_UPPER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_UPPER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQDB_UPPER_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_voqdb_upper_mmu_itm0_itm0),3)
#define WRITE_MMU_TOQ_VOQDB_UPPER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_UPPER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQDB_UPPER_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_voqdb_upper_mmu_itm0_itm0),3)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_UPPER_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQDB_UPPER_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     78
 */
/*
 * These macros can be used to access MMU_TOQ_VOQDB_UPPER_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_VOQDB_UPPER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQDB_UPPER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQDB_UPPER_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_voqdb_upper_mmu_itm1_itm1),3)
#define WRITE_MMU_TOQ_VOQDB_UPPER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQDB_UPPER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQDB_UPPER_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_voqdb_upper_mmu_itm1_itm1),3)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQDB_UPPER_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQ_HEAD_DB_CPU
 * BLOCKS:   MMU_ITM
 * SIZE:     163
 */
/*
 * These macros can be used to access MMU_TOQ_VOQ_HEAD_DB_CPU.
 */
#define READ_MMU_TOQ_VOQ_HEAD_DB_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQ_HEAD_DB_CPUm_BLKACC,3,n,p,MMU_TOQ_VOQ_HEAD_DB_CPUm_OFFSET,i,(m._mmu_toq_voq_head_db_cpu),6)
#define WRITE_MMU_TOQ_VOQ_HEAD_DB_CPUm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQ_HEAD_DB_CPUm_BLKACC,3,n,p,MMU_TOQ_VOQ_HEAD_DB_CPUm_OFFSET,i,&(m._mmu_toq_voq_head_db_cpu),6)
#define WRITE_MMU_TOQ_VOQ_HEAD_DB_CPUm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQ_HEAD_DB_CPUm_BLKACC,3,-1,p,MMU_TOQ_VOQ_HEAD_DB_CPUm_OFFSET,i,&(m._mmu_toq_voq_head_db_cpu),6)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQ_HEAD_DB_CPUm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     163
 */
/*
 * These macros can be used to access MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_voq_head_db_cpu_mmu_itm0_itm0),6)
#define WRITE_MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_voq_head_db_cpu_mmu_itm0_itm0),6)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     163
 */
/*
 * These macros can be used to access MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_voq_head_db_cpu_mmu_itm1_itm1),6)
#define WRITE_MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_voq_head_db_cpu_mmu_itm1_itm1),6)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQ_HEAD_DB_CPU_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQ_HEAD_DB_LOWER
 * BLOCKS:   MMU_ITM
 * SIZE:     163
 */
/*
 * These macros can be used to access MMU_TOQ_VOQ_HEAD_DB_LOWER.
 */
#define READ_MMU_TOQ_VOQ_HEAD_DB_LOWERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQ_HEAD_DB_LOWERm_BLKACC,3,n,p,MMU_TOQ_VOQ_HEAD_DB_LOWERm_OFFSET,i,(m._mmu_toq_voq_head_db_lower),6)
#define WRITE_MMU_TOQ_VOQ_HEAD_DB_LOWERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQ_HEAD_DB_LOWERm_BLKACC,3,n,p,MMU_TOQ_VOQ_HEAD_DB_LOWERm_OFFSET,i,&(m._mmu_toq_voq_head_db_lower),6)
#define WRITE_MMU_TOQ_VOQ_HEAD_DB_LOWERm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQ_HEAD_DB_LOWERm_BLKACC,3,-1,p,MMU_TOQ_VOQ_HEAD_DB_LOWERm_OFFSET,i,&(m._mmu_toq_voq_head_db_lower),6)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQ_HEAD_DB_LOWERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     163
 */
/*
 * These macros can be used to access MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_voq_head_db_lower_mmu_itm0_itm0),6)
#define WRITE_MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_voq_head_db_lower_mmu_itm0_itm0),6)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     163
 */
/*
 * These macros can be used to access MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_voq_head_db_lower_mmu_itm1_itm1),6)
#define WRITE_MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_voq_head_db_lower_mmu_itm1_itm1),6)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQ_HEAD_DB_LOWER_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQ_HEAD_DB_UPPER
 * BLOCKS:   MMU_ITM
 * SIZE:     163
 */
/*
 * These macros can be used to access MMU_TOQ_VOQ_HEAD_DB_UPPER.
 */
#define READ_MMU_TOQ_VOQ_HEAD_DB_UPPERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQ_HEAD_DB_UPPERm_BLKACC,3,n,p,MMU_TOQ_VOQ_HEAD_DB_UPPERm_OFFSET,i,(m._mmu_toq_voq_head_db_upper),6)
#define WRITE_MMU_TOQ_VOQ_HEAD_DB_UPPERm(u,n,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQ_HEAD_DB_UPPERm_BLKACC,3,n,p,MMU_TOQ_VOQ_HEAD_DB_UPPERm_OFFSET,i,&(m._mmu_toq_voq_head_db_upper),6)
#define WRITE_MMU_TOQ_VOQ_HEAD_DB_UPPERm_ALL(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQ_HEAD_DB_UPPERm_BLKACC,3,-1,p,MMU_TOQ_VOQ_HEAD_DB_UPPERm_OFFSET,i,&(m._mmu_toq_voq_head_db_upper),6)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQ_HEAD_DB_UPPERm'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM0_ITM0
 * BLOCKS:   MMU_ITM
 * SIZE:     163
 */
/*
 * These macros can be used to access MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM0_ITM0.
 */
#define READ_MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM0_ITM0m_OFFSET,i,(m._mmu_toq_voq_head_db_upper_mmu_itm0_itm0),6)
#define WRITE_MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM0_ITM0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM0_ITM0m_BLKACC,3,0,p,MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM0_ITM0m_OFFSET,i,&(m._mmu_toq_voq_head_db_upper_mmu_itm0_itm0),6)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM0_ITM0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM1_ITM1
 * BLOCKS:   MMU_ITM
 * SIZE:     163
 */
/*
 * These macros can be used to access MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM1_ITM1.
 */
#define READ_MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM1_ITM1m_OFFSET,i,(m._mmu_toq_voq_head_db_upper_mmu_itm1_itm1),6)
#define WRITE_MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM1_ITM1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM1_ITM1m_BLKACC,3,0,p,MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM1_ITM1m_OFFSET,i,&(m._mmu_toq_voq_head_db_upper_mmu_itm1_itm1),6)

/*******************************************************************************
 * End of 'MMU_TOQ_VOQ_HEAD_DB_UPPER_MMU_ITM1_ITM1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_AVG_PORTSP_SIZE
 * BLOCKS:   MMU_ITM
 * SIZE:     40
 */
/*
 * These macros can be used to access MMU_WRED_AVG_PORTSP_SIZE.
 */
#define READ_MMU_WRED_AVG_PORTSP_SIZEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_AVG_PORTSP_SIZEm_BLKACC,3,0,p,MMU_WRED_AVG_PORTSP_SIZEm_OFFSET,i,(m._mmu_wred_avg_portsp_size),2)
#define WRITE_MMU_WRED_AVG_PORTSP_SIZEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_AVG_PORTSP_SIZEm_BLKACC,3,0,p,MMU_WRED_AVG_PORTSP_SIZEm_OFFSET,i,&(m._mmu_wred_avg_portsp_size),2)

/*******************************************************************************
 * End of 'MMU_WRED_AVG_PORTSP_SIZEm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_AVG_QSIZE
 * BLOCKS:   MMU_ITM
 * SIZE:     42
 */
/*
 * These macros can be used to access MMU_WRED_AVG_QSIZE.
 */
#define READ_MMU_WRED_AVG_QSIZEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_AVG_QSIZEm_BLKACC,3,0,p,MMU_WRED_AVG_QSIZEm_OFFSET,i,(m._mmu_wred_avg_qsize),2)
#define WRITE_MMU_WRED_AVG_QSIZEm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_AVG_QSIZEm_BLKACC,3,0,p,MMU_WRED_AVG_QSIZEm_OFFSET,i,&(m._mmu_wred_avg_qsize),2)

/*******************************************************************************
 * End of 'MMU_WRED_AVG_QSIZEm'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_CMIC_RESERVED
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_WRED_CMIC_RESERVED.
 */
#define READ_MMU_WRED_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_CMIC_RESERVEDr_BLKACC,3,0,0,MMU_WRED_CMIC_RESERVEDr_OFFSET,0,(r._mmu_wred_cmic_reserved),2)
#define WRITE_MMU_WRED_CMIC_RESERVEDr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_CMIC_RESERVEDr_BLKACC,3,0,0,MMU_WRED_CMIC_RESERVEDr_OFFSET,0,&(r._mmu_wred_cmic_reserved),2)

/*******************************************************************************
 * End of 'MMU_WRED_CMIC_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_CONFIG_READY
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_WRED_CONFIG_READY.
 */
#define READ_MMU_WRED_CONFIG_READYr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_CONFIG_READYr_BLKACC,3,0,0,MMU_WRED_CONFIG_READYr_OFFSET,0,(r._mmu_wred_config_ready),2)
#define WRITE_MMU_WRED_CONFIG_READYr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_CONFIG_READYr_BLKACC,3,0,0,MMU_WRED_CONFIG_READYr_OFFSET,0,&(r._mmu_wred_config_ready),2)

/*******************************************************************************
 * End of 'MMU_WRED_CONFIG_READYr'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_CONG_NOTIFICATION_RESOLUTION_TABLE
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_WRED_CONG_NOTIFICATION_RESOLUTION_TABLE.
 */
#define READ_MMU_WRED_CONG_NOTIFICATION_RESOLUTION_TABLEr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_CONG_NOTIFICATION_RESOLUTION_TABLEr_BLKACC,3,0,0,MMU_WRED_CONG_NOTIFICATION_RESOLUTION_TABLEr_OFFSET,i,(r._mmu_wred_cong_notification_resolution_table),1)
#define WRITE_MMU_WRED_CONG_NOTIFICATION_RESOLUTION_TABLEr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_CONG_NOTIFICATION_RESOLUTION_TABLEr_BLKACC,3,0,0,MMU_WRED_CONG_NOTIFICATION_RESOLUTION_TABLEr_OFFSET,i,&(r._mmu_wred_cong_notification_resolution_table),1)

/*******************************************************************************
 * End of 'MMU_WRED_CONG_NOTIFICATION_RESOLUTION_TABLEr'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_MARK_0
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_MARK_0.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_MARK_0m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_0m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_0m_OFFSET,i,(m._mmu_wred_drop_curve_profile_mark_0),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_MARK_0m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_0m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_0m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_mark_0),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_MARK_0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_MARK_1
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_MARK_1.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_MARK_1m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_1m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_1m_OFFSET,i,(m._mmu_wred_drop_curve_profile_mark_1),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_MARK_1m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_1m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_1m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_mark_1),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_MARK_1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_MARK_2
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_MARK_2.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_MARK_2m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_2m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_2m_OFFSET,i,(m._mmu_wred_drop_curve_profile_mark_2),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_MARK_2m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_2m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_2m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_mark_2),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_MARK_2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_MARK_3
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_MARK_3.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_MARK_3m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_3m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_3m_OFFSET,i,(m._mmu_wred_drop_curve_profile_mark_3),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_MARK_3m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_3m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_3m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_mark_3),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_MARK_3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_MARK_4
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_MARK_4.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_MARK_4m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_4m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_4m_OFFSET,i,(m._mmu_wred_drop_curve_profile_mark_4),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_MARK_4m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_4m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_4m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_mark_4),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_MARK_4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_MARK_5
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_MARK_5.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_MARK_5m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_5m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_5m_OFFSET,i,(m._mmu_wred_drop_curve_profile_mark_5),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_MARK_5m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_5m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_5m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_mark_5),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_MARK_5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_MARK_6
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_MARK_6.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_MARK_6m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_6m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_6m_OFFSET,i,(m._mmu_wred_drop_curve_profile_mark_6),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_MARK_6m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_6m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_6m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_mark_6),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_MARK_6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_MARK_7
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_MARK_7.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_MARK_7m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_7m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_7m_OFFSET,i,(m._mmu_wred_drop_curve_profile_mark_7),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_MARK_7m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_MARK_7m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_MARK_7m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_mark_7),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_MARK_7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_NONRESP_0
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_NONRESP_0.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_0m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_0m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_0m_OFFSET,i,(m._mmu_wred_drop_curve_profile_nonresp_0),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_0m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_0m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_0m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_nonresp_0),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_NONRESP_0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_NONRESP_1
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_NONRESP_1.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_1m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_1m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_1m_OFFSET,i,(m._mmu_wred_drop_curve_profile_nonresp_1),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_1m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_1m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_1m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_nonresp_1),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_NONRESP_1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_NONRESP_2
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_NONRESP_2.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_2m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_2m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_2m_OFFSET,i,(m._mmu_wred_drop_curve_profile_nonresp_2),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_2m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_2m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_2m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_nonresp_2),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_NONRESP_2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_NONRESP_3
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_NONRESP_3.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_3m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_3m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_3m_OFFSET,i,(m._mmu_wred_drop_curve_profile_nonresp_3),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_3m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_3m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_3m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_nonresp_3),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_NONRESP_3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_NONRESP_4
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_NONRESP_4.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_4m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_4m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_4m_OFFSET,i,(m._mmu_wred_drop_curve_profile_nonresp_4),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_4m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_4m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_4m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_nonresp_4),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_NONRESP_4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_NONRESP_5
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_NONRESP_5.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_5m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_5m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_5m_OFFSET,i,(m._mmu_wred_drop_curve_profile_nonresp_5),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_5m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_5m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_5m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_nonresp_5),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_NONRESP_5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_NONRESP_6
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_NONRESP_6.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_6m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_6m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_6m_OFFSET,i,(m._mmu_wred_drop_curve_profile_nonresp_6),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_6m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_6m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_6m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_nonresp_6),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_NONRESP_6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_NONRESP_7
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_NONRESP_7.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_7m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_7m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_7m_OFFSET,i,(m._mmu_wred_drop_curve_profile_nonresp_7),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_NONRESP_7m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_7m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_NONRESP_7m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_nonresp_7),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_NONRESP_7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_RESP_0
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_RESP_0.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_RESP_0m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_0m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_0m_OFFSET,i,(m._mmu_wred_drop_curve_profile_resp_0),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_RESP_0m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_0m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_0m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_resp_0),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_RESP_0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_RESP_1
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_RESP_1.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_RESP_1m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_1m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_1m_OFFSET,i,(m._mmu_wred_drop_curve_profile_resp_1),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_RESP_1m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_1m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_1m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_resp_1),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_RESP_1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_RESP_2
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_RESP_2.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_RESP_2m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_2m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_2m_OFFSET,i,(m._mmu_wred_drop_curve_profile_resp_2),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_RESP_2m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_2m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_2m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_resp_2),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_RESP_2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_RESP_3
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_RESP_3.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_RESP_3m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_3m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_3m_OFFSET,i,(m._mmu_wred_drop_curve_profile_resp_3),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_RESP_3m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_3m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_3m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_resp_3),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_RESP_3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_RESP_4
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_RESP_4.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_RESP_4m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_4m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_4m_OFFSET,i,(m._mmu_wred_drop_curve_profile_resp_4),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_RESP_4m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_4m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_4m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_resp_4),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_RESP_4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_RESP_5
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_RESP_5.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_RESP_5m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_5m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_5m_OFFSET,i,(m._mmu_wred_drop_curve_profile_resp_5),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_RESP_5m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_5m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_5m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_resp_5),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_RESP_5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_RESP_6
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_RESP_6.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_RESP_6m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_6m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_6m_OFFSET,i,(m._mmu_wred_drop_curve_profile_resp_6),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_RESP_6m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_6m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_6m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_resp_6),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_RESP_6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_RESP_7
 * BLOCKS:   MMU_ITM
 * SIZE:     135
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_RESP_7.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_RESP_7m(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_7m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_7m_OFFSET,i,(m._mmu_wred_drop_curve_profile_resp_7),5)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_RESP_7m(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_RESP_7m_BLKACC,3,0,0,MMU_WRED_DROP_CURVE_PROFILE_RESP_7m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_resp_7),5)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_RESP_7m'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_WRED_ENABLE_ECCP_MEM.
 */
#define READ_MMU_WRED_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_WRED_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_wred_enable_eccp_mem),1)
#define WRITE_MMU_WRED_ENABLE_ECCP_MEMr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_ENABLE_ECCP_MEMr_BLKACC,3,0,0,MMU_WRED_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_wred_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_WRED_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_EN_COR_ERR_RPT
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_WRED_EN_COR_ERR_RPT.
 */
#define READ_MMU_WRED_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_WRED_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_wred_en_cor_err_rpt),1)
#define WRITE_MMU_WRED_EN_COR_ERR_RPTr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_EN_COR_ERR_RPTr_BLKACC,3,0,0,MMU_WRED_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_wred_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_WRED_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_MEM_INIT_STATUS
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_WRED_MEM_INIT_STATUS.
 */
#define READ_MMU_WRED_MEM_INIT_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_MEM_INIT_STATUSr_BLKACC,3,0,p,MMU_WRED_MEM_INIT_STATUSr_OFFSET,0,(r._mmu_wred_mem_init_status),1)
#define WRITE_MMU_WRED_MEM_INIT_STATUSr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_MEM_INIT_STATUSr_BLKACC,3,0,p,MMU_WRED_MEM_INIT_STATUSr_OFFSET,0,&(r._mmu_wred_mem_init_status),1)

/*******************************************************************************
 * End of 'MMU_WRED_MEM_INIT_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_POOL_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_WRED_POOL_CONFIG.
 */
#define READ_MMU_WRED_POOL_CONFIGr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_POOL_CONFIGr_BLKACC,3,0,0,MMU_WRED_POOL_CONFIGr_OFFSET,i,(r._mmu_wred_pool_config),1)
#define WRITE_MMU_WRED_POOL_CONFIGr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_POOL_CONFIGr_BLKACC,3,0,0,MMU_WRED_POOL_CONFIGr_OFFSET,i,&(r._mmu_wred_pool_config),1)

/*******************************************************************************
 * End of 'MMU_WRED_POOL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_POOL_INST_CONG_LIMIT
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_WRED_POOL_INST_CONG_LIMIT.
 */
#define READ_MMU_WRED_POOL_INST_CONG_LIMITr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_POOL_INST_CONG_LIMITr_BLKACC,3,0,0,MMU_WRED_POOL_INST_CONG_LIMITr_OFFSET,i,(r._mmu_wred_pool_inst_cong_limit),2)
#define WRITE_MMU_WRED_POOL_INST_CONG_LIMITr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_POOL_INST_CONG_LIMITr_BLKACC,3,0,0,MMU_WRED_POOL_INST_CONG_LIMITr_OFFSET,i,&(r._mmu_wred_pool_inst_cong_limit),2)

/*******************************************************************************
 * End of 'MMU_WRED_POOL_INST_CONG_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_POOL_INST_CONG_LIMIT_0
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_WRED_POOL_INST_CONG_LIMIT_0.
 */
#define READ_MMU_WRED_POOL_INST_CONG_LIMIT_0r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_POOL_INST_CONG_LIMIT_0r_BLKACC,3,0,0,MMU_WRED_POOL_INST_CONG_LIMIT_0r_OFFSET,0,(r._mmu_wred_pool_inst_cong_limit_0),2)
#define WRITE_MMU_WRED_POOL_INST_CONG_LIMIT_0r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_POOL_INST_CONG_LIMIT_0r_BLKACC,3,0,0,MMU_WRED_POOL_INST_CONG_LIMIT_0r_OFFSET,0,&(r._mmu_wred_pool_inst_cong_limit_0),2)

/*******************************************************************************
 * End of 'MMU_WRED_POOL_INST_CONG_LIMIT_0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_POOL_INST_CONG_LIMIT_1
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_WRED_POOL_INST_CONG_LIMIT_1.
 */
#define READ_MMU_WRED_POOL_INST_CONG_LIMIT_1r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_POOL_INST_CONG_LIMIT_1r_BLKACC,3,0,0,MMU_WRED_POOL_INST_CONG_LIMIT_1r_OFFSET,0,(r._mmu_wred_pool_inst_cong_limit_1),2)
#define WRITE_MMU_WRED_POOL_INST_CONG_LIMIT_1r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_POOL_INST_CONG_LIMIT_1r_BLKACC,3,0,0,MMU_WRED_POOL_INST_CONG_LIMIT_1r_OFFSET,0,&(r._mmu_wred_pool_inst_cong_limit_1),2)

/*******************************************************************************
 * End of 'MMU_WRED_POOL_INST_CONG_LIMIT_1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_POOL_INST_CONG_LIMIT_2
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_WRED_POOL_INST_CONG_LIMIT_2.
 */
#define READ_MMU_WRED_POOL_INST_CONG_LIMIT_2r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_POOL_INST_CONG_LIMIT_2r_BLKACC,3,0,0,MMU_WRED_POOL_INST_CONG_LIMIT_2r_OFFSET,0,(r._mmu_wred_pool_inst_cong_limit_2),2)
#define WRITE_MMU_WRED_POOL_INST_CONG_LIMIT_2r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_POOL_INST_CONG_LIMIT_2r_BLKACC,3,0,0,MMU_WRED_POOL_INST_CONG_LIMIT_2r_OFFSET,0,&(r._mmu_wred_pool_inst_cong_limit_2),2)

/*******************************************************************************
 * End of 'MMU_WRED_POOL_INST_CONG_LIMIT_2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_POOL_INST_CONG_LIMIT_3
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_WRED_POOL_INST_CONG_LIMIT_3.
 */
#define READ_MMU_WRED_POOL_INST_CONG_LIMIT_3r(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_POOL_INST_CONG_LIMIT_3r_BLKACC,3,0,0,MMU_WRED_POOL_INST_CONG_LIMIT_3r_OFFSET,0,(r._mmu_wred_pool_inst_cong_limit_3),2)
#define WRITE_MMU_WRED_POOL_INST_CONG_LIMIT_3r(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_POOL_INST_CONG_LIMIT_3r_BLKACC,3,0,0,MMU_WRED_POOL_INST_CONG_LIMIT_3r_OFFSET,0,&(r._mmu_wred_pool_inst_cong_limit_3),2)

/*******************************************************************************
 * End of 'MMU_WRED_POOL_INST_CONG_LIMIT_3r'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORTSP_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     20
 */
/*
 * These macros can be used to access MMU_WRED_PORTSP_CONFIG.
 */
#define READ_MMU_WRED_PORTSP_CONFIGm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_PORTSP_CONFIGm_BLKACC,3,0,0,MMU_WRED_PORTSP_CONFIGm_OFFSET,i,(m._mmu_wred_portsp_config),1)
#define WRITE_MMU_WRED_PORTSP_CONFIGm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_PORTSP_CONFIGm_BLKACC,3,0,0,MMU_WRED_PORTSP_CONFIGm_OFFSET,i,&(m._mmu_wred_portsp_config),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORTSP_CONFIGm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_0
 * BLOCKS:   MMU_ITM
 * SIZE:     72
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_0.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_0m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_0m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_0),3)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_0m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_0m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_0),3)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_1
 * BLOCKS:   MMU_ITM
 * SIZE:     72
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_1.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_1m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_1m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_1),3)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_1m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_1m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_1),3)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_SHARED_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_SHARED_COUNT.
 */
#define READ_MMU_WRED_PORT_SP_SHARED_COUNTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_PORT_SP_SHARED_COUNTm_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNTm_OFFSET,i,(m._mmu_wred_port_sp_shared_count),1)
#define WRITE_MMU_WRED_PORT_SP_SHARED_COUNTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_PORT_SP_SHARED_COUNTm_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNTm_OFFSET,i,&(m._mmu_wred_port_sp_shared_count),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_SHARED_COUNTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_QUEUE_CONFIG
 * BLOCKS:   MMU_ITM
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_WRED_QUEUE_CONFIG.
 */
#define READ_MMU_WRED_QUEUE_CONFIGm(u,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_QUEUE_CONFIGm_BLKACC,3,0,0,MMU_WRED_QUEUE_CONFIGm_OFFSET,i,(m._mmu_wred_queue_config),1)
#define WRITE_MMU_WRED_QUEUE_CONFIGm(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_QUEUE_CONFIGm_BLKACC,3,0,0,MMU_WRED_QUEUE_CONFIGm_OFFSET,i,&(m._mmu_wred_queue_config),1)

/*******************************************************************************
 * End of 'MMU_WRED_QUEUE_CONFIGm'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_REFRESH_CONTROL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_WRED_REFRESH_CONTROL.
 */
#define READ_MMU_WRED_REFRESH_CONTROLr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_REFRESH_CONTROLr_BLKACC,3,0,0,MMU_WRED_REFRESH_CONTROLr_OFFSET,0,(r._mmu_wred_refresh_control),1)
#define WRITE_MMU_WRED_REFRESH_CONTROLr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_REFRESH_CONTROLr_BLKACC,3,0,0,MMU_WRED_REFRESH_CONTROLr_OFFSET,0,&(r._mmu_wred_refresh_control),1)

/*******************************************************************************
 * End of 'MMU_WRED_REFRESH_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_TIME_DOMAIN
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_WRED_TIME_DOMAIN.
 */
#define READ_MMU_WRED_TIME_DOMAINr(u,i,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_TIME_DOMAINr_BLKACC,3,0,0,MMU_WRED_TIME_DOMAINr_OFFSET,i,(r._mmu_wred_time_domain),1)
#define WRITE_MMU_WRED_TIME_DOMAINr(u,i,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_TIME_DOMAINr_BLKACC,3,0,0,MMU_WRED_TIME_DOMAINr_OFFSET,i,&(r._mmu_wred_time_domain),1)

/*******************************************************************************
 * End of 'MMU_WRED_TIME_DOMAINr'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_TMBUS
 * BLOCKS:   MMU_ITM
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_WRED_TMBUS.
 */
#define READ_MMU_WRED_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_read(u,MMU_WRED_TMBUSr_BLKACC,3,0,0,MMU_WRED_TMBUSr_OFFSET,0,(r._mmu_wred_tmbus),2)
#define WRITE_MMU_WRED_TMBUSr(u,r) bcmbd_cmicx_reg_unique_block_write(u,MMU_WRED_TMBUSr_BLKACC,3,0,0,MMU_WRED_TMBUSr_OFFSET,0,&(r._mmu_wred_tmbus),2)

/*******************************************************************************
 * End of 'MMU_WRED_TMBUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD
 * BLOCKS:   MMU_ITM
 * SIZE:     56
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THDm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THDm_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THDm_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THDm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THDm_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THDm_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THDm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_MARK_0
 * BLOCKS:   MMU_ITM
 * SIZE:     34
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_MARK_0.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_MARK_0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_0m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_mark_0),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_MARK_0m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_0m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_mark_0),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_MARK_0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_MARK_1
 * BLOCKS:   MMU_ITM
 * SIZE:     34
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_MARK_1.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_MARK_1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_1m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_mark_1),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_MARK_1m(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_1m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_mark_1),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_MARK_1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT
 * BLOCKS:   MMU_ITM
 * SIZE:     25
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNTm_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNTm_OFFSET,i,(m._mmu_wred_uc_queue_total_count),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNTm(u,p,i,m) bcmbd_cmicx_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNTm_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNTm_OFFSET,i,&(m._mmu_wred_uc_queue_total_count),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNTm'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_ACTION_TABLE_A
 * BLOCKS:   IPIPE
 * SIZE:     72
 */
/*
 * These macros can be used to access MPLS_ENTRY_ACTION_TABLE_A.
 */
#define READ_MPLS_ENTRY_ACTION_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_read(u,MPLS_ENTRY_ACTION_TABLE_Am_BLKACC,1,MPLS_ENTRY_ACTION_TABLE_Am_OFFSET,i,(m._mpls_entry_action_table_a),3)
#define WRITE_MPLS_ENTRY_ACTION_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_write(u,MPLS_ENTRY_ACTION_TABLE_Am_BLKACC,1,MPLS_ENTRY_ACTION_TABLE_Am_OFFSET,i,&(m._mpls_entry_action_table_a),3)

/*******************************************************************************
 * End of 'MPLS_ENTRY_ACTION_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_ACTION_TABLE_B
 * BLOCKS:   IPIPE
 * SIZE:     72
 */
/*
 * These macros can be used to access MPLS_ENTRY_ACTION_TABLE_B.
 */
#define READ_MPLS_ENTRY_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_read(u,MPLS_ENTRY_ACTION_TABLE_Bm_BLKACC,1,MPLS_ENTRY_ACTION_TABLE_Bm_OFFSET,i,(m._mpls_entry_action_table_b),3)
#define WRITE_MPLS_ENTRY_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_write(u,MPLS_ENTRY_ACTION_TABLE_Bm_BLKACC,1,MPLS_ENTRY_ACTION_TABLE_Bm_OFFSET,i,&(m._mpls_entry_action_table_b),3)

/*******************************************************************************
 * End of 'MPLS_ENTRY_ACTION_TABLE_Bm'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_DOUBLE
 * BLOCKS:   IPIPE
 * SIZE:     210
 */
/*
 * These macros can be used to access MPLS_ENTRY_DOUBLE.
 */
#define READ_MPLS_ENTRY_DOUBLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,MPLS_ENTRY_DOUBLEm_BLKACC,1,MPLS_ENTRY_DOUBLEm_OFFSET,i,(m._mpls_entry_double),7)
#define WRITE_MPLS_ENTRY_DOUBLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,MPLS_ENTRY_DOUBLEm_BLKACC,1,MPLS_ENTRY_DOUBLEm_OFFSET,i,&(m._mpls_entry_double),7)

/*******************************************************************************
 * End of 'MPLS_ENTRY_DOUBLEm'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_ECC
 * BLOCKS:   IPIPE
 * SIZE:     113
 */
/*
 * These macros can be used to access MPLS_ENTRY_ECC.
 */
#define READ_MPLS_ENTRY_ECCm(u,i,m) bcmbd_cmicx_mem_block_read(u,MPLS_ENTRY_ECCm_BLKACC,1,MPLS_ENTRY_ECCm_OFFSET,i,(m._mpls_entry_ecc),4)
#define WRITE_MPLS_ENTRY_ECCm(u,i,m) bcmbd_cmicx_mem_block_write(u,MPLS_ENTRY_ECCm_BLKACC,1,MPLS_ENTRY_ECCm_OFFSET,i,&(m._mpls_entry_ecc),4)

/*******************************************************************************
 * End of 'MPLS_ENTRY_ECCm'
 */




/*******************************************************************************
 * REGISTER:  MPLS_ENTRY_FLEX_CTR_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MPLS_ENTRY_FLEX_CTR_CONTROL.
 */
#define READ_MPLS_ENTRY_FLEX_CTR_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,MPLS_ENTRY_FLEX_CTR_CONTROLr_BLKACC,1,MPLS_ENTRY_FLEX_CTR_CONTROLr_OFFSET,0,(r._mpls_entry_flex_ctr_control), 1)
#define WRITE_MPLS_ENTRY_FLEX_CTR_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,MPLS_ENTRY_FLEX_CTR_CONTROLr_BLKACC,1,MPLS_ENTRY_FLEX_CTR_CONTROLr_OFFSET,0,&(r._mpls_entry_flex_ctr_control), 1)

/*******************************************************************************
 * End of 'MPLS_ENTRY_FLEX_CTR_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access MPLS_ENTRY_HASH_CONTROL.
 */
#define READ_MPLS_ENTRY_HASH_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,MPLS_ENTRY_HASH_CONTROLm_BLKACC,1,MPLS_ENTRY_HASH_CONTROLm_OFFSET,i,(m._mpls_entry_hash_control),2)
#define WRITE_MPLS_ENTRY_HASH_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,MPLS_ENTRY_HASH_CONTROLm_BLKACC,1,MPLS_ENTRY_HASH_CONTROLm_OFFSET,i,&(m._mpls_entry_hash_control),2)

/*******************************************************************************
 * End of 'MPLS_ENTRY_HASH_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_HT_DEBUG_CMD
 * BLOCKS:   IPIPE
 * SIZE:     3
 */
/*
 * These macros can be used to access MPLS_ENTRY_HT_DEBUG_CMD.
 */
#define READ_MPLS_ENTRY_HT_DEBUG_CMDm(u,i,m) bcmbd_cmicx_mem_block_read(u,MPLS_ENTRY_HT_DEBUG_CMDm_BLKACC,1,MPLS_ENTRY_HT_DEBUG_CMDm_OFFSET,i,(m._mpls_entry_ht_debug_cmd),1)
#define WRITE_MPLS_ENTRY_HT_DEBUG_CMDm(u,i,m) bcmbd_cmicx_mem_block_write(u,MPLS_ENTRY_HT_DEBUG_CMDm_BLKACC,1,MPLS_ENTRY_HT_DEBUG_CMDm_OFFSET,i,&(m._mpls_entry_ht_debug_cmd),1)

/*******************************************************************************
 * End of 'MPLS_ENTRY_HT_DEBUG_CMDm'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_HT_DEBUG_KEY
 * BLOCKS:   IPIPE
 * SIZE:     480
 */
/*
 * These macros can be used to access MPLS_ENTRY_HT_DEBUG_KEY.
 */
#define READ_MPLS_ENTRY_HT_DEBUG_KEYm(u,i,m) bcmbd_cmicx_mem_block_read(u,MPLS_ENTRY_HT_DEBUG_KEYm_BLKACC,1,MPLS_ENTRY_HT_DEBUG_KEYm_OFFSET,i,(m._mpls_entry_ht_debug_key),15)
#define WRITE_MPLS_ENTRY_HT_DEBUG_KEYm(u,i,m) bcmbd_cmicx_mem_block_write(u,MPLS_ENTRY_HT_DEBUG_KEYm_BLKACC,1,MPLS_ENTRY_HT_DEBUG_KEYm_OFFSET,i,&(m._mpls_entry_ht_debug_key),15)

/*******************************************************************************
 * End of 'MPLS_ENTRY_HT_DEBUG_KEYm'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_HT_DEBUG_RESULT
 * BLOCKS:   IPIPE
 * SIZE:     139
 */
/*
 * These macros can be used to access MPLS_ENTRY_HT_DEBUG_RESULT.
 */
#define READ_MPLS_ENTRY_HT_DEBUG_RESULTm(u,i,m) bcmbd_cmicx_mem_block_read(u,MPLS_ENTRY_HT_DEBUG_RESULTm_BLKACC,1,MPLS_ENTRY_HT_DEBUG_RESULTm_OFFSET,i,(m._mpls_entry_ht_debug_result),5)
#define WRITE_MPLS_ENTRY_HT_DEBUG_RESULTm(u,i,m) bcmbd_cmicx_mem_block_write(u,MPLS_ENTRY_HT_DEBUG_RESULTm_BLKACC,1,MPLS_ENTRY_HT_DEBUG_RESULTm_OFFSET,i,&(m._mpls_entry_ht_debug_result),5)

/*******************************************************************************
 * End of 'MPLS_ENTRY_HT_DEBUG_RESULTm'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_KEY_ATTRIBUTES
 * BLOCKS:   IPIPE
 * SIZE:     175
 */
/*
 * These macros can be used to access MPLS_ENTRY_KEY_ATTRIBUTES.
 */
#define READ_MPLS_ENTRY_KEY_ATTRIBUTESm(u,i,m) bcmbd_cmicx_mem_block_read(u,MPLS_ENTRY_KEY_ATTRIBUTESm_BLKACC,1,MPLS_ENTRY_KEY_ATTRIBUTESm_OFFSET,i,(m._mpls_entry_key_attributes),6)
#define WRITE_MPLS_ENTRY_KEY_ATTRIBUTESm(u,i,m) bcmbd_cmicx_mem_block_write(u,MPLS_ENTRY_KEY_ATTRIBUTESm_BLKACC,1,MPLS_ENTRY_KEY_ATTRIBUTESm_OFFSET,i,&(m._mpls_entry_key_attributes),6)

/*******************************************************************************
 * End of 'MPLS_ENTRY_KEY_ATTRIBUTESm'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_KEY_BUFFER_0
 * BLOCKS:   IPIPE
 * SIZE:     210
 */
/*
 * These macros can be used to access MPLS_ENTRY_KEY_BUFFER_0.
 */
#define READ_MPLS_ENTRY_KEY_BUFFER_0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,MPLS_ENTRY_KEY_BUFFER_0m_BLKACC,1,n,0,MPLS_ENTRY_KEY_BUFFER_0m_OFFSET,i,(m._mpls_entry_key_buffer_0),7)
#define WRITE_MPLS_ENTRY_KEY_BUFFER_0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,MPLS_ENTRY_KEY_BUFFER_0m_BLKACC,1,n,0,MPLS_ENTRY_KEY_BUFFER_0m_OFFSET,i,&(m._mpls_entry_key_buffer_0),7)
#define WRITE_MPLS_ENTRY_KEY_BUFFER_0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MPLS_ENTRY_KEY_BUFFER_0m_BLKACC,1,-1,0,MPLS_ENTRY_KEY_BUFFER_0m_OFFSET,i,&(m._mpls_entry_key_buffer_0),7)

/*******************************************************************************
 * End of 'MPLS_ENTRY_KEY_BUFFER_0m'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_KEY_BUFFER_1
 * BLOCKS:   IPIPE
 * SIZE:     105
 */
/*
 * These macros can be used to access MPLS_ENTRY_KEY_BUFFER_1.
 */
#define READ_MPLS_ENTRY_KEY_BUFFER_1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,MPLS_ENTRY_KEY_BUFFER_1m_BLKACC,1,n,0,MPLS_ENTRY_KEY_BUFFER_1m_OFFSET,i,(m._mpls_entry_key_buffer_1),4)
#define WRITE_MPLS_ENTRY_KEY_BUFFER_1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,MPLS_ENTRY_KEY_BUFFER_1m_BLKACC,1,n,0,MPLS_ENTRY_KEY_BUFFER_1m_OFFSET,i,&(m._mpls_entry_key_buffer_1),4)
#define WRITE_MPLS_ENTRY_KEY_BUFFER_1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,MPLS_ENTRY_KEY_BUFFER_1m_BLKACC,1,-1,0,MPLS_ENTRY_KEY_BUFFER_1m_OFFSET,i,&(m._mpls_entry_key_buffer_1),4)

/*******************************************************************************
 * End of 'MPLS_ENTRY_KEY_BUFFER_1m'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_REMAP_TABLE_A
 * BLOCKS:   IPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access MPLS_ENTRY_REMAP_TABLE_A.
 */
#define READ_MPLS_ENTRY_REMAP_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_read(u,MPLS_ENTRY_REMAP_TABLE_Am_BLKACC,1,MPLS_ENTRY_REMAP_TABLE_Am_OFFSET,i,(m._mpls_entry_remap_table_a),1)
#define WRITE_MPLS_ENTRY_REMAP_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_write(u,MPLS_ENTRY_REMAP_TABLE_Am_BLKACC,1,MPLS_ENTRY_REMAP_TABLE_Am_OFFSET,i,&(m._mpls_entry_remap_table_a),1)

/*******************************************************************************
 * End of 'MPLS_ENTRY_REMAP_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_REMAP_TABLE_B
 * BLOCKS:   IPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access MPLS_ENTRY_REMAP_TABLE_B.
 */
#define READ_MPLS_ENTRY_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_read(u,MPLS_ENTRY_REMAP_TABLE_Bm_BLKACC,1,MPLS_ENTRY_REMAP_TABLE_Bm_OFFSET,i,(m._mpls_entry_remap_table_b),1)
#define WRITE_MPLS_ENTRY_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_write(u,MPLS_ENTRY_REMAP_TABLE_Bm_BLKACC,1,MPLS_ENTRY_REMAP_TABLE_Bm_OFFSET,i,&(m._mpls_entry_remap_table_b),1)

/*******************************************************************************
 * End of 'MPLS_ENTRY_REMAP_TABLE_Bm'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_SINGLE
 * BLOCKS:   IPIPE
 * SIZE:     105
 */
/*
 * These macros can be used to access MPLS_ENTRY_SINGLE.
 */
#define READ_MPLS_ENTRY_SINGLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,MPLS_ENTRY_SINGLEm_BLKACC,1,MPLS_ENTRY_SINGLEm_OFFSET,i,(m._mpls_entry_single),4)
#define WRITE_MPLS_ENTRY_SINGLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,MPLS_ENTRY_SINGLEm_BLKACC,1,MPLS_ENTRY_SINGLEm_OFFSET,i,&(m._mpls_entry_single),4)

/*******************************************************************************
 * End of 'MPLS_ENTRY_SINGLEm'
 */




/*******************************************************************************
 * REGISTER:  MY_STATION_CAM_BIST_CONFIG_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MY_STATION_CAM_BIST_CONFIG_1_64.
 */
#define READ_MY_STATION_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,MY_STATION_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,MY_STATION_CAM_BIST_CONFIG_1_64r_OFFSET,0,(r._my_station_cam_bist_config_1_64),2)
#define WRITE_MY_STATION_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,MY_STATION_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,MY_STATION_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._my_station_cam_bist_config_1_64),2)
#define WRITE_MY_STATION_CAM_BIST_CONFIG_1_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,MY_STATION_CAM_BIST_CONFIG_1_64r_BLKACC,1,-1,0,MY_STATION_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._my_station_cam_bist_config_1_64),2)

/*******************************************************************************
 * End of 'MY_STATION_CAM_BIST_CONFIG_1_64r'
 */




/*******************************************************************************
 * REGISTER:  MY_STATION_CAM_BIST_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MY_STATION_CAM_BIST_CONFIG_64.
 */
#define READ_MY_STATION_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,MY_STATION_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,MY_STATION_CAM_BIST_CONFIG_64r_OFFSET,0,(r._my_station_cam_bist_config_64),2)
#define WRITE_MY_STATION_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,MY_STATION_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,MY_STATION_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._my_station_cam_bist_config_64),2)
#define WRITE_MY_STATION_CAM_BIST_CONFIG_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,MY_STATION_CAM_BIST_CONFIG_64r_BLKACC,1,-1,0,MY_STATION_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._my_station_cam_bist_config_64),2)

/*******************************************************************************
 * End of 'MY_STATION_CAM_BIST_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  MY_STATION_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MY_STATION_CAM_BIST_STATUS.
 */
#define READ_MY_STATION_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,MY_STATION_CAM_BIST_STATUSr_BLKACC,1,n,0,MY_STATION_CAM_BIST_STATUSr_OFFSET,0,(r._my_station_cam_bist_status),1)
#define WRITE_MY_STATION_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,MY_STATION_CAM_BIST_STATUSr_BLKACC,1,n,0,MY_STATION_CAM_BIST_STATUSr_OFFSET,0,&(r._my_station_cam_bist_status),1)
#define WRITE_MY_STATION_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,MY_STATION_CAM_BIST_STATUSr_BLKACC,1,-1,0,MY_STATION_CAM_BIST_STATUSr_OFFSET,0,&(r._my_station_cam_bist_status),1)

/*******************************************************************************
 * End of 'MY_STATION_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MY_STATION_CAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MY_STATION_CAM_CONTROL.
 */
#define READ_MY_STATION_CAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,MY_STATION_CAM_CONTROLr_BLKACC,1,n,0,MY_STATION_CAM_CONTROLr_OFFSET,0,(r._my_station_cam_control),2)
#define WRITE_MY_STATION_CAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,MY_STATION_CAM_CONTROLr_BLKACC,1,n,0,MY_STATION_CAM_CONTROLr_OFFSET,0,&(r._my_station_cam_control),2)
#define WRITE_MY_STATION_CAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,MY_STATION_CAM_CONTROLr_BLKACC,1,-1,0,MY_STATION_CAM_CONTROLr_OFFSET,0,&(r._my_station_cam_control),2)

/*******************************************************************************
 * End of 'MY_STATION_CAM_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  MY_STATION_TCAM
 * BLOCKS:   IPIPE
 * SIZE:     191
 */
/*
 * These macros can be used to access MY_STATION_TCAM.
 */
#define READ_MY_STATION_TCAMm(u,i,m) bcmbd_cmicx_mem_block_read(u,MY_STATION_TCAMm_BLKACC,1,MY_STATION_TCAMm_OFFSET,i,(m._my_station_tcam),6)
#define WRITE_MY_STATION_TCAMm(u,i,m) bcmbd_cmicx_mem_block_write(u,MY_STATION_TCAMm_BLKACC,1,MY_STATION_TCAMm_OFFSET,i,&(m._my_station_tcam),6)

/*******************************************************************************
 * End of 'MY_STATION_TCAMm'
 */




/*******************************************************************************
 * MEMORY:  MY_STATION_TCAM_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     13
 */
/*
 * These macros can be used to access MY_STATION_TCAM_DATA_ONLY.
 */
#define READ_MY_STATION_TCAM_DATA_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,MY_STATION_TCAM_DATA_ONLYm_BLKACC,1,MY_STATION_TCAM_DATA_ONLYm_OFFSET,i,(m._my_station_tcam_data_only),1)
#define WRITE_MY_STATION_TCAM_DATA_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,MY_STATION_TCAM_DATA_ONLYm_BLKACC,1,MY_STATION_TCAM_DATA_ONLYm_OFFSET,i,&(m._my_station_tcam_data_only),1)

/*******************************************************************************
 * End of 'MY_STATION_TCAM_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  MY_STATION_TCAM_ENTRY_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     178
 */
/*
 * These macros can be used to access MY_STATION_TCAM_ENTRY_ONLY.
 */
#define READ_MY_STATION_TCAM_ENTRY_ONLYm(u,i,m) bcmbd_cmicx_mem_block_read(u,MY_STATION_TCAM_ENTRY_ONLYm_BLKACC,1,MY_STATION_TCAM_ENTRY_ONLYm_OFFSET,i,(m._my_station_tcam_entry_only),6)
#define WRITE_MY_STATION_TCAM_ENTRY_ONLYm(u,i,m) bcmbd_cmicx_mem_block_write(u,MY_STATION_TCAM_ENTRY_ONLYm_BLKACC,1,MY_STATION_TCAM_ENTRY_ONLYm_OFFSET,i,&(m._my_station_tcam_entry_only),6)

/*******************************************************************************
 * End of 'MY_STATION_TCAM_ENTRY_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  NONUCAST_TRUNK_BLOCK_MASK
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access NONUCAST_TRUNK_BLOCK_MASK.
 */
#define READ_NONUCAST_TRUNK_BLOCK_MASKm(u,i,m) bcmbd_cmicx_mem_block_read(u,NONUCAST_TRUNK_BLOCK_MASKm_BLKACC,1,NONUCAST_TRUNK_BLOCK_MASKm_OFFSET,i,(m._nonucast_trunk_block_mask),9)
#define WRITE_NONUCAST_TRUNK_BLOCK_MASKm(u,i,m) bcmbd_cmicx_mem_block_write(u,NONUCAST_TRUNK_BLOCK_MASKm_BLKACC,1,NONUCAST_TRUNK_BLOCK_MASKm_OFFSET,i,&(m._nonucast_trunk_block_mask),9)

/*******************************************************************************
 * End of 'NONUCAST_TRUNK_BLOCK_MASKm'
 */




/*******************************************************************************
 * REGISTER:  NTP_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access NTP_CONFIG.
 */
#define READ_NTP_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,NTP_CONFIGr_BLKACC,1,NTP_CONFIGr_OFFSET,0,(r._ntp_config), 1)
#define WRITE_NTP_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,NTP_CONFIGr_BLKACC,1,NTP_CONFIGr_OFFSET,0,&(r._ntp_config), 1)

/*******************************************************************************
 * End of 'NTP_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  OPAQUE_TAG_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access OPAQUE_TAG_CONFIG.
 */
#define READ_OPAQUE_TAG_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_read(u,OPAQUE_TAG_CONFIGr_BLKACC,1,OPAQUE_TAG_CONFIGr_OFFSET,i,(r._opaque_tag_config), 1)
#define WRITE_OPAQUE_TAG_CONFIGr(u,i,r) bcmbd_cmicx_reg_block_write(u,OPAQUE_TAG_CONFIGr_BLKACC,1,OPAQUE_TAG_CONFIGr_OFFSET,i,&(r._opaque_tag_config), 1)

/*******************************************************************************
 * End of 'OPAQUE_TAG_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  OPAQUE_TAG_CONFIG_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access OPAQUE_TAG_CONFIG_0.
 */
#define READ_OPAQUE_TAG_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_read(u,OPAQUE_TAG_CONFIG_0r_BLKACC,1,OPAQUE_TAG_CONFIG_0r_OFFSET,0,(r._opaque_tag_config_0), 1)
#define WRITE_OPAQUE_TAG_CONFIG_0r(u,r) bcmbd_cmicx_reg_block_write(u,OPAQUE_TAG_CONFIG_0r_BLKACC,1,OPAQUE_TAG_CONFIG_0r_OFFSET,0,&(r._opaque_tag_config_0), 1)

/*******************************************************************************
 * End of 'OPAQUE_TAG_CONFIG_0r'
 */




/*******************************************************************************
 * REGISTER:  OPAQUE_TAG_CONFIG_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access OPAQUE_TAG_CONFIG_1.
 */
#define READ_OPAQUE_TAG_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_read(u,OPAQUE_TAG_CONFIG_1r_BLKACC,1,OPAQUE_TAG_CONFIG_1r_OFFSET,0,(r._opaque_tag_config_1), 1)
#define WRITE_OPAQUE_TAG_CONFIG_1r(u,r) bcmbd_cmicx_reg_block_write(u,OPAQUE_TAG_CONFIG_1r_BLKACC,1,OPAQUE_TAG_CONFIG_1r_OFFSET,0,&(r._opaque_tag_config_1), 1)

/*******************************************************************************
 * End of 'OPAQUE_TAG_CONFIG_1r'
 */




/*******************************************************************************
 * REGISTER:  PARS_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PARS_RAM_CONTROL.
 */
#define READ_PARS_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,PARS_RAM_CONTROLr_BLKACC,1,n,0,PARS_RAM_CONTROLr_OFFSET,0,(r._pars_ram_control),2)
#define WRITE_PARS_RAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,PARS_RAM_CONTROLr_BLKACC,1,n,0,PARS_RAM_CONTROLr_OFFSET,0,&(r._pars_ram_control),2)
#define WRITE_PARS_RAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,PARS_RAM_CONTROLr_BLKACC,1,-1,0,PARS_RAM_CONTROLr_OFFSET,0,&(r._pars_ram_control),2)

/*******************************************************************************
 * End of 'PARS_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  PARS_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PARS_SER_CONTROL.
 */
#define READ_PARS_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,PARS_SER_CONTROLr_BLKACC,1,PARS_SER_CONTROLr_OFFSET,0,(r._pars_ser_control), 1)
#define WRITE_PARS_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,PARS_SER_CONTROLr_BLKACC,1,PARS_SER_CONTROLr_OFFSET,0,&(r._pars_ser_control), 1)

/*******************************************************************************
 * End of 'PARS_SER_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  PFC_COLLECTOR_DS_FIFO
 * BLOCKS:   PFC_COLLECTOR
 * SIZE:     80
 */
/*
 * These macros can be used to access PFC_COLLECTOR_DS_FIFO.
 */
#define READ_PFC_COLLECTOR_DS_FIFOm(u,i,m) bcmbd_cmicx_mem_block_read(u,PFC_COLLECTOR_DS_FIFOm_BLKACC,90,PFC_COLLECTOR_DS_FIFOm_OFFSET,i,(m._pfc_collector_ds_fifo),3)
#define WRITE_PFC_COLLECTOR_DS_FIFOm(u,i,m) bcmbd_cmicx_mem_block_write(u,PFC_COLLECTOR_DS_FIFOm_BLKACC,90,PFC_COLLECTOR_DS_FIFOm_OFFSET,i,&(m._pfc_collector_ds_fifo),3)

/*******************************************************************************
 * End of 'PFC_COLLECTOR_DS_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  PFC_COLLECTOR_DS_FIFO_SER_CONTROL
 * BLOCKS:   PFC_COLLECTOR
 * SIZE:     32
 */
/*
 * These macros can be used to access PFC_COLLECTOR_DS_FIFO_SER_CONTROL.
 */
#define READ_PFC_COLLECTOR_DS_FIFO_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,PFC_COLLECTOR_DS_FIFO_SER_CONTROLr_BLKACC,90,PFC_COLLECTOR_DS_FIFO_SER_CONTROLr_OFFSET,0,(r._pfc_collector_ds_fifo_ser_control), 1)
#define WRITE_PFC_COLLECTOR_DS_FIFO_SER_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,PFC_COLLECTOR_DS_FIFO_SER_CONTROLr_BLKACC,90,PFC_COLLECTOR_DS_FIFO_SER_CONTROLr_OFFSET,0,&(r._pfc_collector_ds_fifo_ser_control), 1)

/*******************************************************************************
 * End of 'PFC_COLLECTOR_DS_FIFO_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  PFC_COLLECTOR_DS_FIFO_STATUS
 * BLOCKS:   PFC_COLLECTOR
 * SIZE:     64
 */
/*
 * These macros can be used to access PFC_COLLECTOR_DS_FIFO_STATUS.
 */
#define READ_PFC_COLLECTOR_DS_FIFO_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,PFC_COLLECTOR_DS_FIFO_STATUSr_BLKACC,90,PFC_COLLECTOR_DS_FIFO_STATUSr_OFFSET,0,(r._pfc_collector_ds_fifo_status), 2)
#define WRITE_PFC_COLLECTOR_DS_FIFO_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,PFC_COLLECTOR_DS_FIFO_STATUSr_BLKACC,90,PFC_COLLECTOR_DS_FIFO_STATUSr_OFFSET,0,&(r._pfc_collector_ds_fifo_status), 2)

/*******************************************************************************
 * End of 'PFC_COLLECTOR_DS_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  PFC_COLLECTOR_ECC_STATUS
 * BLOCKS:   PFC_COLLECTOR
 * SIZE:     32
 */
/*
 * These macros can be used to access PFC_COLLECTOR_ECC_STATUS.
 */
#define READ_PFC_COLLECTOR_ECC_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,PFC_COLLECTOR_ECC_STATUSr_BLKACC,90,PFC_COLLECTOR_ECC_STATUSr_OFFSET,0,(r._pfc_collector_ecc_status), 1)
#define WRITE_PFC_COLLECTOR_ECC_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,PFC_COLLECTOR_ECC_STATUSr_BLKACC,90,PFC_COLLECTOR_ECC_STATUSr_OFFSET,0,&(r._pfc_collector_ecc_status), 1)

/*******************************************************************************
 * End of 'PFC_COLLECTOR_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  PFC_COLLECTOR_IDB_EN
 * BLOCKS:   PFC_COLLECTOR
 * SIZE:     32
 */
/*
 * These macros can be used to access PFC_COLLECTOR_IDB_EN.
 */
#define READ_PFC_COLLECTOR_IDB_ENr(u,r) bcmbd_cmicx_reg_block_read(u,PFC_COLLECTOR_IDB_ENr_BLKACC,90,PFC_COLLECTOR_IDB_ENr_OFFSET,0,(r._pfc_collector_idb_en), 1)
#define WRITE_PFC_COLLECTOR_IDB_ENr(u,r) bcmbd_cmicx_reg_block_write(u,PFC_COLLECTOR_IDB_ENr_BLKACC,90,PFC_COLLECTOR_IDB_ENr_OFFSET,0,&(r._pfc_collector_idb_en), 1)

/*******************************************************************************
 * End of 'PFC_COLLECTOR_IDB_ENr'
 */




/*******************************************************************************
 * REGISTER:  PFC_COLLECTOR_INTR_ENABLE
 * BLOCKS:   PFC_COLLECTOR
 * SIZE:     32
 */
/*
 * These macros can be used to access PFC_COLLECTOR_INTR_ENABLE.
 */
#define READ_PFC_COLLECTOR_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,PFC_COLLECTOR_INTR_ENABLEr_BLKACC,90,PFC_COLLECTOR_INTR_ENABLEr_OFFSET,0,(r._pfc_collector_intr_enable), 1)
#define WRITE_PFC_COLLECTOR_INTR_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,PFC_COLLECTOR_INTR_ENABLEr_BLKACC,90,PFC_COLLECTOR_INTR_ENABLEr_OFFSET,0,&(r._pfc_collector_intr_enable), 1)

/*******************************************************************************
 * End of 'PFC_COLLECTOR_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  PFC_COLLECTOR_INTR_STATUS
 * BLOCKS:   PFC_COLLECTOR
 * SIZE:     32
 */
/*
 * These macros can be used to access PFC_COLLECTOR_INTR_STATUS.
 */
#define READ_PFC_COLLECTOR_INTR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,PFC_COLLECTOR_INTR_STATUSr_BLKACC,90,PFC_COLLECTOR_INTR_STATUSr_OFFSET,0,(r._pfc_collector_intr_status), 1)
#define WRITE_PFC_COLLECTOR_INTR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,PFC_COLLECTOR_INTR_STATUSr_BLKACC,90,PFC_COLLECTOR_INTR_STATUSr_OFFSET,0,&(r._pfc_collector_intr_status), 1)

/*******************************************************************************
 * End of 'PFC_COLLECTOR_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  PFC_COLLECTOR_RAM_CONTROL
 * BLOCKS:   PFC_COLLECTOR
 * SIZE:     64
 */
/*
 * These macros can be used to access PFC_COLLECTOR_RAM_CONTROL.
 */
#define READ_PFC_COLLECTOR_RAM_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,PFC_COLLECTOR_RAM_CONTROLr_BLKACC,90,PFC_COLLECTOR_RAM_CONTROLr_OFFSET,0,(r._pfc_collector_ram_control), 2)
#define WRITE_PFC_COLLECTOR_RAM_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,PFC_COLLECTOR_RAM_CONTROLr_BLKACC,90,PFC_COLLECTOR_RAM_CONTROLr_OFFSET,0,&(r._pfc_collector_ram_control), 2)

/*******************************************************************************
 * End of 'PFC_COLLECTOR_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  PFC_COLLECTOR_REF_TIME_CONTROL
 * BLOCKS:   PFC_COLLECTOR
 * SIZE:     32
 */
/*
 * These macros can be used to access PFC_COLLECTOR_REF_TIME_CONTROL.
 */
#define READ_PFC_COLLECTOR_REF_TIME_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,PFC_COLLECTOR_REF_TIME_CONTROLr_BLKACC,90,PFC_COLLECTOR_REF_TIME_CONTROLr_OFFSET,0,(r._pfc_collector_ref_time_control), 1)
#define WRITE_PFC_COLLECTOR_REF_TIME_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,PFC_COLLECTOR_REF_TIME_CONTROLr_BLKACC,90,PFC_COLLECTOR_REF_TIME_CONTROLr_OFFSET,0,&(r._pfc_collector_ref_time_control), 1)

/*******************************************************************************
 * End of 'PFC_COLLECTOR_REF_TIME_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  PFC_COLLECTOR_RESET
 * BLOCKS:   PFC_COLLECTOR
 * SIZE:     32
 */
/*
 * These macros can be used to access PFC_COLLECTOR_RESET.
 */
#define READ_PFC_COLLECTOR_RESETr(u,r) bcmbd_cmicx_reg_block_read(u,PFC_COLLECTOR_RESETr_BLKACC,90,PFC_COLLECTOR_RESETr_OFFSET,0,(r._pfc_collector_reset), 1)
#define WRITE_PFC_COLLECTOR_RESETr(u,r) bcmbd_cmicx_reg_block_write(u,PFC_COLLECTOR_RESETr_BLKACC,90,PFC_COLLECTOR_RESETr_OFFSET,0,&(r._pfc_collector_reset), 1)

/*******************************************************************************
 * End of 'PFC_COLLECTOR_RESETr'
 */




/*******************************************************************************
 * REGISTER:  PFC_COLLECTOR_SAMPLE_WINDOW_CONTROL
 * BLOCKS:   PFC_COLLECTOR
 * SIZE:     32
 */
/*
 * These macros can be used to access PFC_COLLECTOR_SAMPLE_WINDOW_CONTROL.
 */
#define READ_PFC_COLLECTOR_SAMPLE_WINDOW_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,PFC_COLLECTOR_SAMPLE_WINDOW_CONTROLr_BLKACC,90,PFC_COLLECTOR_SAMPLE_WINDOW_CONTROLr_OFFSET,0,(r._pfc_collector_sample_window_control), 1)
#define WRITE_PFC_COLLECTOR_SAMPLE_WINDOW_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,PFC_COLLECTOR_SAMPLE_WINDOW_CONTROLr_BLKACC,90,PFC_COLLECTOR_SAMPLE_WINDOW_CONTROLr_OFFSET,0,&(r._pfc_collector_sample_window_control), 1)

/*******************************************************************************
 * End of 'PFC_COLLECTOR_SAMPLE_WINDOW_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  PORT_BITMAP_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access PORT_BITMAP_PROFILE.
 */
#define READ_PORT_BITMAP_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_read(u,PORT_BITMAP_PROFILEm_BLKACC,1,PORT_BITMAP_PROFILEm_OFFSET,i,(m._port_bitmap_profile),9)
#define WRITE_PORT_BITMAP_PROFILEm(u,i,m) bcmbd_cmicx_mem_block_write(u,PORT_BITMAP_PROFILEm_BLKACC,1,PORT_BITMAP_PROFILEm_OFFSET,i,&(m._port_bitmap_profile),9)

/*******************************************************************************
 * End of 'PORT_BITMAP_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  PORT_BRIDGE_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     272
 */
/*
 * These macros can be used to access PORT_BRIDGE_BMAP.
 */
#define READ_PORT_BRIDGE_BMAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,PORT_BRIDGE_BMAPm_BLKACC,1,PORT_BRIDGE_BMAPm_OFFSET,i,(m._port_bridge_bmap),9)
#define WRITE_PORT_BRIDGE_BMAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,PORT_BRIDGE_BMAPm_BLKACC,1,PORT_BRIDGE_BMAPm_OFFSET,i,&(m._port_bridge_bmap),9)

/*******************************************************************************
 * End of 'PORT_BRIDGE_BMAPm'
 */




/*******************************************************************************
 * MEMORY:  PORT_COS_MAP
 * BLOCKS:   IPIPE
 * SIZE:     15
 */
/*
 * These macros can be used to access PORT_COS_MAP.
 */
#define READ_PORT_COS_MAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,PORT_COS_MAPm_BLKACC,1,PORT_COS_MAPm_OFFSET,i,(m._port_cos_map),1)
#define WRITE_PORT_COS_MAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,PORT_COS_MAPm_BLKACC,1,PORT_COS_MAPm_OFFSET,i,&(m._port_cos_map),1)

/*******************************************************************************
 * End of 'PORT_COS_MAPm'
 */




/*******************************************************************************
 * REGISTER:  PORT_IF_SBS_CONTROL
 * BLOCKS:   PORT_IF
 * SIZE:     32
 */
/*
 * These macros can be used to access PORT_IF_SBS_CONTROL.
 */
#define READ_PORT_IF_SBS_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,PORT_IF_SBS_CONTROLr_BLKACC,89,PORT_IF_SBS_CONTROLr_OFFSET,0,(r._port_if_sbs_control), 1)
#define WRITE_PORT_IF_SBS_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,PORT_IF_SBS_CONTROLr_BLKACC,89,PORT_IF_SBS_CONTROLr_OFFSET,0,&(r._port_if_sbs_control), 1)

/*******************************************************************************
 * End of 'PORT_IF_SBS_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  PORT_LAG_FAILOVER_SET
 * BLOCKS:   IPIPE
 * SIZE:     86
 */
/*
 * These macros can be used to access PORT_LAG_FAILOVER_SET.
 */
#define READ_PORT_LAG_FAILOVER_SETm(u,i,m) bcmbd_cmicx_mem_block_read(u,PORT_LAG_FAILOVER_SETm_BLKACC,1,PORT_LAG_FAILOVER_SETm_OFFSET,i,(m._port_lag_failover_set),3)
#define WRITE_PORT_LAG_FAILOVER_SETm(u,i,m) bcmbd_cmicx_mem_block_write(u,PORT_LAG_FAILOVER_SETm_BLKACC,1,PORT_LAG_FAILOVER_SETm_OFFSET,i,&(m._port_lag_failover_set),3)

/*******************************************************************************
 * End of 'PORT_LAG_FAILOVER_SETm'
 */




/*******************************************************************************
 * MEMORY:  PORT_TAB
 * BLOCKS:   IPIPE
 * SIZE:     191
 */
/*
 * These macros can be used to access PORT_TAB.
 */
#define READ_PORT_TABm(u,i,m) bcmbd_cmicx_mem_block_read(u,PORT_TABm_BLKACC,1,PORT_TABm_OFFSET,i,(m._port_tab),6)
#define WRITE_PORT_TABm(u,i,m) bcmbd_cmicx_mem_block_write(u,PORT_TABm_BLKACC,1,PORT_TABm_OFFSET,i,&(m._port_tab),6)

/*******************************************************************************
 * End of 'PORT_TABm'
 */




/*******************************************************************************
 * REGISTER:  PROTOCOL_PKT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PROTOCOL_PKT_CONTROL.
 */
#define READ_PROTOCOL_PKT_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_read(u,PROTOCOL_PKT_CONTROLr_BLKACC,1,PROTOCOL_PKT_CONTROLr_OFFSET,i,(r._protocol_pkt_control), 1)
#define WRITE_PROTOCOL_PKT_CONTROLr(u,i,r) bcmbd_cmicx_reg_block_write(u,PROTOCOL_PKT_CONTROLr_BLKACC,1,PROTOCOL_PKT_CONTROLr_OFFSET,i,&(r._protocol_pkt_control), 1)

/*******************************************************************************
 * End of 'PROTOCOL_PKT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  PROT_NHI_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PROT_NHI_CONFIG.
 */
#define READ_PROT_NHI_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,PROT_NHI_CONFIGr_BLKACC,1,PROT_NHI_CONFIGr_OFFSET,0,(r._prot_nhi_config), 1)
#define WRITE_PROT_NHI_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,PROT_NHI_CONFIGr_BLKACC,1,PROT_NHI_CONFIGr_OFFSET,0,&(r._prot_nhi_config), 1)

/*******************************************************************************
 * End of 'PROT_NHI_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  PROT_NHI_TABLE_1
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access PROT_NHI_TABLE_1.
 */
#define READ_PROT_NHI_TABLE_1m(u,i,m) bcmbd_cmicx_mem_block_read(u,PROT_NHI_TABLE_1m_BLKACC,1,PROT_NHI_TABLE_1m_OFFSET,i,(m._prot_nhi_table_1),5)
#define WRITE_PROT_NHI_TABLE_1m(u,i,m) bcmbd_cmicx_mem_block_write(u,PROT_NHI_TABLE_1m_BLKACC,1,PROT_NHI_TABLE_1m_OFFSET,i,&(m._prot_nhi_table_1),5)

/*******************************************************************************
 * End of 'PROT_NHI_TABLE_1m'
 */




/*******************************************************************************
 * REGISTER:  PTR_COPYTOCPU_MASK_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PTR_COPYTOCPU_MASK_0.
 */
#define READ_PTR_COPYTOCPU_MASK_0r(u,r) bcmbd_cmicx_reg_block_read(u,PTR_COPYTOCPU_MASK_0r_BLKACC,1,PTR_COPYTOCPU_MASK_0r_OFFSET,0,(r._ptr_copytocpu_mask_0), 2)
#define WRITE_PTR_COPYTOCPU_MASK_0r(u,r) bcmbd_cmicx_reg_block_write(u,PTR_COPYTOCPU_MASK_0r_BLKACC,1,PTR_COPYTOCPU_MASK_0r_OFFSET,0,&(r._ptr_copytocpu_mask_0), 2)

/*******************************************************************************
 * End of 'PTR_COPYTOCPU_MASK_0r'
 */




/*******************************************************************************
 * REGISTER:  PTR_COPYTOCPU_MASK_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PTR_COPYTOCPU_MASK_1.
 */
#define READ_PTR_COPYTOCPU_MASK_1r(u,r) bcmbd_cmicx_reg_block_read(u,PTR_COPYTOCPU_MASK_1r_BLKACC,1,PTR_COPYTOCPU_MASK_1r_OFFSET,0,(r._ptr_copytocpu_mask_1), 2)
#define WRITE_PTR_COPYTOCPU_MASK_1r(u,r) bcmbd_cmicx_reg_block_write(u,PTR_COPYTOCPU_MASK_1r_BLKACC,1,PTR_COPYTOCPU_MASK_1r_OFFSET,0,&(r._ptr_copytocpu_mask_1), 2)

/*******************************************************************************
 * End of 'PTR_COPYTOCPU_MASK_1r'
 */




/*******************************************************************************
 * MEMORY:  PTR_RESULTS_BUFFER_IADAPT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PTR_RESULTS_BUFFER_IADAPT.
 */
#define READ_PTR_RESULTS_BUFFER_IADAPTm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,PTR_RESULTS_BUFFER_IADAPTm_BLKACC,1,n,0,PTR_RESULTS_BUFFER_IADAPTm_OFFSET,i,(m._ptr_results_buffer_iadapt),2)
#define WRITE_PTR_RESULTS_BUFFER_IADAPTm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,PTR_RESULTS_BUFFER_IADAPTm_BLKACC,1,n,0,PTR_RESULTS_BUFFER_IADAPTm_OFFSET,i,&(m._ptr_results_buffer_iadapt),2)
#define WRITE_PTR_RESULTS_BUFFER_IADAPTm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,PTR_RESULTS_BUFFER_IADAPTm_BLKACC,1,-1,0,PTR_RESULTS_BUFFER_IADAPTm_OFFSET,i,&(m._ptr_results_buffer_iadapt),2)

/*******************************************************************************
 * End of 'PTR_RESULTS_BUFFER_IADAPTm'
 */




/*******************************************************************************
 * MEMORY:  PTR_RESULTS_BUFFER_IFWD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PTR_RESULTS_BUFFER_IFWD.
 */
#define READ_PTR_RESULTS_BUFFER_IFWDm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,PTR_RESULTS_BUFFER_IFWDm_BLKACC,1,n,0,PTR_RESULTS_BUFFER_IFWDm_OFFSET,i,(m._ptr_results_buffer_ifwd),2)
#define WRITE_PTR_RESULTS_BUFFER_IFWDm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,PTR_RESULTS_BUFFER_IFWDm_BLKACC,1,n,0,PTR_RESULTS_BUFFER_IFWDm_OFFSET,i,&(m._ptr_results_buffer_ifwd),2)
#define WRITE_PTR_RESULTS_BUFFER_IFWDm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,PTR_RESULTS_BUFFER_IFWDm_BLKACC,1,-1,0,PTR_RESULTS_BUFFER_IFWDm_OFFSET,i,&(m._ptr_results_buffer_ifwd),2)

/*******************************************************************************
 * End of 'PTR_RESULTS_BUFFER_IFWDm'
 */




/*******************************************************************************
 * MEMORY:  PTR_RESULTS_BUFFER_IPARS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PTR_RESULTS_BUFFER_IPARS.
 */
#define READ_PTR_RESULTS_BUFFER_IPARSm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,PTR_RESULTS_BUFFER_IPARSm_BLKACC,1,n,0,PTR_RESULTS_BUFFER_IPARSm_OFFSET,i,(m._ptr_results_buffer_ipars),2)
#define WRITE_PTR_RESULTS_BUFFER_IPARSm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,PTR_RESULTS_BUFFER_IPARSm_BLKACC,1,n,0,PTR_RESULTS_BUFFER_IPARSm_OFFSET,i,&(m._ptr_results_buffer_ipars),2)
#define WRITE_PTR_RESULTS_BUFFER_IPARSm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,PTR_RESULTS_BUFFER_IPARSm_BLKACC,1,-1,0,PTR_RESULTS_BUFFER_IPARSm_OFFSET,i,&(m._ptr_results_buffer_ipars),2)

/*******************************************************************************
 * End of 'PTR_RESULTS_BUFFER_IPARSm'
 */




/*******************************************************************************
 * MEMORY:  PTR_RESULTS_BUFFER_ISW
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PTR_RESULTS_BUFFER_ISW.
 */
#define READ_PTR_RESULTS_BUFFER_ISWm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,PTR_RESULTS_BUFFER_ISWm_BLKACC,1,n,0,PTR_RESULTS_BUFFER_ISWm_OFFSET,i,(m._ptr_results_buffer_isw),2)
#define WRITE_PTR_RESULTS_BUFFER_ISWm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,PTR_RESULTS_BUFFER_ISWm_BLKACC,1,n,0,PTR_RESULTS_BUFFER_ISWm_OFFSET,i,&(m._ptr_results_buffer_isw),2)
#define WRITE_PTR_RESULTS_BUFFER_ISWm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,PTR_RESULTS_BUFFER_ISWm_BLKACC,1,-1,0,PTR_RESULTS_BUFFER_ISWm_OFFSET,i,&(m._ptr_results_buffer_isw),2)

/*******************************************************************************
 * End of 'PTR_RESULTS_BUFFER_ISWm'
 */




/*******************************************************************************
 * REGISTER:  RDBGC0_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC0_64.
 */
#define READ_RDBGC0_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RDBGC0_64r_BLKACC,p,RDBGC0_64r_OFFSET,0,(r._rdbgc0_64), 2)
#define WRITE_RDBGC0_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RDBGC0_64r_BLKACC,p,RDBGC0_64r_OFFSET,0,&(r._rdbgc0_64), 2)

/*******************************************************************************
 * End of 'RDBGC0_64r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC0_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC0_SELECT.
 */
#define READ_RDBGC0_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,RDBGC0_SELECTr_BLKACC,1,RDBGC0_SELECTr_OFFSET,0,(r._rdbgc0_select), 1)
#define WRITE_RDBGC0_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,RDBGC0_SELECTr_BLKACC,1,RDBGC0_SELECTr_OFFSET,0,&(r._rdbgc0_select), 1)

/*******************************************************************************
 * End of 'RDBGC0_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC1_64.
 */
#define READ_RDBGC1_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RDBGC1_64r_BLKACC,p,RDBGC1_64r_OFFSET,0,(r._rdbgc1_64), 2)
#define WRITE_RDBGC1_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RDBGC1_64r_BLKACC,p,RDBGC1_64r_OFFSET,0,&(r._rdbgc1_64), 2)

/*******************************************************************************
 * End of 'RDBGC1_64r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC1_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC1_SELECT.
 */
#define READ_RDBGC1_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,RDBGC1_SELECTr_BLKACC,1,RDBGC1_SELECTr_OFFSET,0,(r._rdbgc1_select), 1)
#define WRITE_RDBGC1_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,RDBGC1_SELECTr_BLKACC,1,RDBGC1_SELECTr_OFFSET,0,&(r._rdbgc1_select), 1)

/*******************************************************************************
 * End of 'RDBGC1_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC2_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC2_64.
 */
#define READ_RDBGC2_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RDBGC2_64r_BLKACC,p,RDBGC2_64r_OFFSET,0,(r._rdbgc2_64), 2)
#define WRITE_RDBGC2_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RDBGC2_64r_BLKACC,p,RDBGC2_64r_OFFSET,0,&(r._rdbgc2_64), 2)

/*******************************************************************************
 * End of 'RDBGC2_64r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC2_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC2_SELECT.
 */
#define READ_RDBGC2_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,RDBGC2_SELECTr_BLKACC,1,RDBGC2_SELECTr_OFFSET,0,(r._rdbgc2_select), 1)
#define WRITE_RDBGC2_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,RDBGC2_SELECTr_BLKACC,1,RDBGC2_SELECTr_OFFSET,0,&(r._rdbgc2_select), 1)

/*******************************************************************************
 * End of 'RDBGC2_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC3_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC3_64.
 */
#define READ_RDBGC3_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RDBGC3_64r_BLKACC,p,RDBGC3_64r_OFFSET,0,(r._rdbgc3_64), 2)
#define WRITE_RDBGC3_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RDBGC3_64r_BLKACC,p,RDBGC3_64r_OFFSET,0,&(r._rdbgc3_64), 2)

/*******************************************************************************
 * End of 'RDBGC3_64r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC3_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC3_SELECT.
 */
#define READ_RDBGC3_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,RDBGC3_SELECTr_BLKACC,1,RDBGC3_SELECTr_OFFSET,0,(r._rdbgc3_select), 1)
#define WRITE_RDBGC3_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,RDBGC3_SELECTr_BLKACC,1,RDBGC3_SELECTr_OFFSET,0,&(r._rdbgc3_select), 1)

/*******************************************************************************
 * End of 'RDBGC3_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC4_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC4_64.
 */
#define READ_RDBGC4_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RDBGC4_64r_BLKACC,p,RDBGC4_64r_OFFSET,0,(r._rdbgc4_64), 2)
#define WRITE_RDBGC4_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RDBGC4_64r_BLKACC,p,RDBGC4_64r_OFFSET,0,&(r._rdbgc4_64), 2)

/*******************************************************************************
 * End of 'RDBGC4_64r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC4_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC4_SELECT.
 */
#define READ_RDBGC4_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,RDBGC4_SELECTr_BLKACC,1,RDBGC4_SELECTr_OFFSET,0,(r._rdbgc4_select), 1)
#define WRITE_RDBGC4_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,RDBGC4_SELECTr_BLKACC,1,RDBGC4_SELECTr_OFFSET,0,&(r._rdbgc4_select), 1)

/*******************************************************************************
 * End of 'RDBGC4_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC5_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC5_64.
 */
#define READ_RDBGC5_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RDBGC5_64r_BLKACC,p,RDBGC5_64r_OFFSET,0,(r._rdbgc5_64), 2)
#define WRITE_RDBGC5_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RDBGC5_64r_BLKACC,p,RDBGC5_64r_OFFSET,0,&(r._rdbgc5_64), 2)

/*******************************************************************************
 * End of 'RDBGC5_64r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC5_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC5_SELECT.
 */
#define READ_RDBGC5_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,RDBGC5_SELECTr_BLKACC,1,RDBGC5_SELECTr_OFFSET,0,(r._rdbgc5_select), 1)
#define WRITE_RDBGC5_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,RDBGC5_SELECTr_BLKACC,1,RDBGC5_SELECTr_OFFSET,0,&(r._rdbgc5_select), 1)

/*******************************************************************************
 * End of 'RDBGC5_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC6_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC6_64.
 */
#define READ_RDBGC6_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RDBGC6_64r_BLKACC,p,RDBGC6_64r_OFFSET,0,(r._rdbgc6_64), 2)
#define WRITE_RDBGC6_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RDBGC6_64r_BLKACC,p,RDBGC6_64r_OFFSET,0,&(r._rdbgc6_64), 2)

/*******************************************************************************
 * End of 'RDBGC6_64r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC6_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC6_SELECT.
 */
#define READ_RDBGC6_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,RDBGC6_SELECTr_BLKACC,1,RDBGC6_SELECTr_OFFSET,0,(r._rdbgc6_select), 1)
#define WRITE_RDBGC6_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,RDBGC6_SELECTr_BLKACC,1,RDBGC6_SELECTr_OFFSET,0,&(r._rdbgc6_select), 1)

/*******************************************************************************
 * End of 'RDBGC6_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC7_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC7_64.
 */
#define READ_RDBGC7_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RDBGC7_64r_BLKACC,p,RDBGC7_64r_OFFSET,0,(r._rdbgc7_64), 2)
#define WRITE_RDBGC7_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RDBGC7_64r_BLKACC,p,RDBGC7_64r_OFFSET,0,&(r._rdbgc7_64), 2)

/*******************************************************************************
 * End of 'RDBGC7_64r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC7_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC7_SELECT.
 */
#define READ_RDBGC7_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,RDBGC7_SELECTr_BLKACC,1,RDBGC7_SELECTr_OFFSET,0,(r._rdbgc7_select), 1)
#define WRITE_RDBGC7_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,RDBGC7_SELECTr_BLKACC,1,RDBGC7_SELECTr_OFFSET,0,&(r._rdbgc7_select), 1)

/*******************************************************************************
 * End of 'RDBGC7_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC8_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC8_64.
 */
#define READ_RDBGC8_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RDBGC8_64r_BLKACC,p,RDBGC8_64r_OFFSET,0,(r._rdbgc8_64), 2)
#define WRITE_RDBGC8_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RDBGC8_64r_BLKACC,p,RDBGC8_64r_OFFSET,0,&(r._rdbgc8_64), 2)

/*******************************************************************************
 * End of 'RDBGC8_64r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC8_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC8_SELECT.
 */
#define READ_RDBGC8_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,RDBGC8_SELECTr_BLKACC,1,RDBGC8_SELECTr_OFFSET,0,(r._rdbgc8_select), 1)
#define WRITE_RDBGC8_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,RDBGC8_SELECTr_BLKACC,1,RDBGC8_SELECTr_OFFSET,0,&(r._rdbgc8_select), 1)

/*******************************************************************************
 * End of 'RDBGC8_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC_SELECT_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC_SELECT_2.
 */
#define READ_RDBGC_SELECT_2r(u,i,r) bcmbd_cmicx_reg_block_read(u,RDBGC_SELECT_2r_BLKACC,1,RDBGC_SELECT_2r_OFFSET,i,(r._rdbgc_select_2), 1)
#define WRITE_RDBGC_SELECT_2r(u,i,r) bcmbd_cmicx_reg_block_write(u,RDBGC_SELECT_2r_BLKACC,1,RDBGC_SELECT_2r_OFFSET,i,&(r._rdbgc_select_2), 1)

/*******************************************************************************
 * End of 'RDBGC_SELECT_2r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC_SELECT_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC_SELECT_3.
 */
#define READ_RDBGC_SELECT_3r(u,i,r) bcmbd_cmicx_reg_block_read(u,RDBGC_SELECT_3r_BLKACC,1,RDBGC_SELECT_3r_OFFSET,i,(r._rdbgc_select_3), 1)
#define WRITE_RDBGC_SELECT_3r(u,i,r) bcmbd_cmicx_reg_block_write(u,RDBGC_SELECT_3r_BLKACC,1,RDBGC_SELECT_3r_OFFSET,i,&(r._rdbgc_select_3), 1)

/*******************************************************************************
 * End of 'RDBGC_SELECT_3r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC_SELECT_4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC_SELECT_4.
 */
#define READ_RDBGC_SELECT_4r(u,i,r) bcmbd_cmicx_reg_block_read(u,RDBGC_SELECT_4r_BLKACC,1,RDBGC_SELECT_4r_OFFSET,i,(r._rdbgc_select_4), 1)
#define WRITE_RDBGC_SELECT_4r(u,i,r) bcmbd_cmicx_reg_block_write(u,RDBGC_SELECT_4r_BLKACC,1,RDBGC_SELECT_4r_OFFSET,i,&(r._rdbgc_select_4), 1)

/*******************************************************************************
 * End of 'RDBGC_SELECT_4r'
 */




/*******************************************************************************
 * REGISTER:  REMOTE_CPU_DA_LS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access REMOTE_CPU_DA_LS.
 */
#define READ_REMOTE_CPU_DA_LSr(u,r) bcmbd_cmicx_reg_block_read(u,REMOTE_CPU_DA_LSr_BLKACC,1,REMOTE_CPU_DA_LSr_OFFSET,0,(r._remote_cpu_da_ls), 1)
#define WRITE_REMOTE_CPU_DA_LSr(u,r) bcmbd_cmicx_reg_block_write(u,REMOTE_CPU_DA_LSr_BLKACC,1,REMOTE_CPU_DA_LSr_OFFSET,0,&(r._remote_cpu_da_ls), 1)

/*******************************************************************************
 * End of 'REMOTE_CPU_DA_LSr'
 */




/*******************************************************************************
 * REGISTER:  REMOTE_CPU_DA_MS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access REMOTE_CPU_DA_MS.
 */
#define READ_REMOTE_CPU_DA_MSr(u,r) bcmbd_cmicx_reg_block_read(u,REMOTE_CPU_DA_MSr_BLKACC,1,REMOTE_CPU_DA_MSr_OFFSET,0,(r._remote_cpu_da_ms), 1)
#define WRITE_REMOTE_CPU_DA_MSr(u,r) bcmbd_cmicx_reg_block_write(u,REMOTE_CPU_DA_MSr_BLKACC,1,REMOTE_CPU_DA_MSr_OFFSET,0,&(r._remote_cpu_da_ms), 1)

/*******************************************************************************
 * End of 'REMOTE_CPU_DA_MSr'
 */




/*******************************************************************************
 * REGISTER:  REMOTE_CPU_LENGTH_TYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access REMOTE_CPU_LENGTH_TYPE.
 */
#define READ_REMOTE_CPU_LENGTH_TYPEr(u,r) bcmbd_cmicx_reg_block_read(u,REMOTE_CPU_LENGTH_TYPEr_BLKACC,1,REMOTE_CPU_LENGTH_TYPEr_OFFSET,0,(r._remote_cpu_length_type), 1)
#define WRITE_REMOTE_CPU_LENGTH_TYPEr(u,r) bcmbd_cmicx_reg_block_write(u,REMOTE_CPU_LENGTH_TYPEr_BLKACC,1,REMOTE_CPU_LENGTH_TYPEr_OFFSET,0,&(r._remote_cpu_length_type), 1)

/*******************************************************************************
 * End of 'REMOTE_CPU_LENGTH_TYPEr'
 */




/*******************************************************************************
 * MEMORY:  REQ_VECTOR_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     111
 */
/*
 * These macros can be used to access REQ_VECTOR_CONFIG.
 */
#define READ_REQ_VECTOR_CONFIGm(u,i,m) bcmbd_cmicx_mem_block_read(u,REQ_VECTOR_CONFIGm_BLKACC,1,REQ_VECTOR_CONFIGm_OFFSET,i,(m._req_vector_config),4)
#define WRITE_REQ_VECTOR_CONFIGm(u,i,m) bcmbd_cmicx_mem_block_write(u,REQ_VECTOR_CONFIGm_BLKACC,1,REQ_VECTOR_CONFIGm_OFFSET,i,&(m._req_vector_config),4)

/*******************************************************************************
 * End of 'REQ_VECTOR_CONFIGm'
 */




/*******************************************************************************
 * REGISTER:  REQ_VECTOR_MATCH_POLICY
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access REQ_VECTOR_MATCH_POLICY.
 */
#define READ_REQ_VECTOR_MATCH_POLICYr(u,r) bcmbd_cmicx_reg_block_read(u,REQ_VECTOR_MATCH_POLICYr_BLKACC,1,REQ_VECTOR_MATCH_POLICYr_OFFSET,0,(r._req_vector_match_policy), 1)
#define WRITE_REQ_VECTOR_MATCH_POLICYr(u,r) bcmbd_cmicx_reg_block_write(u,REQ_VECTOR_MATCH_POLICYr_BLKACC,1,REQ_VECTOR_MATCH_POLICYr_OFFSET,0,&(r._req_vector_match_policy), 1)

/*******************************************************************************
 * End of 'REQ_VECTOR_MATCH_POLICYr'
 */




/*******************************************************************************
 * MEMORY:  RESPONSIVE_PROTOCOL_MATCH
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RESPONSIVE_PROTOCOL_MATCH.
 */
#define READ_RESPONSIVE_PROTOCOL_MATCHm(u,i,m) bcmbd_cmicx_mem_block_read(u,RESPONSIVE_PROTOCOL_MATCHm_BLKACC,1,RESPONSIVE_PROTOCOL_MATCHm_OFFSET,i,(m._responsive_protocol_match),2)
#define WRITE_RESPONSIVE_PROTOCOL_MATCHm(u,i,m) bcmbd_cmicx_mem_block_write(u,RESPONSIVE_PROTOCOL_MATCHm_BLKACC,1,RESPONSIVE_PROTOCOL_MATCHm_OFFSET,i,&(m._responsive_protocol_match),2)

/*******************************************************************************
 * End of 'RESPONSIVE_PROTOCOL_MATCHm'
 */




/*******************************************************************************
 * REGISTER:  RIPC4_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RIPC4_64.
 */
#define READ_RIPC4_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RIPC4_64r_BLKACC,p,RIPC4_64r_OFFSET,0,(r._ripc4_64), 2)
#define WRITE_RIPC4_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RIPC4_64r_BLKACC,p,RIPC4_64r_OFFSET,0,&(r._ripc4_64), 2)

/*******************************************************************************
 * End of 'RIPC4_64r'
 */




/*******************************************************************************
 * REGISTER:  RIPC6_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RIPC6_64.
 */
#define READ_RIPC6_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RIPC6_64r_BLKACC,p,RIPC6_64r_OFFSET,0,(r._ripc6_64), 2)
#define WRITE_RIPC6_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RIPC6_64r_BLKACC,p,RIPC6_64r_OFFSET,0,&(r._ripc6_64), 2)

/*******************************************************************************
 * End of 'RIPC6_64r'
 */




/*******************************************************************************
 * REGISTER:  RIPD4_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RIPD4_64.
 */
#define READ_RIPD4_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RIPD4_64r_BLKACC,p,RIPD4_64r_OFFSET,0,(r._ripd4_64), 2)
#define WRITE_RIPD4_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RIPD4_64r_BLKACC,p,RIPD4_64r_OFFSET,0,&(r._ripd4_64), 2)

/*******************************************************************************
 * End of 'RIPD4_64r'
 */




/*******************************************************************************
 * REGISTER:  RIPD6_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RIPD6_64.
 */
#define READ_RIPD6_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RIPD6_64r_BLKACC,p,RIPD6_64r_OFFSET,0,(r._ripd6_64), 2)
#define WRITE_RIPD6_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RIPD6_64r_BLKACC,p,RIPD6_64r_OFFSET,0,&(r._ripd6_64), 2)

/*******************************************************************************
 * End of 'RIPD6_64r'
 */




/*******************************************************************************
 * REGISTER:  RIPHE4_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RIPHE4_64.
 */
#define READ_RIPHE4_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RIPHE4_64r_BLKACC,p,RIPHE4_64r_OFFSET,0,(r._riphe4_64), 2)
#define WRITE_RIPHE4_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RIPHE4_64r_BLKACC,p,RIPHE4_64r_OFFSET,0,&(r._riphe4_64), 2)

/*******************************************************************************
 * End of 'RIPHE4_64r'
 */




/*******************************************************************************
 * REGISTER:  RIPHE6_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RIPHE6_64.
 */
#define READ_RIPHE6_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RIPHE6_64r_BLKACC,p,RIPHE6_64r_OFFSET,0,(r._riphe6_64), 2)
#define WRITE_RIPHE6_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RIPHE6_64r_BLKACC,p,RIPHE6_64r_OFFSET,0,&(r._riphe6_64), 2)

/*******************************************************************************
 * End of 'RIPHE6_64r'
 */




/*******************************************************************************
 * REGISTER:  RPORTD_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RPORTD_64.
 */
#define READ_RPORTD_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RPORTD_64r_BLKACC,p,RPORTD_64r_OFFSET,0,(r._rportd_64), 2)
#define WRITE_RPORTD_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RPORTD_64r_BLKACC,p,RPORTD_64r_OFFSET,0,&(r._rportd_64), 2)

/*******************************************************************************
 * End of 'RPORTD_64r'
 */




/*******************************************************************************
 * REGISTER:  RSEL_RAM_DBGCTRL_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RSEL_RAM_DBGCTRL_64.
 */
#define READ_RSEL_RAM_DBGCTRL_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,RSEL_RAM_DBGCTRL_64r_BLKACC,1,n,0,RSEL_RAM_DBGCTRL_64r_OFFSET,0,(r._rsel_ram_dbgctrl_64),2)
#define WRITE_RSEL_RAM_DBGCTRL_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,RSEL_RAM_DBGCTRL_64r_BLKACC,1,n,0,RSEL_RAM_DBGCTRL_64r_OFFSET,0,&(r._rsel_ram_dbgctrl_64),2)
#define WRITE_RSEL_RAM_DBGCTRL_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,RSEL_RAM_DBGCTRL_64r_BLKACC,1,-1,0,RSEL_RAM_DBGCTRL_64r_OFFSET,0,&(r._rsel_ram_dbgctrl_64),2)

/*******************************************************************************
 * End of 'RSEL_RAM_DBGCTRL_64r'
 */




/*******************************************************************************
 * MEMORY:  RSFEC_SYMBOL_ERROR_MIB
 * BLOCKS:   CDPORT
 * SIZE:     128
 */
/*
 * These macros can be used to access RSFEC_SYMBOL_ERROR_MIB.
 */
#define READ_RSFEC_SYMBOL_ERROR_MIBm(u,i,m,p) bcmbd_cmicx_mem_blocks_read(u,RSFEC_SYMBOL_ERROR_MIBm_BLKACC,p,RSFEC_SYMBOL_ERROR_MIBm_OFFSET,i,(m._rsfec_symbol_error_mib),4)
#define WRITE_RSFEC_SYMBOL_ERROR_MIBm(u,i,m,p) bcmbd_cmicx_mem_blocks_write(u,RSFEC_SYMBOL_ERROR_MIBm_BLKACC,p,RSFEC_SYMBOL_ERROR_MIBm_OFFSET,i,&(m._rsfec_symbol_error_mib),4)

/*******************************************************************************
 * End of 'RSFEC_SYMBOL_ERROR_MIBm'
 */




/*******************************************************************************
 * MEMORY:  RTAG7_FLOW_BASED_HASH
 * BLOCKS:   IPIPE
 * SIZE:     57
 */
/*
 * These macros can be used to access RTAG7_FLOW_BASED_HASH.
 */
#define READ_RTAG7_FLOW_BASED_HASHm(u,i,m) bcmbd_cmicx_mem_block_read(u,RTAG7_FLOW_BASED_HASHm_BLKACC,1,RTAG7_FLOW_BASED_HASHm_OFFSET,i,(m._rtag7_flow_based_hash),2)
#define WRITE_RTAG7_FLOW_BASED_HASHm(u,i,m) bcmbd_cmicx_mem_block_write(u,RTAG7_FLOW_BASED_HASHm_BLKACC,1,RTAG7_FLOW_BASED_HASHm_OFFSET,i,&(m._rtag7_flow_based_hash),2)

/*******************************************************************************
 * End of 'RTAG7_FLOW_BASED_HASHm'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RTAG7_HASH_CONTROL.
 */
#define READ_RTAG7_HASH_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_HASH_CONTROLr_BLKACC,1,RTAG7_HASH_CONTROLr_OFFSET,0,(r._rtag7_hash_control), 2)
#define WRITE_RTAG7_HASH_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_HASH_CONTROLr_BLKACC,1,RTAG7_HASH_CONTROLr_OFFSET,0,&(r._rtag7_hash_control), 2)

/*******************************************************************************
 * End of 'RTAG7_HASH_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_CONTROL_2.
 */
#define READ_RTAG7_HASH_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_HASH_CONTROL_2r_BLKACC,1,RTAG7_HASH_CONTROL_2r_OFFSET,0,(r._rtag7_hash_control_2), 1)
#define WRITE_RTAG7_HASH_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_HASH_CONTROL_2r_BLKACC,1,RTAG7_HASH_CONTROL_2r_OFFSET,0,&(r._rtag7_hash_control_2), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_CONTROL_3_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RTAG7_HASH_CONTROL_3_64.
 */
#define READ_RTAG7_HASH_CONTROL_3_64r(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_HASH_CONTROL_3_64r_BLKACC,1,RTAG7_HASH_CONTROL_3_64r_OFFSET,0,(r._rtag7_hash_control_3_64), 2)
#define WRITE_RTAG7_HASH_CONTROL_3_64r(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_HASH_CONTROL_3_64r_BLKACC,1,RTAG7_HASH_CONTROL_3_64r_OFFSET,0,&(r._rtag7_hash_control_3_64), 2)

/*******************************************************************************
 * End of 'RTAG7_HASH_CONTROL_3_64r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_CONTROL_4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_CONTROL_4.
 */
#define READ_RTAG7_HASH_CONTROL_4r(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_HASH_CONTROL_4r_BLKACC,1,RTAG7_HASH_CONTROL_4r_OFFSET,0,(r._rtag7_hash_control_4), 1)
#define WRITE_RTAG7_HASH_CONTROL_4r(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_HASH_CONTROL_4r_BLKACC,1,RTAG7_HASH_CONTROL_4r_OFFSET,0,&(r._rtag7_hash_control_4), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_CONTROL_L2GRE_MASK_A
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_CONTROL_L2GRE_MASK_A.
 */
#define READ_RTAG7_HASH_CONTROL_L2GRE_MASK_Ar(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_HASH_CONTROL_L2GRE_MASK_Ar_BLKACC,1,RTAG7_HASH_CONTROL_L2GRE_MASK_Ar_OFFSET,0,(r._rtag7_hash_control_l2gre_mask_a), 1)
#define WRITE_RTAG7_HASH_CONTROL_L2GRE_MASK_Ar(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_HASH_CONTROL_L2GRE_MASK_Ar_BLKACC,1,RTAG7_HASH_CONTROL_L2GRE_MASK_Ar_OFFSET,0,&(r._rtag7_hash_control_l2gre_mask_a), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_CONTROL_L2GRE_MASK_Ar'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_CONTROL_L2GRE_MASK_B
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_CONTROL_L2GRE_MASK_B.
 */
#define READ_RTAG7_HASH_CONTROL_L2GRE_MASK_Br(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_HASH_CONTROL_L2GRE_MASK_Br_BLKACC,1,RTAG7_HASH_CONTROL_L2GRE_MASK_Br_OFFSET,0,(r._rtag7_hash_control_l2gre_mask_b), 1)
#define WRITE_RTAG7_HASH_CONTROL_L2GRE_MASK_Br(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_HASH_CONTROL_L2GRE_MASK_Br_BLKACC,1,RTAG7_HASH_CONTROL_L2GRE_MASK_Br_OFFSET,0,&(r._rtag7_hash_control_l2gre_mask_b), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_CONTROL_L2GRE_MASK_Br'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_FIELD_BMAP_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_FIELD_BMAP_1.
 */
#define READ_RTAG7_HASH_FIELD_BMAP_1r(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_HASH_FIELD_BMAP_1r_BLKACC,1,RTAG7_HASH_FIELD_BMAP_1r_OFFSET,0,(r._rtag7_hash_field_bmap_1), 1)
#define WRITE_RTAG7_HASH_FIELD_BMAP_1r(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_HASH_FIELD_BMAP_1r_BLKACC,1,RTAG7_HASH_FIELD_BMAP_1r_OFFSET,0,&(r._rtag7_hash_field_bmap_1), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_FIELD_BMAP_1r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_FIELD_BMAP_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_FIELD_BMAP_2.
 */
#define READ_RTAG7_HASH_FIELD_BMAP_2r(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_HASH_FIELD_BMAP_2r_BLKACC,1,RTAG7_HASH_FIELD_BMAP_2r_OFFSET,0,(r._rtag7_hash_field_bmap_2), 1)
#define WRITE_RTAG7_HASH_FIELD_BMAP_2r(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_HASH_FIELD_BMAP_2r_BLKACC,1,RTAG7_HASH_FIELD_BMAP_2r_OFFSET,0,&(r._rtag7_hash_field_bmap_2), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_FIELD_BMAP_2r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_FIELD_BMAP_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_FIELD_BMAP_3.
 */
#define READ_RTAG7_HASH_FIELD_BMAP_3r(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_HASH_FIELD_BMAP_3r_BLKACC,1,RTAG7_HASH_FIELD_BMAP_3r_OFFSET,0,(r._rtag7_hash_field_bmap_3), 1)
#define WRITE_RTAG7_HASH_FIELD_BMAP_3r(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_HASH_FIELD_BMAP_3r_BLKACC,1,RTAG7_HASH_FIELD_BMAP_3r_OFFSET,0,&(r._rtag7_hash_field_bmap_3), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_FIELD_BMAP_3r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_SEED_A
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_SEED_A.
 */
#define READ_RTAG7_HASH_SEED_Ar(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,RTAG7_HASH_SEED_Ar_BLKACC,1,n,0,RTAG7_HASH_SEED_Ar_OFFSET,0,(r._rtag7_hash_seed_a),1)
#define WRITE_RTAG7_HASH_SEED_Ar(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,RTAG7_HASH_SEED_Ar_BLKACC,1,n,0,RTAG7_HASH_SEED_Ar_OFFSET,0,&(r._rtag7_hash_seed_a),1)
#define WRITE_RTAG7_HASH_SEED_Ar_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,RTAG7_HASH_SEED_Ar_BLKACC,1,-1,0,RTAG7_HASH_SEED_Ar_OFFSET,0,&(r._rtag7_hash_seed_a),1)

/*******************************************************************************
 * End of 'RTAG7_HASH_SEED_Ar'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_SEED_B
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_SEED_B.
 */
#define READ_RTAG7_HASH_SEED_Br(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,RTAG7_HASH_SEED_Br_BLKACC,1,n,0,RTAG7_HASH_SEED_Br_OFFSET,0,(r._rtag7_hash_seed_b),1)
#define WRITE_RTAG7_HASH_SEED_Br(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,RTAG7_HASH_SEED_Br_BLKACC,1,n,0,RTAG7_HASH_SEED_Br_OFFSET,0,&(r._rtag7_hash_seed_b),1)
#define WRITE_RTAG7_HASH_SEED_Br_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,RTAG7_HASH_SEED_Br_BLKACC,1,-1,0,RTAG7_HASH_SEED_Br_OFFSET,0,&(r._rtag7_hash_seed_b),1)

/*******************************************************************************
 * End of 'RTAG7_HASH_SEED_Br'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_SEL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_SEL.
 */
#define READ_RTAG7_HASH_SELr(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_HASH_SELr_BLKACC,1,RTAG7_HASH_SELr_OFFSET,0,(r._rtag7_hash_sel), 1)
#define WRITE_RTAG7_HASH_SELr(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_HASH_SELr_BLKACC,1,RTAG7_HASH_SELr_OFFSET,0,&(r._rtag7_hash_sel), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_SELr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_VH_INITIALIZE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RTAG7_HASH_VH_INITIALIZE.
 */
#define READ_RTAG7_HASH_VH_INITIALIZEr(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_HASH_VH_INITIALIZEr_BLKACC,1,RTAG7_HASH_VH_INITIALIZEr_OFFSET,0,(r._rtag7_hash_vh_initialize), 2)
#define WRITE_RTAG7_HASH_VH_INITIALIZEr(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_HASH_VH_INITIALIZEr_BLKACC,1,RTAG7_HASH_VH_INITIALIZEr_OFFSET,0,&(r._rtag7_hash_vh_initialize), 2)

/*******************************************************************************
 * End of 'RTAG7_HASH_VH_INITIALIZEr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1.
 */
#define READ_RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1r(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1r_BLKACC,1,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1r_OFFSET,0,(r._rtag7_ipv4_tcp_udp_hash_field_bmap_1), 1)
#define WRITE_RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1r(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1r_BLKACC,1,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1r_OFFSET,0,&(r._rtag7_ipv4_tcp_udp_hash_field_bmap_1), 1)

/*******************************************************************************
 * End of 'RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2.
 */
#define READ_RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2r(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2r_BLKACC,1,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2r_OFFSET,0,(r._rtag7_ipv4_tcp_udp_hash_field_bmap_2), 1)
#define WRITE_RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2r(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2r_BLKACC,1,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2r_OFFSET,0,&(r._rtag7_ipv4_tcp_udp_hash_field_bmap_2), 1)

/*******************************************************************************
 * End of 'RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1.
 */
#define READ_RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1r(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1r_BLKACC,1,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1r_OFFSET,0,(r._rtag7_ipv6_tcp_udp_hash_field_bmap_1), 1)
#define WRITE_RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1r(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1r_BLKACC,1,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1r_OFFSET,0,&(r._rtag7_ipv6_tcp_udp_hash_field_bmap_1), 1)

/*******************************************************************************
 * End of 'RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2.
 */
#define READ_RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2r(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2r_BLKACC,1,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2r_OFFSET,0,(r._rtag7_ipv6_tcp_udp_hash_field_bmap_2), 1)
#define WRITE_RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2r(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2r_BLKACC,1,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2r_OFFSET,0,&(r._rtag7_ipv6_tcp_udp_hash_field_bmap_2), 1)

/*******************************************************************************
 * End of 'RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAPr(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_mpls_l3_payload_hash_field_bmap), 1)
#define WRITE_RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAPr(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_mpls_l3_payload_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_MPLS_OUTER_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_MPLS_OUTER_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_MPLS_OUTER_HASH_FIELD_BMAPr(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_MPLS_OUTER_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MPLS_OUTER_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_mpls_outer_hash_field_bmap), 1)
#define WRITE_RTAG7_MPLS_OUTER_HASH_FIELD_BMAPr(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_MPLS_OUTER_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MPLS_OUTER_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_mpls_outer_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_MPLS_OUTER_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_MPLS_OUTER_HASH_FIELD_BMAP_EXTENDED
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_MPLS_OUTER_HASH_FIELD_BMAP_EXTENDED.
 */
#define READ_RTAG7_MPLS_OUTER_HASH_FIELD_BMAP_EXTENDEDr(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_MPLS_OUTER_HASH_FIELD_BMAP_EXTENDEDr_BLKACC,1,RTAG7_MPLS_OUTER_HASH_FIELD_BMAP_EXTENDEDr_OFFSET,0,(r._rtag7_mpls_outer_hash_field_bmap_extended), 1)
#define WRITE_RTAG7_MPLS_OUTER_HASH_FIELD_BMAP_EXTENDEDr(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_MPLS_OUTER_HASH_FIELD_BMAP_EXTENDEDr_BLKACC,1,RTAG7_MPLS_OUTER_HASH_FIELD_BMAP_EXTENDEDr_OFFSET,0,&(r._rtag7_mpls_outer_hash_field_bmap_extended), 1)

/*******************************************************************************
 * End of 'RTAG7_MPLS_OUTER_HASH_FIELD_BMAP_EXTENDEDr'
 */




/*******************************************************************************
 * MEMORY:  RTAG7_PORT_BASED_HASH
 * BLOCKS:   IPIPE
 * SIZE:     108
 */
/*
 * These macros can be used to access RTAG7_PORT_BASED_HASH.
 */
#define READ_RTAG7_PORT_BASED_HASHm(u,i,m) bcmbd_cmicx_mem_block_read(u,RTAG7_PORT_BASED_HASHm_BLKACC,1,RTAG7_PORT_BASED_HASHm_OFFSET,i,(m._rtag7_port_based_hash),4)
#define WRITE_RTAG7_PORT_BASED_HASHm(u,i,m) bcmbd_cmicx_mem_block_write(u,RTAG7_PORT_BASED_HASHm_BLKACC,1,RTAG7_PORT_BASED_HASHm_OFFSET,i,&(m._rtag7_port_based_hash),4)

/*******************************************************************************
 * End of 'RTAG7_PORT_BASED_HASHm'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAPr(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_vxlan_payload_l2_hash_field_bmap), 1)
#define WRITE_RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAPr(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_vxlan_payload_l2_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAPr(u,r) bcmbd_cmicx_reg_block_read(u,RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_vxlan_payload_l3_hash_field_bmap), 1)
#define WRITE_RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAPr(u,r) bcmbd_cmicx_reg_block_write(u,RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_vxlan_payload_l3_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTUN_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RTUN_64.
 */
#define READ_RTUN_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RTUN_64r_BLKACC,p,RTUN_64r_OFFSET,0,(r._rtun_64), 2)
#define WRITE_RTUN_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RTUN_64r_BLKACC,p,RTUN_64r_OFFSET,0,&(r._rtun_64), 2)

/*******************************************************************************
 * End of 'RTUN_64r'
 */




/*******************************************************************************
 * REGISTER:  RUC_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RUC_64.
 */
#define READ_RUC_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,RUC_64r_BLKACC,p,RUC_64r_OFFSET,0,(r._ruc_64), 2)
#define WRITE_RUC_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,RUC_64r_BLKACC,p,RUC_64r_OFFSET,0,&(r._ruc_64), 2)

/*******************************************************************************
 * End of 'RUC_64r'
 */




/*******************************************************************************
 * MEMORY:  RX_FDR_CONTROL
 * BLOCKS:   CDPORT
 * SIZE:     20
 */
/*
 * These macros can be used to access RX_FDR_CONTROL.
 */
#define READ_RX_FDR_CONTROLm(u,i,m,p) bcmbd_cmicx_mem_blocks_read(u,RX_FDR_CONTROLm_BLKACC,p,RX_FDR_CONTROLm_OFFSET,i,(m._rx_fdr_control),1)
#define WRITE_RX_FDR_CONTROLm(u,i,m,p) bcmbd_cmicx_mem_blocks_write(u,RX_FDR_CONTROLm_BLKACC,p,RX_FDR_CONTROLm_OFFSET,i,&(m._rx_fdr_control),1)

/*******************************************************************************
 * End of 'RX_FDR_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  RX_FDR_STATUS
 * BLOCKS:   CDPORT
 * SIZE:     424
 */
/*
 * These macros can be used to access RX_FDR_STATUS.
 */
#define READ_RX_FDR_STATUSm(u,i,m,p) bcmbd_cmicx_mem_blocks_read(u,RX_FDR_STATUSm_BLKACC,p,RX_FDR_STATUSm_OFFSET,i,(m._rx_fdr_status),14)
#define WRITE_RX_FDR_STATUSm(u,i,m,p) bcmbd_cmicx_mem_blocks_write(u,RX_FDR_STATUSm_BLKACC,p,RX_FDR_STATUSm_OFFSET,i,&(m._rx_fdr_status),14)

/*******************************************************************************
 * End of 'RX_FDR_STATUSm'
 */




/*******************************************************************************
 * MEMORY:  RX_LKUP_1588_MEM_MPP0
 * BLOCKS:   CDPORT
 * SIZE:     80
 */
/*
 * These macros can be used to access RX_LKUP_1588_MEM_MPP0.
 */
#define READ_RX_LKUP_1588_MEM_MPP0m(u,i,m,p) bcmbd_cmicx_mem_blocks_read(u,RX_LKUP_1588_MEM_MPP0m_BLKACC,p,RX_LKUP_1588_MEM_MPP0m_OFFSET,i,(m._rx_lkup_1588_mem_mpp0),3)
#define WRITE_RX_LKUP_1588_MEM_MPP0m(u,i,m,p) bcmbd_cmicx_mem_blocks_write(u,RX_LKUP_1588_MEM_MPP0m_BLKACC,p,RX_LKUP_1588_MEM_MPP0m_OFFSET,i,&(m._rx_lkup_1588_mem_mpp0),3)

/*******************************************************************************
 * End of 'RX_LKUP_1588_MEM_MPP0m'
 */




/*******************************************************************************
 * MEMORY:  RX_LKUP_1588_MEM_MPP1
 * BLOCKS:   CDPORT
 * SIZE:     80
 */
/*
 * These macros can be used to access RX_LKUP_1588_MEM_MPP1.
 */
#define READ_RX_LKUP_1588_MEM_MPP1m(u,i,m,p) bcmbd_cmicx_mem_blocks_read(u,RX_LKUP_1588_MEM_MPP1m_BLKACC,p,RX_LKUP_1588_MEM_MPP1m_OFFSET,i,(m._rx_lkup_1588_mem_mpp1),3)
#define WRITE_RX_LKUP_1588_MEM_MPP1m(u,i,m,p) bcmbd_cmicx_mem_blocks_write(u,RX_LKUP_1588_MEM_MPP1m_BLKACC,p,RX_LKUP_1588_MEM_MPP1m_OFFSET,i,&(m._rx_lkup_1588_mem_mpp1),3)

/*******************************************************************************
 * End of 'RX_LKUP_1588_MEM_MPP1m'
 */




/*******************************************************************************
 * REGISTER:  SBS_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SBS_CONTROL.
 */
#define READ_SBS_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,SBS_CONTROLr_BLKACC,1,SBS_CONTROLr_OFFSET,0,(r._sbs_control), 1)
#define WRITE_SBS_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,SBS_CONTROLr_BLKACC,1,SBS_CONTROLr_OFFSET,0,&(r._sbs_control), 1)

/*******************************************************************************
 * End of 'SBS_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  SFLOW_EGR_RAND_SEED_INST0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SFLOW_EGR_RAND_SEED_INST0.
 */
#define READ_SFLOW_EGR_RAND_SEED_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,SFLOW_EGR_RAND_SEED_INST0r_BLKACC,1,n,0,SFLOW_EGR_RAND_SEED_INST0r_OFFSET,0,(r._sflow_egr_rand_seed_inst0),2)
#define WRITE_SFLOW_EGR_RAND_SEED_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,SFLOW_EGR_RAND_SEED_INST0r_BLKACC,1,n,0,SFLOW_EGR_RAND_SEED_INST0r_OFFSET,0,&(r._sflow_egr_rand_seed_inst0),2)
#define WRITE_SFLOW_EGR_RAND_SEED_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,SFLOW_EGR_RAND_SEED_INST0r_BLKACC,1,-1,0,SFLOW_EGR_RAND_SEED_INST0r_OFFSET,0,&(r._sflow_egr_rand_seed_inst0),2)

/*******************************************************************************
 * End of 'SFLOW_EGR_RAND_SEED_INST0r'
 */




/*******************************************************************************
 * REGISTER:  SFLOW_EGR_RAND_SEED_INST1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SFLOW_EGR_RAND_SEED_INST1.
 */
#define READ_SFLOW_EGR_RAND_SEED_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,SFLOW_EGR_RAND_SEED_INST1r_BLKACC,1,n,0,SFLOW_EGR_RAND_SEED_INST1r_OFFSET,0,(r._sflow_egr_rand_seed_inst1),2)
#define WRITE_SFLOW_EGR_RAND_SEED_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,SFLOW_EGR_RAND_SEED_INST1r_BLKACC,1,n,0,SFLOW_EGR_RAND_SEED_INST1r_OFFSET,0,&(r._sflow_egr_rand_seed_inst1),2)
#define WRITE_SFLOW_EGR_RAND_SEED_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,SFLOW_EGR_RAND_SEED_INST1r_BLKACC,1,-1,0,SFLOW_EGR_RAND_SEED_INST1r_OFFSET,0,&(r._sflow_egr_rand_seed_inst1),2)

/*******************************************************************************
 * End of 'SFLOW_EGR_RAND_SEED_INST1r'
 */




/*******************************************************************************
 * REGISTER:  SFLOW_EGR_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SFLOW_EGR_THRESHOLD.
 */
#define READ_SFLOW_EGR_THRESHOLDr(u,p,r) bcmbd_cmicx_reg_port_read(u,SFLOW_EGR_THRESHOLDr_BLKACC,p,SFLOW_EGR_THRESHOLDr_OFFSET,0,(r._sflow_egr_threshold), 2)
#define WRITE_SFLOW_EGR_THRESHOLDr(u,p,r) bcmbd_cmicx_reg_port_write(u,SFLOW_EGR_THRESHOLDr_BLKACC,p,SFLOW_EGR_THRESHOLDr_OFFSET,0,&(r._sflow_egr_threshold), 2)

/*******************************************************************************
 * End of 'SFLOW_EGR_THRESHOLDr'
 */




/*******************************************************************************
 * MEMORY:  SFLOW_ING_DATA_SOURCE
 * BLOCKS:   IPIPE
 * SIZE:     140
 */
/*
 * These macros can be used to access SFLOW_ING_DATA_SOURCE.
 */
#define READ_SFLOW_ING_DATA_SOURCEm(u,i,m) bcmbd_cmicx_mem_block_read(u,SFLOW_ING_DATA_SOURCEm_BLKACC,1,SFLOW_ING_DATA_SOURCEm_OFFSET,i,(m._sflow_ing_data_source),5)
#define WRITE_SFLOW_ING_DATA_SOURCEm(u,i,m) bcmbd_cmicx_mem_block_write(u,SFLOW_ING_DATA_SOURCEm_BLKACC,1,SFLOW_ING_DATA_SOURCEm_OFFSET,i,&(m._sflow_ing_data_source),5)

/*******************************************************************************
 * End of 'SFLOW_ING_DATA_SOURCEm'
 */




/*******************************************************************************
 * MEMORY:  SFLOW_ING_FLEX_DATA_SOURCE_INST0
 * BLOCKS:   IPIPE
 * SIZE:     140
 */
/*
 * These macros can be used to access SFLOW_ING_FLEX_DATA_SOURCE_INST0.
 */
#define READ_SFLOW_ING_FLEX_DATA_SOURCE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,SFLOW_ING_FLEX_DATA_SOURCE_INST0m_BLKACC,1,n,0,SFLOW_ING_FLEX_DATA_SOURCE_INST0m_OFFSET,i,(m._sflow_ing_flex_data_source_inst0),5)
#define WRITE_SFLOW_ING_FLEX_DATA_SOURCE_INST0m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,SFLOW_ING_FLEX_DATA_SOURCE_INST0m_BLKACC,1,n,0,SFLOW_ING_FLEX_DATA_SOURCE_INST0m_OFFSET,i,&(m._sflow_ing_flex_data_source_inst0),5)
#define WRITE_SFLOW_ING_FLEX_DATA_SOURCE_INST0m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,SFLOW_ING_FLEX_DATA_SOURCE_INST0m_BLKACC,1,-1,0,SFLOW_ING_FLEX_DATA_SOURCE_INST0m_OFFSET,i,&(m._sflow_ing_flex_data_source_inst0),5)

/*******************************************************************************
 * End of 'SFLOW_ING_FLEX_DATA_SOURCE_INST0m'
 */




/*******************************************************************************
 * MEMORY:  SFLOW_ING_FLEX_DATA_SOURCE_INST1
 * BLOCKS:   IPIPE
 * SIZE:     140
 */
/*
 * These macros can be used to access SFLOW_ING_FLEX_DATA_SOURCE_INST1.
 */
#define READ_SFLOW_ING_FLEX_DATA_SOURCE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,SFLOW_ING_FLEX_DATA_SOURCE_INST1m_BLKACC,1,n,0,SFLOW_ING_FLEX_DATA_SOURCE_INST1m_OFFSET,i,(m._sflow_ing_flex_data_source_inst1),5)
#define WRITE_SFLOW_ING_FLEX_DATA_SOURCE_INST1m(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,SFLOW_ING_FLEX_DATA_SOURCE_INST1m_BLKACC,1,n,0,SFLOW_ING_FLEX_DATA_SOURCE_INST1m_OFFSET,i,&(m._sflow_ing_flex_data_source_inst1),5)
#define WRITE_SFLOW_ING_FLEX_DATA_SOURCE_INST1m_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,SFLOW_ING_FLEX_DATA_SOURCE_INST1m_BLKACC,1,-1,0,SFLOW_ING_FLEX_DATA_SOURCE_INST1m_OFFSET,i,&(m._sflow_ing_flex_data_source_inst1),5)

/*******************************************************************************
 * End of 'SFLOW_ING_FLEX_DATA_SOURCE_INST1m'
 */




/*******************************************************************************
 * REGISTER:  SFLOW_ING_FLEX_RAND_SEED_INST0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SFLOW_ING_FLEX_RAND_SEED_INST0.
 */
#define READ_SFLOW_ING_FLEX_RAND_SEED_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,SFLOW_ING_FLEX_RAND_SEED_INST0r_BLKACC,1,n,0,SFLOW_ING_FLEX_RAND_SEED_INST0r_OFFSET,0,(r._sflow_ing_flex_rand_seed_inst0),2)
#define WRITE_SFLOW_ING_FLEX_RAND_SEED_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,SFLOW_ING_FLEX_RAND_SEED_INST0r_BLKACC,1,n,0,SFLOW_ING_FLEX_RAND_SEED_INST0r_OFFSET,0,&(r._sflow_ing_flex_rand_seed_inst0),2)
#define WRITE_SFLOW_ING_FLEX_RAND_SEED_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,SFLOW_ING_FLEX_RAND_SEED_INST0r_BLKACC,1,-1,0,SFLOW_ING_FLEX_RAND_SEED_INST0r_OFFSET,0,&(r._sflow_ing_flex_rand_seed_inst0),2)

/*******************************************************************************
 * End of 'SFLOW_ING_FLEX_RAND_SEED_INST0r'
 */




/*******************************************************************************
 * REGISTER:  SFLOW_ING_FLEX_RAND_SEED_INST1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SFLOW_ING_FLEX_RAND_SEED_INST1.
 */
#define READ_SFLOW_ING_FLEX_RAND_SEED_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,SFLOW_ING_FLEX_RAND_SEED_INST1r_BLKACC,1,n,0,SFLOW_ING_FLEX_RAND_SEED_INST1r_OFFSET,0,(r._sflow_ing_flex_rand_seed_inst1),2)
#define WRITE_SFLOW_ING_FLEX_RAND_SEED_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,SFLOW_ING_FLEX_RAND_SEED_INST1r_BLKACC,1,n,0,SFLOW_ING_FLEX_RAND_SEED_INST1r_OFFSET,0,&(r._sflow_ing_flex_rand_seed_inst1),2)
#define WRITE_SFLOW_ING_FLEX_RAND_SEED_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,SFLOW_ING_FLEX_RAND_SEED_INST1r_BLKACC,1,-1,0,SFLOW_ING_FLEX_RAND_SEED_INST1r_OFFSET,0,&(r._sflow_ing_flex_rand_seed_inst1),2)

/*******************************************************************************
 * End of 'SFLOW_ING_FLEX_RAND_SEED_INST1r'
 */




/*******************************************************************************
 * REGISTER:  SFLOW_ING_MIRROR_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SFLOW_ING_MIRROR_CONFIG.
 */
#define READ_SFLOW_ING_MIRROR_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,SFLOW_ING_MIRROR_CONFIGr_BLKACC,1,SFLOW_ING_MIRROR_CONFIGr_OFFSET,0,(r._sflow_ing_mirror_config), 1)
#define WRITE_SFLOW_ING_MIRROR_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,SFLOW_ING_MIRROR_CONFIGr_BLKACC,1,SFLOW_ING_MIRROR_CONFIGr_OFFSET,0,&(r._sflow_ing_mirror_config), 1)

/*******************************************************************************
 * End of 'SFLOW_ING_MIRROR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SFLOW_ING_RAND_SEED_INST0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SFLOW_ING_RAND_SEED_INST0.
 */
#define READ_SFLOW_ING_RAND_SEED_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,SFLOW_ING_RAND_SEED_INST0r_BLKACC,1,n,0,SFLOW_ING_RAND_SEED_INST0r_OFFSET,0,(r._sflow_ing_rand_seed_inst0),2)
#define WRITE_SFLOW_ING_RAND_SEED_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,SFLOW_ING_RAND_SEED_INST0r_BLKACC,1,n,0,SFLOW_ING_RAND_SEED_INST0r_OFFSET,0,&(r._sflow_ing_rand_seed_inst0),2)
#define WRITE_SFLOW_ING_RAND_SEED_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,SFLOW_ING_RAND_SEED_INST0r_BLKACC,1,-1,0,SFLOW_ING_RAND_SEED_INST0r_OFFSET,0,&(r._sflow_ing_rand_seed_inst0),2)

/*******************************************************************************
 * End of 'SFLOW_ING_RAND_SEED_INST0r'
 */




/*******************************************************************************
 * REGISTER:  SFLOW_ING_RAND_SEED_INST1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SFLOW_ING_RAND_SEED_INST1.
 */
#define READ_SFLOW_ING_RAND_SEED_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,SFLOW_ING_RAND_SEED_INST1r_BLKACC,1,n,0,SFLOW_ING_RAND_SEED_INST1r_OFFSET,0,(r._sflow_ing_rand_seed_inst1),2)
#define WRITE_SFLOW_ING_RAND_SEED_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,SFLOW_ING_RAND_SEED_INST1r_BLKACC,1,n,0,SFLOW_ING_RAND_SEED_INST1r_OFFSET,0,&(r._sflow_ing_rand_seed_inst1),2)
#define WRITE_SFLOW_ING_RAND_SEED_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,SFLOW_ING_RAND_SEED_INST1r_BLKACC,1,-1,0,SFLOW_ING_RAND_SEED_INST1r_OFFSET,0,&(r._sflow_ing_rand_seed_inst1),2)

/*******************************************************************************
 * End of 'SFLOW_ING_RAND_SEED_INST1r'
 */




/*******************************************************************************
 * REGISTER:  SOBMH_FLEX_CTR_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SOBMH_FLEX_CTR_CONTROL.
 */
#define READ_SOBMH_FLEX_CTR_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,SOBMH_FLEX_CTR_CONTROLr_BLKACC,2,SOBMH_FLEX_CTR_CONTROLr_OFFSET,0,(r._sobmh_flex_ctr_control), 1)
#define WRITE_SOBMH_FLEX_CTR_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,SOBMH_FLEX_CTR_CONTROLr_BLKACC,2,SOBMH_FLEX_CTR_CONTROLr_OFFSET,0,&(r._sobmh_flex_ctr_control), 1)

/*******************************************************************************
 * End of 'SOBMH_FLEX_CTR_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  SOURCE_TRUNK_MAP_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     74
 */
/*
 * These macros can be used to access SOURCE_TRUNK_MAP_TABLE.
 */
#define READ_SOURCE_TRUNK_MAP_TABLEm(u,i,m) bcmbd_cmicx_mem_block_read(u,SOURCE_TRUNK_MAP_TABLEm_BLKACC,1,SOURCE_TRUNK_MAP_TABLEm_OFFSET,i,(m._source_trunk_map_table),3)
#define WRITE_SOURCE_TRUNK_MAP_TABLEm(u,i,m) bcmbd_cmicx_mem_block_write(u,SOURCE_TRUNK_MAP_TABLEm_BLKACC,1,SOURCE_TRUNK_MAP_TABLEm_OFFSET,i,&(m._source_trunk_map_table),3)

/*******************************************************************************
 * End of 'SOURCE_TRUNK_MAP_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  SPEED_ID_TABLE
 * BLOCKS:   CDPORT
 * SIZE:     160
 */
/*
 * These macros can be used to access SPEED_ID_TABLE.
 */
#define READ_SPEED_ID_TABLEm(u,i,m,p) bcmbd_cmicx_mem_blocks_read(u,SPEED_ID_TABLEm_BLKACC,p,SPEED_ID_TABLEm_OFFSET,i,(m._speed_id_table),5)
#define WRITE_SPEED_ID_TABLEm(u,i,m,p) bcmbd_cmicx_mem_blocks_write(u,SPEED_ID_TABLEm_BLKACC,p,SPEED_ID_TABLEm_OFFSET,i,&(m._speed_id_table),5)

/*******************************************************************************
 * End of 'SPEED_ID_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  SPEED_PRIORITY_MAP_TBL
 * BLOCKS:   CDPORT
 * SIZE:     288
 */
/*
 * These macros can be used to access SPEED_PRIORITY_MAP_TBL.
 */
#define READ_SPEED_PRIORITY_MAP_TBLm(u,i,m,p) bcmbd_cmicx_mem_blocks_read(u,SPEED_PRIORITY_MAP_TBLm_BLKACC,p,SPEED_PRIORITY_MAP_TBLm_OFFSET,i,(m._speed_priority_map_tbl),9)
#define WRITE_SPEED_PRIORITY_MAP_TBLm(u,i,m,p) bcmbd_cmicx_mem_blocks_write(u,SPEED_PRIORITY_MAP_TBLm_BLKACC,p,SPEED_PRIORITY_MAP_TBLm_OFFSET,i,&(m._speed_priority_map_tbl),9)

/*******************************************************************************
 * End of 'SPEED_PRIORITY_MAP_TBLm'
 */




/*******************************************************************************
 * REGISTER:  SRP_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SRP_CONTROL_1.
 */
#define READ_SRP_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,SRP_CONTROL_1r_BLKACC,1,SRP_CONTROL_1r_OFFSET,0,(r._srp_control_1), 1)
#define WRITE_SRP_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,SRP_CONTROL_1r_BLKACC,1,SRP_CONTROL_1r_OFFSET,0,&(r._srp_control_1), 1)

/*******************************************************************************
 * End of 'SRP_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  SRP_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SRP_CONTROL_2.
 */
#define READ_SRP_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,SRP_CONTROL_2r_BLKACC,1,SRP_CONTROL_2r_OFFSET,0,(r._srp_control_2), 1)
#define WRITE_SRP_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,SRP_CONTROL_2r_BLKACC,1,SRP_CONTROL_2r_OFFSET,0,&(r._srp_control_2), 1)

/*******************************************************************************
 * End of 'SRP_CONTROL_2r'
 */




/*******************************************************************************
 * MEMORY:  STG_TAB_2
 * BLOCKS:   IPIPE
 * SIZE:     555
 */
/*
 * These macros can be used to access STG_TAB_2.
 */
#define READ_STG_TAB_2m(u,i,m) bcmbd_cmicx_mem_block_read(u,STG_TAB_2m_BLKACC,1,STG_TAB_2m_OFFSET,i,(m._stg_tab_2),18)
#define WRITE_STG_TAB_2m(u,i,m) bcmbd_cmicx_mem_block_write(u,STG_TAB_2m_BLKACC,1,STG_TAB_2m_OFFSET,i,&(m._stg_tab_2),18)

/*******************************************************************************
 * End of 'STG_TAB_2m'
 */




/*******************************************************************************
 * MEMORY:  STG_TAB_A
 * BLOCKS:   IPIPE
 * SIZE:     304
 */
/*
 * These macros can be used to access STG_TAB_A.
 */
#define READ_STG_TAB_Am(u,i,m) bcmbd_cmicx_mem_block_read(u,STG_TAB_Am_BLKACC,1,STG_TAB_Am_OFFSET,i,(m._stg_tab_a),10)
#define WRITE_STG_TAB_Am(u,i,m) bcmbd_cmicx_mem_block_write(u,STG_TAB_Am_BLKACC,1,STG_TAB_Am_OFFSET,i,&(m._stg_tab_a),10)

/*******************************************************************************
 * End of 'STG_TAB_Am'
 */




/*******************************************************************************
 * MEMORY:  STG_TAB_B
 * BLOCKS:   IPIPE
 * SIZE:     304
 */
/*
 * These macros can be used to access STG_TAB_B.
 */
#define READ_STG_TAB_Bm(u,i,m) bcmbd_cmicx_mem_block_read(u,STG_TAB_Bm_BLKACC,1,STG_TAB_Bm_OFFSET,i,(m._stg_tab_b),10)
#define WRITE_STG_TAB_Bm(u,i,m) bcmbd_cmicx_mem_block_write(u,STG_TAB_Bm_BLKACC,1,STG_TAB_Bm_OFFSET,i,&(m._stg_tab_b),10)

/*******************************************************************************
 * End of 'STG_TAB_Bm'
 */




/*******************************************************************************
 * REGISTER:  SW_HW_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SW_HW_CONTROL.
 */
#define READ_SW_HW_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,SW_HW_CONTROLr_BLKACC,1,SW_HW_CONTROLr_OFFSET,0,(r._sw_hw_control), 1)
#define WRITE_SW_HW_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,SW_HW_CONTROLr_BLKACC,1,SW_HW_CONTROLr_OFFSET,0,&(r._sw_hw_control), 1)

/*******************************************************************************
 * End of 'SW_HW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  SW_IFP_DST_ACTION_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SW_IFP_DST_ACTION_CONTROL.
 */
#define READ_SW_IFP_DST_ACTION_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,SW_IFP_DST_ACTION_CONTROLr_BLKACC,1,SW_IFP_DST_ACTION_CONTROLr_OFFSET,0,(r._sw_ifp_dst_action_control), 1)
#define WRITE_SW_IFP_DST_ACTION_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,SW_IFP_DST_ACTION_CONTROLr_BLKACC,1,SW_IFP_DST_ACTION_CONTROLr_OFFSET,0,&(r._sw_ifp_dst_action_control), 1)

/*******************************************************************************
 * End of 'SW_IFP_DST_ACTION_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  TCP_FN
 * BLOCKS:   IPIPE
 * SIZE:     22
 */
/*
 * These macros can be used to access TCP_FN.
 */
#define READ_TCP_FNm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,TCP_FNm_BLKACC,1,n,0,TCP_FNm_OFFSET,i,(m._tcp_fn),1)
#define WRITE_TCP_FNm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,TCP_FNm_BLKACC,1,n,0,TCP_FNm_OFFSET,i,&(m._tcp_fn),1)
#define WRITE_TCP_FNm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,TCP_FNm_BLKACC,1,-1,0,TCP_FNm_OFFSET,i,&(m._tcp_fn),1)

/*******************************************************************************
 * End of 'TCP_FNm'
 */




/*******************************************************************************
 * REGISTER:  TDBGC0_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC0_64.
 */
#define READ_TDBGC0_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,TDBGC0_64r_BLKACC,p,TDBGC0_64r_OFFSET,0,(r._tdbgc0_64), 2)
#define WRITE_TDBGC0_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,TDBGC0_64r_BLKACC,p,TDBGC0_64r_OFFSET,0,&(r._tdbgc0_64), 2)

/*******************************************************************************
 * End of 'TDBGC0_64r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC0_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC0_SELECT.
 */
#define READ_TDBGC0_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,TDBGC0_SELECTr_BLKACC,2,TDBGC0_SELECTr_OFFSET,0,(r._tdbgc0_select), 1)
#define WRITE_TDBGC0_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,TDBGC0_SELECTr_BLKACC,2,TDBGC0_SELECTr_OFFSET,0,&(r._tdbgc0_select), 1)

/*******************************************************************************
 * End of 'TDBGC0_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC10_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC10_64.
 */
#define READ_TDBGC10_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,TDBGC10_64r_BLKACC,p,TDBGC10_64r_OFFSET,0,(r._tdbgc10_64), 2)
#define WRITE_TDBGC10_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,TDBGC10_64r_BLKACC,p,TDBGC10_64r_OFFSET,0,&(r._tdbgc10_64), 2)

/*******************************************************************************
 * End of 'TDBGC10_64r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC10_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC10_SELECT.
 */
#define READ_TDBGC10_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,TDBGC10_SELECTr_BLKACC,2,TDBGC10_SELECTr_OFFSET,0,(r._tdbgc10_select), 1)
#define WRITE_TDBGC10_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,TDBGC10_SELECTr_BLKACC,2,TDBGC10_SELECTr_OFFSET,0,&(r._tdbgc10_select), 1)

/*******************************************************************************
 * End of 'TDBGC10_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC11_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC11_64.
 */
#define READ_TDBGC11_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,TDBGC11_64r_BLKACC,p,TDBGC11_64r_OFFSET,0,(r._tdbgc11_64), 2)
#define WRITE_TDBGC11_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,TDBGC11_64r_BLKACC,p,TDBGC11_64r_OFFSET,0,&(r._tdbgc11_64), 2)

/*******************************************************************************
 * End of 'TDBGC11_64r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC11_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC11_SELECT.
 */
#define READ_TDBGC11_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,TDBGC11_SELECTr_BLKACC,2,TDBGC11_SELECTr_OFFSET,0,(r._tdbgc11_select), 1)
#define WRITE_TDBGC11_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,TDBGC11_SELECTr_BLKACC,2,TDBGC11_SELECTr_OFFSET,0,&(r._tdbgc11_select), 1)

/*******************************************************************************
 * End of 'TDBGC11_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC1_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC1_64.
 */
#define READ_TDBGC1_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,TDBGC1_64r_BLKACC,p,TDBGC1_64r_OFFSET,0,(r._tdbgc1_64), 2)
#define WRITE_TDBGC1_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,TDBGC1_64r_BLKACC,p,TDBGC1_64r_OFFSET,0,&(r._tdbgc1_64), 2)

/*******************************************************************************
 * End of 'TDBGC1_64r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC1_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC1_SELECT.
 */
#define READ_TDBGC1_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,TDBGC1_SELECTr_BLKACC,2,TDBGC1_SELECTr_OFFSET,0,(r._tdbgc1_select), 1)
#define WRITE_TDBGC1_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,TDBGC1_SELECTr_BLKACC,2,TDBGC1_SELECTr_OFFSET,0,&(r._tdbgc1_select), 1)

/*******************************************************************************
 * End of 'TDBGC1_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC2_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC2_64.
 */
#define READ_TDBGC2_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,TDBGC2_64r_BLKACC,p,TDBGC2_64r_OFFSET,0,(r._tdbgc2_64), 2)
#define WRITE_TDBGC2_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,TDBGC2_64r_BLKACC,p,TDBGC2_64r_OFFSET,0,&(r._tdbgc2_64), 2)

/*******************************************************************************
 * End of 'TDBGC2_64r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC2_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC2_SELECT.
 */
#define READ_TDBGC2_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,TDBGC2_SELECTr_BLKACC,2,TDBGC2_SELECTr_OFFSET,0,(r._tdbgc2_select), 1)
#define WRITE_TDBGC2_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,TDBGC2_SELECTr_BLKACC,2,TDBGC2_SELECTr_OFFSET,0,&(r._tdbgc2_select), 1)

/*******************************************************************************
 * End of 'TDBGC2_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC3_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC3_64.
 */
#define READ_TDBGC3_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,TDBGC3_64r_BLKACC,p,TDBGC3_64r_OFFSET,0,(r._tdbgc3_64), 2)
#define WRITE_TDBGC3_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,TDBGC3_64r_BLKACC,p,TDBGC3_64r_OFFSET,0,&(r._tdbgc3_64), 2)

/*******************************************************************************
 * End of 'TDBGC3_64r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC3_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC3_SELECT.
 */
#define READ_TDBGC3_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,TDBGC3_SELECTr_BLKACC,2,TDBGC3_SELECTr_OFFSET,0,(r._tdbgc3_select), 1)
#define WRITE_TDBGC3_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,TDBGC3_SELECTr_BLKACC,2,TDBGC3_SELECTr_OFFSET,0,&(r._tdbgc3_select), 1)

/*******************************************************************************
 * End of 'TDBGC3_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC4_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC4_64.
 */
#define READ_TDBGC4_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,TDBGC4_64r_BLKACC,p,TDBGC4_64r_OFFSET,0,(r._tdbgc4_64), 2)
#define WRITE_TDBGC4_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,TDBGC4_64r_BLKACC,p,TDBGC4_64r_OFFSET,0,&(r._tdbgc4_64), 2)

/*******************************************************************************
 * End of 'TDBGC4_64r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC4_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC4_SELECT.
 */
#define READ_TDBGC4_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,TDBGC4_SELECTr_BLKACC,2,TDBGC4_SELECTr_OFFSET,0,(r._tdbgc4_select), 1)
#define WRITE_TDBGC4_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,TDBGC4_SELECTr_BLKACC,2,TDBGC4_SELECTr_OFFSET,0,&(r._tdbgc4_select), 1)

/*******************************************************************************
 * End of 'TDBGC4_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC5_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC5_64.
 */
#define READ_TDBGC5_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,TDBGC5_64r_BLKACC,p,TDBGC5_64r_OFFSET,0,(r._tdbgc5_64), 2)
#define WRITE_TDBGC5_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,TDBGC5_64r_BLKACC,p,TDBGC5_64r_OFFSET,0,&(r._tdbgc5_64), 2)

/*******************************************************************************
 * End of 'TDBGC5_64r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC5_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC5_SELECT.
 */
#define READ_TDBGC5_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,TDBGC5_SELECTr_BLKACC,2,TDBGC5_SELECTr_OFFSET,0,(r._tdbgc5_select), 1)
#define WRITE_TDBGC5_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,TDBGC5_SELECTr_BLKACC,2,TDBGC5_SELECTr_OFFSET,0,&(r._tdbgc5_select), 1)

/*******************************************************************************
 * End of 'TDBGC5_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC6_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC6_64.
 */
#define READ_TDBGC6_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,TDBGC6_64r_BLKACC,p,TDBGC6_64r_OFFSET,0,(r._tdbgc6_64), 2)
#define WRITE_TDBGC6_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,TDBGC6_64r_BLKACC,p,TDBGC6_64r_OFFSET,0,&(r._tdbgc6_64), 2)

/*******************************************************************************
 * End of 'TDBGC6_64r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC6_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC6_SELECT.
 */
#define READ_TDBGC6_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,TDBGC6_SELECTr_BLKACC,2,TDBGC6_SELECTr_OFFSET,0,(r._tdbgc6_select), 1)
#define WRITE_TDBGC6_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,TDBGC6_SELECTr_BLKACC,2,TDBGC6_SELECTr_OFFSET,0,&(r._tdbgc6_select), 1)

/*******************************************************************************
 * End of 'TDBGC6_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC7_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC7_64.
 */
#define READ_TDBGC7_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,TDBGC7_64r_BLKACC,p,TDBGC7_64r_OFFSET,0,(r._tdbgc7_64), 2)
#define WRITE_TDBGC7_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,TDBGC7_64r_BLKACC,p,TDBGC7_64r_OFFSET,0,&(r._tdbgc7_64), 2)

/*******************************************************************************
 * End of 'TDBGC7_64r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC7_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC7_SELECT.
 */
#define READ_TDBGC7_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,TDBGC7_SELECTr_BLKACC,2,TDBGC7_SELECTr_OFFSET,0,(r._tdbgc7_select), 1)
#define WRITE_TDBGC7_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,TDBGC7_SELECTr_BLKACC,2,TDBGC7_SELECTr_OFFSET,0,&(r._tdbgc7_select), 1)

/*******************************************************************************
 * End of 'TDBGC7_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC8_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC8_64.
 */
#define READ_TDBGC8_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,TDBGC8_64r_BLKACC,p,TDBGC8_64r_OFFSET,0,(r._tdbgc8_64), 2)
#define WRITE_TDBGC8_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,TDBGC8_64r_BLKACC,p,TDBGC8_64r_OFFSET,0,&(r._tdbgc8_64), 2)

/*******************************************************************************
 * End of 'TDBGC8_64r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC8_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC8_SELECT.
 */
#define READ_TDBGC8_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,TDBGC8_SELECTr_BLKACC,2,TDBGC8_SELECTr_OFFSET,0,(r._tdbgc8_select), 1)
#define WRITE_TDBGC8_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,TDBGC8_SELECTr_BLKACC,2,TDBGC8_SELECTr_OFFSET,0,&(r._tdbgc8_select), 1)

/*******************************************************************************
 * End of 'TDBGC8_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC9_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC9_64.
 */
#define READ_TDBGC9_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,TDBGC9_64r_BLKACC,p,TDBGC9_64r_OFFSET,0,(r._tdbgc9_64), 2)
#define WRITE_TDBGC9_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,TDBGC9_64r_BLKACC,p,TDBGC9_64r_OFFSET,0,&(r._tdbgc9_64), 2)

/*******************************************************************************
 * End of 'TDBGC9_64r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC9_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC9_SELECT.
 */
#define READ_TDBGC9_SELECTr(u,r) bcmbd_cmicx_reg_block_read(u,TDBGC9_SELECTr_BLKACC,2,TDBGC9_SELECTr_OFFSET,0,(r._tdbgc9_select), 1)
#define WRITE_TDBGC9_SELECTr(u,r) bcmbd_cmicx_reg_block_write(u,TDBGC9_SELECTr_BLKACC,2,TDBGC9_SELECTr_OFFSET,0,&(r._tdbgc9_select), 1)

/*******************************************************************************
 * End of 'TDBGC9_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC_SELECT_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC_SELECT_2.
 */
#define READ_TDBGC_SELECT_2r(u,i,r) bcmbd_cmicx_reg_block_read(u,TDBGC_SELECT_2r_BLKACC,2,TDBGC_SELECT_2r_OFFSET,i,(r._tdbgc_select_2), 1)
#define WRITE_TDBGC_SELECT_2r(u,i,r) bcmbd_cmicx_reg_block_write(u,TDBGC_SELECT_2r_BLKACC,2,TDBGC_SELECT_2r_OFFSET,i,&(r._tdbgc_select_2), 1)

/*******************************************************************************
 * End of 'TDBGC_SELECT_2r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_32
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_32.
 */
#define READ_THDI_BST_TRIGGER_STATUS_32r(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_32r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32r_OFFSET,0,(r._thdi_bst_trigger_status_32),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_32r(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_32r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32r_OFFSET,0,&(r._thdi_bst_trigger_status_32),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_32r'
 */




/*******************************************************************************
 * REGISTER:  THD_MISC_CONTROL1
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access THD_MISC_CONTROL1.
 */
#define READ_THD_MISC_CONTROL1r(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,THD_MISC_CONTROL1r_BLKACC,3,0,p,THD_MISC_CONTROL1r_OFFSET,0,(r._thd_misc_control1),1)
#define WRITE_THD_MISC_CONTROL1r(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,THD_MISC_CONTROL1r_BLKACC,3,0,p,THD_MISC_CONTROL1r_OFFSET,0,&(r._thd_misc_control1),1)

/*******************************************************************************
 * End of 'THD_MISC_CONTROL1r'
 */




/*******************************************************************************
 * REGISTER:  THD_MISC_CONTROL2
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access THD_MISC_CONTROL2.
 */
#define READ_THD_MISC_CONTROL2r(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,THD_MISC_CONTROL2r_BLKACC,3,0,p,THD_MISC_CONTROL2r_OFFSET,0,(r._thd_misc_control2),1)
#define WRITE_THD_MISC_CONTROL2r(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,THD_MISC_CONTROL2r_BLKACC,3,0,p,THD_MISC_CONTROL2r_OFFSET,0,&(r._thd_misc_control2),1)

/*******************************************************************************
 * End of 'THD_MISC_CONTROL2r'
 */




/*******************************************************************************
 * REGISTER:  THD_MISC_CONTROL
 * BLOCKS:   MMU_ITM
 * SIZE:     32
 */
/*
 * These macros can be used to access THD_MISC_CONTROL.
 */
#define READ_THD_MISC_CONTROLr(u,p,r) bcmbd_cmicx_reg_unique_block_read(u,THD_MISC_CONTROLr_BLKACC,3,0,p,THD_MISC_CONTROLr_OFFSET,0,(r._thd_misc_control),1)
#define WRITE_THD_MISC_CONTROLr(u,p,r) bcmbd_cmicx_reg_unique_block_write(u,THD_MISC_CONTROLr_BLKACC,3,0,p,THD_MISC_CONTROLr_OFFSET,0,&(r._thd_misc_control),1)

/*******************************************************************************
 * End of 'THD_MISC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_AVS_CTRL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_AVS_CTRL.
 */
#define READ_TOP_AVS_CTRLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_AVS_CTRLr_BLKACC,8,TOP_AVS_CTRLr_OFFSET,0,(r._top_avs_ctrl), 1)
#define WRITE_TOP_AVS_CTRLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_AVS_CTRLr_BLKACC,8,TOP_AVS_CTRLr_OFFSET,0,&(r._top_avs_ctrl), 1)

/*******************************************************************************
 * End of 'TOP_AVS_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_AVS_INTR_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_AVS_INTR_STATUS.
 */
#define READ_TOP_AVS_INTR_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_AVS_INTR_STATUSr_BLKACC,8,TOP_AVS_INTR_STATUSr_OFFSET,0,(r._top_avs_intr_status), 1)
#define WRITE_TOP_AVS_INTR_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_AVS_INTR_STATUSr_BLKACC,8,TOP_AVS_INTR_STATUSr_OFFSET,0,&(r._top_avs_intr_status), 1)

/*******************************************************************************
 * End of 'TOP_AVS_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL0_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL0_CTRL_0.
 */
#define READ_TOP_BS_PLL0_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL0_CTRL_0r_BLKACC,8,TOP_BS_PLL0_CTRL_0r_OFFSET,0,(r._top_bs_pll0_ctrl_0), 1)
#define WRITE_TOP_BS_PLL0_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL0_CTRL_0r_BLKACC,8,TOP_BS_PLL0_CTRL_0r_OFFSET,0,&(r._top_bs_pll0_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL0_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL0_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL0_CTRL_1.
 */
#define READ_TOP_BS_PLL0_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL0_CTRL_1r_BLKACC,8,TOP_BS_PLL0_CTRL_1r_OFFSET,0,(r._top_bs_pll0_ctrl_1), 1)
#define WRITE_TOP_BS_PLL0_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL0_CTRL_1r_BLKACC,8,TOP_BS_PLL0_CTRL_1r_OFFSET,0,&(r._top_bs_pll0_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL0_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL0_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL0_CTRL_2.
 */
#define READ_TOP_BS_PLL0_CTRL_2r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL0_CTRL_2r_BLKACC,8,TOP_BS_PLL0_CTRL_2r_OFFSET,0,(r._top_bs_pll0_ctrl_2), 1)
#define WRITE_TOP_BS_PLL0_CTRL_2r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL0_CTRL_2r_BLKACC,8,TOP_BS_PLL0_CTRL_2r_OFFSET,0,&(r._top_bs_pll0_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL0_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL0_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL0_CTRL_3.
 */
#define READ_TOP_BS_PLL0_CTRL_3r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL0_CTRL_3r_BLKACC,8,TOP_BS_PLL0_CTRL_3r_OFFSET,0,(r._top_bs_pll0_ctrl_3), 1)
#define WRITE_TOP_BS_PLL0_CTRL_3r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL0_CTRL_3r_BLKACC,8,TOP_BS_PLL0_CTRL_3r_OFFSET,0,&(r._top_bs_pll0_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL0_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL0_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL0_CTRL_4.
 */
#define READ_TOP_BS_PLL0_CTRL_4r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL0_CTRL_4r_BLKACC,8,TOP_BS_PLL0_CTRL_4r_OFFSET,0,(r._top_bs_pll0_ctrl_4), 1)
#define WRITE_TOP_BS_PLL0_CTRL_4r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL0_CTRL_4r_BLKACC,8,TOP_BS_PLL0_CTRL_4r_OFFSET,0,&(r._top_bs_pll0_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL0_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL0_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL0_STATUS.
 */
#define READ_TOP_BS_PLL0_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL0_STATUSr_BLKACC,8,TOP_BS_PLL0_STATUSr_OFFSET,0,(r._top_bs_pll0_status), 1)
#define WRITE_TOP_BS_PLL0_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL0_STATUSr_BLKACC,8,TOP_BS_PLL0_STATUSr_OFFSET,0,&(r._top_bs_pll0_status), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL0_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL1_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL1_CTRL_0.
 */
#define READ_TOP_BS_PLL1_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL1_CTRL_0r_BLKACC,8,TOP_BS_PLL1_CTRL_0r_OFFSET,0,(r._top_bs_pll1_ctrl_0), 1)
#define WRITE_TOP_BS_PLL1_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL1_CTRL_0r_BLKACC,8,TOP_BS_PLL1_CTRL_0r_OFFSET,0,&(r._top_bs_pll1_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL1_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL1_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL1_CTRL_1.
 */
#define READ_TOP_BS_PLL1_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL1_CTRL_1r_BLKACC,8,TOP_BS_PLL1_CTRL_1r_OFFSET,0,(r._top_bs_pll1_ctrl_1), 1)
#define WRITE_TOP_BS_PLL1_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL1_CTRL_1r_BLKACC,8,TOP_BS_PLL1_CTRL_1r_OFFSET,0,&(r._top_bs_pll1_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL1_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL1_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL1_CTRL_2.
 */
#define READ_TOP_BS_PLL1_CTRL_2r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL1_CTRL_2r_BLKACC,8,TOP_BS_PLL1_CTRL_2r_OFFSET,0,(r._top_bs_pll1_ctrl_2), 1)
#define WRITE_TOP_BS_PLL1_CTRL_2r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL1_CTRL_2r_BLKACC,8,TOP_BS_PLL1_CTRL_2r_OFFSET,0,&(r._top_bs_pll1_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL1_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL1_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL1_CTRL_3.
 */
#define READ_TOP_BS_PLL1_CTRL_3r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL1_CTRL_3r_BLKACC,8,TOP_BS_PLL1_CTRL_3r_OFFSET,0,(r._top_bs_pll1_ctrl_3), 1)
#define WRITE_TOP_BS_PLL1_CTRL_3r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL1_CTRL_3r_BLKACC,8,TOP_BS_PLL1_CTRL_3r_OFFSET,0,&(r._top_bs_pll1_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL1_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL1_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL1_CTRL_4.
 */
#define READ_TOP_BS_PLL1_CTRL_4r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL1_CTRL_4r_BLKACC,8,TOP_BS_PLL1_CTRL_4r_OFFSET,0,(r._top_bs_pll1_ctrl_4), 1)
#define WRITE_TOP_BS_PLL1_CTRL_4r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL1_CTRL_4r_BLKACC,8,TOP_BS_PLL1_CTRL_4r_OFFSET,0,&(r._top_bs_pll1_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL1_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL1_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL1_STATUS.
 */
#define READ_TOP_BS_PLL1_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL1_STATUSr_BLKACC,8,TOP_BS_PLL1_STATUSr_OFFSET,0,(r._top_bs_pll1_status), 1)
#define WRITE_TOP_BS_PLL1_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL1_STATUSr_BLKACC,8,TOP_BS_PLL1_STATUSr_OFFSET,0,&(r._top_bs_pll1_status), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL1_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL_CTRL_0.
 */
#define READ_TOP_BS_PLL_CTRL_0r(u,i,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL_CTRL_0r_BLKACC,8,TOP_BS_PLL_CTRL_0r_OFFSET,(i)*6,(r._top_bs_pll_ctrl_0), 1)
#define WRITE_TOP_BS_PLL_CTRL_0r(u,i,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL_CTRL_0r_BLKACC,8,TOP_BS_PLL_CTRL_0r_OFFSET,(i)*6,&(r._top_bs_pll_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL_CTRL_1.
 */
#define READ_TOP_BS_PLL_CTRL_1r(u,i,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL_CTRL_1r_BLKACC,8,TOP_BS_PLL_CTRL_1r_OFFSET,(i)*6,(r._top_bs_pll_ctrl_1), 1)
#define WRITE_TOP_BS_PLL_CTRL_1r(u,i,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL_CTRL_1r_BLKACC,8,TOP_BS_PLL_CTRL_1r_OFFSET,(i)*6,&(r._top_bs_pll_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL_CTRL_2.
 */
#define READ_TOP_BS_PLL_CTRL_2r(u,i,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL_CTRL_2r_BLKACC,8,TOP_BS_PLL_CTRL_2r_OFFSET,(i)*6,(r._top_bs_pll_ctrl_2), 1)
#define WRITE_TOP_BS_PLL_CTRL_2r(u,i,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL_CTRL_2r_BLKACC,8,TOP_BS_PLL_CTRL_2r_OFFSET,(i)*6,&(r._top_bs_pll_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL_CTRL_3.
 */
#define READ_TOP_BS_PLL_CTRL_3r(u,i,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL_CTRL_3r_BLKACC,8,TOP_BS_PLL_CTRL_3r_OFFSET,(i)*6,(r._top_bs_pll_ctrl_3), 1)
#define WRITE_TOP_BS_PLL_CTRL_3r(u,i,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL_CTRL_3r_BLKACC,8,TOP_BS_PLL_CTRL_3r_OFFSET,(i)*6,&(r._top_bs_pll_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL_CTRL_4.
 */
#define READ_TOP_BS_PLL_CTRL_4r(u,i,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL_CTRL_4r_BLKACC,8,TOP_BS_PLL_CTRL_4r_OFFSET,(i)*6,(r._top_bs_pll_ctrl_4), 1)
#define WRITE_TOP_BS_PLL_CTRL_4r(u,i,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL_CTRL_4r_BLKACC,8,TOP_BS_PLL_CTRL_4r_OFFSET,(i)*6,&(r._top_bs_pll_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL_STATUS.
 */
#define READ_TOP_BS_PLL_STATUSr(u,i,r) bcmbd_cmicx_reg_block_read(u,TOP_BS_PLL_STATUSr_BLKACC,8,TOP_BS_PLL_STATUSr_OFFSET,(i)*6,(r._top_bs_pll_status), 1)
#define WRITE_TOP_BS_PLL_STATUSr(u,i,r) bcmbd_cmicx_reg_block_write(u,TOP_BS_PLL_STATUSr_BLKACC,8,TOP_BS_PLL_STATUSr_OFFSET,(i)*6,&(r._top_bs_pll_status), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL_CTRL_0.
 */
#define READ_TOP_CORE_PLL_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_CORE_PLL_CTRL_0r_BLKACC,8,TOP_CORE_PLL_CTRL_0r_OFFSET,0,(r._top_core_pll_ctrl_0), 1)
#define WRITE_TOP_CORE_PLL_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_CORE_PLL_CTRL_0r_BLKACC,8,TOP_CORE_PLL_CTRL_0r_OFFSET,0,&(r._top_core_pll_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL_CTRL_1.
 */
#define READ_TOP_CORE_PLL_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_CORE_PLL_CTRL_1r_BLKACC,8,TOP_CORE_PLL_CTRL_1r_OFFSET,0,(r._top_core_pll_ctrl_1), 1)
#define WRITE_TOP_CORE_PLL_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_CORE_PLL_CTRL_1r_BLKACC,8,TOP_CORE_PLL_CTRL_1r_OFFSET,0,&(r._top_core_pll_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL_CTRL_2.
 */
#define READ_TOP_CORE_PLL_CTRL_2r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_CORE_PLL_CTRL_2r_BLKACC,8,TOP_CORE_PLL_CTRL_2r_OFFSET,0,(r._top_core_pll_ctrl_2), 1)
#define WRITE_TOP_CORE_PLL_CTRL_2r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_CORE_PLL_CTRL_2r_BLKACC,8,TOP_CORE_PLL_CTRL_2r_OFFSET,0,&(r._top_core_pll_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL_CTRL_3.
 */
#define READ_TOP_CORE_PLL_CTRL_3r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_CORE_PLL_CTRL_3r_BLKACC,8,TOP_CORE_PLL_CTRL_3r_OFFSET,0,(r._top_core_pll_ctrl_3), 1)
#define WRITE_TOP_CORE_PLL_CTRL_3r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_CORE_PLL_CTRL_3r_BLKACC,8,TOP_CORE_PLL_CTRL_3r_OFFSET,0,&(r._top_core_pll_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL_CTRL_4.
 */
#define READ_TOP_CORE_PLL_CTRL_4r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_CORE_PLL_CTRL_4r_BLKACC,8,TOP_CORE_PLL_CTRL_4r_OFFSET,0,(r._top_core_pll_ctrl_4), 1)
#define WRITE_TOP_CORE_PLL_CTRL_4r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_CORE_PLL_CTRL_4r_BLKACC,8,TOP_CORE_PLL_CTRL_4r_OFFSET,0,&(r._top_core_pll_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL_STATUS.
 */
#define READ_TOP_CORE_PLL_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_CORE_PLL_STATUSr_BLKACC,8,TOP_CORE_PLL_STATUSr_OFFSET,0,(r._top_core_pll_status), 1)
#define WRITE_TOP_CORE_PLL_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_CORE_PLL_STATUSr_BLKACC,8,TOP_CORE_PLL_STATUSr_OFFSET,0,&(r._top_core_pll_status), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  TOP_CPU2TAP_DMA_CMD_MEM
 * BLOCKS:   TOP
 * SIZE:     96
 */
/*
 * These macros can be used to access TOP_CPU2TAP_DMA_CMD_MEM.
 */
#define READ_TOP_CPU2TAP_DMA_CMD_MEMm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,TOP_CPU2TAP_DMA_CMD_MEMm_BLKACC,8,n,0,TOP_CPU2TAP_DMA_CMD_MEMm_OFFSET,i,(m._top_cpu2tap_dma_cmd_mem),3)
#define WRITE_TOP_CPU2TAP_DMA_CMD_MEMm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,TOP_CPU2TAP_DMA_CMD_MEMm_BLKACC,8,n,0,TOP_CPU2TAP_DMA_CMD_MEMm_OFFSET,i,&(m._top_cpu2tap_dma_cmd_mem),3)
#define WRITE_TOP_CPU2TAP_DMA_CMD_MEMm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,TOP_CPU2TAP_DMA_CMD_MEMm_BLKACC,8,-1,0,TOP_CPU2TAP_DMA_CMD_MEMm_OFFSET,i,&(m._top_cpu2tap_dma_cmd_mem),3)

/*******************************************************************************
 * End of 'TOP_CPU2TAP_DMA_CMD_MEMm'
 */




/*******************************************************************************
 * REGISTER:  TOP_CPU2TAP_DMA_CMD_MEM_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CPU2TAP_DMA_CMD_MEM_CONTROL.
 */
#define READ_TOP_CPU2TAP_DMA_CMD_MEM_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_CPU2TAP_DMA_CMD_MEM_CONTROLr_BLKACC,8,TOP_CPU2TAP_DMA_CMD_MEM_CONTROLr_OFFSET,0,(r._top_cpu2tap_dma_cmd_mem_control), 1)
#define WRITE_TOP_CPU2TAP_DMA_CMD_MEM_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_CPU2TAP_DMA_CMD_MEM_CONTROLr_BLKACC,8,TOP_CPU2TAP_DMA_CMD_MEM_CONTROLr_OFFSET,0,&(r._top_cpu2tap_dma_cmd_mem_control), 1)

/*******************************************************************************
 * End of 'TOP_CPU2TAP_DMA_CMD_MEM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_CPU2TAP_DMA_CMD_MEM_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CPU2TAP_DMA_CMD_MEM_STATUS.
 */
#define READ_TOP_CPU2TAP_DMA_CMD_MEM_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_CPU2TAP_DMA_CMD_MEM_STATUSr_BLKACC,8,TOP_CPU2TAP_DMA_CMD_MEM_STATUSr_OFFSET,0,(r._top_cpu2tap_dma_cmd_mem_status), 1)
#define WRITE_TOP_CPU2TAP_DMA_CMD_MEM_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_CPU2TAP_DMA_CMD_MEM_STATUSr_BLKACC,8,TOP_CPU2TAP_DMA_CMD_MEM_STATUSr_OFFSET,0,&(r._top_cpu2tap_dma_cmd_mem_status), 1)

/*******************************************************************************
 * End of 'TOP_CPU2TAP_DMA_CMD_MEM_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_CPU2TAP_DMA_MEMORY_DEBUG_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CPU2TAP_DMA_MEMORY_DEBUG_STATUS.
 */
#define READ_TOP_CPU2TAP_DMA_MEMORY_DEBUG_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_CPU2TAP_DMA_MEMORY_DEBUG_STATUSr_BLKACC,8,TOP_CPU2TAP_DMA_MEMORY_DEBUG_STATUSr_OFFSET,0,(r._top_cpu2tap_dma_memory_debug_status), 1)
#define WRITE_TOP_CPU2TAP_DMA_MEMORY_DEBUG_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_CPU2TAP_DMA_MEMORY_DEBUG_STATUSr_BLKACC,8,TOP_CPU2TAP_DMA_MEMORY_DEBUG_STATUSr_OFFSET,0,&(r._top_cpu2tap_dma_memory_debug_status), 1)

/*******************************************************************************
 * End of 'TOP_CPU2TAP_DMA_MEMORY_DEBUG_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_CPU2TAP_DMA_MEM_DEBUG_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CPU2TAP_DMA_MEM_DEBUG_CONTROL.
 */
#define READ_TOP_CPU2TAP_DMA_MEM_DEBUG_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_CPU2TAP_DMA_MEM_DEBUG_CONTROLr_BLKACC,8,TOP_CPU2TAP_DMA_MEM_DEBUG_CONTROLr_OFFSET,0,(r._top_cpu2tap_dma_mem_debug_control), 1)
#define WRITE_TOP_CPU2TAP_DMA_MEM_DEBUG_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_CPU2TAP_DMA_MEM_DEBUG_CONTROLr_BLKACC,8,TOP_CPU2TAP_DMA_MEM_DEBUG_CONTROLr_OFFSET,0,&(r._top_cpu2tap_dma_mem_debug_control), 1)

/*******************************************************************************
 * End of 'TOP_CPU2TAP_DMA_MEM_DEBUG_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  TOP_CPU2TAP_DMA_RESULT_ERROR_MEM
 * BLOCKS:   TOP
 * SIZE:     128
 */
/*
 * These macros can be used to access TOP_CPU2TAP_DMA_RESULT_ERROR_MEM.
 */
#define READ_TOP_CPU2TAP_DMA_RESULT_ERROR_MEMm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,TOP_CPU2TAP_DMA_RESULT_ERROR_MEMm_BLKACC,8,n,0,TOP_CPU2TAP_DMA_RESULT_ERROR_MEMm_OFFSET,i,(m._top_cpu2tap_dma_result_error_mem),4)
#define WRITE_TOP_CPU2TAP_DMA_RESULT_ERROR_MEMm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,TOP_CPU2TAP_DMA_RESULT_ERROR_MEMm_BLKACC,8,n,0,TOP_CPU2TAP_DMA_RESULT_ERROR_MEMm_OFFSET,i,&(m._top_cpu2tap_dma_result_error_mem),4)
#define WRITE_TOP_CPU2TAP_DMA_RESULT_ERROR_MEMm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,TOP_CPU2TAP_DMA_RESULT_ERROR_MEMm_BLKACC,8,-1,0,TOP_CPU2TAP_DMA_RESULT_ERROR_MEMm_OFFSET,i,&(m._top_cpu2tap_dma_result_error_mem),4)

/*******************************************************************************
 * End of 'TOP_CPU2TAP_DMA_RESULT_ERROR_MEMm'
 */




/*******************************************************************************
 * REGISTER:  TOP_CPU2TAP_MEM_TM
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CPU2TAP_MEM_TM.
 */
#define READ_TOP_CPU2TAP_MEM_TMr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_CPU2TAP_MEM_TMr_BLKACC,8,TOP_CPU2TAP_MEM_TMr_OFFSET,0,(r._top_cpu2tap_mem_tm), 1)
#define WRITE_TOP_CPU2TAP_MEM_TMr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_CPU2TAP_MEM_TMr_BLKACC,8,TOP_CPU2TAP_MEM_TMr_OFFSET,0,&(r._top_cpu2tap_mem_tm), 1)

/*******************************************************************************
 * End of 'TOP_CPU2TAP_MEM_TMr'
 */




/*******************************************************************************
 * REGISTER:  TOP_DEV_REV_ID
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_DEV_REV_ID.
 */
#define READ_TOP_DEV_REV_IDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_DEV_REV_IDr_BLKACC,8,TOP_DEV_REV_IDr_OFFSET,0,(r._top_dev_rev_id), 1)
#define WRITE_TOP_DEV_REV_IDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_DEV_REV_IDr_BLKACC,8,TOP_DEV_REV_IDr_OFFSET,0,&(r._top_dev_rev_id), 1)

/*******************************************************************************
 * End of 'TOP_DEV_REV_IDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_EP_CLOCK_GATING_DISABLE_REG
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_EP_CLOCK_GATING_DISABLE_REG.
 */
#define READ_TOP_EP_CLOCK_GATING_DISABLE_REGr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_EP_CLOCK_GATING_DISABLE_REGr_BLKACC,8,TOP_EP_CLOCK_GATING_DISABLE_REGr_OFFSET,0,(r._top_ep_clock_gating_disable_reg), 1)
#define WRITE_TOP_EP_CLOCK_GATING_DISABLE_REGr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_EP_CLOCK_GATING_DISABLE_REGr_BLKACC,8,TOP_EP_CLOCK_GATING_DISABLE_REGr_OFFSET,0,&(r._top_ep_clock_gating_disable_reg), 1)

/*******************************************************************************
 * End of 'TOP_EP_CLOCK_GATING_DISABLE_REGr'
 */




/*******************************************************************************
 * REGISTER:  TOP_FUNC_DEBUG_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_FUNC_DEBUG_STATUS_0.
 */
#define READ_TOP_FUNC_DEBUG_STATUS_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_FUNC_DEBUG_STATUS_0r_BLKACC,8,TOP_FUNC_DEBUG_STATUS_0r_OFFSET,0,(r._top_func_debug_status_0), 1)
#define WRITE_TOP_FUNC_DEBUG_STATUS_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_FUNC_DEBUG_STATUS_0r_BLKACC,8,TOP_FUNC_DEBUG_STATUS_0r_OFFSET,0,&(r._top_func_debug_status_0), 1)

/*******************************************************************************
 * End of 'TOP_FUNC_DEBUG_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_FUNC_DEBUG_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_FUNC_DEBUG_STATUS_1.
 */
#define READ_TOP_FUNC_DEBUG_STATUS_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_FUNC_DEBUG_STATUS_1r_BLKACC,8,TOP_FUNC_DEBUG_STATUS_1r_OFFSET,0,(r._top_func_debug_status_1), 1)
#define WRITE_TOP_FUNC_DEBUG_STATUS_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_FUNC_DEBUG_STATUS_1r_BLKACC,8,TOP_FUNC_DEBUG_STATUS_1r_OFFSET,0,&(r._top_func_debug_status_1), 1)

/*******************************************************************************
 * End of 'TOP_FUNC_DEBUG_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_FUNC_DEBUG_STATUS_SEL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_FUNC_DEBUG_STATUS_SEL.
 */
#define READ_TOP_FUNC_DEBUG_STATUS_SELr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_FUNC_DEBUG_STATUS_SELr_BLKACC,8,TOP_FUNC_DEBUG_STATUS_SELr_OFFSET,0,(r._top_func_debug_status_sel), 1)
#define WRITE_TOP_FUNC_DEBUG_STATUS_SELr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_FUNC_DEBUG_STATUS_SELr_BLKACC,8,TOP_FUNC_DEBUG_STATUS_SELr_OFFSET,0,&(r._top_func_debug_status_sel), 1)

/*******************************************************************************
 * End of 'TOP_FUNC_DEBUG_STATUS_SELr'
 */




/*******************************************************************************
 * REGISTER:  TOP_HALF_MODE_CTRL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_HALF_MODE_CTRL.
 */
#define READ_TOP_HALF_MODE_CTRLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_HALF_MODE_CTRLr_BLKACC,8,TOP_HALF_MODE_CTRLr_OFFSET,0,(r._top_half_mode_ctrl), 1)
#define WRITE_TOP_HALF_MODE_CTRLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_HALF_MODE_CTRLr_BLKACC,8,TOP_HALF_MODE_CTRLr_OFFSET,0,&(r._top_half_mode_ctrl), 1)

/*******************************************************************************
 * End of 'TOP_HALF_MODE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_HW_TAP_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_HW_TAP_CONTROL.
 */
#define READ_TOP_HW_TAP_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_HW_TAP_CONTROLr_BLKACC,8,TOP_HW_TAP_CONTROLr_OFFSET,0,(r._top_hw_tap_control), 1)
#define WRITE_TOP_HW_TAP_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_HW_TAP_CONTROLr_BLKACC,8,TOP_HW_TAP_CONTROLr_OFFSET,0,&(r._top_hw_tap_control), 1)

/*******************************************************************************
 * End of 'TOP_HW_TAP_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_HW_TAP_MEM_DEBUG
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_HW_TAP_MEM_DEBUG.
 */
#define READ_TOP_HW_TAP_MEM_DEBUGr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_HW_TAP_MEM_DEBUGr_BLKACC,8,TOP_HW_TAP_MEM_DEBUGr_OFFSET,0,(r._top_hw_tap_mem_debug), 1)
#define WRITE_TOP_HW_TAP_MEM_DEBUGr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_HW_TAP_MEM_DEBUGr_BLKACC,8,TOP_HW_TAP_MEM_DEBUGr_OFFSET,0,&(r._top_hw_tap_mem_debug), 1)

/*******************************************************************************
 * End of 'TOP_HW_TAP_MEM_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  TOP_HW_TAP_MEM_ECC_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_HW_TAP_MEM_ECC_CTRL_0.
 */
#define READ_TOP_HW_TAP_MEM_ECC_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_HW_TAP_MEM_ECC_CTRL_0r_BLKACC,8,TOP_HW_TAP_MEM_ECC_CTRL_0r_OFFSET,0,(r._top_hw_tap_mem_ecc_ctrl_0), 1)
#define WRITE_TOP_HW_TAP_MEM_ECC_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_HW_TAP_MEM_ECC_CTRL_0r_BLKACC,8,TOP_HW_TAP_MEM_ECC_CTRL_0r_OFFSET,0,&(r._top_hw_tap_mem_ecc_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_HW_TAP_MEM_ECC_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_HW_TAP_MEM_ECC_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_HW_TAP_MEM_ECC_CTRL_1.
 */
#define READ_TOP_HW_TAP_MEM_ECC_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_HW_TAP_MEM_ECC_CTRL_1r_BLKACC,8,TOP_HW_TAP_MEM_ECC_CTRL_1r_OFFSET,0,(r._top_hw_tap_mem_ecc_ctrl_1), 1)
#define WRITE_TOP_HW_TAP_MEM_ECC_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_HW_TAP_MEM_ECC_CTRL_1r_BLKACC,8,TOP_HW_TAP_MEM_ECC_CTRL_1r_OFFSET,0,&(r._top_hw_tap_mem_ecc_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_HW_TAP_MEM_ECC_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_HW_TAP_MEM_ECC_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_HW_TAP_MEM_ECC_STATUS.
 */
#define READ_TOP_HW_TAP_MEM_ECC_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_HW_TAP_MEM_ECC_STATUSr_BLKACC,8,TOP_HW_TAP_MEM_ECC_STATUSr_OFFSET,0,(r._top_hw_tap_mem_ecc_status), 1)
#define WRITE_TOP_HW_TAP_MEM_ECC_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_HW_TAP_MEM_ECC_STATUSr_BLKACC,8,TOP_HW_TAP_MEM_ECC_STATUSr_OFFSET,0,&(r._top_hw_tap_mem_ecc_status), 1)

/*******************************************************************************
 * End of 'TOP_HW_TAP_MEM_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_HW_TAP_READ_VALID_DEBUG_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_HW_TAP_READ_VALID_DEBUG_STATUS.
 */
#define READ_TOP_HW_TAP_READ_VALID_DEBUG_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_HW_TAP_READ_VALID_DEBUG_STATUSr_BLKACC,8,TOP_HW_TAP_READ_VALID_DEBUG_STATUSr_OFFSET,0,(r._top_hw_tap_read_valid_debug_status), 1)
#define WRITE_TOP_HW_TAP_READ_VALID_DEBUG_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_HW_TAP_READ_VALID_DEBUG_STATUSr_BLKACC,8,TOP_HW_TAP_READ_VALID_DEBUG_STATUSr_OFFSET,0,&(r._top_hw_tap_read_valid_debug_status), 1)

/*******************************************************************************
 * End of 'TOP_HW_TAP_READ_VALID_DEBUG_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_INT_REV_ID_REG
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_INT_REV_ID_REG.
 */
#define READ_TOP_INT_REV_ID_REGr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_INT_REV_ID_REGr_BLKACC,8,TOP_INT_REV_ID_REGr_OFFSET,0,(r._top_int_rev_id_reg), 1)
#define WRITE_TOP_INT_REV_ID_REGr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_INT_REV_ID_REGr_BLKACC,8,TOP_INT_REV_ID_REGr_OFFSET,0,&(r._top_int_rev_id_reg), 1)

/*******************************************************************************
 * End of 'TOP_INT_REV_ID_REGr'
 */




/*******************************************************************************
 * REGISTER:  TOP_IPROC_PLL_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_IPROC_PLL_CTRL_0.
 */
#define READ_TOP_IPROC_PLL_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_IPROC_PLL_CTRL_0r_BLKACC,8,TOP_IPROC_PLL_CTRL_0r_OFFSET,0,(r._top_iproc_pll_ctrl_0), 1)
#define WRITE_TOP_IPROC_PLL_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_IPROC_PLL_CTRL_0r_BLKACC,8,TOP_IPROC_PLL_CTRL_0r_OFFSET,0,&(r._top_iproc_pll_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_IPROC_PLL_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_IPROC_PLL_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_IPROC_PLL_CTRL_1.
 */
#define READ_TOP_IPROC_PLL_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_IPROC_PLL_CTRL_1r_BLKACC,8,TOP_IPROC_PLL_CTRL_1r_OFFSET,0,(r._top_iproc_pll_ctrl_1), 1)
#define WRITE_TOP_IPROC_PLL_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_IPROC_PLL_CTRL_1r_BLKACC,8,TOP_IPROC_PLL_CTRL_1r_OFFSET,0,&(r._top_iproc_pll_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_IPROC_PLL_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_IPROC_PLL_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_IPROC_PLL_CTRL_2.
 */
#define READ_TOP_IPROC_PLL_CTRL_2r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_IPROC_PLL_CTRL_2r_BLKACC,8,TOP_IPROC_PLL_CTRL_2r_OFFSET,0,(r._top_iproc_pll_ctrl_2), 1)
#define WRITE_TOP_IPROC_PLL_CTRL_2r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_IPROC_PLL_CTRL_2r_BLKACC,8,TOP_IPROC_PLL_CTRL_2r_OFFSET,0,&(r._top_iproc_pll_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_IPROC_PLL_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_IPROC_PLL_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_IPROC_PLL_CTRL_3.
 */
#define READ_TOP_IPROC_PLL_CTRL_3r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_IPROC_PLL_CTRL_3r_BLKACC,8,TOP_IPROC_PLL_CTRL_3r_OFFSET,0,(r._top_iproc_pll_ctrl_3), 1)
#define WRITE_TOP_IPROC_PLL_CTRL_3r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_IPROC_PLL_CTRL_3r_BLKACC,8,TOP_IPROC_PLL_CTRL_3r_OFFSET,0,&(r._top_iproc_pll_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_IPROC_PLL_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_IPROC_PLL_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_IPROC_PLL_CTRL_4.
 */
#define READ_TOP_IPROC_PLL_CTRL_4r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_IPROC_PLL_CTRL_4r_BLKACC,8,TOP_IPROC_PLL_CTRL_4r_OFFSET,0,(r._top_iproc_pll_ctrl_4), 1)
#define WRITE_TOP_IPROC_PLL_CTRL_4r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_IPROC_PLL_CTRL_4r_BLKACC,8,TOP_IPROC_PLL_CTRL_4r_OFFSET,0,&(r._top_iproc_pll_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_IPROC_PLL_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_IPROC_PLL_CTRL_5
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_IPROC_PLL_CTRL_5.
 */
#define READ_TOP_IPROC_PLL_CTRL_5r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_IPROC_PLL_CTRL_5r_BLKACC,8,TOP_IPROC_PLL_CTRL_5r_OFFSET,0,(r._top_iproc_pll_ctrl_5), 1)
#define WRITE_TOP_IPROC_PLL_CTRL_5r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_IPROC_PLL_CTRL_5r_BLKACC,8,TOP_IPROC_PLL_CTRL_5r_OFFSET,0,&(r._top_iproc_pll_ctrl_5), 1)

/*******************************************************************************
 * End of 'TOP_IPROC_PLL_CTRL_5r'
 */




/*******************************************************************************
 * REGISTER:  TOP_IPROC_PLL_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_IPROC_PLL_STATUS.
 */
#define READ_TOP_IPROC_PLL_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_IPROC_PLL_STATUSr_BLKACC,8,TOP_IPROC_PLL_STATUSr_OFFSET,0,(r._top_iproc_pll_status), 1)
#define WRITE_TOP_IPROC_PLL_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_IPROC_PLL_STATUSr_BLKACC,8,TOP_IPROC_PLL_STATUSr_OFFSET,0,&(r._top_iproc_pll_status), 1)

/*******************************************************************************
 * End of 'TOP_IPROC_PLL_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_IP_CLOCK_GATING_DISABLE_REG
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_IP_CLOCK_GATING_DISABLE_REG.
 */
#define READ_TOP_IP_CLOCK_GATING_DISABLE_REGr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_IP_CLOCK_GATING_DISABLE_REGr_BLKACC,8,TOP_IP_CLOCK_GATING_DISABLE_REGr_OFFSET,0,(r._top_ip_clock_gating_disable_reg), 1)
#define WRITE_TOP_IP_CLOCK_GATING_DISABLE_REGr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_IP_CLOCK_GATING_DISABLE_REGr_BLKACC,8,TOP_IP_CLOCK_GATING_DISABLE_REGr_OFFSET,0,&(r._top_ip_clock_gating_disable_reg), 1)

/*******************************************************************************
 * End of 'TOP_IP_CLOCK_GATING_DISABLE_REGr'
 */




/*******************************************************************************
 * REGISTER:  TOP_L1_RCVD_CLK_VALID_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_L1_RCVD_CLK_VALID_STATUS_0.
 */
#define READ_TOP_L1_RCVD_CLK_VALID_STATUS_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_L1_RCVD_CLK_VALID_STATUS_0r_BLKACC,8,TOP_L1_RCVD_CLK_VALID_STATUS_0r_OFFSET,0,(r._top_l1_rcvd_clk_valid_status_0), 1)
#define WRITE_TOP_L1_RCVD_CLK_VALID_STATUS_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_L1_RCVD_CLK_VALID_STATUS_0r_BLKACC,8,TOP_L1_RCVD_CLK_VALID_STATUS_0r_OFFSET,0,&(r._top_l1_rcvd_clk_valid_status_0), 1)

/*******************************************************************************
 * End of 'TOP_L1_RCVD_CLK_VALID_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_L1_RCVD_CLK_VALID_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_L1_RCVD_CLK_VALID_STATUS_1.
 */
#define READ_TOP_L1_RCVD_CLK_VALID_STATUS_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_L1_RCVD_CLK_VALID_STATUS_1r_BLKACC,8,TOP_L1_RCVD_CLK_VALID_STATUS_1r_OFFSET,0,(r._top_l1_rcvd_clk_valid_status_1), 1)
#define WRITE_TOP_L1_RCVD_CLK_VALID_STATUS_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_L1_RCVD_CLK_VALID_STATUS_1r_BLKACC,8,TOP_L1_RCVD_CLK_VALID_STATUS_1r_OFFSET,0,&(r._top_l1_rcvd_clk_valid_status_1), 1)

/*******************************************************************************
 * End of 'TOP_L1_RCVD_CLK_VALID_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_L1_RCVD_CLK_VALID_STATUS_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_L1_RCVD_CLK_VALID_STATUS_2.
 */
#define READ_TOP_L1_RCVD_CLK_VALID_STATUS_2r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_L1_RCVD_CLK_VALID_STATUS_2r_BLKACC,8,TOP_L1_RCVD_CLK_VALID_STATUS_2r_OFFSET,0,(r._top_l1_rcvd_clk_valid_status_2), 1)
#define WRITE_TOP_L1_RCVD_CLK_VALID_STATUS_2r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_L1_RCVD_CLK_VALID_STATUS_2r_BLKACC,8,TOP_L1_RCVD_CLK_VALID_STATUS_2r_OFFSET,0,&(r._top_l1_rcvd_clk_valid_status_2), 1)

/*******************************************************************************
 * End of 'TOP_L1_RCVD_CLK_VALID_STATUS_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_L1_RCVD_CLK_VALID_STATUS_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_L1_RCVD_CLK_VALID_STATUS_3.
 */
#define READ_TOP_L1_RCVD_CLK_VALID_STATUS_3r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_L1_RCVD_CLK_VALID_STATUS_3r_BLKACC,8,TOP_L1_RCVD_CLK_VALID_STATUS_3r_OFFSET,0,(r._top_l1_rcvd_clk_valid_status_3), 1)
#define WRITE_TOP_L1_RCVD_CLK_VALID_STATUS_3r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_L1_RCVD_CLK_VALID_STATUS_3r_BLKACC,8,TOP_L1_RCVD_CLK_VALID_STATUS_3r_OFFSET,0,&(r._top_l1_rcvd_clk_valid_status_3), 1)

/*******************************************************************************
 * End of 'TOP_L1_RCVD_CLK_VALID_STATUS_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_LINK_STATUS_CTRL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_LINK_STATUS_CTRL.
 */
#define READ_TOP_LINK_STATUS_CTRLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_LINK_STATUS_CTRLr_BLKACC,8,TOP_LINK_STATUS_CTRLr_OFFSET,0,(r._top_link_status_ctrl), 1)
#define WRITE_TOP_LINK_STATUS_CTRLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_LINK_STATUS_CTRLr_BLKACC,8,TOP_LINK_STATUS_CTRLr_OFFSET,0,&(r._top_link_status_ctrl), 1)

/*******************************************************************************
 * End of 'TOP_LINK_STATUS_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_MISC_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_MISC_CONTROL.
 */
#define READ_TOP_MISC_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_MISC_CONTROLr_BLKACC,8,TOP_MISC_CONTROLr_OFFSET,0,(r._top_misc_control), 1)
#define WRITE_TOP_MISC_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_MISC_CONTROLr_BLKACC,8,TOP_MISC_CONTROLr_OFFSET,0,&(r._top_misc_control), 1)

/*******************************************************************************
 * End of 'TOP_MISC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_MISC_CONTROL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_MISC_CONTROL_1.
 */
#define READ_TOP_MISC_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_MISC_CONTROL_1r_BLKACC,8,TOP_MISC_CONTROL_1r_OFFSET,0,(r._top_misc_control_1), 1)
#define WRITE_TOP_MISC_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_MISC_CONTROL_1r_BLKACC,8,TOP_MISC_CONTROL_1r_OFFSET,0,&(r._top_misc_control_1), 1)

/*******************************************************************************
 * End of 'TOP_MISC_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_MISC_CONTROL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_MISC_CONTROL_2.
 */
#define READ_TOP_MISC_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_MISC_CONTROL_2r_BLKACC,8,TOP_MISC_CONTROL_2r_OFFSET,0,(r._top_misc_control_2), 1)
#define WRITE_TOP_MISC_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_MISC_CONTROL_2r_BLKACC,8,TOP_MISC_CONTROL_2r_OFFSET,0,&(r._top_misc_control_2), 1)

/*******************************************************************************
 * End of 'TOP_MISC_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_MISC_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_MISC_STATUS.
 */
#define READ_TOP_MISC_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_MISC_STATUSr_BLKACC,8,TOP_MISC_STATUSr_OFFSET,0,(r._top_misc_status), 1)
#define WRITE_TOP_MISC_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_MISC_STATUSr_BLKACC,8,TOP_MISC_STATUSr_OFFSET,0,&(r._top_misc_status), 1)

/*******************************************************************************
 * End of 'TOP_MISC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_OSC_COUNT_STAT
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_OSC_COUNT_STAT.
 */
#define READ_TOP_OSC_COUNT_STATr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_OSC_COUNT_STATr_BLKACC,8,TOP_OSC_COUNT_STATr_OFFSET,0,(r._top_osc_count_stat), 1)
#define WRITE_TOP_OSC_COUNT_STATr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_OSC_COUNT_STATr_BLKACC,8,TOP_OSC_COUNT_STATr_OFFSET,0,&(r._top_osc_count_stat), 1)

/*******************************************************************************
 * End of 'TOP_OSC_COUNT_STATr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PLLS_CMN_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PLLS_CMN_CTRL_0.
 */
#define READ_TOP_PLLS_CMN_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PLLS_CMN_CTRL_0r_BLKACC,8,TOP_PLLS_CMN_CTRL_0r_OFFSET,0,(r._top_plls_cmn_ctrl_0), 1)
#define WRITE_TOP_PLLS_CMN_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PLLS_CMN_CTRL_0r_BLKACC,8,TOP_PLLS_CMN_CTRL_0r_OFFSET,0,&(r._top_plls_cmn_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PLLS_CMN_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PLLS_CMN_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PLLS_CMN_CTRL_1.
 */
#define READ_TOP_PLLS_CMN_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PLLS_CMN_CTRL_1r_BLKACC,8,TOP_PLLS_CMN_CTRL_1r_OFFSET,0,(r._top_plls_cmn_ctrl_1), 1)
#define WRITE_TOP_PLLS_CMN_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PLLS_CMN_CTRL_1r_BLKACC,8,TOP_PLLS_CMN_CTRL_1r_OFFSET,0,&(r._top_plls_cmn_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PLLS_CMN_CTRL_1r'
 */




/*******************************************************************************
 * MEMORY:  TOP_PM_FDR_MEM
 * BLOCKS:   TOP
 * SIZE:     256
 */
/*
 * These macros can be used to access TOP_PM_FDR_MEM.
 */
#define READ_TOP_PM_FDR_MEMm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,TOP_PM_FDR_MEMm_BLKACC,8,n,0,TOP_PM_FDR_MEMm_OFFSET,i,(m._top_pm_fdr_mem),8)
#define WRITE_TOP_PM_FDR_MEMm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,TOP_PM_FDR_MEMm_BLKACC,8,n,0,TOP_PM_FDR_MEMm_OFFSET,i,&(m._top_pm_fdr_mem),8)
#define WRITE_TOP_PM_FDR_MEMm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,TOP_PM_FDR_MEMm_BLKACC,8,-1,0,TOP_PM_FDR_MEMm_OFFSET,i,&(m._top_pm_fdr_mem),8)

/*******************************************************************************
 * End of 'TOP_PM_FDR_MEMm'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_PLL_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_PLL_CTRL_0.
 */
#define READ_TOP_PP_PLL_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_PLL_CTRL_0r_BLKACC,8,TOP_PP_PLL_CTRL_0r_OFFSET,0,(r._top_pp_pll_ctrl_0), 1)
#define WRITE_TOP_PP_PLL_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_PLL_CTRL_0r_BLKACC,8,TOP_PP_PLL_CTRL_0r_OFFSET,0,&(r._top_pp_pll_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PP_PLL_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_PLL_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_PLL_CTRL_1.
 */
#define READ_TOP_PP_PLL_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_PLL_CTRL_1r_BLKACC,8,TOP_PP_PLL_CTRL_1r_OFFSET,0,(r._top_pp_pll_ctrl_1), 1)
#define WRITE_TOP_PP_PLL_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_PLL_CTRL_1r_BLKACC,8,TOP_PP_PLL_CTRL_1r_OFFSET,0,&(r._top_pp_pll_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PP_PLL_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_PLL_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_PLL_CTRL_2.
 */
#define READ_TOP_PP_PLL_CTRL_2r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_PLL_CTRL_2r_BLKACC,8,TOP_PP_PLL_CTRL_2r_OFFSET,0,(r._top_pp_pll_ctrl_2), 1)
#define WRITE_TOP_PP_PLL_CTRL_2r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_PLL_CTRL_2r_BLKACC,8,TOP_PP_PLL_CTRL_2r_OFFSET,0,&(r._top_pp_pll_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_PP_PLL_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_PLL_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_PLL_CTRL_3.
 */
#define READ_TOP_PP_PLL_CTRL_3r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_PLL_CTRL_3r_BLKACC,8,TOP_PP_PLL_CTRL_3r_OFFSET,0,(r._top_pp_pll_ctrl_3), 1)
#define WRITE_TOP_PP_PLL_CTRL_3r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_PLL_CTRL_3r_BLKACC,8,TOP_PP_PLL_CTRL_3r_OFFSET,0,&(r._top_pp_pll_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_PP_PLL_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_PLL_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_PLL_CTRL_4.
 */
#define READ_TOP_PP_PLL_CTRL_4r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_PLL_CTRL_4r_BLKACC,8,TOP_PP_PLL_CTRL_4r_OFFSET,0,(r._top_pp_pll_ctrl_4), 1)
#define WRITE_TOP_PP_PLL_CTRL_4r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_PLL_CTRL_4r_BLKACC,8,TOP_PP_PLL_CTRL_4r_OFFSET,0,&(r._top_pp_pll_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_PP_PLL_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_PLL_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_PLL_STATUS.
 */
#define READ_TOP_PP_PLL_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_PLL_STATUSr_BLKACC,8,TOP_PP_PLL_STATUSr_OFFSET,0,(r._top_pp_pll_status), 1)
#define WRITE_TOP_PP_PLL_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_PLL_STATUSr_BLKACC,8,TOP_PP_PLL_STATUSr_OFFSET,0,&(r._top_pp_pll_status), 1)

/*******************************************************************************
 * End of 'TOP_PP_PLL_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_0.
 */
#define READ_TOP_PP_STRAP_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_0r_BLKACC,8,TOP_PP_STRAP_0r_OFFSET,0,(r._top_pp_strap_0), 1)
#define WRITE_TOP_PP_STRAP_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_0r_BLKACC,8,TOP_PP_STRAP_0r_OFFSET,0,&(r._top_pp_strap_0), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_10
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_10.
 */
#define READ_TOP_PP_STRAP_10r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_10r_BLKACC,8,TOP_PP_STRAP_10r_OFFSET,0,(r._top_pp_strap_10), 1)
#define WRITE_TOP_PP_STRAP_10r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_10r_BLKACC,8,TOP_PP_STRAP_10r_OFFSET,0,&(r._top_pp_strap_10), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_10r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_11
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_11.
 */
#define READ_TOP_PP_STRAP_11r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_11r_BLKACC,8,TOP_PP_STRAP_11r_OFFSET,0,(r._top_pp_strap_11), 1)
#define WRITE_TOP_PP_STRAP_11r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_11r_BLKACC,8,TOP_PP_STRAP_11r_OFFSET,0,&(r._top_pp_strap_11), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_11r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_12
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_12.
 */
#define READ_TOP_PP_STRAP_12r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_12r_BLKACC,8,TOP_PP_STRAP_12r_OFFSET,0,(r._top_pp_strap_12), 1)
#define WRITE_TOP_PP_STRAP_12r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_12r_BLKACC,8,TOP_PP_STRAP_12r_OFFSET,0,&(r._top_pp_strap_12), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_12r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_13
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_13.
 */
#define READ_TOP_PP_STRAP_13r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_13r_BLKACC,8,TOP_PP_STRAP_13r_OFFSET,0,(r._top_pp_strap_13), 1)
#define WRITE_TOP_PP_STRAP_13r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_13r_BLKACC,8,TOP_PP_STRAP_13r_OFFSET,0,&(r._top_pp_strap_13), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_13r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_14
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_14.
 */
#define READ_TOP_PP_STRAP_14r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_14r_BLKACC,8,TOP_PP_STRAP_14r_OFFSET,0,(r._top_pp_strap_14), 1)
#define WRITE_TOP_PP_STRAP_14r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_14r_BLKACC,8,TOP_PP_STRAP_14r_OFFSET,0,&(r._top_pp_strap_14), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_14r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_15
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_15.
 */
#define READ_TOP_PP_STRAP_15r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_15r_BLKACC,8,TOP_PP_STRAP_15r_OFFSET,0,(r._top_pp_strap_15), 1)
#define WRITE_TOP_PP_STRAP_15r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_15r_BLKACC,8,TOP_PP_STRAP_15r_OFFSET,0,&(r._top_pp_strap_15), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_15r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_16
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_16.
 */
#define READ_TOP_PP_STRAP_16r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_16r_BLKACC,8,TOP_PP_STRAP_16r_OFFSET,0,(r._top_pp_strap_16), 1)
#define WRITE_TOP_PP_STRAP_16r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_16r_BLKACC,8,TOP_PP_STRAP_16r_OFFSET,0,&(r._top_pp_strap_16), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_16r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_17
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_17.
 */
#define READ_TOP_PP_STRAP_17r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_17r_BLKACC,8,TOP_PP_STRAP_17r_OFFSET,0,(r._top_pp_strap_17), 1)
#define WRITE_TOP_PP_STRAP_17r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_17r_BLKACC,8,TOP_PP_STRAP_17r_OFFSET,0,&(r._top_pp_strap_17), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_17r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_1.
 */
#define READ_TOP_PP_STRAP_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_1r_BLKACC,8,TOP_PP_STRAP_1r_OFFSET,0,(r._top_pp_strap_1), 1)
#define WRITE_TOP_PP_STRAP_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_1r_BLKACC,8,TOP_PP_STRAP_1r_OFFSET,0,&(r._top_pp_strap_1), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_2.
 */
#define READ_TOP_PP_STRAP_2r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_2r_BLKACC,8,TOP_PP_STRAP_2r_OFFSET,0,(r._top_pp_strap_2), 1)
#define WRITE_TOP_PP_STRAP_2r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_2r_BLKACC,8,TOP_PP_STRAP_2r_OFFSET,0,&(r._top_pp_strap_2), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_3.
 */
#define READ_TOP_PP_STRAP_3r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_3r_BLKACC,8,TOP_PP_STRAP_3r_OFFSET,0,(r._top_pp_strap_3), 1)
#define WRITE_TOP_PP_STRAP_3r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_3r_BLKACC,8,TOP_PP_STRAP_3r_OFFSET,0,&(r._top_pp_strap_3), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_4.
 */
#define READ_TOP_PP_STRAP_4r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_4r_BLKACC,8,TOP_PP_STRAP_4r_OFFSET,0,(r._top_pp_strap_4), 1)
#define WRITE_TOP_PP_STRAP_4r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_4r_BLKACC,8,TOP_PP_STRAP_4r_OFFSET,0,&(r._top_pp_strap_4), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_5
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_5.
 */
#define READ_TOP_PP_STRAP_5r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_5r_BLKACC,8,TOP_PP_STRAP_5r_OFFSET,0,(r._top_pp_strap_5), 1)
#define WRITE_TOP_PP_STRAP_5r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_5r_BLKACC,8,TOP_PP_STRAP_5r_OFFSET,0,&(r._top_pp_strap_5), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_5r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_6
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_6.
 */
#define READ_TOP_PP_STRAP_6r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_6r_BLKACC,8,TOP_PP_STRAP_6r_OFFSET,0,(r._top_pp_strap_6), 1)
#define WRITE_TOP_PP_STRAP_6r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_6r_BLKACC,8,TOP_PP_STRAP_6r_OFFSET,0,&(r._top_pp_strap_6), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_6r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_7
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_7.
 */
#define READ_TOP_PP_STRAP_7r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_7r_BLKACC,8,TOP_PP_STRAP_7r_OFFSET,0,(r._top_pp_strap_7), 1)
#define WRITE_TOP_PP_STRAP_7r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_7r_BLKACC,8,TOP_PP_STRAP_7r_OFFSET,0,&(r._top_pp_strap_7), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_7r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_8
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_8.
 */
#define READ_TOP_PP_STRAP_8r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_8r_BLKACC,8,TOP_PP_STRAP_8r_OFFSET,0,(r._top_pp_strap_8), 1)
#define WRITE_TOP_PP_STRAP_8r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_8r_BLKACC,8,TOP_PP_STRAP_8r_OFFSET,0,&(r._top_pp_strap_8), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_8r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PP_STRAP_9
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PP_STRAP_9.
 */
#define READ_TOP_PP_STRAP_9r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PP_STRAP_9r_BLKACC,8,TOP_PP_STRAP_9r_OFFSET,0,(r._top_pp_strap_9), 1)
#define WRITE_TOP_PP_STRAP_9r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PP_STRAP_9r_BLKACC,8,TOP_PP_STRAP_9r_OFFSET,0,&(r._top_pp_strap_9), 1)

/*******************************************************************************
 * End of 'TOP_PP_STRAP_9r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_0_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_0_CTRL_0.
 */
#define READ_TOP_PVTMON_0_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_0_CTRL_0r_BLKACC,8,TOP_PVTMON_0_CTRL_0r_OFFSET,0,(r._top_pvtmon_0_ctrl_0), 1)
#define WRITE_TOP_PVTMON_0_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_0_CTRL_0r_BLKACC,8,TOP_PVTMON_0_CTRL_0r_OFFSET,0,&(r._top_pvtmon_0_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_0_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_0_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_0_CTRL_1.
 */
#define READ_TOP_PVTMON_0_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_0_CTRL_1r_BLKACC,8,TOP_PVTMON_0_CTRL_1r_OFFSET,0,(r._top_pvtmon_0_ctrl_1), 1)
#define WRITE_TOP_PVTMON_0_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_0_CTRL_1r_BLKACC,8,TOP_PVTMON_0_CTRL_1r_OFFSET,0,&(r._top_pvtmon_0_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_0_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_0_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_0_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_0_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_0_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_0_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_0_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_0_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_0_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_0_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_0_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_0_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_0_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_0_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_0_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_0_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_0_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_0_intr_threshold), 1)
#define WRITE_TOP_PVTMON_0_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_0_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_0_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_0_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_0_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_0_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_0_RESULT_0.
 */
#define READ_TOP_PVTMON_0_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_0_RESULT_0r_BLKACC,8,TOP_PVTMON_0_RESULT_0r_OFFSET,0,(r._top_pvtmon_0_result_0), 1)
#define WRITE_TOP_PVTMON_0_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_0_RESULT_0r_BLKACC,8,TOP_PVTMON_0_RESULT_0r_OFFSET,0,&(r._top_pvtmon_0_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_0_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_0_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_0_RESULT_1.
 */
#define READ_TOP_PVTMON_0_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_0_RESULT_1r_BLKACC,8,TOP_PVTMON_0_RESULT_1r_OFFSET,0,(r._top_pvtmon_0_result_1), 1)
#define WRITE_TOP_PVTMON_0_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_0_RESULT_1r_BLKACC,8,TOP_PVTMON_0_RESULT_1r_OFFSET,0,&(r._top_pvtmon_0_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_0_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_10_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_10_CTRL_0.
 */
#define READ_TOP_PVTMON_10_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_10_CTRL_0r_BLKACC,8,TOP_PVTMON_10_CTRL_0r_OFFSET,0,(r._top_pvtmon_10_ctrl_0), 1)
#define WRITE_TOP_PVTMON_10_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_10_CTRL_0r_BLKACC,8,TOP_PVTMON_10_CTRL_0r_OFFSET,0,&(r._top_pvtmon_10_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_10_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_10_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_10_CTRL_1.
 */
#define READ_TOP_PVTMON_10_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_10_CTRL_1r_BLKACC,8,TOP_PVTMON_10_CTRL_1r_OFFSET,0,(r._top_pvtmon_10_ctrl_1), 1)
#define WRITE_TOP_PVTMON_10_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_10_CTRL_1r_BLKACC,8,TOP_PVTMON_10_CTRL_1r_OFFSET,0,&(r._top_pvtmon_10_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_10_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_10_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_10_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_10_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_10_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_10_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_10_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_10_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_10_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_10_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_10_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_10_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_10_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_10_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_10_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_10_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_10_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_10_intr_threshold), 1)
#define WRITE_TOP_PVTMON_10_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_10_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_10_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_10_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_10_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_10_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_10_RESULT_0.
 */
#define READ_TOP_PVTMON_10_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_10_RESULT_0r_BLKACC,8,TOP_PVTMON_10_RESULT_0r_OFFSET,0,(r._top_pvtmon_10_result_0), 1)
#define WRITE_TOP_PVTMON_10_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_10_RESULT_0r_BLKACC,8,TOP_PVTMON_10_RESULT_0r_OFFSET,0,&(r._top_pvtmon_10_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_10_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_10_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_10_RESULT_1.
 */
#define READ_TOP_PVTMON_10_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_10_RESULT_1r_BLKACC,8,TOP_PVTMON_10_RESULT_1r_OFFSET,0,(r._top_pvtmon_10_result_1), 1)
#define WRITE_TOP_PVTMON_10_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_10_RESULT_1r_BLKACC,8,TOP_PVTMON_10_RESULT_1r_OFFSET,0,&(r._top_pvtmon_10_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_10_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_11_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_11_CTRL_0.
 */
#define READ_TOP_PVTMON_11_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_11_CTRL_0r_BLKACC,8,TOP_PVTMON_11_CTRL_0r_OFFSET,0,(r._top_pvtmon_11_ctrl_0), 1)
#define WRITE_TOP_PVTMON_11_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_11_CTRL_0r_BLKACC,8,TOP_PVTMON_11_CTRL_0r_OFFSET,0,&(r._top_pvtmon_11_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_11_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_11_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_11_CTRL_1.
 */
#define READ_TOP_PVTMON_11_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_11_CTRL_1r_BLKACC,8,TOP_PVTMON_11_CTRL_1r_OFFSET,0,(r._top_pvtmon_11_ctrl_1), 1)
#define WRITE_TOP_PVTMON_11_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_11_CTRL_1r_BLKACC,8,TOP_PVTMON_11_CTRL_1r_OFFSET,0,&(r._top_pvtmon_11_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_11_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_11_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_11_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_11_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_11_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_11_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_11_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_11_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_11_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_11_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_11_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_11_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_11_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_11_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_11_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_11_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_11_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_11_intr_threshold), 1)
#define WRITE_TOP_PVTMON_11_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_11_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_11_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_11_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_11_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_11_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_11_RESULT_0.
 */
#define READ_TOP_PVTMON_11_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_11_RESULT_0r_BLKACC,8,TOP_PVTMON_11_RESULT_0r_OFFSET,0,(r._top_pvtmon_11_result_0), 1)
#define WRITE_TOP_PVTMON_11_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_11_RESULT_0r_BLKACC,8,TOP_PVTMON_11_RESULT_0r_OFFSET,0,&(r._top_pvtmon_11_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_11_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_11_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_11_RESULT_1.
 */
#define READ_TOP_PVTMON_11_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_11_RESULT_1r_BLKACC,8,TOP_PVTMON_11_RESULT_1r_OFFSET,0,(r._top_pvtmon_11_result_1), 1)
#define WRITE_TOP_PVTMON_11_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_11_RESULT_1r_BLKACC,8,TOP_PVTMON_11_RESULT_1r_OFFSET,0,&(r._top_pvtmon_11_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_11_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_12_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_12_CTRL_0.
 */
#define READ_TOP_PVTMON_12_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_12_CTRL_0r_BLKACC,8,TOP_PVTMON_12_CTRL_0r_OFFSET,0,(r._top_pvtmon_12_ctrl_0), 1)
#define WRITE_TOP_PVTMON_12_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_12_CTRL_0r_BLKACC,8,TOP_PVTMON_12_CTRL_0r_OFFSET,0,&(r._top_pvtmon_12_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_12_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_12_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_12_CTRL_1.
 */
#define READ_TOP_PVTMON_12_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_12_CTRL_1r_BLKACC,8,TOP_PVTMON_12_CTRL_1r_OFFSET,0,(r._top_pvtmon_12_ctrl_1), 1)
#define WRITE_TOP_PVTMON_12_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_12_CTRL_1r_BLKACC,8,TOP_PVTMON_12_CTRL_1r_OFFSET,0,&(r._top_pvtmon_12_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_12_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_12_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_12_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_12_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_12_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_12_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_12_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_12_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_12_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_12_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_12_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_12_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_12_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_12_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_12_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_12_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_12_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_12_intr_threshold), 1)
#define WRITE_TOP_PVTMON_12_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_12_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_12_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_12_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_12_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_12_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_12_RESULT_0.
 */
#define READ_TOP_PVTMON_12_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_12_RESULT_0r_BLKACC,8,TOP_PVTMON_12_RESULT_0r_OFFSET,0,(r._top_pvtmon_12_result_0), 1)
#define WRITE_TOP_PVTMON_12_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_12_RESULT_0r_BLKACC,8,TOP_PVTMON_12_RESULT_0r_OFFSET,0,&(r._top_pvtmon_12_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_12_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_12_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_12_RESULT_1.
 */
#define READ_TOP_PVTMON_12_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_12_RESULT_1r_BLKACC,8,TOP_PVTMON_12_RESULT_1r_OFFSET,0,(r._top_pvtmon_12_result_1), 1)
#define WRITE_TOP_PVTMON_12_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_12_RESULT_1r_BLKACC,8,TOP_PVTMON_12_RESULT_1r_OFFSET,0,&(r._top_pvtmon_12_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_12_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_13_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_13_CTRL_0.
 */
#define READ_TOP_PVTMON_13_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_13_CTRL_0r_BLKACC,8,TOP_PVTMON_13_CTRL_0r_OFFSET,0,(r._top_pvtmon_13_ctrl_0), 1)
#define WRITE_TOP_PVTMON_13_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_13_CTRL_0r_BLKACC,8,TOP_PVTMON_13_CTRL_0r_OFFSET,0,&(r._top_pvtmon_13_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_13_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_13_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_13_CTRL_1.
 */
#define READ_TOP_PVTMON_13_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_13_CTRL_1r_BLKACC,8,TOP_PVTMON_13_CTRL_1r_OFFSET,0,(r._top_pvtmon_13_ctrl_1), 1)
#define WRITE_TOP_PVTMON_13_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_13_CTRL_1r_BLKACC,8,TOP_PVTMON_13_CTRL_1r_OFFSET,0,&(r._top_pvtmon_13_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_13_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_13_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_13_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_13_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_13_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_13_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_13_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_13_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_13_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_13_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_13_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_13_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_13_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_13_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_13_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_13_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_13_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_13_intr_threshold), 1)
#define WRITE_TOP_PVTMON_13_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_13_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_13_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_13_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_13_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_13_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_13_RESULT_0.
 */
#define READ_TOP_PVTMON_13_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_13_RESULT_0r_BLKACC,8,TOP_PVTMON_13_RESULT_0r_OFFSET,0,(r._top_pvtmon_13_result_0), 1)
#define WRITE_TOP_PVTMON_13_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_13_RESULT_0r_BLKACC,8,TOP_PVTMON_13_RESULT_0r_OFFSET,0,&(r._top_pvtmon_13_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_13_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_13_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_13_RESULT_1.
 */
#define READ_TOP_PVTMON_13_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_13_RESULT_1r_BLKACC,8,TOP_PVTMON_13_RESULT_1r_OFFSET,0,(r._top_pvtmon_13_result_1), 1)
#define WRITE_TOP_PVTMON_13_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_13_RESULT_1r_BLKACC,8,TOP_PVTMON_13_RESULT_1r_OFFSET,0,&(r._top_pvtmon_13_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_13_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_14_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_14_CTRL_0.
 */
#define READ_TOP_PVTMON_14_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_14_CTRL_0r_BLKACC,8,TOP_PVTMON_14_CTRL_0r_OFFSET,0,(r._top_pvtmon_14_ctrl_0), 1)
#define WRITE_TOP_PVTMON_14_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_14_CTRL_0r_BLKACC,8,TOP_PVTMON_14_CTRL_0r_OFFSET,0,&(r._top_pvtmon_14_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_14_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_14_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_14_CTRL_1.
 */
#define READ_TOP_PVTMON_14_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_14_CTRL_1r_BLKACC,8,TOP_PVTMON_14_CTRL_1r_OFFSET,0,(r._top_pvtmon_14_ctrl_1), 1)
#define WRITE_TOP_PVTMON_14_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_14_CTRL_1r_BLKACC,8,TOP_PVTMON_14_CTRL_1r_OFFSET,0,&(r._top_pvtmon_14_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_14_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_14_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_14_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_14_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_14_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_14_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_14_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_14_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_14_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_14_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_14_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_14_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_14_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_14_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_14_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_14_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_14_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_14_intr_threshold), 1)
#define WRITE_TOP_PVTMON_14_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_14_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_14_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_14_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_14_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_14_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_14_RESULT_0.
 */
#define READ_TOP_PVTMON_14_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_14_RESULT_0r_BLKACC,8,TOP_PVTMON_14_RESULT_0r_OFFSET,0,(r._top_pvtmon_14_result_0), 1)
#define WRITE_TOP_PVTMON_14_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_14_RESULT_0r_BLKACC,8,TOP_PVTMON_14_RESULT_0r_OFFSET,0,&(r._top_pvtmon_14_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_14_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_14_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_14_RESULT_1.
 */
#define READ_TOP_PVTMON_14_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_14_RESULT_1r_BLKACC,8,TOP_PVTMON_14_RESULT_1r_OFFSET,0,(r._top_pvtmon_14_result_1), 1)
#define WRITE_TOP_PVTMON_14_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_14_RESULT_1r_BLKACC,8,TOP_PVTMON_14_RESULT_1r_OFFSET,0,&(r._top_pvtmon_14_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_14_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_15_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_15_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_15_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_15_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_15_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_15_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_15_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_15_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_15_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_15_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_15_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_15_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_15_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_15_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_15_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_15_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_15_intr_threshold), 1)
#define WRITE_TOP_PVTMON_15_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_15_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_15_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_15_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_15_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_15_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_15_RESULT_0.
 */
#define READ_TOP_PVTMON_15_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_15_RESULT_0r_BLKACC,8,TOP_PVTMON_15_RESULT_0r_OFFSET,0,(r._top_pvtmon_15_result_0), 1)
#define WRITE_TOP_PVTMON_15_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_15_RESULT_0r_BLKACC,8,TOP_PVTMON_15_RESULT_0r_OFFSET,0,&(r._top_pvtmon_15_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_15_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_15_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_15_RESULT_1.
 */
#define READ_TOP_PVTMON_15_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_15_RESULT_1r_BLKACC,8,TOP_PVTMON_15_RESULT_1r_OFFSET,0,(r._top_pvtmon_15_result_1), 1)
#define WRITE_TOP_PVTMON_15_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_15_RESULT_1r_BLKACC,8,TOP_PVTMON_15_RESULT_1r_OFFSET,0,&(r._top_pvtmon_15_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_15_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_1_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_1_CTRL_0.
 */
#define READ_TOP_PVTMON_1_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_1_CTRL_0r_BLKACC,8,TOP_PVTMON_1_CTRL_0r_OFFSET,0,(r._top_pvtmon_1_ctrl_0), 1)
#define WRITE_TOP_PVTMON_1_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_1_CTRL_0r_BLKACC,8,TOP_PVTMON_1_CTRL_0r_OFFSET,0,&(r._top_pvtmon_1_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_1_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_1_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_1_CTRL_1.
 */
#define READ_TOP_PVTMON_1_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_1_CTRL_1r_BLKACC,8,TOP_PVTMON_1_CTRL_1r_OFFSET,0,(r._top_pvtmon_1_ctrl_1), 1)
#define WRITE_TOP_PVTMON_1_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_1_CTRL_1r_BLKACC,8,TOP_PVTMON_1_CTRL_1r_OFFSET,0,&(r._top_pvtmon_1_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_1_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_1_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_1_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_1_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_1_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_1_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_1_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_1_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_1_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_1_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_1_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_1_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_1_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_1_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_1_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_1_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_1_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_1_intr_threshold), 1)
#define WRITE_TOP_PVTMON_1_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_1_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_1_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_1_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_1_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_1_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_1_RESULT_0.
 */
#define READ_TOP_PVTMON_1_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_1_RESULT_0r_BLKACC,8,TOP_PVTMON_1_RESULT_0r_OFFSET,0,(r._top_pvtmon_1_result_0), 1)
#define WRITE_TOP_PVTMON_1_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_1_RESULT_0r_BLKACC,8,TOP_PVTMON_1_RESULT_0r_OFFSET,0,&(r._top_pvtmon_1_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_1_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_1_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_1_RESULT_1.
 */
#define READ_TOP_PVTMON_1_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_1_RESULT_1r_BLKACC,8,TOP_PVTMON_1_RESULT_1r_OFFSET,0,(r._top_pvtmon_1_result_1), 1)
#define WRITE_TOP_PVTMON_1_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_1_RESULT_1r_BLKACC,8,TOP_PVTMON_1_RESULT_1r_OFFSET,0,&(r._top_pvtmon_1_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_1_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_2_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_2_CTRL_0.
 */
#define READ_TOP_PVTMON_2_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_2_CTRL_0r_BLKACC,8,TOP_PVTMON_2_CTRL_0r_OFFSET,0,(r._top_pvtmon_2_ctrl_0), 1)
#define WRITE_TOP_PVTMON_2_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_2_CTRL_0r_BLKACC,8,TOP_PVTMON_2_CTRL_0r_OFFSET,0,&(r._top_pvtmon_2_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_2_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_2_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_2_CTRL_1.
 */
#define READ_TOP_PVTMON_2_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_2_CTRL_1r_BLKACC,8,TOP_PVTMON_2_CTRL_1r_OFFSET,0,(r._top_pvtmon_2_ctrl_1), 1)
#define WRITE_TOP_PVTMON_2_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_2_CTRL_1r_BLKACC,8,TOP_PVTMON_2_CTRL_1r_OFFSET,0,&(r._top_pvtmon_2_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_2_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_2_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_2_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_2_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_2_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_2_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_2_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_2_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_2_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_2_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_2_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_2_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_2_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_2_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_2_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_2_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_2_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_2_intr_threshold), 1)
#define WRITE_TOP_PVTMON_2_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_2_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_2_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_2_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_2_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_2_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_2_RESULT_0.
 */
#define READ_TOP_PVTMON_2_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_2_RESULT_0r_BLKACC,8,TOP_PVTMON_2_RESULT_0r_OFFSET,0,(r._top_pvtmon_2_result_0), 1)
#define WRITE_TOP_PVTMON_2_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_2_RESULT_0r_BLKACC,8,TOP_PVTMON_2_RESULT_0r_OFFSET,0,&(r._top_pvtmon_2_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_2_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_2_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_2_RESULT_1.
 */
#define READ_TOP_PVTMON_2_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_2_RESULT_1r_BLKACC,8,TOP_PVTMON_2_RESULT_1r_OFFSET,0,(r._top_pvtmon_2_result_1), 1)
#define WRITE_TOP_PVTMON_2_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_2_RESULT_1r_BLKACC,8,TOP_PVTMON_2_RESULT_1r_OFFSET,0,&(r._top_pvtmon_2_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_2_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_3_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_3_CTRL_0.
 */
#define READ_TOP_PVTMON_3_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_3_CTRL_0r_BLKACC,8,TOP_PVTMON_3_CTRL_0r_OFFSET,0,(r._top_pvtmon_3_ctrl_0), 1)
#define WRITE_TOP_PVTMON_3_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_3_CTRL_0r_BLKACC,8,TOP_PVTMON_3_CTRL_0r_OFFSET,0,&(r._top_pvtmon_3_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_3_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_3_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_3_CTRL_1.
 */
#define READ_TOP_PVTMON_3_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_3_CTRL_1r_BLKACC,8,TOP_PVTMON_3_CTRL_1r_OFFSET,0,(r._top_pvtmon_3_ctrl_1), 1)
#define WRITE_TOP_PVTMON_3_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_3_CTRL_1r_BLKACC,8,TOP_PVTMON_3_CTRL_1r_OFFSET,0,&(r._top_pvtmon_3_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_3_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_3_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_3_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_3_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_3_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_3_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_3_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_3_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_3_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_3_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_3_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_3_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_3_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_3_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_3_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_3_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_3_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_3_intr_threshold), 1)
#define WRITE_TOP_PVTMON_3_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_3_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_3_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_3_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_3_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_3_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_3_RESULT_0.
 */
#define READ_TOP_PVTMON_3_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_3_RESULT_0r_BLKACC,8,TOP_PVTMON_3_RESULT_0r_OFFSET,0,(r._top_pvtmon_3_result_0), 1)
#define WRITE_TOP_PVTMON_3_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_3_RESULT_0r_BLKACC,8,TOP_PVTMON_3_RESULT_0r_OFFSET,0,&(r._top_pvtmon_3_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_3_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_3_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_3_RESULT_1.
 */
#define READ_TOP_PVTMON_3_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_3_RESULT_1r_BLKACC,8,TOP_PVTMON_3_RESULT_1r_OFFSET,0,(r._top_pvtmon_3_result_1), 1)
#define WRITE_TOP_PVTMON_3_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_3_RESULT_1r_BLKACC,8,TOP_PVTMON_3_RESULT_1r_OFFSET,0,&(r._top_pvtmon_3_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_3_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_4_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_4_CTRL_0.
 */
#define READ_TOP_PVTMON_4_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_4_CTRL_0r_BLKACC,8,TOP_PVTMON_4_CTRL_0r_OFFSET,0,(r._top_pvtmon_4_ctrl_0), 1)
#define WRITE_TOP_PVTMON_4_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_4_CTRL_0r_BLKACC,8,TOP_PVTMON_4_CTRL_0r_OFFSET,0,&(r._top_pvtmon_4_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_4_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_4_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_4_CTRL_1.
 */
#define READ_TOP_PVTMON_4_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_4_CTRL_1r_BLKACC,8,TOP_PVTMON_4_CTRL_1r_OFFSET,0,(r._top_pvtmon_4_ctrl_1), 1)
#define WRITE_TOP_PVTMON_4_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_4_CTRL_1r_BLKACC,8,TOP_PVTMON_4_CTRL_1r_OFFSET,0,&(r._top_pvtmon_4_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_4_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_4_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_4_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_4_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_4_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_4_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_4_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_4_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_4_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_4_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_4_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_4_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_4_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_4_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_4_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_4_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_4_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_4_intr_threshold), 1)
#define WRITE_TOP_PVTMON_4_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_4_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_4_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_4_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_4_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_4_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_4_RESULT_0.
 */
#define READ_TOP_PVTMON_4_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_4_RESULT_0r_BLKACC,8,TOP_PVTMON_4_RESULT_0r_OFFSET,0,(r._top_pvtmon_4_result_0), 1)
#define WRITE_TOP_PVTMON_4_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_4_RESULT_0r_BLKACC,8,TOP_PVTMON_4_RESULT_0r_OFFSET,0,&(r._top_pvtmon_4_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_4_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_4_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_4_RESULT_1.
 */
#define READ_TOP_PVTMON_4_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_4_RESULT_1r_BLKACC,8,TOP_PVTMON_4_RESULT_1r_OFFSET,0,(r._top_pvtmon_4_result_1), 1)
#define WRITE_TOP_PVTMON_4_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_4_RESULT_1r_BLKACC,8,TOP_PVTMON_4_RESULT_1r_OFFSET,0,&(r._top_pvtmon_4_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_4_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_5_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_5_CTRL_0.
 */
#define READ_TOP_PVTMON_5_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_5_CTRL_0r_BLKACC,8,TOP_PVTMON_5_CTRL_0r_OFFSET,0,(r._top_pvtmon_5_ctrl_0), 1)
#define WRITE_TOP_PVTMON_5_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_5_CTRL_0r_BLKACC,8,TOP_PVTMON_5_CTRL_0r_OFFSET,0,&(r._top_pvtmon_5_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_5_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_5_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_5_CTRL_1.
 */
#define READ_TOP_PVTMON_5_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_5_CTRL_1r_BLKACC,8,TOP_PVTMON_5_CTRL_1r_OFFSET,0,(r._top_pvtmon_5_ctrl_1), 1)
#define WRITE_TOP_PVTMON_5_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_5_CTRL_1r_BLKACC,8,TOP_PVTMON_5_CTRL_1r_OFFSET,0,&(r._top_pvtmon_5_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_5_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_5_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_5_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_5_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_5_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_5_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_5_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_5_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_5_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_5_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_5_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_5_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_5_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_5_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_5_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_5_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_5_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_5_intr_threshold), 1)
#define WRITE_TOP_PVTMON_5_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_5_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_5_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_5_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_5_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_5_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_5_RESULT_0.
 */
#define READ_TOP_PVTMON_5_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_5_RESULT_0r_BLKACC,8,TOP_PVTMON_5_RESULT_0r_OFFSET,0,(r._top_pvtmon_5_result_0), 1)
#define WRITE_TOP_PVTMON_5_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_5_RESULT_0r_BLKACC,8,TOP_PVTMON_5_RESULT_0r_OFFSET,0,&(r._top_pvtmon_5_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_5_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_5_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_5_RESULT_1.
 */
#define READ_TOP_PVTMON_5_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_5_RESULT_1r_BLKACC,8,TOP_PVTMON_5_RESULT_1r_OFFSET,0,(r._top_pvtmon_5_result_1), 1)
#define WRITE_TOP_PVTMON_5_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_5_RESULT_1r_BLKACC,8,TOP_PVTMON_5_RESULT_1r_OFFSET,0,&(r._top_pvtmon_5_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_5_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_6_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_6_CTRL_0.
 */
#define READ_TOP_PVTMON_6_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_6_CTRL_0r_BLKACC,8,TOP_PVTMON_6_CTRL_0r_OFFSET,0,(r._top_pvtmon_6_ctrl_0), 1)
#define WRITE_TOP_PVTMON_6_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_6_CTRL_0r_BLKACC,8,TOP_PVTMON_6_CTRL_0r_OFFSET,0,&(r._top_pvtmon_6_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_6_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_6_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_6_CTRL_1.
 */
#define READ_TOP_PVTMON_6_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_6_CTRL_1r_BLKACC,8,TOP_PVTMON_6_CTRL_1r_OFFSET,0,(r._top_pvtmon_6_ctrl_1), 1)
#define WRITE_TOP_PVTMON_6_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_6_CTRL_1r_BLKACC,8,TOP_PVTMON_6_CTRL_1r_OFFSET,0,&(r._top_pvtmon_6_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_6_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_6_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_6_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_6_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_6_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_6_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_6_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_6_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_6_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_6_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_6_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_6_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_6_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_6_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_6_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_6_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_6_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_6_intr_threshold), 1)
#define WRITE_TOP_PVTMON_6_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_6_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_6_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_6_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_6_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_6_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_6_RESULT_0.
 */
#define READ_TOP_PVTMON_6_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_6_RESULT_0r_BLKACC,8,TOP_PVTMON_6_RESULT_0r_OFFSET,0,(r._top_pvtmon_6_result_0), 1)
#define WRITE_TOP_PVTMON_6_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_6_RESULT_0r_BLKACC,8,TOP_PVTMON_6_RESULT_0r_OFFSET,0,&(r._top_pvtmon_6_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_6_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_6_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_6_RESULT_1.
 */
#define READ_TOP_PVTMON_6_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_6_RESULT_1r_BLKACC,8,TOP_PVTMON_6_RESULT_1r_OFFSET,0,(r._top_pvtmon_6_result_1), 1)
#define WRITE_TOP_PVTMON_6_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_6_RESULT_1r_BLKACC,8,TOP_PVTMON_6_RESULT_1r_OFFSET,0,&(r._top_pvtmon_6_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_6_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_7_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_7_CTRL_0.
 */
#define READ_TOP_PVTMON_7_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_7_CTRL_0r_BLKACC,8,TOP_PVTMON_7_CTRL_0r_OFFSET,0,(r._top_pvtmon_7_ctrl_0), 1)
#define WRITE_TOP_PVTMON_7_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_7_CTRL_0r_BLKACC,8,TOP_PVTMON_7_CTRL_0r_OFFSET,0,&(r._top_pvtmon_7_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_7_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_7_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_7_CTRL_1.
 */
#define READ_TOP_PVTMON_7_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_7_CTRL_1r_BLKACC,8,TOP_PVTMON_7_CTRL_1r_OFFSET,0,(r._top_pvtmon_7_ctrl_1), 1)
#define WRITE_TOP_PVTMON_7_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_7_CTRL_1r_BLKACC,8,TOP_PVTMON_7_CTRL_1r_OFFSET,0,&(r._top_pvtmon_7_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_7_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_7_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_7_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_7_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_7_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_7_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_7_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_7_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_7_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_7_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_7_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_7_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_7_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_7_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_7_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_7_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_7_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_7_intr_threshold), 1)
#define WRITE_TOP_PVTMON_7_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_7_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_7_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_7_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_7_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_7_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_7_RESULT_0.
 */
#define READ_TOP_PVTMON_7_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_7_RESULT_0r_BLKACC,8,TOP_PVTMON_7_RESULT_0r_OFFSET,0,(r._top_pvtmon_7_result_0), 1)
#define WRITE_TOP_PVTMON_7_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_7_RESULT_0r_BLKACC,8,TOP_PVTMON_7_RESULT_0r_OFFSET,0,&(r._top_pvtmon_7_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_7_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_7_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_7_RESULT_1.
 */
#define READ_TOP_PVTMON_7_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_7_RESULT_1r_BLKACC,8,TOP_PVTMON_7_RESULT_1r_OFFSET,0,(r._top_pvtmon_7_result_1), 1)
#define WRITE_TOP_PVTMON_7_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_7_RESULT_1r_BLKACC,8,TOP_PVTMON_7_RESULT_1r_OFFSET,0,&(r._top_pvtmon_7_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_7_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_8_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_8_CTRL_0.
 */
#define READ_TOP_PVTMON_8_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_8_CTRL_0r_BLKACC,8,TOP_PVTMON_8_CTRL_0r_OFFSET,0,(r._top_pvtmon_8_ctrl_0), 1)
#define WRITE_TOP_PVTMON_8_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_8_CTRL_0r_BLKACC,8,TOP_PVTMON_8_CTRL_0r_OFFSET,0,&(r._top_pvtmon_8_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_8_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_8_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_8_CTRL_1.
 */
#define READ_TOP_PVTMON_8_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_8_CTRL_1r_BLKACC,8,TOP_PVTMON_8_CTRL_1r_OFFSET,0,(r._top_pvtmon_8_ctrl_1), 1)
#define WRITE_TOP_PVTMON_8_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_8_CTRL_1r_BLKACC,8,TOP_PVTMON_8_CTRL_1r_OFFSET,0,&(r._top_pvtmon_8_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_8_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_8_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_8_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_8_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_8_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_8_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_8_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_8_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_8_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_8_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_8_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_8_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_8_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_8_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_8_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_8_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_8_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_8_intr_threshold), 1)
#define WRITE_TOP_PVTMON_8_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_8_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_8_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_8_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_8_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_8_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_8_RESULT_0.
 */
#define READ_TOP_PVTMON_8_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_8_RESULT_0r_BLKACC,8,TOP_PVTMON_8_RESULT_0r_OFFSET,0,(r._top_pvtmon_8_result_0), 1)
#define WRITE_TOP_PVTMON_8_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_8_RESULT_0r_BLKACC,8,TOP_PVTMON_8_RESULT_0r_OFFSET,0,&(r._top_pvtmon_8_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_8_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_8_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_8_RESULT_1.
 */
#define READ_TOP_PVTMON_8_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_8_RESULT_1r_BLKACC,8,TOP_PVTMON_8_RESULT_1r_OFFSET,0,(r._top_pvtmon_8_result_1), 1)
#define WRITE_TOP_PVTMON_8_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_8_RESULT_1r_BLKACC,8,TOP_PVTMON_8_RESULT_1r_OFFSET,0,&(r._top_pvtmon_8_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_8_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_9_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_9_CTRL_0.
 */
#define READ_TOP_PVTMON_9_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_9_CTRL_0r_BLKACC,8,TOP_PVTMON_9_CTRL_0r_OFFSET,0,(r._top_pvtmon_9_ctrl_0), 1)
#define WRITE_TOP_PVTMON_9_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_9_CTRL_0r_BLKACC,8,TOP_PVTMON_9_CTRL_0r_OFFSET,0,&(r._top_pvtmon_9_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_9_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_9_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_9_CTRL_1.
 */
#define READ_TOP_PVTMON_9_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_9_CTRL_1r_BLKACC,8,TOP_PVTMON_9_CTRL_1r_OFFSET,0,(r._top_pvtmon_9_ctrl_1), 1)
#define WRITE_TOP_PVTMON_9_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_9_CTRL_1r_BLKACC,8,TOP_PVTMON_9_CTRL_1r_OFFSET,0,&(r._top_pvtmon_9_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_9_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_9_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_9_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_9_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_9_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_9_HW_RST_THRESHOLDr_OFFSET,0,(r._top_pvtmon_9_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_9_HW_RST_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_9_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_9_HW_RST_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_9_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_9_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_9_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_9_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_9_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_9_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_9_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_9_intr_threshold), 1)
#define WRITE_TOP_PVTMON_9_INTR_THRESHOLDr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_9_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_9_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_9_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_9_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_9_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_9_RESULT_0.
 */
#define READ_TOP_PVTMON_9_RESULT_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_9_RESULT_0r_BLKACC,8,TOP_PVTMON_9_RESULT_0r_OFFSET,0,(r._top_pvtmon_9_result_0), 1)
#define WRITE_TOP_PVTMON_9_RESULT_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_9_RESULT_0r_BLKACC,8,TOP_PVTMON_9_RESULT_0r_OFFSET,0,&(r._top_pvtmon_9_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_9_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_9_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_9_RESULT_1.
 */
#define READ_TOP_PVTMON_9_RESULT_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_9_RESULT_1r_BLKACC,8,TOP_PVTMON_9_RESULT_1r_OFFSET,0,(r._top_pvtmon_9_result_1), 1)
#define WRITE_TOP_PVTMON_9_RESULT_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_9_RESULT_1r_BLKACC,8,TOP_PVTMON_9_RESULT_1r_OFFSET,0,&(r._top_pvtmon_9_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_9_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_CTRL_0.
 */
#define READ_TOP_PVTMON_CTRL_0r(u,i,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_CTRL_0r_BLKACC,8,TOP_PVTMON_CTRL_0r_OFFSET,(i)*2,(r._top_pvtmon_ctrl_0), 1)
#define WRITE_TOP_PVTMON_CTRL_0r(u,i,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_CTRL_0r_BLKACC,8,TOP_PVTMON_CTRL_0r_OFFSET,(i)*2,&(r._top_pvtmon_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_CTRL_1.
 */
#define READ_TOP_PVTMON_CTRL_1r(u,i,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_CTRL_1r_BLKACC,8,TOP_PVTMON_CTRL_1r_OFFSET,(i)*2,(r._top_pvtmon_ctrl_1), 1)
#define WRITE_TOP_PVTMON_CTRL_1r(u,i,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_CTRL_1r_BLKACC,8,TOP_PVTMON_CTRL_1r_OFFSET,(i)*2,&(r._top_pvtmon_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_HW_RST_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_HW_RST_STATUS.
 */
#define READ_TOP_PVTMON_HW_RST_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_HW_RST_STATUSr_BLKACC,8,TOP_PVTMON_HW_RST_STATUSr_OFFSET,0,(r._top_pvtmon_hw_rst_status), 1)
#define WRITE_TOP_PVTMON_HW_RST_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_HW_RST_STATUSr_BLKACC,8,TOP_PVTMON_HW_RST_STATUSr_OFFSET,0,&(r._top_pvtmon_hw_rst_status), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_HW_RST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_HW_RST_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_HW_RST_THRESHOLD.
 */
#define READ_TOP_PVTMON_HW_RST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_HW_RST_THRESHOLDr_OFFSET,i,(r._top_pvtmon_hw_rst_threshold), 1)
#define WRITE_TOP_PVTMON_HW_RST_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_HW_RST_THRESHOLDr_BLKACC,8,TOP_PVTMON_HW_RST_THRESHOLDr_OFFSET,i,&(r._top_pvtmon_hw_rst_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_HW_RST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_INTR_MASK_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_INTR_MASK_0.
 */
#define READ_TOP_PVTMON_INTR_MASK_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_INTR_MASK_0r_BLKACC,8,TOP_PVTMON_INTR_MASK_0r_OFFSET,0,(r._top_pvtmon_intr_mask_0), 1)
#define WRITE_TOP_PVTMON_INTR_MASK_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_INTR_MASK_0r_BLKACC,8,TOP_PVTMON_INTR_MASK_0r_OFFSET,0,&(r._top_pvtmon_intr_mask_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_INTR_MASK_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_INTR_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_INTR_STATUS_0.
 */
#define READ_TOP_PVTMON_INTR_STATUS_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_INTR_STATUS_0r_BLKACC,8,TOP_PVTMON_INTR_STATUS_0r_OFFSET,0,(r._top_pvtmon_intr_status_0), 1)
#define WRITE_TOP_PVTMON_INTR_STATUS_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_INTR_STATUS_0r_BLKACC,8,TOP_PVTMON_INTR_STATUS_0r_OFFSET,0,&(r._top_pvtmon_intr_status_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_INTR_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_INTR_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_INTR_THRESHOLDr_OFFSET,i,(r._top_pvtmon_intr_threshold), 1)
#define WRITE_TOP_PVTMON_INTR_THRESHOLDr(u,i,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_INTR_THRESHOLDr_BLKACC,8,TOP_PVTMON_INTR_THRESHOLDr_OFFSET,i,&(r._top_pvtmon_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_RESULT_0.
 */
#define READ_TOP_PVTMON_RESULT_0r(u,i,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_RESULT_0r_BLKACC,8,TOP_PVTMON_RESULT_0r_OFFSET,(i)*2,(r._top_pvtmon_result_0), 1)
#define WRITE_TOP_PVTMON_RESULT_0r(u,i,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_RESULT_0r_BLKACC,8,TOP_PVTMON_RESULT_0r_OFFSET,(i)*2,&(r._top_pvtmon_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_RESULT_1.
 */
#define READ_TOP_PVTMON_RESULT_1r(u,i,r) bcmbd_cmicx_reg_block_read(u,TOP_PVTMON_RESULT_1r_BLKACC,8,TOP_PVTMON_RESULT_1r_OFFSET,(i)*2,(r._top_pvtmon_result_1), 1)
#define WRITE_TOP_PVTMON_RESULT_1r(u,i,r) bcmbd_cmicx_reg_block_write(u,TOP_PVTMON_RESULT_1r_BLKACC,8,TOP_PVTMON_RESULT_1r_OFFSET,(i)*2,&(r._top_pvtmon_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_0_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_0_CONTROL.
 */
#define READ_TOP_RESCAL_0_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_0_CONTROLr_BLKACC,8,TOP_RESCAL_0_CONTROLr_OFFSET,0,(r._top_rescal_0_control), 1)
#define WRITE_TOP_RESCAL_0_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_0_CONTROLr_BLKACC,8,TOP_RESCAL_0_CONTROLr_OFFSET,0,&(r._top_rescal_0_control), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_0_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_0_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_0_STATUS_0.
 */
#define READ_TOP_RESCAL_0_STATUS_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_0_STATUS_0r_BLKACC,8,TOP_RESCAL_0_STATUS_0r_OFFSET,0,(r._top_rescal_0_status_0), 1)
#define WRITE_TOP_RESCAL_0_STATUS_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_0_STATUS_0r_BLKACC,8,TOP_RESCAL_0_STATUS_0r_OFFSET,0,&(r._top_rescal_0_status_0), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_0_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_0_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_0_STATUS_1.
 */
#define READ_TOP_RESCAL_0_STATUS_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_0_STATUS_1r_BLKACC,8,TOP_RESCAL_0_STATUS_1r_OFFSET,0,(r._top_rescal_0_status_1), 1)
#define WRITE_TOP_RESCAL_0_STATUS_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_0_STATUS_1r_BLKACC,8,TOP_RESCAL_0_STATUS_1r_OFFSET,0,&(r._top_rescal_0_status_1), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_0_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_1_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_1_CONTROL.
 */
#define READ_TOP_RESCAL_1_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_1_CONTROLr_BLKACC,8,TOP_RESCAL_1_CONTROLr_OFFSET,0,(r._top_rescal_1_control), 1)
#define WRITE_TOP_RESCAL_1_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_1_CONTROLr_BLKACC,8,TOP_RESCAL_1_CONTROLr_OFFSET,0,&(r._top_rescal_1_control), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_1_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_1_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_1_STATUS_0.
 */
#define READ_TOP_RESCAL_1_STATUS_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_1_STATUS_0r_BLKACC,8,TOP_RESCAL_1_STATUS_0r_OFFSET,0,(r._top_rescal_1_status_0), 1)
#define WRITE_TOP_RESCAL_1_STATUS_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_1_STATUS_0r_BLKACC,8,TOP_RESCAL_1_STATUS_0r_OFFSET,0,&(r._top_rescal_1_status_0), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_1_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_1_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_1_STATUS_1.
 */
#define READ_TOP_RESCAL_1_STATUS_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_1_STATUS_1r_BLKACC,8,TOP_RESCAL_1_STATUS_1r_OFFSET,0,(r._top_rescal_1_status_1), 1)
#define WRITE_TOP_RESCAL_1_STATUS_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_1_STATUS_1r_BLKACC,8,TOP_RESCAL_1_STATUS_1r_OFFSET,0,&(r._top_rescal_1_status_1), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_1_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_2_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_2_CONTROL.
 */
#define READ_TOP_RESCAL_2_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_2_CONTROLr_BLKACC,8,TOP_RESCAL_2_CONTROLr_OFFSET,0,(r._top_rescal_2_control), 1)
#define WRITE_TOP_RESCAL_2_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_2_CONTROLr_BLKACC,8,TOP_RESCAL_2_CONTROLr_OFFSET,0,&(r._top_rescal_2_control), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_2_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_2_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_2_STATUS_0.
 */
#define READ_TOP_RESCAL_2_STATUS_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_2_STATUS_0r_BLKACC,8,TOP_RESCAL_2_STATUS_0r_OFFSET,0,(r._top_rescal_2_status_0), 1)
#define WRITE_TOP_RESCAL_2_STATUS_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_2_STATUS_0r_BLKACC,8,TOP_RESCAL_2_STATUS_0r_OFFSET,0,&(r._top_rescal_2_status_0), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_2_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_2_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_2_STATUS_1.
 */
#define READ_TOP_RESCAL_2_STATUS_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_2_STATUS_1r_BLKACC,8,TOP_RESCAL_2_STATUS_1r_OFFSET,0,(r._top_rescal_2_status_1), 1)
#define WRITE_TOP_RESCAL_2_STATUS_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_2_STATUS_1r_BLKACC,8,TOP_RESCAL_2_STATUS_1r_OFFSET,0,&(r._top_rescal_2_status_1), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_2_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_3_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_3_CONTROL.
 */
#define READ_TOP_RESCAL_3_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_3_CONTROLr_BLKACC,8,TOP_RESCAL_3_CONTROLr_OFFSET,0,(r._top_rescal_3_control), 1)
#define WRITE_TOP_RESCAL_3_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_3_CONTROLr_BLKACC,8,TOP_RESCAL_3_CONTROLr_OFFSET,0,&(r._top_rescal_3_control), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_3_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_3_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_3_STATUS_0.
 */
#define READ_TOP_RESCAL_3_STATUS_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_3_STATUS_0r_BLKACC,8,TOP_RESCAL_3_STATUS_0r_OFFSET,0,(r._top_rescal_3_status_0), 1)
#define WRITE_TOP_RESCAL_3_STATUS_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_3_STATUS_0r_BLKACC,8,TOP_RESCAL_3_STATUS_0r_OFFSET,0,&(r._top_rescal_3_status_0), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_3_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_3_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_3_STATUS_1.
 */
#define READ_TOP_RESCAL_3_STATUS_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_3_STATUS_1r_BLKACC,8,TOP_RESCAL_3_STATUS_1r_OFFSET,0,(r._top_rescal_3_status_1), 1)
#define WRITE_TOP_RESCAL_3_STATUS_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_3_STATUS_1r_BLKACC,8,TOP_RESCAL_3_STATUS_1r_OFFSET,0,&(r._top_rescal_3_status_1), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_3_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_4_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_4_CONTROL.
 */
#define READ_TOP_RESCAL_4_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_4_CONTROLr_BLKACC,8,TOP_RESCAL_4_CONTROLr_OFFSET,0,(r._top_rescal_4_control), 1)
#define WRITE_TOP_RESCAL_4_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_4_CONTROLr_BLKACC,8,TOP_RESCAL_4_CONTROLr_OFFSET,0,&(r._top_rescal_4_control), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_4_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_4_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_4_STATUS_0.
 */
#define READ_TOP_RESCAL_4_STATUS_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_4_STATUS_0r_BLKACC,8,TOP_RESCAL_4_STATUS_0r_OFFSET,0,(r._top_rescal_4_status_0), 1)
#define WRITE_TOP_RESCAL_4_STATUS_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_4_STATUS_0r_BLKACC,8,TOP_RESCAL_4_STATUS_0r_OFFSET,0,&(r._top_rescal_4_status_0), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_4_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_4_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_4_STATUS_1.
 */
#define READ_TOP_RESCAL_4_STATUS_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RESCAL_4_STATUS_1r_BLKACC,8,TOP_RESCAL_4_STATUS_1r_OFFSET,0,(r._top_rescal_4_status_1), 1)
#define WRITE_TOP_RESCAL_4_STATUS_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RESCAL_4_STATUS_1r_BLKACC,8,TOP_RESCAL_4_STATUS_1r_OFFSET,0,&(r._top_rescal_4_status_1), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_4_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RING_OSC_CTRL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RING_OSC_CTRL.
 */
#define READ_TOP_RING_OSC_CTRLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_RING_OSC_CTRLr_BLKACC,8,TOP_RING_OSC_CTRLr_OFFSET,0,(r._top_ring_osc_ctrl), 1)
#define WRITE_TOP_RING_OSC_CTRLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_RING_OSC_CTRLr_BLKACC,8,TOP_RING_OSC_CTRLr_OFFSET,0,&(r._top_ring_osc_ctrl), 1)

/*******************************************************************************
 * End of 'TOP_RING_OSC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_SEQ_RST_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_SEQ_RST_0.
 */
#define READ_TOP_SEQ_RST_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_SEQ_RST_0r_BLKACC,8,TOP_SEQ_RST_0r_OFFSET,0,(r._top_seq_rst_0), 1)
#define WRITE_TOP_SEQ_RST_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_SEQ_RST_0r_BLKACC,8,TOP_SEQ_RST_0r_OFFSET,0,&(r._top_seq_rst_0), 1)

/*******************************************************************************
 * End of 'TOP_SEQ_RST_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_SEQ_RST_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_SEQ_RST_1.
 */
#define READ_TOP_SEQ_RST_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_SEQ_RST_1r_BLKACC,8,TOP_SEQ_RST_1r_OFFSET,0,(r._top_seq_rst_1), 1)
#define WRITE_TOP_SEQ_RST_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_SEQ_RST_1r_BLKACC,8,TOP_SEQ_RST_1r_OFFSET,0,&(r._top_seq_rst_1), 1)

/*******************************************************************************
 * End of 'TOP_SEQ_RST_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_SEQ_RST_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_SEQ_RST_2.
 */
#define READ_TOP_SEQ_RST_2r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_SEQ_RST_2r_BLKACC,8,TOP_SEQ_RST_2r_OFFSET,0,(r._top_seq_rst_2), 1)
#define WRITE_TOP_SEQ_RST_2r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_SEQ_RST_2r_BLKACC,8,TOP_SEQ_RST_2r_OFFSET,0,&(r._top_seq_rst_2), 1)

/*******************************************************************************
 * End of 'TOP_SEQ_RST_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_SOFT_RESET_REG
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_SOFT_RESET_REG.
 */
#define READ_TOP_SOFT_RESET_REGr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_SOFT_RESET_REGr_BLKACC,8,TOP_SOFT_RESET_REGr_OFFSET,0,(r._top_soft_reset_reg), 1)
#define WRITE_TOP_SOFT_RESET_REGr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_SOFT_RESET_REGr_BLKACC,8,TOP_SOFT_RESET_REGr_OFFSET,0,&(r._top_soft_reset_reg), 1)

/*******************************************************************************
 * End of 'TOP_SOFT_RESET_REGr'
 */




/*******************************************************************************
 * REGISTER:  TOP_SOFT_RESET_REG_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_SOFT_RESET_REG_2.
 */
#define READ_TOP_SOFT_RESET_REG_2r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_SOFT_RESET_REG_2r_BLKACC,8,TOP_SOFT_RESET_REG_2r_OFFSET,0,(r._top_soft_reset_reg_2), 1)
#define WRITE_TOP_SOFT_RESET_REG_2r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_SOFT_RESET_REG_2r_BLKACC,8,TOP_SOFT_RESET_REG_2r_OFFSET,0,&(r._top_soft_reset_reg_2), 1)

/*******************************************************************************
 * End of 'TOP_SOFT_RESET_REG_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_SOFT_RESET_REG_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_SOFT_RESET_REG_3.
 */
#define READ_TOP_SOFT_RESET_REG_3r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_SOFT_RESET_REG_3r_BLKACC,8,TOP_SOFT_RESET_REG_3r_OFFSET,0,(r._top_soft_reset_reg_3), 1)
#define WRITE_TOP_SOFT_RESET_REG_3r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_SOFT_RESET_REG_3r_BLKACC,8,TOP_SOFT_RESET_REG_3r_OFFSET,0,&(r._top_soft_reset_reg_3), 1)

/*******************************************************************************
 * End of 'TOP_SOFT_RESET_REG_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_SOFT_RESET_REG_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_SOFT_RESET_REG_4.
 */
#define READ_TOP_SOFT_RESET_REG_4r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_SOFT_RESET_REG_4r_BLKACC,8,TOP_SOFT_RESET_REG_4r_OFFSET,0,(r._top_soft_reset_reg_4), 1)
#define WRITE_TOP_SOFT_RESET_REG_4r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_SOFT_RESET_REG_4r_BLKACC,8,TOP_SOFT_RESET_REG_4r_OFFSET,0,&(r._top_soft_reset_reg_4), 1)

/*******************************************************************************
 * End of 'TOP_SOFT_RESET_REG_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_SWITCH_FEATURE_ENABLE
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_SWITCH_FEATURE_ENABLE.
 */
#define READ_TOP_SWITCH_FEATURE_ENABLEr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_SWITCH_FEATURE_ENABLEr_BLKACC,8,TOP_SWITCH_FEATURE_ENABLEr_OFFSET,0,(r._top_switch_feature_enable), 1)
#define WRITE_TOP_SWITCH_FEATURE_ENABLEr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_SWITCH_FEATURE_ENABLEr_BLKACC,8,TOP_SWITCH_FEATURE_ENABLEr_OFFSET,0,&(r._top_switch_feature_enable), 1)

/*******************************************************************************
 * End of 'TOP_SWITCH_FEATURE_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  TOP_SYNCE_CTRL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_SYNCE_CTRL.
 */
#define READ_TOP_SYNCE_CTRLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_SYNCE_CTRLr_BLKACC,8,TOP_SYNCE_CTRLr_OFFSET,0,(r._top_synce_ctrl), 1)
#define WRITE_TOP_SYNCE_CTRLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_SYNCE_CTRLr_BLKACC,8,TOP_SYNCE_CTRLr_OFFSET,0,&(r._top_synce_ctrl), 1)

/*******************************************************************************
 * End of 'TOP_SYNCE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TAP_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TAP_CONTROL.
 */
#define READ_TOP_TAP_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TAP_CONTROLr_BLKACC,8,TOP_TAP_CONTROLr_OFFSET,0,(r._top_tap_control), 1)
#define WRITE_TOP_TAP_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TAP_CONTROLr_BLKACC,8,TOP_TAP_CONTROLr_OFFSET,0,&(r._top_tap_control), 1)

/*******************************************************************************
 * End of 'TOP_TAP_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TLB_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TLB_CONTROL.
 */
#define READ_TOP_TLB_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TLB_CONTROLr_BLKACC,8,TOP_TLB_CONTROLr_OFFSET,0,(r._top_tlb_control), 1)
#define WRITE_TOP_TLB_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TLB_CONTROLr_BLKACC,8,TOP_TLB_CONTROLr_OFFSET,0,&(r._top_tlb_control), 1)

/*******************************************************************************
 * End of 'TOP_TLB_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TLB_CONTROL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TLB_CONTROL_1.
 */
#define READ_TOP_TLB_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TLB_CONTROL_1r_BLKACC,8,TOP_TLB_CONTROL_1r_OFFSET,0,(r._top_tlb_control_1), 1)
#define WRITE_TOP_TLB_CONTROL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TLB_CONTROL_1r_BLKACC,8,TOP_TLB_CONTROL_1r_OFFSET,0,&(r._top_tlb_control_1), 1)

/*******************************************************************************
 * End of 'TOP_TLB_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TLB_CONTROL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TLB_CONTROL_2.
 */
#define READ_TOP_TLB_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TLB_CONTROL_2r_BLKACC,8,TOP_TLB_CONTROL_2r_OFFSET,0,(r._top_tlb_control_2), 1)
#define WRITE_TOP_TLB_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TLB_CONTROL_2r_BLKACC,8,TOP_TLB_CONTROL_2r_OFFSET,0,&(r._top_tlb_control_2), 1)

/*******************************************************************************
 * End of 'TOP_TLB_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TLB_CONTROL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TLB_CONTROL_3.
 */
#define READ_TOP_TLB_CONTROL_3r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TLB_CONTROL_3r_BLKACC,8,TOP_TLB_CONTROL_3r_OFFSET,0,(r._top_tlb_control_3), 1)
#define WRITE_TOP_TLB_CONTROL_3r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TLB_CONTROL_3r_BLKACC,8,TOP_TLB_CONTROL_3r_OFFSET,0,&(r._top_tlb_control_3), 1)

/*******************************************************************************
 * End of 'TOP_TLB_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TLB_CONTROL_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TLB_CONTROL_STATUS.
 */
#define READ_TOP_TLB_CONTROL_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TLB_CONTROL_STATUSr_BLKACC,8,TOP_TLB_CONTROL_STATUSr_OFFSET,0,(r._top_tlb_control_status), 1)
#define WRITE_TOP_TLB_CONTROL_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TLB_CONTROL_STATUSr_BLKACC,8,TOP_TLB_CONTROL_STATUSr_OFFSET,0,&(r._top_tlb_control_status), 1)

/*******************************************************************************
 * End of 'TOP_TLB_CONTROL_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TMON_CHANNELS_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TMON_CHANNELS_CTRL_0.
 */
#define READ_TOP_TMON_CHANNELS_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TMON_CHANNELS_CTRL_0r_BLKACC,8,TOP_TMON_CHANNELS_CTRL_0r_OFFSET,0,(r._top_tmon_channels_ctrl_0), 1)
#define WRITE_TOP_TMON_CHANNELS_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TMON_CHANNELS_CTRL_0r_BLKACC,8,TOP_TMON_CHANNELS_CTRL_0r_OFFSET,0,&(r._top_tmon_channels_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_TMON_CHANNELS_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TMON_CHANNELS_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TMON_CHANNELS_CTRL_1.
 */
#define READ_TOP_TMON_CHANNELS_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TMON_CHANNELS_CTRL_1r_BLKACC,8,TOP_TMON_CHANNELS_CTRL_1r_OFFSET,0,(r._top_tmon_channels_ctrl_1), 1)
#define WRITE_TOP_TMON_CHANNELS_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TMON_CHANNELS_CTRL_1r_BLKACC,8,TOP_TMON_CHANNELS_CTRL_1r_OFFSET,0,&(r._top_tmon_channels_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_TMON_CHANNELS_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_DISABLE_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_DISABLE_STATUS.
 */
#define READ_TOP_TSC_DISABLE_STATUSr(u,i,r) bcmbd_cmicx_reg_block_read(u,TOP_TSC_DISABLE_STATUSr_BLKACC,8,TOP_TSC_DISABLE_STATUSr_OFFSET,i,(r._top_tsc_disable_status), 1)
#define WRITE_TOP_TSC_DISABLE_STATUSr(u,i,r) bcmbd_cmicx_reg_block_write(u,TOP_TSC_DISABLE_STATUSr_BLKACC,8,TOP_TSC_DISABLE_STATUSr_OFFSET,i,&(r._top_tsc_disable_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_DISABLE_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_DISABLE_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_DISABLE_STATUS_0.
 */
#define READ_TOP_TSC_DISABLE_STATUS_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TSC_DISABLE_STATUS_0r_BLKACC,8,TOP_TSC_DISABLE_STATUS_0r_OFFSET,0,(r._top_tsc_disable_status_0), 1)
#define WRITE_TOP_TSC_DISABLE_STATUS_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TSC_DISABLE_STATUS_0r_BLKACC,8,TOP_TSC_DISABLE_STATUS_0r_OFFSET,0,&(r._top_tsc_disable_status_0), 1)

/*******************************************************************************
 * End of 'TOP_TSC_DISABLE_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_DISABLE_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_DISABLE_STATUS_1.
 */
#define READ_TOP_TSC_DISABLE_STATUS_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TSC_DISABLE_STATUS_1r_BLKACC,8,TOP_TSC_DISABLE_STATUS_1r_OFFSET,0,(r._top_tsc_disable_status_1), 1)
#define WRITE_TOP_TSC_DISABLE_STATUS_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TSC_DISABLE_STATUS_1r_BLKACC,8,TOP_TSC_DISABLE_STATUS_1r_OFFSET,0,&(r._top_tsc_disable_status_1), 1)

/*******************************************************************************
 * End of 'TOP_TSC_DISABLE_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_ENABLE_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_ENABLE_0.
 */
#define READ_TOP_TSC_ENABLE_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TSC_ENABLE_0r_BLKACC,8,TOP_TSC_ENABLE_0r_OFFSET,0,(r._top_tsc_enable_0), 1)
#define WRITE_TOP_TSC_ENABLE_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TSC_ENABLE_0r_BLKACC,8,TOP_TSC_ENABLE_0r_OFFSET,0,&(r._top_tsc_enable_0), 1)

/*******************************************************************************
 * End of 'TOP_TSC_ENABLE_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_ENABLE_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_ENABLE_1.
 */
#define READ_TOP_TSC_ENABLE_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TSC_ENABLE_1r_BLKACC,8,TOP_TSC_ENABLE_1r_OFFSET,0,(r._top_tsc_enable_1), 1)
#define WRITE_TOP_TSC_ENABLE_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TSC_ENABLE_1r_BLKACC,8,TOP_TSC_ENABLE_1r_OFFSET,0,&(r._top_tsc_enable_1), 1)

/*******************************************************************************
 * End of 'TOP_TSC_ENABLE_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_ENABLE_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_ENABLE_2.
 */
#define READ_TOP_TSC_ENABLE_2r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TSC_ENABLE_2r_BLKACC,8,TOP_TSC_ENABLE_2r_OFFSET,0,(r._top_tsc_enable_2), 1)
#define WRITE_TOP_TSC_ENABLE_2r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TSC_ENABLE_2r_BLKACC,8,TOP_TSC_ENABLE_2r_OFFSET,0,&(r._top_tsc_enable_2), 1)

/*******************************************************************************
 * End of 'TOP_TSC_ENABLE_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TS_PLL_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TS_PLL_CTRL_0.
 */
#define READ_TOP_TS_PLL_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TS_PLL_CTRL_0r_BLKACC,8,TOP_TS_PLL_CTRL_0r_OFFSET,0,(r._top_ts_pll_ctrl_0), 1)
#define WRITE_TOP_TS_PLL_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TS_PLL_CTRL_0r_BLKACC,8,TOP_TS_PLL_CTRL_0r_OFFSET,0,&(r._top_ts_pll_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_TS_PLL_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TS_PLL_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TS_PLL_CTRL_1.
 */
#define READ_TOP_TS_PLL_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TS_PLL_CTRL_1r_BLKACC,8,TOP_TS_PLL_CTRL_1r_OFFSET,0,(r._top_ts_pll_ctrl_1), 1)
#define WRITE_TOP_TS_PLL_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TS_PLL_CTRL_1r_BLKACC,8,TOP_TS_PLL_CTRL_1r_OFFSET,0,&(r._top_ts_pll_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_TS_PLL_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TS_PLL_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TS_PLL_CTRL_2.
 */
#define READ_TOP_TS_PLL_CTRL_2r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TS_PLL_CTRL_2r_BLKACC,8,TOP_TS_PLL_CTRL_2r_OFFSET,0,(r._top_ts_pll_ctrl_2), 1)
#define WRITE_TOP_TS_PLL_CTRL_2r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TS_PLL_CTRL_2r_BLKACC,8,TOP_TS_PLL_CTRL_2r_OFFSET,0,&(r._top_ts_pll_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_TS_PLL_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TS_PLL_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TS_PLL_CTRL_3.
 */
#define READ_TOP_TS_PLL_CTRL_3r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TS_PLL_CTRL_3r_BLKACC,8,TOP_TS_PLL_CTRL_3r_OFFSET,0,(r._top_ts_pll_ctrl_3), 1)
#define WRITE_TOP_TS_PLL_CTRL_3r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TS_PLL_CTRL_3r_BLKACC,8,TOP_TS_PLL_CTRL_3r_OFFSET,0,&(r._top_ts_pll_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_TS_PLL_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TS_PLL_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TS_PLL_CTRL_4.
 */
#define READ_TOP_TS_PLL_CTRL_4r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TS_PLL_CTRL_4r_BLKACC,8,TOP_TS_PLL_CTRL_4r_OFFSET,0,(r._top_ts_pll_ctrl_4), 1)
#define WRITE_TOP_TS_PLL_CTRL_4r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TS_PLL_CTRL_4r_BLKACC,8,TOP_TS_PLL_CTRL_4r_OFFSET,0,&(r._top_ts_pll_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_TS_PLL_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TS_PLL_CTRL_5
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TS_PLL_CTRL_5.
 */
#define READ_TOP_TS_PLL_CTRL_5r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TS_PLL_CTRL_5r_BLKACC,8,TOP_TS_PLL_CTRL_5r_OFFSET,0,(r._top_ts_pll_ctrl_5), 1)
#define WRITE_TOP_TS_PLL_CTRL_5r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TS_PLL_CTRL_5r_BLKACC,8,TOP_TS_PLL_CTRL_5r_OFFSET,0,&(r._top_ts_pll_ctrl_5), 1)

/*******************************************************************************
 * End of 'TOP_TS_PLL_CTRL_5r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TS_PLL_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TS_PLL_STATUS.
 */
#define READ_TOP_TS_PLL_STATUSr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_TS_PLL_STATUSr_BLKACC,8,TOP_TS_PLL_STATUSr_OFFSET,0,(r._top_ts_pll_status), 1)
#define WRITE_TOP_TS_PLL_STATUSr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_TS_PLL_STATUSr_BLKACC,8,TOP_TS_PLL_STATUSr_OFFSET,0,&(r._top_ts_pll_status), 1)

/*******************************************************************************
 * End of 'TOP_TS_PLL_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_UC_TAP_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UC_TAP_CONTROL.
 */
#define READ_TOP_UC_TAP_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UC_TAP_CONTROLr_BLKACC,8,TOP_UC_TAP_CONTROLr_OFFSET,0,(r._top_uc_tap_control), 1)
#define WRITE_TOP_UC_TAP_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UC_TAP_CONTROLr_BLKACC,8,TOP_UC_TAP_CONTROLr_OFFSET,0,&(r._top_uc_tap_control), 1)

/*******************************************************************************
 * End of 'TOP_UC_TAP_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_UC_TAP_READ_DATA
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UC_TAP_READ_DATA.
 */
#define READ_TOP_UC_TAP_READ_DATAr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UC_TAP_READ_DATAr_BLKACC,8,TOP_UC_TAP_READ_DATAr_OFFSET,0,(r._top_uc_tap_read_data), 1)
#define WRITE_TOP_UC_TAP_READ_DATAr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UC_TAP_READ_DATAr_BLKACC,8,TOP_UC_TAP_READ_DATAr_OFFSET,0,&(r._top_uc_tap_read_data), 1)

/*******************************************************************************
 * End of 'TOP_UC_TAP_READ_DATAr'
 */




/*******************************************************************************
 * REGISTER:  TOP_UC_TAP_WRITE_DATA
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UC_TAP_WRITE_DATA.
 */
#define READ_TOP_UC_TAP_WRITE_DATAr(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UC_TAP_WRITE_DATAr_BLKACC,8,TOP_UC_TAP_WRITE_DATAr_OFFSET,0,(r._top_uc_tap_write_data), 1)
#define WRITE_TOP_UC_TAP_WRITE_DATAr(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UC_TAP_WRITE_DATAr_BLKACC,8,TOP_UC_TAP_WRITE_DATAr_OFFSET,0,&(r._top_uc_tap_write_data), 1)

/*******************************************************************************
 * End of 'TOP_UC_TAP_WRITE_DATAr'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_CTRL_0.
 */
#define READ_TOP_UPI_CTRL_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_CTRL_0r_BLKACC,8,TOP_UPI_CTRL_0r_OFFSET,0,(r._top_upi_ctrl_0), 1)
#define WRITE_TOP_UPI_CTRL_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_CTRL_0r_BLKACC,8,TOP_UPI_CTRL_0r_OFFSET,0,&(r._top_upi_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_UPI_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_CTRL_1.
 */
#define READ_TOP_UPI_CTRL_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_CTRL_1r_BLKACC,8,TOP_UPI_CTRL_1r_OFFSET,0,(r._top_upi_ctrl_1), 1)
#define WRITE_TOP_UPI_CTRL_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_CTRL_1r_BLKACC,8,TOP_UPI_CTRL_1r_OFFSET,0,&(r._top_upi_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_UPI_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_0.
 */
#define READ_TOP_UPI_STATUS_0r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_0r_BLKACC,8,TOP_UPI_STATUS_0r_OFFSET,0,(r._top_upi_status_0), 1)
#define WRITE_TOP_UPI_STATUS_0r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_0r_BLKACC,8,TOP_UPI_STATUS_0r_OFFSET,0,&(r._top_upi_status_0), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_10
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_10.
 */
#define READ_TOP_UPI_STATUS_10r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_10r_BLKACC,8,TOP_UPI_STATUS_10r_OFFSET,0,(r._top_upi_status_10), 1)
#define WRITE_TOP_UPI_STATUS_10r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_10r_BLKACC,8,TOP_UPI_STATUS_10r_OFFSET,0,&(r._top_upi_status_10), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_10r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_11
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_11.
 */
#define READ_TOP_UPI_STATUS_11r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_11r_BLKACC,8,TOP_UPI_STATUS_11r_OFFSET,0,(r._top_upi_status_11), 1)
#define WRITE_TOP_UPI_STATUS_11r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_11r_BLKACC,8,TOP_UPI_STATUS_11r_OFFSET,0,&(r._top_upi_status_11), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_11r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_12
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_12.
 */
#define READ_TOP_UPI_STATUS_12r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_12r_BLKACC,8,TOP_UPI_STATUS_12r_OFFSET,0,(r._top_upi_status_12), 1)
#define WRITE_TOP_UPI_STATUS_12r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_12r_BLKACC,8,TOP_UPI_STATUS_12r_OFFSET,0,&(r._top_upi_status_12), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_12r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_13
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_13.
 */
#define READ_TOP_UPI_STATUS_13r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_13r_BLKACC,8,TOP_UPI_STATUS_13r_OFFSET,0,(r._top_upi_status_13), 1)
#define WRITE_TOP_UPI_STATUS_13r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_13r_BLKACC,8,TOP_UPI_STATUS_13r_OFFSET,0,&(r._top_upi_status_13), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_13r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_14
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_14.
 */
#define READ_TOP_UPI_STATUS_14r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_14r_BLKACC,8,TOP_UPI_STATUS_14r_OFFSET,0,(r._top_upi_status_14), 1)
#define WRITE_TOP_UPI_STATUS_14r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_14r_BLKACC,8,TOP_UPI_STATUS_14r_OFFSET,0,&(r._top_upi_status_14), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_14r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_15
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_15.
 */
#define READ_TOP_UPI_STATUS_15r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_15r_BLKACC,8,TOP_UPI_STATUS_15r_OFFSET,0,(r._top_upi_status_15), 1)
#define WRITE_TOP_UPI_STATUS_15r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_15r_BLKACC,8,TOP_UPI_STATUS_15r_OFFSET,0,&(r._top_upi_status_15), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_15r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_16
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_16.
 */
#define READ_TOP_UPI_STATUS_16r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_16r_BLKACC,8,TOP_UPI_STATUS_16r_OFFSET,0,(r._top_upi_status_16), 1)
#define WRITE_TOP_UPI_STATUS_16r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_16r_BLKACC,8,TOP_UPI_STATUS_16r_OFFSET,0,&(r._top_upi_status_16), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_16r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_17
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_17.
 */
#define READ_TOP_UPI_STATUS_17r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_17r_BLKACC,8,TOP_UPI_STATUS_17r_OFFSET,0,(r._top_upi_status_17), 1)
#define WRITE_TOP_UPI_STATUS_17r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_17r_BLKACC,8,TOP_UPI_STATUS_17r_OFFSET,0,&(r._top_upi_status_17), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_17r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_18
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_18.
 */
#define READ_TOP_UPI_STATUS_18r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_18r_BLKACC,8,TOP_UPI_STATUS_18r_OFFSET,0,(r._top_upi_status_18), 1)
#define WRITE_TOP_UPI_STATUS_18r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_18r_BLKACC,8,TOP_UPI_STATUS_18r_OFFSET,0,&(r._top_upi_status_18), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_18r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_19
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_19.
 */
#define READ_TOP_UPI_STATUS_19r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_19r_BLKACC,8,TOP_UPI_STATUS_19r_OFFSET,0,(r._top_upi_status_19), 1)
#define WRITE_TOP_UPI_STATUS_19r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_19r_BLKACC,8,TOP_UPI_STATUS_19r_OFFSET,0,&(r._top_upi_status_19), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_19r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_1.
 */
#define READ_TOP_UPI_STATUS_1r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_1r_BLKACC,8,TOP_UPI_STATUS_1r_OFFSET,0,(r._top_upi_status_1), 1)
#define WRITE_TOP_UPI_STATUS_1r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_1r_BLKACC,8,TOP_UPI_STATUS_1r_OFFSET,0,&(r._top_upi_status_1), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_20
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_20.
 */
#define READ_TOP_UPI_STATUS_20r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_20r_BLKACC,8,TOP_UPI_STATUS_20r_OFFSET,0,(r._top_upi_status_20), 1)
#define WRITE_TOP_UPI_STATUS_20r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_20r_BLKACC,8,TOP_UPI_STATUS_20r_OFFSET,0,&(r._top_upi_status_20), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_20r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_21
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_21.
 */
#define READ_TOP_UPI_STATUS_21r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_21r_BLKACC,8,TOP_UPI_STATUS_21r_OFFSET,0,(r._top_upi_status_21), 1)
#define WRITE_TOP_UPI_STATUS_21r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_21r_BLKACC,8,TOP_UPI_STATUS_21r_OFFSET,0,&(r._top_upi_status_21), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_21r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_22
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_22.
 */
#define READ_TOP_UPI_STATUS_22r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_22r_BLKACC,8,TOP_UPI_STATUS_22r_OFFSET,0,(r._top_upi_status_22), 1)
#define WRITE_TOP_UPI_STATUS_22r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_22r_BLKACC,8,TOP_UPI_STATUS_22r_OFFSET,0,&(r._top_upi_status_22), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_22r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_2.
 */
#define READ_TOP_UPI_STATUS_2r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_2r_BLKACC,8,TOP_UPI_STATUS_2r_OFFSET,0,(r._top_upi_status_2), 1)
#define WRITE_TOP_UPI_STATUS_2r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_2r_BLKACC,8,TOP_UPI_STATUS_2r_OFFSET,0,&(r._top_upi_status_2), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_3.
 */
#define READ_TOP_UPI_STATUS_3r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_3r_BLKACC,8,TOP_UPI_STATUS_3r_OFFSET,0,(r._top_upi_status_3), 1)
#define WRITE_TOP_UPI_STATUS_3r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_3r_BLKACC,8,TOP_UPI_STATUS_3r_OFFSET,0,&(r._top_upi_status_3), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_4.
 */
#define READ_TOP_UPI_STATUS_4r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_4r_BLKACC,8,TOP_UPI_STATUS_4r_OFFSET,0,(r._top_upi_status_4), 1)
#define WRITE_TOP_UPI_STATUS_4r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_4r_BLKACC,8,TOP_UPI_STATUS_4r_OFFSET,0,&(r._top_upi_status_4), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_5
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_5.
 */
#define READ_TOP_UPI_STATUS_5r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_5r_BLKACC,8,TOP_UPI_STATUS_5r_OFFSET,0,(r._top_upi_status_5), 1)
#define WRITE_TOP_UPI_STATUS_5r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_5r_BLKACC,8,TOP_UPI_STATUS_5r_OFFSET,0,&(r._top_upi_status_5), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_5r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_6
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_6.
 */
#define READ_TOP_UPI_STATUS_6r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_6r_BLKACC,8,TOP_UPI_STATUS_6r_OFFSET,0,(r._top_upi_status_6), 1)
#define WRITE_TOP_UPI_STATUS_6r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_6r_BLKACC,8,TOP_UPI_STATUS_6r_OFFSET,0,&(r._top_upi_status_6), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_6r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_7
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_7.
 */
#define READ_TOP_UPI_STATUS_7r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_7r_BLKACC,8,TOP_UPI_STATUS_7r_OFFSET,0,(r._top_upi_status_7), 1)
#define WRITE_TOP_UPI_STATUS_7r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_7r_BLKACC,8,TOP_UPI_STATUS_7r_OFFSET,0,&(r._top_upi_status_7), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_7r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_8
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_8.
 */
#define READ_TOP_UPI_STATUS_8r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_8r_BLKACC,8,TOP_UPI_STATUS_8r_OFFSET,0,(r._top_upi_status_8), 1)
#define WRITE_TOP_UPI_STATUS_8r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_8r_BLKACC,8,TOP_UPI_STATUS_8r_OFFSET,0,&(r._top_upi_status_8), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_8r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_9
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_9.
 */
#define READ_TOP_UPI_STATUS_9r(u,r) bcmbd_cmicx_reg_block_read(u,TOP_UPI_STATUS_9r_BLKACC,8,TOP_UPI_STATUS_9r_OFFSET,0,(r._top_upi_status_9), 1)
#define WRITE_TOP_UPI_STATUS_9r(u,r) bcmbd_cmicx_reg_block_write(u,TOP_UPI_STATUS_9r_BLKACC,8,TOP_UPI_STATUS_9r_OFFSET,0,&(r._top_upi_status_9), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_9r'
 */




/*******************************************************************************
 * MEMORY:  TOS_FN
 * BLOCKS:   IPIPE
 * SIZE:     22
 */
/*
 * These macros can be used to access TOS_FN.
 */
#define READ_TOS_FNm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,TOS_FNm_BLKACC,1,n,0,TOS_FNm_OFFSET,i,(m._tos_fn),1)
#define WRITE_TOS_FNm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,TOS_FNm_BLKACC,1,n,0,TOS_FNm_OFFSET,i,&(m._tos_fn),1)
#define WRITE_TOS_FNm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,TOS_FNm_BLKACC,1,-1,0,TOS_FNm_OFFSET,i,&(m._tos_fn),1)

/*******************************************************************************
 * End of 'TOS_FNm'
 */




/*******************************************************************************
 * REGISTER:  TPCE_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TPCE_64.
 */
#define READ_TPCE_64r(u,p,r) bcmbd_cmicx_reg_port_read(u,TPCE_64r_BLKACC,p,TPCE_64r_OFFSET,0,(r._tpce_64), 2)
#define WRITE_TPCE_64r(u,p,r) bcmbd_cmicx_reg_port_write(u,TPCE_64r_BLKACC,p,TPCE_64r_OFFSET,0,&(r._tpce_64), 2)

/*******************************************************************************
 * End of 'TPCE_64r'
 */




/*******************************************************************************
 * MEMORY:  TRUNK_BITMAP
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access TRUNK_BITMAP.
 */
#define READ_TRUNK_BITMAPm(u,i,m) bcmbd_cmicx_mem_block_read(u,TRUNK_BITMAPm_BLKACC,1,TRUNK_BITMAPm_OFFSET,i,(m._trunk_bitmap),9)
#define WRITE_TRUNK_BITMAPm(u,i,m) bcmbd_cmicx_mem_block_write(u,TRUNK_BITMAPm_BLKACC,1,TRUNK_BITMAPm_OFFSET,i,&(m._trunk_bitmap),9)

/*******************************************************************************
 * End of 'TRUNK_BITMAPm'
 */




/*******************************************************************************
 * REGISTER:  TRUNK_GROUP_FLEX_CTR_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TRUNK_GROUP_FLEX_CTR_CONTROL.
 */
#define READ_TRUNK_GROUP_FLEX_CTR_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,TRUNK_GROUP_FLEX_CTR_CONTROLr_BLKACC,1,TRUNK_GROUP_FLEX_CTR_CONTROLr_OFFSET,0,(r._trunk_group_flex_ctr_control), 1)
#define WRITE_TRUNK_GROUP_FLEX_CTR_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,TRUNK_GROUP_FLEX_CTR_CONTROLr_BLKACC,1,TRUNK_GROUP_FLEX_CTR_CONTROLr_OFFSET,0,&(r._trunk_group_flex_ctr_control), 1)

/*******************************************************************************
 * End of 'TRUNK_GROUP_FLEX_CTR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TRUNK_RAND_LB_SEED_INST0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TRUNK_RAND_LB_SEED_INST0.
 */
#define READ_TRUNK_RAND_LB_SEED_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,TRUNK_RAND_LB_SEED_INST0r_BLKACC,1,n,0,TRUNK_RAND_LB_SEED_INST0r_OFFSET,0,(r._trunk_rand_lb_seed_inst0),1)
#define WRITE_TRUNK_RAND_LB_SEED_INST0r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,TRUNK_RAND_LB_SEED_INST0r_BLKACC,1,n,0,TRUNK_RAND_LB_SEED_INST0r_OFFSET,0,&(r._trunk_rand_lb_seed_inst0),1)
#define WRITE_TRUNK_RAND_LB_SEED_INST0r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,TRUNK_RAND_LB_SEED_INST0r_BLKACC,1,-1,0,TRUNK_RAND_LB_SEED_INST0r_OFFSET,0,&(r._trunk_rand_lb_seed_inst0),1)

/*******************************************************************************
 * End of 'TRUNK_RAND_LB_SEED_INST0r'
 */




/*******************************************************************************
 * REGISTER:  TRUNK_RAND_LB_SEED_INST1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TRUNK_RAND_LB_SEED_INST1.
 */
#define READ_TRUNK_RAND_LB_SEED_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,TRUNK_RAND_LB_SEED_INST1r_BLKACC,1,n,0,TRUNK_RAND_LB_SEED_INST1r_OFFSET,0,(r._trunk_rand_lb_seed_inst1),1)
#define WRITE_TRUNK_RAND_LB_SEED_INST1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,TRUNK_RAND_LB_SEED_INST1r_BLKACC,1,n,0,TRUNK_RAND_LB_SEED_INST1r_OFFSET,0,&(r._trunk_rand_lb_seed_inst1),1)
#define WRITE_TRUNK_RAND_LB_SEED_INST1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,TRUNK_RAND_LB_SEED_INST1r_BLKACC,1,-1,0,TRUNK_RAND_LB_SEED_INST1r_OFFSET,0,&(r._trunk_rand_lb_seed_inst1),1)

/*******************************************************************************
 * End of 'TRUNK_RAND_LB_SEED_INST1r'
 */




/*******************************************************************************
 * MEMORY:  TTL_FN
 * BLOCKS:   IPIPE
 * SIZE:     22
 */
/*
 * These macros can be used to access TTL_FN.
 */
#define READ_TTL_FNm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,TTL_FNm_BLKACC,1,n,0,TTL_FNm_OFFSET,i,(m._ttl_fn),1)
#define WRITE_TTL_FNm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,TTL_FNm_BLKACC,1,n,0,TTL_FNm_OFFSET,i,&(m._ttl_fn),1)
#define WRITE_TTL_FNm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,TTL_FNm_BLKACC,1,-1,0,TTL_FNm_OFFSET,i,&(m._ttl_fn),1)

/*******************************************************************************
 * End of 'TTL_FNm'
 */




/*******************************************************************************
 * MEMORY:  TX_LKUP_1588_MEM
 * BLOCKS:   CDPORT
 * SIZE:     81
 */
/*
 * These macros can be used to access TX_LKUP_1588_MEM.
 */
#define READ_TX_LKUP_1588_MEMm(u,i,m,p) bcmbd_cmicx_mem_blocks_read(u,TX_LKUP_1588_MEMm_BLKACC,p,TX_LKUP_1588_MEMm_OFFSET,i,(m._tx_lkup_1588_mem),3)
#define WRITE_TX_LKUP_1588_MEMm(u,i,m,p) bcmbd_cmicx_mem_blocks_write(u,TX_LKUP_1588_MEMm_BLKACC,p,TX_LKUP_1588_MEMm_OFFSET,i,&(m._tx_lkup_1588_mem),3)

/*******************************************************************************
 * End of 'TX_LKUP_1588_MEMm'
 */




/*******************************************************************************
 * MEMORY:  TX_TWOSTEP_1588_TS
 * BLOCKS:   CDPORT
 * SIZE:     69
 */
/*
 * These macros can be used to access TX_TWOSTEP_1588_TS.
 */
#define READ_TX_TWOSTEP_1588_TSm(u,i,m,p) bcmbd_cmicx_mem_blocks_read(u,TX_TWOSTEP_1588_TSm_BLKACC,p,TX_TWOSTEP_1588_TSm_OFFSET,i,(m._tx_twostep_1588_ts),3)
#define WRITE_TX_TWOSTEP_1588_TSm(u,i,m,p) bcmbd_cmicx_mem_blocks_write(u,TX_TWOSTEP_1588_TSm_BLKACC,p,TX_TWOSTEP_1588_TSm_OFFSET,i,&(m._tx_twostep_1588_ts),3)

/*******************************************************************************
 * End of 'TX_TWOSTEP_1588_TSm'
 */




/*******************************************************************************
 * REGISTER:  UDF_CAM_BIST_CONFIG_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access UDF_CAM_BIST_CONFIG_1_64.
 */
#define READ_UDF_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,UDF_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,UDF_CAM_BIST_CONFIG_1_64r_OFFSET,0,(r._udf_cam_bist_config_1_64),2)
#define WRITE_UDF_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,UDF_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,UDF_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._udf_cam_bist_config_1_64),2)
#define WRITE_UDF_CAM_BIST_CONFIG_1_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,UDF_CAM_BIST_CONFIG_1_64r_BLKACC,1,-1,0,UDF_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._udf_cam_bist_config_1_64),2)

/*******************************************************************************
 * End of 'UDF_CAM_BIST_CONFIG_1_64r'
 */




/*******************************************************************************
 * REGISTER:  UDF_CAM_BIST_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access UDF_CAM_BIST_CONFIG_64.
 */
#define READ_UDF_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,UDF_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,UDF_CAM_BIST_CONFIG_64r_OFFSET,0,(r._udf_cam_bist_config_64),2)
#define WRITE_UDF_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,UDF_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,UDF_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._udf_cam_bist_config_64),2)
#define WRITE_UDF_CAM_BIST_CONFIG_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,UDF_CAM_BIST_CONFIG_64r_BLKACC,1,-1,0,UDF_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._udf_cam_bist_config_64),2)

/*******************************************************************************
 * End of 'UDF_CAM_BIST_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  UDF_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access UDF_CAM_BIST_STATUS.
 */
#define READ_UDF_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,UDF_CAM_BIST_STATUSr_BLKACC,1,n,0,UDF_CAM_BIST_STATUSr_OFFSET,0,(r._udf_cam_bist_status),1)
#define WRITE_UDF_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,UDF_CAM_BIST_STATUSr_BLKACC,1,n,0,UDF_CAM_BIST_STATUSr_OFFSET,0,&(r._udf_cam_bist_status),1)
#define WRITE_UDF_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,UDF_CAM_BIST_STATUSr_BLKACC,1,-1,0,UDF_CAM_BIST_STATUSr_OFFSET,0,&(r._udf_cam_bist_status),1)

/*******************************************************************************
 * End of 'UDF_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  UDF_CAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access UDF_CAM_CONTROL.
 */
#define READ_UDF_CAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,UDF_CAM_CONTROLr_BLKACC,1,n,0,UDF_CAM_CONTROLr_OFFSET,0,(r._udf_cam_control),2)
#define WRITE_UDF_CAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,UDF_CAM_CONTROLr_BLKACC,1,n,0,UDF_CAM_CONTROLr_OFFSET,0,&(r._udf_cam_control),2)
#define WRITE_UDF_CAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,UDF_CAM_CONTROLr_BLKACC,1,-1,0,UDF_CAM_CONTROLr_OFFSET,0,&(r._udf_cam_control),2)

/*******************************************************************************
 * End of 'UDF_CAM_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  UDF_CONDITIONAL_CHECK_TABLE_CAM
 * BLOCKS:   IPIPE
 * SIZE:     129
 */
/*
 * These macros can be used to access UDF_CONDITIONAL_CHECK_TABLE_CAM.
 */
#define READ_UDF_CONDITIONAL_CHECK_TABLE_CAMm(u,i,m) bcmbd_cmicx_mem_block_read(u,UDF_CONDITIONAL_CHECK_TABLE_CAMm_BLKACC,1,UDF_CONDITIONAL_CHECK_TABLE_CAMm_OFFSET,i,(m._udf_conditional_check_table_cam),5)
#define WRITE_UDF_CONDITIONAL_CHECK_TABLE_CAMm(u,i,m) bcmbd_cmicx_mem_block_write(u,UDF_CONDITIONAL_CHECK_TABLE_CAMm_BLKACC,1,UDF_CONDITIONAL_CHECK_TABLE_CAMm_OFFSET,i,&(m._udf_conditional_check_table_cam),5)

/*******************************************************************************
 * End of 'UDF_CONDITIONAL_CHECK_TABLE_CAMm'
 */




/*******************************************************************************
 * MEMORY:  UDF_CONDITIONAL_CHECK_TABLE_RAM
 * BLOCKS:   IPIPE
 * SIZE:     65
 */
/*
 * These macros can be used to access UDF_CONDITIONAL_CHECK_TABLE_RAM.
 */
#define READ_UDF_CONDITIONAL_CHECK_TABLE_RAMm(u,i,m) bcmbd_cmicx_mem_block_read(u,UDF_CONDITIONAL_CHECK_TABLE_RAMm_BLKACC,1,UDF_CONDITIONAL_CHECK_TABLE_RAMm_OFFSET,i,(m._udf_conditional_check_table_ram),3)
#define WRITE_UDF_CONDITIONAL_CHECK_TABLE_RAMm(u,i,m) bcmbd_cmicx_mem_block_write(u,UDF_CONDITIONAL_CHECK_TABLE_RAMm_BLKACC,1,UDF_CONDITIONAL_CHECK_TABLE_RAMm_OFFSET,i,&(m._udf_conditional_check_table_ram),3)

/*******************************************************************************
 * End of 'UDF_CONDITIONAL_CHECK_TABLE_RAMm'
 */




/*******************************************************************************
 * MEMORY:  UDF_CONDITIONAL_CHECK_TABLE_RAM_1
 * BLOCKS:   IPIPE
 * SIZE:     208
 */
/*
 * These macros can be used to access UDF_CONDITIONAL_CHECK_TABLE_RAM_1.
 */
#define READ_UDF_CONDITIONAL_CHECK_TABLE_RAM_1m(u,i,m) bcmbd_cmicx_mem_block_read(u,UDF_CONDITIONAL_CHECK_TABLE_RAM_1m_BLKACC,1,UDF_CONDITIONAL_CHECK_TABLE_RAM_1m_OFFSET,i,(m._udf_conditional_check_table_ram_1),7)
#define WRITE_UDF_CONDITIONAL_CHECK_TABLE_RAM_1m(u,i,m) bcmbd_cmicx_mem_block_write(u,UDF_CONDITIONAL_CHECK_TABLE_RAM_1m_BLKACC,1,UDF_CONDITIONAL_CHECK_TABLE_RAM_1m_OFFSET,i,&(m._udf_conditional_check_table_ram_1),7)

/*******************************************************************************
 * End of 'UDF_CONDITIONAL_CHECK_TABLE_RAM_1m'
 */




/*******************************************************************************
 * MEMORY:  UFT_SHARED_BANKS_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     53
 */
/*
 * These macros can be used to access UFT_SHARED_BANKS_CONTROL.
 */
#define READ_UFT_SHARED_BANKS_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_read(u,UFT_SHARED_BANKS_CONTROLm_BLKACC,1,UFT_SHARED_BANKS_CONTROLm_OFFSET,i,(m._uft_shared_banks_control),2)
#define WRITE_UFT_SHARED_BANKS_CONTROLm(u,i,m) bcmbd_cmicx_mem_block_write(u,UFT_SHARED_BANKS_CONTROLm_BLKACC,1,UFT_SHARED_BANKS_CONTROLm_OFFSET,i,&(m._uft_shared_banks_control),2)

/*******************************************************************************
 * End of 'UFT_SHARED_BANKS_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  UM_TABLE
 * BLOCKS:   CDPORT
 * SIZE:     52
 */
/*
 * These macros can be used to access UM_TABLE.
 */
#define READ_UM_TABLEm(u,i,m,p) bcmbd_cmicx_mem_blocks_read(u,UM_TABLEm_BLKACC,p,UM_TABLEm_OFFSET,i,(m._um_table),2)
#define WRITE_UM_TABLEm(u,i,m,p) bcmbd_cmicx_mem_blocks_write(u,UM_TABLEm_BLKACC,p,UM_TABLEm_OFFSET,i,&(m._um_table),2)

/*******************************************************************************
 * End of 'UM_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  UNICAST_DROP_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access UNICAST_DROP_CONFIG.
 */
#define READ_UNICAST_DROP_CONFIGr(u,r) bcmbd_cmicx_reg_block_read(u,UNICAST_DROP_CONFIGr_BLKACC,1,UNICAST_DROP_CONFIGr_OFFSET,0,(r._unicast_drop_config), 1)
#define WRITE_UNICAST_DROP_CONFIGr(u,r) bcmbd_cmicx_reg_block_write(u,UNICAST_DROP_CONFIGr_BLKACC,1,UNICAST_DROP_CONFIGr_OFFSET,0,&(r._unicast_drop_config), 1)

/*******************************************************************************
 * End of 'UNICAST_DROP_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  UNKNOWN_MCAST_BLOCK_MASK
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access UNKNOWN_MCAST_BLOCK_MASK.
 */
#define READ_UNKNOWN_MCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicx_mem_block_read(u,UNKNOWN_MCAST_BLOCK_MASKm_BLKACC,1,UNKNOWN_MCAST_BLOCK_MASKm_OFFSET,i,(m._unknown_mcast_block_mask),9)
#define WRITE_UNKNOWN_MCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicx_mem_block_write(u,UNKNOWN_MCAST_BLOCK_MASKm_BLKACC,1,UNKNOWN_MCAST_BLOCK_MASKm_OFFSET,i,&(m._unknown_mcast_block_mask),9)

/*******************************************************************************
 * End of 'UNKNOWN_MCAST_BLOCK_MASKm'
 */




/*******************************************************************************
 * MEMORY:  UNKNOWN_UCAST_BLOCK_MASK
 * BLOCKS:   IPIPE
 * SIZE:     282
 */
/*
 * These macros can be used to access UNKNOWN_UCAST_BLOCK_MASK.
 */
#define READ_UNKNOWN_UCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicx_mem_block_read(u,UNKNOWN_UCAST_BLOCK_MASKm_BLKACC,1,UNKNOWN_UCAST_BLOCK_MASKm_OFFSET,i,(m._unknown_ucast_block_mask),9)
#define WRITE_UNKNOWN_UCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicx_mem_block_write(u,UNKNOWN_UCAST_BLOCK_MASKm_BLKACC,1,UNKNOWN_UCAST_BLOCK_MASKm_OFFSET,i,&(m._unknown_ucast_block_mask),9)

/*******************************************************************************
 * End of 'UNKNOWN_UCAST_BLOCK_MASKm'
 */




/*******************************************************************************
 * REGISTER:  VFP_CAM_BIST_CONFIG_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access VFP_CAM_BIST_CONFIG_1_64.
 */
#define READ_VFP_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,VFP_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,VFP_CAM_BIST_CONFIG_1_64r_OFFSET,0,(r._vfp_cam_bist_config_1_64),2)
#define WRITE_VFP_CAM_BIST_CONFIG_1_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_CAM_BIST_CONFIG_1_64r_BLKACC,1,n,0,VFP_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._vfp_cam_bist_config_1_64),2)
#define WRITE_VFP_CAM_BIST_CONFIG_1_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_CAM_BIST_CONFIG_1_64r_BLKACC,1,-1,0,VFP_CAM_BIST_CONFIG_1_64r_OFFSET,0,&(r._vfp_cam_bist_config_1_64),2)

/*******************************************************************************
 * End of 'VFP_CAM_BIST_CONFIG_1_64r'
 */




/*******************************************************************************
 * REGISTER:  VFP_CAM_BIST_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access VFP_CAM_BIST_CONFIG_64.
 */
#define READ_VFP_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,VFP_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,VFP_CAM_BIST_CONFIG_64r_OFFSET,0,(r._vfp_cam_bist_config_64),2)
#define WRITE_VFP_CAM_BIST_CONFIG_64r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_CAM_BIST_CONFIG_64r_BLKACC,1,n,0,VFP_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._vfp_cam_bist_config_64),2)
#define WRITE_VFP_CAM_BIST_CONFIG_64r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_CAM_BIST_CONFIG_64r_BLKACC,1,-1,0,VFP_CAM_BIST_CONFIG_64r_OFFSET,0,&(r._vfp_cam_bist_config_64),2)

/*******************************************************************************
 * End of 'VFP_CAM_BIST_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  VFP_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VFP_CAM_BIST_STATUS.
 */
#define READ_VFP_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,VFP_CAM_BIST_STATUSr_BLKACC,1,n,0,VFP_CAM_BIST_STATUSr_OFFSET,0,(r._vfp_cam_bist_status),1)
#define WRITE_VFP_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_CAM_BIST_STATUSr_BLKACC,1,n,0,VFP_CAM_BIST_STATUSr_OFFSET,0,&(r._vfp_cam_bist_status),1)
#define WRITE_VFP_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_CAM_BIST_STATUSr_BLKACC,1,-1,0,VFP_CAM_BIST_STATUSr_OFFSET,0,&(r._vfp_cam_bist_status),1)

/*******************************************************************************
 * End of 'VFP_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  VFP_CAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access VFP_CAM_CONTROL.
 */
#define READ_VFP_CAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,VFP_CAM_CONTROLr_BLKACC,1,n,0,VFP_CAM_CONTROLr_OFFSET,0,(r._vfp_cam_control),2)
#define WRITE_VFP_CAM_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_CAM_CONTROLr_BLKACC,1,n,0,VFP_CAM_CONTROLr_OFFSET,0,&(r._vfp_cam_control),2)
#define WRITE_VFP_CAM_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_CAM_CONTROLr_BLKACC,1,-1,0,VFP_CAM_CONTROLr_OFFSET,0,&(r._vfp_cam_control),2)

/*******************************************************************************
 * End of 'VFP_CAM_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  VFP_HASH_FIELD_BMAP_TABLE_A
 * BLOCKS:   IPIPE
 * SIZE:     13
 */
/*
 * These macros can be used to access VFP_HASH_FIELD_BMAP_TABLE_A.
 */
#define READ_VFP_HASH_FIELD_BMAP_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_read(u,VFP_HASH_FIELD_BMAP_TABLE_Am_BLKACC,1,VFP_HASH_FIELD_BMAP_TABLE_Am_OFFSET,i,(m._vfp_hash_field_bmap_table_a),1)
#define WRITE_VFP_HASH_FIELD_BMAP_TABLE_Am(u,i,m) bcmbd_cmicx_mem_block_write(u,VFP_HASH_FIELD_BMAP_TABLE_Am_BLKACC,1,VFP_HASH_FIELD_BMAP_TABLE_Am_OFFSET,i,&(m._vfp_hash_field_bmap_table_a),1)

/*******************************************************************************
 * End of 'VFP_HASH_FIELD_BMAP_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  VFP_HASH_FIELD_BMAP_TABLE_B
 * BLOCKS:   IPIPE
 * SIZE:     13
 */
/*
 * These macros can be used to access VFP_HASH_FIELD_BMAP_TABLE_B.
 */
#define READ_VFP_HASH_FIELD_BMAP_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_read(u,VFP_HASH_FIELD_BMAP_TABLE_Bm_BLKACC,1,VFP_HASH_FIELD_BMAP_TABLE_Bm_OFFSET,i,(m._vfp_hash_field_bmap_table_b),1)
#define WRITE_VFP_HASH_FIELD_BMAP_TABLE_Bm(u,i,m) bcmbd_cmicx_mem_block_write(u,VFP_HASH_FIELD_BMAP_TABLE_Bm_BLKACC,1,VFP_HASH_FIELD_BMAP_TABLE_Bm_OFFSET,i,&(m._vfp_hash_field_bmap_table_b),1)

/*******************************************************************************
 * End of 'VFP_HASH_FIELD_BMAP_TABLE_Bm'
 */




/*******************************************************************************
 * REGISTER:  VFP_KEY_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access VFP_KEY_CONTROL_1.
 */
#define READ_VFP_KEY_CONTROL_1r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,VFP_KEY_CONTROL_1r_BLKACC,1,n,0,VFP_KEY_CONTROL_1r_OFFSET,0,(r._vfp_key_control_1),2)
#define WRITE_VFP_KEY_CONTROL_1r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_KEY_CONTROL_1r_BLKACC,1,n,0,VFP_KEY_CONTROL_1r_OFFSET,0,&(r._vfp_key_control_1),2)
#define WRITE_VFP_KEY_CONTROL_1r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_KEY_CONTROL_1r_BLKACC&(~(0x1f<<18))|(17<<18),1,-1,0,VFP_KEY_CONTROL_1r_OFFSET,0,&(r._vfp_key_control_1),2)

/*******************************************************************************
 * End of 'VFP_KEY_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  VFP_KEY_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VFP_KEY_CONTROL_2.
 */
#define READ_VFP_KEY_CONTROL_2r(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,VFP_KEY_CONTROL_2r_BLKACC,1,n,0,VFP_KEY_CONTROL_2r_OFFSET,0,(r._vfp_key_control_2),1)
#define WRITE_VFP_KEY_CONTROL_2r(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_KEY_CONTROL_2r_BLKACC,1,n,0,VFP_KEY_CONTROL_2r_OFFSET,0,&(r._vfp_key_control_2),1)
#define WRITE_VFP_KEY_CONTROL_2r_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_KEY_CONTROL_2r_BLKACC&(~(0x1f<<18))|(17<<18),1,-1,0,VFP_KEY_CONTROL_2r_OFFSET,0,&(r._vfp_key_control_2),1)

/*******************************************************************************
 * End of 'VFP_KEY_CONTROL_2r'
 */




/*******************************************************************************
 * MEMORY:  VFP_POLICY_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     148
 */
/*
 * These macros can be used to access VFP_POLICY_TABLE.
 */
#define READ_VFP_POLICY_TABLEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,VFP_POLICY_TABLEm_BLKACC,1,n,0,VFP_POLICY_TABLEm_OFFSET,i,(m._vfp_policy_table),5)
#define WRITE_VFP_POLICY_TABLEm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,VFP_POLICY_TABLEm_BLKACC,1,n,0,VFP_POLICY_TABLEm_OFFSET,i,&(m._vfp_policy_table),5)
#define WRITE_VFP_POLICY_TABLEm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,VFP_POLICY_TABLEm_BLKACC,1,-1,0,VFP_POLICY_TABLEm_OFFSET,i,&(m._vfp_policy_table),5)

/*******************************************************************************
 * End of 'VFP_POLICY_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  VFP_POLICY_TABLE_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VFP_POLICY_TABLE_RAM_CONTROL.
 */
#define READ_VFP_POLICY_TABLE_RAM_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,VFP_POLICY_TABLE_RAM_CONTROLr_BLKACC,1,VFP_POLICY_TABLE_RAM_CONTROLr_OFFSET,0,(r._vfp_policy_table_ram_control), 1)
#define WRITE_VFP_POLICY_TABLE_RAM_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,VFP_POLICY_TABLE_RAM_CONTROLr_BLKACC,1,VFP_POLICY_TABLE_RAM_CONTROLr_OFFSET,0,&(r._vfp_policy_table_ram_control), 1)

/*******************************************************************************
 * End of 'VFP_POLICY_TABLE_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  VFP_SLICE_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VFP_SLICE_CONTROL.
 */
#define READ_VFP_SLICE_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,VFP_SLICE_CONTROLr_BLKACC,1,n,0,VFP_SLICE_CONTROLr_OFFSET,0,(r._vfp_slice_control),1)
#define WRITE_VFP_SLICE_CONTROLr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_SLICE_CONTROLr_BLKACC,1,n,0,VFP_SLICE_CONTROLr_OFFSET,0,&(r._vfp_slice_control),1)
#define WRITE_VFP_SLICE_CONTROLr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_SLICE_CONTROLr_BLKACC&(~(0x1f<<18))|(17<<18),1,-1,0,VFP_SLICE_CONTROLr_OFFSET,0,&(r._vfp_slice_control),1)

/*******************************************************************************
 * End of 'VFP_SLICE_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  VFP_SLICE_MAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VFP_SLICE_MAP.
 */
#define READ_VFP_SLICE_MAPr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,VFP_SLICE_MAPr_BLKACC,1,n,0,VFP_SLICE_MAPr_OFFSET,0,(r._vfp_slice_map),1)
#define WRITE_VFP_SLICE_MAPr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_SLICE_MAPr_BLKACC,1,n,0,VFP_SLICE_MAPr_OFFSET,0,&(r._vfp_slice_map),1)
#define WRITE_VFP_SLICE_MAPr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_SLICE_MAPr_BLKACC&(~(0x1f<<18))|(17<<18),1,-1,0,VFP_SLICE_MAPr_OFFSET,0,&(r._vfp_slice_map),1)

/*******************************************************************************
 * End of 'VFP_SLICE_MAPr'
 */




/*******************************************************************************
 * MEMORY:  VFP_TCAM
 * BLOCKS:   IPIPE
 * SIZE:     500
 */
/*
 * These macros can be used to access VFP_TCAM.
 */
#define READ_VFP_TCAMm(u,n,i,m) bcmbd_cmicx_mem_unique_block_read(u,VFP_TCAMm_BLKACC,1,n,0,VFP_TCAMm_OFFSET,i,(m._vfp_tcam),16)
#define WRITE_VFP_TCAMm(u,n,i,m) bcmbd_cmicx_mem_unique_block_write(u,VFP_TCAMm_BLKACC,1,n,0,VFP_TCAMm_OFFSET,i,&(m._vfp_tcam),16)
#define WRITE_VFP_TCAMm_ALL(u,i,m) bcmbd_cmicx_mem_unique_block_write(u,VFP_TCAMm_BLKACC,1,-1,0,VFP_TCAMm_OFFSET,i,&(m._vfp_tcam),16)

/*******************************************************************************
 * End of 'VFP_TCAMm'
 */




/*******************************************************************************
 * REGISTER:  VFP_TM
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access VFP_TM.
 */
#define READ_VFP_TMr(u,n,r) bcmbd_cmicx_reg_unique_block_read(u,VFP_TMr_BLKACC,1,n,0,VFP_TMr_OFFSET,0,(r._vfp_tm),2)
#define WRITE_VFP_TMr(u,n,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_TMr_BLKACC,1,n,0,VFP_TMr_OFFSET,0,&(r._vfp_tm),2)
#define WRITE_VFP_TMr_ALL(u,r) bcmbd_cmicx_reg_unique_block_write(u,VFP_TMr_BLKACC,1,-1,0,VFP_TMr_OFFSET,0,&(r._vfp_tm),2)

/*******************************************************************************
 * End of 'VFP_TMr'
 */




/*******************************************************************************
 * MEMORY:  VLAN_2_TAB
 * BLOCKS:   IPIPE
 * SIZE:     345
 */
/*
 * These macros can be used to access VLAN_2_TAB.
 */
#define READ_VLAN_2_TABm(u,i,m) bcmbd_cmicx_mem_block_read(u,VLAN_2_TABm_BLKACC,1,VLAN_2_TABm_OFFSET,i,(m._vlan_2_tab),11)
#define WRITE_VLAN_2_TABm(u,i,m) bcmbd_cmicx_mem_block_write(u,VLAN_2_TABm_BLKACC,1,VLAN_2_TABm_OFFSET,i,&(m._vlan_2_tab),11)

/*******************************************************************************
 * End of 'VLAN_2_TABm'
 */




/*******************************************************************************
 * REGISTER:  VLAN_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VLAN_CTRL.
 */
#define READ_VLAN_CTRLr(u,r) bcmbd_cmicx_reg_block_read(u,VLAN_CTRLr_BLKACC,1,VLAN_CTRLr_OFFSET,0,(r._vlan_ctrl), 1)
#define WRITE_VLAN_CTRLr(u,r) bcmbd_cmicx_reg_block_write(u,VLAN_CTRLr_BLKACC,1,VLAN_CTRLr_OFFSET,0,&(r._vlan_ctrl), 1)

/*******************************************************************************
 * End of 'VLAN_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  VLAN_MPLS
 * BLOCKS:   IPIPE
 * SIZE:     20
 */
/*
 * These macros can be used to access VLAN_MPLS.
 */
#define READ_VLAN_MPLSm(u,i,m) bcmbd_cmicx_mem_block_read(u,VLAN_MPLSm_BLKACC,1,VLAN_MPLSm_OFFSET,i,(m._vlan_mpls),1)
#define WRITE_VLAN_MPLSm(u,i,m) bcmbd_cmicx_mem_block_write(u,VLAN_MPLSm_BLKACC,1,VLAN_MPLSm_OFFSET,i,&(m._vlan_mpls),1)

/*******************************************************************************
 * End of 'VLAN_MPLSm'
 */




/*******************************************************************************
 * MEMORY:  VLAN_PROFILE_2
 * BLOCKS:   IPIPE
 * SIZE:     563
 */
/*
 * These macros can be used to access VLAN_PROFILE_2.
 */
#define READ_VLAN_PROFILE_2m(u,i,m) bcmbd_cmicx_mem_block_read(u,VLAN_PROFILE_2m_BLKACC,1,VLAN_PROFILE_2m_OFFSET,i,(m._vlan_profile_2),18)
#define WRITE_VLAN_PROFILE_2m(u,i,m) bcmbd_cmicx_mem_block_write(u,VLAN_PROFILE_2m_BLKACC,1,VLAN_PROFILE_2m_OFFSET,i,&(m._vlan_profile_2),18)

/*******************************************************************************
 * End of 'VLAN_PROFILE_2m'
 */




/*******************************************************************************
 * MEMORY:  VLAN_PROFILE_TAB
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access VLAN_PROFILE_TAB.
 */
#define READ_VLAN_PROFILE_TABm(u,i,m) bcmbd_cmicx_mem_block_read(u,VLAN_PROFILE_TABm_BLKACC,1,VLAN_PROFILE_TABm_OFFSET,i,(m._vlan_profile_tab),2)
#define WRITE_VLAN_PROFILE_TABm(u,i,m) bcmbd_cmicx_mem_block_write(u,VLAN_PROFILE_TABm_BLKACC,1,VLAN_PROFILE_TABm_OFFSET,i,&(m._vlan_profile_tab),2)

/*******************************************************************************
 * End of 'VLAN_PROFILE_TABm'
 */




/*******************************************************************************
 * MEMORY:  VLAN_TAB
 * BLOCKS:   IPIPE
 * SIZE:     81
 */
/*
 * These macros can be used to access VLAN_TAB.
 */
#define READ_VLAN_TABm(u,i,m) bcmbd_cmicx_mem_block_read(u,VLAN_TABm_BLKACC,1,VLAN_TABm_OFFSET,i,(m._vlan_tab),3)
#define WRITE_VLAN_TABm(u,i,m) bcmbd_cmicx_mem_block_write(u,VLAN_TABm_BLKACC,1,VLAN_TABm_OFFSET,i,&(m._vlan_tab),3)

/*******************************************************************************
 * End of 'VLAN_TABm'
 */




/*******************************************************************************
 * REGISTER:  VRF_MASK
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VRF_MASK.
 */
#define READ_VRF_MASKr(u,r) bcmbd_cmicx_reg_block_read(u,VRF_MASKr_BLKACC,1,VRF_MASKr_OFFSET,0,(r._vrf_mask), 1)
#define WRITE_VRF_MASKr(u,r) bcmbd_cmicx_reg_block_write(u,VRF_MASKr_BLKACC,1,VRF_MASKr_OFFSET,0,&(r._vrf_mask), 1)

/*******************************************************************************
 * End of 'VRF_MASKr'
 */




/*******************************************************************************
 * REGISTER:  VXLAN_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access VXLAN_CONTROL.
 */
#define READ_VXLAN_CONTROLr(u,r) bcmbd_cmicx_reg_block_read(u,VXLAN_CONTROLr_BLKACC,1,VXLAN_CONTROLr_OFFSET,0,(r._vxlan_control), 2)
#define WRITE_VXLAN_CONTROLr(u,r) bcmbd_cmicx_reg_block_write(u,VXLAN_CONTROLr_BLKACC,1,VXLAN_CONTROLr_OFFSET,0,&(r._vxlan_control), 2)

/*******************************************************************************
 * End of 'VXLAN_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  VXLAN_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access VXLAN_CONTROL_2.
 */
#define READ_VXLAN_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_read(u,VXLAN_CONTROL_2r_BLKACC,1,VXLAN_CONTROL_2r_OFFSET,0,(r._vxlan_control_2), 2)
#define WRITE_VXLAN_CONTROL_2r(u,r) bcmbd_cmicx_reg_block_write(u,VXLAN_CONTROL_2r_BLKACC,1,VXLAN_CONTROL_2r_OFFSET,0,&(r._vxlan_control_2), 2)

/*******************************************************************************
 * End of 'VXLAN_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  VXLAN_CONTROL_3
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access VXLAN_CONTROL_3.
 */
#define READ_VXLAN_CONTROL_3r(u,r) bcmbd_cmicx_reg_block_read(u,VXLAN_CONTROL_3r_BLKACC,1,VXLAN_CONTROL_3r_OFFSET,0,(r._vxlan_control_3), 2)
#define WRITE_VXLAN_CONTROL_3r(u,r) bcmbd_cmicx_reg_block_write(u,VXLAN_CONTROL_3r_BLKACC,1,VXLAN_CONTROL_3r_OFFSET,0,&(r._vxlan_control_3), 2)

/*******************************************************************************
 * End of 'VXLAN_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_CLEAR_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_CLEAR_ECC_STATUS.
 */
#define READ_XLMAC_CLEAR_ECC_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_CLEAR_ECC_STATUSr_BLKACC,p,XLMAC_CLEAR_ECC_STATUSr_OFFSET,0,(r._xlmac_clear_ecc_status), 2)
#define WRITE_XLMAC_CLEAR_ECC_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_CLEAR_ECC_STATUSr_BLKACC,p,XLMAC_CLEAR_ECC_STATUSr_OFFSET,0,&(r._xlmac_clear_ecc_status), 2)

/*******************************************************************************
 * End of 'XLMAC_CLEAR_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_CLEAR_FIFO_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_CLEAR_FIFO_STATUS.
 */
#define READ_XLMAC_CLEAR_FIFO_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_CLEAR_FIFO_STATUSr_BLKACC,p,XLMAC_CLEAR_FIFO_STATUSr_OFFSET,0,(r._xlmac_clear_fifo_status), 2)
#define WRITE_XLMAC_CLEAR_FIFO_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_CLEAR_FIFO_STATUSr_BLKACC,p,XLMAC_CLEAR_FIFO_STATUSr_OFFSET,0,&(r._xlmac_clear_fifo_status), 2)

/*******************************************************************************
 * End of 'XLMAC_CLEAR_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_CLEAR_RX_LSS_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_CLEAR_RX_LSS_STATUS.
 */
#define READ_XLMAC_CLEAR_RX_LSS_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_CLEAR_RX_LSS_STATUSr_BLKACC,p,XLMAC_CLEAR_RX_LSS_STATUSr_OFFSET,0,(r._xlmac_clear_rx_lss_status), 2)
#define WRITE_XLMAC_CLEAR_RX_LSS_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_CLEAR_RX_LSS_STATUSr_BLKACC,p,XLMAC_CLEAR_RX_LSS_STATUSr_OFFSET,0,&(r._xlmac_clear_rx_lss_status), 2)

/*******************************************************************************
 * End of 'XLMAC_CLEAR_RX_LSS_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_CTRL.
 */
#define READ_XLMAC_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_CTRLr_BLKACC,p,XLMAC_CTRLr_OFFSET,0,(r._xlmac_ctrl), 2)
#define WRITE_XLMAC_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_CTRLr_BLKACC,p,XLMAC_CTRLr_OFFSET,0,&(r._xlmac_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2ECC_DATA_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2ECC_DATA_HDR_0.
 */
#define READ_XLMAC_E2ECC_DATA_HDR_0r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_E2ECC_DATA_HDR_0r_BLKACC,p,XLMAC_E2ECC_DATA_HDR_0r_OFFSET,0,(r._xlmac_e2ecc_data_hdr_0), 2)
#define WRITE_XLMAC_E2ECC_DATA_HDR_0r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_E2ECC_DATA_HDR_0r_BLKACC,p,XLMAC_E2ECC_DATA_HDR_0r_OFFSET,0,&(r._xlmac_e2ecc_data_hdr_0), 2)

/*******************************************************************************
 * End of 'XLMAC_E2ECC_DATA_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2ECC_DATA_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2ECC_DATA_HDR_1.
 */
#define READ_XLMAC_E2ECC_DATA_HDR_1r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_E2ECC_DATA_HDR_1r_BLKACC,p,XLMAC_E2ECC_DATA_HDR_1r_OFFSET,0,(r._xlmac_e2ecc_data_hdr_1), 2)
#define WRITE_XLMAC_E2ECC_DATA_HDR_1r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_E2ECC_DATA_HDR_1r_BLKACC,p,XLMAC_E2ECC_DATA_HDR_1r_OFFSET,0,&(r._xlmac_e2ecc_data_hdr_1), 2)

/*******************************************************************************
 * End of 'XLMAC_E2ECC_DATA_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2ECC_MODULE_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2ECC_MODULE_HDR_0.
 */
#define READ_XLMAC_E2ECC_MODULE_HDR_0r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_E2ECC_MODULE_HDR_0r_BLKACC,p,XLMAC_E2ECC_MODULE_HDR_0r_OFFSET,0,(r._xlmac_e2ecc_module_hdr_0), 2)
#define WRITE_XLMAC_E2ECC_MODULE_HDR_0r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_E2ECC_MODULE_HDR_0r_BLKACC,p,XLMAC_E2ECC_MODULE_HDR_0r_OFFSET,0,&(r._xlmac_e2ecc_module_hdr_0), 2)

/*******************************************************************************
 * End of 'XLMAC_E2ECC_MODULE_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2ECC_MODULE_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2ECC_MODULE_HDR_1.
 */
#define READ_XLMAC_E2ECC_MODULE_HDR_1r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_E2ECC_MODULE_HDR_1r_BLKACC,p,XLMAC_E2ECC_MODULE_HDR_1r_OFFSET,0,(r._xlmac_e2ecc_module_hdr_1), 2)
#define WRITE_XLMAC_E2ECC_MODULE_HDR_1r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_E2ECC_MODULE_HDR_1r_BLKACC,p,XLMAC_E2ECC_MODULE_HDR_1r_OFFSET,0,&(r._xlmac_e2ecc_module_hdr_1), 2)

/*******************************************************************************
 * End of 'XLMAC_E2ECC_MODULE_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2EFC_DATA_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2EFC_DATA_HDR_0.
 */
#define READ_XLMAC_E2EFC_DATA_HDR_0r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_E2EFC_DATA_HDR_0r_BLKACC,p,XLMAC_E2EFC_DATA_HDR_0r_OFFSET,0,(r._xlmac_e2efc_data_hdr_0), 2)
#define WRITE_XLMAC_E2EFC_DATA_HDR_0r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_E2EFC_DATA_HDR_0r_BLKACC,p,XLMAC_E2EFC_DATA_HDR_0r_OFFSET,0,&(r._xlmac_e2efc_data_hdr_0), 2)

/*******************************************************************************
 * End of 'XLMAC_E2EFC_DATA_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2EFC_DATA_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2EFC_DATA_HDR_1.
 */
#define READ_XLMAC_E2EFC_DATA_HDR_1r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_E2EFC_DATA_HDR_1r_BLKACC,p,XLMAC_E2EFC_DATA_HDR_1r_OFFSET,0,(r._xlmac_e2efc_data_hdr_1), 2)
#define WRITE_XLMAC_E2EFC_DATA_HDR_1r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_E2EFC_DATA_HDR_1r_BLKACC,p,XLMAC_E2EFC_DATA_HDR_1r_OFFSET,0,&(r._xlmac_e2efc_data_hdr_1), 2)

/*******************************************************************************
 * End of 'XLMAC_E2EFC_DATA_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2EFC_MODULE_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2EFC_MODULE_HDR_0.
 */
#define READ_XLMAC_E2EFC_MODULE_HDR_0r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_E2EFC_MODULE_HDR_0r_BLKACC,p,XLMAC_E2EFC_MODULE_HDR_0r_OFFSET,0,(r._xlmac_e2efc_module_hdr_0), 2)
#define WRITE_XLMAC_E2EFC_MODULE_HDR_0r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_E2EFC_MODULE_HDR_0r_BLKACC,p,XLMAC_E2EFC_MODULE_HDR_0r_OFFSET,0,&(r._xlmac_e2efc_module_hdr_0), 2)

/*******************************************************************************
 * End of 'XLMAC_E2EFC_MODULE_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2EFC_MODULE_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2EFC_MODULE_HDR_1.
 */
#define READ_XLMAC_E2EFC_MODULE_HDR_1r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_E2EFC_MODULE_HDR_1r_BLKACC,p,XLMAC_E2EFC_MODULE_HDR_1r_OFFSET,0,(r._xlmac_e2efc_module_hdr_1), 2)
#define WRITE_XLMAC_E2EFC_MODULE_HDR_1r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_E2EFC_MODULE_HDR_1r_BLKACC,p,XLMAC_E2EFC_MODULE_HDR_1r_OFFSET,0,&(r._xlmac_e2efc_module_hdr_1), 2)

/*******************************************************************************
 * End of 'XLMAC_E2EFC_MODULE_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2E_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2E_CTRL.
 */
#define READ_XLMAC_E2E_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_E2E_CTRLr_BLKACC,p,XLMAC_E2E_CTRLr_OFFSET,0,(r._xlmac_e2e_ctrl), 2)
#define WRITE_XLMAC_E2E_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_E2E_CTRLr_BLKACC,p,XLMAC_E2E_CTRLr_OFFSET,0,&(r._xlmac_e2e_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_E2E_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_ECC_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_ECC_CTRL.
 */
#define READ_XLMAC_ECC_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_ECC_CTRLr_BLKACC,p,XLMAC_ECC_CTRLr_OFFSET,0,(r._xlmac_ecc_ctrl), 2)
#define WRITE_XLMAC_ECC_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_ECC_CTRLr_BLKACC,p,XLMAC_ECC_CTRLr_OFFSET,0,&(r._xlmac_ecc_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_ECC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_ECC_FORCE_DOUBLE_BIT_ERR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_ECC_FORCE_DOUBLE_BIT_ERR.
 */
#define READ_XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_BLKACC,p,XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_OFFSET,0,(r._xlmac_ecc_force_double_bit_err), 2)
#define WRITE_XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_BLKACC,p,XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_OFFSET,0,&(r._xlmac_ecc_force_double_bit_err), 2)

/*******************************************************************************
 * End of 'XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_ECC_FORCE_SINGLE_BIT_ERR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_ECC_FORCE_SINGLE_BIT_ERR.
 */
#define READ_XLMAC_ECC_FORCE_SINGLE_BIT_ERRr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_BLKACC,p,XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_OFFSET,0,(r._xlmac_ecc_force_single_bit_err), 2)
#define WRITE_XLMAC_ECC_FORCE_SINGLE_BIT_ERRr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_BLKACC,p,XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_OFFSET,0,&(r._xlmac_ecc_force_single_bit_err), 2)

/*******************************************************************************
 * End of 'XLMAC_ECC_FORCE_SINGLE_BIT_ERRr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_EEE_1_SEC_LINK_STATUS_TIMER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_EEE_1_SEC_LINK_STATUS_TIMER.
 */
#define READ_XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_BLKACC,p,XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_OFFSET,0,(r._xlmac_eee_1_sec_link_status_timer), 2)
#define WRITE_XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_BLKACC,p,XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_OFFSET,0,&(r._xlmac_eee_1_sec_link_status_timer), 2)

/*******************************************************************************
 * End of 'XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_EEE_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_EEE_CTRL.
 */
#define READ_XLMAC_EEE_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_EEE_CTRLr_BLKACC,p,XLMAC_EEE_CTRLr_OFFSET,0,(r._xlmac_eee_ctrl), 2)
#define WRITE_XLMAC_EEE_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_EEE_CTRLr_BLKACC,p,XLMAC_EEE_CTRLr_OFFSET,0,&(r._xlmac_eee_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_EEE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_EEE_TIMERS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_EEE_TIMERS.
 */
#define READ_XLMAC_EEE_TIMERSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_EEE_TIMERSr_BLKACC,p,XLMAC_EEE_TIMERSr_OFFSET,0,(r._xlmac_eee_timers), 2)
#define WRITE_XLMAC_EEE_TIMERSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_EEE_TIMERSr_BLKACC,p,XLMAC_EEE_TIMERSr_OFFSET,0,&(r._xlmac_eee_timers), 2)

/*******************************************************************************
 * End of 'XLMAC_EEE_TIMERSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_FIFO_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_FIFO_STATUS.
 */
#define READ_XLMAC_FIFO_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_FIFO_STATUSr_BLKACC,p,XLMAC_FIFO_STATUSr_OFFSET,0,(r._xlmac_fifo_status), 2)
#define WRITE_XLMAC_FIFO_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_FIFO_STATUSr_BLKACC,p,XLMAC_FIFO_STATUSr_OFFSET,0,&(r._xlmac_fifo_status), 2)

/*******************************************************************************
 * End of 'XLMAC_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_GMII_EEE_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_GMII_EEE_CTRL.
 */
#define READ_XLMAC_GMII_EEE_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_GMII_EEE_CTRLr_BLKACC,p,XLMAC_GMII_EEE_CTRLr_OFFSET,0,(r._xlmac_gmii_eee_ctrl), 2)
#define WRITE_XLMAC_GMII_EEE_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_GMII_EEE_CTRLr_BLKACC,p,XLMAC_GMII_EEE_CTRLr_OFFSET,0,&(r._xlmac_gmii_eee_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_GMII_EEE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_HIGIG_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_HIGIG_HDR_0.
 */
#define READ_XLMAC_HIGIG_HDR_0r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_HIGIG_HDR_0r_BLKACC,p,XLMAC_HIGIG_HDR_0r_OFFSET,0,(r._xlmac_higig_hdr_0), 2)
#define WRITE_XLMAC_HIGIG_HDR_0r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_HIGIG_HDR_0r_BLKACC,p,XLMAC_HIGIG_HDR_0r_OFFSET,0,&(r._xlmac_higig_hdr_0), 2)

/*******************************************************************************
 * End of 'XLMAC_HIGIG_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_HIGIG_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_HIGIG_HDR_1.
 */
#define READ_XLMAC_HIGIG_HDR_1r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_HIGIG_HDR_1r_BLKACC,p,XLMAC_HIGIG_HDR_1r_OFFSET,0,(r._xlmac_higig_hdr_1), 2)
#define WRITE_XLMAC_HIGIG_HDR_1r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_HIGIG_HDR_1r_BLKACC,p,XLMAC_HIGIG_HDR_1r_OFFSET,0,&(r._xlmac_higig_hdr_1), 2)

/*******************************************************************************
 * End of 'XLMAC_HIGIG_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_INTR_ENABLE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_INTR_ENABLE.
 */
#define READ_XLMAC_INTR_ENABLEr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_INTR_ENABLEr_BLKACC,p,XLMAC_INTR_ENABLEr_OFFSET,0,(r._xlmac_intr_enable), 2)
#define WRITE_XLMAC_INTR_ENABLEr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_INTR_ENABLEr_BLKACC,p,XLMAC_INTR_ENABLEr_OFFSET,0,&(r._xlmac_intr_enable), 2)

/*******************************************************************************
 * End of 'XLMAC_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_INTR_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_INTR_STATUS.
 */
#define READ_XLMAC_INTR_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_INTR_STATUSr_BLKACC,p,XLMAC_INTR_STATUSr_OFFSET,0,(r._xlmac_intr_status), 2)
#define WRITE_XLMAC_INTR_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_INTR_STATUSr_BLKACC,p,XLMAC_INTR_STATUSr_OFFSET,0,&(r._xlmac_intr_status), 2)

/*******************************************************************************
 * End of 'XLMAC_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_LAG_FAILOVER_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_LAG_FAILOVER_STATUS.
 */
#define READ_XLMAC_LAG_FAILOVER_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_LAG_FAILOVER_STATUSr_BLKACC,p,XLMAC_LAG_FAILOVER_STATUSr_OFFSET,0,(r._xlmac_lag_failover_status), 2)
#define WRITE_XLMAC_LAG_FAILOVER_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_LAG_FAILOVER_STATUSr_BLKACC,p,XLMAC_LAG_FAILOVER_STATUSr_OFFSET,0,&(r._xlmac_lag_failover_status), 2)

/*******************************************************************************
 * End of 'XLMAC_LAG_FAILOVER_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_LLFC_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_LLFC_CTRL.
 */
#define READ_XLMAC_LLFC_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_LLFC_CTRLr_BLKACC,p,XLMAC_LLFC_CTRLr_OFFSET,0,(r._xlmac_llfc_ctrl), 2)
#define WRITE_XLMAC_LLFC_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_LLFC_CTRLr_BLKACC,p,XLMAC_LLFC_CTRLr_OFFSET,0,&(r._xlmac_llfc_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_LLFC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_MEM_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_MEM_CTRL.
 */
#define READ_XLMAC_MEM_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_MEM_CTRLr_BLKACC,p,XLMAC_MEM_CTRLr_OFFSET,0,(r._xlmac_mem_ctrl), 2)
#define WRITE_XLMAC_MEM_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_MEM_CTRLr_BLKACC,p,XLMAC_MEM_CTRLr_OFFSET,0,&(r._xlmac_mem_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_MEM_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_MODE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_MODE.
 */
#define READ_XLMAC_MODEr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_MODEr_BLKACC,p,XLMAC_MODEr_OFFSET,0,(r._xlmac_mode), 2)
#define WRITE_XLMAC_MODEr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_MODEr_BLKACC,p,XLMAC_MODEr_OFFSET,0,&(r._xlmac_mode), 2)

/*******************************************************************************
 * End of 'XLMAC_MODEr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PAUSE_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_PAUSE_CTRL.
 */
#define READ_XLMAC_PAUSE_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_PAUSE_CTRLr_BLKACC,p,XLMAC_PAUSE_CTRLr_OFFSET,0,(r._xlmac_pause_ctrl), 2)
#define WRITE_XLMAC_PAUSE_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_PAUSE_CTRLr_BLKACC,p,XLMAC_PAUSE_CTRLr_OFFSET,0,&(r._xlmac_pause_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_PAUSE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PFC_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_PFC_CTRL.
 */
#define READ_XLMAC_PFC_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_PFC_CTRLr_BLKACC,p,XLMAC_PFC_CTRLr_OFFSET,0,(r._xlmac_pfc_ctrl), 2)
#define WRITE_XLMAC_PFC_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_PFC_CTRLr_BLKACC,p,XLMAC_PFC_CTRLr_OFFSET,0,&(r._xlmac_pfc_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_PFC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PFC_DA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_PFC_DA.
 */
#define READ_XLMAC_PFC_DAr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_PFC_DAr_BLKACC,p,XLMAC_PFC_DAr_OFFSET,0,(r._xlmac_pfc_da), 2)
#define WRITE_XLMAC_PFC_DAr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_PFC_DAr_BLKACC,p,XLMAC_PFC_DAr_OFFSET,0,&(r._xlmac_pfc_da), 2)

/*******************************************************************************
 * End of 'XLMAC_PFC_DAr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PFC_OPCODE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_PFC_OPCODE.
 */
#define READ_XLMAC_PFC_OPCODEr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_PFC_OPCODEr_BLKACC,p,XLMAC_PFC_OPCODEr_OFFSET,0,(r._xlmac_pfc_opcode), 2)
#define WRITE_XLMAC_PFC_OPCODEr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_PFC_OPCODEr_BLKACC,p,XLMAC_PFC_OPCODEr_OFFSET,0,&(r._xlmac_pfc_opcode), 2)

/*******************************************************************************
 * End of 'XLMAC_PFC_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PFC_TYPE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_PFC_TYPE.
 */
#define READ_XLMAC_PFC_TYPEr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_PFC_TYPEr_BLKACC,p,XLMAC_PFC_TYPEr_OFFSET,0,(r._xlmac_pfc_type), 2)
#define WRITE_XLMAC_PFC_TYPEr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_PFC_TYPEr_BLKACC,p,XLMAC_PFC_TYPEr_OFFSET,0,&(r._xlmac_pfc_type), 2)

/*******************************************************************************
 * End of 'XLMAC_PFC_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_CDC_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_CDC_ECC_STATUS.
 */
#define READ_XLMAC_RX_CDC_ECC_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_RX_CDC_ECC_STATUSr_BLKACC,p,XLMAC_RX_CDC_ECC_STATUSr_OFFSET,0,(r._xlmac_rx_cdc_ecc_status), 2)
#define WRITE_XLMAC_RX_CDC_ECC_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_RX_CDC_ECC_STATUSr_BLKACC,p,XLMAC_RX_CDC_ECC_STATUSr_OFFSET,0,&(r._xlmac_rx_cdc_ecc_status), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_CDC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_CTRL.
 */
#define READ_XLMAC_RX_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_RX_CTRLr_BLKACC,p,XLMAC_RX_CTRLr_OFFSET,0,(r._xlmac_rx_ctrl), 2)
#define WRITE_XLMAC_RX_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_RX_CTRLr_BLKACC,p,XLMAC_RX_CTRLr_OFFSET,0,&(r._xlmac_rx_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_LLFC_MSG_FIELDS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_LLFC_MSG_FIELDS.
 */
#define READ_XLMAC_RX_LLFC_MSG_FIELDSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_RX_LLFC_MSG_FIELDSr_BLKACC,p,XLMAC_RX_LLFC_MSG_FIELDSr_OFFSET,0,(r._xlmac_rx_llfc_msg_fields), 2)
#define WRITE_XLMAC_RX_LLFC_MSG_FIELDSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_RX_LLFC_MSG_FIELDSr_BLKACC,p,XLMAC_RX_LLFC_MSG_FIELDSr_OFFSET,0,&(r._xlmac_rx_llfc_msg_fields), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_LLFC_MSG_FIELDSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_LSS_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_LSS_CTRL.
 */
#define READ_XLMAC_RX_LSS_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_RX_LSS_CTRLr_BLKACC,p,XLMAC_RX_LSS_CTRLr_OFFSET,0,(r._xlmac_rx_lss_ctrl), 2)
#define WRITE_XLMAC_RX_LSS_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_RX_LSS_CTRLr_BLKACC,p,XLMAC_RX_LSS_CTRLr_OFFSET,0,&(r._xlmac_rx_lss_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_LSS_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_LSS_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_LSS_STATUS.
 */
#define READ_XLMAC_RX_LSS_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_RX_LSS_STATUSr_BLKACC,p,XLMAC_RX_LSS_STATUSr_OFFSET,0,(r._xlmac_rx_lss_status), 2)
#define WRITE_XLMAC_RX_LSS_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_RX_LSS_STATUSr_BLKACC,p,XLMAC_RX_LSS_STATUSr_OFFSET,0,&(r._xlmac_rx_lss_status), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_LSS_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_MAC_SA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_MAC_SA.
 */
#define READ_XLMAC_RX_MAC_SAr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_RX_MAC_SAr_BLKACC,p,XLMAC_RX_MAC_SAr_OFFSET,0,(r._xlmac_rx_mac_sa), 2)
#define WRITE_XLMAC_RX_MAC_SAr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_RX_MAC_SAr_BLKACC,p,XLMAC_RX_MAC_SAr_OFFSET,0,&(r._xlmac_rx_mac_sa), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_MAC_SAr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_MAX_SIZE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_MAX_SIZE.
 */
#define READ_XLMAC_RX_MAX_SIZEr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_RX_MAX_SIZEr_BLKACC,p,XLMAC_RX_MAX_SIZEr_OFFSET,0,(r._xlmac_rx_max_size), 2)
#define WRITE_XLMAC_RX_MAX_SIZEr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_RX_MAX_SIZEr_BLKACC,p,XLMAC_RX_MAX_SIZEr_OFFSET,0,&(r._xlmac_rx_max_size), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_MAX_SIZEr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_VLAN_TAG
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_VLAN_TAG.
 */
#define READ_XLMAC_RX_VLAN_TAGr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_RX_VLAN_TAGr_BLKACC,p,XLMAC_RX_VLAN_TAGr_OFFSET,0,(r._xlmac_rx_vlan_tag), 2)
#define WRITE_XLMAC_RX_VLAN_TAGr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_RX_VLAN_TAGr_BLKACC,p,XLMAC_RX_VLAN_TAGr_OFFSET,0,&(r._xlmac_rx_vlan_tag), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_VLAN_TAGr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_SPARE0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_SPARE0.
 */
#define READ_XLMAC_SPARE0r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_SPARE0r_BLKACC,p,XLMAC_SPARE0r_OFFSET,0,(r._xlmac_spare0), 2)
#define WRITE_XLMAC_SPARE0r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_SPARE0r_BLKACC,p,XLMAC_SPARE0r_OFFSET,0,&(r._xlmac_spare0), 2)

/*******************************************************************************
 * End of 'XLMAC_SPARE0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_SPARE1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_SPARE1.
 */
#define READ_XLMAC_SPARE1r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_SPARE1r_BLKACC,p,XLMAC_SPARE1r_OFFSET,0,(r._xlmac_spare1), 2)
#define WRITE_XLMAC_SPARE1r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_SPARE1r_BLKACC,p,XLMAC_SPARE1r_OFFSET,0,&(r._xlmac_spare1), 2)

/*******************************************************************************
 * End of 'XLMAC_SPARE1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TIMESTAMP_ADJUST
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TIMESTAMP_ADJUST.
 */
#define READ_XLMAC_TIMESTAMP_ADJUSTr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_TIMESTAMP_ADJUSTr_BLKACC,p,XLMAC_TIMESTAMP_ADJUSTr_OFFSET,0,(r._xlmac_timestamp_adjust), 2)
#define WRITE_XLMAC_TIMESTAMP_ADJUSTr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_TIMESTAMP_ADJUSTr_BLKACC,p,XLMAC_TIMESTAMP_ADJUSTr_OFFSET,0,&(r._xlmac_timestamp_adjust), 2)

/*******************************************************************************
 * End of 'XLMAC_TIMESTAMP_ADJUSTr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TIMESTAMP_BYTE_ADJUST
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TIMESTAMP_BYTE_ADJUST.
 */
#define READ_XLMAC_TIMESTAMP_BYTE_ADJUSTr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_TIMESTAMP_BYTE_ADJUSTr_BLKACC,p,XLMAC_TIMESTAMP_BYTE_ADJUSTr_OFFSET,0,(r._xlmac_timestamp_byte_adjust), 2)
#define WRITE_XLMAC_TIMESTAMP_BYTE_ADJUSTr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_TIMESTAMP_BYTE_ADJUSTr_BLKACC,p,XLMAC_TIMESTAMP_BYTE_ADJUSTr_OFFSET,0,&(r._xlmac_timestamp_byte_adjust), 2)

/*******************************************************************************
 * End of 'XLMAC_TIMESTAMP_BYTE_ADJUSTr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TXFIFO_CELL_CNT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TXFIFO_CELL_CNT.
 */
#define READ_XLMAC_TXFIFO_CELL_CNTr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_TXFIFO_CELL_CNTr_BLKACC,p,XLMAC_TXFIFO_CELL_CNTr_OFFSET,0,(r._xlmac_txfifo_cell_cnt), 2)
#define WRITE_XLMAC_TXFIFO_CELL_CNTr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_TXFIFO_CELL_CNTr_BLKACC,p,XLMAC_TXFIFO_CELL_CNTr_OFFSET,0,&(r._xlmac_txfifo_cell_cnt), 2)

/*******************************************************************************
 * End of 'XLMAC_TXFIFO_CELL_CNTr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TXFIFO_CELL_REQ_CNT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TXFIFO_CELL_REQ_CNT.
 */
#define READ_XLMAC_TXFIFO_CELL_REQ_CNTr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_TXFIFO_CELL_REQ_CNTr_BLKACC,p,XLMAC_TXFIFO_CELL_REQ_CNTr_OFFSET,0,(r._xlmac_txfifo_cell_req_cnt), 2)
#define WRITE_XLMAC_TXFIFO_CELL_REQ_CNTr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_TXFIFO_CELL_REQ_CNTr_BLKACC,p,XLMAC_TXFIFO_CELL_REQ_CNTr_OFFSET,0,&(r._xlmac_txfifo_cell_req_cnt), 2)

/*******************************************************************************
 * End of 'XLMAC_TXFIFO_CELL_REQ_CNTr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_CDC_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TX_CDC_ECC_STATUS.
 */
#define READ_XLMAC_TX_CDC_ECC_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_TX_CDC_ECC_STATUSr_BLKACC,p,XLMAC_TX_CDC_ECC_STATUSr_OFFSET,0,(r._xlmac_tx_cdc_ecc_status), 2)
#define WRITE_XLMAC_TX_CDC_ECC_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_TX_CDC_ECC_STATUSr_BLKACC,p,XLMAC_TX_CDC_ECC_STATUSr_OFFSET,0,&(r._xlmac_tx_cdc_ecc_status), 2)

/*******************************************************************************
 * End of 'XLMAC_TX_CDC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_CRC_CORRUPT_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TX_CRC_CORRUPT_CTRL.
 */
#define READ_XLMAC_TX_CRC_CORRUPT_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_TX_CRC_CORRUPT_CTRLr_BLKACC,p,XLMAC_TX_CRC_CORRUPT_CTRLr_OFFSET,0,(r._xlmac_tx_crc_corrupt_ctrl), 2)
#define WRITE_XLMAC_TX_CRC_CORRUPT_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_TX_CRC_CORRUPT_CTRLr_BLKACC,p,XLMAC_TX_CRC_CORRUPT_CTRLr_OFFSET,0,&(r._xlmac_tx_crc_corrupt_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_TX_CRC_CORRUPT_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TX_CTRL.
 */
#define READ_XLMAC_TX_CTRLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_TX_CTRLr_BLKACC,p,XLMAC_TX_CTRLr_OFFSET,0,(r._xlmac_tx_ctrl), 2)
#define WRITE_XLMAC_TX_CTRLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_TX_CTRLr_BLKACC,p,XLMAC_TX_CTRLr_OFFSET,0,&(r._xlmac_tx_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_TX_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_LLFC_MSG_FIELDS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TX_LLFC_MSG_FIELDS.
 */
#define READ_XLMAC_TX_LLFC_MSG_FIELDSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_TX_LLFC_MSG_FIELDSr_BLKACC,p,XLMAC_TX_LLFC_MSG_FIELDSr_OFFSET,0,(r._xlmac_tx_llfc_msg_fields), 2)
#define WRITE_XLMAC_TX_LLFC_MSG_FIELDSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_TX_LLFC_MSG_FIELDSr_BLKACC,p,XLMAC_TX_LLFC_MSG_FIELDSr_OFFSET,0,&(r._xlmac_tx_llfc_msg_fields), 2)

/*******************************************************************************
 * End of 'XLMAC_TX_LLFC_MSG_FIELDSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_MAC_SA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TX_MAC_SA.
 */
#define READ_XLMAC_TX_MAC_SAr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_TX_MAC_SAr_BLKACC,p,XLMAC_TX_MAC_SAr_OFFSET,0,(r._xlmac_tx_mac_sa), 2)
#define WRITE_XLMAC_TX_MAC_SAr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_TX_MAC_SAr_BLKACC,p,XLMAC_TX_MAC_SAr_OFFSET,0,&(r._xlmac_tx_mac_sa), 2)

/*******************************************************************************
 * End of 'XLMAC_TX_MAC_SAr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_TIMESTAMP_FIFO_DATA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TX_TIMESTAMP_FIFO_DATA.
 */
#define READ_XLMAC_TX_TIMESTAMP_FIFO_DATAr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_TX_TIMESTAMP_FIFO_DATAr_BLKACC,p,XLMAC_TX_TIMESTAMP_FIFO_DATAr_OFFSET,0,(r._xlmac_tx_timestamp_fifo_data), 2)
#define WRITE_XLMAC_TX_TIMESTAMP_FIFO_DATAr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_TX_TIMESTAMP_FIFO_DATAr_BLKACC,p,XLMAC_TX_TIMESTAMP_FIFO_DATAr_OFFSET,0,&(r._xlmac_tx_timestamp_fifo_data), 2)

/*******************************************************************************
 * End of 'XLMAC_TX_TIMESTAMP_FIFO_DATAr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_TIMESTAMP_FIFO_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TX_TIMESTAMP_FIFO_STATUS.
 */
#define READ_XLMAC_TX_TIMESTAMP_FIFO_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_TX_TIMESTAMP_FIFO_STATUSr_BLKACC,p,XLMAC_TX_TIMESTAMP_FIFO_STATUSr_OFFSET,0,(r._xlmac_tx_timestamp_fifo_status), 2)
#define WRITE_XLMAC_TX_TIMESTAMP_FIFO_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_TX_TIMESTAMP_FIFO_STATUSr_BLKACC,p,XLMAC_TX_TIMESTAMP_FIFO_STATUSr_OFFSET,0,&(r._xlmac_tx_timestamp_fifo_status), 2)

/*******************************************************************************
 * End of 'XLMAC_TX_TIMESTAMP_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_VERSION_ID
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_VERSION_ID.
 */
#define READ_XLMAC_VERSION_IDr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMAC_VERSION_IDr_BLKACC,p,XLMAC_VERSION_IDr_OFFSET,0,(r._xlmac_version_id), 2)
#define WRITE_XLMAC_VERSION_IDr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMAC_VERSION_IDr_BLKACC,p,XLMAC_VERSION_IDr_OFFSET,0,&(r._xlmac_version_id), 2)

/*******************************************************************************
 * End of 'XLMAC_VERSION_IDr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R1023
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_R1023.
 */
#define READ_XLMIB_R1023r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_R1023r_BLKACC,p,XLMIB_R1023r_OFFSET,0,(r._xlmib_r1023), 2)
#define WRITE_XLMIB_R1023r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_R1023r_BLKACC,p,XLMIB_R1023r_OFFSET,0,&(r._xlmib_r1023), 2)

/*******************************************************************************
 * End of 'XLMIB_R1023r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R127
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_R127.
 */
#define READ_XLMIB_R127r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_R127r_BLKACC,p,XLMIB_R127r_OFFSET,0,(r._xlmib_r127), 2)
#define WRITE_XLMIB_R127r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_R127r_BLKACC,p,XLMIB_R127r_OFFSET,0,&(r._xlmib_r127), 2)

/*******************************************************************************
 * End of 'XLMIB_R127r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R1518
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_R1518.
 */
#define READ_XLMIB_R1518r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_R1518r_BLKACC,p,XLMIB_R1518r_OFFSET,0,(r._xlmib_r1518), 2)
#define WRITE_XLMIB_R1518r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_R1518r_BLKACC,p,XLMIB_R1518r_OFFSET,0,&(r._xlmib_r1518), 2)

/*******************************************************************************
 * End of 'XLMIB_R1518r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R16383
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_R16383.
 */
#define READ_XLMIB_R16383r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_R16383r_BLKACC,p,XLMIB_R16383r_OFFSET,0,(r._xlmib_r16383), 2)
#define WRITE_XLMIB_R16383r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_R16383r_BLKACC,p,XLMIB_R16383r_OFFSET,0,&(r._xlmib_r16383), 2)

/*******************************************************************************
 * End of 'XLMIB_R16383r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R2047
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_R2047.
 */
#define READ_XLMIB_R2047r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_R2047r_BLKACC,p,XLMIB_R2047r_OFFSET,0,(r._xlmib_r2047), 2)
#define WRITE_XLMIB_R2047r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_R2047r_BLKACC,p,XLMIB_R2047r_OFFSET,0,&(r._xlmib_r2047), 2)

/*******************************************************************************
 * End of 'XLMIB_R2047r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R255
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_R255.
 */
#define READ_XLMIB_R255r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_R255r_BLKACC,p,XLMIB_R255r_OFFSET,0,(r._xlmib_r255), 2)
#define WRITE_XLMIB_R255r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_R255r_BLKACC,p,XLMIB_R255r_OFFSET,0,&(r._xlmib_r255), 2)

/*******************************************************************************
 * End of 'XLMIB_R255r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R4095
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_R4095.
 */
#define READ_XLMIB_R4095r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_R4095r_BLKACC,p,XLMIB_R4095r_OFFSET,0,(r._xlmib_r4095), 2)
#define WRITE_XLMIB_R4095r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_R4095r_BLKACC,p,XLMIB_R4095r_OFFSET,0,&(r._xlmib_r4095), 2)

/*******************************************************************************
 * End of 'XLMIB_R4095r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R511
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_R511.
 */
#define READ_XLMIB_R511r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_R511r_BLKACC,p,XLMIB_R511r_OFFSET,0,(r._xlmib_r511), 2)
#define WRITE_XLMIB_R511r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_R511r_BLKACC,p,XLMIB_R511r_OFFSET,0,&(r._xlmib_r511), 2)

/*******************************************************************************
 * End of 'XLMIB_R511r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R64
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_R64.
 */
#define READ_XLMIB_R64r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_R64r_BLKACC,p,XLMIB_R64r_OFFSET,0,(r._xlmib_r64), 2)
#define WRITE_XLMIB_R64r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_R64r_BLKACC,p,XLMIB_R64r_OFFSET,0,&(r._xlmib_r64), 2)

/*******************************************************************************
 * End of 'XLMIB_R64r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_R9216
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_R9216.
 */
#define READ_XLMIB_R9216r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_R9216r_BLKACC,p,XLMIB_R9216r_OFFSET,0,(r._xlmib_r9216), 2)
#define WRITE_XLMIB_R9216r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_R9216r_BLKACC,p,XLMIB_R9216r_OFFSET,0,&(r._xlmib_r9216), 2)

/*******************************************************************************
 * End of 'XLMIB_R9216r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RALN
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RALN.
 */
#define READ_XLMIB_RALNr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RALNr_BLKACC,p,XLMIB_RALNr_OFFSET,0,(r._xlmib_raln), 2)
#define WRITE_XLMIB_RALNr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RALNr_BLKACC,p,XLMIB_RALNr_OFFSET,0,&(r._xlmib_raln), 2)

/*******************************************************************************
 * End of 'XLMIB_RALNr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RBCA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RBCA.
 */
#define READ_XLMIB_RBCAr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RBCAr_BLKACC,p,XLMIB_RBCAr_OFFSET,0,(r._xlmib_rbca), 2)
#define WRITE_XLMIB_RBCAr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RBCAr_BLKACC,p,XLMIB_RBCAr_OFFSET,0,&(r._xlmib_rbca), 2)

/*******************************************************************************
 * End of 'XLMIB_RBCAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RBYT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RBYT.
 */
#define READ_XLMIB_RBYTr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RBYTr_BLKACC,p,XLMIB_RBYTr_OFFSET,0,(r._xlmib_rbyt), 2)
#define WRITE_XLMIB_RBYTr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RBYTr_BLKACC,p,XLMIB_RBYTr_OFFSET,0,&(r._xlmib_rbyt), 2)

/*******************************************************************************
 * End of 'XLMIB_RBYTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RDVLN
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RDVLN.
 */
#define READ_XLMIB_RDVLNr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RDVLNr_BLKACC,p,XLMIB_RDVLNr_OFFSET,0,(r._xlmib_rdvln), 2)
#define WRITE_XLMIB_RDVLNr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RDVLNr_BLKACC,p,XLMIB_RDVLNr_OFFSET,0,&(r._xlmib_rdvln), 2)

/*******************************************************************************
 * End of 'XLMIB_RDVLNr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RERPKT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RERPKT.
 */
#define READ_XLMIB_RERPKTr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RERPKTr_BLKACC,p,XLMIB_RERPKTr_OFFSET,0,(r._xlmib_rerpkt), 2)
#define WRITE_XLMIB_RERPKTr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RERPKTr_BLKACC,p,XLMIB_RERPKTr_OFFSET,0,&(r._xlmib_rerpkt), 2)

/*******************************************************************************
 * End of 'XLMIB_RERPKTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RFCR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RFCR.
 */
#define READ_XLMIB_RFCRr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RFCRr_BLKACC,p,XLMIB_RFCRr_OFFSET,0,(r._xlmib_rfcr), 2)
#define WRITE_XLMIB_RFCRr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RFCRr_BLKACC,p,XLMIB_RFCRr_OFFSET,0,&(r._xlmib_rfcr), 2)

/*******************************************************************************
 * End of 'XLMIB_RFCRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RFCS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RFCS.
 */
#define READ_XLMIB_RFCSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RFCSr_BLKACC,p,XLMIB_RFCSr_OFFSET,0,(r._xlmib_rfcs), 2)
#define WRITE_XLMIB_RFCSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RFCSr_BLKACC,p,XLMIB_RFCSr_OFFSET,0,&(r._xlmib_rfcs), 2)

/*******************************************************************************
 * End of 'XLMIB_RFCSr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RFLR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RFLR.
 */
#define READ_XLMIB_RFLRr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RFLRr_BLKACC,p,XLMIB_RFLRr_OFFSET,0,(r._xlmib_rflr), 2)
#define WRITE_XLMIB_RFLRr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RFLRr_BLKACC,p,XLMIB_RFLRr_OFFSET,0,&(r._xlmib_rflr), 2)

/*******************************************************************************
 * End of 'XLMIB_RFLRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RFRG
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RFRG.
 */
#define READ_XLMIB_RFRGr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RFRGr_BLKACC,p,XLMIB_RFRGr_OFFSET,0,(r._xlmib_rfrg), 2)
#define WRITE_XLMIB_RFRGr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RFRGr_BLKACC,p,XLMIB_RFRGr_OFFSET,0,&(r._xlmib_rfrg), 2)

/*******************************************************************************
 * End of 'XLMIB_RFRGr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RJBR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RJBR.
 */
#define READ_XLMIB_RJBRr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RJBRr_BLKACC,p,XLMIB_RJBRr_OFFSET,0,(r._xlmib_rjbr), 2)
#define WRITE_XLMIB_RJBRr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RJBRr_BLKACC,p,XLMIB_RJBRr_OFFSET,0,&(r._xlmib_rjbr), 2)

/*******************************************************************************
 * End of 'XLMIB_RJBRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RMCA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RMCA.
 */
#define READ_XLMIB_RMCAr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RMCAr_BLKACC,p,XLMIB_RMCAr_OFFSET,0,(r._xlmib_rmca), 2)
#define WRITE_XLMIB_RMCAr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RMCAr_BLKACC,p,XLMIB_RMCAr_OFFSET,0,&(r._xlmib_rmca), 2)

/*******************************************************************************
 * End of 'XLMIB_RMCAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RMCRC
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RMCRC.
 */
#define READ_XLMIB_RMCRCr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RMCRCr_BLKACC,p,XLMIB_RMCRCr_OFFSET,0,(r._xlmib_rmcrc), 2)
#define WRITE_XLMIB_RMCRCr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RMCRCr_BLKACC,p,XLMIB_RMCRCr_OFFSET,0,&(r._xlmib_rmcrc), 2)

/*******************************************************************************
 * End of 'XLMIB_RMCRCr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RMGV
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RMGV.
 */
#define READ_XLMIB_RMGVr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RMGVr_BLKACC,p,XLMIB_RMGVr_OFFSET,0,(r._xlmib_rmgv), 2)
#define WRITE_XLMIB_RMGVr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RMGVr_BLKACC,p,XLMIB_RMGVr_OFFSET,0,&(r._xlmib_rmgv), 2)

/*******************************************************************************
 * End of 'XLMIB_RMGVr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RMTUE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RMTUE.
 */
#define READ_XLMIB_RMTUEr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RMTUEr_BLKACC,p,XLMIB_RMTUEr_OFFSET,0,(r._xlmib_rmtue), 2)
#define WRITE_XLMIB_RMTUEr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RMTUEr_BLKACC,p,XLMIB_RMTUEr_OFFSET,0,&(r._xlmib_rmtue), 2)

/*******************************************************************************
 * End of 'XLMIB_RMTUEr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_ROVR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_ROVR.
 */
#define READ_XLMIB_ROVRr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_ROVRr_BLKACC,p,XLMIB_ROVRr_OFFSET,0,(r._xlmib_rovr), 2)
#define WRITE_XLMIB_ROVRr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_ROVRr_BLKACC,p,XLMIB_ROVRr_OFFSET,0,&(r._xlmib_rovr), 2)

/*******************************************************************************
 * End of 'XLMIB_ROVRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFC0.
 */
#define READ_XLMIB_RPFC0r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFC0r_BLKACC,p,XLMIB_RPFC0r_OFFSET,0,(r._xlmib_rpfc0), 2)
#define WRITE_XLMIB_RPFC0r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFC0r_BLKACC,p,XLMIB_RPFC0r_OFFSET,0,&(r._xlmib_rpfc0), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFC0r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFC1.
 */
#define READ_XLMIB_RPFC1r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFC1r_BLKACC,p,XLMIB_RPFC1r_OFFSET,0,(r._xlmib_rpfc1), 2)
#define WRITE_XLMIB_RPFC1r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFC1r_BLKACC,p,XLMIB_RPFC1r_OFFSET,0,&(r._xlmib_rpfc1), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFC1r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC2
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFC2.
 */
#define READ_XLMIB_RPFC2r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFC2r_BLKACC,p,XLMIB_RPFC2r_OFFSET,0,(r._xlmib_rpfc2), 2)
#define WRITE_XLMIB_RPFC2r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFC2r_BLKACC,p,XLMIB_RPFC2r_OFFSET,0,&(r._xlmib_rpfc2), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFC2r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC3
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFC3.
 */
#define READ_XLMIB_RPFC3r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFC3r_BLKACC,p,XLMIB_RPFC3r_OFFSET,0,(r._xlmib_rpfc3), 2)
#define WRITE_XLMIB_RPFC3r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFC3r_BLKACC,p,XLMIB_RPFC3r_OFFSET,0,&(r._xlmib_rpfc3), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFC3r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC4
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFC4.
 */
#define READ_XLMIB_RPFC4r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFC4r_BLKACC,p,XLMIB_RPFC4r_OFFSET,0,(r._xlmib_rpfc4), 2)
#define WRITE_XLMIB_RPFC4r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFC4r_BLKACC,p,XLMIB_RPFC4r_OFFSET,0,&(r._xlmib_rpfc4), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFC4r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC5
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFC5.
 */
#define READ_XLMIB_RPFC5r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFC5r_BLKACC,p,XLMIB_RPFC5r_OFFSET,0,(r._xlmib_rpfc5), 2)
#define WRITE_XLMIB_RPFC5r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFC5r_BLKACC,p,XLMIB_RPFC5r_OFFSET,0,&(r._xlmib_rpfc5), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFC5r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC6
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFC6.
 */
#define READ_XLMIB_RPFC6r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFC6r_BLKACC,p,XLMIB_RPFC6r_OFFSET,0,(r._xlmib_rpfc6), 2)
#define WRITE_XLMIB_RPFC6r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFC6r_BLKACC,p,XLMIB_RPFC6r_OFFSET,0,&(r._xlmib_rpfc6), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFC6r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFC7
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFC7.
 */
#define READ_XLMIB_RPFC7r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFC7r_BLKACC,p,XLMIB_RPFC7r_OFFSET,0,(r._xlmib_rpfc7), 2)
#define WRITE_XLMIB_RPFC7r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFC7r_BLKACC,p,XLMIB_RPFC7r_OFFSET,0,&(r._xlmib_rpfc7), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFC7r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFCOFF0.
 */
#define READ_XLMIB_RPFCOFF0r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFCOFF0r_BLKACC,p,XLMIB_RPFCOFF0r_OFFSET,0,(r._xlmib_rpfcoff0), 2)
#define WRITE_XLMIB_RPFCOFF0r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFCOFF0r_BLKACC,p,XLMIB_RPFCOFF0r_OFFSET,0,&(r._xlmib_rpfcoff0), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF0r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFCOFF1.
 */
#define READ_XLMIB_RPFCOFF1r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFCOFF1r_BLKACC,p,XLMIB_RPFCOFF1r_OFFSET,0,(r._xlmib_rpfcoff1), 2)
#define WRITE_XLMIB_RPFCOFF1r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFCOFF1r_BLKACC,p,XLMIB_RPFCOFF1r_OFFSET,0,&(r._xlmib_rpfcoff1), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF1r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF2
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFCOFF2.
 */
#define READ_XLMIB_RPFCOFF2r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFCOFF2r_BLKACC,p,XLMIB_RPFCOFF2r_OFFSET,0,(r._xlmib_rpfcoff2), 2)
#define WRITE_XLMIB_RPFCOFF2r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFCOFF2r_BLKACC,p,XLMIB_RPFCOFF2r_OFFSET,0,&(r._xlmib_rpfcoff2), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF2r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF3
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFCOFF3.
 */
#define READ_XLMIB_RPFCOFF3r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFCOFF3r_BLKACC,p,XLMIB_RPFCOFF3r_OFFSET,0,(r._xlmib_rpfcoff3), 2)
#define WRITE_XLMIB_RPFCOFF3r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFCOFF3r_BLKACC,p,XLMIB_RPFCOFF3r_OFFSET,0,&(r._xlmib_rpfcoff3), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF3r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF4
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFCOFF4.
 */
#define READ_XLMIB_RPFCOFF4r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFCOFF4r_BLKACC,p,XLMIB_RPFCOFF4r_OFFSET,0,(r._xlmib_rpfcoff4), 2)
#define WRITE_XLMIB_RPFCOFF4r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFCOFF4r_BLKACC,p,XLMIB_RPFCOFF4r_OFFSET,0,&(r._xlmib_rpfcoff4), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF4r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF5
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFCOFF5.
 */
#define READ_XLMIB_RPFCOFF5r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFCOFF5r_BLKACC,p,XLMIB_RPFCOFF5r_OFFSET,0,(r._xlmib_rpfcoff5), 2)
#define WRITE_XLMIB_RPFCOFF5r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFCOFF5r_BLKACC,p,XLMIB_RPFCOFF5r_OFFSET,0,&(r._xlmib_rpfcoff5), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF5r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF6
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFCOFF6.
 */
#define READ_XLMIB_RPFCOFF6r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFCOFF6r_BLKACC,p,XLMIB_RPFCOFF6r_OFFSET,0,(r._xlmib_rpfcoff6), 2)
#define WRITE_XLMIB_RPFCOFF6r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFCOFF6r_BLKACC,p,XLMIB_RPFCOFF6r_OFFSET,0,&(r._xlmib_rpfcoff6), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF6r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPFCOFF7
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPFCOFF7.
 */
#define READ_XLMIB_RPFCOFF7r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPFCOFF7r_BLKACC,p,XLMIB_RPFCOFF7r_OFFSET,0,(r._xlmib_rpfcoff7), 2)
#define WRITE_XLMIB_RPFCOFF7r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPFCOFF7r_BLKACC,p,XLMIB_RPFCOFF7r_OFFSET,0,&(r._xlmib_rpfcoff7), 2)

/*******************************************************************************
 * End of 'XLMIB_RPFCOFF7r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPKT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPKT.
 */
#define READ_XLMIB_RPKTr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPKTr_BLKACC,p,XLMIB_RPKTr_OFFSET,0,(r._xlmib_rpkt), 2)
#define WRITE_XLMIB_RPKTr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPKTr_BLKACC,p,XLMIB_RPKTr_OFFSET,0,&(r._xlmib_rpkt), 2)

/*******************************************************************************
 * End of 'XLMIB_RPKTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPOK
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPOK.
 */
#define READ_XLMIB_RPOKr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPOKr_BLKACC,p,XLMIB_RPOKr_OFFSET,0,(r._xlmib_rpok), 2)
#define WRITE_XLMIB_RPOKr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPOKr_BLKACC,p,XLMIB_RPOKr_OFFSET,0,&(r._xlmib_rpok), 2)

/*******************************************************************************
 * End of 'XLMIB_RPOKr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPRM
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPRM.
 */
#define READ_XLMIB_RPRMr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPRMr_BLKACC,p,XLMIB_RPRMr_OFFSET,0,(r._xlmib_rprm), 2)
#define WRITE_XLMIB_RPRMr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPRMr_BLKACC,p,XLMIB_RPRMr_OFFSET,0,&(r._xlmib_rprm), 2)

/*******************************************************************************
 * End of 'XLMIB_RPRMr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPROG0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPROG0.
 */
#define READ_XLMIB_RPROG0r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPROG0r_BLKACC,p,XLMIB_RPROG0r_OFFSET,0,(r._xlmib_rprog0), 2)
#define WRITE_XLMIB_RPROG0r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPROG0r_BLKACC,p,XLMIB_RPROG0r_OFFSET,0,&(r._xlmib_rprog0), 2)

/*******************************************************************************
 * End of 'XLMIB_RPROG0r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPROG1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPROG1.
 */
#define READ_XLMIB_RPROG1r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPROG1r_BLKACC,p,XLMIB_RPROG1r_OFFSET,0,(r._xlmib_rprog1), 2)
#define WRITE_XLMIB_RPROG1r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPROG1r_BLKACC,p,XLMIB_RPROG1r_OFFSET,0,&(r._xlmib_rprog1), 2)

/*******************************************************************************
 * End of 'XLMIB_RPROG1r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPROG2
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPROG2.
 */
#define READ_XLMIB_RPROG2r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPROG2r_BLKACC,p,XLMIB_RPROG2r_OFFSET,0,(r._xlmib_rprog2), 2)
#define WRITE_XLMIB_RPROG2r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPROG2r_BLKACC,p,XLMIB_RPROG2r_OFFSET,0,&(r._xlmib_rprog2), 2)

/*******************************************************************************
 * End of 'XLMIB_RPROG2r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RPROG3
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RPROG3.
 */
#define READ_XLMIB_RPROG3r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RPROG3r_BLKACC,p,XLMIB_RPROG3r_OFFSET,0,(r._xlmib_rprog3), 2)
#define WRITE_XLMIB_RPROG3r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RPROG3r_BLKACC,p,XLMIB_RPROG3r_OFFSET,0,&(r._xlmib_rprog3), 2)

/*******************************************************************************
 * End of 'XLMIB_RPROG3r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RRBYT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RRBYT.
 */
#define READ_XLMIB_RRBYTr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RRBYTr_BLKACC,p,XLMIB_RRBYTr_OFFSET,0,(r._xlmib_rrbyt), 2)
#define WRITE_XLMIB_RRBYTr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RRBYTr_BLKACC,p,XLMIB_RRBYTr_OFFSET,0,&(r._xlmib_rrbyt), 2)

/*******************************************************************************
 * End of 'XLMIB_RRBYTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RRPKT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RRPKT.
 */
#define READ_XLMIB_RRPKTr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RRPKTr_BLKACC,p,XLMIB_RRPKTr_OFFSET,0,(r._xlmib_rrpkt), 2)
#define WRITE_XLMIB_RRPKTr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RRPKTr_BLKACC,p,XLMIB_RRPKTr_OFFSET,0,&(r._xlmib_rrpkt), 2)

/*******************************************************************************
 * End of 'XLMIB_RRPKTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RSCHCRC
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RSCHCRC.
 */
#define READ_XLMIB_RSCHCRCr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RSCHCRCr_BLKACC,p,XLMIB_RSCHCRCr_OFFSET,0,(r._xlmib_rschcrc), 2)
#define WRITE_XLMIB_RSCHCRCr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RSCHCRCr_BLKACC,p,XLMIB_RSCHCRCr_OFFSET,0,&(r._xlmib_rschcrc), 2)

/*******************************************************************************
 * End of 'XLMIB_RSCHCRCr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RTRFU
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RTRFU.
 */
#define READ_XLMIB_RTRFUr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RTRFUr_BLKACC,p,XLMIB_RTRFUr_OFFSET,0,(r._xlmib_rtrfu), 2)
#define WRITE_XLMIB_RTRFUr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RTRFUr_BLKACC,p,XLMIB_RTRFUr_OFFSET,0,&(r._xlmib_rtrfu), 2)

/*******************************************************************************
 * End of 'XLMIB_RTRFUr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RUCA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RUCA.
 */
#define READ_XLMIB_RUCAr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RUCAr_BLKACC,p,XLMIB_RUCAr_OFFSET,0,(r._xlmib_ruca), 2)
#define WRITE_XLMIB_RUCAr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RUCAr_BLKACC,p,XLMIB_RUCAr_OFFSET,0,&(r._xlmib_ruca), 2)

/*******************************************************************************
 * End of 'XLMIB_RUCAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RUND
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RUND.
 */
#define READ_XLMIB_RUNDr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RUNDr_BLKACC,p,XLMIB_RUNDr_OFFSET,0,(r._xlmib_rund), 2)
#define WRITE_XLMIB_RUNDr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RUNDr_BLKACC,p,XLMIB_RUNDr_OFFSET,0,&(r._xlmib_rund), 2)

/*******************************************************************************
 * End of 'XLMIB_RUNDr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RVLN
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RVLN.
 */
#define READ_XLMIB_RVLNr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RVLNr_BLKACC,p,XLMIB_RVLNr_OFFSET,0,(r._xlmib_rvln), 2)
#define WRITE_XLMIB_RVLNr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RVLNr_BLKACC,p,XLMIB_RVLNr_OFFSET,0,&(r._xlmib_rvln), 2)

/*******************************************************************************
 * End of 'XLMIB_RVLNr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RXCF
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RXCF.
 */
#define READ_XLMIB_RXCFr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RXCFr_BLKACC,p,XLMIB_RXCFr_OFFSET,0,(r._xlmib_rxcf), 2)
#define WRITE_XLMIB_RXCFr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RXCFr_BLKACC,p,XLMIB_RXCFr_OFFSET,0,&(r._xlmib_rxcf), 2)

/*******************************************************************************
 * End of 'XLMIB_RXCFr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RXPF
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RXPF.
 */
#define READ_XLMIB_RXPFr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RXPFr_BLKACC,p,XLMIB_RXPFr_OFFSET,0,(r._xlmib_rxpf), 2)
#define WRITE_XLMIB_RXPFr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RXPFr_BLKACC,p,XLMIB_RXPFr_OFFSET,0,&(r._xlmib_rxpf), 2)

/*******************************************************************************
 * End of 'XLMIB_RXPFr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RXPP
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RXPP.
 */
#define READ_XLMIB_RXPPr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RXPPr_BLKACC,p,XLMIB_RXPPr_OFFSET,0,(r._xlmib_rxpp), 2)
#define WRITE_XLMIB_RXPPr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RXPPr_BLKACC,p,XLMIB_RXPPr_OFFSET,0,&(r._xlmib_rxpp), 2)

/*******************************************************************************
 * End of 'XLMIB_RXPPr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RXUDA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RXUDA.
 */
#define READ_XLMIB_RXUDAr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RXUDAr_BLKACC,p,XLMIB_RXUDAr_OFFSET,0,(r._xlmib_rxuda), 2)
#define WRITE_XLMIB_RXUDAr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RXUDAr_BLKACC,p,XLMIB_RXUDAr_OFFSET,0,&(r._xlmib_rxuda), 2)

/*******************************************************************************
 * End of 'XLMIB_RXUDAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RXUO
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RXUO.
 */
#define READ_XLMIB_RXUOr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RXUOr_BLKACC,p,XLMIB_RXUOr_OFFSET,0,(r._xlmib_rxuo), 2)
#define WRITE_XLMIB_RXUOr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RXUOr_BLKACC,p,XLMIB_RXUOr_OFFSET,0,&(r._xlmib_rxuo), 2)

/*******************************************************************************
 * End of 'XLMIB_RXUOr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RXWSA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RXWSA.
 */
#define READ_XLMIB_RXWSAr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RXWSAr_BLKACC,p,XLMIB_RXWSAr_OFFSET,0,(r._xlmib_rxwsa), 2)
#define WRITE_XLMIB_RXWSAr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RXWSAr_BLKACC,p,XLMIB_RXWSAr_OFFSET,0,&(r._xlmib_rxwsa), 2)

/*******************************************************************************
 * End of 'XLMIB_RXWSAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RX_EEE_LPI_DURATION_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RX_EEE_LPI_DURATION_COUNTER.
 */
#define READ_XLMIB_RX_EEE_LPI_DURATION_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RX_EEE_LPI_DURATION_COUNTERr_BLKACC,p,XLMIB_RX_EEE_LPI_DURATION_COUNTERr_OFFSET,0,(r._xlmib_rx_eee_lpi_duration_counter), 2)
#define WRITE_XLMIB_RX_EEE_LPI_DURATION_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RX_EEE_LPI_DURATION_COUNTERr_BLKACC,p,XLMIB_RX_EEE_LPI_DURATION_COUNTERr_OFFSET,0,&(r._xlmib_rx_eee_lpi_duration_counter), 2)

/*******************************************************************************
 * End of 'XLMIB_RX_EEE_LPI_DURATION_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RX_EEE_LPI_EVENT_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RX_EEE_LPI_EVENT_COUNTER.
 */
#define READ_XLMIB_RX_EEE_LPI_EVENT_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RX_EEE_LPI_EVENT_COUNTERr_BLKACC,p,XLMIB_RX_EEE_LPI_EVENT_COUNTERr_OFFSET,0,(r._xlmib_rx_eee_lpi_event_counter), 2)
#define WRITE_XLMIB_RX_EEE_LPI_EVENT_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RX_EEE_LPI_EVENT_COUNTERr_BLKACC,p,XLMIB_RX_EEE_LPI_EVENT_COUNTERr_OFFSET,0,&(r._xlmib_rx_eee_lpi_event_counter), 2)

/*******************************************************************************
 * End of 'XLMIB_RX_EEE_LPI_EVENT_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RX_HCFC_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RX_HCFC_COUNTER.
 */
#define READ_XLMIB_RX_HCFC_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RX_HCFC_COUNTERr_BLKACC,p,XLMIB_RX_HCFC_COUNTERr_OFFSET,0,(r._xlmib_rx_hcfc_counter), 2)
#define WRITE_XLMIB_RX_HCFC_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RX_HCFC_COUNTERr_BLKACC,p,XLMIB_RX_HCFC_COUNTERr_OFFSET,0,&(r._xlmib_rx_hcfc_counter), 2)

/*******************************************************************************
 * End of 'XLMIB_RX_HCFC_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RX_HCFC_CRC_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RX_HCFC_CRC_COUNTER.
 */
#define READ_XLMIB_RX_HCFC_CRC_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RX_HCFC_CRC_COUNTERr_BLKACC,p,XLMIB_RX_HCFC_CRC_COUNTERr_OFFSET,0,(r._xlmib_rx_hcfc_crc_counter), 2)
#define WRITE_XLMIB_RX_HCFC_CRC_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RX_HCFC_CRC_COUNTERr_BLKACC,p,XLMIB_RX_HCFC_CRC_COUNTERr_OFFSET,0,&(r._xlmib_rx_hcfc_crc_counter), 2)

/*******************************************************************************
 * End of 'XLMIB_RX_HCFC_CRC_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RX_LLFC_CRC_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RX_LLFC_CRC_COUNTER.
 */
#define READ_XLMIB_RX_LLFC_CRC_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RX_LLFC_CRC_COUNTERr_BLKACC,p,XLMIB_RX_LLFC_CRC_COUNTERr_OFFSET,0,(r._xlmib_rx_llfc_crc_counter), 2)
#define WRITE_XLMIB_RX_LLFC_CRC_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RX_LLFC_CRC_COUNTERr_BLKACC,p,XLMIB_RX_LLFC_CRC_COUNTERr_OFFSET,0,&(r._xlmib_rx_llfc_crc_counter), 2)

/*******************************************************************************
 * End of 'XLMIB_RX_LLFC_CRC_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RX_LLFC_LOG_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RX_LLFC_LOG_COUNTER.
 */
#define READ_XLMIB_RX_LLFC_LOG_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RX_LLFC_LOG_COUNTERr_BLKACC,p,XLMIB_RX_LLFC_LOG_COUNTERr_OFFSET,0,(r._xlmib_rx_llfc_log_counter), 2)
#define WRITE_XLMIB_RX_LLFC_LOG_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RX_LLFC_LOG_COUNTERr_BLKACC,p,XLMIB_RX_LLFC_LOG_COUNTERr_OFFSET,0,&(r._xlmib_rx_llfc_log_counter), 2)

/*******************************************************************************
 * End of 'XLMIB_RX_LLFC_LOG_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_RX_LLFC_PHY_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_RX_LLFC_PHY_COUNTER.
 */
#define READ_XLMIB_RX_LLFC_PHY_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_RX_LLFC_PHY_COUNTERr_BLKACC,p,XLMIB_RX_LLFC_PHY_COUNTERr_OFFSET,0,(r._xlmib_rx_llfc_phy_counter), 2)
#define WRITE_XLMIB_RX_LLFC_PHY_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_RX_LLFC_PHY_COUNTERr_BLKACC,p,XLMIB_RX_LLFC_PHY_COUNTERr_OFFSET,0,&(r._xlmib_rx_llfc_phy_counter), 2)

/*******************************************************************************
 * End of 'XLMIB_RX_LLFC_PHY_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T1023
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_T1023.
 */
#define READ_XLMIB_T1023r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_T1023r_BLKACC,p,XLMIB_T1023r_OFFSET,0,(r._xlmib_t1023), 2)
#define WRITE_XLMIB_T1023r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_T1023r_BLKACC,p,XLMIB_T1023r_OFFSET,0,&(r._xlmib_t1023), 2)

/*******************************************************************************
 * End of 'XLMIB_T1023r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T127
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_T127.
 */
#define READ_XLMIB_T127r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_T127r_BLKACC,p,XLMIB_T127r_OFFSET,0,(r._xlmib_t127), 2)
#define WRITE_XLMIB_T127r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_T127r_BLKACC,p,XLMIB_T127r_OFFSET,0,&(r._xlmib_t127), 2)

/*******************************************************************************
 * End of 'XLMIB_T127r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T1518
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_T1518.
 */
#define READ_XLMIB_T1518r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_T1518r_BLKACC,p,XLMIB_T1518r_OFFSET,0,(r._xlmib_t1518), 2)
#define WRITE_XLMIB_T1518r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_T1518r_BLKACC,p,XLMIB_T1518r_OFFSET,0,&(r._xlmib_t1518), 2)

/*******************************************************************************
 * End of 'XLMIB_T1518r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T16383
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_T16383.
 */
#define READ_XLMIB_T16383r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_T16383r_BLKACC,p,XLMIB_T16383r_OFFSET,0,(r._xlmib_t16383), 2)
#define WRITE_XLMIB_T16383r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_T16383r_BLKACC,p,XLMIB_T16383r_OFFSET,0,&(r._xlmib_t16383), 2)

/*******************************************************************************
 * End of 'XLMIB_T16383r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T2047
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_T2047.
 */
#define READ_XLMIB_T2047r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_T2047r_BLKACC,p,XLMIB_T2047r_OFFSET,0,(r._xlmib_t2047), 2)
#define WRITE_XLMIB_T2047r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_T2047r_BLKACC,p,XLMIB_T2047r_OFFSET,0,&(r._xlmib_t2047), 2)

/*******************************************************************************
 * End of 'XLMIB_T2047r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T255
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_T255.
 */
#define READ_XLMIB_T255r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_T255r_BLKACC,p,XLMIB_T255r_OFFSET,0,(r._xlmib_t255), 2)
#define WRITE_XLMIB_T255r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_T255r_BLKACC,p,XLMIB_T255r_OFFSET,0,&(r._xlmib_t255), 2)

/*******************************************************************************
 * End of 'XLMIB_T255r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T4095
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_T4095.
 */
#define READ_XLMIB_T4095r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_T4095r_BLKACC,p,XLMIB_T4095r_OFFSET,0,(r._xlmib_t4095), 2)
#define WRITE_XLMIB_T4095r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_T4095r_BLKACC,p,XLMIB_T4095r_OFFSET,0,&(r._xlmib_t4095), 2)

/*******************************************************************************
 * End of 'XLMIB_T4095r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T511
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_T511.
 */
#define READ_XLMIB_T511r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_T511r_BLKACC,p,XLMIB_T511r_OFFSET,0,(r._xlmib_t511), 2)
#define WRITE_XLMIB_T511r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_T511r_BLKACC,p,XLMIB_T511r_OFFSET,0,&(r._xlmib_t511), 2)

/*******************************************************************************
 * End of 'XLMIB_T511r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T64
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_T64.
 */
#define READ_XLMIB_T64r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_T64r_BLKACC,p,XLMIB_T64r_OFFSET,0,(r._xlmib_t64), 2)
#define WRITE_XLMIB_T64r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_T64r_BLKACC,p,XLMIB_T64r_OFFSET,0,&(r._xlmib_t64), 2)

/*******************************************************************************
 * End of 'XLMIB_T64r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_T9216
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_T9216.
 */
#define READ_XLMIB_T9216r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_T9216r_BLKACC,p,XLMIB_T9216r_OFFSET,0,(r._xlmib_t9216), 2)
#define WRITE_XLMIB_T9216r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_T9216r_BLKACC,p,XLMIB_T9216r_OFFSET,0,&(r._xlmib_t9216), 2)

/*******************************************************************************
 * End of 'XLMIB_T9216r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TBCA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TBCA.
 */
#define READ_XLMIB_TBCAr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TBCAr_BLKACC,p,XLMIB_TBCAr_OFFSET,0,(r._xlmib_tbca), 2)
#define WRITE_XLMIB_TBCAr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TBCAr_BLKACC,p,XLMIB_TBCAr_OFFSET,0,&(r._xlmib_tbca), 2)

/*******************************************************************************
 * End of 'XLMIB_TBCAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TBYT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TBYT.
 */
#define READ_XLMIB_TBYTr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TBYTr_BLKACC,p,XLMIB_TBYTr_OFFSET,0,(r._xlmib_tbyt), 2)
#define WRITE_XLMIB_TBYTr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TBYTr_BLKACC,p,XLMIB_TBYTr_OFFSET,0,&(r._xlmib_tbyt), 2)

/*******************************************************************************
 * End of 'XLMIB_TBYTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TDFR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TDFR.
 */
#define READ_XLMIB_TDFRr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TDFRr_BLKACC,p,XLMIB_TDFRr_OFFSET,0,(r._xlmib_tdfr), 2)
#define WRITE_XLMIB_TDFRr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TDFRr_BLKACC,p,XLMIB_TDFRr_OFFSET,0,&(r._xlmib_tdfr), 2)

/*******************************************************************************
 * End of 'XLMIB_TDFRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TDVLN
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TDVLN.
 */
#define READ_XLMIB_TDVLNr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TDVLNr_BLKACC,p,XLMIB_TDVLNr_OFFSET,0,(r._xlmib_tdvln), 2)
#define WRITE_XLMIB_TDVLNr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TDVLNr_BLKACC,p,XLMIB_TDVLNr_OFFSET,0,&(r._xlmib_tdvln), 2)

/*******************************************************************************
 * End of 'XLMIB_TDVLNr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TEDF
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TEDF.
 */
#define READ_XLMIB_TEDFr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TEDFr_BLKACC,p,XLMIB_TEDFr_OFFSET,0,(r._xlmib_tedf), 2)
#define WRITE_XLMIB_TEDFr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TEDFr_BLKACC,p,XLMIB_TEDFr_OFFSET,0,&(r._xlmib_tedf), 2)

/*******************************************************************************
 * End of 'XLMIB_TEDFr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TERR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TERR.
 */
#define READ_XLMIB_TERRr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TERRr_BLKACC,p,XLMIB_TERRr_OFFSET,0,(r._xlmib_terr), 2)
#define WRITE_XLMIB_TERRr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TERRr_BLKACC,p,XLMIB_TERRr_OFFSET,0,&(r._xlmib_terr), 2)

/*******************************************************************************
 * End of 'XLMIB_TERRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TFCS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TFCS.
 */
#define READ_XLMIB_TFCSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TFCSr_BLKACC,p,XLMIB_TFCSr_OFFSET,0,(r._xlmib_tfcs), 2)
#define WRITE_XLMIB_TFCSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TFCSr_BLKACC,p,XLMIB_TFCSr_OFFSET,0,&(r._xlmib_tfcs), 2)

/*******************************************************************************
 * End of 'XLMIB_TFCSr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TFRG
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TFRG.
 */
#define READ_XLMIB_TFRGr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TFRGr_BLKACC,p,XLMIB_TFRGr_OFFSET,0,(r._xlmib_tfrg), 2)
#define WRITE_XLMIB_TFRGr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TFRGr_BLKACC,p,XLMIB_TFRGr_OFFSET,0,&(r._xlmib_tfrg), 2)

/*******************************************************************************
 * End of 'XLMIB_TFRGr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TJBR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TJBR.
 */
#define READ_XLMIB_TJBRr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TJBRr_BLKACC,p,XLMIB_TJBRr_OFFSET,0,(r._xlmib_tjbr), 2)
#define WRITE_XLMIB_TJBRr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TJBRr_BLKACC,p,XLMIB_TJBRr_OFFSET,0,&(r._xlmib_tjbr), 2)

/*******************************************************************************
 * End of 'XLMIB_TJBRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TLCL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TLCL.
 */
#define READ_XLMIB_TLCLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TLCLr_BLKACC,p,XLMIB_TLCLr_OFFSET,0,(r._xlmib_tlcl), 2)
#define WRITE_XLMIB_TLCLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TLCLr_BLKACC,p,XLMIB_TLCLr_OFFSET,0,&(r._xlmib_tlcl), 2)

/*******************************************************************************
 * End of 'XLMIB_TLCLr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TMCA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TMCA.
 */
#define READ_XLMIB_TMCAr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TMCAr_BLKACC,p,XLMIB_TMCAr_OFFSET,0,(r._xlmib_tmca), 2)
#define WRITE_XLMIB_TMCAr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TMCAr_BLKACC,p,XLMIB_TMCAr_OFFSET,0,&(r._xlmib_tmca), 2)

/*******************************************************************************
 * End of 'XLMIB_TMCAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TMCL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TMCL.
 */
#define READ_XLMIB_TMCLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TMCLr_BLKACC,p,XLMIB_TMCLr_OFFSET,0,(r._xlmib_tmcl), 2)
#define WRITE_XLMIB_TMCLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TMCLr_BLKACC,p,XLMIB_TMCLr_OFFSET,0,&(r._xlmib_tmcl), 2)

/*******************************************************************************
 * End of 'XLMIB_TMCLr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TMGV
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TMGV.
 */
#define READ_XLMIB_TMGVr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TMGVr_BLKACC,p,XLMIB_TMGVr_OFFSET,0,(r._xlmib_tmgv), 2)
#define WRITE_XLMIB_TMGVr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TMGVr_BLKACC,p,XLMIB_TMGVr_OFFSET,0,&(r._xlmib_tmgv), 2)

/*******************************************************************************
 * End of 'XLMIB_TMGVr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TNCL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TNCL.
 */
#define READ_XLMIB_TNCLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TNCLr_BLKACC,p,XLMIB_TNCLr_OFFSET,0,(r._xlmib_tncl), 2)
#define WRITE_XLMIB_TNCLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TNCLr_BLKACC,p,XLMIB_TNCLr_OFFSET,0,&(r._xlmib_tncl), 2)

/*******************************************************************************
 * End of 'XLMIB_TNCLr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TOVR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TOVR.
 */
#define READ_XLMIB_TOVRr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TOVRr_BLKACC,p,XLMIB_TOVRr_OFFSET,0,(r._xlmib_tovr), 2)
#define WRITE_XLMIB_TOVRr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TOVRr_BLKACC,p,XLMIB_TOVRr_OFFSET,0,&(r._xlmib_tovr), 2)

/*******************************************************************************
 * End of 'XLMIB_TOVRr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFC0.
 */
#define READ_XLMIB_TPFC0r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFC0r_BLKACC,p,XLMIB_TPFC0r_OFFSET,0,(r._xlmib_tpfc0), 2)
#define WRITE_XLMIB_TPFC0r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFC0r_BLKACC,p,XLMIB_TPFC0r_OFFSET,0,&(r._xlmib_tpfc0), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFC0r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFC1.
 */
#define READ_XLMIB_TPFC1r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFC1r_BLKACC,p,XLMIB_TPFC1r_OFFSET,0,(r._xlmib_tpfc1), 2)
#define WRITE_XLMIB_TPFC1r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFC1r_BLKACC,p,XLMIB_TPFC1r_OFFSET,0,&(r._xlmib_tpfc1), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFC1r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC2
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFC2.
 */
#define READ_XLMIB_TPFC2r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFC2r_BLKACC,p,XLMIB_TPFC2r_OFFSET,0,(r._xlmib_tpfc2), 2)
#define WRITE_XLMIB_TPFC2r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFC2r_BLKACC,p,XLMIB_TPFC2r_OFFSET,0,&(r._xlmib_tpfc2), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFC2r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC3
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFC3.
 */
#define READ_XLMIB_TPFC3r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFC3r_BLKACC,p,XLMIB_TPFC3r_OFFSET,0,(r._xlmib_tpfc3), 2)
#define WRITE_XLMIB_TPFC3r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFC3r_BLKACC,p,XLMIB_TPFC3r_OFFSET,0,&(r._xlmib_tpfc3), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFC3r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC4
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFC4.
 */
#define READ_XLMIB_TPFC4r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFC4r_BLKACC,p,XLMIB_TPFC4r_OFFSET,0,(r._xlmib_tpfc4), 2)
#define WRITE_XLMIB_TPFC4r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFC4r_BLKACC,p,XLMIB_TPFC4r_OFFSET,0,&(r._xlmib_tpfc4), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFC4r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC5
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFC5.
 */
#define READ_XLMIB_TPFC5r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFC5r_BLKACC,p,XLMIB_TPFC5r_OFFSET,0,(r._xlmib_tpfc5), 2)
#define WRITE_XLMIB_TPFC5r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFC5r_BLKACC,p,XLMIB_TPFC5r_OFFSET,0,&(r._xlmib_tpfc5), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFC5r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC6
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFC6.
 */
#define READ_XLMIB_TPFC6r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFC6r_BLKACC,p,XLMIB_TPFC6r_OFFSET,0,(r._xlmib_tpfc6), 2)
#define WRITE_XLMIB_TPFC6r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFC6r_BLKACC,p,XLMIB_TPFC6r_OFFSET,0,&(r._xlmib_tpfc6), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFC6r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFC7
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFC7.
 */
#define READ_XLMIB_TPFC7r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFC7r_BLKACC,p,XLMIB_TPFC7r_OFFSET,0,(r._xlmib_tpfc7), 2)
#define WRITE_XLMIB_TPFC7r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFC7r_BLKACC,p,XLMIB_TPFC7r_OFFSET,0,&(r._xlmib_tpfc7), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFC7r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFCOFF0.
 */
#define READ_XLMIB_TPFCOFF0r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFCOFF0r_BLKACC,p,XLMIB_TPFCOFF0r_OFFSET,0,(r._xlmib_tpfcoff0), 2)
#define WRITE_XLMIB_TPFCOFF0r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFCOFF0r_BLKACC,p,XLMIB_TPFCOFF0r_OFFSET,0,&(r._xlmib_tpfcoff0), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF0r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFCOFF1.
 */
#define READ_XLMIB_TPFCOFF1r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFCOFF1r_BLKACC,p,XLMIB_TPFCOFF1r_OFFSET,0,(r._xlmib_tpfcoff1), 2)
#define WRITE_XLMIB_TPFCOFF1r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFCOFF1r_BLKACC,p,XLMIB_TPFCOFF1r_OFFSET,0,&(r._xlmib_tpfcoff1), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF1r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF2
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFCOFF2.
 */
#define READ_XLMIB_TPFCOFF2r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFCOFF2r_BLKACC,p,XLMIB_TPFCOFF2r_OFFSET,0,(r._xlmib_tpfcoff2), 2)
#define WRITE_XLMIB_TPFCOFF2r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFCOFF2r_BLKACC,p,XLMIB_TPFCOFF2r_OFFSET,0,&(r._xlmib_tpfcoff2), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF2r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF3
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFCOFF3.
 */
#define READ_XLMIB_TPFCOFF3r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFCOFF3r_BLKACC,p,XLMIB_TPFCOFF3r_OFFSET,0,(r._xlmib_tpfcoff3), 2)
#define WRITE_XLMIB_TPFCOFF3r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFCOFF3r_BLKACC,p,XLMIB_TPFCOFF3r_OFFSET,0,&(r._xlmib_tpfcoff3), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF3r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF4
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFCOFF4.
 */
#define READ_XLMIB_TPFCOFF4r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFCOFF4r_BLKACC,p,XLMIB_TPFCOFF4r_OFFSET,0,(r._xlmib_tpfcoff4), 2)
#define WRITE_XLMIB_TPFCOFF4r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFCOFF4r_BLKACC,p,XLMIB_TPFCOFF4r_OFFSET,0,&(r._xlmib_tpfcoff4), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF4r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF5
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFCOFF5.
 */
#define READ_XLMIB_TPFCOFF5r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFCOFF5r_BLKACC,p,XLMIB_TPFCOFF5r_OFFSET,0,(r._xlmib_tpfcoff5), 2)
#define WRITE_XLMIB_TPFCOFF5r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFCOFF5r_BLKACC,p,XLMIB_TPFCOFF5r_OFFSET,0,&(r._xlmib_tpfcoff5), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF5r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF6
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFCOFF6.
 */
#define READ_XLMIB_TPFCOFF6r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFCOFF6r_BLKACC,p,XLMIB_TPFCOFF6r_OFFSET,0,(r._xlmib_tpfcoff6), 2)
#define WRITE_XLMIB_TPFCOFF6r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFCOFF6r_BLKACC,p,XLMIB_TPFCOFF6r_OFFSET,0,&(r._xlmib_tpfcoff6), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF6r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPFCOFF7
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPFCOFF7.
 */
#define READ_XLMIB_TPFCOFF7r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPFCOFF7r_BLKACC,p,XLMIB_TPFCOFF7r_OFFSET,0,(r._xlmib_tpfcoff7), 2)
#define WRITE_XLMIB_TPFCOFF7r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPFCOFF7r_BLKACC,p,XLMIB_TPFCOFF7r_OFFSET,0,&(r._xlmib_tpfcoff7), 2)

/*******************************************************************************
 * End of 'XLMIB_TPFCOFF7r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPKT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPKT.
 */
#define READ_XLMIB_TPKTr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPKTr_BLKACC,p,XLMIB_TPKTr_OFFSET,0,(r._xlmib_tpkt), 2)
#define WRITE_XLMIB_TPKTr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPKTr_BLKACC,p,XLMIB_TPKTr_OFFSET,0,&(r._xlmib_tpkt), 2)

/*******************************************************************************
 * End of 'XLMIB_TPKTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TPOK
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TPOK.
 */
#define READ_XLMIB_TPOKr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TPOKr_BLKACC,p,XLMIB_TPOKr_OFFSET,0,(r._xlmib_tpok), 2)
#define WRITE_XLMIB_TPOKr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TPOKr_BLKACC,p,XLMIB_TPOKr_OFFSET,0,&(r._xlmib_tpok), 2)

/*******************************************************************************
 * End of 'XLMIB_TPOKr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TRPKT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TRPKT.
 */
#define READ_XLMIB_TRPKTr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TRPKTr_BLKACC,p,XLMIB_TRPKTr_OFFSET,0,(r._xlmib_trpkt), 2)
#define WRITE_XLMIB_TRPKTr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TRPKTr_BLKACC,p,XLMIB_TRPKTr_OFFSET,0,&(r._xlmib_trpkt), 2)

/*******************************************************************************
 * End of 'XLMIB_TRPKTr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TSCL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TSCL.
 */
#define READ_XLMIB_TSCLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TSCLr_BLKACC,p,XLMIB_TSCLr_OFFSET,0,(r._xlmib_tscl), 2)
#define WRITE_XLMIB_TSCLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TSCLr_BLKACC,p,XLMIB_TSCLr_OFFSET,0,&(r._xlmib_tscl), 2)

/*******************************************************************************
 * End of 'XLMIB_TSCLr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TSPARE0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TSPARE0.
 */
#define READ_XLMIB_TSPARE0r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TSPARE0r_BLKACC,p,XLMIB_TSPARE0r_OFFSET,0,(r._xlmib_tspare0), 2)
#define WRITE_XLMIB_TSPARE0r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TSPARE0r_BLKACC,p,XLMIB_TSPARE0r_OFFSET,0,&(r._xlmib_tspare0), 2)

/*******************************************************************************
 * End of 'XLMIB_TSPARE0r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TSPARE1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TSPARE1.
 */
#define READ_XLMIB_TSPARE1r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TSPARE1r_BLKACC,p,XLMIB_TSPARE1r_OFFSET,0,(r._xlmib_tspare1), 2)
#define WRITE_XLMIB_TSPARE1r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TSPARE1r_BLKACC,p,XLMIB_TSPARE1r_OFFSET,0,&(r._xlmib_tspare1), 2)

/*******************************************************************************
 * End of 'XLMIB_TSPARE1r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TSPARE2
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TSPARE2.
 */
#define READ_XLMIB_TSPARE2r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TSPARE2r_BLKACC,p,XLMIB_TSPARE2r_OFFSET,0,(r._xlmib_tspare2), 2)
#define WRITE_XLMIB_TSPARE2r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TSPARE2r_BLKACC,p,XLMIB_TSPARE2r_OFFSET,0,&(r._xlmib_tspare2), 2)

/*******************************************************************************
 * End of 'XLMIB_TSPARE2r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TSPARE3
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TSPARE3.
 */
#define READ_XLMIB_TSPARE3r(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TSPARE3r_BLKACC,p,XLMIB_TSPARE3r_OFFSET,0,(r._xlmib_tspare3), 2)
#define WRITE_XLMIB_TSPARE3r(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TSPARE3r_BLKACC,p,XLMIB_TSPARE3r_OFFSET,0,&(r._xlmib_tspare3), 2)

/*******************************************************************************
 * End of 'XLMIB_TSPARE3r'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TUCA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TUCA.
 */
#define READ_XLMIB_TUCAr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TUCAr_BLKACC,p,XLMIB_TUCAr_OFFSET,0,(r._xlmib_tuca), 2)
#define WRITE_XLMIB_TUCAr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TUCAr_BLKACC,p,XLMIB_TUCAr_OFFSET,0,&(r._xlmib_tuca), 2)

/*******************************************************************************
 * End of 'XLMIB_TUCAr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TUFL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TUFL.
 */
#define READ_XLMIB_TUFLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TUFLr_BLKACC,p,XLMIB_TUFLr_OFFSET,0,(r._xlmib_tufl), 2)
#define WRITE_XLMIB_TUFLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TUFLr_BLKACC,p,XLMIB_TUFLr_OFFSET,0,&(r._xlmib_tufl), 2)

/*******************************************************************************
 * End of 'XLMIB_TUFLr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TVLN
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TVLN.
 */
#define READ_XLMIB_TVLNr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TVLNr_BLKACC,p,XLMIB_TVLNr_OFFSET,0,(r._xlmib_tvln), 2)
#define WRITE_XLMIB_TVLNr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TVLNr_BLKACC,p,XLMIB_TVLNr_OFFSET,0,&(r._xlmib_tvln), 2)

/*******************************************************************************
 * End of 'XLMIB_TVLNr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TXCF
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TXCF.
 */
#define READ_XLMIB_TXCFr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TXCFr_BLKACC,p,XLMIB_TXCFr_OFFSET,0,(r._xlmib_txcf), 2)
#define WRITE_XLMIB_TXCFr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TXCFr_BLKACC,p,XLMIB_TXCFr_OFFSET,0,&(r._xlmib_txcf), 2)

/*******************************************************************************
 * End of 'XLMIB_TXCFr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TXCL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TXCL.
 */
#define READ_XLMIB_TXCLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TXCLr_BLKACC,p,XLMIB_TXCLr_OFFSET,0,(r._xlmib_txcl), 2)
#define WRITE_XLMIB_TXCLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TXCLr_BLKACC,p,XLMIB_TXCLr_OFFSET,0,&(r._xlmib_txcl), 2)

/*******************************************************************************
 * End of 'XLMIB_TXCLr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TXPF
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TXPF.
 */
#define READ_XLMIB_TXPFr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TXPFr_BLKACC,p,XLMIB_TXPFr_OFFSET,0,(r._xlmib_txpf), 2)
#define WRITE_XLMIB_TXPFr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TXPFr_BLKACC,p,XLMIB_TXPFr_OFFSET,0,&(r._xlmib_txpf), 2)

/*******************************************************************************
 * End of 'XLMIB_TXPFr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TXPP
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TXPP.
 */
#define READ_XLMIB_TXPPr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TXPPr_BLKACC,p,XLMIB_TXPPr_OFFSET,0,(r._xlmib_txpp), 2)
#define WRITE_XLMIB_TXPPr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TXPPr_BLKACC,p,XLMIB_TXPPr_OFFSET,0,&(r._xlmib_txpp), 2)

/*******************************************************************************
 * End of 'XLMIB_TXPPr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TX_EEE_LPI_DURATION_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TX_EEE_LPI_DURATION_COUNTER.
 */
#define READ_XLMIB_TX_EEE_LPI_DURATION_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TX_EEE_LPI_DURATION_COUNTERr_BLKACC,p,XLMIB_TX_EEE_LPI_DURATION_COUNTERr_OFFSET,0,(r._xlmib_tx_eee_lpi_duration_counter), 2)
#define WRITE_XLMIB_TX_EEE_LPI_DURATION_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TX_EEE_LPI_DURATION_COUNTERr_BLKACC,p,XLMIB_TX_EEE_LPI_DURATION_COUNTERr_OFFSET,0,&(r._xlmib_tx_eee_lpi_duration_counter), 2)

/*******************************************************************************
 * End of 'XLMIB_TX_EEE_LPI_DURATION_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TX_EEE_LPI_EVENT_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TX_EEE_LPI_EVENT_COUNTER.
 */
#define READ_XLMIB_TX_EEE_LPI_EVENT_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TX_EEE_LPI_EVENT_COUNTERr_BLKACC,p,XLMIB_TX_EEE_LPI_EVENT_COUNTERr_OFFSET,0,(r._xlmib_tx_eee_lpi_event_counter), 2)
#define WRITE_XLMIB_TX_EEE_LPI_EVENT_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TX_EEE_LPI_EVENT_COUNTERr_BLKACC,p,XLMIB_TX_EEE_LPI_EVENT_COUNTERr_OFFSET,0,&(r._xlmib_tx_eee_lpi_event_counter), 2)

/*******************************************************************************
 * End of 'XLMIB_TX_EEE_LPI_EVENT_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TX_HCFC_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TX_HCFC_COUNTER.
 */
#define READ_XLMIB_TX_HCFC_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TX_HCFC_COUNTERr_BLKACC,p,XLMIB_TX_HCFC_COUNTERr_OFFSET,0,(r._xlmib_tx_hcfc_counter), 2)
#define WRITE_XLMIB_TX_HCFC_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TX_HCFC_COUNTERr_BLKACC,p,XLMIB_TX_HCFC_COUNTERr_OFFSET,0,&(r._xlmib_tx_hcfc_counter), 2)

/*******************************************************************************
 * End of 'XLMIB_TX_HCFC_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_TX_LLFC_LOG_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_TX_LLFC_LOG_COUNTER.
 */
#define READ_XLMIB_TX_LLFC_LOG_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_TX_LLFC_LOG_COUNTERr_BLKACC,p,XLMIB_TX_LLFC_LOG_COUNTERr_OFFSET,0,(r._xlmib_tx_llfc_log_counter), 2)
#define WRITE_XLMIB_TX_LLFC_LOG_COUNTERr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_TX_LLFC_LOG_COUNTERr_BLKACC,p,XLMIB_TX_LLFC_LOG_COUNTERr_OFFSET,0,&(r._xlmib_tx_llfc_log_counter), 2)

/*******************************************************************************
 * End of 'XLMIB_TX_LLFC_LOG_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLMIB_XTHOL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMIB_XTHOL.
 */
#define READ_XLMIB_XTHOLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLMIB_XTHOLr_BLKACC,p,XLMIB_XTHOLr_OFFSET,0,(r._xlmib_xthol), 2)
#define WRITE_XLMIB_XTHOLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLMIB_XTHOLr_BLKACC,p,XLMIB_XTHOLr_OFFSET,0,&(r._xlmib_xthol), 2)

/*******************************************************************************
 * End of 'XLMIB_XTHOLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_CNTMAXSIZE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_CNTMAXSIZE.
 */
#define READ_XLPORT_CNTMAXSIZEr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLPORT_CNTMAXSIZEr_BLKACC,p,XLPORT_CNTMAXSIZEr_OFFSET,0,(r._xlport_cntmaxsize), 1)
#define WRITE_XLPORT_CNTMAXSIZEr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLPORT_CNTMAXSIZEr_BLKACC,p,XLPORT_CNTMAXSIZEr_OFFSET,0,&(r._xlport_cntmaxsize), 1)

/*******************************************************************************
 * End of 'XLPORT_CNTMAXSIZEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_CONFIG.
 */
#define READ_XLPORT_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLPORT_CONFIGr_BLKACC,p,XLPORT_CONFIGr_OFFSET,0,(r._xlport_config), 1)
#define WRITE_XLPORT_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLPORT_CONFIGr_BLKACC,p,XLPORT_CONFIGr_OFFSET,0,&(r._xlport_config), 1)

/*******************************************************************************
 * End of 'XLPORT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_ECC_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_ECC_CONTROL.
 */
#define READ_XLPORT_ECC_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_ECC_CONTROLr_BLKACC,p,XLPORT_ECC_CONTROLr_OFFSET,0,(r._xlport_ecc_control), 1)
#define WRITE_XLPORT_ECC_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_ECC_CONTROLr_BLKACC,p,XLPORT_ECC_CONTROLr_OFFSET,0,&(r._xlport_ecc_control), 1)

/*******************************************************************************
 * End of 'XLPORT_ECC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_EEE_CLOCK_GATE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_EEE_CLOCK_GATE.
 */
#define READ_XLPORT_EEE_CLOCK_GATEr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_EEE_CLOCK_GATEr_BLKACC,p,XLPORT_EEE_CLOCK_GATEr_OFFSET,0,(r._xlport_eee_clock_gate), 1)
#define WRITE_XLPORT_EEE_CLOCK_GATEr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_EEE_CLOCK_GATEr_BLKACC,p,XLPORT_EEE_CLOCK_GATEr_OFFSET,0,&(r._xlport_eee_clock_gate), 1)

/*******************************************************************************
 * End of 'XLPORT_EEE_CLOCK_GATEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_EEE_CORE0_CLOCK_GATE_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_EEE_CORE0_CLOCK_GATE_COUNTER.
 */
#define READ_XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_BLKACC,p,XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_OFFSET,0,(r._xlport_eee_core0_clock_gate_counter), 1)
#define WRITE_XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_BLKACC,p,XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_OFFSET,0,&(r._xlport_eee_core0_clock_gate_counter), 1)

/*******************************************************************************
 * End of 'XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_EEE_COUNTER_MODE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_EEE_COUNTER_MODE.
 */
#define READ_XLPORT_EEE_COUNTER_MODEr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLPORT_EEE_COUNTER_MODEr_BLKACC,p,XLPORT_EEE_COUNTER_MODEr_OFFSET,0,(r._xlport_eee_counter_mode), 1)
#define WRITE_XLPORT_EEE_COUNTER_MODEr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLPORT_EEE_COUNTER_MODEr_BLKACC,p,XLPORT_EEE_COUNTER_MODEr_OFFSET,0,&(r._xlport_eee_counter_mode), 1)

/*******************************************************************************
 * End of 'XLPORT_EEE_COUNTER_MODEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_EEE_DURATION_TIMER_PULSE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_EEE_DURATION_TIMER_PULSE.
 */
#define READ_XLPORT_EEE_DURATION_TIMER_PULSEr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_EEE_DURATION_TIMER_PULSEr_BLKACC,p,XLPORT_EEE_DURATION_TIMER_PULSEr_OFFSET,0,(r._xlport_eee_duration_timer_pulse), 1)
#define WRITE_XLPORT_EEE_DURATION_TIMER_PULSEr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_EEE_DURATION_TIMER_PULSEr_BLKACC,p,XLPORT_EEE_DURATION_TIMER_PULSEr_OFFSET,0,&(r._xlport_eee_duration_timer_pulse), 1)

/*******************************************************************************
 * End of 'XLPORT_EEE_DURATION_TIMER_PULSEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_ENABLE_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_ENABLE_REG.
 */
#define READ_XLPORT_ENABLE_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_ENABLE_REGr_BLKACC,p,XLPORT_ENABLE_REGr_OFFSET,0,(r._xlport_enable_reg), 1)
#define WRITE_XLPORT_ENABLE_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_ENABLE_REGr_BLKACC,p,XLPORT_ENABLE_REGr_OFFSET,0,&(r._xlport_enable_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_ENABLE_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_FAULT_LINK_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_FAULT_LINK_STATUS.
 */
#define READ_XLPORT_FAULT_LINK_STATUSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLPORT_FAULT_LINK_STATUSr_BLKACC,p,XLPORT_FAULT_LINK_STATUSr_OFFSET,0,(r._xlport_fault_link_status), 1)
#define WRITE_XLPORT_FAULT_LINK_STATUSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLPORT_FAULT_LINK_STATUSr_BLKACC,p,XLPORT_FAULT_LINK_STATUSr_OFFSET,0,&(r._xlport_fault_link_status), 1)

/*******************************************************************************
 * End of 'XLPORT_FAULT_LINK_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_FLOW_CONTROL_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_FLOW_CONTROL_CONFIG.
 */
#define READ_XLPORT_FLOW_CONTROL_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLPORT_FLOW_CONTROL_CONFIGr_BLKACC,p,XLPORT_FLOW_CONTROL_CONFIGr_OFFSET,0,(r._xlport_flow_control_config), 1)
#define WRITE_XLPORT_FLOW_CONTROL_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLPORT_FLOW_CONTROL_CONFIGr_BLKACC,p,XLPORT_FLOW_CONTROL_CONFIGr_OFFSET,0,&(r._xlport_flow_control_config), 1)

/*******************************************************************************
 * End of 'XLPORT_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_FORCE_DOUBLE_BIT_ERROR
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_FORCE_DOUBLE_BIT_ERROR.
 */
#define READ_XLPORT_FORCE_DOUBLE_BIT_ERRORr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_FORCE_DOUBLE_BIT_ERRORr_BLKACC,p,XLPORT_FORCE_DOUBLE_BIT_ERRORr_OFFSET,0,(r._xlport_force_double_bit_error), 1)
#define WRITE_XLPORT_FORCE_DOUBLE_BIT_ERRORr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_FORCE_DOUBLE_BIT_ERRORr_BLKACC,p,XLPORT_FORCE_DOUBLE_BIT_ERRORr_OFFSET,0,&(r._xlport_force_double_bit_error), 1)

/*******************************************************************************
 * End of 'XLPORT_FORCE_DOUBLE_BIT_ERRORr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_FORCE_SINGLE_BIT_ERROR
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_FORCE_SINGLE_BIT_ERROR.
 */
#define READ_XLPORT_FORCE_SINGLE_BIT_ERRORr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_FORCE_SINGLE_BIT_ERRORr_BLKACC,p,XLPORT_FORCE_SINGLE_BIT_ERRORr_OFFSET,0,(r._xlport_force_single_bit_error), 1)
#define WRITE_XLPORT_FORCE_SINGLE_BIT_ERRORr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_FORCE_SINGLE_BIT_ERRORr_BLKACC,p,XLPORT_FORCE_SINGLE_BIT_ERRORr_OFFSET,0,&(r._xlport_force_single_bit_error), 1)

/*******************************************************************************
 * End of 'XLPORT_FORCE_SINGLE_BIT_ERRORr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_GENERAL_SPARE1_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_GENERAL_SPARE1_REG.
 */
#define READ_XLPORT_GENERAL_SPARE1_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_GENERAL_SPARE1_REGr_BLKACC,p,XLPORT_GENERAL_SPARE1_REGr_OFFSET,0,(r._xlport_general_spare1_reg), 1)
#define WRITE_XLPORT_GENERAL_SPARE1_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_GENERAL_SPARE1_REGr_BLKACC,p,XLPORT_GENERAL_SPARE1_REGr_OFFSET,0,&(r._xlport_general_spare1_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_GENERAL_SPARE1_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_GENERAL_SPARE2_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_GENERAL_SPARE2_REG.
 */
#define READ_XLPORT_GENERAL_SPARE2_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_GENERAL_SPARE2_REGr_BLKACC,p,XLPORT_GENERAL_SPARE2_REGr_OFFSET,0,(r._xlport_general_spare2_reg), 1)
#define WRITE_XLPORT_GENERAL_SPARE2_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_GENERAL_SPARE2_REGr_BLKACC,p,XLPORT_GENERAL_SPARE2_REGr_OFFSET,0,&(r._xlport_general_spare2_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_GENERAL_SPARE2_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_GENERAL_SPARE3_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_GENERAL_SPARE3_REG.
 */
#define READ_XLPORT_GENERAL_SPARE3_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_GENERAL_SPARE3_REGr_BLKACC,p,XLPORT_GENERAL_SPARE3_REGr_OFFSET,0,(r._xlport_general_spare3_reg), 1)
#define WRITE_XLPORT_GENERAL_SPARE3_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_GENERAL_SPARE3_REGr_BLKACC,p,XLPORT_GENERAL_SPARE3_REGr_OFFSET,0,&(r._xlport_general_spare3_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_GENERAL_SPARE3_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_INTR_ENABLE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_INTR_ENABLE.
 */
#define READ_XLPORT_INTR_ENABLEr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_INTR_ENABLEr_BLKACC,p,XLPORT_INTR_ENABLEr_OFFSET,0,(r._xlport_intr_enable), 1)
#define WRITE_XLPORT_INTR_ENABLEr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_INTR_ENABLEr_BLKACC,p,XLPORT_INTR_ENABLEr_OFFSET,0,&(r._xlport_intr_enable), 1)

/*******************************************************************************
 * End of 'XLPORT_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_INTR_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_INTR_STATUS.
 */
#define READ_XLPORT_INTR_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_INTR_STATUSr_BLKACC,p,XLPORT_INTR_STATUSr_OFFSET,0,(r._xlport_intr_status), 1)
#define WRITE_XLPORT_INTR_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_INTR_STATUSr_BLKACC,p,XLPORT_INTR_STATUSr_OFFSET,0,&(r._xlport_intr_status), 1)

/*******************************************************************************
 * End of 'XLPORT_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_LAG_FAILOVER_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_LAG_FAILOVER_CONFIG.
 */
#define READ_XLPORT_LAG_FAILOVER_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLPORT_LAG_FAILOVER_CONFIGr_BLKACC,p,XLPORT_LAG_FAILOVER_CONFIGr_OFFSET,0,(r._xlport_lag_failover_config), 1)
#define WRITE_XLPORT_LAG_FAILOVER_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLPORT_LAG_FAILOVER_CONFIGr_BLKACC,p,XLPORT_LAG_FAILOVER_CONFIGr_OFFSET,0,&(r._xlport_lag_failover_config), 1)

/*******************************************************************************
 * End of 'XLPORT_LAG_FAILOVER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_LED_CHAIN_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_LED_CHAIN_CONFIG.
 */
#define READ_XLPORT_LED_CHAIN_CONFIGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_LED_CHAIN_CONFIGr_BLKACC,p,XLPORT_LED_CHAIN_CONFIGr_OFFSET,0,(r._xlport_led_chain_config), 1)
#define WRITE_XLPORT_LED_CHAIN_CONFIGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_LED_CHAIN_CONFIGr_BLKACC,p,XLPORT_LED_CHAIN_CONFIGr_OFFSET,0,&(r._xlport_led_chain_config), 1)

/*******************************************************************************
 * End of 'XLPORT_LED_CHAIN_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_LINKSTATUS_DOWN
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_LINKSTATUS_DOWN.
 */
#define READ_XLPORT_LINKSTATUS_DOWNr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_LINKSTATUS_DOWNr_BLKACC,p,XLPORT_LINKSTATUS_DOWNr_OFFSET,0,(r._xlport_linkstatus_down), 1)
#define WRITE_XLPORT_LINKSTATUS_DOWNr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_LINKSTATUS_DOWNr_BLKACC,p,XLPORT_LINKSTATUS_DOWNr_OFFSET,0,&(r._xlport_linkstatus_down), 1)

/*******************************************************************************
 * End of 'XLPORT_LINKSTATUS_DOWNr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_LINKSTATUS_DOWN_CLEAR
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_LINKSTATUS_DOWN_CLEAR.
 */
#define READ_XLPORT_LINKSTATUS_DOWN_CLEARr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_LINKSTATUS_DOWN_CLEARr_BLKACC,p,XLPORT_LINKSTATUS_DOWN_CLEARr_OFFSET,0,(r._xlport_linkstatus_down_clear), 1)
#define WRITE_XLPORT_LINKSTATUS_DOWN_CLEARr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_LINKSTATUS_DOWN_CLEARr_BLKACC,p,XLPORT_LINKSTATUS_DOWN_CLEARr_OFFSET,0,&(r._xlport_linkstatus_down_clear), 1)

/*******************************************************************************
 * End of 'XLPORT_LINKSTATUS_DOWN_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MAC_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MAC_CONTROL.
 */
#define READ_XLPORT_MAC_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_MAC_CONTROLr_BLKACC,p,XLPORT_MAC_CONTROLr_OFFSET,0,(r._xlport_mac_control), 1)
#define WRITE_XLPORT_MAC_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_MAC_CONTROLr_BLKACC,p,XLPORT_MAC_CONTROLr_OFFSET,0,&(r._xlport_mac_control), 1)

/*******************************************************************************
 * End of 'XLPORT_MAC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MAC_RSV_MASK
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MAC_RSV_MASK.
 */
#define READ_XLPORT_MAC_RSV_MASKr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLPORT_MAC_RSV_MASKr_BLKACC,p,XLPORT_MAC_RSV_MASKr_OFFSET,0,(r._xlport_mac_rsv_mask), 1)
#define WRITE_XLPORT_MAC_RSV_MASKr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLPORT_MAC_RSV_MASKr_BLKACC,p,XLPORT_MAC_RSV_MASKr_OFFSET,0,&(r._xlport_mac_rsv_mask), 1)

/*******************************************************************************
 * End of 'XLPORT_MAC_RSV_MASKr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_PROG_RANGE_CNTR0_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_PROG_RANGE_CNTR0_CONFIG.
 */
#define READ_XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_BLKACC,p,XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_OFFSET,0,(r._xlport_mib_prog_range_cntr0_config), 1)
#define WRITE_XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_BLKACC,p,XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr_OFFSET,0,&(r._xlport_mib_prog_range_cntr0_config), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_PROG_RANGE_CNTR0_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_PROG_RANGE_CNTR1_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_PROG_RANGE_CNTR1_CONFIG.
 */
#define READ_XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_BLKACC,p,XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_OFFSET,0,(r._xlport_mib_prog_range_cntr1_config), 1)
#define WRITE_XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_BLKACC,p,XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr_OFFSET,0,&(r._xlport_mib_prog_range_cntr1_config), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_PROG_RANGE_CNTR1_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_PROG_RANGE_CNTR2_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_PROG_RANGE_CNTR2_CONFIG.
 */
#define READ_XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_BLKACC,p,XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_OFFSET,0,(r._xlport_mib_prog_range_cntr2_config), 1)
#define WRITE_XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_BLKACC,p,XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr_OFFSET,0,&(r._xlport_mib_prog_range_cntr2_config), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_PROG_RANGE_CNTR2_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_PROG_RANGE_CNTR3_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_PROG_RANGE_CNTR3_CONFIG.
 */
#define READ_XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_BLKACC,p,XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_OFFSET,0,(r._xlport_mib_prog_range_cntr3_config), 1)
#define WRITE_XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_BLKACC,p,XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr_OFFSET,0,&(r._xlport_mib_prog_range_cntr3_config), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_PROG_RANGE_CNTR3_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RESET
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_RESET.
 */
#define READ_XLPORT_MIB_RESETr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_MIB_RESETr_BLKACC,p,XLPORT_MIB_RESETr_OFFSET,0,(r._xlport_mib_reset), 1)
#define WRITE_XLPORT_MIB_RESETr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_MIB_RESETr_BLKACC,p,XLPORT_MIB_RESETr_OFFSET,0,&(r._xlport_mib_reset), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_RESETr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RSC0_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_RSC0_ECC_STATUS.
 */
#define READ_XLPORT_MIB_RSC0_ECC_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_MIB_RSC0_ECC_STATUSr_BLKACC,p,XLPORT_MIB_RSC0_ECC_STATUSr_OFFSET,0,(r._xlport_mib_rsc0_ecc_status), 1)
#define WRITE_XLPORT_MIB_RSC0_ECC_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_MIB_RSC0_ECC_STATUSr_BLKACC,p,XLPORT_MIB_RSC0_ECC_STATUSr_OFFSET,0,&(r._xlport_mib_rsc0_ecc_status), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_RSC0_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RSC1_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_RSC1_ECC_STATUS.
 */
#define READ_XLPORT_MIB_RSC1_ECC_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_MIB_RSC1_ECC_STATUSr_BLKACC,p,XLPORT_MIB_RSC1_ECC_STATUSr_OFFSET,0,(r._xlport_mib_rsc1_ecc_status), 1)
#define WRITE_XLPORT_MIB_RSC1_ECC_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_MIB_RSC1_ECC_STATUSr_BLKACC,p,XLPORT_MIB_RSC1_ECC_STATUSr_OFFSET,0,&(r._xlport_mib_rsc1_ecc_status), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_RSC1_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RSC_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_RSC_ECC_STATUS.
 */
#define READ_XLPORT_MIB_RSC_ECC_STATUSr(u,i,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_MIB_RSC_ECC_STATUSr_BLKACC,p,XLPORT_MIB_RSC_ECC_STATUSr_OFFSET,i,(r._xlport_mib_rsc_ecc_status), 1)
#define WRITE_XLPORT_MIB_RSC_ECC_STATUSr(u,i,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_MIB_RSC_ECC_STATUSr_BLKACC,p,XLPORT_MIB_RSC_ECC_STATUSr_OFFSET,i,&(r._xlport_mib_rsc_ecc_status), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_RSC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RSC_RAM_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_RSC_RAM_CONTROL.
 */
#define READ_XLPORT_MIB_RSC_RAM_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_MIB_RSC_RAM_CONTROLr_BLKACC,p,XLPORT_MIB_RSC_RAM_CONTROLr_OFFSET,0,(r._xlport_mib_rsc_ram_control), 1)
#define WRITE_XLPORT_MIB_RSC_RAM_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_MIB_RSC_RAM_CONTROLr_BLKACC,p,XLPORT_MIB_RSC_RAM_CONTROLr_OFFSET,0,&(r._xlport_mib_rsc_ram_control), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_RSC_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_TSC0_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_TSC0_ECC_STATUS.
 */
#define READ_XLPORT_MIB_TSC0_ECC_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_MIB_TSC0_ECC_STATUSr_BLKACC,p,XLPORT_MIB_TSC0_ECC_STATUSr_OFFSET,0,(r._xlport_mib_tsc0_ecc_status), 1)
#define WRITE_XLPORT_MIB_TSC0_ECC_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_MIB_TSC0_ECC_STATUSr_BLKACC,p,XLPORT_MIB_TSC0_ECC_STATUSr_OFFSET,0,&(r._xlport_mib_tsc0_ecc_status), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_TSC0_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_TSC1_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_TSC1_ECC_STATUS.
 */
#define READ_XLPORT_MIB_TSC1_ECC_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_MIB_TSC1_ECC_STATUSr_BLKACC,p,XLPORT_MIB_TSC1_ECC_STATUSr_OFFSET,0,(r._xlport_mib_tsc1_ecc_status), 1)
#define WRITE_XLPORT_MIB_TSC1_ECC_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_MIB_TSC1_ECC_STATUSr_BLKACC,p,XLPORT_MIB_TSC1_ECC_STATUSr_OFFSET,0,&(r._xlport_mib_tsc1_ecc_status), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_TSC1_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_TSC_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_TSC_ECC_STATUS.
 */
#define READ_XLPORT_MIB_TSC_ECC_STATUSr(u,i,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_MIB_TSC_ECC_STATUSr_BLKACC,p,XLPORT_MIB_TSC_ECC_STATUSr_OFFSET,i,(r._xlport_mib_tsc_ecc_status), 1)
#define WRITE_XLPORT_MIB_TSC_ECC_STATUSr(u,i,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_MIB_TSC_ECC_STATUSr_BLKACC,p,XLPORT_MIB_TSC_ECC_STATUSr_OFFSET,i,&(r._xlport_mib_tsc_ecc_status), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_TSC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_TSC_RAM_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_TSC_RAM_CONTROL.
 */
#define READ_XLPORT_MIB_TSC_RAM_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_MIB_TSC_RAM_CONTROLr_BLKACC,p,XLPORT_MIB_TSC_RAM_CONTROLr_OFFSET,0,(r._xlport_mib_tsc_ram_control), 1)
#define WRITE_XLPORT_MIB_TSC_RAM_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_MIB_TSC_RAM_CONTROLr_BLKACC,p,XLPORT_MIB_TSC_RAM_CONTROLr_OFFSET,0,&(r._xlport_mib_tsc_ram_control), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_TSC_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MODE_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MODE_REG.
 */
#define READ_XLPORT_MODE_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_MODE_REGr_BLKACC,p,XLPORT_MODE_REGr_OFFSET,0,(r._xlport_mode_reg), 1)
#define WRITE_XLPORT_MODE_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_MODE_REGr_BLKACC,p,XLPORT_MODE_REGr_OFFSET,0,&(r._xlport_mode_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_MODE_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_PMD_PLL_CTRL_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_PMD_PLL_CTRL_CONFIG.
 */
#define READ_XLPORT_PMD_PLL_CTRL_CONFIGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_PMD_PLL_CTRL_CONFIGr_BLKACC,p,XLPORT_PMD_PLL_CTRL_CONFIGr_OFFSET,0,(r._xlport_pmd_pll_ctrl_config), 1)
#define WRITE_XLPORT_PMD_PLL_CTRL_CONFIGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_PMD_PLL_CTRL_CONFIGr_BLKACC,p,XLPORT_PMD_PLL_CTRL_CONFIGr_OFFSET,0,&(r._xlport_pmd_pll_ctrl_config), 1)

/*******************************************************************************
 * End of 'XLPORT_PMD_PLL_CTRL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_PM_VERSION_ID
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_PM_VERSION_ID.
 */
#define READ_XLPORT_PM_VERSION_IDr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_PM_VERSION_IDr_BLKACC,p,XLPORT_PM_VERSION_IDr_OFFSET,0,(r._xlport_pm_version_id), 1)
#define WRITE_XLPORT_PM_VERSION_IDr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_PM_VERSION_IDr_BLKACC,p,XLPORT_PM_VERSION_IDr_OFFSET,0,&(r._xlport_pm_version_id), 1)

/*******************************************************************************
 * End of 'XLPORT_PM_VERSION_IDr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_POWER_SAVE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_POWER_SAVE.
 */
#define READ_XLPORT_POWER_SAVEr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_POWER_SAVEr_BLKACC,p,XLPORT_POWER_SAVEr_OFFSET,0,(r._xlport_power_save), 1)
#define WRITE_XLPORT_POWER_SAVEr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_POWER_SAVEr_BLKACC,p,XLPORT_POWER_SAVEr_OFFSET,0,&(r._xlport_power_save), 1)

/*******************************************************************************
 * End of 'XLPORT_POWER_SAVEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SBUS_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_SBUS_CONTROL.
 */
#define READ_XLPORT_SBUS_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_SBUS_CONTROLr_BLKACC,p,XLPORT_SBUS_CONTROLr_OFFSET,0,(r._xlport_sbus_control), 1)
#define WRITE_XLPORT_SBUS_CONTROLr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_SBUS_CONTROLr_BLKACC,p,XLPORT_SBUS_CONTROLr_OFFSET,0,&(r._xlport_sbus_control), 1)

/*******************************************************************************
 * End of 'XLPORT_SBUS_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SGNDET_EARLYCRS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_SGNDET_EARLYCRS.
 */
#define READ_XLPORT_SGNDET_EARLYCRSr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLPORT_SGNDET_EARLYCRSr_BLKACC,p,XLPORT_SGNDET_EARLYCRSr_OFFSET,0,(r._xlport_sgndet_earlycrs), 1)
#define WRITE_XLPORT_SGNDET_EARLYCRSr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLPORT_SGNDET_EARLYCRSr_BLKACC,p,XLPORT_SGNDET_EARLYCRSr_OFFSET,0,&(r._xlport_sgndet_earlycrs), 1)

/*******************************************************************************
 * End of 'XLPORT_SGNDET_EARLYCRSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SOFT_RESET
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_SOFT_RESET.
 */
#define READ_XLPORT_SOFT_RESETr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_SOFT_RESETr_BLKACC,p,XLPORT_SOFT_RESETr_OFFSET,0,(r._xlport_soft_reset), 1)
#define WRITE_XLPORT_SOFT_RESETr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_SOFT_RESETr_BLKACC,p,XLPORT_SOFT_RESETr_OFFSET,0,&(r._xlport_soft_reset), 1)

/*******************************************************************************
 * End of 'XLPORT_SOFT_RESETr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SPARE0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_SPARE0_REG.
 */
#define READ_XLPORT_SPARE0_REGr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLPORT_SPARE0_REGr_BLKACC,p,XLPORT_SPARE0_REGr_OFFSET,0,(r._xlport_spare0_reg), 1)
#define WRITE_XLPORT_SPARE0_REGr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLPORT_SPARE0_REGr_BLKACC,p,XLPORT_SPARE0_REGr_OFFSET,0,&(r._xlport_spare0_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_SPARE0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SW_FLOW_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_SW_FLOW_CONTROL.
 */
#define READ_XLPORT_SW_FLOW_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_read(u,XLPORT_SW_FLOW_CONTROLr_BLKACC,p,XLPORT_SW_FLOW_CONTROLr_OFFSET,0,(r._xlport_sw_flow_control), 1)
#define WRITE_XLPORT_SW_FLOW_CONTROLr(u,p,r) bcmbd_cmicx_reg_port_write(u,XLPORT_SW_FLOW_CONTROLr_BLKACC,p,XLPORT_SW_FLOW_CONTROLr_OFFSET,0,&(r._xlport_sw_flow_control), 1)

/*******************************************************************************
 * End of 'XLPORT_SW_FLOW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_TSC_PLL_LOCK_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_TSC_PLL_LOCK_STATUS.
 */
#define READ_XLPORT_TSC_PLL_LOCK_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_TSC_PLL_LOCK_STATUSr_BLKACC,p,XLPORT_TSC_PLL_LOCK_STATUSr_OFFSET,0,(r._xlport_tsc_pll_lock_status), 1)
#define WRITE_XLPORT_TSC_PLL_LOCK_STATUSr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_TSC_PLL_LOCK_STATUSr_BLKACC,p,XLPORT_TSC_PLL_LOCK_STATUSr_OFFSET,0,&(r._xlport_tsc_pll_lock_status), 1)

/*******************************************************************************
 * End of 'XLPORT_TSC_PLL_LOCK_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_TS_TIMER_31_0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_TS_TIMER_31_0_REG.
 */
#define READ_XLPORT_TS_TIMER_31_0_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_TS_TIMER_31_0_REGr_BLKACC,p,XLPORT_TS_TIMER_31_0_REGr_OFFSET,0,(r._xlport_ts_timer_31_0_reg), 1)
#define WRITE_XLPORT_TS_TIMER_31_0_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_TS_TIMER_31_0_REGr_BLKACC,p,XLPORT_TS_TIMER_31_0_REGr_OFFSET,0,&(r._xlport_ts_timer_31_0_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_TS_TIMER_31_0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_TS_TIMER_47_32_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_TS_TIMER_47_32_REG.
 */
#define READ_XLPORT_TS_TIMER_47_32_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_TS_TIMER_47_32_REGr_BLKACC,p,XLPORT_TS_TIMER_47_32_REGr_OFFSET,0,(r._xlport_ts_timer_47_32_reg), 1)
#define WRITE_XLPORT_TS_TIMER_47_32_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_TS_TIMER_47_32_REGr_BLKACC,p,XLPORT_TS_TIMER_47_32_REGr_OFFSET,0,&(r._xlport_ts_timer_47_32_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_TS_TIMER_47_32_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_WC_UCMEM_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_WC_UCMEM_CTRL.
 */
#define READ_XLPORT_WC_UCMEM_CTRLr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_WC_UCMEM_CTRLr_BLKACC,p,XLPORT_WC_UCMEM_CTRLr_OFFSET,0,(r._xlport_wc_ucmem_ctrl), 1)
#define WRITE_XLPORT_WC_UCMEM_CTRLr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_WC_UCMEM_CTRLr_BLKACC,p,XLPORT_WC_UCMEM_CTRLr_OFFSET,0,&(r._xlport_wc_ucmem_ctrl), 1)

/*******************************************************************************
 * End of 'XLPORT_WC_UCMEM_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  XLPORT_WC_UCMEM_DATA
 * BLOCKS:   XLPORT
 * SIZE:     128
 */
/*
 * These macros can be used to access XLPORT_WC_UCMEM_DATA.
 */
#define READ_XLPORT_WC_UCMEM_DATAm(u,i,m,p) bcmbd_cmicx_mem_blocks_read(u,XLPORT_WC_UCMEM_DATAm_BLKACC,p,XLPORT_WC_UCMEM_DATAm_OFFSET,i,(m._xlport_wc_ucmem_data),4)
#define WRITE_XLPORT_WC_UCMEM_DATAm(u,i,m,p) bcmbd_cmicx_mem_blocks_write(u,XLPORT_WC_UCMEM_DATAm_BLKACC,p,XLPORT_WC_UCMEM_DATAm_OFFSET,i,&(m._xlport_wc_ucmem_data),4)

/*******************************************************************************
 * End of 'XLPORT_WC_UCMEM_DATAm'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_CTRL_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_XGXS0_CTRL_REG.
 */
#define READ_XLPORT_XGXS0_CTRL_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_XGXS0_CTRL_REGr_BLKACC,p,XLPORT_XGXS0_CTRL_REGr_OFFSET,0,(r._xlport_xgxs0_ctrl_reg), 1)
#define WRITE_XLPORT_XGXS0_CTRL_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_XGXS0_CTRL_REGr_BLKACC,p,XLPORT_XGXS0_CTRL_REGr_OFFSET,0,&(r._xlport_xgxs0_ctrl_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_XGXS0_CTRL_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_LN0_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_XGXS0_LN0_STATUS0_REG.
 */
#define READ_XLPORT_XGXS0_LN0_STATUS0_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_XGXS0_LN0_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN0_STATUS0_REGr_OFFSET,0,(r._xlport_xgxs0_ln0_status0_reg), 1)
#define WRITE_XLPORT_XGXS0_LN0_STATUS0_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_XGXS0_LN0_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN0_STATUS0_REGr_OFFSET,0,&(r._xlport_xgxs0_ln0_status0_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_XGXS0_LN0_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_LN1_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_XGXS0_LN1_STATUS0_REG.
 */
#define READ_XLPORT_XGXS0_LN1_STATUS0_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_XGXS0_LN1_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN1_STATUS0_REGr_OFFSET,0,(r._xlport_xgxs0_ln1_status0_reg), 1)
#define WRITE_XLPORT_XGXS0_LN1_STATUS0_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_XGXS0_LN1_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN1_STATUS0_REGr_OFFSET,0,&(r._xlport_xgxs0_ln1_status0_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_XGXS0_LN1_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_LN2_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_XGXS0_LN2_STATUS0_REG.
 */
#define READ_XLPORT_XGXS0_LN2_STATUS0_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_XGXS0_LN2_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN2_STATUS0_REGr_OFFSET,0,(r._xlport_xgxs0_ln2_status0_reg), 1)
#define WRITE_XLPORT_XGXS0_LN2_STATUS0_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_XGXS0_LN2_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN2_STATUS0_REGr_OFFSET,0,&(r._xlport_xgxs0_ln2_status0_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_XGXS0_LN2_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_LN3_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_XGXS0_LN3_STATUS0_REG.
 */
#define READ_XLPORT_XGXS0_LN3_STATUS0_REGr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_XGXS0_LN3_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN3_STATUS0_REGr_OFFSET,0,(r._xlport_xgxs0_ln3_status0_reg), 1)
#define WRITE_XLPORT_XGXS0_LN3_STATUS0_REGr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_XGXS0_LN3_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN3_STATUS0_REGr_OFFSET,0,&(r._xlport_xgxs0_ln3_status0_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_XGXS0_LN3_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_XGXS0_STATUS0_REG.
 */
#define READ_XLPORT_XGXS0_STATUS0_REGr(u,i,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_XGXS0_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_STATUS0_REGr_OFFSET,i,(r._xlport_xgxs0_status0_reg), 1)
#define WRITE_XLPORT_XGXS0_STATUS0_REGr(u,i,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_XGXS0_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_STATUS0_REGr_OFFSET,i,&(r._xlport_xgxs0_status0_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_XGXS0_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS_COUNTER_MODE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_XGXS_COUNTER_MODE.
 */
#define READ_XLPORT_XGXS_COUNTER_MODEr(u,r,p) bcmbd_cmicx_reg_blocks_read(u,XLPORT_XGXS_COUNTER_MODEr_BLKACC,p,XLPORT_XGXS_COUNTER_MODEr_OFFSET,0,(r._xlport_xgxs_counter_mode), 1)
#define WRITE_XLPORT_XGXS_COUNTER_MODEr(u,r,p) bcmbd_cmicx_reg_blocks_write(u,XLPORT_XGXS_COUNTER_MODEr_BLKACC,p,XLPORT_XGXS_COUNTER_MODEr_OFFSET,0,&(r._xlport_xgxs_counter_mode), 1)

/*******************************************************************************
 * End of 'XLPORT_XGXS_COUNTER_MODEr'
 */




/*******************************************************************************
 * SWFORMAT:  ALPM1_DATA
 * BLOCKS:
 * SIZE:     48
 */
/*******************************************************************************
 * End of 'ALPM1_DATA'
 */




/*******************************************************************************
 * SWFORMAT:  ALPM2_DATA
 * BLOCKS:
 * SIZE:     58
 */
/*******************************************************************************
 * End of 'ALPM2_DATA'
 */




/*******************************************************************************
 * SWFORMAT:  ALPM_KEY_MUX_FORMAT
 * BLOCKS:
 * SIZE:     309
 */
/*******************************************************************************
 * End of 'ALPM_KEY_MUX_FORMAT'
 */




/*******************************************************************************
 * SWFORMAT:  ASSOC_DATA_FULL
 * BLOCKS:
 * SIZE:     49
 */
/*******************************************************************************
 * End of 'ASSOC_DATA_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  ASSOC_DATA_REDUCED
 * BLOCKS:
 * SIZE:     16
 */
/*******************************************************************************
 * End of 'ASSOC_DATA_REDUCED'
 */




/*******************************************************************************
 * SWFORMAT:  COMP_V4_KEY
 * BLOCKS:
 * SIZE:     180
 */
/*******************************************************************************
 * End of 'COMP_V4_KEY'
 */




/*******************************************************************************
 * SWFORMAT:  COMP_V4_V6_ASSOC_DATA_FULL
 * BLOCKS:
 * SIZE:     49
 */
/*******************************************************************************
 * End of 'COMP_V4_V6_ASSOC_DATA_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  COMP_V4_V6_ASSOC_DATA_REDUCED
 * BLOCKS:
 * SIZE:     16
 */
/*******************************************************************************
 * End of 'COMP_V4_V6_ASSOC_DATA_REDUCED'
 */




/*******************************************************************************
 * SWFORMAT:  COMP_V6_KEY
 * BLOCKS:
 * SIZE:     180
 */
/*******************************************************************************
 * End of 'COMP_V6_KEY'
 */




/*******************************************************************************
 * SWFORMAT:  L3MC_V4_KEY
 * BLOCKS:
 * SIZE:     288
 */
/*******************************************************************************
 * End of 'L3MC_V4_KEY'
 */




/*******************************************************************************
 * SWFORMAT:  L3MC_V4_V6_ASSOC_DATA_FULL
 * BLOCKS:
 * SIZE:     49
 */
/*******************************************************************************
 * End of 'L3MC_V4_V6_ASSOC_DATA_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3MC_V6_KEY
 * BLOCKS:
 * SIZE:     288
 */
/*******************************************************************************
 * End of 'L3MC_V6_KEY'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT1
 * BLOCKS:
 * SIZE:     80
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT1'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT10
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT10'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT10_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT10_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT1_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT1_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT2
 * BLOCKS:
 * SIZE:     96
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT2'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT2_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT2_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT3
 * BLOCKS:
 * SIZE:     120
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT3'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT3_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT3_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT4
 * BLOCKS:
 * SIZE:     160
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT4'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT4_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT4_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT5
 * BLOCKS:
 * SIZE:     240
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT5'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT5_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT5_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT6
 * BLOCKS:
 * SIZE:     120
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT6'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT6_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT6_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT7
 * BLOCKS:
 * SIZE:     160
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT7'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT7_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT7_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT8
 * BLOCKS:
 * SIZE:     240
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT8'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT8_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT8_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT9
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT9'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_PIVOT_FMT9_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_PIVOT_FMT9_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT1
 * BLOCKS:
 * SIZE:     32
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT1'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT10
 * BLOCKS:
 * SIZE:     80
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT10'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT10_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT10_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT11
 * BLOCKS:
 * SIZE:     120
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT11'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT11_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT11_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT12
 * BLOCKS:
 * SIZE:     240
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT12'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT12_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT12_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT13
 * BLOCKS:
 * SIZE:     24
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT13'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT13_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT13_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT14
 * BLOCKS:
 * SIZE:     240
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT14'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT14_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT14_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT15
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT15'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT15_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT15_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT1_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT1_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT2
 * BLOCKS:
 * SIZE:     40
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT2'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT2_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT2_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT3
 * BLOCKS:
 * SIZE:     48
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT3'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT3_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT3_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT4
 * BLOCKS:
 * SIZE:     56
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT4'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT4_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT4_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT5
 * BLOCKS:
 * SIZE:     64
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT5'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT5_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT5_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT6
 * BLOCKS:
 * SIZE:     80
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT6'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT6_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT6_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT7
 * BLOCKS:
 * SIZE:     96
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT7'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT7_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT7_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT8
 * BLOCKS:
 * SIZE:     120
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT8'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT8_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT8_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT9
 * BLOCKS:
 * SIZE:     160
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT9'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT9_FULL
 * BLOCKS:
 * SIZE:     480
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT9_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_TCAM_KEY_FMT0
 * BLOCKS:
 * SIZE:     48
 */
/*******************************************************************************
 * End of 'L3_DEFIP_TCAM_KEY_FMT0'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_TCAM_KEY_FMT0_COMP_V4_KEY
 * BLOCKS:
 * SIZE:     45
 */
/*******************************************************************************
 * End of 'L3_DEFIP_TCAM_KEY_FMT0_COMP_V4_KEY'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_TCAM_KEY_FMT0_COMP_V6_KEY
 * BLOCKS:
 * SIZE:     45
 */
/*******************************************************************************
 * End of 'L3_DEFIP_TCAM_KEY_FMT0_COMP_V6_KEY'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_TCAM_KEY_FMT0_FULL
 * BLOCKS:
 * SIZE:     192
 */
/*******************************************************************************
 * End of 'L3_DEFIP_TCAM_KEY_FMT0_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_TCAM_KEY_FMT0_LPM_V4_KEY
 * BLOCKS:
 * SIZE:     45
 */
/*******************************************************************************
 * End of 'L3_DEFIP_TCAM_KEY_FMT0_LPM_V4_KEY'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_TCAM_KEY_FMT0_LPM_V6_KEY
 * BLOCKS:
 * SIZE:     45
 */
/*******************************************************************************
 * End of 'L3_DEFIP_TCAM_KEY_FMT0_LPM_V6_KEY'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_TCAM_KEY_FMT1
 * BLOCKS:
 * SIZE:     76
 */
/*******************************************************************************
 * End of 'L3_DEFIP_TCAM_KEY_FMT1'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_TCAM_KEY_FMT1_FULL
 * BLOCKS:
 * SIZE:     304
 */
/*******************************************************************************
 * End of 'L3_DEFIP_TCAM_KEY_FMT1_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_TCAM_KEY_FMT1_L3MC_V4_KEY
 * BLOCKS:
 * SIZE:     72
 */
/*******************************************************************************
 * End of 'L3_DEFIP_TCAM_KEY_FMT1_L3MC_V4_KEY'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_TCAM_KEY_FMT1_L3MC_V6_KEY
 * BLOCKS:
 * SIZE:     72
 */
/*******************************************************************************
 * End of 'L3_DEFIP_TCAM_KEY_FMT1_L3MC_V6_KEY'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_TCAM_KEY_FMT1_LPM_V4_KEY
 * BLOCKS:
 * SIZE:     72
 */
/*******************************************************************************
 * End of 'L3_DEFIP_TCAM_KEY_FMT1_LPM_V4_KEY'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_TCAM_KEY_FMT1_LPM_V6_KEY
 * BLOCKS:
 * SIZE:     72
 */
/*******************************************************************************
 * End of 'L3_DEFIP_TCAM_KEY_FMT1_LPM_V6_KEY'
 */




/*******************************************************************************
 * SWFORMAT:  L3_TUNNEL_TCAM_ASSOC_DATA
 * BLOCKS:
 * SIZE:     68
 */
/*******************************************************************************
 * End of 'L3_TUNNEL_TCAM_ASSOC_DATA'
 */




/*******************************************************************************
 * SWFORMAT:  LPM_V4_KEY
 * BLOCKS:
 * SIZE:     288
 */
/*******************************************************************************
 * End of 'LPM_V4_KEY'
 */




/*******************************************************************************
 * SWFORMAT:  LPM_V4_V6_ASSOC_DATA_FULL
 * BLOCKS:
 * SIZE:     49
 */
/*******************************************************************************
 * End of 'LPM_V4_V6_ASSOC_DATA_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  LPM_V4_V6_ASSOC_DATA_REDUCED
 * BLOCKS:
 * SIZE:     16
 */
/*******************************************************************************
 * End of 'LPM_V4_V6_ASSOC_DATA_REDUCED'
 */




/*******************************************************************************
 * SWFORMAT:  LPM_V6_KEY
 * BLOCKS:
 * SIZE:     288
 */
/*******************************************************************************
 * End of 'LPM_V6_KEY'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW0
 * BLOCKS:
 * SIZE:     488
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW0'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW1
 * BLOCKS:
 * SIZE:     488
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW1'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW10
 * BLOCKS:
 * SIZE:     488
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW10'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW11
 * BLOCKS:
 * SIZE:     488
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW11'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW12
 * BLOCKS:
 * SIZE:     488
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW12'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW13
 * BLOCKS:
 * SIZE:     512
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW13'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW14
 * BLOCKS:
 * SIZE:     512
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW14'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW15
 * BLOCKS:
 * SIZE:     512
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW15'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW2
 * BLOCKS:
 * SIZE:     488
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW2'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW3
 * BLOCKS:
 * SIZE:     488
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW3'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW4
 * BLOCKS:
 * SIZE:     488
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW4'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW5
 * BLOCKS:
 * SIZE:     488
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW5'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW6
 * BLOCKS:
 * SIZE:     488
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW6'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW7
 * BLOCKS:
 * SIZE:     488
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW7'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW8
 * BLOCKS:
 * SIZE:     488
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW8'
 */




/*******************************************************************************
 * SWFORMAT:  MIB_MEMORY_ROW9
 * BLOCKS:
 * SIZE:     488
 */
/*******************************************************************************
 * End of 'MIB_MEMORY_ROW9'
 */




/*******************************************************************************
 * SWFORMAT:  RX_DCB
 * BLOCKS:
 * SIZE:     128
 */
/*******************************************************************************
 * End of 'RX_DCB'
 */




/*******************************************************************************
 * SWFORMAT:  TX_DCB
 * BLOCKS:
 * SIZE:     128
 */
/*******************************************************************************
 * End of 'TX_DCB'
 */




#endif /* BCM56990_A0_ACC_H */
