/*
 *         
 * 
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *         
 *     
 * DO NOT EDIT THIS FILE!
 */

#ifndef _PHYMOD_CELL_H__H_
#define _PHYMOD_CELL_H__H_

#include <phymod/phymod_definitions.h>
#include <phymod/phymod.h>

/*!
 * @enum phymod_cell_version_e
 * @brief cell_version type supported 
 */ 
typedef enum phymod_cell_version_e {
    phymodCellVersion2 = 0, /**< version 2 */
    phymodCellVersion3, /**< version 3 */
    phymodCellVersionCount
} phymod_cell_version_t;

#ifdef PHYMOD_DIAG
extern enum_mapping_t phymod_cell_version_t_mapping[];
#endif /*PHYMOD_CELL_DIAG*/

/* phymod_cell_version_t validation */
int phymod_cell_version_t_validate(phymod_cell_version_t phymod_cell_version);
typedef struct phymod_cell_speed_config_s {
    phymod_cell_version_t version; /**< cell version */
    uint32_t data_rate;
    phymod_fec_type_t fec_type; /**< fec type */
    uint32_t linkTraining; /**< cl72/Cl93 on/off */
    uint32_t flags; /**< flags passed in */
    phymod_firmware_lane_config_t pmd_lane_config; /**< pmd lane config */
} phymod_cell_speed_config_t;

/* phymod_cell_speed_config_t initialization and validation */
int phymod_cell_speed_config_t_validate(const phymod_cell_speed_config_t* phymod_cell_speed_config);
int phymod_cell_speed_config_t_init(phymod_cell_speed_config_t* phymod_cell_speed_config);

/*! 
 * phymod_phy_cell_speed_config_set
 *
 * @brief Set/get the interface mode, speed and other configuration related to interface. 
 *
 * @param [in]  phy             - phy access information
 * @param [in]  speed_config    - 
 */
int phymod_phy_cell_speed_config_set(const phymod_phy_access_t* phy, const phymod_cell_speed_config_t* speed_config);
/*! 
 * phymod_phy_cell_speed_config_get
 *
 * @brief Set/get the interface mode, speed and other configuration related to interface. 
 *
 * @param [in]  phy             - phy access information
 * @param [inout] speed_config    - 
 */
int phymod_phy_cell_speed_config_get(const phymod_phy_access_t* phy, phymod_cell_speed_config_t* speed_config);

typedef struct phymod_cell_autoneg_control_s {
    uint32_t flags; /**< see AN_F */
    uint32_t enable;
} phymod_cell_autoneg_control_t;

/* phymod_cell_autoneg_control_t initialization and validation */
int phymod_cell_autoneg_control_t_validate(const phymod_cell_autoneg_control_t* phymod_cell_autoneg_control);
int phymod_cell_autoneg_control_t_init(phymod_cell_autoneg_control_t* phymod_cell_autoneg_control);

/*! 
 * phymod_phy_cell_autoneg_set
 *
 * @brief Set/Get autoneg 
 *
 * @param [in]  phy             - phy access information
 * @param [in]  an              - 
 */
int phymod_phy_cell_autoneg_set(const phymod_phy_access_t* phy, const phymod_cell_autoneg_control_t* an);
/*! 
 * phymod_phy_cell_autoneg_get
 *
 * @brief Set/Get autoneg 
 *
 * @param [in]  phy             - phy access information
 * @param [out]  an              - 
 * @param [out]  an_done         - 
 */
int phymod_phy_cell_autoneg_get(const phymod_phy_access_t* phy, phymod_cell_autoneg_control_t* an, uint32_t* an_done);

typedef struct phymod_cell_autoneg_status_s {
    uint32_t enabled;
    uint32_t locked;
    uint32_t data_rate;
    phymod_fec_type_t fec_type; /**< fec type */
    phymod_cell_version_t version; /**< cell version */
} phymod_cell_autoneg_status_t;

/* phymod_cell_autoneg_status_t initialization and validation */
int phymod_cell_autoneg_status_t_validate(const phymod_cell_autoneg_status_t* phymod_cell_autoneg_status);
int phymod_cell_autoneg_status_t_init(phymod_cell_autoneg_status_t* phymod_cell_autoneg_status);

/*! 
 * phymod_phy_cell_autoneg_status_get
 *
 * @brief Get Autoneg status 
 *
 * @param [in]  phy             - phy access information
 * @param [out]  status          - 
 */
int phymod_phy_cell_autoneg_status_get(const phymod_phy_access_t* phy, phymod_cell_autoneg_status_t* status);


/*!
 * @enum phymod_cell_autoneg_ability_e
 * @brief autoneg_ability 
 */ 
typedef enum phymod_cell_autoneg_ability_e {
    phymodCellAnAbility_VER2_50G_RS276 = 0, /**< autoneg_ability */
    phymodCellAnAbility_VER2_50G_RS552,
    phymodCellAnAbility_VER3_50G_RS544,
    phymodCellAnAbility_VER3_50G_RS272,
    phymodCellAnAbility_VER3_100G_RS544,
    phymodCellAnAbility_VER3_100G_RS272,
    phymodCellAnAbility_VER3_100G_RS544_INTERLEAVED,
    phymodCellAnAbility_Count
} phymod_cell_autoneg_ability_t;

#ifdef PHYMOD_DIAG
extern enum_mapping_t phymod_cell_autoneg_ability_t_mapping[];
#endif /*PHYMOD_CELL_DIAG*/

/* phymod_cell_autoneg_ability_t validation */
int phymod_cell_autoneg_ability_t_validate(phymod_cell_autoneg_ability_t phymod_cell_autoneg_ability);
typedef struct phymod_cell_autoneg_advert_ability_s {
    phymod_cell_autoneg_ability_t ability;
    phymod_firmware_media_type_t medium; /**< Media type */
} phymod_cell_autoneg_advert_ability_t;

/* phymod_cell_autoneg_advert_ability_t initialization and validation */
int phymod_cell_autoneg_advert_ability_t_validate(const phymod_cell_autoneg_advert_ability_t* phymod_cell_autoneg_advert_ability);
int phymod_cell_autoneg_advert_ability_t_init(phymod_cell_autoneg_advert_ability_t* phymod_cell_autoneg_advert_ability);

typedef struct phymod_cell_autoneg_advert_abilities_s {
    uint32_t num_abilities; /**< Number of abilities */
    phymod_cell_autoneg_advert_ability_t* autoneg_abilities; /**< Abilities array */
} phymod_cell_autoneg_advert_abilities_t;

/* phymod_cell_autoneg_advert_abilities_t initialization and validation */
int phymod_cell_autoneg_advert_abilities_t_validate(const phymod_cell_autoneg_advert_abilities_t* phymod_cell_autoneg_advert_abilities);
int phymod_cell_autoneg_advert_abilities_t_init(phymod_cell_autoneg_advert_abilities_t* phymod_cell_autoneg_advert_abilities);

/*! 
 * phymod_phy_cell_autoneg_advert_ability_set
 *
 * @brief  Set/Get autoneg advertising abilities 
 *
 * @param [in]  phy             - phy access information
 * @param [in]  an_advert_abilities   - 
 */
int phymod_phy_cell_autoneg_advert_ability_set(const phymod_phy_access_t* phy, const phymod_cell_autoneg_advert_abilities_t* an_advert_abilities);
/*! 
 * phymod_phy_cell_autoneg_advert_ability_get
 *
 * @brief  Set/Get autoneg advertising abilities 
 *
 * @param [in]  phy             - phy access information
 * @param [inout] an_advert_abilities   - AN abilities
 */
int phymod_phy_cell_autoneg_advert_ability_get(const phymod_phy_access_t* phy, phymod_cell_autoneg_advert_abilities_t* an_advert_abilities);

/*! 
 * phymod_phy_cell_autoneg_remote_advert_ability_get
 *
 * @brief  Get remote autoneg advertising abilities 
 *
 * @param [in]  phy             - phy access information
 * @param [inout] an_advert_abilities   - AN abilities
 */
int phymod_phy_cell_autoneg_remote_advert_ability_get(const phymod_phy_access_t* phy, phymod_cell_autoneg_advert_abilities_t* an_advert_abilities);

/*! 
 * phymod_phy_cell_link_status_get
 *
 * @brief Get link up status indication 
 *
 * @param [in]  phy             - phy access information
 * @param [out]  link_status     - 
 */
int phymod_phy_cell_link_status_get(const phymod_phy_access_t* phy, uint32_t* link_status);

#endif /*_PHYMOD_CELL_H_*/
