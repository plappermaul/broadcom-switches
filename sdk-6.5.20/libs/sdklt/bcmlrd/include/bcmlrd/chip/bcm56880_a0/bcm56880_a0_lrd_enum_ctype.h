/*******************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated by fltg from Logical Table definition files.
 *
 * Tool: $SDK/INTERNAL/fltg/bin/fltg
 *
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#ifndef BCM56880_A0_LRD_ENUM_CTYPE_H
#define BCM56880_A0_LRD_ENUM_CTYPE_H
#ifndef DOXYGEN_IGNORE_AUTOGEN

/*! enum type for ALPM_CONTROL_STATE_T
 * ALPM control table state.
 */
typedef enum bcm56880_a0_lrd_alpm_control_state_t_e {
    /*! Valid.  */
    BCM56880_A0_LRD_ALPM_CONTROL_STATE_T_T_VALID = 0,
    /*! Conflicting ALPM banks.  */
    BCM56880_A0_LRD_ALPM_CONTROL_STATE_T_T_CONFLICTING_ALPM_BANKS = 1,
    /*! ALPM in use.  */
    BCM56880_A0_LRD_ALPM_CONTROL_STATE_T_T_ALPM_IN_USE = 2,
} bcm56880_a0_lrd_alpm_control_state_t_t;

/*! enum type for ALPM_DB_T
 * ALPM database.
 */
typedef enum bcm56880_a0_lrd_alpm_db_t_e {
    /*! ALPM database 0  */
    BCM56880_A0_LRD_ALPM_DB_T_T_ALPM_DB_0 = 0,
    /*! ALPM database 1  */
    BCM56880_A0_LRD_ALPM_DB_T_T_ALPM_DB_1 = 1,
    /*! ALPM database 2  */
    BCM56880_A0_LRD_ALPM_DB_T_T_ALPM_DB_2 = 2,
    /*! ALPM database 3  */
    BCM56880_A0_LRD_ALPM_DB_T_T_ALPM_DB_3 = 3,
} bcm56880_a0_lrd_alpm_db_t_t;

/*! enum type for ALPM_KEY_INPUT_T
 * ALPM key input type.
 */
typedef enum bcm56880_a0_lrd_alpm_key_input_t_e {
    /*! Key input LPM destination quad wide  */
    BCM56880_A0_LRD_ALPM_KEY_INPUT_T_T_ALPM_KEY_INPUT_LPM_DST_QUAD = 0,
    /*! Key input LPM destination double wide  */
    BCM56880_A0_LRD_ALPM_KEY_INPUT_T_T_ALPM_KEY_INPUT_LPM_DST_DOUBLE = 1,
    /*! Key input LPM destination single wide  */
    BCM56880_A0_LRD_ALPM_KEY_INPUT_T_T_ALPM_KEY_INPUT_LPM_DST_SINGLE = 2,
    /*! Key input LPM source quad wide  */
    BCM56880_A0_LRD_ALPM_KEY_INPUT_T_T_ALPM_KEY_INPUT_LPM_SRC_QUAD = 3,
    /*! Key input LPM source double wide  */
    BCM56880_A0_LRD_ALPM_KEY_INPUT_T_T_ALPM_KEY_INPUT_LPM_SRC_DOUBLE = 4,
    /*! Key input LPM source single wide  */
    BCM56880_A0_LRD_ALPM_KEY_INPUT_T_T_ALPM_KEY_INPUT_LPM_SRC_SINGLE = 5,
    /*! Key input FP compression destination  */
    BCM56880_A0_LRD_ALPM_KEY_INPUT_T_T_ALPM_KEY_INPUT_FP_COMP_DST = 6,
    /*! Key input FP compression source  */
    BCM56880_A0_LRD_ALPM_KEY_INPUT_T_T_ALPM_KEY_INPUT_FP_COMP_SRC = 7,
} bcm56880_a0_lrd_alpm_key_input_t_t;

/*! enum type for ALPM_KEY_TYPE_T
 * ALPM key type.
 */
typedef enum bcm56880_a0_lrd_alpm_key_type_t_e {
    /*! LPM global IPv4.  */
    BCM56880_A0_LRD_ALPM_KEY_TYPE_T_T_KEY_L3_IPV4_UC = 0,
    /*! LPM VRF IPv4.  */
    BCM56880_A0_LRD_ALPM_KEY_TYPE_T_T_KEY_L3_IPV4_UC_VRF = 1,
    /*! LPM global high priority IPv4.  */
    BCM56880_A0_LRD_ALPM_KEY_TYPE_T_T_KEY_L3_IPV4_UC_OVERRIDE = 2,
    /*! LPM global IPv6 single wide.  */
    BCM56880_A0_LRD_ALPM_KEY_TYPE_T_T_KEY_L3_IPV6_UC_SINGLE = 3,
    /*! LPM VRF IPv6 single wide.  */
    BCM56880_A0_LRD_ALPM_KEY_TYPE_T_T_KEY_L3_IPV6_UC_SINGLE_VRF = 4,
    /*! LPM global high priority IPv6 single wide.  */
    BCM56880_A0_LRD_ALPM_KEY_TYPE_T_T_KEY_L3_IPV6_UC_SINGLE_OVERRIDE = 5,
    /*! LPM global IPv6 double wide.  */
    BCM56880_A0_LRD_ALPM_KEY_TYPE_T_T_KEY_L3_IPV6_UC_DOUBLE = 6,
    /*! LPM VRF IPv6 double wide.  */
    BCM56880_A0_LRD_ALPM_KEY_TYPE_T_T_KEY_L3_IPV6_UC_DOUBLE_VRF = 7,
    /*! LPM global high priority IPv6 double wide.  */
    BCM56880_A0_LRD_ALPM_KEY_TYPE_T_T_KEY_L3_IPV6_UC_DOUBLE_OVERRIDE = 8,
    /*! LPM global IPv6 quad wide.  */
    BCM56880_A0_LRD_ALPM_KEY_TYPE_T_T_KEY_L3_IPV6_UC_QUAD = 9,
    /*! LPM VRF IPv6 quad wide  */
    BCM56880_A0_LRD_ALPM_KEY_TYPE_T_T_KEY_L3_IPV6_UC_QUAD_VRF = 10,
    /*! LPM global high priority IPv6 quad wide  */
    BCM56880_A0_LRD_ALPM_KEY_TYPE_T_T_KEY_L3_IPV6_UC_QUAD_OVERRIDE = 11,
    /*! IPv4 compression  */
    BCM56880_A0_LRD_ALPM_KEY_TYPE_T_T_KEY_L3_IPV4_COMP = 12,
    /*! IPv6 compression  */
    BCM56880_A0_LRD_ALPM_KEY_TYPE_T_T_KEY_L3_IPV6_COMP = 13,
} bcm56880_a0_lrd_alpm_key_type_t_t;

/*! enum type for CTR_EFLEX_OBJ_SRC_T
 * Enhanced flex counter object selection options.
 */
typedef enum bcm56880_a0_lrd_ctr_eflex_obj_src_t_e {
    /*! Use the value 0.  */
    BCM56880_A0_LRD_CTR_EFLEX_OBJ_SRC_T_T_USE_0 = 0,
    /*! Use the value 1.  */
    BCM56880_A0_LRD_CTR_EFLEX_OBJ_SRC_T_T_USE_1 = 1,
    /*! Use object 1.  */
    BCM56880_A0_LRD_CTR_EFLEX_OBJ_SRC_T_T_USE_OBJ_1 = 2,
    /*! Use object 2.  */
    BCM56880_A0_LRD_CTR_EFLEX_OBJ_SRC_T_T_USE_OBJ_2 = 3,
    /*! Use object 3.  */
    BCM56880_A0_LRD_CTR_EFLEX_OBJ_SRC_T_T_USE_OBJ_3 = 4,
    /*! Use object 4.  */
    BCM56880_A0_LRD_CTR_EFLEX_OBJ_SRC_T_T_USE_OBJ_4 = 5,
    /*! Use trigger interval.  */
    BCM56880_A0_LRD_CTR_EFLEX_OBJ_SRC_T_T_USE_TRIG_INTERVAL = 6,
    /*! Use range check result 1.  */
    BCM56880_A0_LRD_CTR_EFLEX_OBJ_SRC_T_T_USE_RANGE_CHK_1 = 7,
    /*! Use range check result 2.  */
    BCM56880_A0_LRD_CTR_EFLEX_OBJ_SRC_T_T_USE_RANGE_CHK_2 = 8,
    /*! Use range check result 3.  */
    BCM56880_A0_LRD_CTR_EFLEX_OBJ_SRC_T_T_USE_RANGE_CHK_3 = 9,
    /*! Use range check result 4.  */
    BCM56880_A0_LRD_CTR_EFLEX_OBJ_SRC_T_T_USE_RANGE_CHK_4 = 10,
} bcm56880_a0_lrd_ctr_eflex_obj_src_t_t;

/*! enum type for CTR_EFLEX_SCALE_T
 * Enhanced flex counter time scale for a single trigger period.
 */
typedef enum bcm56880_a0_lrd_ctr_eflex_scale_t_e {
    /*! Unlimited collection.  */
    BCM56880_A0_LRD_CTR_EFLEX_SCALE_T_T_SCALE_INFINITE = 0,
    /*! 128 nanoseconds.  */
    BCM56880_A0_LRD_CTR_EFLEX_SCALE_T_T_SCALE_128_NSEC = 1,
    /*! 512 nanoseconds.  */
    BCM56880_A0_LRD_CTR_EFLEX_SCALE_T_T_SCALE_512_NSEC = 2,
    /*! 1024 nanoseconds.  */
    BCM56880_A0_LRD_CTR_EFLEX_SCALE_T_T_SCALE_1024_NSEC = 3,
    /*! Approximately 8.192 microseconds.  */
    BCM56880_A0_LRD_CTR_EFLEX_SCALE_T_T_SCALE_8_USEC = 4,
    /*! Approximately 131 microseconds.  */
    BCM56880_A0_LRD_CTR_EFLEX_SCALE_T_T_SCALE_131_USEC = 5,
    /*! Approximately 1.048 milliseconds.  */
    BCM56880_A0_LRD_CTR_EFLEX_SCALE_T_T_SCALE_1_MSEC = 6,
    /*! Approximately 8.192 milliseconds.  */
    BCM56880_A0_LRD_CTR_EFLEX_SCALE_T_T_SCALE_8_MSEC = 7,
} bcm56880_a0_lrd_ctr_eflex_scale_t_t;

/*! enum type for CTR_EFLEX_STOP_TRIGGER_T
 * Enhanced flex counter stop trigger types.
 */
typedef enum bcm56880_a0_lrd_ctr_eflex_stop_trigger_t_e {
    /*! Use period as type.  */
    BCM56880_A0_LRD_CTR_EFLEX_STOP_TRIGGER_T_T_PERIOD = 0,
    /*! Use condition as type.  */
    BCM56880_A0_LRD_CTR_EFLEX_STOP_TRIGGER_T_T_CONDITION = 1,
} bcm56880_a0_lrd_ctr_eflex_stop_trigger_t_t;

/*! enum type for DEVICE_BS_PLL_REF_CLK_T */
typedef enum bcm56880_a0_lrd_device_bs_pll_ref_clk_t_e {
    /*! Auto select clk source.  */
    BCM56880_A0_LRD_DEVICE_BS_PLL_REF_CLK_T_T_CLK_AUTO = 0,
    /*! Ext clk source 12.8Mhz.  */
    BCM56880_A0_LRD_DEVICE_BS_PLL_REF_CLK_T_T_CLK_EXT_12_8MHZ = 1,
    /*! Ext clk source 20Mhz.  */
    BCM56880_A0_LRD_DEVICE_BS_PLL_REF_CLK_T_T_CLK_EXT_20MHZ = 2,
    /*! Ext clk source 25Mhz.  */
    BCM56880_A0_LRD_DEVICE_BS_PLL_REF_CLK_T_T_CLK_EXT_25MHZ = 3,
    /*! Ext clk source 32Mhz.  */
    BCM56880_A0_LRD_DEVICE_BS_PLL_REF_CLK_T_T_CLK_EXT_32MHZ = 4,
    /*! Ext clk source 50Mhz.  */
    BCM56880_A0_LRD_DEVICE_BS_PLL_REF_CLK_T_T_CLK_EXT_50MHZ = 5,
    /*! Int clk source 50Mhz.  */
    BCM56880_A0_LRD_DEVICE_BS_PLL_REF_CLK_T_T_CLK_INT_50MHZ = 6,
} bcm56880_a0_lrd_device_bs_pll_ref_clk_t_t;

/*! enum type for DEVICE_CLK_FREQ_T */
typedef enum bcm56880_a0_lrd_device_clk_freq_t_e {
    /*! Clock frequency 1350Mhz.  */
    BCM56880_A0_LRD_DEVICE_CLK_FREQ_T_T_CLK_1350MHZ = 0,
    /*! Clock frequency 950Mhz.  */
    BCM56880_A0_LRD_DEVICE_CLK_FREQ_T_T_CLK_950MHZ = 2,
    /*! Clock frequency 1025Mhz.  */
    BCM56880_A0_LRD_DEVICE_CLK_FREQ_T_T_CLK_1025MHZ = 3,
    /*! Clock frequency 1100Mhz.  */
    BCM56880_A0_LRD_DEVICE_CLK_FREQ_T_T_CLK_1100MHZ = 4,
    /*! Clock frequency 1175Mhz.  */
    BCM56880_A0_LRD_DEVICE_CLK_FREQ_T_T_CLK_1175MHZ = 5,
    /*! Clock frequency 1250Mhz.  */
    BCM56880_A0_LRD_DEVICE_CLK_FREQ_T_T_CLK_1250MHZ = 6,
    /*! Clock frequency 850Mhz.  */
    BCM56880_A0_LRD_DEVICE_CLK_FREQ_T_T_CLK_850MHZ = 7,
} bcm56880_a0_lrd_device_clk_freq_t_t;

/*! enum type for DEVICE_EM_BANK_TYPE_T
 * Device enhanced memory bank type definition.
 */
typedef enum bcm56880_a0_lrd_device_em_bank_type_t_e {
    /*! HASH bank.  */
    BCM56880_A0_LRD_DEVICE_EM_BANK_TYPE_T_T_HASH = 0,
    /*! TCAM bank.  */
    BCM56880_A0_LRD_DEVICE_EM_BANK_TYPE_T_T_TCAM = 1,
    /*! Index bank.  */
    BCM56880_A0_LRD_DEVICE_EM_BANK_TYPE_T_T_INDEX = 2,
    /*! Dedicated to ALPM level 2.  */
    BCM56880_A0_LRD_DEVICE_EM_BANK_TYPE_T_T_MINI_BANK = 3,
} bcm56880_a0_lrd_device_em_bank_type_t_t;

/*! enum type for DEVICE_EM_GROUP_ATTRIBUTE_T
 * Device enhanced memory group attribute type definition.
 */
typedef enum bcm56880_a0_lrd_device_em_group_attribute_t_e {
    /*! HASH group.  */
    BCM56880_A0_LRD_DEVICE_EM_GROUP_ATTRIBUTE_T_T_HASH = 0,
    /*! ALPM level 1 TCAM group.  */
    BCM56880_A0_LRD_DEVICE_EM_GROUP_ATTRIBUTE_T_T_ALPM_LEVEL_1 = 1,
    /*! ALPM level 2 group.  */
    BCM56880_A0_LRD_DEVICE_EM_GROUP_ATTRIBUTE_T_T_ALPM_LEVEL_2 = 2,
    /*! ALPM level 3 group.  */
    BCM56880_A0_LRD_DEVICE_EM_GROUP_ATTRIBUTE_T_T_ALPM_LEVEL_3 = 3,
    /*! TCAM group.  */
    BCM56880_A0_LRD_DEVICE_EM_GROUP_ATTRIBUTE_T_T_TCAM = 4,
    /*! Dynamic Field Processor group.  */
    BCM56880_A0_LRD_DEVICE_EM_GROUP_ATTRIBUTE_T_T_DYNAMIC_FP = 5,
    /*! Dynamic Flow Tracker group.  */
    BCM56880_A0_LRD_DEVICE_EM_GROUP_ATTRIBUTE_T_T_DYNAMIC_FT = 6,
    /*! INDEX group.  */
    BCM56880_A0_LRD_DEVICE_EM_GROUP_ATTRIBUTE_T_T_INDEX = 7,
    /*! Group for layer 3 uniciast destination lookup.  */
    BCM56880_A0_LRD_DEVICE_EM_GROUP_ATTRIBUTE_T_T_L3UC_DST = 8,
    /*! Group for layer 3 unicast source lookup.  */
    BCM56880_A0_LRD_DEVICE_EM_GROUP_ATTRIBUTE_T_T_L3UC_SRC = 9,
    /*! Group for IP compression entries' destination lookup.  */
    BCM56880_A0_LRD_DEVICE_EM_GROUP_ATTRIBUTE_T_T_COMP_DST = 10,
    /*! Group for IP compression entries' source group.  */
    BCM56880_A0_LRD_DEVICE_EM_GROUP_ATTRIBUTE_T_T_COMP_SRC = 11,
    /*! Dynamic Flow Tracker and Field Processor group.  */
    BCM56880_A0_LRD_DEVICE_EM_GROUP_ATTRIBUTE_T_T_DYNAMIC_FT_FP = 12,
} bcm56880_a0_lrd_device_em_group_attribute_t_t;

/*! enum type for DEVICE_EM_TILE_MODE_ATTRIBUTE_T
 * Device enhanced memory tile mode's attribute type definition.
 */
typedef enum bcm56880_a0_lrd_device_em_tile_mode_attribute_t_e {
    /*! None.  */
    BCM56880_A0_LRD_DEVICE_EM_TILE_MODE_ATTRIBUTE_T_T_NONE = 0,
    /*! Only ALPM levels 1 and 2 supported for this tile mode.  */
    BCM56880_A0_LRD_DEVICE_EM_TILE_MODE_ATTRIBUTE_T_T_ALPM_LEVEL1_LEVEL2_ONLY = 1,
    /*! Only compression levels 1 and 2 supported for this tile mode.  */
    BCM56880_A0_LRD_DEVICE_EM_TILE_MODE_ATTRIBUTE_T_T_ALPM_COMPRESSION_LEVEL1_LEVEL2_ONLY = 2,
} bcm56880_a0_lrd_device_em_tile_mode_attribute_t_t;

/*! enum type for DEVICE_EM_TILE_PDD_T
 * Device enhanced memory tile's ALPM PDD type definition.
 */
typedef enum bcm56880_a0_lrd_device_em_tile_pdd_t_e {
    /*! No ALPM PDD type.  */
    BCM56880_A0_LRD_DEVICE_EM_TILE_PDD_T_T_EM_TILE_ALPM_PDD_TYPE_NONE = 0,
    /*! Supports destination lookup for L3UC.  */
    BCM56880_A0_LRD_DEVICE_EM_TILE_PDD_T_T_EM_TILE_ALPM_PDD_TYPE_L3UC_DST = 1,
    /*! Supports source lookup for L3UC.  */
    BCM56880_A0_LRD_DEVICE_EM_TILE_PDD_T_T_EM_TILE_ALPM_PDD_TYPE_L3UC_SRC = 2,
    /*! Supports destination lookup for IP compression entries. */
    BCM56880_A0_LRD_DEVICE_EM_TILE_PDD_T_T_EM_TILE_ALPM_PDD_TYPE_COMP_DST = 3,
    /*! Supports source lookup for IP compression entries.  */
    BCM56880_A0_LRD_DEVICE_EM_TILE_PDD_T_T_EM_TILE_ALPM_PDD_TYPE_COMP_SRC = 4,
} bcm56880_a0_lrd_device_em_tile_pdd_t_t;

/*! enum type for DEVICE_HASH_VECTOR_T
 * Device hash vector type.
 */
typedef enum bcm56880_a0_lrd_device_hash_vector_t_e {
    /*! Use {crc32[31:0], crc32[31:0]} type hash vector.  */
    BCM56880_A0_LRD_DEVICE_HASH_VECTOR_T_T_CRC32A_CRC32B = 6,
} bcm56880_a0_lrd_device_hash_vector_t_t;

/*! enum type for DEVICE_TS_PLL_REF_CLK_T */
typedef enum bcm56880_a0_lrd_device_ts_pll_ref_clk_t_e {
    /*! Auto select clk source.  */
    BCM56880_A0_LRD_DEVICE_TS_PLL_REF_CLK_T_T_CLK_AUTO = 0,
    /*! Ext clk source 50Mhz.  */
    BCM56880_A0_LRD_DEVICE_TS_PLL_REF_CLK_T_T_CLK_EXT_50MHZ = 1,
    /*! Int clk source 50Mhz.  */
    BCM56880_A0_LRD_DEVICE_TS_PLL_REF_CLK_T_T_CLK_INT_50MHZ = 2,
} bcm56880_a0_lrd_device_ts_pll_ref_clk_t_t;

/*! enum type for DLB_ASSIGNMENT_MODE_T
 * DLB Mode enumeration type.
 */
typedef enum bcm56880_a0_lrd_dlb_assignment_mode_t_e {
    /*!
     * If the inactivity duration has elapsed, pick the optimal member.
     *  Else, pick the current assigned member.
     */
    BCM56880_A0_LRD_DLB_ASSIGNMENT_MODE_T_T_TIME_ELIGIBILITY = 0,
    /*! Always pick the current assigned member.  */
    BCM56880_A0_LRD_DLB_ASSIGNMENT_MODE_T_T_FIXED = 1,
    /*! Always pick the optimal member.  */
    BCM56880_A0_LRD_DLB_ASSIGNMENT_MODE_T_T_PACKET_SPRAY = 2,
} bcm56880_a0_lrd_dlb_assignment_mode_t_t;

/*! enum type for DLB_FLOW_SET_SIZE_T
 * DLB Group Flow Set Size enumeration type.
 */
typedef enum bcm56880_a0_lrd_dlb_flow_set_size_t_e {
    /*! Indicate the number of flow sets allocated to a given DLB group is 0.  */
    BCM56880_A0_LRD_DLB_FLOW_SET_SIZE_T_T_FLOW_SET_SIZE_0 = 0,
    /*! Indicate the number of flow sets allocated to a given DLB group is 256.  */
    BCM56880_A0_LRD_DLB_FLOW_SET_SIZE_T_T_FLOW_SET_SIZE_256 = 1,
    /*! Indicate the number of flow sets allocated to a given DLB group is 512.  */
    BCM56880_A0_LRD_DLB_FLOW_SET_SIZE_T_T_FLOW_SET_SIZE_512 = 2,
    /*! Indicate the number of flow sets allocated to a given DLB group is 1K.  */
    BCM56880_A0_LRD_DLB_FLOW_SET_SIZE_T_T_FLOW_SET_SIZE_1024 = 3,
    /*! Indicate the number of flow sets allocated to a given DLB group is 2K.  */
    BCM56880_A0_LRD_DLB_FLOW_SET_SIZE_T_T_FLOW_SET_SIZE_2048 = 4,
    /*! Indicate the number of flow sets allocated to a given DLB group is 4K.  */
    BCM56880_A0_LRD_DLB_FLOW_SET_SIZE_T_T_FLOW_SET_SIZE_4096 = 5,
    /*! Indicate the number of flow sets allocated to a given DLB group is 8K.  */
    BCM56880_A0_LRD_DLB_FLOW_SET_SIZE_T_T_FLOW_SET_SIZE_8192 = 6,
    /*! Indicate the number of flow sets allocated to a given DLB group is 16K.  */
    BCM56880_A0_LRD_DLB_FLOW_SET_SIZE_T_T_FLOW_SET_SIZE_16384 = 7,
    /*! Indicate the number of flow sets allocated to a given DLB group is 32K.  */
    BCM56880_A0_LRD_DLB_FLOW_SET_SIZE_T_T_FLOW_SET_SIZE_32768 = 8,
} bcm56880_a0_lrd_dlb_flow_set_size_t_t;

/*! enum type for DLB_PORT_SCALING_FACTOR_T
 * DLB Scaling factor enumeration type.
 *  Per port multiplier used to scale the associated thresholds to account
 *  for different aggregation groups operating at different speeds.
 */
typedef enum bcm56880_a0_lrd_dlb_port_scaling_factor_t_e {
    /*! Scaling factor of 1 for 10G ports.  */
    BCM56880_A0_LRD_DLB_PORT_SCALING_FACTOR_T_T_SCALING_FACTOR_10G = 0,
    /*! Scaling factor of 2.5 for 25G ports.  */
    BCM56880_A0_LRD_DLB_PORT_SCALING_FACTOR_T_T_SCALING_FACTOR_25G = 1,
    /*! Scaling factor of 4 for 40G ports.  */
    BCM56880_A0_LRD_DLB_PORT_SCALING_FACTOR_T_T_SCALING_FACTOR_40G = 2,
    /*! Scaling factor of 5 for 50G ports.  */
    BCM56880_A0_LRD_DLB_PORT_SCALING_FACTOR_T_T_SCALING_FACTOR_50G = 3,
    /*! Scaling factor of 7.5 for 75G ports.  */
    BCM56880_A0_LRD_DLB_PORT_SCALING_FACTOR_T_T_SCALING_FACTOR_75G = 4,
    /*! Scaling factor of 10 for 100G ports.  */
    BCM56880_A0_LRD_DLB_PORT_SCALING_FACTOR_T_T_SCALING_FACTOR_100G = 5,
    /*! Scaling factor of 20 for 200G ports.  */
    BCM56880_A0_LRD_DLB_PORT_SCALING_FACTOR_T_T_SCALING_FACTOR_200G = 6,
    /*! Scaling factor of 40 for 400G ports.  */
    BCM56880_A0_LRD_DLB_PORT_SCALING_FACTOR_T_T_SCALING_FACTOR_400G = 7,
} bcm56880_a0_lrd_dlb_port_scaling_factor_t_t;

/*! enum type for DLB_TRUNK_HASH_FLOW_ID_SRC_T
 * The DLB_TRUNK_HASH_FLOW_ID_SRC_T enum declares a list of enumerators, in which
 *  each enumerator represents an input sub-field that can be selected as the
 *  source field for generating the HASH_FLOW_ID key field value.
 */
typedef enum bcm56880_a0_lrd_dlb_trunk_hash_flow_id_src_t_e {
    /*!
     * Use lower 8-bits of hash A0 input field as
     *  LB_HASH_DLB_TRUNK_HASH_OUTPUT_SELECTION.LB_HASH_DLB_TRUNK_OUTPUT_SELECTION_ID
     *  key field value.
     */
    BCM56880_A0_LRD_DLB_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_A0_LO = 0,
    /*!
     * Use higher 8-bits of hash A0 input field as
     *  LB_HASH_DLB_TRUNK_HASH_OUTPUT_SELECTION.LB_HASH_DLB_TRUNK_OUTPUT_SELECTION_ID
     *  key field value.
     */
    BCM56880_A0_LRD_DLB_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_A0_HI = 1,
    /*!
     * Use lower 8-bits of hash A1 input field as
     *  LB_HASH_DLB_TRUNK_HASH_OUTPUT_SELECTION.LB_HASH_DLB_TRUNK_OUTPUT_SELECTION_ID
     *  key field value.
     */
    BCM56880_A0_LRD_DLB_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_A1_LO = 2,
    /*!
     * Use higher 8-bits of hash A1 input field as
     *  LB_HASH_DLB_TRUNK_HASH_OUTPUT_SELECTION.LB_HASH_DLB_TRUNK_OUTPUT_SELECTION_ID
     *  key field value.
     */
    BCM56880_A0_LRD_DLB_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_A1_HI = 3,
    /*!
     * Use lower 8-bits of hash B0 input field as
     *  LB_HASH_DLB_TRUNK_HASH_OUTPUT_SELECTION.LB_HASH_DLB_TRUNK_OUTPUT_SELECTION_ID
     *  key field value.
     */
    BCM56880_A0_LRD_DLB_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_B0_LO = 4,
    /*!
     * Use higher 8-bits of hash B0 input field as
     *  LB_HASH_DLB_TRUNK_HASH_OUTPUT_SELECTION.LB_HASH_DLB_TRUNK_OUTPUT_SELECTION_ID
     *  key field value.
     */
    BCM56880_A0_LRD_DLB_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_B0_HI = 5,
    /*!
     * Use lower 8-bits of hash B1 input field as
     *  LB_HASH_DLB_TRUNK_HASH_OUTPUT_SELECTION.LB_HASH_DLB_TRUNK_OUTPUT_SELECTION_ID
     *  key field value.
     */
    BCM56880_A0_LRD_DLB_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_B1_LO = 6,
    /*!
     * Use higher 8-bits of hash B1 input field as
     *  LB_HASH_DLB_TRUNK_HASH_OUTPUT_SELECTION.LB_HASH_DLB_TRUNK_OUTPUT_SELECTION_ID
     *  key field value.
     */
    BCM56880_A0_LRD_DLB_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_B1_HI = 7,
    /*!
     * Use lower 8-bits of hash C0 input field as
     *  LB_HASH_DLB_TRUNK_HASH_OUTPUT_SELECTION.LB_HASH_DLB_TRUNK_OUTPUT_SELECTION_ID
     *  key field value.
     */
    BCM56880_A0_LRD_DLB_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_C0_LO = 8,
    /*!
     * Use higher 8-bits of hash C0 input field as
     *  LB_HASH_DLB_TRUNK_HASH_OUTPUT_SELECTION.LB_HASH_DLB_TRUNK_OUTPUT_SELECTION_ID
     *  key field value.
     */
    BCM56880_A0_LRD_DLB_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_C0_HI = 9,
    /*!
     * Use lower 8-bits of hash C1 input field as
     *  LB_HASH_DLB_TRUNK_HASH_OUTPUT_SELECTION.LB_HASH_DLB_TRUNK_OUTPUT_SELECTION_ID
     *  key field value.
     */
    BCM56880_A0_LRD_DLB_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_C1_LO = 10,
    /*!
     * Use higher 8-bits of hash C1 input field as
     *  LB_HASH_DLB_TRUNK_HASH_OUTPUT_SELECTION.LB_HASH_DLB_TRUNK_OUTPUT_SELECTION_ID
     *  key field value.
     */
    BCM56880_A0_LRD_DLB_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_C1_HI = 11,
    /*!
     * Use hash index from the bus as
     *  LB_HASH_DLB_TRUNK_HASH_OUTPUT_SELECTION.LB_HASH_DLB_TRUNK_OUTPUT_SELECTION_ID
     *  key field value.
     */
    BCM56880_A0_LRD_DLB_TRUNK_HASH_FLOW_ID_SRC_T_T_BUS_HASH_INDEX = 12,
} bcm56880_a0_lrd_dlb_trunk_hash_flow_id_src_t_t;

/*! enum type for ECMP_HASH_FLOW_ID_SRC_T
 * The ECMP_HASH_FLOW_ID_SRC_T enum declares a list of enumerators, in which
 *  each enumerator represents an input sub-field that can be selected as the
 *  source field for generating the HASH_FLOW_ID key field value.
 */
typedef enum bcm56880_a0_lrd_ecmp_hash_flow_id_src_t_e {
    /*!
     * Use lower 8-bits of hash A0 input field as
     *  LB_HASH_ECMP_LEVEL0_HASH_OUTPUT_SELECTION.HASH_FLOW_ID key field value.
     */
    BCM56880_A0_LRD_ECMP_HASH_FLOW_ID_SRC_T_T_HASH_A0_LO = 0,
    /*!
     * Use higher 8-bits of hash A0 input field as
     *  LB_HASH_ECMP_LEVEL0_HASH_OUTPUT_SELECTION.HASH_FLOW_ID key field value.
     */
    BCM56880_A0_LRD_ECMP_HASH_FLOW_ID_SRC_T_T_HASH_A0_HI = 1,
    /*!
     * Use lower 8-bits of hash A1 input field as
     *  LB_HASH_ECMP_LEVEL0_HASH_OUTPUT_SELECTION.HASH_FLOW_ID key field value.
     */
    BCM56880_A0_LRD_ECMP_HASH_FLOW_ID_SRC_T_T_HASH_A1_LO = 2,
    /*!
     * Use higher 8-bits of hash A1 input field as
     *  LB_HASH_ECMP_LEVEL0_HASH_OUTPUT_SELECTION.HASH_FLOW_ID key field value.
     */
    BCM56880_A0_LRD_ECMP_HASH_FLOW_ID_SRC_T_T_HASH_A1_HI = 3,
    /*!
     * Use lower 8-bits of hash B0 input field as
     *  LB_HASH_ECMP_LEVEL0_HASH_OUTPUT_SELECTION.HASH_FLOW_ID key field value.
     */
    BCM56880_A0_LRD_ECMP_HASH_FLOW_ID_SRC_T_T_HASH_B0_LO = 4,
    /*!
     * Use higher 8-bits of hash B0 input field as
     *  LB_HASH_ECMP_LEVEL0_HASH_OUTPUT_SELECTION.HASH_FLOW_ID key field value.
     */
    BCM56880_A0_LRD_ECMP_HASH_FLOW_ID_SRC_T_T_HASH_B0_HI = 5,
    /*!
     * Use lower 8-bits of hash B1 input field as
     *  LB_HASH_ECMP_LEVEL0_HASH_OUTPUT_SELECTION.HASH_FLOW_ID key field value.
     */
    BCM56880_A0_LRD_ECMP_HASH_FLOW_ID_SRC_T_T_HASH_B1_LO = 6,
    /*!
     * Use higher 8-bits of hash B1 input field as
     *  LB_HASH_ECMP_LEVEL0_HASH_OUTPUT_SELECTION.HASH_FLOW_ID key field value.
     */
    BCM56880_A0_LRD_ECMP_HASH_FLOW_ID_SRC_T_T_HASH_B1_HI = 7,
    /*!
     * Use lower 8-bits of hash C0 input field as
     *  LB_HASH_ECMP_LEVEL0_HASH_OUTPUT_SELECTION.HASH_FLOW_ID key field value.
     */
    BCM56880_A0_LRD_ECMP_HASH_FLOW_ID_SRC_T_T_HASH_C0_LO = 8,
    /*!
     * Use higher 8-bits of hash C0 input field as
     *  LB_HASH_ECMP_LEVEL0_HASH_OUTPUT_SELECTION.HASH_FLOW_ID key field value.
     */
    BCM56880_A0_LRD_ECMP_HASH_FLOW_ID_SRC_T_T_HASH_C0_HI = 9,
    /*!
     * Use lower 8-bits of hash C1 input field as
     *  LB_HASH_ECMP_LEVEL0_HASH_OUTPUT_SELECTION.HASH_FLOW_ID key field value.
     */
    BCM56880_A0_LRD_ECMP_HASH_FLOW_ID_SRC_T_T_HASH_C1_LO = 10,
    /*!
     * Use higher 8-bits of hash C1 input field as
     *  LB_HASH_ECMP_LEVEL0_HASH_OUTPUT_SELECTION.HASH_FLOW_ID key field value.
     */
    BCM56880_A0_LRD_ECMP_HASH_FLOW_ID_SRC_T_T_HASH_C1_HI = 11,
    /*!
     * Use hash index from the bus as
     *  LB_HASH_ECMP_LEVEL0_HASH_OUTPUT_SELECTION.HASH_FLOW_ID key field value.
     */
    BCM56880_A0_LRD_ECMP_HASH_FLOW_ID_SRC_T_T_BUS_HASH_INDEX = 12,
} bcm56880_a0_lrd_ecmp_hash_flow_id_src_t_t;

/*! enum type for ECMP_PROFILE_ID_T
 * The ECMP_PROFILE_ID_T enum declares a list of enumerators that correspond to
 *  the list of ECMP profiles defined in the NPL application.
 */
typedef enum bcm56880_a0_lrd_ecmp_profile_id_t_e {
    /*! Switch DNA ECMP profile ID.  */
    BCM56880_A0_LRD_ECMP_PROFILE_ID_T_T_PROFILE_0 = 0,
    /*! ECMP NPL profile ID 1.  */
    BCM56880_A0_LRD_ECMP_PROFILE_ID_T_T_PROFILE_1 = 1,
    /*! ECMP NPL profile ID 2.  */
    BCM56880_A0_LRD_ECMP_PROFILE_ID_T_T_PROFILE_2 = 2,
    /*! ECMP NPL profile ID 3.  */
    BCM56880_A0_LRD_ECMP_PROFILE_ID_T_T_PROFILE_3 = 3,
} bcm56880_a0_lrd_ecmp_profile_id_t_t;

/*! enum type for EGR_OBJECT_SEL_T
 * Egress objects override control.
 */
typedef enum bcm56880_a0_lrd_egr_object_sel_t_e {
    /*! No update.  */
    BCM56880_A0_LRD_EGR_OBJECT_SEL_T_T_SEL_NONE = 0,
    /*! Update to be zero.  */
    BCM56880_A0_LRD_EGR_OBJECT_SEL_T_T_SEL_ZERO = 1,
    /*! Update to be next hop index.  */
    BCM56880_A0_LRD_EGR_OBJECT_SEL_T_T_SEL_NEXT_HOP_INDEX = 2,
    /*! Update to be REMAP_OBJECT_INDEX_0.  */
    BCM56880_A0_LRD_EGR_OBJECT_SEL_T_T_SEL_REMAP_OBJECT_INDEX_0 = 3,
    /*! Update to be REMAP_OBJECT_INDEX_1.  */
    BCM56880_A0_LRD_EGR_OBJECT_SEL_T_T_SEL_REMAP_OBJECT_INDEX_1 = 4,
    /*! Update to be REMAP_OBJECT_INDEX_2.  */
    BCM56880_A0_LRD_EGR_OBJECT_SEL_T_T_SEL_REMAP_OBJECT_INDEX_2 = 5,
    /*! Update to be L2_OIF.  */
    BCM56880_A0_LRD_EGR_OBJECT_SEL_T_T_SEL_L2_OIF = 6,
} bcm56880_a0_lrd_egr_object_sel_t_t;

/*! enum type for ETRAP_CRITICAL_T
 * Time period at the end of ETRAP_INTERVAL.
 */
typedef enum bcm56880_a0_lrd_etrap_critical_t_e {
    /*! 50 microseconds.  */
    BCM56880_A0_LRD_ETRAP_CRITICAL_T_T_TIME_50US = 0,
    /*! 100 microseconds.  */
    BCM56880_A0_LRD_ETRAP_CRITICAL_T_T_TIME_100US = 1,
    /*! 150 microseconds.  */
    BCM56880_A0_LRD_ETRAP_CRITICAL_T_T_TIME_150US = 2,
    /*! 200 microseconds.  */
    BCM56880_A0_LRD_ETRAP_CRITICAL_T_T_TIME_200US = 3,
    /*! 250 microseconds.  */
    BCM56880_A0_LRD_ETRAP_CRITICAL_T_T_TIME_250US = 4,
    /*! 500 microseconds.  */
    BCM56880_A0_LRD_ETRAP_CRITICAL_T_T_TIME_500US = 5,
} bcm56880_a0_lrd_etrap_critical_t_t;

/*! enum type for ETRAP_HASH_SEL_T
 * LB hash function.
 */
typedef enum bcm56880_a0_lrd_etrap_hash_sel_t_e {
    /*! LB hash 0 instance 0.  */
    BCM56880_A0_LRD_ETRAP_HASH_SEL_T_T_HASH0_INSTANCE0 = 0,
    /*! LB hash 0 instance 1.  */
    BCM56880_A0_LRD_ETRAP_HASH_SEL_T_T_HASH0_INSTANCE1 = 1,
    /*! LB hash 1 instance 0.  */
    BCM56880_A0_LRD_ETRAP_HASH_SEL_T_T_HASH1_INSTANCE0 = 2,
    /*! LB hash 1 instance 1.  */
    BCM56880_A0_LRD_ETRAP_HASH_SEL_T_T_HASH1_INSTANCE1 = 3,
} bcm56880_a0_lrd_etrap_hash_sel_t_t;

/*! enum type for ETRAP_INTERVAL_T
 * Flow rate time interval.
 */
typedef enum bcm56880_a0_lrd_etrap_interval_t_e {
    /*! 1 millisecond.  */
    BCM56880_A0_LRD_ETRAP_INTERVAL_T_T_TIME_1MS = 0,
    /*! 2 milliseconds.  */
    BCM56880_A0_LRD_ETRAP_INTERVAL_T_T_TIME_2MS = 1,
    /*! 5 milliseconds.  */
    BCM56880_A0_LRD_ETRAP_INTERVAL_T_T_TIME_5MS = 2,
    /*! 10 milliseconds.  */
    BCM56880_A0_LRD_ETRAP_INTERVAL_T_T_TIME_10MS = 3,
} bcm56880_a0_lrd_etrap_interval_t_t;

/*! enum type for EVICTION_MODE_T
 * Eviction Mode
 */
typedef enum bcm56880_a0_lrd_eviction_mode_t_e {
    BCM56880_A0_LRD_EVICTION_MODE_T_T_DISABLE = 0,
    BCM56880_A0_LRD_EVICTION_MODE_T_T_RANDOM = 1,
    BCM56880_A0_LRD_EVICTION_MODE_T_T_THRESHOLD = 2,
    BCM56880_A0_LRD_EVICTION_MODE_T_T_CONDITIONAL = 3,
} bcm56880_a0_lrd_eviction_mode_t_t;

/*! enum type for FLEX_DIGEST_ALGORITHM_T
 * Load balance hash computation algorithm enumeration type.
 */
typedef enum bcm56880_a0_lrd_flex_digest_algorithm_t_e {
    /*!
     * 0000: Default value.
     *  0001: Reserved.
     *  0010: Reserved.
     */
    BCM56880_A0_LRD_FLEX_DIGEST_ALGORITHM_T_T_RESERVED = 0,
    /*! 0011: CRC16_BISYNC.  */
    BCM56880_A0_LRD_FLEX_DIGEST_ALGORITHM_T_T_CRC16_BISYNC = 3,
    /*! 0100: CRC16_BISYNC_AND_XOR1.  */
    BCM56880_A0_LRD_FLEX_DIGEST_ALGORITHM_T_T_CRC16_BISYNC_AND_XOR1 = 4,
    /*! 0101: CRC16_BISYNC_AND_XOR2.  */
    BCM56880_A0_LRD_FLEX_DIGEST_ALGORITHM_T_T_CRC16_BISYNC_AND_XOR2 = 5,
    /*! 0110: CRC16_BISYNC_AND_XOR4.  */
    BCM56880_A0_LRD_FLEX_DIGEST_ALGORITHM_T_T_CRC16_BISYNC_AND_XOR4 = 6,
    /*! 0111: CRC16_BISYNC_AND_XOR8.  */
    BCM56880_A0_LRD_FLEX_DIGEST_ALGORITHM_T_T_CRC16_BISYNC_AND_XOR8 = 7,
    /*! 1000: XOR16.  */
    BCM56880_A0_LRD_FLEX_DIGEST_ALGORITHM_T_T_XOR16 = 8,
    /*! 1001: CRC16_CCITT.  */
    BCM56880_A0_LRD_FLEX_DIGEST_ALGORITHM_T_T_CRC16_CCITT = 9,
    /*! 1010: CRC32_LO/CRC32_A_LO.  */
    BCM56880_A0_LRD_FLEX_DIGEST_ALGORITHM_T_T_CRC32_LO = 10,
    /*! 1011: CRC32_HI/CRC32_A_HI.  */
    BCM56880_A0_LRD_FLEX_DIGEST_ALGORITHM_T_T_CRC32_HI = 11,
    /*! 1100: CRC32_B_LO.  */
    BCM56880_A0_LRD_FLEX_DIGEST_ALGORITHM_T_T_CRC32_ETH_LO = 12,
    /*! 1101: CRC32_B_HI.  */
    BCM56880_A0_LRD_FLEX_DIGEST_ALGORITHM_T_T_CRC32_ETH_HI = 13,
    /*! 1110: CRC32_C_LO.  */
    BCM56880_A0_LRD_FLEX_DIGEST_ALGORITHM_T_T_CRC32_KOOPMAN_LO = 14,
    /*! 1111: CRC32_C_HI.  */
    BCM56880_A0_LRD_FLEX_DIGEST_ALGORITHM_T_T_CRC32_KOOPMAN_HI = 15,
} bcm56880_a0_lrd_flex_digest_algorithm_t_t;

/*! enum type for FLEX_QOS_EGR_BASE_INDEX_SOURCE_T
 * Flex QoS egress base index source selection enum.
 */
typedef enum bcm56880_a0_lrd_flex_qos_egr_base_index_source_t_e {
    /*! Flex QoS egress uses default base index.  */
    BCM56880_A0_LRD_FLEX_QOS_EGR_BASE_INDEX_SOURCE_T_T_FLEX_QOS_EGR_BASE_INDEX_DEFAULT = 0,
    /*! Flex QoS egress uses base index 0.  */
    BCM56880_A0_LRD_FLEX_QOS_EGR_BASE_INDEX_SOURCE_T_T_FLEX_QOS_EGR_BASE_INDEX_0 = 1,
    /*! Flex QoS egress uses base index 1.  */
    BCM56880_A0_LRD_FLEX_QOS_EGR_BASE_INDEX_SOURCE_T_T_FLEX_QOS_EGR_BASE_INDEX_1 = 2,
    /*! Flex QoS egress uses base index 2.  */
    BCM56880_A0_LRD_FLEX_QOS_EGR_BASE_INDEX_SOURCE_T_T_FLEX_QOS_EGR_BASE_INDEX_2 = 3,
    /*! Flex QoS egress uses base index 3.  */
    BCM56880_A0_LRD_FLEX_QOS_EGR_BASE_INDEX_SOURCE_T_T_FLEX_QOS_EGR_BASE_INDEX_3 = 4,
    /*! Flex QoS egress uses base index 4.  */
    BCM56880_A0_LRD_FLEX_QOS_EGR_BASE_INDEX_SOURCE_T_T_FLEX_QOS_EGR_BASE_INDEX_4 = 5,
    /*! Flex QoS egress uses base index 5.  */
    BCM56880_A0_LRD_FLEX_QOS_EGR_BASE_INDEX_SOURCE_T_T_FLEX_QOS_EGR_BASE_INDEX_5 = 6,
} bcm56880_a0_lrd_flex_qos_egr_base_index_source_t_t;

/*! enum type for FLEX_STATE_EGR_INSTANCE_T
 * Enhanced flex state instances.
 */
typedef enum bcm56880_a0_lrd_flex_state_egr_instance_t_e {
    /*! Ingress post lookup instance.  */
    BCM56880_A0_LRD_FLEX_STATE_EGR_INSTANCE_T_T_EGR_POST_LKUP_INST = 0,
    /*! Ingress post fowarding instance.  */
    BCM56880_A0_LRD_FLEX_STATE_EGR_INSTANCE_T_T_EGR_POST_FWD_INST = 1,
} bcm56880_a0_lrd_flex_state_egr_instance_t_t;

/*! enum type for L3_MTU_ADJUST_MODE_T
 * Action for the internal single outer-tagged packet's outgoing outer priority
 *  in the egress pipeline.
 */
typedef enum bcm56880_a0_lrd_l3_mtu_adjust_mode_t_e {
    /*! Adjust value be add to the incoming packet length.  */
    BCM56880_A0_LRD_L3_MTU_ADJUST_MODE_T_T_ADD = 0,
    /*! Adjust value be substracted from the incoming packet length.  */
    BCM56880_A0_LRD_L3_MTU_ADJUST_MODE_T_T_SUBSTRACT = 1,
} bcm56880_a0_lrd_l3_mtu_adjust_mode_t_t;

/*! enum type for LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T
 * The LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T enum declares a list of enumerators,
 *  in which each enumerator represents an input sub-field that can be selected
 *  as the source field for generating the HASH_FLOW_ID_SRC key field value.
 */
typedef enum bcm56880_a0_lrd_lb_hash_entropy_hash_flow_id_src_t_e {
    /*!
     * Use lower 8-bits of hash A0 input field as
     *  hash flow id key field value.
     */
    BCM56880_A0_LRD_LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T_T_HASH_A0_LO = 0,
    /*!
     * Use higher 8-bits of hash A0 input field as
     *  hash flow id key field value.
     */
    BCM56880_A0_LRD_LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T_T_HASH_A0_HI = 1,
    /*!
     * Use lower 8-bits of hash A1 input field as
     *  hash flow id key field value.
     */
    BCM56880_A0_LRD_LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T_T_HASH_A1_LO = 2,
    /*!
     * Use higher 8-bits of hash A1 input field as
     *  hash flow id key field value.
     */
    BCM56880_A0_LRD_LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T_T_HASH_A1_HI = 3,
    /*!
     * Use lower 8-bits of hash B0 input field as
     *  hash flow id key field value.
     */
    BCM56880_A0_LRD_LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T_T_HASH_B0_LO = 4,
    /*!
     * Use higher 8-bits of hash B0 input field as
     *  hash flow id key field value.
     */
    BCM56880_A0_LRD_LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T_T_HASH_B0_HI = 5,
    /*!
     * Use lower 8-bits of hash B1 input field as
     *  hash flow id key field value.
     */
    BCM56880_A0_LRD_LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T_T_HASH_B1_LO = 6,
    /*!
     * Use higher 8-bits of hash B1 input field as
     *  hash flow id key field value.
     */
    BCM56880_A0_LRD_LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T_T_HASH_B1_HI = 7,
    /*!
     * Use lower 8-bits of hash C0 input field as
     *  hash flow id key field value.
     */
    BCM56880_A0_LRD_LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T_T_HASH_C0_LO = 8,
    /*!
     * Use higher 8-bits of hash C0 input field as
     *  hash flow id key field value.
     */
    BCM56880_A0_LRD_LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T_T_HASH_C0_HI = 9,
    /*!
     * Use lower 8-bits of hash C1 input field as
     *  hash flow id key field value.
     */
    BCM56880_A0_LRD_LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T_T_HASH_C1_LO = 10,
    /*!
     * Use higher 8-bits of hash C1 input field as
     *  hash flow id key field value.
     */
    BCM56880_A0_LRD_LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T_T_HASH_C1_HI = 11,
    /*! Use hash index from the bus as hash flow id key field value.\n */
    BCM56880_A0_LRD_LB_HASH_ENTROPY_HASH_FLOW_ID_SRC_T_T_BUS_HASH_INDEX = 12,
} bcm56880_a0_lrd_lb_hash_entropy_hash_flow_id_src_t_t;

/*! enum type for LB_HASH_RESULT_SIZE_T
 * The LB_HASH_RESULT_SIZE_T enum declares a list of enumerators that can
 *  be used to specify the number of bits required in the final hash result
 *  value, the enumerated hash result size values range from 1-bit to 16-bit.
 */
typedef enum bcm56880_a0_lrd_lb_hash_result_size_t_e {
    /*! Hash result size is 1-bit.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_1BIT = 0,
    /*! Hash result size is 2-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_2BITS = 1,
    /*! Hash result size is 3-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_3BITS = 2,
    /*! Hash result size is 4-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_4BITS = 3,
    /*! Hash result size is 5-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_5BITS = 4,
    /*! Hash result size is 6-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_6BITS = 5,
    /*! Hash result size is 7-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_7BITS = 6,
    /*! Hash result size is 8-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_8BITS = 7,
    /*! Hash result size is 9-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_9BITS = 8,
    /*! Hash result size is 10-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_10BITS = 9,
    /*! Hash result size is 11-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_11BITS = 10,
    /*! Hash result size is 12-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_12BITS = 11,
    /*! Hash result size is 13-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_13BITS = 12,
    /*! Hash result size is 14-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_14BITS = 13,
    /*! Hash result size is 15-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_15BITS = 14,
    /*! Hash result size is 16-bits.  */
    BCM56880_A0_LRD_LB_HASH_RESULT_SIZE_T_T_RESULT_SIZE_16BITS = 15,
} bcm56880_a0_lrd_lb_hash_result_size_t_t;

/*! enum type for LB_HASH_SUBSET_SELECT_T
 * Load balancing hash subset selection.
 *  When concatenation mode is enabled,
 *  subset selection is 64 bits subfield from hash value.
 *  When concatenation mode is disabled,
 *  subset selection is 16 bits subfield from hash value.
 */
typedef enum bcm56880_a0_lrd_lb_hash_subset_select_t_e {
    /*!
     * If CONCAT = 1 select hash bins b1, b0, a1, a0.
     *  If CONCAT = 0 select hash bin a0.
     */
    BCM56880_A0_LRD_LB_HASH_SUBSET_SELECT_T_T_USE_0_0 = 0,
    /*!
     * If CONCAT = 1 select hash bins c1, c0, a1, a0.
     *  If CONCAT = 0 select hash bin a1.
     */
    BCM56880_A0_LRD_LB_HASH_SUBSET_SELECT_T_T_USE_1_0 = 1,
    /*!
     * If CONCAT = 1 select hash bins 32b0, c1, c0.
     *  If CONCAT = 0 select hash bin b0.
     */
    BCM56880_A0_LRD_LB_HASH_SUBSET_SELECT_T_T_USE_0_1 = 2,
    /*!
     * If CONCAT = 1 select hash bins c1, c0, b1, b0.
     *  If CONCAT = 0 select hash bin b1.
     */
    BCM56880_A0_LRD_LB_HASH_SUBSET_SELECT_T_T_USE_1_1 = 3,
    /*!
     * If CONCAT = 1 select hash bins 48b0,
     *  pipeline_digest_1.
     *  If CONCAT = 0 select hash bin c0.
     */
    BCM56880_A0_LRD_LB_HASH_SUBSET_SELECT_T_T_USE_0_2 = 4,
    /*!
     * If CONCAT = 1 select hash bins 48b0,
     *  pipeline_digest_2.
     *  If CONCAT = 0 select hash bin c1.
     */
    BCM56880_A0_LRD_LB_HASH_SUBSET_SELECT_T_T_USE_1_2 = 5,
    /*!
     * If CONCAT = 1 reserved.
     *  If CONCAT = 0 select hash pipeline_digest_1.
     */
    BCM56880_A0_LRD_LB_HASH_SUBSET_SELECT_T_T_USE_0_3 = 6,
    /*!
     * If CONCAT = 1 reserved.
     *  If CONCAT = 0 select hash pipeline_digest_2.
     */
    BCM56880_A0_LRD_LB_HASH_SUBSET_SELECT_T_T_USE_1_3 = 7,
} bcm56880_a0_lrd_lb_hash_subset_select_t_t;

/*! enum type for MASK_ACTION_T
 * Mask action enumeration.
 */
typedef enum bcm56880_a0_lrd_mask_action_t_e {
    /*! AND operation.  */
    BCM56880_A0_LRD_MASK_ACTION_T_T_AND = 0,
    /*! OR operation.  */
    BCM56880_A0_LRD_MASK_ACTION_T_T_OR = 1,
} bcm56880_a0_lrd_mask_action_t_t;

/*! enum type for MASK_TARGET_T
 * Mask target enumeration.
 */
typedef enum bcm56880_a0_lrd_mask_target_t_e {
    /*! Block mask action only applies on destination L2 bitmap.  */
    BCM56880_A0_LRD_MASK_TARGET_T_T_L2_MEMBER = 0,
    /*! Block mask action only applies on destination L3 bitmap.  */
    BCM56880_A0_LRD_MASK_TARGET_T_T_L3_MEMBER = 1,
    /*! Block mask action applies on both destination L3 and L2 bitmaps.  */
    BCM56880_A0_LRD_MASK_TARGET_T_T_L2_L3_MEMBER = 2,
} bcm56880_a0_lrd_mask_target_t_t;

/*! enum type for MIRROR_ENCAP_MODE_T
 * Enumeration of mirror encap mode.
 */
typedef enum bcm56880_a0_lrd_mirror_encap_mode_t_e {
    /*!
     * Insert generic loopback header for non-encap mirroring packet to
     *  loopback port.
     *  MIRROR_EDIT_CTRL_ID  = 0x8b
     */
    BCM56880_A0_LRD_MIRROR_ENCAP_MODE_T_T_NO_ENCAP_LOOPBACK = 0,
    /*!
     * Insert generic loopback header for 1st PASS packet of IFA 2.0 to
     *  loopback port.
     *  MIRROR_EDIT_CTRL_ID  = 0xc2
     */
    BCM56880_A0_LRD_MIRROR_ENCAP_MODE_T_T_ENCAP_IFA_LOOPBACK = 1,
} bcm56880_a0_lrd_mirror_encap_mode_t_t;

/*! enum type for MIRROR_METADATA_T
 * Mirror metadata used in sampled flow (sFlow) encapsulation header with
 *  sequence numbering and in packet sampling (PSAMP) encapsulation header
 *  with metadata.
 */
typedef enum bcm56880_a0_lrd_mirror_metadata_t_e {
    /*! Metadata field is written with zeroes.  */
    BCM56880_A0_LRD_MIRROR_METADATA_T_T_ZEROES = 0,
    /*! Metadata field is written with value from METADATA.  */
    BCM56880_A0_LRD_MIRROR_METADATA_T_T_TABLE_METADATA = 1,
} bcm56880_a0_lrd_mirror_metadata_t_t;

/*! enum type for MIRROR_SAMPLE_MODE_T
 * Enumeration of mirror control for sampled packe.
 */
typedef enum bcm56880_a0_lrd_mirror_sample_mode_t_e {
    /*! Do not modify mirror container.  */
    BCM56880_A0_LRD_MIRROR_SAMPLE_MODE_T_T_DO_NOT_MODIFY = 0,
    /*! Modify mirror container if sampler is above threshold.  */
    BCM56880_A0_LRD_MIRROR_SAMPLE_MODE_T_T_SAMPLER_IS_ABOVE_RATE = 1,
    /*! Modify mirror container if sampler is below threshold.   */
    BCM56880_A0_LRD_MIRROR_SAMPLE_MODE_T_T_SAMPLER_IS_BELOW_RATE = 2,
} bcm56880_a0_lrd_mirror_sample_mode_t_t;

/*! enum type for MIRROR_TRUNCATE_ACTION_T
 * Mirror truncation actions.
 */
typedef enum bcm56880_a0_lrd_mirror_truncate_action_t_e {
    /*!
     * Truncate the mirror copy to 1 cell with modified cell length, as first
     *  max cell size(190) plus encap header size.
     */
    BCM56880_A0_LRD_MIRROR_TRUNCATE_ACTION_T_T_TRUNCATE = 0,
    /*!
     * Truncate the mirror copy to the length with all parsable and encap
     *  headers plus adjustment.
     */
    BCM56880_A0_LRD_MIRROR_TRUNCATE_ACTION_T_T_TRUNCATE_ADJUST = 1,
} bcm56880_a0_lrd_mirror_truncate_action_t_t;

/*! enum type for MIRROR_VXLAN_T
 * Source of VNID in Virtual eXtensible Local Area Network (VXLAN) header.
 */
typedef enum bcm56880_a0_lrd_mirror_vxlan_t_e {
    /*!
     * VNID is written with value from Virtual Forwarding Instance(VFI)
     *  attributes table.
     */
    BCM56880_A0_LRD_MIRROR_VXLAN_T_T_EGR_VFI = 0,
    /*!
     * VNID is written with value from VXLAN_VNID of MIRROR_ENCAP_VXLAN or
     *  MIRROR_ENCAP_VXLAN_IPV6.
     */
    BCM56880_A0_LRD_MIRROR_VXLAN_T_T_TABLE_VXLAN = 1,
} bcm56880_a0_lrd_mirror_vxlan_t_t;

/*! enum type for MON_INBAND_TELEMETRY_EXPORT_ELEMENT_TYPE_T
 * Inband Telemetry export element types.
 */
typedef enum bcm56880_a0_lrd_mon_inband_telemetry_export_element_type_t_e {
    /*! IFA headers in the received packet.  */
    BCM56880_A0_LRD_MON_INBAND_TELEMETRY_EXPORT_ELEMENT_TYPE_T_T_IFA_HEADERS = 0,
    /*! The IFA metadata stack in the received packet.  */
    BCM56880_A0_LRD_MON_INBAND_TELEMETRY_EXPORT_ELEMENT_TYPE_T_T_IFA_METADATA_STACK = 1,
    /*! The received packet with the IFA data stripped off.  */
    BCM56880_A0_LRD_MON_INBAND_TELEMETRY_EXPORT_ELEMENT_TYPE_T_T_RX_PKT_NO_IFA = 2,
} bcm56880_a0_lrd_mon_inband_telemetry_export_element_type_t_t;

/*! enum type for MPLS_EXP_POLICY_SEL_T
 * Enumerations for MPLS EXP policy selection.
 */
typedef enum bcm56880_a0_lrd_mpls_exp_policy_sel_t_e {
    /*! Don`t use MPLS EXP policy.  */
    BCM56880_A0_LRD_MPLS_EXP_POLICY_SEL_T_T_SEL_MPLS_EXP_POLICY_NONE = 0,
    /*! Use MPLS EXP policy from MPLS_ENTRY_1.  */
    BCM56880_A0_LRD_MPLS_EXP_POLICY_SEL_T_T_SEL_MPLS_EXP_LOOKUP_1 = 1,
    /*! Use MPLS EXP policy from MPLS_ENTRY_2.  */
    BCM56880_A0_LRD_MPLS_EXP_POLICY_SEL_T_T_SEL_MPLS_EXP_LOOKUP_2 = 2,
    /*! Use MPLS EXP policy from MPLS_ENTRY_3.  */
    BCM56880_A0_LRD_MPLS_EXP_POLICY_SEL_T_T_SEL_MPLS_EXP_LOOKUP_3 = 3,
} bcm56880_a0_lrd_mpls_exp_policy_sel_t_t;

/*! enum type for PC_ABILITY_TYPE_T
 * \brief port abilities types.
 */
typedef enum bcm56880_a0_lrd_pc_ability_type_t_e {
    /*!
     * Local ability reflects the port capabilities
     *  on the local device, such as speed, number of lanes,
     *  FEC type, Pause.
     */
    BCM56880_A0_LRD_PC_ABILITY_TYPE_T_T_PC_ABILITY_LOCAL = 0,
    /*!
     * Advert ability is used for the port to advertise its
     *  operational abilities.
     */
    BCM56880_A0_LRD_PC_ABILITY_TYPE_T_T_PC_ABILITY_ADVERT = 1,
} bcm56880_a0_lrd_pc_ability_type_t_t;

/*! enum type for PC_PM_MODE_T
 * \brief PM mode supported.
 */
typedef enum bcm56880_a0_lrd_pc_pm_mode_t_e {
    /*! Default mode.  */
    BCM56880_A0_LRD_PC_PM_MODE_T_T_PC_PM_MODE_DEFAULT = 0,
} bcm56880_a0_lrd_pc_pm_mode_t_t;

/*! enum type for PC_PM_PLL_VCO_RATE_T
 * \brief Available port macro PLL VCO rates.
 */
typedef enum bcm56880_a0_lrd_pc_pm_pll_vco_rate_t_e {
    /*! No PLL configured.  */
    BCM56880_A0_LRD_PC_PM_PLL_VCO_RATE_T_T_PC_PM_PLL_VCO_RATE_NONE = 0,
    /*! PLL VCO rate is 10.3125G.  */
    BCM56880_A0_LRD_PC_PM_PLL_VCO_RATE_T_T_PC_PM_PLL_VCO_RATE_10P3125G = 1,
    /*! PLL VCO rate is 12.5G.  */
    BCM56880_A0_LRD_PC_PM_PLL_VCO_RATE_T_T_PC_PM_PLL_VCO_RATE_12P5G = 2,
    /*! PLL VCO rate is 20.625G.  */
    BCM56880_A0_LRD_PC_PM_PLL_VCO_RATE_T_T_PC_PM_PLL_VCO_RATE_20P625G = 3,
    /*! PLL VCO rate is 25.781G.  */
    BCM56880_A0_LRD_PC_PM_PLL_VCO_RATE_T_T_PC_PM_PLL_VCO_RATE_25P781G = 4,
    /*! PLL VCO rate is 26.562G.  */
    BCM56880_A0_LRD_PC_PM_PLL_VCO_RATE_T_T_PC_PM_PLL_VCO_RATE_26P562G = 5,
} bcm56880_a0_lrd_pc_pm_pll_vco_rate_t_t;

/*! enum type for PFC_DEADLOCK_RECOVERY_ACTION_T
 * Enum definition for PFC deadlock recovery action specified
 *  by the field TM_PFC_DEADLOCK_RECOVERY_CONTROL.ACTION
 */
typedef enum bcm56880_a0_lrd_pfc_deadlock_recovery_action_t_e {
    /*! Transmit all packets on deadlock recovery.  */
    BCM56880_A0_LRD_PFC_DEADLOCK_RECOVERY_ACTION_T_T_TRANSMIT = 0,
    /*! Discard all packets on deadlock recovery.  */
    BCM56880_A0_LRD_PFC_DEADLOCK_RECOVERY_ACTION_T_T_DISCARD = 1,
} bcm56880_a0_lrd_pfc_deadlock_recovery_action_t_t;

/*! enum type for PKT_PRI_TYPE_T
 * Priority selection based on packet types.
 */
typedef enum bcm56880_a0_lrd_pkt_pri_type_t_e {
    /*!
     * Packet priority from VLAN header.
     *  Maximum value for PKT_PRI is 7.
     */
    BCM56880_A0_LRD_PKT_PRI_TYPE_T_T_PKT_PRI_TYPE_VLAN = 0,
    /*!
     * Packet priority from DSCP.
     *  Maximum value for PKT_PRI is 63.
     */
    BCM56880_A0_LRD_PKT_PRI_TYPE_T_T_PKT_PRI_TYPE_DSCP = 1,
    /*!
     * Packet priority from MPLS header.
     *  Maximum value for PKT_PRI is 7.
     */
    BCM56880_A0_LRD_PKT_PRI_TYPE_T_T_PKT_PRI_TYPE_MPLS = 2,
    /*!
     * Packet priority from PE ETAG header.
     *  Maximum value for PKT_PRI is 7.
     */
    BCM56880_A0_LRD_PKT_PRI_TYPE_T_T_PKT_PRI_TYPE_ETAG = 3,
    /*!
     * Packet priority from HIGIG3 header.
     *  Maximum value for PKT_PRI is 64.
     *  Index using {2 bit CNG, 4 bit TC}.
     */
    BCM56880_A0_LRD_PKT_PRI_TYPE_T_T_PKT_PRI_TYPE_HIGIG3 = 4,
} bcm56880_a0_lrd_pkt_pri_type_t_t;

/*! enum type for POLICY_SEL_T
 * Commands and objects selection for policy lookup results.
 */
typedef enum bcm56880_a0_lrd_policy_sel_t_e {
    /*! Select lookup 1 result.  */
    BCM56880_A0_LRD_POLICY_SEL_T_T_SEL_LOOKUP_1 = 0,
    /*! Select lookup 2 result.  */
    BCM56880_A0_LRD_POLICY_SEL_T_T_SEL_LOOKUP_2 = 1,
    /*! Select lookup 3 result.  */
    BCM56880_A0_LRD_POLICY_SEL_T_T_SEL_LOOKUP_3 = 2,
} bcm56880_a0_lrd_policy_sel_t_t;

/*! enum type for PORT_SYSTEM_DESTINATION_INDEX_SELECT_T
 * Defines the index selection options for PORT_SYSTEM_DESTINATION table.
 *  Each option specifies the range of 12 bits to be used for the index
 *  formation using the PORT_SYSTEM_ID(system port) which is 16 bit wide.
 */
typedef enum bcm56880_a0_lrd_port_system_destination_index_select_t_e {
    /*! Use system port [11:0] bits.  */
    BCM56880_A0_LRD_PORT_SYSTEM_DESTINATION_INDEX_SELECT_T_T_PORT_SYSTEM_11_0 = 0,
    /*! Use system port bits [12:8] to and [6:0].  */
    BCM56880_A0_LRD_PORT_SYSTEM_DESTINATION_INDEX_SELECT_T_T_PORT_SYSTEM_12_8_TO_AND_6_0 = 1,
    /*! Use system port bits [13:8] to and [5:0].  */
    BCM56880_A0_LRD_PORT_SYSTEM_DESTINATION_INDEX_SELECT_T_T_PORT_SYSTEM_13_8_TO_AND_5_0 = 2,
} bcm56880_a0_lrd_port_system_destination_index_select_t_t;

/*! enum type for SER_BLK_KEY_TYPE_T
 * SER block key type. An application uses these
 *  enum values as lookup key for SER_STATS. If an application
 *  is not concerned with specific block types,
 *  SER_BLK_ALL can be used as the lookup key for SER_STATS.
 */
typedef enum bcm56880_a0_lrd_ser_blk_key_type_t_e {
    /*! All block types.  */
    BCM56880_A0_LRD_SER_BLK_KEY_TYPE_T_T_SER_BLK_ALL = 0,
    /*! Memory Management Unit.  */
    BCM56880_A0_LRD_SER_BLK_KEY_TYPE_T_T_SER_BLK_MMU = 1,
    /*! Ingress pipeline.  */
    BCM56880_A0_LRD_SER_BLK_KEY_TYPE_T_T_SER_BLK_IPIPE = 2,
    /*! Egress pipeline.  */
    BCM56880_A0_LRD_SER_BLK_KEY_TYPE_T_T_SER_BLK_EPIPE = 3,
    /*! Packet gateWay.  */
    BCM56880_A0_LRD_SER_BLK_KEY_TYPE_T_T_SER_BLK_PGW = 4,
    /*! PORT.  */
    BCM56880_A0_LRD_SER_BLK_KEY_TYPE_T_T_SER_BLK_PORT = 5,
} bcm56880_a0_lrd_ser_blk_key_type_t_t;

/*! enum type for SER_BLK_TYPE_T
 * SER block type.
 */
typedef enum bcm56880_a0_lrd_ser_blk_type_t_e {
    /*! Memory Management Unit.  */
    BCM56880_A0_LRD_SER_BLK_TYPE_T_T_SER_BLK_MMU = 1,
    /*! Ingress pipeline.  */
    BCM56880_A0_LRD_SER_BLK_TYPE_T_T_SER_BLK_IPIPE = 2,
    /*! Egress pipeline.  */
    BCM56880_A0_LRD_SER_BLK_TYPE_T_T_SER_BLK_EPIPE = 3,
    /*! Packet gateWay.  */
    BCM56880_A0_LRD_SER_BLK_TYPE_T_T_SER_BLK_PGW = 4,
    /*! PORT.  */
    BCM56880_A0_LRD_SER_BLK_TYPE_T_T_SER_BLK_PORT = 5,
} bcm56880_a0_lrd_ser_blk_type_t_t;

/*! enum type for SER_CHECK_TYPE_T
 * SER check type.
 */
typedef enum bcm56880_a0_lrd_ser_check_type_t_e {
    /*! No SER check  */
    BCM56880_A0_LRD_SER_CHECK_TYPE_T_T_SER_NO_CHECK = 0,
    /*! Parity check  */
    BCM56880_A0_LRD_SER_CHECK_TYPE_T_T_SER_PARITY_CHECK = 1,
    /*! ECC check  */
    BCM56880_A0_LRD_SER_CHECK_TYPE_T_T_SER_ECC_CHECK = 2,
} bcm56880_a0_lrd_ser_check_type_t_t;

/*! enum type for SER_ERROR_BIT_NUM_T
 * Used to determine whether to insert single bit error or
 *  insert double bit error.
 */
typedef enum bcm56880_a0_lrd_ser_error_bit_num_t_e {
    BCM56880_A0_LRD_SER_ERROR_BIT_NUM_T_T_SER_SINGLE_BIT_ERR = 0,
    BCM56880_A0_LRD_SER_ERROR_BIT_NUM_T_T_SER_DOUBLE_BIT_ERR = 1,
} bcm56880_a0_lrd_ser_error_bit_num_t_t;

/*! enum type for SER_ERROR_TYPE_T
 * SER error type.
 */
typedef enum bcm56880_a0_lrd_ser_error_type_t_e {
    /*! Parity error.  */
    BCM56880_A0_LRD_SER_ERROR_TYPE_T_T_SER_ERR_PARITY = 0,
    /*! ECC 1bit error.  */
    BCM56880_A0_LRD_SER_ERROR_TYPE_T_T_SER_ERR_ECC_1BIT = 1,
    /*! ECC 2bit error.  */
    BCM56880_A0_LRD_SER_ERROR_TYPE_T_T_SER_ERR_ECC_2BIT = 2,
} bcm56880_a0_lrd_ser_error_type_t_t;

/*! enum type for SER_INSTRUCTION_TYPE_T
 * SER instruction type.
 */
typedef enum bcm56880_a0_lrd_ser_instruction_type_t_e {
    /*! EP/IP: SER error in Start-Of-Packet(SOP) cell.  */
    BCM56880_A0_LRD_SER_INSTRUCTION_TYPE_T_T_SER_INSTRUCTION_SOP = 0,
    /*! EP/IP: SER error in Middle-Of-Packet(MOP) cell.  */
    BCM56880_A0_LRD_SER_INSTRUCTION_TYPE_T_T_SER_INSTRUCTION_MOP = 1,
    /*! EP/IP: SER error in End-Of-Packet(EOP) cell.  */
    BCM56880_A0_LRD_SER_INSTRUCTION_TYPE_T_T_SER_INSTRUCTION_EOP = 2,
    /*! EP/IP: SER error in sbus transaction.  */
    BCM56880_A0_LRD_SER_INSTRUCTION_TYPE_T_T_SER_INSTRUCTION_SBUS = 3,
    /*! EP/IP: SER error in other transaction - refresh, aging etc.  */
    BCM56880_A0_LRD_SER_INSTRUCTION_TYPE_T_T_SER_INSTRUCTION_OTHER = 4,
    /*! MMU: SER error in MMU transaction.  */
    BCM56880_A0_LRD_SER_INSTRUCTION_TYPE_T_T_SER_INSTRUCTION_MMU = 5,
    /*! PORT: SER error in PORT transaction.  */
    BCM56880_A0_LRD_SER_INSTRUCTION_TYPE_T_T_SER_INSTRUCTION_PORT = 6,
} bcm56880_a0_lrd_ser_instruction_type_t_t;

/*! enum type for SER_MEM_SCAN_MODE_T
 * SER memory scan mode.
 */
typedef enum bcm56880_a0_lrd_ser_mem_scan_mode_t_e {
    /*! Disable.  */
    BCM56880_A0_LRD_SER_MEM_SCAN_MODE_T_T_DISABLE = 0,
    /*! Enable default scan mode.  */
    BCM56880_A0_LRD_SER_MEM_SCAN_MODE_T_T_ENABLE_DEFAULT_SCAN = 1,
    /*! Enable software scan mode.  */
    BCM56880_A0_LRD_SER_MEM_SCAN_MODE_T_T_ENABLE_SW_SCAN = 2,
    /*! Enable hardware scan mode.  */
    BCM56880_A0_LRD_SER_MEM_SCAN_MODE_T_T_ENABLE_HW_SCAN = 3,
} bcm56880_a0_lrd_ser_mem_scan_mode_t_t;

/*! enum type for SER_MEM_SCAN_STATUS_T
 * SER memory scan status.
 */
typedef enum bcm56880_a0_lrd_ser_mem_scan_status_t_e {
    /*! Disable.  */
    BCM56880_A0_LRD_SER_MEM_SCAN_STATUS_T_T_DISABLE = 0,
    /*! Using software scan mode.  */
    BCM56880_A0_LRD_SER_MEM_SCAN_STATUS_T_T_USING_SW_SCAN = 1,
    /*! Using hardware scan mode.  */
    BCM56880_A0_LRD_SER_MEM_SCAN_STATUS_T_T_USING_HW_SCAN = 2,
} bcm56880_a0_lrd_ser_mem_scan_status_t_t;

/*! enum type for SER_RECOVERY_KEY_TYPE_T
 * SER recovery key type. An application uses these
 *  enum values as the lookup key for SER_STATS. If an application
 *  is not concerned with specific recovery types,
 *  SER_RECOVERY_ALL can be used as the lookup key for SER_STATS.
 */
typedef enum bcm56880_a0_lrd_ser_recovery_key_type_t_e {
    /*! All recovery types.  */
    BCM56880_A0_LRD_SER_RECOVERY_KEY_TYPE_T_T_SER_RECOVERY_ALL = 0,
    /*! Correct SER error entry with cache data  */
    BCM56880_A0_LRD_SER_RECOVERY_KEY_TYPE_T_T_SER_RECOVERY_CACHE_RESTORE = 1,
    /*! Clear SER error entry.  */
    BCM56880_A0_LRD_SER_RECOVERY_KEY_TYPE_T_T_SER_RECOVERY_ENTRY_CLEAR = 2,
    /*! Do not handle SER error.  */
    BCM56880_A0_LRD_SER_RECOVERY_KEY_TYPE_T_T_SER_RECOVERY_NO_OPERATION = 3,
} bcm56880_a0_lrd_ser_recovery_key_type_t_t;

/*! enum type for SER_RECOVERY_TYPE_T
 * SER recovery type.
 */
typedef enum bcm56880_a0_lrd_ser_recovery_type_t_e {
    /*! Correct SER error entry with cache data  */
    BCM56880_A0_LRD_SER_RECOVERY_TYPE_T_T_SER_RECOVERY_CACHE_RESTORE = 1,
    /*! Clear SER error entry.  */
    BCM56880_A0_LRD_SER_RECOVERY_TYPE_T_T_SER_RECOVERY_ENTRY_CLEAR = 2,
    /*! Do not handle SER error.  */
    BCM56880_A0_LRD_SER_RECOVERY_TYPE_T_T_SER_RECOVERY_NO_OPERATION = 3,
} bcm56880_a0_lrd_ser_recovery_type_t_t;

/*! enum type for SER_VALIDATE_TYPE_T
 * Used to determine whether an validation is necessary.
 */
typedef enum bcm56880_a0_lrd_ser_validate_type_t_e {
    BCM56880_A0_LRD_SER_VALIDATE_TYPE_T_T_SER_VALIDATION = 0,
    BCM56880_A0_LRD_SER_VALIDATE_TYPE_T_T_SER_NO_VALIDATION = 1,
} bcm56880_a0_lrd_ser_validate_type_t_t;

/*! enum type for STG_STATE_T
 * Spanning tree group state type.
 */
typedef enum bcm56880_a0_lrd_stg_state_t_e {
    /*! Disabled state.  */
    BCM56880_A0_LRD_STG_STATE_T_T_DISABLE = 0,
    /*! Blocking state.  */
    BCM56880_A0_LRD_STG_STATE_T_T_BLOCK = 1,
    /*! Listening state.  */
    BCM56880_A0_LRD_STG_STATE_T_T_LEARN = 2,
    /*! Forwarding state.  */
    BCM56880_A0_LRD_STG_STATE_T_T_FORWARD = 3,
} bcm56880_a0_lrd_stg_state_t_t;

/*! enum type for SYNCE_CLK_DIVISOR_T */
typedef enum bcm56880_a0_lrd_synce_clk_divisor_t_e {
    BCM56880_A0_LRD_SYNCE_CLK_DIVISOR_T_T_DIVIDE_BY_1 = 0,
    BCM56880_A0_LRD_SYNCE_CLK_DIVISOR_T_T_DIVIDE_BY_5 = 1,
    BCM56880_A0_LRD_SYNCE_CLK_DIVISOR_T_T_DIVIDE_BY_10 = 2,
    BCM56880_A0_LRD_SYNCE_CLK_DIVISOR_T_T_DIVIDE_BY_2 = 3,
} bcm56880_a0_lrd_synce_clk_divisor_t_t;

/*! enum type for SYNCE_CLK_TYPE_T */
typedef enum bcm56880_a0_lrd_synce_clk_type_t_e {
    BCM56880_A0_LRD_SYNCE_CLK_TYPE_T_T_CLK_PRIMARY = 0,
    BCM56880_A0_LRD_SYNCE_CLK_TYPE_T_T_CLK_BACKUP = 1,
} bcm56880_a0_lrd_synce_clk_type_t_t;

/*! enum type for TM_CPU_SCHED_NODE_T
 * TM CPU Scheduler Nodes.
 */
typedef enum bcm56880_a0_lrd_tm_cpu_sched_node_t_e {
    /*! COS Level scheduling node.  */
    BCM56880_A0_LRD_TM_CPU_SCHED_NODE_T_T_L0_SCHED_NODE = 0,
    /*! Scheduler level multicast queue.  */
    BCM56880_A0_LRD_TM_CPU_SCHED_NODE_T_T_L1_SCHED_NODE_MC = 2,
} bcm56880_a0_lrd_tm_cpu_sched_node_t_t;

/*! enum type for TM_CUT_THROUGH_CLASS_T
 * Cut-through traffic class types.
 */
typedef enum bcm56880_a0_lrd_tm_cut_through_class_t_e {
    /*! Store and forward mode.  */
    BCM56880_A0_LRD_TM_CUT_THROUGH_CLASS_T_T_SAF_MODE = 0,
    /*! Cut-through class 10G.  */
    BCM56880_A0_LRD_TM_CUT_THROUGH_CLASS_T_T_CUT_THROUGH_CLASS_10G = 1,
    /*! Cut-through class 25G.  */
    BCM56880_A0_LRD_TM_CUT_THROUGH_CLASS_T_T_CUT_THROUGH_CLASS_25G = 2,
    /*! Cut-through class 40G.  */
    BCM56880_A0_LRD_TM_CUT_THROUGH_CLASS_T_T_CUT_THROUGH_CLASS_40G = 3,
    /*! Cut-through class 50G.  */
    BCM56880_A0_LRD_TM_CUT_THROUGH_CLASS_T_T_CUT_THROUGH_CLASS_50G = 4,
    /*! Cut-through class 100G.  */
    BCM56880_A0_LRD_TM_CUT_THROUGH_CLASS_T_T_CUT_THROUGH_CLASS_100G = 5,
    /*! Cut-through class 200G.  */
    BCM56880_A0_LRD_TM_CUT_THROUGH_CLASS_T_T_CUT_THROUGH_CLASS_200G = 6,
    /*! Cut-through class 400G.  */
    BCM56880_A0_LRD_TM_CUT_THROUGH_CLASS_T_T_CUT_THROUGH_CLASS_400G = 7,
} bcm56880_a0_lrd_tm_cut_through_class_t_t;

/*! enum type for TM_ING_THD_MIN_T
 * Traffic manager ingress buffer threshold minimum guarantee mode enum
 *  definition.
 */
typedef enum bcm56880_a0_lrd_tm_ing_thd_min_t_e {
    /*! Use priority group minimum threshold.  */
    BCM56880_A0_LRD_TM_ING_THD_MIN_T_T_USE_PRI_GRP_MIN = 0,
    /*! Use port service pool minimum threshold.  */
    BCM56880_A0_LRD_TM_ING_THD_MIN_T_T_USE_PORT_SERVICE_POOL_MIN = 1,
} bcm56880_a0_lrd_tm_ing_thd_min_t_t;

/*! enum type for TM_PERCENTAGE_VALUE_T
 * XGS TM percentage value.
 */
typedef enum bcm56880_a0_lrd_tm_percentage_value_t_e {
    /*! 100%.  */
    BCM56880_A0_LRD_TM_PERCENTAGE_VALUE_T_T_PERCENTAGE_1000 = 0,
    /*! 12.5%.  */
    BCM56880_A0_LRD_TM_PERCENTAGE_VALUE_T_T_PERCENTAGE_125 = 1,
    /*! 25%.  */
    BCM56880_A0_LRD_TM_PERCENTAGE_VALUE_T_T_PERCENTAGE_250 = 2,
    /*! 37.5%.  */
    BCM56880_A0_LRD_TM_PERCENTAGE_VALUE_T_T_PERCENTAGE_375 = 3,
    /*! 50%.  */
    BCM56880_A0_LRD_TM_PERCENTAGE_VALUE_T_T_PERCENTAGE_500 = 4,
    /*! 67.5%.  */
    BCM56880_A0_LRD_TM_PERCENTAGE_VALUE_T_T_PERCENTAGE_675 = 5,
    /*! 75%.  */
    BCM56880_A0_LRD_TM_PERCENTAGE_VALUE_T_T_PERCENTAGE_750 = 6,
    /*! 87.5%.  */
    BCM56880_A0_LRD_TM_PERCENTAGE_VALUE_T_T_PERCENTAGE_875 = 7,
} bcm56880_a0_lrd_tm_percentage_value_t_t;

/*! enum type for TM_PFC_DEADLOCK_DETECTION_TIMER_UNIT_T
 * Enum definition for the supported time unit (tick) values for the deadlock
 *  detection countdown timer, specified by
 *  TM_PFC_DEADLOCK_RECOVERY.DETECTION_TIMER_GRANULARITY
 */
typedef enum bcm56880_a0_lrd_tm_pfc_deadlock_detection_timer_unit_t_e {
    /*! 1 millisecond timer tick unit.  */
    BCM56880_A0_LRD_TM_PFC_DEADLOCK_DETECTION_TIMER_UNIT_T_T_TIME_1_MS = 0,
    /*! 10 milliseconds timer tick unit.  */
    BCM56880_A0_LRD_TM_PFC_DEADLOCK_DETECTION_TIMER_UNIT_T_T_TIME_10_MS = 1,
    /*! 100 milliseconds timer tick unit.  */
    BCM56880_A0_LRD_TM_PFC_DEADLOCK_DETECTION_TIMER_UNIT_T_T_TIME_100_MS = 2,
} bcm56880_a0_lrd_tm_pfc_deadlock_detection_timer_unit_t_t;

/*! enum type for TM_SCHED_MODE_T
 * Traffic manager Node scheduling mode
 */
typedef enum bcm56880_a0_lrd_tm_sched_mode_t_e {
    /*! Strict Priority scheduling mode.  */
    BCM56880_A0_LRD_TM_SCHED_MODE_T_T_SP = 0,
    /*! Round Robin Scheduling mode.  */
    BCM56880_A0_LRD_TM_SCHED_MODE_T_T_RR = 1,
} bcm56880_a0_lrd_tm_sched_mode_t_t;

/*! enum type for TM_SCHED_NODE_T
 * TM Scheduler Nodes.
 */
typedef enum bcm56880_a0_lrd_tm_sched_node_t_e {
    /*! COS Level scheduling node.  */
    BCM56880_A0_LRD_TM_SCHED_NODE_T_T_L0_SCHED_NODE = 0,
    /*! Scheduler level unicast queue.  */
    BCM56880_A0_LRD_TM_SCHED_NODE_T_T_L1_SCHED_NODE_UC = 1,
    /*! Scheduler level multicast queue.  */
    BCM56880_A0_LRD_TM_SCHED_NODE_T_T_L1_SCHED_NODE_MC = 2,
} bcm56880_a0_lrd_tm_sched_node_t_t;

/*! enum type for TM_THD_ALPHA_VALUE_T
 * XGS TM Alpha value.
 */
typedef enum bcm56880_a0_lrd_tm_thd_alpha_value_t_e {
    /*! 1/128.  */
    BCM56880_A0_LRD_TM_THD_ALPHA_VALUE_T_T_ALPHA_1_128 = 0,
    /*! 1/64.  */
    BCM56880_A0_LRD_TM_THD_ALPHA_VALUE_T_T_ALPHA_1_64 = 1,
    /*! 1/32.  */
    BCM56880_A0_LRD_TM_THD_ALPHA_VALUE_T_T_ALPHA_1_32 = 2,
    /*! 1/16.  */
    BCM56880_A0_LRD_TM_THD_ALPHA_VALUE_T_T_ALPHA_1_16 = 3,
    /*! 1/8.  */
    BCM56880_A0_LRD_TM_THD_ALPHA_VALUE_T_T_ALPHA_1_8 = 4,
    /*! 1/4.  */
    BCM56880_A0_LRD_TM_THD_ALPHA_VALUE_T_T_ALPHA_1_4 = 5,
    /*! 1/2.  */
    BCM56880_A0_LRD_TM_THD_ALPHA_VALUE_T_T_ALPHA_1_2 = 6,
    /*! 1.  */
    BCM56880_A0_LRD_TM_THD_ALPHA_VALUE_T_T_ALPHA_1 = 7,
    /*! 2.  */
    BCM56880_A0_LRD_TM_THD_ALPHA_VALUE_T_T_ALPHA_2 = 8,
    /*! 4.  */
    BCM56880_A0_LRD_TM_THD_ALPHA_VALUE_T_T_ALPHA_4 = 9,
    /*! 8.  */
    BCM56880_A0_LRD_TM_THD_ALPHA_VALUE_T_T_ALPHA_8 = 10,
} bcm56880_a0_lrd_tm_thd_alpha_value_t_t;

/*! enum type for TM_THD_MODE_T
 * XGS TM threshold MMU mode
 */
typedef enum bcm56880_a0_lrd_tm_thd_mode_t_e {
    /*! Entire TM buffers operate in lossy mode.  */
    BCM56880_A0_LRD_TM_THD_MODE_T_T_LOSSY = 0,
    /*! Entire TM buffers operate in lossless mode.  */
    BCM56880_A0_LRD_TM_THD_MODE_T_T_LOSSLESS = 1,
    /*!
     * TM buffers operate in either lossy mode or lossless mode.
     *  The mode selection is based on the priority group assigned and
     *  whether the priority group is lossless or lossy.
     */
    BCM56880_A0_LRD_TM_THD_MODE_T_T_LOSSY_AND_LOSSLESS = 2,
} bcm56880_a0_lrd_tm_thd_mode_t_t;

/*! enum type for TM_WRED_DROP_PERCENTAGE_T
 * WRED drop percentage.
 */
typedef enum bcm56880_a0_lrd_tm_wred_drop_percentage_t_e {
    /*! Zero drop rate.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_0 = 0,
    /*! Drop rate 1%.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_1 = 1,
    /*! Drop rate 2%.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_2 = 2,
    /*! Drop rate 3%.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_3 = 3,
    /*! Drop rate 4%.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_4 = 4,
    /*! Drop rate 5%.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_5 = 5,
    /*! Drop rate 6%.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_6 = 6,
    /*! Drop rate 7%.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_7 = 7,
    /*! Drop rate 8%.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_8 = 8,
    /*! Drop rate 9%.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_9 = 9,
    /*! Drop rate 10%.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_10 = 10,
    /*! Drop rate 25%.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_25 = 11,
    /*! Drop rate 50%.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_50 = 12,
    /*! Drop rate 75%.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_75 = 13,
    /*! Drop rate 100%.  */
    BCM56880_A0_LRD_TM_WRED_DROP_PERCENTAGE_T_T_TM_WRED_DROP_PERCENTAGE_100 = 14,
} bcm56880_a0_lrd_tm_wred_drop_percentage_t_t;

/*! enum type for TM_WRED_JITTER_T
 * WRED jitter time range in nanoseconds with step size = 50ns
 */
typedef enum bcm56880_a0_lrd_tm_wred_jitter_t_e {
    /*! Jitter from 50ns to 0.  */
    BCM56880_A0_LRD_TM_WRED_JITTER_T_T_TM_WRED_JITTER_RANGE_50NS_0 = 1,
    /*! Jitter from 150ns to 0.  */
    BCM56880_A0_LRD_TM_WRED_JITTER_T_T_TM_WRED_JITTER_RANGE_150NS_0 = 2,
    /*! Jitter from 350ns to 0.  */
    BCM56880_A0_LRD_TM_WRED_JITTER_T_T_TM_WRED_JITTER_RANGE_350NS_0 = 3,
    /*! Jitter from 750ns to 0.  */
    BCM56880_A0_LRD_TM_WRED_JITTER_T_T_TM_WRED_JITTER_RANGE_750NS_0 = 4,
    /*! Jitter from 1550ns to 0.  */
    BCM56880_A0_LRD_TM_WRED_JITTER_T_T_TM_WRED_JITTER_RANGE_1550NS_0 = 5,
    /*! Jitter from 3150ns to 0.  */
    BCM56880_A0_LRD_TM_WRED_JITTER_T_T_TM_WRED_JITTER_RANGE_3150NS_0 = 6,
    /*! Jitter from 6350ns to 0.  */
    BCM56880_A0_LRD_TM_WRED_JITTER_T_T_TM_WRED_JITTER_RANGE_6350NS_0 = 7,
} bcm56880_a0_lrd_tm_wred_jitter_t_t;

/*! enum type for TM_WRED_TIME_DOMAIN_T
 * Timer domain profiles.
 */
typedef enum bcm56880_a0_lrd_tm_wred_time_domain_t_e {
    /*! Time domain 0.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_0_5_US = 0,
    /*! Time domain 1 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_1_US = 1,
    /*! Time domain 1.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_1_5_US = 2,
    /*! Time domain 2 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_2_US = 3,
    /*! Time domain 2.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_2_5_US = 4,
    /*! Time domain 3 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_3_US = 5,
    /*! Time domain 3.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_3_5_US = 6,
    /*! Time domain 4 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_4_US = 7,
    /*! Time domain 4.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_4_5_US = 8,
    /*! Time domain 5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_5_US = 9,
    /*! Time domain 5.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_5_5_US = 10,
    /*! Time domain 6 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_6_US = 11,
    /*! Time domain 6.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_6_5_US = 12,
    /*! Time domain 7 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_7_US = 13,
    /*! Time domain 7.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_7_5_US = 14,
    /*! Time domain 8 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_8_US = 15,
    /*! Time domain 8.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_8_5_US = 16,
    /*! Time domain 9 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_9_US = 17,
    /*! Time domain 9.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_9_5_US = 18,
    /*! Time domain 10 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_10_US = 19,
    /*! Time domain 10.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_10_5_US = 20,
    /*! Time domain 11 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_11_US = 21,
    /*! Time domain 11.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_11_5_US = 22,
    /*! Time domain 12 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_12_US = 23,
    /*! Time domain 12.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_12_5_US = 24,
    /*! Time domain 13 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_13_US = 25,
    /*! Time domain 13.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_13_5_US = 26,
    /*! Time domain 14 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_14_US = 27,
    /*! Time domain 14.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_14_5_US = 28,
    /*! Time domain 15 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_15_US = 29,
    /*! Time domain 15.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_15_5_US = 30,
    /*! Time domain 16 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_16_US = 31,
    /*! Time domain 16.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_16_5_US = 32,
    /*! Time domain 17 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_17_US = 33,
    /*! Time domain 17.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_17_5_US = 34,
    /*! Time domain 18 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_18_US = 35,
    /*! Time domain 18.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_18_5_US = 36,
    /*! Time domain 19 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_19_US = 37,
    /*! Time domain 19.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_19_5_US = 38,
    /*! Time domain 20 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_20_US = 39,
    /*! Time domain 20.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_20_5_US = 40,
    /*! Time domain 21 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_21_US = 41,
    /*! Time domain 21.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_21_5_US = 42,
    /*! Time domain 22 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_22_US = 43,
    /*! Time domain 22.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_22_5_US = 44,
    /*! Time domain 23 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_23_US = 45,
    /*! Time domain 23.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_23_5_US = 46,
    /*! Time domain 24 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_24_US = 47,
    /*! Time domain 24.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_24_5_US = 48,
    /*! Time domain 25 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_25_US = 49,
    /*! Time domain 25.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_25_5_US = 50,
    /*! Time domain 26 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_26_US = 51,
    /*! Time domain 26.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_26_5_US = 52,
    /*! Time domain 27 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_27_US = 53,
    /*! Time domain 27.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_27_5_US = 54,
    /*! Time domain 28 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_28_US = 55,
    /*! Time domain 28.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_28_5_US = 56,
    /*! Time domain 29 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_29_US = 57,
    /*! Time domain 29.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_29_5_US = 58,
    /*! Time domain 30 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_30_US = 59,
    /*! Time domain 30.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_30_5_US = 60,
    /*! Time domain 31 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_31_US = 61,
    /*! Time domain 31.5 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_31_5_US = 62,
    /*! Time domain 32 us  */
    BCM56880_A0_LRD_TM_WRED_TIME_DOMAIN_T_T_TIME_DOMAIN_32_US = 63,
} bcm56880_a0_lrd_tm_wred_time_domain_t_t;

/*! enum type for TRUNK_HASH_FLOW_ID_SRC_T
 * The TRUNK_HASH_FLOW_ID_SRC_T enum declares a list of enumerators, in which
 *  each enumerator represents an input sub-field that can be selected as the
 *  source field for generating the hash flow id key field value.
 */
typedef enum bcm56880_a0_lrd_trunk_hash_flow_id_src_t_e {
    /*! Use lower 8-bits of hash A0 bin.\n */
    BCM56880_A0_LRD_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_A0_LO = 0,
    /*! Use higher 8-bits of hash A0 bin.\n */
    BCM56880_A0_LRD_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_A0_HI = 1,
    /*! Use lower 8-bits of hash A1 bin.\n */
    BCM56880_A0_LRD_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_A1_LO = 2,
    /*! Use higher 8-bits of hash A1 bin.\n */
    BCM56880_A0_LRD_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_A1_HI = 3,
    /*! Use lower 8-bits of hash B0 bin.\n */
    BCM56880_A0_LRD_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_B0_LO = 4,
    /*! Use higher 8-bits of hash B0 bin.\n */
    BCM56880_A0_LRD_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_B0_HI = 5,
    /*! Use lower 8-bits of hash B1 bin.\n */
    BCM56880_A0_LRD_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_B1_LO = 6,
    /*! Use higher 8-bits of hash B1 bin.\n */
    BCM56880_A0_LRD_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_B1_HI = 7,
    /*! Use lower 8-bits of hash C0 bin.\n */
    BCM56880_A0_LRD_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_C0_LO = 8,
    /*! Use higher 8-bits of hash C0 bin.\n */
    BCM56880_A0_LRD_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_C0_HI = 9,
    /*! Use lower 8-bits of hash C1 bin.\n */
    BCM56880_A0_LRD_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_C1_LO = 10,
    /*! Use higher 8-bits of hash C1 bin.\n */
    BCM56880_A0_LRD_TRUNK_HASH_FLOW_ID_SRC_T_T_HASH_C1_HI = 11,
    /*! Use hash index from the bus.\n */
    BCM56880_A0_LRD_TRUNK_HASH_FLOW_ID_SRC_T_T_BUS_HASH_INDEX = 12,
} bcm56880_a0_lrd_trunk_hash_flow_id_src_t_t;

/*! enum type for TS_CF_UPDATE_MODE_T
 * Defines the correction field update mode
 */
typedef enum bcm56880_a0_lrd_ts_cf_update_mode_t_e {
    /*! Never update the correction field.  */
    BCM56880_A0_LRD_TS_CF_UPDATE_MODE_T_T_DISABLE = 0,
    /*!
     * Enable correction field based on local IEEE 1588 event
     *  packet parsing.
     */
    BCM56880_A0_LRD_TS_CF_UPDATE_MODE_T_T_PORT_BASED_ENABLE = 1,
    /*!
     * Enable IEEE 1588 correction field updates for all 1588 event packets
     *  for which ingress correction field updates have been done.
     */
    BCM56880_A0_LRD_TS_CF_UPDATE_MODE_T_T_ING_UPDATE_BASED_ENABLE = 2,
} bcm56880_a0_lrd_ts_cf_update_mode_t_t;

/*! enum type for TS_IEEE1588_VERSION_T
 * IEEE1588 version.
 */
typedef enum bcm56880_a0_lrd_ts_ieee1588_version_t_e {
    /*! IEEE1588 version field must be equal 2.  */
    BCM56880_A0_LRD_TS_IEEE1588_VERSION_T_T_VER_EQ_2 = 0,
    /*! IEEE1588 version field must be greater than or equal to 2.  */
    BCM56880_A0_LRD_TS_IEEE1588_VERSION_T_T_VER_GT_OR_EQ_2 = 1,
} bcm56880_a0_lrd_ts_ieee1588_version_t_t;

/*! enum type for TS_TIMESTAMPING_MODE_T
 * Timestamping Mode.
 */
typedef enum bcm56880_a0_lrd_ts_timestamping_mode_t_e {
    /*! 32-bit mode.  */
    BCM56880_A0_LRD_TS_TIMESTAMPING_MODE_T_T_TIMESTAMP_32_MODE = 0,
    /*! 48-bit mode.  */
    BCM56880_A0_LRD_TS_TIMESTAMPING_MODE_T_T_TIMESTAMP_48_MODE = 1,
} bcm56880_a0_lrd_ts_timestamping_mode_t_t;

/*! enum type for VLAN_TAG_TYPE_T
 * VLAN tag type.
 */
typedef enum bcm56880_a0_lrd_vlan_tag_type_t_e {
    /*! No VLAN tag.  */
    BCM56880_A0_LRD_VLAN_TAG_TYPE_T_T_UNTAGGED = 0,
    /*! Single VLAN tag.  */
    BCM56880_A0_LRD_VLAN_TAG_TYPE_T_T_SINGLE_TAGGED = 1,
    /*! Double VLAN tag.  */
    BCM56880_A0_LRD_VLAN_TAG_TYPE_T_T_DOUBLE_TAGGED = 2,
} bcm56880_a0_lrd_vlan_tag_type_t_t;

#endif /* DOXYGEN_IGNORE_AUTOGEN */
#endif /* BCM56880_A0_LRD_ENUM_CTYPE_H */
