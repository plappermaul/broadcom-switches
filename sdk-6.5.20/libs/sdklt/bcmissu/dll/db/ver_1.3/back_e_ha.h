/**************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated by HA parser from YAML formated file.
 * Edits to this file will be lost when it is regenerated.
 * Tool: bcmha/scripts/ha_yml_parser.py
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#ifndef BACK_E_HA_H
#define BACK_E_HA_H

#include <shr/shr_ha.h>

/*!
 * Block header for free element. The headers can be linked together to track multiple
 * blocks of the same element size as well as different element sizes
 */
typedef struct {
   /*! Block validation */
   uint32_t signature;
   /*! The field data size supported by this table */
   uint8_t data_len;
   /*! The sub component ID */
   uint16_t sub;
   /*! The number of elements in this table */
   uint32_t elem_count;
   /*! Point to second block if this became full */
   uint32_t blk_ext;
   /*! Point to similar block of different size elements */
   uint32_t next_size_blk;
   /*! Pointer to the free list of available data items */
   uint32_t free_list;
} element_list_head_t;

#define ELEMENT_LIST_HEAD_T_ID 0x94c87bfcd6cfcd4a

/*!
 * Backend table header
 */
typedef struct {
   /*! Block validation */
   uint32_t signature;
   /*! The component ID created this table */
   uint16_t comp_id;
   /*! The field data size supported by this table */
   uint8_t data_len;
   /*! The entry key size supported by this table */
   uint8_t key_len;
   /*! The hash table size */
   uint32_t num_of_rows;
   /*! The number of entries in the table */
   uint32_t num_of_ent;
   /*! The entry length of this table */
   uint16_t ent_len;
   /*! The sub-component ID created this table */
   uint16_t sub_id;
   /*! Indicates if the table is basic or direct table */
   bool basic_tbl;
   /*! Only relevant for direct tables. Indicates if the table has array fields. */
   bool array_tbl;
} tbl_header_t;

#define TBL_HEADER_T_ID 0x36b73b4ad53a6891

/*!
 * Field definition for entry with array elements
 */
typedef struct {
   /*! Field ID */
   uint32_t fid;
   /*! The field index in an array */
   uint32_t idx;
   /*! The field data */
   uint64_t data;
} direct_tbl_array_field_t;

#define DIRECT_TBL_ARRAY_FIELD_T_ID 0xae3b4d09abef4d4f

/*!
 * Field definition for entry without array elements
 */
typedef struct {
   /*! Field ID */
   uint32_t fid;
   /*! The field data */
   uint64_t data;
} direct_tbl_basic_field_t;

#define DIRECT_TBL_BASIC_FIELD_T_ID 0xdc28cae644841fb5

/*!
 * Entry definition for entry with array elements
 */
typedef struct {
   /*! Field count */
   uint16_t count;
   /*! Entry lock count */
   uint8_t lock;
   /*! Is the entry empty or not */
   bool valid;
   /*! Array of fields */
   direct_tbl_array_field_t fields[];
} direct_tbl_entry_array_t;

#define DIRECT_TBL_ENTRY_ARRAY_T_ID 0x73a2871e046812c2

/*!
 * Entry definition for entry without array elements
 */
typedef struct {
   /*! Field count */
   uint16_t count;
   /*! Entry lock count */
   uint8_t lock;
   /*! Is the entry empty or not */
   bool valid;
   /*! Array of basic fields */
   direct_tbl_basic_field_t fields[];
} direct_tbl_entry_basic_t;

#define DIRECT_TBL_ENTRY_BASIC_T_ID 0x1b4f29bb24ccd537

/*!
 * Direct table definition for entry with array elements
 */
typedef struct {
   /*! Table header */
   tbl_header_t hdr;
   /*! Rows count */
   uint32_t rows;
   /*! The start index of the table. */
   uint32_t start_idx;
   /*! The table content */
   uint8_t body[];
} direct_tbl_array_t;

#define DIRECT_TBL_ARRAY_T_ID 0x7b99c59ffb8eff8d

/*!
 * Direct table definition for entry without array elements
 */
typedef struct {
   /*! Table header */
   tbl_header_t hdr;
   /*! Rows count */
   uint32_t rows;
   /*! The start index of the table. */
   uint32_t start_idx;
   /*! The table content */
   uint8_t body[];
} direct_tbl_basic_t;

#define DIRECT_TBL_BASIC_T_ID 0xa2f2f29438753151

#endif /* BACK_E_HA_H */
