/**************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated by HA parser from YAML formated file.
 * Edits to this file will be lost when it is regenerated.
 * Tool: bcmha/scripts/ha_yml_parser.py
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#ifndef BCMTM_HA_H
#define BCMTM_HA_H

#include <shr/shr_ha.h>

#define NUM_CPU_PORTS 1
#define NUM_LB_MGMT_PORTS 16
#define NUM_PORTS 576
#define NUM_PIPES 32
#define NUM_PIPES_PORTS 18432
#define NUM_ITMS 2
#define NUM_PFC_PRI_PORTS 4608
#define NUM_PMS 64
#define NUM_PORT_BMP_WIDTH 18
#define NUM_PORT_MC_QUEUE_BMP_WIDTH 2

/*!
 * BCMTM threshold information
 */
typedef struct {
   /*! Shared buffer space in each ITM. */
   uint32_t itm_buf_size[NUM_ITMS];
} bcmtm_thd_info_t;

#define BCMTM_THD_INFO_T_ID 0x2f22168b148cf5ab

/*!
 * BCMTM  auxiallary port mapping information.
 */
typedef struct {
   /*! Logical port. */
   int log_port;
   /*! Physical port. */
   int phy_port;
   /*! Pipe. */
   int pipe;
   /*! IDB port. */
   int idb_port;
   /*! TM port. */
   int mmu_port;
} bcmtm_int_port_info_t;

#define BCMTM_INT_PORT_INFO_T_ID 0x9a83dfb563e10d76

/*!
 * BCMTM driver information. It holds the port mapping information as well.
 */
typedef struct {
   /*! Clock frequency. */
   int frequency;
   /*! Port fabric enable. */
   int fabric_port_enable;
   /*! DPR clock frequency. */
   int dpr_clock_frequency;
   /*! CPU port configuration. */
   bcmtm_int_port_info_t cpu_ports[NUM_CPU_PORTS];
   /*! Loopback port configuration. */
   bcmtm_int_port_info_t lb_ports[NUM_LB_MGMT_PORTS];
   /*! Management port configuration. */
   bcmtm_int_port_info_t mgmt_ports[NUM_LB_MGMT_PORTS];
   /*! Logical to physical port mapping. */
   int port_l2p_mapping[NUM_PORTS];
   /*! Physical to logical port mapping. */
   int port_p2l_mapping[NUM_PORTS];
   /*! Logical to mmu port mapping. */
   int port_l2m_mapping[NUM_PORTS];
   /*! Logical to idb port mapping. */
   int port_l2i_mapping[NUM_PORTS];
   /*! Physical to mmu port mapping. */
   int port_p2m_mapping[NUM_PORTS];
   /*! Logical port to pipe mapping. */
   int port_pipe_mapping[NUM_PORTS];
   /*! Physical port to mmu local mapping. */
   int port_p2m_local_mapping[NUM_PORTS];
   /*! Mmu local mapping to physical port per pipe. */
   int port_lm2p_per_pipe_mapping[NUM_PIPES_PORTS];
   /*! Logical port to mmu chip port number. */
   int port_l2m_chip_mapping[NUM_PORTS];
   /*! MMU chip port number to logical port mapping. */
   int port_mchip2l_mapping[NUM_PORTS];
   /*! Logical Port flags. */
   int port_flags[NUM_PORTS];
   /*! Number of multicast queue in a logical port. */
   int num_mc_cosq[NUM_PORTS];
   /*! Number of unicast queue in a logical port. */
   int num_uc_cosq[NUM_PORTS];
   /*! Multicast base queue numer for logical port. */
   int mc_cosq_base[NUM_PORTS];
   /*! Unicast base queue numer for logical port. */
   int uc_cosq_base[NUM_PORTS];
   /*! Number of lanes in the port macro of logical port. */
   int port_num_lanes[NUM_PORTS];
   /*! Maximum  speed of logical port. */
   int port_speed_max[NUM_PORTS];
   /*! Initialised port speed for logical port. */
   int port_init_speed[NUM_PORTS];
   /*! Current port speed for logical port. */
   int port_speed_cur[NUM_PORTS];
   /*! OOBFC clock in nano seconds. */
   uint8_t oobfc_clock_ns;
   /*! Enable flexport operations. */
   uint8_t flexport;
   /*! Lossless mode. */
   uint8_t lossless;
   /*! The PM is eligibal for flexport operations. For some devices, non-zero values indicate max number of subports in the PM. */
   uint8_t flex_eligible[NUM_PMS];
} bcmtm_drv_info_t;

#define BCMTM_DRV_INFO_T_ID 0x712510849b4bf5db

/*!
 * Holds the information related to per port per priority pfc deadlock recovery state.
 */
typedef struct {
   /*! Per PFC priority deadlock recovery timer value. */
   uint8_t recovery_count_cfg[NUM_PFC_PRI_PORTS];
   /*! Per PFC priority deadlock recovery enable info. */
   uint8_t ddr_enable[NUM_PORTS];
   /*! PFC priorities under deadlock recovery. */
   uint8_t in_recovery[NUM_PORTS];
   /*! Accumulated deadlock recovery time across all recovery events. */
   uint32_t recovery_count_acc[NUM_PFC_PRI_PORTS];
} bcmtm_pfc_ddr_info_t;

#define BCMTM_PFC_DDR_INFO_T_ID 0x50d200e6e7472490

/*!
 * OBM usage information.
 */
typedef struct {
   /*! Obm usage bitmap array. */
   uint32_t obm_usage[NUM_PORT_BMP_WIDTH];
} bcmtm_obm_usage_info_t;

#define BCMTM_OBM_USAGE_INFO_T_ID 0x3fb9ccf1a35cee5d

#endif /* BCMTM_HA_H */
