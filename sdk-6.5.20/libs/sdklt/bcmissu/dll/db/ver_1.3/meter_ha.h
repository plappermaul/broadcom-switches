/**************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated by HA parser from YAML formated file.
 * Edits to this file will be lost when it is regenerated.
 * Tool: bcmha/scripts/ha_yml_parser.py
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#ifndef METER_HA_H
#define METER_HA_H

#include <shr/shr_ha.h>

#define MAX_CONTAINERS 4
#define METER_PAIR_NUM 2

typedef struct {
   /*! Flag to indicate if the action is enabled in PDD. */
   bool en;
   /*! Indicator if the container is being used. */
   bool in_use[MAX_CONTAINERS];
   /*! Offsets of the containers in the policy table. */
   uint32_t offset[MAX_CONTAINERS];
} bcmcth_meter_action_pdd_offset_t;

#define BCMCTH_METER_ACTION_PDD_OFFSET_T_ID 0x76c18909e707eda6

typedef struct {
   /*! Meter pair index. */
   uint32_t meter_pair_index;
   /*! Meter hw index. */
   uint32_t meter_hw_index;
   /*! Meter mode. */
   uint8_t meter_pair_mode;
   /*! Meter mode modifier. */
   uint8_t mode_modifier;
   /*! Meter update odd. */
   uint8_t meter_update_odd;
   /*! Meter test odd. */
   uint8_t meter_test_odd;
   /*! Meter update even. */
   uint8_t meter_update_even;
   /*! Meter test even. */
   uint8_t meter_test_even;
   /*! Meter mode, bytes or packets. */
   uint8_t byte_mode;
   /*! Meter refresh mode. */
   uint8_t refresh_mode;
   /*! Meter granularity. */
   uint8_t gran[METER_PAIR_NUM];
   /*! Meter refresh count. */
   uint32_t refresh_count[METER_PAIR_NUM];
   /*! Meter bucket size. */
   uint32_t bucket_size[METER_PAIR_NUM];
   /*! Meter bucket count. */
   uint32_t bucket_count[METER_PAIR_NUM];
} bcmcth_meter_hw_params_t;

#define BCMCTH_METER_HW_PARAMS_T_ID 0x8d6a9869f3f2ce0d

typedef struct {
   /*! Flag to indicate if the meter is in use. */
   bool meter_in_use;
   /*! Meter installed in hardware. */
   bool meter_installed;
   /*! Meter pool instance. */
   uint8_t pool;
   /*! Meter pipe ID. */
   uint8_t pipe;
   /*! Meter entry hardware fields. */
   bcmcth_meter_hw_params_t hw_fields;
   /*! Meter entry reference count. */
   uint32_t ref_count;
} bcmcth_meter_fp_entry_t;

#define BCMCTH_METER_FP_ENTRY_T_ID 0x9a85652080b330dc

typedef struct {
   /*! Port number. */
   uint32_t port_id;
   /*! Per port storm control meter id. */
   uint32_t meter_id;
   /*! Flag to indicate if meter is currently in use. */
   bool meter_in_use;
   /*! Metering rate in kbps. */
   uint64_t meter_rate_kbps;
   /*! Burst size in kbits. */
   uint32_t burst_size_kbits;
   /*! Metering rate in pps. */
   uint64_t meter_rate_pps;
   /*! Burst size in packets. */
   uint32_t burst_size_pkts;
   /*! Operational metering rate in kbps. */
   uint64_t meter_rate_kbps_oper;
   /*! Operational burst size in kbits. */
   uint32_t burst_size_kbits_oper;
   /*! Operational metering rate in pps. */
   uint64_t meter_rate_pps_oper;
   /*! Operational burst size in packets. */
   uint32_t burst_size_pkts_oper;
} bcmcth_meter_sc_entry_t;

#define BCMCTH_METER_SC_ENTRY_T_ID 0x2fa51480618078a6

#endif /* METER_HA_H */
