/**************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated by HA parser from YAML formated file.
 * Edits to this file will be lost when it is regenerated.
 * Tool: bcmha/scripts/ha_yml_parser.py
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#ifndef BCMECMP_HA_H
#define BCMECMP_HA_H

#include <shr/shr_ha.h>

typedef struct {
   /*! Entry reference count value. */
   uint16_t ref_cnt;
   /*! Entry property flags value. */
   uint8_t flags;
} bcmecmp_hw_entry_attr_t;

#define BCMECMP_HW_ENTRY_ATTR_T_ID 0x41e9b30a2c0c6cd2

typedef struct {
   /*! Transaction identifer of this group. */
   uint32_t trans_id;
   /*! ECMP group lookup type. */
   uint32_t grp_type;
   /*! Logical table identifier. */
   uint32_t glt_sid;
   /*! Loading balancing mode. */
   uint32_t lb_mode;
   /*! Sort next-hop members status. */
   bool nhop_sorted;
   /*! Maximum paths supported. */
   uint32_t max_paths;
   /*! Number of paths configured. */
   uint32_t num_paths;
   /*! Resilient hashing group size in entries count. */
   uint32_t rh_entries_cnt;
   /*! Resilient hashing group random number. */
   uint32_t rh_rand;
   /*! Group members start index in ECMP member table. */
   int mstart_idx;
   /*! Weighted ECMP loading balancing mode. */
   uint32_t weighted_mode;
   /*! Flag indicating if the group is using itbm resource. */
   bool in_use_itbm;
} bcmecmp_grp_attr_t;

#define BCMECMP_GRP_ATTR_T_ID 0xe7297184a9634def

typedef struct {
   /*! Block validation. */
   uint32_t signature;
   /*! How many hw entries need be allocated. */
   uint32_t array_size;
   /*! HW entries array. */
   bcmecmp_hw_entry_attr_t array[];
} bcmecmp_hw_entry_ha_blk_t;

#define BCMECMP_HW_ENTRY_HA_BLK_T_ID 0x502374c675be38cd

typedef struct {
   /*! Block validation. */
   uint32_t signature;
   /*! How many group entries need be allocated. */
   uint32_t array_size;
   /*! Group entries array. */
   bcmecmp_grp_attr_t array[];
} bcmecmp_grp_ha_blk_t;

#define BCMECMP_GRP_HA_BLK_T_ID 0x6cf8b0181ff6d008

typedef struct {
   /*! Entry property flags value. */
   uint8_t flags;
} bcmecmp_flex_hw_entry_attr_t;

#define BCMECMP_FLEX_HW_ENTRY_ATTR_T_ID 0x6f3a974256bf45dd

typedef struct {
   /*! Transaction identifer of this group. */
   uint32_t trans_id;
   /*! ECMP group lookup type. */
   uint32_t grp_type;
   /*! Logical table identifier. */
   uint32_t glt_sid;
   /*! Loading balancing mode. */
   uint32_t lb_mode;
   /*! Maximum paths supported. */
   uint32_t max_paths;
   /*! Number of paths configured. */
   uint32_t num_paths;
   /*! Group members start index in ECMP member table. */
   int mstart_idx;
   /*! Weighted ECMP loading balancing mode. */
   uint32_t weighted_mode;
   /*! Flag indicating if the group is using itbm resource. */
   bool in_use_itbm;
} bcmecmp_flex_grp_attr_t;

#define BCMECMP_FLEX_GRP_ATTR_T_ID 0x32957fbc5518b6e1

typedef struct {
   /*! Resilient hashing group size in entries count. */
   uint32_t rh_entries_cnt;
   /*! Resilient hashing group random number. */
   uint32_t rh_rand;
   /*! Resilient hashing group enabled. */
   bool rh_mode;
} bcmecmp_flex_grp_rh_attr_t;

#define BCMECMP_FLEX_GRP_RH_ATTR_T_ID 0x4a97ca253ffff856

typedef struct {
   /*! Block validation. */
   uint32_t signature;
   /*! How many hw entries need be allocated. */
   uint32_t array_size;
   /*! HW entries array. */
   bcmecmp_flex_hw_entry_attr_t array[];
} bcmecmp_flex_hw_entry_ha_blk_t;

#define BCMECMP_FLEX_HW_ENTRY_HA_BLK_T_ID 0xd23edb197a4507d5

typedef struct {
   /*! Block validation. */
   uint32_t signature;
   /*! How many group entries need be allocated. */
   uint32_t array_size;
   /*! Group entries array. */
   bcmecmp_flex_grp_attr_t array[];
} bcmecmp_flex_grp_ha_blk_t;

#define BCMECMP_FLEX_GRP_HA_BLK_T_ID 0x028041972588fd44

typedef struct {
   /*! Block validation. */
   uint32_t signature;
   /*! How many group entries need be allocated. */
   uint32_t array_size;
   /*! Group RH entries array. */
   bcmecmp_flex_grp_rh_attr_t array[];
} bcmecmp_flex_grp_rh_ha_blk_t;

#define BCMECMP_FLEX_GRP_RH_HA_BLK_T_ID 0x549cf42ad7a483e2

#endif /* BCMECMP_HA_H */
