/**************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated by HA parser from YAML formated file.
 * Edits to this file will be lost when it is regenerated.
 * Tool: bcmha/scripts/ha_yml_parser.py
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#ifndef BCMPTM_RM_HASH_LOCAL_H
#define BCMPTM_RM_HASH_LOCAL_H

#include <shr/shr_ha.h>

#define RM_HASH_MAX_GRP_INST_COUNT 2
#define RM_HASH_BM_NUM 4
#define RM_HASH_SHR_MAX_SLB_COUNT 24
#define RM_HASH_SHR_MAX_BLKS_COUNT 256
#define RM_HASH_MAX_TBL_INST_COUNT 8
#define RM_HASH_MAX_KEY_WORDS 12
#define RM_HASH_NARROW_ENTRY_LITD_NUM 3

/*!
 * Bucket and base entry bitmap for each entry.
 */
typedef struct {
   /*! Base bucket in which the entry exists. */
   uint8_t bb_bmp;
   /*! Base entries occupied by the entry. */
   uint8_t be_bmp;
   /*! Logical entries occupied by the entry. */
   uint8_t le_bmp;
} rm_hash_ent_loc_t;

#define RM_HASH_ENT_LOC_T_ID 0xa7f3235d823b9a26

/*!
 * Software logical bucket info for each entry.
 */
typedef struct {
   /*! List of all the logical buckets for the entry. */
   uint32_t slb_info_offset;
   /*! Number of valid SLBs for this entry. */
   uint8_t num_slb_info;
   /*! Bucket mode of the entry. */
   uint8_t bm;
   /*! Number of banks containing the entry currently. */
   uint8_t num_rbanks;
   /*! List of entry node index. */
   uint8_t e_node_idx[RM_HASH_MAX_GRP_INST_COUNT];
} rm_hash_ent_slb_t;

#define RM_HASH_ENT_SLB_T_ID 0x91b9d91d0f89a8b4

/*!
 * Entry node for each hash LT entry.
 */
typedef struct {
   /*! Signature of an entry. */
   uint32_t sig;
   /*! Physical table sid thru which the entry was installed. */
   uint32_t sid;
   /*! Software logical bucket info of an entry. */
   rm_hash_ent_slb_t ent_slb;
   /*! Base bucket and base entry location of an entry. */
   rm_hash_ent_loc_t e_loc;
   /*! Flag indicating the node attribute. */
   uint8_t flag;
   /*! Narrow mode entry location. */
   uint8_t nm_loc;
} rm_hash_ent_node_t;

#define RM_HASH_ENT_NODE_T_ID 0xc7185fb786d6465b

typedef enum {
   RM_HASH_BM_N = 0,
   RM_HASH_BM_0 = 1,
   RM_HASH_BM_1 = 2,
   RM_HASH_BM_2 = 3,
   RM_HASH_BM_CNT = 4
} rm_hash_bm_t;

typedef enum {
   BCMPTM_RM_HASH_ENTRY_NARROW_MODE_NONE = 0,
   BCMPTM_RM_HASH_ENTRY_NARROW_MODE_HALF = 1,
   BCMPTM_RM_HASH_ENTRY_NARROW_MODE_THIRD = 2,
   BCMPTM_RM_HASH_ENTRY_NARROW_MODE_COUNT = 3
} rm_hash_entry_narrow_mode_t;

/*!
 * Base entry and logical entry usage in a logical bucket.
 */
typedef struct {
   /*! Used base entries in this slb. */
   uint16_t be_bmp;
   /*! Used logical entries in this slb. */
   uint16_t le_bmp[RM_HASH_BM_NUM];
} rm_hash_slb_ent_bmp_t;

#define RM_HASH_SLB_ENT_BMP_T_ID 0x7c23445ac31b8561

/*!
 * Information about a software logical bucket.
 */
typedef struct {
   /*! Offset of the 1st entry node belonging to this slb. */
   uint32_t e_node_offset;
   /*! Entry base entry and logical entry info. */
   rm_hash_slb_ent_bmp_t e_bmp;
   /*! Count of existing valid entries. */
   uint8_t ve_cnt;
} rm_hash_slb_state_t;

#define RM_HASH_SLB_STATE_T_ID 0x87212abfda879e59

/*!
 * Software logical buckets an entry can reside.
 */
typedef struct {
   /*! Software logical bucket index. */
   uint32_t slb;
   /*! Valid hardware base bucket bitmap for this entry. */
   uint8_t vbb_bmp;
   /*! Group of the slb. */
   uint8_t map;
} rm_hash_ent_slb_info_t;

#define RM_HASH_ENT_SLB_INFO_T_ID 0x70276040623a8222

/*!
 * Narrow mode entry bitmap.
 */
typedef struct {
   /*! Bitmap of sixth base entry. */
   uint8_t bmp;
   /*! Ltid of the narrow entry. */
   uint32_t ltid[RM_HASH_NARROW_ENTRY_LITD_NUM];
   /*! Narrow mode of the entry. */
   rm_hash_entry_narrow_mode_t nm[RM_HASH_NARROW_ENTRY_LITD_NUM];
} rm_hash_nme_bmp_t;

#define RM_HASH_NME_BMP_T_ID 0x654aff5095e1395c

typedef enum {
   BCMPTM_RM_HASH_STATE_IDLE = 0,
   BCMPTM_RM_HASH_STATE_UC_A = 1,
   BCMPTM_RM_HASH_STATE_INVALIDATING_U = 2,
   BCMPTM_RM_HASH_STATE_RESTORING_U = 4
} rm_hash_trans_state_t;

/*!
 * Information about transaction maintained by rm hash.
 */
typedef struct {
   /*! Current transaction sequence id. */
   uint32_t cseq_id;
   /*! Current transaction state. */
   rm_hash_trans_state_t trans_state;
} rm_hash_trans_record_t;

#define RM_HASH_TRANS_RECORD_T_ID 0x862ae057d93d60a7

typedef enum {
   BCMPTM_RM_HASH_UNDO_ENT_INSERT = 0,
   BCMPTM_RM_HASH_UNDO_ENT_DELETE = 1
} rm_hash_trans_undo_opcode_t;

/*!
 * Information about an undo operation in the undo list.
 */
typedef struct {
   /*! Opcode of an undo operation. */
   rm_hash_trans_undo_opcode_t opcode;
   /*! Offset of the bucket state in which the undo will operate. */
   uint32_t b_state_offset;
   /*! Entry node for which the undo operation will be performed. */
   rm_hash_ent_node_t e_node;
   /*! Number of valid SLBs for this entry. */
   uint8_t num_slb_info;
   /*! Record the SLB information. */
   rm_hash_ent_slb_info_t slb_info[RM_HASH_SHR_MAX_SLB_COUNT];
   /*! Pipe instance. */
   uint8_t pipe;
} rm_hash_trans_undo_node_t;

#define RM_HASH_TRANS_UNDO_NODE_T_ID 0xef5caf89dbd2accf

/*!
 * Information about transaction undo list control.
 */
typedef struct {
   /*! Count of undo instructions in the current non-full chunk. */
   uint32_t used_node_cnt;
   /*! Count of full chunks. */
   uint32_t full_chunk_cnt;
   /*! Number of undo list chunks. */
   uint32_t num_chunks;
} rm_hash_trans_undo_ctrl_t;

#define RM_HASH_TRANS_UNDO_CTRL_T_ID 0xea3885d0e696cfc5

/*!
 * Information about a HA block for hash resource manager.
 */
typedef struct {
   /*! Physical table sid of the slb block. */
   uint32_t sid;
   /*! Bank number of the slb block. */
   uint16_t bank;
   /*! Table instance or pipe of the slb block. */
   uint16_t tbl_inst;
   /*! Block id of the slb block. */
   uint16_t blk;
} rm_hash_state_blk_t;

#define RM_HASH_STATE_BLK_T_ID 0x0fca5e03e77e142b

/*!
 * Per unit information about HA blocks for software logical buckets.
 */
typedef struct {
   /*! Current count of blocks for software logical buckets. */
   uint16_t curr;
   /*! Array of blocks for software logical buckets. */
   rm_hash_state_blk_t array[RM_HASH_SHR_MAX_BLKS_COUNT];
} rm_hash_bkt_state_blk_ctrl_t;

#define RM_HASH_BKT_STATE_BLK_CTRL_T_ID 0xece93c912eca45ef

/*!
 * Per unit information about HA blocks for entry nodes.
 */
typedef struct {
   /*! Current count of blocks for entry nodes. */
   uint16_t curr;
   /*! Array of blocks for entry nodes. */
   rm_hash_state_blk_t array[RM_HASH_SHR_MAX_BLKS_COUNT];
} rm_hash_ent_node_blk_ctrl_t;

#define RM_HASH_ENT_NODE_BLK_CTRL_T_ID 0x66dc6ce6bf81c198

/*!
 * Per unit information about HA blocks for software logical bucket info.
 */
typedef struct {
   /*! Current count of blocks for software logical bucket info. */
   uint16_t curr;
   /*! Array of blocks for software logical bucket info. */
   rm_hash_state_blk_t array[RM_HASH_SHR_MAX_BLKS_COUNT];
} rm_hash_slb_info_blk_ctrl_t;

#define RM_HASH_SLB_INFO_BLK_CTRL_T_ID 0x4ae05ca82e4a2be5

/*!
 * Per unit information about HA blocks for narrow mode entry bitmap.
 */
typedef struct {
   /*! Current count of blocks for narrow mode entry bitmap. */
   uint16_t curr;
   /*! Array of blocks for narrow mode entry bitmap. */
   rm_hash_state_blk_t array[RM_HASH_SHR_MAX_BLKS_COUNT];
} rm_hash_nme_bmp_blk_ctrl_t;

#define RM_HASH_NME_BMP_BLK_CTRL_T_ID 0xbb713c46dd863450

/*!
 * Per unit information about HA blocks for header of hash store entry block.
 */
typedef struct {
   /*! Real count of hash store entry block. */
   uint32_t count;
   /*! Array size of hash store entry block. */
   uint32_t size;
} rm_hash_store_hdr_t;

#define RM_HASH_STORE_HDR_T_ID 0x612d0787920fc544

/*!
 * Per unit information for hash store entry of a LT.
 */
typedef struct {
   /*! Hash store value. */
   uint32_t store_val;
   /*! Related full key. */
   uint32_t full_key[RM_HASH_MAX_KEY_WORDS];
} rm_hash_store_ent_t;

#define RM_HASH_STORE_ENT_T_ID 0x32625aea5da83b93

#endif /* BCMPTM_RM_HASH_LOCAL_H */
