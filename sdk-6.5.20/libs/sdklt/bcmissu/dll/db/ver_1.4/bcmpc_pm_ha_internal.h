/**************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated by HA parser from YAML formated file.
 * Edits to this file will be lost when it is regenerated.
 * Tool: bcmha/scripts/ha_yml_parser.py
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#ifndef BCMPC_PM_HA_INTERNAL_H
#define BCMPC_PM_HA_INTERNAL_H

#include <shr/shr_ha.h>

#define PM_MAX_PORTS_PER_CORE 8
#define BCMPC_NUM_PHYSICAL_PORTS 576
#define PM_MAX_PML_PER_CORE 2

typedef enum {
   PM_PORT_FEC_NONE = 0,
   PM_PORT_FEC_BASE_R,
   PM_PORT_FEC_RS_528,
   PM_PORT_FEC_RS_544,
   PM_PORT_FEC_RS_272,
   PM_PORT_FEC_RS_544_2XN,
   PM_PORT_FEC_RS_272_2XN,
   PM_PORT_FEC_RS_276,
   PM_PORT_FEC_RS_552,
   PM_PORT_FEC_COUNT
} pm_port_fec_t;

typedef enum {
   PM_PORT_AUTONEG_MODE_NONE = 0,
   PM_PORT_AUTONEG_MODE_CL37,
   PM_PORT_AUTONEG_MODE_CL37_BAM,
   PM_PORT_AUTONEG_MODE_CL73,
   PM_PORT_AUTONEG_MODE_CL73_BAM,
   PM_PORT_AUTONEG_MODE_CL73_MSA,
   PM_PORT_AUTONEG_MODE_SGMII,
   PM_PORT_AUTONEG_MODE_COUNT
} pm_port_autoneg_mode_t;

typedef enum {
   BCMPC_PHYMOD_PAUSE_NONE = 0,
   BCMPC_PHYMOD_PAUSE_SYMM,
   BCMPC_PHYMOD_PAUSE_ASYMM,
   BCMPC_PHYMOD_PAUSE_SYMM_ASYMM,
   BCMPC_PHYMOD_PAUSE_COUNT
} bcmpc_phymod_pause_type_t;

typedef enum {
   PM_SPEED_ID_TABLE_STATUS_NOT_LOADED = 0,
   PM_SPEED_ID_TABLE_STATUS_IEEE_MODE_LOADED,
   PM_SPEED_ID_TABLE_STATUS_HG3_MODE_LOADED,
   PM_SPEED_ID_TABLE_STATUS_COUNT
} pm_speed_id_table_status_t;

/*!
 * Port Macro (PM) specific software state information.
 */
typedef struct {
   /*! Indicates PM initialization is done. True when the first port is attached. */
   bool is_pm_initialized;
   /*! True is this Port Macro is generating clock for slave Port Macro. */
   bool is_master_pm;
   /*! Firmware is downloaded. */
   bool firmware_downloaded;
   /*! Lane bit map which are actively using OVCO. */
   uint8_t ovco_active_lane_bmap;
   /*! Lane bit map which are actively using TVCO. */
   uint8_t tvco_active_lane_bmap;
   /*! Lane bit map which have advertising abilities using OVCO. */
   uint8_t ovco_advert_lane_bmap;
   /*! Lane bit map which have advertising abilities using TVCO. */
   uint8_t tvco_advert_lane_bmap;
   /*! Lane bit map which have auto-negotiation enabled. */
   uint8_t an_enable_lane_bmap;
   /*! Lane to port mapping array. */
   int lane_port_map[PM_MAX_PORTS_PER_CORE];
   /*! Maximum speed for each port. */
   int max_speed[PM_MAX_PORTS_PER_CORE];
   /*! Auto-negotiation lane to FEC type mapping array. */
   pm_port_fec_t lane_fec_map[PM_MAX_PORTS_PER_CORE];
   /*! Auto-negotiation lane to FEC type mapping array. */
   pm_port_fec_t an_lane_fec_map[PM_MAX_PORTS_PER_CORE];
   /*! Autonegotiation mode for each ports. */
   pm_port_autoneg_mode_t an_mode[PM_MAX_PORTS_PER_CORE];
   /*! Number of ports that enabling time-stamping on the Port Macro. */
   int ts_enable_port_count;
   /*! Time-stamping enable status for each ports. */
   int timesync_enable[PM_MAX_PORTS_PER_CORE];
   /*! Reduce Lane Mode (RLM) enable status for each ports. */
   uint32_t rlm_enable[PM_MAX_PORTS_PER_CORE];
   /*! RLM initiator status for each ports. */
   uint32_t rlm_initiator[PM_MAX_PORTS_PER_CORE];
   /*! PCS reconfigured status for each ports. Used in RLM. */
   uint32_t pcs_reconfigured[PM_MAX_PORTS_PER_CORE];
   /*! RLM active lane bitmap. */
   uint32_t rlm_active_lane_bmap[PM_MAX_PORTS_PER_CORE];
   /*! RLM status for each ports. */
   uint32_t rlm_state[PM_MAX_PORTS_PER_CORE];
   /*! Original FEC type for each ports. Used in RLM. */
   pm_port_fec_t original_fec[PM_MAX_PORTS_PER_CORE];
   /*! Original TX lane swap configuration. */
   uint32_t rlm_original_tx_lane_swap;
   /*! Original RX lane swap configuration. */
   uint32_t rlm_original_rx_lane_swap;
   /*! Indicator for 400G autonegotiation. */
   uint32_t is_400g_an;
   /*! 400G autonegotiation status. */
   uint32_t an_state_400g;
   /*! Count for the state machine waiting for link up. */
   int an_wait_link_count;
   /*! Remote pause request in 400G auto-negotiation. */
   bcmpc_phymod_pause_type_t an_400g_remote_pause;
   /*! Indicate if 100G 2 lane SW WAR is done or not. */
   bool is_100g_2lane_sw_war_is_done;
   /*! Indicator for three cw bad recover. */
   uint32_t three_cw_bad_enable[PM_MAX_PORTS_PER_CORE];
   /*! Three cw bad status. */
   uint32_t three_cw_bad_state[PM_MAX_PORTS_PER_CORE];
   /*! Count for the state machine waiting for recover completed. */
   uint32_t three_cw_bad_tick_cnt[PM_MAX_PORTS_PER_CORE];
   /*! SPEED ID table load status. */
   pm_speed_id_table_status_t speed_id_table_status[PM_MAX_PML_PER_CORE];
} pm_ha_info_t;

#define PM_HA_INFO_T_ID 0xe2e090da18d92a4c

/*!
 * Port link state information.
 */
typedef struct {
   /*! Port link state. */
   bool link_state[BCMPC_NUM_PHYSICAL_PORTS];
} bcmpc_ha_link_state_info_t;

#define BCMPC_HA_LINK_STATE_INFO_T_ID 0x7895fc13548f78d2

#endif /* BCMPC_PM_HA_INTERNAL_H */
