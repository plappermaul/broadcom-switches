/**************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated by HA parser from YAML formated file.
 * Edits to this file will be lost when it is regenerated.
 * Tool: bcmha/scripts/ha_yml_parser.py
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#ifndef UDF_HA_H
#define UDF_HA_H

#include <shr/shr_ha.h>

#define UDF_MAX_OBJECT_ID 4096
#define UDF_MAX_PARSER_STAGES 6
#define UDF_IPARSER_HFE_POLICY_INDEX_MAX 128
#define UDF_IPARSER_HFE_POLICY_INDEX_MAX_ALL_STAGE 768
#define UDF_4_BYTE_CONTAINER_MAX 16
#define UDF_2_BYTE_CONTAINER_MAX 24
#define UDF_1_BYTE_CONTAINER_MAX 8

typedef struct {
   /*! HFE POLICY table index. */
   uint8_t index;
   /*! HFE POLICY table base offset. */
   uint8_t base_offset;
} policy_table_index_info_t;

#define POLICY_TABLE_INDEX_INFO_T_ID 0xce37caa9c14e48d6

typedef struct {
   /*! Parser number. */
   uint8_t parser;
   /*! Number stages supported for the specified header. */
   uint8_t num_stages;
   /*! Parser1/2 stage policy memory. */
   uint32_t hfe_policy_mem[UDF_MAX_PARSER_STAGES];
   /*! HFE index count. */
   uint8_t hfe_index_count[UDF_MAX_PARSER_STAGES];
   /*! HFE Profile index and offset for a given stage. */
   policy_table_index_info_t hfe_profile_index[UDF_IPARSER_HFE_POLICY_INDEX_MAX_ALL_STAGE];
   /*! Array of HFE Profile entries for a given stage. */
   uint8_t hfe_profile_entry[UDF_IPARSER_HFE_POLICY_INDEX_MAX_ALL_STAGE];
   /*! Valid commands configured on each stage policy mem. */
   uint32_t valid_cmd_bmap[UDF_IPARSER_HFE_POLICY_INDEX_MAX_ALL_STAGE];
   /*! Max supported commands for specified anchor. */
   uint8_t max_commands;
   /*! Number of 1 byte container. */
   uint8_t num_1_byte_cont;
   /*! Number of 2 byte container. */
   uint8_t num_2_byte_cont;
   /*! Number of 4 byte container. */
   uint8_t num_4_byte_cont;
   /*! packet byte current offset. */
   uint8_t current_offset;
   /*! 4B container list used for specified UDF header. */
   uint8_t cont_used_4b[UDF_4_BYTE_CONTAINER_MAX];
   /*! 2B container list used for specified UDF header. */
   uint8_t cont_used_2b[UDF_2_BYTE_CONTAINER_MAX];
   /*! 1B container list used for specified UDF header. */
   uint8_t cont_used_1b[UDF_1_BYTE_CONTAINER_MAX];
} udf_hdr_fmt_hw_info_t;

#define UDF_HDR_FMT_HW_INFO_T_ID 0xd7af7cee2ea83d89

typedef struct {
   /*! indicate the array size of udf_hdr_fmt_array. */
   uint32_t max_hdr_count;
   /*! UDF header format info array. */
   udf_hdr_fmt_hw_info_t udf_hdr_fmt_array[];
} udf_hdr_fmt_ha_info_t;

#define UDF_HDR_FMT_HA_INFO_T_ID 0xc3665ba03bb9a9c1

#endif /* UDF_HA_H */
