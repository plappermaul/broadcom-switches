/**************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated by HA parser from YAML formated file.
 * Edits to this file will be lost when it is regenerated.
 * Tool: bcmha/scripts/ha_yml_parser.py
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#ifndef BCMPTM_RM_TCAM_PRIO_ONLY_HA_H
#define BCMPTM_RM_TCAM_PRIO_ONLY_HA_H

#include <shr/shr_ha.h>

#define BCMPTM_RM_TCAM_MAX_ENTRIES_PER_INDEX 2
#define BCMPTM_RM_TCAM_MAX_FIELDS_PER_ENTRY 4

typedef struct {
   /*! numbers of fields */
   uint8_t num_fields;
   /*! width of each field */
   uint16_t field_width[BCMPTM_RM_TCAM_MAX_FIELDS_PER_ENTRY];
   /*! start bit of each field */
   uint16_t field_start_bit[BCMPTM_RM_TCAM_MAX_FIELDS_PER_ENTRY];
} bcmptm_rm_tcam_hw_field_list_t;

#define BCMPTM_RM_TCAM_HW_FIELD_LIST_T_ID 0x722464c34797018c

typedef struct {
   /*! Logical Table ID */
   uint32_t ltid;
   /*! TCAM Flags  of type BCMPTM_RM_TCAM_XXX */
   uint32_t flags;
   /*! Total number of TCAM entries */
   uint16_t num_entries;
   /*! Total number of TCAM entries on this LTID */
   uint16_t num_entries_ltid;
   /*! number of lookups for a LT operation */
   uint8_t num_lookups;
   /*! number of logical entries per a physical index */
   uint8_t num_entries_per_index;
   /*! hw key width attributes for each logical entry */
   bcmptm_rm_tcam_hw_field_list_t hw_field_list[BCMPTM_RM_TCAM_MAX_ENTRIES_PER_INDEX];
   /*! Reserved entry used for TCAM sharing */
   int32_t reserved_entry_index1;
   /*! Reserved entry used for TCAM sharing */
   int32_t reserved_entry_index2;
   /*! Reserved entry key type value */
   int8_t res_ent_key_type_val;
   /*! number of LT sharing this tcam info */
   uint8_t num_lt_sharing;
   /*! Number of shared LTID information */
   uint16_t shr_info_count;
   /*! Memory Offset to first shared LTID information */
   uint32_t shr_info_offset;
   /*! Memory offset to TCAM entry operational information */
   uint32_t entry_info_offset;
   /*! Size TCAM entry operational information */
   uint32_t entry_info_seg_size;
   /*! Depth of hash table which is used to lookup TCAM entry information */
   uint16_t entry_hash_size;
   /*! Memory offset to TCAM entry hash information */
   uint32_t entry_hash_offset;
   /*! Size of TCAM entry hash information */
   uint32_t entry_hash_seg_size;
} bcmptm_rm_tcam_prio_only_info_t;

#define BCMPTM_RM_TCAM_PRIO_ONLY_INFO_T_ID 0x70144726c8f7603a

typedef struct {
   /*! TCAM entry priority set by the application layer */
   int entry_pri;
   /*! TCAM entry type information */
   int8_t entry_type;
   /*! Offset to TCAM entry information which has same hash as this TCAM entry */
   int32_t offset;
} bcmptm_rm_tcam_prio_only_entry_info_t;

#define BCMPTM_RM_TCAM_PRIO_ONLY_ENTRY_INFO_T_ID 0x4794553f8971a3c8

typedef struct {
   /*! shared LTID */
   uint32_t shr_ltid;
   /*! My LTID start index */
   uint32_t start_index;
   /*! My LTID end index */
   uint32_t end_index;
   /*! Shared LTID start index */
   uint32_t shr_start_index;
   /*! Shared LTID end index */
   uint32_t shr_end_index;
   /*! Flags for shared info */
   uint32_t shr_flags;
} bcmptm_rm_tcam_prio_only_shr_info_t;

#define BCMPTM_RM_TCAM_PRIO_ONLY_SHR_INFO_T_ID 0x443413ff37206c6e

#endif /* BCMPTM_RM_TCAM_PRIO_ONLY_HA_H */
