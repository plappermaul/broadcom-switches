/**************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated by HA parser from YAML formated file.
 * Edits to this file will be lost when it is regenerated.
 * Tool: bcmha/scripts/ha_yml_parser.py
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#ifndef BCMPTM_RM_TCAM_FP_HA_H
#define BCMPTM_RM_TCAM_FP_HA_H

#include <shr/shr_ha.h>

#define BCMPTM_FP_ENTRY_SEG_WORDS 1
#define BCMPTM_FP_MAX_LT_PARTS 12
#define BCMPTM_RM_TCAM_GRP_MODE_COUNT 6

typedef struct {
   /*! Entry Segment bitmap structure. */
   uint32_t w[BCMPTM_FP_ENTRY_SEG_WORDS];
} bcmptm_fp_entry_seg_bmp_t;

#define BCMPTM_FP_ENTRY_SEG_BMP_T_ID 0xa2408315884c9561

typedef struct {
   /*! Valid entry. */
   uint8_t valid;
   /*! Logical Table ID. */
   uint8_t lt_id;
   /*! Group LT ID. */
   uint8_t group_ltid;
   /*! Logical Table action priority. */
   uint8_t lt_action_pri;
   /*! Group priority. */
   int priority;
   /*! Pipe where group belongs to. */
   int pipe_id;
   /*! Logical Table to Physical slice mapping. */
   uint32_t lt_part_map;
   /*! Logical table partition priority. */
   uint8_t lt_part_pri[BCMPTM_FP_MAX_LT_PARTS];
} bcmptm_rm_tcam_lt_config_t;

#define BCMPTM_RM_TCAM_LT_CONFIG_T_ID 0x4775951f771f3349

typedef struct {
   /*! BCMPTM_SLICE_XXX flags. */
   uint32_t slice_flags;
   /*! Physical Slice Id of the Slice. */
   uint8_t slice_id;
   /*! when groups are shared, primary group Id will be the first group, to which the current slice is allocated. */
   int16_t primary_grp_id;
   /*! Number of physical entries in the slice. */
   uint16_t num_entries;
   /*! Number of free physical entries in the slice. */
   uint16_t free_entries;
   /*! Number of physical presel entries in the slice. */
   uint16_t num_presel_entries;
   /*! Number of free physical presel entries in the slice. */
   uint16_t free_presel_entries;
   /*! Next slice Id offset in case slice is depth expanded. */
   int next_slice_id_offset[BCMPTM_RM_TCAM_GRP_MODE_COUNT];
   /*! Previous slice Id offset in case slice is depth expanded. */
   int prev_slice_id_offset[BCMPTM_RM_TCAM_GRP_MODE_COUNT];
   /*! Left Slice id in case of slice is width expanded. */
   int left_slice_id_offset[BCMPTM_RM_TCAM_GRP_MODE_COUNT];
   /*! Right Slice id in case of slice is width expanded. */
   int right_slice_id_offset[BCMPTM_RM_TCAM_GRP_MODE_COUNT];
} bcmptm_rm_tcam_slice_t;

#define BCMPTM_RM_TCAM_SLICE_T_ID 0x80669fd89a34b705

typedef struct {
   /*! Valid entry. */
   uint8_t valid;
   /*! Group Id. */
   uint32_t group_id;
   /*! next group id sharing same resources. */
   int16_t next_shared_group_id;
   /*! group priority. */
   uint32_t priority;
   /*! group_ltid. */
   uint8_t group_ltid;
   /*! Mode of the group. */
   uint32_t group_mode;
   /*! Primary Slice ID allocated for the group. */
   uint8_t primary_slice_id;
   /*! Pipe where group belongs to. */
   int pipe_id;
   /*! Number of presel entries associated to this group. */
   uint16_t num_presel_entries;
   /*! Number of entries associated to slices mapped to this group. */
   uint32_t num_entries;
   /*! Number of valid entries associated to this group. */
   uint32_t num_entries_ltid;
   /*! Number of flags associated to this group. */
   uint32_t flags;
   /*! Size of entry hash bucket. */
   uint32_t entry_hash_size;
   /*! Main FP TCAM entry information of type bcmptm_rm_tcam_prio_eid_info_t. */
   uint32_t entry_info_seg;
   /*! Entry hash info offset in the memory segment. */
   uint32_t entry_hash_seg;
   /*! Presel TCAM entry information of type bcmptm_rm_tcam_prio_eid_info_t. */
   uint32_t presel_entry_info_seg;
   /*! Presel Entry hash info offset in the memory segment. */
   uint32_t presel_entry_hash_seg;
   /*! Size of presel entry hash bucket. */
   uint32_t presel_entry_hash_size;
   /*! Bitmap for entry segment used. */
   bcmptm_fp_entry_seg_bmp_t entry_seg_bmp;
   /*! Entry index reserved for entry update operations. */
   int reserved_entry_index;
   /*! To determine whether reserve_entry_index is valid for this group. */
   bool reserve_entry_index_exists;
} bcmptm_rm_tcam_fp_group_t;

#define BCMPTM_RM_TCAM_FP_GROUP_T_ID 0x160056276f69b78e

typedef struct {
   /*! FP stage ID (INGRESS/EGRESS/LOOKUP/EM). */
   int stage_id;
   /*! Transaction state for the ltid. */
   uint8_t trans_state;
   /*! Number of pipes in this stage. */
   uint8_t num_pipes;
   /*! Count of Slices in this stage. */
   uint8_t num_slices;
   /*! Size of slice bundle in this stage. */
   uint8_t slice_bundle_size;
   /*! BCMPTM_STAGE_XXX flags. */
   uint64_t flags;
   /*! Max number of physical entries per slice. */
   uint16_t max_entries_per_slice;
   /*! Max number of presel physical entries per slice. */
   uint16_t max_presel_entries_per_slice;
   /*! Total number of tiles across all pipes. */
   uint8_t num_presel_groups;
   /*! Total number of SBR profiles across all pipes. */
   uint16_t num_sbr_profiles;
   /*! Total number of PDD profiles across all pipes. */
   uint16_t num_pdd_profiles;
   /*! Slice offset in the memory segment for slice. */
   uint32_t slice_seg;
   /*! Size of slice segment. */
   uint32_t slice_seg_size;
   /*! Slice group id from ser. */
   uint32_t slice_group_id;
   /*! Total number of groups in this stage. */
   uint16_t num_groups;
   /*! Slice offset in the memory segment. */
   uint32_t group_info_seg;
   /*! Size of group segment. */
   uint32_t group_info_seg_size;
   /*! LT config info offset in the memory segment. */
   uint32_t lt_config_seg;
   /*! Size of lt_config_seg. */
   uint32_t lt_config_seg_size;
   /*! Bitmap for usage of entry hash and info segements. */
   uint32_t entry_seg_bmp_offset;
   /*! Size of entry_seg_bmp_offset. */
   uint32_t entry_seg_bmp_size;
   /*! Size of entry hash bucket. */
   uint32_t entry_hash_size;
   /*! Size of presel entry hash bucket. */
   uint16_t presel_entry_hash_size;
   /*! Entry hash info offset in the memory segment. */
   uint32_t entry_hash_seg;
   /*! Size of entry_hash_seg. */
   uint32_t entry_hash_seg_size;
   /*! Entry info offset in the memory segment. */
   uint32_t entry_info_seg;
   /*! Size of entry_info_seg. */
   uint32_t entry_info_seg_size;
   /*! Presel Entry hash info offset in the memory segment. */
   uint32_t presel_entry_hash_seg;
   /*! Size of presel_entry_hash_seg. */
   uint32_t presel_entry_hash_seg_size;
   /*! Presel Entry info offset in the memory segment. */
   uint32_t presel_entry_info_seg;
   /*! Size of presel_entry_info_seg. */
   uint32_t presel_entry_info_seg_size;
   /*! Per tile(i.e. slice bundle) operational information. */
   uint32_t presel_group_ref_count_seg;
   /*! Size of presel_group_ref_count_seg. */
   uint32_t presel_group_ref_count_seg_size;
   /*! Offset to PDD profile info in the master memory segment. */
   uint32_t pdd_ref_count_seg;
   /*! Size of pdd_ref_count_seg. */
   uint32_t pdd_ref_count_seg_size;
   /*! Offset to SBR profile info in the master memory segment. */
   uint32_t sbr_ref_count_seg;
   /*! Size of sbr_ref_count_seg. */
   uint32_t sbr_ref_count_seg_size;
} bcmptm_rm_tcam_fp_stage_t;

#define BCMPTM_RM_TCAM_FP_STAGE_T_ID 0x439167e558d734ef

#endif /* BCMPTM_RM_TCAM_FP_HA_H */
