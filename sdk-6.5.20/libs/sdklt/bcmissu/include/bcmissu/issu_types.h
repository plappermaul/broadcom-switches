/*! \file issu_types.h
 *
 * ISSU data type definitions.
 * This file defines the interfaces and data structures of the C code
 * written in the ISSU DB and the generated C code of the ISSU DB.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef ISSU_TYPES_H
#define ISSU_TYPES_H

#include <sal/sal_types.h>
#include <shr/shr_ha.h>
#include <shr/shr_sysm.h>
#include <bcmissu/issu_api.h>

/*!
 * \brief Invalid structure ID definition
 */
#define ISSU_INVALID_STRUCT_ID  0  /*!< Invalid structure ID */
#define ISSU_INVALID_FIELD_ID   0  /*!< Invalid field ID */

#define ISSU_INVALID_FLD_OFFSET   0xFFFFFFFF /*!< Invalid field offset ID */

/*!
 * \brief Field ID type.
 */
typedef uint32_t bcmissu_field_id_t;

/*!
 * \brief HA pointer types.
 */
typedef enum {
    HA_PTR_NONE,        /*!< Not an HA pointer */
    HA_PTR,             /*!< Indicate regular HA pointer. */
    HA_LPTR             /*!< Indicate large HA pointer. */
} bcmissu_ha_ptr_t;

/*!
 * \brief LT field type.
 */
typedef enum {
    HA_LT_NONE,     /*!< Not LT related attribute */
    HA_LT_LTID,     /*!< Attribute is LT ID */
    HA_LT_FID       /*!< Attribute is field ID */
} bcmissu_ha_lt_attrib_t;

/*!
 * \brief ISSU DB - Structure field attributes.
 *
 * This data structure contains the attributes available for every
 * field of an ISSU structure included in the ISSU DB.
 */
typedef struct {
    uint32_t fid;       /*!< Field ID */
    uint32_t width;     /*!< Width in bytes */
    /*! Indicates if the field is HA pointer and its HA pointer type */
    bcmissu_ha_ptr_t ha_ptr;
    bool is_array;      /*!< Indicates if it is array */
    /*! Indicates if this field is of type enum generated by the ISSU parser */
    bool is_local_enum;
    /*! Indicate if the field is a LT or FLD ID */
    bcmissu_ha_lt_attrib_t lt_attrib;
    uint32_t size;      /*!< If is_array == true indicates the array size */
    /*!
     * A variable can be a variable-sized array where the array size
     * is determined by the value of another field. In such cases this
     * field is the field ID of the array length.
     */
    bcmissu_field_id_t var_size_id;
    /*!
     * This field can also be the field ID that represents a LT ID. This option
     * is being used when the field itself is a LT field ID. In order to convert
     * a field ID the system needs to know the corresponding table ID.
     */
    bcmissu_field_id_t ltid_var_for_fid;
    /*! This is the structure ID if the type is another ISSU structure */
    bcmissu_struct_id_t struct_id;
    /*!
     * This indicates if the field is an enum and provides the enum type
     * name if it is.
     */
    const char *enum_type_name;
} issu_field_t;

/*!
 * \brief Callback function that calculates an offset of a given field.
 *
 * This function signature is used in any ISSU data structure. The
 * purpose of the function is to return the offset of a given field
 * relative to the beginning to the data structure.  This function is
 * auto-generated by the ISSU parser.
 *
 * \param [in] field_id Unique identifier of the field ID from which
 *                      the offset should be calculated for. The field
 *                      ID is only unique within the given data
 *                      structure, and therefore it is possible that
 *                      two fields from two different data structures
 *                      will have the same field ID.
 *
 * \return The offset (in bytes) of the field from the beginning of the
 *         structure.
 * \return ISSU_INVALID_FLD_OFFSET if the field_id was not found.
 */
typedef uint32_t (*issu_field_offset_get_f)(bcmissu_field_id_t field_id);

/*!
 * \brief ISSU data structure DB information.
 *
 * This data structure contains meta data for every ISSU data
 * structure.
 */
typedef struct {
    issu_field_offset_get_f offset_get_func; /*!< field offset function */
    /*! The structure size, not considering variable arrays */
    size_t generic_size;
    uint32_t field_count;          /*!< Field count */
    const issu_field_t *fields;    /*!< Array of fields */
} issu_struct_t;

/*!
 * \brief ISSU data structure DB locator.
 *
 * This data structure is typically used to locate a particular ISSU
 * data structure's meta data.
 */
typedef struct {
    bcmissu_struct_id_t id;       /*!< System wide unique structure ID */
    const issu_struct_t *struct_info; /*!< Structure information */
} issu_struct_db_t;

/*!
 * \brief ISSU Enum symbol definition.
 */
typedef struct {
    const char *enum_fname; /*!< Enum symbol name */
    uint32_t val;           /*!< Value associated with the symbol */
} issu_enum_symbol_t;

/*!
 * \brief ISSU generated enum definition
 */
typedef struct {
    bcmissu_struct_id_t id;       /*!< System wide unique structure ID */
    const char *enum_name;             /*!< The enum type name */
    const issu_enum_symbol_t *enum_info; /*!< Enum information */
} issu_enum_db_t;

/*!
 * \brief ISSU DB of particular version.
 *
 * This data structure contains all the data structures meta data for
 * a specific software version.
 */
typedef struct {
    /*!
     * String representing the version. Only numeric values and
     * decimal points characters are allowed.
     */
    const char *version;
    /*!
     * Array of all the data structures belonging to this version. The
     * last element of the array should have struct_info = NULL.
     */
    const issu_struct_db_t *ver_db;

    /*!
     * Array of all the enum definitions belonging to this version. The
     * array is NULL terminated.
     */
    const issu_enum_db_t *enum_db;
} issu_version_list_t;

/*!
 * \brief ISSU structure versions.
 *
 * This auto-generated data structure is used by the ISSU upgrade
 * procedure.
 */
extern const issu_version_list_t *bcmissu_struct_db_get(void);

/*
 * LTIDs and field ID migration.
 */

/*!
 * \brief Field name to ID map.
 */
typedef struct {
    const char *f_name;  /*!< Field name */
    uint32_t id;   /*!< Field ID   */
} issu_ltid_f_dict_t;

/*!
 * \brief Single LT dictionary information.
 *
 * This structure can be searched by its LT name or LT ID. Beside the
 * LT name/ID mapping, this structure also contains the mapping of all
 * the fields associated with the LT.
 */
typedef struct {
    const char *lt_name;  /*!< LT name */
    uint32_t id;          /*!< LT ID in the original version */
    /*!
     * Array of field maps.
     * The array is terminated with f_name = NULL.
     */
    const issu_ltid_f_dict_t *lt_fields;
} issu_ltid_dict_t;

/*!
 * \brief ISSU Variant information.
 *
 * This structure contains a variant ID (string) and a dictionary of all the
 * LTs that are associated with this variant. The LTs that are not associated
 * with any specific variant will be under the 'generic' variant.
 */
typedef struct {
    const char *variant_id;   /*!< The variant name/ID */
    uint32_t length;    /*!< Number of elements in the ltid_dict */
    /*! An array of LTID dictionaries. */
    const issu_ltid_dict_t *ltid_dict;
} issu_variant_info_t;

/*!
 * \brief ISSU Device information.
 *
 * This structure contains a device ID (string) and a list of all the variants
 * that might be used under this device.
 */
typedef struct {
    const char *dev_name; /*!< The Device name */
    /*!
     * An array of variants. Terminated with NULL dictionary.
     */
    const issu_variant_info_t **variants;
} issu_device_info_t;

/*!
 * \brief ISSU enum definition.
 */
typedef struct {
    const char *enum_type_name;     /*!< The enum type name */
    const issu_enum_symbol_t *enum_def; /*!< List of symbols */
} issu_enum_def_t;

/*!
 * \brief ISSU Variant enum association.
 *
 * This data structure associated between device and variant to all its
 * enum definitions.
 */
typedef struct {
    const char *variant;    /*!< Variant string */
    const char *device;     /*!< Device string */
    const issu_enum_def_t *enums; /*!< List of enum definitions */
} issu_variants_enums_t;

/*!
 * \brief ISSU enum mapping.
 *
 * This data structure defines the organization of the various enum types
 * definitions according to the variants they are associated with.
 */
typedef struct {
    /*! Variant independent enum list */
    const issu_variants_enums_t *gen_enums;
    /*! Variant dependent enum list */
    const issu_variants_enums_t *variants_enum;
} issu_variants_enum_map_t;

/*!
 * \brief LT dictionary information.
 */
typedef struct {
    /*!
     * String representing the version. Only numeric values and
     * decimal points characters are allowed.
     */
    const char *ver;
    /*!
     * An array of LTID dictionaries for non device/variant specific LTIDs.
     * The array is terminated with the lt_name = NULL.
     */
    const issu_variant_info_t *gen_variant;
    /*!
     * An array of supported devices.
     * The array is terminated with the device name = NULL.
     */
    const issu_device_info_t **devices;
} issu_ltid_dict_entry_t;

/*!
 * \brief Retrieve root ISSU LTID dictionary.
 *
 * This function is auto-generated by the ISSU parser and retrieves the root
 * of the LTID dictionary.
 * The dictionary has per device portion and
 */
extern const issu_ltid_dict_entry_t *bcmissu_ltid_dict_get(void);

/*!
 * \brief ISSU callback phases.
 */
typedef enum {
    BCMISSU_PRE_UPGRADE = 0, /*!< Pre upgrade phase */
    BCMISSU_POST_UPGRADE,    /*!< Post upgrade phase */
    BCMISSU_PHASES_COUNT     /*!< MAX enum valud */
} bcmissu_phases_t;

/*!
 * \brief ISSU component action handler callback.
 *
 * This data type is used for component software upgrade
 * activity.
 *
 * This type of function should be used only when a component needs to
 * take action regardless of the changes in the software between
 * versions.
 *
 * This function will always be called upon ISSU event as opposed to a
 * component callback functions which will be called to perform the
 * upgrade to specific version.
 *
 * \param [in] unit The unit associated with the ISSU.
 * \param [in] cat The category of the upgrade (per unit or
 *                 generic). For generic category (\c
 *                 SHR_SYSM_CAT_GENERIC) the \c unit parameter is
 *                 ignored.
 * \param [in] phase The component action can be taken in several
 *                   phases of the ISSU upgrade. This indicates the
 *                   current phase.
 *
 * \return SHR_E_NONE on success and error code otherwise.
 */
typedef int (*bcmissu_comp_action_hlr_f)(int unit,
                                         shr_sysm_categories_t cat,
                                         bcmissu_phases_t phase);

/*!
 * \brief Component action handler information structure.
 *
 * This structure contains the information to specify component actions.
 */
typedef struct {
    const char *component_name;  /*!< The component name string. */
    bcmissu_comp_action_hlr_f func; /*!< The component action function. */
} bcmissu_comp_action_hlr_t;

/*!
 * \brief ISSU component h/w patch callback.
 *
 * This data type is used for component hardware patch activity.
 *
 * \param [in] unit The unit associated with the ISSU.
 *
 * \return SHR_E_NONE on success and error code otherwise.
 */
typedef int (*bcmissu_comp_patch_hdl_f)(int unit);

/*!
 * \brief Patch information structure.
 *
 * This structure contains the information associated with a specific patch.
 */
typedef struct {
    uint32_t id;                    /*!< The patch ID. */
    const char *ver;  /*!< The version where the patch was introduced */
    const char *variant; /*!< The variant associated with this patch */
    bcmissu_comp_patch_hdl_f func; /*!< The patch function. */
} bcmissu_comp_patch_hdl_t;

/*!
 * \brief Retrieve the ISSU pre-upgrade components callback.
 *
 * This function is auto-generated by the ISSU parser and retrieves a
 * structure that contains components callback functions and other
 * associate information for those components that are maintaining their
 * own software upgrade (or part of it).
 *
 * A component that needs to be called should be registered in the
 * component_actions.yml file. Along with that the component should
 * provide a function named \<component_name\>_\<handler\> of the type
 * \ref bcmissu_comp_action_hlr_f. This component function should be
 * in a C file in the issu_dll directory under the component top
 * directory.
 *
 * \return NULL terminated array of component action structuess.
 */
extern const bcmissu_comp_action_hlr_t *bcmissu_pre_upgrade_cb_get(void);

/*!
 * \brief Retrieve the ISSU post-upgrade components callback.
 *
 * This function is auto generated by the ISSU parser and retrieves a
 * structure that contains components callback functions for those
 * components that are maintaining their own software upgrade (or part
 * of it).
 *
 * A component that needs to be called should be registered in the
 * component_actions.yml file. Along with that the component should
 * provide a function named \<component_name\>_\<handler\> of the type
 * \ref bcmissu_comp_action_hlr_f. This component function should be
 * in a C file in the issu_dll directory under the component top
 * directory.
 *
 * \return NULL terminated array of components callback.
 */
extern const bcmissu_comp_action_hlr_t *bcmissu_post_upgrade_cb_get(void);

/*!
 * \brief Obtain the patch list.
 *
 * This function obtains a pointer to an array of patches. The array terminates
 * with the last element patch function being NULL.
 *
 * \return NULL terminated array of patch functions.
 */
extern const bcmissu_comp_patch_hdl_t *bcmissu_patch_list_get(void);

/*!
 * \brief Obtain the root of the enum dictionary.
 *
 * This function is auto generated to obtain the root of the enum dictionary.
 *
 * \param [in] dev The device associated with the dictionary.
 *
 * \return Pointer to the dictionary - Success
 * \return NULL - Failure.
 */
extern const issu_variants_enum_map_t *bcmissu_variants_enum_dict_get(
        const char *dev);

#endif /* ISSU_TYPES_H */

