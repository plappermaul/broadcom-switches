/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *
 * File:	async_req.h
 * Purpose:	Async BCM - request structure
 * Generator:	mkdispatch 1.54
 */

#ifndef	_BCM_INT_ASYNC_REQ_H
#define	_BCM_INT_ASYNC_REQ_H

#include <bcm/types.h>
#include <bcm/async.h>
#include <bcm/auth.h>
#include <bcm/bcmi2c.h>
#include <bcm/bfd.h>
#include <bcm/bregex.h>
#include <bcm/collector.h>
#include <bcm/cosq.h>
#include <bcm/cpri.h>
#include <bcm/custom.h>
#include <bcm/eav.h>
#include <bcm/ecn.h>
#include <bcm/error.h>
#include <bcm/extender.h>
#include <bcm/fabric.h>
#include <bcm/failover.h>
#include <bcm/fcmap.h>
#include <bcm/fcoe.h>
#include <bcm/field.h>
#include <bcm/flexctr.h>
#include <bcm/flexdigest.h>
#include <bcm/flexstate.h>
#include <bcm/flow.h>
#include <bcm/flowtracker.h>
#include <bcm/gdpll.h>
#include <bcm/hash.h>
#include <bcm/ifa.h>
#include <bcm/init.h>
#include <bcm/instru.h>
#include <bcm/int.h>
#include <bcm/ipfix.h>
#include <bcm/ipmc.h>
#include <bcm/ipsec.h>
#include <bcm/knet.h>
#include <bcm/knetsync.h>
#include <bcm/l2.h>
#include <bcm/l2gre.h>
#include <bcm/l3.h>
#include <bcm/latency_monitor.h>
#include <bcm/lb.h>
#include <bcm/link.h>
#include <bcm/macsec.h>
#include <bcm/mcast.h>
#include <bcm/mim.h>
#include <bcm/mirror.h>
#include <bcm/module.h>
#include <bcm/mpls.h>
#include <bcm/multicast.h>
#include <bcm/nat.h>
#include <bcm/niv.h>
#include <bcm/oam.h>
#include <bcm/oob.h>
#include <bcm/pkt.h>
#include <bcm/pktio.h>
#include <bcm/pktio_defs.h>
#include <bcm/policer.h>
#include <bcm/port.h>
#include <bcm/ppp.h>
#include <bcm/proxy.h>
#include <bcm/pstats.h>
#include <bcm/ptp.h>
#include <bcm/qos.h>
#include <bcm/range.h>
#include <bcm/rate.h>
#include <bcm/rx.h>
#include <bcm/sat.h>
#include <bcm/srv6.h>
#include <bcm/stack.h>
#include <bcm/stat.h>
#include <bcm/stg.h>
#include <bcm/subport.h>
#include <bcm/sum.h>
#include <bcm/switch.h>
#include <bcm/tdm.h>
#include <bcm/telemetry.h>
#include <bcm/time.h>
#include <bcm/topo.h>
#include <bcm/trill.h>
#include <bcm/trunk.h>
#include <bcm/tsn.h>
#include <bcm/tunnel.h>
#include <bcm/tx.h>
#include <bcm/txbeacon.h>
#include <bcm/udf.h>
#include <bcm/vlan.h>
#include <bcm/vswitch.h>
#include <bcm/vxlan.h>
#include <bcm/wlan.h>
#include <bcm/xflow_macsec.h>

#ifdef	BCM_ASYNC_SUPPORT

typedef struct bcm_async_req_s {
	struct bcm_async_req_s *next;
	int type;
	void (*run)(struct bcm_async_req_s *);
	bcm_async_cb_t callback;
	void *cookie;
	union {
		struct {
			int unit;
		} _shutdown;
		struct {
			int unit;
			char * type;
			char * subtype;
			int remunit;
		} attach;
		struct {
			int unit;
		} attach_check;
		struct {
			int unit;
			char * type;
			char * subtype;
			int remunit;
		} attach_early_txrx;
		struct {
			int * max_units;
		} attach_max;
		struct {
			int unit;
			bcm_attach_cb_t cb;
			void * user_data;
		} attach_register;
		struct {
			int unit;
			bcm_attach_cb_t cb;
			void * user_data;
		} attach_unregister;
		struct {
			int unit;
		} auth_detach;
		struct {
			int unit;
			int port;
			int * enable;
		} auth_egress_get;
		struct {
			int unit;
			int port;
			int enable;
		} auth_egress_set;
		struct {
			int unit;
		} auth_init;
		struct {
			int unit;
			int port;
			uint8 * mac;
		} auth_mac_add;
		struct {
			int unit;
			bcm_auth_mac_control_t type;
			uint32 * value;
		} auth_mac_control_get;
		struct {
			int unit;
			bcm_auth_mac_control_t type;
			uint32 value;
		} auth_mac_control_set;
		struct {
			int unit;
			int port;
			uint8 * mac;
		} auth_mac_delete;
		struct {
			int unit;
			int port;
		} auth_mac_delete_all;
		struct {
			int unit;
			int port;
			uint32 * modep;
		} auth_mode_get;
		struct {
			int unit;
			int port;
			uint32 mode;
		} auth_mode_set;
		struct {
			int unit;
			bcm_auth_cb_t func;
			void * cookie;
		} auth_unauth_callback;
#ifdef	INCLUDE_BFD
		struct {
			int unit;
			int index;
			bcm_bfd_auth_sha1_t * sha1;
		} bfd_auth_sha1_get;
		struct {
			int unit;
			int index;
			bcm_bfd_auth_sha1_t * sha1;
		} bfd_auth_sha1_set;
		struct {
			int unit;
			int index;
			bcm_bfd_auth_simple_password_t * sp;
		} bfd_auth_simple_password_get;
		struct {
			int unit;
			int index;
			bcm_bfd_auth_simple_password_t * sp;
		} bfd_auth_simple_password_set;
		struct {
			int unit;
		} bfd_detach;
		struct {
			int unit;
			bcm_bfd_discard_stat_t * discarded_info;
		} bfd_discard_stat_get;
		struct {
			int unit;
			bcm_bfd_discard_stat_t * discarded_info;
		} bfd_discard_stat_set;
		struct {
			int unit;
			bcm_bfd_endpoint_info_t * endpoint_info;
		} bfd_endpoint_create;
		struct {
			int unit;
			bcm_bfd_endpoint_t endpoint;
		} bfd_endpoint_destroy;
		struct {
			int unit;
		} bfd_endpoint_destroy_all;
		struct {
			int unit;
			bcm_bfd_endpoint_t endpoint;
			bcm_bfd_endpoint_info_t * endpoint_info;
		} bfd_endpoint_get;
		struct {
			int unit;
			bcm_bfd_endpoint_t endpoint;
		} bfd_endpoint_poll;
		struct {
			int unit;
			bcm_bfd_endpoint_t endpoint;
			bcm_bfd_endpoint_stat_t * ctr_info;
			uint32 options;
		} bfd_endpoint_stat_get;
		struct {
			int unit;
			bcm_bfd_event_types_t event_types;
			bcm_bfd_event_cb cb;
			void * user_data;
		} bfd_event_register;
		struct {
			int unit;
			bcm_bfd_event_types_t event_types;
			bcm_bfd_event_cb cb;
		} bfd_event_unregister;
		struct {
			int unit;
		} bfd_init;
		struct {
			int unit;
			int max_endpoints;
			bcm_bfd_status_t * status_arr;
			int * count;
		} bfd_status_multi_get;
		struct {
			int unit;
		} bfd_tx_start;
		struct {
			int unit;
		} bfd_tx_stop;
#endif	/* INCLUDE_BFD */
		struct {
			int unit;
		} clear;
		struct {
			int unit;
			uint32 options;
			bcm_collector_t * collector_id;
			bcm_collector_info_t * collector_info;
		} collector_create;
		struct {
			int unit;
			bcm_collector_t id;
		} collector_destroy;
		struct {
			int unit;
		} collector_detach;
		struct {
			int unit;
			uint32 options;
			int * export_profile_id;
			bcm_collector_export_profile_t * export_profile_info;
		} collector_export_profile_create;
		struct {
			int unit;
			int export_profile_id;
		} collector_export_profile_destroy;
		struct {
			int unit;
			int export_profile_id;
			bcm_collector_export_profile_t * export_profile_info;
		} collector_export_profile_get;
		struct {
			int unit;
			int max_size;
			int * export_profile_ids_list;
			int * list_size;
		} collector_export_profile_ids_get_all;
		struct {
			int unit;
			bcm_collector_t collector_id;
			bcm_collector_callback_options_t callback_options;
			bcm_collector_export_record_cb_f callback_fn;
			void * userdata;
		} collector_export_record_register;
		struct {
			int unit;
			bcm_collector_t collector_id;
			bcm_collector_callback_options_t callback_options;
			bcm_collector_export_record_cb_f callback_fn;
		} collector_export_record_unregister;
		struct {
			int unit;
			bcm_collector_t id;
			bcm_collector_info_t * collector_info;
		} collector_get;
		struct {
			int unit;
			int max_size;
			bcm_collector_t * collector_list;
			int * list_size;
		} collector_get_all;
		struct {
			int unit;
		} collector_init;
		struct {
			int unit;
			uint32 flags;
			bcm_cosq_bandwidth_fabric_adjust_key_t * key;
			uint32 * bandwidth;
		} cosq_bandwidth_fabric_adjust_get;
		struct {
			int unit;
			uint32 flags;
			bcm_cosq_bandwidth_fabric_adjust_key_t * key;
			uint32 bandwidth;
		} cosq_bandwidth_fabric_adjust_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_bst_stat_id_t bid;
			int array_size;
			bcm_cosq_bst_profile_t * profile_array;
			int * count;
		} cosq_bst_multi_profile_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_bst_stat_id_t bid;
			int array_size;
			bcm_cosq_bst_profile_t * profile_array;
		} cosq_bst_multi_profile_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_bst_stat_id_t bid;
			bcm_cosq_bst_profile_t * profile;
		} cosq_bst_profile_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_bst_stat_id_t bid;
			bcm_cosq_bst_profile_t * profile;
		} cosq_bst_profile_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_bst_stat_id_t bid;
		} cosq_bst_stat_clear;
		struct {
			int unit;
			bcm_cosq_object_id_t * id;
			bcm_bst_stat_id_t bid;
		} cosq_bst_stat_extended_clear;
		struct {
			int unit;
			bcm_cosq_object_id_t * id;
			bcm_bst_stat_id_t bid;
			uint32 options;
			uint64 * value;
		} cosq_bst_stat_extended_get;
		struct {
			int unit;
			bcm_cosq_object_id_t * id;
			bcm_bst_stat_id_t bid;
			uint32 options;
			uint32 * value;
		} cosq_bst_stat_extended_get32;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_bst_stat_id_t bid;
			uint32 options;
			uint64 * value;
		} cosq_bst_stat_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_bst_stat_id_t bid;
			uint32 options;
			uint32 * value;
		} cosq_bst_stat_get32;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 options;
			int max_values;
			bcm_bst_stat_id_t * id_list;
			uint64 * values;
		} cosq_bst_stat_multi_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 options;
			int max_values;
			bcm_bst_stat_id_t * id_list;
			uint32 * values;
		} cosq_bst_stat_multi_get32;
		struct {
			int unit;
			bcm_bst_stat_id_t bid;
		} cosq_bst_stat_sync;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_dir_t direction;
			int array_max;
			bcm_cosq_buffer_id_t * buf_id_array;
			int * array_count;
		} cosq_buffer_id_multi_get;
		struct {
			int unit;
		} cosq_burst_monitor_detach;
		struct {
			int unit;
			uint32 * host_mem_size;
			uint32 ** host_mem_addr;
		} cosq_burst_monitor_dma_config_get;
		struct {
			int unit;
			uint32 host_mem_size;
			uint32 ** host_mem_addr;
		} cosq_burst_monitor_dma_config_set;
		struct {
			int unit;
			bcm_cosq_burst_monitor_flow_view_info_t * flow_view_data;
		} cosq_burst_monitor_flow_view_config_get;
		struct {
			int unit;
			uint32 options;
			bcm_cosq_burst_monitor_flow_view_info_t * flow_view_data;
		} cosq_burst_monitor_flow_view_config_set;
		struct {
			int unit;
		} cosq_burst_monitor_flow_view_data_clear;
		struct {
			int unit;
			uint32 usr_mem_size;
			uint8 * usr_mem_addr;
		} cosq_burst_monitor_flow_view_data_get;
		struct {
			int unit;
			uint32 mem_size;
			uint8 * mem_addr;
			int max_num_flows;
			int view_id;
			uint32 flags;
			int * num_flows;
		} cosq_burst_monitor_flow_view_stats_get;
		struct {
			int unit;
			int max_gports;
			bcm_gport_t * gport_list;
			int * num_gports;
		} cosq_burst_monitor_get;
		struct {
			int unit;
			uint64 * time_usecs;
		} cosq_burst_monitor_get_current_time;
		struct {
			int unit;
		} cosq_burst_monitor_init;
		struct {
			int unit;
			int num_gports;
			bcm_gport_t * gport_list;
		} cosq_burst_monitor_set;
		struct {
			int unit;
			uint32 mem_size;
			uint8 * mem_addr;
			int max_num_views;
			int * num_views;
		} cosq_burst_monitor_view_summary_get;
		struct {
			int unit;
			bcm_cosq_classifier_t * classifier;
			int * classifier_id;
		} cosq_classifier_create;
		struct {
			int unit;
			int classifier_id;
		} cosq_classifier_destroy;
		struct {
			int unit;
			int classifier_id;
			bcm_cosq_classifier_t * classifier;
		} cosq_classifier_get;
		struct {
			int unit;
			bcm_cosq_classifier_t * classifier;
			int array_count;
			bcm_cos_t * priority_array;
			bcm_cos_queue_t * cosq_array;
			int * classifier_id;
		} cosq_classifier_id_get;
		struct {
			int unit;
			bcm_gport_t port;
			int classifier_id;
		} cosq_classifier_mapping_clear;
		struct {
			int unit;
			bcm_gport_t port;
			int classifier_id;
			bcm_gport_t * queue_group;
			bcm_cos_t priority;
			bcm_cos_queue_t * cosq;
		} cosq_classifier_mapping_get;
		struct {
			int unit;
			bcm_gport_t port;
			int classifier_id;
			bcm_gport_t * queue_group;
			int array_max;
			bcm_cos_t * priority_array;
			bcm_cos_queue_t * cosq_array;
			int * array_count;
		} cosq_classifier_mapping_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			int classifier_id;
			bcm_gport_t queue_group;
			int array_count;
			bcm_cos_t * priority_array;
			bcm_cos_queue_t * cosq_array;
		} cosq_classifier_mapping_multi_set;
		struct {
			int unit;
			bcm_gport_t port;
			int classifier_id;
			bcm_gport_t queue_group;
			bcm_cos_t priority;
			bcm_cos_queue_t cosq;
		} cosq_classifier_mapping_set;
		struct {
			int unit;
			int * numq;
		} cosq_config_get;
		struct {
			int unit;
			int numq;
		} cosq_config_set;
		struct {
			int unit;
			int fabric_modid;
			bcm_cosq_congestion_mapping_info_t * mapping_info;
		} cosq_congestion_mapping_get;
		struct {
			int unit;
			int fabric_modid;
			bcm_cosq_congestion_mapping_info_t * mapping_info;
		} cosq_congestion_mapping_set;
		struct {
			int unit;
			bcm_cosq_control_t type;
			bcm_cosq_dynamic_setting_type_t * dynamic;
		} cosq_control_dynamic_get;
		struct {
			int unit;
			bcm_cosq_object_id_t * id;
			bcm_cosq_control_data_t * control;
		} cosq_control_extended_get;
		struct {
			int unit;
			bcm_cosq_object_id_t * id;
			bcm_cosq_control_data_t * control;
		} cosq_control_extended_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cos_queue_t cosq;
			bcm_cosq_control_t type;
			int * arg;
		} cosq_control_get;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flags;
			bcm_cosq_control_range_type_t type;
			bcm_cosq_range_t * range;
		} cosq_control_range_get;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flags;
			bcm_cosq_control_range_type_t type;
			bcm_cosq_range_t * range;
		} cosq_control_range_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cos_queue_t cosq;
			bcm_cosq_control_t type;
			int arg;
		} cosq_control_set;
		struct {
			int unit;
			bcm_cos_queue_t cosq;
			int * enable;
		} cosq_cpu_cosq_enable_get;
		struct {
			int unit;
			bcm_cos_queue_t cosq;
			int enable;
		} cosq_cpu_cosq_enable_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cosq_stat_t stat;
			bcm_cosq_debug_stat_match_t * match;
		} cosq_debug_stat_match_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cosq_stat_t stat;
			bcm_cosq_debug_stat_match_t * match;
		} cosq_debug_stat_match_set;
		struct {
			int unit;
			int delay_tolerance_level;
			bcm_cosq_delay_tolerance_t * delay_tolerance;
		} cosq_delay_tolerance_level_get;
		struct {
			int unit;
			int delay_tolerance_level;
			bcm_cosq_delay_tolerance_t * delay_tolerance;
		} cosq_delay_tolerance_level_set;
		struct {
			int unit;
			bcm_cosq_delay_tolerance_preset_attr_t * preset_attr;
			bcm_cosq_delay_tolerance_t * delay_tolerance;
		} cosq_delay_tolerance_preset_get;
		struct {
			int unit;
			bcm_module_t dest_modid;
			uint32 * credit_size;
		} cosq_dest_credit_size_get;
		struct {
			int unit;
			bcm_module_t dest_modid;
			uint32 credit_size;
		} cosq_dest_credit_size_set;
		struct {
			int unit;
		} cosq_detach;
		struct {
			int unit;
			uint32 * flags;
		} cosq_discard_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_queue_t cosq;
			uint32 color;
			int * drop_start;
			int * drop_slope;
			int * average_time;
		} cosq_discard_port_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_queue_t cosq;
			uint32 color;
			int drop_start;
			int drop_slope;
			int average_time;
		} cosq_discard_port_set;
		struct {
			int unit;
			int * profile_id;
		} cosq_discard_profile_create;
		struct {
			int unit;
			int profile_id;
		} cosq_discard_profile_destroy;
		struct {
			int unit;
			int profile_id;
			int max;
			bcm_cosq_discard_rule_t * rule_array;
			int * rule_count;
		} cosq_discard_profile_get;
		struct {
			int unit;
			int profile_id;
			bcm_cosq_discard_rule_t * rule;
		} cosq_discard_profile_update;
		struct {
			int unit;
			uint32 flags;
		} cosq_discard_set;
		struct {
			int unit;
			bcm_cosq_ebst_control_t type;
			int * arg;
		} cosq_ebst_control_get;
		struct {
			int unit;
			bcm_cosq_ebst_control_t type;
			int arg;
		} cosq_ebst_control_set;
		struct {
			int unit;
			bcm_cosq_object_id_t * object_id;
			bcm_bst_stat_id_t bid;
			int array_size;
			bcm_cosq_ebst_data_entry_t * entry_array;
			int * count;
		} cosq_ebst_data_get;
		struct {
			int unit;
			bcm_cosq_object_id_t * object_id;
			bcm_cosq_ebst_data_stat_info_t * info;
		} cosq_ebst_data_stat_info_get;
		struct {
			int unit;
			int * enable;
		} cosq_ebst_enable_get;
		struct {
			int unit;
			int enable;
		} cosq_ebst_enable_set;
		struct {
			int unit;
			bcm_cosq_object_id_t * object_id;
			bcm_bst_stat_id_t bid;
			bcm_cosq_ebst_monitor_t * monitor;
		} cosq_ebst_monitor_get;
		struct {
			int unit;
			bcm_cosq_object_id_t * object_id;
			bcm_bst_stat_id_t bid;
			bcm_cosq_ebst_monitor_t * monitor;
		} cosq_ebst_monitor_set;
		struct {
			int unit;
			bcm_cosq_object_id_t * object_id;
			bcm_bst_stat_id_t bid;
			bcm_cosq_ebst_threshold_profile_t * profile;
		} cosq_ebst_threshold_profile_get;
		struct {
			int unit;
			bcm_cosq_object_id_t * object_id;
			bcm_bst_stat_id_t bid;
			bcm_cosq_ebst_threshold_profile_t * profile;
		} cosq_ebst_threshold_profile_set;
		struct {
			int unit;
			bcm_cosq_event_types_t event_types;
			bcm_gport_t port;
			bcm_cos_queue_t cosq;
			bcm_cosq_event_cb cb;
			void * user_data;
		} cosq_event_register;
		struct {
			int unit;
			bcm_cosq_event_types_t event_types;
			bcm_gport_t port;
			bcm_cos_queue_t cosq;
			bcm_cosq_event_cb cb;
		} cosq_event_unregister;
		struct {
			int unit;
			bcm_cosq_fc_direction_type_t fc_direction;
			bcm_cosq_fc_endpoint_t * source;
			bcm_cosq_fc_endpoint_t * target;
		} cosq_fc_path_add;
		struct {
			int unit;
			bcm_cosq_fc_direction_type_t fc_direction;
			bcm_cosq_fc_endpoint_t * source;
			bcm_cosq_fc_endpoint_t * target;
		} cosq_fc_path_delete;
		struct {
			int unit;
			bcm_cosq_fc_direction_type_t fc_direction;
			bcm_cosq_fc_endpoint_t * source;
			int target_max;
			bcm_cosq_fc_endpoint_t * target;
			int * target_count;
		} cosq_fc_path_get;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			uint32 key;
			bcm_cosq_generic_control_t type;
			uint32 * arg;
		} cosq_generic_control_get;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			uint32 key;
			bcm_cosq_generic_control_t type;
			uint32 arg;
		} cosq_generic_control_set;
		struct {
			int unit;
			bcm_gport_t port;
			int numq;
			uint32 flags;
			bcm_gport_t * gport;
		} cosq_gport_add;
		struct {
			int unit;
			bcm_gport_t sched_port;
			bcm_gport_t input_port;
			bcm_cos_queue_t cosq;
		} cosq_gport_attach;
		struct {
			int unit;
			bcm_gport_t sched_port;
			bcm_gport_t * input_port;
			bcm_cos_queue_t * cosq;
		} cosq_gport_attach_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 * kbits_sec_min;
			uint32 * kbits_sec_max;
			uint32 * flags;
		} cosq_gport_bandwidth_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 kbits_sec_min;
			uint32 kbits_sec_max;
			uint32 flags;
		} cosq_gport_bandwidth_set;
		struct {
			int unit;
			bcm_gport_t in_gport;
			bcm_cos_queue_t cosq;
			bcm_gport_t * out_gport;
		} cosq_gport_child_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_color_t color;
			uint32 flags;
			bcm_cosq_gport_size_t * gport_size;
		} cosq_gport_color_size_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_color_t color;
			uint32 flags;
			bcm_cosq_gport_size_t * gport_size;
		} cosq_gport_color_size_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_congestion_info_t * config;
		} cosq_gport_congestion_config_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_congestion_info_t * config;
		} cosq_gport_congestion_config_set;
		struct {
			int unit;
			bcm_cosq_gport_connection_t * gport_connect;
		} cosq_gport_connection_get;
		struct {
			int unit;
			bcm_cosq_gport_connection_t * gport_connect;
		} cosq_gport_connection_set;
		struct {
			int unit;
			bcm_gport_t gport;
		} cosq_gport_delete;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_t ingress_port;
			bcm_module_t dest_modid;
			int fabric_egress_port;
		} cosq_gport_destmod_attach;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_t ingress_port;
			bcm_module_t dest_modid;
			int fabric_egress_port;
		} cosq_gport_destmod_detach;
		struct {
			int unit;
			bcm_gport_t sched_port;
			bcm_gport_t input_port;
			bcm_cos_queue_t cosq;
		} cosq_gport_detach;
		struct {
			int unit;
			bcm_cosq_object_id_t * id;
			bcm_cosq_gport_discard_t * discard;
		} cosq_gport_discard_extended_get;
		struct {
			int unit;
			bcm_cosq_object_id_t * id;
			bcm_cosq_gport_discard_t * discard;
		} cosq_gport_discard_extended_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_gport_discard_t * discard;
		} cosq_gport_discard_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_gport_discard_t * discard;
		} cosq_gport_discard_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_dynamic_state_t state;
			int * weight;
		} cosq_gport_dynamic_sched_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_dynamic_state_t state;
			int weight;
		} cosq_gport_dynamic_sched_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_t ingress_pri;
			bcm_color_t ingress_dp;
			bcm_cos_queue_t * offset;
		} cosq_gport_egress_map_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_t ingress_pri;
			bcm_color_t ingress_dp;
			bcm_cos_queue_t offset;
		} cosq_gport_egress_map_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_t * int_pri;
			bcm_cos_t * cos;
			uint32 flags;
		} cosq_gport_egress_mapping_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_t int_pri;
			bcm_cos_t cos;
			uint32 flags;
		} cosq_gport_egress_mapping_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_t ingress_pri;
			bcm_color_t ingress_dp;
			uint32 flags;
			bcm_cosq_egress_multicast_config_t * config;
		} cosq_gport_egress_multicast_config_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_t ingress_pri;
			bcm_color_t ingress_dp;
			uint32 flags;
			bcm_cosq_egress_multicast_config_t * config;
		} cosq_gport_egress_multicast_config_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int * enable;
		} cosq_gport_enable_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int enable;
		} cosq_gport_enable_set;
		struct {
			int unit;
			uint32 flags;
			bcm_cosq_fadt_info_t * fadt_info;
			bcm_cosq_fadt_threshold_t * threshold;
		} cosq_gport_fadt_threshold_get;
		struct {
			int unit;
			uint32 flags;
			bcm_cosq_fadt_info_t * fadt_info;
			bcm_cosq_fadt_threshold_t * threshold;
		} cosq_gport_fadt_threshold_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cos_t int_pri;
			uint32 * flow_control_mask;
		} cosq_gport_flow_control_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cos_t int_pri;
			uint32 flow_control_mask;
		} cosq_gport_flow_control_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_gport_t * physical_port;
			int * num_cos_levels;
			uint32 * flags;
		} cosq_gport_get;
		struct {
			int unit;
			bcm_core_t core;
			bcm_cosq_gport_info_core_t * gport_info;
			bcm_gport_t * out_gport;
		} cosq_gport_handle_core_get;
		struct {
			int unit;
			bcm_cosq_gport_type_t gport_type;
			bcm_cosq_gport_info_t * gport_info;
		} cosq_gport_handle_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cosq_gport_level_info_t * info;
		} cosq_gport_info_get;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_cos_t int_pri;
			uint32 flags;
			bcm_gport_t * gport;
			bcm_cos_queue_t * cosq;
		} cosq_gport_mapping_get;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_cos_t int_pri;
			uint32 flags;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
		} cosq_gport_mapping_set;
		struct {
			int unit;
			bcm_gport_t multipath_gport;
			bcm_gport_t member_gport;
			bcm_cos_queue_t member_gport_cosq;
		} cosq_gport_multipath_add;
		struct {
			int unit;
			bcm_gport_t multipath_gport;
			bcm_gport_t member_gport;
			bcm_cos_queue_t member_gport_cosq;
		} cosq_gport_multipath_delete;
		struct {
			int unit;
			bcm_gport_t multipath_gport;
			int member_gport_max;
			bcm_gport_t * member_gport_array;
			bcm_cos_queue_t * member_gport_cosq_array;
			int * member_gport_count;
		} cosq_gport_multipath_get;
		struct {
			int unit;
			bcm_gport_t child_port;
			bcm_cos_queue_t cos;
			bcm_gport_t * parent_port;
		} cosq_gport_parent_get;
		struct {
			int unit;
			bcm_cosq_pkt_size_adjust_info_t * adjust_info;
			int * delta;
		} cosq_gport_pkt_size_adjust_get;
		struct {
			int unit;
			bcm_cosq_pkt_size_adjust_info_t * adjust_info;
			int delta;
		} cosq_gport_pkt_size_adjust_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_pon_link_sla_t * link_sla;
		} cosq_gport_pon_link_sla_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_pon_link_sla_t * link_sla;
		} cosq_gport_pon_link_sla_set;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t ingress_queue;
			bcm_cos_t ingress_int_pri;
			bcm_gport_t egress_queue;
			bcm_cos_t egress_int_pri;
			int * attach_id;
		} cosq_gport_queue_attach;
		struct {
			int unit;
			bcm_gport_t ingress_queue;
			bcm_cos_t ingress_int_pri;
			bcm_gport_t * egress_queue;
			bcm_cos_t * egress_int_pri;
			int attach_id;
		} cosq_gport_queue_attach_get;
		struct {
			int unit;
			bcm_gport_t ingress_queue;
			bcm_cos_t ingress_int_pri;
			int attach_id;
		} cosq_gport_queue_detach;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			int count;
			bcm_cosq_queue_offset_mapping_key_t * key_array;
			bcm_cosq_queue_offset_t * offset_array;
		} cosq_gport_queue_offset_mapping_get;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			int count;
			bcm_cosq_queue_offset_mapping_key_t * key_array;
			bcm_cosq_queue_offset_t * offset_array;
		} cosq_gport_queue_offset_mapping_set;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			bcm_cosq_rate_class_create_info_t * create_info;
		} cosq_gport_rate_class_create;
		struct {
			int unit;
			bcm_gport_t sched_port;
			bcm_gport_t input_port;
			bcm_cos_queue_t cosq;
		} cosq_gport_reattach;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_report_threshold_t * threshold;
		} cosq_gport_report_threshold_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_report_threshold_t * threshold;
		} cosq_gport_report_threshold_set;
		struct {
			int unit;
			bcm_gport_t gport;
			int sched_mode;
			int int_pri;
			uint32 * flags;
		} cosq_gport_sched_config_get;
		struct {
			int unit;
			bcm_gport_t gport;
			int sched_mode;
			int int_pri;
			uint32 flags;
		} cosq_gport_sched_config_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int * mode;
			int * weight;
		} cosq_gport_sched_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int mode;
			int weight;
		} cosq_gport_sched_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 * bytes_min;
			uint32 * bytes_max;
		} cosq_gport_size_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 bytes_min;
			uint32 bytes_max;
		} cosq_gport_size_set;
		struct {
			int unit;
			bcm_gport_t gport;
			int * enable;
		} cosq_gport_stat_enable_get;
		struct {
			int unit;
			bcm_gport_t gport;
			int enable;
		} cosq_gport_stat_enable_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_gport_stats_t stat;
			uint64 * value;
		} cosq_gport_stat_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_gport_stats_t stat;
			uint64 value;
		} cosq_gport_stat_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_gport_stats_t stat;
			uint64 * value;
		} cosq_gport_stat_sync_get;
		struct {
			int unit;
			uint32 flags;
			bcm_cosq_static_threshold_info_t * thresh_info;
			bcm_cosq_static_threshold_t * threshold;
		} cosq_gport_static_threshold_get;
		struct {
			int unit;
			uint32 flags;
			bcm_cosq_static_threshold_info_t * thresh_info;
			bcm_cosq_static_threshold_t * threshold;
		} cosq_gport_static_threshold_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_gport_t lgl_gport;
			bcm_cos_queue_t cosq;
			int stat_count;
			bcm_cosq_gport_stats_t * stats_array;
			int value_count;
			uint64 * value_array;
		} cosq_gport_statistic_multi_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_gport_t lgl_gport;
			bcm_cos_queue_t cosq;
			int stat_count;
			bcm_cosq_gport_stats_t * stats_array;
			uint64 value;
		} cosq_gport_statistic_multi_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_threshold_t * threshold;
		} cosq_gport_threshold_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_threshold_t * threshold;
		} cosq_gport_threshold_set;
		struct {
			int unit;
			bcm_cosq_gport_traverse_cb cb;
			void * user_data;
		} cosq_gport_traverse;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cosq_gport_traverse_cb cb;
			void * user_data;
		} cosq_gport_traverse_by_port;
		struct {
			int unit;
			bcm_gport_t vsq;
			bcm_gport_t queue;
			bcm_cos_queue_t cosq;
		} cosq_gport_vsq_add;
		struct {
			int unit;
			bcm_cosq_vsq_info_t * vsq_info;
			bcm_gport_t * vsq_gport;
		} cosq_gport_vsq_create;
		struct {
			int unit;
			bcm_gport_t vsq;
			bcm_gport_t queue;
			bcm_cos_queue_t cosq;
		} cosq_gport_vsq_delete;
		struct {
			int unit;
			bcm_gport_t vsq;
		} cosq_gport_vsq_delete_all;
		struct {
			int unit;
			bcm_gport_t vsq_gport;
		} cosq_gport_vsq_destroy;
		struct {
			int unit;
			bcm_gport_t vsq;
			int queue_max;
			bcm_gport_t * queue_array;
			bcm_cos_queue_t * cosq_array;
			int * queue_count;
		} cosq_gport_vsq_get;
		struct {
			int unit;
			int hdrm_pool;
			int num_lossless_class;
			int arr_size;
			bcm_cosq_pkt_size_dist_t * pkt_dist_array;
		} cosq_hdrm_pool_limit_set;
		struct {
			int unit;
			bcm_cosq_icgm_resource_stat_key_t * stat_key;
			uint64 * value;
		} cosq_icgm_resource_stat_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 control_frame_index;
			bcm_cosq_ingress_drop_control_frame_config_t * control_frame_config;
		} cosq_ingress_port_drop_control_frame_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 control_frame_index;
			bcm_cosq_ingress_drop_control_frame_config_t * control_frame_config;
		} cosq_ingress_port_drop_control_frame_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 ether_type_code;
			uint32 * ether_type_val;
		} cosq_ingress_port_drop_custom_ether_type_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 ether_type_code;
			uint32 ether_type_val;
		} cosq_ingress_port_drop_custom_ether_type_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 * default_priority;
		} cosq_ingress_port_drop_default_priority_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 default_priority;
		} cosq_ingress_port_drop_default_priority_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			int * enable_mode;
		} cosq_ingress_port_drop_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			int enable_mode;
		} cosq_ingress_port_drop_enable_set;
		struct {
			int unit;
			bcm_cosq_ingress_drop_flex_key_construct_id_t * key_id;
			uint32 flags;
			bcm_cosq_ingress_drop_flex_key_construct_t * flex_key_config;
		} cosq_ingress_port_drop_flex_key_construct_get;
		struct {
			int unit;
			bcm_cosq_ingress_drop_flex_key_construct_id_t * key_id;
			uint32 flags;
			bcm_cosq_ingress_drop_flex_key_construct_t * flex_key_config;
		} cosq_ingress_port_drop_flex_key_construct_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 key_index;
			bcm_cosq_ingress_drop_flex_key_entry_t * flex_key_info;
		} cosq_ingress_port_drop_flex_key_entry_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 key_index;
			bcm_cosq_ingress_drop_flex_key_entry_t * flex_key_info;
		} cosq_ingress_port_drop_flex_key_entry_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_cosq_ingress_port_drop_map_t map;
			uint32 key;
			int * priority;
		} cosq_ingress_port_drop_map_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_cosq_ingress_port_drop_map_t map;
			uint32 key;
			int priority;
		} cosq_ingress_port_drop_map_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 label_index;
			bcm_cosq_ingress_port_drop_mpls_special_label_config_t * label_config;
		} cosq_ingress_port_drop_mpls_special_label_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 label_index;
			bcm_cosq_ingress_port_drop_mpls_special_label_config_t * label_config;
		} cosq_ingress_port_drop_mpls_special_label_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			int priority;
			uint32 * value;
		} cosq_ingress_port_drop_threshold_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			int priority;
			uint32 value;
		} cosq_ingress_port_drop_threshold_set;
		struct {
			int unit;
			bcm_cosq_ingress_queue_bundle_gport_config_t * config;
			bcm_gport_t * gport;
		} cosq_ingress_queue_bundle_gport_add;
		struct {
			int unit;
		} cosq_init;
		struct {
			int unit;
			uint32 flags;
			bcm_cosq_inst_congestion_info_key_t * key;
			bcm_cosq_inst_congestion_info_data_t * data;
		} cosq_inst_congestion_info_get;
		struct {
			int unit;
			int flags;
			bcm_gport_t * profile_gport;
		} cosq_latency_profile_create;
		struct {
			int unit;
			int flags;
			bcm_gport_t profile_gport;
		} cosq_latency_profile_destroy;
		struct {
			int unit;
			bcm_cos_t priority;
			bcm_cos_queue_t * cosq;
		} cosq_mapping_get;
		struct {
			int unit;
			bcm_cos_t priority;
			bcm_cos_queue_t cosq;
		} cosq_mapping_set;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			int max_count;
			bcm_cosq_max_latency_pkts_t * max_latency_pkts;
			int * actual_count;
		} cosq_max_latency_pkts_get;
		struct {
			int unit;
			uint32 flags;
			int group_id;
			bcm_cosq_mirror_on_drop_group_info_t * group_info;
		} cosq_mirror_on_drop_group_get;
		struct {
			int unit;
			uint32 flags;
			int group_id;
			bcm_cosq_mirror_on_drop_group_info_t * group_info;
		} cosq_mirror_on_drop_group_set;
		struct {
			int unit;
			bcm_cosq_mod_control_t * control;
		} cosq_mod_control_get;
		struct {
			int unit;
			bcm_cosq_mod_control_t * control;
		} cosq_mod_control_set;
		struct {
			int unit;
			uint32 options;
			int * profile_id;
		} cosq_mod_profile_create;
		struct {
			int unit;
			int profile_id;
		} cosq_mod_profile_destroy;
		struct {
			int unit;
			int profile_id;
			bcm_cosq_mod_profile_t * profile;
		} cosq_mod_profile_get;
		struct {
			int unit;
			int profile_id;
			bcm_cosq_mod_profile_t * profile;
		} cosq_mod_profile_set;
		struct {
			int unit;
			bcm_cosq_object_id_t * id;
			bcm_cosq_mod_stat_t stat;
			uint64 * value;
		} cosq_mod_stat_get;
		struct {
			int unit;
			bcm_cosq_object_id_t * id;
			bcm_cosq_mod_stat_t stat;
			uint64 value;
		} cosq_mod_stat_set;
		struct {
			int unit;
			int profile_id;
			int max_count;
			bcm_cosq_pfc_class_map_config_t * config_array;
			int * count;
		} cosq_pfc_class_config_profile_get;
		struct {
			int unit;
			int profile_id;
			int count;
			bcm_cosq_pfc_class_map_config_t * config_array;
		} cosq_pfc_class_config_profile_set;
		struct {
			int unit;
			bcm_gport_t port;
			int array_max;
			bcm_cosq_pfc_class_mapping_t * mapping_array;
			int * array_count;
		} cosq_pfc_class_mapping_get;
		struct {
			int unit;
			bcm_gport_t port;
			int array_count;
			bcm_cosq_pfc_class_mapping_t * mapping_array;
		} cosq_pfc_class_mapping_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_cosq_pfc_config_t * config;
		} cosq_pfc_config_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_cosq_pfc_config_t * config;
		} cosq_pfc_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cosq_pfc_dd_recovery_mode_t * recovery_mode;
		} cosq_pfc_dd_recovery_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cosq_pfc_dd_recovery_mode_t recovery_mode;
		} cosq_pfc_dd_recovery_mode_set;
		struct {
			int unit;
			int priority;
			bcm_cosq_pfc_deadlock_config_t * config;
		} cosq_pfc_deadlock_config_get;
		struct {
			int unit;
			int priority;
			bcm_cosq_pfc_deadlock_config_t * config;
		} cosq_pfc_deadlock_config_set;
		struct {
			int unit;
			bcm_port_t port;
			int pfc_priority;
			bcm_cosq_pfc_deadlock_control_t type;
			int * arg;
		} cosq_pfc_deadlock_control_get;
		struct {
			int unit;
			bcm_port_t port;
			int pfc_priority;
			bcm_cosq_pfc_deadlock_control_t type;
			int arg;
		} cosq_pfc_deadlock_control_set;
		struct {
			int unit;
			int priority;
			bcm_cosq_pfc_deadlock_info_t * pfc_deadlock_info;
		} cosq_pfc_deadlock_info_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cosq_pfc_deadlock_queue_config_t * q_config;
		} cosq_pfc_deadlock_queue_config_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cosq_pfc_deadlock_queue_config_t * q_config;
		} cosq_pfc_deadlock_queue_config_set;
		struct {
			int unit;
			bcm_gport_t gport;
			uint8 * deadlock_status;
		} cosq_pfc_deadlock_queue_status_get;
		struct {
			int unit;
			bcm_cosq_pfc_deadlock_recovery_event_cb_t callback;
			void * userdata;
		} cosq_pfc_deadlock_recovery_event_register;
		struct {
			int unit;
			bcm_cosq_pfc_deadlock_recovery_event_cb_t callback;
			void * userdata;
		} cosq_pfc_deadlock_recovery_event_unregister;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_t cosq;
		} cosq_pfc_deadlock_recovery_exit;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_t cosq;
		} cosq_pfc_deadlock_recovery_start;
		struct {
			int unit;
			int delta;
			int * final_delta;
		} cosq_pkt_size_adjust_delta_map_get;
		struct {
			int unit;
			int delta;
			int final_delta;
		} cosq_pkt_size_adjust_delta_map_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_queue_t cosq;
			uint32 * kbits_sec_min;
			uint32 * kbits_sec_max;
			uint32 * flags;
		} cosq_port_bandwidth_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_queue_t cosq;
			uint32 kbits_sec_min;
			uint32 kbits_sec_max;
			uint32 flags;
		} cosq_port_bandwidth_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_t priority;
			bcm_cos_queue_t * cosq;
		} cosq_port_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			int count;
			bcm_cos_t * priority_array;
			bcm_cos_queue_t * cosq_array;
		} cosq_port_mapping_multi_get;
		struct {
			int unit;
			bcm_port_t port;
			int count;
			bcm_cos_t * priority_array;
			bcm_cos_queue_t * cosq_array;
		} cosq_port_mapping_multi_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_t priority;
			bcm_cos_queue_t cosq;
		} cosq_port_mapping_set;
		struct {
			int unit;
			bcm_port_t port;
			int * arg;
		} cosq_port_optimized_pfc_group_num_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 pri_bmp;
			int cable_len;
			int arr_size;
			bcm_cosq_pkt_size_dist_t * pkt_dist_array;
		} cosq_port_prigrp_hdrm_set;
		struct {
			int unit;
			bcm_port_t port;
			int priority_group_id;
			bcm_cosq_port_prigroup_control_t type;
			int * arg;
		} cosq_port_priority_group_property_get;
		struct {
			int unit;
			bcm_port_t port;
			int priority_group_id;
			bcm_cosq_port_prigroup_control_t type;
			int arg;
		} cosq_port_priority_group_property_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cosq_profile_type_t profile_type;
			int * profile_id;
		} cosq_port_profile_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cosq_profile_type_t profile_type;
			int profile_id;
		} cosq_port_profile_set;
		struct {
			int unit;
			bcm_pbmp_t pbm;
			int weight_arr_size;
			int * weights;
			int * weight_arr_count;
			int * mode;
		} cosq_port_sched_config_get;
		struct {
			int unit;
			bcm_pbmp_t pbm;
			int mode;
			int weight_arr_size;
			int * weights;
		} cosq_port_sched_config_set;
		struct {
			int unit;
			bcm_pbmp_t pbm;
			int * mode;
			int * weights;
			int * delay;
		} cosq_port_sched_get;
		struct {
			int unit;
			bcm_pbmp_t pbm;
			int mode;
			int * weights;
			int delay;
		} cosq_port_sched_set;
		struct {
			int unit;
			int start_queue;
			int end_queue;
			int * pri_profile_id;
		} cosq_priority_get;
		struct {
			int unit;
			int profile_index;
			bcm_cosq_priority_group_mapping_profile_type_t type;
			int array_max;
			int * arg;
			int * array_count;
		} cosq_priority_group_mapping_profile_get;
		struct {
			int unit;
			int profile_index;
			bcm_cosq_priority_group_mapping_profile_type_t type;
			int array_count;
			int * arg;
		} cosq_priority_group_mapping_profile_set;
		struct {
			int unit;
			int profile_id;
			int array_max;
			int * pg_array;
			int * array_count;
		} cosq_priority_group_pfc_priority_mapping_profile_get;
		struct {
			int unit;
			int profile_id;
			int array_count;
			int * pg_array;
		} cosq_priority_group_pfc_priority_mapping_profile_set;
		struct {
			int unit;
			bcm_gport_t gport;
			int index;
			bcm_cosq_priority_mapping_t type;
			int pri_max;
			int * pri_array;
			int * pri_count;
		} cosq_priority_mapping_get_all;
		struct {
			int unit;
			int pri_profile_id;
			int * count;
			bcm_cosq_gport_priority_profile_t * pri_profile;
		} cosq_priority_profile_get;
		struct {
			int unit;
			int pri_profile_id;
			int count;
			bcm_cosq_gport_priority_profile_t * pri_profile;
		} cosq_priority_profile_set;
		struct {
			int unit;
			int start_queue;
			int end_queue;
			int pri_profile_id;
		} cosq_priority_set;
		struct {
			int unit;
			bcm_cosq_profile_type_t profile_type;
			int profile_id;
			int * in_use;
		} cosq_profile_info_inuse_get;
		struct {
			int unit;
			bcm_cosq_profile_type_t profile_type;
			int profile_id;
			int max_port_count;
			bcm_port_t * port_list;
			int * port_count;
		} cosq_profile_info_portlist_get;
		struct {
			int unit;
			bcm_gport_t gport_to_map;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_switch_profile_mapping_t * profile_mapping;
		} cosq_profile_mapping_get;
		struct {
			int unit;
			bcm_gport_t gport_to_map;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_switch_profile_mapping_t * profile_mapping;
		} cosq_profile_mapping_set;
		struct {
			int unit;
			bcm_cosq_profile_type_t profile_type;
			bcm_cosq_dynamic_setting_type_t * dynamic;
		} cosq_profile_property_dynamic_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_cosq_qcn_config_t * config;
		} cosq_qcn_config_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_cosq_qcn_config_t * config;
		} cosq_qcn_config_set;
		struct {
			int unit;
			uint32 flags;
			bcm_cosq_resource_t resource;
			bcm_cosq_allocation_entity_t * target;
			bcm_cosq_resource_amounts_t * amounts;
		} cosq_resource_allocation_get;
		struct {
			int unit;
			uint32 flags;
			bcm_cosq_resource_t resource;
			bcm_cosq_allocation_entity_t * target;
			bcm_cosq_resource_amounts_t * amounts;
		} cosq_resource_allocation_set;
		struct {
			int unit;
			bcm_gport_t port;
			int array_max;
			bcm_cosq_safc_class_mapping_t * mapping_array;
			int * array_count;
		} cosq_safc_class_mapping_get;
		struct {
			int unit;
			bcm_gport_t port;
			int array_count;
			bcm_cosq_safc_class_mapping_t * mapping_array;
		} cosq_safc_class_mapping_set;
		struct {
			int unit;
			int weight_arr_size;
			int * weights;
			int * weight_arr_count;
			int * mode;
		} cosq_sched_config_get;
		struct {
			int unit;
			int mode;
			int weight_arr_size;
			int * weights;
		} cosq_sched_config_set;
		struct {
			int unit;
			int * mode;
			int * weights;
			int * delay;
		} cosq_sched_get;
		struct {
			int unit;
			int mode;
			int * weights;
			int delay;
		} cosq_sched_set;
		struct {
			int unit;
			int mode;
			int * weight_max;
		} cosq_sched_weight_max_get;
		struct {
			int unit;
			int profile_index;
			int array_max;
			bcm_cosq_mapping_t * cosq_mapping_arr;
			int * size;
		} cosq_schedq_mapping_get;
		struct {
			int unit;
			int profile_index;
			int size;
			bcm_cosq_mapping_t * cosq_mapping_arr;
		} cosq_schedq_mapping_set;
		struct {
			int unit;
			uint32 flags;
			bcm_cosq_scheduler_gport_params_t * params;
			bcm_gport_t * gport;
		} cosq_scheduler_gport_add;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			bcm_cosq_scheduler_gport_params_t * params;
		} cosq_scheduler_gport_get;
		struct {
			int unit;
			bcm_service_pool_id_t id;
			bcm_cosq_service_pool_t * cosq_service_pool;
		} cosq_service_pool_get;
		struct {
			int unit;
			bcm_cosq_service_pool_override_type_t type;
			bcm_service_pool_id_t * service_pool;
			int * enable;
		} cosq_service_pool_override_get;
		struct {
			int unit;
			bcm_cosq_service_pool_override_type_t type;
			bcm_service_pool_id_t service_pool;
			int enable;
		} cosq_service_pool_override_set;
		struct {
			int unit;
			bcm_service_pool_id_t id;
			bcm_cosq_service_pool_t cosq_service_pool;
		} cosq_service_pool_set;
		struct {
			int unit;
			bcm_cosq_slow_level_t * slow_level;
			bcm_cosq_slow_profile_attributes_t * attr;
		} cosq_slow_profile_get;
		struct {
			int unit;
			bcm_cosq_slow_level_t * slow_level;
			bcm_cosq_slow_profile_attributes_t * attr;
		} cosq_slow_profile_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cosq_src_vsqs_gport_config_t * config;
			bcm_gport_t * src_port_vsq_gport;
			bcm_gport_t * pg_base_vsq_gport;
		} cosq_src_vsqs_gport_add;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cosq_src_vsqs_gport_config_t * config;
			bcm_gport_t * src_port_vsq_gport;
			bcm_gport_t * pg_base_vsq_gport;
		} cosq_src_vsqs_gport_get;
		struct {
			int unit;
			int stat_count;
			bcm_cosq_stat_t * stat_array;
		} cosq_stat_config_get;
		struct {
			int unit;
			int stat_count;
			bcm_cosq_stat_t * stat_array;
		} cosq_stat_config_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint64 * value;
		} cosq_stat_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint32 * value;
		} cosq_stat_get32;
		struct {
			int unit;
			int flags;
			bcm_cosq_stat_info_key_t * key;
			bcm_cosq_stat_info_t * config;
		} cosq_stat_info_get;
		struct {
			int unit;
			int flags;
			bcm_cosq_stat_info_key_t * key;
			bcm_cosq_stat_info_t * config;
		} cosq_stat_info_set;
		struct {
			int unit;
			int flags;
			bcm_cosq_obj_map_key_t * key;
			uint32 * object_stat_id;
		} cosq_stat_obj_map_get;
		struct {
			int unit;
			int flags;
			bcm_cosq_obj_map_key_t * key;
			uint32 object_stat_id;
		} cosq_stat_obj_map_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint64 value;
		} cosq_stat_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint32 value;
		} cosq_stat_set32;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint64 * value;
		} cosq_stat_sync_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint32 * value;
		} cosq_stat_sync_get32;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int nstat;
			bcm_cosq_stat_t * stat_arr;
			uint64 * value_arr;
		} cosq_stat_sync_multi_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int nstat;
			bcm_cosq_stat_t * stat_arr;
			uint32 * value_arr;
		} cosq_stat_sync_multi_get32;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cosq_subport_congestion_type_t congestion_type;
			bcm_cosq_subport_congestion_config_t * congestion_config;
		} cosq_subport_congestion_config_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cosq_subport_congestion_type_t congestion_type;
			bcm_cosq_subport_congestion_config_t * congestion_config;
		} cosq_subport_congestion_config_set;
		struct {
			int unit;
			bcm_gport_t subport;
			bcm_gport_t * sched_port;
		} cosq_subport_flow_control_get;
		struct {
			int unit;
			bcm_gport_t subport;
			bcm_gport_t sched_port;
		} cosq_subport_flow_control_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_subport_cos_to_pfc_pri_map_t * cos_to_pfc_map;
		} cosq_subport_pfc_class_mapping_get;
		struct {
			int unit;
			bcm_gport_t subport_gport;
			bcm_subport_cos_to_pfc_pri_map_t * cos_to_pfc_map;
			int * cos_to_pfc_map_profile_id;
		} cosq_subport_pfc_class_mapping_set;
		struct {
			int unit;
			bcm_cosq_subscriber_map_t * map;
		} cosq_subscriber_map_add;
		struct {
			int unit;
			bcm_cosq_subscriber_map_t * map;
		} cosq_subscriber_map_delete;
		struct {
			int unit;
		} cosq_subscriber_map_delete_all;
		struct {
			int unit;
			bcm_cosq_subscriber_map_t * map;
		} cosq_subscriber_map_get;
		struct {
			int unit;
			bcm_cosq_subscriber_map_traverse_cb cb;
			void * user_data;
		} cosq_subscriber_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t sysport;
			bcm_gport_t * ingress_queue;
		} cosq_sysport_ingress_queue_map_get;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t sysport;
			bcm_gport_t ingress_queue;
		} cosq_sysport_ingress_queue_map_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cosq_tas_control_t type;
			int * arg;
		} cosq_tas_control_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cosq_tas_control_t type;
			int arg;
		} cosq_tas_control_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cosq_tas_profile_id_t pid;
		} cosq_tas_profile_commit;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cosq_tas_profile_t * profile;
			bcm_cosq_tas_profile_id_t * pid;
		} cosq_tas_profile_create;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cosq_tas_profile_id_t pid;
		} cosq_tas_profile_destroy;
		struct {
			int unit;
			bcm_gport_t port;
		} cosq_tas_profile_destroy_all;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cosq_tas_profile_id_t pid;
			bcm_cosq_tas_profile_t * profile;
		} cosq_tas_profile_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cosq_tas_profile_id_t pid;
			bcm_cosq_tas_profile_t * profile;
		} cosq_tas_profile_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cosq_tas_profile_id_t pid;
			bcm_cosq_tas_profile_status_t * status;
		} cosq_tas_profile_status_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cosq_tas_profile_traverse_cb cb;
			void * user_data;
		} cosq_tas_profile_traverse;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cosq_tas_status_t type;
			int * arg;
		} cosq_tas_status_get;
#ifdef	INCLUDE_TCB
		struct {
			int unit;
			bcm_cosq_buffer_id_t buffer_id;
			int array_max;
			bcm_cosq_tcb_buffer_t * buffer_array;
			int * array_count;
		} cosq_tcb_buffer_multi_get;
		struct {
			int unit;
			bcm_cosq_tcb_callback_t fn;
			void * user_data;
		} cosq_tcb_cb_register;
		struct {
			int unit;
			bcm_cosq_tcb_callback_t fn;
		} cosq_tcb_cb_unregister;
		struct {
			int unit;
			bcm_cosq_buffer_id_t buffer_id;
			bcm_cosq_tcb_config_t * config;
		} cosq_tcb_config_get;
		struct {
			int unit;
			bcm_cosq_buffer_id_t buffer_id;
			bcm_cosq_tcb_config_t * config;
		} cosq_tcb_config_set;
		struct {
			int unit;
			int buffer_id;
			bcm_cosq_tcb_control_t type;
			int * arg;
		} cosq_tcb_control_get;
		struct {
			int unit;
			bcm_cosq_buffer_id_t buffer_id;
			bcm_cosq_tcb_control_t type;
			int arg;
		} cosq_tcb_control_set;
		struct {
			int unit;
			bcm_cosq_buffer_id_t buffer_id;
			int array_max;
			bcm_cosq_tcb_event_t * event_array;
			int * array_count;
			int * overflow_count;
		} cosq_tcb_event_multi_get;
		struct {
			int unit;
			bcm_cosq_object_id_t * id;
			int * profile_index;
		} cosq_tcb_gport_threshold_mapping_get;
		struct {
			int unit;
			bcm_cosq_object_id_t * id;
			int profile_index;
		} cosq_tcb_gport_threshold_mapping_set;
		struct {
			int unit;
			int flags;
			bcm_cosq_buffer_id_t buffer_id;
			bcm_cosq_tcb_threshold_profile_t * threshold;
			int * profile_index;
		} cosq_tcb_threshold_profile_create;
		struct {
			int unit;
			bcm_cosq_buffer_id_t buffer_id;
			int profile_index;
		} cosq_tcb_threshold_profile_destroy;
		struct {
			int unit;
			bcm_cosq_buffer_id_t buffer_id;
			int profile_index;
			bcm_cosq_tcb_threshold_profile_t * threshold;
		} cosq_tcb_threshold_profile_get;
#endif	/* INCLUDE_TCB */
		struct {
			int unit;
			bcm_cosq_voq_connector_gport_t * config;
			bcm_gport_t * gport;
		} cosq_voq_connector_gport_add;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cosq_voq_connector_gport_t * config;
		} cosq_voq_connector_gport_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_decap_presentation_config_t * config;
		} cpri_decap_presentation_time_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_decap_presentation_config_t * config;
		} cpri_decap_presentation_time_config_set;
		struct {
			int unit;
		} cpri_detach;
		struct {
			int unit;
			int port;
			uint32 tag_id;
			uint32 flow_id;
		} cpri_encap_control_queue_tag_to_flow_id_map_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_presentation_ts_attribute_t attribute;
			bcm_cpri_presentation_time_t * time_offset;
		} cpri_encap_presentation_time_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_presentation_ts_attribute_t attribute;
			bcm_cpri_presentation_time_t * time;
		} cpri_encap_presentation_time_config_set;
		struct {
			int unit;
		} cpri_init;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_dir_t direction;
			bcm_cpri_1588_capture_config_t * config;
		} cpri_port_1588_timestamp_capture_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_dir_t direction;
			bcm_cpri_1588_capture_config_t * config;
		} cpri_port_1588_timestamp_capture_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_dir_t direction;
			bcm_cpri_1588_config_t * config;
		} cpri_port_1588_timestamp_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_dir_t direction;
			bcm_cpri_1588_config_t * config;
		} cpri_port_1588_timestamp_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_dir_t direction;
			bcm_cpri_1588_ts_type_t type;
			int max_count;
			int * count;
			bcm_cpri_1588_timestamp_t * ts_list;
		} cpri_port_1588_timestamp_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_dir_t direction;
			bcm_cpri_1588_ts_type_t type;
			bcm_cpri_1588_timestamp_ts_config_t * config;
		} cpri_port_1588_timestamp_ts_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_dir_t direction;
			bcm_cpri_1588_ts_type_t type;
			bcm_cpri_1588_timestamp_ts_config_t * config;
		} cpri_port_1588_timestamp_ts_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_dir_t dir;
			int * enable;
			bcm_cpri_port_agnostic_config_t * config;
		} cpri_port_agnostic_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_dir_t dir;
			int enable;
			bcm_cpri_port_agnostic_config_t * config;
		} cpri_port_agnostic_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			int max_depth;
			int * table_depth;
			uint32 * comp_table;
		} cpri_port_compression_lookup_table_get;
		struct {
			int unit;
			bcm_gport_t port;
			int table_depth;
			uint32 * comp_table;
		} cpri_port_compression_lookup_table_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * threshold_value;
		} cpri_port_compression_saturation_config_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 threshold_value;
		} cpri_port_compression_saturation_config_set;
		struct {
			int unit;
			int port;
			bcm_cpri_fast_eth_config_info_t * config;
		} cpri_port_cw_fast_eth_config_get;
		struct {
			int unit;
			int port;
			bcm_cpri_fast_eth_config_info_t * config;
		} cpri_port_cw_fast_eth_config_set;
		struct {
			int unit;
			int port;
			bcm_cpri_slow_hdlc_config_info_t * config;
		} cpri_port_cw_slow_hdlc_config_get;
		struct {
			int unit;
			int port;
			bcm_cpri_slow_hdlc_config_info_t * config;
		} cpri_port_cw_slow_hdlc_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_debug_attr_t type;
			int index;
		} cpri_port_debug_clear;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_debug_attr_t type;
			int index;
			int buffer_size;
			uint32 * data;
		} cpri_port_debug_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_debug_attr_t type;
			int index;
			int buffer_size;
			uint32 * data;
		} cpri_port_debug_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_ethertype_t type;
			uint16 * tpid;
		} cpri_port_decap_ethertype_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_ethertype_t type;
			uint16 tpid;
		} cpri_port_decap_ethertype_set;
		struct {
			int unit;
			bcm_gport_t port;
			uint8 roe_subtype;
		} cpri_port_decap_flow_config_clear;
		struct {
			int unit;
			bcm_gport_t port;
			uint8 roe_subtype;
			bcm_cpri_decap_flow_config_t * config;
		} cpri_port_decap_flow_config_get;
		struct {
			int unit;
			bcm_gport_t port;
			uint8 roe_subtype;
			bcm_cpri_decap_flow_config_t * config;
		} cpri_port_decap_flow_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flow_id;
		} cpri_port_decap_flow_to_queue_mapping_clear;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flow_id;
			uint32 * queue_num;
		} cpri_port_decap_flow_to_queue_mapping_get;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flow_id;
			uint32 queue_num;
		} cpri_port_decap_flow_to_queue_mapping_set;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 queue_num;
			uint32 * xon_threshold;
			uint32 * xoff_threshold;
			int * enable;
		} cpri_port_decap_queue_flow_control_get;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 queue_num;
			uint32 xon_threshold;
			uint32 xoff_threshold;
			int enable;
		} cpri_port_decap_queue_flow_control_set;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 queue_num;
			uint32 * ordering_info_index;
		} cpri_port_decap_queue_to_ordering_info_index_get;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 queue_num;
			uint32 ordering_info_index;
		} cpri_port_decap_queue_to_ordering_info_index_set;
		struct {
			int unit;
			bcm_gport_t port;
			int index;
			bcm_cpri_decap_roe_oi_t * ordering_info;
		} cpri_port_decap_roe_ordering_info_get;
		struct {
			int unit;
			bcm_gport_t port;
			int index;
			bcm_cpri_decap_roe_oi_t * ordering_info;
		} cpri_port_decap_roe_ordering_info_set;
		struct {
			int unit;
			bcm_gport_t port;
			int queue;
			bcm_cpri_roe_oi_seq_offset_t * seq_offset;
		} cpri_port_decap_roe_ordering_sequence_offset_get;
		struct {
			int unit;
			bcm_gport_t port;
			int queue;
			bcm_cpri_roe_oi_seq_offset_t * seq_offset;
		} cpri_port_decap_roe_ordering_sequence_offset_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 secondary_key;
			uint32 * queue_num;
		} cpri_port_decap_secondary_key_to_queue_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 secondary_key;
			uint32 queue_num;
		} cpri_port_decap_secondary_key_to_queue_mapping_set;
		struct {
			int unit;
			bcm_gport_t port;
			int max_depth;
			int * table_depth;
			uint32 * comp_table;
		} cpri_port_decompression_lookup_table_get;
		struct {
			int unit;
			bcm_gport_t port;
			int table_depth;
			uint32 * comp_table;
		} cpri_port_decompression_lookup_table_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * sat_value;
		} cpri_port_decompression_saturation_config_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 sat_value;
		} cpri_port_decompression_saturation_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			int queue_num;
			bcm_cpri_encap_info_t * encap_config;
		} cpri_port_encap_get;
		struct {
			int unit;
			bcm_gport_t port;
			int index;
			bcm_mac_t * macaddr;
		} cpri_port_encap_roe_entry_macda_get;
		struct {
			int unit;
			bcm_gport_t port;
			int index;
			uint8 * macaddr;
		} cpri_port_encap_roe_entry_macda_set;
		struct {
			int unit;
			bcm_gport_t port;
			int index;
			bcm_mac_t * macaddr;
		} cpri_port_encap_roe_entry_macsa_get;
		struct {
			int unit;
			bcm_gport_t port;
			int index;
			uint8 * macaddr;
		} cpri_port_encap_roe_entry_macsa_set;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flags;
			uint32 index;
			bcm_vlan_t * vlan_id;
		} cpri_port_encap_roe_entry_vlan_get;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flags;
			uint32 index;
			bcm_vlan_t vlan_id;
		} cpri_port_encap_roe_entry_vlan_set;
		struct {
			int unit;
			bcm_gport_t port;
			int index;
			bcm_cpri_encap_roe_oi_t * ordering_info;
		} cpri_port_encap_roe_ordering_info_get;
		struct {
			int unit;
			bcm_gport_t port;
			int index;
			bcm_cpri_encap_roe_oi_t * ordering_info;
		} cpri_port_encap_roe_ordering_info_set;
		struct {
			int unit;
			bcm_gport_t port;
			int queue;
			int control;
			bcm_cpri_roe_oi_seq_offset_t * seq_offset;
		} cpri_port_encap_roe_ordering_sequence_offset_get;
		struct {
			int unit;
			bcm_gport_t port;
			int queue;
			int control;
			bcm_cpri_roe_oi_seq_offset_t * seq_offset;
		} cpri_port_encap_roe_ordering_sequence_offset_set;
		struct {
			int unit;
			bcm_gport_t port;
			int queue_num;
			bcm_cpri_encap_info_t * encap_config;
		} cpri_port_encap_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_encap_vlan_config_t * vlan_config;
		} cpri_port_encap_vlan_config_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_encap_vlan_config_t * vlan_config;
		} cpri_port_encap_vlan_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_fec_aux_config_t param_id;
			uint32 * value;
		} cpri_port_fec_aux_config_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_fec_aux_config_t param_id;
			uint32 value;
		} cpri_port_fec_aux_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_dir_t dir;
			int * enable;
		} cpri_port_fec_enable_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_dir_t dir;
			int enable;
		} cpri_port_fec_enable_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_fec_stat_type_t type;
			uint32 * counter_value;
		} cpri_port_fec_stat_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_dir_t dir;
			bcm_cpri_fec_timestamp_config_t * config;
		} cpri_port_fec_timestamp_config_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_dir_t dir;
			bcm_cpri_fec_timestamp_config_t * config;
		} cpri_port_fec_timestamp_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_port_frame_config_t * config;
		} cpri_port_frame_config_set;
		struct {
			int unit;
			bcm_cpri_interrupt_type_t cpri_intr_type;
			bcm_cpri_port_interrupt_callback_t callback;
			void * user_data;
		} cpri_port_interrupt_callback_register;
		struct {
			int unit;
			bcm_cpri_interrupt_type_t cpri_intr_type;
			bcm_cpri_port_interrupt_callback_t callback;
		} cpri_port_interrupt_callback_unregister;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_interrupt_type_t cpri_intr_type;
			int data;
			int * enable;
		} cpri_port_interrupt_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_interrupt_type_t cpri_intr_type;
			int data;
			int enable;
		} cpri_port_interrupt_enable_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_dir_t direction;
			int * enable;
			bcm_cpri_port_rsvd4_agnostic_config_t * config;
		} cpri_port_rsvd4_agnostic_mode_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_dir_t direction;
			int enable;
			bcm_cpri_port_rsvd4_agnostic_config_t * config;
		} cpri_port_rsvd4_agnostic_mode_config_set;
		struct {
			int unit;
			int port;
			int control_flow_id;
			bcm_rsvd4_fast_eth_config_info_t * config;
		} cpri_port_rsvd4_cm_fast_eth_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			int index;
		} cpri_port_rsvd4_dbm_entry_clear;
		struct {
			int unit;
			bcm_gport_t port;
			int index;
			bcm_rsvd4_dbm_entry_t * entry;
		} cpri_port_rsvd4_dbm_entry_get;
		struct {
			int unit;
			bcm_gport_t port;
			int index;
			bcm_rsvd4_dbm_entry_t * entry;
		} cpri_port_rsvd4_dbm_entry_set;
		struct {
			int unit;
			bcm_gport_t port;
			uint16 master_frame_count;
			uint64 master_frame_start;
		} cpri_port_rsvd4_rx_bfn_sync_config_set;
		struct {
			int unit;
			int port;
			int control_flow_id;
			bcm_rsvd4_control_flow_config_t * config;
		} cpri_port_rsvd4_rx_control_flow_add;
		struct {
			int unit;
			int port;
			int control_flow_id;
			bcm_rsvd4_control_flow_config_t * control_flow_cfg;
		} cpri_port_rsvd4_rx_control_flow_delete;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_frame_sync_info_t * frame_sync_info;
		} cpri_port_rsvd4_rx_current_frame_sync_info_get;
		struct {
			int unit;
			bcm_gport_t port;
			int flow_id;
			bcm_rsvd4_rx_flow_info_t * flow_info;
		} cpri_port_rsvd4_rx_flow_add;
		struct {
			int unit;
			bcm_gport_t port;
			int flow_id;
		} cpri_port_rsvd4_rx_flow_delete;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_rx_config_t config_type;
			uint32 value;
		} cpri_port_rsvd4_rx_frame_config_debug_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_rx_frame_config_t * config;
		} cpri_port_rsvd4_rx_frame_config_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_rx_frame_config_t * config;
		} cpri_port_rsvd4_rx_frame_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_rx_fsm_control_t control_type;
			uint32 * value;
		} cpri_port_rsvd4_rx_fsm_control_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_rx_fsm_control_t control_type;
			uint32 value;
		} cpri_port_rsvd4_rx_fsm_control_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_rx_fsm_state_t state;
		} cpri_port_rsvd4_rx_fsm_state_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_rx_params_t parameter;
			int enable;
			int value;
		} cpri_port_rsvd4_rx_override_set;
		struct {
			int unit;
			bcm_gport_t port;
			int index;
		} cpri_port_rsvd4_secondary_dbm_entry_clear;
		struct {
			int unit;
			bcm_gport_t port;
			int index;
			bcm_rsvd4_secondary_dbm_entry_t * entry;
		} cpri_port_rsvd4_secondary_dbm_entry_get;
		struct {
			int unit;
			bcm_gport_t port;
			int index;
			bcm_rsvd4_secondary_dbm_entry_t * entry;
		} cpri_port_rsvd4_secondary_dbm_entry_set;
		struct {
			int unit;
			int port;
			int index;
			bcm_rsvd4_sync_profile_entry_t * config;
		} cpri_port_rsvd4_sync_profile_entry_get;
		struct {
			int unit;
			int port;
			int index;
			bcm_rsvd4_sync_profile_entry_t * config;
		} cpri_port_rsvd4_sync_profile_entry_set;
		struct {
			int unit;
			int port;
			bcm_rsvd4_tx_cm_eth_config_t * config;
		} cpri_port_rsvd4_tx_cm_eth_config_set;
		struct {
			int unit;
			int port;
			int index;
			bcm_rsvd4_tx_cm_hdr_entry_t * entry;
		} cpri_port_rsvd4_tx_cm_hdr_config_entry_set;
		struct {
			int unit;
			int port;
			int flow_id;
			int header_index;
		} cpri_port_rsvd4_tx_cm_hdr_lkup_entry_set;
		struct {
			int unit;
			int port;
			bcm_rsvd4_tx_cm_raw_config_t * config;
		} cpri_port_rsvd4_tx_cm_raw_config_set;
		struct {
			int unit;
			int port;
			bcm_rsvd4_cm_tunnel_crc_option_t crc_option;
		} cpri_port_rsvd4_tx_cm_tunnel_crc_config_set;
		struct {
			int unit;
			int port;
			int control_flow_id;
			bcm_rsvd4_tx_control_flow_config_t * config;
		} cpri_port_rsvd4_tx_control_flow_add;
		struct {
			int unit;
			int port;
			bcm_rsvd4_control_group_id_t group_num;
			bcm_rsvd4_tx_control_flow_group_config_t * config;
		} cpri_port_rsvd4_tx_control_flow_group_member_add;
		struct {
			int unit;
			int port;
			bcm_rsvd4_control_group_id_t group_num;
			bcm_rsvd4_priority_t priority;
		} cpri_port_rsvd4_tx_control_flow_group_member_delete;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_frame_sync_info_t * frame_sync_info;
		} cpri_port_rsvd4_tx_current_frame_sync_info_get;
		struct {
			int unit;
			bcm_gport_t port;
			int flow_id;
			bcm_rsvd4_tx_flow_info_t * flow_info;
		} cpri_port_rsvd4_tx_flow_add;
		struct {
			int unit;
			bcm_gport_t port;
			int flow_id;
		} cpri_port_rsvd4_tx_flow_delete;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_tx_config_t config_type;
			uint32 value;
		} cpri_port_rsvd4_tx_frame_config_debug_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_tx_frame_config_t * config;
		} cpri_port_rsvd4_tx_frame_config_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_tx_frame_config_t * config;
		} cpri_port_rsvd4_tx_frame_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_tx_fsm_control_t control_type;
			uint32 * value;
		} cpri_port_rsvd4_tx_fsm_control_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_tx_fsm_control_t control_type;
			uint32 value;
		} cpri_port_rsvd4_tx_fsm_control_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_tx_fsm_state_t state;
		} cpri_port_rsvd4_tx_fsm_state_set;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 modulo_rule_num;
			bcm_cpri_tx_rule_type_t modulo_rule_type;
			bcm_cpri_modulo_rule_entry_t * modulo_rule;
		} cpri_port_rsvd4_tx_modulo_rule_entry_get;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 modulo_rule_num;
			bcm_cpri_tx_rule_type_t modulo_rule_type;
			bcm_cpri_modulo_rule_entry_t * modulo_rule;
		} cpri_port_rsvd4_tx_modulo_rule_entry_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rsvd4_tx_params_t parameter;
			int enable;
			int value;
		} cpri_port_rsvd4_tx_override_set;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 pos_index;
			bcm_cpri_dbm_position_entry_t * pos_entry;
		} cpri_port_rsvd4_tx_position_entry_get;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 pos_index;
			bcm_cpri_dbm_position_entry_t * pos_entry;
		} cpri_port_rsvd4_tx_position_entry_set;
		struct {
			int unit;
			bcm_gport_t port;
			int axc_id;
			bcm_cpri_axc_frame_info_t * axc_info;
		} cpri_port_rx_axc_frame_add;
		struct {
			int unit;
			bcm_gport_t port;
			int axc_id;
		} cpri_port_rx_axc_frame_delete;
		struct {
			int unit;
			bcm_gport_t port;
			int axc_id;
			bcm_cpri_axc_frame_info_t * axc_info;
		} cpri_port_rx_axc_frame_get;
		struct {
			int unit;
			bcm_gport_t port;
			int max_count;
			bcm_cpri_axc_frame_info_t * axc_info_list;
			int * axc_count;
		} cpri_port_rx_axc_frame_get_all;
		struct {
			int unit;
			int port;
			uint8 index;
			bcm_cpri_rx_gcw_config_info_t * config;
		} cpri_port_rx_cw_gcw_config_get;
		struct {
			int unit;
			int port;
			uint8 index;
			bcm_cpri_rx_gcw_config_info_t * config;
		} cpri_port_rx_cw_gcw_config_set;
		struct {
			int unit;
			bcm_port_t port;
			int group_index;
			uint16 * gcw_word;
		} cpri_port_rx_cw_gcw_word_get;
		struct {
			int unit;
			int port;
			bcm_cpri_cw_l1_inband_info_t * l1_inband_info;
		} cpri_port_rx_cw_l1_inband_info_get;
		struct {
			int unit;
			int port;
			uint32 signal_map;
			uint32 * enable;
		} cpri_port_rx_cw_l1_signal_protection_get;
		struct {
			int unit;
			int port;
			uint32 signal_map;
			uint32 enable;
		} cpri_port_rx_cw_l1_signal_protection_set;
		struct {
			int unit;
			int port;
			bcm_cpri_rx_rsvd5_config_info_t * config;
		} cpri_port_rx_cw_rsvd5_config_get;
		struct {
			int unit;
			int port;
			bcm_cpri_rx_rsvd5_config_info_t * config;
		} cpri_port_rx_cw_rsvd5_config_set;
		struct {
			int unit;
			int port;
			uint32 * hyper_frame_num;
			uint32 * radio_frame_num;
		} cpri_port_rx_cw_sync_info_get;
		struct {
			int unit;
			int port;
			bcm_cpri_rx_vsd_config_info_t * config;
		} cpri_port_rx_cw_vsd_config_get;
		struct {
			int unit;
			int port;
			bcm_cpri_rx_vsd_config_info_t * config;
		} cpri_port_rx_cw_vsd_config_set;
		struct {
			int unit;
			int port;
			uint16 group_id;
			bcm_cpri_rx_vsd_flow_info_t * config;
		} cpri_port_rx_cw_vsd_ctrl_flow_add;
		struct {
			int unit;
			int port;
			uint16 group_id;
		} cpri_port_rx_cw_vsd_ctrl_flow_delete;
		struct {
			int unit;
			int port;
			uint16 group_id;
			bcm_cpri_rx_vsd_flow_info_t * config;
		} cpri_port_rx_cw_vsd_ctrl_flow_get;
		struct {
			int unit;
			int port;
			uint8 vsd_raw_id;
			bcm_cpri_rx_vsd_raw_config_info_t * config;
		} cpri_port_rx_cw_vsd_raw_config_get;
		struct {
			int unit;
			int port;
			uint8 vsd_raw_id;
			bcm_cpri_rx_vsd_raw_config_info_t * config;
		} cpri_port_rx_cw_vsd_raw_config_set;
		struct {
			int unit;
			bcm_gport_t port;
		} cpri_port_rx_pipeline_clear;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_port_type_t * port_type;
			bcm_cpri_port_speed_t * speed;
		} cpri_port_rx_speed_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_port_type_t port_type;
			bcm_cpri_port_speed_t speed;
		} cpri_port_rx_speed_set;
		struct {
			int unit;
			int port;
			bcm_cpri_control_tag_config_t * config;
		} cpri_port_rx_tag_config_set;
		struct {
			int unit;
			int port;
			bcm_cpri_tag_gen_entry_t * config;
		} cpri_port_rx_tag_entry_add;
		struct {
			int unit;
			int port;
			bcm_cpri_tag_gen_entry_t * config;
		} cpri_port_rx_tag_entry_delete;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_stat_type_t type;
			uint64 * val;
		} cpri_port_stat_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_dir_t direction;
			int * enable;
			bcm_cpri_port_tunnel_config_t * config;
		} cpri_port_tunnel_mode_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_dir_t direction;
			int enable;
			bcm_cpri_port_tunnel_config_t * config;
		} cpri_port_tunnel_mode_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			int axc_id;
			bcm_cpri_axc_frame_info_t * axc_info;
		} cpri_port_tx_axc_frame_add;
		struct {
			int unit;
			bcm_gport_t port;
			int axc_id;
		} cpri_port_tx_axc_frame_delete;
		struct {
			int unit;
			bcm_gport_t port;
			int axc_id;
			bcm_cpri_axc_frame_info_t * axc_info;
		} cpri_port_tx_axc_frame_get;
		struct {
			int unit;
			bcm_gport_t port;
			int max_count;
			bcm_cpri_axc_frame_info_t * axc_info_list;
			int * axc_count;
		} cpri_port_tx_axc_frame_get_all;
		struct {
			int unit;
			int port;
			uint8 index;
			bcm_cpri_tx_gcw_config_info_t * config;
		} cpri_port_tx_cw_gcw_config_get;
		struct {
			int unit;
			int port;
			uint8 index;
			bcm_cpri_tx_gcw_config_info_t * config;
		} cpri_port_tx_cw_gcw_config_set;
		struct {
			int unit;
			int port;
			bcm_cpri_tx_gcw_tx_filter_info_t * config;
		} cpri_port_tx_cw_gcw_filter_get;
		struct {
			int unit;
			int port;
			bcm_cpri_tx_gcw_tx_filter_info_t * config;
		} cpri_port_tx_cw_gcw_filter_set;
		struct {
			int unit;
			bcm_port_t port;
			int group_index;
			uint16 gcw_word;
		} cpri_port_tx_cw_gcw_word_set;
		struct {
			int unit;
			int port;
			bcm_cpri_cw_l1_inband_info_t * inband_info;
		} cpri_port_tx_cw_l1_inband_info_get;
		struct {
			int unit;
			int port;
			bcm_cpri_cw_l1_inband_info_t * inband_info;
		} cpri_port_tx_cw_l1_inband_info_set;
		struct {
			int unit;
			int port;
			bcm_cpri_tx_cw_rsvd5_config_info_t * config;
		} cpri_port_tx_cw_rsvd5_config_get;
		struct {
			int unit;
			int port;
			bcm_cpri_tx_cw_rsvd5_config_info_t * config;
		} cpri_port_tx_cw_rsvd5_config_set;
		struct {
			int unit;
			int port;
			bcm_cpri_cw_sync_info_t * entry;
		} cpri_port_tx_cw_sync_info_get;
		struct {
			int unit;
			int port;
			bcm_cpri_cw_sync_info_t * entry;
		} cpri_port_tx_cw_sync_info_set;
		struct {
			int unit;
			int port;
			bcm_cpri_tx_vsd_config_info_t * entry;
		} cpri_port_tx_cw_vsd_config_get;
		struct {
			int unit;
			int port;
			bcm_cpri_tx_vsd_config_info_t * entry;
		} cpri_port_tx_cw_vsd_config_set;
		struct {
			int unit;
			int port;
			uint16 group_id;
			bcm_cpri_tx_vsd_flow_info_t * config;
		} cpri_port_tx_cw_vsd_ctrl_flow_add;
		struct {
			int unit;
			int port;
			uint16 group_id;
		} cpri_port_tx_cw_vsd_ctrl_flow_delete;
		struct {
			int unit;
			int port;
			uint16 group_id;
			bcm_cpri_tx_vsd_flow_info_t * config;
		} cpri_port_tx_cw_vsd_ctrl_flow_get;
		struct {
			int unit;
			int port;
			bcm_cpri_tx_cw_vsd_raw_filter_info_t * config;
		} cpri_port_tx_cw_vsd_raw_filter_get;
		struct {
			int unit;
			int port;
			bcm_cpri_tx_cw_vsd_raw_filter_info_t * config;
		} cpri_port_tx_cw_vsd_raw_filter_set;
		struct {
			int unit;
			int port;
			uint8 index;
			bcm_cpri_tx_vsd_raw_config_info_t * config;
		} cpri_port_tx_cw_vsd_raw_flow_config_get;
		struct {
			int unit;
			int port;
			uint8 index;
			bcm_cpri_tx_vsd_raw_config_info_t * config;
		} cpri_port_tx_cw_vsd_raw_flow_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			int * enable;
		} cpri_port_tx_enable_get;
		struct {
			int unit;
			bcm_gport_t port;
			int enable;
		} cpri_port_tx_enable_set;
		struct {
			int unit;
			bcm_gport_t port;
			int enable;
			bcm_cpri_tx_frame_tgen_config_t * tgen_config;
		} cpri_port_tx_frame_tgen_config_set;
		struct {
			int unit;
			bcm_gport_t port;
		} cpri_port_tx_pipeline_clear;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_port_type_t * port_type;
			bcm_cpri_port_speed_t * speed;
		} cpri_port_tx_speed_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cpri_port_type_t port_type;
			bcm_cpri_port_speed_t speed;
		} cpri_port_tx_speed_set;
		struct {
			int unit;
			bcm_cpri_rsvd1_msg_t * rsvd1_msg;
		} cpri_rsvd1_msg_get;
		struct {
			int unit;
			bcm_cpri_speed_scan_handler_t callback;
			void * user_data;
		} cpri_speed_scan_callback_register;
		struct {
			int unit;
			bcm_cpri_speed_scan_handler_t callback;
		} cpri_speed_scan_callback_unregister;
		struct {
			int unit;
			int * interval_in_us;
			int * enable;
		} cpri_speed_scan_config_get;
		struct {
			int unit;
			int interval_in_us;
			int enable;
		} cpri_speed_scan_config_set;
		struct {
			int unit;
		} cpri_speed_scan_init;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_port_speed_t * speed_list;
			int num_speed;
		} cpri_speed_scan_port_config_add;
		struct {
			int unit;
			bcm_port_t port;
		} cpri_speed_scan_port_config_delete;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cpri_port_speed_t * speed_list;
			int num_element;
			int * num_speed;
		} cpri_speed_scan_port_config_get;
		struct {
			int unit;
			bcm_port_t port;
			int type;
			int max_len;
			uint32 * args;
			int * actual_len;
		} custom_port_get;
		struct {
			int unit;
			bcm_port_t port;
			int type;
			int len;
			uint32 * args;
		} custom_port_set;
		struct {
			int unit;
			bcm_custom_cb_t func;
			void * user_data;
		} custom_register;
		struct {
			int unit;
		} custom_unregister;
		struct {
			int unit;
		} detach;
		struct {
			int unit;
		} detach_late_txrx;
		struct {
			int unit;
			bcm_detach_retry_t * retry;
		} detach_retry_get;
		struct {
			int unit;
			bcm_detach_retry_t * retry;
		} detach_retry_set;
		struct {
			int unit;
			uint32 flags;
			bcm_device_member_t member_type;
			int * is_member;
		} device_member_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_eav_stream_class_t type;
			uint32 * bytes_sec;
			uint32 * bytes_burst;
		} eav_bandwidth_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_eav_stream_class_t type;
			uint32 bytes_sec;
			uint32 bytes_burst;
		} eav_bandwidth_set;
		struct {
			int unit;
			bcm_eav_control_t type;
			uint32 * arg;
			uint32 * arg2;
		} eav_control_get;
		struct {
			int unit;
			bcm_eav_control_t type;
			uint32 arg;
			uint32 arg2;
		} eav_control_set;
		struct {
			int unit;
		} eav_init;
		struct {
			int unit;
			bcm_port_t port;
			int * link;
		} eav_link_status_get;
		struct {
			int unit;
			bcm_port_t port;
			int link;
		} eav_link_status_set;
		struct {
			int unit;
			bcm_eav_stream_class_t type;
			int * pcp;
			int * remapped_pcp;
		} eav_pcp_mapping_get;
		struct {
			int unit;
			bcm_eav_stream_class_t type;
			int pcp;
			int remapped_pcp;
		} eav_pcp_mapping_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} eav_port_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} eav_port_enable_set;
		struct {
			int unit;
			uint8 * mac;
			bcm_port_ethertype_t * ethertype;
		} eav_srp_mac_ethertype_get;
		struct {
			int unit;
			uint8 * mac;
			bcm_port_ethertype_t ethertype;
		} eav_srp_mac_ethertype_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * timestamp;
		} eav_timestamp_get;
		struct {
			int unit;
			uint8 * eav_mac;
		} eav_timesync_mac_get;
		struct {
			int unit;
			uint8 * eav_mac;
		} eav_timesync_mac_set;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			uint32 flags;
			int * ecn_map_id;
		} ecn_map_create;
		struct {
			int unit;
			int ecn_map_id;
		} ecn_map_destroy;
		struct {
			int unit;
			int ecn_map_id;
			bcm_ecn_map_t * ecn_map;
		} ecn_map_get;
		struct {
			int unit;
			bcm_ecn_map_mode_t * ecn_map_mode;
		} ecn_map_mode_get;
		struct {
			int unit;
			bcm_ecn_map_mode_t * ecn_map_mode;
		} ecn_map_mode_set;
		struct {
			int unit;
			uint32 options;
			int ecn_map_id;
			bcm_ecn_map_t * ecn_map;
		} ecn_map_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_ecn_port_map_t * ecn_map;
		} ecn_port_map_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_ecn_port_map_t * ecn_map;
		} ecn_port_map_set;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			uint8 ip_proto;
			int * responsive;
		} ecn_responsive_protocol_get;
		struct {
			int unit;
			uint8 ip_proto;
			int responsive;
		} ecn_responsive_protocol_set;
		struct {
			int unit;
			bcm_ecn_traffic_action_config_t * ecn_config;
		} ecn_traffic_action_config_get;
		struct {
			int unit;
			bcm_ecn_traffic_action_config_t * ecn_config;
		} ecn_traffic_action_config_set;
		struct {
			int unit;
			bcm_ecn_traffic_map_info_t * map;
		} ecn_traffic_map_get;
		struct {
			int unit;
			bcm_ecn_traffic_map_info_t * map;
		} ecn_traffic_map_set;
		struct {
			int unit;
			uint32 flags;
			bcm_ecn_type_map_t * map;
		} ecn_type_map_get;
		struct {
			int unit;
			uint32 flags;
			bcm_ecn_type_map_t * map;
		} ecn_type_map_set;
		struct {
			int unit;
			uint32 flags;
			bcm_ecn_type_map_traverse_cb cb;
			void * user_data;
		} ecn_type_map_traverse;
#ifdef	INCLUDE_PTP
		struct {
			int unit;
			bcm_esmc_network_option_t opt;
			bcm_esmc_quality_level_t ql;
			uint8 * ssm_code;
		} esmc_QL_SSM_map;
		struct {
			int unit;
			bcm_esmc_network_option_t opt;
			uint8 ssm_code;
			bcm_esmc_quality_level_t * ql;
		} esmc_SSM_QL_map;
		struct {
			int unit;
			int stack_id;
			bcm_esmc_network_option_t * g781_option;
		} esmc_g781_option_get;
		struct {
			int unit;
			int stack_id;
			bcm_esmc_network_option_t g781_option;
		} esmc_g781_option_set;
		struct {
			int unit;
			int stack_id;
			bcm_esmc_rx_cb rx_cb;
		} esmc_rx_callback_register;
		struct {
			int unit;
			int stack_id;
		} esmc_rx_callback_unregister;
		struct {
			int unit;
			int stack_id;
			int * enable;
		} esmc_tunnel_get;
		struct {
			int unit;
			int stack_id;
			int enable;
		} esmc_tunnel_set;
		struct {
			int unit;
			int stack_id;
			bcm_pbmp_t pbmp;
			bcm_esmc_pdu_data_t * esmc_pdu_data;
		} esmc_tx;
#endif	/* INCLUDE_PTP */
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} extender_cleanup;
		struct {
			int unit;
			bcm_gport_t extender_port;
			bcm_extender_egress_t * extender_egress;
		} extender_egress_add;
		struct {
			int unit;
			bcm_gport_t extender_port;
			bcm_extender_egress_t * extender_egress;
		} extender_egress_delete;
		struct {
			int unit;
			bcm_gport_t extender_port;
		} extender_egress_delete_all;
		struct {
			int unit;
			bcm_gport_t extender_port;
			bcm_extender_egress_t * extender_egress;
		} extender_egress_get;
		struct {
			int unit;
			bcm_gport_t extender_port;
			int array_size;
			bcm_extender_egress_t * extender_egress_array;
			int * count;
		} extender_egress_get_all;
		struct {
			int unit;
			bcm_gport_t extender_port;
			int array_size;
			bcm_extender_egress_t * extender_egress_array;
		} extender_egress_set;
		struct {
			int unit;
			bcm_extender_encap_t * extender_encap;
		} extender_encap_create;
		struct {
			int unit;
			bcm_gport_t * extender_encap_id;
		} extender_encap_destroy;
		struct {
			int unit;
		} extender_encap_destroy_all;
		struct {
			int unit;
			bcm_extender_encap_t * extender_encap;
		} extender_encap_get;
		struct {
			int unit;
			bcm_extender_encap_traverse_cb cb;
			void * user_data;
		} extender_encap_traverse;
		struct {
			int unit;
			bcm_extender_forward_t * extender_forward_entry;
		} extender_forward_add;
		struct {
			int unit;
			bcm_extender_forward_t * extender_forward_entry;
		} extender_forward_delete;
		struct {
			int unit;
		} extender_forward_delete_all;
		struct {
			int unit;
			bcm_extender_forward_t * extender_forward_entry;
		} extender_forward_get;
		struct {
			int unit;
			bcm_extender_forward_traverse_cb cb;
			void * user_data;
		} extender_forward_traverse;
		struct {
			int unit;
		} extender_init;
		struct {
			int unit;
			bcm_extender_port_t * extender_port;
		} extender_port_add;
		struct {
			int unit;
			bcm_gport_t extender_port_id;
		} extender_port_delete;
		struct {
			int unit;
		} extender_port_delete_all;
		struct {
			int unit;
			bcm_extender_port_t * extender_port;
		} extender_port_get;
		struct {
			int unit;
			bcm_extender_port_traverse_cb cb;
			void * user_data;
		} extender_port_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_fabric_action_info_t * action_info;
			bcm_fabric_action_t * action_id;
		} fabric_action_create;
		struct {
			int unit;
			bcm_fabric_action_t action_id;
		} fabric_action_destroy;
		struct {
			int unit;
		} fabric_action_destroy_all;
		struct {
			int unit;
			bcm_fabric_action_t action_id;
			bcm_fabric_action_info_t * action_info;
		} fabric_action_get;
		struct {
			int unit;
			bcm_fabric_action_traverse_cb cb;
			void * user_data;
		} fabric_action_traverse;
		struct {
			int unit;
			int core;
			uint32 flags;
			int profile_count;
			bcm_fabric_bandwidth_profile_t * profile_array;
		} fabric_bandwidth_core_profile_get;
		struct {
			int unit;
			int core;
			uint32 flags;
			int profile_count;
			bcm_fabric_bandwidth_profile_t * profile_array;
		} fabric_bandwidth_core_profile_set;
		struct {
			int unit;
			int profile_count;
			bcm_fabric_bandwidth_profile_t * profile_array;
		} fabric_bandwidth_profile_get;
		struct {
			int unit;
			int profile_count;
			bcm_fabric_bandwidth_profile_t * profile_array;
		} fabric_bandwidth_profile_set;
		struct {
			int unit;
			uint32 flags;
			bcm_fabric_cgm_control_type_t control_type;
			bcm_fabric_cgm_control_id_t control_id;
			int * value;
		} fabric_cgm_control_get;
		struct {
			int unit;
			uint32 flags;
			bcm_fabric_cgm_control_type_t control_type;
			bcm_fabric_cgm_control_id_t control_id;
			int value;
		} fabric_cgm_control_set;
		struct {
			int unit;
			bcm_fabric_config_discard_t * discard;
		} fabric_config_discard_get;
		struct {
			int unit;
			bcm_fabric_config_discard_t * discard;
		} fabric_config_discard_set;
		struct {
			int unit;
			bcm_fabric_control_t type;
			int * arg;
		} fabric_control_get;
		struct {
			int unit;
			bcm_fabric_control_t type;
			int arg;
		} fabric_control_set;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t module_id;
			int * num_of_links;
		} fabric_destination_link_min_get;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t module_id;
			int num_of_links;
		} fabric_destination_link_min_set;
		struct {
			int unit;
		} fabric_init;
		struct {
			int unit;
			int link_partner_max;
			bcm_fabric_link_connectivity_t * link_partner_array;
			int * link_partner_count;
		} fabric_link_connectivity_status_get;
		struct {
			int unit;
			bcm_port_t link_id;
			bcm_fabric_link_connectivity_t * link_partner_info;
		} fabric_link_connectivity_status_single_get;
		struct {
			int unit;
			bcm_port_t link;
			bcm_fabric_link_control_t type;
			int * arg;
		} fabric_link_control_get;
		struct {
			int unit;
			bcm_port_t link;
			bcm_fabric_link_control_t type;
			int arg;
		} fabric_link_control_set;
		struct {
			int unit;
			int profile_id;
			uint32 flags;
			uint32 links_count_max;
			uint32 * links_count;
			bcm_port_t * links;
		} fabric_link_profile_get;
		struct {
			int unit;
			int profile_id;
			uint32 flags;
			uint32 links_count;
			bcm_port_t * links;
		} fabric_link_profile_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fabric_link_remote_pipe_mapping_t * mapping_config;
		} fabric_link_remote_pipe_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fabric_link_remote_pipe_mapping_t * mapping_config;
		} fabric_link_remote_pipe_mapping_set;
		struct {
			int unit;
			bcm_port_t link_id;
			uint32 * link_status;
			uint32 * errored_token_count;
		} fabric_link_status_get;
		struct {
			int unit;
			uint32 flags;
			int * fifo_type;
		} fabric_link_threshold_add;
		struct {
			int unit;
			int fifo_type;
		} fabric_link_threshold_delete;
		struct {
			int unit;
			int fifo_type;
			uint32 links_count;
			bcm_port_t * links;
		} fabric_link_thresholds_attach;
		struct {
			int unit;
			int fifo_type;
			uint32 count;
			bcm_fabric_link_threshold_type_t * type;
			int * value;
		} fabric_link_thresholds_get;
		struct {
			int unit;
			int fifo_type;
			bcm_fabric_pipe_t pipe;
			uint32 flags;
			uint32 count;
			bcm_fabric_link_threshold_type_t * type;
			int * value;
		} fabric_link_thresholds_pipe_get;
		struct {
			int unit;
			int fifo_type;
			bcm_fabric_pipe_t pipe;
			uint32 flags;
			uint32 count;
			bcm_fabric_link_threshold_type_t * type;
			int * value;
		} fabric_link_thresholds_pipe_set;
		struct {
			int unit;
			int fifo_type;
			uint32 links_count_max;
			bcm_port_t * links;
			uint32 * links_count;
		} fabric_link_thresholds_retrieve;
		struct {
			int unit;
			int fifo_type;
			uint32 count;
			bcm_fabric_link_threshold_type_t * type;
			int * value;
		} fabric_link_thresholds_set;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t destination;
			bcm_fabric_topology_type_t type;
			int links_count_max;
			int * links_count;
			bcm_port_t * links_array;
		} fabric_link_topology_config_get;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t destination;
			bcm_fabric_topology_type_t type;
			int links_count;
			bcm_port_t * links_array;
		} fabric_link_topology_config_set;
		struct {
			int unit;
			bcm_module_t destination;
			int max_links_count;
			int * links_count;
			bcm_port_t * links_array;
		} fabric_link_topology_get;
		struct {
			int unit;
			bcm_module_t destination;
			int links_count;
			bcm_port_t * links_array;
		} fabric_link_topology_set;
		struct {
			int unit;
			bcm_module_t modid;
			bcm_module_t * group;
		} fabric_modid_group_find;
		struct {
			int unit;
			bcm_module_t group;
			int modid_max_count;
			bcm_module_t * modid_array;
			int * modid_count;
		} fabric_modid_group_get;
		struct {
			int unit;
			bcm_module_t group;
			int modid_count;
			bcm_module_t * modid_array;
		} fabric_modid_group_set;
		struct {
			int unit;
			bcm_module_t local_modid;
			bcm_module_t * modid;
		} fabric_modid_local_mapping_get;
		struct {
			int unit;
			bcm_module_t local_modid;
			bcm_module_t modid;
		} fabric_modid_local_mapping_set;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t modid;
			bcm_fabric_module_control_t control;
			int * value;
		} fabric_module_control_get;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t modid;
			bcm_fabric_module_control_t control;
			int value;
		} fabric_module_control_set;
		struct {
			int unit;
			bcm_multicast_t group;
			uint32 flags;
			int destid_count_max;
			int * destid_count;
			bcm_module_t * destid_array;
		} fabric_multicast_get;
		struct {
			int unit;
			uint32 flags;
			uint32 nof_groups;
			bcm_multicast_t * groups;
			int * enable;
		} fabric_multicast_local_route_get;
		struct {
			int unit;
			uint32 flags;
			uint32 nof_groups;
			bcm_multicast_t * groups;
			int * enable;
		} fabric_multicast_local_route_set;
		struct {
			int unit;
			uint32 flags;
			uint32 ngroups;
			bcm_multicast_t * groups;
			bcm_fabric_module_vector_t * dest_array;
		} fabric_multicast_multi_get;
		struct {
			int unit;
			uint32 flags;
			uint32 ngroups;
			bcm_multicast_t * groups;
			bcm_fabric_module_vector_t * dest_array;
		} fabric_multicast_multi_set;
		struct {
			int unit;
			bcm_multicast_t group;
			uint32 flags;
			uint32 destid_count;
			bcm_module_t * destid_array;
		} fabric_multicast_set;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t modid;
			bcm_fabric_pcp_mode_config_t * pcp_config;
		} fabric_pcp_dest_mode_config_get;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t modid;
			bcm_fabric_pcp_mode_config_t * pcp_config;
		} fabric_pcp_dest_mode_config_set;
		struct {
			int unit;
			bcm_gport_t parent_port;
			int offset;
			uint32 flags;
			bcm_gport_t * port;
		} fabric_port_create;
		struct {
			int unit;
			bcm_gport_t parent_port;
		} fabric_port_destroy;
		struct {
			int unit;
			bcm_gport_t child_port;
			uint32 flags;
			bcm_gport_t * parent_port;
		} fabric_port_get;
		struct {
			int unit;
			bcm_fabric_predicate_action_info_t * predicate_action;
			bcm_fabric_predicate_action_t * predicate_action_id;
		} fabric_predicate_action_create;
		struct {
			int unit;
			bcm_fabric_predicate_action_t predicate_action_id;
		} fabric_predicate_action_destroy;
		struct {
			int unit;
		} fabric_predicate_action_destroy_all;
		struct {
			int unit;
			bcm_fabric_predicate_action_t predicate_action_id;
			bcm_fabric_predicate_action_info_t * predicate_action_info;
		} fabric_predicate_action_get;
		struct {
			int unit;
			bcm_fabric_predicate_action_traverse_cb cb;
			void * user_data;
		} fabric_predicate_action_traverse;
		struct {
			int unit;
			bcm_fabric_predicate_info_t * pred_info;
			bcm_fabric_predicate_t * pred_id;
		} fabric_predicate_create;
		struct {
			int unit;
			bcm_fabric_predicate_t pred_id;
		} fabric_predicate_destroy;
		struct {
			int unit;
		} fabric_predicate_destroy_all;
		struct {
			int unit;
			bcm_fabric_predicate_t pred_id;
			bcm_fabric_predicate_info_t * pred_info;
		} fabric_predicate_get;
		struct {
			int unit;
			bcm_fabric_predicate_traverse_cb cb;
			void * user_data;
		} fabric_predicate_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_cos_t ingress_pri;
			bcm_color_t color;
			int * fabric_priority;
		} fabric_priority_get;
		struct {
			int unit;
			uint32 flags;
			bcm_cos_t ingress_pri;
			bcm_color_t color;
			int fabric_priority;
		} fabric_priority_set;
		struct {
			int unit;
			int profile_id;
			bcm_fabric_threshold_id_t threshold_id;
			bcm_fabric_threshold_type_t threshold_type;
			uint32 flags;
			int * value;
		} fabric_profile_threshold_get;
		struct {
			int unit;
			int profile_id;
			bcm_fabric_threshold_id_t threshold_id;
			bcm_fabric_threshold_type_t threshold_type;
			uint32 flags;
			int value;
		} fabric_profile_threshold_set;
		struct {
			int unit;
			uint32 flags;
			int base;
			int count;
			bcm_fabric_qsel_t * qsel_id;
		} fabric_qsel_create;
		struct {
			int unit;
			bcm_fabric_qsel_t qsel_id;
		} fabric_qsel_destroy;
		struct {
			int unit;
		} fabric_qsel_destroy_all;
		struct {
			int unit;
			bcm_fabric_qsel_t qsel_id;
			int offset;
			bcm_gport_t * queue;
			bcm_fabric_qsel_offset_t * qsel_offset_id;
		} fabric_qsel_entry_get;
		struct {
			int unit;
			bcm_fabric_qsel_t qsel_id;
			int offset;
			int count;
			bcm_gport_t * queue;
			bcm_fabric_qsel_offset_t * qsel_offset_id;
		} fabric_qsel_entry_multi_get;
		struct {
			int unit;
			bcm_fabric_qsel_t qsel_id;
			int offset;
			int count;
			bcm_gport_t * queue;
			bcm_fabric_qsel_offset_t * qsel_offset_id;
		} fabric_qsel_entry_multi_set;
		struct {
			int unit;
			bcm_fabric_qsel_t qsel_id;
			int offset;
			bcm_gport_t queue;
			bcm_fabric_qsel_offset_t qsel_offset_id;
		} fabric_qsel_entry_set;
		struct {
			int unit;
			bcm_fabric_qsel_t qsel_id;
			bcm_fabric_qsel_entry_traverse_cb cb;
			void * user_data;
		} fabric_qsel_entry_traverse;
		struct {
			int unit;
			bcm_fabric_qsel_t qsel_id;
			uint32 * flags;
			int * base;
			int * count;
		} fabric_qsel_get;
		struct {
			int unit;
			uint32 flags;
			bcm_fabric_qsel_offset_t * qsel_offset_id;
		} fabric_qsel_offset_create;
		struct {
			int unit;
			bcm_fabric_qsel_offset_t qsel_offset_id;
		} fabric_qsel_offset_destroy;
		struct {
			int unit;
		} fabric_qsel_offset_destroy_all;
		struct {
			int unit;
			bcm_fabric_qsel_offset_t qsel_offset_id;
			bcm_cos_t int_pri;
			int * offset;
		} fabric_qsel_offset_entry_get;
		struct {
			int unit;
			bcm_fabric_qsel_offset_t qsel_offset_id;
			bcm_cos_t int_pri;
			int offset;
		} fabric_qsel_offset_entry_set;
		struct {
			int unit;
			bcm_fabric_qsel_offset_t qsel_offset_id;
			bcm_fabric_qsel_offset_entry_traverse_cb cb;
			void * user_data;
		} fabric_qsel_offset_entry_traverse;
		struct {
			int unit;
			bcm_fabric_qsel_offset_traverse_cb cb;
			void * user_data;
		} fabric_qsel_offset_traverse;
		struct {
			int unit;
			bcm_fabric_qsel_traverse_cb cb;
			void * user_data;
		} fabric_qsel_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_fabric_rci_biasing_probability_info_t * probability_info;
			int * probability;
		} fabric_rci_biasing_probability_get;
		struct {
			int unit;
			uint32 flags;
			bcm_fabric_rci_biasing_probability_info_t * probability_info;
			int * probability;
		} fabric_rci_biasing_probability_set;
		struct {
			int unit;
			bcm_fabric_rci_config_t * rci_config;
		} fabric_rci_config_get;
		struct {
			int unit;
			bcm_fabric_rci_config_t rci_config;
		} fabric_rci_config_set;
		struct {
			int unit;
			uint32 flags;
			bcm_fabric_rci_resolution_key_t * key;
			bcm_fabric_rci_resolution_config_t * config;
		} fabric_rci_resolution_get;
		struct {
			int unit;
			uint32 flags;
			bcm_fabric_rci_resolution_key_t * key;
			bcm_fabric_rci_resolution_config_t * config;
		} fabric_rci_resolution_set;
		struct {
			int unit;
			int moduleid;
			int links_max;
			uint32 * links_array;
			int * links_count;
		} fabric_reachability_status_get;
		struct {
			int unit;
			uint32 flags;
			uint32 data_out_max_size;
			uint32 * data_out;
			uint32 * data_out_size;
		} fabric_route_rx;
		struct {
			int unit;
			uint32 flags;
			bcm_fabric_route_t * route;
			uint32 data_in_size;
			uint32 * data_in;
		} fabric_route_tx;
		struct {
			int unit;
			uint32 flags;
			bcm_fabric_stat_index_t index;
			bcm_fabric_stat_t stat;
			uint64 * value;
		} fabric_stat_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 destid_count;
			bcm_module_t * destid_array;
		} fabric_static_replication_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_fabric_tdm_direct_routing_t * routing_info;
		} fabric_tdm_direct_routing_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_fabric_tdm_direct_routing_t * routing_info;
		} fabric_tdm_direct_routing_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_fabric_tdm_editing_t * editing;
		} fabric_tdm_editing_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_fabric_tdm_editing_t * editing;
		} fabric_tdm_editing_set;
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} failover_cleanup;
		struct {
			int unit;
			uint32 flags;
			bcm_failover_t * failover_id;
		} failover_create;
		struct {
			int unit;
			bcm_failover_t failover_id;
		} failover_destroy;
		struct {
			int unit;
			bcm_if_t intf;
		} failover_egress_clear;
		struct {
			int unit;
			bcm_if_t intf;
			bcm_l3_egress_t * failover_egr;
		} failover_egress_get;
		struct {
			int unit;
			bcm_if_t intf;
			bcm_if_t * prot_intf;
		} failover_egress_protection_get;
		struct {
			int unit;
			bcm_if_t intf;
			bcm_l3_egress_t * failover_egr;
		} failover_egress_set;
		struct {
			int unit;
			bcm_if_t intf;
			int * enable;
		} failover_egress_status_get;
		struct {
			int unit;
			bcm_if_t intf;
			int enable;
		} failover_egress_status_set;
		struct {
			int unit;
			bcm_failover_t failover_id;
			int * enable;
		} failover_get;
		struct {
			int unit;
		} failover_init;
		struct {
			int unit;
			bcm_failover_multi_level_t multi_level_failover;
		} failover_multi_level_attach;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_failover_ring_t * failover_ring;
		} failover_ring_config_get;
		struct {
			int unit;
			bcm_failover_ring_t * failover_ring;
		} failover_ring_config_set;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			bcm_failover_t failover_id;
			int enable;
		} failover_set;
		struct {
			int unit;
			bcm_failover_element_t * failover;
			int * enable;
		} failover_status_get;
		struct {
			int unit;
			bcm_failover_element_t * failover;
			int enable;
		} failover_status_set;
#endif	/* INCLUDE_L3 */
#ifdef	INCLUDE_FCMAP
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_diag_code_t * diag;
		} fcmap_diag_get;
		struct {
			int unit;
			bcm_fcmap_event_t t;
			int * enable;
		} fcmap_event_enable_get;
		struct {
			int unit;
			bcm_fcmap_event_t t;
			int enable;
		} fcmap_event_enable_set;
		struct {
			int unit;
			bcm_fcmap_event_cb cb;
			void * user_data;
		} fcmap_event_register;
		struct {
			int unit;
			bcm_fcmap_event_cb cb;
		} fcmap_event_unregister;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_lf_tr_t * trigger;
			bcm_fcmap_lf_rc_t * rc;
		} fcmap_linkfault_trigger_rc_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_port_ability_t * ability_mask;
		} fcmap_port_ability_advert_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_port_ability_t * ability_mask;
		} fcmap_port_ability_advert_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_port_config_t * cfg;
		} fcmap_port_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_port_config_t * cfg;
		} fcmap_port_config_selective_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_port_config_t * cfg;
		} fcmap_port_config_selective_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_port_config_t * cfg;
		} fcmap_port_config_set;
		struct {
			int unit;
			bcm_port_t port;
		} fcmap_port_enable;
		struct {
			int unit;
			bcm_port_t port;
		} fcmap_port_link_reset;
		struct {
			int unit;
			bcm_port_t port;
		} fcmap_port_shutdown;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_port_speed_t speed;
		} fcmap_port_speed_set;
		struct {
			int unit;
			bcm_fcmap_port_traverse_cb callbk;
			void * user_data;
		} fcmap_port_traverse;
		struct {
			int unit;
			bcm_port_t port;
		} fcmap_stat_clear;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_stat_t stat;
			uint64 * val;
		} fcmap_stat_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_stat_t stat;
			uint32 * val;
		} fcmap_stat_get32;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_vlan_vsan_map_t * vlan;
		} fcmap_vlan_map_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_vlan_vsan_map_t * vlan;
		} fcmap_vlan_map_delete;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_vlan_vsan_map_t * vlan;
		} fcmap_vlan_map_get;
#endif	/* INCLUDE_FCMAP */
		struct {
			int unit;
		} fcoe_cleanup;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan_id;
			bcm_fcoe_vsan_control_t type;
			int * arg;
		} fcoe_control_vsan_get;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan_id;
			bcm_fcoe_vsan_control_t type;
			int arg;
		} fcoe_control_vsan_set;
		struct {
			int unit;
		} fcoe_enable_set;
		struct {
			int unit;
			uint32 flags;
			uint8 r_ctl;
			bcm_fcoe_fc_header_type_t * hdr_type;
		} fcoe_fc_header_type_get;
		struct {
			int unit;
			uint32 flags;
			uint8 r_ctl;
			bcm_fcoe_fc_header_type_t hdr_type;
		} fcoe_fc_header_type_set;
		struct {
			int unit;
		} fcoe_init;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t intf;
			bcm_fcoe_intf_config_t * cfg;
		} fcoe_intf_config_get;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t intf;
			bcm_fcoe_intf_config_t * cfg;
		} fcoe_intf_config_set;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
		} fcoe_route_add;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
		} fcoe_route_delete;
		struct {
			int unit;
		} fcoe_route_delete_all;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
		} fcoe_route_delete_by_interface;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
		} fcoe_route_delete_by_prefix;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
		} fcoe_route_find;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
			uint32 stat_counter_id;
		} fcoe_route_stat_attach;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
			bcm_fcoe_route_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} fcoe_route_stat_counter_get;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
			bcm_fcoe_route_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} fcoe_route_stat_counter_set;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
			bcm_fcoe_route_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} fcoe_route_stat_counter_sync_get;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
		} fcoe_route_stat_detach;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
			bcm_fcoe_route_stat_t stat;
			uint32 * stat_counter_id;
		} fcoe_route_stat_id_get;
		struct {
			int unit;
			uint32 flags;
			bcm_fcoe_route_traverse_cb trav_fn;
			void * user_data;
		} fcoe_route_traverse;
		struct {
			int unit;
			uint32 options;
			bcm_fcoe_vsan_t * vsan;
			bcm_fcoe_vsan_id_t * vsan_id;
		} fcoe_vsan_create;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan_id;
		} fcoe_vsan_destroy;
		struct {
			int unit;
		} fcoe_vsan_destroy_all;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan_id;
			bcm_fcoe_vsan_t * vsan;
		} fcoe_vsan_get;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan_id;
			bcm_fcoe_vsan_t * vsan;
		} fcoe_vsan_set;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan;
			uint32 stat_counter_id;
		} fcoe_vsan_stat_attach;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan;
			bcm_fcoe_vsan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} fcoe_vsan_stat_counter_get;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan;
			bcm_fcoe_vsan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} fcoe_vsan_stat_counter_set;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan;
			bcm_fcoe_vsan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} fcoe_vsan_stat_counter_sync_get;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan;
		} fcoe_vsan_stat_detach;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan;
			bcm_fcoe_vsan_stat_t stat;
			uint32 * stat_counter_id;
		} fcoe_vsan_stat_id_get;
		struct {
			int unit;
			bcm_fcoe_vsan_translate_key_config_t * key;
			bcm_fcoe_vsan_action_set_t * action;
		} fcoe_vsan_translate_action_add;
		struct {
			int unit;
			bcm_fcoe_vsan_translate_key_config_t * key;
		} fcoe_vsan_translate_action_delete;
		struct {
			int unit;
			uint32 flags;
			bcm_fcoe_vsan_traverse_cb trav_fn;
			void * user_data;
		} fcoe_vsan_traverse;
		struct {
			int unit;
			bcm_fcoe_zone_entry_t * zone;
		} fcoe_zone_add;
		struct {
			int unit;
			bcm_fcoe_zone_entry_t * zone;
		} fcoe_zone_delete;
		struct {
			int unit;
		} fcoe_zone_delete_all;
		struct {
			int unit;
			bcm_fcoe_zone_entry_t * zone;
		} fcoe_zone_delete_by_did;
		struct {
			int unit;
			bcm_fcoe_zone_entry_t * zone;
		} fcoe_zone_delete_by_sid;
		struct {
			int unit;
			bcm_fcoe_zone_entry_t * zone;
		} fcoe_zone_delete_by_vsan;
		struct {
			int unit;
			bcm_fcoe_zone_entry_t * zone;
		} fcoe_zone_get;
		struct {
			int unit;
			uint32 flags;
			bcm_fcoe_zone_traverse_cb trav_fn;
			void * user_data;
		} fcoe_zone_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_field_ace_format_t ace_format_id;
			bcm_field_ace_entry_info_t * entry_info;
			uint32 * entry_handle;
		} field_ace_entry_add;
		struct {
			int unit;
			uint32 entry_handle;
		} field_ace_entry_delete;
		struct {
			int unit;
			uint32 entry_handle;
			bcm_field_ace_entry_info_t * entry_info;
		} field_ace_entry_info_get;
		struct {
			int unit;
			uint32 flags;
			bcm_field_ace_format_info_t * ace_format_info;
			bcm_field_ace_format_t * ace_format_id;
		} field_ace_format_add;
		struct {
			int unit;
			bcm_field_ace_format_t ace_format_id;
		} field_ace_format_delete;
		struct {
			int unit;
			bcm_field_ace_format_t ace_format_id;
			bcm_field_ace_format_info_t * ace_format_info;
		} field_ace_format_info_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint32 param0;
			uint32 param1;
		} field_action_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_class_info_t * class_info;
		} field_action_class_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_class_info_t * class_info;
		} field_action_class_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			int core_config_arr_len;
			bcm_field_action_core_config_t * core_config_arr;
		} field_action_config_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			int core_config_arr_len;
			bcm_field_action_core_config_t * core_config_arr;
		} field_action_config_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcm_field_action_params_t * params;
			bcm_field_action_match_config_t * match_config;
		} field_action_config_info_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcm_field_action_params_t * params;
			bcm_field_action_match_config_t * match_config;
		} field_action_config_info_get;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_action_t action;
			uint8 max_ct;
			uint16 * cont_id_arr;
			uint16 * cont_sz_arr;
			uint8 * actual_ct;
			uint8 * action_size;
		} field_action_cont_info_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_CopyToCpu_config_t * CopyToCpu_config;
		} field_action_copytocpu_config_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_CopyToCpu_config_t CopyToCpu_config;
		} field_action_copytocpu_config_set;
		struct {
			int unit;
			uint32 flags;
			bcm_field_action_info_t * action_info;
			bcm_field_action_t * action_id;
		} field_action_create;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint32 param0;
			uint32 param1;
		} field_action_delete;
		struct {
			int unit;
			bcm_field_action_t action_id;
		} field_action_destroy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint32 * param0;
			uint32 * param1;
		} field_action_get;
		struct {
			int unit;
			bcm_field_action_t action_id;
			bcm_field_stage_t stage;
			bcm_field_action_info_t * action_info;
		} field_action_info_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint8 * mac;
		} field_action_mac_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcm_mac_t * mac;
		} field_action_mac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcm_pbmp_t pbmp;
		} field_action_ports_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcm_pbmp_t * pbmp;
		} field_action_ports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_redirect_config_t * redirect_config;
		} field_action_redirect_config_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_redirect_config_t redirect_config;
		} field_action_redirect_config_set;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
		} field_action_remove;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_action_remove_all;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_action_t bcm_action;
			uint32 * bcm_value;
			uint32 * hw_value;
		} field_action_value_map;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcm_vlan_action_set_t * vlan_action_set;
		} field_action_vlan_actions_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcm_vlan_action_set_t * vlan_action_set;
		} field_action_vlan_actions_get;
		struct {
			int unit;
			uint32 flags;
			int internal_action;
			uint32 * width_p;
		} field_action_width_get;
		struct {
			int unit;
			uint32 flags;
			int internal_action;
			uint32 width;
		} field_action_width_set;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_qualify_t qual;
			uint32 num_entries;
			uint32 * orig_values_array;
			uint32 * map_values_array;
		} field_class_map_get;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_qualify_t qual;
			uint32 num_entries;
			uint32 * orig_values_array;
			uint32 * map_values_array;
		} field_class_map_set;
		struct {
			int unit;
			bcm_field_qualify_t qual;
			uint16 * class_size;
		} field_class_size_get;
		struct {
			int unit;
			int pair_id;
			bcm_field_compare_operand_t compare_operand;
			int * offset;
		} field_compare_operand_offset_get;
		struct {
			int unit;
			bcm_field_compression_map_type_t type;
			bcm_pbmp_t ports;
			uint16 entry_cnt;
			uint16 * val_arr;
			uint16 * map_val_arr;
		} field_compression_direct_mapped_get;
		struct {
			int unit;
			bcm_field_compression_map_type_t type;
			bcm_pbmp_t ports;
			uint16 entry_cnt;
			uint16 * val_arr;
			uint16 * map_val_arr;
		} field_compression_direct_mapped_set;
		struct {
			int unit;
			bcm_field_compression_map_type_t type;
			uint16 index;
			bcm_pbmp_t ports;
			uint16 * val;
			uint16 * map_val;
		} field_compression_index_mapped_get;
		struct {
			int unit;
			bcm_field_compression_map_type_t type;
			uint16 index;
			bcm_pbmp_t ports;
			uint16 val;
			uint16 map_val;
		} field_compression_index_mapped_set;
		struct {
			int unit;
			uint32 flags;
			bcm_field_stage_t stage;
			bcm_field_context_t context_id;
			uint32 pair_id;
			bcm_field_context_compare_info_t * cmp_info;
		} field_context_compare_create;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_context_t context_id;
			uint32 pair_id;
		} field_context_compare_destroy;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_context_t context_id;
			uint32 pair_id;
			bcm_field_context_compare_info_t * cmp_info;
		} field_context_compare_info_get;
		struct {
			int unit;
			uint32 flags;
			bcm_field_stage_t stage;
			bcm_field_context_info_t * context_info;
			bcm_field_context_t * context_id;
		} field_context_create;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_context_t context_id;
		} field_context_destroy;
		struct {
			int unit;
			uint32 flags;
			bcm_field_stage_t stage;
			bcm_field_context_t context_id;
			bcm_field_context_hash_info_t * hash_info;
		} field_context_hash_create;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_context_t context_id;
		} field_context_hash_destroy;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_context_t context_id;
			bcm_field_context_hash_info_t * hash_info;
		} field_context_hash_info_get;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_context_t context_id;
			bcm_field_context_info_t * context_info;
		} field_context_info_get;
		struct {
			int unit;
			uint32 flags;
			bcm_field_stage_t stage;
			bcm_field_context_t context_id;
			bcm_field_context_param_info_t * context_params;
		} field_context_param_set;
		struct {
			int unit;
			bcm_field_control_t control;
			uint32 * state;
		} field_control_get;
		struct {
			int unit;
			bcm_field_control_t control;
			uint32 state;
		} field_control_set;
		struct {
			int unit;
			bcm_field_data_qualifier_t * data_qualifier;
		} field_data_qualifier_create;
		struct {
			int unit;
			int qual_id;
		} field_data_qualifier_destroy;
		struct {
			int unit;
		} field_data_qualifier_destroy_all;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_ethertype_t * etype;
		} field_data_qualifier_ethertype_add;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_ethertype_t * etype;
		} field_data_qualifier_ethertype_delete;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_qualifier_t * qual;
		} field_data_qualifier_get;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_ip_protocol_t * ip_protocol;
		} field_data_qualifier_ip_protocol_add;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_ip_protocol_t * ip_protocol;
		} field_data_qualifier_ip_protocol_delete;
		struct {
			int unit;
			int qual_size;
			int * qual_array;
			int * qual_count;
		} field_data_qualifier_multi_get;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_packet_format_t * packet_format;
		} field_data_qualifier_packet_format_add;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_packet_format_t * packet_format;
		} field_data_qualifier_packet_format_delete;
		struct {
			int unit;
			uint32 options;
			bcm_field_destination_match_t * match;
			bcm_field_destination_action_t * action;
		} field_destination_entry_add;
		struct {
			int unit;
			bcm_field_destination_match_t * match;
		} field_destination_entry_delete;
		struct {
			int unit;
			bcm_field_destination_match_t * match;
			bcm_field_destination_action_t * action;
		} field_destination_entry_get;
		struct {
			int unit;
			bcm_field_destination_entry_traverse_cb callback;
			void * user_data;
		} field_destination_entry_traverse;
		struct {
			int unit;
			bcm_field_destination_match_t * match;
			uint32 * value;
		} field_destination_flexctr_object_get;
		struct {
			int unit;
			bcm_field_destination_match_t * match;
			uint32 value;
		} field_destination_flexctr_object_set;
		struct {
			int unit;
			bcm_field_destination_match_t * match;
			uint32 stat_counter_id;
		} field_destination_stat_attach;
		struct {
			int unit;
			bcm_field_destination_match_t * match;
		} field_destination_stat_detach;
		struct {
			int unit;
			bcm_field_destination_match_t * match;
			uint32 * stat_counter_id;
		} field_destination_stat_id_get;
		struct {
			int unit;
		} field_detach;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_extraction_action_t action;
			int count;
			bcm_field_extraction_field_t * extractions;
		} field_direct_extraction_action_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_extraction_action_t * action;
			int max_count;
			bcm_field_extraction_field_t * extractions;
			int * actual_count;
		} field_direct_extraction_action_get;
		struct {
			int unit;
			uint32 flags;
			bcm_field_group_t fg_id;
			bcm_field_context_t context_id;
			bcm_field_action_priority_t * encoded_position;
			bcm_field_efes_action_info_t * efes_action_info;
		} field_efes_action_add;
		struct {
			int unit;
			bcm_field_group_t fg_id;
			bcm_field_context_t context_id;
			bcm_field_action_priority_t bcm_field_action_priority_t;
		} field_efes_action_delete;
		struct {
			int unit;
			bcm_field_group_t fg_id;
			bcm_field_context_t context_id;
			bcm_field_action_priority_t encoded_position;
			bcm_field_efes_action_info_t * efes_action_info;
		} field_efes_action_info_get;
		struct {
			int unit;
			uint32 flags;
			bcm_field_group_t fg_id;
			bcm_field_entry_info_t * entry_info;
			bcm_field_entry_t * entry_handle;
		} field_entry_add;
		struct {
			int unit;
			bcm_field_entry_t src_entry;
			bcm_field_entry_t * dst_entry;
			uint32 flags;
		} field_entry_config_copy;
		struct {
			int unit;
			bcm_field_entry_config_t * entry_config;
		} field_entry_config_create;
		struct {
			int unit;
			bcm_field_entry_config_t * entry_config;
		} field_entry_config_get;
		struct {
			int unit;
			bcm_field_entry_t src_entry;
			bcm_field_entry_t * dst_entry;
		} field_entry_copy;
		struct {
			int unit;
			bcm_field_entry_t src_entry;
			bcm_field_entry_t dst_entry;
		} field_entry_copy_id;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_entry_t * entry;
		} field_entry_create;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_entry_t entry;
		} field_entry_create_id;
		struct {
			int unit;
			bcm_field_group_t fg_id;
			bcm_field_entry_qual_t * entry_qual_info;
			bcm_field_entry_t entry_handle;
		} field_entry_delete;
		struct {
			int unit;
		} field_entry_delete_all;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_destroy;
		struct {
			int unit;
		} field_entry_destroy_all;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * enable_flag;
		} field_entry_enable_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int enable_flag;
		} field_entry_enable_set;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_flexctr_config_t * flexctr_cfg;
		} field_entry_flexctr_attach;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_flexctr_config_t * flexctr_cfg;
		} field_entry_flexctr_detach;
		struct {
			int unit;
			uint32 flags;
			bcm_field_entry_t entry_handle;
		} field_entry_hit_flush;
		struct {
			int unit;
			uint32 flags;
			bcm_field_entry_t entry_handle;
			uint8 * entry_hit_core_bmp;
		} field_entry_hit_get;
		struct {
			int unit;
			bcm_field_group_t fg_id;
			bcm_field_entry_t entry_handle;
			bcm_field_entry_info_t * entry_info;
		} field_entry_info_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_install;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_entry_t * large_dt_entry;
		} field_entry_install_and_handler_update;
		struct {
			int unit;
			bcm_field_group_t group;
			int entry_size;
			bcm_field_entry_t * entry_array;
			int * entry_count;
		} field_entry_multi_get;
		struct {
			int unit;
			bcm_field_entry_oper_t * entry_oper;
		} field_entry_operation;
		struct {
			int unit;
			bcm_field_entry_t entry_id;
			int level;
			bcm_policer_t policer_id;
		} field_entry_policer_attach;
		struct {
			int unit;
			bcm_field_entry_t entry_id;
			int level;
		} field_entry_policer_detach;
		struct {
			int unit;
			bcm_field_entry_t entry_id;
		} field_entry_policer_detach_all;
		struct {
			int unit;
			bcm_field_entry_t entry_id;
			int level;
			bcm_policer_t * policer_id;
		} field_entry_policer_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * prio;
		} field_entry_prio_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int prio;
		} field_entry_prio_set;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_reinstall;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_remove;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int stat_id;
		} field_entry_stat_attach;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int stat_id;
		} field_entry_stat_detach;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int stat_id;
			bcm_field_stat_action_t stat_action;
		} field_entry_stat_extended_attach;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * stat_id;
			bcm_field_stat_action_t * stat_action;
		} field_entry_stat_extended_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * stat_id;
		} field_entry_stat_get;
		struct {
			int unit;
			uint32 flags;
			bcm_field_group_t fg_id;
			bcm_field_action_priority_t encoded_position;
			bcm_field_fem_action_info_t * fem_action_info;
		} field_fem_action_add;
		struct {
			int unit;
			bcm_field_group_t fg_id;
			bcm_field_action_priority_t bcm_field_action_priority_t;
		} field_fem_action_delete;
		struct {
			int unit;
			bcm_field_group_t fg_id;
			bcm_field_action_priority_t encoded_position;
			bcm_field_fem_action_info_t * fem_action_info;
		} field_fem_action_info_get;
		struct {
			int unit;
			uint32 flags;
			bcm_field_group_t fg_id;
			int entry_id;
			bcm_field_flush_entry_info_t * flush_entry_info;
		} field_flush_entry_add;
		struct {
			int unit;
			uint32 flags;
			bcm_field_group_t fg_id;
			int entry_id;
		} field_flush_entry_delete;
		struct {
			int unit;
			uint32 flags;
			bcm_field_group_t fg_id;
			int entry_id;
			bcm_field_flush_entry_info_t * flush_entry_info;
		} field_flush_entry_get;
		struct {
			int unit;
			uint32 flags;
			bcm_field_group_t fg_id;
			uint32 flush_profile_id;
		} field_flush_profile_attach;
		struct {
			int unit;
			uint32 flags;
			bcm_field_flush_profile_info_t * flush_profile_info;
			uint32 * flush_profile_id;
		} field_flush_profile_create;
		struct {
			int unit;
			uint32 flags;
			uint32 flush_profile_id;
		} field_flush_profile_destroy;
		struct {
			int unit;
			uint32 flags;
			uint32 flush_profile_id;
			bcm_field_flush_profile_info_t * flush_profile_info;
		} field_flush_profile_get;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_aset_t * aset;
		} field_group_action_get;
		struct {
			int unit;
			uint32 flags;
			bcm_field_group_t fg_id;
			bcm_field_action_t action;
			int * offset;
		} field_group_action_offset_get;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_aset_t aset;
		} field_group_action_set;
		struct {
			int unit;
			uint32 flags;
			bcm_field_group_info_t * fg_info;
			bcm_field_group_t * fg_id;
		} field_group_add;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_compress;
		struct {
			int unit;
			bcm_field_group_config_t * group_config;
		} field_group_config_create;
		struct {
			int unit;
			bcm_field_group_config_extension_t * group_config;
		} field_group_config_extension_create;
		struct {
			int unit;
			bcm_field_group_config_t * group_config;
			bcm_field_group_mode_t * mode;
		} field_group_config_validate;
		struct {
			int unit;
			uint32 flags;
			bcm_field_group_t fg_id;
			bcm_field_context_t context_id;
			bcm_field_group_attach_info_t * attach_info;
		} field_group_context_attach;
		struct {
			int unit;
			bcm_field_group_t fg_id;
			bcm_field_context_t context_id;
		} field_group_context_detach;
		struct {
			int unit;
			bcm_field_group_t fg_id;
			bcm_field_context_t context_id;
			bcm_field_group_attach_info_t * attach_info;
		} field_group_context_info_get;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_t * group;
		} field_group_create;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_t group;
		} field_group_create_id;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_create_mode;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_create_mode_id;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_entry_t * entry;
		} field_group_default_entry_get;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_entry_t entry;
			int enable;
		} field_group_default_entry_set;
		struct {
			int unit;
			bcm_field_group_t fg_id;
		} field_group_delete;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_destroy;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_field_group_t group;
			int * enable;
		} field_group_enable_get;
		struct {
			int unit;
			bcm_field_group_t group;
			int enable;
		} field_group_enable_set;
		struct {
			int unit;
			bcm_field_group_t group;
			int * enable;
		} field_group_expansion_enable_get;
		struct {
			int unit;
			bcm_field_group_t group;
			int enable;
		} field_group_expansion_enable_set;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_flush;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_qset_t * qset;
		} field_group_get;
		struct {
			int unit;
			bcm_field_group_t fg_id;
			bcm_field_group_info_t * fg_info;
		} field_group_info_get;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_install;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_group_mode_t * mode;
		} field_group_mode_get;
		struct {
			int unit;
			bcm_field_group_mode_type_t mode_type;
			bcm_field_group_packet_type_t packet_type;
			bcm_field_qset_t * qset;
		} field_group_mode_qset_get;
		struct {
			int unit;
			bcm_field_qualify_t stage;
			bcm_field_group_oper_mode_t * mode;
		} field_group_oper_mode_get;
		struct {
			int unit;
			bcm_field_qualify_t stage;
			bcm_field_group_oper_mode_t mode;
		} field_group_oper_mode_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_port_create_mode;
		struct {
			int unit;
			bcm_port_t port;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_port_create_mode_id;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_pbmp_t pbmp;
		} field_group_ports_add;
		struct {
			int unit;
			bcm_pbmp_t pbmp;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_ports_create_mode;
		struct {
			int unit;
			bcm_pbmp_t pbmp;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_ports_create_mode_id;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_pbmp_t * pbmp;
		} field_group_ports_get;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_pbmp_t pbmp;
		} field_group_ports_remove;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_presel_set_t * presel;
		} field_group_presel_get;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_presel_set_t * presel;
		} field_group_presel_set;
		struct {
			int unit;
			bcm_field_group_t group;
			int * priority;
		} field_group_priority_get;
		struct {
			int unit;
			bcm_field_group_t group;
			int priority;
		} field_group_priority_set;
		struct {
			int unit;
			uint32 flags;
			bcm_field_group_t fg_id;
			bcm_field_qualify_t qualifier;
			int * offset;
		} field_group_qualifier_offset_get;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_remove;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_qset_t qset;
		} field_group_set;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_group_status_t * status;
		} field_group_status_get;
		struct {
			int unit;
			bcm_field_group_traverse_cb callback;
			void * user_data;
		} field_group_traverse;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_wlan_create_mode;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_wlan_create_mode_id;
		struct {
			int unit;
			bcm_field_hintid_t hint_id;
			bcm_field_hint_t * hint;
		} field_hints_add;
		struct {
			int unit;
			bcm_field_hintid_t * hint_id;
		} field_hints_create;
		struct {
			int unit;
			bcm_field_hintid_t hint_id;
			bcm_field_hint_t * hint;
		} field_hints_delete;
		struct {
			int unit;
			bcm_field_hintid_t hint_id;
		} field_hints_delete_all;
		struct {
			int unit;
			bcm_field_hintid_t hint_id;
		} field_hints_destroy;
		struct {
			int unit;
			bcm_field_hintid_t hint_id;
			bcm_field_hint_t * hint;
		} field_hints_get;
		struct {
			int unit;
		} field_init;
		struct {
			int unit;
			uint32 flags;
			int internal_action;
			uint32 bcm_action_size;
			bcm_field_internal_to_bcm_map_t * bcm_action_stage;
			uint32 * bcm_action_size_actual;
		} field_internal_to_bcm_action_map;
		struct {
			int unit;
			bcm_mac_t * lower_limit;
			bcm_mac_t * upper_limit;
		} field_macsec_DstMacRange_get;
		struct {
			int unit;
			uint8 * lower_limit;
			uint8 * upper_limit;
		} field_macsec_DstMacRange_set;
		struct {
			int unit;
			uint32 flags;
			bcm_field_name_to_id_info_t * name_to_id_info;
			int * nof_ids;
			uint32 * ids;
		} field_name_to_id;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_oam_stat_action_t * oam_stat_action;
		} field_oam_stat_action_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_oam_stat_action_t * oam_stat_action;
		} field_oam_stat_action_delete;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_oam_stat_action_delete_all;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_oam_stat_action_t * oam_stat_action;
		} field_oam_stat_action_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int oam_stat_max;
			bcm_field_oam_stat_action_t * oam_stat_action;
			int * oam_stat_count;
		} field_oam_stat_action_get_all;
		struct {
			int unit;
			bcm_field_presel_config_t * presel_config;
		} field_presel_config_create;
		struct {
			int unit;
			bcm_field_presel_t presel_id;
			bcm_field_presel_config_t * presel_config;
		} field_presel_config_get;
		struct {
			int unit;
			bcm_field_presel_t presel_id;
			bcm_field_presel_config_t * presel_config;
		} field_presel_config_set;
		struct {
			int unit;
			bcm_field_presel_t * presel_id;
		} field_presel_create;
		struct {
			int unit;
			bcm_field_presel_t presel_id;
		} field_presel_create_id;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_presel_t presel_id;
		} field_presel_create_stage_id;
		struct {
			int unit;
			bcm_field_presel_t presel_id;
		} field_presel_destroy;
		struct {
			int unit;
			uint32 flags;
			bcm_field_presel_entry_id_t * entry_id;
			bcm_field_presel_entry_data_t * entry_data;
		} field_presel_get;
		struct {
			int unit;
			bcm_field_presel_group_config_t * group_config;
		} field_presel_group_config_create;
		struct {
			int unit;
			bcm_field_presel_group_config_t * group_config;
		} field_presel_group_config_get;
		struct {
			int unit;
			bcm_field_presel_group_t presel_group;
		} field_presel_group_destroy;
		struct {
			int unit;
			uint32 flags;
			bcm_field_presel_entry_id_t * entry_id;
			bcm_field_presel_entry_data_t * entry_data;
		} field_presel_set;
		struct {
			int unit;
			bcm_field_qset_t * qset;
			int qual_id;
		} field_qset_data_qualifier_add;
		struct {
			int unit;
			bcm_field_qset_t * qset;
			int qual_id;
		} field_qset_data_qualifier_delete;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int qual_max;
			int * qual_arr;
			int * qual_count;
		} field_qset_data_qualifier_get;
		struct {
			int unit;
			bcm_field_qualify_t qualifier;
			int num_objects;
			int * object_list;
			bcm_field_qset_t * qset;
		} field_qset_id_multi_delete;
		struct {
			int unit;
			bcm_field_qset_t qset;
			bcm_field_qualify_t qualifier;
			int max_objects;
			int * object_list;
			int * count_objects;
		} field_qset_id_multi_get;
		struct {
			int unit;
			bcm_field_qualify_t qualifier;
			int num_objects;
			int * object_list;
			bcm_field_qset_t * qset;
		} field_qset_id_multi_set;
		struct {
			int unit;
			uint32 flags;
			bcm_field_qualifier_info_create_t * qual_info;
			bcm_field_qualify_t * qual_id;
		} field_qualifier_create;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_qualify_t qual_id;
		} field_qualifier_delete;
		struct {
			int unit;
			bcm_field_qualify_t qual_id;
		} field_qualifier_destroy;
		struct {
			int unit;
			bcm_field_qualify_t qual_id;
			bcm_field_stage_t stage;
			bcm_field_qualifier_info_get_t * qual_info;
		} field_qualifier_info_get;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_qualify_t bcm_qual;
			uint32 * bcm_value;
			uint32 * hw_value;
		} field_qualifier_value_map;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_AppType_t type;
		} field_qualify_AppType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_AppType_t * type;
		} field_qualify_AppType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_ApplSignatureId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_ApplSignatureId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ArpDstMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_ArpDstMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ArpOpcode_t data;
		} field_qualify_ArpOpcode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ArpOpcode_t * data;
		} field_qualify_ArpOpcode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_ArpSenderIp4;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ArpSenderIp4_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ArpSrcMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_ArpSrcMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_ArpTargetIp4;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ArpTargetIp4_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_BfdGoodPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_BfdGoodPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_BfdMultiplierLen;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_BfdMultiplierLen_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_BfdPktVersionOne;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_BfdPktVersionOne_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_BfdPktWithDstIpLoopbackAddr;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_BfdPktWithDstIpLoopbackAddr_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_BfdVerFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_BfdVerFlags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_BfdYourDiscriminator;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_BfdYourDiscriminator_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_BypassFilter;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_BypassFilter32;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_BypassFilter32_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_BypassFilter_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_BypassSrcMacFilter;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_BypassSrcMacFilter_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CapwapHdrRid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapHdrRid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CapwapHdrType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapHdrType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_CapwapPayloadDip;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapPayloadDip6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_CapwapPayloadDip6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_CapwapPayloadDip_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapPayloadDstMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_CapwapPayloadDstMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_CapwapPayloadEtherType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_CapwapPayloadEtherType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_CapwapPayloadInnerVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CapwapPayloadInnerVlanCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapPayloadInnerVlanCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_CapwapPayloadInnerVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_CapwapPayloadInnerVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CapwapPayloadInnerVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapPayloadInnerVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_CapwapPayloadInnerVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CapwapPayloadIpProtocol;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapPayloadIpProtocol_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CapwapPayloadL3HdrParseable;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapPayloadL3HdrParseable_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_CapwapPayloadL4DstPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_CapwapPayloadL4DstPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CapwapPayloadL4HdrParseable;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapPayloadL4HdrParseable_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_CapwapPayloadL4SrcPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_CapwapPayloadL4SrcPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_CapwapPayloadOuterVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CapwapPayloadOuterVlanCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapPayloadOuterVlanCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_CapwapPayloadOuterVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_CapwapPayloadOuterVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CapwapPayloadOuterVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapPayloadOuterVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_CapwapPayloadOuterVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CapwapPayloadSOF;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapPayloadSOF_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_CapwapPayloadSip;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapPayloadSip6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_CapwapPayloadSip6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_CapwapPayloadSip_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapPayloadSrcMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_CapwapPayloadSrcMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CapwapPayloadTos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapPayloadTos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CapwapPayloadVlanFormat;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CapwapPayloadVlanFormat_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_CascadedKeyValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_CascadedKeyValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_ClassId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ClassId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_CnTag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CnTagPresent;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CnTagPresent_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_CnTag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 color;
		} field_qualify_Color;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * color;
		} field_qualify_Color_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CompressionDstHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CompressionDstHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CompressionSrcHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CompressionSrcHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CongestionExperienced;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CongestionExperienced_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CongestionMarked;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CongestionMarked_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_Container;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_Container_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CopyToCpu;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_CopyToCpuReasonHigh;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_CopyToCpuReasonHigh_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_CopyToCpuReasonLow;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_CopyToCpuReasonLow_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CopyToCpuTruncate;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CopyToCpuTruncate_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CopyToCpu_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_cos_map_select_t cos_map_select;
		} field_qualify_CosMapSelect;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_cos_map_select_t * cos_map_select;
		} field_qualify_CosMapSelect_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t queue_gport;
		} field_qualify_CosQueueId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * queue_gport;
		} field_qualify_CosQueueId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_CosQueueNum;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_CosQueueNum_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CpuQueue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CpuQueue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CpuVisibilityPacket;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CpuVisibilityPacket_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_CustomHeaderData;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_CustomHeaderData_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CustomHeaderPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CustomHeaderPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DSCP;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DSCP_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_decap_t decap;
		} field_qualify_Decap;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_decap_t * decap;
		} field_qualify_Decap_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DestVirtualPortValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DestVirtualPortValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t data;
			bcm_pbmp_t mask;
		} field_qualify_DevicePortBitmap;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t * data;
			bcm_pbmp_t * mask;
		} field_qualify_DevicePortBitmap_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DevicePortOpaqueCommand;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DevicePortOpaqueCommand_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Dhcp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Dhcp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DoNotModify;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DoNotModify_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DosAttack;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DosAttackEvents;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_DosAttackEvents_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DosAttack_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DownMepSatTerminated;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DownMepSatTerminated_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Drop;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_drop_reason_t type;
		} field_qualify_DropReason;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_drop_reason_t * type;
		} field_qualify_DropReason_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Drop_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstClassField;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_DstClassField_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstClassL2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_DstClassL2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstClassL3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_DstClassL3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstCompressionClassId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_DstCompressionClassId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
		} field_qualify_DstGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
		} field_qualify_DstGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
			bcm_gport_t port_mask;
		} field_qualify_DstGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
			bcm_gport_t * port_mask;
		} field_qualify_DstGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DstHiGig;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstHiGig_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_DstIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstIp6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_DstIp6Class;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_DstIp6ClassLower;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_DstIp6ClassLower_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_DstIp6ClassMsbNibble;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_DstIp6ClassMsbNibble_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_DstIp6ClassUpper;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_DstIp6ClassUpper_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_DstIp6Class_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstIp6High;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_DstIp6High_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstIp6Low;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_DstIp6Low_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_DstIp6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_DstIpClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_DstIpClassLower;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_DstIpClassLower_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_DstIpClassMsbNibble;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_DstIpClassMsbNibble_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_DstIpClassUpper;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_DstIpClassUpper_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_DstIpClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DstIpLocal;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstIpLocal_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_DstIp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_multicast_t group;
			bcm_multicast_t mask;
		} field_qualify_DstL2MulticastGroup;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_multicast_t * group;
			bcm_multicast_t * mask;
		} field_qualify_DstL2MulticastGroup_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t if_id;
		} field_qualify_DstL3Egress;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstL3EgressNextHops;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstL3EgressNextHopsUnderlay;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_DstL3EgressNextHopsUnderlay_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_DstL3EgressNextHops_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t if_id;
		} field_qualify_DstL3EgressUnderlay;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t * if_id;
		} field_qualify_DstL3EgressUnderlay_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t * if_id;
		} field_qualify_DstL3Egress_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_multicast_t group;
			bcm_multicast_t mask;
		} field_qualify_DstL3MulticastGroup;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_multicast_t * group;
			bcm_multicast_t * mask;
		} field_qualify_DstL3MulticastGroup_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_DstMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t mim_port_id;
		} field_qualify_DstMimGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * mim_port_id;
		} field_qualify_DstMimGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t mim_port_id;
			bcm_gport_t mim_port_mask;
		} field_qualify_DstMimGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * mim_port_id;
			bcm_gport_t * mim_port_mask;
		} field_qualify_DstMimGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t mpls_port_id;
		} field_qualify_DstMplsGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * mpls_port_id;
		} field_qualify_DstMplsGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t mpls_port_id;
			bcm_gport_t mpls_port_mask;
		} field_qualify_DstMplsGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * mpls_port_id;
			bcm_gport_t * mpls_port_mask;
		} field_qualify_DstMplsGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_multicast_t group;
		} field_qualify_DstMulticastGroup;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_multicast_t * group;
		} field_qualify_DstMulticastGroup_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_multicast_t group;
			bcm_multicast_t mask;
		} field_qualify_DstMulticastGroups;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_multicast_t * group;
			bcm_multicast_t * mask;
		} field_qualify_DstMulticastGroups_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t mpintf;
		} field_qualify_DstMultipath;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t data;
			bcm_if_t mask;
		} field_qualify_DstMultipathLevel1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t * data;
			bcm_if_t * mask;
		} field_qualify_DstMultipathLevel1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t data;
			bcm_if_t mask;
		} field_qualify_DstMultipathLevel2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t * data;
			bcm_if_t * mask;
		} field_qualify_DstMultipathLevel2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t data;
			bcm_if_t mask;
		} field_qualify_DstMultipathOverlay;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t * data;
			bcm_if_t * mask;
		} field_qualify_DstMultipathOverlay_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t data;
			bcm_if_t mask;
		} field_qualify_DstMultipathUnderlay;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t * data;
			bcm_if_t * mask;
		} field_qualify_DstMultipathUnderlay_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t * mpintf;
		} field_qualify_DstMultipath_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t niv_port_id;
		} field_qualify_DstNivGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * niv_port_id;
		} field_qualify_DstNivGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t niv_port_id;
			bcm_gport_t niv_port_mask;
		} field_qualify_DstNivGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * niv_port_id;
			bcm_gport_t * niv_port_mask;
		} field_qualify_DstNivGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_module_t data_modid;
			bcm_module_t mask_modid;
			bcm_port_t data_port;
			bcm_port_t mask_port;
		} field_qualify_DstPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 lan_id;
		} field_qualify_DstPortSRLanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * lan_id;
		} field_qualify_DstPortSRLanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_sr_port_mode_t type;
			uint8 mask;
		} field_qualify_DstPortSRMode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_sr_port_mode_t * type;
			uint8 * mask;
		} field_qualify_DstPortSRMode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 net_id;
			uint8 mask;
		} field_qualify_DstPortSRNetId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * net_id;
			uint8 * mask;
		} field_qualify_DstPortSRNetId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
		} field_qualify_DstPortSRRoleInterlink;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
		} field_qualify_DstPortSRRoleInterlink_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_port_sr_type_t type;
		} field_qualify_DstPortSRType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_port_sr_type_t * type;
		} field_qualify_DstPortSRType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_module_t * data_modid;
			bcm_module_t * mask_modid;
			bcm_port_t * data_port;
			bcm_port_t * mask_port;
		} field_qualify_DstPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t data;
		} field_qualify_DstRpfGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * data;
		} field_qualify_DstRpfGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_DstSysPortExt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_DstSysPortExt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_trunk_t data;
			bcm_trunk_t mask;
		} field_qualify_DstTrunk;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_trunk_t * data;
			bcm_trunk_t * mask;
		} field_qualify_DstTrunk_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_DstType_t dst_type;
		} field_qualify_DstType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_DstType_t * dst_type;
		} field_qualify_DstType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t vlan_port_id;
		} field_qualify_DstVlanGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * vlan_port_id;
		} field_qualify_DstVlanGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t vlan_port_id;
			bcm_gport_t vlan_port_mask;
		} field_qualify_DstVlanGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * vlan_port_id;
			bcm_gport_t * vlan_port_mask;
		} field_qualify_DstVlanGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t vxlan_port_id;
		} field_qualify_DstVxlanGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * vxlan_port_id;
		} field_qualify_DstVxlanGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t vxlan_port_id;
			bcm_gport_t vxlan_port_mask;
		} field_qualify_DstVxlanGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * vxlan_port_id;
			bcm_gport_t * vxlan_port_mask;
		} field_qualify_DstVxlanGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t wlan_port_id;
		} field_qualify_DstWlanGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * wlan_port_id;
		} field_qualify_DstWlanGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t wlan_port_id;
			bcm_gport_t wlan_port_mask;
		} field_qualify_DstWlanGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * wlan_port_id;
			bcm_gport_t * wlan_port_mask;
		} field_qualify_DstWlanGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_ECid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ECid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_ETag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_ETag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EcnValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EcnValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EffectiveTtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EffectiveTtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EgressClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EgressClassL2Gre;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EgressClassL2Gre_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EgressClassL3Interface;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EgressClassL3InterfaceTunnel;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EgressClassL3InterfaceTunnel_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EgressClassL3Interface_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EgressClassPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EgressClassPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EgressClassTrill;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EgressClassTrill_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EgressClassTunnel;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EgressClassTunnel_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EgressClassVxlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EgressClassVxlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EgressClassWlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EgressClassWlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EgressClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EgressDOPTrigger;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EgressDOPTrigger_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int data;
			int mask;
		} field_qualify_EgressForwardingClassId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * data;
			int * mask;
		} field_qualify_EgressForwardingClassId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t tunnel_port_id;
		} field_qualify_EgressL3TunnelGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * tunnel_port_id;
		} field_qualify_EgressL3TunnelGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_mcast_pkt_reason_t type;
		} field_qualify_EgressMcastPktReason;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_mcast_pkt_reason_t * type;
		} field_qualify_EgressMcastPktReason_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_pkt_queue_notif_t type;
		} field_qualify_EgressPktQueueNotification;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_pkt_queue_notif_t * type;
		} field_qualify_EgressPktQueueNotification_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_egress_port_ctrl_t ctrl_type;
		} field_qualify_EgressPortCtrlType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_egress_port_ctrl_t * ctrl_type;
		} field_qualify_EgressPortCtrlType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EgressPortQueue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EgressPortQueue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EgressTunnelIpHeaderDscp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EgressTunnelIpHeaderDscp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EgressTunnelIpHeaderEcn;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EgressTunnelIpHeaderEcn_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_EgressTunnelIpHeaderFlowLabel;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_EgressTunnelIpHeaderFlowLabel_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EtherType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_EtherTypeClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_EtherTypeClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EtherType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EthernetOamClassVlanTranslateKeyFirst;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EthernetOamClassVlanTranslateKeyFirst_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EthernetOamClassVlanTranslateKeySecond;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EthernetOamClassVlanTranslateKeySecond_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EthernetOamClassVpn;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EthernetOamClassVpn_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EthernetOamDstClassL2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EthernetOamDstClassL2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_EthernetOamHeaderBits0_31;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_EthernetOamHeaderBits0_31_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_EthernetOamHeaderBits32_63;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_EthernetOamHeaderBits32_63_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EthernetOamInterfaceClassMim;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EthernetOamInterfaceClassMim_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EthernetOamInterfaceClassMpls;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EthernetOamInterfaceClassMpls_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EthernetOamInterfaceClassNiv;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EthernetOamInterfaceClassNiv_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EthernetOamInterfaceClassPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EthernetOamInterfaceClassPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EthernetOamInterfaceClassVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EthernetOamInterfaceClassVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EthernetOamInterfaceClassVxlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EthernetOamInterfaceClassVxlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EthernetOamTxPktUPMEP;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EthernetOamTxPktUPMEP_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int group_pri;
			uint32 data;
			uint32 mask;
		} field_qualify_ExactMatchActionClassId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int group_pri;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ExactMatchActionClassId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int group_pri;
			bcm_field_group_t group;
		} field_qualify_ExactMatchGroupClassId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int group_pri;
			bcm_field_group_t * group;
		} field_qualify_ExactMatchGroupClassId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int group_pri;
			uint8 data;
			uint8 mask;
		} field_qualify_ExactMatchHitStatus;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int group_pri;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExactMatchHitStatus_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_ExactMatchOpaqueObject0;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_ExactMatchOpaqueObject0_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExtensionHeader2Type;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExtensionHeader2Type_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExtensionHeaderSubCode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExtensionHeaderSubCode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExtensionHeaderType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExtensionHeaderType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExternalHit0;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExternalHit0_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExternalHit1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExternalHit1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExternalHit2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExternalHit2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExternalHit3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExternalHit3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExternalHit4;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExternalHit4_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExternalHit5;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExternalHit5_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExternalHit6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExternalHit6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExternalHit7;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExternalHit7_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_ExternalValue0;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_ExternalValue0_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_ExternalValue1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_ExternalValue1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_ExternalValue2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_ExternalValue2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_ExternalValue3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_ExternalValue3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_ExternalValue4;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_ExternalValue4_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_ExternalValue5;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_ExternalValue5_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_ExternalValue6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_ExternalValue6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_ExternalValue7;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_ExternalValue7_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_FabricQueueTag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_FabricQueueTag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_FcoeOxID;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_FcoeOxIDClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_FcoeOxIDClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_FcoeOxID_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_FcoeRxID;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_FcoeRxIDClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_FcoeRxIDClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_FcoeRxID_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FcoeSOF;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FcoeSOF_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FcoeVersionIsZero;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FcoeVersionIsZero_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_Fhei;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_FheiSize;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_FheiSize_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_Fhei_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanCSCtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanCSCtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanDFCtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanDFCtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_FibreChanDstId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_FibreChanDstIdClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_FibreChanDstIdClassLower;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_FibreChanDstIdClassLower_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_FibreChanDstIdClassMsbNibble;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_FibreChanDstIdClassMsbNibble_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_FibreChanDstIdClassUpper;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_FibreChanDstIdClassUpper_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_FibreChanDstIdClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_FibreChanDstId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_FibreChanFCtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_FibreChanFCtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_FibreChan_t fibre_chan_type;
		} field_qualify_FibreChanInner;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_FibreChan_t * fibre_chan_type;
		} field_qualify_FibreChanInner_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_FibreChan_t fibre_chan_type;
		} field_qualify_FibreChanOuter;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_FibreChan_t * fibre_chan_type;
		} field_qualify_FibreChanOuter_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanRCtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanRCtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanSrcBindCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanSrcBindCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanSrcFpmaCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanSrcFpmaCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_FibreChanSrcId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_FibreChanSrcIdClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_FibreChanSrcIdClassLower;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_FibreChanSrcIdClassLower_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_FibreChanSrcIdClassMsbNibble;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_FibreChanSrcIdClassMsbNibble_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_FibreChanSrcIdClassUpper;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_FibreChanSrcIdClassUpper_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_FibreChanSrcIdClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_FibreChanSrcId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_FibreChanVFTFabricId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_FibreChanVFTFabricId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanVFTHopCount;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanVFTHopCount_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanVFTPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanVFTPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanVFTValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanVFTValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanVFTVersion;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanVFTVersion_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_FibreChanVFTVsanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_FibreChanVFTVsanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanVFTVsanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanVFTVsanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanZoneCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanZoneCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_drop_reason_t type;
		} field_qualify_FirstDropReason;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_drop_reason_t * type;
		} field_qualify_FirstDropReason_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_FlexStateResultA0;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_FlexStateResultA0_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_FlexStateResultA1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_FlexStateResultA1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_flow_control_pkt_type_t fc_type;
		} field_qualify_FlowControlType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_flow_control_pkt_type_t * fc_type;
		} field_qualify_FlowControlType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_FlowId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_FlowId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_FlowtrackerAggregateClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_FlowtrackerAggregateClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_flowtracker_group_t flow_group_id;
			uint32 num_checks;
			bcm_field_flowtrackercheck_t * list_of_check_ids;
		} field_qualify_FlowtrackerCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_flowtracker_group_t flow_group_id;
			uint32 num_checks;
			bcm_field_flowtrackercheck_t * list_of_check_ids;
			uint32 * actual_num_checks;
		} field_qualify_FlowtrackerCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int data;
			int mask;
		} field_qualify_FlowtrackerClassId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_FlowtrackerClassIdSource1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_FlowtrackerClassIdSource1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_FlowtrackerClassIdSource2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_FlowtrackerClassIdSource2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * data;
			int * mask;
		} field_qualify_FlowtrackerClassId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FlowtrackerCollectorCopy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FlowtrackerCollectorCopy_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FlowtrackerDisabled;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FlowtrackerDisabled_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FlowtrackerExportQueueFull;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FlowtrackerExportQueueFull_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FlowtrackerFlowTableFull;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FlowtrackerFlowTableFull_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FlowtrackerGroupFlowExceeded;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FlowtrackerGroupFlowExceeded_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int data;
			int mask;
		} field_qualify_FlowtrackerGroupId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * data;
			int * mask;
		} field_qualify_FlowtrackerGroupId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FlowtrackerGroupValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FlowtrackerGroupValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FlowtrackerLearn;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FlowtrackerLearn_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FlowtrackerMeteringExceeded;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FlowtrackerMeteringExceeded_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ForwardCode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ForwardCode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ForwardCopy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ForwardCopy_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ForwardHdrDstMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_ForwardHdrDstMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ForwardHdrSrcMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_ForwardHdrSrcMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_ForwardHdrVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_ForwardHdrVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_ForwardingEligible;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ForwardingEligible_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_data_offset_base_t base_header;
			uint32 data;
			uint32 mask;
		} field_qualify_ForwardingHeaderOffset;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_data_offset_base_t * base_header;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ForwardingHeaderOffset_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_ForwardingOuterTpid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_ForwardingOuterTpid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ForwardingOuterVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ForwardingOuterVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_ForwardingPacketRes;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ForwardingPacketRes_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_ForwardingStatus;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ForwardingStatus_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ForwardingType_t type;
		} field_qualify_ForwardingType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ForwardingType_t * type;
		} field_qualify_ForwardingType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_ForwardingVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_ForwardingVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ForwardingVlanValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ForwardingVlanValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FromMacSecPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FromMacSecPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FrontPanelPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FrontPanelPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_GbpDstId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_GbpDstId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_GbpPresent;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_GbpPresent_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_GbpSrcId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_GbpSrcId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_GeneratedTtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_GeneratedTtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_GenericAssociatedChannelLabelValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_GenericAssociatedChannelLabelValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_GenevePktVersionZero;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_GenevePktVersionZero_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_GenevePktWithOam;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_GenevePktWithOam_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_GpeFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_GpeFlags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_GpeNetworkId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_GpeNetworkId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_GpePktVersionZero;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_GpePktVersionZero_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_GpePktWithOam;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_GpePktWithOam_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_GpeProtocol;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_GpeProtocol_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_GpeReserved0;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_GpeReserved0_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_GpeReserved1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_GpeReserved1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_GroupClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_GroupClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_header_format_t header_format;
		} field_qualify_HeaderFormat;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_header_format_extension_t header_format_extension;
		} field_qualify_HeaderFormatExtension;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_header_format_extension_t * header_format_extension;
		} field_qualify_HeaderFormatExtension_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_header_format_set_t header_format_set;
		} field_qualify_HeaderFormatSet;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_header_format_set_t * header_format_set;
		} field_qualify_HeaderFormatSet_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_header_format_t * header_format;
		} field_qualify_HeaderFormat_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGig;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_HiGig3Class;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_HiGig3Class_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_HiGig3Flags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_HiGig3Flags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGig3Pkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGig3Pkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 color;
		} field_qualify_HiGigColor;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * color;
		} field_qualify_HiGigColor_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigDoNotFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigDoNotFlags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
			bcm_gport_t port_mask;
		} field_qualify_HiGigDstGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
			bcm_gport_t * port_mask;
		} field_qualify_HiGigDstGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
			bcm_gport_t port_mask;
		} field_qualify_HiGigDstModPortGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
			bcm_gport_t * port_mask;
		} field_qualify_HiGigDstModPortGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
			bcm_gport_t port_mask;
		} field_qualify_HiGigDstModuleGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
			bcm_gport_t * port_mask;
		} field_qualify_HiGigDstModuleGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigDstMulticast;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_multicast_t group;
			bcm_multicast_t mask;
		} field_qualify_HiGigDstMulticastGroupId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_multicast_t * group;
			bcm_multicast_t * mask;
		} field_qualify_HiGigDstMulticastGroupId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigDstMulticast_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
			bcm_gport_t mask;
		} field_qualify_HiGigDstPortGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
			bcm_gport_t * port_mask;
		} field_qualify_HiGigDstPortGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigDstTrunk;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_trunk_t data;
			bcm_trunk_t mask;
		} field_qualify_HiGigDstTrunkId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_trunk_t * data;
			bcm_trunk_t * mask;
		} field_qualify_HiGigDstTrunkId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigDstTrunk_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigDstType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigDstType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigEgressMcast;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigEgressMcast_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigExtendedHeaderPresent;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigExtendedHeaderPresent_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_HiGigForwardingType_t type;
		} field_qualify_HiGigForwardingType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_HiGigForwardingType_t * type;
		} field_qualify_HiGigForwardingType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigGbpPresent;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigGbpPresent_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_HiGigGbpSrcId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_HiGigGbpSrcId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_HiGigIngressClassificationTag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_HiGigIngressClassificationTag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigIngressL3SwitchPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigIngressL3SwitchPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigIngressTagged;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigIngressTagged_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigIntCongestionNotification;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigIntCongestionNotification_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_HiGigLabel;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigLabelType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigLabelType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_HiGigLabel_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigLoadBalanceID;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigLoadBalanceID_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigMirrorOrSwitchPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigMirrorOrSwitchPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigMirrorToVp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigMirrorToVp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigMplsPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigMplsPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_HiGigMulticastIndex;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_HiGigMulticastIndex_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_HiGigOffloadEngineClassificationTag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_HiGigOffloadEngineClassificationTag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigOffloadEngineDeferredFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigOffloadEngineDeferredFlags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigOffloadEngineDscpNew;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigOffloadEngineDscpNew_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigOffloadEnginePktPriNew;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigOffloadEnginePktPriNew_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigOffloadEnginePreserveDot1p;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigOffloadEnginePreserveDot1p_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigOffloadEnginePreserveDscp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigOffloadEnginePreserveDscp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigOffloadEngineSrcType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigOffloadEngineSrcType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigOffloadEngineVxltStatus;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigOffloadEngineVxltStatus_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigPortFilteringMode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigPortFilteringMode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigPreserveFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigPreserveFlags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigProtectionSwitchingStatus;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigProtectionSwitchingStatus_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigProxy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_higig_proxy_tunnel_type_t type;
		} field_qualify_HiGigProxyTunnelType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_higig_proxy_tunnel_type_t * type;
		} field_qualify_HiGigProxyTunnelType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigProxy_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_HiGigReplicationId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_HiGigReplicationId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
			bcm_gport_t port_mask;
		} field_qualify_HiGigSrcGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
			bcm_gport_t * port_mask;
		} field_qualify_HiGigSrcGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
			bcm_gport_t port_mask;
		} field_qualify_HiGigSrcModPortGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
			bcm_gport_t * port_mask;
		} field_qualify_HiGigSrcModPortGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
			bcm_gport_t port_mask;
		} field_qualify_HiGigSrcModuleGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
			bcm_gport_t * port_mask;
		} field_qualify_HiGigSrcModuleGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
			bcm_gport_t port_mask;
		} field_qualify_HiGigSrcPortGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
			bcm_gport_t * port_mask;
		} field_qualify_HiGigSrcPortGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigSrcTrunk;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigSrcTrunk_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigSrcType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigSrcType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigTrafficClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigTrafficClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_HiGigVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_HiGigVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_HiGigVni;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_HiGigVni_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigVpLagFailoverPacket;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigVpLagFailoverPacket_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigVpPreserveFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigVpPreserveFlags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_HiGigVpReplicationId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_HiGigVpReplicationId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGig_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IEEE1588Command;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IEEE1588Command_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IEEE1588CompensateTimeStamp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IEEE1588CompensateTimeStamp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IEEE1588Encap_t encap;
		} field_qualify_IEEE1588Encapsulation;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IEEE1588Encap_t * encap;
		} field_qualify_IEEE1588Encapsulation_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IEEE1588HeaderOffset;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IEEE1588HeaderOffset_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_INTProbeMarker1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_INTProbeMarker1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_INTProbeMarker2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_INTProbeMarker2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_INTReserved4Bytes;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_INTReserved4Bytes_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IOAMNameSpaceIdMatch;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IOAMNameSpaceIdMatch_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IOAMPktOverflowed;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IOAMPktOverflowed_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IOAMRemainingLenValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IOAMRemainingLenValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_ISid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ISid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_ITag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ITag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IcmpError;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IcmpError_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IcmpType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_IcmpTypeCode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_IcmpTypeCode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IcmpType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IfaActionVector;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IfaActionVector_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_IfaAttrOpaqData;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_IfaAttrOpaqData_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IfaCurrentLength;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IfaCurrentLengthEqualToZero;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IfaCurrentLengthEqualToZero_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IfaCurrentLength_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IfaFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IfaFlags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IfaGlobalNameSpace;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IfaGlobalNameSpace_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_IfaHopCount;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_IfaHopCount_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_IfaHopLimit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IfaHopLimitEqualToZero;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IfaHopLimitEqualToZero_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_IfaHopLimit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IfaLocalNameSpace;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IfaLocalNameSpace_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IfaMaxLength;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IfaMaxLength_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IfaNextHdr;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IfaNextHdr_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IfaRequestVector;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IfaRequestVector_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IfaVersion;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IfaVersion2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IfaVersion2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IfaVersion_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IgmpMaxRespTime;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IgmpMaxRespTime_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_IgmpType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IgmpType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InDscpExp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InDscpExp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t data;
			bcm_port_t mask;
		} field_qualify_InPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t * data;
			bcm_port_t * mask;
		} field_qualify_InPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t data;
			bcm_pbmp_t mask;
		} field_qualify_InPorts;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t * data;
			bcm_pbmp_t * mask;
		} field_qualify_InPorts_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InVPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InVPort32;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InVPort32_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_InVPortWide;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_InVPortWide_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InVPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InVportDataIndex;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InVportDataIndex_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IncomingIpIfClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IncomingIpIfClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_IncomingOuterVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_IncomingOuterVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IncomingVlanFormat;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IncomingVlanFormat_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IngressClassField;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IngressClassField_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_oam_drop_mep_type_t mep_type;
		} field_qualify_IngressDropEthernetOamControl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_oam_drop_mep_type_t * mep_type;
		} field_qualify_IngressDropEthernetOamControl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_oam_drop_mep_type_t mep_type;
		} field_qualify_IngressDropEthernetOamData;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_oam_drop_mep_type_t * mep_type;
		} field_qualify_IngressDropEthernetOamData_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_oam_drop_mep_type_t mep_type;
		} field_qualify_IngressDropMplsOamControl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_oam_drop_mep_type_t * mep_type;
		} field_qualify_IngressDropMplsOamControl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_oam_drop_mep_type_t mep_type;
		} field_qualify_IngressDropMplsOamData;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_oam_drop_mep_type_t * mep_type;
		} field_qualify_IngressDropMplsOamData_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IngressECid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IngressECid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IngressInterfaceClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IngressInterfaceClassPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IngressInterfaceClassPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IngressInterfaceClassVPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IngressInterfaceClassVPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IngressInterfaceClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IngressL2InterfaceFlexDigestCtrlIdA;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IngressL2InterfaceFlexDigestCtrlIdA_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IngressL2InterfaceFlexDigestCtrlIdB;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IngressL2InterfaceFlexDigestCtrlIdB_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IngressL2InterfaceOpaqueCtrlId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IngressL2InterfaceOpaqueCtrlId1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IngressL2InterfaceOpaqueCtrlId1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IngressL2InterfaceOpaqueCtrlId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IngressL3InterfaceOpaqueCtrlId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IngressL3InterfaceOpaqueCtrlId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IngressStpState;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IngressStpState_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IngressVPortBridgeDisable;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IngressVPortBridgeDisable_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_InnerApplSignatureId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_InnerApplSignatureId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerBfdPktVersionOne;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerBfdPktVersionOne_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerDSCP;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerDSCP_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerDosAttack;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InnerDosAttackEvents;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InnerDosAttackEvents_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerDosAttack_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_InnerDstIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerDstIp6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerDstIp6High;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_InnerDstIp6High_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_InnerDstIp6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_InnerDstIp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerDstMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_InnerDstMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_InnerEtherType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_InnerEtherType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InnerIp6FlowLabel;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InnerIp6FlowLabel_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerIp6HopLimit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerIp6HopLimit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerIp6NextHeader;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerIp6NextHeader_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerIp6PktHopLimit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerIp6PktHopLimit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerIp6PktNextHeader;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerIp6PktNextHeader_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerIp6PktTrafficClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerIp6PktTrafficClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpFrag_t frag_info;
		} field_qualify_InnerIpFrag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpFrag_t * frag_info;
		} field_qualify_InnerIpFrag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InnerIpInfo;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InnerIpInfo_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerIpProtocol;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpProtocolCommon_t protocol;
		} field_qualify_InnerIpProtocolCommon;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpProtocolCommon_t * protocol;
		} field_qualify_InnerIpProtocolCommon_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerIpProtocol_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpType_t type;
		} field_qualify_InnerIpType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpType_t * type;
		} field_qualify_InnerIpType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InnerL2MacInfo;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InnerL2MacInfo_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_InnerL4DstPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_InnerL4DstPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InnerL4Info;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InnerL4Info_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerL4Ports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerL4Ports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_InnerL4SrcPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_InnerL4SrcPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerPriTaggedPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerPriTaggedPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_InnerSrcIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerSrcIp6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerSrcIp6High;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_InnerSrcIp6High_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_InnerSrcIp6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_InnerSrcIp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerSrcMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_InnerSrcMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerTcpControl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerTcpControl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerTos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerTos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 tpid;
		} field_qualify_InnerTpid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * tpid;
		} field_qualify_InnerTpid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerTtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerTtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_InnerVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_InnerVlanActionRange;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_InnerVlanActionRange_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerVlanCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerVlanCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_InnerVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_InnerVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerVlanRangeMatch;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerVlanRangeMatch_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerVlanTagPreserve;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerVlanTagPreserve_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_InnerVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IntCongestionNotification;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IntCongestionNotification_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IntCtrl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IntCtrl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IntFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IntFlags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IntHdr_Location_t int_type;
		} field_qualify_IntHdrPresent;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IntHdr_Location_t * int_type;
		} field_qualify_IntHdrPresent_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IntHdr_Type_t int_type;
		} field_qualify_IntHdrType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IntHdr_Type_t * int_type;
		} field_qualify_IntHdrType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IntMetadataHdrType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IntMetadataHdrType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IntPktFinalHop;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IntPktFinalHop_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IntPktLengthValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IntPktLengthValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IntPktOverflowed;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IntPktOverflowed_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_int_pkt_type_t type;
		} field_qualify_IntPktType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_int_pkt_type_t * type;
		} field_qualify_IntPktType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IntPktVersionOne;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IntPktVersionOne_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IntPriority;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IntPriority_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IntUdpChecksumEqualsZero;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IntUdpChecksumEqualsZero_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceClassL2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_interface_class_l2_type_t type;
		} field_qualify_InterfaceClassL2Type;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_interface_class_l2_type_t * type;
		} field_qualify_InterfaceClassL2Type_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InterfaceClassL2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceClassL3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_InterfaceClassL3Tunnel;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_InterfaceClassL3Tunnel_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InterfaceClassL3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_InterfaceClassMpls;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_InterfaceClassMplsLookup1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_InterfaceClassMplsLookup1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_InterfaceClassMplsLookup2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_InterfaceClassMplsLookup2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_InterfaceClassMplsLookup3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_InterfaceClassMplsLookup3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_InterfaceClassMpls_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceClassPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InterfaceClassPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_InterfaceClassProcessingPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_InterfaceClassProcessingPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceClassVPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InterfaceClassVPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t data;
			bcm_pbmp_t mask;
		} field_qualify_InterfaceInPorts;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t * data;
			bcm_pbmp_t * mask;
		} field_qualify_InterfaceInPorts_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceIngressKeySelectClassPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InterfaceIngressKeySelectClassPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceLookupClassPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InterfaceLookupClassPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_Ip4Length;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_Ip4Length_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip4Tos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ip4Tos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_Ip6FlowLabel;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_Ip6FlowLabel_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6HopLimit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ip6HopLimit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_Ip6Length;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_Ip6Length_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6NextHeader;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ip6NextHeader_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6PktHopLimit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ip6PktHopLimit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6PktNextHeader;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ip6PktNextHeader_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6PktTrafficClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ip6PktTrafficClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6TrafficClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ip6TrafficClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpAddrsNormalized;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpAddrsNormalized_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpChecksumOkPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpChecksumOkPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpExtHdr2Protocol;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpExtHdr2Protocol_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpExtensionHdrNum;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpExtensionHdrNum_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpFlags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpFrag_t frag_info;
		} field_qualify_IpFrag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_IpFragInfo;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_IpFragInfo_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpFragNonOrFirst;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpFragNonOrFirst_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpFragPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpFragPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpFrag_t * frag_info;
		} field_qualify_IpFrag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IpFwdPlusOneNextProtocol;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IpFwdPlusOneNextProtocol_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_IpIdentifier;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_IpIdentifier_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpInIpPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpInIpPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IpInfo;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IpInfo_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IpMulticastCompatible;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IpMulticastCompatible_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ip_option_hdr_type_t type;
		} field_qualify_IpOptionHdrType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ip_option_hdr_type_t * type;
		} field_qualify_IpOptionHdrType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpProtocol;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_IpProtocolClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_IpProtocolClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpProtocolCommon_t protocol;
		} field_qualify_IpProtocolCommon;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpProtocolCommon_t * protocol;
		} field_qualify_IpProtocolCommon_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpProtocol_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpTtlZeroPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpTtlZeroPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpTunnelHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpTunnelHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpTunnelTtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_IpTunnelTtlClassZero;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_IpTunnelTtlClassZero_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpTunnelTtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_IpTunnelValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_IpTunnelValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpType_t type;
		} field_qualify_IpType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpType_t * type;
		} field_qualify_IpType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpmcHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpmcHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpmcStarGroupHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpmcStarGroupHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_IpmcStarGroupValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_IpmcStarGroupValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpmcV4Pkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpmcV4Pkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpmcV6Pkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpmcV6Pkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_IpmcValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_IpmcValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ip_option_hdr_type_t type;
		} field_qualify_Ipv4OptionHdrType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ip_option_hdr_type_t * type;
		} field_qualify_Ipv4OptionHdrType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ip_option_hdr_type_t type;
		} field_qualify_Ipv6ExtensionHdrType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ip_option_hdr_type_t * type;
		} field_qualify_Ipv6ExtensionHdrType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IsEqualValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IsEqualValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IsUcastCosQueue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IsUcastCosQueue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_KeyGenVar;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2CacheHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2CacheHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2DestHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2DestHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_sr_node_type_t type;
		} field_qualify_L2DestSRNodeType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_sr_node_type_t * type;
		} field_qualify_L2DestSRNodeType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_L2DestValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_L2DestValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2DstMiscClassId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2DstMiscClassId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2DstMulticastHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2DstMulticastHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2EgrIntfEfpCtrlId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2EgrIntfEfpCtrlId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_L2EgressInterface;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_L2EgressInterface_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_L2Format_t type;
		} field_qualify_L2Format;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_L2Format_t * type;
		} field_qualify_L2Format_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2GreFlowId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2GreFlowId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_L2GreProtocolType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_L2GreProtocolType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2GreSrcIpHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2GreSrcIpHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2GreVfiHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2GreVfiHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_L2GreVsid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_L2GreVsid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 intf_id;
			uint32 mask;
		} field_qualify_L2IngressInterface;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_L2IngressInterface_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2InterfaceMatch;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2InterfaceMatch_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2Learn;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_L2LearnCommands;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_L2LearnCommands_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2Learn_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_L2MacInfo;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_L2MacInfo_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 length;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2PayLoad;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 length;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2PayLoad_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data1;
			uint32 data2;
			uint32 mask1;
			uint32 mask2;
		} field_qualify_L2PayloadFirstEightBytes;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data1;
			uint32 * data2;
			uint32 * mask1;
			uint32 * mask2;
		} field_qualify_L2PayloadFirstEightBytes_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_l2_pkt_type_t type;
		} field_qualify_L2PktType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_l2_pkt_type_t * type;
		} field_qualify_L2PktType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2SrcDiscard;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2SrcDiscard_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2SrcHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2SrcHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2SrcMiscClassId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2SrcMiscClassId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2SrcMulticastHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2SrcMulticastHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2SrcStatic;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2SrcStatic_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_L2SrcValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_L2SrcValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2StationMove;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2StationMove_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_L3Check;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_L3Check_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3DestHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3DestHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3DestHostHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3DestHostHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3DestRouteHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3DestRouteHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_L3DestRouteValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_L3DestRouteValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3DstMiscClassId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3DstMiscClassId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 intf_id;
			uint32 mask;
		} field_qualify_L3EgressIntf;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_L3EgressIntf_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 intf_id;
			uint32 mask;
		} field_qualify_L3Ingress;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_L3Ingress_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3Routable;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3Routable_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3SrcBind;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3SrcBind_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3SrcHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3SrcHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3SrcHostHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3SrcHostHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3SrcMiscClassId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3SrcMiscClassId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3SrcRouteHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3SrcRouteHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_L3SrcRouteValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_L3SrcRouteValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_L4DstPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_L4DstPortClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_L4DstPortClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_L4DstPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_L4Info;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_L4Info_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_range_t range;
			int invert;
		} field_qualify_L4PortRangeCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int max_count;
			bcm_field_range_t * range;
			int * invert;
			int * count;
		} field_qualify_L4PortRangeCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L4Ports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L4Ports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_L4SrcPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_L4SrcPortClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_L4SrcPortClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_L4SrcPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L5PayloadByte1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L5PayloadByte1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L5PayloadByte2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L5PayloadByte2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L5PayloadByte3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L5PayloadByte3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L5PayloadByte4;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L5PayloadByte4_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L5PayloadByte5;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L5PayloadByte5_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L5PayloadByte6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L5PayloadByte6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L5PayloadByte7;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L5PayloadByte7_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L5PayloadByte8;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L5PayloadByte8_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_LastIpProtocol;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_LastIpProtocol_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
		} field_qualify_LearnExtension;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
		} field_qualify_LearnExtension_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_LearnInVPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_LearnInVPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_LearnSrcMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_LearnSrcMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t data;
		} field_qualify_LearnSrcPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * data;
		} field_qualify_LearnSrcPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_LearnVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_LearnVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_llc_header_t data;
			bcm_field_llc_header_t mask;
		} field_qualify_Llc;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_llc_header_t * data;
			bcm_field_llc_header_t * mask;
		} field_qualify_Llc_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_LlidValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_LlidValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_LookupClassField;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_LookupClassField_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 color;
		} field_qualify_LoopBackColor;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * color;
		} field_qualify_LoopBackColor_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_LoopBackCpuMasqueradePktProfile;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_LoopBackCpuMasqueradePktProfile_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
			bcm_gport_t port_mask;
		} field_qualify_LoopBackPacketProcessingPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
			bcm_gport_t * port_mask;
		} field_qualify_LoopBackPacketProcessingPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_LoopBackQueue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_LoopBackQueue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
			bcm_gport_t port_mask;
		} field_qualify_LoopBackSrcGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
			bcm_gport_t * port_mask;
		} field_qualify_LoopBackSrcGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_LoopBackTrafficClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_LoopBackTrafficClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Loopback;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_DstType_t lb_hdr_dst_type;
		} field_qualify_LoopbackHdrDstType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_DstType_t * lb_hdr_dst_type;
		} field_qualify_LoopbackHdrDstType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_LoopbackHdrFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_LoopbackHdrFlags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_LoopbackHiGig3Flags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_LoopbackHiGig3Flags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_LoopbackIfaSwitchCopyDrop;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_LoopbackIfaSwitchCopyDrop_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_LoopbackLagFailoverPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_LoopbackLagFailoverPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_loopback_subtype_t lb_subtype;
		} field_qualify_LoopbackSubtype;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_loopback_subtype_t * lb_subtype;
		} field_qualify_LoopbackSubtype_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_LoopbackType_t loopback_type;
		} field_qualify_LoopbackType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_LoopbackType_t * loopback_type;
		} field_qualify_LoopbackType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Loopback_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MHOpcode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MHOpcode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MHPriority;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MHPriority_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MacAddrsNormalized;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MacAddrsNormalized_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_macsec_encrypt_decrypt_pkt_t data;
		} field_qualify_MacSecControlPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_macsec_encrypt_decrypt_pkt_t * data;
		} field_qualify_MacSecControlPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MacSecDstMacRangeHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MacSecDstMacRangeHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_macsec_flow_t data;
		} field_qualify_MacSecFlow;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_macsec_flow_t * data;
		} field_qualify_MacSecFlow_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_MacSecOpaque;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_MacSecOpaque_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MacSecSecTagCbit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MacSecSecTagCbit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MacSecSecTagEbit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MacSecSecTagEbit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MacSecTag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MacSecTagPresent;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MacSecTagPresent_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MacSecTag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_McastPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_McastPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MimSrcGportHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MimSrcGportHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MimVfiHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MimVfiHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MimVlanCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MimVlanCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MimVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MimVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MimlDstMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_MimlDstMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MimlInnerTag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MimlInnerTag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MimlPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MimlPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MimlSrcMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_MimlSrcMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_MimlVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MimlVlanCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MimlVlanCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_MimlVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_MimlVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MimlVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MimlVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_MimlVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MirrorCopy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MirrorCopy_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t mirror_gport;
		} field_qualify_MirrorDest;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * mirror_gport;
		} field_qualify_MirrorDest_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MirrorEgressDisabled;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MirrorEgressDisabled_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MirrorOnDrop;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_mirror_on_drop_reason_t type;
		} field_qualify_MirrorOnDropReason;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_mirror_on_drop_reason_t * type;
		} field_qualify_MirrorOnDropReason_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MirrorOnDrop_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MirrorPktType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MirrorPktType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t pbmp;
			bcm_field_src_class_t data;
			bcm_field_src_class_t mask;
		} field_qualify_MixedSrcClassId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t pbmp;
			bcm_field_src_class_t * data;
			bcm_field_src_class_t * mask;
		} field_qualify_MixedSrcClassId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsBos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsBos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsControlPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsControlPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsControlWord;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsControlWordValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsControlWordValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsControlWord_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_mpls_ctrl_pkt_type_t type;
		} field_qualify_MplsCtrlPktType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_mpls_ctrl_pkt_type_t * type;
		} field_qualify_MplsCtrlPktType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsCwPresent;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsCwPresent_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsForwardingControlWord;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsForwardingControlWord_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsForwardingLabel;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsForwardingLabelAction;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsForwardingLabelAction32;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsForwardingLabelAction32_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsForwardingLabelAction_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsForwardingLabelBos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsForwardingLabelBos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsForwardingLabelExp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsForwardingLabelExp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsForwardingLabelId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsForwardingLabelId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_MplsForwardingLabelPayload;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_MplsForwardingLabelPayload_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsForwardingLabelTtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsForwardingLabelTtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsForwardingLabel_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel1Bos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel1Bos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel1Exp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel1Exp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel1Hit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel1Hit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel1Id;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel1Id_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel1Ttl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel1Ttl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel2Bos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel2Bos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel2Exp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel2Exp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel2Hit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel2Hit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel2Id;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel2Id_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel2Ttl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel2Ttl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel3Bos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel3Bos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel3Exp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel3Exp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel3Id;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel3Id_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel3Ttl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel3Ttl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel4;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel4Bos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel4Bos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel4Exp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel4Exp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel4Id;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel4Id_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel4Ttl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel4Ttl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel4_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel5;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel5Bos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel5Bos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel5Exp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel5Exp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel5Id;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel5Id_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel5Ttl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel5Ttl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel5_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel6Bos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel6Bos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel6Exp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel6Exp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel6Id;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel6Id_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel6Ttl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel6Ttl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel7;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel7Bos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel7Bos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel7Exp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel7Exp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel7Id;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel7Id_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel7Ttl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel7Ttl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel7_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsMcastEthertypePresent;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsMcastEthertypePresent_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsOamACH;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsOamACH_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_MplsOamClassMplsSwitchLabel;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_MplsOamClassMplsSwitchLabel_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_MplsOam_Control_pktType_t data;
		} field_qualify_MplsOamControlPktType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_MplsOam_Control_pktType_t * data;
		} field_qualify_MplsOamControlPktType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsOamGALExposed;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsOamGALExposed_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsOamGALLabelOnly;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsOamGALLabelOnly_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsOamHeaderBits0_31;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsOamHeaderBits0_31_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsOamHeaderBits32_63;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsOamHeaderBits32_63_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsOamUpperLabelDataDrop;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsOamUpperLabelDataDrop_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsOuterLabelPop;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsOuterLabelPop_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsStationHitTunnelUnterminated;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsStationHitTunnelUnterminated_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsTerminated;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsTerminatedHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsTerminatedHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_MplsTerminatedValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_MplsTerminatedValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsTerminated_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsTopHeader;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsTopHeader_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsVcLabelHeader;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsVcLabelHeader_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MyStation2Hit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MyStation2Hit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MyStationHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MyStationHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_NatDstRealmId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_NatDstRealmId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_NatNeeded;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_NatNeeded_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_NatSrcRealmId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_NatSrcRealmId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_NativeVSwitch;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_NativeVSwitchValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_NativeVSwitchValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_NativeVSwitch_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_NetworkTagMulticastPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_NetworkTagMulticastPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_network_tag_type_t type;
		} field_qualify_NetworkTagType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_network_tag_type_t * type;
		} field_qualify_NetworkTagType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_NshServiceIndex;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_NshServiceIndex_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_NshServicePathId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_NshServicePathId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OamDownMEPLoopbackPacket;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OamDownMEPLoopbackPacket_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OamEgressClass2Vxlt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OamEgressClass2Vxlt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_OamEgressClassPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_OamEgressClassPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OamEgressClassSrcMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OamEgressClassSrcMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_OamEgressClassVxlt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_OamEgressClassVxlt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
		} field_qualify_OamEgressEtherType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
		} field_qualify_OamEgressEtherType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
		} field_qualify_OamEgressMulticastMacHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
		} field_qualify_OamEgressMulticastMacHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OamEgressPortUnicastDstMacHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OamEgressPortUnicastDstMacHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OamEgressVxltFirstHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OamEgressVxltFirstHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OamEgressVxltSecondHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OamEgressVxltSecondHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OamHeaderBits0_31;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OamHeaderBits0_31_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OamHeaderBits32_63;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OamHeaderBits32_63_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OamHeaderOffset;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OamHeaderOffset_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OamInLifId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OamInLifIdValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OamInLifIdValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OamInLifId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OamMdl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OamMdl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OamMepId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OamMepId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OamMeterDisable;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OamMeterDisable_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OamStampOffset;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OamStampOffset_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OamSubtype;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OamSubtype_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_OamTsSystemHeader;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_OamTsSystemHeader_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_oam_type_t oam_type;
		} field_qualify_OamType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_oam_type_t * oam_type;
		} field_qualify_OamType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OamUpMep;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OamUpMep_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_OpaqueObject1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_OpaqueObject1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_OpaqueObject2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_OpaqueObject2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_OpaqueObject3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_OpaqueObject3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_OpaqueObject4;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_OpaqueObject4_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OpaqueTagHigh;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OpaqueTagHigh_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OpaqueTagLow;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OpaqueTagLow_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OpaqueTagType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OpaqueTagType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t data;
			bcm_port_t mask;
		} field_qualify_OutPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t * data;
			bcm_port_t * mask;
		} field_qualify_OutPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t data;
			bcm_pbmp_t mask;
		} field_qualify_OutPorts;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t * data;
			bcm_pbmp_t * mask;
		} field_qualify_OutPorts_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OutVPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OutVPort32;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OutVPort32_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OutVPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OuterIpInfo;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OuterIpInfo_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OuterL2MacInfo;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OuterL2MacInfo_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OuterL4Info;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OuterL4Info_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterL5PayloadByte1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterL5PayloadByte1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterL5PayloadByte2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterL5PayloadByte2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterL5PayloadByte3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterL5PayloadByte3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterL5PayloadByte4;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterL5PayloadByte4_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterL5PayloadByte5;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterL5PayloadByte5_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterL5PayloadByte6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterL5PayloadByte6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterL5PayloadByte7;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterL5PayloadByte7_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterL5PayloadByte8;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterL5PayloadByte8_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterPriTaggedPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterPriTaggedPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 tpid;
		} field_qualify_OuterTpid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * tpid;
		} field_qualify_OuterTpid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_OuterVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_OuterVlanActionRange;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_OuterVlanActionRange_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterVlanCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterVlanCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_OuterVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_OuterVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterVlanPriCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterVlanPriCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterVlanRangeMatch;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterVlanRangeMatch_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterVlanTagPreserve;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterVlanTagPreserve_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_OuterVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_OverlayEgressClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_OverlayEgressClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ip_option_hdr_type_t type;
		} field_qualify_OverlayIpOptionHdrType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ip_option_hdr_type_t * type;
		} field_qualify_OverlayIpOptionHdrType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ip_option_hdr_type_t type;
		} field_qualify_OverlayIpv4OptionHdrType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ip_option_hdr_type_t * type;
		} field_qualify_OverlayIpv4OptionHdrType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ip_option_hdr_type_t type;
		} field_qualify_OverlayIpv6ExtensionHdrType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ip_option_hdr_type_t * type;
		} field_qualify_OverlayIpv6ExtensionHdrType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_l2_pkt_type_t type;
		} field_qualify_OverlayL2PktType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_l2_pkt_type_t * type;
		} field_qualify_OverlayL2PktType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_network_tag_type_t type;
		} field_qualify_OverlayNetworkTagType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_network_tag_type_t * type;
		} field_qualify_OverlayNetworkTagType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_pkt_type_t type;
		} field_qualify_OverlayPktType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_pkt_type_t * type;
		} field_qualify_OverlayPktType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OverlayVlanFormat;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OverlayVlanFormat_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PacketIsIEEE1588;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_PacketIsIEEE1588_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_PacketLength;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_range_t range;
			int invert;
		} field_qualify_PacketLengthRangeCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int max_count;
			bcm_field_range_t * range;
			int * invert;
			int * count;
		} field_qualify_PacketLengthRangeCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_PacketLength_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_PacketRes;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_PacketRes_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_PacketSize;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_PacketSize_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_PacketStatus;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_PacketStatus_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_PacketTerminatedBytes;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_PacketTerminatedBytes_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PdelayReq;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_PdelayReq_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PimBidirDfStatus;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_PimBidirDfStatus_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 dst_addr_type;
		} field_qualify_PktDstAddrType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * dst_addr_type;
		} field_qualify_PktDstAddrType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_pkt_flow_type_t type;
		} field_qualify_PktFlowType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_pkt_flow_type_t * type;
		} field_qualify_PktFlowType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_PktFwdType_t type;
		} field_qualify_PktFwdType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_PktFwdType_t * type;
		} field_qualify_PktFwdType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 dst_addr_type;
		} field_qualify_PktInnerDstAddrType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * dst_addr_type;
		} field_qualify_PktInnerDstAddrType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PktIsVisible;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_PktIsVisible_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_pkt_misc_ctrl_t pkt_misc_ctrl;
		} field_qualify_PktMiscCtrl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_pkt_misc_ctrl_t * pkt_misc_ctrl;
		} field_qualify_PktMiscCtrl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_pkt_type_t type;
		} field_qualify_PktType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_pkt_type_t * type;
		} field_qualify_PktType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PolicerIntPrio;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_PolicerIntPrio_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PortOrientation;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_PortOrientation_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PphType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_PphType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PreemptablePacket;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_PreemptablePacket_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_PreselId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_PreselId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ProtocolPktOpaqueCtrlId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ProtocolPktOpaqueCtrlId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ptch;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ptch_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PtpMsgType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_PtpMsgType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_PtpPktCtrl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_PtpPktCtrl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PtpReserved1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PtpReserved1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PtpTransportSpec;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PtpTransportSpec_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PtpVersion;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_PtpVersion_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_range_t range;
			int invert;
		} field_qualify_RangeCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_RangeCheckGroup;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_RangeCheckGroup_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int max_count;
			bcm_field_range_t * range;
			int * invert;
			int * count;
		} field_qualify_RangeCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_RawResidenceTime;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_RawResidenceTime_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_RecircleHdrCode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_RecircleHdrCode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_drop_reason_t type;
		} field_qualify_RecircleHdrDropReason;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_drop_reason_t * type;
		} field_qualify_RecircleHdrDropReason_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_drop_reason_t type;
		} field_qualify_RecircleHdrFirstDropReason;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_drop_reason_t * type;
		} field_qualify_RecircleHdrFirstDropReason_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int data;
			int mask;
		} field_qualify_RecircleHdrOpaqueCtrlIdC;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * data;
			int * mask;
		} field_qualify_RecircleHdrOpaqueCtrlIdC_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_RecoverableDrop;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_RecoverableDrop_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_RepCopy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_RepCopy_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ReplicantAny;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ReplicantAny_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ReplicantFirst;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ReplicantFirst_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_RoceBthDstQueuePair;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_RoceBthDstQueuePair_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_RoceBthFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_RoceBthFlags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_RoceBthOpcode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_RoceBthOpcode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_RoceBthPartitionKey;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_RoceBthPartitionKey_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_RoceVer1Pkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_RoceVer1Pkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_RoceVer2Pkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_RoceVer2Pkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_roe_frame_type_t data;
		} field_qualify_RoeFrameType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_roe_frame_type_t * data;
		} field_qualify_RoeFrameType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_RouterAlertLabelValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_RouterAlertLabelValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_Rtag7AHashLower;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_Rtag7AHashLower_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_Rtag7AHashUpper;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_Rtag7AHashUpper_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_Rtag7BHashLower;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_Rtag7BHashLower_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_Rtag7BHashUpper;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_Rtag7BHashUpper_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_Rtag7CHashLower;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_Rtag7CHashLower_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_Rtag7CHashUpper;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_Rtag7CHashUpper_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_PortType_t port_type;
		} field_qualify_RxPortType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_PortType_t * port_type;
		} field_qualify_RxPortType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_rx_trap_t data;
		} field_qualify_RxTrapCode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_RxTrapCode32;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_RxTrapCode32_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_RxTrapCodeForSnoop;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_RxTrapCodeForSnoop_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_rx_trap_t * data;
		} field_qualify_RxTrapCode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_RxTrapData;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_RxTrapData_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_RxTrapStrength;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_RxTrapStrength_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
		} field_qualify_SRDuplicate;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
		} field_qualify_SRDuplicate_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SRError;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_SRError_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SRFlowId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_SRFlowId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int lan_id;
		} field_qualify_SRLanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * lan_id;
		} field_qualify_SRLanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int net_id;
		} field_qualify_SRNetId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
		} field_qualify_SRNetIdMatched;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
		} field_qualify_SRNetIdMatched_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * net_id;
		} field_qualify_SRNetId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
		} field_qualify_SRSrcNodeIsSan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
		} field_qualify_SRSrcNodeIsSan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_sr_supervision_type_t type;
		} field_qualify_SRSupervisionType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_sr_supervision_type_t * type;
		} field_qualify_SRSupervisionType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_sr_tag_type_t type;
		} field_qualify_SRTagType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_sr_tag_type_t * type;
		} field_qualify_SRTagType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_SampledPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SampledPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_snap_header_t data;
			bcm_field_snap_header_t mask;
		} field_qualify_Snap;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_snap_header_t * data;
			bcm_field_snap_header_t * mask;
		} field_qualify_Snap_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_SnoopCopy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SnoopCopy_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t data;
			bcm_pbmp_t mask;
		} field_qualify_SourceGportBitmap;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t * data;
			bcm_pbmp_t * mask;
		} field_qualify_SourceGportBitmap_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SrcClassField;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_SrcClassField_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SrcClassL2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_SrcClassL2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SrcClassL3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_SrcClassL3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SrcCompressionClassId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_SrcCompressionClassId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
		} field_qualify_SrcGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
		} field_qualify_SrcGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
			bcm_gport_t port_mask;
		} field_qualify_SrcGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
			bcm_gport_t * port_mask;
		} field_qualify_SrcGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_SrcIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcIp6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_SrcIp6Class;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_SrcIp6ClassLower;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_SrcIp6ClassLower_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_SrcIp6ClassMsbNibble;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_SrcIp6ClassMsbNibble_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_SrcIp6ClassUpper;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_SrcIp6ClassUpper_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_SrcIp6Class_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcIp6High;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_SrcIp6High_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcIp6Low;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_SrcIp6Low_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_SrcIp6SrhValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcIp6SrhValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_SrcIp6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_SrcIpClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_SrcIpClassLower;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_SrcIpClassLower_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_SrcIpClassMsbNibble;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_SrcIpClassMsbNibble_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_SrcIpClassUpper;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_SrcIpClassUpper_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_SrcIpClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_SrcIp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_SrcMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t mim_port_id;
		} field_qualify_SrcMimGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * mim_port_id;
		} field_qualify_SrcMimGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t mim_port_id;
			bcm_gport_t mim_port_mask;
		} field_qualify_SrcMimGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * mim_port_id;
			bcm_gport_t * mim_port_mask;
		} field_qualify_SrcMimGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t data;
		} field_qualify_SrcModPortGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * data;
		} field_qualify_SrcModPortGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
			bcm_gport_t port_mask;
		} field_qualify_SrcModPortGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
			bcm_gport_t * port_mask;
		} field_qualify_SrcModPortGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t data;
		} field_qualify_SrcModuleGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * data;
		} field_qualify_SrcModuleGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t mpls_port_id;
		} field_qualify_SrcMplsGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * mpls_port_id;
		} field_qualify_SrcMplsGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t mpls_port_id;
			bcm_gport_t mpls_port_mask;
		} field_qualify_SrcMplsGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * mpls_port_id;
			bcm_gport_t * mpls_port_mask;
		} field_qualify_SrcMplsGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t niv_port_id;
		} field_qualify_SrcNivGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * niv_port_id;
		} field_qualify_SrcNivGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t niv_port_id;
			bcm_gport_t niv_port_mask;
		} field_qualify_SrcNivGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * niv_port_id;
			bcm_gport_t * niv_port_mask;
		} field_qualify_SrcNivGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_module_t data_modid;
			bcm_module_t mask_modid;
			bcm_port_t data_port;
			bcm_port_t mask_port;
		} field_qualify_SrcPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 lan_id;
		} field_qualify_SrcPortSRLanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * lan_id;
		} field_qualify_SrcPortSRLanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_sr_port_mode_t type;
			uint8 mask;
		} field_qualify_SrcPortSRMode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_sr_port_mode_t * type;
			uint8 * mask;
		} field_qualify_SrcPortSRMode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 net_id;
			uint8 mask;
		} field_qualify_SrcPortSRNetId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * net_id;
			uint8 * mask;
		} field_qualify_SrcPortSRNetId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
		} field_qualify_SrcPortSRRoleInterlink;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
		} field_qualify_SrcPortSRRoleInterlink_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_port_sr_type_t type;
		} field_qualify_SrcPortSRType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_port_sr_type_t * type;
		} field_qualify_SrcPortSRType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_module_t * data_modid;
			bcm_module_t * mask_modid;
			bcm_port_t * data_port;
			bcm_port_t * mask_port;
		} field_qualify_SrcPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t data_port;
			bcm_port_t mask_port;
		} field_qualify_SrcTMPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t * data_port;
			bcm_port_t * mask_port;
		} field_qualify_SrcTMPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_trunk_t data;
			bcm_trunk_t mask;
		} field_qualify_SrcTrunk;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t data;
		} field_qualify_SrcTrunkMemberGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * data;
		} field_qualify_SrcTrunkMemberGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_trunk_t * data;
			bcm_trunk_t * mask;
		} field_qualify_SrcTrunk_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_SrcVirtualPortValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcVirtualPortValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t vlan_port_id;
		} field_qualify_SrcVlanGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * vlan_port_id;
		} field_qualify_SrcVlanGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t vlan_port_id;
			bcm_gport_t vlan_port_mask;
		} field_qualify_SrcVlanGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * vlan_port_id;
			bcm_gport_t * vlan_port_mask;
		} field_qualify_SrcVlanGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t vxlan_port_id;
		} field_qualify_SrcVxlanGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * vxlan_port_id;
		} field_qualify_SrcVxlanGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t vxlan_port_id;
			bcm_gport_t vxlan_port_mask;
		} field_qualify_SrcVxlanGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * vxlan_port_id;
			bcm_gport_t * vxlan_port_mask;
		} field_qualify_SrcVxlanGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t wlan_port_id;
		} field_qualify_SrcWlanGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * wlan_port_id;
		} field_qualify_SrcWlanGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t wlan_port_id;
			bcm_gport_t wlan_port_mask;
		} field_qualify_SrcWlanGports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * wlan_port_id;
			bcm_gport_t * wlan_port_mask;
		} field_qualify_SrcWlanGports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_StackingRoute;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_StackingRoute_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_stage_t data;
		} field_qualify_Stage;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_stage_t * data;
		} field_qualify_Stage_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_StaggeredDirectValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_StaggeredDirectValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_StaggeredPreselProfile0;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_StaggeredPreselProfile0_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_StaggeredPreselProfile1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_StaggeredPreselProfile1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_StaggeredPreselProfile2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_StaggeredPreselProfile2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_StaggeredPreselProfile3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_StaggeredPreselProfile3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_StaggeredPreselProfileDirect;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_StaggeredPreselProfileDirect_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_StaggeredValue0;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_StaggeredValue0_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_StaggeredValue1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_StaggeredValue1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_StaggeredValue2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_StaggeredValue2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_StaggeredValue3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_StaggeredValue3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_stg_t data;
			bcm_stg_t mask;
		} field_qualify_Stg;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_stg_t * data;
			bcm_stg_t * mask;
		} field_qualify_Stg_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
		} field_qualify_StpState;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
		} field_qualify_StpState_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 num_groups;
			bcm_subport_port_group_t * subport_group_id_arr;
		} field_qualify_SubportGroupIds;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 num_groups;
			bcm_subport_port_group_t * subport_group_id_arr;
			uint32 * actual_groups;
		} field_qualify_SubportGroupIds_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_SubportPktTag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_SubportPktTag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_SubportTagPresent;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SubportTagPresent_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_SvpOpaqueCtrlId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SvpOpaqueCtrlId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_Svtag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_Svtag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t data;
			bcm_port_t mask;
		} field_qualify_SysHdrLocalDstport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t * data;
			bcm_port_t * mask;
		} field_qualify_SysHdrLocalDstport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_sys_hdr_type_t type;
		} field_qualify_SysHdrType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_sys_hdr_type_t * type;
		} field_qualify_SysHdrType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t data;
			bcm_pbmp_t mask;
		} field_qualify_SystemPortBitmap;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t * data;
			bcm_pbmp_t * mask;
		} field_qualify_SystemPortBitmap_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_TafCosProfile;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_TafCosProfile_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 enable;
		} field_qualify_TafEnable;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * enable;
		} field_qualify_TafEnable_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_TafGateId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_TafGateId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 state;
		} field_qualify_TafGateState;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * state;
		} field_qualify_TafGateState_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_TcpAckNum;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_TcpAckNum_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_TcpClassOne;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_TcpClassOne_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_TcpClassZero;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_TcpClassZero_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TcpControl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TcpControl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TcpHeaderSize;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TcpHeaderSize_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_TcpSequenceNum;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_TcpSequenceNum_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 flag;
		} field_qualify_TcpSequenceZero;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * flag;
		} field_qualify_TcpSequenceZero_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_timestamp_transmit_pkt_type_t ts_pkt_type;
		} field_qualify_TimeStampTxPktType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_timestamp_transmit_pkt_type_t * ts_pkt_type;
		} field_qualify_TimeStampTxPktType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Tos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_TosClassOne;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_TosClassOne_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_TosClassZero;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_TosClassZero_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TosLower4Bits;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TosLower4Bits_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Tos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_TranslatedInnerVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TranslatedInnerVlanCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TranslatedInnerVlanCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_TranslatedInnerVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_TranslatedInnerVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TranslatedInnerVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TranslatedInnerVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_TranslatedInnerVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_TranslatedOuterVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TranslatedOuterVlanCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TranslatedOuterVlanCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_TranslatedOuterVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_TranslatedOuterVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TranslatedOuterVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TranslatedOuterVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_TranslatedOuterVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TranslatedVlanFormat;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TranslatedVlanFormat_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_TrillEgressRbridge;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TrillEgressRbridgeHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TrillEgressRbridgeHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_TrillEgressRbridge_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TrillHopCount;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TrillHopCount_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TrillIVersion;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TrillIVersion_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_TrillIngressRbridge;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TrillIngressRbridgeHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TrillIngressRbridgeHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_TrillIngressRbridge_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TrillMultiDestination;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TrillMultiDestination_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TrillOpLength;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TrillOpLength_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_TrillPayload;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_TrillPayload_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_TrunkHashResult;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_TrunkHashResult_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int data;
			int mask;
		} field_qualify_TrunkMemberSourceModuleId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * data;
			int * mask;
		} field_qualify_TrunkMemberSourceModuleId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_TsnFlowId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_TsnFlowId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ttl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_TtlClassOne;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_TtlClassOne_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t data;
			bcm_class_t mask;
		} field_qualify_TtlClassZero;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_class_t * data;
			bcm_class_t * mask;
		} field_qualify_TtlClassZero_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ttl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_TunnelAltDstIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelAltDstIp6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_TunnelAltDstIp6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_TunnelAltDstIp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_TunnelAltEtherType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_TunnelAltEtherType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TunnelAltIpProtocol;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelAltIpProtocol_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_TunnelAltL4DstPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_TunnelAltL4DstPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_TunnelAltL4SrcPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_TunnelAltL4SrcPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_TunnelAltSrcIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelAltSrcIp6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_TunnelAltSrcIp6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_TunnelAltSrcIp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_TunnelHeaderDip;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelHeaderDip6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_TunnelHeaderDip6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_TunnelHeaderDip_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelHeaderDstMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_TunnelHeaderDstMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TunnelHeaderIpProtocol;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelHeaderIpProtocol_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_TunnelHeaderSip;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelHeaderSip6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_TunnelHeaderSip6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_TunnelHeaderSip_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelHeaderSrcMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_TunnelHeaderSrcMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_TunnelId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_TunnelId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_TunnelPayloadDip;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelPayloadDip6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_TunnelPayloadDip6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_TunnelPayloadDip_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelPayloadDstMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_TunnelPayloadDstMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_TunnelPayloadEtherType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_TunnelPayloadEtherType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_TunnelPayloadIp4Length;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_TunnelPayloadIp4Length_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_TunnelPayloadIp6Length;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_TunnelPayloadIp6Length_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TunnelPayloadIpProtocol;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelPayloadIpProtocol_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_TunnelPayloadL4DstPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_TunnelPayloadL4DstPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_TunnelPayloadL4SrcPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_TunnelPayloadL4SrcPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_TunnelPayloadOuterVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TunnelPayloadOuterVlanCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelPayloadOuterVlanCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_TunnelPayloadOuterVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_TunnelPayloadOuterVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TunnelPayloadOuterVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelPayloadOuterVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_TunnelPayloadOuterVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_TunnelPayloadSip;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelPayloadSip6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_TunnelPayloadSip6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_TunnelPayloadSip_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelPayloadSrcMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_TunnelPayloadSrcMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_TunnelSubType_t type;
		} field_qualify_TunnelSubType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_TunnelSubType_t * type;
		} field_qualify_TunnelSubType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_TunnelTermStatus;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_TunnelTermStatus_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TunnelTerminated;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TunnelTerminatedHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelTerminatedHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_TunnelTerminatedValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_TunnelTerminatedValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelTerminated_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TunnelTerminationProcessingProfile;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelTerminationProcessingProfile_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_TunnelType_t tunnel_type;
		} field_qualify_TunnelType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_TunnelType_t * tunnel_type;
		} field_qualify_TunnelType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_PortType_t port_type;
		} field_qualify_TxPortType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_PortType_t * port_type;
		} field_qualify_TxPortType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_UdfClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_UdfClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_UdpLength;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_UdpLength_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_UntagPkt;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_UntagPkt_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_range_t range;
			int invert;
		} field_qualify_VPortRangeCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int max_count;
			bcm_field_range_t * range;
			int * invert;
			int * count;
		} field_qualify_VPortRangeCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_VlanAction;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_VlanAction_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VlanFormat;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VlanFormat_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VlanMembershipCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VlanMembershipCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
		} field_qualify_VlanSREnable;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
		} field_qualify_VlanSREnable_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 lan_id;
		} field_qualify_VlanSRLanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * lan_id;
		} field_qualify_VlanSRLanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_VlanTranslateClassId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_VlanTranslateClassId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VlanTranslationHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VlanTranslationHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_VlanTranslationValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_VlanTranslationValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_VnTag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_VnTag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vpn_t data;
			bcm_vpn_t mask;
		} field_qualify_Vpn;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VpnOpaqueCtrlId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VpnOpaqueCtrlId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
		} field_qualify_VpnUnknownDstMacDstPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
		} field_qualify_VpnUnknownDstMacDstPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vpn_t * data;
			bcm_vpn_t * mask;
		} field_qualify_Vpn_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_Vrf;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_Vrf_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VxlanClassValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VxlanClassValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VxlanFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VxlanFlags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VxlanGbpPresent;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VxlanGbpPresent_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VxlanHeaderBits56_63;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VxlanHeaderBits56_63_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_VxlanHeaderBits8_31;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_VxlanHeaderBits8_31_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_VxlanNetworkId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_VxlanNetworkId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VxlanPacket;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VxlanPacket_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VxlanPayloadVlanFormat;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VxlanPayloadVlanFormat_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VxlanVnidVlanTranslateHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VxlanVnidVlanTranslateHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_qualify_clear;
		struct {
			int unit;
			bcm_field_entry_t eid;
			int qual_id;
			uint8 * data;
			uint8 * mask;
			uint16 length;
		} field_qualify_data;
		struct {
			int unit;
			bcm_field_entry_t eid;
			int qual_id;
			uint16 length_max;
			uint8 * data;
			uint8 * mask;
			uint16 * length;
		} field_qualify_data_get;
		struct {
			int unit;
			bcm_field_entry_t eid;
			bcm_udf_id_t udf_id;
			int length;
			uint8 * data;
			uint8 * mask;
		} field_qualify_udf;
		struct {
			int unit;
			bcm_field_entry_t eid;
			bcm_udf_id_t udf_id;
			int max_length;
			uint8 * data;
			uint8 * mask;
			int * actual_length;
		} field_qualify_udf_get;
		struct {
			int unit;
			bcm_field_range_t * range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
		} field_range_create;
		struct {
			int unit;
			bcm_field_range_t range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
		} field_range_create_id;
		struct {
			int unit;
			bcm_field_range_t range;
		} field_range_destroy;
		struct {
			int unit;
			bcm_field_range_t range;
			uint32 * flags;
			bcm_l4_port_t * min;
			bcm_l4_port_t * max;
		} field_range_get;
		struct {
			int unit;
			bcm_field_range_t * range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
			bcm_if_group_t group;
		} field_range_group_create;
		struct {
			int unit;
			bcm_field_range_t range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
			bcm_if_group_t group;
		} field_range_group_create_id;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_range_t * range_id;
			bcm_field_range_info_t * range_info;
		} field_range_info_get;
		struct {
			int unit;
			bcm_field_range_t * range_id;
			uint32 create_flags;
			int count;
			uint32 * range_flags;
			uint32 * min_value;
			uint32 * max_value;
		} field_range_multi_create;
		struct {
			int unit;
			bcm_field_range_t range_id;
			int max_count;
			uint32 * range_flags;
			uint32 * minimum_value;
			uint32 * maxamum_value;
			int * actual_count;
		} field_range_multi_get;
		struct {
			int unit;
			uint32 flags;
			bcm_field_stage_t stage;
			bcm_field_range_t range_id;
			bcm_field_range_info_t * range_info;
		} field_range_set;
		struct {
			int unit;
			uint32 flags;
			bcm_field_stage_t stage;
			bcm_field_context_t context_id;
			uint32 configurable_range_index;
			bcm_field_range_qual_info_t * range_qualifier_info;
		} field_range_type_config_get;
		struct {
			int unit;
			uint32 flags;
			bcm_field_stage_t stage;
			bcm_field_context_t context_id;
			uint32 configurable_range_index;
			bcm_field_range_qual_info_t * range_qualifier_info;
		} field_range_type_config_set;
		struct {
			int unit;
		} field_resync;
		struct {
			int unit;
			uint8 * mac;
			uint32 class_id;
		} field_sat_macsa_add;
		struct {
			int unit;
			uint8 * mac;
		} field_sat_macsa_delete;
		struct {
			int unit;
		} field_sat_macsa_delete_all;
		struct {
			int unit;
			uint8 * mac;
			uint32 * class_id;
		} field_sat_macsa_get;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			char * pfx;
		} field_show;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_pbmp_t pbmp;
			bcm_field_src_class_mode_t * mode;
		} field_source_class_mode_get;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_pbmp_t pbmp;
			bcm_field_src_class_mode_t mode;
		} field_source_class_mode_set;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_aset_t * aset;
		} field_stage_aset_get;
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_stage_info_t * info;
		} field_stage_info_get;
		struct {
			int unit;
			bcm_field_stage_t stage;
			uint8 presel;
			bcm_field_qset_t * qset;
		} field_stage_qset_get;
		struct {
			int unit;
			bcm_field_stage_t stage_id;
			int * slice_count;
		} field_stage_slice_count_get;
		struct {
			int unit;
			bcm_field_stage_t stage_id;
			bcm_pbmp_t pbmp;
			int slice_no;
			bcm_field_stage_slice_info_t * slice_info;
		} field_stage_slice_info_get;
		struct {
			int unit;
			int stat_id;
			uint64 value;
		} field_stat_all_set;
		struct {
			int unit;
			int stat_id;
			uint32 value;
		} field_stat_all_set32;
		struct {
			int unit;
			bcm_field_group_t group;
			uint32 stat_counter_id;
			uint32 * stat_id;
		} field_stat_attach;
		struct {
			int unit;
			int stat_id;
			int nstat;
			bcm_field_stat_t * stat_arr;
		} field_stat_config_get;
		struct {
			int unit;
			uint32 stat_id;
			bcm_field_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} field_stat_counter_get;
		struct {
			int unit;
			uint32 stat_id;
			bcm_field_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} field_stat_counter_set;
		struct {
			int unit;
			uint32 stat_id;
			bcm_field_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} field_stat_counter_sync_get;
		struct {
			int unit;
			bcm_field_group_t group;
			int nstat;
			bcm_field_stat_t * stat_arr;
			int * stat_id;
		} field_stat_create;
		struct {
			int unit;
			bcm_field_group_t group;
			int nstat;
			bcm_field_stat_t * stat_arr;
			int stat_id;
		} field_stat_create_id;
		struct {
			int unit;
			int stat_id;
		} field_stat_destroy;
		struct {
			int unit;
			uint32 stat_id;
		} field_stat_detach;
		struct {
			int unit;
			int stat_id;
			bcm_field_stat_t stat;
			uint64 * value;
		} field_stat_get;
		struct {
			int unit;
			int stat_id;
			bcm_field_stat_t stat;
			uint32 * value;
		} field_stat_get32;
		struct {
			int unit;
			bcm_field_group_t group;
			uint32 stat_id;
			uint32 * stat_counter_id;
		} field_stat_id_get;
		struct {
			int unit;
			int stat_id;
			int nstat;
			bcm_field_stat_t * stat_arr;
			uint64 * value_arr;
		} field_stat_multi_get;
		struct {
			int unit;
			int stat_id;
			int nstat;
			bcm_field_stat_t * stat_arr;
			uint32 * value_arr;
		} field_stat_multi_get32;
		struct {
			int unit;
			int stat_id;
			bcm_field_stat_t stat;
			uint64 value;
		} field_stat_set;
		struct {
			int unit;
			int stat_id;
			bcm_field_stat_t stat;
			uint32 value;
		} field_stat_set32;
		struct {
			int unit;
			int stat_id;
			int * stat_size;
		} field_stat_size;
		struct {
			int unit;
			int stat_id;
			bcm_field_stat_t stat;
			uint64 * value;
		} field_stat_sync_get;
		struct {
			int unit;
			int stat_id;
			bcm_field_stat_t stat;
			uint32 * value;
		} field_stat_sync_get32;
		struct {
			int unit;
			uint32 flags;
			bcm_field_tcam_bank_info_t * add_info;
		} field_tcam_bank_add;
		struct {
			int unit;
			uint32 flags;
			bcm_field_tcam_bank_info_t * evac_info;
		} field_tcam_bank_evacuate;
		struct {
			char * type;
			char * subtype;
			int remunit;
		} find;
		struct {
			int unit;
			int options;
			bcm_flexctr_action_t * action;
			uint32 * stat_counter_id;
		} flexctr_action_create;
		struct {
			int unit;
			uint32 stat_counter_id;
		} flexctr_action_destroy;
		struct {
			int unit;
			uint32 stat_counter_id;
			bcm_flexctr_action_t * action;
		} flexctr_action_get;
		struct {
			int unit;
			bcm_flexctr_action_traverse_cb trav_fn;
			void * user_data;
		} flexctr_action_traverse;
		struct {
			int unit;
		} flexctr_cleanup;
		struct {
			int unit;
			int options;
			bcm_flexctr_group_action_t * group_action;
			uint32 * group_stat_counter_id;
		} flexctr_group_action_create;
		struct {
			int unit;
			uint32 group_stat_counter_id;
		} flexctr_group_action_destroy;
		struct {
			int unit;
			uint32 group_stat_counter_id;
			bcm_flexctr_group_action_t * group_action;
		} flexctr_group_action_get;
		struct {
			int unit;
			bcm_flexctr_group_action_traverse_cb trav_fn;
			void * user_data;
		} flexctr_group_action_traverse;
		struct {
			int unit;
		} flexctr_init;
		struct {
			int unit;
			bcm_flexctr_object_t object;
			int array_size;
			bcm_flexctr_object_t * overlay_object_array;
			int * count;
		} flexctr_object_overlay_multi_get;
		struct {
			int unit;
			int profile_id;
			bcm_flexctr_packet_attribute_map_t * attr_map;
			uint32 offset_value;
		} flexctr_packet_attribute_map_add;
		struct {
			int unit;
			int profile_id;
			bcm_flexctr_packet_attribute_map_t * attr_map;
		} flexctr_packet_attribute_map_delete;
		struct {
			int unit;
			int profile_id;
		} flexctr_packet_attribute_map_delete_all;
		struct {
			int unit;
			int profile_id;
			bcm_flexctr_packet_attribute_map_t * attr_map;
			uint32 * offset_value;
		} flexctr_packet_attribute_map_get;
		struct {
			int unit;
			int profile_id;
			bcm_flexctr_packet_attribute_map_traverse_cb trav_fn;
			void * user_data;
		} flexctr_packet_attribute_map_traverse;
		struct {
			int unit;
			int options;
			bcm_flexctr_packet_attribute_profile_t * attr_profile;
			int * profile_id;
		} flexctr_packet_attribute_profile_create;
		struct {
			int unit;
			int profile_id;
		} flexctr_packet_attribute_profile_destroy;
		struct {
			int unit;
			int profile_id;
			bcm_flexctr_packet_attribute_profile_t * attr_profile;
		} flexctr_packet_attribute_profile_get;
		struct {
			int unit;
			bcm_flexctr_packet_attribute_profile_traverse_cb trav_fn;
			void * user_data;
		} flexctr_packet_attribute_profile_traverse;
		struct {
			int unit;
			int options;
			bcm_flexctr_quantization_t * quantization;
			uint32 * quant_id;
		} flexctr_quantization_create;
		struct {
			int unit;
			uint32 quant_id;
		} flexctr_quantization_destroy;
		struct {
			int unit;
			uint32 quant_id;
			bcm_flexctr_quantization_t * quantization;
		} flexctr_quantization_get;
		struct {
			int unit;
			bcm_flexctr_quantization_traverse_cb trav_fn;
			void * user_data;
		} flexctr_quantization_traverse;
		struct {
			int unit;
			uint32 stat_counter_id;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_flexctr_counter_value_t * counter_values;
		} flexctr_stat_get;
		struct {
			int unit;
			uint32 stat_counter_id;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_flexctr_counter_value_t * counter_values;
		} flexctr_stat_set;
		struct {
			int unit;
			uint32 stat_counter_id;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_flexctr_counter_value_t * counter_values;
		} flexctr_stat_sync_get;
		struct {
			int unit;
			uint32 stat_counter_id;
			int * enable;
		} flexctr_trigger_enable_get;
		struct {
			int unit;
			uint32 stat_counter_id;
			int enable;
		} flexctr_trigger_enable_set;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			bcm_flexdigest_action_t action;
			uint16 param0;
			uint16 param1;
		} flexdigest_action_add;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			bcm_flexdigest_action_t action;
		} flexdigest_action_delete;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
		} flexdigest_action_delete_all;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			bcm_flexdigest_action_t action;
			uint16 * param0;
			uint16 * param1;
		} flexdigest_action_get;
		struct {
			int unit;
			bcm_flexdigest_control_t type;
			int * arg;
		} flexdigest_control_get;
		struct {
			int unit;
			bcm_flexdigest_control_t type;
			int arg;
		} flexdigest_control_set;
		struct {
			int unit;
		} flexdigest_detach;
		struct {
			int unit;
			bcm_flexdigest_group_t group;
			bcm_flexdigest_entry_t * entry;
		} flexdigest_entry_create;
		struct {
			int unit;
			bcm_flexdigest_group_t group;
			bcm_flexdigest_entry_t entry;
		} flexdigest_entry_create_id;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
		} flexdigest_entry_destroy;
		struct {
			int unit;
			bcm_flexdigest_group_t group;
		} flexdigest_entry_destroy_all;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			bcm_field_entry_t entry;
		} flexdigest_entry_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
		} flexdigest_entry_install;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			int * pri;
		} flexdigest_entry_priority_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			int pri;
		} flexdigest_entry_priority_set;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
		} flexdigest_entry_reinstall;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
		} flexdigest_entry_remove;
		struct {
			int unit;
			bcm_flexdigest_qset_t qset;
			int pri;
			bcm_flexdigest_group_t * group;
		} flexdigest_group_create;
		struct {
			int unit;
			bcm_flexdigest_qset_t qset;
			int pri;
			bcm_flexdigest_group_t group;
		} flexdigest_group_create_id;
		struct {
			int unit;
			bcm_flexdigest_group_t group;
		} flexdigest_group_destroy;
		struct {
			int unit;
		} flexdigest_group_destroy_all;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			bcm_field_group_t group;
		} flexdigest_group_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_flexdigest_group_t group;
			bcm_flexdigest_qset_t * qset;
			int * pri;
		} flexdigest_group_get;
		struct {
			int unit;
			uint32 options;
			int * hash_profile_id;
		} flexdigest_hash_profile_create;
		struct {
			int unit;
			int hash_profile_id;
		} flexdigest_hash_profile_destroy;
		struct {
			int unit;
		} flexdigest_hash_profile_destroy_all;
		struct {
			int unit;
			int hash_profile_id;
			bcm_flexdigest_hash_profile_control_t type;
			int * value;
		} flexdigest_hash_profile_get;
		struct {
			int unit;
			int hash_profile_id;
			bcm_flexdigest_hash_profile_control_t type;
			int value;
		} flexdigest_hash_profile_set;
		struct {
			int unit;
			bcm_flexdigest_hash_bin_set_t bin_set;
			int array_size;
			uint16 * salt_array;
			int * count;
		} flexdigest_hash_salt_get;
		struct {
			int unit;
			bcm_flexdigest_hash_bin_set_t bin_set;
			int array_size;
			uint16 * salt_array;
		} flexdigest_hash_salt_set;
		struct {
			int unit;
		} flexdigest_init;
		struct {
			int unit;
			bcm_flexdigest_match_id_t match_id;
			bcm_flexdigest_match_t match;
		} flexdigest_match_add;
		struct {
			int unit;
			bcm_flexdigest_match_id_t match_id;
			bcm_flexdigest_match_t match;
		} flexdigest_match_delete;
		struct {
			int unit;
			bcm_flexdigest_match_id_t match_id;
		} flexdigest_match_delete_all;
		struct {
			int unit;
			bcm_flexdigest_match_id_t match_id;
			int array_size;
			bcm_flexdigest_match_t * match_array;
			int * count;
		} flexdigest_match_get;
		struct {
			int unit;
			bcm_flexdigest_match_id_t * match_id;
		} flexdigest_match_id_create;
		struct {
			int unit;
			bcm_flexdigest_match_id_t match_id;
		} flexdigest_match_id_destroy;
		struct {
			int unit;
		} flexdigest_match_id_destroy_all;
		struct {
			int unit;
			uint32 options;
			int * norm_profile_id;
		} flexdigest_norm_profile_create;
		struct {
			int unit;
			int norm_profile_id;
		} flexdigest_norm_profile_destroy;
		struct {
			int unit;
		} flexdigest_norm_profile_destroy_all;
		struct {
			int unit;
			int norm_profile_id;
			bcm_flexdigest_norm_profile_control_t type;
			int * value;
		} flexdigest_norm_profile_get;
		struct {
			int unit;
			int norm_profile_id;
			bcm_flexdigest_norm_profile_control_t type;
			int value;
		} flexdigest_norm_profile_set;
		struct {
			int unit;
			uint32 options;
			int * seed_profile_id;
		} flexdigest_norm_seed_profile_create;
		struct {
			int unit;
			int seed_profile_id;
		} flexdigest_norm_seed_profile_destroy;
		struct {
			int unit;
		} flexdigest_norm_seed_profile_destroy_all;
		struct {
			int unit;
			int seed_profile_id;
			bcm_flexdigest_norm_seed_control_t type;
			int * value;
		} flexdigest_norm_seed_profile_get;
		struct {
			int unit;
			int seed_profile_id;
			bcm_flexdigest_norm_seed_control_t type;
			int value;
		} flexdigest_norm_seed_profile_set;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			bcm_flexdigest_qualify_t qual_id;
		} flexdigest_qualifier_delete;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
		} flexdigest_qualifier_delete_all;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_FixedHve1ResultSet0;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_FixedHve1ResultSet0_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_FixedHve2ResultSet0;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_FixedHve2ResultSet0_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_FlexHve1ResultSet1;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_FlexHve1ResultSet1_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_FlexHve2ResultSet1;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_FlexHve2ResultSet1_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_L2IifFlexDigestCtrlIdA;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_L2IifFlexDigestCtrlIdA_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_L2IifFlexDigestCtrlIdB;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_L2IifFlexDigestCtrlIdB_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_L2IifOpaqueCtrlId;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_L2IifOpaqueCtrlId_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_L3IifOpaqueCtrlId;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_L3IifOpaqueCtrlId_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_L4Valid;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_L4Valid_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			bcm_flexdigest_match_id_t match_id;
		} flexdigest_qualify_MatchId;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			bcm_flexdigest_match_id_t * match_id;
		} flexdigest_qualify_MatchId_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_MyStation1Hit;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_MyStation1Hit_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_ProtocolPktOpaqueCtrlId;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_ProtocolPktOpaqueCtrlId_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_SvpOpaqueCtrlId;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_SvpOpaqueCtrlId_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_TunnelProcessingResults1;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_TunnelProcessingResults1_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_TunnelProcessingResultsRaw;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_TunnelProcessingResultsRaw_get;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 data;
			uint8 mask;
		} flexdigest_qualify_VfiOpaqueCtrlId;
		struct {
			int unit;
			bcm_flexdigest_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} flexdigest_qualify_VfiOpaqueCtrlId_get;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			char * pfx;
		} flexdigest_show;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			int options;
			bcm_flexstate_action_t * action;
			uint32 * action_id;
		} flexstate_action_create;
		struct {
			int unit;
			uint32 action_id;
		} flexstate_action_destroy;
		struct {
			int unit;
			uint32 action_id;
			bcm_flexstate_action_t * action;
		} flexstate_action_get;
		struct {
			int unit;
			bcm_flexstate_action_traverse_cb trav_fn;
			void * user_data;
		} flexstate_action_traverse;
		struct {
			int unit;
		} flexstate_cleanup;
		struct {
			int unit;
			int options;
			bcm_flexstate_group_action_t * group_action;
			uint32 * group_stat_counter_id;
		} flexstate_group_action_create;
		struct {
			int unit;
			uint32 group_stat_counter_id;
		} flexstate_group_action_destroy;
		struct {
			int unit;
			uint32 group_stat_counter_id;
			bcm_flexstate_group_action_t * group_action;
		} flexstate_group_action_get;
		struct {
			int unit;
			bcm_flexstate_group_action_traverse_cb trav_fn;
			void * user_data;
		} flexstate_group_action_traverse;
		struct {
			int unit;
		} flexstate_init;
		struct {
			int unit;
			int options;
			bcm_flexstate_quantization_t * quantization;
			uint32 * quant_id;
		} flexstate_quantization_create;
		struct {
			int unit;
			uint32 quant_id;
		} flexstate_quantization_destroy;
		struct {
			int unit;
			uint32 quant_id;
			bcm_flexstate_quantization_t * quantization;
		} flexstate_quantization_get;
		struct {
			int unit;
			bcm_flexstate_quantization_traverse_cb trav_fn;
			void * user_data;
		} flexstate_quantization_traverse;
		struct {
			int unit;
			uint32 action_id;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_flexstate_counter_value_t * counter_values;
		} flexstate_stat_get;
		struct {
			int unit;
			uint32 action_id;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_flexstate_counter_value_t * counter_values;
		} flexstate_stat_set;
		struct {
			int unit;
			uint32 action_id;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_flexstate_counter_value_t * counter_values;
		} flexstate_stat_sync_get;
		struct {
			int unit;
			uint32 action_id;
			int * enable;
		} flexstate_trigger_enable_get;
		struct {
			int unit;
			uint32 action_id;
			int enable;
		} flexstate_trigger_enable_set;
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} flow_cleanup;
		struct {
			int unit;
			bcm_flow_encap_config_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
		} flow_encap_add;
		struct {
			int unit;
			bcm_flow_encap_config_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
		} flow_encap_delete;
		struct {
			int unit;
			bcm_flow_encap_config_t * info;
			uint32 * value;
		} flow_encap_flexctr_object_get;
		struct {
			int unit;
			bcm_flow_encap_config_t * info;
			uint32 value;
		} flow_encap_flexctr_object_set;
		struct {
			int unit;
			bcm_flow_encap_config_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
		} flow_encap_get;
		struct {
			int unit;
			bcm_flow_encap_config_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
			uint32 stat_counter_id;
		} flow_encap_stat_attach;
		struct {
			int unit;
			bcm_flow_encap_config_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
			uint32 stat_counter_id;
		} flow_encap_stat_detach;
		struct {
			int unit;
			bcm_flow_encap_config_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
			uint32 * stat_counter_id;
		} flow_encap_stat_id_get;
		struct {
			int unit;
			bcm_flow_encap_traverse_cb cb;
			void * user_data;
		} flow_encap_traverse;
		struct {
			int unit;
			bcm_gport_t flow_port_id;
			uint32 * value;
		} flow_es_filter_flexctr_object_get;
		struct {
			int unit;
			bcm_gport_t flow_port_id;
			uint32 value;
		} flow_es_filter_flexctr_object_set;
		struct {
			int unit;
			bcm_gport_t flow_port_id;
			uint32 es_id;
			uint32 * flags;
		} flow_es_filter_get;
		struct {
			int unit;
			bcm_gport_t flow_port_id;
			uint32 es_id;
			uint32 flags;
		} flow_es_filter_set;
		struct {
			int unit;
			bcm_gport_t flow_port_id;
			uint32 stat_counter_id;
		} flow_es_filter_stat_attach;
		struct {
			int unit;
			bcm_gport_t flow_port_id;
			uint32 stat_counter_id;
		} flow_es_filter_stat_detach;
		struct {
			int unit;
			bcm_gport_t flow_port_id;
			uint32 * stat_counter_id;
		} flow_es_filter_stat_id_get;
		struct {
			int unit;
			char * flow_name;
			bcm_flow_handle_t * handle;
		} flow_handle_get;
		struct {
			int unit;
		} flow_init;
		struct {
			int unit;
			bcm_flow_handle_info_t * flow_handle_info;
			bcm_flow_initiator_info_t * initiator_info;
			bcm_flow_special_fields_t * special_fields;
		} flow_initiator_info_create;
		struct {
			int unit;
			bcm_flow_handle_info_t * flow_handle_info;
		} flow_initiator_info_destroy;
		struct {
			int unit;
			bcm_flow_handle_info_t * flow_handle_info;
			bcm_flow_initiator_info_t * initiator_info;
			bcm_flow_special_fields_t * special_fields;
		} flow_initiator_info_get;
		struct {
			int unit;
			bcm_flow_handle_info_t * flow_handle_info;
			bcm_flow_initiator_info_traverse_cb cb;
			void * user_data;
		} flow_initiator_info_traverse;
		struct {
			int unit;
			bcm_flow_handle_t flow_handle;
			char * field_name;
			bcm_flow_field_id_t * field_id;
		} flow_logical_field_id_get;
		struct {
			int unit;
			bcm_flow_match_config_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
		} flow_match_add;
		struct {
			int unit;
			bcm_flow_match_config_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
		} flow_match_delete;
		struct {
			int unit;
			bcm_flow_match_config_t * info;
			uint32 * value;
		} flow_match_flexctr_object_get;
		struct {
			int unit;
			bcm_flow_match_config_t * info;
			uint32 value;
		} flow_match_flexctr_object_set;
		struct {
			int unit;
			bcm_flow_match_config_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
		} flow_match_get;
		struct {
			int unit;
			bcm_flow_handle_info_t * flow_handle_info;
			bcm_flow_special_fields_t * key_special_fields;
		} flow_match_info_add;
		struct {
			int unit;
			bcm_flow_handle_info_t * flow_handle_info;
			bcm_flow_special_fields_t * key_special_fields;
		} flow_match_info_delete;
		struct {
			int unit;
			bcm_flow_handle_info_t * flow_handle_info;
			bcm_flow_special_fields_t * key_special_fields;
		} flow_match_info_get;
		struct {
			int unit;
			bcm_flow_handle_info_t * flow_handle_info;
			bcm_flow_match_info_traverse_cb cb;
			void * user_data;
		} flow_match_info_traverse;
		struct {
			int unit;
			bcm_flow_match_config_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
			uint32 stat_counter_id;
		} flow_match_stat_attach;
		struct {
			int unit;
			bcm_flow_match_config_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
			uint32 stat_counter_id;
		} flow_match_stat_detach;
		struct {
			int unit;
			bcm_flow_match_config_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
			uint32 * stat_counter_id;
		} flow_match_stat_id_get;
		struct {
			int unit;
			bcm_flow_match_traverse_cb cb;
			void * user_data;
		} flow_match_traverse;
		struct {
			int unit;
			bcm_flow_handle_t flow_handle;
			char * flow_option_name;
			bcm_flow_option_id_t * option_id;
		} flow_option_id_get;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_flow_port_t * flow_port;
		} flow_port_create;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t flow_port;
		} flow_port_destroy;
		struct {
			int unit;
			bcm_flow_port_encap_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
		} flow_port_encap_get;
		struct {
			int unit;
			bcm_flow_port_encap_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
		} flow_port_encap_set;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_flow_port_t * flow_port;
		} flow_port_get;
		struct {
			int unit;
			bcm_vpn_t vpn;
			int port_max;
			bcm_flow_port_t * flow_port;
			int * port_count;
		} flow_port_get_all;
		struct {
			int unit;
			bcm_gport_t flow_port_id;
			uint32 stat_counter_id;
		} flow_port_stat_attach;
		struct {
			int unit;
			bcm_gport_t flow_port_id;
			uint32 stat_counter_id;
		} flow_port_stat_detach;
		struct {
			int unit;
			bcm_gport_t flow_port_id;
			bcm_flexctr_direction_t direction;
			uint32 * stat_counter_id;
		} flow_port_stat_id_get;
		struct {
			int unit;
			bcm_flow_stat_info_t * flow_stat_info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
			uint32 stat_counter_id;
		} flow_stat_attach;
		struct {
			int unit;
			bcm_flow_stat_info_t * flow_stat_info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
			uint32 stat_counter_id;
		} flow_stat_detach;
		struct {
			int unit;
			bcm_flow_stat_info_t * flow_stat_info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
			bcm_stat_object_t stat_object;
			uint32 * stat_counter_id;
		} flow_stat_id_get;
		struct {
			int unit;
			bcm_flow_handle_t flow_handle;
			bcm_flow_option_id_t flow_option_id;
			bcm_flow_function_type_t function_type;
			bcm_stat_object_t * stat_object;
		} flow_stat_object_get;
		struct {
			int unit;
			bcm_flow_handle_info_t * flow_handle_info;
			bcm_flow_terminator_info_t * terminator_info;
			bcm_flow_special_fields_t * special_fields;
		} flow_terminator_info_create;
		struct {
			int unit;
			bcm_flow_handle_info_t * flow_handle_info;
		} flow_terminator_info_destroy;
		struct {
			int unit;
			bcm_flow_handle_info_t * flow_handle_info;
			bcm_flow_terminator_info_t * terminator_info;
			bcm_flow_special_fields_t * special_fields;
		} flow_terminator_info_get;
		struct {
			int unit;
			bcm_flow_handle_info_t * flow_handle_info;
			bcm_flow_terminator_info_traverse_cb cb;
			void * user_data;
		} flow_terminator_info_traverse;
		struct {
			int unit;
			bcm_flow_tunnel_initiator_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
		} flow_tunnel_initiator_create;
		struct {
			int unit;
			bcm_gport_t flow_tunnel_id;
		} flow_tunnel_initiator_destroy;
		struct {
			int unit;
			bcm_flow_tunnel_initiator_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
		} flow_tunnel_initiator_get;
		struct {
			int unit;
			bcm_gport_t tunnel_id;
			uint32 stat_counter_id;
		} flow_tunnel_initiator_stat_attach;
		struct {
			int unit;
			bcm_gport_t tunnel_id;
			uint32 stat_counter_id;
		} flow_tunnel_initiator_stat_detach;
		struct {
			int unit;
			bcm_gport_t tunnel_id;
			uint32 * stat_counter_id;
		} flow_tunnel_initiator_stat_id_get;
		struct {
			int unit;
			bcm_flow_tunnel_initiator_traverse_cb cb;
			void * user_data;
		} flow_tunnel_initiator_traverse;
		struct {
			int unit;
			bcm_flow_tunnel_terminator_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
		} flow_tunnel_terminator_create;
		struct {
			int unit;
			bcm_flow_tunnel_terminator_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
		} flow_tunnel_terminator_destroy;
		struct {
			int unit;
			bcm_flow_tunnel_terminator_t * info;
			uint32 * value;
		} flow_tunnel_terminator_flexctr_object_get;
		struct {
			int unit;
			bcm_flow_tunnel_terminator_t * info;
			uint32 value;
		} flow_tunnel_terminator_flexctr_object_set;
		struct {
			int unit;
			bcm_flow_tunnel_terminator_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
		} flow_tunnel_terminator_get;
		struct {
			int unit;
			bcm_flow_tunnel_terminator_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
			uint32 stat_counter_id;
		} flow_tunnel_terminator_stat_attach;
		struct {
			int unit;
			bcm_flow_tunnel_terminator_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
			uint32 stat_counter_id;
		} flow_tunnel_terminator_stat_detach;
		struct {
			int unit;
			bcm_flow_tunnel_terminator_t * info;
			uint32 num_of_fields;
			bcm_flow_logical_field_t * field;
			uint32 * stat_counter_id;
		} flow_tunnel_terminator_stat_id_get;
		struct {
			int unit;
			bcm_flow_tunnel_terminator_traverse_cb cb;
			void * user_data;
		} flow_tunnel_terminator_traverse;
		struct {
			int unit;
			bcm_vpn_t * vpn;
			bcm_flow_vpn_config_t * info;
		} flow_vpn_create;
		struct {
			int unit;
			bcm_vpn_t vpn;
		} flow_vpn_destroy;
		struct {
			int unit;
		} flow_vpn_destroy_all;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_flow_vpn_config_t * info;
		} flow_vpn_get;
		struct {
			int unit;
			bcm_vpn_t vpn;
			uint32 stat_counter_id;
		} flow_vpn_stat_attach;
		struct {
			int unit;
			bcm_vpn_t vpn;
			uint32 stat_counter_id;
		} flow_vpn_stat_detach;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_flexctr_direction_t direction;
			uint32 * stat_counter_id;
		} flow_vpn_stat_id_get;
		struct {
			int unit;
			bcm_flow_vpn_traverse_cb cb;
			void * user_data;
		} flow_vpn_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			uint32 options;
			bcm_flowtracker_group_type_t group_type;
			bcm_flowtracker_aggregate_class_info_t * aggregate_class_info;
			uint32 * aggregate_class;
		} flowtracker_aggregate_class_create;
		struct {
			int unit;
			uint32 aggregate_class;
			bcm_flowtracker_group_type_t group_type;
		} flowtracker_aggregate_class_destroy;
		struct {
			int unit;
			uint32 aggregate_class;
			bcm_flowtracker_group_type_t group_type;
			bcm_flowtracker_aggregate_class_info_t * aggregate_class_info;
		} flowtracker_aggregate_class_get;
		struct {
			int unit;
			bcm_flowtracker_group_type_t group_type;
			int size;
			uint32 * aggregate_class_array;
			int * actual_size;
		} flowtracker_aggregate_class_get_all;
		struct {
			int unit;
			bcm_flowtracker_check_t check_id;
			bcm_flowtracker_check_action_info_t * info;
		} flowtracker_check_action_info_get;
		struct {
			int unit;
			bcm_flowtracker_check_t check_id;
			bcm_flowtracker_check_action_info_t info;
		} flowtracker_check_action_info_set;
		struct {
			int unit;
			uint32 options;
			bcm_flowtracker_check_info_t check_info;
			bcm_flowtracker_check_t * check_id;
		} flowtracker_check_create;
		struct {
			int unit;
			bcm_flowtracker_check_t check_id;
			bcm_flowtracker_check_delay_info_t * info;
		} flowtracker_check_delay_info_get;
		struct {
			int unit;
			bcm_flowtracker_check_t check_id;
			bcm_flowtracker_check_delay_info_t info;
		} flowtracker_check_delay_info_set;
		struct {
			int unit;
			bcm_flowtracker_check_t check_id;
		} flowtracker_check_destroy;
		struct {
			int unit;
		} flowtracker_check_destroy_all;
		struct {
			int unit;
			bcm_flowtracker_check_t check_id;
			bcm_flowtracker_check_export_info_t * info;
		} flowtracker_check_export_info_get;
		struct {
			int unit;
			bcm_flowtracker_check_t check_id;
			bcm_flowtracker_check_export_info_t info;
		} flowtracker_check_export_info_set;
		struct {
			int unit;
			bcm_flowtracker_check_t check_id;
			bcm_flowtracker_check_info_t * check_info;
		} flowtracker_check_get;
		struct {
			int unit;
			bcm_flowtracker_check_traverse_cb cb;
			void * user_data;
		} flowtracker_check_traverse;
		struct {
			int unit;
			int max_debug_info_size;
			bcm_flowtracker_chip_debug_info_t * list_of_debug_info;
			int * actual_debug_info_size;
		} flowtracker_chip_debug_info_get;
		struct {
			int unit;
			int num_debug_info;
			bcm_flowtracker_chip_debug_info_t * list_of_debug_info;
		} flowtracker_chip_debug_info_set;
		struct {
			int unit;
			uint32 options;
			bcm_flowtracker_collector_t * collector_id;
			bcm_flowtracker_collector_info_t * collector_info;
		} flowtracker_collector_create;
		struct {
			int unit;
			bcm_flowtracker_collector_t id;
		} flowtracker_collector_destroy;
		struct {
			int unit;
			bcm_flowtracker_collector_t id;
			bcm_flowtracker_collector_info_t * collector_info;
		} flowtracker_collector_get;
		struct {
			int unit;
			int max_size;
			bcm_flowtracker_collector_t * collector_list;
			int * list_size;
		} flowtracker_collector_get_all;
		struct {
			int unit;
			bcm_flowtracker_control_type_t type;
			int * arg;
		} flowtracker_control_get;
		struct {
			int unit;
			bcm_flowtracker_control_type_t type;
			int arg;
		} flowtracker_control_set;
		struct {
			int unit;
		} flowtracker_detach;
		struct {
			int unit;
			uint32 flags;
			bcm_flowtracker_drop_reasons_t drop_reasons;
			bcm_flowtracker_drop_reason_group_t * id;
		} flowtracker_drop_reason_group_create;
		struct {
			int unit;
			bcm_flowtracker_drop_reason_group_t id;
		} flowtracker_drop_reason_group_delete;
		struct {
			int unit;
			bcm_flowtracker_drop_reason_group_t id;
			bcm_flowtracker_drop_reasons_t * drop_reasons;
		} flowtracker_drop_reason_group_get;
		struct {
			int unit;
			uint32 options;
			bcm_flowtracker_class_source_type_t * source_type;
		} flowtracker_egress_class_source_get;
		struct {
			int unit;
			uint32 options;
			bcm_flowtracker_class_source_type_t source_type;
		} flowtracker_egress_class_source_set;
		struct {
			int unit;
			bcm_flowtracker_elephant_match_action_t action;
			uint32 * match_types;
			bcm_flowtracker_elephant_match_data_t * match_data;
		} flowtracker_elephant_action_match_get;
		struct {
			int unit;
			bcm_flowtracker_elephant_match_action_t action;
			uint32 match_types;
			bcm_flowtracker_elephant_match_data_t * match_data;
		} flowtracker_elephant_action_match_set;
		struct {
			int unit;
			bcm_flowtracker_elephant_control_t type;
			int * arg;
		} flowtracker_elephant_control_get;
		struct {
			int unit;
			bcm_flowtracker_elephant_control_t type;
			int arg;
		} flowtracker_elephant_control_set;
		struct {
			int unit;
			bcm_flowtracker_elephant_hash_table_t hash_table;
			int instance_num;
			int bank_num;
			bcm_flowtracker_elephant_hash_type_t * hash_type;
			int * right_rotate_bits;
		} flowtracker_elephant_hash_config_get;
		struct {
			int unit;
			bcm_flowtracker_elephant_hash_table_t hash_table;
			int instance_num;
			int bank_num;
			bcm_flowtracker_elephant_hash_type_t hash_type;
			int right_rotate_bits;
		} flowtracker_elephant_hash_config_set;
		struct {
			int unit;
			bcm_cos_t int_pri;
			bcm_cos_t * new_int_pri;
		} flowtracker_elephant_int_pri_remap_get;
		struct {
			int unit;
			bcm_cos_t int_pri;
			bcm_cos_t new_int_pri;
		} flowtracker_elephant_int_pri_remap_set;
		struct {
			int unit;
			uint32 options;
			bcm_flowtracker_elephant_profile_info_t * profile;
			bcm_flowtracker_elephant_profile_t * profile_id;
		} flowtracker_elephant_profile_create;
		struct {
			int unit;
			bcm_flowtracker_elephant_profile_t profile_id;
		} flowtracker_elephant_profile_destroy;
		struct {
			int unit;
			bcm_flowtracker_elephant_profile_t profile_id;
			bcm_flowtracker_elephant_profile_info_t * profile;
		} flowtracker_elephant_profile_get;
		struct {
			int unit;
			int max;
			bcm_flowtracker_elephant_profile_t * profile_list;
			int * count;
		} flowtracker_elephant_profile_get_all;
		struct {
			int unit;
			bcm_flowtracker_elephant_stats_t * stats;
		} flowtracker_elephant_stats_get;
		struct {
			int unit;
			bcm_flowtracker_elephant_stats_t * stats;
		} flowtracker_elephant_stats_set;
		struct {
			int unit;
			bcm_flowtracker_elephant_stats_t * stats;
		} flowtracker_elephant_stats_sync_get;
		struct {
			int unit;
			bcm_flowtracker_export_record_t * record;
			int max_elements;
			bcm_flowtracker_export_element_info_t * export_element_info;
			bcm_flowtracker_export_record_data_info_t * data_info;
			int * count;
		} flowtracker_export_record_data_info_get;
		struct {
			int unit;
			bcm_flowtracker_collector_t collector_id;
			bcm_flowtracker_collector_callback_options_t callback_options;
			bcm_flowtracker_export_record_cb_f callback_fn;
			void * userdata;
		} flowtracker_export_record_register;
		struct {
			int unit;
			bcm_flowtracker_collector_t collector_id;
			bcm_flowtracker_collector_callback_options_t callback_options;
			bcm_flowtracker_export_record_cb_f callback_fn;
		} flowtracker_export_record_unregister;
		struct {
			int unit;
			uint32 options;
			bcm_flowtracker_export_template_t * id;
			uint16 set_id;
			int num_export_elements;
			bcm_flowtracker_export_element_info_t * list_of_export_elements;
		} flowtracker_export_template_create;
		struct {
			int unit;
			bcm_flowtracker_export_template_t id;
		} flowtracker_export_template_destroy;
		struct {
			int unit;
			bcm_flowtracker_export_template_t id;
			uint16 * set_id;
			int max_size;
			bcm_flowtracker_export_element_info_t * list_of_export_elements;
			int * list_size;
		} flowtracker_export_template_get;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			int max_in_export_elements;
			bcm_flowtracker_export_element_info_t * in_export_elements;
			int max_out_export_elements;
			bcm_flowtracker_export_element_info_t * out_export_elements;
			int * actual_out_export_elements;
		} flowtracker_export_template_validate;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			uint32 flags;
			int max_actions;
			bcm_flowtracker_group_action_info_t * action_list;
			int * num_actions;
		} flowtracker_group_actions_get;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			uint32 flags;
			int num_actions;
			bcm_flowtracker_group_action_info_t * action_list;
		} flowtracker_group_actions_set;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			uint32 * aging_interval_ms;
		} flowtracker_group_age_timer_get;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			uint32 aging_interval_ms;
		} flowtracker_group_age_timer_set;
		struct {
			int unit;
			bcm_flowtracker_group_t group_id;
			bcm_flowtracker_check_t check_id;
		} flowtracker_group_check_add;
		struct {
			int unit;
			bcm_flowtracker_group_t group_id;
			bcm_flowtracker_check_t check_id;
		} flowtracker_group_check_delete;
		struct {
			int unit;
			bcm_flowtracker_group_t group_id;
			int max_checks;
			bcm_flowtracker_check_t * list_of_check_ids;
			int * num_checks;
		} flowtracker_group_check_get_all;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			uint32 flags;
		} flowtracker_group_clear;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			bcm_flowtracker_collector_t collector_id;
			bcm_flowtracker_export_template_t template_id;
		} flowtracker_group_collector_add;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			bcm_collector_t collector_id;
			int export_profile_id;
			bcm_flowtracker_export_template_t template_id;
		} flowtracker_group_collector_attach;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			int max_list_size;
			bcm_collector_t * list_of_collectors;
			bcm_flowtracker_export_template_t * list_of_templates;
			int * export_profile_id_list;
			int * list_size;
		} flowtracker_group_collector_attach_get_all;
		struct {
			int unit;
			bcm_flowtracker_group_t group_id;
			bcm_flowtracker_collector_copy_info_t * info;
		} flowtracker_group_collector_copy_info_get;
		struct {
			int unit;
			bcm_flowtracker_group_t group_id;
			bcm_flowtracker_collector_copy_info_t info;
		} flowtracker_group_collector_copy_info_set;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			bcm_flowtracker_collector_t collector_id;
			bcm_flowtracker_export_template_t template_id;
		} flowtracker_group_collector_delete;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			bcm_collector_t collector_id;
			int export_profile_id;
			bcm_flowtracker_export_template_t template_id;
		} flowtracker_group_collector_detach;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			int max_list_size;
			bcm_flowtracker_collector_t * list_of_collectors;
			bcm_flowtracker_export_template_t * list_of_templates;
			int * list_size;
		} flowtracker_group_collector_get_all;
		struct {
			int unit;
			bcm_flowtracker_group_t group_id;
			bcm_flowtracker_group_control_type_t type;
			int * arg;
		} flowtracker_group_control_get;
		struct {
			int unit;
			bcm_flowtracker_group_t group_id;
			bcm_flowtracker_group_control_type_t type;
			int arg;
		} flowtracker_group_control_set;
		struct {
			int unit;
			uint32 options;
			bcm_flowtracker_group_t * flow_group_id;
			bcm_flowtracker_group_info_t * flow_group_info;
		} flowtracker_group_create;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			bcm_flowtracker_flow_key_t * flow_key;
			bcm_flowtracker_flow_data_t * flow_data;
		} flowtracker_group_data_get;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
		} flowtracker_group_destroy;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			bcm_flowtracker_elephant_profile_t profile_id;
		} flowtracker_group_elephant_profile_attach;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			bcm_flowtracker_elephant_profile_t * profile_id;
		} flowtracker_group_elephant_profile_attach_get;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
		} flowtracker_group_elephant_profile_detach;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			bcm_flowtracker_export_trigger_info_t * export_trigger_info;
		} flowtracker_group_export_trigger_get;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			bcm_flowtracker_export_trigger_info_t * export_trigger_info;
		} flowtracker_group_export_trigger_set;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			bcm_flowtracker_group_flow_action_info_t * action_info;
			int num_actions;
			bcm_flowtracker_group_action_info_t * action_list;
		} flowtracker_group_flow_action_update;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			uint32 * flow_count;
		} flowtracker_group_flow_count_get;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			bcm_flowtracker_group_flow_action_info_t * action_info;
		} flowtracker_group_flow_delete;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			uint32 * flow_limit;
		} flowtracker_group_flow_limit_get;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			uint32 flow_limit;
		} flowtracker_group_flow_limit_set;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			bcm_flowtracker_group_info_t * flow_group_info;
		} flowtracker_group_get;
		struct {
			int unit;
			int max_size;
			bcm_flowtracker_group_t * flow_group_list;
			int * list_size;
		} flowtracker_group_get_all;
		struct {
			int unit;
			bcm_flowtracker_group_t group_id;
			bcm_flowtracker_meter_info_t * info;
		} flowtracker_group_meter_info_get;
		struct {
			int unit;
			bcm_flowtracker_group_t group_id;
			bcm_flowtracker_meter_info_t info;
		} flowtracker_group_meter_info_set;
		struct {
			int unit;
			uint32 flags;
			int num_groups;
			bcm_flowtracker_group_t * list_of_group_ids;
		} flowtracker_group_multi_clear;
		struct {
			int unit;
			bcm_flowtracker_group_t group_id;
			bcm_flowtracker_group_record_type_t type;
			bcm_flowtracker_group_record_traverse_cb cb;
			void * user_data;
		} flowtracker_group_record_traverse;
		struct {
			int unit;
			bcm_flowtracker_group_t group_id;
			bcm_flowtracker_group_stat_t * group_stats;
		} flowtracker_group_stat_get;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			uint32 * stat_modeid;
		} flowtracker_group_stat_modeid_get;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			uint32 stat_modeid;
		} flowtracker_group_stat_modeid_set;
		struct {
			int unit;
			bcm_flowtracker_group_t group_id;
			bcm_flowtracker_group_stat_t * group_stats;
		} flowtracker_group_stat_set;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			int max_size;
			bcm_flowtracker_tracking_param_info_t * list_of_tracking_params;
			int * list_size;
		} flowtracker_group_tracking_params_get;
		struct {
			int unit;
			bcm_flowtracker_group_t id;
			int num_tracking_params;
			bcm_flowtracker_tracking_param_info_t * list_of_tracking_params;
		} flowtracker_group_tracking_params_set;
		struct {
			int unit;
		} flowtracker_init;
		struct {
			int unit;
			uint32 ft_type_flags;
			bcm_flowtracker_periodic_export_config_t * config;
		} flowtracker_periodic_export_config_get;
		struct {
			int unit;
			uint32 ft_type_flags;
			bcm_flowtracker_periodic_export_config_t * config;
		} flowtracker_periodic_export_config_set;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			bcm_flowtracker_flow_key_t * flow_key;
		} flowtracker_static_flow_add;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			bcm_flowtracker_flow_key_t * flow_key;
		} flowtracker_static_flow_delete;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
		} flowtracker_static_flow_delete_all;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			int max_size;
			bcm_flowtracker_flow_key_t * flow_key_arr;
			int * list_size;
		} flowtracker_static_flow_get_all;
		struct {
			int unit;
			bcm_flowtracker_export_template_t template_id;
			bcm_collector_t collector_id;
			bcm_flowtracker_template_transmit_config_t * config;
		} flowtracker_template_transmit_config_get;
		struct {
			int unit;
			bcm_flowtracker_export_template_t template_id;
			bcm_collector_t collector_id;
			bcm_flowtracker_template_transmit_config_t * config;
		} flowtracker_template_transmit_config_set;
		struct {
			int unit;
			uint32 flags;
			bcm_flowtracker_tracking_param_type_t param;
			uint16 custom_id;
			bcm_flowtracker_udf_info_t * udf_info;
		} flowtracker_udf_tracking_param_get;
		struct {
			int unit;
			uint32 flags;
			bcm_flowtracker_tracking_param_type_t param;
			uint16 custom_id;
			bcm_flowtracker_udf_info_t * udf_info;
		} flowtracker_udf_tracking_param_set;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			uint32 options;
			int num_user_entry_params;
			bcm_flowtracker_tracking_param_info_t * user_entry_param_list;
			bcm_flowtracker_user_entry_handle_t * entry_handle;
		} flowtracker_user_entry_add;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			bcm_flowtracker_user_entry_handle_t * entry_handle;
		} flowtracker_user_entry_delete;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
		} flowtracker_user_entry_delete_all;
		struct {
			int unit;
			bcm_flowtracker_user_entry_handle_t * entry_handle;
			int num_user_entry_params;
			bcm_flowtracker_tracking_param_info_t * user_entry_param_list;
			int * actual_user_entry_params;
		} flowtracker_user_entry_get;
		struct {
			int unit;
			bcm_flowtracker_group_t flow_group_id;
			int num_user_entry_handles;
			bcm_flowtracker_user_entry_handle_t * user_entry_handle_list;
			int * actual_user_entry_handles;
		} flowtracker_user_entry_get_all;
#ifdef	INCLUDE_GDPLL
		struct {
			int unit;
			bcm_gdpll_cb_reg_t cb_type;
			bcm_gdpll_cb cb;
			void * user_data;
		} gdpll_cb_register;
		struct {
			int unit;
			bcm_gdpll_cb_reg_t cb_type;
		} gdpll_cb_unregister;
		struct {
			int unit;
			uint32 flags;
			bcm_gdpll_chan_t * gdpll_chan;
			int * pChan;
		} gdpll_chan_create;
		struct {
			int unit;
			int chan;
			bcm_gdpll_debug_mode_t debug_mode;
			int enable;
		} gdpll_chan_debug_enable;
		struct {
			int unit;
			int chan;
		} gdpll_chan_destroy;
		struct {
			int unit;
			int chan;
			int enable;
		} gdpll_chan_enable;
		struct {
			int unit;
			int chan;
			bcm_gdpll_chan_t * gdpll_chan;
		} gdpll_chan_get;
		struct {
			int unit;
			int chan;
			uint32 * dpllState;
		} gdpll_chan_state_get;
		struct {
			int unit;
			int enable;
		} gdpll_debug;
		struct {
			int unit;
			bcm_gdpll_debug_cb cb;
			void * user_data;
		} gdpll_debug_cb_register;
		struct {
			int unit;
		} gdpll_flush;
		struct {
			int unit;
			bcm_gdpll_input_event_t input_event;
			uint32 timeout;
		} gdpll_input_event_poll;
		struct {
			int unit;
			int chan;
			uint64 * dpllOffset;
		} gdpll_offset_get;
		struct {
			int unit;
			int chan;
			uint64 offset;
		} gdpll_offset_set;
#endif	/* INCLUDE_GDPLL */
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_core_t core_id;
			bcm_stat_counter_interface_type_t engine_source;
			bcm_stat_pp_info_t * stat_info;
		} gport_stat_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_core_t core_id;
			bcm_stat_counter_interface_type_t engine_source;
			bcm_stat_pp_info_t stat_info;
		} gport_stat_set;
		struct {
			int unit;
			bcm_hash_flex_bin_config_t * cfg;
			int num_bins;
			bcm_hash_flex_bin_cmd_t * bin_cmd;
			int num_fields;
			bcm_hash_flex_field_t * flex_field;
		} hash_flex_bin_add;
		struct {
			int unit;
			int entry_id;
		} hash_flex_bin_delete;
		struct {
			int unit;
		} hash_flex_bin_delete_all;
		struct {
			int unit;
			bcm_hash_flex_bin_config_t * cfg;
			int num_bins;
			bcm_hash_flex_bin_cmd_t * bin_cmd;
			int num_fields;
			bcm_hash_flex_field_t * flex_field;
		} hash_flex_bin_get;
		struct {
			int unit;
			uint32 option;
			bcm_hash_flex_bin_traverse_cb cb;
			void * user_data;
		} hash_flex_bin_traverse;
		struct {
			int unit;
			bcm_hash_flex_object_t object;
			char * field_name;
			uint32 * field_id;
		} hash_flex_field_id_get;
		struct {
			int unit;
			uint32 field_id;
			bcm_hash_flex_object_t * object;
			int size;
			char * field_name;
		} hash_flex_field_name_get;
		struct {
			int unit;
		} hash_init;
#ifdef	INCLUDE_I2C
		struct {
			int unit;
			int fd;
			int opcode;
			void * data;
			int len;
		} i2c_ioctl;
		struct {
			int unit;
			char * devname;
			uint32 flags;
			int speed;
		} i2c_open;
		struct {
			int unit;
			int fd;
			uint32 addr;
			uint8 * data;
			uint32 * nbytes;
		} i2c_read;
		struct {
			int unit;
			int fd;
			uint32 addr;
			uint8 * data;
			uint32 nbytes;
		} i2c_write;
#endif	/* INCLUDE_I2C */
		struct {
			int unit;
			bcm_ifa_cc_config_t * config_data;
		} ifa_cc_config_get;
		struct {
			int unit;
			bcm_ifa_cc_config_t * config_data;
		} ifa_cc_config_set;
		struct {
			int unit;
			bcm_collector_t collector_id;
			int export_profile_id;
			bcm_ifa_export_template_t template_id;
		} ifa_collector_attach;
		struct {
			int unit;
			bcm_collector_t * collector_id;
			int * export_profile_id;
			bcm_ifa_export_template_t * template_id;
		} ifa_collector_attach_get;
		struct {
			int unit;
			bcm_collector_t collector_id;
			int export_profile_id;
			bcm_ifa_export_template_t template_id;
		} ifa_collector_detach;
		struct {
			int unit;
			bcm_ifa_collector_info_t * collector_info;
		} ifa_collector_get;
		struct {
			int unit;
			uint32 options;
			bcm_ifa_collector_info_t * collector_info;
		} ifa_collector_set;
		struct {
			int unit;
			bcm_ifa_config_info_t * config_data;
		} ifa_config_info_get;
		struct {
			int unit;
			uint32 options;
			bcm_ifa_config_info_t * config_data;
		} ifa_config_info_set;
		struct {
			int unit;
		} ifa_detach;
		struct {
			int unit;
			uint32 options;
			bcm_ifa_export_template_t * id;
			uint16 set_id;
			int num_export_elements;
			bcm_ifa_export_element_info_t * list_of_export_elements;
		} ifa_export_template_create;
		struct {
			int unit;
			bcm_ifa_export_template_t id;
		} ifa_export_template_destroy;
		struct {
			int unit;
			bcm_ifa_export_template_t id;
			uint16 * set_id;
			int max_size;
			bcm_ifa_export_element_info_t * list_of_export_elements;
			int * list_size;
		} ifa_export_template_get;
		struct {
			int unit;
			uint32 options;
			int * header_id;
			bcm_ifa_header_t * header;
		} ifa_header_create;
		struct {
			int unit;
			int header_id;
		} ifa_header_destroy;
		struct {
			int unit;
			int header_id;
			bcm_ifa_header_t * header;
		} ifa_header_get;
		struct {
			int unit;
			bcm_ifa_header_traverse_cb cb;
			void * user_data;
		} ifa_header_traverse;
		struct {
			int unit;
		} ifa_init;
		struct {
			int unit;
			bcm_ifa_stat_info_t * stat_data;
		} ifa_stat_info_get;
		struct {
			int unit;
			bcm_ifa_stat_info_t * stat_data;
		} ifa_stat_info_set;
		struct {
			int unit;
			bcm_ifa_export_template_t template_id;
			bcm_collector_t collector_id;
			bcm_ifa_template_transmit_config_t * config;
		} ifa_template_transmit_config_get;
		struct {
			int unit;
			bcm_ifa_export_template_t template_id;
			bcm_collector_t collector_id;
			bcm_ifa_template_transmit_config_t * config;
		} ifa_template_transmit_config_set;
		struct {
			int unit;
			bcm_info_t * info;
		} info_get;
		struct {
			int unit;
		} init;
		struct {
			int unit;
			bcm_init_advanced_info_t * init_advanced_info;
		} init_advanced;
		struct {
			int unit;
		} init_check;
		struct {
			int unit;
			uint32 flags;
		} init_selective;
		struct {
			int unit;
			uint32 flags;
			bcm_instru_control_t type;
			int * arg;
		} instru_control_get;
		struct {
			int unit;
			uint32 flags;
			bcm_instru_control_t type;
			int arg;
		} instru_control_set;
		struct {
			int unit;
			uint32 flags;
			int * out_active;
		} instru_eventor_active_get;
		struct {
			int unit;
			uint32 flags;
			int active;
		} instru_eventor_active_set;
		struct {
			int unit;
			uint32 flags;
			bcm_eventor_builder_id_t builder;
			bcm_instru_eventor_builder_conf_t * out_conf;
		} instru_eventor_builder_get;
		struct {
			int unit;
			uint32 flags;
			bcm_eventor_builder_id_t builder;
			bcm_instru_eventor_builder_conf_t * conf;
		} instru_eventor_builder_set;
		struct {
			int unit;
			uint32 flags;
			bcm_eventor_context_id_t context;
			bcm_eventor_context_type_t context_type;
			bcm_instru_eventor_context_conf_t * out_conf;
		} instru_eventor_context_get;
		struct {
			int unit;
			uint32 flags;
			bcm_eventor_context_id_t context;
			bcm_eventor_context_type_t context_type;
			bcm_instru_eventor_context_conf_t * conf;
		} instru_eventor_context_set;
		struct {
			int unit;
			uint32 flags;
			bcm_eventor_event_id_t event_id;
		} instru_eventor_event_generate;
		struct {
			int unit;
			uint32 flags;
			bcm_eventor_event_id_t event_id;
			bcm_instru_eventor_event_id_config_t * config;
		} instru_eventor_event_id_config_get;
		struct {
			int unit;
			uint32 flags;
			bcm_eventor_event_id_t event_id;
			bcm_instru_eventor_event_id_config_t * config;
		} instru_eventor_event_id_config_set;
		struct {
			int unit;
			uint32 flags;
			int mem;
			uint32 copyno;
			uint32 index;
			uint32 array_index;
			bcm_instru_access_info_t * access_info;
		} instru_get_memory_access_info;
		struct {
			int unit;
			uint32 flags;
			int reg;
			uint32 instance;
			uint32 array_index;
			bcm_instru_access_info_t * access_info;
		} instru_get_register_access_info;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			bcm_instru_gport_control_t type;
			int * arg;
		} instru_gport_control_get;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			bcm_instru_gport_control_t type;
			int arg;
		} instru_gport_control_set;
		struct {
			int unit;
			bcm_instru_ifa_info_t * ifa_info;
		} instru_ifa_encap_create;
		struct {
			int unit;
			bcm_instru_ifa_info_t * ifa_info;
		} instru_ifa_encap_delete;
		struct {
			int unit;
			bcm_instru_ifa_info_t * ifa_info;
		} instru_ifa_encap_get;
		struct {
			int unit;
			bcm_instru_ifa_encap_traverse_cb cb;
			void * user_data;
		} instru_ifa_encap_traverse;
		struct {
			int unit;
			uint32 flags;
			int ipt_profile;
			bcm_instru_ipt_t * config;
		} instru_ipt_profile_get;
		struct {
			int unit;
			uint32 flags;
			int ipt_profile;
			bcm_instru_ipt_t * config;
		} instru_ipt_profile_set;
		struct {
			int unit;
			bcm_instru_sflow_encap_info_t * sflow_encap_info;
		} instru_sflow_encap_create;
		struct {
			int unit;
			bcm_instru_sflow_encap_info_t * sflow_encap_info;
		} instru_sflow_encap_delete;
		struct {
			int unit;
			bcm_instru_sflow_encap_extended_dst_info_t * sflow_encap_ext_dst_info;
		} instru_sflow_encap_extended_dst_create;
		struct {
			int unit;
			bcm_instru_sflow_encap_extended_dst_info_t * sflow_encap_ext_dst_info;
		} instru_sflow_encap_extended_dst_delete;
		struct {
			int unit;
			bcm_instru_sflow_encap_extended_dst_info_t * sflow_encap_ext_dst_info;
		} instru_sflow_encap_extended_dst_get;
		struct {
			int unit;
			bcm_instru_sflow_encap_extended_dst_cb cb;
			void * user_data;
		} instru_sflow_encap_extended_dst_traverse;
		struct {
			int unit;
			bcm_instru_sflow_encap_extended_src_info_t * sflow_encap_ext_src_info;
		} instru_sflow_encap_extended_src_create;
		struct {
			int unit;
			bcm_instru_sflow_encap_extended_src_info_t * sflow_encap_ext_src_info;
		} instru_sflow_encap_extended_src_delete;
		struct {
			int unit;
			bcm_instru_sflow_encap_extended_src_info_t * sflow_encap_ext_src_info;
		} instru_sflow_encap_extended_src_get;
		struct {
			int unit;
			bcm_instru_sflow_encap_extended_src_cb cb;
			void * user_data;
		} instru_sflow_encap_extended_src_traverse;
		struct {
			int unit;
			bcm_instru_sflow_encap_info_t * sflow_encap_info;
		} instru_sflow_encap_get;
		struct {
			int unit;
			bcm_instru_sflow_encap_traverse_cb cb;
			void * user_data;
		} instru_sflow_encap_traverse;
		struct {
			int unit;
			bcm_instru_sflow_sample_interface_info_t * sample_interface_info;
		} instru_sflow_sample_interface_add;
		struct {
			int unit;
			bcm_instru_sflow_sample_interface_info_t * sample_interface_info;
		} instru_sflow_sample_interface_get;
		struct {
			int unit;
			bcm_instru_sflow_sample_interface_info_t * sample_interface_info;
		} instru_sflow_sample_interface_remove;
		struct {
			int unit;
			bcm_instru_sflow_sample_interface_traverse_info_t * sample_interface_traverse_info;
			bcm_instru_sflow_sample_traverse_cb cb;
			void * user_data;
		} instru_sflow_sample_interface_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_instru_synced_counters_source_type_t source_type;
			bcm_instru_synced_counters_config_t * config;
		} instru_synced_counters_config_get;
		struct {
			int unit;
			uint32 flags;
			bcm_instru_synced_counters_source_type_t source_type;
			bcm_instru_synced_counters_config_t * config;
		} instru_synced_counters_config_set;
		struct {
			int unit;
			uint32 flags;
			bcm_instru_synced_counters_records_key_t * key;
			bcm_instru_synced_counters_data_t * data;
		} instru_synced_counters_records_get;
		struct {
			int unit;
			uint32 flags;
			uint32 nof_sources;
			bcm_instru_synced_counters_source_type_t * sources;
			uint32 * enable;
		} instru_synced_counters_trigger_enable_get;
		struct {
			int unit;
			uint32 flags;
			uint32 nof_sources;
			bcm_instru_synced_counters_source_type_t * sources;
			uint32 * enable;
		} instru_synced_counters_trigger_enable_set;
		struct {
			int unit;
			bcm_core_t core_id;
			uint32 flags;
		} instru_vis_resume;
		struct {
			int unit;
			bcm_core_t core_id;
			uint32 flags;
			int nof_signals;
			bcm_instru_vis_signal_key_t * signal_key;
			bcm_instru_vis_signal_result_t * signal_result;
		} instru_vis_signal_get;
#ifdef	INCLUDE_INT
		struct {
			int unit;
			bcm_int_cosq_stat_config_t * config;
		} int_cosq_stat_config_get;
		struct {
			int unit;
			bcm_int_cosq_stat_config_t * config;
		} int_cosq_stat_config_set;
		struct {
			int unit;
		} int_detach;
		struct {
			int unit;
			uint32 options;
			int * profile_id;
			bcm_int_dp_action_profile_t * profile;
		} int_dp_action_profile_create;
		struct {
			int unit;
			int profile_id;
		} int_dp_action_profile_destroy;
		struct {
			int unit;
			int profile_id;
			bcm_int_dp_action_profile_t * profile;
		} int_dp_action_profile_get;
		struct {
			int unit;
			bcm_int_dp_action_profile_traverse_cb cb;
			void * user_data;
		} int_dp_action_profile_traverse;
		struct {
			int unit;
			uint32 options;
			bcm_int_dp_vector_match_t * match;
		} int_dp_vector_match_add;
		struct {
			int unit;
			bcm_int_dp_vector_match_t * match;
		} int_dp_vector_match_delete;
		struct {
			int unit;
		} int_dp_vector_match_delete_all;
		struct {
			int unit;
			bcm_int_dp_vector_match_t * match;
		} int_dp_vector_match_get;
		struct {
			int unit;
			bcm_int_dp_vector_match_traverse_cb cb;
			void * user_data;
		} int_dp_vector_match_traverse;
		struct {
			int unit;
			uint32 options;
			int * profile_id;
			bcm_int_ifa_action_profile_t * profile;
		} int_ifa_action_profile_create;
		struct {
			int unit;
			int profile_id;
		} int_ifa_action_profile_destroy;
		struct {
			int unit;
			int profile_id;
			bcm_int_ifa_action_profile_t * profile;
		} int_ifa_action_profile_get;
		struct {
			int unit;
			bcm_int_ifa_action_profile_traverse_cb cb;
			void * user_data;
		} int_ifa_action_profile_traverse;
		struct {
			int unit;
			uint32 options;
			bcm_int_ifa_vector_match_t * match;
		} int_ifa_vector_match_add;
		struct {
			int unit;
			bcm_int_ifa_vector_match_t * match;
		} int_ifa_vector_match_delete;
		struct {
			int unit;
		} int_ifa_vector_match_delete_all;
		struct {
			int unit;
			bcm_int_ifa_vector_match_t * match;
		} int_ifa_vector_match_get;
		struct {
			int unit;
			bcm_int_ifa_vector_match_traverse_cb cb;
			void * user_data;
		} int_ifa_vector_match_traverse;
		struct {
			int unit;
		} int_init;
		struct {
			int unit;
			uint32 options;
			int * profile_id;
			bcm_int_ioam_action_profile_t * profile;
		} int_ioam_action_profile_create;
		struct {
			int unit;
			int profile_id;
		} int_ioam_action_profile_destroy;
		struct {
			int unit;
			int profile_id;
			bcm_int_ioam_action_profile_t * profile;
		} int_ioam_action_profile_get;
		struct {
			int unit;
			bcm_int_ioam_action_profile_traverse_cb cb;
			void * user_data;
		} int_ioam_action_profile_traverse;
		struct {
			int unit;
			uint32 options;
			bcm_int_ioam_vector_match_t * match;
		} int_ioam_vector_match_add;
		struct {
			int unit;
			bcm_int_ioam_vector_match_t * match;
		} int_ioam_vector_match_delete;
		struct {
			int unit;
		} int_ioam_vector_match_delete_all;
		struct {
			int unit;
			bcm_int_ioam_vector_match_t * match;
		} int_ioam_vector_match_get;
		struct {
			int unit;
			bcm_int_ioam_vector_match_traverse_cb cb;
			void * user_data;
		} int_ioam_vector_match_traverse;
		struct {
			int unit;
			int profile_id;
			bcm_int_metadata_field_entry_t * field_entry;
		} int_metadata_field_add;
		struct {
			int unit;
			int profile_id;
			bcm_int_metadata_field_entry_t * field_entry;
		} int_metadata_field_delete;
		struct {
			int unit;
			int profile_id;
		} int_metadata_field_delete_all;
		struct {
			int unit;
			bcm_int_metadata_field_t field;
			bcm_int_metadata_field_select_info_t * field_select_info;
		} int_metadata_field_select_info_get;
		struct {
			int unit;
			uint32 options;
			int * profile_id;
		} int_metadata_profile_create;
		struct {
			int unit;
			int profile_id;
		} int_metadata_profile_destroy;
		struct {
			int unit;
			int profile_id;
			int array_size;
			bcm_int_metadata_field_entry_t * entry_array;
			int * field_count;
		} int_metadata_profile_get;
		struct {
			int unit;
			bcm_int_metadata_profile_traverse_cb cb;
			void * user_data;
		} int_metadata_profile_traverse;
		struct {
			int unit;
			uint32 options;
			int * profile_id;
			bcm_int_opaque_data_profile_t * profile;
		} int_opaque_data_profile_create;
		struct {
			int unit;
			int profile_id;
		} int_opaque_data_profile_destroy;
		struct {
			int unit;
			int profile_id;
			bcm_int_opaque_data_profile_t * profile;
		} int_opaque_data_profile_get;
		struct {
			int unit;
			bcm_int_opaque_data_profile_traverse_cb cb;
			void * user_data;
		} int_opaque_data_profile_traverse;
		struct {
			int unit;
			bcm_int_turnaround_config_t * config_data;
		} int_turnaround_config_get;
		struct {
			int unit;
			bcm_int_turnaround_config_t * config_data;
		} int_turnaround_config_set;
		struct {
			int unit;
			bcm_int_turnaround_stat_t * stat_data;
		} int_turnaround_stat_get;
#endif	/* INCLUDE_INT */
		struct {
			uint8 * ip6;
			int len;
		} ip6_mask_create;
		struct {
			uint8 * mask;
		} ip6_mask_length;
	/* bcm_ip_mask_create has a non int return type */
		struct {
			bcm_ip_t ip;
		} ip_mask_length;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_port_t port;
			bcm_ipfix_config_t * config;
		} ipfix_config_get;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_port_t port;
			bcm_ipfix_config_t * config;
		} ipfix_config_set;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			bcm_ipfix_mirror_config_t * config;
		} ipfix_mirror_config_get;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			bcm_ipfix_mirror_config_t * config;
		} ipfix_mirror_config_set;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			bcm_gport_t mirror_dest_id;
		} ipfix_mirror_port_dest_add;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			bcm_gport_t mirror_dest_id;
		} ipfix_mirror_port_dest_delete;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
		} ipfix_mirror_port_dest_delete_all;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			int mirror_dest_size;
			bcm_gport_t * mirror_dest_id;
			int * mirror_dest_count;
		} ipfix_mirror_port_dest_get;
		struct {
			int unit;
			bcm_ipfix_rate_t * rate_info;
		} ipfix_rate_create;
		struct {
			int unit;
			bcm_ipfix_rate_id_t rate_id;
		} ipfix_rate_destroy;
		struct {
			int unit;
		} ipfix_rate_destroy_all;
		struct {
			int unit;
			bcm_ipfix_rate_t * rate_info;
		} ipfix_rate_get;
		struct {
			int unit;
			bcm_ipfix_rate_id_t rate_id;
			bcm_gport_t mirror_dest_id;
		} ipfix_rate_mirror_add;
		struct {
			int unit;
			bcm_ipfix_rate_id_t rate_id;
			bcm_gport_t mirror_dest_id;
		} ipfix_rate_mirror_delete;
		struct {
			int unit;
			bcm_ipfix_rate_id_t rate_id;
		} ipfix_rate_mirror_delete_all;
		struct {
			int unit;
			bcm_ipfix_rate_id_t rate_id;
			int mirror_dest_size;
			bcm_gport_t * mirror_dest_id;
			int * mirror_dest_count;
		} ipfix_rate_mirror_get;
		struct {
			int unit;
			bcm_ipfix_rate_traverse_cb cb;
			void * userdata;
		} ipfix_rate_traverse;
		struct {
			int unit;
			bcm_ipfix_callback_t callback;
			void * userdata;
		} ipfix_register;
		struct {
			int unit;
			bcm_ipfix_callback_t callback;
			void * userdata;
		} ipfix_unregister;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			bcm_ipmc_addr_t * data;
		} ipmc_add;
		struct {
			int unit;
			uint32 flags;
			bcm_ipmc_traverse_cb age_cb;
			void * user_data;
		} ipmc_age;
		struct {
			int unit;
			int ipmc_idx;
			bcm_port_t port;
			bcm_pbmp_t pbmp;
		} ipmc_bitmap_del;
		struct {
			int unit;
			int ipmc_idx;
			bcm_port_t port;
			bcm_pbmp_t * pbmp;
		} ipmc_bitmap_get;
		struct {
			int unit;
			int * max_index;
		} ipmc_bitmap_max_get;
		struct {
			int unit;
			int ipmc_idx;
			bcm_port_t port;
			bcm_pbmp_t pbmp;
		} ipmc_bitmap_set;
		struct {
			int unit;
			bcm_ipmc_addr_t * config;
		} ipmc_config_add;
		struct {
			int unit;
			bcm_ipmc_addr_t * config;
		} ipmc_config_find;
		struct {
			int unit;
			bcm_ipmc_addr_t * config;
		} ipmc_config_remove;
		struct {
			int unit;
			uint32 flags;
			bcm_ipmc_config_traverse_cb cb;
			void * user_data;
		} ipmc_config_traverse;
		struct {
			int unit;
			bcm_port_t port;
			bcm_ipmc_counters_t * counters;
		} ipmc_counters_get;
		struct {
			int unit;
		} ipmc_detach;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * mac;
			int * untag;
			bcm_vlan_t * vid;
			int * ttl_threshold;
		} ipmc_egress_port_get;
		struct {
			int unit;
		} ipmc_egress_port_init;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * mac;
			int untag;
			bcm_vlan_t vid;
			int ttl_threshold;
		} ipmc_egress_port_set;
		struct {
			int unit;
			int enable;
		} ipmc_enable;
		struct {
			int unit;
			bcm_ipmc_addr_t * data;
		} ipmc_find;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			uint32 * value;
		} ipmc_flexctr_object_get;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			uint32 value;
		} ipmc_flexctr_object_set;
		struct {
			int unit;
		} ipmc_init;
		struct {
			int unit;
			int * range_id;
			bcm_ipmc_range_t * range;
		} ipmc_range_add;
		struct {
			int unit;
			int range_id;
		} ipmc_range_delete;
		struct {
			int unit;
		} ipmc_range_delete_all;
		struct {
			int unit;
			int range_id;
			bcm_ipmc_range_t * range;
		} ipmc_range_get;
		struct {
			int unit;
			int * size;
		} ipmc_range_size_get;
		struct {
			int unit;
			bcm_ipmc_addr_t * data;
		} ipmc_remove;
		struct {
			int unit;
		} ipmc_remove_all;
		struct {
			int unit;
			int rp_id;
			bcm_if_t intf_id;
		} ipmc_rp_add;
		struct {
			int unit;
			uint32 flags;
			int * rp_id;
		} ipmc_rp_create;
		struct {
			int unit;
			int rp_id;
			bcm_if_t intf_id;
		} ipmc_rp_delete;
		struct {
			int unit;
			int rp_id;
		} ipmc_rp_delete_all;
		struct {
			int unit;
			int rp_id;
		} ipmc_rp_destroy;
		struct {
			int unit;
			int rp_id;
			int intf_max;
			bcm_if_t * intf_array;
			int * intf_count;
		} ipmc_rp_get;
		struct {
			int unit;
			int rp_id;
			int intf_count;
			bcm_if_t * intf_array;
		} ipmc_rp_set;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			uint32 stat_counter_id;
		} ipmc_stat_attach;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			bcm_ipmc_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} ipmc_stat_counter_get;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			bcm_ipmc_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} ipmc_stat_counter_set;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			bcm_ipmc_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} ipmc_stat_counter_sync_get;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
		} ipmc_stat_detach;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			bcm_ipmc_stat_t stat;
			uint32 * stat_counter_id;
		} ipmc_stat_id_get;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			int nstat;
			bcm_ipmc_stat_t * stat_arr;
			uint64 * value_arr;
		} ipmc_stat_multi_get;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			int nstat;
			bcm_ipmc_stat_t * stat_arr;
			uint32 * value_arr;
		} ipmc_stat_multi_get32;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			int nstat;
			bcm_ipmc_stat_t * stat_arr;
			uint64 * value_arr;
		} ipmc_stat_multi_set;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			int nstat;
			bcm_ipmc_stat_t * stat_arr;
			uint32 * value_arr;
		} ipmc_stat_multi_set32;
		struct {
			int unit;
			uint32 flags;
			bcm_ipmc_traverse_cb cb;
			void * user_data;
		} ipmc_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_ipsec_config_t * config;
		} ipsec_config_set;
		struct {
			int unit;
			uint32 flags;
			uint32 * sa_id;
			bcm_ipsec_sa_info_t * sa;
		} ipsec_sa_create;
		struct {
			int unit;
			uint32 flags;
			uint32 sa_id;
		} ipsec_sa_delete;
		struct {
			int unit;
			uint32 flags;
			uint32 sa_id;
			bcm_ipsec_sa_keys_t * sa_keys;
		} ipsec_sa_key_update;
		struct {
			int unit;
			uint32 sa_id;
			uint32 * tunnel_id;
		} ipsec_sa_to_tunnel_map_get;
		struct {
			int unit;
			uint32 tunnel_id;
			uint32 sa_id;
		} ipsec_sa_to_tunnel_map_set;
		struct {
			int unit;
			uint32 flags;
			uint32 * tunnel_id;
			bcm_ipsec_tunnel_info_t * tunnel_info;
		} ipsec_tunnel_create;
		struct {
			int unit;
			uint32 flags;
			uint32 tunnel_id;
		} ipsec_tunnel_delete;
		struct {
			int unit;
		} knet_cleanup;
		struct {
			int unit;
			bcm_knet_filter_t * filter;
		} knet_filter_create;
		struct {
			int unit;
			int filter_id;
		} knet_filter_destroy;
		struct {
			int unit;
			int filter_id;
			bcm_knet_filter_t * filter;
		} knet_filter_get;
		struct {
			int unit;
			bcm_knet_filter_traverse_cb trav_fn;
			void * user_data;
		} knet_filter_traverse;
		struct {
			int unit;
		} knet_init;
		struct {
			int unit;
			bcm_knet_netif_t * netif;
		} knet_netif_create;
		struct {
			int unit;
			int netif_id;
		} knet_netif_destroy;
		struct {
			int unit;
			int netif_id;
			bcm_knet_netif_t * netif;
		} knet_netif_get;
		struct {
			int unit;
			bcm_knet_netif_traverse_cb trav_fn;
			void * user_data;
		} knet_netif_traverse;
		struct {
			int unit;
		} knetsync_deinit;
		struct {
			int unit;
		} knetsync_init;
		struct {
			int unit;
			bcm_l2_addr_t * l2addr;
		} l2_addr_add;
		struct {
			int unit;
			bcm_l2_addr_t * l2addr;
		} l2_addr_by_struct_delete;
		struct {
			int unit;
			bcm_l2_addr_t * l2addr;
		} l2_addr_by_struct_get;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vid;
		} l2_addr_delete;
		struct {
			int unit;
			uint8 * mac;
			uint32 flags;
		} l2_addr_delete_by_mac;
		struct {
			int unit;
			uint8 * mac;
			bcm_module_t mod;
			bcm_port_t port;
			uint32 flags;
		} l2_addr_delete_by_mac_port;
		struct {
			int unit;
			bcm_module_t mod;
			bcm_port_t port;
			uint32 flags;
		} l2_addr_delete_by_port;
		struct {
			int unit;
			bcm_trunk_t tid;
			uint32 flags;
		} l2_addr_delete_by_trunk;
		struct {
			int unit;
			bcm_vlan_t vid;
			uint32 flags;
		} l2_addr_delete_by_vlan;
		struct {
			int unit;
			uint32 flags;
			int num_pairs;
			bcm_vlan_t * vlan;
			bcm_gport_t * gport;
		} l2_addr_delete_by_vlan_gport_multi;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_module_t mod;
			bcm_port_t port;
			uint32 flags;
		} l2_addr_delete_by_vlan_port;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_trunk_t tid;
			uint32 flags;
		} l2_addr_delete_by_vlan_trunk;
		struct {
			int unit;
		} l2_addr_freeze;
		struct {
			int unit;
			uint8 * mac_addr;
			bcm_vlan_t vid;
			bcm_l2_addr_t * l2addr;
		} l2_addr_get;
		struct {
			int unit;
			bcm_l2_addr_distribute_t * distribution;
		} l2_addr_msg_distribute_get;
		struct {
			int unit;
			bcm_l2_addr_distribute_t * distribution;
		} l2_addr_msg_distribute_set;
		struct {
			int unit;
			bcm_l2_addr_t * l2addr;
			int count;
		} l2_addr_multi_add;
		struct {
			int unit;
			bcm_l2_addr_t * l2addr;
			int count;
		} l2_addr_multi_delete;
		struct {
			int unit;
			bcm_l2_addr_callback_t callback;
			void * userdata;
		} l2_addr_register;
		struct {
			int unit;
		} l2_addr_thaw;
		struct {
			int unit;
			bcm_l2_addr_callback_t callback;
			void * userdata;
		} l2_addr_unregister;
		struct {
			int unit;
			int * age_seconds;
		} l2_age_timer_get;
		struct {
			int unit;
			int * meta_cycle_time;
		} l2_age_timer_meta_cycle_get;
		struct {
			int unit;
			int meta_cycle_time;
		} l2_age_timer_meta_cycle_set;
		struct {
			int unit;
			int age_seconds;
		} l2_age_timer_set;
		struct {
			int unit;
			bcm_l2_auth_addr_t * addr;
		} l2_auth_add;
		struct {
			int unit;
			bcm_l2_auth_addr_t * addr;
		} l2_auth_delete;
		struct {
			int unit;
		} l2_auth_delete_all;
		struct {
			int unit;
			bcm_l2_auth_addr_t * addr;
		} l2_auth_get;
		struct {
			int unit;
			bcm_l2_auth_traverse_cb trav_fn;
			void * user_data;
		} l2_auth_traverse;
		struct {
			int unit;
			int index;
		} l2_cache_delete;
		struct {
			int unit;
		} l2_cache_delete_all;
		struct {
			int unit;
			int index;
			bcm_l2_cache_addr_t * addr;
		} l2_cache_get;
		struct {
			int unit;
		} l2_cache_init;
		struct {
			int unit;
			int trap_type;
			uint32 profile_idx;
			uint32 flags;
			bcm_l2cp_profile_info_t * l2cp_profile_info;
		} l2_cache_profile_get;
		struct {
			int unit;
			int trap_type;
			uint32 profile_idx;
			uint32 flags;
			bcm_l2cp_profile_info_t * l2cp_profile_info;
		} l2_cache_profile_set;
		struct {
			int unit;
			int index;
			bcm_l2_cache_addr_t * addr;
			int * index_used;
		} l2_cache_set;
		struct {
			int unit;
			int * size;
		} l2_cache_size_get;
		struct {
			int unit;
			uint32 vsi;
			uint32 * profile_idx;
		} l2_cache_vpn_to_profile_map_get;
		struct {
			int unit;
			uint32 vsi;
			uint32 profile_idx;
		} l2_cache_vpn_to_profile_map_set;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			bcm_l2_change_fields_t * l2_fields_info;
		} l2_change_fields_add;
		struct {
			int unit;
			bcm_l2_change_fields_t * l2_fields_info;
		} l2_change_fields_delete;
		struct {
			int unit;
			bcm_l2_change_fields_t * l2_fields_info;
		} l2_change_fields_get;
		struct {
			int unit;
			bcm_l2_change_fields_traverse_cb cb;
			void * user_data;
		} l2_change_fields_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
		} l2_clear;
		struct {
			int unit;
			bcm_l2_addr_t * addr;
			bcm_l2_addr_t * cf_array;
			int cf_max;
			int * cf_count;
		} l2_conflict_get;
		struct {
			int unit;
		} l2_detach;
		struct {
			int unit;
			bcm_l2_egress_t * egr;
		} l2_egress_create;
		struct {
			int unit;
			bcm_if_t encap_id;
		} l2_egress_destroy;
		struct {
			int unit;
			bcm_l2_egress_t * egr;
			bcm_if_t * encap_id;
		} l2_egress_find;
		struct {
			int unit;
			bcm_if_t encap_id;
			bcm_l2_egress_t * egr;
		} l2_egress_get;
		struct {
			int unit;
			bcm_l2_egress_traverse_cb trav_fn;
			void * user_data;
		} l2_egress_traverse;
		struct {
			int unit;
			bcm_l2_gport_control_info_t * control_info;
		} l2_gport_control_info_get;
		struct {
			int unit;
			bcm_l2_gport_control_info_t * control_info;
		} l2_gport_control_info_set;
		struct {
			int unit;
			int gport_id;
			bcm_l2_gport_forward_info_t * forward_info;
		} l2_gport_forward_info_get;
		struct {
			int unit;
		} l2_init;
		struct {
			int unit;
			char * pfx;
			bcm_l2_addr_t * entry;
			char * sfx;
		} l2_key_dump;
		struct {
			int unit;
			int lclass;
			int * lclass_prio;
			uint32 * flags;
		} l2_learn_class_get;
		struct {
			int unit;
			int lclass;
			int lclass_prio;
			uint32 flags;
		} l2_learn_class_set;
		struct {
			int unit;
		} l2_learn_limit_disable;
		struct {
			int unit;
		} l2_learn_limit_enable;
		struct {
			int unit;
			bcm_l2_learn_limit_t * limit;
		} l2_learn_limit_get;
		struct {
			int unit;
			bcm_l2_learn_limit_t * limit;
		} l2_learn_limit_set;
		struct {
			int unit;
			bcm_l2_learn_msgs_config_t * learn_msg_config;
		} l2_learn_msgs_config_get;
		struct {
			int unit;
			bcm_l2_learn_msgs_config_t * learn_msg_config;
		} l2_learn_msgs_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			int * lclass;
		} l2_learn_port_class_get;
		struct {
			int unit;
			bcm_gport_t port;
			int lclass;
		} l2_learn_port_class_set;
		struct {
			int unit;
			bcm_l2_learn_stat_t * learn_stat;
		} l2_learn_stat_get;
		struct {
			int unit;
			bcm_l2_learn_stat_t * learn_stat;
		} l2_learn_stat_set;
		struct {
			int unit;
			bcm_l2_mac_port_t * mac_port;
		} l2_mac_port_create;
		struct {
			int unit;
			bcm_gport_t mac_port_id;
		} l2_mac_port_destroy;
		struct {
			int unit;
		} l2_mac_port_destroy_all;
		struct {
			int unit;
			bcm_l2_mac_port_t * mac_port;
		} l2_mac_port_get;
		struct {
			int unit;
			bcm_l2_mac_port_traverse_cb cb;
			void * user_data;
		} l2_mac_port_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_l2_addr_t * match_addr;
			bcm_l2_addr_t * mask_addr;
			bcm_l2_traverse_cb trav_fn;
			void * user_data;
		} l2_match_masked_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_l2_addr_t * match_addr;
			bcm_l2_traverse_cb trav_fn;
			void * user_data;
		} l2_matched_traverse;
		struct {
			int unit;
			int modid;
			int port;
		} l2_port_native;
		struct {
			int unit;
			uint32 flags;
			bcm_l2_addr_t * match_addr;
			bcm_module_t new_module;
			bcm_port_t new_port;
			bcm_trunk_t new_trunk;
		} l2_replace;
		struct {
			int unit;
			uint32 flags;
			bcm_l2_addr_t * match_addr;
			bcm_l2_addr_t * mask_addr;
			bcm_l2_addr_t * replace_addr;
			bcm_l2_addr_t * replace_mask_addr;
		} l2_replace_match;
		struct {
			int unit;
			bcm_l2_ring_t * l2_ring;
		} l2_ring_replace;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			int enable;
		} l2_stat_enable_set;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			bcm_l2_stat_t stat;
			uint64 * val;
		} l2_stat_get;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			bcm_l2_stat_t stat;
			uint32 * val;
		} l2_stat_get32;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			bcm_l2_stat_t stat;
			uint64 val;
		} l2_stat_set;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			bcm_l2_stat_t stat;
			uint32 val;
		} l2_stat_set32;
		struct {
			int unit;
			int * station_id;
			bcm_l2_station_t * station;
		} l2_station_add;
		struct {
			int unit;
			int station_id;
		} l2_station_delete;
		struct {
			int unit;
		} l2_station_delete_all;
		struct {
			int unit;
			int station_id;
			bcm_l2_station_t * station;
		} l2_station_get;
		struct {
			int unit;
			int * size;
		} l2_station_size_get;
		struct {
			int unit;
			bcm_l2_station_traverse_cb trav_fn;
			void * user_data;
		} l2_station_traverse;
		struct {
			int unit;
			bcm_l2_traverse_cb trav_fn;
			void * user_data;
		} l2_traverse;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vlan;
		} l2_tunnel_add;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vlan;
		} l2_tunnel_delete;
		struct {
			int unit;
		} l2_tunnel_delete_all;
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} l2gre_cleanup;
		struct {
			int unit;
		} l2gre_init;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_l2gre_port_t * l2gre_port;
		} l2gre_port_add;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_gport_t l2gre_port_id;
		} l2gre_port_delete;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
		} l2gre_port_delete_all;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_l2gre_port_t * l2gre_port;
		} l2gre_port_get;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			int port_max;
			bcm_l2gre_port_t * port_array;
			int * port_count;
		} l2gre_port_get_all;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			uint32 stat_counter_id;
		} l2gre_stat_attach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_l2gre_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l2gre_stat_counter_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_l2gre_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l2gre_stat_counter_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_l2gre_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l2gre_stat_counter_sync_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
		} l2gre_stat_detach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_l2gre_stat_t stat;
			uint32 * stat_counter_id;
		} l2gre_stat_id_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_l2gre_stat_t * stat_arr;
			uint64 * value_arr;
		} l2gre_stat_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_l2gre_stat_t * stat_arr;
			uint32 * value_arr;
		} l2gre_stat_multi_get32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_l2gre_stat_t * stat_arr;
			uint64 * value_arr;
		} l2gre_stat_multi_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_l2gre_stat_t * stat_arr;
			uint32 * value_arr;
		} l2gre_stat_multi_set32;
		struct {
			int unit;
			bcm_tunnel_initiator_t * info;
		} l2gre_tunnel_initiator_create;
		struct {
			int unit;
			bcm_gport_t l2gre_tunnel_id;
		} l2gre_tunnel_initiator_destroy;
		struct {
			int unit;
		} l2gre_tunnel_initiator_destroy_all;
		struct {
			int unit;
			bcm_tunnel_initiator_t * info;
		} l2gre_tunnel_initiator_get;
		struct {
			int unit;
			bcm_tunnel_initiator_traverse_cb cb;
			void * user_data;
		} l2gre_tunnel_initiator_traverse;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} l2gre_tunnel_terminator_create;
		struct {
			int unit;
			bcm_gport_t l2gre_tunnel_id;
		} l2gre_tunnel_terminator_destroy;
		struct {
			int unit;
		} l2gre_tunnel_terminator_destroy_all;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} l2gre_tunnel_terminator_get;
		struct {
			int unit;
			bcm_tunnel_terminator_traverse_cb cb;
			void * user_data;
		} l2gre_tunnel_terminator_traverse;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} l2gre_tunnel_terminator_update;
		struct {
			int unit;
			bcm_l2gre_vpn_config_t * info;
		} l2gre_vpn_create;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
		} l2gre_vpn_destroy;
		struct {
			int unit;
		} l2gre_vpn_destroy_all;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_l2gre_vpn_config_t * info;
		} l2gre_vpn_get;
		struct {
			int unit;
			bcm_l2gre_vpn_traverse_cb cb;
			void * user_data;
		} l2gre_vpn_traverse;
		struct {
			int unit;
			uint32 options;
			bcm_l3_aacl_t * aacl;
		} l3_aacl_add;
		struct {
			int unit;
			bcm_l3_aacl_t * aacl;
		} l3_aacl_delete;
		struct {
			int unit;
			bcm_l3_aacl_t * aacl;
		} l3_aacl_delete_all;
		struct {
			int unit;
			bcm_l3_aacl_t * aacl;
		} l3_aacl_find;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_aacl_traverse_cb trav_fn;
			void * user_data;
		} l3_aacl_matched_traverse;
		struct {
			int unit;
			bcm_l3_aacl_traverse_cb trav_fn;
			void * user_data;
		} l3_aacl_traverse;
		struct {
			int unit;
			bcm_l3_route_group_t grp;
			bcm_l3_alpm_resource_t * resource;
		} l3_alpm_resource_get;
		struct {
			int unit;
			int chk_type;
		} l3_alpm_sanity_check;
		struct {
			int unit;
			bcm_l3_alpm_trace_cb_f write_cb;
			void * user_data;
		} l3_alpm_trace_cb_register;
		struct {
			int unit;
			bcm_l3_alpm_trace_cb_f write_cb;
		} l3_alpm_trace_cb_unregister;
		struct {
			int unit;
		} l3_cleanup;
		struct {
			int unit;
			bcm_if_t l3_ecmp_id;
			bcm_switch_agm_id_t agm_id;
		} l3_ecmp_agm_attach;
		struct {
			int unit;
			bcm_if_t l3_ecmp_id;
			bcm_switch_agm_id_t * agm_id;
		} l3_ecmp_agm_attach_get;
		struct {
			int unit;
			bcm_if_t l3_ecmp_id;
			bcm_switch_agm_id_t agm_id;
		} l3_ecmp_agm_detach;
		struct {
			int unit;
			uint32 options;
			bcm_l3_egress_ecmp_t * ecmp_info;
			int ecmp_member_count;
			bcm_l3_ecmp_member_t * ecmp_member_array;
		} l3_ecmp_create;
		struct {
			int unit;
			bcm_if_t ecmp_group_id;
		} l3_ecmp_destroy;
		struct {
			int unit;
			bcm_if_t intf;
			bcm_l3_ecmp_dlb_mon_cfg_t * dlb_mon_cfg;
		} l3_ecmp_dlb_mon_config_get;
		struct {
			int unit;
			bcm_if_t ecmp_intf;
			bcm_l3_ecmp_dlb_mon_cfg_t * dlb_mon_cfg;
		} l3_ecmp_dlb_mon_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_l3_ecmp_dlb_port_quality_attr_t * quality_attr;
		} l3_ecmp_dlb_port_quality_attr_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_l3_ecmp_dlb_port_quality_attr_t * quality_attr;
		} l3_ecmp_dlb_port_quality_attr_set;
		struct {
			int unit;
			bcm_if_t ecmp_intf;
			bcm_l3_ecmp_dlb_stat_t type;
			uint64 * value;
		} l3_ecmp_dlb_stat_get;
		struct {
			int unit;
			bcm_if_t ecmp_intf;
			bcm_l3_ecmp_dlb_stat_t type;
			uint64 value;
		} l3_ecmp_dlb_stat_set;
		struct {
			int unit;
			bcm_if_t ecmp_intf;
			bcm_l3_ecmp_dlb_stat_t type;
			uint64 * value;
		} l3_ecmp_dlb_stat_sync_get;
		struct {
			int unit;
			int ecmp_member_count;
			bcm_l3_ecmp_member_t * ecmp_member_array;
			bcm_l3_egress_ecmp_t * ecmp_info;
		} l3_ecmp_find;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 * value;
		} l3_ecmp_flexctr_object_get;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 value;
		} l3_ecmp_flexctr_object_set;
		struct {
			int unit;
			bcm_l3_egress_ecmp_t * ecmp_info;
			int ecmp_member_size;
			bcm_l3_ecmp_member_t * ecmp_member_array;
			int * ecmp_member_count;
		} l3_ecmp_get;
		struct {
			int unit;
			bcm_l3_ecmp_group_info_t * l3_ecmp_group_info;
		} l3_ecmp_group_info_get;
		struct {
			int unit;
			bcm_if_t ecmp_group_id;
			bcm_l3_ecmp_member_t * ecmp_member;
		} l3_ecmp_member_add;
		struct {
			int unit;
			bcm_if_t ecmp_group_id;
			bcm_l3_ecmp_member_t * ecmp_member;
		} l3_ecmp_member_delete;
		struct {
			int unit;
			bcm_if_t ecmp_group_id;
		} l3_ecmp_member_delete_all;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 stat_counter_id;
		} l3_ecmp_stat_attach;
		struct {
			int unit;
			bcm_if_t intf_id;
		} l3_ecmp_stat_detach;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 * stat_counter_id;
		} l3_ecmp_stat_id_get;
		struct {
			int unit;
			bcm_l3_ecmp_traverse_cb trav_fn;
			void * user_data;
		} l3_ecmp_traverse;
		struct {
			int unit;
			bcm_l3_ecmp_tunnel_priority_map_info_t * map_info;
		} l3_ecmp_tunnel_priority_map_create;
		struct {
			int unit;
			bcm_l3_ecmp_tunnel_priority_map_info_t * map_info;
		} l3_ecmp_tunnel_priority_map_destroy;
		struct {
			int unit;
			bcm_l3_ecmp_tunnel_priority_map_info_t * map_info;
		} l3_ecmp_tunnel_priority_map_get;
		struct {
			int unit;
			bcm_l3_ecmp_tunnel_priority_map_info_t * map_info;
		} l3_ecmp_tunnel_priority_map_set;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_egress_t * egr;
			uint32 nof_members;
			bcm_if_t * if_id;
		} l3_egress_allocation_get;
		struct {
			int unit;
			bcm_l3_egress_traverse_cb trav_fn;
			void * user_data;
		} l3_egress_arp_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_egress_t * egr;
			bcm_if_t * if_id;
		} l3_egress_create;
		struct {
			int unit;
			bcm_if_t intf;
		} l3_egress_destroy;
		struct {
			int unit;
			bcm_l3_egress_ecmp_t * ecmp;
			bcm_if_t intf;
		} l3_egress_ecmp_add;
		struct {
			int unit;
			bcm_l3_egress_ecmp_t * ecmp;
			int intf_count;
			bcm_if_t * intf_array;
		} l3_egress_ecmp_create;
		struct {
			int unit;
			bcm_l3_egress_ecmp_t * ecmp;
			bcm_if_t intf;
		} l3_egress_ecmp_delete;
		struct {
			int unit;
			bcm_l3_egress_ecmp_t * ecmp;
		} l3_egress_ecmp_destroy;
		struct {
			int unit;
			uint32 * flags;
			int ethertype_max;
			int * ethertype_array;
			int * ethertype_count;
		} l3_egress_ecmp_ethertype_get;
		struct {
			int unit;
			uint32 flags;
			int ethertype_count;
			int * ethertype_array;
		} l3_egress_ecmp_ethertype_set;
		struct {
			int unit;
			int intf_count;
			bcm_if_t * intf_array;
			bcm_l3_egress_ecmp_t * ecmp;
		} l3_egress_ecmp_find;
		struct {
			int unit;
			bcm_l3_egress_ecmp_t * ecmp;
			int intf_size;
			bcm_if_t * intf_array;
			int * intf_count;
		} l3_egress_ecmp_get;
		struct {
			int unit;
			bcm_if_t intf;
			int * status;
		} l3_egress_ecmp_member_status_get;
		struct {
			int unit;
			bcm_if_t intf;
			int status;
		} l3_egress_ecmp_member_status_set;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_egress_ecmp_resilient_entry_t * entry;
		} l3_egress_ecmp_resilient_add;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_egress_ecmp_resilient_entry_t * entry;
		} l3_egress_ecmp_resilient_delete;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_egress_ecmp_resilient_entry_t * match_entry;
			int * num_entries;
			bcm_l3_egress_ecmp_resilient_entry_t * replace_entry;
		} l3_egress_ecmp_resilient_replace;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_egress_ecmp_resilient_entry_t * match_entry;
			bcm_l3_egress_ecmp_resilient_traverse_cb trav_fn;
			void * user_data;
		} l3_egress_ecmp_resilient_traverse;
		struct {
			int unit;
			bcm_l3_egress_ecmp_traverse_cb trav_fn;
			void * user_data;
		} l3_egress_ecmp_traverse;
		struct {
			int unit;
			bcm_l3_egress_ecmp_t * ecmp;
			int intf_count;
			bcm_if_t * intf_array;
		} l3_egress_ecmp_tunnel_priority_set;
		struct {
			int unit;
			bcm_l3_egress_t * egr;
			bcm_if_t * intf;
		} l3_egress_find;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 * value;
		} l3_egress_flexctr_object_get;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 value;
		} l3_egress_flexctr_object_set;
		struct {
			int unit;
			bcm_if_t intf;
			bcm_l3_egress_t * egr;
		} l3_egress_get;
		struct {
			int unit;
			bcm_l3_egress_multi_info_t egress_multi_info;
			bcm_if_t * base_egress_id;
		} l3_egress_multi_alloc;
		struct {
			int unit;
			bcm_if_t base_egress_id;
		} l3_egress_multi_free;
		struct {
			int unit;
			bcm_if_t mpintf;
			bcm_if_t intf;
		} l3_egress_multipath_add;
		struct {
			int unit;
			uint32 flags;
			int intf_count;
			bcm_if_t * intf_array;
			bcm_if_t * mpintf;
		} l3_egress_multipath_create;
		struct {
			int unit;
			bcm_if_t mpintf;
			bcm_if_t intf;
		} l3_egress_multipath_delete;
		struct {
			int unit;
			bcm_if_t mpintf;
		} l3_egress_multipath_destroy;
		struct {
			int unit;
			int intf_count;
			bcm_if_t * intf_array;
			bcm_if_t * mpintf;
		} l3_egress_multipath_find;
		struct {
			int unit;
			bcm_if_t mpintf;
			int intf_size;
			bcm_if_t * intf_array;
			int * intf_count;
		} l3_egress_multipath_get;
		struct {
			int unit;
			uint32 flags;
			int max_paths;
			int intf_count;
			bcm_if_t * intf_array;
			bcm_if_t * mpintf;
		} l3_egress_multipath_max_create;
		struct {
			int unit;
			bcm_l3_egress_multipath_traverse_cb trav_fn;
			void * user_data;
		} l3_egress_multipath_traverse;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 stat_counter_id;
		} l3_egress_stat_attach;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_egress_stat_counter_get;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_egress_stat_counter_set;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_egress_stat_counter_sync_get;
		struct {
			int unit;
			bcm_if_t intf_id;
		} l3_egress_stat_detach;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 * stat_counter_id;
		} l3_egress_stat_id_get;
		struct {
			int unit;
			bcm_l3_egress_traverse_cb trav_fn;
			void * user_data;
		} l3_egress_traverse;
		struct {
			int unit;
			int enable;
		} l3_enable_set;
		struct {
			int unit;
			bcm_l3_host_t * info;
		} l3_host_add;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_host_traverse_cb age_cb;
			void * user_data;
		} l3_host_age;
		struct {
			int unit;
			bcm_l3_key_t * ipkey;
			bcm_l3_key_t * cf_array;
			int cf_max;
			int * cf_count;
		} l3_host_conflict_get;
		struct {
			int unit;
			bcm_l3_host_t * ip_addr;
		} l3_host_delete;
		struct {
			int unit;
			bcm_l3_host_t * info;
		} l3_host_delete_all;
		struct {
			int unit;
			bcm_l3_host_t * info;
		} l3_host_delete_by_interface;
		struct {
			int unit;
			bcm_l3_route_t * ip_addr;
		} l3_host_delete_by_network;
		struct {
			int unit;
			bcm_l3_host_t * info;
		} l3_host_find;
		struct {
			int unit;
			bcm_ip_t info;
		} l3_host_invalidate_entry;
		struct {
			int unit;
			bcm_l3_host_t * info;
			uint32 stat_counter_id;
		} l3_host_stat_attach;
		struct {
			int unit;
			bcm_l3_host_t * info;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_host_stat_counter_get;
		struct {
			int unit;
			bcm_l3_host_t * info;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_host_stat_counter_set;
		struct {
			int unit;
			bcm_l3_host_t * info;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_host_stat_counter_sync_get;
		struct {
			int unit;
			bcm_l3_host_t * info;
		} l3_host_stat_detach;
		struct {
			int unit;
			bcm_l3_host_t * info;
			bcm_l3_stat_t stat;
			uint32 * stat_counter_id;
		} l3_host_stat_id_get;
		struct {
			int unit;
			uint32 flags;
			uint32 start;
			uint32 end;
			bcm_l3_host_traverse_cb cb;
			void * user_data;
		} l3_host_traverse;
		struct {
			int unit;
			bcm_ip_t info;
		} l3_host_validate_entry;
		struct {
			int unit;
			bcm_l3_info_t * l3info;
		} l3_info;
		struct {
			int unit;
			bcm_l3_ingress_t * ing_intf;
			bcm_if_t * intf_id;
		} l3_ingress_create;
		struct {
			int unit;
			bcm_if_t intf_id;
		} l3_ingress_destroy;
		struct {
			int unit;
			bcm_l3_ingress_t * ing_intf;
			bcm_if_t * intf_id;
		} l3_ingress_find;
		struct {
			int unit;
			bcm_if_t intf;
			bcm_l3_ingress_t * ing_intf;
		} l3_ingress_get;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 stat_counter_id;
		} l3_ingress_stat_attach;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_ingress_stat_counter_get;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_ingress_stat_counter_set;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_ingress_stat_counter_sync_get;
		struct {
			int unit;
			bcm_if_t intf_id;
		} l3_ingress_stat_detach;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 * stat_counter_id;
		} l3_ingress_stat_id_get;
		struct {
			int unit;
			bcm_l3_ingress_traverse_cb trav_fn;
			void * user_data;
		} l3_ingress_traverse;
		struct {
			int unit;
		} l3_init;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_create;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_delete;
		struct {
			int unit;
		} l3_intf_delete_all;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_find;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_find_vlan;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_get;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 stat_counter_id;
		} l3_intf_stat_attach;
		struct {
			int unit;
			bcm_if_t intf_id;
		} l3_intf_stat_detach;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 * stat_counter_id;
		} l3_intf_stat_id_get;
		struct {
			int unit;
			bcm_if_t l3_intf_id;
			uint32 * flags;
			bcm_vpn_t * vpn;
		} l3_intf_vpn_get;
		struct {
			int unit;
			bcm_if_t l3_intf_id;
			uint32 flags;
			bcm_vpn_t vpn;
		} l3_intf_vpn_set;
		struct {
			int unit;
			int ip4_options_profile_id;
			int ip4_option;
			bcm_l3_ip4_options_action_t * action;
		} l3_ip4_options_action_get;
		struct {
			int unit;
			int ip4_options_profile_id;
			int ip4_option;
			bcm_l3_ip4_options_action_t action;
		} l3_ip4_options_action_set;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_ip4_options_action_t default_action;
			int * ip4_options_profile_id;
		} l3_ip4_options_profile_create;
		struct {
			int unit;
			int ip4_options_profile_id;
		} l3_ip4_options_profile_destroy;
		struct {
			int unit;
			uint8 * ip6_addr;
		} l3_ip6_prefix_map_add;
		struct {
			int unit;
			uint8 * ip6_addr;
		} l3_ip6_prefix_map_delete;
		struct {
			int unit;
		} l3_ip6_prefix_map_delete_all;
		struct {
			int unit;
			int map_size;
			bcm_ip6_t * ip6_array;
			int * ip6_count;
		} l3_ip6_prefix_map_get;
		struct {
			int unit;
			bcm_l3_large_nat_egress_t * nat_info;
		} l3_large_nat_egress_add;
		struct {
			int unit;
			bcm_l3_large_nat_egress_t * nat_info;
		} l3_large_nat_egress_delete;
		struct {
			int unit;
			bcm_l3_large_nat_egress_t * nat_info;
		} l3_large_nat_egress_get;
		struct {
			int unit;
			bcm_l3_large_nat_egress_traverse_cb cb;
			void * user_data;
		} l3_large_nat_egress_traverse;
		struct {
			int unit;
			bcm_l3_nat_egress_t * nat_info;
		} l3_nat_egress_add;
		struct {
			int unit;
			bcm_l3_nat_id_t nat_id;
		} l3_nat_egress_delete;
		struct {
			int unit;
			bcm_l3_nat_egress_t * nat_info;
		} l3_nat_egress_destroy;
		struct {
			int unit;
			bcm_l3_nat_egress_t * nat_info;
		} l3_nat_egress_get;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			uint32 stat_counter_id;
		} l3_nat_egress_stat_attach;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			bcm_l3_nat_egress_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_nat_egress_stat_counter_get;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			bcm_l3_nat_egress_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_nat_egress_stat_counter_set;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			bcm_l3_nat_egress_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_nat_egress_stat_counter_sync_get;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
		} l3_nat_egress_stat_detach;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			bcm_l3_nat_egress_stat_t stat;
			uint32 * stat_counter_id;
		} l3_nat_egress_stat_id_get;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			int nstat;
			bcm_l3_nat_egress_stat_t * stat_arr;
			uint64 * value_arr;
		} l3_nat_egress_stat_multi_get;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			int nstat;
			bcm_l3_nat_egress_stat_t * stat_arr;
			uint32 * value_arr;
		} l3_nat_egress_stat_multi_get32;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			int nstat;
			bcm_l3_nat_egress_stat_t * stat_arr;
			uint64 * value_arr;
		} l3_nat_egress_stat_multi_set;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			int nstat;
			bcm_l3_nat_egress_stat_t * stat_arr;
			uint32 * value_arr;
		} l3_nat_egress_stat_multi_set32;
		struct {
			int unit;
			uint32 flags;
			uint32 start;
			uint32 end;
			bcm_l3_nat_egress_traverse_cb cb;
			void * user_data;
		} l3_nat_egress_traverse;
		struct {
			int unit;
			bcm_l3_nat_ingress_t * nat_info;
		} l3_nat_ingress_add;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_nat_ingress_traverse_cb age_cb;
			void * user_data;
		} l3_nat_ingress_age;
		struct {
			int unit;
			bcm_l3_nat_ingress_t * nat_info;
		} l3_nat_ingress_delete;
		struct {
			int unit;
			bcm_l3_nat_ingress_t * nat_info;
		} l3_nat_ingress_delete_all;
		struct {
			int unit;
			bcm_l3_nat_ingress_t * nat_info;
		} l3_nat_ingress_find;
		struct {
			int unit;
			uint32 flags;
			uint32 start;
			uint32 end;
			bcm_l3_nat_ingress_traverse_cb cb;
			void * user_data;
		} l3_nat_ingress_traverse;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_add;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_route_traverse_cb age_out;
			void * user_data;
		} l3_route_age;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_delete;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_delete_all;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_delete_by_interface;
		struct {
			int unit;
			bcm_l3_host_t * host;
			bcm_l3_route_t * route;
		} l3_route_find;
		struct {
			int unit;
			bcm_l3_route_t * info;
			uint32 * value;
		} l3_route_flexctr_object_get;
		struct {
			int unit;
			bcm_l3_route_t * info;
			uint32 value;
		} l3_route_flexctr_object_set;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_get;
		struct {
			int unit;
			int * max;
		} l3_route_max_ecmp_get;
		struct {
			int unit;
			int max;
		} l3_route_max_ecmp_set;
		struct {
			int unit;
			bcm_l3_route_t * the_route;
			bcm_l3_route_t * path_array;
			int max_path;
			int * path_count;
		} l3_route_multipath_get;
		struct {
			int unit;
			bcm_l3_route_t * info;
			uint32 stat_counter_id;
		} l3_route_stat_attach;
		struct {
			int unit;
			bcm_l3_route_t * info;
			bcm_l3_route_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_route_stat_counter_get;
		struct {
			int unit;
			bcm_l3_route_t * info;
			bcm_l3_route_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_route_stat_counter_set;
		struct {
			int unit;
			bcm_l3_route_t * info;
			bcm_l3_route_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_route_stat_counter_sync_get;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_stat_detach;
		struct {
			int unit;
			bcm_l3_route_t * route;
			int enable;
		} l3_route_stat_enable_set;
		struct {
			int unit;
			bcm_l3_route_t * route;
			bcm_l3_stat_t stat;
			uint64 * val;
		} l3_route_stat_get;
		struct {
			int unit;
			bcm_l3_route_t * route;
			bcm_l3_stat_t stat;
			uint32 * val;
		} l3_route_stat_get32;
		struct {
			int unit;
			bcm_l3_route_t * info;
			bcm_l3_route_stat_t stat;
			uint32 * stat_counter_id;
		} l3_route_stat_id_get;
		struct {
			int unit;
			bcm_l3_route_t * info;
			int nstat;
			bcm_l3_route_stat_t * stat_arr;
			uint64 * value_arr;
		} l3_route_stat_multi_get;
		struct {
			int unit;
			bcm_l3_route_t * info;
			int nstat;
			bcm_l3_route_stat_t * stat_arr;
			uint32 * value_arr;
		} l3_route_stat_multi_get32;
		struct {
			int unit;
			bcm_l3_route_t * info;
			int nstat;
			bcm_l3_route_stat_t * stat_arr;
			uint64 * value_arr;
		} l3_route_stat_multi_set;
		struct {
			int unit;
			bcm_l3_route_t * info;
			int nstat;
			bcm_l3_route_stat_t * stat_arr;
			uint32 * value_arr;
		} l3_route_stat_multi_set32;
		struct {
			int unit;
			bcm_l3_route_t * route;
			bcm_l3_stat_t stat;
			uint64 val;
		} l3_route_stat_set;
		struct {
			int unit;
			bcm_l3_route_t * route;
			bcm_l3_stat_t stat;
			uint32 val;
		} l3_route_stat_set32;
		struct {
			int unit;
			uint32 flags;
			uint32 start;
			uint32 end;
			bcm_l3_route_traverse_cb trav_fn;
			void * user_data;
		} l3_route_traverse;
		struct {
			int unit;
			bcm_l3_source_bind_t * info;
		} l3_source_bind_add;
		struct {
			int unit;
			bcm_l3_source_bind_t * info;
		} l3_source_bind_delete;
		struct {
			int unit;
		} l3_source_bind_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} l3_source_bind_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} l3_source_bind_enable_set;
		struct {
			int unit;
			bcm_l3_source_bind_t * info;
		} l3_source_bind_get;
		struct {
			int unit;
			bcm_l3_source_bind_traverse_cb cb;
			void * user_data;
		} l3_source_bind_traverse;
		struct {
			int unit;
			bcm_l3_route_t * input;
			bcm_l3_route_t * route;
		} l3_subnet_route_find;
		struct {
			int unit;
			bcm_l3_tunnel_term_extn_t * extn_attribute;
		} l3_tunnel_term_global_cfg_get;
		struct {
			int unit;
			bcm_l3_tunnel_term_extn_t * extn_attribute;
		} l3_tunnel_term_global_cfg_set;
		struct {
			int unit;
			bcm_l3_vpbr_entry_t * entry;
		} l3_vpbr_entry_add;
		struct {
			int unit;
			bcm_l3_vpbr_entry_t * entry;
		} l3_vpbr_entry_delete;
		struct {
			int unit;
			bcm_l3_vpbr_entry_t * entry;
		} l3_vpbr_entry_delete_all;
		struct {
			int unit;
			bcm_l3_vpbr_entry_t * entry;
		} l3_vpbr_entry_get;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_vpbr_traverse_cb cb;
			void * user_data;
		} l3_vpbr_traverse;
		struct {
			int unit;
			bcm_vrf_t vrf;
			uint32 flags;
			bcm_l3_vrf_route_data_mode_t * mode;
		} l3_vrf_route_data_mode_get;
		struct {
			int unit;
			bcm_vrf_t vrf;
			uint32 flags;
			bcm_l3_vrf_route_data_mode_t mode;
		} l3_vrf_route_data_mode_set;
		struct {
			int unit;
			bcm_vrf_t vrf;
			uint32 stat_counter_id;
		} l3_vrf_stat_attach;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_vrf_stat_counter_get;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_vrf_stat_counter_set;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_vrf_stat_counter_sync_get;
		struct {
			int unit;
			bcm_vrf_t vrf;
		} l3_vrf_stat_detach;
		struct {
			int unit;
			bcm_vrf_t vrf;
			int enable;
		} l3_vrf_stat_enable_set;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint64 * val;
		} l3_vrf_stat_get;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 * val;
		} l3_vrf_stat_get32;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 * stat_counter_id;
		} l3_vrf_stat_id_get;
		struct {
			int unit;
			bcm_vrf_t vrf;
			int nstat;
			bcm_l3_vrf_stat_t * stat_arr;
			uint64 * value_arr;
		} l3_vrf_stat_multi_get;
		struct {
			int unit;
			bcm_vrf_t vrf;
			int nstat;
			bcm_l3_vrf_stat_t * stat_arr;
			uint32 * value_arr;
		} l3_vrf_stat_multi_get32;
		struct {
			int unit;
			bcm_vrf_t vrf;
			int nstat;
			bcm_l3_vrf_stat_t * stat_arr;
			uint64 * value_arr;
		} l3_vrf_stat_multi_set;
		struct {
			int unit;
			bcm_vrf_t vrf;
			int nstat;
			bcm_l3_vrf_stat_t * stat_arr;
			uint32 * value_arr;
		} l3_vrf_stat_multi_set32;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint64 val;
		} l3_vrf_stat_set;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 val;
		} l3_vrf_stat_set32;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint64 * val;
		} l3_vrf_stat_sync_get;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 * val;
		} l3_vrf_stat_sync_get32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			uint32 vrid;
		} l3_vrrp_add;
		struct {
			int unit;
			uint32 flags;
			bcm_vlan_t vlan;
			uint32 vrid;
		} l3_vrrp_config_add;
		struct {
			int unit;
			uint32 flags;
			bcm_vlan_t vlan;
			uint32 vrid;
		} l3_vrrp_config_delete;
		struct {
			int unit;
			uint32 flags;
			bcm_vlan_t vlan;
		} l3_vrrp_config_delete_all;
		struct {
			int unit;
			uint32 flags;
			bcm_vlan_t vlan;
			uint32 alloc_size;
			uint32 * vrid_array;
			uint32 * count;
		} l3_vrrp_config_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			uint32 vrid;
		} l3_vrrp_delete;
		struct {
			int unit;
			bcm_vlan_t vlan;
		} l3_vrrp_delete_all;
		struct {
			int unit;
			bcm_vlan_t vlan;
			int alloc_size;
			int * vrid_array;
			int * count;
		} l3_vrrp_get;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			uint8 monitor_id;
			bcm_latency_monitor_config_t * config;
		} latency_monitor_config_get;
		struct {
			int unit;
			uint8 monitor_id;
			bcm_latency_monitor_config_t * config;
		} latency_monitor_config_set;
		struct {
			int unit;
			uint8 monitor_id;
			uint8 cosq;
			bcm_latency_monitor_cosq_info_t * cosq_info;
		} latency_monitor_cosq_config_get;
		struct {
			int unit;
			uint8 monitor_id;
			uint8 cosq;
			bcm_latency_monitor_cosq_info_t cosq_info;
		} latency_monitor_cosq_config_set;
		struct {
			int unit;
			uint8 monitor_id;
		} latency_monitor_destroy;
		struct {
			int unit;
		} latency_monitor_detach;
		struct {
			int unit;
			uint8 monitor_id;
			uint8 enable;
		} latency_monitor_enable;
		struct {
			int unit;
			uint8 monitor_id;
			uint8 cosq;
			uint8 byte_counter_flag;
			bcm_latency_monitor_histogram_t * histogram;
		} latency_monitor_histogram_get;
		struct {
			int unit;
			uint8 monitor_id;
			bcm_latency_monitor_info_t * monitor_info;
		} latency_monitor_info_get;
		struct {
			int unit;
		} latency_monitor_init;
		struct {
			int unit;
			uint8 table_size;
			uint32 * latency_limit_table;
		} latency_monitor_latency_limit_table_get;
		struct {
			int unit;
			uint8 table_size;
			uint32 * latency_limit_table;
		} latency_monitor_latency_limit_table_set;
		struct {
			int unit;
			int monitor_id;
			bcm_latency_monitor_callback_fn fn;
			void * user_data;
		} latency_monitor_register;
		struct {
			int unit;
			uint8 monitor_id;
			uint32 stat_counter_id;
		} latency_monitor_stat_attach;
		struct {
			int unit;
			uint8 monitor_id;
		} latency_monitor_stat_detach;
		struct {
			int unit;
			uint8 monitor_id;
			uint32 * stat_counter_id;
		} latency_monitor_stat_id_get;
		struct {
			int unit;
			int monitor_id;
			bcm_latency_monitor_callback_fn fn;
		} latency_monitor_unregister;
		struct {
			int unit;
			bcm_lbg_t lbg_id;
			bcm_lb_direction_type_t direction;
			uint32 flags;
			bcm_lb_control_t lb_control;
			int * arg;
		} lb_control_get;
		struct {
			int unit;
			bcm_lbg_t lbg_id;
			bcm_lb_direction_type_t direction;
			uint32 flags;
			bcm_lb_control_t lb_control;
			int arg;
		} lb_control_set;
		struct {
			int unit;
			bcm_lbg_t lbg_id;
			uint32 flags;
			uint32 * enable;
		} lb_enable_get;
		struct {
			int unit;
			bcm_lbg_t lbg_id;
			uint32 flags;
			uint32 enable;
		} lb_enable_set;
		struct {
			int unit;
			bcm_lbg_t lbg_id;
			uint32 flags;
			bcm_lb_flush_type_t type;
			int * arg;
		} lb_flush_configure_get;
		struct {
			int unit;
			bcm_lbg_t lbg_id;
			uint32 flags;
			bcm_lb_flush_type_t type;
			int arg;
		} lb_flush_configure_set;
		struct {
			int unit;
			bcm_modem_t modem_id;
			bcm_lb_direction_type_t direction;
			uint32 flags;
			bcm_lb_modem_control_t modem_control;
			int * arg;
		} lb_modem_control_get;
		struct {
			int unit;
			bcm_modem_t modem_id;
			bcm_lb_direction_type_t direction;
			uint32 flags;
			bcm_lb_modem_control_t modem_control;
			int arg;
		} lb_modem_control_set;
		struct {
			int unit;
			bcm_modem_t modem_id;
			uint32 flags;
			bcm_lb_modem_packet_config_t * packet_config;
		} lb_modem_packet_config_get;
		struct {
			int unit;
			bcm_modem_t modem_id;
			uint32 flags;
			bcm_lb_modem_packet_config_t * packet_config;
		} lb_modem_packet_config_set;
		struct {
			int unit;
			bcm_modem_t modem_id;
			uint32 flags;
			bcm_lb_modem_shaper_config_t * shaper;
		} lb_modem_shaper_get;
		struct {
			int unit;
			bcm_modem_t modem_id;
			uint32 flags;
			bcm_lb_modem_shaper_config_t * shaper;
		} lb_modem_shaper_set;
		struct {
			int unit;
			bcm_modem_t modem_id;
			bcm_lb_direction_type_t direction;
			uint32 flags;
			bcm_lb_modem_stat_val_t type;
			uint64 * value;
		} lb_modem_stat_get;
		struct {
			int unit;
			bcm_modem_t modem_id;
			bcm_lb_direction_type_t direction;
			uint32 flags;
			bcm_lb_modem_status_type_t status_type;
			int * value;
		} lb_modem_status_get;
		struct {
			int unit;
			bcm_modem_t modem_id;
			bcm_lb_direction_type_t direction;
			uint32 flags;
			bcm_lbg_t * lbg_id;
		} lb_modem_to_lbg_map_get;
		struct {
			int unit;
			bcm_modem_t modem_id;
			bcm_lb_direction_type_t direction;
			uint32 flags;
			bcm_lbg_t lbg_id;
		} lb_modem_to_lbg_map_set;
		struct {
			int unit;
			bcm_modem_t modem_id;
			uint32 flags;
			bcm_gport_t * port;
		} lb_modem_to_port_map_get;
		struct {
			int unit;
			bcm_modem_t modem_id;
			uint32 flags;
			bcm_gport_t port;
		} lb_modem_to_port_map_set;
		struct {
			int unit;
			uint32 flags;
			bcm_lb_packet_config_t * packet_config;
		} lb_packet_config_get;
		struct {
			int unit;
			uint32 flags;
			bcm_lb_packet_config_t * packet_config;
		} lb_packet_config_set;
		struct {
			int unit;
			bcm_lb_rx_modem_map_index_t * map_index;
			uint32 flags;
			bcm_lb_rx_modem_map_config_t * map_config;
		} lb_rx_modem_map_get;
		struct {
			int unit;
			bcm_lb_rx_modem_map_index_t * map_index;
			uint32 flags;
			bcm_lb_rx_modem_map_config_t * map_config;
		} lb_rx_modem_map_set;
		struct {
			int unit;
			bcm_lbg_t lbg_id;
			bcm_lb_direction_type_t direction;
			uint32 flags;
			int * number_width;
		} lb_sequence_number_width_get;
		struct {
			int unit;
			bcm_lbg_t lbg_id;
			bcm_lb_direction_type_t direction;
			uint32 flags;
			int number_width;
		} lb_sequence_number_width_set;
		struct {
			int unit;
			bcm_lbg_t lbg_id;
			bcm_lb_direction_type_t direction;
			uint32 flags;
			bcm_lb_stat_val_t type;
			uint64 * value;
		} lb_stat_get;
		struct {
			int unit;
			bcm_lbg_t lbg_id;
			bcm_lb_direction_type_t direction;
			uint32 flags;
			bcm_lb_status_type_t status_type;
			int * value;
		} lb_status_get;
		struct {
			int unit;
			uint32 flags;
			bcm_lb_tc_dp_t * tc_dp;
			bcm_lb_pkt_pri_t * pkt_pri;
		} lb_tc_dp_to_priority_config_get;
		struct {
			int unit;
			uint32 flags;
			bcm_lb_tc_dp_t * tc_dp;
			bcm_lb_pkt_pri_t * pkt_pri;
		} lb_tc_dp_to_priority_config_set;
		struct {
			int unit;
			uint32 flags;
			int max_lbg_count;
			bcm_lb_lbg_weight_t * lbg_weights;
			int * lbg_count;
		} lb_tx_sched_get;
		struct {
			int unit;
			uint32 flags;
			int lbg_count;
			bcm_lb_lbg_weight_t * lbg_weights;
		} lb_tx_sched_set;
		struct {
			int unit;
			bcm_pbmp_t pbmp;
		} link_change;
		struct {
			int unit;
			bcm_pbmp_t * pbm;
			int us;
		} link_wait;
		struct {
			int unit;
		} linkscan_detach;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
		} linkscan_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			int * us;
		} linkscan_enable_get;
		struct {
			int unit;
			bcm_port_t port;
		} linkscan_enable_port_get;
		struct {
			int unit;
			int us;
		} linkscan_enable_set;
		struct {
			int unit;
		} linkscan_init;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} linkscan_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} linkscan_mode_set;
		struct {
			int unit;
			bcm_pbmp_t pbm;
			int mode;
		} linkscan_mode_set_pbm;
		struct {
			int unit;
			bcm_port_t port;
			int * link;
		} linkscan_override_link_state_get;
		struct {
			int unit;
			bcm_port_t port;
			int link;
		} linkscan_override_link_state_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_linkscan_port_handler_t f;
		} linkscan_port_register;
		struct {
			int unit;
			bcm_port_t port;
			bcm_linkscan_port_handler_t f;
		} linkscan_port_unregister;
		struct {
			int unit;
			bcm_linkscan_handler_t f;
		} linkscan_register;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_linkscan_trigger_event_t trigger_event;
			int * enable;
		} linkscan_trigger_event_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_linkscan_trigger_event_t trigger_event;
			int enable;
		} linkscan_trigger_event_set;
		struct {
			int unit;
			bcm_linkscan_handler_t f;
		} linkscan_unregister;
		struct {
			int unit;
			bcm_pbmp_t pbm;
		} linkscan_update;
#ifdef	INCLUDE_MACSEC
		struct {
			int unit;
			bcm_macsec_event_t t;
			int * enable;
		} macsec_event_enable_get;
		struct {
			int unit;
			bcm_macsec_event_t t;
			int enable;
		} macsec_event_enable_set;
		struct {
			int unit;
			bcm_macsec_event_cb cb;
			void * user_data;
		} macsec_event_register;
		struct {
			int unit;
			bcm_macsec_event_cb cb;
		} macsec_event_unregister;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_macsec_flow_match_t * flow;
			bcm_macsec_flow_action_t * action;
			int * flowId;
		} macsec_flow_create;
		struct {
			int unit;
			bcm_port_t port;
			int flowId;
		} macsec_flow_destroy;
		struct {
			int unit;
			bcm_port_t port;
			int flowId;
			bcm_macsec_flow_match_t * flow;
			bcm_macsec_flow_action_t * a;
		} macsec_flow_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_flow_traverse_cb callbk;
			void * user_data;
		} macsec_flow_traverse;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_port_capability_t * cap;
		} macsec_port_capability_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_port_config_t * cfg;
		} macsec_port_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_port_config_t * cfg;
		} macsec_port_config_set;
		struct {
			int unit;
			bcm_macsec_port_traverse_cb callbk;
			void * user_data;
		} macsec_port_traverse;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			int chanId;
			bcm_macsec_secure_assoc_t * assoc;
			int * assocId;
		} macsec_secure_assoc_create;
		struct {
			int unit;
			bcm_port_t port;
			int assocId;
		} macsec_secure_assoc_destroy;
		struct {
			int unit;
			bcm_port_t port;
			int assocId;
			bcm_macsec_secure_assoc_t * assoc;
			int * chanId;
		} macsec_secure_assoc_get;
		struct {
			int unit;
			bcm_port_t port;
			int chanId;
			bcm_macsec_secure_assoc_traverse_cb cb;
			void * user_data;
		} macsec_secure_assoc_traverse;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_macsec_secure_chan_t * chan;
			int * chanId;
		} macsec_secure_chan_create;
		struct {
			int unit;
			bcm_port_t port;
			int chanId;
		} macsec_secure_chan_destroy;
		struct {
			int unit;
			bcm_port_t port;
			int chanId;
			bcm_macsec_secure_chan_t * chan;
		} macsec_secure_chan_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_chan_traverse_cb calback;
			void * user_data;
		} macsec_secure_chan_traverse;
		struct {
			int unit;
			bcm_port_t port;
		} macsec_stat_clear;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_stat_t stat;
			int chanId;
			int assocId;
			uint64 * val;
		} macsec_stat_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_stat_t stat;
			int chanId;
			int assocId;
			uint32 * val;
		} macsec_stat_get32;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_stat_t stat;
			int chanId;
			int assocId;
			uint64 val;
		} macsec_stat_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_stat_t stat;
			int chanId;
			int assocId;
			uint32 val;
		} macsec_stat_set32;
#endif	/* INCLUDE_MACSEC */
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_addr_add;
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_addr_add_w_l2mcindex;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vid;
		} mcast_addr_remove;
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_addr_remove_w_l2mcindex;
		struct {
			int unit;
			int mc_idx;
			bcm_port_t in_port;
			bcm_pbmp_t pbmp;
		} mcast_bitmap_del;
		struct {
			int unit;
			int mc_idx;
			bcm_port_t in_port;
			bcm_pbmp_t * pbmp;
		} mcast_bitmap_get;
		struct {
			int unit;
			int * max_index;
		} mcast_bitmap_max_get;
		struct {
			int unit;
			int mc_idx;
			bcm_port_t in_port;
			bcm_pbmp_t pbmp;
		} mcast_bitmap_set;
		struct {
			int unit;
		} mcast_init;
		struct {
			int unit;
			uint8 * mcMacAddr;
			bcm_vlan_t vlanId;
			int srcPort;
			bcm_mcast_addr_t * mcaddr;
			bcm_pbmp_t * allRouterBmp;
		} mcast_join;
		struct {
			int unit;
			uint8 * mcMacAddr;
			bcm_vlan_t vlanId;
			int srcPort;
		} mcast_leave;
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_port_add;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vid;
			bcm_mcast_addr_t * mcaddr;
		} mcast_port_get;
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_port_remove;
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} mim_detach;
		struct {
			int unit;
		} mim_init;
		struct {
			int unit;
			int lookup_id;
			uint32 stat_counter_id;
		} mim_lookup_id_stat_attach;
		struct {
			int unit;
			int lookup_id;
			bcm_mim_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mim_lookup_id_stat_counter_get;
		struct {
			int unit;
			int lookup_id;
			bcm_mim_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mim_lookup_id_stat_counter_set;
		struct {
			int unit;
			int lookup_id;
			bcm_mim_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mim_lookup_id_stat_counter_sync_get;
		struct {
			int unit;
			int lookup_id;
		} mim_lookup_id_stat_detach;
		struct {
			int unit;
			int lookup_id;
			bcm_mim_stat_t stat;
			uint32 * stat_counter_id;
		} mim_lookup_id_stat_id_get;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_port_t * mim_port;
		} mim_port_add;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_gport_t mim_port_id;
		} mim_port_delete;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
		} mim_port_delete_all;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_port_t * mim_port;
		} mim_port_get;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			int port_max;
			bcm_mim_port_t * port_array;
			int * port_count;
		} mim_port_get_all;
		struct {
			int unit;
			bcm_mim_vpn_config_t * info;
		} mim_vpn_create;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
		} mim_vpn_destroy;
		struct {
			int unit;
		} mim_vpn_destroy_all;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_vpn_config_t * info;
		} mim_vpn_get;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			uint32 stat_counter_id;
		} mim_vpn_stat_attach;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mim_vpn_stat_counter_get;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mim_vpn_stat_counter_set;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mim_vpn_stat_counter_sync_get;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
		} mim_vpn_stat_detach;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_stat_t stat;
			uint32 * stat_counter_id;
		} mim_vpn_stat_id_get;
		struct {
			int unit;
			bcm_mim_vpn_traverse_cb cb;
			void * user_data;
		} mim_vpn_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_core_t core_id;
			bcm_gport_t mirror_dest_id;
			int counter_cmd_id;
			uint32 flags;
			bcm_mirror_profile_cmd_count_t * mirror_count_info;
		} mirror_destination_count_command_get;
		struct {
			int unit;
			bcm_core_t core_id;
			bcm_gport_t mirror_dest_id;
			int counter_cmd_id;
			uint32 flags;
			bcm_mirror_profile_cmd_count_t * mirror_count_info;
		} mirror_destination_count_command_set;
		struct {
			int unit;
			bcm_mirror_destination_t * mirror_dest;
		} mirror_destination_create;
		struct {
			int unit;
			bcm_gport_t mirror_dest_id;
		} mirror_destination_destroy;
		struct {
			int unit;
			bcm_gport_t mirror_dest_id;
			bcm_mirror_destination_t * mirror_dest;
		} mirror_destination_get;
		struct {
			int unit;
			bcm_mirror_destination_traverse_cb cb;
			void * user_data;
		} mirror_destination_traverse;
		struct {
			int unit;
			bcm_port_t port;
			int * val;
		} mirror_egress_get;
		struct {
			int unit;
			bcm_port_t port;
			int val;
		} mirror_egress_set;
		struct {
			int unit;
			bcm_mirror_global_truncate_t * global_truncate;
		} mirror_global_truncate_get;
		struct {
			int unit;
			bcm_mirror_global_truncate_t * global_truncate;
		} mirror_global_truncate_set;
		struct {
			int unit;
			bcm_gport_t mirror_dest_id;
			uint32 * flags;
			bcm_mirror_header_info_t * mirror_header_info;
		} mirror_header_info_get;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t mirror_dest_id;
			bcm_mirror_header_info_t * mirror_header_info;
		} mirror_header_info_set;
		struct {
			int unit;
			bcm_port_t port;
			int * val;
		} mirror_ingress_get;
		struct {
			int unit;
			bcm_mirror_ingress_mod_event_t * event_array;
			int num_events;
			bcm_mirror_ingress_mod_event_group_t * group;
		} mirror_ingress_mod_event_group_create;
		struct {
			int unit;
			bcm_mirror_ingress_mod_event_group_t group;
		} mirror_ingress_mod_event_group_destroy;
		struct {
			int unit;
			bcm_mirror_ingress_mod_event_group_t group;
			bcm_mirror_ingress_mod_event_t * event_array;
			int * count;
		} mirror_ingress_mod_event_group_get;
		struct {
			int unit;
			bcm_mirror_ingress_mod_event_group_t * group_array;
			int * count;
		} mirror_ingress_mod_event_group_get_all;
		struct {
			int unit;
			bcm_mirror_ingress_mod_event_profile_t * profile;
			int * profile_id;
		} mirror_ingress_mod_event_profile_create;
		struct {
			int unit;
			int profile_id;
		} mirror_ingress_mod_event_profile_destroy;
		struct {
			int unit;
			int profile_id;
			bcm_mirror_ingress_mod_event_profile_t * profile;
		} mirror_ingress_mod_event_profile_get;
		struct {
			int unit;
			int * profile_id_array;
			int * count;
		} mirror_ingress_mod_event_profile_get_all;
		struct {
			int unit;
			int profile_id;
			bcm_mirror_ingress_mod_event_group_t group;
			int hit;
		} mirror_ingress_mod_event_profile_group_add;
		struct {
			int unit;
			int profile_id;
			bcm_mirror_ingress_mod_event_group_t group;
		} mirror_ingress_mod_event_profile_group_delete;
		struct {
			int unit;
			int profile_id;
			bcm_mirror_ingress_mod_event_group_t group;
			int * hit;
		} mirror_ingress_mod_event_profile_group_get;
		struct {
			int unit;
			int profile_id;
			bcm_mirror_ingress_mod_event_group_t * group_array;
			int * count;
		} mirror_ingress_mod_event_profile_group_get_all;
		struct {
			int unit;
			bcm_port_t port;
			int val;
		} mirror_ingress_set;
		struct {
			int unit;
		} mirror_init;
		struct {
			int unit;
			int * mode;
		} mirror_mode_get;
		struct {
			int unit;
			int mode;
		} mirror_mode_set;
		struct {
			int unit;
			bcm_mirror_multi_dip_entry_num_t num_entries;
			bcm_ip_t * ipv4_addr_array;
			bcm_mirror_multi_dip_group_t * group;
		} mirror_multi_dip_group_ipv4_create;
		struct {
			int unit;
			bcm_mirror_multi_dip_group_t group;
		} mirror_multi_dip_group_ipv4_destroy;
		struct {
			int unit;
			bcm_mirror_multi_dip_group_t group;
			bcm_ip_t * ipv4_addr_array;
			int * count;
		} mirror_multi_dip_group_ipv4_get;
		struct {
			int unit;
			bcm_mirror_multi_dip_group_t * ipv4_group_array;
			int * count;
		} mirror_multi_dip_group_ipv4_get_all;
		struct {
			int unit;
			bcm_mirror_multi_dip_entry_num_t num_entries;
			bcm_ip6_t * ipv6_addr_array;
			bcm_mirror_multi_dip_group_t * group;
		} mirror_multi_dip_group_ipv6_create;
		struct {
			int unit;
			bcm_mirror_multi_dip_group_t group;
		} mirror_multi_dip_group_ipv6_destroy;
		struct {
			int unit;
			bcm_mirror_multi_dip_group_t group;
			bcm_ip6_t * ipv6_addr_array;
			int * count;
		} mirror_multi_dip_group_ipv6_get;
		struct {
			int unit;
			bcm_mirror_multi_dip_group_t * ipv6_group_array;
			int * count;
		} mirror_multi_dip_group_ipv6_get_all;
		struct {
			int unit;
			bcm_mirror_payload_zero_info_t * payload_zero_config_array;
			int num_configs;
		} mirror_payload_zero_control_multi_get;
		struct {
			int unit;
			bcm_mirror_payload_zero_info_t * payload_zero_config_array;
			int num_configs;
		} mirror_payload_zero_control_multi_set;
		struct {
			int unit;
			bcm_mirror_payload_zero_offsets_t * mirror_payload_offset_info;
			uint32 flags;
			uint32 * profile_index;
		} mirror_payload_zero_profile_create;
		struct {
			int unit;
			uint32 flags;
			uint32 profile_index;
		} mirror_payload_zero_profile_destroy;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_gport_t mirror_dest_id;
		} mirror_port_dest_add;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_gport_t mirror_dest_id;
		} mirror_port_dest_delete;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} mirror_port_dest_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			int mirror_dest_size;
			bcm_gport_t * mirror_dest;
			int * mirror_dest_count;
		} mirror_port_dest_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_gport_t mirror_dest;
			bcm_mirror_options_t options;
		} mirror_port_destination_add;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			int mirror_dest_size;
			bcm_gport_t * mirror_dest;
			int * mirror_dest_count;
			bcm_mirror_options_t * options;
		} mirror_port_destination_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t * dest_mod;
			bcm_port_t * dest_port;
			uint32 * flags;
		} mirror_port_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_mirror_port_info_t * info;
		} mirror_port_info_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_mirror_port_info_t * info;
		} mirror_port_info_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t dest_mod;
			bcm_port_t dest_port;
			uint32 flags;
		} mirror_port_set;
		struct {
			int unit;
			uint32 flags;
			bcm_port_t forward_port;
			bcm_mirror_port_to_rcy_map_info_t * rcy_map_info;
		} mirror_port_to_rcy_port_map_get;
		struct {
			int unit;
			uint32 flags;
			bcm_port_t forward_port;
			bcm_mirror_port_to_rcy_map_info_t * rcy_map_info;
		} mirror_port_to_rcy_port_map_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			uint32 flags;
			bcm_gport_t destid;
		} mirror_port_vlan_dest_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			uint32 flags;
			bcm_gport_t destid;
		} mirror_port_vlan_dest_delete;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			uint32 flags;
		} mirror_port_vlan_dest_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			uint32 flags;
			uint32 mirror_dest_size;
			bcm_gport_t * destid;
			uint32 * destcount;
		} mirror_port_vlan_dest_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			uint32 flags;
			bcm_gport_t destid;
			bcm_mirror_options_t options;
		} mirror_port_vlan_destination_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			uint32 flags;
			uint32 mirror_dest_size;
			bcm_gport_t * destid;
			uint32 * destcount;
			bcm_mirror_options_t * options;
		} mirror_port_vlan_destination_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			bcm_gport_t * dest_port;
			uint32 * flags;
		} mirror_port_vlan_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			bcm_gport_t destport;
			uint32 flags;
		} mirror_port_vlan_set;
		struct {
			int unit;
			uint32 options;
			bcm_mirror_sample_type_t type;
			int * profile_id;
		} mirror_sample_profile_create;
		struct {
			int unit;
			bcm_mirror_sample_type_t type;
			int profile_id;
		} mirror_sample_profile_destroy;
		struct {
			int unit;
			bcm_mirror_sample_type_t type;
			int profile_id;
			bcm_mirror_sample_profile_t * profile;
		} mirror_sample_profile_get;
		struct {
			int unit;
			bcm_mirror_sample_type_t type;
			int profile_id;
			bcm_mirror_sample_profile_t * profile;
		} mirror_sample_profile_set;
		struct {
			int unit;
			bcm_mirror_sample_type_t type;
			uint32 stat_counter_id;
		} mirror_sample_stat_attach;
		struct {
			int unit;
			bcm_mirror_sample_type_t type;
			uint32 stat_counter_id;
		} mirror_sample_stat_detach;
		struct {
			int unit;
			bcm_mirror_source_t * source;
			bcm_gport_t mirror_dest_id;
		} mirror_source_dest_add;
		struct {
			int unit;
			bcm_mirror_source_t * source;
			bcm_gport_t mirror_dest_id;
		} mirror_source_dest_delete;
		struct {
			int unit;
			bcm_mirror_source_t * source;
		} mirror_source_dest_delete_all;
		struct {
			int unit;
			bcm_mirror_source_t * source;
			int array_size;
			bcm_gport_t * mirror_dest;
			int * count;
		} mirror_source_dest_get_all;
		struct {
			int unit;
			bcm_mirror_stat_object_t * object;
			bcm_mirror_stat_t type;
			uint64 * value;
		} mirror_stat_get;
		struct {
			int unit;
			bcm_mirror_stat_object_t * object;
			bcm_mirror_stat_t type;
			uint64 value;
		} mirror_stat_set;
		struct {
			int unit;
			bcm_mirror_stat_object_t * object;
			bcm_mirror_stat_t type;
			uint64 * value;
		} mirror_stat_sync_get;
		struct {
			int unit;
			bcm_port_t * port;
		} mirror_to_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_pbmp_t * pbmp;
		} mirror_to_pbmp_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_pbmp_t pbmp;
		} mirror_to_pbmp_set;
		struct {
			int unit;
			bcm_port_t port;
		} mirror_to_set;
		struct {
			int unit;
			uint32 options;
			int * profile_id;
			bcm_mirror_truncate_length_profile_t * profile;
		} mirror_truncate_length_profile_create;
		struct {
			int unit;
			int profile_id;
		} mirror_truncate_length_profile_destroy;
		struct {
			int unit;
			int profile_id;
			bcm_mirror_truncate_length_profile_t * profile;
		} mirror_truncate_length_profile_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 * tpid;
			uint16 * vlan;
		} mirror_vlan_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
			uint16 vlan;
		} mirror_vlan_set;
	/* bcm_module_name has a non int return type */
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} mpls_cleanup;
		struct {
			int unit;
			uint32 options;
			bcm_mpls_control_pkt_match_t * match;
			bcm_mpls_control_pkt_action_t * action;
		} mpls_control_pkt_add;
		struct {
			int unit;
			bcm_mpls_control_pkt_match_t * match;
		} mpls_control_pkt_delete;
		struct {
			int unit;
		} mpls_control_pkt_delete_all;
		struct {
			int unit;
			bcm_mpls_control_pkt_match_t * match;
			bcm_mpls_control_pkt_action_t * action;
		} mpls_control_pkt_get;
		struct {
			int unit;
			bcm_mpls_control_pkt_traverse_cb cb;
			void * user_data;
		} mpls_control_pkt_traverse;
		struct {
			int unit;
			uint32 options;
			bcm_mpls_entropy_identifier_t * info;
		} mpls_entropy_identifier_add;
		struct {
			int unit;
			bcm_mpls_entropy_identifier_t * info;
		} mpls_entropy_identifier_delete;
		struct {
			int unit;
		} mpls_entropy_identifier_delete_all;
		struct {
			int unit;
			bcm_mpls_entropy_identifier_t * info;
		} mpls_entropy_identifier_get;
		struct {
			int unit;
			bcm_mpls_entropy_identifier_traverse_cb cb;
			void * user_data;
		} mpls_entropy_identifier_traverse;
		struct {
			int unit;
			bcm_mpls_esi_info_t * esi_info;
		} mpls_esi_encap_add;
		struct {
			int unit;
			bcm_mpls_esi_info_t * esi_info;
		} mpls_esi_encap_delete;
		struct {
			int unit;
			bcm_mpls_esi_info_t * esi_info;
		} mpls_esi_encap_get;
		struct {
			int unit;
			bcm_mpls_esi_encap_traverse_cb cb;
			void * user_data;
		} mpls_esi_encap_traverse;
		struct {
			int unit;
			uint32 flags;
			int * exp_map_id;
		} mpls_exp_map_create;
		struct {
			int unit;
			int exp_map_id;
		} mpls_exp_map_destroy;
		struct {
			int unit;
			int exp_map_id;
			bcm_mpls_exp_map_t * exp_map;
		} mpls_exp_map_get;
		struct {
			int unit;
			int exp_map_id;
			bcm_mpls_exp_map_t * exp_map;
		} mpls_exp_map_set;
		struct {
			int unit;
		} mpls_init;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			uint32 * value;
		} mpls_label_flexctr_object_get;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			uint32 value;
		} mpls_label_flexctr_object_set;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			uint32 stat_counter_id;
		} mpls_label_stat_attach;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
		} mpls_label_stat_clear;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_label_stat_counter_get;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_label_stat_counter_set;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_label_stat_counter_sync_get;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
		} mpls_label_stat_detach;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			int enable;
		} mpls_label_stat_enable_set;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint64 * val;
		} mpls_label_stat_get;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 * val;
		} mpls_label_stat_get32;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 * stat_counter_id;
		} mpls_label_stat_id_get;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint64 * val;
		} mpls_label_stat_sync_get;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 * val;
		} mpls_label_stat_sync_get32;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_mpls_port_t * mpls_port;
		} mpls_port_add;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t mpls_port_id;
		} mpls_port_delete;
		struct {
			int unit;
			bcm_vpn_t vpn;
		} mpls_port_delete_all;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_mpls_port_t * mpls_port;
		} mpls_port_get;
		struct {
			int unit;
			bcm_vpn_t vpn;
			int port_max;
			bcm_mpls_port_t * port_array;
			int * port_count;
		} mpls_port_get_all;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t port;
			uint32 stat_counter_id;
		} mpls_port_stat_attach;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_port_stat_counter_get;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_port_stat_counter_set;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_port_stat_counter_sync_get;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t port;
		} mpls_port_stat_detach;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			int enable;
		} mpls_port_stat_enable_set;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			bcm_cos_t cos;
			bcm_mpls_port_stat_t stat;
			uint64 * val;
		} mpls_port_stat_get;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			bcm_cos_t cos;
			bcm_mpls_port_stat_t stat;
			uint32 * val;
		} mpls_port_stat_get32;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 * stat_counter_id;
		} mpls_port_stat_id_get;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			bcm_cos_t cos;
			bcm_mpls_port_stat_t stat;
			uint64 val;
		} mpls_port_stat_set;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			bcm_cos_t cos;
			bcm_mpls_port_stat_t stat;
			uint32 val;
		} mpls_port_stat_set32;
		struct {
			int unit;
			bcm_mpls_port_traverse_info_t additional_info;
			bcm_mpls_port_traverse_cb trav_fn;
			void * user_data;
		} mpls_port_traverse;
		struct {
			int unit;
			bcm_mpls_label_t label_low;
			bcm_mpls_label_t label_high;
			bcm_mpls_range_action_t * action;
		} mpls_range_action_add;
		struct {
			int unit;
			bcm_mpls_label_t label_low;
			bcm_mpls_label_t label_high;
			bcm_mpls_range_action_t * action;
		} mpls_range_action_get;
		struct {
			int unit;
			bcm_mpls_label_t label_low;
			bcm_mpls_label_t label_high;
		} mpls_range_action_remove;
		struct {
			int unit;
			bcm_mpls_special_label_type_t label_type;
			bcm_mpls_special_label_t label_info;
		} mpls_special_label_egress_add;
		struct {
			int unit;
			bcm_mpls_special_label_type_t label_type;
			bcm_mpls_special_label_t label_info;
		} mpls_special_label_egress_delete;
		struct {
			int unit;
		} mpls_special_label_egress_delete_all;
		struct {
			int unit;
			bcm_mpls_special_label_type_t label_type;
			bcm_mpls_special_label_t * label_info;
		} mpls_special_label_egress_get;
		struct {
			int unit;
			bcm_mpls_special_label_egress_traverse_cb cb;
			void * user_data;
		} mpls_special_label_egress_traverse;
		struct {
			int unit;
			bcm_mpls_special_label_type_t label_type;
			bcm_mpls_special_label_t label_info;
		} mpls_special_label_identifier_add;
		struct {
			int unit;
			bcm_mpls_special_label_type_t label_type;
			bcm_mpls_special_label_t label_info;
		} mpls_special_label_identifier_delete;
		struct {
			int unit;
		} mpls_special_label_identifier_delete_all;
		struct {
			int unit;
			bcm_mpls_special_label_type_t label_type;
			bcm_mpls_special_label_t * label_info;
		} mpls_special_label_identifier_get;
		struct {
			int unit;
			bcm_mpls_special_label_identifier_traverse_cb cb;
			void * user_data;
		} mpls_special_label_identifier_traverse;
		struct {
			int unit;
			bcm_mpls_special_label_push_element_t * element;
			int * push_action;
		} mpls_special_label_push_action_get;
		struct {
			int unit;
			bcm_mpls_special_label_push_element_t * element;
			int push_action;
		} mpls_special_label_push_action_set;
		struct {
			int unit;
			uint32 options;
			bcm_mpls_tunnel_encap_t * tunnel_encap;
		} mpls_tunnel_encap_create;
		struct {
			int unit;
			bcm_gport_t tunnel_id;
		} mpls_tunnel_encap_destroy;
		struct {
			int unit;
		} mpls_tunnel_encap_destroy_all;
		struct {
			int unit;
			bcm_mpls_tunnel_encap_t * tunnel_encap;
		} mpls_tunnel_encap_get;
		struct {
			int unit;
			bcm_if_t intf;
		} mpls_tunnel_initiator_clear;
		struct {
			int unit;
		} mpls_tunnel_initiator_clear_all;
		struct {
			int unit;
			bcm_if_t intf;
			int num_labels;
			bcm_mpls_egress_label_t * label_array;
		} mpls_tunnel_initiator_create;
		struct {
			int unit;
			bcm_if_t intf;
			int label_max;
			bcm_mpls_egress_label_t * label_array;
			int * label_count;
		} mpls_tunnel_initiator_get;
		struct {
			int unit;
			bcm_if_t intf;
			int num_labels;
			bcm_mpls_egress_label_t * label_array;
		} mpls_tunnel_initiator_set;
		struct {
			int unit;
			bcm_mpls_tunnel_initiator_traverse_info_t * additional_info;
			bcm_mpls_tunnel_initiator_traverse_cb cb;
			void * user_data;
		} mpls_tunnel_initiator_traverse;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 stat_counter_id;
		} mpls_tunnel_label_counter_id_detach;
		struct {
			int unit;
			bcm_if_t intf_id;
			int * num_counters;
			uint32 * stat_counter_id;
		} mpls_tunnel_label_counter_id_num_get;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 stat_counter_id;
			bcm_mpls_stat_info_t * stat_info;
		} mpls_tunnel_label_counter_id_stat_get;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 stat_counter_id;
			bcm_mpls_stat_info_t * stat_info;
		} mpls_tunnel_label_counter_id_stat_set;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 stat_counter_id;
			bcm_mpls_stat_info_t * stat_info;
		} mpls_tunnel_label_counter_id_stat_sync_get;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 stat_counter_id;
		} mpls_tunnel_stat_attach;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_tunnel_stat_counter_get;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_tunnel_stat_counter_set;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_tunnel_stat_counter_sync_get;
		struct {
			int unit;
			bcm_if_t intf_id;
		} mpls_tunnel_stat_detach;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_mpls_stat_t stat;
			uint32 * stat_counter_id;
		} mpls_tunnel_stat_id_get;
		struct {
			int unit;
			bcm_mpls_tunnel_switch_t * info;
		} mpls_tunnel_switch_add;
		struct {
			int unit;
			bcm_mpls_tunnel_switch_t * info;
		} mpls_tunnel_switch_create;
		struct {
			int unit;
			bcm_mpls_tunnel_switch_t * info;
		} mpls_tunnel_switch_delete;
		struct {
			int unit;
		} mpls_tunnel_switch_delete_all;
		struct {
			int unit;
			bcm_mpls_tunnel_switch_t * info;
		} mpls_tunnel_switch_get;
		struct {
			int unit;
			bcm_mpls_tunnel_switch_traverse_cb cb;
			void * user_data;
		} mpls_tunnel_switch_traverse;
		struct {
			int unit;
			bcm_mpls_vpn_config_t * info;
		} mpls_vpn_id_create;
		struct {
			int unit;
			bcm_vpn_t vpn;
		} mpls_vpn_id_destroy;
		struct {
			int unit;
		} mpls_vpn_id_destroy_all;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_mpls_vpn_config_t * info;
		} mpls_vpn_id_get;
		struct {
			int unit;
			bcm_mpls_vpn_traverse_cb cb;
			void * user_data;
		} mpls_vpn_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_multicast_t group;
			uint32 flags;
			int nof_replications;
			bcm_multicast_replication_t * rep_array;
		} multicast_add;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_multicast_control_t type;
			int * arg;
		} multicast_control_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_multicast_control_t type;
			int arg;
		} multicast_control_set;
		struct {
			int unit;
			uint32 flags;
			bcm_multicast_t * group;
		} multicast_create;
		struct {
			int unit;
			bcm_multicast_t group;
			uint32 flags;
			int nof_replications;
			bcm_multicast_replication_t * rep_array;
		} multicast_delete;
		struct {
			int unit;
			bcm_multicast_t group;
		} multicast_destroy;
		struct {
			int unit;
		} multicast_detach;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
		} multicast_egress_add;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
		} multicast_egress_delete;
		struct {
			int unit;
			bcm_multicast_t group;
		} multicast_egress_delete_all;
		struct {
			int unit;
			bcm_multicast_t group;
			int port_max;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
			int * port_count;
		} multicast_egress_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_if_t intf;
			bcm_if_t * encap_id;
		} multicast_egress_object_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			int port_count;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
		} multicast_egress_set;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
			bcm_gport_t subscriber_queue;
		} multicast_egress_subscriber_add;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
			bcm_gport_t subscriber_queue;
		} multicast_egress_subscriber_delete;
		struct {
			int unit;
			bcm_multicast_t group;
			int port_max;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
			bcm_gport_t * subscriber_queue_array;
			int * port_count;
		} multicast_egress_subscriber_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t subscriber_queue;
			int * qos_map_id;
		} multicast_egress_subscriber_qos_map_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t subscriber_queue;
			int qos_map_id;
		} multicast_egress_subscriber_qos_map_set;
		struct {
			int unit;
			bcm_multicast_t group;
			int port_count;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
			bcm_gport_t * subscriber_queue_array;
		} multicast_egress_subscriber_set;
		struct {
			int unit;
			bcm_multicast_encap_t * mc_encap;
			bcm_if_t * encap_id;
		} multicast_encap_create;
		struct {
			int unit;
			bcm_if_t encap_id;
		} multicast_encap_destroy;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t * multicast_replication_index;
			int encap_extension_count;
			bcm_if_t * encap_extension_array;
		} multicast_encap_extension_create;
		struct {
			int unit;
		} multicast_encap_extension_delete_all;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t multicast_replication_index;
		} multicast_encap_extension_destroy;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t multicast_replication_index;
			int encap_max;
			bcm_if_t * encap_extension_array;
			int * encap_extension_count;
		} multicast_encap_extension_get;
		struct {
			int unit;
			bcm_multicast_encap_extension_traverse_cb trav_fn;
			void * user_data;
		} multicast_encap_extension_traverse;
		struct {
			int unit;
			bcm_if_t encap_id;
			bcm_multicast_encap_t * mc_encap;
		} multicast_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t extender_port_id;
			bcm_if_t * encap_id;
		} multicast_extender_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_fabric_distribution_t * ds_id;
		} multicast_fabric_distribution_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_fabric_distribution_t ds_id;
		} multicast_fabric_distribution_set;
		struct {
			int unit;
			bcm_multicast_t group;
			uint32 flags;
			int replication_max;
			bcm_multicast_replication_t * out_rep_array;
			int * rep_count;
		} multicast_get;
		struct {
			int unit;
			uint32 flags;
			bcm_multicast_t group;
		} multicast_group_destroy;
		struct {
			int unit;
			uint32 type_flag;
			bcm_multicast_t * group_min;
			bcm_multicast_t * group_max;
		} multicast_group_free_range_get;
		struct {
			int unit;
			bcm_multicast_t group;
			uint32 * flags;
		} multicast_group_get;
		struct {
			int unit;
			bcm_multicast_t group;
		} multicast_group_is_free;
		struct {
			int unit;
			bcm_multicast_group_traverse_cb_t trav_fn;
			uint32 flags;
			void * user_data;
		} multicast_group_traverse;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
		} multicast_ingress_add;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
		} multicast_ingress_delete;
		struct {
			int unit;
			bcm_multicast_t group;
		} multicast_ingress_delete_all;
		struct {
			int unit;
			bcm_multicast_t group;
			int port_max;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
			int * port_count;
		} multicast_ingress_get;
		struct {
			int unit;
			bcm_multicast_t group;
			int port_count;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
		} multicast_ingress_set;
		struct {
			int unit;
		} multicast_init;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_vlan_t vlan;
			bcm_if_t * encap_id;
		} multicast_l2_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t l2gre_port_id;
			bcm_if_t * encap_id;
		} multicast_l2gre_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t intf;
			bcm_if_t * encap_id;
		} multicast_l3_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t mac_port_id;
			bcm_if_t * encap_id;
		} multicast_mac_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t mim_port_id;
			bcm_if_t * encap_id;
		} multicast_mim_encap_get;
		struct {
			int unit;
			bcm_multicast_multi_info_t mc_multi_info;
			bcm_multicast_t * base_mc_group;
		} multicast_multi_alloc;
		struct {
			int unit;
			bcm_multicast_t base_mc_group;
		} multicast_multi_free;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t niv_port_id;
			bcm_if_t * encap_id;
		} multicast_niv_encap_get;
		struct {
			int unit;
			int index;
			bcm_port_t port;
			uint32 * vlan_vec;
		} multicast_repl_get;
		struct {
			int unit;
			int mc_index;
			bcm_port_t port;
			uint32 * vlan_vec;
		} multicast_repl_set;
		struct {
			int unit;
			bcm_multicast_t group;
			uint32 flags;
			int nof_replications;
			bcm_multicast_replication_t * rep_array;
		} multicast_set;
		struct {
			int unit;
			bcm_core_t core_id;
			uint32 flags;
			int command_id;
			bcm_multicast_stat_control_type_t type;
			int * arg;
		} multicast_stat_control_get;
		struct {
			int unit;
			bcm_core_t core_id;
			uint32 flags;
			int command_id;
			bcm_multicast_stat_control_type_t type;
			int arg;
		} multicast_stat_control_set;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t subport;
			bcm_if_t * encap_id;
		} multicast_subport_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t intf;
			bcm_if_t * encap_id;
		} multicast_trill_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t vlan_port_id;
			bcm_if_t * encap_id;
		} multicast_vlan_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t mpls_port_id;
			bcm_if_t * encap_id;
		} multicast_vpls_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t vxlan_port_id;
			bcm_if_t * encap_id;
		} multicast_vxlan_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t wlan_port_id;
			bcm_if_t * encap_id;
		} multicast_wlan_encap_get;
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} niv_cleanup;
		struct {
			int unit;
			bcm_gport_t niv_port;
			bcm_niv_egress_t * niv_egress;
		} niv_egress_add;
		struct {
			int unit;
			bcm_gport_t niv_port;
			bcm_niv_egress_t * niv_egress;
		} niv_egress_delete;
		struct {
			int unit;
			bcm_gport_t niv_port;
		} niv_egress_delete_all;
		struct {
			int unit;
			bcm_gport_t niv_port;
			int array_size;
			bcm_niv_egress_t * niv_egress_array;
			int * count;
		} niv_egress_get;
		struct {
			int unit;
			bcm_gport_t niv_port;
			int array_size;
			bcm_niv_egress_t * niv_egress_array;
		} niv_egress_set;
		struct {
			int unit;
			bcm_niv_forward_t * iv_fwd_entry;
		} niv_forward_add;
		struct {
			int unit;
			bcm_niv_forward_t * iv_fwd_entry;
		} niv_forward_delete;
		struct {
			int unit;
		} niv_forward_delete_all;
		struct {
			int unit;
			bcm_niv_forward_t * iv_fwd_entry;
		} niv_forward_get;
		struct {
			int unit;
			bcm_niv_forward_traverse_cb cb;
			void * user_data;
		} niv_forward_traverse;
		struct {
			int unit;
		} niv_init;
		struct {
			int unit;
			bcm_niv_port_t * niv_port;
		} niv_port_add;
		struct {
			int unit;
			bcm_gport_t niv_port_id;
		} niv_port_delete;
		struct {
			int unit;
		} niv_port_delete_all;
		struct {
			int unit;
			bcm_niv_port_t * niv_port;
		} niv_port_get;
		struct {
			int unit;
			bcm_niv_port_traverse_cb cb;
			void * user_data;
		} niv_port_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_oam_ais_t * ais_ptr;
		} oam_ais_add;
		struct {
			int unit;
			bcm_oam_ais_t * ais_ptr;
		} oam_ais_delete;
		struct {
			int unit;
			bcm_oam_ais_t * ais_ptr;
		} oam_ais_get;
		struct {
			int unit;
			bcm_oam_control_type_t type;
			uint64 * arg;
		} oam_control_get;
		struct {
			int unit;
			bcm_oam_control_key_t key;
			uint64 * arg;
		} oam_control_indexed_get;
		struct {
			int unit;
			bcm_oam_control_key_t key;
			uint64 arg;
		} oam_control_indexed_set;
		struct {
			int unit;
			bcm_oam_control_type_t type;
			uint64 arg;
		} oam_control_set;
		struct {
			int unit;
			bcm_oam_csf_t * csf_ptr;
		} oam_csf_add;
		struct {
			int unit;
			bcm_oam_csf_t * csf_ptr;
		} oam_csf_delete;
		struct {
			int unit;
			bcm_oam_csf_t * csf_ptr;
		} oam_csf_get;
		struct {
			int unit;
			bcm_oam_delay_t * delay_ptr;
		} oam_delay_add;
		struct {
			int unit;
			bcm_oam_delay_t * delay_ptr;
		} oam_delay_delete;
		struct {
			int unit;
			bcm_oam_delay_t * delay_ptr;
		} oam_delay_get;
		struct {
			int unit;
		} oam_detach;
		struct {
			int unit;
			bcm_oam_endpoint_t id;
			bcm_oam_endpoint_action_t * action;
		} oam_endpoint_action_set;
		struct {
			int unit;
			bcm_oam_endpoint_info_t * endpoint_info;
		} oam_endpoint_create;
		struct {
			int unit;
			bcm_oam_endpoint_t endpoint;
		} oam_endpoint_destroy;
		struct {
			int unit;
			bcm_oam_group_t group;
		} oam_endpoint_destroy_all;
		struct {
			int unit;
			bcm_oam_endpoint_t endpoint_id;
			bcm_if_t egress_intf;
		} oam_endpoint_egress_intf_egress_attach;
		struct {
			int unit;
			bcm_oam_endpoint_t endpoint_id;
			int max_count;
			bcm_if_t * egress_intf;
			int * count;
		} oam_endpoint_egress_intf_egress_attach_get;
		struct {
			int unit;
			bcm_oam_endpoint_t endpoint_id;
			bcm_if_t egress_intf;
		} oam_endpoint_egress_intf_egress_detach;
		struct {
			int unit;
			uint32 flags;
			bcm_oam_protocol_type_t endpoint_protocol;
			uint32 max_endpoints;
			bcm_oam_endpoint_fault_t * faults;
			uint32 * endpoint_count;
		} oam_endpoint_faults_multi_get;
		struct {
			int unit;
			bcm_oam_endpoint_t endpoint;
			bcm_oam_endpoint_info_t * endpoint_info;
		} oam_endpoint_get;
		struct {
			int unit;
			bcm_oam_endpoint_t endpoint;
			bcm_gport_t gport;
		} oam_endpoint_gport_egress_attach;
		struct {
			int unit;
			bcm_oam_endpoint_t endpoint;
			int max_count;
			bcm_gport_t * gport;
			int * count;
		} oam_endpoint_gport_egress_attach_get;
		struct {
			int unit;
			bcm_oam_endpoint_t endpoint;
			bcm_gport_t gport;
		} oam_endpoint_gport_egress_detach;
		struct {
			int unit;
			bcm_oam_group_t group;
			bcm_oam_endpoint_traverse_cb cb;
			void * user_data;
		} oam_endpoint_traverse;
		struct {
			int unit;
			bcm_oam_event_types_t event_types;
			bcm_oam_event_cb cb;
			void * user_data;
		} oam_event_register;
		struct {
			int unit;
			bcm_oam_event_types_t event_types;
			bcm_oam_event_cb cb;
		} oam_event_unregister;
		struct {
			int unit;
			bcm_oam_group_info_t * group_info;
		} oam_group_create;
		struct {
			int unit;
			bcm_oam_group_t group;
		} oam_group_destroy;
		struct {
			int unit;
		} oam_group_destroy_all;
		struct {
			int unit;
			bcm_oam_group_t group;
			bcm_oam_group_info_t * group_info;
		} oam_group_get;
		struct {
			int unit;
			bcm_oam_group_traverse_cb cb;
			void * user_data;
		} oam_group_traverse;
		struct {
			int unit;
		} oam_init;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			bcm_oam_profile_t * ingress_oam_profile;
			bcm_oam_profile_t * egress_oam_profile;
		} oam_lif_profile_get;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			bcm_oam_profile_t ingress_oam_profile;
			bcm_oam_profile_t egress_oam_profile;
		} oam_lif_profile_set;
		struct {
			int unit;
			bcm_oam_lookup_type_t type;
			bcm_oam_conditions_t * condition;
		} oam_lookup_enable_get;
		struct {
			int unit;
			bcm_oam_lookup_types_t types;
			bcm_oam_conditions_t conditions;
			int enable;
		} oam_lookup_enable_multi_set;
		struct {
			int unit;
			bcm_oam_lookup_type_t type;
			bcm_oam_condition_t condition;
			int enable;
		} oam_lookup_enable_set;
		struct {
			int unit;
			bcm_oam_loopback_t * loopback_ptr;
		} oam_loopback_add;
		struct {
			int unit;
			bcm_oam_loopback_t * loopback_ptr;
		} oam_loopback_delete;
		struct {
			int unit;
			bcm_oam_loopback_t * loopback_ptr;
		} oam_loopback_get;
		struct {
			int unit;
			bcm_oam_loss_t * loss_ptr;
		} oam_loss_add;
		struct {
			int unit;
			bcm_oam_loss_t * loss_ptr;
		} oam_loss_delete;
		struct {
			int unit;
			bcm_oam_loss_t * loss_ptr;
		} oam_loss_get;
		struct {
			int unit;
			bcm_oam_mpls_tp_channel_type_t channel_type;
			int num_values;
			int * list_of_values;
		} oam_mpls_tp_channel_type_rx_delete;
		struct {
			int unit;
			bcm_oam_mpls_tp_channel_type_t channel_type;
			int num_values;
			int * list_of_values;
			int * value_count;
		} oam_mpls_tp_channel_type_rx_get;
		struct {
			int unit;
			bcm_oam_mpls_tp_channel_type_t channel_type;
			int num_values;
			int * list_of_values;
		} oam_mpls_tp_channel_type_rx_set;
		struct {
			int unit;
			bcm_oam_mpls_tp_channel_type_t channel_type;
			int value;
		} oam_mpls_tp_channel_type_tx_delete;
		struct {
			int unit;
			bcm_oam_mpls_tp_channel_type_t channel_type;
			int * value;
		} oam_mpls_tp_channel_type_tx_get;
		struct {
			int unit;
			bcm_oam_mpls_tp_channel_type_t channel_type;
			int value;
		} oam_mpls_tp_channel_type_tx_set;
		struct {
			int unit;
			bcm_oam_protocol_type_t protocol;
			bcm_oam_opcode_t opcode;
			uint8 * opcode_group;
		} oam_opcode_group_get;
		struct {
			int unit;
			bcm_oam_protocol_type_t protocol;
			bcm_oam_opcodes_t opcodes;
			uint8 opcode_group;
		} oam_opcode_group_set;
		struct {
			int unit;
			int opcode;
			int * profile;
		} oam_opcode_map_get;
		struct {
			int unit;
			int opcode;
			int profile;
		} oam_opcode_map_set;
		struct {
			int unit;
			uint8 * lm_count_profile;
		} oam_opcodes_count_profile_create;
		struct {
			int unit;
			uint8 lm_count_profile;
		} oam_opcodes_count_profile_delete;
		struct {
			int unit;
			uint8 lm_count_profile;
			uint8 count_enable;
			bcm_oam_opcodes_t * opcodes_bitmap;
		} oam_opcodes_count_profile_get;
		struct {
			int unit;
			uint8 lm_count_profile;
			uint8 count_enable;
			bcm_oam_opcodes_t * opcodes_bitmap;
		} oam_opcodes_count_profile_set;
		struct {
			int unit;
			bcm_oam_event_types_t event_types;
			bcm_oam_performance_event_cb cb;
			void * user_data;
		} oam_performance_event_register;
		struct {
			int unit;
			bcm_oam_event_types_t event_types;
			bcm_oam_performance_event_cb cb;
		} oam_performance_event_unregister;
		struct {
			int unit;
			bcm_oam_event_types_t event_types;
			bcm_oam_pm_event_cb cb;
			void * user_data;
		} oam_pm_event_register;
		struct {
			int unit;
			bcm_oam_event_types_t event_types;
			bcm_oam_pm_event_cb cb;
		} oam_pm_event_unregister;
		struct {
			int unit;
			bcm_oam_endpoint_t endpoint_id;
			int profile_id;
		} oam_pm_profile_attach;
		struct {
			int unit;
			bcm_oam_endpoint_t endpoint_id;
			int * profile_id;
		} oam_pm_profile_attach_get;
		struct {
			int unit;
			bcm_oam_pm_profile_info_t * profile_info;
		} oam_pm_profile_create;
		struct {
			int unit;
			bcm_oam_pm_profile_t profile_id;
		} oam_pm_profile_delete;
		struct {
			int unit;
		} oam_pm_profile_delete_all;
		struct {
			int unit;
			bcm_oam_endpoint_t endpoint_id;
			int profile_id;
		} oam_pm_profile_detach;
		struct {
			int unit;
			bcm_oam_pm_profile_info_t * profile_info;
		} oam_pm_profile_get;
		struct {
			int unit;
			bcm_oam_pm_profile_traverse_cb cb;
			void * user_data;
		} oam_pm_profile_traverse;
		struct {
			int unit;
			bcm_oam_event_types_t event_types;
			uint32 read_index;
		} oam_pm_raw_data_read_done;
		struct {
			int unit;
			bcm_oam_endpoint_t endpoint_id;
			bcm_oam_pm_stats_t * stats_ptr;
		} oam_pm_stats_get;
		struct {
			int unit;
			uint32 flags;
			bcm_oam_profile_t profile_id;
			bcm_oam_action_key_t * oam_action_key;
			bcm_oam_action_result_t * oam_action_result;
		} oam_profile_action_get;
		struct {
			int unit;
			uint32 flags;
			bcm_oam_profile_t profile_id;
			bcm_oam_action_key_t * oam_action_key;
			bcm_oam_action_result_t * oam_action_result;
		} oam_profile_action_set;
		struct {
			int unit;
			uint32 flags;
			bcm_oam_profile_type_t oam_profile_type;
			bcm_oam_profile_t * profile_id;
		} oam_profile_create;
		struct {
			int unit;
			uint32 flags;
			bcm_oam_profile_t profile_id;
		} oam_profile_delete;
		struct {
			int unit;
			uint8 profile_id;
			bcm_oam_profile_type_t oam_profile_type;
			uint32 * flags;
			bcm_oam_profile_t * enc_profile_id;
		} oam_profile_id_get_by_type;
		struct {
			int unit;
			bcm_pkt_blk_t * packet_header;
		} oam_protection_packet_header_get;
		struct {
			int unit;
			bcm_pkt_blk_t * packet_header;
		} oam_protection_packet_header_set;
		struct {
			int unit;
			bcm_oam_psc_t * psc_ptr;
		} oam_psc_add;
		struct {
			int unit;
			bcm_oam_psc_t * psc_ptr;
		} oam_psc_delete;
		struct {
			int unit;
			bcm_oam_psc_t * psc_ptr;
		} oam_psc_get;
		struct {
			int unit;
			bcm_oam_pw_status_t * pw_status_ptr;
		} oam_pw_status_add;
		struct {
			int unit;
			bcm_oam_pw_status_t * pw_status_ptr;
		} oam_pw_status_delete;
		struct {
			int unit;
			bcm_oam_pw_status_t * pw_status_ptr;
		} oam_pw_status_get;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t * encap_id;
		} oam_reflector_encap_create;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t encap_id;
		} oam_reflector_encap_destroy;
		struct {
			int unit;
			bcm_oam_sd_sf_detection_t * sd_sf_ptr;
		} oam_sd_sf_detection_add;
		struct {
			int unit;
			bcm_oam_sd_sf_detection_t * sd_sf_ptr;
		} oam_sd_sf_detection_delete;
		struct {
			int unit;
			bcm_oam_sd_sf_detection_t * sd_sf_ptr;
		} oam_sd_sf_detection_get;
		struct {
			int unit;
			bcm_oam_timestamp_format_t ts_format;
			bcm_oam_tod_leap_control_t * leap_info;
		} oam_tod_leap_control_get;
		struct {
			int unit;
			bcm_oam_timestamp_format_t ts_format;
			bcm_oam_tod_leap_control_t leap_info;
		} oam_tod_leap_control_set;
		struct {
			int unit;
			bcm_gport_t trunk_gport;
			int max_ports;
			bcm_gport_t * port_arr;
		} oam_trunk_ports_add;
		struct {
			int unit;
			bcm_gport_t trunk_gport;
			int max_ports;
			bcm_gport_t * port_arr;
		} oam_trunk_ports_delete;
		struct {
			int unit;
			bcm_gport_t trunk_gport;
			int max_ports;
			bcm_gport_t * port_arr;
			int * port_count;
		} oam_trunk_ports_get;
		struct {
			int unit;
			bcm_oam_tst_rx_t * tst_ptr;
		} oam_tst_rx_add;
		struct {
			int unit;
			bcm_oam_tst_rx_t * tst_ptr;
		} oam_tst_rx_delete;
		struct {
			int unit;
			bcm_oam_tst_rx_t * tst_ptr;
		} oam_tst_rx_get;
		struct {
			int unit;
			bcm_oam_tst_tx_t * tst_ptr;
		} oam_tst_tx_add;
		struct {
			int unit;
			bcm_oam_tst_tx_t * tst_ptr;
		} oam_tst_tx_delete;
		struct {
			int unit;
			bcm_oam_tst_tx_t * tst_ptr;
		} oam_tst_tx_get;
		struct {
			int unit;
			bcm_oam_upmep_pdu_type_t upmep_pdu_type;
			bcm_cos_queue_t * cosq;
		} oam_upmep_cosq_get;
		struct {
			int unit;
			bcm_oam_upmep_pdu_type_t upmep_pdu_type;
			bcm_cos_queue_t cosq;
		} oam_upmep_cosq_set;
		struct {
			int unit;
			bcm_oam_y_1711_alarm_t * alarm_ptr;
		} oam_y_1711_alarm_add;
		struct {
			int unit;
			bcm_oam_y_1711_alarm_t * alarm_ptr;
		} oam_y_1711_alarm_delete;
		struct {
			int unit;
			bcm_oam_y_1711_alarm_t * alarm_ptr;
		} oam_y_1711_alarm_get;
		struct {
			int unit;
			bcm_obm_callback_fn fn;
			void * user_data;
		} obm_cb_register;
		struct {
			int unit;
			bcm_obm_callback_fn fn;
			void * user_data;
		} obm_cb_unregister;
		struct {
			int unit;
			bcm_port_t port;
			bcm_obm_max_watermark_mode_t * obm_wm_mode;
		} obm_port_max_usage_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_obm_max_watermark_mode_t obm_wm_mode;
		} obm_port_max_usage_mode_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_obm_lookup_priority_type_t piority_type;
			int priority;
			bcm_obm_traffic_class_t * obm_tc;
		} obm_port_pri_traffic_class_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_obm_lookup_priority_type_t piority_type;
			int priority;
			bcm_obm_traffic_class_t obm_tc;
		} obm_port_pri_traffic_class_mapping_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_obm_traffic_class_t obm_traffic_class;
			int max_pri_count;
			int * priority_list;
			int * pri_count;
		} obm_traffic_class_pfc_priority_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_obm_traffic_class_t obm_traffic_class;
			int max_pri_count;
			int * priority_list;
		} obm_traffic_class_pfc_priority_mapping_set;
		struct {
			int unit;
			bcm_oob_fc_rx_intf_id_t intf_id;
			bcm_oob_fc_rx_config_t * config;
			int array_max;
			bcm_gport_t * gport_array;
			int * array_count;
		} oob_fc_rx_config_get;
		struct {
			int unit;
			bcm_oob_fc_rx_intf_id_t intf_id;
			bcm_oob_fc_rx_config_t * config;
			int array_count;
			bcm_gport_t * gport_array;
		} oob_fc_rx_config_set;
		struct {
			int unit;
			bcm_oob_fc_rx_intf_id_t intf_id;
			bcm_gport_t gport;
			uint32 * offset;
		} oob_fc_rx_port_offset_get;
		struct {
			int unit;
			bcm_oob_fc_rx_intf_id_t intf_id;
			bcm_gport_t gport;
			uint32 tc;
			uint32 * pri_bmp;
		} oob_fc_rx_port_tc_mapping_get;
		struct {
			int unit;
			bcm_oob_fc_rx_intf_id_t intf_id;
			bcm_gport_t gport;
			int array_max;
			uint32 * tc;
			uint32 * pri_bmp;
			int * array_count;
		} oob_fc_rx_port_tc_mapping_multi_get;
		struct {
			int unit;
			bcm_oob_fc_rx_intf_id_t intf_id;
			bcm_gport_t gport;
			int array_count;
			uint32 * tc;
			uint32 * pri_bmp;
		} oob_fc_rx_port_tc_mapping_multi_set;
		struct {
			int unit;
			bcm_oob_fc_rx_intf_id_t intf_id;
			bcm_gport_t gport;
			uint32 tc;
			uint32 pri_bmp;
		} oob_fc_rx_port_tc_mapping_set;
		struct {
			int unit;
			bcm_oob_fc_tx_config_t * config;
		} oob_fc_tx_config_get;
		struct {
			int unit;
			bcm_oob_fc_tx_config_t * config;
		} oob_fc_tx_config_set;
		struct {
			int unit;
			bcm_oob_fc_tx_info_t * info;
		} oob_fc_tx_info_get;
		struct {
			int unit;
			int max_count;
			int * port_array;
			int * oob_port_array;
			int * count;
		} oob_fc_tx_port_mapping_get;
		struct {
			int unit;
			int count;
			int * port_array;
			int * oob_port_array;
		} oob_fc_tx_port_mapping_set;
		struct {
			int unit;
			int profile_id;
			int max_count;
			bcm_oob_fc_tx_queue_config_t * config;
			int * count;
		} oob_fc_tx_queue_profile_get;
		struct {
			int unit;
			int profile_id;
			int count;
			bcm_oob_fc_tx_queue_config_t * config;
		} oob_fc_tx_queue_profile_set;
		struct {
			int unit;
			bcm_oob_stats_config_t * config;
		} oob_stats_config_get;
		struct {
			int unit;
			bcm_oob_stats_config_t * config;
		} oob_stats_config_set;
		struct {
			int unit;
			int offset;
			uint8 * dir;
			bcm_service_pool_id_t * pool;
		} oob_stats_pool_mapping_get;
		struct {
			int unit;
			int array_max;
			int * offset_array;
			uint8 * dir_array;
			bcm_service_pool_id_t * pool_array;
			int * array_count;
		} oob_stats_pool_mapping_multi_get;
		struct {
			int unit;
			int array_count;
			int * offset_array;
			uint8 * dir_array;
			bcm_service_pool_id_t * pool_array;
		} oob_stats_pool_mapping_multi_set;
		struct {
			int unit;
			int offset;
			uint8 dir;
			bcm_service_pool_id_t pool;
		} oob_stats_pool_mapping_set;
		struct {
			int unit;
			int offset;
			bcm_gport_t * gport;
		} oob_stats_queue_mapping_get;
		struct {
			int unit;
			int array_max;
			int * offset_array;
			bcm_gport_t * gport_array;
			int * array_count;
		} oob_stats_queue_mapping_multi_get;
		struct {
			int unit;
			int array_count;
			int * offset_array;
			bcm_gport_t * gport_array;
		} oob_stats_queue_mapping_multi_set;
		struct {
			int unit;
			int offset;
			bcm_gport_t gport;
		} oob_stats_queue_mapping_set;
		struct {
			int unit;
			int size;
			uint32 flags;
			bcm_pkt_t ** pkt_buf;
		} pkt_alloc;
		struct {
			int unit;
			int count;
			int size;
			uint32 flags;
			bcm_pkt_t *** packet_array;
		} pkt_blk_alloc;
		struct {
			int unit;
			bcm_pkt_t ** pkt;
			int count;
		} pkt_blk_free;
		struct {
			bcm_pkt_t * pkt;
			int n;
			int * len;
			int * blk_idx;
			uint8 ** location;
		} pkt_byte_index;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			bcm_pkt_blk_t * blks;
			int blk_count;
			uint32 flags;
			bcm_pkt_t ** pkt_buf;
		} pkt_clear;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			bcm_if_t ecmp_group_id;
		} pkt_ecmp_grp_set;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			bcm_if_t ecmp_group_id;
			bcm_if_t ecmp_member_id;
		} pkt_ecmp_member_set;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			uint32 init_flags;
		} pkt_flags_init;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			int alloc_bytes;
			int payload_len;
			uint32 flags;
		} pkt_flags_len_setup;
		struct {
			int unit;
			bcm_pkt_t * pkt;
		} pkt_free;
		struct {
			bcm_pkt_t * pkt;
			int dest_byte;
			uint8 * src;
			int len;
		} pkt_memcpy;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			bcm_if_t nexthop_id;
		} pkt_nexthop_set;
		struct {
			int unit;
			int len;
			bcm_pkt_t ** pkt_buf;
		} pkt_rx_alloc;
		struct {
			int unit;
			bcm_pkt_t * pkt;
		} pkt_rx_free;
		struct {
			int unit;
			uint32 max_size;
			uint32 flags;
			bcm_pktio_pkt_t ** packet;
		} pktio_alloc;
		struct {
			int unit;
			bcm_pktio_pkt_t * pkt;
			bcm_pktio_pkt_t ** new_pkt;
		} pktio_claim;
		struct {
			int unit;
		} pktio_cleanup;
		struct {
			int unit;
			bcm_pktio_filter_t * filter;
		} pktio_filter_create;
		struct {
			int unit;
			int filter_id;
		} pktio_filter_destroy;
		struct {
			int unit;
			int filter_id;
			bcm_pktio_filter_t * filter;
		} pktio_filter_get;
		struct {
			int unit;
			bcm_pktio_filter_traverse_cb_f cb_func;
			void * cb_data;
		} pktio_filter_traverse;
		struct {
			int unit;
			bcm_pktio_pkt_t * packet;
		} pktio_free;
		struct {
			int unit;
		} pktio_init;
		struct {
			int unit;
			bcm_pktio_netif_t * netif;
		} pktio_netif_create;
		struct {
			int unit;
			int netif_id;
		} pktio_netif_destroy;
		struct {
			int unit;
			int netif_id;
			bcm_pktio_netif_t * netif;
		} pktio_netif_get;
		struct {
			int unit;
			int netif_id;
			int status;
		} pktio_netif_link_status_set;
		struct {
			int unit;
			bcm_pktio_netif_traverse_cb_f cb_func;
			void * cb_data;
		} pktio_netif_traverse;
		struct {
			int unit;
			bcm_pktio_pkt_t * packet;
			void ** data;
			uint32 * length;
		} pktio_pkt_data_get;
		struct {
			int unit;
			bcm_pktio_fid_support_t * support;
		} pktio_pmd_fid_support_get;
		struct {
			int unit;
			bcm_pktio_pkt_t * packet;
			bcm_pktio_pmd_type_t type;
			int fid;
			uint32 * val;
		} pktio_pmd_field_get;
		struct {
			int unit;
			bcm_pktio_pkt_t * packet;
			bcm_pktio_pmd_type_t type;
			int fid;
			uint32 val;
		} pktio_pmd_field_set;
		struct {
			int unit;
			int array_size;
			uint32 * match_id_array;
			int * count;
			bcm_pktio_bitmap_t * pkt_format;
		} pktio_pmd_pkt_format_get;
		struct {
			int unit;
			bcm_pktio_pkt_t * packet;
			bcm_pktio_reasons_t * reasons;
		} pktio_pmd_reasons_get;
		struct {
			int unit;
			bcm_pktio_pkt_t * packet;
			bcm_pktio_txpmd_t * txpmd;
		} pktio_pmd_set;
		struct {
			int unit;
			bcm_pktio_pkt_t * packet;
			uint32 len;
			void ** data;
		} pktio_pull;
		struct {
			int unit;
			bcm_pktio_pkt_t * packet;
			uint32 len;
			void ** data;
		} pktio_push;
		struct {
			int unit;
			bcm_pktio_pkt_t * packet;
			uint32 len;
			void ** data;
		} pktio_put;
		struct {
			int unit;
			bcm_pktio_pmd_t * pmd;
			bcm_pktio_fid_support_t * support;
		} pktio_raw_pmd_fid_support_get;
		struct {
			int unit;
			bcm_pktio_pmd_t * pmd;
			bcm_pktio_pmd_type_t type;
			int fid;
			uint32 * val;
		} pktio_raw_pmd_field_get;
		struct {
			int unit;
			bcm_pktio_pmd_t * pmd;
			bcm_pktio_pmd_type_t type;
			int fid;
			uint32 val;
		} pktio_raw_pmd_field_set;
		struct {
			int unit;
			bcm_pktio_pmd_t * pmd;
			bcm_pktio_reasons_t * reasons;
		} pktio_raw_pmd_reasons_get;
		struct {
			int unit;
			bcm_pktio_pmd_t * pmd;
			bcm_pktio_reasons_t * reasons;
		} pktio_raw_pmd_reasons_set;
		struct {
			int unit;
			bcm_pktio_pkt_t * packet;
			uint32 len;
			void ** data;
		} pktio_reserve;
		struct {
			int unit;
			char * name;
			bcm_pktio_rx_cb_f callback;
			uint8 priority;
			void * cookie;
			uint32 flags;
		} pktio_rx_register;
		struct {
			int unit;
			bcm_pktio_rx_cb_f callback;
			uint8 priority;
		} pktio_rx_unregister;
		struct {
			int unit;
			bcm_pktio_trace_data_t * trace_data;
			bcm_pktio_bitmap_t * bitmap;
		} pktio_trace_counter_get;
		struct {
			int unit;
			bcm_pktio_trace_pkt_t * trace_pkt;
			bcm_pktio_trace_data_t * trace_data;
		} pktio_trace_data_collect;
		struct {
			int unit;
			bcm_port_t port;
			uint32 dop_id;
			bcm_pktio_trace_data_t * trace_data;
		} pktio_trace_dop_data_collect;
		struct {
			int unit;
			bcm_pktio_trace_data_t * trace_data;
			bcm_pktio_bitmap_t * bitmap;
		} pktio_trace_drop_reasons_get;
		struct {
			int unit;
			bcm_pktio_trace_data_t * trace_data;
			int fid;
			uint32 * val;
		} pktio_trace_field_get;
		struct {
			int unit;
			bcm_pktio_trace_pkt_t * trace_pkt;
		} pktio_trace_tx;
		struct {
			int unit;
			bcm_pktio_pkt_t * packet;
			uint32 len;
		} pktio_trim;
		struct {
			int unit;
			bcm_pktio_pkt_t * packet;
		} pktio_tx;
		struct {
			int unit;
			uint32 action_id;
			bcm_policer_action_t action;
			uint32 param0;
		} policer_action_add;
		struct {
			int unit;
			bcm_policer_t policer_id;
			uint32 action_id;
		} policer_action_attach;
		struct {
			int unit;
			bcm_policer_t policer_id;
			uint32 * action_id;
		} policer_action_attach_get;
		struct {
			int unit;
			uint32 * action_id;
		} policer_action_create;
		struct {
			int unit;
			uint32 action_id;
		} policer_action_destroy;
		struct {
			int unit;
			bcm_policer_t policer_id;
			uint32 action_id;
		} policer_action_detach;
		struct {
			int unit;
			uint32 action_id;
			bcm_policer_action_t action;
			uint32 * param0;
		} policer_action_get;
		struct {
			int unit;
			bcm_policer_aggregate_group_info_t * info;
			bcm_policer_t * policer_id;
			int * npolicers;
		} policer_aggregate_group_create;
		struct {
			int unit;
			bcm_policer_color_decision_t * policer_color_decision;
		} policer_color_decision_get;
		struct {
			int unit;
			bcm_policer_color_decision_t * policer_color_decision;
		} policer_color_decision_set;
		struct {
			int unit;
			bcm_policer_color_resolution_t * policer_color_resolution;
		} policer_color_resolution_get;
		struct {
			int unit;
			bcm_policer_color_resolution_t * policer_color_resolution;
		} policer_color_resolution_set;
		struct {
			int unit;
			int flags;
			int policer_database_handle;
			bcm_policer_control_type_t type;
			uint32 * arg;
		} policer_control_get;
		struct {
			int unit;
			int flags;
			int policer_database_handle;
			bcm_policer_control_type_t type;
			uint32 arg;
		} policer_control_set;
		struct {
			int unit;
			bcm_policer_config_t * pol_cfg;
			bcm_policer_t * policer_id;
		} policer_create;
		struct {
			int unit;
			uint32 flags;
			uint32 mode_id;
			bcm_policer_t macro_flow_policer_id;
			bcm_policer_t * policer_id;
			uint32 * npolicers;
		} policer_custom_group_create;
		struct {
			int unit;
			bcm_policer_group_info_t * old_policer_group_info;
			bcm_policer_group_info_t * new_policer_group_info;
		} policer_custom_group_id_copy;
		struct {
			int unit;
			uint32 flags;
			uint32 mode_id;
			bcm_policer_t macro_flow_policer_id;
			bcm_policer_group_info_t * policer_group_info;
		} policer_custom_group_id_create;
		struct {
			int unit;
			int flags;
			int policer_database_handle;
			bcm_policer_database_config_t * config;
		} policer_database_create;
		struct {
			int unit;
			int flags;
			int policer_database_handle;
		} policer_database_destroy;
		struct {
			int unit;
			int flags;
			int policer_database_handle;
			int * enable;
		} policer_database_enable_get;
		struct {
			int unit;
			int flags;
			int policer_database_handle;
			int enable;
		} policer_database_enable_set;
		struct {
			int unit;
			bcm_policer_t policer_id;
		} policer_destroy;
		struct {
			int unit;
		} policer_destroy_all;
		struct {
			int unit;
			int flags;
			bcm_policer_engine_t * engine;
			bcm_policer_database_attach_config_t * config;
		} policer_engine_database_attach;
		struct {
			int unit;
			int flags;
			bcm_policer_engine_t * engine;
		} policer_engine_database_detach;
		struct {
			int unit;
			int flags;
			bcm_policer_engine_t * engine;
			bcm_policer_database_attach_config_t * config;
		} policer_engine_database_get;
		struct {
			int unit;
			uint32 flag;
			bcm_policer_t macro_flow_policer_id;
			bcm_policer_t * policer_id;
		} policer_envelop_create;
		struct {
			int unit;
			uint32 flag;
			bcm_policer_group_mode_t mode;
			bcm_policer_t macro_flow_policer_id;
			bcm_policer_t * policer_id;
			int * npolicers;
		} policer_envelop_group_create;
		struct {
			int unit;
			int flags;
			bcm_core_t core_id;
			bcm_policer_expansion_group_t * expansion_group;
		} policer_expansion_groups_get;
		struct {
			int unit;
			int flags;
			bcm_core_t core_id;
			bcm_policer_expansion_group_t * expansion_group;
		} policer_expansion_groups_set;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_policer_config_t * pol_cfg;
		} policer_get;
		struct {
			int unit;
			bcm_policer_global_meter_config_t * config;
		} policer_global_meter_config_get;
		struct {
			int unit;
			bcm_policer_global_meter_config_t * config;
		} policer_global_meter_config_set;
		struct {
			int unit;
			bcm_policer_group_mode_t mode;
			bcm_policer_t * policer_id;
			int * npolicers;
		} policer_group_create;
		struct {
			int unit;
			bcm_policer_group_mode_t mode;
			bcm_policer_map_t * offset_map;
			bcm_policer_t * policer_id;
			int * num_policers;
		} policer_group_create_with_map;
		struct {
			int unit;
			bcm_policer_t base_policer_id;
			int member_max;
			bcm_policer_t * member_array;
			int * member_count;
		} policer_group_get;
		struct {
			int unit;
			uint32 flags;
			bcm_policer_group_mode_type_t type;
			uint32 total_policers;
			uint32 num_selectors;
			bcm_policer_group_mode_attr_selector_t * attr_selectors;
			uint32 * mode_id;
		} policer_group_mode_id_create;
		struct {
			int unit;
			uint32 mode_id;
		} policer_group_mode_id_destroy;
		struct {
			int unit;
			uint32 mode_id;
			uint32 num_selectors;
			uint32 * flags;
			bcm_policer_group_mode_type_t * type;
			uint32 * total_policers;
			bcm_policer_group_mode_attr_selector_t * attr_selectors;
			uint32 * actual_num_selectors;
		} policer_group_mode_id_get;
		struct {
			int unit;
		} policer_init;
		struct {
			int unit;
			bcm_policer_t policer_id;
			uint32 * count;
		} policer_packet_counter_get32;
		struct {
			int unit;
			bcm_policer_t policer_id;
			uint32 * count;
		} policer_packet_reset_counter_get32;
		struct {
			int unit;
			int flags;
			bcm_policer_primary_color_resolution_key_t * key;
			bcm_policer_primary_color_resolution_config_t * config;
		} policer_primary_color_resolution_get;
		struct {
			int unit;
			int flags;
			bcm_policer_primary_color_resolution_key_t * key;
			bcm_policer_primary_color_resolution_config_t * config;
		} policer_primary_color_resolution_set;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_policer_config_t * pol_cfg;
		} policer_set;
		struct {
			int unit;
			bcm_policer_t policer_id;
			int * enable;
		} policer_stat_enable_get;
		struct {
			int unit;
			bcm_policer_t policer_id;
			int enable;
		} policer_stat_enable_set;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_cos_t int_pri;
			bcm_policer_stat_t stat;
			uint64 * value;
		} policer_stat_get;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_cos_t int_pri;
			bcm_policer_stat_t stat;
			uint32 * value;
		} policer_stat_get32;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_cos_t int_pri;
			bcm_policer_stat_t stat;
			uint64 value;
		} policer_stat_set;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_cos_t int_pri;
			bcm_policer_stat_t stat;
			uint32 value;
		} policer_stat_set32;
		struct {
			int unit;
			bcm_policer_traverse_cb cb;
			void * user_data;
		} policer_traverse;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_ability_t * ability_mask;
		} port_ability_advert_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_ability_t * ability_mask;
		} port_ability_advert_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_abil_t * local_ability_mask;
		} port_ability_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_ability_t * local_ability_mask;
		} port_ability_local_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_ability_t * ability_mask;
		} port_ability_remote_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_port_interface_info_t * interface_info;
			bcm_port_mapping_info_t * mapping_info;
		} port_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_abil_t * ability_mask;
		} port_advert_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_abil_t * ability_mask;
		} port_advert_remote_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_abil_t ability_mask;
		} port_advert_set;
		struct {
			int unit;
			bcm_port_t port;
			int max_num_ability;
			bcm_port_speed_ability_t * abilities_array;
			int * actual_num_ability;
		} port_autoneg_ability_advert_get;
		struct {
			int unit;
			bcm_port_t port;
			int num_ability;
			bcm_port_speed_ability_t * abilities_array;
		} port_autoneg_ability_advert_set;
		struct {
			int unit;
			bcm_port_t port;
			int max_num_ability;
			bcm_port_speed_ability_t * abilities_array;
			int * actual_num_ability;
		} port_autoneg_ability_remote_get;
		struct {
			int unit;
			bcm_port_t port;
			int * autoneg;
		} port_autoneg_get;
		struct {
			int unit;
			bcm_port_t port;
			int autoneg;
		} port_autoneg_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} port_bpdu_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} port_bpdu_enable_set;
		struct {
			int unit;
			int buffer_id;
			bcm_pbmp_t * pbmp;
		} port_buffer_pbmp_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_cable_diag_t * status;
		} port_cable_diag;
		struct {
			int unit;
			bcm_port_t port;
			int cfi;
			bcm_color_t * color;
		} port_cfi_color_get;
		struct {
			int unit;
			bcm_port_t port;
			int cfi;
			bcm_color_t color;
		} port_cfi_color_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_class_t pclass;
			uint32 * class_id;
		} port_class_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_class_t pclass;
			uint32 class_id;
		} port_class_set;
		struct {
			int unit;
		} port_clear;
		struct {
			int unit;
			bcm_port_config_t * config;
		} port_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_config_phy_oam_t * conf;
		} port_config_phy_oam_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_config_phy_oam_t * conf;
		} port_config_phy_oam_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_congestion_config_t * config;
		} port_congestion_config_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_congestion_config_t * config;
		} port_congestion_config_set;
		struct {
			int unit;
			bcm_gport_t congestion_port;
			bcm_gport_t port;
			uint32 flags;
			int * channel_id;
		} port_congestion_get;
		struct {
			int unit;
			bcm_gport_t congestion_port;
			bcm_gport_t port;
			uint32 flags;
			int channel_id;
		} port_congestion_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_control_t type;
			int * value;
		} port_control_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_control_phy_oam_t type;
			uint64 * value;
		} port_control_phy_oam_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_control_phy_oam_t type;
			uint64 value;
		} port_control_phy_oam_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_control_phy_timesync_t type;
			uint64 * value;
		} port_control_phy_timesync_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_control_phy_timesync_t type;
			uint64 value;
		} port_control_phy_timesync_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_control_t type;
			int value;
		} port_control_set;
		struct {
			int unit;
			bcm_pbmp_t pbmp;
			bcm_pbmp_t * detached;
		} port_detach;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_discard_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_discard_set;
		struct {
			int unit;
			bcm_port_t port;
			int srccp;
			int * mapcp;
			int * prio;
		} port_dscp_map_get;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_dscp_map_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_dscp_map_mode_set;
		struct {
			int unit;
			bcm_port_t port;
			int srccp;
			int mapcp;
			int prio;
		} port_dscp_map_set;
		struct {
			int unit;
			bcm_port_t port;
			int internal_pri;
			bcm_color_t color;
			int * pkt_dscp;
		} port_dscp_unmap_get;
		struct {
			int unit;
			bcm_port_t port;
			int internal_pri;
			bcm_color_t color;
			int pkt_dscp;
		} port_dscp_unmap_set;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_dtag_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_dtag_mode_set;
		struct {
			int unit;
			bcm_port_t port;
			int * duplex;
		} port_duplex_get;
		struct {
			int unit;
			bcm_port_t port;
			int duplex;
		} port_duplex_set;
		struct {
			int unit;
			bcm_module_t remote_module;
			bcm_port_e2efc_mode_t mode;
			int * enable;
			bcm_port_e2efc_remote_module_config_t * e2efc_rmod_cfg;
		} port_e2efc_remote_module_enable_get;
		struct {
			int unit;
			bcm_module_t remote_module;
			bcm_port_e2efc_mode_t mode;
			int enable;
			bcm_port_e2efc_remote_module_config_t * e2efc_rmod_cfg;
		} port_e2efc_remote_module_enable_set;
		struct {
			int unit;
			bcm_port_e2efc_remote_module_traverse_cb cb;
			void * user_data;
		} port_e2efc_remote_module_traverse;
		struct {
			int unit;
			bcm_port_e2efc_remote_port_config_t * e2efc_rport_cfg;
			int * rport_handle_id;
		} port_e2efc_remote_port_add;
		struct {
			int unit;
			int rport_handle_id;
		} port_e2efc_remote_port_delete;
		struct {
			int unit;
			int rport_handle_id;
			bcm_port_e2efc_remote_port_config_t * e2efc_rport_cfg;
		} port_e2efc_remote_port_get;
		struct {
			int unit;
			int rport_handle_id;
			bcm_port_e2efc_remote_port_config_t * e2efc_rport_cfg;
		} port_e2efc_remote_port_set;
		struct {
			int unit;
			bcm_port_e2efc_remote_port_traverse_cb cb;
			void * user_data;
		} port_e2efc_remote_port_traverse;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			bcm_pbmp_t * pbmp;
		} port_egress_get;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			bcm_pbmp_t pbmp;
		} port_egress_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} port_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} port_enable_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_encap_config_t * encap_config;
		} port_encap_config_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_encap_config_t * encap_config;
		} port_encap_config_set;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_encap_get;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			int * encap_local_id;
		} port_encap_local_get;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t encap_id;
			bcm_gport_t * port;
		} port_encap_map_get;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t encap_id;
			bcm_gport_t port;
		} port_encap_map_set;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_encap_set;
		struct {
			int unit;
			uint32 flags;
			bcm_port_extender_mapping_type_t type;
			bcm_port_extender_mapping_info_t * mapping_info;
		} port_extender_mapping_info_get;
		struct {
			int unit;
			uint32 flags;
			bcm_port_extender_mapping_type_t type;
			bcm_port_extender_mapping_info_t * mapping_info;
		} port_extender_mapping_info_set;
		struct {
			int unit;
		} port_fast_reboot_traffic_enable;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_fault_get;
		struct {
			int unit;
			bcm_port_fdr_handler_t f;
			void * user_data;
		} port_fdr_callback_register;
		struct {
			int unit;
			bcm_port_fdr_handler_t f;
			void * user_data;
		} port_fdr_callback_unregister;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_fdr_config_t * fdr_config;
		} port_fdr_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_fdr_config_t * fdr_config;
		} port_fdr_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_fdr_stats_t * fdr_stats;
		} port_fdr_stats_get;
		struct {
			int unit;
			bcm_port_t src_port;
			int channel;
			bcm_port_t dest_port;
		} port_flexe_flow_clear;
		struct {
			int unit;
			uint32 flags;
			bcm_port_t src_port;
			int channel;
			bcm_port_t dest_port;
		} port_flexe_flow_set;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			bcm_port_flexe_group_cal_t * active_cal;
		} port_flexe_group_cal_active_get;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			bcm_port_flexe_group_cal_t active_cal;
		} port_flexe_group_cal_active_set;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			bcm_port_flexe_group_cal_t calendar_id;
			int max_nof_slots;
			int * calendar_slots;
			int * actual_nof_slots;
		} port_flexe_group_cal_slots_get;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			bcm_port_flexe_group_cal_t calendar_id;
			int nof_slots;
			int * calendar_slots;
		} port_flexe_group_cal_slots_set;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			int nof_pcs;
			bcm_port_flexe_group_phy_info_t * phy_info;
		} port_flexe_group_create;
		struct {
			int unit;
			bcm_gport_t gport;
		} port_flexe_group_destroy;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			int max_nof_pcs;
			bcm_port_flexe_group_phy_info_t * phy_info;
			int * actual_nof_pcs;
		} port_flexe_group_get;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			bcm_port_flexe_group_phy_info_t * phy_info;
		} port_flexe_group_phy_add;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			bcm_port_flexe_group_phy_info_t * phy_info;
		} port_flexe_group_phy_remove;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_port_flexe_oam_alarm_t * alarms;
		} port_flexe_oam_alarm_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_port_flexe_oam_control_type_t type;
			uint32 * val;
		} port_flexe_oam_control_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_port_flexe_oam_control_type_t type;
			uint32 val;
		} port_flexe_oam_control_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_port_flexe_oam_stat_t stat;
			uint64 * val;
		} port_flexe_oam_stat_get;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			bcm_port_flexe_oh_alarm_t * alarms;
		} port_flexe_oh_alarm_get;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			bcm_port_flexe_oh_type_t type;
			int * val;
		} port_flexe_oh_get;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			bcm_port_flexe_oh_type_t type;
			int val;
		} port_flexe_oh_set;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 action_id;
		} port_flexstate_attach;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 action_id;
		} port_flexstate_detach_with_id;
		struct {
			int unit;
			bcm_port_t ingress_port;
			bcm_port_t egress_port;
			uint32 * flags;
		} port_flood_block_get;
		struct {
			int unit;
			bcm_port_t ingress_port;
			bcm_port_t egress_port;
			uint32 flags;
		} port_flood_block_set;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flags;
			bcm_port_flood_group_t * flood_groups;
		} port_flood_group_get;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flags;
			bcm_port_flood_group_t * flood_groups;
		} port_flood_group_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_dest_info_t * dest_info;
		} port_force_dest_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_dest_info_t * dest_info;
		} port_force_dest_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_t * egr_port;
			int * enabled;
		} port_force_forward_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_t * egr_port;
			uint32 * flags;
		} port_force_forward_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_t egr_port;
			uint32 flags;
		} port_force_forward_mode_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_t egr_port;
			int enable;
		} port_force_forward_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t * vlan;
			int * pkt_prio;
			uint32 * flags;
		} port_force_vlan_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int pkt_prio;
			uint32 flags;
		} port_force_vlan_set;
		struct {
			int unit;
			bcm_port_t port;
			int * size;
		} port_frame_max_get;
		struct {
			int unit;
			bcm_port_t port;
			int size;
		} port_frame_max_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
			bcm_port_interface_info_t * interface_info;
			bcm_port_mapping_info_t * mapping_info;
		} port_get;
		struct {
			int unit;
			bcm_port_t local_port;
			bcm_gport_t modport;
		} port_gport_add;
		struct {
			int unit;
			bcm_port_t local_port;
			bcm_gport_t modport;
		} port_gport_delete;
		struct {
			int unit;
			bcm_port_t local_port;
		} port_gport_delete_all;
		struct {
			int unit;
			uint32 gport_type;
			bcm_gport_t * gport_min;
			bcm_gport_t * gport_max;
		} port_gport_free_range_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_gport_t * gport;
		} port_gport_get;
		struct {
			int unit;
			bcm_port_t local_port;
			int size;
			bcm_gport_t * gport_array;
			int * count;
		} port_gport_get_all;
		struct {
			int unit;
			bcm_gport_t gport;
		} port_gport_is_free;
		struct {
			int unit;
			bcm_port_group_type_t type;
			bcm_port_group_range_t * range;
		} port_group_range_get;
		struct {
			int unit;
			bcm_port_t port;
			int speed;
			bcm_port_duplex_t duplex;
			int * bit_times;
		} port_ifg_get;
		struct {
			int unit;
			bcm_port_t port;
			int speed;
			bcm_port_duplex_t duplex;
			int bit_times;
		} port_ifg_set;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_ifilter_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_ifilter_set;
		struct {
			int unit;
			int flags;
			bcm_port_t port;
			int num_of_lanes;
			int * lanes;
		} port_ilkn_lane_map_get;
		struct {
			int unit;
			int flags;
			bcm_port_t port;
			int num_of_lanes;
			int * lanes;
		} port_ilkn_lane_map_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_info_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_info_restore;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_info_save;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_info_set;
		struct {
			int unit;
			int flag;
			bcm_pbmp_t * tdm_enable_pbmp;
		} port_ingress_tdm_failover_get;
		struct {
			int unit;
			int flag;
			bcm_pbmp_t tdm_enable_pbmp;
		} port_ingress_tdm_failover_set;
		struct {
			int unit;
		} port_init;
		struct {
			int unit;
			bcm_port_t port;
			uint16 * tpid;
		} port_inner_tpid_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
		} port_inner_tpid_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_interface_config_t * config;
		} port_interface_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_interface_config_t * config;
		} port_interface_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_if_t * intf;
		} port_interface_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_if_t intf;
		} port_interface_set;
		struct {
			int unit;
			uint32 flags;
			int internal_ports_max;
			bcm_gport_t * internal_gport;
			int * internal_ports_count;
		} port_internal_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_ipmc_modify_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} port_ipmc_modify_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} port_jam_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} port_jam_set;
		struct {
			int unit;
			int interface_id;
			bcm_gport_t * port;
		} port_l2_interface_gport_get;
		struct {
			int unit;
			bcm_gport_t port;
			int * interface_id;
		} port_l2_interface_id_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
			int color_select;
		} port_l2_tunnel_payload_tpid_add;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
		} port_l2_tunnel_payload_tpid_delete;
		struct {
			int unit;
			bcm_port_t port;
		} port_l2_tunnel_payload_tpid_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			uint16 * tpid;
		} port_l2_tunnel_payload_tpid_get;
		struct {
			int unit;
			bcm_port_t port;
			int size;
			uint16 * tpid_array;
			int * color_array;
			int * count;
		} port_l2_tunnel_payload_tpid_get_all;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
		} port_l2_tunnel_payload_tpid_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} port_l3_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} port_l3_enable_set;
		struct {
			int unit;
			bcm_port_t port;
			int * size;
		} port_l3_encapsulated_mtu_get;
		struct {
			int unit;
			bcm_port_t port;
			int size;
		} port_l3_encapsulated_mtu_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_l3_modify_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} port_l3_modify_set;
		struct {
			int unit;
			bcm_port_t port;
			int * size;
		} port_l3_mtu_get;
		struct {
			int unit;
			bcm_port_t port;
			int size;
		} port_l3_mtu_set;
		struct {
			int unit;
			int flags;
			int map_size;
			bcm_port_lane_to_serdes_map_t * serdes_map;
		} port_lane_to_serdes_map_get;
		struct {
			int unit;
			int flags;
			int map_size;
			bcm_port_lane_to_serdes_map_t * serdes_map;
		} port_lane_to_serdes_map_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_learn_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 add;
			uint32 remove;
		} port_learn_modify;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} port_learn_set;
		struct {
			int unit;
			bcm_port_t port;
		} port_link_failed_clear;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_port_link_state_t * state;
		} port_link_state_get;
		struct {
			int unit;
			bcm_port_t port;
			int * status;
		} port_link_status_get;
		struct {
			int unit;
			bcm_port_t port;
			int * linkscan;
		} port_linkscan_get;
		struct {
			int unit;
			bcm_port_t port;
			int linkscan;
		} port_linkscan_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_t * local_port;
		} port_local_get;
		struct {
			int unit;
			bcm_port_t port;
			int * loopback;
		} port_loopback_get;
		struct {
			int unit;
			bcm_port_t port;
			int loopback;
		} port_loopback_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_management_packet_config_t * config_array;
			int max_config;
			int * config_count;
		} port_management_packet_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_management_packet_config_t * config;
		} port_management_packet_config_set;
		struct {
			int unit;
			bcm_port_t port;
			int * ms;
		} port_master_get;
		struct {
			int unit;
			bcm_port_t port;
			int ms;
		} port_master_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_match_info_t * match;
		} port_match_add;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_match_info_t * match;
		} port_match_delete;
		struct {
			int unit;
			bcm_gport_t port;
		} port_match_delete_all;
		struct {
			int unit;
			bcm_gport_t port;
			int size;
			bcm_port_match_info_t * match_array;
			int * count;
		} port_match_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_match_info_t * old_match;
			bcm_port_match_info_t * new_match;
		} port_match_replace;
		struct {
			int unit;
			bcm_gport_t port;
			int size;
			bcm_port_match_info_t * match_array;
		} port_match_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_mdix_t * mode;
		} port_mdix_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_mdix_t mode;
		} port_mdix_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_mdix_status_t * status;
		} port_mdix_status_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_t medium;
			bcm_phy_config_t * config;
		} port_medium_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_t medium;
			bcm_phy_config_t * config;
		} port_medium_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_t * medium;
		} port_medium_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_status_cb_t callback;
			void * user_data;
		} port_medium_status_register;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_status_cb_t callback;
			void * user_data;
		} port_medium_status_unregister;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t modid;
			bcm_pbmp_t * pbmp;
		} port_modid_egress_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t modid;
			bcm_pbmp_t pbmp;
		} port_modid_egress_set;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			int * enable;
		} port_modid_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			int enable;
		} port_modid_enable_set;
		struct {
			int unit;
			bcm_gport_t local_port;
			uint32 flags;
			bcm_port_nif_prio_t * priority;
			bcm_pbmp_t * affected_ports;
		} port_nif_priority_get;
		struct {
			int unit;
			bcm_gport_t local_port;
			uint32 flags;
			bcm_port_nif_prio_t * priority;
			bcm_pbmp_t * affected_ports;
		} port_nif_priority_set;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * mac;
		} port_pause_addr_get;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * mac;
		} port_pause_addr_set;
		struct {
			int unit;
			bcm_port_t port;
			int * pause_tx;
			int * pause_rx;
		} port_pause_get;
		struct {
			int unit;
			bcm_port_t port;
			int pause_tx;
			int pause_rx;
		} port_pause_set;
		struct {
			int unit;
			bcm_port_t port;
			int * pause;
		} port_pause_sym_get;
		struct {
			int unit;
			bcm_port_t port;
			int pause;
		} port_pause_sym_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			int num_map;
			bcm_port_lane_to_serdes_map_t * serdes_map;
		} port_pcs_lane_map_set;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_pfm_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_pfm_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_control_t type;
			uint32 * value;
		} port_phy_control_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_control_t type;
			uint32 value;
		} port_phy_control_set;
		struct {
			int unit;
			bcm_port_t port;
			char * name;
			int len;
		} port_phy_drv_name_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 * error_control_map;
			bcm_port_phy_fec_error_mask_t * bit_error_mask;
		} port_phy_fec_error_inject_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 error_control_map;
			bcm_port_phy_fec_error_mask_t bit_error_mask;
		} port_phy_fec_error_inject_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			int offset;
			uint8 * array;
			int length;
		} port_phy_firmware_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 phy_reg_addr;
			uint32 * phy_data;
		} port_phy_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 phy_reg_addr;
			uint32 phy_data;
			uint32 phy_mask;
		} port_phy_modify;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 dev_addr;
			uint32 offset;
			int max_size;
			uint8 * data;
			int * actual_size;
		} port_phy_multi_get;
		struct {
			int unit;
			bcm_port_t port;
		} port_phy_reset;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_reset_cb_t callback;
			void * user_data;
		} port_phy_reset_register;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_reset_cb_t callback;
			void * user_data;
		} port_phy_reset_unregister;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 phy_reg_addr;
			uint32 phy_data;
		} port_phy_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_timesync_config_t * conf;
		} port_phy_timesync_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_timesync_config_t * conf;
		} port_phy_timesync_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_timesync_enhanced_capture_t * value;
		} port_phy_timesync_enhanced_capture_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_tx_t * tx;
		} port_phy_tx_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_tx_t * tx;
		} port_phy_tx_set;
		struct {
			int unit;
			int pipe;
			bcm_pbmp_t * pbmp;
		} port_pipe_pbmp_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_policer_t * policer_id;
		} port_policer_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_policer_t policer_id;
		} port_policer_set;
		struct {
			int unit;
			bcm_port_t pon_port;
			bcm_port_pon_info_t * info;
		} port_pon_info_get;
		struct {
			int unit;
			bcm_port_t pon_port;
			bcm_port_pon_info_t * info;
		} port_pon_info_set;
		struct {
			int unit;
			bcm_gport_t pon_port;
			uint32 flags;
			bcm_gport_t * tunnel_port_id;
		} port_pon_tunnel_add;
		struct {
			int unit;
			bcm_gport_t pon_port;
			bcm_tunnel_id_t tunnel_id;
			bcm_gport_t * tunnel_port_id;
		} port_pon_tunnel_map_get;
		struct {
			int unit;
			bcm_gport_t pon_port;
			bcm_tunnel_id_t tunnel_id;
			bcm_gport_t tunnel_port_id;
		} port_pon_tunnel_map_set;
		struct {
			int unit;
			bcm_gport_t tunnel_port_id;
		} port_pon_tunnel_remove;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_ber_proj_params_t * ber_proj;
			int max_errcnt;
			bcm_port_ber_proj_analyzer_errcnt_t * errcnt_array;
			int * actual_errcnt;
		} port_post_ber_proj_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_preempt_control_t type;
			uint32 * arg;
		} port_preemption_control_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_preempt_control_t type;
			uint32 arg;
		} port_preemption_control_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_preempt_status_t type;
			uint32 * status;
		} port_preemption_status_get;
		struct {
			int unit;
			bcm_port_t port;
			int prio;
			bcm_color_t * color;
		} port_priority_color_get;
		struct {
			int unit;
			bcm_port_t port;
			int prio;
			bcm_color_t color;
		} port_priority_color_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_prio_config_t * priority_config;
		} port_priority_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_prio_config_t * port_priority_config;
		} port_priority_config_set;
		struct {
			int unit;
			bcm_gport_t gport;
			int priority_group;
			bcm_port_priority_group_config_t * prigrp_config;
		} port_priority_group_config_get;
		struct {
			int unit;
			bcm_gport_t gport;
			int priority_group;
			bcm_port_priority_group_config_t * prigrp_config;
		} port_priority_group_config_set;
		struct {
			int unit;
			bcm_gport_t gport;
			int prio;
			int * priority_group;
		} port_priority_group_mapping_get;
		struct {
			int unit;
			bcm_gport_t gport;
			int prio;
			int priority_group;
		} port_priority_group_mapping_set;
		struct {
			int unit;
			bcm_pbmp_t pbmp;
			bcm_pbmp_t * okay_pbmp;
		} port_probe;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
			bcm_vlan_t vid;
		} port_protocol_vlan_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
		} port_protocol_vlan_delete;
		struct {
			int unit;
			bcm_port_t port;
		} port_protocol_vlan_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * count;
		} port_queued_count_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} port_rate_egress_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * pps;
			uint32 * burst;
		} port_rate_egress_pps_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 pps;
			uint32 burst;
		} port_rate_egress_pps_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} port_rate_egress_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} port_rate_ingress_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} port_rate_ingress_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * kbits_pause;
			uint32 * kbits_resume;
		} port_rate_pause_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 kbits_pause;
			uint32 kbits_resume;
		} port_rate_pause_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_redirect_config_t * redirect_config;
		} port_redirect_config_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_redirect_config_t * redirect_config;
		} port_redirect_config_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} port_remove;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flags;
			bcm_port_resource_t * resource;
		} port_resource_default_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_resource_t * resource;
		} port_resource_get;
		struct {
			int unit;
			int nport;
			bcm_port_resource_t * resource;
		} port_resource_multi_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_resource_t * resource;
		} port_resource_set;
		struct {
			int unit;
			bcm_port_resource_t * resource;
			bcm_pbmp_t * pbmp;
		} port_resource_speed_config_validate;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_resource_t * resource;
		} port_resource_speed_get;
		struct {
			int unit;
			int nport;
			bcm_port_resource_t * resource;
		} port_resource_speed_multi_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_resource_t * resource;
		} port_resource_speed_set;
		struct {
			int unit;
			bcm_port_resource_traverse_cb trav_fn;
			void * user_data;
		} port_resource_traverse;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_rlm_config_t * rlm_config;
			int * enable;
		} port_rlm_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_rlm_config_t * rlm_config;
			int enable;
		} port_rlm_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_rlm_status_t * rlm_status;
		} port_rlm_status_get;
		struct {
			int unit;
			bcm_port_t port;
			int * ingress_rate;
			int * egress_rate;
		} port_sample_rate_get;
		struct {
			int unit;
			bcm_port_t port;
			int ingress_rate;
			int egress_rate;
		} port_sample_rate_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_selective_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_selective_set;
		struct {
			int unit;
			bcm_port_t port;
			int max_num_ability;
			bcm_port_speed_ability_t * abilities_array;
			int * actual_num_ability;
		} port_speed_ability_local_get;
		struct {
			int unit;
			bcm_port_t port;
			int * speed;
		} port_speed_get;
		struct {
			int unit;
			bcm_port_t port;
			int * speed;
		} port_speed_max;
		struct {
			int unit;
			bcm_port_t port;
			int speed;
		} port_speed_set;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 stat_counter_id;
		} port_stat_attach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} port_stat_counter_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} port_stat_counter_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} port_stat_counter_sync_get;
		struct {
			int unit;
			bcm_gport_t port;
		} port_stat_detach;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 stat_counter_id;
		} port_stat_detach_with_id;
		struct {
			int unit;
			bcm_gport_t port;
			int enable;
		} port_stat_enable_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint64 * val;
		} port_stat_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 * val;
		} port_stat_get32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 * stat_counter_id;
		} port_stat_id_get;
		struct {
			int unit;
			bcm_gport_t port;
			int nstat;
			bcm_port_stat_t * stat_arr;
			uint64 * value_arr;
		} port_stat_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			int nstat;
			bcm_port_stat_t * stat_arr;
			uint32 * value_arr;
		} port_stat_multi_get32;
		struct {
			int unit;
			bcm_gport_t port;
			int nstat;
			bcm_port_stat_t * stat_arr;
			uint64 * value_arr;
		} port_stat_multi_set;
		struct {
			int unit;
			bcm_gport_t port;
			int nstat;
			bcm_port_stat_t * stat_arr;
			uint32 * value_arr;
		} port_stat_multi_set32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint64 val;
		} port_stat_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 val;
		} port_stat_set32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint64 * val;
		} port_stat_sync_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 * val;
		} port_stat_sync_get32;
		struct {
			int unit;
			bcm_port_t port;
			int * state;
		} port_stp_get;
		struct {
			int unit;
			bcm_port_t port;
			int state;
		} port_stp_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_pbmp_t * pbmp;
		} port_subsidiary_ports_get;
		struct {
			int unit;
			bcm_port_t port;
			int * tgid;
			int * psc;
		} port_tgid_get;
		struct {
			int unit;
			bcm_port_t port;
			int tgid;
			int psc;
		} port_tgid_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_timestamp_adjust_t * ts_adjust;
		} port_timestamp_adjust_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_timestamp_adjust_t * ts_adjust;
		} port_timestamp_adjust_set;
		struct {
			int unit;
			bcm_port_t port;
			int array_size;
			bcm_port_timesync_config_t * config_array;
			int * array_count;
		} port_timesync_config_get;
		struct {
			int unit;
			bcm_port_t port;
			int config_count;
			bcm_port_timesync_config_t * config_array;
		} port_timesync_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_timesync_tx_info_t * tx_info;
		} port_timesync_tx_info_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
			int color_select;
		} port_tpid_add;
		struct {
			int unit;
			uint32 flags;
			bcm_port_tag_struct_type_t tag_struct_type;
			bcm_port_tag_format_class_t * tag_format_class_id;
		} port_tpid_class_create;
		struct {
			int unit;
			uint32 flags;
			bcm_port_tag_format_class_t tag_format_class_id;
		} port_tpid_class_destroy;
		struct {
			int unit;
			bcm_port_tpid_class_t * tpid_class;
		} port_tpid_class_get;
		struct {
			int unit;
			bcm_port_tpid_class_t * tpid_class;
		} port_tpid_class_set;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
		} port_tpid_delete;
		struct {
			int unit;
			bcm_port_t port;
		} port_tpid_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			uint16 * tpid;
		} port_tpid_get;
		struct {
			int unit;
			bcm_port_t port;
			int size;
			uint16 * tpid_array;
			int * color_array;
			int * count;
		} port_tpid_get_all;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
		} port_tpid_set;
		struct {
			int unit;
			bcm_port_t port;
			int * port_index;
		} port_trunk_index_get;
		struct {
			int unit;
			bcm_port_t port;
			int port_index;
		} port_trunk_index_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * txpi_clk;
			uint32 * rxcdr_clk;
		} port_txpi_rxcdr_clk_get;
		struct {
			int unit;
			bcm_port_t port;
			int * priority;
		} port_untagged_priority_get;
		struct {
			int unit;
			bcm_port_t port;
			int priority;
		} port_untagged_priority_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t * vid_ptr;
		} port_untagged_vlan_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vid;
		} port_untagged_vlan_set;
		struct {
			int unit;
			bcm_port_t port;
			int link;
		} port_update;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int dscp;
			int * internal_pri;
			bcm_color_t * color;
		} port_vlan_dscp_map_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int dscp;
			int internal_pri;
			bcm_color_t color;
		} port_vlan_dscp_map_set;
		struct {
			int unit;
			bcm_port_t port;
			uint16 * inner_tag;
		} port_vlan_inner_tag_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 inner_tag;
		} port_vlan_inner_tag_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_vlan_member_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} port_vlan_member_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int pkt_pri;
			int cfi;
			int * internal_pri;
			bcm_color_t * color;
		} port_vlan_pri_map_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int pkt_pri;
			int cfi;
			int internal_pri;
			bcm_color_t color;
		} port_vlan_pri_map_set;
		struct {
			int unit;
			bcm_port_t port;
			int pkt_pri;
			int cfi;
			int * internal_pri;
			bcm_color_t * color;
		} port_vlan_priority_map_get;
		struct {
			int unit;
			bcm_port_t port;
			int pkt_pri;
			int cfi;
			int internal_pri;
			bcm_color_t color;
		} port_vlan_priority_map_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vid;
			int pkt_pri;
			int cfi;
			bcm_priority_mapping_t * pri_map;
		} port_vlan_priority_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vid;
			int pkt_pri;
			int cfi;
			bcm_priority_mapping_t * pri_map;
		} port_vlan_priority_mapping_set;
		struct {
			int unit;
			bcm_port_t port;
			int internal_pri;
			bcm_color_t color;
			int * pkt_pri;
			int * cfi;
		} port_vlan_priority_unmap_get;
		struct {
			int unit;
			bcm_port_t port;
			int internal_pri;
			bcm_color_t color;
			int pkt_pri;
			int cfi;
		} port_vlan_priority_unmap_set;
		struct {
			int unit;
			bcm_gport_t port_id;
			uint32 * vlan_vec;
		} port_vlan_vector_get;
		struct {
			int unit;
			bcm_gport_t port_id;
			uint32 * vlan_vec;
		} port_vlan_vector_set;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			uint64 * data;
		} port_wide_data_get;
		struct {
			int unit;
			bcm_gport_t gport;
			uint32 flags;
			uint64 data;
		} port_wide_data_set;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			bcm_ppp_initiator_t * info;
		} ppp_initiator_create;
		struct {
			int unit;
			bcm_ppp_initiator_t * info;
		} ppp_initiator_delete;
		struct {
			int unit;
			bcm_ppp_initiator_t * info;
		} ppp_initiator_get;
		struct {
			int unit;
			bcm_ppp_initiator_additional_info_t * additional_info;
			bcm_ppp_initiator_traverse_cb cb;
			void * user_data;
		} ppp_initiator_traverse;
		struct {
			int unit;
			bcm_ppp_term_spoofing_check_t * info;
		} ppp_term_spoofing_check_add;
		struct {
			int unit;
			bcm_ppp_term_spoofing_check_t * info;
		} ppp_term_spoofing_check_delete;
		struct {
			int unit;
			bcm_ppp_term_spoofing_check_additional_info_t * additional_info;
			bcm_ppp_term_spoofing_check_traverse_cb cb;
			void * user_data;
		} ppp_term_spoofing_check_traverse;
		struct {
			int unit;
			bcm_ppp_terminator_t * info;
		} ppp_terminator_create;
		struct {
			int unit;
			bcm_ppp_terminator_t * info;
		} ppp_terminator_delete;
		struct {
			int unit;
			bcm_ppp_terminator_t * info;
		} ppp_terminator_get;
		struct {
			int unit;
			bcm_ppp_terminator_additional_info_t * additional_info;
			bcm_ppp_terminator_traverse_cb cb;
			void * user_data;
		} ppp_terminator_traverse;
		struct {
			int unit;
		} proxy_cleanup;
		struct {
			int unit;
			bcm_port_t client_port;
			bcm_proxy_proto_type_t proto_type;
			bcm_module_t server_modid;
			bcm_port_t server_port;
			int enable;
		} proxy_client_set;
		struct {
			int unit;
			uint32 flags;
			bcm_proxy_egress_t * proxy_egress;
			bcm_if_t * proxy_if_id;
		} proxy_egress_create;
		struct {
			int unit;
			bcm_if_t proxy_if_id;
		} proxy_egress_destroy;
		struct {
			int unit;
			bcm_if_t proxy_if_id;
			bcm_proxy_egress_t * proxy_egress;
		} proxy_egress_get;
		struct {
			int unit;
			bcm_proxy_egress_traverse_cb trav_fn;
			void * user_data;
		} proxy_egress_traverse;
		struct {
			int unit;
		} proxy_init;
		struct {
			int unit;
			bcm_port_t server_port;
			bcm_proxy_mode_t mode;
			int * enable;
		} proxy_server_get;
		struct {
			int unit;
			bcm_gport_t local_ingress_port;
			bcm_proxy_server_t * proxy_server;
			int * enable;
		} proxy_server_port_get;
		struct {
			int unit;
			bcm_gport_t local_ingress_port;
			bcm_proxy_server_t * proxy_server;
			int enable;
		} proxy_server_port_set;
		struct {
			int unit;
			bcm_port_t server_port;
			bcm_proxy_mode_t mode;
			int enable;
		} proxy_server_set;
#endif	/* INCLUDE_L3 */
#ifdef	INCLUDE_PSTATS
		struct {
			int unit;
		} pstats_data_sync;
		struct {
			int unit;
			int options;
			int array_count;
			bcm_pstats_session_element_t * element_array;
			bcm_pstats_session_id_t * session_id;
		} pstats_session_create;
		struct {
			int unit;
			bcm_pstats_session_id_t session_id;
		} pstats_session_data_clear;
		struct {
			int unit;
			bcm_pstats_session_id_t session_id;
			bcm_pstats_timestamp_t * timestamp;
			int array_max;
			bcm_pstats_data_t * data_array;
			int * array_count;
		} pstats_session_data_get;
		struct {
			int unit;
			bcm_pstats_session_id_t session_id;
			bcm_pstats_timestamp_t * timestamp;
			int array_max;
			bcm_pstats_data_t * data_array;
			int * array_count;
		} pstats_session_data_sync_get;
		struct {
			int unit;
			bcm_pstats_session_id_t session_id;
		} pstats_session_destroy;
		struct {
			int unit;
			bcm_pstats_session_id_t session_id;
			int array_max;
			bcm_pstats_session_element_t * element_array;
			int * array_count;
		} pstats_session_get;
		struct {
			int unit;
			bcm_pstats_session_traverse_cb cb;
			void * user_data;
		} pstats_session_traverse;
#endif	/* INCLUDE_PSTATS */
#ifdef	INCLUDE_PTP
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int priority1_alt_value;
			bcm_ptp_clock_peer_address_t * master_info;
		} ptp_acceptable_master_add;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint8 * enabled;
		} ptp_acceptable_master_enabled_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint8 enabled;
		} ptp_acceptable_master_enabled_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int max_num_masters;
			int * num_masters;
			bcm_ptp_clock_peer_address_t * master_addr;
		} ptp_acceptable_master_list;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_peer_address_t * master_info;
		} ptp_acceptable_master_remove;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
		} ptp_acceptable_master_table_clear;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int * max_table_entries;
		} ptp_acceptable_master_table_size_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_bs_time_info_t * time;
		} ptp_bs_time_info_get;
		struct {
			int unit;
			bcm_ptp_cb_types_t cb_types;
			bcm_ptp_cb cb;
			void * user_data;
		} ptp_cb_register;
		struct {
			int unit;
			bcm_ptp_cb_types_t cb_types;
			bcm_ptp_cb cb;
		} ptp_cb_unregister;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_clock_accuracy_t * accuracy;
		} ptp_clock_accuracy_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_clock_accuracy_t * accuracy;
		} ptp_clock_accuracy_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * enable;
		} ptp_clock_apts_enable_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int enable;
		} ptp_clock_apts_enable_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * offset_nsec;
		} ptp_clock_apts_gps_offset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int offset_nsec;
		} ptp_clock_apts_gps_offset_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_clock_apts_mode_t * current_mode;
		} ptp_clock_apts_mode_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_clock_apts_source_t source;
			int * enable;
		} ptp_clock_apts_source_enable_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_clock_apts_source_t source;
			int enable;
		} ptp_clock_apts_source_enable_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * num_sources;
			bcm_ptp_clock_apts_source_t * priority_list;
		} ptp_clock_apts_source_prio_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int num_sources;
			bcm_ptp_clock_apts_source_t * priority_list;
		} ptp_clock_apts_source_prio_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 * flags;
			uint32 * enable_mask;
		} ptp_clock_bmca_override_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 flags;
			uint32 enable_mask;
		} ptp_clock_bmca_override_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			bcm_ptp_clock_info_t * clock_info;
		} ptp_clock_create;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_current_dataset_t * dataset;
		} ptp_clock_current_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_default_dataset_t * dataset;
		} ptp_clock_default_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 * domain;
		} ptp_clock_domain_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 domain;
		} ptp_clock_domain_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_clock_info_t * clock_info;
		} ptp_clock_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint8 * local_priority;
		} ptp_clock_local_priority_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint8 local_priority;
		} ptp_clock_local_priority_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint8 * max_steps_removed;
		} ptp_clock_max_steps_removed_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint8 max_steps_removed;
		} ptp_clock_max_steps_removed_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_parent_dataset_t * dataset;
		} ptp_clock_parent_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint8 * aging_time;
		} ptp_clock_peer_age_timer_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint8 aging_time;
		} ptp_clock_peer_age_timer_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			uint32 * timeout;
		} ptp_clock_port_announce_receipt_timeout_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			uint32 timeout;
		} ptp_clock_port_announce_receipt_timeout_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_ptp_clock_port_info_t * info;
		} ptp_clock_port_configure;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_ptp_port_dataset_t * dataset;
		} ptp_clock_port_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			uint32 * delay_mechanism;
		} ptp_clock_port_delay_mechanism_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			uint32 delay_mechanism;
		} ptp_clock_port_delay_mechanism_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
		} ptp_clock_port_disable;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int enable;
		} ptp_clock_port_drop_counters_enable_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_ptp_clock_port_packet_drop_counters_t * per_port_packet_drop_counters;
		} ptp_clock_port_drop_counters_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
		} ptp_clock_port_enable;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_ptp_port_identity_t * identity;
		} ptp_clock_port_identity_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_ptp_clock_port_info_t * info;
		} ptp_clock_port_info_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			uint32 latency_in;
			uint32 latency_out;
		} ptp_clock_port_latency_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int * interval;
		} ptp_clock_port_log_announce_interval_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int interval;
		} ptp_clock_port_log_announce_interval_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int * interval;
		} ptp_clock_port_log_min_delay_req_interval_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int interval;
		} ptp_clock_port_log_min_delay_req_interval_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int * interval;
		} ptp_clock_port_log_min_pdelay_req_interval_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int interval;
		} ptp_clock_port_log_min_pdelay_req_interval_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int * interval;
		} ptp_clock_port_log_sync_interval_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int interval;
		} ptp_clock_port_log_sync_interval_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_mac_t * mac;
		} ptp_clock_port_mac_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_ptp_protocol_t * protocol;
		} ptp_clock_port_protocol_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_index;
			uint32 clock_port;
			bcm_ptp_tlv_type_t tlv_type;
			uint16 data_len;
			uint8 * data;
			bcm_ptp_tlv_action_t action;
			int config_id;
		} ptp_clock_port_tlv_config_add;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_index;
			uint32 clock_port;
			int config_id;
		} ptp_clock_port_tlv_config_delete;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_index;
			uint32 clock_port;
		} ptp_clock_port_tlv_config_delete_all;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_ptp_port_type_t * type;
		} ptp_clock_port_type_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			uint32 * version;
		} ptp_clock_port_version_number_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 * priority1;
		} ptp_clock_priority1_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 priority1;
		} ptp_clock_priority1_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 * priority2;
		} ptp_clock_priority2_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 priority2;
		} ptp_clock_priority2_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_clock_quality_t * clock_quality;
			uint32 flags;
		} ptp_clock_quality_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_clock_quality_t clock_quality;
			uint32 flags;
		} ptp_clock_quality_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 * slaveonly;
		} ptp_clock_slaveonly_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 slaveonly;
		} ptp_clock_slaveonly_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_timestamp_t * time;
		} ptp_clock_time_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_time_properties_t * data;
		} ptp_clock_time_properties_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_timestamp_t * time;
		} ptp_clock_time_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_timescale_t * timescale;
		} ptp_clock_timescale_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_timescale_t * timescale;
		} ptp_clock_timescale_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_index;
			uint32 clock_port;
			int config_id;
			int * enable;
		} ptp_clock_tlv_enable_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_index;
			uint32 clock_port;
			int config_id;
			int enable;
		} ptp_clock_tlv_enable_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_trace_t * trace;
		} ptp_clock_traceability_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_trace_t * trace;
		} ptp_clock_traceability_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint8 * desc;
		} ptp_clock_user_description_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_utc_t * utc;
		} ptp_clock_utc_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_utc_t * utc;
		} ptp_clock_utc_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_ctdev_alarm_cb alarm_cb;
		} ptp_ctdev_alarm_callback_register;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
		} ptp_ctdev_alarm_callback_unregister;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint16 * alpha_numerator;
			uint16 * alpha_denominator;
		} ptp_ctdev_alpha_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint16 alpha_numerator;
			uint16 alpha_denominator;
		} ptp_ctdev_alpha_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * enable;
			uint32 * flags;
		} ptp_ctdev_enable_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int enable;
			uint32 flags;
		} ptp_ctdev_enable_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * verbose;
		} ptp_ctdev_verbose_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int verbose;
		} ptp_ctdev_verbose_set;
		struct {
			int unit;
		} ptp_detach;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_external_phy_config_t * extphy_config;
		} ptp_external_phy_synchronize;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_foreign_master_dataset_t * data_set;
		} ptp_foreign_master_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_g8275p1_clock_traceability_info_t traceability_info;
			uint8 * clock_class;
		} ptp_g8275p1_traceability_info_clock_class_map;
		struct {
			int unit;
		} ptp_init;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int channel_select_mode;
		} ptp_input_channel_precedence_mode_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int channel_switching_mode;
		} ptp_input_channel_switching_mode_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * num_channels;
			bcm_ptp_channel_t * channels;
		} ptp_input_channels_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int num_channels;
			bcm_ptp_channel_t * channels;
		} ptp_input_channels_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * enable;
			uint32 * flags;
		} ptp_modular_enable_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int enable;
			uint32 flags;
		} ptp_modular_enable_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * phyts;
			int * framesync_pin;
		} ptp_modular_phyts_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int phyts;
			int framesync_pin;
		} ptp_modular_phyts_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_pbmp_t * pbmp;
		} ptp_modular_portbitmap_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_pbmp_t pbmp;
		} ptp_modular_portbitmap_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * verbose;
		} ptp_modular_verbose_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int verbose;
		} ptp_modular_verbose_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint32 counter_bitmap;
		} ptp_packet_counters_clear;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_packet_counters_t * counters;
		} ptp_packet_counters_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int max_num_peers;
			bcm_ptp_peer_entry_t * peers;
			int * num_peers;
		} ptp_peer_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_phase_offset_t * offset;
		} ptp_phase_offset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_phase_offset_t * offset;
		} ptp_phase_offset_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 * override_flag;
			uint32 * override_value;
		} ptp_pkt_flags_override_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 override_flag;
			uint32 override_value;
		} ptp_pkt_flags_override_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * primary_domain;
		} ptp_primary_domain_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int primary_domain;
		} ptp_primary_domain_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_servo_config_t * config;
		} ptp_servo_configuration_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_servo_config_t * config;
		} ptp_servo_configuration_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_servo_status_t * status;
		} ptp_servo_status_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_servo_threshold_t * threshold;
		} ptp_servo_threshold_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_servo_threshold_t * threshold;
		} ptp_servo_threshold_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * signal_output_count;
			bcm_ptp_signal_output_t * signal_output_id;
		} ptp_signal_output_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int signal_output_id;
		} ptp_signal_output_remove;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * signal_output_id;
			bcm_ptp_signal_output_t * output_info;
		} ptp_signal_output_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_unicast_master_t * master_info;
			uint32 mask;
		} ptp_signaled_unicast_master_add;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_peer_address_t * master_info;
		} ptp_signaled_unicast_master_remove;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int max_num_slaves;
			int * num_slaves;
			bcm_ptp_clock_peer_t * slave_info;
		} ptp_signaled_unicast_slave_list;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int callstack;
		} ptp_signaled_unicast_slave_table_clear;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_signaling_arbiter_t arb;
			void * user_data;
		} ptp_signaling_arbiter_register;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
		} ptp_signaling_arbiter_unregister;
		struct {
			int unit;
			bcm_ptp_stack_info_t * ptp_info;
		} ptp_stack_create;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
		} ptp_stack_destroy;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			bcm_ptp_stack_info_t * ptp_info;
		} ptp_stack_get;
		struct {
			int unit;
			int max_size;
			bcm_ptp_stack_info_t * ptp_info;
			int * no_of_stacks;
		} ptp_stack_get_all;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_unicast_master_t * master_info;
		} ptp_static_unicast_master_add;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int max_num_masters;
			int * num_masters;
			bcm_ptp_clock_peer_address_t * master_addr;
		} ptp_static_unicast_master_list;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_peer_address_t * master_info;
		} ptp_static_unicast_master_remove;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
		} ptp_static_unicast_master_table_clear;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int * max_table_entries;
		} ptp_static_unicast_master_table_size_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_peer_t * slave_info;
		} ptp_static_unicast_slave_add;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int max_num_slaves;
			int * num_slaves;
			bcm_ptp_clock_peer_t * slave_info;
		} ptp_static_unicast_slave_list;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_peer_t * slave_info;
		} ptp_static_unicast_slave_remove;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
		} ptp_static_unicast_slave_table_clear;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_sync_phy_input_t sync_input;
		} ptp_sync_phy;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
		} ptp_telecom_g8265_init;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_telecom_g8265_network_option_t * network_option;
		} ptp_telecom_g8265_network_option_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_telecom_g8265_network_option_t network_option;
		} ptp_telecom_g8265_network_option_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_port_address_t * address;
		} ptp_telecom_g8265_packet_master_add;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_telecom_g8265_pktmaster_t * pktmaster;
		} ptp_telecom_g8265_packet_master_best_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_clock_port_address_t * address;
			bcm_ptp_telecom_g8265_pktmaster_t * pktmaster;
		} ptp_telecom_g8265_packet_master_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int max_master_count;
			int * num_masters;
			int * best_master;
			bcm_ptp_telecom_g8265_pktmaster_t * pktmaster;
		} ptp_telecom_g8265_packet_master_list;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint8 lockout;
			bcm_ptp_clock_port_address_t * address;
		} ptp_telecom_g8265_packet_master_lockout_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint8 nonres;
			bcm_ptp_clock_port_address_t * address;
		} ptp_telecom_g8265_packet_master_non_reversion_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint8 override;
			bcm_ptp_clock_port_address_t * address;
		} ptp_telecom_g8265_packet_master_priority_override;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint16 priority;
			bcm_ptp_clock_port_address_t * address;
		} ptp_telecom_g8265_packet_master_priority_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_port_address_t * address;
		} ptp_telecom_g8265_packet_master_remove;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint64 wait_sec;
			bcm_ptp_clock_port_address_t * address;
		} ptp_telecom_g8265_packet_master_wait_duration_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_telecom_g8265_pktstats_t * thresholds;
		} ptp_telecom_g8265_pktstats_thresholds_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_telecom_g8265_pktstats_t thresholds;
		} ptp_telecom_g8265_pktstats_thresholds_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_telecom_g8265_quality_level_t ql;
		} ptp_telecom_g8265_quality_level_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_message_type_t message_type;
			uint32 * receipt_timeout;
		} ptp_telecom_g8265_receipt_timeout_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_message_type_t message_type;
			uint32 receipt_timeout;
		} ptp_telecom_g8265_receipt_timeout_set;
		struct {
			int unit;
		} ptp_telecom_g8265_shutdown;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			bcm_ptp_time_type_t type;
		} ptp_time_format_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_timesource_status_t * status;
		} ptp_timesource_input_status_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * num_tod_sources;
			bcm_ptp_tod_input_t * tod_sources;
		} ptp_tod_input_sources_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int num_tod_sources;
			bcm_ptp_tod_input_t * tod_sources;
		} ptp_tod_input_sources_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * tod_output_count;
			bcm_ptp_tod_output_t * tod_output;
		} ptp_tod_output_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int tod_output_id;
		} ptp_tod_output_remove;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * tod_output_id;
			bcm_ptp_tod_output_t * output_info;
		} ptp_tod_output_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_transparent_clock_default_dataset_t * data_set;
		} ptp_transparent_clock_default_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint16 clock_port;
			bcm_ptp_transparent_clock_port_dataset_t * data_set;
		} ptp_transparent_clock_port_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint32 * duration;
		} ptp_unicast_request_duration_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint32 * duration_max;
		} ptp_unicast_request_duration_max_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint32 duration_max;
		} ptp_unicast_request_duration_max_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint32 * duration_min;
		} ptp_unicast_request_duration_min_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint32 duration_min;
		} ptp_unicast_request_duration_min_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint32 duration;
		} ptp_unicast_request_duration_set;
#endif	/* INCLUDE_PTP */
		struct {
			int unit;
			uint32 flags;
			bcm_qos_control_type_t type;
			int * arg;
		} qos_control_get;
		struct {
			int unit;
			uint32 flags;
			bcm_qos_control_type_t type;
			int arg;
		} qos_control_set;
		struct {
			int unit;
		} qos_detach;
		struct {
			int unit;
		} qos_init;
		struct {
			int unit;
			uint32 flags;
			bcm_qos_map_t * map;
			int map_id;
		} qos_map_add;
		struct {
			int unit;
			uint32 map_id;
			uint32 flags;
			bcm_qos_map_control_type_t type;
			int * arg;
		} qos_map_control_get;
		struct {
			int unit;
			uint32 map_id;
			uint32 flags;
			bcm_qos_map_control_type_t type;
			int arg;
		} qos_map_control_set;
		struct {
			int unit;
			uint32 flags;
			int * map_id;
		} qos_map_create;
		struct {
			int unit;
			uint32 flags;
			bcm_qos_map_t * map;
			int map_id;
		} qos_map_delete;
		struct {
			int unit;
			int map_id;
		} qos_map_destroy;
		struct {
			int unit;
			uint32 flags;
			int profile;
			int * map_id;
		} qos_map_id_get_by_profile;
		struct {
			int unit;
			uint32 flags;
			int map_id;
			int array_size;
			bcm_qos_map_t * array;
			int * array_count;
		} qos_map_multi_get;
		struct {
			int unit;
			int array_size;
			int * map_ids_array;
			int * flags_array;
			int * array_count;
		} qos_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			int * ing_map;
			int * egr_map;
		} qos_port_map_get;
		struct {
			int unit;
			bcm_gport_t port;
			int ing_map;
			int egr_map;
		} qos_port_map_set;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flags;
			int * map_id;
		} qos_port_map_type_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vid;
			int * ing_map;
			int * egr_map;
		} qos_port_vlan_map_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vid;
			int ing_map;
			int egr_map;
		} qos_port_vlan_map_set;
		struct {
			int unit;
			bcm_vpn_t vpn;
			int ing_map;
			int egr_map;
		} qos_vpn_map_set;
		struct {
			int unit;
			bcm_vpn_t vpn;
			uint32 flags;
			int * map_id;
		} qos_vpn_map_type_get;
		struct {
			int unit;
			int flags;
			bcm_range_config_t * range_cfg;
		} range_create;
		struct {
			int unit;
			bcm_range_t rid;
		} range_destroy;
		struct {
			int unit;
			bcm_range_config_t * range_cfg;
		} range_get;
		struct {
			int unit;
			bcm_range_group_config_t * range_group_config;
		} range_group_create;
		struct {
			int unit;
			bcm_range_group_config_t * range_group_config;
		} range_group_delete;
		struct {
			int unit;
			bcm_range_group_config_t * range_group_config;
		} range_group_get;
		struct {
			int unit;
			bcm_range_group_config_t * range_group_config;
		} range_group_update;
		struct {
			int unit;
			bcm_range_oper_mode_t * oper_mode;
		} range_oper_mode_get;
		struct {
			int unit;
			bcm_range_oper_mode_t oper_mode;
		} range_oper_mode_set;
		struct {
			int unit;
			bcm_range_traverse_cb callback;
			void * user_data;
		} range_traverse;
		struct {
			int unit;
			bcm_port_t port;
			int flags;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} rate_bandwidth_get;
		struct {
			int unit;
			bcm_port_t port;
			int flags;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} rate_bandwidth_set;
		struct {
			int unit;
			int * pps;
			int * flags;
			int port;
		} rate_bcast_get;
		struct {
			int unit;
			int pps;
			int flags;
			int port;
		} rate_bcast_set;
		struct {
			int unit;
			int * pps;
			int * flags;
			int port;
		} rate_dlfbc_get;
		struct {
			int unit;
			int pps;
			int flags;
			int port;
		} rate_dlfbc_set;
		struct {
			int unit;
			int * pps;
			int * flags;
		} rate_get;
		struct {
			int unit;
			int * pps;
			int * flags;
			int port;
		} rate_mcast_get;
		struct {
			int unit;
			int pps;
			int flags;
			int port;
		} rate_mcast_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_rate_packet_t * pkt_rate;
		} rate_packet_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_rate_packet_t * pkt_rate;
		} rate_packet_set;
		struct {
			int unit;
			int pps;
			int flags;
		} rate_set;
		struct {
			int unit;
			bcm_rate_limit_t * rl;
		} rate_type_get;
		struct {
			int unit;
			bcm_rate_limit_t * rl;
		} rate_type_set;
#ifdef	INCLUDE_REGEX
		struct {
			int unit;
			bcm_regex_config_t * config;
		} regex_config_get;
		struct {
			int unit;
			bcm_regex_config_t * config;
		} regex_config_set;
		struct {
			int unit;
			bcm_regex_engine_config_t * config;
			bcm_regex_engine_t * engid;
		} regex_engine_create;
		struct {
			int unit;
			bcm_regex_engine_t engid;
		} regex_engine_destroy;
		struct {
			int unit;
			bcm_regex_engine_t engid;
			bcm_regex_engine_config_t * config;
		} regex_engine_get;
		struct {
			int unit;
			int engine_id;
			bcm_regex_engine_info_t * regex_engine_info;
		} regex_engine_info_get;
		struct {
			int unit;
			bcm_regex_engine_traverse_cb cb;
			void * user_data;
		} regex_engine_traverse;
		struct {
			int unit;
			uint8 protocol;
			uint16 l4_start;
			uint16 l4_end;
		} regex_exclude_add;
		struct {
			int unit;
			uint8 protocol;
			uint16 l4_start;
			uint16 l4_end;
		} regex_exclude_delete;
		struct {
			int unit;
		} regex_exclude_delete_all;
		struct {
			int unit;
			int array_size;
			uint8 * protocol;
			uint16 * l4low;
			uint16 * l4high;
			int * array_count;
		} regex_exclude_get;
		struct {
			int unit;
			int signature_id;
			int * match_id;
		} regex_get_match_id;
		struct {
			int unit;
			int match_id;
			int * signature_id;
		} regex_get_sig_id;
		struct {
			int unit;
			bcm_regex_info_t * regex_info;
		} regex_info_get;
		struct {
			int unit;
		} regex_init;
		struct {
			int unit;
			bcm_regex_match_t * matches;
			int count;
			int * metric;
		} regex_match_check;
		struct {
			int unit;
			bcm_regex_engine_t engid;
			bcm_regex_match_t * matches;
			int count;
		} regex_match_set;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
			uint32 param0;
			uint32 param1;
		} regex_policy_action_add;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
			uint32 param0;
			uint32 param1;
		} regex_policy_action_delete;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
			uint32 * param0;
			uint32 * param1;
		} regex_policy_action_get;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
			uint8 * mac;
		} regex_policy_action_mac_add;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
			bcm_mac_t * mac;
		} regex_policy_action_mac_get;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
			bcm_pbmp_t pbmp;
		} regex_policy_action_ports_add;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
			bcm_pbmp_t * pbmp;
		} regex_policy_action_ports_get;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
		} regex_policy_action_remove;
		struct {
			int unit;
			bcm_regex_policy_t policy;
		} regex_policy_action_remove_all;
		struct {
			int unit;
			int flags;
			bcm_regex_policy_t * policy;
		} regex_policy_create;
		struct {
			int unit;
			bcm_regex_policy_t policy;
		} regex_policy_destroy;
		struct {
			int unit;
		} regex_policy_destroy_all;
		struct {
			int unit;
			bcm_regex_policy_t policy;
		} regex_policy_install;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			int level;
			bcm_policer_t policer_id;
		} regex_policy_policer_attach;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			int level;
		} regex_policy_policer_detach;
		struct {
			int unit;
			bcm_regex_policy_t policy;
		} regex_policy_policer_detach_all;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			int level;
			bcm_policer_t * policer_id;
		} regex_policy_policer_get;
		struct {
			int unit;
			bcm_regex_policy_t policy;
		} regex_policy_remove;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			int stat_id;
		} regex_policy_stat_attach;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			int stat_id;
		} regex_policy_stat_detach;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			int * stat_id;
		} regex_policy_stat_get;
		struct {
			int unit;
			uint32 reports;
			bcm_regex_report_cb callback;
			void * user_data;
		} regex_report_register;
		struct {
			int unit;
			uint32 reports;
			bcm_regex_report_cb callback;
			void * user_data;
		} regex_report_unregister;
		struct {
			int unit;
			int flags;
			bcm_regex_session_key_t * key;
			bcm_regex_session_t * session;
		} regex_session_add;
		struct {
			int unit;
			bcm_regex_session_key_t * key;
		} regex_session_delete;
		struct {
			int unit;
		} regex_session_delete_all;
		struct {
			int unit;
			int flags;
			bcm_regex_session_key_t * key;
			bcm_regex_session_t * session;
		} regex_session_get;
		struct {
			int unit;
			int flags;
			int flow_index;
			bcm_regex_policy_t policy;
		} regex_session_policy_update;
		struct {
			int unit;
			int flags;
			bcm_regex_session_traverse_cb cb;
			void * user_data;
		} regex_session_traverse;
		struct {
			int unit;
			int flags;
			int nstat;
			bcm_field_stat_t * stat_arr;
			int * stat_id;
		} regex_stat_create;
		struct {
			int unit;
			int stat_id;
		} regex_stat_destroy;
		struct {
			int unit;
			bcm_regex_stat_t type;
			uint64 * val;
		} regex_stat_get;
		struct {
			int unit;
			bcm_regex_stat_t type;
			uint64 val;
		} regex_stat_set;
#endif	/* INCLUDE_REGEX */
		struct {
			int unit;
			uint32 options;
			bcm_rx_CopyToCpu_config_t * copyToCpu_config;
		} rx_CopyToCpu_config_add;
		struct {
			int unit;
			int index;
		} rx_CopyToCpu_config_delete;
		struct {
			int unit;
		} rx_CopyToCpu_config_delete_all;
		struct {
			int unit;
			int index;
			bcm_rx_CopyToCpu_config_t * copyToCpu_config;
		} rx_CopyToCpu_config_get;
		struct {
			int unit;
			int entries_max;
			bcm_rx_CopyToCpu_config_t * copyToCpu_config;
			int * entries_count;
		} rx_CopyToCpu_config_get_all;
		struct {
			int unit;
		} rx_active;
		struct {
			int unit;
			int pkt_size;
			uint32 flags;
			void ** buf;
		} rx_alloc;
		struct {
			int unit;
			int * burst;
		} rx_burst_get;
		struct {
			int unit;
			int burst;
		} rx_burst_set;
		struct {
			int unit;
			bcm_rx_cfg_t * cfg;
		} rx_cfg_get;
		struct {
			int unit;
		} rx_cfg_init;
		struct {
			int unit;
			uint32 * channels;
		} rx_channels_running;
		struct {
			int unit;
		} rx_clear;
		struct {
			int unit;
			bcm_rx_control_t type;
			int * arg;
		} rx_control_get;
		struct {
			int unit;
			bcm_rx_control_t type;
			int arg;
		} rx_control_set;
		struct {
			int unit;
			int cos;
			int * burst;
		} rx_cos_burst_get;
		struct {
			int unit;
			int cos;
			int burst;
		} rx_cos_burst_set;
		struct {
			int unit;
			int cos;
			int * max_q_len;
		} rx_cos_max_len_get;
		struct {
			int unit;
			int cos;
			int max_q_len;
		} rx_cos_max_len_set;
		struct {
			int unit;
			int cos;
			int * pps;
		} rx_cos_rate_get;
		struct {
			int unit;
			int cos;
			int pps;
		} rx_cos_rate_set;
		struct {
			int unit;
			int index;
		} rx_cosq_mapping_delete;
		struct {
			int unit;
			uint32 options;
			bcm_rx_cosq_mapping_t * rx_cosq_mapping;
		} rx_cosq_mapping_extended_add;
		struct {
			int unit;
			bcm_rx_cosq_mapping_t * rx_cosq_mapping;
		} rx_cosq_mapping_extended_delete;
		struct {
			int unit;
		} rx_cosq_mapping_extended_delete_all;
		struct {
			int unit;
			bcm_rx_cosq_mapping_t * rx_cosq_mapping;
		} rx_cosq_mapping_extended_get;
		struct {
			int unit;
			uint32 options;
			bcm_rx_cosq_mapping_t * rx_cosq_mapping;
		} rx_cosq_mapping_extended_set;
		struct {
			int unit;
			int index;
			bcm_rx_reasons_t * reasons;
			bcm_rx_reasons_t * reasons_mask;
			uint8 * int_prio;
			uint8 * int_prio_mask;
			uint32 * packet_type;
			uint32 * packet_type_mask;
			bcm_cos_queue_t * cosq;
		} rx_cosq_mapping_get;
		struct {
			int unit;
			bcm_rx_reasons_t * reasons;
		} rx_cosq_mapping_reasons_get;
		struct {
			int unit;
			int index;
			bcm_rx_reasons_t reasons;
			bcm_rx_reasons_t reasons_mask;
			uint8 int_prio;
			uint8 int_prio_mask;
			uint32 packet_type;
			uint32 packet_type_mask;
			bcm_cos_queue_t cosq;
		} rx_cosq_mapping_set;
		struct {
			int unit;
			int * size;
		} rx_cosq_mapping_size_get;
		struct {
			int unit;
			int * pps;
		} rx_cpu_rate_get;
		struct {
			int unit;
			int pps;
		} rx_cpu_rate_set;
		struct {
			int unit;
			void * pkt_data;
		} rx_free;
		struct {
			int unit;
			void * pkt_data;
		} rx_free_enqueue;
		struct {
			int unit;
		} rx_init;
		struct {
			int unit;
			bcm_rx_mtu_config_t * config;
		} rx_mtu_get;
		struct {
			int unit;
			uint32 flags;
			bcm_rx_mtu_profile_key_t * mtu_key;
			bcm_rx_mtu_profile_value_t * mtu_value;
		} rx_mtu_profile_get;
		struct {
			int unit;
			uint32 flags;
			bcm_rx_mtu_profile_key_t * mtu_key;
			bcm_rx_mtu_profile_value_t * mtu_value;
		} rx_mtu_profile_set;
		struct {
			int unit;
			bcm_rx_mtu_config_t * config;
		} rx_mtu_set;
		struct {
			int unit;
			int size;
			uint32 flags;
			void ** pool;
		} rx_pool_alloc;
		struct {
			int unit;
			void * buf;
		} rx_pool_free;
		struct {
			int pkt_count;
			int bytes_per_pkt;
		} rx_pool_setup;
		struct {
			int unit;
			bcm_cos_queue_t queue_id;
			bcm_rx_chan_t * chan_id;
		} rx_queue_channel_get;
		struct {
			int unit;
			bcm_cos_queue_t queue_id;
			bcm_rx_chan_t chan_id;
		} rx_queue_channel_set;
		struct {
			int unit;
			bcm_cos_queue_t * cosq;
		} rx_queue_max_get;
		struct {
			int unit;
			bcm_cos_queue_t cosq;
			int * packet_count;
		} rx_queue_packet_count_get;
		struct {
			int unit;
			bcm_cos_queue_t cosq;
			int * packet_tokens;
		} rx_queue_rate_limit_status_get;
		struct {
			int unit;
			char * name;
			bcm_cos_queue_t cosq;
			bcm_rx_cb_f callback;
			uint8 priority;
			void * cookie;
			uint32 flags;
		} rx_queue_register;
		struct {
			int unit;
			bcm_cos_queue_t cosq;
			bcm_rx_cb_f callback;
			uint8 priority;
		} rx_queue_unregister;
		struct {
			int unit;
			int * pps;
		} rx_rate_get;
		struct {
			int unit;
			int pps;
		} rx_rate_set;
		struct {
			int unit;
			bcm_rx_reasons_t * reasons;
		} rx_reasons_get;
		struct {
			int unit;
			bcm_rx_reasons_t rx_reasons;
			bcm_policer_t polid;
		} rx_reasons_policer_set;
		struct {
			int unit;
			bcm_rx_redirect_t mode;
			bcm_rx_reasons_t * reasons;
		} rx_redirect_reasons_get;
		struct {
			int unit;
			bcm_rx_redirect_t mode;
			bcm_rx_reasons_t reasons;
		} rx_redirect_reasons_set;
		struct {
			int unit;
			char * name;
			bcm_rx_cb_f callback;
			uint8 priority;
			void * cookie;
			uint32 flags;
		} rx_register;
#ifdef	BCM_RPC_SUPPORT
		struct {
			int len;
			bcm_pkt_t ** pkt;
		} rx_remote_pkt_alloc;
#endif	/* BCM_RPC_SUPPORT */
		struct {
			int unit;
			bcm_pkt_t * pkt;
		} rx_remote_pkt_enqueue;
#ifdef	BCM_RPC_SUPPORT
		struct {
			bcm_pkt_t * pkt;
		} rx_remote_pkt_free;
#endif	/* BCM_RPC_SUPPORT */
		struct {
			int unit;
			bcm_rx_sched_cb sched_cb;
		} rx_sched_register;
		struct {
			int unit;
		} rx_sched_unregister;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
		} rx_show;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			int flags;
			int * snoop_cmnd;
		} rx_snoop_create;
		struct {
			int unit;
			int flags;
			int snoop_cmnd;
		} rx_snoop_destroy;
		struct {
			int unit;
			int snoop_cmnd;
			bcm_rx_snoop_config_t * config;
		} rx_snoop_get;
		struct {
			int unit;
			int snoop_cmnd;
			bcm_rx_snoop_config_t * config;
		} rx_snoop_set;
		struct {
			int unit;
			bcm_rx_cfg_t * cfg;
		} rx_start;
		struct {
			int unit;
			bcm_rx_cfg_t * cfg;
		} rx_stop;
		struct {
			int unit;
			bcm_rx_trap_t trap_type;
		} rx_trap_action_profile_clear;
		struct {
			int unit;
			bcm_rx_trap_t trap_type;
			bcm_gport_t * gport;
		} rx_trap_action_profile_get;
		struct {
			int unit;
			uint32 flags;
			bcm_rx_trap_t trap_type;
			bcm_gport_t gport;
		} rx_trap_action_profile_set;
		struct {
			int unit;
			int trap_id;
			bcm_rx_trap_config_t * config;
		} rx_trap_get;
		struct {
			int unit;
			bcm_rx_trap_lif_config_t * lif_config_p;
		} rx_trap_lif_get;
		struct {
			int unit;
			uint32 flags;
			bcm_rx_trap_lif_config_t * lif_config_p;
		} rx_trap_lif_set;
		struct {
			int unit;
			uint8 prog_index;
			bcm_rx_trap_prog_config_t * prog_config_p;
		} rx_trap_prog_get;
		struct {
			int unit;
			uint32 flags;
			uint8 prog_index;
			bcm_rx_trap_prog_config_t * prog_config_p;
		} rx_trap_prog_set;
		struct {
			int unit;
			bcm_rx_trap_protocol_key_t * key_p;
		} rx_trap_protocol_clear;
		struct {
			int unit;
			bcm_rx_trap_protocol_key_t * key_p;
			bcm_gport_t * trap_gport_p;
		} rx_trap_protocol_get;
		struct {
			int unit;
			bcm_if_t intf;
			bcm_rx_trap_protocol_profiles_t * protocol_profiles_p;
		} rx_trap_protocol_interface_profiles_get;
		struct {
			int unit;
			bcm_if_t intf;
			bcm_rx_trap_protocol_profiles_t * protocol_profiles_p;
		} rx_trap_protocol_interface_profiles_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rx_trap_protocol_profiles_t * protocol_profiles_p;
		} rx_trap_protocol_profiles_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_rx_trap_protocol_profiles_t * protocol_profiles_p;
		} rx_trap_protocol_profiles_set;
		struct {
			int unit;
			bcm_rx_trap_protocol_key_t * key_p;
			bcm_gport_t trap_gport;
		} rx_trap_protocol_set;
		struct {
			int unit;
			int trap_id;
			bcm_rx_trap_config_t * config;
		} rx_trap_set;
		struct {
			int unit;
			bcm_rx_trap_svtag_key_t * svtag_trap_key;
			bcm_gport_t * action_gport;
		} rx_trap_svtag_get;
		struct {
			int unit;
			bcm_rx_trap_svtag_key_t * svtag_trap_key;
			bcm_gport_t action_gport;
		} rx_trap_svtag_set;
		struct {
			int unit;
			uint32 flags;
			int sw_trap_id;
			int * hw_trap_id;
		} rx_trap_sw_to_hw_id_map_get;
		struct {
			int unit;
			int flags;
			bcm_rx_trap_t type;
			int * trap_id;
		} rx_trap_type_create;
		struct {
			int unit;
			int trap_id;
		} rx_trap_type_destroy;
		struct {
			int unit;
			int flags;
			int trap_id;
			bcm_rx_trap_t * trap_type;
		} rx_trap_type_from_id_get;
		struct {
			int unit;
			int flags;
			bcm_rx_trap_t type;
			int * trap_id;
		} rx_trap_type_get;
		struct {
			int unit;
			int * next_unit;
		} rx_unit_next_get;
		struct {
			int unit;
			bcm_rx_cb_f callback;
			uint8 priority;
		} rx_unregister;
		struct {
			int unit;
			bcm_sat_config_t * conf;
		} sat_config_get;
		struct {
			int unit;
			bcm_sat_config_t * conf;
		} sat_config_set;
		struct {
			int unit;
			bcm_sat_ctf_t ctf_id;
			bcm_sat_ctf_availability_config_t * config;
		} sat_ctf_availability_config_set;
		struct {
			int unit;
			int max_bins_count;
			bcm_sat_ctf_bin_limit_t * bins;
			int * bins_count;
		} sat_ctf_bin_limit_get;
		struct {
			int unit;
			int bins_count;
			bcm_sat_ctf_bin_limit_t * bins;
		} sat_ctf_bin_limit_set;
		struct {
			int unit;
			uint32 flags;
			bcm_sat_ctf_t * ctf_id;
		} sat_ctf_create;
		struct {
			int unit;
			bcm_sat_ctf_t ctf_id;
		} sat_ctf_destroy;
		struct {
			int unit;
		} sat_ctf_destroy_all;
		struct {
			int unit;
			bcm_sat_ctf_identifier_t * identifier;
			bcm_sat_ctf_t ctf_id;
		} sat_ctf_identifier_map;
		struct {
			int unit;
			bcm_sat_ctf_identifier_t * identifier;
		} sat_ctf_identifier_unmap;
		struct {
			int unit;
			bcm_sat_ctf_t ctf_id;
			bcm_sat_ctf_packet_info_t * packet_info;
		} sat_ctf_packet_config;
		struct {
			int unit;
			bcm_sat_ctf_t ctf_id;
			bcm_sat_ctf_report_config_t * reports;
		} sat_ctf_reports_config_set;
		struct {
			int unit;
			bcm_sat_ctf_t ctf_id;
			bcm_sat_ctf_stat_config_t * stat;
		} sat_ctf_stat_config_set;
		struct {
			int unit;
			bcm_sat_ctf_t ctf_id;
			uint32 flags;
			bcm_sat_ctf_stat_t * stat;
		} sat_ctf_stat_get;
		struct {
			int unit;
			uint32 trap_id;
		} sat_ctf_trap_add;
		struct {
			int unit;
			uint32 trap_data;
			uint32 trap_data_mask;
			uint32 session_id;
		} sat_ctf_trap_data_to_session_map;
		struct {
			int unit;
			uint32 trap_data;
			uint32 trap_data_mask;
		} sat_ctf_trap_data_to_session_unmap;
		struct {
			int unit;
			uint32 trap_id;
		} sat_ctf_trap_remove;
		struct {
			int unit;
		} sat_ctf_trap_remove_all;
		struct {
			int unit;
			bcm_sat_ctf_traverse_cb cb;
			void * user_data;
		} sat_ctf_traverse;
		struct {
			int unit;
			bcm_sat_endpoint_info_t * endpoint_info;
		} sat_endpoint_create;
		struct {
			int unit;
			bcm_sat_endpoint_t endpoint;
			uint32 flags;
		} sat_endpoint_destroy;
		struct {
			int unit;
			uint32 flags;
		} sat_endpoint_destroy_all;
		struct {
			int unit;
			bcm_sat_endpoint_t endpoint;
			uint32 flags;
			bcm_sat_endpoint_info_t * endpoint_info;
		} sat_endpoint_get;
		struct {
			int unit;
			uint32 flags;
			bcm_sat_endpoint_traverse_cb cb;
			void * user_data;
		} sat_endpoint_traverse;
		struct {
			int unit;
			bcm_sat_event_type_t event_type;
			bcm_sat_event_cb cb;
			void * user_data;
		} sat_event_register;
		struct {
			int unit;
			bcm_sat_event_type_t event_type;
			bcm_sat_event_cb cb;
		} sat_event_unregister;
		struct {
			int unit;
			bcm_sat_gtf_t gtf_id;
			int priority;
			bcm_sat_gtf_bandwidth_t * bw;
		} sat_gtf_bandwidth_get;
		struct {
			int unit;
			bcm_sat_gtf_t gtf_id;
			int priority;
			bcm_sat_gtf_bandwidth_t * bw;
		} sat_gtf_bandwidth_set;
		struct {
			int unit;
			uint32 flags;
			bcm_sat_gtf_t * gtf_id;
		} sat_gtf_create;
		struct {
			int unit;
			bcm_sat_gtf_t gtf_id;
		} sat_gtf_destroy;
		struct {
			int unit;
		} sat_gtf_destroy_all;
		struct {
			int unit;
			bcm_sat_gtf_t gtf_id;
			bcm_sat_gtf_packet_config_t * config;
		} sat_gtf_packet_config;
		struct {
			int unit;
			bcm_sat_gtf_t gtf_id;
			bcm_sat_gtf_packet_config_t * config;
		} sat_gtf_packet_config_get;
		struct {
			int unit;
			bcm_sat_gtf_t gtf_id;
			bcm_sat_gtf_packet_config_t * config;
		} sat_gtf_packet_config_set;
		struct {
			int unit;
			bcm_sat_gtf_t gtf_id;
			bcm_sat_gtf_pri_t priority;
		} sat_gtf_packet_start;
		struct {
			int unit;
			bcm_sat_gtf_t gtf_id;
			bcm_sat_gtf_pri_t priority;
		} sat_gtf_packet_stop;
		struct {
			int unit;
			bcm_sat_gtf_t gtf_id;
			int priority;
			bcm_sat_gtf_rate_pattern_t * config;
		} sat_gtf_rate_pattern_get;
		struct {
			int unit;
			bcm_sat_gtf_t gtf_id;
			int priority;
			bcm_sat_gtf_rate_pattern_t * config;
		} sat_gtf_rate_pattern_set;
		struct {
			int unit;
			bcm_sat_gtf_t gtf_id;
			int priority;
			uint32 flags;
			bcm_sat_gtf_stat_counter_t type;
			uint64 * value;
		} sat_gtf_stat_get;
		struct {
			int unit;
			bcm_sat_gtf_t gtf_id;
			bcm_sat_gtf_stat_multi_t * stat;
		} sat_gtf_stat_multi_get;
		struct {
			int unit;
			bcm_sat_gtf_traverse_cb cb;
			void * user_data;
		} sat_gtf_traverse;
		struct {
			int unit;
			bcm_srv6_extension_terminator_mapping_t * info;
		} srv6_extension_terminator_add;
		struct {
			int unit;
			bcm_srv6_extension_terminator_mapping_t * info;
		} srv6_extension_terminator_delete;
		struct {
			int unit;
			bcm_srv6_extension_terminator_mapping_t * info;
		} srv6_extension_terminator_get;
		struct {
			int unit;
			bcm_srv6_extension_terminator_traverse_info_t additional_info;
			bcm_srv6_extension_terminator_traverse_cb cb;
			void * user_data;
		} srv6_extension_terminator_traverse;
		struct {
			int unit;
			bcm_srv6_sid_initiator_info_t * info;
		} srv6_sid_initiator_create;
		struct {
			int unit;
			bcm_srv6_sid_initiator_info_t * info;
		} srv6_sid_initiator_delete;
		struct {
			int unit;
			bcm_srv6_sid_initiator_info_t * info;
		} srv6_sid_initiator_get;
		struct {
			int unit;
			bcm_srv6_sid_initiator_traverse_info_t additional_info;
			bcm_srv6_sid_initiator_traverse_cb cb;
			void * user_data;
		} srv6_sid_initiator_traverse;
		struct {
			int unit;
			bcm_srv6_srh_base_initiator_info_t * info;
		} srv6_srh_base_initiator_create;
		struct {
			int unit;
			bcm_srv6_srh_base_initiator_info_t * info;
		} srv6_srh_base_initiator_delete;
		struct {
			int unit;
			bcm_srv6_srh_base_initiator_info_t * info;
		} srv6_srh_base_initiator_get;
		struct {
			int unit;
			bcm_srv6_srh_base_initiator_traverse_info_t additional_info;
			bcm_srv6_srh_base_initiator_traverse_cb cb;
			void * user_data;
		} srv6_srh_base_initiator_traverse;
		struct {
			int unit;
			bcm_port_t port;
		} stat_clear;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
		} stat_clear_single;
		struct {
			int unit;
			int flags;
			bcm_stat_control_t type;
			int * arg;
		} stat_control_get;
		struct {
			int unit;
			int flags;
			bcm_stat_control_t type;
			int arg;
		} stat_control_set;
		struct {
			int unit;
			bcm_stat_counter_engine_t * engine;
			bcm_stat_counter_config_t * config;
		} stat_counter_config_get;
		struct {
			int unit;
			bcm_stat_counter_engine_t * engine;
			bcm_stat_counter_config_t * config;
		} stat_counter_config_set;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_database_t * database;
			bcm_stat_counter_database_control_t control;
			uint32 * arg;
		} stat_counter_database_control_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_database_t * database;
			bcm_stat_counter_database_control_t control;
			uint32 arg;
		} stat_counter_database_control_set;
		struct {
			int unit;
			uint32 flags;
			bcm_core_t core_id;
			int * database_id;
		} stat_counter_database_create;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_database_t * database;
		} stat_counter_database_destroy;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_database_t * database;
			bcm_stat_counter_enable_t * enable;
		} stat_counter_database_enable_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_database_t * database;
			bcm_stat_counter_enable_t * enable;
		} stat_counter_database_enable_set;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_database_t * database;
			int engine_id;
		} stat_counter_engine_attach;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_engine_t * engine;
			bcm_stat_counter_engine_control_t control;
			uint32 * arg;
		} stat_counter_engine_control_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_engine_t * engine;
			bcm_stat_counter_engine_control_t control;
			uint32 arg;
		} stat_counter_engine_control_set;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_database_t * database;
			int engine_id;
		} stat_counter_engine_detach;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_engine_t * engine;
			bcm_stat_eviction_t * eviction;
		} stat_counter_eviction_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_engine_t * engine;
			bcm_stat_eviction_t * eviction;
		} stat_counter_eviction_set;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_interface_key_t * interface;
			bcm_stat_expansion_select_t * expansion_select;
		} stat_counter_expansion_select_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_interface_key_t * interface;
			bcm_stat_expansion_select_t * expansion_select;
		} stat_counter_expansion_select_set;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_explicit_input_data_t * stat_counter_input_data;
			bcm_stat_counter_output_data_t * stat_counter_output_data;
		} stat_counter_explicit_get;
		struct {
			int unit;
			bcm_stat_counter_source_t source;
			int filter_max_count;
			bcm_stat_counter_filter_t * filter_array;
			int * filter_count;
		} stat_counter_filter_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_command_id_key_t * key;
			bcm_stat_counter_group_filter_t filter;
			int * is_active;
		} stat_counter_filter_group_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_command_id_key_t * key;
			bcm_stat_counter_group_filter_t filter;
			int is_active;
		} stat_counter_filter_group_set;
		struct {
			int unit;
			bcm_stat_counter_source_t source;
			bcm_stat_counter_filter_t filter;
			int * is_active;
		} stat_counter_filter_is_active_get;
		struct {
			int unit;
			bcm_stat_counter_source_t source;
			bcm_stat_counter_filter_t * filter_array;
			int filter_count;
			int is_active;
		} stat_counter_filter_set;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_input_data_t * stat_counter_input_data;
			bcm_stat_counter_output_data_t * stat_counter_output_data;
		} stat_counter_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_database_t * database;
			bcm_stat_counter_interface_t * config;
		} stat_counter_interface_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_database_t * database;
			bcm_stat_counter_interface_t * config;
		} stat_counter_interface_set;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_source_t * source;
			bcm_stat_counter_lif_mask_t * counting_mask;
			bcm_stat_counter_lif_stack_id_t * lif_stack_id_to_count;
		} stat_counter_lif_counting_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_source_type_t source;
			bcm_stat_counter_lif_range_id_t range_id;
			bcm_stat_counter_lif_counting_range_t * lif_range;
		} stat_counter_lif_counting_range_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_source_type_t source;
			bcm_stat_counter_lif_range_id_t range_id;
			bcm_stat_counter_lif_counting_range_t * lif_range;
		} stat_counter_lif_counting_range_set;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_source_t * source;
			bcm_stat_counter_lif_mask_t * counting_mask;
			bcm_stat_counter_lif_stack_id_t lif_stack_id_to_count;
		} stat_counter_lif_counting_set;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_database_t * database;
			bcm_stat_counter_set_map_t * counter_set_map;
		} stat_counter_set_mapping_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_database_t * database;
			bcm_stat_counter_set_map_t * counter_set_map;
		} stat_counter_set_mapping_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			bcm_custom_stat_trigger_t trigger;
		} stat_custom_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			bcm_custom_stat_trigger_t trigger;
			int * result;
		} stat_custom_check;
		struct {
			int unit;
			bcm_stat_custom_base_index_action_t idx_action;
			bcm_stat_custom_counter_info_t counter_info_old;
			bcm_stat_custom_counter_info_t * counter_info_new;
		} stat_custom_counter_id_move;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			bcm_custom_stat_trigger_t trigger;
		} stat_custom_delete;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
		} stat_custom_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint32 * flags;
		} stat_custom_get;
		struct {
			int unit;
			uint32 mode_id;
			bcm_stat_object_t object;
			uint32 * stat_counter_id;
			uint32 * num_entries;
		} stat_custom_group_create;
		struct {
			int unit;
			uint32 mode_id;
			bcm_stat_object_t object;
			uint32 pool_id;
			uint32 base_idx;
			bcm_stat_custom_counter_info_t * counter_info;
		} stat_custom_group_id_create;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint32 flags;
		} stat_custom_set;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_database_t * database;
			int type_id;
			bcm_stat_eviction_boundaries_t * boundaries;
		} stat_database_eviction_boundaries_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_database_t * database;
			int type_id;
			bcm_stat_eviction_boundaries_t * boundaries;
		} stat_database_eviction_boundaries_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint64 * value;
		} stat_direct_get;
		struct {
			int unit;
			bcm_port_t port;
			int nstat;
			bcm_stat_val_t * stat_arr;
			uint64 * value_arr;
		} stat_direct_multi_get;
		struct {
			int unit;
			bcm_pkt_drop_event_t type;
			uint64 * value;
		} stat_drop_event_counter_get;
		struct {
			int unit;
			bcm_pkt_drop_event_t type;
			uint64 value;
		} stat_drop_event_counter_set;
		struct {
			int unit;
			bcm_pkt_drop_event_t type;
			uint64 * value;
		} stat_drop_event_counter_sync_get;
		struct {
			int unit;
			int flags;
			bcm_stat_egress_receive_tm_pointer_format_t * pointer_format;
		} stat_egress_receive_tm_pointer_format_get;
		struct {
			int unit;
			int flags;
			bcm_stat_egress_receive_tm_pointer_format_t * pointer_format;
		} stat_egress_receive_tm_pointer_format_set;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_engine_t * engine;
			bcm_stat_eviction_boundaries_t * boundaries;
		} stat_eviction_boundaries_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_engine_t * engine;
			bcm_stat_eviction_boundaries_t * boundaries;
		} stat_eviction_boundaries_set;
		struct {
			int unit;
			uint32 stat_counter_id;
			bcm_stat_flex_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} stat_flex_counter_get;
		struct {
			int unit;
			uint32 stat_counter_id;
			bcm_stat_flex_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} stat_flex_counter_set;
		struct {
			int unit;
			uint32 stat_counter_id;
			bcm_stat_flex_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} stat_flex_counter_sync_get;
		struct {
			int unit;
			bcm_stat_flex_direction_t direction;
			uint32 num_pools;
			bcm_stat_flex_pool_stat_info_t * flex_pool_stat;
			uint32 * actual_num_pools;
		} stat_flex_pool_info_multi_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint64 * value;
		} stat_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint32 * value;
		} stat_get32;
		struct {
			int unit;
			bcm_stat_object_t object;
			bcm_stat_group_mode_t group_mode;
			uint32 * stat_counter_id;
			uint32 * num_entries;
		} stat_group_create;
		struct {
			int unit;
			uint32 stat_counter_id;
		} stat_group_destroy;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_group_filter_t group;
			int max_drop_reason_count;
			bcm_cosq_drop_reason_t * drop_reasons_array;
			int * drop_reasons_count;
		} stat_group_drop_reasons_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_counter_group_filter_t group;
			bcm_cosq_drop_reason_t * drop_reasons_array;
			int drop_reasons_count;
		} stat_group_drop_reasons_set;
		struct {
			int unit;
			bcm_stat_object_t object;
			bcm_stat_group_mode_t group_mode;
		} stat_group_dump;
		struct {
			int unit;
		} stat_group_dump_all;
		struct {
			int unit;
			bcm_stat_group_mode_attr_t attr;
			uint32 num_of_attr_values;
			uint32 * attr_values;
			bcm_stat_group_mode_attr_class_id_t * attr_class_id;
		} stat_group_mode_attr_class_id_create;
		struct {
			int unit;
			bcm_stat_group_mode_attr_class_id_t attr_class_id;
		} stat_group_mode_attr_class_id_destroy;
		struct {
			int unit;
			uint32 options;
			bcm_stat_group_mode_id_config_t * stat_config;
			uint32 num_selectors;
			bcm_stat_group_mode_attr_selector_t * attr_sel;
			uint32 * mode_id;
		} stat_group_mode_id_config_create;
		struct {
			int unit;
			uint32 mode_id;
			bcm_stat_group_mode_id_config_t * config;
			uint32 num_selectors;
			bcm_stat_group_mode_attr_selector_t * attr_sel;
			uint32 * actual_num_selectors;
		} stat_group_mode_id_config_get;
		struct {
			int unit;
			uint32 flags;
			uint32 total_counters;
			uint32 num_selectors;
			bcm_stat_group_mode_attr_selector_t * attr_selectors;
			uint32 * mode_id;
		} stat_group_mode_id_create;
		struct {
			int unit;
			uint32 mode_id;
		} stat_group_mode_id_destroy;
		struct {
			int unit;
			uint32 mode_id;
			uint32 * flags;
			uint32 * total_counters;
			uint32 num_selectors;
			bcm_stat_group_mode_attr_selector_t * attr_selectors;
			uint32 * actual_num_selectors;
		} stat_group_mode_id_get;
		struct {
			int unit;
			bcm_stat_object_t object;
			int stat_max;
			uint32 * stat_array;
			int * stat_count;
		} stat_id_get_all;
		struct {
			int unit;
		} stat_init;
		struct {
			int unit;
			int flags;
			bcm_stat_latency_port_stat_id_key_t * key;
			int * stat_id;
		} stat_latency_port_stat_id_get;
		struct {
			int unit;
			uint32 flags;
			int lif_counting_profile;
			bcm_stat_lif_counting_t * lif_counting;
		} stat_lif_counting_profile_get;
		struct {
			int unit;
			uint32 flags;
			int lif_counting_profile;
			bcm_stat_lif_counting_t * lif_counting;
		} stat_lif_counting_profile_set;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_lif_counting_source_t * source;
			bcm_stat_counter_lif_stack_id_t lif_stack_level;
			int * priority;
		} stat_lif_counting_stack_level_priority_get;
		struct {
			int unit;
			uint32 flags;
			bcm_stat_lif_counting_source_t * source;
			bcm_stat_counter_lif_stack_id_t lif_stack_level;
			int priority;
		} stat_lif_counting_stack_level_priority_set;
		struct {
			int unit;
			bcm_port_t port;
			int nstat;
			bcm_stat_val_t * stat_arr;
			uint64 * value_arr;
		} stat_multi_get;
		struct {
			int unit;
			bcm_port_t port;
			int nstat;
			bcm_stat_val_t * stat_arr;
			uint32 * value_arr;
		} stat_multi_get32;
		struct {
			int unit;
			int flags;
			bcm_stat_counter_command_id_key_t * key;
			bcm_stat_pkt_size_adjust_select_type_t select_type;
			int * enable;
		} stat_pkt_size_adjust_select_get;
		struct {
			int unit;
			int flags;
			bcm_stat_counter_command_id_key_t * key;
			bcm_stat_pkt_size_adjust_select_type_t select_type;
			int enable;
		} stat_pkt_size_adjust_select_set;
		struct {
			int unit;
			uint32 num_gports;
			bcm_gport_t * gport;
			uint32 * group_id;
		} stat_port_group_create;
		struct {
			int unit;
			uint32 group_id;
		} stat_port_group_destroy;
		struct {
			int unit;
			bcm_stat_pp_metadata_info_t * metadata_info;
		} stat_pp_metadata_get;
		struct {
			int unit;
			bcm_stat_pp_metadata_info_t * metadata_info;
		} stat_pp_metadata_set;
		struct {
			int unit;
			int flags;
			bcm_stat_counter_interface_type_t engine_source;
			int * stat_pp_profile;
			bcm_stat_pp_profile_info_t * stat_pp_profile_info;
		} stat_pp_profile_create;
		struct {
			int unit;
			int stat_pp_profile;
		} stat_pp_profile_delete;
		struct {
			int unit;
			int stat_pp_profile;
			bcm_stat_pp_profile_info_t * stat_pp_profile_info;
		} stat_pp_profile_get;
		struct {
			int unit;
			int flags;
			int max_nof_elements;
			bcm_stat_stif_record_format_element_t * elements_array;
			int * nof_elements;
		} stat_stif_record_format_get;
		struct {
			int unit;
			int flags;
			int nof_elements;
			bcm_stat_stif_record_format_element_t * record_format_elements;
		} stat_stif_record_format_set;
		struct {
			int unit;
			int flags;
			bcm_stat_stif_source_t source;
			bcm_port_t * port;
		} stat_stif_source_mapping_get;
		struct {
			int unit;
			int flags;
			bcm_stat_stif_source_t source;
			bcm_port_t port;
		} stat_stif_source_mapping_set;
		struct {
			int unit;
		} stat_sync;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint64 * value;
		} stat_sync_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint32 * value;
		} stat_sync_get32;
		struct {
			int unit;
			bcm_port_t port;
			int nstat;
			bcm_stat_val_t * stat_arr;
			uint64 * value_arr;
		} stat_sync_multi_get;
		struct {
			int unit;
			bcm_port_t port;
			int nstat;
			bcm_stat_val_t * stat_arr;
			uint32 * value_arr;
		} stat_sync_multi_get32;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t stat;
			bcm_stat_threshold_t * threshold;
		} stat_threshold_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t stat;
			bcm_stat_threshold_t * threshold;
		} stat_threshold_set;
		struct {
			int unit;
			bcm_pkt_trace_event_t type;
			uint64 * value;
		} stat_trace_event_counter_get;
		struct {
			int unit;
			bcm_pkt_trace_event_t type;
			uint64 value;
		} stat_trace_event_counter_set;
		struct {
			int unit;
			bcm_pkt_trace_event_t type;
			uint64 * value;
		} stat_trace_event_counter_sync_get;
		struct {
			int unit;
		} stg_clear;
		struct {
			int unit;
			int * max_stg;
		} stg_count_get;
		struct {
			int unit;
			bcm_stg_t * stg_ptr;
		} stg_create;
		struct {
			int unit;
			bcm_stg_t stg;
		} stg_create_id;
		struct {
			int unit;
			bcm_stg_t * stg_ptr;
		} stg_default_get;
		struct {
			int unit;
			bcm_stg_t stg;
		} stg_default_set;
		struct {
			int unit;
			bcm_stg_t stg;
		} stg_destroy;
		struct {
			int unit;
		} stg_init;
		struct {
			int unit;
			bcm_stg_t ** list;
			int * count;
		} stg_list;
		struct {
			int unit;
			bcm_stg_t * list;
			int count;
		} stg_list_destroy;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_port_t port;
			int * stp_state;
		} stg_stp_get;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_port_t port;
			int stp_state;
		} stg_stp_set;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_vlan_t vid;
		} stg_vlan_add;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_vlan_t ** list;
			int * count;
		} stg_vlan_list;
		struct {
			int unit;
			bcm_vlan_t * list;
			int count;
		} stg_vlan_list_destroy;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_vlan_t vid;
		} stg_vlan_remove;
		struct {
			int unit;
			bcm_stg_t stg;
		} stg_vlan_remove_all;
		struct {
			int unit;
			int tm_domain;
			bcm_trunk_t stk_trunk;
		} stk_domain_stk_trunk_add;
		struct {
			int unit;
			int tm_domain;
			bcm_trunk_t stk_trunk;
		} stk_domain_stk_trunk_delete;
		struct {
			int unit;
			bcm_trunk_t stk_trunk;
			int domain_max;
			int * domain_array;
			int * domain_count;
		} stk_domain_stk_trunk_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t * fmod;
			bcm_module_t * lmod;
		} stk_fmod_lmod_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t fmod;
			bcm_module_t lmod;
		} stk_fmod_lmod_mapping_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t fmod;
			bcm_module_t * smod;
			bcm_port_t * sport;
			uint32 * nports;
		} stk_fmod_smod_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t fmod;
			bcm_module_t smod;
			bcm_port_t sport;
			uint32 nports;
		} stk_fmod_smod_mapping_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_gport_t * sysport;
		} stk_gport_sysport_get;
		struct {
			int unit;
		} stk_init;
		struct {
			int unit;
			uint32 * flags;
		} stk_mode_get;
		struct {
			int unit;
			uint32 flags;
		} stk_mode_set;
		struct {
			int unit;
			bcm_stk_modid_config_t * modid;
		} stk_modid_config_add;
		struct {
			int unit;
			bcm_stk_modid_config_t * modid;
		} stk_modid_config_delete;
		struct {
			int unit;
		} stk_modid_config_delete_all;
		struct {
			int unit;
			bcm_stk_modid_config_t * modid;
		} stk_modid_config_get;
		struct {
			int unit;
			int modid_max;
			bcm_stk_modid_config_t * modid_array;
			int * modid_count;
		} stk_modid_config_get_all;
		struct {
			int unit;
			bcm_stk_modid_config_t * modid;
		} stk_modid_config_set;
		struct {
			int unit;
			int * num_modid;
		} stk_modid_count;
		struct {
			int unit;
			int modid;
			int tm_domain;
		} stk_modid_domain_add;
		struct {
			int unit;
			int modid;
			int tm_domain;
		} stk_modid_domain_delete;
		struct {
			int unit;
			int tm_domain;
			int mod_max;
			int * mod_array;
			int * mod_count;
		} stk_modid_domain_get;
		struct {
			int unit;
			int * modid;
		} stk_modid_get;
		struct {
			int unit;
			int modid;
		} stk_modid_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} stk_modmap_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} stk_modmap_enable_set;
		struct {
			int unit;
			int setget;
			bcm_module_t mod_in;
			bcm_port_t port_in;
			bcm_module_t * mod_out;
			bcm_port_t * port_out;
		} stk_modmap_map;
		struct {
			int unit;
			bcm_stk_modmap_cb_t func;
		} stk_modmap_register;
		struct {
			int unit;
		} stk_modmap_unregister;
		struct {
			int unit;
			int modid;
			bcm_port_t port;
		} stk_modport_add;
		struct {
			int unit;
			int modid;
		} stk_modport_clear;
		struct {
			int unit;
		} stk_modport_clear_all;
		struct {
			int unit;
			int modid;
			bcm_port_t port;
		} stk_modport_delete;
		struct {
			int unit;
			int modid;
			int * port;
		} stk_modport_get;
		struct {
			int unit;
			int modid;
			int port_max;
			int * port_array;
			int * port_count;
		} stk_modport_get_all;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flags;
			int * remote_modid;
			bcm_port_t * remote_port;
		} stk_modport_remote_map_get;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flags;
			int remote_modid;
			bcm_port_t remote_port;
		} stk_modport_remote_map_set;
		struct {
			int unit;
			int modid;
			int port;
		} stk_modport_set;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t module;
			bcm_stk_module_control_t control;
			int * arg;
		} stk_module_control_get;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t module;
			bcm_stk_module_control_t control;
			int arg;
		} stk_module_control_set;
		struct {
			int unit;
			bcm_module_t modid;
			int nports;
			int enable;
		} stk_module_enable;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t * max_module;
		} stk_module_max_get;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t max_module;
		} stk_module_max_set;
		struct {
			int unit;
			int modid;
			bcm_pbmp_t * pbmp;
		} stk_module_remote_port_enable_get;
		struct {
			int unit;
			int modid;
			bcm_pbmp_t pbmp;
		} stk_module_remote_port_enable_set;
		struct {
			int unit;
			int * my_modid;
		} stk_my_modid_get;
		struct {
			int unit;
			int my_modid;
		} stk_my_modid_set;
		struct {
			int unit;
			bcm_pbmp_t * cur_pbm;
			bcm_pbmp_t * inactive_pbm;
		} stk_pbmp_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} stk_port_get;
		struct {
			int unit;
			bcm_port_t port;
			int * group;
		} stk_port_modmap_group_get;
		struct {
			int unit;
			int * max_group;
		} stk_port_modmap_group_max_get;
		struct {
			int unit;
			bcm_port_t port;
			int group;
		} stk_port_modmap_group_set;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_module_t dest_modid;
			bcm_port_t dest_port;
		} stk_port_modport_add;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_module_t dest_modid;
		} stk_port_modport_clear;
		struct {
			int unit;
			bcm_port_t ing_port;
		} stk_port_modport_clear_all;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_module_t dest_modid;
			bcm_port_t dest_port;
		} stk_port_modport_delete;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_module_t dest_modid;
			bcm_port_t * dest_port;
		} stk_port_modport_get;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_module_t dest_modid;
			int dest_port_max;
			bcm_port_t * dest_port_array;
			int * dest_port_count;
		} stk_port_modport_get_all;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_module_t dest_modid;
			bcm_port_t dest_port;
		} stk_port_modport_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} stk_port_set;
		struct {
			int unit;
			bcm_gport_t sysport;
			bcm_gport_t * gport;
		} stk_sysport_gport_get;
		struct {
			int unit;
			bcm_gport_t sysport;
			bcm_gport_t gport;
		} stk_sysport_gport_set;
		struct {
			int unit;
			bcm_stk_system_gport_map_t * sys_gport_map;
		} stk_system_gport_map_create;
		struct {
			int unit;
			bcm_gport_t system_gport;
		} stk_system_gport_map_destroy;
		struct {
			int unit;
			bcm_stk_system_gport_map_t * sys_gport_map;
		} stk_system_gport_map_get;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			bcm_pbmp_t pbmp;
		} stk_ucbitmap_del;
		struct {
			int unit;
			int port;
			int modid;
			bcm_pbmp_t * pbmp;
		} stk_ucbitmap_get;
		struct {
			int unit;
			int port;
			int modid;
			bcm_pbmp_t pbmp;
		} stk_ucbitmap_set;
		struct {
			int unit;
			bcm_stk_cb_f cb;
			void * cookie;
		} stk_update_callback_register;
		struct {
			int unit;
			bcm_stk_cb_f cb;
			void * cookie;
		} stk_update_callback_unregister;
		struct {
			int unit;
		} subport_cleanup;
		struct {
			int unit;
			bcm_gport_t subport_gport;
			bcm_module_t * module;
			bcm_port_t * port;
		} subport_gport_modport_get;
		struct {
			int unit;
			bcm_subport_group_config_t * config;
			bcm_gport_t * group;
		} subport_group_create;
		struct {
			int unit;
			bcm_gport_t group;
		} subport_group_destroy;
		struct {
			int unit;
			bcm_gport_t group;
			bcm_subport_group_config_t * config;
		} subport_group_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_subport_group_linkphy_config_t * linkphy_config;
		} subport_group_linkphy_config_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_subport_group_linkphy_config_t * linkphy_config;
		} subport_group_linkphy_config_set;
		struct {
			int unit;
			bcm_gport_t subport_group;
			bcm_subport_port_traverse_cb cb;
			void * user_data;
		} subport_group_traverse;
		struct {
			int unit;
		} subport_init;
		struct {
			int unit;
			bcm_subport_linkphy_rx_errors_t errors;
			bcm_subport_linkphy_rx_error_reg_info_t * reg_info;
			void * user_data;
		} subport_linkphy_rx_error_register;
		struct {
			int unit;
			bcm_subport_linkphy_rx_errors_t errors;
		} subport_linkphy_rx_error_unregister;
		struct {
			int unit;
			bcm_subport_config_t * config;
			bcm_gport_t * port;
		} subport_port_add;
		struct {
			int unit;
			bcm_gport_t port;
		} subport_port_delete;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_subport_config_t * config;
		} subport_port_get;
		struct {
			int unit;
			uint32 options;
			bcm_subport_port_group_t * port_group_id;
		} subport_port_group_id_create;
		struct {
			int unit;
			bcm_subport_port_group_t port_group_id;
		} subport_port_group_id_destroy;
		struct {
			int unit;
		} subport_port_group_id_destroy_all;
		struct {
			int unit;
			bcm_subport_port_group_t port_group_id;
		} subport_port_group_id_get;
		struct {
			int unit;
			int max_size;
			bcm_subport_port_group_t * port_group_id_array;
			int * array_size;
		} subport_port_group_id_get_all;
		struct {
			int unit;
			bcm_subport_port_group_t port_group_id;
			int max_subports;
			bcm_gport_t * subport_gports;
			int * num_subports;
		} subport_port_group_subport_multi_get;
		struct {
			int unit;
			bcm_subport_port_group_t port_group_id;
			int num_subports;
			bcm_gport_t * subport_gports;
		} subport_port_group_subport_multi_set;
		struct {
			int unit;
			bcm_gport_t port;
			int stream_id;
			bcm_subport_stat_t stat_type;
			uint64 * val;
		} subport_port_stat_get;
		struct {
			int unit;
			bcm_gport_t port;
			int stream_id;
			bcm_subport_stat_t stat_type;
			uint64 val;
		} subport_port_stat_set;
		struct {
			int unit;
			bcm_subport_port_traverse_cb cb;
			void * user_data;
		} subport_port_traverse;
		struct {
			int unit;
			int num_subports;
			bcm_gport_t * subport_gport;
			int * subport_pbmp_profile_id;
		} subport_tunnel_pbmp_profile_create;
		struct {
			int unit;
			int subport_pbmp_profile_id;
		} subport_tunnel_pbmp_profile_destroy;
		struct {
			int unit;
		} subport_tunnel_pbmp_profile_destroy_all;
		struct {
			int unit;
			int num_subports;
			bcm_gport_t * subport_gport;
			int * subport_pbmp_profile_id;
		} subport_tunnel_pbmp_profile_get;
		struct {
			int unit;
			bcm_sum_config_t * config_data;
			bcm_pbmp_t * pbmp;
		} sum_config_get;
		struct {
			int unit;
			bcm_sum_config_t * config_data;
			bcm_pbmp_t pbmp;
		} sum_config_set;
		struct {
			int unit;
		} sum_detach;
		struct {
			int unit;
		} sum_init;
		struct {
			int unit;
			uint32 max_samples;
			bcm_sum_stat_info_t * stats_data;
			uint32 * num_samples;
			bcm_sum_stat_type_t stat_type;
			uint32 usec_sample_period;
		} sum_stat_get;
		struct {
			int unit;
			uint32 options;
			bcm_switch_agm_info_t * agm_info;
		} switch_agm_create;
		struct {
			int unit;
			bcm_switch_agm_id_t agm_id;
		} switch_agm_destroy;
		struct {
			int unit;
			bcm_switch_agm_id_t agm_id;
			int * enable;
		} switch_agm_enable_get;
		struct {
			int unit;
			bcm_switch_agm_id_t agm_id;
			int enable;
		} switch_agm_enable_set;
		struct {
			int unit;
			bcm_switch_agm_info_t * agm_info;
		} switch_agm_get;
		struct {
			int unit;
			bcm_switch_agm_id_t agm_id;
			bcm_if_t * l3_ecmp_id;
		} switch_agm_l3_ecmp_attach_get;
		struct {
			int unit;
			bcm_switch_agm_id_t agm_id;
		} switch_agm_stat_clear;
		struct {
			int unit;
			bcm_switch_agm_id_t agm_id;
			int nstat;
			bcm_switch_agm_stat_t * stat_arr;
		} switch_agm_stat_get;
		struct {
			int unit;
			int flags;
			bcm_switch_agm_traverse_cb trav_fn;
			void * user_data;
		} switch_agm_traverse;
		struct {
			int unit;
			bcm_switch_agm_id_t agm_id;
			bcm_trunk_t * trunk_id;
		} switch_agm_trunk_attach_get;
		struct {
			int unit;
			uint32 options;
			bcm_switch_appl_signature_info_t * appl_signature_info;
			bcm_switch_appl_signature_t * appl_signature;
		} switch_appl_signature_create;
		struct {
			int unit;
			uint32 options;
			bcm_switch_appl_signature_t appl_signature;
		} switch_appl_signature_destroy;
		struct {
			int unit;
			uint32 options;
			bcm_switch_appl_signature_t appl_signature;
			bcm_switch_appl_signature_info_t * appl_signature_info;
		} switch_appl_signature_get;
		struct {
			int unit;
			uint32 options;
			int size;
			bcm_switch_appl_signature_t * appl_signature_array;
			int * count;
		} switch_appl_signature_get_all;
		struct {
			int unit;
			uint32 options;
			bcm_switch_appl_signature_t appl_signature;
			uint32 priority;
		} switch_appl_signature_prio_set;
		struct {
			int unit;
			bcm_switch_chip_info_t info_type;
			int max_size;
			void * data_buf;
			int * actual_size;
		} switch_chip_info_get;
		struct {
			int unit;
			bcm_switch_control_t type;
			int * arg;
		} switch_control_get;
		struct {
			int unit;
			bcm_switch_control_key_t key;
			bcm_switch_control_info_t * value;
		} switch_control_indexed_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_switch_control_key_t key;
			bcm_switch_control_info_t * value;
		} switch_control_indexed_port_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_switch_control_key_t key;
			bcm_switch_control_info_t value;
		} switch_control_indexed_port_set;
		struct {
			int unit;
			bcm_switch_control_key_t key;
			bcm_switch_control_info_t value;
		} switch_control_indexed_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_switch_control_t type;
			int * arg;
		} switch_control_port_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_switch_control_t type;
			int arg;
		} switch_control_port_set;
		struct {
			int unit;
			bcm_switch_control_t type;
			int arg;
		} switch_control_set;
		struct {
			int unit;
			uint32 flags;
			bcm_switch_dosattack_event_t event;
			int * arg;
		} switch_dosattack_event_get;
		struct {
			int unit;
			uint32 flags;
			bcm_switch_dosattack_event_t event;
			int arg;
		} switch_dosattack_event_set;
		struct {
			int unit;
			uint32 flags;
		} switch_dram_init;
		struct {
			int unit;
			uint32 flags;
		} switch_dram_power_down;
		struct {
			int unit;
			uint32 flags;
			bcm_switch_dram_power_down_callback_t callback;
			void * userdata;
		} switch_dram_power_down_cb_register;
		struct {
			int unit;
			bcm_switch_dram_power_down_callback_t callback;
			void * userdata;
		} switch_dram_power_down_cb_unregister;
		struct {
			int unit;
			uint32 flags;
			uint32 enable;
		} switch_dram_traffic_enable_set;
		struct {
			int unit;
			bcm_switch_dram_vendor_info_t * info;
		} switch_dram_vendor_info_get;
		struct {
			int unit;
			bcm_switch_drop_event_mon_t * monitor;
		} switch_drop_event_mon_get;
		struct {
			int unit;
			bcm_switch_drop_event_mon_t * monitor;
		} switch_drop_event_mon_set;
		struct {
			int unit;
			bcm_switch_encap_info_t * encap_info;
			bcm_if_t * encap_id;
		} switch_encap_create;
		struct {
			int unit;
			bcm_switch_encap_dest_t * encap_info;
		} switch_encap_dest_map_add;
		struct {
			int unit;
			bcm_switch_encap_dest_t * encap_info;
		} switch_encap_dest_map_delete;
		struct {
			int unit;
			bcm_switch_encap_dest_t * encap_info;
		} switch_encap_dest_map_get;
		struct {
			int unit;
			bcm_switch_encap_dest_map_traverse_cb cb_fn;
			void * user_data;
		} switch_encap_dest_map_traverse;
		struct {
			int unit;
			bcm_if_t encap_id;
		} switch_encap_destroy;
		struct {
			int unit;
		} switch_encap_destroy_all;
		struct {
			int unit;
			bcm_if_t encap_id;
			bcm_switch_encap_info_t * encap_info;
		} switch_encap_get;
		struct {
			int unit;
			bcm_if_t encap_id;
			bcm_switch_encap_info_t * encap_info;
		} switch_encap_set;
		struct {
			int unit;
			bcm_switch_encap_traverse_cb cb_fn;
			void * user_data;
		} switch_encap_traverse;
		struct {
			int unit;
			bcm_switch_ep_recirc_drop_event_control_t * drop_event_ctrl;
		} switch_ep_recirc_drop_event_control_get;
		struct {
			int unit;
			bcm_switch_ep_recirc_drop_event_control_t * drop_event_ctrl;
		} switch_ep_recirc_drop_event_control_set;
		struct {
			int unit;
			bcm_switch_ep_recirc_profile_t * recirc_profile;
			int * recirc_profile_id;
		} switch_ep_recirc_profile_create;
		struct {
			int unit;
			int recirc_profile_id;
		} switch_ep_recirc_profile_destroy;
		struct {
			int unit;
			int recirc_profile_id;
			bcm_switch_ep_recirc_profile_t * recirc_profile;
		} switch_ep_recirc_profile_get;
		struct {
			int unit;
			int * recirc_profile_id_array;
			int * count;
		} switch_ep_recirc_profile_get_all;
		struct {
			int unit;
			bcm_switch_ep_recirc_trace_event_control_t * trace_event_ctrl;
		} switch_ep_recirc_trace_event_control_get;
		struct {
			int unit;
			bcm_switch_ep_recirc_trace_event_control_t * trace_event_ctrl;
		} switch_ep_recirc_trace_event_control_set;
		struct {
			int unit;
			bcm_pkt_trace_event_t trace_event;
			int * enable;
		} switch_ep_recirc_trace_event_enable_get;
		struct {
			int unit;
			bcm_pkt_trace_event_t * trace_event_array;
			int * count;
		} switch_ep_recirc_trace_event_enable_get_all;
		struct {
			int unit;
			bcm_pkt_trace_event_t trace_event;
			int enable;
		} switch_ep_recirc_trace_event_enable_set;
		struct {
			int unit;
			bcm_switch_event_t event;
			bcm_switch_event_control_t type;
			uint32 * value;
		} switch_event_control_get;
		struct {
			int unit;
			bcm_switch_event_t event;
			bcm_switch_event_control_t type;
			uint32 value;
		} switch_event_control_set;
		struct {
			int unit;
			bcm_switch_event_cb_t cb;
			void * userdata;
		} switch_event_register;
		struct {
			int unit;
			bcm_switch_event_cb_t cb;
			void * userdata;
		} switch_event_unregister;
		struct {
			int unit;
			bcm_switch_fec_property_config_t * fec_config;
		} switch_fec_property_get;
		struct {
			int unit;
			uint32 flags;
			bcm_switch_hard_reset_callback_t callback;
			void * userdata;
		} switch_hard_reset_cb_register;
		struct {
			int unit;
			bcm_switch_hard_reset_callback_t callback;
			void * userdata;
		} switch_hard_reset_cb_unregister;
		struct {
			int unit;
			bcm_switch_hash_bank_control_t * bank_control;
		} switch_hash_bank_control_get;
		struct {
			int unit;
			bcm_switch_hash_bank_control_t * bank_control;
		} switch_hash_bank_control_set;
		struct {
			int unit;
			bcm_switch_hash_bank_info_t * bank_info;
		} switch_hash_bank_info_get;
		struct {
			int unit;
			bcm_switch_hash_table_t hash_table;
			int array_size;
			bcm_switch_hash_bank_t * bank_array;
			int * num_banks;
		} switch_hash_bank_multi_get;
		struct {
			int unit;
			bcm_switch_hash_table_t hash_table;
			uint32 bank_num;
			int * hash_type;
			uint32 * hash_offset;
		} switch_hash_banks_config_get;
		struct {
			int unit;
			bcm_switch_hash_table_t hash_table;
			uint32 bank_num;
			int hash_type;
			uint32 hash_offset;
		} switch_hash_banks_config_set;
		struct {
			int unit;
			bcm_switch_hash_table_t hash_table;
			uint32 * bank_count;
		} switch_hash_banks_max_get;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_hash_entry_t * entry;
		} switch_hash_entry_create;
		struct {
			int unit;
			bcm_field_qset_t qset;
			bcm_hash_entry_t * entry;
		} switch_hash_entry_create_qset;
		struct {
			int unit;
			bcm_hash_entry_t entry;
		} switch_hash_entry_destroy;
		struct {
			int unit;
			bcm_hash_entry_t entry;
			bcm_switch_hash_entry_config_t * config;
		} switch_hash_entry_get;
		struct {
			int unit;
			bcm_hash_entry_t entry;
			uint32 offset;
		} switch_hash_entry_install;
		struct {
			int unit;
			bcm_hash_entry_t entry;
			uint32 offset;
		} switch_hash_entry_reinstall;
		struct {
			int unit;
			bcm_hash_entry_t entry;
		} switch_hash_entry_remove;
		struct {
			int unit;
			bcm_hash_entry_t entry;
			bcm_switch_hash_entry_config_t * config;
		} switch_hash_entry_set;
		struct {
			int unit;
			int flags;
			bcm_switch_hash_entry_traverse_cb cb_fn;
			void * user_data;
		} switch_hash_entry_traverse;
		struct {
			int unit;
			bcm_hash_entry_t entry;
			int qual_id;
			uint32 data;
			uint32 mask;
		} switch_hash_qualify_data;
		struct {
			int unit;
			bcm_hash_entry_t entry;
			bcm_udf_id_t udf_id;
			int length;
			uint8 * data;
			uint8 * mask;
		} switch_hash_qualify_udf;
		struct {
			int unit;
			bcm_hash_entry_t entry;
			bcm_udf_id_t udf_id;
			int max_length;
			uint8 * data;
			uint8 * mask;
			int * actual_length;
		} switch_hash_qualify_udf_get;
		struct {
			int unit;
			bcm_switch_hash_bank_t bank_num;
			int array_size;
			bcm_switch_hash_table_t * table_array;
			int * num_tables;
		} switch_hash_table_multi_get;
		struct {
			int unit;
			bcm_ip6_t * ip6_addr;
			bcm_ip6_t * ip6_mask;
		} switch_ipv6_reserved_multicast_addr_get;
		struct {
			int unit;
			int inner;
			int num;
			bcm_ip6_t * ip6_addr;
			bcm_ip6_t * ip6_mask;
		} switch_ipv6_reserved_multicast_addr_multi_get;
		struct {
			int unit;
			int inner;
			int num;
			bcm_ip6_t * ip6_addr;
			bcm_ip6_t * ip6_mask;
		} switch_ipv6_reserved_multicast_addr_multi_set;
		struct {
			int unit;
			uint8 * ip6_addr;
			uint8 * ip6_mask;
		} switch_ipv6_reserved_multicast_addr_set;
		struct {
			int unit;
			bcm_core_t core;
			bcm_field_AppType_t apptype;
			bcm_switch_kbp_apptype_info_t * apptype_info;
		} switch_kbp_apptype_info_get;
		struct {
			int unit;
			bcm_core_t core;
			bcm_switch_kbp_info_t * kbp_info;
		} switch_kbp_info_get;
		struct {
			int unit;
			uint32 * group_members;
			bcm_l3_protocol_group_id_t * group_id;
		} switch_l3_protocol_group_get;
		struct {
			int unit;
			uint32 group_members;
			bcm_l3_protocol_group_id_t group_id;
		} switch_l3_protocol_group_set;
		struct {
			int unit;
			int led_uc;
			int offset;
			uint8 * data;
			int len;
		} switch_led_control_data_read;
		struct {
			int unit;
			int led_uc;
			int offset;
			uint8 * data;
			int len;
		} switch_led_control_data_write;
		struct {
			int unit;
			int led_uc;
			uint8 * data;
			int len;
		} switch_led_fw_load;
		struct {
			int unit;
			int led_uc;
			int * data;
		} switch_led_fw_start_get;
		struct {
			int unit;
			int led_uc;
			int data;
		} switch_led_fw_start_set;
		struct {
			int unit;
			int port;
			int * led_uc;
			int * led_uc_port;
		} switch_led_port_to_uc_port_get;
		struct {
			int unit;
			int port;
			int led_uc;
			int led_uc_port;
		} switch_led_port_to_uc_port_set;
		struct {
			int unit;
			int * led_uc_num;
		} switch_led_uc_num_get;
		struct {
			int unit;
			bcm_switch_lif_hit_t * lif_hit;
		} switch_lif_hit_get;
		struct {
			int unit;
			bcm_switch_lif_property_t lif_property;
			bcm_switch_lif_property_config_t * lif_config;
		} switch_lif_property_get;
		struct {
			int unit;
			bcm_switch_lif_property_t lif_property;
			bcm_switch_lif_property_config_t * lif_config;
		} switch_lif_property_set;
		struct {
			int unit;
			bcm_switch_match_service_t match_service;
			bcm_switch_match_config_info_t * config_info;
			int * match_id;
		} switch_match_config_add;
		struct {
			int unit;
			bcm_switch_match_service_t match_service;
			int match_id;
		} switch_match_config_delete;
		struct {
			int unit;
			bcm_switch_match_service_t match_service;
		} switch_match_config_delete_all;
		struct {
			int unit;
			bcm_switch_match_service_t match_service;
			int match_id;
			bcm_switch_match_config_info_t * config_info;
		} switch_match_config_get;
		struct {
			int unit;
			bcm_switch_match_service_t match_service;
			int match_id;
			bcm_switch_match_config_info_t * config_info;
		} switch_match_config_set;
		struct {
			int unit;
			bcm_switch_match_service_t match_service;
			bcm_switch_match_config_traverse_cb cb_fn;
			void * user_data;
		} switch_match_config_traverse;
		struct {
			int unit;
			bcm_switch_match_service_t match_service;
			bcm_switch_match_control_type_t control_type;
			bcm_gport_t gport;
			bcm_switch_match_control_info_t * control_info;
		} switch_match_control_get;
		struct {
			int unit;
			bcm_switch_match_service_t match_service;
			bcm_switch_match_control_type_t control_type;
			bcm_gport_t gport;
			bcm_switch_match_control_info_t * control_info;
		} switch_match_control_set;
		struct {
			int unit;
			bcm_switch_match_service_t match_service;
			bcm_switch_match_control_traverse_cb cb_fn;
			void * user_data;
		} switch_match_control_traverse;
		struct {
			int unit;
			bcm_switch_network_group_t source_network_group_id;
			bcm_switch_network_group_config_t * config;
		} switch_network_group_config_get;
		struct {
			int unit;
			bcm_switch_network_group_t source_network_group_id;
			bcm_switch_network_group_config_t * config;
		} switch_network_group_config_set;
		struct {
			int unit;
			bcm_switch_object_t object;
			int * entries;
		} switch_object_count_get;
		struct {
			int unit;
			int object_size;
			bcm_switch_object_t * object_array;
			int * entries;
		} switch_object_count_multi_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_switch_obm_classifier_type_t switch_obm_classifier_type;
			bcm_switch_obm_classifier_t * switch_obm_classifier;
		} switch_obm_classifier_mapping_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_switch_obm_classifier_type_t switch_obm_classifier_type;
			int array_max;
			bcm_switch_obm_classifier_t * switch_obm_classifier;
			int * array_count;
		} switch_obm_classifier_mapping_multi_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_switch_obm_classifier_type_t switch_obm_classifier_type;
			int array_count;
			bcm_switch_obm_classifier_t * switch_obm_classifier;
		} switch_obm_classifier_mapping_multi_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_switch_obm_classifier_type_t switch_obm_classifier_type;
			bcm_switch_obm_classifier_t * switch_obm_classifier;
		} switch_obm_classifier_mapping_set;
		struct {
			int unit;
			uint32 options;
			bcm_switch_olp_l2_addr_t * l2_addr;
		} switch_olp_l2_addr_add;
		struct {
			int unit;
			bcm_switch_olp_l2_addr_t * l2_addr;
		} switch_olp_l2_addr_delete;
		struct {
			int unit;
		} switch_olp_l2_addr_delete_all;
		struct {
			int unit;
			bcm_switch_olp_l2_addr_t * l2_addr;
		} switch_olp_l2_addr_get;
		struct {
			int unit;
			bcm_switch_olp_l2_addr_traverse_cb cb_fn;
			void * user_data;
		} switch_olp_l2_addr_traverse;
		struct {
			int unit;
			int index;
			bcm_switch_opaque_tag_params_t * opaque_tag_config;
		} switch_opaque_tag_config_get;
		struct {
			int unit;
			int index;
			bcm_switch_opaque_tag_params_t * opaque_tag_config;
		} switch_opaque_tag_config_set;
		struct {
			int unit;
			int index;
			bcm_switch_opaque_tag_params_t * opaque_tag_config;
		} switch_payload_opaque_tag_config_get;
		struct {
			int unit;
			int index;
			bcm_switch_opaque_tag_params_t * opaque_tag_config;
		} switch_payload_opaque_tag_config_set;
		struct {
			int unit;
			bcm_switch_pkt_info_t * pkt_info;
			bcm_gport_t * dst_gport;
			bcm_if_t * dst_intf;
		} switch_pkt_info_hash_get;
		struct {
			int unit;
			uint32 options;
			bcm_switch_pkt_integrity_match_t * match;
			bcm_switch_pkt_control_action_t * action;
			int priority;
		} switch_pkt_integrity_check_add;
		struct {
			int unit;
			bcm_switch_pkt_integrity_match_t * match;
		} switch_pkt_integrity_check_delete;
		struct {
			int unit;
			bcm_switch_pkt_integrity_match_t * match;
			bcm_switch_pkt_control_action_t * action;
			int * priority;
		} switch_pkt_integrity_check_get;
		struct {
			int unit;
			uint32 options;
			bcm_switch_pkt_protocol_match_t * match;
			bcm_switch_pkt_control_action_t * action;
			int priority;
		} switch_pkt_protocol_control_add;
		struct {
			int unit;
			bcm_switch_pkt_protocol_match_t * match;
		} switch_pkt_protocol_control_delete;
		struct {
			int unit;
		} switch_pkt_protocol_control_delete_all;
		struct {
			int unit;
			bcm_switch_pkt_protocol_match_t * match;
			bcm_switch_pkt_control_action_t * action;
			int * priority;
		} switch_pkt_protocol_control_get;
		struct {
			int unit;
			bcm_switch_pkt_protocol_control_traverse_cb cb;
			void * user_data;
		} switch_pkt_protocol_control_traverse;
		struct {
			int unit;
			bcm_port_t port;
		} switch_pkt_trace_info_clear;
		struct {
			int unit;
			uint32 options;
			uint8 port;
			int len;
			uint8 * data;
			bcm_switch_pkt_trace_info_t * pkt_trace_info;
		} switch_pkt_trace_info_get;
		struct {
			int unit;
			uint32 options;
			uint8 port;
			int len;
			uint8 * data;
			uint32 raw_data_buf_size;
			uint8 * raw_data;
			uint32 * raw_data_size;
		} switch_pkt_trace_raw_data_get;
		struct {
			int unit;
			int decap_pri;
			int * internal_cpu_pri;
		} switch_rcpu_decap_priority_map_get;
		struct {
			int unit;
			int decap_pri;
			int internal_cpu_pri;
		} switch_rcpu_decap_priority_map_set;
		struct {
			int unit;
			uint32 flags;
			int internal_cpu_pri;
			int * encap_pri;
		} switch_rcpu_encap_priority_map_get;
		struct {
			int unit;
			uint32 flags;
			int internal_cpu_pri;
			int encap_pri;
		} switch_rcpu_encap_priority_map_set;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t * encap_id;
			bcm_switch_reflector_data_t * data;
		} switch_reflector_create;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t encap_id;
		} switch_reflector_destroy;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t encap_id;
			bcm_switch_reflector_data_t * data;
		} switch_reflector_get;
		struct {
			int unit;
			uint32 flags;
			bcm_switch_reflector_traverse_cb traverse_cb;
			void * user_data;
		} switch_reflector_traverse;
		struct {
			int unit;
			bcm_switch_resource_utilization_query_t * resource;
			bcm_switch_resource_utilization_t * utilization;
		} switch_resource_utilization_get;
		struct {
			int unit;
			uint32 flags;
			uint32 * rov;
		} switch_rov_get;
		struct {
			int unit;
			bcm_switch_ser_error_stat_type_t stat_type;
		} switch_ser_error_stat_clear;
		struct {
			int unit;
			bcm_switch_ser_error_stat_type_t stat_type;
			uint32 * value;
		} switch_ser_error_stat_get;
		struct {
			int unit;
			int id;
			bcm_switch_ser_log_info_t * info;
		} switch_ser_log_info_get;
		struct {
			int unit;
			bcm_switch_service_t service;
			bcm_switch_service_config_t * config;
		} switch_service_get;
		struct {
			int unit;
			bcm_switch_service_t service;
			bcm_switch_service_config_t * config;
		} switch_service_set;
		struct {
			int unit;
			bcm_switch_read_func_t rf;
			bcm_switch_write_func_t wf;
		} switch_stable_register;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			bcm_switch_svtag_egress_info_t * svtag_info;
		} switch_svtag_egress_entry_add;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
		} switch_svtag_egress_entry_delete;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			bcm_switch_svtag_egress_info_t * svtag_info;
		} switch_svtag_egress_entry_get;
		struct {
			int unit;
			uint32 flags;
			bcm_switch_svtag_egress_traverse_cb trav_fn;
			void * user_data;
		} switch_svtag_egress_entry_traverse;
		struct {
			int unit;
			int temperature_max;
			bcm_switch_temperature_monitor_t * temperature_array;
			int * temperature_count;
		} switch_temperature_monitor_get;
		struct {
			int unit;
			bcm_switch_thermo_sensor_type_t sensor_type;
			int interface_id;
			bcm_switch_thermo_sensor_t * sensor_data;
		} switch_thermo_sensor_read;
		struct {
			int unit;
			uint32 options;
			bcm_switch_tpid_info_t * tpid_info;
		} switch_tpid_add;
		struct {
			int unit;
			bcm_switch_tpid_class_t * tpid_class;
		} switch_tpid_class_get;
		struct {
			int unit;
			bcm_switch_tpid_info_t * tpid_info;
		} switch_tpid_delete;
		struct {
			int unit;
		} switch_tpid_delete_all;
		struct {
			int unit;
			bcm_switch_tpid_info_t * tpid_info;
		} switch_tpid_get;
		struct {
			int unit;
			int size;
			bcm_switch_tpid_info_t * tpid_info_array;
			int * count;
		} switch_tpid_get_all;
		struct {
			int unit;
			bcm_switch_trace_event_mon_t * monitor;
		} switch_trace_event_mon_get;
		struct {
			int unit;
			bcm_switch_trace_event_mon_t * monitor;
		} switch_trace_event_mon_set;
		struct {
			int unit;
			uint32 flags;
			bcm_switch_user_buffer_type_t buff_type;
			uint8 * buf;
			int offset;
			int nbytes;
		} switch_user_buffer_read;
		struct {
			int unit;
			uint32 flags;
			bcm_switch_user_buffer_type_t buff_type;
			uint8 * buf;
			int offset;
			int nbytes;
		} switch_user_buffer_write;
		struct {
			int unit;
			uint32 flags;
			bcm_switch_wide_data_extension_info_t * info;
		} switch_wide_data_extension_add;
		struct {
			int unit;
			uint32 flags;
			bcm_switch_wide_data_extension_info_t * info;
		} switch_wide_data_extension_delete;
		struct {
			int unit;
			uint32 flags;
			bcm_switch_wide_data_extension_info_t * info;
		} switch_wide_data_extension_get;
		struct {
			int unit;
			bcm_switch_wide_data_extension_traverse_cb cb;
			void * user_data;
		} switch_wide_data_extension_traverse;
		struct {
			int unit;
			bcm_tdm_control_t type;
			int * arg;
		} tdm_control_get;
		struct {
			int unit;
			bcm_tdm_control_t type;
			int arg;
		} tdm_control_set;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			bcm_tdm_egress_editing_t * editing;
		} tdm_egress_editing_get;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			bcm_tdm_egress_editing_t * editing;
		} tdm_egress_editing_set;
		struct {
			int unit;
			uint32 flags;
			int * ingress_context_id;
			bcm_tdm_ingress_context_t * editing;
		} tdm_ingress_context_create;
		struct {
			int unit;
			uint32 flags;
			int ingress_context_id;
		} tdm_ingress_context_destroy;
		struct {
			int unit;
			uint32 flags;
			int nof_contexts;
			int * context_ids;
			int * context_en;
		} tdm_ingress_context_failover_get;
		struct {
			int unit;
			uint32 flags;
			int nof_contexts;
			int * context_ids;
			int * context_en;
		} tdm_ingress_context_failover_set;
		struct {
			int unit;
			uint32 flags;
			int ingress_context_id;
			bcm_tdm_ingress_context_t * editing;
		} tdm_ingress_context_get;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			bcm_tdm_interface_config_t * interface_config;
		} tdm_interface_config_get;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			bcm_tdm_interface_config_t * interface_config;
		} tdm_interface_config_set;
		struct {
			int unit;
			uint32 flags;
			int stream_id;
			int * ingress_context_id;
		} tdm_stream_ingress_context_get;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			int ingress_context_id;
		} tdm_stream_ingress_context_set;
#ifdef	INCLUDE_PTP
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_tdpll_dpll_bandwidth_t * bandwidth;
		} tdpll_dpll_bandwidth_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_tdpll_dpll_bandwidth_t * bandwidth;
		} tdpll_dpll_bandwidth_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_tdpll_dpll_bindings_t * bindings;
		} tdpll_dpll_bindings_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_tdpll_dpll_bindings_t * bindings;
		} tdpll_dpll_bindings_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_tdpll_dpll_phase_control_t * phase_control;
		} tdpll_dpll_phase_control_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_tdpll_dpll_phase_control_t * phase_control;
		} tdpll_dpll_phase_control_set;
		struct {
			int unit;
			int stack_id;
			int max_num_dpll;
			int * dpll_ref;
			int * num_dpll;
		} tdpll_dpll_reference_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_esmc_essm_code_t * essm_code;
		} tdpll_esmc_essm_code_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_esmc_essm_code_t essm_code;
		} tdpll_esmc_essm_code_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_esmc_quality_level_t * ql;
		} tdpll_esmc_holdover_ql_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_esmc_quality_level_t ql;
		} tdpll_esmc_holdover_ql_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_mac_t * mac;
		} tdpll_esmc_mac_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_mac_t * mac;
		} tdpll_esmc_mac_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_esmc_quality_level_t * ql;
		} tdpll_esmc_ql_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_esmc_quality_level_t ql;
		} tdpll_esmc_ql_set;
		struct {
			int unit;
			int stack_id;
			int * enable;
		} tdpll_esmc_rx_enable_get;
		struct {
			int unit;
			int stack_id;
			int enable;
		} tdpll_esmc_rx_enable_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_pbmp_t * pbmp;
		} tdpll_esmc_rx_portbitmap_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_pbmp_t pbmp;
		} tdpll_esmc_rx_portbitmap_set;
		struct {
			int unit;
			int stack_id;
			int ingress_port;
			bcm_esmc_pdu_data_t * esmc_pdu_data;
		} tdpll_esmc_rx_state_machine;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			int * enable;
		} tdpll_esmc_tx_enable_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			int enable;
		} tdpll_esmc_tx_enable_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_pbmp_t * pbmp;
		} tdpll_esmc_tx_portbitmap_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_pbmp_t pbmp;
		} tdpll_esmc_tx_portbitmap_set;
		struct {
			int unit;
			int stack_id;
			bcm_tdpll_event_cb_f event_cb;
		} tdpll_event_callback_register;
		struct {
			int unit;
			int stack_id;
		} tdpll_event_callback_unregister;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			int * best_clock;
		} tdpll_input_clock_best_get;
		struct {
			int unit;
			int stack_id;
			bcm_tdpll_callback_type_t type;
			bcm_tdpll_input_clock_cb callback;
		} tdpll_input_clock_callback_register;
		struct {
			int unit;
			int stack_id;
			bcm_tdpll_callback_type_t type;
		} tdpll_input_clock_callback_unregister;
		struct {
			int unit;
			int stack_id;
			int enable;
		} tdpll_input_clock_control;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int * enable;
		} tdpll_input_clock_enable_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int enable;
		} tdpll_input_clock_enable_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int * freq_error_ppb;
		} tdpll_input_clock_frequency_error_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			uint32 * clock_frequency;
			uint32 * tsevent_frequency;
		} tdpll_input_clock_frequency_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			uint32 clock_frequency;
			uint32 tsevent_frequency;
		} tdpll_input_clock_frequency_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_tdpll_input_clock_l1mux_t * l1mux;
		} tdpll_input_clock_l1mux_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_tdpll_input_clock_l1mux_t * l1mux;
		} tdpll_input_clock_l1mux_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int * lockout;
		} tdpll_input_clock_lockout_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int lockout;
		} tdpll_input_clock_lockout_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_mac_t * mac;
		} tdpll_input_clock_mac_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_mac_t * mac;
		} tdpll_input_clock_mac_set;
		struct {
			int unit;
			int stack_id;
			bcm_tdpll_input_clock_monitor_cb monitor_cb;
		} tdpll_input_clock_monitor_callback_register;
		struct {
			int unit;
			int stack_id;
		} tdpll_input_clock_monitor_callback_unregister;
		struct {
			int unit;
			int stack_id;
			uint32 * monitor_interval;
		} tdpll_input_clock_monitor_interval_get;
		struct {
			int unit;
			int stack_id;
			uint32 monitor_interval;
		} tdpll_input_clock_monitor_interval_set;
		struct {
			int unit;
			int stack_id;
			bcm_tdpll_input_clock_monitor_type_t threshold_type;
			uint32 * threshold;
		} tdpll_input_clock_monitor_threshold_get;
		struct {
			int unit;
			int stack_id;
			bcm_tdpll_input_clock_monitor_type_t threshold_type;
			uint32 threshold;
		} tdpll_input_clock_monitor_threshold_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int * priority;
		} tdpll_input_clock_priority_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int priority;
		} tdpll_input_clock_priority_set;
		struct {
			int unit;
			int stack_id;
			bcm_tdpll_input_clock_ql_change_cb ql_change_cb;
		} tdpll_input_clock_ql_change_callback_register;
		struct {
			int unit;
			int stack_id;
		} tdpll_input_clock_ql_change_callback_unregister;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			int * ql_enabled;
		} tdpll_input_clock_ql_enabled_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			int ql_enabled;
		} tdpll_input_clock_ql_enabled_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_esmc_quality_level_t * ql;
		} tdpll_input_clock_ql_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_esmc_quality_level_t ql;
		} tdpll_input_clock_ql_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			int * revertive;
		} tdpll_input_clock_revertive_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			int revertive;
		} tdpll_input_clock_revertive_set;
		struct {
			int unit;
			int stack_id;
			bcm_tdpll_input_clock_selector_cb selector_cb;
		} tdpll_input_clock_selector_callback_register;
		struct {
			int unit;
			int stack_id;
		} tdpll_input_clock_selector_callback_unregister;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_tdpll_input_clock_monitor_type_t threshold_type;
			int * threshold_state;
		} tdpll_input_clock_threshold_state_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int * valid;
		} tdpll_input_clock_valid_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int valid;
		} tdpll_input_clock_valid_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_pbmp_t pbmp;
			bcm_tdpll_dpll_bandwidth_t * bandwidth;
		} tdpll_output_clock_create;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			uint32 * deriv_frequency;
		} tdpll_output_clock_deriv_frequency_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			uint32 deriv_frequency;
		} tdpll_output_clock_deriv_frequency_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int * enable;
		} tdpll_output_clock_enable_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int enable;
		} tdpll_output_clock_enable_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_tdpll_holdover_data_t * hdata;
		} tdpll_output_clock_holdover_data_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_tdpll_frequency_correction_t hfreq;
		} tdpll_output_clock_holdover_frequency_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_tdpll_holdover_mode_t * hmode;
		} tdpll_output_clock_holdover_mode_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_tdpll_holdover_mode_t hmode;
		} tdpll_output_clock_holdover_mode_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
		} tdpll_output_clock_holdover_reset;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			uint32 * synth_frequency;
			uint32 * tsevent_frequency;
		} tdpll_output_clock_synth_frequency_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			uint32 synth_frequency;
			uint32 tsevent_frequency;
		} tdpll_output_clock_synth_frequency_set;
#endif	/* INCLUDE_PTP */
		struct {
			int unit;
			int telemetry_instance;
			int core;
			int max_count;
			bcm_telemetry_config_t * telemetry_config_list;
			int * config_count;
		} telemetry_config_get;
		struct {
			int unit;
			int telemetry_instance;
			int core;
			int config_count;
			bcm_telemetry_config_t * telemetry_config_list;
		} telemetry_config_set;
		struct {
			int unit;
		} telemetry_detach;
		struct {
			int unit;
			int telemetry_instance;
			bcm_collector_t collector_id;
			int export_profile_id;
		} telemetry_export_config_delete;
		struct {
			int unit;
			int telemetry_instance;
			bcm_collector_t * collector_id;
			int * export_profile_id;
		} telemetry_export_config_get;
		struct {
			int unit;
			int telemetry_instance;
			bcm_collector_t collector_id;
			int export_profile_id;
		} telemetry_export_config_set;
		struct {
			int unit;
		} telemetry_init;
		struct {
			int unit;
			int telemetry_instance;
			bcm_collector_t collector_id;
			bcm_telemetry_instance_export_stats_t * stats;
		} telemetry_instance_export_stats_get;
		struct {
			int unit;
			int telemetry_instance;
			bcm_collector_t collector_id;
			bcm_telemetry_instance_export_stats_t * stats;
		} telemetry_instance_export_stats_set;
		struct {
			int unit;
			int max_system_id_len;
			int * system_id_len;
			uint8 * system_id;
		} telemetry_system_id_get;
		struct {
			int unit;
			int system_id_len;
			uint8 * system_id;
		} telemetry_system_id_set;
		struct {
			int unit;
			bcm_time_bs_log_cfg_t * bs_log_cfg;
		} time_bs_log_configure_get;
		struct {
			int unit;
			bcm_time_bs_log_cfg_t bs_log_cfg;
		} time_bs_log_configure_set;
		struct {
			int unit;
			bcm_time_spec_t * bs_time;
		} time_bs_time_get;
		struct {
			int unit;
			bcm_time_if_t id;
			bcm_time_capture_cb_type_t cb_type;
			bcm_time_capture_cb cb;
			void * user_data;
		} time_capture_cb_register;
		struct {
			int unit;
			bcm_time_if_t id;
			bcm_time_capture_cb_type_t cb_type;
		} time_capture_cb_unregister;
		struct {
			int unit;
			bcm_time_if_t id;
			bcm_time_capture_t * time_capture;
			int enable;
			int * capture_handle;
		} time_capture_enable_set;
		struct {
			int unit;
			bcm_time_if_t intf_id;
			bcm_time_capture_t * time;
		} time_capture_get;
		struct {
			int unit;
		} time_deinit;
		struct {
			int unit;
			bcm_time_if_t id;
			int * enable;
		} time_heartbeat_enable_get;
		struct {
			int unit;
			bcm_time_if_t id;
			int enable;
		} time_heartbeat_enable_set;
		struct {
			int unit;
			bcm_time_if_t id;
			bcm_time_heartbeat_cb f;
			void * user_data;
		} time_heartbeat_register;
		struct {
			int unit;
			bcm_time_if_t id;
		} time_heartbeat_unregister;
		struct {
			int unit;
		} time_init;
		struct {
			int unit;
			bcm_time_interface_t * intf;
		} time_interface_add;
		struct {
			int unit;
			bcm_time_if_t intf_id;
		} time_interface_delete;
		struct {
			int unit;
		} time_interface_delete_all;
		struct {
			int unit;
			bcm_time_interface_t * intf;
		} time_interface_get;
		struct {
			int unit;
			bcm_time_interface_traverse_cb cb;
			void * user_data;
		} time_interface_traverse;
		struct {
			int unit;
			bcm_time_synce_clock_src_type_t clk_src;
			bcm_time_synce_divisor_setting_t * divisor_setting;
		} time_synce_clock_get;
		struct {
			int unit;
			bcm_time_synce_clock_src_type_t clk_src;
			bcm_time_synce_divisor_setting_t * divisor_setting;
		} time_synce_clock_set;
		struct {
			int unit;
			bcm_time_synce_clock_source_config_t * clk_src_config;
			bcm_time_synce_clock_source_control_t control;
			int * value;
		} time_synce_clock_source_control_get;
		struct {
			int unit;
			bcm_time_synce_clock_source_config_t * clk_src_config;
			bcm_time_synce_clock_source_control_t control;
			int value;
		} time_synce_clock_source_control_set;
		struct {
			int unit;
			uint32 stages;
			bcm_time_tod_t * tod;
		} time_tod_get;
		struct {
			int unit;
			uint32 stages;
			bcm_time_tod_t * tod;
		} time_tod_set;
		struct {
			int unit;
			bcm_time_if_t id;
			uint32 * mode_flags;
		} time_trigger_enable_get;
		struct {
			int unit;
			bcm_time_if_t id;
			uint32 mode_flags;
		} time_trigger_enable_set;
		struct {
			int unit;
			bcm_time_ts_counter_t * counter;
		} time_ts_counter_get;
		struct {
			int unit;
			bcm_time_ts_counter_t * counter;
		} time_ts_counter_set;
		struct {
			int unit;
		} time_ts_counter_time_init;
		struct {
			int unit;
			int64 ts_offset;
			uint64 ts_update_intv;
			int ts_counter;
		} time_ts_offset_set;
		struct {
			int unit;
			uint32 ts_val;
			bcm_time_spec_t * time;
		} time_ts_time_convert;
		struct {
			int unit;
		} time_ts_time_update;
		struct {
			int unit;
			int dest_modid;
			bcm_port_t * exit_port;
		} topo_port_get;
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} trill_cleanup;
		struct {
			int unit;
		} trill_init;
		struct {
			int unit;
			bcm_trill_multicast_adjacency_t * trill_multicast_adjacency;
		} trill_multicast_adjacency_add;
		struct {
			int unit;
			bcm_trill_multicast_adjacency_t * trill_multicast_adjacency;
		} trill_multicast_adjacency_delete;
		struct {
			int unit;
		} trill_multicast_adjacency_delete_all;
		struct {
			int unit;
			bcm_trill_multicast_adjacency_traverse_cb cb;
			void * user_data;
		} trill_multicast_adjacency_traverse;
		struct {
			int unit;
			bcm_trill_name_t root_name;
		} trill_multicast_delete_all;
		struct {
			int unit;
			bcm_trill_multicast_entry_t * trill_mc_entry;
		} trill_multicast_entry_add;
		struct {
			int unit;
			bcm_trill_multicast_entry_t * trill_mc_entry;
		} trill_multicast_entry_delete;
		struct {
			int unit;
			bcm_trill_multicast_entry_t * trill_mc_entry;
		} trill_multicast_entry_get;
		struct {
			int unit;
			bcm_trill_multicast_entry_traverse_cb cb;
			void * user_data;
		} trill_multicast_entry_traverse;
		struct {
			int unit;
			bcm_trill_name_t root_name;
			bcm_trill_name_t source_rbridge_name;
			bcm_gport_t port;
			bcm_if_t encap_intf;
		} trill_multicast_source_add;
		struct {
			int unit;
			bcm_trill_name_t root_name;
			bcm_trill_name_t source_rbridge_name;
			bcm_gport_t port;
			bcm_if_t encap_intf;
		} trill_multicast_source_delete;
		struct {
			int unit;
			bcm_trill_name_t root_name;
			bcm_trill_name_t source_rbridge_name;
			bcm_gport_t * port;
		} trill_multicast_source_get;
		struct {
			int unit;
			bcm_trill_multicast_source_traverse_cb cb;
			void * user_data;
		} trill_multicast_source_traverse;
		struct {
			int unit;
			bcm_trill_port_t * trill_port;
		} trill_port_add;
		struct {
			int unit;
			bcm_gport_t trill_port_id;
		} trill_port_delete;
		struct {
			int unit;
		} trill_port_delete_all;
		struct {
			int unit;
			bcm_trill_port_t * trill_port;
		} trill_port_get;
		struct {
			int unit;
			int port_max;
			bcm_trill_port_t * port_array;
			int * port_count;
		} trill_port_get_all;
		struct {
			int unit;
			bcm_trill_rbridge_t * trill_entry;
		} trill_rbridge_entry_add;
		struct {
			int unit;
			bcm_trill_rbridge_t * trill_entry;
		} trill_rbridge_entry_delete;
		struct {
			int unit;
			bcm_trill_rbridge_t * trill_entry;
		} trill_rbridge_entry_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trill_stat_t stat;
		} trill_stat_clear;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trill_stat_t stat;
			uint64 * val;
		} trill_stat_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trill_stat_t stat;
			uint32 * val;
		} trill_stat_get32;
		struct {
			int unit;
			bcm_trill_vpn_config_t * info;
		} trill_vpn_create;
		struct {
			int unit;
			bcm_vpn_t vpn;
		} trill_vpn_destroy;
		struct {
			int unit;
		} trill_vpn_destroy_all;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_trill_vpn_config_t * info;
		} trill_vpn_get;
		struct {
			int unit;
			bcm_trill_vpn_traverse_cb cb;
			void * user_data;
		} trill_vpn_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_trunk_t trunk_id;
			bcm_switch_agm_id_t agm_id;
		} trunk_agm_attach;
		struct {
			int unit;
			bcm_trunk_t trunk_id;
			bcm_switch_agm_id_t * agm_id;
		} trunk_agm_attach_get;
		struct {
			int unit;
			bcm_trunk_t trunk_id;
			bcm_switch_agm_id_t agm_id;
		} trunk_agm_detach;
		struct {
			int unit;
			bcm_pbmp_t * pbmp_ptr;
		} trunk_bitmap_expand;
		struct {
			int unit;
			bcm_trunk_chip_info_t * ta_info;
		} trunk_chip_info_get;
		struct {
			int unit;
			uint32 flags;
			bcm_trunk_t * tid;
		} trunk_create;
		struct {
			int unit;
			bcm_trunk_t tid;
		} trunk_destroy;
		struct {
			int unit;
		} trunk_detach;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_dlb_mon_cfg_t * dlb_mon_cfg;
		} trunk_dlb_mon_config_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_dlb_mon_cfg_t * dlb_mon_cfg;
		} trunk_dlb_mon_config_set;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_dlb_stat_t type;
			uint64 * value;
		} trunk_dlb_stat_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_dlb_stat_t type;
			uint64 value;
		} trunk_dlb_stat_set;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_dlb_stat_t type;
			uint64 * value;
		} trunk_dlb_stat_sync_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_pbmp_t * pbmp;
		} trunk_egress_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_pbmp_t pbmp;
		} trunk_egress_set;
		struct {
			int unit;
			uint32 * flags;
			int ethertype_max;
			int * ethertype_array;
			int * ethertype_count;
		} trunk_ethertype_get;
		struct {
			int unit;
			uint32 flags;
			int ethertype_count;
			int * ethertype_array;
		} trunk_ethertype_set;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_gport_t failport;
			int * psc;
			uint32 * flags;
			int array_size;
			bcm_gport_t * fail_to_array;
			int * array_count;
		} trunk_failover_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_gport_t failport;
			int psc;
			uint32 flags;
			int count;
			bcm_gport_t * fail_to_array;
		} trunk_failover_set;
		struct {
			int unit;
			bcm_module_t modid;
			bcm_gport_t gport;
			bcm_trunk_t * tid;
		} trunk_find;
		struct {
			int unit;
			bcm_trunk_t tid;
			uint16 * value;
		} trunk_flexctr_object_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			uint16 value;
		} trunk_flexctr_object_set;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_info_t * t_data;
			int member_max;
			bcm_trunk_member_t * member_array;
			int * member_count;
		} trunk_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_gport_t gport;
		} trunk_gport_add;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_gport_t gport;
		} trunk_gport_delete;
		struct {
			int unit;
			bcm_trunk_t tid;
		} trunk_gport_delete_all;
		struct {
			int unit;
			bcm_trunk_t tid;
			int gport_size;
			bcm_gport_t * gport_array;
			int * count;
		} trunk_gport_get_all;
		struct {
			int unit;
		} trunk_init;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_vlan_t vid;
			uint8 * mac;
		} trunk_mcast_join;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_member_t * member;
		} trunk_member_add;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_member_t * member;
		} trunk_member_delete;
		struct {
			int unit;
			bcm_trunk_t tid;
		} trunk_member_delete_all;
		struct {
			int unit;
			bcm_gport_t member;
			int * status;
		} trunk_member_status_get;
		struct {
			int unit;
			bcm_gport_t member;
			int status;
		} trunk_member_status_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int idx;
			int * enable;
		} trunk_override_ipmc_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int idx;
			int enable;
		} trunk_override_ipmc_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int idx;
			int * enable;
		} trunk_override_mcast_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int idx;
			int enable;
		} trunk_override_mcast_set;
		struct {
			int unit;
			bcm_trunk_t tid;
			int * enable;
		} trunk_override_non_ucast_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			int enable;
		} trunk_override_non_ucast_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int modid;
			int * enable;
		} trunk_override_ucast_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int modid;
			int enable;
		} trunk_override_ucast_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			bcm_vlan_t vid;
			int * enable;
		} trunk_override_vlan_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			bcm_vlan_t vid;
			int enable;
		} trunk_override_vlan_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int * size;
			int * weights;
		} trunk_pool_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int size;
			int * weights;
		} trunk_pool_set;
		struct {
			int unit;
			bcm_trunk_t trunk_id;
			uint32 flags;
			bcm_trunk_pp_port_allocation_info_t * allocation_info;
		} trunk_pp_port_allocation_get;
		struct {
			int unit;
			bcm_trunk_t trunk_id;
			uint32 flags;
			bcm_trunk_pp_port_allocation_info_t * allocation_info;
		} trunk_pp_port_allocation_set;
		struct {
			int unit;
			bcm_trunk_t tid;
			int * psc;
		} trunk_psc_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			int psc;
		} trunk_psc_set;
		struct {
			int unit;
			uint32 flags;
			bcm_trunk_resilient_entry_t * match_entry;
			int * num_entries;
			bcm_trunk_resilient_entry_t * replace_entry;
		} trunk_resilient_replace;
		struct {
			int unit;
			uint32 flags;
			bcm_trunk_resilient_entry_t * match_entry;
			bcm_trunk_resilient_traverse_cb trav_fn;
			void * user_data;
		} trunk_resilient_traverse;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_info_t * trunk_info;
			int member_count;
			bcm_trunk_member_t * member_array;
		} trunk_set;
		struct {
			int unit;
			uint32 flags;
			uint32 system_port_aggregate;
			bcm_gport_t * gport;
		} trunk_spa_to_system_phys_port_map_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			uint32 stat_counter_id;
		} trunk_stat_attach;
		struct {
			int unit;
			bcm_trunk_t tid;
			uint32 stat_counter_id;
		} trunk_stat_detach;
		struct {
			int unit;
			bcm_trunk_t tid;
			uint32 * stat_counter_id;
		} trunk_stat_id_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_gport_t * vplag_port_id;
		} trunk_vplag_get;
		struct {
			int unit;
			uint32 flags;
			bcm_trunk_t * tid;
			bcm_gport_t * vplag_port_id;
		} trunk_with_vplag_create;
		struct {
			int unit;
			bcm_tsn_control_t type;
			uint32 * arg;
		} tsn_control_get;
		struct {
			int unit;
			bcm_tsn_control_t type;
			uint32 arg;
		} tsn_control_set;
		struct {
			int unit;
		} tsn_detach;
		struct {
			int unit;
			bcm_tsn_event_notification_traverse_cb cb;
			void * user_data;
		} tsn_event_notification_traverse;
		struct {
			int unit;
			bcm_tsn_event_type_t event;
			bcm_tsn_event_source_t * src;
			bcm_tsn_event_cb cb;
			void * user_data;
		} tsn_event_register;
		struct {
			int unit;
			bcm_tsn_event_type_t event;
			bcm_tsn_event_source_t * src;
			bcm_tsn_event_cb cb;
		} tsn_event_unregister;
		struct {
			int unit;
			bcm_tsn_flow_t flow_id;
			bcm_tsn_flow_config_t * config;
		} tsn_flow_config_get;
		struct {
			int unit;
			bcm_tsn_flow_t flow_id;
			bcm_tsn_flow_config_t * config;
		} tsn_flow_config_set;
		struct {
			int unit;
			bcm_tsn_flowset_t flowset;
			bcm_tsn_pri_map_t * pri_map;
			bcm_tsn_flow_config_t * default_config;
		} tsn_flowset_config_get;
		struct {
			int unit;
			bcm_tsn_pri_map_t pri_map;
			bcm_tsn_flow_config_t * default_config;
			bcm_tsn_flowset_t * flowset;
		} tsn_flowset_create;
		struct {
			int unit;
			bcm_tsn_flowset_t flowset;
		} tsn_flowset_destroy;
		struct {
			int unit;
			bcm_tsn_flowset_t flowset;
			int index;
			bcm_tsn_flow_t * flow_id;
		} tsn_flowset_flow_get;
		struct {
			int unit;
			bcm_tsn_flowset_t flowset;
			bcm_tsn_flowset_status_t * status;
		} tsn_flowset_status_get;
		struct {
			int unit;
			bcm_tsn_flowset_traverse_cb cb;
			void * user_data;
		} tsn_flowset_traverse;
		struct {
			int unit;
			bcm_tsn_ingress_mtu_config_t * config;
		} tsn_ingress_mtu_config_get;
		struct {
			int unit;
			bcm_tsn_ingress_mtu_config_t * config;
		} tsn_ingress_mtu_config_set;
		struct {
			int unit;
			bcm_tsn_ingress_stu_config_t * config;
		} tsn_ingress_stu_config_get;
		struct {
			int unit;
			bcm_tsn_ingress_stu_config_t * config;
		} tsn_ingress_stu_config_set;
		struct {
			int unit;
		} tsn_init;
		struct {
			int unit;
			bcm_tsn_mtu_profile_type_t type;
			bcm_tsn_mtu_config_t * config;
			int * mtu_profile_id;
		} tsn_mtu_profile_create;
		struct {
			int unit;
			int mtu_profile_id;
		} tsn_mtu_profile_destroy;
		struct {
			int unit;
			int mtu_profile_id;
			bcm_tsn_mtu_profile_type_t * type;
			bcm_tsn_mtu_config_t * config;
		} tsn_mtu_profile_get;
		struct {
			int unit;
			int mtu_profile_id;
			bcm_tsn_mtu_config_t * config;
		} tsn_mtu_profile_set;
		struct {
			int unit;
			bcm_tsn_mtu_profile_traverse_cb cb;
			void * user_data;
		} tsn_mtu_profile_traverse;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_tsn_control_t type;
			uint32 * arg;
		} tsn_port_control_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_tsn_control_t type;
			uint32 arg;
		} tsn_port_control_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_tsn_stat_t stat;
			uint64 * val;
		} tsn_port_stat_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_tsn_stat_t stat;
			uint32 * val;
		} tsn_port_stat_get32;
		struct {
			int unit;
			bcm_gport_t port;
			int nstat;
			bcm_tsn_stat_t * stat_arr;
			uint64 * value_arr;
		} tsn_port_stat_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			int nstat;
			bcm_tsn_stat_t * stat_arr;
			uint32 * value_arr;
		} tsn_port_stat_multi_get32;
		struct {
			int unit;
			bcm_gport_t port;
			int nstat;
			bcm_tsn_stat_t * stat_arr;
			uint64 * value_arr;
		} tsn_port_stat_multi_set;
		struct {
			int unit;
			bcm_gport_t port;
			int nstat;
			bcm_tsn_stat_t * stat_arr;
			uint32 * value_arr;
		} tsn_port_stat_multi_set32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_tsn_stat_t stat;
			uint64 val;
		} tsn_port_stat_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_tsn_stat_t stat;
			uint32 val;
		} tsn_port_stat_set32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_tsn_stat_t stat;
			uint64 * val;
		} tsn_port_stat_sync_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_tsn_stat_t stat;
			uint32 * val;
		} tsn_port_stat_sync_get32;
		struct {
			int unit;
			bcm_gport_t port;
			int nstat;
			bcm_tsn_stat_t * stat_arr;
			uint64 * value_arr;
		} tsn_port_stat_sync_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			int nstat;
			bcm_tsn_stat_t * stat_arr;
			uint32 * value_arr;
		} tsn_port_stat_sync_multi_get32;
		struct {
			int unit;
			bcm_tsn_pri_map_config_t * config;
			bcm_tsn_pri_map_t * map_id;
		} tsn_pri_map_create;
		struct {
			int unit;
			bcm_tsn_pri_map_t map_id;
		} tsn_pri_map_destroy;
		struct {
			int unit;
			bcm_tsn_pri_map_t map_id;
			bcm_tsn_pri_map_config_t * config;
		} tsn_pri_map_get;
		struct {
			int unit;
			bcm_tsn_pri_map_t map_id;
			bcm_tsn_pri_map_config_t * config;
		} tsn_pri_map_set;
		struct {
			int unit;
			bcm_tsn_pri_map_traverse_cb cb;
			void * user_data;
		} tsn_pri_map_traverse;
		struct {
			int unit;
			int enable;
			bcm_tsn_sr_auto_learn_config_t * config;
		} tsn_sr_auto_learn_enable;
		struct {
			int unit;
			int * enabled;
			bcm_tsn_sr_auto_learn_config_t * config;
		} tsn_sr_auto_learn_enable_get;
		struct {
			int unit;
			bcm_tsn_sr_auto_learn_group_config_t * config;
			int * group_id;
		} tsn_sr_auto_learn_group_create;
		struct {
			int unit;
			int group_id;
		} tsn_sr_auto_learn_group_destroy;
		struct {
			int unit;
			int group_id;
			bcm_tsn_sr_auto_learn_group_config_t * config;
		} tsn_sr_auto_learn_group_get;
		struct {
			int unit;
			int group_id;
			bcm_tsn_sr_auto_learn_group_config_t * config;
		} tsn_sr_auto_learn_group_set;
		struct {
			int unit;
			bcm_tsn_sr_auto_learn_group_traverse_cb cb;
			void * user_data;
		} tsn_sr_auto_learn_group_traverse;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow;
			bcm_tsn_stat_t stat;
			uint64 * val;
		} tsn_sr_flow_stat_get;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow;
			bcm_tsn_stat_t stat;
			uint32 * val;
		} tsn_sr_flow_stat_get32;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow;
			bcm_tsn_stat_group_type_t group_type;
			bcm_tsn_stat_group_t * stat_group;
		} tsn_sr_flow_stat_group_get;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow;
			bcm_tsn_stat_group_type_t group_type;
			bcm_tsn_stat_group_t stat_group;
		} tsn_sr_flow_stat_group_set;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow;
			int nstat;
			bcm_tsn_stat_t * stat_arr;
			uint64 * value_arr;
		} tsn_sr_flow_stat_multi_get;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow;
			int nstat;
			bcm_tsn_stat_t * stat_arr;
			uint32 * value_arr;
		} tsn_sr_flow_stat_multi_get32;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow;
			int nstat;
			bcm_tsn_stat_t * stat_arr;
			uint64 * value_arr;
		} tsn_sr_flow_stat_multi_set;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow;
			int nstat;
			bcm_tsn_stat_t * stat_arr;
			uint32 * value_arr;
		} tsn_sr_flow_stat_multi_set32;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow;
			bcm_tsn_stat_t stat;
			uint64 val;
		} tsn_sr_flow_stat_set;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow;
			bcm_tsn_stat_t stat;
			uint32 val;
		} tsn_sr_flow_stat_set32;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow;
			bcm_tsn_stat_t stat;
			uint64 * val;
		} tsn_sr_flow_stat_sync_get;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow;
			bcm_tsn_stat_t stat;
			uint32 * val;
		} tsn_sr_flow_stat_sync_get32;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow;
			int nstat;
			bcm_tsn_stat_t * stat_arr;
			uint64 * value_arr;
		} tsn_sr_flow_stat_sync_multi_get;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow;
			int nstat;
			bcm_tsn_stat_t * stat_arr;
			uint32 * value_arr;
		} tsn_sr_flow_stat_sync_multi_get32;
		struct {
			int unit;
			bcm_tsn_sr_flowset_t flowset;
		} tsn_sr_flowset_destroy;
		struct {
			int unit;
			bcm_tsn_sr_flowset_t flowset;
			int index;
			bcm_tsn_sr_flow_t * flow_id;
		} tsn_sr_flowset_flow_get;
		struct {
			int unit;
			bcm_tsn_sr_flowset_t flowset;
			bcm_tsn_sr_flowset_status_t * status;
		} tsn_sr_flowset_status_get;
		struct {
			int unit;
			int is_rx;
			bcm_tsn_sr_flowset_traverse_cb cb;
			void * user_data;
		} tsn_sr_flowset_traverse;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_tsn_sr_port_config_t * config;
		} tsn_sr_port_config_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_tsn_sr_port_config_t * config;
		} tsn_sr_port_config_set;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow_id;
			bcm_tsn_sr_rx_flow_config_t * config;
		} tsn_sr_rx_flow_config_get;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow_id;
			bcm_tsn_sr_rx_flow_config_t * config;
		} tsn_sr_rx_flow_config_set;
		struct {
			int unit;
			uint32 flags;
			bcm_tsn_sr_flow_t flow_id;
		} tsn_sr_rx_flow_reset;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow_id;
			int offset_in_bits;
			int max_size_in_bits;
			uint8 * history_bits;
			int * actual_size_in_bits;
		} tsn_sr_rx_flow_seqnum_history_get;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow_id;
			int offset_in_bits;
			int size_in_bits;
			uint8 * history_bits;
		} tsn_sr_rx_flow_seqnum_history_set;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow_id;
			bcm_tsn_sr_rx_flow_status_t * status;
		} tsn_sr_rx_flow_status_get;
		struct {
			int unit;
			bcm_tsn_sr_flowset_t flowset;
			bcm_tsn_pri_map_t * pri_map;
			bcm_tsn_sr_rx_flow_config_t * default_config;
		} tsn_sr_rx_flowset_config_get;
		struct {
			int unit;
			bcm_tsn_pri_map_t pri_map;
			bcm_tsn_sr_rx_flow_config_t * default_config;
			bcm_tsn_sr_flowset_t * flowset;
		} tsn_sr_rx_flowset_create;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow_id;
			bcm_tsn_sr_tx_flow_config_t * config;
		} tsn_sr_tx_flow_config_get;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow_id;
			bcm_tsn_sr_tx_flow_config_t * config;
		} tsn_sr_tx_flow_config_set;
		struct {
			int unit;
			bcm_tsn_sr_flow_t flow_id;
			bcm_tsn_sr_tx_flow_status_t * status;
		} tsn_sr_tx_flow_status_get;
		struct {
			int unit;
			bcm_tsn_sr_flowset_t flowset;
			bcm_tsn_pri_map_t * pri_map;
			bcm_tsn_sr_tx_flow_config_t * default_config;
		} tsn_sr_tx_flowset_config_get;
		struct {
			int unit;
			bcm_tsn_pri_map_t pri_map;
			bcm_tsn_sr_tx_flow_config_t * default_config;
			bcm_tsn_sr_flowset_t * flowset;
		} tsn_sr_tx_flowset_create;
		struct {
			int unit;
			bcm_tsn_stat_group_type_t group_type;
			int count;
			bcm_tsn_stat_t * stat_arr;
			bcm_tsn_stat_group_t * id;
		} tsn_stat_group_create;
		struct {
			int unit;
			bcm_tsn_stat_group_t id;
		} tsn_stat_group_destroy;
		struct {
			int unit;
			bcm_tsn_stat_group_t id;
			bcm_tsn_stat_group_type_t * group_type;
			int max;
			bcm_tsn_stat_t * stat_arr;
			int * count;
		} tsn_stat_group_get;
		struct {
			int unit;
			bcm_tsn_stat_group_t id;
			int count;
			bcm_tsn_stat_t * stat_arr;
		} tsn_stat_group_set;
		struct {
			int unit;
			bcm_tsn_stat_group_traverse_cb cb;
			void * user_data;
		} tsn_stat_group_traverse;
		struct {
			int unit;
			bcm_tsn_stat_threshold_source_t source;
			bcm_tsn_stat_t stat;
			bcm_tsn_stat_threshold_config_t * config;
		} tsn_stat_threshold_get;
		struct {
			int unit;
			bcm_tsn_stat_threshold_source_t source;
			bcm_tsn_stat_t stat;
			bcm_tsn_stat_threshold_config_t * config;
		} tsn_stat_threshold_set;
		struct {
			int unit;
			bcm_tsn_stu_profile_type_t type;
			bcm_tsn_stu_config_t * config;
			int * stu_profile_id;
		} tsn_stu_profile_create;
		struct {
			int unit;
			int stu_profile_id;
		} tsn_stu_profile_destroy;
		struct {
			int unit;
			int stu_profile_id;
			bcm_tsn_stu_profile_type_t * type;
			bcm_tsn_stu_config_t * config;
		} tsn_stu_profile_get;
		struct {
			int unit;
			int stu_profile_id;
			bcm_tsn_stu_config_t * config;
		} tsn_stu_profile_set;
		struct {
			int unit;
			bcm_tsn_stu_profile_traverse_cb cb;
			void * user_data;
		} tsn_stu_profile_traverse;
		struct {
			int unit;
			int taf_gate;
			bcm_tsn_taf_control_t type;
			uint32 * arg;
		} tsn_taf_control_get;
		struct {
			int unit;
			int taf_gate;
			bcm_tsn_taf_control_t type;
			uint32 arg;
		} tsn_taf_control_set;
		struct {
			int unit;
			int * cosq_profile;
		} tsn_taf_cosq_mapping_profile_create;
		struct {
			int unit;
			int cosq_profile;
		} tsn_taf_cosq_mapping_profile_destroy;
		struct {
			int unit;
			int cosq_profile;
			bcm_cos_t priority;
			bcm_cos_queue_t * cosq;
		} tsn_taf_cosq_mapping_profile_get;
		struct {
			int unit;
			int cosq_profile;
			bcm_cos_t priority;
			bcm_cos_queue_t cosq;
		} tsn_taf_cosq_mapping_profile_set;
		struct {
			int unit;
			bcm_tsn_taf_cosq_mapping_profile_traverse_cb cb;
			void * user_data;
		} tsn_taf_cosq_mapping_profile_traverse;
		struct {
			int unit;
			bcm_tsn_taf_event_types_t event_types;
			int taf_gate;
			bcm_tsn_taf_event_cb cb;
			void * user_data;
		} tsn_taf_event_register;
		struct {
			int unit;
			bcm_tsn_taf_event_types_t event_types;
			int taf_gate;
			bcm_tsn_taf_event_cb cb;
		} tsn_taf_event_unregister;
		struct {
			int unit;
			int flags;
			int * taf_gate_id;
		} tsn_taf_gate_create;
		struct {
			int unit;
			int taf_gate_id;
		} tsn_taf_gate_destroy;
		struct {
			int unit;
			int taf_gate_id;
			uint64 max_bytes;
			int * profile_id;
		} tsn_taf_gate_max_bytes_profile_create;
		struct {
			int unit;
			int taf_gate_id;
			int profile_id;
		} tsn_taf_gate_max_bytes_profile_destroy;
		struct {
			int unit;
			int taf_gate_id;
			int profile_id;
			uint64 * max_bytes;
		} tsn_taf_gate_max_bytes_profile_get;
		struct {
			int unit;
			int taf_gate_id;
			int profile_id;
			uint64 max_bytes;
		} tsn_taf_gate_max_bytes_profile_set;
		struct {
			int unit;
			int taf_gate_id;
			bcm_tsn_taf_gate_max_bytes_profile_traverse_cb cb;
			void * user_data;
		} tsn_taf_gate_max_bytes_profile_traverse;
		struct {
			int unit;
			int taf_gate_id;
			bcm_tsn_taf_gate_stat_t stat;
			uint64 * val;
		} tsn_taf_gate_stat_get;
		struct {
			int unit;
			int taf_gate_id;
			bcm_tsn_taf_gate_stat_t stat;
			uint32 * val;
		} tsn_taf_gate_stat_get32;
		struct {
			int unit;
			int taf_gate_id;
			int nstat;
			bcm_tsn_taf_gate_stat_t * stat_arr;
			uint64 * val_arr;
		} tsn_taf_gate_stat_multi_get;
		struct {
			int unit;
			int taf_gate_id;
			int nstat;
			bcm_tsn_taf_gate_stat_t * stat_arr;
			uint32 * val_arr;
		} tsn_taf_gate_stat_multi_get32;
		struct {
			int unit;
			int taf_gate_id;
			int nstat;
			bcm_tsn_taf_gate_stat_t * stat_arr;
			uint64 * val_arr;
		} tsn_taf_gate_stat_multi_set;
		struct {
			int unit;
			int taf_gate_id;
			int nstat;
			bcm_tsn_taf_gate_stat_t * stat_arr;
			uint32 * val_arr;
		} tsn_taf_gate_stat_multi_set32;
		struct {
			int unit;
			int taf_gate_id;
			bcm_tsn_taf_gate_stat_t stat;
			uint64 val;
		} tsn_taf_gate_stat_set;
		struct {
			int unit;
			int taf_gate_id;
			bcm_tsn_taf_gate_stat_t stat;
			uint32 val;
		} tsn_taf_gate_stat_set32;
		struct {
			int unit;
			int taf_gate_id;
			bcm_tsn_taf_gate_stat_t stat;
			uint64 * val;
		} tsn_taf_gate_stat_sync_get;
		struct {
			int unit;
			int taf_gate_id;
			bcm_tsn_taf_gate_stat_t stat;
			uint32 * val;
		} tsn_taf_gate_stat_sync_get32;
		struct {
			int unit;
			int taf_gate_id;
			int nstat;
			bcm_tsn_taf_gate_stat_t * stat_arr;
			uint64 * val_arr;
		} tsn_taf_gate_stat_sync_multi_get;
		struct {
			int unit;
			int taf_gate_id;
			int nstat;
			bcm_tsn_taf_gate_stat_t * stat_arr;
			uint32 * val_arr;
		} tsn_taf_gate_stat_sync_multi_get32;
		struct {
			int unit;
			bcm_tsn_taf_gate_traverse_cb cb;
			void * user_data;
		} tsn_taf_gate_traverse;
		struct {
			int unit;
			int taf_gate;
			bcm_tsn_taf_profile_id_t pid;
		} tsn_taf_profile_commit;
		struct {
			int unit;
			int taf_gate;
			bcm_tsn_taf_profile_t * profile;
			bcm_tsn_taf_profile_id_t * pid;
		} tsn_taf_profile_create;
		struct {
			int unit;
			int taf_gate;
			bcm_tsn_taf_profile_id_t pid;
		} tsn_taf_profile_destroy;
		struct {
			int unit;
			int taf_gate;
		} tsn_taf_profile_destroy_all;
		struct {
			int unit;
			int taf_gate;
			bcm_tsn_taf_profile_id_t pid;
			bcm_tsn_taf_profile_t * profile;
		} tsn_taf_profile_get;
		struct {
			int unit;
			int taf_gate;
			bcm_tsn_taf_profile_id_t pid;
			bcm_tsn_taf_profile_t * profile;
		} tsn_taf_profile_set;
		struct {
			int unit;
			int taf_gate;
			bcm_tsn_taf_profile_id_t pid;
			bcm_tsn_taf_profile_status_t * status;
		} tsn_taf_profile_status_get;
		struct {
			int unit;
			int taf_gate;
			bcm_tsn_taf_profile_traverse_cb cb;
			void * user_data;
		} tsn_taf_profile_traverse;
		struct {
			int unit;
			int taf_gate;
			bcm_tsn_taf_status_t type;
			uint32 * arg;
		} tsn_taf_status_get;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			bcm_tunnel_config_t * tconfig;
		} tunnel_config_get;
		struct {
			int unit;
			bcm_tunnel_config_t * tconfig;
		} tunnel_config_set;
		struct {
			int unit;
			uint32 flags;
			int * dscp_map_id;
		} tunnel_dscp_map_create;
		struct {
			int unit;
			int dscp_map_id;
		} tunnel_dscp_map_destroy;
		struct {
			int unit;
			int dscp_map_id;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_port_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_port_set;
		struct {
			int unit;
			int dscp_map_id;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_set;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} tunnel_initiator_clear;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
			bcm_tunnel_initiator_t * tunnel;
		} tunnel_initiator_create;
		struct {
			int unit;
			bcm_gport_t tunnel_id;
		} tunnel_initiator_destroy;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
			bcm_tunnel_initiator_t * tunnel;
		} tunnel_initiator_get;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
			bcm_tunnel_initiator_t * tunnel;
		} tunnel_initiator_set;
		struct {
			int unit;
			bcm_tunnel_initiator_traverse_cb cb;
			void * user_data;
		} tunnel_initiator_traverse;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} tunnel_terminator_add;
		struct {
			int unit;
			uint32 flags;
			bcm_tunnel_terminator_config_key_t * config_key;
			bcm_tunnel_terminator_config_action_t * config_action;
		} tunnel_terminator_config_add;
		struct {
			int unit;
			bcm_tunnel_terminator_config_key_t * config_key;
		} tunnel_terminator_config_delete;
		struct {
			int unit;
			bcm_tunnel_terminator_config_key_t * config_key;
			bcm_tunnel_terminator_config_action_t * config_action;
		} tunnel_terminator_config_get;
		struct {
			int unit;
			bcm_tunnel_terminator_config_traverse_info_t additional_info;
			bcm_tunnel_terminator_config_traverse_cb cb;
			void * user_data;
		} tunnel_terminator_config_traverse;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} tunnel_terminator_create;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} tunnel_terminator_delete;
		struct {
			int unit;
			bcm_tunnel_terminator_t * terminator;
			uint32 * value;
		} tunnel_terminator_flexctr_object_get;
		struct {
			int unit;
			bcm_tunnel_terminator_t * terminator;
			uint32 value;
		} tunnel_terminator_flexctr_object_set;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} tunnel_terminator_get;
		struct {
			int unit;
			bcm_tunnel_terminator_t * terminator;
			uint32 stat_counter_id;
		} tunnel_terminator_stat_attach;
		struct {
			int unit;
			bcm_tunnel_terminator_t * terminator;
		} tunnel_terminator_stat_detach;
		struct {
			int unit;
			bcm_tunnel_terminator_t * terminator;
			uint32 * stat_counter_id;
		} tunnel_terminator_stat_id_get;
		struct {
			int unit;
			bcm_tunnel_terminator_traverse_cb cb;
			void * user_data;
		} tunnel_terminator_traverse;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} tunnel_terminator_update;
		struct {
			int unit;
			bcm_gport_t tunnel;
			bcm_vlan_vector_t * vlan_vec;
		} tunnel_terminator_vlan_get;
		struct {
			int unit;
			bcm_gport_t tunnel;
			uint32 * vlan_vec;
		} tunnel_terminator_vlan_set;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_pkt_t * tx_pkt;
			void * cookie;
		} tx;
		struct {
			int unit;
			bcm_pkt_t ** pkt;
			int count;
			bcm_pkt_cb_f all_done_cb;
			void * cookie;
		} tx_array;
		struct {
			int unit;
		} tx_cleanup;
#ifdef	BCM_RPC_SUPPORT
		struct {
			bcm_pkt_t * pkt;
			int dest_unit;
			int remote_port;
			uint32 flags;
			bcm_cpu_tunnel_mode_t mode;
		} tx_cpu_tunnel;
		struct {
			bcm_tx_cpu_tunnel_f * f;
		} tx_cpu_tunnel_get;
		struct {
			bcm_tx_cpu_tunnel_f f;
		} tx_cpu_tunnel_set;
#endif	/* BCM_RPC_SUPPORT */
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			void * dv_p;
		} tx_dv_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
		} tx_init;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			bcm_pkt_cb_f all_done_cb;
			void * cookie;
		} tx_list;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			uint8 * dest_mac;
			int vid;
		} tx_pkt_l2_map;
		struct {
			int unit;
			bcm_pkt_t * tx_pkt;
		} tx_pkt_setup;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
		} tx_show;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_txbeacon_pkt_id_t pkt_id;
		} txbeacon_destroy;
		struct {
			int unit;
			int uC;
		} txbeacon_init;
		struct {
			int unit;
			bcm_txbeacon_t * txbeacon;
		} txbeacon_pkt_get;
		struct {
			int unit;
			bcm_txbeacon_t * txbeacon;
		} txbeacon_pkt_setup;
		struct {
			int unit;
			bcm_txbeacon_pkt_id_t pkt_id;
		} txbeacon_start;
		struct {
			int unit;
			bcm_txbeacon_pkt_id_t pkt_id;
		} txbeacon_stop;
		struct {
			int unit;
			bcm_txbeacon_traverse_cb_t trav_fn;
			void * user_data;
		} txbeacon_traverse;
		struct {
			int unit;
			bcm_udf_abstract_pkt_format_t abstract_pkt_format;
			bcm_udf_abstract_pkt_format_info_t * pkt_format_info;
		} udf_abstract_pkt_format_info_get;
		struct {
			int unit;
			bcm_udf_abstract_pkt_format_t abstract_pkt_format;
			int max;
			bcm_udf_id_t * udf_id_list;
			int * actual;
		} udf_abstract_pkt_format_object_list_get;
		struct {
			int unit;
			int max;
			bcm_udf_abstract_pkt_format_t * abstr_pkt_fmt_list;
			int * actual;
		} udf_abstract_pkt_format_supported_list_get;
		struct {
			int unit;
			bcm_udf_alloc_hints_t * hints;
			bcm_udf_chunk_info_t * udf_chunk_info;
			bcm_udf_id_t * udf_id;
		} udf_chunk_create;
		struct {
			int unit;
			bcm_udf_id_t udf_id;
			bcm_udf_chunk_info_t * udf_chunk_info;
		} udf_chunk_info_get;
		struct {
			int unit;
			bcm_udf_alloc_hints_t * hints;
			bcm_udf_t * udf_info;
			bcm_udf_id_t * udf_id;
		} udf_create;
		struct {
			int unit;
			bcm_udf_id_t udf_id;
		} udf_destroy;
		struct {
			int unit;
		} udf_detach;
		struct {
			int unit;
			bcm_udf_tunnel_term_flow_type_t flow_type;
			uint32 * chunk_bmap;
		} udf_flow_based_chunk_arrange_get;
		struct {
			int unit;
			bcm_udf_tunnel_term_flow_type_t flow_type;
			uint32 chunk_bmap;
		} udf_flow_based_chunk_arrange_set;
		struct {
			int unit;
			bcm_udf_id_t udf_id;
			bcm_udf_t * udf_info;
		} udf_get;
		struct {
			int unit;
			int max;
			bcm_udf_id_t * udf_id_list;
			int * actual;
		} udf_get_all;
		struct {
			int unit;
			uint32 options;
			bcm_udf_hash_config_t * config;
		} udf_hash_config_add;
		struct {
			int unit;
			bcm_udf_hash_config_t * config;
		} udf_hash_config_delete;
		struct {
			int unit;
		} udf_hash_config_delete_all;
		struct {
			int unit;
			bcm_udf_hash_config_t * config;
		} udf_hash_config_get;
		struct {
			int unit;
			int max;
			bcm_udf_hash_config_t * config_list;
			int * actual;
		} udf_hash_config_get_all;
		struct {
			int unit;
		} udf_init;
		struct {
			int unit;
			bcm_udf_abstract_pkt_format_t abstr_pkt_fmt;
			bcm_udf_multi_abstract_pkt_format_info_t * pkt_fmt_info;
		} udf_multi_abstract_pkt_format_info_get;
		struct {
			int unit;
			bcm_udf_alloc_hints_t * hints;
			bcm_udf_multi_chunk_info_t * info;
			bcm_udf_id_t * udf_id;
		} udf_multi_chunk_create;
		struct {
			int unit;
			bcm_udf_id_t udf_id;
			bcm_udf_multi_chunk_info_t * info;
		} udf_multi_chunk_info_get;
		struct {
			int unit;
			bcm_udf_oper_mode_t * mode;
		} udf_oper_mode_get;
		struct {
			int unit;
			bcm_udf_oper_mode_t mode;
		} udf_oper_mode_set;
		struct {
			int unit;
			bcm_udf_pkt_format_id_t pkt_format_id;
			bcm_udf_pkt_format_action_t action;
			int * arg;
		} udf_pkt_format_action_get;
		struct {
			int unit;
			bcm_udf_pkt_format_id_t pkt_format_id;
			bcm_udf_pkt_format_action_t action;
			int arg;
		} udf_pkt_format_action_set;
		struct {
			int unit;
			bcm_udf_id_t udf_id;
			bcm_udf_pkt_format_id_t pkt_format_id;
		} udf_pkt_format_add;
		struct {
			int unit;
			bcm_udf_pkt_format_options_t options;
			bcm_udf_pkt_format_info_t * pkt_format;
			bcm_udf_pkt_format_id_t * pkt_format_id;
		} udf_pkt_format_create;
		struct {
			int unit;
			bcm_udf_id_t udf_id;
			bcm_udf_pkt_format_id_t pkt_format_id;
		} udf_pkt_format_delete;
		struct {
			int unit;
			bcm_udf_id_t udf_id;
		} udf_pkt_format_delete_all;
		struct {
			int unit;
			bcm_udf_pkt_format_id_t pkt_format_id;
		} udf_pkt_format_destroy;
		struct {
			int unit;
			bcm_udf_pkt_format_id_t pkt_format_id;
			int max;
			bcm_udf_id_t * udf_id_list;
			int * actual;
		} udf_pkt_format_get;
		struct {
			int unit;
			bcm_udf_id_t udf_id;
			int max;
			bcm_udf_pkt_format_id_t * pkt_format_id_list;
			int * actual;
		} udf_pkt_format_get_all;
		struct {
			int unit;
			bcm_udf_pkt_format_id_t pkt_format_id;
			bcm_udf_pkt_format_info_t * pkt_format;
		} udf_pkt_format_info_get;
		struct {
			int unit;
			uint8 * num_chunks;
			uint32 * chunk_bmap;
		} udf_range_checker_chunk_info_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_block_t * vlan_block;
		} vlan_block_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_block_t * vlan_block;
		} vlan_block_set;
		struct {
			int unit;
			bcm_vlan_control_t type;
			int * arg;
		} vlan_control_get;
		struct {
			int unit;
			int port;
			bcm_vlan_control_port_t type;
			int * arg;
		} vlan_control_port_get;
		struct {
			int unit;
			int port;
			bcm_vlan_control_port_t type;
			int arg;
		} vlan_control_port_set;
		struct {
			int unit;
			bcm_vlan_control_t type;
			int arg;
		} vlan_control_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_control_vlan_t * control;
		} vlan_control_vlan_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			uint32 valid_fields;
			bcm_vlan_control_vlan_t * control;
		} vlan_control_vlan_selective_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			uint32 valid_fields;
			bcm_vlan_control_vlan_t * control;
		} vlan_control_vlan_selective_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_control_vlan_t control;
		} vlan_control_vlan_set;
		struct {
			int unit;
			bcm_vlan_t vid;
		} vlan_create;
		struct {
			int unit;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_gport_t port_1;
			bcm_gport_t port_2;
		} vlan_cross_connect_add;
		struct {
			int unit;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_cross_connect_delete;
		struct {
			int unit;
		} vlan_cross_connect_delete_all;
		struct {
			int unit;
			bcm_vlan_cross_connect_traverse_cb cb;
			void * user_data;
		} vlan_cross_connect_traverse;
		struct {
			int unit;
			bcm_vlan_t * vid_ptr;
		} vlan_default_get;
		struct {
			int unit;
			bcm_vlan_t vid;
		} vlan_default_set;
		struct {
			int unit;
			bcm_vlan_t vid;
		} vlan_destroy;
		struct {
			int unit;
		} vlan_destroy_all;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t new_vid;
			int prio;
		} vlan_dtag_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
		} vlan_dtag_delete;
		struct {
			int unit;
		} vlan_dtag_delete_all;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_dtag_get;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t new_vid;
			int int_prio;
		} vlan_dtag_range_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
		} vlan_dtag_range_delete;
		struct {
			int unit;
		} vlan_dtag_range_delete_all;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_dtag_range_get;
		struct {
			int unit;
			bcm_vlan_dtag_range_traverse_cb cb;
			void * user_data;
		} vlan_dtag_range_traverse;
		struct {
			int unit;
			bcm_vlan_dtag_traverse_cb cb;
			void * user_data;
		} vlan_dtag_traverse;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_gport_t port;
			int flags;
		} vlan_gport_add;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_gport_t port;
		} vlan_gport_delete;
		struct {
			int unit;
			bcm_vlan_t vlan;
		} vlan_gport_delete_all;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_gport_t port;
			int flags;
		} vlan_gport_extended_delete;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_gport_t port;
			int * flags;
		} vlan_gport_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			int array_max;
			bcm_gport_t * gport_array;
			int * flags_array;
			int * array_size;
		} vlan_gport_get_all;
		struct {
			int unit;
			bcm_vlan_gport_info_t * vlan_gport_info;
		} vlan_gport_info_get;
		struct {
			int unit;
		} vlan_init;
		struct {
			int unit;
			bcm_vlan_ip_t * vlan_ip;
			bcm_vlan_action_set_t * action;
		} vlan_ip_action_add;
		struct {
			int unit;
			bcm_vlan_ip_t * vlan_ip;
		} vlan_ip_action_delete;
		struct {
			int unit;
		} vlan_ip_action_delete_all;
		struct {
			int unit;
			bcm_vlan_ip_t * vlan_ip;
			bcm_vlan_action_set_t * action;
		} vlan_ip_action_get;
		struct {
			int unit;
			bcm_vlan_ip_action_traverse_cb cb;
			void * user_data;
		} vlan_ip_action_traverse;
		struct {
			int unit;
			bcm_vlan_ip_t * vlan_ip;
		} vlan_ip_add;
		struct {
			int unit;
			bcm_vlan_ip_t * vlan_ip;
		} vlan_ip_delete;
		struct {
			int unit;
		} vlan_ip_delete_all;
		struct {
			int unit;
			bcm_vlan_data_t ** listp;
			int * countp;
		} vlan_list;
		struct {
			int unit;
			bcm_pbmp_t ports;
			bcm_vlan_data_t ** listp;
			int * countp;
		} vlan_list_by_pbmp;
		struct {
			int unit;
			bcm_vlan_data_t * list;
			int count;
		} vlan_list_destroy;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_action_set_t * action;
		} vlan_mac_action_add;
		struct {
			int unit;
			uint8 * mac;
		} vlan_mac_action_delete;
		struct {
			int unit;
		} vlan_mac_action_delete_all;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_action_set_t * action;
		} vlan_mac_action_get;
		struct {
			int unit;
			bcm_vlan_mac_action_traverse_cb cb;
			void * user_data;
		} vlan_mac_action_traverse;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vid;
			int prio;
		} vlan_mac_add;
		struct {
			int unit;
			uint8 * mac;
		} vlan_mac_delete;
		struct {
			int unit;
		} vlan_mac_delete_all;
		struct {
			int unit;
			uint32 options;
			bcm_vlan_match_info_t * match_info;
			bcm_vlan_action_set_t * action_set;
		} vlan_match_action_add;
		struct {
			int unit;
			bcm_vlan_match_info_t * match_info;
		} vlan_match_action_delete;
		struct {
			int unit;
			bcm_vlan_match_t match;
		} vlan_match_action_delete_all;
		struct {
			int unit;
			bcm_vlan_match_info_t * match_info;
			bcm_vlan_action_set_t * action_set;
		} vlan_match_action_get;
		struct {
			int unit;
			bcm_vlan_match_t match;
			int size;
			bcm_vlan_match_info_t * match_info_array;
			bcm_vlan_action_set_t * action_set_array;
			int * count;
		} vlan_match_action_multi_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_mcast_flood_t * mode;
		} vlan_mcast_flood_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_mcast_flood_t mode;
		} vlan_mcast_flood_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_policer_t * policer_id;
		} vlan_policer_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_policer_t policer_id;
		} vlan_policer_set;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_pbmp_t pbmp;
			bcm_pbmp_t ubmp;
		} vlan_port_add;
		struct {
			int unit;
			bcm_vlan_port_t * vlan_port;
		} vlan_port_create;
		struct {
			int unit;
			bcm_port_t port;
		} vlan_port_default_action_delete;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_default_action_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_default_action_set;
		struct {
			int unit;
			bcm_gport_t gport;
		} vlan_port_destroy;
		struct {
			int unit;
			bcm_port_t port;
		} vlan_port_egress_default_action_delete;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_egress_default_action_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_egress_default_action_set;
		struct {
			int unit;
			bcm_vlan_port_t * vlan_port;
		} vlan_port_find;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_pbmp_t * pbmp;
			bcm_pbmp_t * ubmp;
		} vlan_port_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
			bcm_vlan_action_set_t * action;
		} vlan_port_protocol_action_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
		} vlan_port_protocol_action_delete;
		struct {
			int unit;
			bcm_port_t port;
		} vlan_port_protocol_action_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
			bcm_vlan_action_set_t * action;
		} vlan_port_protocol_action_get;
		struct {
			int unit;
			bcm_vlan_port_protocol_action_traverse_cb cb;
			void * user_data;
		} vlan_port_protocol_action_traverse;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_pbmp_t pbmp;
		} vlan_port_remove;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_port_stat_multi_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_port_stat_multi_get32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_port_stat_multi_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_port_stat_multi_set32;
		struct {
			int unit;
			bcm_vlan_port_translation_t * vlan_port_translation;
		} vlan_port_translation_get;
		struct {
			int unit;
			bcm_vlan_port_translation_t * vlan_port_translation;
		} vlan_port_translation_set;
		struct {
			int unit;
			bcm_vlan_port_traverse_info_t * additional_info;
			bcm_vlan_port_traverse_cb trav_fn;
			void * user_data;
		} vlan_port_traverse;
		struct {
			int unit;
			bcm_vlan_t vlan;
			int qmid;
		} vlan_queue_map_attach;
		struct {
			int unit;
			bcm_vlan_t vlan;
			int * qmid;
		} vlan_queue_map_attach_get;
		struct {
			int unit;
			uint32 flags;
			int * qmid;
		} vlan_queue_map_create;
		struct {
			int unit;
			int qmid;
		} vlan_queue_map_destroy;
		struct {
			int unit;
		} vlan_queue_map_destroy_all;
		struct {
			int unit;
			bcm_vlan_t vlan;
		} vlan_queue_map_detach;
		struct {
			int unit;
		} vlan_queue_map_detach_all;
		struct {
			int unit;
			int qmid;
			int pkt_pri;
			int cfi;
			int * queue;
			int * color;
		} vlan_queue_map_get;
		struct {
			int unit;
			int qmid;
			int pkt_pri;
			int cfi;
			int queue;
			int color;
		} vlan_queue_map_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			uint32 stat_counter_id;
		} vlan_stat_attach;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_stat_counter_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_stat_counter_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_stat_counter_sync_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
		} vlan_stat_detach;
		struct {
			int unit;
			bcm_vlan_t vlan;
			uint32 stat_counter_id;
		} vlan_stat_detach_with_id;
		struct {
			int unit;
			bcm_vlan_t vlan;
			int enable;
		} vlan_stat_enable_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_stat_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_stat_get32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_stat_t stat;
			uint32 * stat_counter_id;
		} vlan_stat_id_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_stat_multi_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_stat_multi_get32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_stat_multi_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_stat_multi_set32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint64 val;
		} vlan_stat_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint32 val;
		} vlan_stat_set32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_stat_sync_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_stat_sync_get32;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_stg_t * stg_ptr;
		} vlan_stg_get;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_stg_t stg;
		} vlan_stg_set;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_port_t port;
			int * stp_state;
		} vlan_stp_get;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_port_t port;
			int stp_state;
		} vlan_stp_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_add;
		struct {
			int unit;
			bcm_vlan_translate_action_class_t * action_class;
		} vlan_translate_action_class_get;
		struct {
			int unit;
			bcm_vlan_translate_action_class_t * action_class;
		} vlan_translate_action_class_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_create;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_action_delete;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_get;
		struct {
			int unit;
			uint32 flags;
			int * action_id;
		} vlan_translate_action_id_create;
		struct {
			int unit;
			uint32 flags;
			int action_id;
		} vlan_translate_action_id_destroy;
		struct {
			int unit;
			uint32 flags;
		} vlan_translate_action_id_destroy_all;
		struct {
			int unit;
			uint32 flags;
			int action_id;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_id_get;
		struct {
			int unit;
			uint32 flags;
			int action_id;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_id_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t outer_vlan_low;
			bcm_vlan_t outer_vlan_high;
			bcm_vlan_t inner_vlan_low;
			bcm_vlan_t inner_vlan_high;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_range_add;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t outer_vlan_low;
			bcm_vlan_t outer_vlan_high;
			bcm_vlan_t inner_vlan_low;
			bcm_vlan_t inner_vlan_high;
		} vlan_translate_action_range_delete;
		struct {
			int unit;
		} vlan_translate_action_range_delete_all;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t outer_vlan_low;
			bcm_vlan_t outer_vlan_high;
			bcm_vlan_t inner_vlan_low;
			bcm_vlan_t inner_vlan_high;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_range_get;
		struct {
			int unit;
			bcm_vlan_translate_action_range_traverse_cb cb;
			void * user_data;
		} vlan_translate_action_range_traverse;
		struct {
			int unit;
			bcm_vlan_translate_action_traverse_cb cb;
			void * user_data;
		} vlan_translate_action_traverse;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t new_vid;
			int prio;
		} vlan_translate_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
		} vlan_translate_delete;
		struct {
			int unit;
		} vlan_translate_delete_all;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_egress_action_add;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_egress_action_delete;
		struct {
			int unit;
			bcm_vlan_translate_egress_key_config_t * key_config;
			bcm_vlan_translate_egress_action_set_t * action;
		} vlan_translate_egress_action_extended_add;
		struct {
			int unit;
			bcm_vlan_translate_egress_key_config_t * key_config;
		} vlan_translate_egress_action_extended_delete;
		struct {
			int unit;
			bcm_vlan_translate_egress_key_config_t * key_config;
			bcm_vlan_translate_egress_action_set_t * action;
		} vlan_translate_egress_action_extended_get;
		struct {
			int unit;
			bcm_vlan_translate_egress_action_extended_traverse_cb cb;
			void * user_data;
		} vlan_translate_egress_action_extended_traverse;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_egress_action_get;
		struct {
			int unit;
			bcm_vlan_translate_egress_action_traverse_cb cb;
			void * user_data;
		} vlan_translate_egress_action_traverse;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t new_vid;
			int prio;
		} vlan_translate_egress_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
		} vlan_translate_egress_delete;
		struct {
			int unit;
		} vlan_translate_egress_delete_all;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_flexctr_config_t * config;
		} vlan_translate_egress_flexctr_attach;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_flexctr_config_t * config;
		} vlan_translate_egress_flexctr_detach;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_egress_flexctr_detach_all;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int array_size;
			bcm_vlan_flexctr_config_t * config_array;
			int * count;
		} vlan_translate_egress_flexctr_get;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_translate_egress_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_egress_gport_action_add;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_egress_gport_action_delete;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_egress_gport_action_get;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			uint32 stat_counter_id;
		} vlan_translate_egress_stat_attach;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_translate_egress_stat_counter_get;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_translate_egress_stat_counter_set;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_translate_egress_stat_counter_sync_get;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_egress_stat_detach;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int enable;
		} vlan_translate_egress_stat_enable_set;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_translate_egress_stat_get;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_translate_egress_stat_get32;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 * stat_counter_id;
		} vlan_translate_egress_stat_id_get;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_translate_egress_stat_multi_get;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_translate_egress_stat_multi_get32;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_translate_egress_stat_multi_set;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_translate_egress_stat_multi_set32;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 val;
		} vlan_translate_egress_stat_set;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 val;
		} vlan_translate_egress_stat_set32;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_translate_egress_stat_sync_get;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_translate_egress_stat_sync_get32;
		struct {
			int unit;
			bcm_vlan_translate_egress_traverse_cb cb;
			void * user_data;
		} vlan_translate_egress_traverse;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_flexctr_config_t * config;
		} vlan_translate_flexctr_attach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_flexctr_config_t * config;
		} vlan_translate_flexctr_detach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_flexctr_detach_all;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int array_size;
			bcm_vlan_flexctr_config_t * config_array;
			int * count;
		} vlan_translate_flexctr_get;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_translate_get;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t new_vid;
			int int_prio;
		} vlan_translate_range_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
		} vlan_translate_range_delete;
		struct {
			int unit;
		} vlan_translate_range_delete_all;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t * new_vid;
			int * int_prio;
		} vlan_translate_range_get;
		struct {
			int unit;
			bcm_vlan_translate_range_traverse_cb cb;
			void * user_data;
		} vlan_translate_range_traverse;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			uint32 stat_counter_id;
		} vlan_translate_stat_attach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_translate_stat_counter_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_translate_stat_counter_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_translate_stat_counter_sync_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_stat_detach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int enable;
		} vlan_translate_stat_enable_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_translate_stat_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_translate_stat_get32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 * stat_counter_id;
		} vlan_translate_stat_id_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_translate_stat_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_translate_stat_multi_get32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_translate_stat_multi_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_translate_stat_multi_set32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 val;
		} vlan_translate_stat_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 val;
		} vlan_translate_stat_set32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_translate_stat_sync_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_translate_stat_sync_get32;
		struct {
			int unit;
			bcm_vlan_translate_traverse_cb cb;
			void * user_data;
		} vlan_translate_traverse;
		struct {
			int unit;
			uint32 * vlan_vector;
			uint32 flags_mask;
			uint32 flags_value;
		} vlan_vector_flags_set;
		struct {
			int unit;
			uint32 * vlan_vector;
			bcm_port_t port;
			int stp_state;
		} vlan_vector_stp_set;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			bcm_vlan_vpn_config_t * info;
		} vlan_vpn_create;
		struct {
			int unit;
			bcm_vpn_t vpn;
		} vlan_vpn_destroy;
		struct {
			int unit;
		} vlan_vpn_destroy_all;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_vlan_vpn_config_t * info;
		} vlan_vpn_get;
		struct {
			int unit;
			bcm_vlan_vpn_traverse_cb cb;
			void * user_data;
		} vlan_vpn_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_vlan_t * vsi;
		} vswitch_create;
		struct {
			int unit;
			bcm_vlan_t vsi;
		} vswitch_create_with_id;
		struct {
			int unit;
			bcm_vswitch_cross_connect_t * gports;
		} vswitch_cross_connect_add;
		struct {
			int unit;
			bcm_vswitch_cross_connect_t * gports;
		} vswitch_cross_connect_delete;
		struct {
			int unit;
		} vswitch_cross_connect_delete_all;
		struct {
			int unit;
			bcm_vswitch_cross_connect_t * gports;
		} vswitch_cross_connect_get;
		struct {
			int unit;
			bcm_vswitch_cross_connect_traverse_cb cb;
			void * user_data;
		} vswitch_cross_connect_traverse;
		struct {
			int unit;
			bcm_vlan_t vsi;
		} vswitch_destroy;
		struct {
			int unit;
		} vswitch_destroy_all;
		struct {
			int unit;
		} vswitch_detach;
		struct {
			int unit;
			uint32 flags;
			bcm_vswitch_flexible_connect_match_t * port_match;
			bcm_vswitch_flexible_connect_fwd_t * port_fwd;
		} vswitch_flexible_connect_add;
		struct {
			int unit;
			bcm_vswitch_flexible_connect_match_t * port_match;
		} vswitch_flexible_connect_delete;
		struct {
			int unit;
			uint32 flags;
			bcm_vswitch_flexible_connect_match_t * port_match;
			bcm_vswitch_flexible_connect_fwd_t * port_fwd;
		} vswitch_flexible_connect_get;
		struct {
			int unit;
		} vswitch_init;
		struct {
			int unit;
			bcm_vlan_t vsi;
			bcm_gport_t port;
		} vswitch_port_add;
		struct {
			int unit;
			bcm_vlan_t vsi;
			bcm_gport_t port;
		} vswitch_port_delete;
		struct {
			int unit;
			bcm_vlan_t vsi;
		} vswitch_port_delete_all;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t * vsi;
		} vswitch_port_get;
		struct {
			int unit;
			bcm_vlan_t vsi;
			bcm_vswitch_port_traverse_cb cb;
			void * user_data;
		} vswitch_port_traverse;
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} vxlan_cleanup;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			uint32 stat_counter_id;
		} vxlan_dip_stat_attach;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			bcm_vxlan_dip_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vxlan_dip_stat_counter_get;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			bcm_vxlan_dip_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vxlan_dip_stat_counter_set;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
		} vxlan_dip_stat_detach;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			bcm_vxlan_dip_stat_t stat;
			uint32 * stat_counter_id;
		} vxlan_dip_stat_id_get;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			int nstat;
			bcm_vxlan_dip_stat_t * stat_arr;
			uint64 * value_arr;
		} vxlan_dip_stat_multi_get;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			int nstat;
			bcm_vxlan_dip_stat_t * stat_arr;
			uint32 * value_arr;
		} vxlan_dip_stat_multi_get32;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			int nstat;
			bcm_vxlan_dip_stat_t * stat_arr;
			uint64 * value_arr;
		} vxlan_dip_stat_multi_set;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			int nstat;
			bcm_vxlan_dip_stat_t * stat_arr;
			uint32 * value_arr;
		} vxlan_dip_stat_multi_set32;
		struct {
			int unit;
		} vxlan_init;
		struct {
			int unit;
			bcm_vxlan_network_domain_config_t * config;
		} vxlan_network_domain_config_add;
		struct {
			int unit;
			bcm_vxlan_network_domain_config_t * config;
		} vxlan_network_domain_config_get;
		struct {
			int unit;
			bcm_vxlan_network_domain_config_t * config;
		} vxlan_network_domain_config_remove;
		struct {
			int unit;
			bcm_vxlan_network_domain_config_additional_info_t * additional_info;
			bcm_vxlan_network_domain_config_traverse_cb cb;
			void * user_data;
		} vxlan_network_domain_config_traverse;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_vxlan_port_t * vxlan_port;
		} vxlan_port_add;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_gport_t vxlan_port_id;
		} vxlan_port_delete;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
		} vxlan_port_delete_all;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_vxlan_port_t * vxlan_port;
		} vxlan_port_get;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			int port_max;
			bcm_vxlan_port_t * port_array;
			int * port_count;
		} vxlan_port_get_all;
		struct {
			int unit;
			bcm_vxlan_port_traverse_cb cb;
			void * user_data;
		} vxlan_port_traverse;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			uint32 stat_counter_id;
		} vxlan_stat_attach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_vxlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vxlan_stat_counter_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_vxlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vxlan_stat_counter_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_vxlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vxlan_stat_counter_sync_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
		} vxlan_stat_detach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int enable;
		} vxlan_stat_enable_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_vxlan_stat_t stat;
			uint32 * stat_counter_id;
		} vxlan_stat_id_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_vxlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vxlan_stat_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_vxlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vxlan_stat_multi_get32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_vxlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vxlan_stat_multi_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_vxlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vxlan_stat_multi_set32;
		struct {
			int unit;
			bcm_tunnel_initiator_t * info;
		} vxlan_tunnel_initiator_create;
		struct {
			int unit;
			bcm_gport_t vxlan_tunnel_id;
		} vxlan_tunnel_initiator_destroy;
		struct {
			int unit;
		} vxlan_tunnel_initiator_destroy_all;
		struct {
			int unit;
			bcm_tunnel_initiator_t * info;
		} vxlan_tunnel_initiator_get;
		struct {
			int unit;
			bcm_tunnel_initiator_traverse_cb cb;
			void * user_data;
		} vxlan_tunnel_initiator_traverse;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} vxlan_tunnel_terminator_create;
		struct {
			int unit;
			bcm_gport_t vxlan_tunnel_id;
		} vxlan_tunnel_terminator_destroy;
		struct {
			int unit;
		} vxlan_tunnel_terminator_destroy_all;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} vxlan_tunnel_terminator_get;
		struct {
			int unit;
			bcm_tunnel_terminator_traverse_cb cb;
			void * user_data;
		} vxlan_tunnel_terminator_traverse;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} vxlan_tunnel_terminator_update;
		struct {
			int unit;
			bcm_vxlan_vpn_config_t * info;
		} vxlan_vpn_create;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
		} vxlan_vpn_destroy;
		struct {
			int unit;
		} vxlan_vpn_destroy_all;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_vxlan_vpn_config_t * info;
		} vxlan_vpn_get;
		struct {
			int unit;
			bcm_vxlan_vpn_traverse_cb cb;
			void * user_data;
		} vxlan_vpn_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			int * warmboot;
		} warmboot_get;
		struct {
			int unit;
			int warmboot;
		} warmboot_set;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			bcm_wlan_client_t * info;
		} wlan_client_add;
		struct {
			int unit;
			uint8 * mac;
		} wlan_client_delete;
		struct {
			int unit;
		} wlan_client_delete_all;
		struct {
			int unit;
			uint8 * mac;
			bcm_wlan_client_t * info;
		} wlan_client_get;
		struct {
			int unit;
			bcm_wlan_client_traverse_cb cb;
			void * user_data;
		} wlan_client_traverse;
		struct {
			int unit;
		} wlan_detach;
		struct {
			int unit;
		} wlan_init;
		struct {
			int unit;
			bcm_wlan_port_t * info;
		} wlan_port_add;
		struct {
			int unit;
			bcm_gport_t wlan_port_id;
		} wlan_port_delete;
		struct {
			int unit;
		} wlan_port_delete_all;
		struct {
			int unit;
			bcm_gport_t wlan_port_id;
			bcm_wlan_port_t * info;
		} wlan_port_get;
		struct {
			int unit;
			bcm_wlan_port_traverse_cb cb;
			void * user_data;
		} wlan_port_traverse;
		struct {
			int unit;
			bcm_tunnel_initiator_t * info;
		} wlan_tunnel_initiator_create;
		struct {
			int unit;
			bcm_gport_t wlan_tunnel_id;
		} wlan_tunnel_initiator_destroy;
		struct {
			int unit;
			bcm_tunnel_initiator_t * info;
		} wlan_tunnel_initiator_get;
#endif	/* INCLUDE_L3 */
#ifdef	INCLUDE_XFLOW_MACSEC
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_control_t type;
			uint64 * value;
		} xflow_macsec_control_get;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_control_t type;
			uint64 value;
		} xflow_macsec_control_set;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_decrypt_flow_info_t * flow_info;
			int priority;
			bcm_xflow_macsec_flow_id_t * flow_id;
		} xflow_macsec_decrypt_flow_create;
		struct {
			int unit;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_policy_id_t * policy_id;
		} xflow_macsec_decrypt_flow_default_policy_get;
		struct {
			int unit;
			bcm_xflow_macsec_flow_id_t flow_id;
		} xflow_macsec_decrypt_flow_destroy;
		struct {
			int unit;
			bcm_xflow_macsec_flow_id_t flow_id;
			int * enable;
		} xflow_macsec_decrypt_flow_enable_get;
		struct {
			int unit;
			bcm_xflow_macsec_flow_id_t flow_id;
			int enable;
		} xflow_macsec_decrypt_flow_enable_set;
		struct {
			int unit;
			bcm_xflow_macsec_flow_id_t flow_id;
			bcm_xflow_macsec_decrypt_flow_info_t * flow_info;
			int * priority;
		} xflow_macsec_decrypt_flow_get;
		struct {
			int unit;
			bcm_xflow_macsec_flow_id_t flow_id;
			bcm_xflow_macsec_decrypt_flow_info_t * flow_info;
			int priority;
		} xflow_macsec_decrypt_flow_set;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_decrypt_policy_info_t * policy_info;
			bcm_xflow_macsec_policy_id_t * policy_id;
		} xflow_macsec_decrypt_policy_create;
		struct {
			int unit;
			bcm_xflow_macsec_policy_id_t policy_id;
		} xflow_macsec_decrypt_policy_destroy;
		struct {
			int unit;
			bcm_xflow_macsec_policy_id_t policy_id;
			bcm_xflow_macsec_decrypt_policy_info_t * policy_info;
		} xflow_macsec_decrypt_policy_get;
		struct {
			int unit;
			bcm_xflow_macsec_policy_id_t policy_id;
			bcm_xflow_macsec_decrypt_policy_info_t * policy_info;
		} xflow_macsec_decrypt_policy_set;
		struct {
			int unit;
			bcm_xflow_macsec_instance_id_t instance_id;
			int index;
			int * enable;
		} xflow_macsec_decrypt_svtag_cpu_flex_map_enable_get;
		struct {
			int unit;
			bcm_xflow_macsec_instance_id_t instance_id;
			int index;
			int enable;
		} xflow_macsec_decrypt_svtag_cpu_flex_map_enable_set;
		struct {
			int unit;
			bcm_xflow_macsec_instance_id_t instance_id;
			int index;
			bcm_xflow_macsec_svtag_cpu_flex_map_info_t * svtag_cpu_flex_map_info;
		} xflow_macsec_decrypt_svtag_cpu_flex_map_get;
		struct {
			int unit;
			bcm_xflow_macsec_instance_id_t instance_id;
			int index;
			bcm_xflow_macsec_svtag_cpu_flex_map_info_t * svtag_cpu_flex_map_info;
		} xflow_macsec_decrypt_svtag_cpu_flex_map_set;
		struct {
			int unit;
			bcm_xflow_macsec_event_cb cb;
		} xflow_macsec_event_deregister;
		struct {
			int unit;
			bcm_xflow_macsec_event_cb cb;
			void * user_data;
		} xflow_macsec_event_register;
		struct {
			int unit;
			bcm_xflow_macsec_handle_info_t * handle_info;
			bcm_xflow_macsec_id_t * id;
		} xflow_macsec_handle_create;
		struct {
			int unit;
			bcm_xflow_macsec_id_t id;
			bcm_xflow_macsec_handle_info_t * handle_info;
		} xflow_macsec_handle_info_get;
		struct {
			int unit;
			int instance_max;
			bcm_xflow_macsec_instance_pbmp_t * instance_pbmp_map;
			int * instance_count;
		} xflow_macsec_instance_pbmp_map_get;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_secure_chan_id_t chan_id;
			bcm_xflow_macsec_ipsec_secure_assoc_info_t * assoc_info;
			bcm_xflow_macsec_secure_assoc_id_t * assoc_id;
		} xflow_macsec_ipsec_secure_assoc_create;
		struct {
			int unit;
			bcm_xflow_macsec_secure_assoc_id_t assoc_id;
		} xflow_macsec_ipsec_secure_assoc_destroy;
		struct {
			int unit;
			bcm_xflow_macsec_secure_assoc_id_t assoc_id;
			bcm_xflow_macsec_ipsec_secure_assoc_info_t * assoc_info;
			bcm_xflow_macsec_secure_chan_id_t * chan_id;
		} xflow_macsec_ipsec_secure_assoc_get;
		struct {
			int unit;
			bcm_xflow_macsec_secure_assoc_id_t assoc_id;
			bcm_xflow_macsec_ipsec_secure_assoc_info_t * assoc_info;
		} xflow_macsec_ipsec_secure_assoc_set;
		struct {
			int unit;
			bcm_xflow_macsec_secure_chan_id_t chan_id;
			bcm_xflow_macsec_ipsec_secure_assoc_traverse_cb callback;
			void * user_data;
		} xflow_macsec_ipsec_secure_assoc_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_ipsec_secure_chan_info_t * chan_info;
			bcm_xflow_macsec_secure_chan_id_t * chan_id;
		} xflow_macsec_ipsec_secure_chan_create;
		struct {
			int unit;
			bcm_xflow_macsec_secure_chan_id_t chan_id;
		} xflow_macsec_ipsec_secure_chan_destroy;
		struct {
			int unit;
			bcm_xflow_macsec_secure_chan_id_t chan_id;
			bcm_xflow_macsec_ipsec_secure_chan_info_t * chan_info;
		} xflow_macsec_ipsec_secure_chan_get;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_ipsec_chan_traverse_cb callback;
			void * user_data;
		} xflow_macsec_ipsec_secure_chan_info_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_secure_chan_id_t chan_id;
			bcm_xflow_macsec_ipsec_secure_chan_info_t * chan_info;
		} xflow_macsec_ipsec_secure_chan_set;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_mac_addr_control_t control_type;
			bcm_xflow_macsec_mac_addr_info_t * control_info;
		} xflow_macsec_mac_addr_control_get;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_mac_addr_control_t control_type;
			bcm_xflow_macsec_mac_addr_info_t * control_info;
		} xflow_macsec_mac_addr_control_set;
		struct {
			int unit;
			int flags;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_mtu_t mtu_sel;
			uint32 * mtu;
		} xflow_macsec_mtu_get;
		struct {
			int unit;
			int flags;
			bcm_xflow_macsec_instance_id_t instance_id;
			uint32 mtu;
			bcm_xflow_macsec_mtu_t * mtu_sel;
		} xflow_macsec_mtu_set;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			bcm_xflow_macsec_port_control_t control_type;
			bcm_xflow_macsec_port_info_t * value;
		} xflow_macsec_port_control_get;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			bcm_xflow_macsec_port_control_t control_type;
			bcm_xflow_macsec_port_info_t * value;
		} xflow_macsec_port_control_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_xflow_macsec_port_info_t * port_info;
		} xflow_macsec_port_info_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_xflow_macsec_port_info_t * port_info;
		} xflow_macsec_port_info_set;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t gport;
			bcm_xflow_macsec_port_map_info_t * port_map_info;
		} xflow_macsec_port_map_info_get;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t port;
			bcm_xflow_macsec_secure_chan_id_t * chan_id;
		} xflow_macsec_port_rsvd_secure_chan_get;
		struct {
			int unit;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_sectag_ethertype_t sectag_etype_sel;
			uint32 * sectag_etype;
		} xflow_macsec_sectag_etype_get;
		struct {
			int unit;
			int flags;
			bcm_xflow_macsec_instance_id_t instance_id;
			uint32 sectag_etype;
			bcm_xflow_macsec_sectag_ethertype_t * sectag_etype_sel;
		} xflow_macsec_sectag_etype_set;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_secure_chan_id_t chan_id;
			bcm_xflow_macsec_secure_assoc_info_t * assoc_info;
			bcm_xflow_macsec_secure_assoc_id_t * assoc_id;
		} xflow_macsec_secure_assoc_create;
		struct {
			int unit;
			bcm_xflow_macsec_secure_assoc_id_t assoc_id;
		} xflow_macsec_secure_assoc_destroy;
		struct {
			int unit;
			bcm_xflow_macsec_secure_assoc_id_t assoc_id;
			bcm_xflow_macsec_secure_assoc_info_t * assoc_info;
			bcm_xflow_macsec_secure_chan_id_t * chan_id;
		} xflow_macsec_secure_assoc_get;
		struct {
			int unit;
			bcm_xflow_macsec_secure_assoc_id_t assoc_id;
			bcm_xflow_macsec_secure_assoc_info_t * assoc_info;
		} xflow_macsec_secure_assoc_set;
		struct {
			int unit;
			bcm_xflow_macsec_secure_chan_id_t chan_id;
			bcm_xflow_macsec_secure_assoc_traverse_cb callback;
			void * user_data;
		} xflow_macsec_secure_assoc_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_secure_chan_info_t * chan_info;
			int priority;
			bcm_xflow_macsec_secure_chan_id_t * chan_id;
		} xflow_macsec_secure_chan_create;
		struct {
			int unit;
			bcm_xflow_macsec_secure_chan_id_t chan_id;
		} xflow_macsec_secure_chan_destroy;
		struct {
			int unit;
			bcm_xflow_macsec_secure_chan_id_t chan_id;
			int * enable;
		} xflow_macsec_secure_chan_enable_get;
		struct {
			int unit;
			bcm_xflow_macsec_secure_chan_id_t chan_id;
			int enable;
		} xflow_macsec_secure_chan_enable_set;
		struct {
			int unit;
			bcm_xflow_macsec_secure_chan_id_t chan_id;
			bcm_xflow_macsec_secure_chan_info_t * chan_info;
			int * priority;
		} xflow_macsec_secure_chan_get;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_chan_traverse_cb callback;
			void * user_data;
		} xflow_macsec_secure_chan_info_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_secure_chan_id_t chan_id;
			bcm_xflow_macsec_secure_chan_info_t * chan_info;
			int priority;
		} xflow_macsec_secure_chan_set;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_id_t id;
			bcm_xflow_macsec_stat_type_t stat_type;
			uint64 * value;
		} xflow_macsec_stat_get;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_id_t id;
			uint32 num_stats;
			bcm_xflow_macsec_stat_type_t * stat_type_array;
			uint64 * value_array;
		} xflow_macsec_stat_multi_get;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_id_t id;
			uint32 num_stats;
			bcm_xflow_macsec_stat_type_t * stat_type_array;
			uint64 * value_array;
		} xflow_macsec_stat_multi_set;
		struct {
			int unit;
			uint32 flags;
			bcm_xflow_macsec_id_t id;
			bcm_xflow_macsec_stat_type_t stat_type;
			uint64 value;
		} xflow_macsec_stat_set;
		struct {
			int unit;
			bcm_xflow_macsec_id_t id;
			bcm_xflow_macsec_subport_id_t * macsec_subport_id;
		} xflow_macsec_subport_id_get;
		struct {
			int unit;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_vlan_tpid_t * vlan_tpid;
		} xflow_macsec_vlan_tpid_array_get;
		struct {
			int unit;
			bcm_xflow_macsec_instance_id_t instance_id;
			uint32 vlan_tpid;
			uint8 * tpid_index_sel;
		} xflow_macsec_vlan_tpid_array_index_get;
		struct {
			int unit;
			bcm_xflow_macsec_instance_id_t instance_id;
			bcm_xflow_macsec_vlan_tpid_t * vlan_tpid;
		} xflow_macsec_vlan_tpid_array_set;
#endif	/* INCLUDE_XFLOW_MACSEC */
	} args;
} bcm_async_req_t;

typedef enum {
	BCM_ASYNC_ENTRY_NONE = 0,
	BCM_ASYNC_ENTRY_SHUTDOWN,
	BCM_ASYNC_ENTRY_ATTACH,
	BCM_ASYNC_ENTRY_ATTACH_CHECK,
	BCM_ASYNC_ENTRY_ATTACH_EARLY_TXRX,
	BCM_ASYNC_ENTRY_ATTACH_MAX,
	BCM_ASYNC_ENTRY_ATTACH_REGISTER,
	BCM_ASYNC_ENTRY_ATTACH_UNREGISTER,
	BCM_ASYNC_ENTRY_AUTH_DETACH,
	BCM_ASYNC_ENTRY_AUTH_EGRESS_GET,
	BCM_ASYNC_ENTRY_AUTH_EGRESS_SET,
	BCM_ASYNC_ENTRY_AUTH_INIT,
	BCM_ASYNC_ENTRY_AUTH_MAC_ADD,
	BCM_ASYNC_ENTRY_AUTH_MAC_CONTROL_GET,
	BCM_ASYNC_ENTRY_AUTH_MAC_CONTROL_SET,
	BCM_ASYNC_ENTRY_AUTH_MAC_DELETE,
	BCM_ASYNC_ENTRY_AUTH_MAC_DELETE_ALL,
	BCM_ASYNC_ENTRY_AUTH_MODE_GET,
	BCM_ASYNC_ENTRY_AUTH_MODE_SET,
	BCM_ASYNC_ENTRY_AUTH_UNAUTH_CALLBACK,
	BCM_ASYNC_ENTRY_BFD_AUTH_SHA1_GET,
	BCM_ASYNC_ENTRY_BFD_AUTH_SHA1_SET,
	BCM_ASYNC_ENTRY_BFD_AUTH_SIMPLE_PASSWORD_GET,
	BCM_ASYNC_ENTRY_BFD_AUTH_SIMPLE_PASSWORD_SET,
	BCM_ASYNC_ENTRY_BFD_DETACH,
	BCM_ASYNC_ENTRY_BFD_DISCARD_STAT_GET,
	BCM_ASYNC_ENTRY_BFD_DISCARD_STAT_SET,
	BCM_ASYNC_ENTRY_BFD_ENDPOINT_CREATE,
	BCM_ASYNC_ENTRY_BFD_ENDPOINT_DESTROY,
	BCM_ASYNC_ENTRY_BFD_ENDPOINT_DESTROY_ALL,
	BCM_ASYNC_ENTRY_BFD_ENDPOINT_GET,
	BCM_ASYNC_ENTRY_BFD_ENDPOINT_POLL,
	BCM_ASYNC_ENTRY_BFD_ENDPOINT_STAT_GET,
	BCM_ASYNC_ENTRY_BFD_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_BFD_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_BFD_INIT,
	BCM_ASYNC_ENTRY_BFD_STATUS_MULTI_GET,
	BCM_ASYNC_ENTRY_BFD_TX_START,
	BCM_ASYNC_ENTRY_BFD_TX_STOP,
	BCM_ASYNC_ENTRY_CLEAR,
	BCM_ASYNC_ENTRY_COLLECTOR_CREATE,
	BCM_ASYNC_ENTRY_COLLECTOR_DESTROY,
	BCM_ASYNC_ENTRY_COLLECTOR_DETACH,
	BCM_ASYNC_ENTRY_COLLECTOR_EXPORT_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_COLLECTOR_EXPORT_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_COLLECTOR_EXPORT_PROFILE_GET,
	BCM_ASYNC_ENTRY_COLLECTOR_EXPORT_PROFILE_IDS_GET_ALL,
	BCM_ASYNC_ENTRY_COLLECTOR_EXPORT_RECORD_REGISTER,
	BCM_ASYNC_ENTRY_COLLECTOR_EXPORT_RECORD_UNREGISTER,
	BCM_ASYNC_ENTRY_COLLECTOR_GET,
	BCM_ASYNC_ENTRY_COLLECTOR_GET_ALL,
	BCM_ASYNC_ENTRY_COLLECTOR_INIT,
	BCM_ASYNC_ENTRY_COSQ_BANDWIDTH_FABRIC_ADJUST_GET,
	BCM_ASYNC_ENTRY_COSQ_BANDWIDTH_FABRIC_ADJUST_SET,
	BCM_ASYNC_ENTRY_COSQ_BST_MULTI_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_BST_MULTI_PROFILE_SET,
	BCM_ASYNC_ENTRY_COSQ_BST_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_BST_PROFILE_SET,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_CLEAR,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_EXTENDED_CLEAR,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_EXTENDED_GET,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_EXTENDED_GET32,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_GET,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_GET32,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_SYNC,
	BCM_ASYNC_ENTRY_COSQ_BUFFER_ID_MULTI_GET,
	BCM_ASYNC_ENTRY_COSQ_BURST_MONITOR_DETACH,
	BCM_ASYNC_ENTRY_COSQ_BURST_MONITOR_DMA_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_BURST_MONITOR_DMA_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_BURST_MONITOR_FLOW_VIEW_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_BURST_MONITOR_FLOW_VIEW_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_BURST_MONITOR_FLOW_VIEW_DATA_CLEAR,
	BCM_ASYNC_ENTRY_COSQ_BURST_MONITOR_FLOW_VIEW_DATA_GET,
	BCM_ASYNC_ENTRY_COSQ_BURST_MONITOR_FLOW_VIEW_STATS_GET,
	BCM_ASYNC_ENTRY_COSQ_BURST_MONITOR_GET,
	BCM_ASYNC_ENTRY_COSQ_BURST_MONITOR_GET_CURRENT_TIME,
	BCM_ASYNC_ENTRY_COSQ_BURST_MONITOR_INIT,
	BCM_ASYNC_ENTRY_COSQ_BURST_MONITOR_SET,
	BCM_ASYNC_ENTRY_COSQ_BURST_MONITOR_VIEW_SUMMARY_GET,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_CREATE,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_DESTROY,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_GET,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_ID_GET,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_MAPPING_CLEAR,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_MAPPING_MULTI_GET,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_MAPPING_MULTI_SET,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_CONGESTION_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_CONGESTION_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_CONTROL_DYNAMIC_GET,
	BCM_ASYNC_ENTRY_COSQ_CONTROL_EXTENDED_GET,
	BCM_ASYNC_ENTRY_COSQ_CONTROL_EXTENDED_SET,
	BCM_ASYNC_ENTRY_COSQ_CONTROL_GET,
	BCM_ASYNC_ENTRY_COSQ_CONTROL_RANGE_GET,
	BCM_ASYNC_ENTRY_COSQ_CONTROL_RANGE_SET,
	BCM_ASYNC_ENTRY_COSQ_CONTROL_SET,
	BCM_ASYNC_ENTRY_COSQ_CPU_COSQ_ENABLE_GET,
	BCM_ASYNC_ENTRY_COSQ_CPU_COSQ_ENABLE_SET,
	BCM_ASYNC_ENTRY_COSQ_DEBUG_STAT_MATCH_GET,
	BCM_ASYNC_ENTRY_COSQ_DEBUG_STAT_MATCH_SET,
	BCM_ASYNC_ENTRY_COSQ_DELAY_TOLERANCE_LEVEL_GET,
	BCM_ASYNC_ENTRY_COSQ_DELAY_TOLERANCE_LEVEL_SET,
	BCM_ASYNC_ENTRY_COSQ_DELAY_TOLERANCE_PRESET_GET,
	BCM_ASYNC_ENTRY_COSQ_DEST_CREDIT_SIZE_GET,
	BCM_ASYNC_ENTRY_COSQ_DEST_CREDIT_SIZE_SET,
	BCM_ASYNC_ENTRY_COSQ_DETACH,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_GET,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_PORT_GET,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_PORT_SET,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_PROFILE_UPDATE,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_SET,
	BCM_ASYNC_ENTRY_COSQ_EBST_CONTROL_GET,
	BCM_ASYNC_ENTRY_COSQ_EBST_CONTROL_SET,
	BCM_ASYNC_ENTRY_COSQ_EBST_DATA_GET,
	BCM_ASYNC_ENTRY_COSQ_EBST_DATA_STAT_INFO_GET,
	BCM_ASYNC_ENTRY_COSQ_EBST_ENABLE_GET,
	BCM_ASYNC_ENTRY_COSQ_EBST_ENABLE_SET,
	BCM_ASYNC_ENTRY_COSQ_EBST_MONITOR_GET,
	BCM_ASYNC_ENTRY_COSQ_EBST_MONITOR_SET,
	BCM_ASYNC_ENTRY_COSQ_EBST_THRESHOLD_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_EBST_THRESHOLD_PROFILE_SET,
	BCM_ASYNC_ENTRY_COSQ_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_COSQ_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_COSQ_FC_PATH_ADD,
	BCM_ASYNC_ENTRY_COSQ_FC_PATH_DELETE,
	BCM_ASYNC_ENTRY_COSQ_FC_PATH_GET,
	BCM_ASYNC_ENTRY_COSQ_GENERIC_CONTROL_GET,
	BCM_ASYNC_ENTRY_COSQ_GENERIC_CONTROL_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ADD,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ATTACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ATTACH_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_CHILD_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_COLOR_SIZE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_COLOR_SIZE_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_CONGESTION_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_CONGESTION_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_CONNECTION_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_CONNECTION_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DELETE,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DESTMOD_ATTACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DESTMOD_DETACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DETACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DISCARD_EXTENDED_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DISCARD_EXTENDED_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DISCARD_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DISCARD_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DYNAMIC_SCHED_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DYNAMIC_SCHED_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_EGRESS_MAP_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_EGRESS_MAP_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_EGRESS_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_EGRESS_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_EGRESS_MULTICAST_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_EGRESS_MULTICAST_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ENABLE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ENABLE_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_FADT_THRESHOLD_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_FADT_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_FLOW_CONTROL_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_FLOW_CONTROL_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_HANDLE_CORE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_HANDLE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_INFO_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_MULTIPATH_ADD,
	BCM_ASYNC_ENTRY_COSQ_GPORT_MULTIPATH_DELETE,
	BCM_ASYNC_ENTRY_COSQ_GPORT_MULTIPATH_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_PARENT_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_PKT_SIZE_ADJUST_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_PKT_SIZE_ADJUST_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_PON_LINK_SLA_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_PON_LINK_SLA_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_QUEUE_ATTACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_QUEUE_ATTACH_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_QUEUE_DETACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_QUEUE_OFFSET_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_QUEUE_OFFSET_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_RATE_CLASS_CREATE,
	BCM_ASYNC_ENTRY_COSQ_GPORT_REATTACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_REPORT_THRESHOLD_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_REPORT_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SCHED_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SCHED_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SCHED_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SCHED_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SIZE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SIZE_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_ENABLE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STATIC_THRESHOLD_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STATIC_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STATISTIC_MULTI_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STATISTIC_MULTI_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_THRESHOLD_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_TRAVERSE,
	BCM_ASYNC_ENTRY_COSQ_GPORT_TRAVERSE_BY_PORT,
	BCM_ASYNC_ENTRY_COSQ_GPORT_VSQ_ADD,
	BCM_ASYNC_ENTRY_COSQ_GPORT_VSQ_CREATE,
	BCM_ASYNC_ENTRY_COSQ_GPORT_VSQ_DELETE,
	BCM_ASYNC_ENTRY_COSQ_GPORT_VSQ_DELETE_ALL,
	BCM_ASYNC_ENTRY_COSQ_GPORT_VSQ_DESTROY,
	BCM_ASYNC_ENTRY_COSQ_GPORT_VSQ_GET,
	BCM_ASYNC_ENTRY_COSQ_HDRM_POOL_LIMIT_SET,
	BCM_ASYNC_ENTRY_COSQ_ICGM_RESOURCE_STAT_GET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_CONTROL_FRAME_GET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_CONTROL_FRAME_SET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_CUSTOM_ETHER_TYPE_GET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_CUSTOM_ETHER_TYPE_SET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_DEFAULT_PRIORITY_GET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_DEFAULT_PRIORITY_SET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_ENABLE_GET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_ENABLE_SET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_FLEX_KEY_CONSTRUCT_GET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_FLEX_KEY_CONSTRUCT_SET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_FLEX_KEY_ENTRY_GET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_FLEX_KEY_ENTRY_SET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_MAP_GET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_MAP_SET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_MPLS_SPECIAL_LABEL_GET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_MPLS_SPECIAL_LABEL_SET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_THRESHOLD_GET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_PORT_DROP_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_COSQ_INGRESS_QUEUE_BUNDLE_GPORT_ADD,
	BCM_ASYNC_ENTRY_COSQ_INIT,
	BCM_ASYNC_ENTRY_COSQ_INST_CONGESTION_INFO_GET,
	BCM_ASYNC_ENTRY_COSQ_LATENCY_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_COSQ_LATENCY_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_COSQ_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_MAX_LATENCY_PKTS_GET,
	BCM_ASYNC_ENTRY_COSQ_MIRROR_ON_DROP_GROUP_GET,
	BCM_ASYNC_ENTRY_COSQ_MIRROR_ON_DROP_GROUP_SET,
	BCM_ASYNC_ENTRY_COSQ_MOD_CONTROL_GET,
	BCM_ASYNC_ENTRY_COSQ_MOD_CONTROL_SET,
	BCM_ASYNC_ENTRY_COSQ_MOD_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_COSQ_MOD_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_COSQ_MOD_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_MOD_PROFILE_SET,
	BCM_ASYNC_ENTRY_COSQ_MOD_STAT_GET,
	BCM_ASYNC_ENTRY_COSQ_MOD_STAT_SET,
	BCM_ASYNC_ENTRY_COSQ_PFC_CLASS_CONFIG_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_PFC_CLASS_CONFIG_PROFILE_SET,
	BCM_ASYNC_ENTRY_COSQ_PFC_CLASS_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_PFC_CLASS_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_PFC_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_PFC_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_PFC_DD_RECOVERY_MODE_GET,
	BCM_ASYNC_ENTRY_COSQ_PFC_DD_RECOVERY_MODE_SET,
	BCM_ASYNC_ENTRY_COSQ_PFC_DEADLOCK_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_PFC_DEADLOCK_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_PFC_DEADLOCK_CONTROL_GET,
	BCM_ASYNC_ENTRY_COSQ_PFC_DEADLOCK_CONTROL_SET,
	BCM_ASYNC_ENTRY_COSQ_PFC_DEADLOCK_INFO_GET,
	BCM_ASYNC_ENTRY_COSQ_PFC_DEADLOCK_QUEUE_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_PFC_DEADLOCK_QUEUE_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_PFC_DEADLOCK_QUEUE_STATUS_GET,
	BCM_ASYNC_ENTRY_COSQ_PFC_DEADLOCK_RECOVERY_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_COSQ_PFC_DEADLOCK_RECOVERY_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_COSQ_PFC_DEADLOCK_RECOVERY_EXIT,
	BCM_ASYNC_ENTRY_COSQ_PFC_DEADLOCK_RECOVERY_START,
	BCM_ASYNC_ENTRY_COSQ_PKT_SIZE_ADJUST_DELTA_MAP_GET,
	BCM_ASYNC_ENTRY_COSQ_PKT_SIZE_ADJUST_DELTA_MAP_SET,
	BCM_ASYNC_ENTRY_COSQ_PORT_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_COSQ_PORT_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_COSQ_PORT_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_PORT_MAPPING_MULTI_GET,
	BCM_ASYNC_ENTRY_COSQ_PORT_MAPPING_MULTI_SET,
	BCM_ASYNC_ENTRY_COSQ_PORT_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_PORT_OPTIMIZED_PFC_GROUP_NUM_GET,
	BCM_ASYNC_ENTRY_COSQ_PORT_PRIGRP_HDRM_SET,
	BCM_ASYNC_ENTRY_COSQ_PORT_PRIORITY_GROUP_PROPERTY_GET,
	BCM_ASYNC_ENTRY_COSQ_PORT_PRIORITY_GROUP_PROPERTY_SET,
	BCM_ASYNC_ENTRY_COSQ_PORT_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_PORT_PROFILE_SET,
	BCM_ASYNC_ENTRY_COSQ_PORT_SCHED_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_PORT_SCHED_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_PORT_SCHED_GET,
	BCM_ASYNC_ENTRY_COSQ_PORT_SCHED_SET,
	BCM_ASYNC_ENTRY_COSQ_PRIORITY_GET,
	BCM_ASYNC_ENTRY_COSQ_PRIORITY_GROUP_MAPPING_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_PRIORITY_GROUP_MAPPING_PROFILE_SET,
	BCM_ASYNC_ENTRY_COSQ_PRIORITY_GROUP_PFC_PRIORITY_MAPPING_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_PRIORITY_GROUP_PFC_PRIORITY_MAPPING_PROFILE_SET,
	BCM_ASYNC_ENTRY_COSQ_PRIORITY_MAPPING_GET_ALL,
	BCM_ASYNC_ENTRY_COSQ_PRIORITY_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_PRIORITY_PROFILE_SET,
	BCM_ASYNC_ENTRY_COSQ_PRIORITY_SET,
	BCM_ASYNC_ENTRY_COSQ_PROFILE_INFO_INUSE_GET,
	BCM_ASYNC_ENTRY_COSQ_PROFILE_INFO_PORTLIST_GET,
	BCM_ASYNC_ENTRY_COSQ_PROFILE_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_PROFILE_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_PROFILE_PROPERTY_DYNAMIC_GET,
	BCM_ASYNC_ENTRY_COSQ_QCN_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_QCN_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_RESOURCE_ALLOCATION_GET,
	BCM_ASYNC_ENTRY_COSQ_RESOURCE_ALLOCATION_SET,
	BCM_ASYNC_ENTRY_COSQ_SAFC_CLASS_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_SAFC_CLASS_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_SCHED_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_SCHED_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_SCHED_GET,
	BCM_ASYNC_ENTRY_COSQ_SCHED_SET,
	BCM_ASYNC_ENTRY_COSQ_SCHED_WEIGHT_MAX_GET,
	BCM_ASYNC_ENTRY_COSQ_SCHEDQ_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_SCHEDQ_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_SCHEDULER_GPORT_ADD,
	BCM_ASYNC_ENTRY_COSQ_SCHEDULER_GPORT_GET,
	BCM_ASYNC_ENTRY_COSQ_SERVICE_POOL_GET,
	BCM_ASYNC_ENTRY_COSQ_SERVICE_POOL_OVERRIDE_GET,
	BCM_ASYNC_ENTRY_COSQ_SERVICE_POOL_OVERRIDE_SET,
	BCM_ASYNC_ENTRY_COSQ_SERVICE_POOL_SET,
	BCM_ASYNC_ENTRY_COSQ_SLOW_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_SLOW_PROFILE_SET,
	BCM_ASYNC_ENTRY_COSQ_SRC_VSQS_GPORT_ADD,
	BCM_ASYNC_ENTRY_COSQ_SRC_VSQS_GPORT_GET,
	BCM_ASYNC_ENTRY_COSQ_STAT_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_STAT_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_STAT_GET,
	BCM_ASYNC_ENTRY_COSQ_STAT_GET32,
	BCM_ASYNC_ENTRY_COSQ_STAT_INFO_GET,
	BCM_ASYNC_ENTRY_COSQ_STAT_INFO_SET,
	BCM_ASYNC_ENTRY_COSQ_STAT_OBJ_MAP_GET,
	BCM_ASYNC_ENTRY_COSQ_STAT_OBJ_MAP_SET,
	BCM_ASYNC_ENTRY_COSQ_STAT_SET,
	BCM_ASYNC_ENTRY_COSQ_STAT_SET32,
	BCM_ASYNC_ENTRY_COSQ_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_COSQ_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_COSQ_STAT_SYNC_MULTI_GET,
	BCM_ASYNC_ENTRY_COSQ_STAT_SYNC_MULTI_GET32,
	BCM_ASYNC_ENTRY_COSQ_SUBPORT_CONGESTION_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_SUBPORT_CONGESTION_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_SUBPORT_FLOW_CONTROL_GET,
	BCM_ASYNC_ENTRY_COSQ_SUBPORT_FLOW_CONTROL_SET,
	BCM_ASYNC_ENTRY_COSQ_SUBPORT_PFC_CLASS_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_SUBPORT_PFC_CLASS_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_SUBSCRIBER_MAP_ADD,
	BCM_ASYNC_ENTRY_COSQ_SUBSCRIBER_MAP_DELETE,
	BCM_ASYNC_ENTRY_COSQ_SUBSCRIBER_MAP_DELETE_ALL,
	BCM_ASYNC_ENTRY_COSQ_SUBSCRIBER_MAP_GET,
	BCM_ASYNC_ENTRY_COSQ_SUBSCRIBER_TRAVERSE,
	BCM_ASYNC_ENTRY_COSQ_SYSPORT_INGRESS_QUEUE_MAP_GET,
	BCM_ASYNC_ENTRY_COSQ_SYSPORT_INGRESS_QUEUE_MAP_SET,
	BCM_ASYNC_ENTRY_COSQ_TAS_CONTROL_GET,
	BCM_ASYNC_ENTRY_COSQ_TAS_CONTROL_SET,
	BCM_ASYNC_ENTRY_COSQ_TAS_PROFILE_COMMIT,
	BCM_ASYNC_ENTRY_COSQ_TAS_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_COSQ_TAS_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_COSQ_TAS_PROFILE_DESTROY_ALL,
	BCM_ASYNC_ENTRY_COSQ_TAS_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_TAS_PROFILE_SET,
	BCM_ASYNC_ENTRY_COSQ_TAS_PROFILE_STATUS_GET,
	BCM_ASYNC_ENTRY_COSQ_TAS_PROFILE_TRAVERSE,
	BCM_ASYNC_ENTRY_COSQ_TAS_STATUS_GET,
	BCM_ASYNC_ENTRY_COSQ_TCB_BUFFER_MULTI_GET,
	BCM_ASYNC_ENTRY_COSQ_TCB_CB_REGISTER,
	BCM_ASYNC_ENTRY_COSQ_TCB_CB_UNREGISTER,
	BCM_ASYNC_ENTRY_COSQ_TCB_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_TCB_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_TCB_CONTROL_GET,
	BCM_ASYNC_ENTRY_COSQ_TCB_CONTROL_SET,
	BCM_ASYNC_ENTRY_COSQ_TCB_EVENT_MULTI_GET,
	BCM_ASYNC_ENTRY_COSQ_TCB_GPORT_THRESHOLD_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_TCB_GPORT_THRESHOLD_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_TCB_THRESHOLD_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_COSQ_TCB_THRESHOLD_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_COSQ_TCB_THRESHOLD_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_VOQ_CONNECTOR_GPORT_ADD,
	BCM_ASYNC_ENTRY_COSQ_VOQ_CONNECTOR_GPORT_GET,
	BCM_ASYNC_ENTRY_CPRI_DECAP_PRESENTATION_TIME_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_DECAP_PRESENTATION_TIME_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_DETACH,
	BCM_ASYNC_ENTRY_CPRI_ENCAP_CONTROL_QUEUE_TAG_TO_FLOW_ID_MAP_SET,
	BCM_ASYNC_ENTRY_CPRI_ENCAP_PRESENTATION_TIME_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_ENCAP_PRESENTATION_TIME_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_INIT,
	BCM_ASYNC_ENTRY_CPRI_PORT_1588_TIMESTAMP_CAPTURE_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_1588_TIMESTAMP_CAPTURE_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_1588_TIMESTAMP_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_1588_TIMESTAMP_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_1588_TIMESTAMP_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_1588_TIMESTAMP_TS_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_1588_TIMESTAMP_TS_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_AGNOSTIC_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_AGNOSTIC_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_COMPRESSION_LOOKUP_TABLE_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_COMPRESSION_LOOKUP_TABLE_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_COMPRESSION_SATURATION_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_COMPRESSION_SATURATION_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_CW_FAST_ETH_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_CW_FAST_ETH_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_CW_SLOW_HDLC_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_CW_SLOW_HDLC_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DEBUG_CLEAR,
	BCM_ASYNC_ENTRY_CPRI_PORT_DEBUG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DEBUG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_ETHERTYPE_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_ETHERTYPE_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_FLOW_CONFIG_CLEAR,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_FLOW_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_FLOW_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_FLOW_TO_QUEUE_MAPPING_CLEAR,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_FLOW_TO_QUEUE_MAPPING_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_FLOW_TO_QUEUE_MAPPING_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_QUEUE_FLOW_CONTROL_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_QUEUE_FLOW_CONTROL_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_QUEUE_TO_ORDERING_INFO_INDEX_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_QUEUE_TO_ORDERING_INFO_INDEX_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_ROE_ORDERING_INFO_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_ROE_ORDERING_INFO_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_ROE_ORDERING_SEQUENCE_OFFSET_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_ROE_ORDERING_SEQUENCE_OFFSET_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_SECONDARY_KEY_TO_QUEUE_MAPPING_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECAP_SECONDARY_KEY_TO_QUEUE_MAPPING_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECOMPRESSION_LOOKUP_TABLE_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECOMPRESSION_LOOKUP_TABLE_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECOMPRESSION_SATURATION_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_DECOMPRESSION_SATURATION_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_ENCAP_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_ENCAP_ROE_ENTRY_MACDA_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_ENCAP_ROE_ENTRY_MACDA_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_ENCAP_ROE_ENTRY_MACSA_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_ENCAP_ROE_ENTRY_MACSA_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_ENCAP_ROE_ENTRY_VLAN_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_ENCAP_ROE_ENTRY_VLAN_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_ENCAP_ROE_ORDERING_INFO_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_ENCAP_ROE_ORDERING_INFO_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_ENCAP_ROE_ORDERING_SEQUENCE_OFFSET_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_ENCAP_ROE_ORDERING_SEQUENCE_OFFSET_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_ENCAP_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_ENCAP_VLAN_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_ENCAP_VLAN_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_FEC_AUX_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_FEC_AUX_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_FEC_ENABLE_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_FEC_ENABLE_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_FEC_STAT_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_FEC_TIMESTAMP_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_FEC_TIMESTAMP_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_FRAME_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_INTERRUPT_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_CPRI_PORT_INTERRUPT_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_CPRI_PORT_INTERRUPT_ENABLE_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_INTERRUPT_ENABLE_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_AGNOSTIC_MODE_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_AGNOSTIC_MODE_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_CM_FAST_ETH_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_DBM_ENTRY_CLEAR,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_DBM_ENTRY_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_DBM_ENTRY_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_RX_BFN_SYNC_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_RX_CONTROL_FLOW_ADD,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_RX_CONTROL_FLOW_DELETE,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_RX_CURRENT_FRAME_SYNC_INFO_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_RX_FLOW_ADD,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_RX_FLOW_DELETE,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_RX_FRAME_CONFIG_DEBUG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_RX_FRAME_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_RX_FRAME_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_RX_FSM_CONTROL_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_RX_FSM_CONTROL_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_RX_FSM_STATE_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_RX_OVERRIDE_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_SECONDARY_DBM_ENTRY_CLEAR,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_SECONDARY_DBM_ENTRY_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_SECONDARY_DBM_ENTRY_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_SYNC_PROFILE_ENTRY_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_SYNC_PROFILE_ENTRY_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_CM_ETH_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_CM_HDR_CONFIG_ENTRY_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_CM_HDR_LKUP_ENTRY_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_CM_RAW_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_CM_TUNNEL_CRC_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_CONTROL_FLOW_ADD,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_CONTROL_FLOW_GROUP_MEMBER_ADD,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_CONTROL_FLOW_GROUP_MEMBER_DELETE,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_CURRENT_FRAME_SYNC_INFO_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_FLOW_ADD,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_FLOW_DELETE,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_FRAME_CONFIG_DEBUG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_FRAME_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_FRAME_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_FSM_CONTROL_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_FSM_CONTROL_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_FSM_STATE_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_MODULO_RULE_ENTRY_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_MODULO_RULE_ENTRY_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_OVERRIDE_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_POSITION_ENTRY_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RSVD4_TX_POSITION_ENTRY_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_AXC_FRAME_ADD,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_AXC_FRAME_DELETE,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_AXC_FRAME_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_AXC_FRAME_GET_ALL,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_GCW_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_GCW_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_GCW_WORD_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_L1_INBAND_INFO_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_L1_SIGNAL_PROTECTION_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_L1_SIGNAL_PROTECTION_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_RSVD5_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_RSVD5_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_SYNC_INFO_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_VSD_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_VSD_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_VSD_CTRL_FLOW_ADD,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_VSD_CTRL_FLOW_DELETE,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_VSD_CTRL_FLOW_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_VSD_RAW_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_CW_VSD_RAW_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_PIPELINE_CLEAR,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_SPEED_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_SPEED_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_TAG_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_TAG_ENTRY_ADD,
	BCM_ASYNC_ENTRY_CPRI_PORT_RX_TAG_ENTRY_DELETE,
	BCM_ASYNC_ENTRY_CPRI_PORT_STAT_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TUNNEL_MODE_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TUNNEL_MODE_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_AXC_FRAME_ADD,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_AXC_FRAME_DELETE,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_AXC_FRAME_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_AXC_FRAME_GET_ALL,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_GCW_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_GCW_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_GCW_FILTER_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_GCW_FILTER_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_GCW_WORD_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_L1_INBAND_INFO_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_L1_INBAND_INFO_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_RSVD5_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_RSVD5_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_SYNC_INFO_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_SYNC_INFO_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_VSD_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_VSD_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_VSD_CTRL_FLOW_ADD,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_VSD_CTRL_FLOW_DELETE,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_VSD_CTRL_FLOW_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_VSD_RAW_FILTER_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_VSD_RAW_FILTER_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_VSD_RAW_FLOW_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_CW_VSD_RAW_FLOW_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_ENABLE_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_ENABLE_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_FRAME_TGEN_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_PIPELINE_CLEAR,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_SPEED_GET,
	BCM_ASYNC_ENTRY_CPRI_PORT_TX_SPEED_SET,
	BCM_ASYNC_ENTRY_CPRI_RSVD1_MSG_GET,
	BCM_ASYNC_ENTRY_CPRI_SPEED_SCAN_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_CPRI_SPEED_SCAN_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_CPRI_SPEED_SCAN_CONFIG_GET,
	BCM_ASYNC_ENTRY_CPRI_SPEED_SCAN_CONFIG_SET,
	BCM_ASYNC_ENTRY_CPRI_SPEED_SCAN_INIT,
	BCM_ASYNC_ENTRY_CPRI_SPEED_SCAN_PORT_CONFIG_ADD,
	BCM_ASYNC_ENTRY_CPRI_SPEED_SCAN_PORT_CONFIG_DELETE,
	BCM_ASYNC_ENTRY_CPRI_SPEED_SCAN_PORT_CONFIG_GET,
	BCM_ASYNC_ENTRY_CUSTOM_PORT_GET,
	BCM_ASYNC_ENTRY_CUSTOM_PORT_SET,
	BCM_ASYNC_ENTRY_CUSTOM_REGISTER,
	BCM_ASYNC_ENTRY_CUSTOM_UNREGISTER,
	BCM_ASYNC_ENTRY_DETACH,
	BCM_ASYNC_ENTRY_DETACH_LATE_TXRX,
	BCM_ASYNC_ENTRY_DETACH_RETRY_GET,
	BCM_ASYNC_ENTRY_DETACH_RETRY_SET,
	BCM_ASYNC_ENTRY_DEVICE_MEMBER_GET,
	BCM_ASYNC_ENTRY_EAV_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_EAV_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_EAV_CONTROL_GET,
	BCM_ASYNC_ENTRY_EAV_CONTROL_SET,
	BCM_ASYNC_ENTRY_EAV_INIT,
	BCM_ASYNC_ENTRY_EAV_LINK_STATUS_GET,
	BCM_ASYNC_ENTRY_EAV_LINK_STATUS_SET,
	BCM_ASYNC_ENTRY_EAV_PCP_MAPPING_GET,
	BCM_ASYNC_ENTRY_EAV_PCP_MAPPING_SET,
	BCM_ASYNC_ENTRY_EAV_PORT_ENABLE_GET,
	BCM_ASYNC_ENTRY_EAV_PORT_ENABLE_SET,
	BCM_ASYNC_ENTRY_EAV_SRP_MAC_ETHERTYPE_GET,
	BCM_ASYNC_ENTRY_EAV_SRP_MAC_ETHERTYPE_SET,
	BCM_ASYNC_ENTRY_EAV_TIMESTAMP_GET,
	BCM_ASYNC_ENTRY_EAV_TIMESYNC_MAC_GET,
	BCM_ASYNC_ENTRY_EAV_TIMESYNC_MAC_SET,
	BCM_ASYNC_ENTRY_ECN_MAP_CREATE,
	BCM_ASYNC_ENTRY_ECN_MAP_DESTROY,
	BCM_ASYNC_ENTRY_ECN_MAP_GET,
	BCM_ASYNC_ENTRY_ECN_MAP_MODE_GET,
	BCM_ASYNC_ENTRY_ECN_MAP_MODE_SET,
	BCM_ASYNC_ENTRY_ECN_MAP_SET,
	BCM_ASYNC_ENTRY_ECN_PORT_MAP_GET,
	BCM_ASYNC_ENTRY_ECN_PORT_MAP_SET,
	BCM_ASYNC_ENTRY_ECN_RESPONSIVE_PROTOCOL_GET,
	BCM_ASYNC_ENTRY_ECN_RESPONSIVE_PROTOCOL_SET,
	BCM_ASYNC_ENTRY_ECN_TRAFFIC_ACTION_CONFIG_GET,
	BCM_ASYNC_ENTRY_ECN_TRAFFIC_ACTION_CONFIG_SET,
	BCM_ASYNC_ENTRY_ECN_TRAFFIC_MAP_GET,
	BCM_ASYNC_ENTRY_ECN_TRAFFIC_MAP_SET,
	BCM_ASYNC_ENTRY_ECN_TYPE_MAP_GET,
	BCM_ASYNC_ENTRY_ECN_TYPE_MAP_SET,
	BCM_ASYNC_ENTRY_ECN_TYPE_MAP_TRAVERSE,
	BCM_ASYNC_ENTRY_ESMC_QL_SSM_MAP,
	BCM_ASYNC_ENTRY_ESMC_SSM_QL_MAP,
	BCM_ASYNC_ENTRY_ESMC_G781_OPTION_GET,
	BCM_ASYNC_ENTRY_ESMC_G781_OPTION_SET,
	BCM_ASYNC_ENTRY_ESMC_RX_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_ESMC_RX_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_ESMC_TUNNEL_GET,
	BCM_ASYNC_ENTRY_ESMC_TUNNEL_SET,
	BCM_ASYNC_ENTRY_ESMC_TX,
	BCM_ASYNC_ENTRY_EXTENDER_CLEANUP,
	BCM_ASYNC_ENTRY_EXTENDER_EGRESS_ADD,
	BCM_ASYNC_ENTRY_EXTENDER_EGRESS_DELETE,
	BCM_ASYNC_ENTRY_EXTENDER_EGRESS_DELETE_ALL,
	BCM_ASYNC_ENTRY_EXTENDER_EGRESS_GET,
	BCM_ASYNC_ENTRY_EXTENDER_EGRESS_GET_ALL,
	BCM_ASYNC_ENTRY_EXTENDER_EGRESS_SET,
	BCM_ASYNC_ENTRY_EXTENDER_ENCAP_CREATE,
	BCM_ASYNC_ENTRY_EXTENDER_ENCAP_DESTROY,
	BCM_ASYNC_ENTRY_EXTENDER_ENCAP_DESTROY_ALL,
	BCM_ASYNC_ENTRY_EXTENDER_ENCAP_GET,
	BCM_ASYNC_ENTRY_EXTENDER_ENCAP_TRAVERSE,
	BCM_ASYNC_ENTRY_EXTENDER_FORWARD_ADD,
	BCM_ASYNC_ENTRY_EXTENDER_FORWARD_DELETE,
	BCM_ASYNC_ENTRY_EXTENDER_FORWARD_DELETE_ALL,
	BCM_ASYNC_ENTRY_EXTENDER_FORWARD_GET,
	BCM_ASYNC_ENTRY_EXTENDER_FORWARD_TRAVERSE,
	BCM_ASYNC_ENTRY_EXTENDER_INIT,
	BCM_ASYNC_ENTRY_EXTENDER_PORT_ADD,
	BCM_ASYNC_ENTRY_EXTENDER_PORT_DELETE,
	BCM_ASYNC_ENTRY_EXTENDER_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_EXTENDER_PORT_GET,
	BCM_ASYNC_ENTRY_EXTENDER_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_ACTION_CREATE,
	BCM_ASYNC_ENTRY_FABRIC_ACTION_DESTROY,
	BCM_ASYNC_ENTRY_FABRIC_ACTION_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FABRIC_ACTION_GET,
	BCM_ASYNC_ENTRY_FABRIC_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_BANDWIDTH_CORE_PROFILE_GET,
	BCM_ASYNC_ENTRY_FABRIC_BANDWIDTH_CORE_PROFILE_SET,
	BCM_ASYNC_ENTRY_FABRIC_BANDWIDTH_PROFILE_GET,
	BCM_ASYNC_ENTRY_FABRIC_BANDWIDTH_PROFILE_SET,
	BCM_ASYNC_ENTRY_FABRIC_CGM_CONTROL_GET,
	BCM_ASYNC_ENTRY_FABRIC_CGM_CONTROL_SET,
	BCM_ASYNC_ENTRY_FABRIC_CONFIG_DISCARD_GET,
	BCM_ASYNC_ENTRY_FABRIC_CONFIG_DISCARD_SET,
	BCM_ASYNC_ENTRY_FABRIC_CONTROL_GET,
	BCM_ASYNC_ENTRY_FABRIC_CONTROL_SET,
	BCM_ASYNC_ENTRY_FABRIC_DESTINATION_LINK_MIN_GET,
	BCM_ASYNC_ENTRY_FABRIC_DESTINATION_LINK_MIN_SET,
	BCM_ASYNC_ENTRY_FABRIC_INIT,
	BCM_ASYNC_ENTRY_FABRIC_LINK_CONNECTIVITY_STATUS_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_CONNECTIVITY_STATUS_SINGLE_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_CONTROL_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_CONTROL_SET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_PROFILE_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_PROFILE_SET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_REMOTE_PIPE_MAPPING_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_REMOTE_PIPE_MAPPING_SET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_STATUS_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLD_ADD,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLD_DELETE,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLDS_ATTACH,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLDS_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLDS_PIPE_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLDS_PIPE_SET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLDS_RETRIEVE,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLDS_SET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_TOPOLOGY_CONFIG_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_TOPOLOGY_CONFIG_SET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_TOPOLOGY_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_TOPOLOGY_SET,
	BCM_ASYNC_ENTRY_FABRIC_MODID_GROUP_FIND,
	BCM_ASYNC_ENTRY_FABRIC_MODID_GROUP_GET,
	BCM_ASYNC_ENTRY_FABRIC_MODID_GROUP_SET,
	BCM_ASYNC_ENTRY_FABRIC_MODID_LOCAL_MAPPING_GET,
	BCM_ASYNC_ENTRY_FABRIC_MODID_LOCAL_MAPPING_SET,
	BCM_ASYNC_ENTRY_FABRIC_MODULE_CONTROL_GET,
	BCM_ASYNC_ENTRY_FABRIC_MODULE_CONTROL_SET,
	BCM_ASYNC_ENTRY_FABRIC_MULTICAST_GET,
	BCM_ASYNC_ENTRY_FABRIC_MULTICAST_LOCAL_ROUTE_GET,
	BCM_ASYNC_ENTRY_FABRIC_MULTICAST_LOCAL_ROUTE_SET,
	BCM_ASYNC_ENTRY_FABRIC_MULTICAST_MULTI_GET,
	BCM_ASYNC_ENTRY_FABRIC_MULTICAST_MULTI_SET,
	BCM_ASYNC_ENTRY_FABRIC_MULTICAST_SET,
	BCM_ASYNC_ENTRY_FABRIC_PCP_DEST_MODE_CONFIG_GET,
	BCM_ASYNC_ENTRY_FABRIC_PCP_DEST_MODE_CONFIG_SET,
	BCM_ASYNC_ENTRY_FABRIC_PORT_CREATE,
	BCM_ASYNC_ENTRY_FABRIC_PORT_DESTROY,
	BCM_ASYNC_ENTRY_FABRIC_PORT_GET,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_ACTION_CREATE,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_ACTION_DESTROY,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_ACTION_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_ACTION_GET,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_CREATE,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_DESTROY,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_GET,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_PRIORITY_GET,
	BCM_ASYNC_ENTRY_FABRIC_PRIORITY_SET,
	BCM_ASYNC_ENTRY_FABRIC_PROFILE_THRESHOLD_GET,
	BCM_ASYNC_ENTRY_FABRIC_PROFILE_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_CREATE,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_DESTROY,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_ENTRY_GET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_ENTRY_MULTI_GET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_ENTRY_MULTI_SET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_ENTRY_SET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_ENTRY_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_GET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_OFFSET_CREATE,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_OFFSET_DESTROY,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_OFFSET_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_OFFSET_ENTRY_GET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_OFFSET_ENTRY_SET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_OFFSET_ENTRY_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_OFFSET_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_RCI_BIASING_PROBABILITY_GET,
	BCM_ASYNC_ENTRY_FABRIC_RCI_BIASING_PROBABILITY_SET,
	BCM_ASYNC_ENTRY_FABRIC_RCI_CONFIG_GET,
	BCM_ASYNC_ENTRY_FABRIC_RCI_CONFIG_SET,
	BCM_ASYNC_ENTRY_FABRIC_RCI_RESOLUTION_GET,
	BCM_ASYNC_ENTRY_FABRIC_RCI_RESOLUTION_SET,
	BCM_ASYNC_ENTRY_FABRIC_REACHABILITY_STATUS_GET,
	BCM_ASYNC_ENTRY_FABRIC_ROUTE_RX,
	BCM_ASYNC_ENTRY_FABRIC_ROUTE_TX,
	BCM_ASYNC_ENTRY_FABRIC_STAT_GET,
	BCM_ASYNC_ENTRY_FABRIC_STATIC_REPLICATION_SET,
	BCM_ASYNC_ENTRY_FABRIC_TDM_DIRECT_ROUTING_GET,
	BCM_ASYNC_ENTRY_FABRIC_TDM_DIRECT_ROUTING_SET,
	BCM_ASYNC_ENTRY_FABRIC_TDM_EDITING_GET,
	BCM_ASYNC_ENTRY_FABRIC_TDM_EDITING_SET,
	BCM_ASYNC_ENTRY_FAILOVER_CLEANUP,
	BCM_ASYNC_ENTRY_FAILOVER_CREATE,
	BCM_ASYNC_ENTRY_FAILOVER_DESTROY,
	BCM_ASYNC_ENTRY_FAILOVER_EGRESS_CLEAR,
	BCM_ASYNC_ENTRY_FAILOVER_EGRESS_GET,
	BCM_ASYNC_ENTRY_FAILOVER_EGRESS_PROTECTION_GET,
	BCM_ASYNC_ENTRY_FAILOVER_EGRESS_SET,
	BCM_ASYNC_ENTRY_FAILOVER_EGRESS_STATUS_GET,
	BCM_ASYNC_ENTRY_FAILOVER_EGRESS_STATUS_SET,
	BCM_ASYNC_ENTRY_FAILOVER_GET,
	BCM_ASYNC_ENTRY_FAILOVER_INIT,
	BCM_ASYNC_ENTRY_FAILOVER_MULTI_LEVEL_ATTACH,
	BCM_ASYNC_ENTRY_FAILOVER_RING_CONFIG_GET,
	BCM_ASYNC_ENTRY_FAILOVER_RING_CONFIG_SET,
	BCM_ASYNC_ENTRY_FAILOVER_SET,
	BCM_ASYNC_ENTRY_FAILOVER_STATUS_GET,
	BCM_ASYNC_ENTRY_FAILOVER_STATUS_SET,
	BCM_ASYNC_ENTRY_FCMAP_DIAG_GET,
	BCM_ASYNC_ENTRY_FCMAP_EVENT_ENABLE_GET,
	BCM_ASYNC_ENTRY_FCMAP_EVENT_ENABLE_SET,
	BCM_ASYNC_ENTRY_FCMAP_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_FCMAP_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_FCMAP_LINKFAULT_TRIGGER_RC_GET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_ABILITY_ADVERT_GET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_ABILITY_ADVERT_SET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_CONFIG_GET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_CONFIG_SELECTIVE_GET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_CONFIG_SELECTIVE_SET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_CONFIG_SET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_ENABLE,
	BCM_ASYNC_ENTRY_FCMAP_PORT_LINK_RESET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_SHUTDOWN,
	BCM_ASYNC_ENTRY_FCMAP_PORT_SPEED_SET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_FCMAP_STAT_CLEAR,
	BCM_ASYNC_ENTRY_FCMAP_STAT_GET,
	BCM_ASYNC_ENTRY_FCMAP_STAT_GET32,
	BCM_ASYNC_ENTRY_FCMAP_VLAN_MAP_ADD,
	BCM_ASYNC_ENTRY_FCMAP_VLAN_MAP_DELETE,
	BCM_ASYNC_ENTRY_FCMAP_VLAN_MAP_GET,
	BCM_ASYNC_ENTRY_FCOE_CLEANUP,
	BCM_ASYNC_ENTRY_FCOE_CONTROL_VSAN_GET,
	BCM_ASYNC_ENTRY_FCOE_CONTROL_VSAN_SET,
	BCM_ASYNC_ENTRY_FCOE_ENABLE_SET,
	BCM_ASYNC_ENTRY_FCOE_FC_HEADER_TYPE_GET,
	BCM_ASYNC_ENTRY_FCOE_FC_HEADER_TYPE_SET,
	BCM_ASYNC_ENTRY_FCOE_INIT,
	BCM_ASYNC_ENTRY_FCOE_INTF_CONFIG_GET,
	BCM_ASYNC_ENTRY_FCOE_INTF_CONFIG_SET,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_ADD,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_DELETE,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_DELETE_ALL,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_DELETE_BY_INTERFACE,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_DELETE_BY_PREFIX,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_FIND,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_STAT_DETACH,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_TRAVERSE,
	BCM_ASYNC_ENTRY_FCOE_VSAN_CREATE,
	BCM_ASYNC_ENTRY_FCOE_VSAN_DESTROY,
	BCM_ASYNC_ENTRY_FCOE_VSAN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FCOE_VSAN_GET,
	BCM_ASYNC_ENTRY_FCOE_VSAN_SET,
	BCM_ASYNC_ENTRY_FCOE_VSAN_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FCOE_VSAN_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_FCOE_VSAN_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_FCOE_VSAN_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_FCOE_VSAN_STAT_DETACH,
	BCM_ASYNC_ENTRY_FCOE_VSAN_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FCOE_VSAN_TRANSLATE_ACTION_ADD,
	BCM_ASYNC_ENTRY_FCOE_VSAN_TRANSLATE_ACTION_DELETE,
	BCM_ASYNC_ENTRY_FCOE_VSAN_TRAVERSE,
	BCM_ASYNC_ENTRY_FCOE_ZONE_ADD,
	BCM_ASYNC_ENTRY_FCOE_ZONE_DELETE,
	BCM_ASYNC_ENTRY_FCOE_ZONE_DELETE_ALL,
	BCM_ASYNC_ENTRY_FCOE_ZONE_DELETE_BY_DID,
	BCM_ASYNC_ENTRY_FCOE_ZONE_DELETE_BY_SID,
	BCM_ASYNC_ENTRY_FCOE_ZONE_DELETE_BY_VSAN,
	BCM_ASYNC_ENTRY_FCOE_ZONE_GET,
	BCM_ASYNC_ENTRY_FCOE_ZONE_TRAVERSE,
	BCM_ASYNC_ENTRY_FIELD_ACE_ENTRY_ADD,
	BCM_ASYNC_ENTRY_FIELD_ACE_ENTRY_DELETE,
	BCM_ASYNC_ENTRY_FIELD_ACE_ENTRY_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_ACE_FORMAT_ADD,
	BCM_ASYNC_ENTRY_FIELD_ACE_FORMAT_DELETE,
	BCM_ASYNC_ENTRY_FIELD_ACE_FORMAT_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_ADD,
	BCM_ASYNC_ENTRY_FIELD_ACTION_CLASS_ADD,
	BCM_ASYNC_ENTRY_FIELD_ACTION_CLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_CONFIG_ADD,
	BCM_ASYNC_ENTRY_FIELD_ACTION_CONFIG_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_CONFIG_INFO_ADD,
	BCM_ASYNC_ENTRY_FIELD_ACTION_CONFIG_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_CONT_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_COPYTOCPU_CONFIG_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_COPYTOCPU_CONFIG_SET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_CREATE,
	BCM_ASYNC_ENTRY_FIELD_ACTION_DELETE,
	BCM_ASYNC_ENTRY_FIELD_ACTION_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_ACTION_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_MAC_ADD,
	BCM_ASYNC_ENTRY_FIELD_ACTION_MAC_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_PORTS_ADD,
	BCM_ASYNC_ENTRY_FIELD_ACTION_PORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_REDIRECT_CONFIG_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_REDIRECT_CONFIG_SET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_REMOVE,
	BCM_ASYNC_ENTRY_FIELD_ACTION_REMOVE_ALL,
	BCM_ASYNC_ENTRY_FIELD_ACTION_VALUE_MAP,
	BCM_ASYNC_ENTRY_FIELD_ACTION_VLAN_ACTIONS_ADD,
	BCM_ASYNC_ENTRY_FIELD_ACTION_VLAN_ACTIONS_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_WIDTH_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_WIDTH_SET,
	BCM_ASYNC_ENTRY_FIELD_CLASS_MAP_GET,
	BCM_ASYNC_ENTRY_FIELD_CLASS_MAP_SET,
	BCM_ASYNC_ENTRY_FIELD_CLASS_SIZE_GET,
	BCM_ASYNC_ENTRY_FIELD_COMPARE_OPERAND_OFFSET_GET,
	BCM_ASYNC_ENTRY_FIELD_COMPRESSION_DIRECT_MAPPED_GET,
	BCM_ASYNC_ENTRY_FIELD_COMPRESSION_DIRECT_MAPPED_SET,
	BCM_ASYNC_ENTRY_FIELD_COMPRESSION_INDEX_MAPPED_GET,
	BCM_ASYNC_ENTRY_FIELD_COMPRESSION_INDEX_MAPPED_SET,
	BCM_ASYNC_ENTRY_FIELD_CONTEXT_COMPARE_CREATE,
	BCM_ASYNC_ENTRY_FIELD_CONTEXT_COMPARE_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_CONTEXT_COMPARE_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_CONTEXT_CREATE,
	BCM_ASYNC_ENTRY_FIELD_CONTEXT_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_CONTEXT_HASH_CREATE,
	BCM_ASYNC_ENTRY_FIELD_CONTEXT_HASH_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_CONTEXT_HASH_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_CONTEXT_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_CONTEXT_PARAM_SET,
	BCM_ASYNC_ENTRY_FIELD_CONTROL_GET,
	BCM_ASYNC_ENTRY_FIELD_CONTROL_SET,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_CREATE,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_ETHERTYPE_ADD,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_ETHERTYPE_DELETE,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_GET,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_IP_PROTOCOL_ADD,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_IP_PROTOCOL_DELETE,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_MULTI_GET,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_PACKET_FORMAT_ADD,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_PACKET_FORMAT_DELETE,
	BCM_ASYNC_ENTRY_FIELD_DESTINATION_ENTRY_ADD,
	BCM_ASYNC_ENTRY_FIELD_DESTINATION_ENTRY_DELETE,
	BCM_ASYNC_ENTRY_FIELD_DESTINATION_ENTRY_GET,
	BCM_ASYNC_ENTRY_FIELD_DESTINATION_ENTRY_TRAVERSE,
	BCM_ASYNC_ENTRY_FIELD_DESTINATION_FLEXCTR_OBJECT_GET,
	BCM_ASYNC_ENTRY_FIELD_DESTINATION_FLEXCTR_OBJECT_SET,
	BCM_ASYNC_ENTRY_FIELD_DESTINATION_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FIELD_DESTINATION_STAT_DETACH,
	BCM_ASYNC_ENTRY_FIELD_DESTINATION_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FIELD_DETACH,
	BCM_ASYNC_ENTRY_FIELD_DIRECT_EXTRACTION_ACTION_ADD,
	BCM_ASYNC_ENTRY_FIELD_DIRECT_EXTRACTION_ACTION_GET,
	BCM_ASYNC_ENTRY_FIELD_EFES_ACTION_ADD,
	BCM_ASYNC_ENTRY_FIELD_EFES_ACTION_DELETE,
	BCM_ASYNC_ENTRY_FIELD_EFES_ACTION_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_ADD,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_CONFIG_COPY,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_CONFIG_CREATE,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_CONFIG_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_COPY,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_COPY_ID,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_CREATE,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_DELETE,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_DELETE_ALL,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_DUMP,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_ENABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_ENABLE_SET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_FLEXCTR_ATTACH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_FLEXCTR_DETACH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_HIT_FLUSH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_HIT_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_INSTALL,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_INSTALL_AND_HANDLER_UPDATE,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_MULTI_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_OPERATION,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_POLICER_ATTACH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_POLICER_DETACH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_POLICER_DETACH_ALL,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_POLICER_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_PRIO_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_PRIO_SET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_REINSTALL,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_REMOVE,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_STAT_DETACH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_STAT_EXTENDED_ATTACH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_STAT_EXTENDED_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_STAT_GET,
	BCM_ASYNC_ENTRY_FIELD_FEM_ACTION_ADD,
	BCM_ASYNC_ENTRY_FIELD_FEM_ACTION_DELETE,
	BCM_ASYNC_ENTRY_FIELD_FEM_ACTION_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_FLUSH_ENTRY_ADD,
	BCM_ASYNC_ENTRY_FIELD_FLUSH_ENTRY_DELETE,
	BCM_ASYNC_ENTRY_FIELD_FLUSH_ENTRY_GET,
	BCM_ASYNC_ENTRY_FIELD_FLUSH_PROFILE_ATTACH,
	BCM_ASYNC_ENTRY_FIELD_FLUSH_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_FIELD_FLUSH_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_FLUSH_PROFILE_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_ACTION_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_ACTION_OFFSET_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_ACTION_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_ADD,
	BCM_ASYNC_ENTRY_FIELD_GROUP_COMPRESS,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CONFIG_CREATE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CONFIG_EXTENSION_CREATE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CONFIG_VALIDATE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CONTEXT_ATTACH,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CONTEXT_DETACH,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CONTEXT_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CREATE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CREATE_MODE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CREATE_MODE_ID,
	BCM_ASYNC_ENTRY_FIELD_GROUP_DEFAULT_ENTRY_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_DEFAULT_ENTRY_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_DELETE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_GROUP_DUMP,
	BCM_ASYNC_ENTRY_FIELD_GROUP_ENABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_ENABLE_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_EXPANSION_ENABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_EXPANSION_ENABLE_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_FLUSH,
	BCM_ASYNC_ENTRY_FIELD_GROUP_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_INSTALL,
	BCM_ASYNC_ENTRY_FIELD_GROUP_MODE_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_MODE_QSET_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_OPER_MODE_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_OPER_MODE_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORT_CREATE_MODE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORT_CREATE_MODE_ID,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORTS_ADD,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORTS_CREATE_MODE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORTS_CREATE_MODE_ID,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORTS_REMOVE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PRESEL_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PRESEL_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PRIORITY_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PRIORITY_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_QUALIFIER_OFFSET_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_REMOVE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_STATUS_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_TRAVERSE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_WLAN_CREATE_MODE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_WLAN_CREATE_MODE_ID,
	BCM_ASYNC_ENTRY_FIELD_HINTS_ADD,
	BCM_ASYNC_ENTRY_FIELD_HINTS_CREATE,
	BCM_ASYNC_ENTRY_FIELD_HINTS_DELETE,
	BCM_ASYNC_ENTRY_FIELD_HINTS_DELETE_ALL,
	BCM_ASYNC_ENTRY_FIELD_HINTS_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_HINTS_GET,
	BCM_ASYNC_ENTRY_FIELD_INIT,
	BCM_ASYNC_ENTRY_FIELD_INTERNAL_TO_BCM_ACTION_MAP,
	BCM_ASYNC_ENTRY_FIELD_MACSEC_DSTMACRANGE_GET,
	BCM_ASYNC_ENTRY_FIELD_MACSEC_DSTMACRANGE_SET,
	BCM_ASYNC_ENTRY_FIELD_NAME_TO_ID,
	BCM_ASYNC_ENTRY_FIELD_OAM_STAT_ACTION_ADD,
	BCM_ASYNC_ENTRY_FIELD_OAM_STAT_ACTION_DELETE,
	BCM_ASYNC_ENTRY_FIELD_OAM_STAT_ACTION_DELETE_ALL,
	BCM_ASYNC_ENTRY_FIELD_OAM_STAT_ACTION_GET,
	BCM_ASYNC_ENTRY_FIELD_OAM_STAT_ACTION_GET_ALL,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_CONFIG_CREATE,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_CONFIG_GET,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_CONFIG_SET,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_CREATE,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_CREATE_STAGE_ID,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_GET,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_GROUP_CONFIG_CREATE,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_GROUP_CONFIG_GET,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_SET,
	BCM_ASYNC_ENTRY_FIELD_QSET_DATA_QUALIFIER_ADD,
	BCM_ASYNC_ENTRY_FIELD_QSET_DATA_QUALIFIER_DELETE,
	BCM_ASYNC_ENTRY_FIELD_QSET_DATA_QUALIFIER_GET,
	BCM_ASYNC_ENTRY_FIELD_QSET_ID_MULTI_DELETE,
	BCM_ASYNC_ENTRY_FIELD_QSET_ID_MULTI_GET,
	BCM_ASYNC_ENTRY_FIELD_QSET_ID_MULTI_SET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFIER_CREATE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFIER_DELETE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFIER_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFIER_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFIER_VALUE_MAP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_APPTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_APPTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_APPLSIGNATUREID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_APPLSIGNATUREID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPDSTMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPDSTMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPOPCODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPOPCODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPSENDERIP4,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPSENDERIP4_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPSRCMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPSRCMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPTARGETIP4,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPTARGETIP4_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BFDGOODPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BFDGOODPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BFDMULTIPLIERLEN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BFDMULTIPLIERLEN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BFDPKTVERSIONONE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BFDPKTVERSIONONE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BFDPKTWITHDSTIPLOOPBACKADDR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BFDPKTWITHDSTIPLOOPBACKADDR_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BFDVERFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BFDVERFLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BFDYOURDISCRIMINATOR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BFDYOURDISCRIMINATOR_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BYPASSFILTER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BYPASSFILTER32,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BYPASSFILTER32_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BYPASSFILTER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BYPASSSRCMACFILTER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BYPASSSRCMACFILTER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPHDRRID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPHDRRID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPHDRTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPHDRTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADDIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADDIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADDIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADDIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADDSTMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADDSTMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADETHERTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADETHERTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADINNERVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADINNERVLANCFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADINNERVLANCFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADINNERVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADINNERVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADINNERVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADINNERVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADINNERVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADIPPROTOCOL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADIPPROTOCOL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADL3HDRPARSEABLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADL3HDRPARSEABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADL4DSTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADL4DSTPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADL4HDRPARSEABLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADL4HDRPARSEABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADL4SRCPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADL4SRCPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADOUTERVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADOUTERVLANCFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADOUTERVLANCFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADOUTERVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADOUTERVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADOUTERVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADOUTERVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADOUTERVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADSOF,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADSOF_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADSIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADSIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADSIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADSIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADSRCMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADSRCMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADTOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADTOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADVLANFORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CAPWAPPAYLOADVLANFORMAT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CASCADEDKEYVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CASCADEDKEYVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CLASSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CLASSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CNTAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CNTAGPRESENT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CNTAGPRESENT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CNTAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COLOR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COLOR_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COMPRESSIONDSTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COMPRESSIONDSTHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COMPRESSIONSRCHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COMPRESSIONSRCHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CONGESTIONEXPERIENCED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CONGESTIONEXPERIENCED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CONGESTIONMARKED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CONGESTIONMARKED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CONTAINER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CONTAINER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COPYTOCPU,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COPYTOCPUREASONHIGH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COPYTOCPUREASONHIGH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COPYTOCPUREASONLOW,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COPYTOCPUREASONLOW_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COPYTOCPUTRUNCATE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COPYTOCPUTRUNCATE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COPYTOCPU_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COSMAPSELECT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COSMAPSELECT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COSQUEUEID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COSQUEUEID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COSQUEUENUM,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COSQUEUENUM_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CPUQUEUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CPUQUEUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CPUVISIBILITYPACKET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CPUVISIBILITYPACKET_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CUSTOMHEADERDATA,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CUSTOMHEADERDATA_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CUSTOMHEADERPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CUSTOMHEADERPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSCP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSCP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DECAP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DECAP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DESTVIRTUALPORTVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DESTVIRTUALPORTVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DEVICEPORTBITMAP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DEVICEPORTBITMAP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DEVICEPORTOPAQUECOMMAND,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DEVICEPORTOPAQUECOMMAND_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DHCP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DHCP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DONOTMODIFY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DONOTMODIFY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DOSATTACK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DOSATTACKEVENTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DOSATTACKEVENTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DOSATTACK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DOWNMEPSATTERMINATED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DOWNMEPSATTERMINATED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DROP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DROPREASON,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DROPREASON_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DROP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSFIELD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSFIELD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSL2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSL2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSL3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSL3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCOMPRESSIONCLASSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCOMPRESSIONCLASSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTHIGIG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTHIGIG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6CLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6CLASSLOWER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6CLASSLOWER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6CLASSMSBNIBBLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6CLASSMSBNIBBLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6CLASSUPPER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6CLASSUPPER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6CLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6HIGH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6HIGH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6LOW,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6LOW_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIPCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIPCLASSLOWER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIPCLASSLOWER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIPCLASSMSBNIBBLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIPCLASSMSBNIBBLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIPCLASSUPPER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIPCLASSUPPER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIPCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIPLOCAL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIPLOCAL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL2MULTICASTGROUP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL2MULTICASTGROUP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3EGRESS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3EGRESSNEXTHOPS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3EGRESSNEXTHOPSUNDERLAY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3EGRESSNEXTHOPSUNDERLAY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3EGRESSNEXTHOPS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3EGRESSUNDERLAY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3EGRESSUNDERLAY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3EGRESS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3MULTICASTGROUP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3MULTICASTGROUP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMIMGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMIMGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMIMGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMIMGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMPLSGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMPLSGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMPLSGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMPLSGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTICASTGROUP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTICASTGROUP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTICASTGROUPS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTICASTGROUPS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTIPATH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTIPATHLEVEL1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTIPATHLEVEL1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTIPATHLEVEL2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTIPATHLEVEL2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTIPATHOVERLAY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTIPATHOVERLAY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTIPATHUNDERLAY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTIPATHUNDERLAY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTIPATH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTNIVGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTNIVGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTNIVGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTNIVGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORTSRLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORTSRLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORTSRMODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORTSRMODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORTSRNETID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORTSRNETID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORTSRROLEINTERLINK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORTSRROLEINTERLINK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORTSRTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORTSRTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTRPFGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTRPFGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTSYSPORTEXT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTSYSPORTEXT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTTRUNK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTTRUNK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTVLANGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTVLANGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTVLANGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTVLANGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTVXLANGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTVXLANGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTVXLANGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTVXLANGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTWLANGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTWLANGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTWLANGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTWLANGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ECID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ECID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ECNVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ECNVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EFFECTIVETTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EFFECTIVETTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSL2GRE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSL2GRE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSL3INTERFACE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSL3INTERFACETUNNEL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSL3INTERFACETUNNEL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSL3INTERFACE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSTRILL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSTRILL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSTUNNEL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSTUNNEL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSVXLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSVXLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSWLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSWLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSDOPTRIGGER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSDOPTRIGGER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSFORWARDINGCLASSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSFORWARDINGCLASSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSL3TUNNELGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSL3TUNNELGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSMCASTPKTREASON,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSMCASTPKTREASON_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSPKTQUEUENOTIFICATION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSPKTQUEUENOTIFICATION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSPORTCTRLTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSPORTCTRLTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSPORTQUEUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSPORTQUEUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSTUNNELIPHEADERDSCP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSTUNNELIPHEADERDSCP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSTUNNELIPHEADERECN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSTUNNELIPHEADERECN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSTUNNELIPHEADERFLOWLABEL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSTUNNELIPHEADERFLOWLABEL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERTYPECLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERTYPECLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMCLASSVLANTRANSLATEKEYFIRST,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMCLASSVLANTRANSLATEKEYFIRST_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMCLASSVLANTRANSLATEKEYSECOND,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMCLASSVLANTRANSLATEKEYSECOND_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMCLASSVPN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMCLASSVPN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMDSTCLASSL2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMDSTCLASSL2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMHEADERBITS0_31,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMHEADERBITS0_31_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMHEADERBITS32_63,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMHEADERBITS32_63_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMINTERFACECLASSMIM,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMINTERFACECLASSMIM_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMINTERFACECLASSMPLS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMINTERFACECLASSMPLS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMINTERFACECLASSNIV,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMINTERFACECLASSNIV_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMINTERFACECLASSPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMINTERFACECLASSPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMINTERFACECLASSVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMINTERFACECLASSVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMINTERFACECLASSVXLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMINTERFACECLASSVXLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMTXPKTUPMEP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERNETOAMTXPKTUPMEP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXACTMATCHACTIONCLASSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXACTMATCHACTIONCLASSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXACTMATCHGROUPCLASSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXACTMATCHGROUPCLASSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXACTMATCHHITSTATUS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXACTMATCHHITSTATUS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXACTMATCHOPAQUEOBJECT0,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXACTMATCHOPAQUEOBJECT0_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADER2TYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADER2TYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADERSUBCODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADERSUBCODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADERTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADERTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT0,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT0_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT4,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT4_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT5,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT5_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT7,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT7_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE0,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE0_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE4,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE4_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE5,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE5_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE7,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE7_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FABRICQUEUETAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FABRICQUEUETAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOEOXID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOEOXIDCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOEOXIDCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOEOXID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOERXID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOERXIDCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOERXIDCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOERXID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOESOF,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOESOF_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOEVERSIONISZERO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOEVERSIONISZERO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FHEI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FHEISIZE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FHEISIZE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FHEI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANCSCTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANCSCTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDFCTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDFCTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDSTID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDSTIDCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDSTIDCLASSLOWER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDSTIDCLASSLOWER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDSTIDCLASSMSBNIBBLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDSTIDCLASSMSBNIBBLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDSTIDCLASSUPPER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDSTIDCLASSUPPER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDSTIDCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDSTID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANFCTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANFCTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANINNER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANINNER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANOUTER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANOUTER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANRCTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANRCTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCBINDCHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCBINDCHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCFPMACHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCFPMACHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCIDCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCIDCLASSLOWER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCIDCLASSLOWER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCIDCLASSMSBNIBBLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCIDCLASSMSBNIBBLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCIDCLASSUPPER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCIDCLASSUPPER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCIDCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTFABRICID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTFABRICID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTHOPCOUNT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTHOPCOUNT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVERSION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVERSION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVSANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVSANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVSANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVSANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANZONECHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANZONECHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIRSTDROPREASON,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIRSTDROPREASON_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLEXSTATERESULTA0,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLEXSTATERESULTA0_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLEXSTATERESULTA1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLEXSTATERESULTA1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWCONTROLTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWCONTROLTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERAGGREGATECLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERAGGREGATECLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERCHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERCHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERCLASSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERCLASSIDSOURCE1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERCLASSIDSOURCE1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERCLASSIDSOURCE2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERCLASSIDSOURCE2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERCLASSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERCOLLECTORCOPY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERCOLLECTORCOPY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERDISABLED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERDISABLED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKEREXPORTQUEUEFULL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKEREXPORTQUEUEFULL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERFLOWTABLEFULL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERFLOWTABLEFULL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERGROUPFLOWEXCEEDED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERGROUPFLOWEXCEEDED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERGROUPID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERGROUPID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERGROUPVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERGROUPVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERLEARN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERLEARN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERMETERINGEXCEEDED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWTRACKERMETERINGEXCEEDED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDCODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDCODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDCOPY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDCOPY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDHDRDSTMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDHDRDSTMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDHDRSRCMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDHDRSRCMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDHDRVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDHDRVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGELIGIBLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGELIGIBLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGHEADEROFFSET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGHEADEROFFSET_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGOUTERTPID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGOUTERTPID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGOUTERVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGOUTERVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGPACKETRES,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGPACKETRES_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGSTATUS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGSTATUS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGVLANVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGVLANVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FROMMACSECPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FROMMACSECPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FRONTPANELPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FRONTPANELPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GBPDSTID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GBPDSTID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GBPPRESENT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GBPPRESENT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GBPSRCID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GBPSRCID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GENERATEDTTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GENERATEDTTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GENERICASSOCIATEDCHANNELLABELVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GENERICASSOCIATEDCHANNELLABELVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GENEVEPKTVERSIONZERO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GENEVEPKTVERSIONZERO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GENEVEPKTWITHOAM,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GENEVEPKTWITHOAM_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GPEFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GPEFLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GPENETWORKID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GPENETWORKID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GPEPKTVERSIONZERO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GPEPKTVERSIONZERO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GPEPKTWITHOAM,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GPEPKTWITHOAM_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GPEPROTOCOL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GPEPROTOCOL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GPERESERVED0,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GPERESERVED0_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GPERESERVED1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GPERESERVED1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GROUPCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GROUPCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HEADERFORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HEADERFORMATEXTENSION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HEADERFORMATEXTENSION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HEADERFORMATSET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HEADERFORMATSET_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HEADERFORMAT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIG3CLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIG3CLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIG3FLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIG3FLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIG3PKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIG3PKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGCOLOR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGCOLOR_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDONOTFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDONOTFLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTMODPORTGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTMODPORTGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTMODULEGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTMODULEGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTMULTICAST,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTMULTICASTGROUPID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTMULTICASTGROUPID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTMULTICAST_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTPORTGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTPORTGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTTRUNK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTTRUNKID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTTRUNKID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTTRUNK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGDSTTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGEGRESSMCAST,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGEGRESSMCAST_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGEXTENDEDHEADERPRESENT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGEXTENDEDHEADERPRESENT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGFORWARDINGTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGFORWARDINGTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGGBPPRESENT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGGBPPRESENT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGGBPSRCID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGGBPSRCID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGINGRESSCLASSIFICATIONTAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGINGRESSCLASSIFICATIONTAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGINGRESSL3SWITCHPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGINGRESSL3SWITCHPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGINGRESSTAGGED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGINGRESSTAGGED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGINTCONGESTIONNOTIFICATION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGINTCONGESTIONNOTIFICATION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGLABEL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGLABELTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGLABELTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGLABEL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGLOADBALANCEID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGLOADBALANCEID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGMIRRORORSWITCHPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGMIRRORORSWITCHPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGMIRRORTOVP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGMIRRORTOVP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGMPLSPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGMPLSPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGMULTICASTINDEX,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGMULTICASTINDEX_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINECLASSIFICATIONTAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINECLASSIFICATIONTAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINEDEFERREDFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINEDEFERREDFLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINEDSCPNEW,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINEDSCPNEW_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINEPKTPRINEW,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINEPKTPRINEW_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINEPRESERVEDOT1P,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINEPRESERVEDOT1P_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINEPRESERVEDSCP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINEPRESERVEDSCP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINESRCTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINESRCTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINEVXLTSTATUS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGOFFLOADENGINEVXLTSTATUS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGPORTFILTERINGMODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGPORTFILTERINGMODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGPRESERVEFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGPRESERVEFLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGPROTECTIONSWITCHINGSTATUS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGPROTECTIONSWITCHINGSTATUS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGPROXY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGPROXYTUNNELTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGPROXYTUNNELTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGPROXY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGREPLICATIONID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGREPLICATIONID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGSRCGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGSRCGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGSRCMODPORTGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGSRCMODPORTGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGSRCMODULEGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGSRCMODULEGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGSRCPORTGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGSRCPORTGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGSRCTRUNK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGSRCTRUNK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGSRCTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGSRCTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGTRAFFICCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGTRAFFICCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGVNI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGVNI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGVPLAGFAILOVERPACKET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGVPLAGFAILOVERPACKET_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGVPPRESERVEFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGVPPRESERVEFLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGVPREPLICATIONID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGVPREPLICATIONID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IEEE1588COMMAND,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IEEE1588COMMAND_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IEEE1588COMPENSATETIMESTAMP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IEEE1588COMPENSATETIMESTAMP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IEEE1588ENCAPSULATION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IEEE1588ENCAPSULATION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IEEE1588HEADEROFFSET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IEEE1588HEADEROFFSET_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPROBEMARKER1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPROBEMARKER1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPROBEMARKER2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPROBEMARKER2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTRESERVED4BYTES,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTRESERVED4BYTES_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IOAMNAMESPACEIDMATCH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IOAMNAMESPACEIDMATCH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IOAMPKTOVERFLOWED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IOAMPKTOVERFLOWED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IOAMREMAININGLENVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IOAMREMAININGLENVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ISID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ISID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ITAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ITAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ICMPERROR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ICMPERROR_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ICMPTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ICMPTYPECODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ICMPTYPECODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ICMPTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAACTIONVECTOR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAACTIONVECTOR_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAATTROPAQDATA,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAATTROPAQDATA_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFACURRENTLENGTH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFACURRENTLENGTHEQUALTOZERO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFACURRENTLENGTHEQUALTOZERO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFACURRENTLENGTH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAFLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAGLOBALNAMESPACE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAGLOBALNAMESPACE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAHOPCOUNT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAHOPCOUNT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAHOPLIMIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAHOPLIMITEQUALTOZERO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAHOPLIMITEQUALTOZERO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAHOPLIMIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFALOCALNAMESPACE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFALOCALNAMESPACE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAMAXLENGTH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAMAXLENGTH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFANEXTHDR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFANEXTHDR_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAREQUESTVECTOR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAREQUESTVECTOR_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAVERSION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAVERSION2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAVERSION2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IFAVERSION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IGMPMAXRESPTIME,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IGMPMAXRESPTIME_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IGMPTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IGMPTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INDSCPEXP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INDSCPEXP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INVPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INVPORT32,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INVPORT32_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INVPORTWIDE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INVPORTWIDE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INVPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INVPORTDATAINDEX,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INVPORTDATAINDEX_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INCOMINGIPIFCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INCOMINGIPIFCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INCOMINGOUTERVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INCOMINGOUTERVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INCOMINGVLANFORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INCOMINGVLANFORMAT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSCLASSFIELD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSCLASSFIELD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSDROPETHERNETOAMCONTROL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSDROPETHERNETOAMCONTROL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSDROPETHERNETOAMDATA,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSDROPETHERNETOAMDATA_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSDROPMPLSOAMCONTROL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSDROPMPLSOAMCONTROL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSDROPMPLSOAMDATA,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSDROPMPLSOAMDATA_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSECID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSECID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSINTERFACECLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSINTERFACECLASSPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSINTERFACECLASSPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSINTERFACECLASSVPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSINTERFACECLASSVPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSINTERFACECLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSL2INTERFACEFLEXDIGESTCTRLIDA,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSL2INTERFACEFLEXDIGESTCTRLIDA_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSL2INTERFACEFLEXDIGESTCTRLIDB,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSL2INTERFACEFLEXDIGESTCTRLIDB_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSL2INTERFACEOPAQUECTRLID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSL2INTERFACEOPAQUECTRLID1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSL2INTERFACEOPAQUECTRLID1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSL2INTERFACEOPAQUECTRLID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSL3INTERFACEOPAQUECTRLID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSL3INTERFACEOPAQUECTRLID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSSTPSTATE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSSTPSTATE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSVPORTBRIDGEDISABLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSVPORTBRIDGEDISABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERAPPLSIGNATUREID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERAPPLSIGNATUREID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERBFDPKTVERSIONONE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERBFDPKTVERSIONONE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSCP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSCP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDOSATTACK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDOSATTACKEVENTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDOSATTACKEVENTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDOSATTACK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP6HIGH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP6HIGH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERETHERTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERETHERTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6FLOWLABEL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6FLOWLABEL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6HOPLIMIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6HOPLIMIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6NEXTHEADER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6NEXTHEADER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6PKTHOPLIMIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6PKTHOPLIMIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6PKTNEXTHEADER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6PKTNEXTHEADER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6PKTTRAFFICCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6PKTTRAFFICCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPFRAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPFRAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPINFO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPINFO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPPROTOCOL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPPROTOCOLCOMMON,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPPROTOCOLCOMMON_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPPROTOCOL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERL2MACINFO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERL2MACINFO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4DSTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4DSTPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4INFO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4PORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4PORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4SRCPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4SRCPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERPRITAGGEDPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERPRITAGGEDPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP6HIGH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP6HIGH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTCPCONTROL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTCPCONTROL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTPID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTPID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANACTIONRANGE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANACTIONRANGE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANCFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANCFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANRANGEMATCH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANRANGEMATCH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANTAGPRESERVE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANTAGPRESERVE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTCONGESTIONNOTIFICATION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTCONGESTIONNOTIFICATION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTCTRL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTCTRL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTFLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTHDRPRESENT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTHDRPRESENT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTHDRTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTHDRTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTMETADATAHDRTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTMETADATAHDRTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPKTFINALHOP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPKTFINALHOP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPKTLENGTHVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPKTLENGTHVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPKTOVERFLOWED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPKTOVERFLOWED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPKTTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPKTTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPKTVERSIONONE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPKTVERSIONONE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPRIORITY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPRIORITY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTUDPCHECKSUMEQUALSZERO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTUDPCHECKSUMEQUALSZERO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL2TYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL2TYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL3TUNNEL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL3TUNNEL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSMPLS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSMPLSLOOKUP1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSMPLSLOOKUP1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSMPLSLOOKUP2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSMPLSLOOKUP2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSMPLSLOOKUP3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSMPLSLOOKUP3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSMPLS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSPROCESSINGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSPROCESSINGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSVPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSVPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACEINPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACEINPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACEINGRESSKEYSELECTCLASSPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACEINGRESSKEYSELECTCLASSPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACELOOKUPCLASSPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACELOOKUPCLASSPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP4LENGTH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP4LENGTH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP4TOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP4TOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6FLOWLABEL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6FLOWLABEL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6HOPLIMIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6HOPLIMIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6LENGTH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6LENGTH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6NEXTHEADER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6NEXTHEADER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6PKTHOPLIMIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6PKTHOPLIMIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6PKTNEXTHEADER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6PKTNEXTHEADER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6PKTTRAFFICCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6PKTTRAFFICCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6TRAFFICCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6TRAFFICCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPADDRSNORMALIZED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPADDRSNORMALIZED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPCHECKSUMOKPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPCHECKSUMOKPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPEXTHDR2PROTOCOL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPEXTHDR2PROTOCOL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPEXTENSIONHDRNUM,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPEXTENSIONHDRNUM_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFRAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFRAGINFO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFRAGINFO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFRAGNONORFIRST,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFRAGNONORFIRST_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFRAGPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFRAGPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFRAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFWDPLUSONENEXTPROTOCOL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFWDPLUSONENEXTPROTOCOL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPIDENTIFIER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPIDENTIFIER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPINIPPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPINIPPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPINFO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPINFO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMULTICASTCOMPATIBLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMULTICASTCOMPATIBLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPOPTIONHDRTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPOPTIONHDRTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOLCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOLCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOLCOMMON,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOLCOMMON_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTTLZEROPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTTLZEROPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTUNNELHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTUNNELHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTUNNELTTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTUNNELTTLCLASSZERO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTUNNELTTLCLASSZERO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTUNNELTTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTUNNELVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTUNNELVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCSTARGROUPHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCSTARGROUPHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCSTARGROUPVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCSTARGROUPVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCV4PKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCV4PKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCV6PKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCV6PKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPV4OPTIONHDRTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPV4OPTIONHDRTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPV6EXTENSIONHDRTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPV6EXTENSIONHDRTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ISEQUALVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ISEQUALVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ISUCASTCOSQUEUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ISUCASTCOSQUEUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_KEYGENVAR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2CACHEHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2CACHEHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DESTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DESTHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DESTSRNODETYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DESTSRNODETYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DESTVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DESTVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DSTMISCCLASSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DSTMISCCLASSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DSTMULTICASTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DSTMULTICASTHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2EGRINTFEFPCTRLID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2EGRINTFEFPCTRLID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2EGRESSINTERFACE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2EGRESSINTERFACE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2FORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2FORMAT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREFLOWID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREFLOWID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREPROTOCOLTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREPROTOCOLTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GRESRCIPHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GRESRCIPHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREVFIHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREVFIHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREVSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREVSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2INGRESSINTERFACE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2INGRESSINTERFACE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2INTERFACEMATCH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2INTERFACEMATCH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2LEARN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2LEARNCOMMANDS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2LEARNCOMMANDS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2LEARN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2MACINFO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2MACINFO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2PAYLOAD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2PAYLOAD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2PAYLOADFIRSTEIGHTBYTES,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2PAYLOADFIRSTEIGHTBYTES_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2PKTTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2PKTTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCDISCARD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCDISCARD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCMISCCLASSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCMISCCLASSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCMULTICASTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCMULTICASTHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCSTATIC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCSTATIC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2STATIONMOVE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2STATIONMOVE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3CHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3CHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTHOSTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTHOSTHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTROUTEHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTROUTEHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTROUTEVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTROUTEVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DSTMISCCLASSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DSTMISCCLASSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3EGRESSINTF,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3EGRESSINTF_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3INGRESS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3INGRESS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3ROUTABLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3ROUTABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCBIND,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCBIND_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCHOSTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCHOSTHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCMISCCLASSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCMISCCLASSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCROUTEHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCROUTEHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCROUTEVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCROUTEVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4DSTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4DSTPORTCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4DSTPORTCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4DSTPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4INFO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4PORTRANGECHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4PORTRANGECHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4PORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4PORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4SRCPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4SRCPORTCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4SRCPORTCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4SRCPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE4,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE4_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE5,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE5_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE7,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE7_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE8,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L5PAYLOADBYTE8_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LASTIPPROTOCOL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LASTIPPROTOCOL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNEXTENSION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNEXTENSION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNINVPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNINVPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNSRCMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNSRCMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNSRCPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNSRCPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LLC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LLC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LLIDVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LLIDVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOKUPCLASSFIELD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOKUPCLASSFIELD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKCOLOR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKCOLOR_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKCPUMASQUERADEPKTPROFILE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKCPUMASQUERADEPKTPROFILE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKPACKETPROCESSINGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKPACKETPROCESSINGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKQUEUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKQUEUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKSRCGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKSRCGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKTRAFFICCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKTRAFFICCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKHDRDSTTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKHDRDSTTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKHDRFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKHDRFLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKHIGIG3FLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKHIGIG3FLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKIFASWITCHCOPYDROP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKIFASWITCHCOPYDROP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKLAGFAILOVERPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKLAGFAILOVERPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKSUBTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKSUBTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MHOPCODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MHOPCODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MHPRIORITY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MHPRIORITY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACADDRSNORMALIZED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACADDRSNORMALIZED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECCONTROLPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECCONTROLPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECDSTMACRANGEHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECDSTMACRANGEHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECFLOW,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECFLOW_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECOPAQUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECOPAQUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECSECTAGCBIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECSECTAGCBIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECSECTAGEBIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECSECTAGEBIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECTAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECTAGPRESENT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECTAGPRESENT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACSECTAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MCASTPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MCASTPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMSRCGPORTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMSRCGPORTHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMVFIHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMVFIHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMVLANCFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMVLANCFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLDSTMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLDSTMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLINNERTAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLINNERTAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLSRCMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLSRCMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLVLANCFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLVLANCFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMLVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORCOPY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORCOPY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORDEST,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORDEST_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRROREGRESSDISABLED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRROREGRESSDISABLED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORONDROP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORONDROPREASON,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORONDROPREASON_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORONDROP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORPKTTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORPKTTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIXEDSRCCLASSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIXEDSRCCLASSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSBOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSBOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSCONTROLPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSCONTROLPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSCONTROLWORD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSCONTROLWORDVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSCONTROLWORDVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSCONTROLWORD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSCTRLPKTTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSCTRLPKTTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSCWPRESENT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSCWPRESENT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGCONTROLWORD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGCONTROLWORD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABEL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELACTION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELACTION32,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELACTION32_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELACTION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELBOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELBOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELEXP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELEXP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELPAYLOAD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELPAYLOAD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELTTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELTTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABEL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1BOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1BOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1EXP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1EXP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1HIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1HIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1ID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1ID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1TTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1TTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2BOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2BOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2EXP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2EXP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2HIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2HIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2ID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2ID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2TTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2TTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3BOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3BOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3EXP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3EXP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3ID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3ID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3TTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3TTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL4,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL4BOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL4BOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL4EXP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL4EXP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL4ID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL4ID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL4TTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL4TTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL4_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL5,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL5BOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL5BOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL5EXP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL5EXP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL5ID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL5ID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL5TTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL5TTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL5_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL6BOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL6BOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL6EXP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL6EXP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL6ID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL6ID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL6TTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL6TTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL7,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL7BOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL7BOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL7EXP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL7EXP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL7ID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL7ID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL7TTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL7TTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL7_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSMCASTETHERTYPEPRESENT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSMCASTETHERTYPEPRESENT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMACH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMACH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMCLASSMPLSSWITCHLABEL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMCLASSMPLSSWITCHLABEL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMCONTROLPKTTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMCONTROLPKTTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMGALEXPOSED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMGALEXPOSED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMGALLABELONLY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMGALLABELONLY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMHEADERBITS0_31,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMHEADERBITS0_31_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMHEADERBITS32_63,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMHEADERBITS32_63_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMUPPERLABELDATADROP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOAMUPPERLABELDATADROP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOUTERLABELPOP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOUTERLABELPOP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSSTATIONHITTUNNELUNTERMINATED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSSTATIONHITTUNNELUNTERMINATED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATEDHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATEDHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATEDVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATEDVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTOPHEADER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTOPHEADER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSVCLABELHEADER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSVCLABELHEADER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MYSTATION2HIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MYSTATION2HIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MYSTATIONHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MYSTATIONHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATDSTREALMID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATDSTREALMID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATNEEDED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATNEEDED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATSRCREALMID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATSRCREALMID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATIVEVSWITCH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATIVEVSWITCHVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATIVEVSWITCHVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATIVEVSWITCH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NETWORKTAGMULTICASTPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NETWORKTAGMULTICASTPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NETWORKTAGTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NETWORKTAGTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NSHSERVICEINDEX,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NSHSERVICEINDEX_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NSHSERVICEPATHID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NSHSERVICEPATHID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMDOWNMEPLOOPBACKPACKET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMDOWNMEPLOOPBACKPACKET_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSCLASS2VXLT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSCLASS2VXLT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSCLASSPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSCLASSPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSCLASSSRCMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSCLASSSRCMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSCLASSVXLT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSCLASSVXLT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSETHERTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSETHERTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSMULTICASTMACHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSMULTICASTMACHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSPORTUNICASTDSTMACHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSPORTUNICASTDSTMACHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSVXLTFIRSTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSVXLTFIRSTHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSVXLTSECONDHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMEGRESSVXLTSECONDHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMHEADERBITS0_31,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMHEADERBITS0_31_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMHEADERBITS32_63,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMHEADERBITS32_63_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMHEADEROFFSET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMHEADEROFFSET_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMINLIFID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMINLIFIDVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMINLIFIDVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMINLIFID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMMDL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMMDL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMMEPID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMMEPID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMMETERDISABLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMMETERDISABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMSTAMPOFFSET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMSTAMPOFFSET_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMSUBTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMSUBTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMTSSYSTEMHEADER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMTSSYSTEMHEADER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMUPMEP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMUPMEP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OPAQUEOBJECT1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OPAQUEOBJECT1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OPAQUEOBJECT2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OPAQUEOBJECT2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OPAQUEOBJECT3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OPAQUEOBJECT3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OPAQUEOBJECT4,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OPAQUEOBJECT4_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OPAQUETAGHIGH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OPAQUETAGHIGH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OPAQUETAGLOW,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OPAQUETAGLOW_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OPAQUETAGTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OPAQUETAGTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTVPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTVPORT32,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTVPORT32_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTVPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERIPINFO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERIPINFO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL2MACINFO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL2MACINFO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL4INFO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL4INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE4,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE4_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE5,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE5_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE7,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE7_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE8,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERL5PAYLOADBYTE8_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERPRITAGGEDPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERPRITAGGEDPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERTPID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERTPID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANACTIONRANGE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANACTIONRANGE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANCFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANCFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANPRICFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANPRICFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANRANGEMATCH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANRANGEMATCH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANTAGPRESERVE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANTAGPRESERVE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYEGRESSCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYEGRESSCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYIPOPTIONHDRTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYIPOPTIONHDRTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYIPV4OPTIONHDRTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYIPV4OPTIONHDRTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYIPV6EXTENSIONHDRTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYIPV6EXTENSIONHDRTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYL2PKTTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYL2PKTTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYNETWORKTAGTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYNETWORKTAGTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYPKTTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYPKTTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYVLANFORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OVERLAYVLANFORMAT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETISIEEE1588,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETISIEEE1588_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETLENGTH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETLENGTHRANGECHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETLENGTHRANGECHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETLENGTH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETRES,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETRES_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETSIZE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETSIZE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETSTATUS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETSTATUS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETTERMINATEDBYTES,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETTERMINATEDBYTES_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PDELAYREQ,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PDELAYREQ_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PIMBIDIRDFSTATUS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PIMBIDIRDFSTATUS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PKTDSTADDRTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PKTDSTADDRTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PKTFLOWTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PKTFLOWTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PKTFWDTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PKTFWDTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PKTINNERDSTADDRTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PKTINNERDSTADDRTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PKTISVISIBLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PKTISVISIBLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PKTMISCCTRL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PKTMISCCTRL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PKTTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PKTTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_POLICERINTPRIO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_POLICERINTPRIO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PORTORIENTATION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PORTORIENTATION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PPHTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PPHTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PREEMPTABLEPACKET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PREEMPTABLEPACKET_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PRESELID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PRESELID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PROTOCOLPKTOPAQUECTRLID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PROTOCOLPKTOPAQUECTRLID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PTCH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PTCH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PTPMSGTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PTPMSGTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PTPPKTCTRL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PTPPKTCTRL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PTPRESERVED1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PTPRESERVED1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PTPTRANSPORTSPEC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PTPTRANSPORTSPEC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PTPVERSION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PTPVERSION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RANGECHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RANGECHECKGROUP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RANGECHECKGROUP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RANGECHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RAWRESIDENCETIME,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RAWRESIDENCETIME_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RECIRCLEHDRCODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RECIRCLEHDRCODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RECIRCLEHDRDROPREASON,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RECIRCLEHDRDROPREASON_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RECIRCLEHDRFIRSTDROPREASON,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RECIRCLEHDRFIRSTDROPREASON_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RECIRCLEHDROPAQUECTRLIDC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RECIRCLEHDROPAQUECTRLIDC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RECOVERABLEDROP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RECOVERABLEDROP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_REPCOPY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_REPCOPY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_REPLICANTANY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_REPLICANTANY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_REPLICANTFIRST,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_REPLICANTFIRST_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROCEBTHDSTQUEUEPAIR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROCEBTHDSTQUEUEPAIR_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROCEBTHFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROCEBTHFLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROCEBTHOPCODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROCEBTHOPCODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROCEBTHPARTITIONKEY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROCEBTHPARTITIONKEY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROCEVER1PKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROCEVER1PKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROCEVER2PKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROCEVER2PKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROEFRAMETYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROEFRAMETYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROUTERALERTLABELVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROUTERALERTLABELVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7AHASHLOWER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7AHASHLOWER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7AHASHUPPER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7AHASHUPPER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7BHASHLOWER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7BHASHLOWER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7BHASHUPPER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7BHASHUPPER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7CHASHLOWER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7CHASHLOWER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7CHASHUPPER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7CHASHUPPER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXPORTTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXPORTTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPCODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPCODE32,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPCODE32_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPCODEFORSNOOP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPCODEFORSNOOP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPCODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPDATA,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPDATA_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPSTRENGTH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPSTRENGTH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRDUPLICATE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRDUPLICATE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRERROR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRERROR_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRFLOWID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRFLOWID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRNETID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRNETIDMATCHED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRNETIDMATCHED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRNETID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRSRCNODEISSAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRSRCNODEISSAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRSUPERVISIONTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRSUPERVISIONTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRTAGTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRTAGTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SAMPLEDPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SAMPLEDPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SNAP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SNAP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SNOOPCOPY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SNOOPCOPY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SOURCEGPORTBITMAP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SOURCEGPORTBITMAP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSFIELD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSFIELD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSL2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSL2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSL3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSL3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCOMPRESSIONCLASSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCOMPRESSIONCLASSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6CLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6CLASSLOWER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6CLASSLOWER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6CLASSMSBNIBBLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6CLASSMSBNIBBLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6CLASSUPPER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6CLASSUPPER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6CLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6HIGH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6HIGH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6LOW,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6LOW_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6SRHVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6SRHVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIPCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIPCLASSLOWER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIPCLASSLOWER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIPCLASSMSBNIBBLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIPCLASSMSBNIBBLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIPCLASSUPPER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIPCLASSUPPER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIPCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMIMGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMIMGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMIMGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMIMGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODPORTGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODPORTGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODPORTGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODPORTGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODULEGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODULEGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMPLSGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMPLSGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMPLSGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMPLSGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCNIVGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCNIVGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCNIVGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCNIVGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORTSRLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORTSRLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORTSRMODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORTSRMODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORTSRNETID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORTSRNETID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORTSRROLEINTERLINK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORTSRROLEINTERLINK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORTSRTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORTSRTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCTMPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCTMPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCTRUNK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCTRUNKMEMBERGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCTRUNKMEMBERGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCTRUNK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCVIRTUALPORTVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCVIRTUALPORTVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCVLANGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCVLANGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCVLANGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCVLANGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCVXLANGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCVXLANGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCVXLANGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCVXLANGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCWLANGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCWLANGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCWLANGPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCWLANGPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STACKINGROUTE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STACKINGROUTE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDDIRECTVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDDIRECTVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDPRESELPROFILE0,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDPRESELPROFILE0_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDPRESELPROFILE1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDPRESELPROFILE1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDPRESELPROFILE2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDPRESELPROFILE2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDPRESELPROFILE3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDPRESELPROFILE3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDPRESELPROFILEDIRECT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDPRESELPROFILEDIRECT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDVALUE0,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDVALUE0_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDVALUE1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDVALUE1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDVALUE2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDVALUE2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDVALUE3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGGEREDVALUE3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STPSTATE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STPSTATE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SUBPORTGROUPIDS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SUBPORTGROUPIDS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SUBPORTPKTTAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SUBPORTPKTTAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SUBPORTTAGPRESENT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SUBPORTTAGPRESENT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SVPOPAQUECTRLID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SVPOPAQUECTRLID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SVTAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SVTAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SYSHDRLOCALDSTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SYSHDRLOCALDSTPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SYSHDRTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SYSHDRTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SYSTEMPORTBITMAP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SYSTEMPORTBITMAP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TAFCOSPROFILE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TAFCOSPROFILE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TAFENABLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TAFENABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TAFGATEID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TAFGATEID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TAFGATESTATE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TAFGATESTATE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPACKNUM,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPACKNUM_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPCLASSONE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPCLASSONE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPCLASSZERO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPCLASSZERO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPCONTROL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPCONTROL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPHEADERSIZE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPHEADERSIZE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPSEQUENCENUM,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPSEQUENCENUM_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPSEQUENCEZERO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPSEQUENCEZERO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TIMESTAMPTXPKTTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TIMESTAMPTXPKTTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TOSCLASSONE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TOSCLASSONE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TOSCLASSZERO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TOSCLASSZERO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TOSLOWER4BITS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TOSLOWER4BITS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLANCFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLANCFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLANCFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLANCFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDVLANFORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDVLANFORMAT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLEGRESSRBRIDGE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLEGRESSRBRIDGEHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLEGRESSRBRIDGEHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLEGRESSRBRIDGE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLHOPCOUNT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLHOPCOUNT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLIVERSION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLIVERSION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLINGRESSRBRIDGE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLINGRESSRBRIDGEHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLINGRESSRBRIDGEHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLINGRESSRBRIDGE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLMULTIDESTINATION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLMULTIDESTINATION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLOPLENGTH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLOPLENGTH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLPAYLOAD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLPAYLOAD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRUNKHASHRESULT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRUNKHASHRESULT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRUNKMEMBERSOURCEMODULEID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRUNKMEMBERSOURCEMODULEID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TSNFLOWID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TSNFLOWID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TTLCLASSONE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TTLCLASSONE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TTLCLASSZERO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TTLCLASSZERO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTDSTIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTDSTIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTDSTIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTDSTIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTETHERTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTETHERTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTIPPROTOCOL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTIPPROTOCOL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTL4DSTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTL4DSTPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTL4SRCPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTL4SRCPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTSRCIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTSRCIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTSRCIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELALTSRCIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELHEADERDIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELHEADERDIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELHEADERDIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELHEADERDIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELHEADERDSTMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELHEADERDSTMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELHEADERIPPROTOCOL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELHEADERIPPROTOCOL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELHEADERSIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELHEADERSIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELHEADERSIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELHEADERSIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELHEADERSRCMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELHEADERSRCMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADDIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADDIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADDIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADDIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADDSTMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADDSTMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADETHERTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADETHERTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADIP4LENGTH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADIP4LENGTH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADIP6LENGTH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADIP6LENGTH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADIPPROTOCOL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADIPPROTOCOL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADL4DSTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADL4DSTPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADL4SRCPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADL4SRCPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADOUTERVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADOUTERVLANCFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADOUTERVLANCFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADOUTERVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADOUTERVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADOUTERVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADOUTERVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADOUTERVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADSIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADSIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADSIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADSIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADSRCMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELPAYLOADSRCMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELSUBTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELSUBTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMSTATUS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMSTATUS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATEDHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATEDHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATEDVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATEDVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATIONPROCESSINGPROFILE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATIONPROCESSINGPROFILE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TXPORTTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TXPORTTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_UDFCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_UDFCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_UDPLENGTH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_UDPLENGTH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_UNTAGPKT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_UNTAGPKT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VPORTRANGECHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VPORTRANGECHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANACTION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANACTION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANFORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANFORMAT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANMEMBERSHIPCHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANMEMBERSHIPCHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANSRENABLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANSRENABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANSRLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANSRLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANTRANSLATECLASSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANTRANSLATECLASSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANTRANSLATIONHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANTRANSLATIONHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANTRANSLATIONVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANTRANSLATIONVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VNTAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VNTAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VPN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VPNOPAQUECTRLID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VPNOPAQUECTRLID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VPNUNKNOWNDSTMACDSTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VPNUNKNOWNDSTMACDSTPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VPN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VRF,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VRF_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANCLASSVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANCLASSVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANFLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANGBPPRESENT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANGBPPRESENT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANHEADERBITS56_63,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANHEADERBITS56_63_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANHEADERBITS8_31,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANHEADERBITS8_31_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANNETWORKID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANNETWORKID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANPACKET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANPACKET_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANPAYLOADVLANFORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANPAYLOADVLANFORMAT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANVNIDVLANTRANSLATEHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANVNIDVLANTRANSLATEHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CLEAR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DATA,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DATA_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_UDF,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_UDF_GET,
	BCM_ASYNC_ENTRY_FIELD_RANGE_CREATE,
	BCM_ASYNC_ENTRY_FIELD_RANGE_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_RANGE_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_RANGE_GET,
	BCM_ASYNC_ENTRY_FIELD_RANGE_GROUP_CREATE,
	BCM_ASYNC_ENTRY_FIELD_RANGE_GROUP_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_RANGE_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_RANGE_MULTI_CREATE,
	BCM_ASYNC_ENTRY_FIELD_RANGE_MULTI_GET,
	BCM_ASYNC_ENTRY_FIELD_RANGE_SET,
	BCM_ASYNC_ENTRY_FIELD_RANGE_TYPE_CONFIG_GET,
	BCM_ASYNC_ENTRY_FIELD_RANGE_TYPE_CONFIG_SET,
	BCM_ASYNC_ENTRY_FIELD_RESYNC,
	BCM_ASYNC_ENTRY_FIELD_SAT_MACSA_ADD,
	BCM_ASYNC_ENTRY_FIELD_SAT_MACSA_DELETE,
	BCM_ASYNC_ENTRY_FIELD_SAT_MACSA_DELETE_ALL,
	BCM_ASYNC_ENTRY_FIELD_SAT_MACSA_GET,
	BCM_ASYNC_ENTRY_FIELD_SHOW,
	BCM_ASYNC_ENTRY_FIELD_SOURCE_CLASS_MODE_GET,
	BCM_ASYNC_ENTRY_FIELD_SOURCE_CLASS_MODE_SET,
	BCM_ASYNC_ENTRY_FIELD_STAGE_ASET_GET,
	BCM_ASYNC_ENTRY_FIELD_STAGE_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_STAGE_QSET_GET,
	BCM_ASYNC_ENTRY_FIELD_STAGE_SLICE_COUNT_GET,
	BCM_ASYNC_ENTRY_FIELD_STAGE_SLICE_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_ALL_SET,
	BCM_ASYNC_ENTRY_FIELD_STAT_ALL_SET32,
	BCM_ASYNC_ENTRY_FIELD_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FIELD_STAT_CONFIG_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_FIELD_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_CREATE,
	BCM_ASYNC_ENTRY_FIELD_STAT_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_STAT_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_STAT_DETACH,
	BCM_ASYNC_ENTRY_FIELD_STAT_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_GET32,
	BCM_ASYNC_ENTRY_FIELD_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_FIELD_STAT_SET,
	BCM_ASYNC_ENTRY_FIELD_STAT_SET32,
	BCM_ASYNC_ENTRY_FIELD_STAT_SIZE,
	BCM_ASYNC_ENTRY_FIELD_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_FIELD_TCAM_BANK_ADD,
	BCM_ASYNC_ENTRY_FIELD_TCAM_BANK_EVACUATE,
	BCM_ASYNC_ENTRY_FIND,
	BCM_ASYNC_ENTRY_FLEXCTR_ACTION_CREATE,
	BCM_ASYNC_ENTRY_FLEXCTR_ACTION_DESTROY,
	BCM_ASYNC_ENTRY_FLEXCTR_ACTION_GET,
	BCM_ASYNC_ENTRY_FLEXCTR_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_FLEXCTR_CLEANUP,
	BCM_ASYNC_ENTRY_FLEXCTR_GROUP_ACTION_CREATE,
	BCM_ASYNC_ENTRY_FLEXCTR_GROUP_ACTION_DESTROY,
	BCM_ASYNC_ENTRY_FLEXCTR_GROUP_ACTION_GET,
	BCM_ASYNC_ENTRY_FLEXCTR_GROUP_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_FLEXCTR_INIT,
	BCM_ASYNC_ENTRY_FLEXCTR_OBJECT_OVERLAY_MULTI_GET,
	BCM_ASYNC_ENTRY_FLEXCTR_PACKET_ATTRIBUTE_MAP_ADD,
	BCM_ASYNC_ENTRY_FLEXCTR_PACKET_ATTRIBUTE_MAP_DELETE,
	BCM_ASYNC_ENTRY_FLEXCTR_PACKET_ATTRIBUTE_MAP_DELETE_ALL,
	BCM_ASYNC_ENTRY_FLEXCTR_PACKET_ATTRIBUTE_MAP_GET,
	BCM_ASYNC_ENTRY_FLEXCTR_PACKET_ATTRIBUTE_MAP_TRAVERSE,
	BCM_ASYNC_ENTRY_FLEXCTR_PACKET_ATTRIBUTE_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_FLEXCTR_PACKET_ATTRIBUTE_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_FLEXCTR_PACKET_ATTRIBUTE_PROFILE_GET,
	BCM_ASYNC_ENTRY_FLEXCTR_PACKET_ATTRIBUTE_PROFILE_TRAVERSE,
	BCM_ASYNC_ENTRY_FLEXCTR_QUANTIZATION_CREATE,
	BCM_ASYNC_ENTRY_FLEXCTR_QUANTIZATION_DESTROY,
	BCM_ASYNC_ENTRY_FLEXCTR_QUANTIZATION_GET,
	BCM_ASYNC_ENTRY_FLEXCTR_QUANTIZATION_TRAVERSE,
	BCM_ASYNC_ENTRY_FLEXCTR_STAT_GET,
	BCM_ASYNC_ENTRY_FLEXCTR_STAT_SET,
	BCM_ASYNC_ENTRY_FLEXCTR_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_FLEXCTR_TRIGGER_ENABLE_GET,
	BCM_ASYNC_ENTRY_FLEXCTR_TRIGGER_ENABLE_SET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_ACTION_ADD,
	BCM_ASYNC_ENTRY_FLEXDIGEST_ACTION_DELETE,
	BCM_ASYNC_ENTRY_FLEXDIGEST_ACTION_DELETE_ALL,
	BCM_ASYNC_ENTRY_FLEXDIGEST_ACTION_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_CONTROL_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_CONTROL_SET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_DETACH,
	BCM_ASYNC_ENTRY_FLEXDIGEST_ENTRY_CREATE,
	BCM_ASYNC_ENTRY_FLEXDIGEST_ENTRY_CREATE_ID,
	BCM_ASYNC_ENTRY_FLEXDIGEST_ENTRY_DESTROY,
	BCM_ASYNC_ENTRY_FLEXDIGEST_ENTRY_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FLEXDIGEST_ENTRY_DUMP,
	BCM_ASYNC_ENTRY_FLEXDIGEST_ENTRY_INSTALL,
	BCM_ASYNC_ENTRY_FLEXDIGEST_ENTRY_PRIORITY_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_ENTRY_PRIORITY_SET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_ENTRY_REINSTALL,
	BCM_ASYNC_ENTRY_FLEXDIGEST_ENTRY_REMOVE,
	BCM_ASYNC_ENTRY_FLEXDIGEST_GROUP_CREATE,
	BCM_ASYNC_ENTRY_FLEXDIGEST_GROUP_CREATE_ID,
	BCM_ASYNC_ENTRY_FLEXDIGEST_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_FLEXDIGEST_GROUP_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FLEXDIGEST_GROUP_DUMP,
	BCM_ASYNC_ENTRY_FLEXDIGEST_GROUP_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_HASH_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_FLEXDIGEST_HASH_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_FLEXDIGEST_HASH_PROFILE_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FLEXDIGEST_HASH_PROFILE_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_HASH_PROFILE_SET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_HASH_SALT_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_HASH_SALT_SET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_INIT,
	BCM_ASYNC_ENTRY_FLEXDIGEST_MATCH_ADD,
	BCM_ASYNC_ENTRY_FLEXDIGEST_MATCH_DELETE,
	BCM_ASYNC_ENTRY_FLEXDIGEST_MATCH_DELETE_ALL,
	BCM_ASYNC_ENTRY_FLEXDIGEST_MATCH_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_MATCH_ID_CREATE,
	BCM_ASYNC_ENTRY_FLEXDIGEST_MATCH_ID_DESTROY,
	BCM_ASYNC_ENTRY_FLEXDIGEST_MATCH_ID_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FLEXDIGEST_NORM_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_FLEXDIGEST_NORM_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_FLEXDIGEST_NORM_PROFILE_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FLEXDIGEST_NORM_PROFILE_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_NORM_PROFILE_SET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_NORM_SEED_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_FLEXDIGEST_NORM_SEED_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_FLEXDIGEST_NORM_SEED_PROFILE_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FLEXDIGEST_NORM_SEED_PROFILE_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_NORM_SEED_PROFILE_SET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFIER_DELETE,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFIER_DELETE_ALL,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_FIXEDHVE1RESULTSET0,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_FIXEDHVE1RESULTSET0_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_FIXEDHVE2RESULTSET0,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_FIXEDHVE2RESULTSET0_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_FLEXHVE1RESULTSET1,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_FLEXHVE1RESULTSET1_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_FLEXHVE2RESULTSET1,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_FLEXHVE2RESULTSET1_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_L2IIFFLEXDIGESTCTRLIDA,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_L2IIFFLEXDIGESTCTRLIDA_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_L2IIFFLEXDIGESTCTRLIDB,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_L2IIFFLEXDIGESTCTRLIDB_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_L2IIFOPAQUECTRLID,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_L2IIFOPAQUECTRLID_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_L3IIFOPAQUECTRLID,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_L3IIFOPAQUECTRLID_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_L4VALID,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_L4VALID_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_MATCHID,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_MATCHID_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_MYSTATION1HIT,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_MYSTATION1HIT_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_PROTOCOLPKTOPAQUECTRLID,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_PROTOCOLPKTOPAQUECTRLID_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_SVPOPAQUECTRLID,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_SVPOPAQUECTRLID_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_TUNNELPROCESSINGRESULTS1,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_TUNNELPROCESSINGRESULTS1_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_TUNNELPROCESSINGRESULTSRAW,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_TUNNELPROCESSINGRESULTSRAW_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_VFIOPAQUECTRLID,
	BCM_ASYNC_ENTRY_FLEXDIGEST_QUALIFY_VFIOPAQUECTRLID_GET,
	BCM_ASYNC_ENTRY_FLEXDIGEST_SHOW,
	BCM_ASYNC_ENTRY_FLEXSTATE_ACTION_CREATE,
	BCM_ASYNC_ENTRY_FLEXSTATE_ACTION_DESTROY,
	BCM_ASYNC_ENTRY_FLEXSTATE_ACTION_GET,
	BCM_ASYNC_ENTRY_FLEXSTATE_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_FLEXSTATE_CLEANUP,
	BCM_ASYNC_ENTRY_FLEXSTATE_GROUP_ACTION_CREATE,
	BCM_ASYNC_ENTRY_FLEXSTATE_GROUP_ACTION_DESTROY,
	BCM_ASYNC_ENTRY_FLEXSTATE_GROUP_ACTION_GET,
	BCM_ASYNC_ENTRY_FLEXSTATE_GROUP_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_FLEXSTATE_INIT,
	BCM_ASYNC_ENTRY_FLEXSTATE_QUANTIZATION_CREATE,
	BCM_ASYNC_ENTRY_FLEXSTATE_QUANTIZATION_DESTROY,
	BCM_ASYNC_ENTRY_FLEXSTATE_QUANTIZATION_GET,
	BCM_ASYNC_ENTRY_FLEXSTATE_QUANTIZATION_TRAVERSE,
	BCM_ASYNC_ENTRY_FLEXSTATE_STAT_GET,
	BCM_ASYNC_ENTRY_FLEXSTATE_STAT_SET,
	BCM_ASYNC_ENTRY_FLEXSTATE_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_FLEXSTATE_TRIGGER_ENABLE_GET,
	BCM_ASYNC_ENTRY_FLEXSTATE_TRIGGER_ENABLE_SET,
	BCM_ASYNC_ENTRY_FLOW_CLEANUP,
	BCM_ASYNC_ENTRY_FLOW_ENCAP_ADD,
	BCM_ASYNC_ENTRY_FLOW_ENCAP_DELETE,
	BCM_ASYNC_ENTRY_FLOW_ENCAP_FLEXCTR_OBJECT_GET,
	BCM_ASYNC_ENTRY_FLOW_ENCAP_FLEXCTR_OBJECT_SET,
	BCM_ASYNC_ENTRY_FLOW_ENCAP_GET,
	BCM_ASYNC_ENTRY_FLOW_ENCAP_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FLOW_ENCAP_STAT_DETACH,
	BCM_ASYNC_ENTRY_FLOW_ENCAP_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FLOW_ENCAP_TRAVERSE,
	BCM_ASYNC_ENTRY_FLOW_ES_FILTER_FLEXCTR_OBJECT_GET,
	BCM_ASYNC_ENTRY_FLOW_ES_FILTER_FLEXCTR_OBJECT_SET,
	BCM_ASYNC_ENTRY_FLOW_ES_FILTER_GET,
	BCM_ASYNC_ENTRY_FLOW_ES_FILTER_SET,
	BCM_ASYNC_ENTRY_FLOW_ES_FILTER_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FLOW_ES_FILTER_STAT_DETACH,
	BCM_ASYNC_ENTRY_FLOW_ES_FILTER_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FLOW_HANDLE_GET,
	BCM_ASYNC_ENTRY_FLOW_INIT,
	BCM_ASYNC_ENTRY_FLOW_INITIATOR_INFO_CREATE,
	BCM_ASYNC_ENTRY_FLOW_INITIATOR_INFO_DESTROY,
	BCM_ASYNC_ENTRY_FLOW_INITIATOR_INFO_GET,
	BCM_ASYNC_ENTRY_FLOW_INITIATOR_INFO_TRAVERSE,
	BCM_ASYNC_ENTRY_FLOW_LOGICAL_FIELD_ID_GET,
	BCM_ASYNC_ENTRY_FLOW_MATCH_ADD,
	BCM_ASYNC_ENTRY_FLOW_MATCH_DELETE,
	BCM_ASYNC_ENTRY_FLOW_MATCH_FLEXCTR_OBJECT_GET,
	BCM_ASYNC_ENTRY_FLOW_MATCH_FLEXCTR_OBJECT_SET,
	BCM_ASYNC_ENTRY_FLOW_MATCH_GET,
	BCM_ASYNC_ENTRY_FLOW_MATCH_INFO_ADD,
	BCM_ASYNC_ENTRY_FLOW_MATCH_INFO_DELETE,
	BCM_ASYNC_ENTRY_FLOW_MATCH_INFO_GET,
	BCM_ASYNC_ENTRY_FLOW_MATCH_INFO_TRAVERSE,
	BCM_ASYNC_ENTRY_FLOW_MATCH_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FLOW_MATCH_STAT_DETACH,
	BCM_ASYNC_ENTRY_FLOW_MATCH_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FLOW_MATCH_TRAVERSE,
	BCM_ASYNC_ENTRY_FLOW_OPTION_ID_GET,
	BCM_ASYNC_ENTRY_FLOW_PORT_CREATE,
	BCM_ASYNC_ENTRY_FLOW_PORT_DESTROY,
	BCM_ASYNC_ENTRY_FLOW_PORT_ENCAP_GET,
	BCM_ASYNC_ENTRY_FLOW_PORT_ENCAP_SET,
	BCM_ASYNC_ENTRY_FLOW_PORT_GET,
	BCM_ASYNC_ENTRY_FLOW_PORT_GET_ALL,
	BCM_ASYNC_ENTRY_FLOW_PORT_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FLOW_PORT_STAT_DETACH,
	BCM_ASYNC_ENTRY_FLOW_PORT_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FLOW_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FLOW_STAT_DETACH,
	BCM_ASYNC_ENTRY_FLOW_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FLOW_STAT_OBJECT_GET,
	BCM_ASYNC_ENTRY_FLOW_TERMINATOR_INFO_CREATE,
	BCM_ASYNC_ENTRY_FLOW_TERMINATOR_INFO_DESTROY,
	BCM_ASYNC_ENTRY_FLOW_TERMINATOR_INFO_GET,
	BCM_ASYNC_ENTRY_FLOW_TERMINATOR_INFO_TRAVERSE,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_INITIATOR_CREATE,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_INITIATOR_DESTROY,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_INITIATOR_GET,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_INITIATOR_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_INITIATOR_STAT_DETACH,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_INITIATOR_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_INITIATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_TERMINATOR_CREATE,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_TERMINATOR_DESTROY,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_TERMINATOR_FLEXCTR_OBJECT_GET,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_TERMINATOR_FLEXCTR_OBJECT_SET,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_TERMINATOR_GET,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_TERMINATOR_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_TERMINATOR_STAT_DETACH,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_TERMINATOR_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FLOW_TUNNEL_TERMINATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_FLOW_VPN_CREATE,
	BCM_ASYNC_ENTRY_FLOW_VPN_DESTROY,
	BCM_ASYNC_ENTRY_FLOW_VPN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FLOW_VPN_GET,
	BCM_ASYNC_ENTRY_FLOW_VPN_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FLOW_VPN_STAT_DETACH,
	BCM_ASYNC_ENTRY_FLOW_VPN_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FLOW_VPN_TRAVERSE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_AGGREGATE_CLASS_CREATE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_AGGREGATE_CLASS_DESTROY,
	BCM_ASYNC_ENTRY_FLOWTRACKER_AGGREGATE_CLASS_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_AGGREGATE_CLASS_GET_ALL,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CHECK_ACTION_INFO_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CHECK_ACTION_INFO_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CHECK_CREATE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CHECK_DELAY_INFO_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CHECK_DELAY_INFO_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CHECK_DESTROY,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CHECK_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CHECK_EXPORT_INFO_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CHECK_EXPORT_INFO_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CHECK_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CHECK_TRAVERSE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CHIP_DEBUG_INFO_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CHIP_DEBUG_INFO_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_COLLECTOR_CREATE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_COLLECTOR_DESTROY,
	BCM_ASYNC_ENTRY_FLOWTRACKER_COLLECTOR_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_COLLECTOR_GET_ALL,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CONTROL_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_CONTROL_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_DETACH,
	BCM_ASYNC_ENTRY_FLOWTRACKER_DROP_REASON_GROUP_CREATE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_DROP_REASON_GROUP_DELETE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_DROP_REASON_GROUP_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_EGRESS_CLASS_SOURCE_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_EGRESS_CLASS_SOURCE_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_ACTION_MATCH_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_ACTION_MATCH_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_CONTROL_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_CONTROL_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_HASH_CONFIG_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_HASH_CONFIG_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_INT_PRI_REMAP_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_INT_PRI_REMAP_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_PROFILE_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_PROFILE_GET_ALL,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_STATS_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_STATS_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_ELEPHANT_STATS_SYNC_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_EXPORT_RECORD_DATA_INFO_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_EXPORT_RECORD_REGISTER,
	BCM_ASYNC_ENTRY_FLOWTRACKER_EXPORT_RECORD_UNREGISTER,
	BCM_ASYNC_ENTRY_FLOWTRACKER_EXPORT_TEMPLATE_CREATE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_EXPORT_TEMPLATE_DESTROY,
	BCM_ASYNC_ENTRY_FLOWTRACKER_EXPORT_TEMPLATE_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_EXPORT_TEMPLATE_VALIDATE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_ACTIONS_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_ACTIONS_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_AGE_TIMER_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_AGE_TIMER_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_CHECK_ADD,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_CHECK_DELETE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_CHECK_GET_ALL,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_CLEAR,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_COLLECTOR_ADD,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_COLLECTOR_ATTACH,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_COLLECTOR_ATTACH_GET_ALL,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_COLLECTOR_COPY_INFO_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_COLLECTOR_COPY_INFO_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_COLLECTOR_DELETE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_COLLECTOR_DETACH,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_COLLECTOR_GET_ALL,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_CONTROL_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_CONTROL_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_CREATE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_DATA_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_ELEPHANT_PROFILE_ATTACH,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_ELEPHANT_PROFILE_ATTACH_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_ELEPHANT_PROFILE_DETACH,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_EXPORT_TRIGGER_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_EXPORT_TRIGGER_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_FLOW_ACTION_UPDATE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_FLOW_COUNT_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_FLOW_DELETE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_FLOW_LIMIT_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_FLOW_LIMIT_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_GET_ALL,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_METER_INFO_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_METER_INFO_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_MULTI_CLEAR,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_RECORD_TRAVERSE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_STAT_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_STAT_MODEID_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_STAT_MODEID_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_STAT_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_TRACKING_PARAMS_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_GROUP_TRACKING_PARAMS_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_INIT,
	BCM_ASYNC_ENTRY_FLOWTRACKER_PERIODIC_EXPORT_CONFIG_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_PERIODIC_EXPORT_CONFIG_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_STATIC_FLOW_ADD,
	BCM_ASYNC_ENTRY_FLOWTRACKER_STATIC_FLOW_DELETE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_STATIC_FLOW_DELETE_ALL,
	BCM_ASYNC_ENTRY_FLOWTRACKER_STATIC_FLOW_GET_ALL,
	BCM_ASYNC_ENTRY_FLOWTRACKER_TEMPLATE_TRANSMIT_CONFIG_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_TEMPLATE_TRANSMIT_CONFIG_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_UDF_TRACKING_PARAM_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_UDF_TRACKING_PARAM_SET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_USER_ENTRY_ADD,
	BCM_ASYNC_ENTRY_FLOWTRACKER_USER_ENTRY_DELETE,
	BCM_ASYNC_ENTRY_FLOWTRACKER_USER_ENTRY_DELETE_ALL,
	BCM_ASYNC_ENTRY_FLOWTRACKER_USER_ENTRY_GET,
	BCM_ASYNC_ENTRY_FLOWTRACKER_USER_ENTRY_GET_ALL,
	BCM_ASYNC_ENTRY_GDPLL_CB_REGISTER,
	BCM_ASYNC_ENTRY_GDPLL_CB_UNREGISTER,
	BCM_ASYNC_ENTRY_GDPLL_CHAN_CREATE,
	BCM_ASYNC_ENTRY_GDPLL_CHAN_DEBUG_ENABLE,
	BCM_ASYNC_ENTRY_GDPLL_CHAN_DESTROY,
	BCM_ASYNC_ENTRY_GDPLL_CHAN_ENABLE,
	BCM_ASYNC_ENTRY_GDPLL_CHAN_GET,
	BCM_ASYNC_ENTRY_GDPLL_CHAN_STATE_GET,
	BCM_ASYNC_ENTRY_GDPLL_DEBUG,
	BCM_ASYNC_ENTRY_GDPLL_DEBUG_CB_REGISTER,
	BCM_ASYNC_ENTRY_GDPLL_FLUSH,
	BCM_ASYNC_ENTRY_GDPLL_INPUT_EVENT_POLL,
	BCM_ASYNC_ENTRY_GDPLL_OFFSET_GET,
	BCM_ASYNC_ENTRY_GDPLL_OFFSET_SET,
	BCM_ASYNC_ENTRY_GPORT_STAT_GET,
	BCM_ASYNC_ENTRY_GPORT_STAT_SET,
	BCM_ASYNC_ENTRY_HASH_FLEX_BIN_ADD,
	BCM_ASYNC_ENTRY_HASH_FLEX_BIN_DELETE,
	BCM_ASYNC_ENTRY_HASH_FLEX_BIN_DELETE_ALL,
	BCM_ASYNC_ENTRY_HASH_FLEX_BIN_GET,
	BCM_ASYNC_ENTRY_HASH_FLEX_BIN_TRAVERSE,
	BCM_ASYNC_ENTRY_HASH_FLEX_FIELD_ID_GET,
	BCM_ASYNC_ENTRY_HASH_FLEX_FIELD_NAME_GET,
	BCM_ASYNC_ENTRY_HASH_INIT,
	BCM_ASYNC_ENTRY_I2C_IOCTL,
	BCM_ASYNC_ENTRY_I2C_OPEN,
	BCM_ASYNC_ENTRY_I2C_READ,
	BCM_ASYNC_ENTRY_I2C_WRITE,
	BCM_ASYNC_ENTRY_IFA_CC_CONFIG_GET,
	BCM_ASYNC_ENTRY_IFA_CC_CONFIG_SET,
	BCM_ASYNC_ENTRY_IFA_COLLECTOR_ATTACH,
	BCM_ASYNC_ENTRY_IFA_COLLECTOR_ATTACH_GET,
	BCM_ASYNC_ENTRY_IFA_COLLECTOR_DETACH,
	BCM_ASYNC_ENTRY_IFA_COLLECTOR_GET,
	BCM_ASYNC_ENTRY_IFA_COLLECTOR_SET,
	BCM_ASYNC_ENTRY_IFA_CONFIG_INFO_GET,
	BCM_ASYNC_ENTRY_IFA_CONFIG_INFO_SET,
	BCM_ASYNC_ENTRY_IFA_DETACH,
	BCM_ASYNC_ENTRY_IFA_EXPORT_TEMPLATE_CREATE,
	BCM_ASYNC_ENTRY_IFA_EXPORT_TEMPLATE_DESTROY,
	BCM_ASYNC_ENTRY_IFA_EXPORT_TEMPLATE_GET,
	BCM_ASYNC_ENTRY_IFA_HEADER_CREATE,
	BCM_ASYNC_ENTRY_IFA_HEADER_DESTROY,
	BCM_ASYNC_ENTRY_IFA_HEADER_GET,
	BCM_ASYNC_ENTRY_IFA_HEADER_TRAVERSE,
	BCM_ASYNC_ENTRY_IFA_INIT,
	BCM_ASYNC_ENTRY_IFA_STAT_INFO_GET,
	BCM_ASYNC_ENTRY_IFA_STAT_INFO_SET,
	BCM_ASYNC_ENTRY_IFA_TEMPLATE_TRANSMIT_CONFIG_GET,
	BCM_ASYNC_ENTRY_IFA_TEMPLATE_TRANSMIT_CONFIG_SET,
	BCM_ASYNC_ENTRY_INFO_GET,
	BCM_ASYNC_ENTRY_INIT,
	BCM_ASYNC_ENTRY_INIT_ADVANCED,
	BCM_ASYNC_ENTRY_INIT_CHECK,
	BCM_ASYNC_ENTRY_INIT_SELECTIVE,
	BCM_ASYNC_ENTRY_INSTRU_CONTROL_GET,
	BCM_ASYNC_ENTRY_INSTRU_CONTROL_SET,
	BCM_ASYNC_ENTRY_INSTRU_EVENTOR_ACTIVE_GET,
	BCM_ASYNC_ENTRY_INSTRU_EVENTOR_ACTIVE_SET,
	BCM_ASYNC_ENTRY_INSTRU_EVENTOR_BUILDER_GET,
	BCM_ASYNC_ENTRY_INSTRU_EVENTOR_BUILDER_SET,
	BCM_ASYNC_ENTRY_INSTRU_EVENTOR_CONTEXT_GET,
	BCM_ASYNC_ENTRY_INSTRU_EVENTOR_CONTEXT_SET,
	BCM_ASYNC_ENTRY_INSTRU_EVENTOR_EVENT_GENERATE,
	BCM_ASYNC_ENTRY_INSTRU_EVENTOR_EVENT_ID_CONFIG_GET,
	BCM_ASYNC_ENTRY_INSTRU_EVENTOR_EVENT_ID_CONFIG_SET,
	BCM_ASYNC_ENTRY_INSTRU_GET_MEMORY_ACCESS_INFO,
	BCM_ASYNC_ENTRY_INSTRU_GET_REGISTER_ACCESS_INFO,
	BCM_ASYNC_ENTRY_INSTRU_GPORT_CONTROL_GET,
	BCM_ASYNC_ENTRY_INSTRU_GPORT_CONTROL_SET,
	BCM_ASYNC_ENTRY_INSTRU_IFA_ENCAP_CREATE,
	BCM_ASYNC_ENTRY_INSTRU_IFA_ENCAP_DELETE,
	BCM_ASYNC_ENTRY_INSTRU_IFA_ENCAP_GET,
	BCM_ASYNC_ENTRY_INSTRU_IFA_ENCAP_TRAVERSE,
	BCM_ASYNC_ENTRY_INSTRU_IPT_PROFILE_GET,
	BCM_ASYNC_ENTRY_INSTRU_IPT_PROFILE_SET,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_ENCAP_CREATE,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_ENCAP_DELETE,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_ENCAP_EXTENDED_DST_CREATE,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_ENCAP_EXTENDED_DST_DELETE,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_ENCAP_EXTENDED_DST_GET,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_ENCAP_EXTENDED_DST_TRAVERSE,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_ENCAP_EXTENDED_SRC_CREATE,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_ENCAP_EXTENDED_SRC_DELETE,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_ENCAP_EXTENDED_SRC_GET,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_ENCAP_EXTENDED_SRC_TRAVERSE,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_ENCAP_GET,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_ENCAP_TRAVERSE,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_SAMPLE_INTERFACE_ADD,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_SAMPLE_INTERFACE_GET,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_SAMPLE_INTERFACE_REMOVE,
	BCM_ASYNC_ENTRY_INSTRU_SFLOW_SAMPLE_INTERFACE_TRAVERSE,
	BCM_ASYNC_ENTRY_INSTRU_SYNCED_COUNTERS_CONFIG_GET,
	BCM_ASYNC_ENTRY_INSTRU_SYNCED_COUNTERS_CONFIG_SET,
	BCM_ASYNC_ENTRY_INSTRU_SYNCED_COUNTERS_RECORDS_GET,
	BCM_ASYNC_ENTRY_INSTRU_SYNCED_COUNTERS_TRIGGER_ENABLE_GET,
	BCM_ASYNC_ENTRY_INSTRU_SYNCED_COUNTERS_TRIGGER_ENABLE_SET,
	BCM_ASYNC_ENTRY_INSTRU_VIS_RESUME,
	BCM_ASYNC_ENTRY_INSTRU_VIS_SIGNAL_GET,
	BCM_ASYNC_ENTRY_INT_COSQ_STAT_CONFIG_GET,
	BCM_ASYNC_ENTRY_INT_COSQ_STAT_CONFIG_SET,
	BCM_ASYNC_ENTRY_INT_DETACH,
	BCM_ASYNC_ENTRY_INT_DP_ACTION_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_INT_DP_ACTION_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_INT_DP_ACTION_PROFILE_GET,
	BCM_ASYNC_ENTRY_INT_DP_ACTION_PROFILE_TRAVERSE,
	BCM_ASYNC_ENTRY_INT_DP_VECTOR_MATCH_ADD,
	BCM_ASYNC_ENTRY_INT_DP_VECTOR_MATCH_DELETE,
	BCM_ASYNC_ENTRY_INT_DP_VECTOR_MATCH_DELETE_ALL,
	BCM_ASYNC_ENTRY_INT_DP_VECTOR_MATCH_GET,
	BCM_ASYNC_ENTRY_INT_DP_VECTOR_MATCH_TRAVERSE,
	BCM_ASYNC_ENTRY_INT_IFA_ACTION_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_INT_IFA_ACTION_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_INT_IFA_ACTION_PROFILE_GET,
	BCM_ASYNC_ENTRY_INT_IFA_ACTION_PROFILE_TRAVERSE,
	BCM_ASYNC_ENTRY_INT_IFA_VECTOR_MATCH_ADD,
	BCM_ASYNC_ENTRY_INT_IFA_VECTOR_MATCH_DELETE,
	BCM_ASYNC_ENTRY_INT_IFA_VECTOR_MATCH_DELETE_ALL,
	BCM_ASYNC_ENTRY_INT_IFA_VECTOR_MATCH_GET,
	BCM_ASYNC_ENTRY_INT_IFA_VECTOR_MATCH_TRAVERSE,
	BCM_ASYNC_ENTRY_INT_INIT,
	BCM_ASYNC_ENTRY_INT_IOAM_ACTION_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_INT_IOAM_ACTION_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_INT_IOAM_ACTION_PROFILE_GET,
	BCM_ASYNC_ENTRY_INT_IOAM_ACTION_PROFILE_TRAVERSE,
	BCM_ASYNC_ENTRY_INT_IOAM_VECTOR_MATCH_ADD,
	BCM_ASYNC_ENTRY_INT_IOAM_VECTOR_MATCH_DELETE,
	BCM_ASYNC_ENTRY_INT_IOAM_VECTOR_MATCH_DELETE_ALL,
	BCM_ASYNC_ENTRY_INT_IOAM_VECTOR_MATCH_GET,
	BCM_ASYNC_ENTRY_INT_IOAM_VECTOR_MATCH_TRAVERSE,
	BCM_ASYNC_ENTRY_INT_METADATA_FIELD_ADD,
	BCM_ASYNC_ENTRY_INT_METADATA_FIELD_DELETE,
	BCM_ASYNC_ENTRY_INT_METADATA_FIELD_DELETE_ALL,
	BCM_ASYNC_ENTRY_INT_METADATA_FIELD_SELECT_INFO_GET,
	BCM_ASYNC_ENTRY_INT_METADATA_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_INT_METADATA_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_INT_METADATA_PROFILE_GET,
	BCM_ASYNC_ENTRY_INT_METADATA_PROFILE_TRAVERSE,
	BCM_ASYNC_ENTRY_INT_OPAQUE_DATA_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_INT_OPAQUE_DATA_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_INT_OPAQUE_DATA_PROFILE_GET,
	BCM_ASYNC_ENTRY_INT_OPAQUE_DATA_PROFILE_TRAVERSE,
	BCM_ASYNC_ENTRY_INT_TURNAROUND_CONFIG_GET,
	BCM_ASYNC_ENTRY_INT_TURNAROUND_CONFIG_SET,
	BCM_ASYNC_ENTRY_INT_TURNAROUND_STAT_GET,
	BCM_ASYNC_ENTRY_IP6_MASK_CREATE,
	BCM_ASYNC_ENTRY_IP6_MASK_LENGTH,
	BCM_ASYNC_ENTRY_IP_MASK_LENGTH,
	BCM_ASYNC_ENTRY_IPFIX_CONFIG_GET,
	BCM_ASYNC_ENTRY_IPFIX_CONFIG_SET,
	BCM_ASYNC_ENTRY_IPFIX_MIRROR_CONFIG_GET,
	BCM_ASYNC_ENTRY_IPFIX_MIRROR_CONFIG_SET,
	BCM_ASYNC_ENTRY_IPFIX_MIRROR_PORT_DEST_ADD,
	BCM_ASYNC_ENTRY_IPFIX_MIRROR_PORT_DEST_DELETE,
	BCM_ASYNC_ENTRY_IPFIX_MIRROR_PORT_DEST_DELETE_ALL,
	BCM_ASYNC_ENTRY_IPFIX_MIRROR_PORT_DEST_GET,
	BCM_ASYNC_ENTRY_IPFIX_RATE_CREATE,
	BCM_ASYNC_ENTRY_IPFIX_RATE_DESTROY,
	BCM_ASYNC_ENTRY_IPFIX_RATE_DESTROY_ALL,
	BCM_ASYNC_ENTRY_IPFIX_RATE_GET,
	BCM_ASYNC_ENTRY_IPFIX_RATE_MIRROR_ADD,
	BCM_ASYNC_ENTRY_IPFIX_RATE_MIRROR_DELETE,
	BCM_ASYNC_ENTRY_IPFIX_RATE_MIRROR_DELETE_ALL,
	BCM_ASYNC_ENTRY_IPFIX_RATE_MIRROR_GET,
	BCM_ASYNC_ENTRY_IPFIX_RATE_TRAVERSE,
	BCM_ASYNC_ENTRY_IPFIX_REGISTER,
	BCM_ASYNC_ENTRY_IPFIX_UNREGISTER,
	BCM_ASYNC_ENTRY_IPMC_ADD,
	BCM_ASYNC_ENTRY_IPMC_AGE,
	BCM_ASYNC_ENTRY_IPMC_BITMAP_DEL,
	BCM_ASYNC_ENTRY_IPMC_BITMAP_GET,
	BCM_ASYNC_ENTRY_IPMC_BITMAP_MAX_GET,
	BCM_ASYNC_ENTRY_IPMC_BITMAP_SET,
	BCM_ASYNC_ENTRY_IPMC_CONFIG_ADD,
	BCM_ASYNC_ENTRY_IPMC_CONFIG_FIND,
	BCM_ASYNC_ENTRY_IPMC_CONFIG_REMOVE,
	BCM_ASYNC_ENTRY_IPMC_CONFIG_TRAVERSE,
	BCM_ASYNC_ENTRY_IPMC_COUNTERS_GET,
	BCM_ASYNC_ENTRY_IPMC_DETACH,
	BCM_ASYNC_ENTRY_IPMC_EGRESS_PORT_GET,
	BCM_ASYNC_ENTRY_IPMC_EGRESS_PORT_INIT,
	BCM_ASYNC_ENTRY_IPMC_EGRESS_PORT_SET,
	BCM_ASYNC_ENTRY_IPMC_ENABLE,
	BCM_ASYNC_ENTRY_IPMC_FIND,
	BCM_ASYNC_ENTRY_IPMC_FLEXCTR_OBJECT_GET,
	BCM_ASYNC_ENTRY_IPMC_FLEXCTR_OBJECT_SET,
	BCM_ASYNC_ENTRY_IPMC_INIT,
	BCM_ASYNC_ENTRY_IPMC_RANGE_ADD,
	BCM_ASYNC_ENTRY_IPMC_RANGE_DELETE,
	BCM_ASYNC_ENTRY_IPMC_RANGE_DELETE_ALL,
	BCM_ASYNC_ENTRY_IPMC_RANGE_GET,
	BCM_ASYNC_ENTRY_IPMC_RANGE_SIZE_GET,
	BCM_ASYNC_ENTRY_IPMC_REMOVE,
	BCM_ASYNC_ENTRY_IPMC_REMOVE_ALL,
	BCM_ASYNC_ENTRY_IPMC_RP_ADD,
	BCM_ASYNC_ENTRY_IPMC_RP_CREATE,
	BCM_ASYNC_ENTRY_IPMC_RP_DELETE,
	BCM_ASYNC_ENTRY_IPMC_RP_DELETE_ALL,
	BCM_ASYNC_ENTRY_IPMC_RP_DESTROY,
	BCM_ASYNC_ENTRY_IPMC_RP_GET,
	BCM_ASYNC_ENTRY_IPMC_RP_SET,
	BCM_ASYNC_ENTRY_IPMC_STAT_ATTACH,
	BCM_ASYNC_ENTRY_IPMC_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_IPMC_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_IPMC_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_IPMC_STAT_DETACH,
	BCM_ASYNC_ENTRY_IPMC_STAT_ID_GET,
	BCM_ASYNC_ENTRY_IPMC_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_IPMC_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_IPMC_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_IPMC_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_IPMC_TRAVERSE,
	BCM_ASYNC_ENTRY_IPSEC_CONFIG_SET,
	BCM_ASYNC_ENTRY_IPSEC_SA_CREATE,
	BCM_ASYNC_ENTRY_IPSEC_SA_DELETE,
	BCM_ASYNC_ENTRY_IPSEC_SA_KEY_UPDATE,
	BCM_ASYNC_ENTRY_IPSEC_SA_TO_TUNNEL_MAP_GET,
	BCM_ASYNC_ENTRY_IPSEC_SA_TO_TUNNEL_MAP_SET,
	BCM_ASYNC_ENTRY_IPSEC_TUNNEL_CREATE,
	BCM_ASYNC_ENTRY_IPSEC_TUNNEL_DELETE,
	BCM_ASYNC_ENTRY_KNET_CLEANUP,
	BCM_ASYNC_ENTRY_KNET_FILTER_CREATE,
	BCM_ASYNC_ENTRY_KNET_FILTER_DESTROY,
	BCM_ASYNC_ENTRY_KNET_FILTER_GET,
	BCM_ASYNC_ENTRY_KNET_FILTER_TRAVERSE,
	BCM_ASYNC_ENTRY_KNET_INIT,
	BCM_ASYNC_ENTRY_KNET_NETIF_CREATE,
	BCM_ASYNC_ENTRY_KNET_NETIF_DESTROY,
	BCM_ASYNC_ENTRY_KNET_NETIF_GET,
	BCM_ASYNC_ENTRY_KNET_NETIF_TRAVERSE,
	BCM_ASYNC_ENTRY_KNETSYNC_DEINIT,
	BCM_ASYNC_ENTRY_KNETSYNC_INIT,
	BCM_ASYNC_ENTRY_L2_ADDR_ADD,
	BCM_ASYNC_ENTRY_L2_ADDR_BY_STRUCT_DELETE,
	BCM_ASYNC_ENTRY_L2_ADDR_BY_STRUCT_GET,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_MAC,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_MAC_PORT,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_PORT,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_TRUNK,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_VLAN,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_VLAN_GPORT_MULTI,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_VLAN_PORT,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_VLAN_TRUNK,
	BCM_ASYNC_ENTRY_L2_ADDR_FREEZE,
	BCM_ASYNC_ENTRY_L2_ADDR_GET,
	BCM_ASYNC_ENTRY_L2_ADDR_MSG_DISTRIBUTE_GET,
	BCM_ASYNC_ENTRY_L2_ADDR_MSG_DISTRIBUTE_SET,
	BCM_ASYNC_ENTRY_L2_ADDR_MULTI_ADD,
	BCM_ASYNC_ENTRY_L2_ADDR_MULTI_DELETE,
	BCM_ASYNC_ENTRY_L2_ADDR_REGISTER,
	BCM_ASYNC_ENTRY_L2_ADDR_THAW,
	BCM_ASYNC_ENTRY_L2_ADDR_UNREGISTER,
	BCM_ASYNC_ENTRY_L2_AGE_TIMER_GET,
	BCM_ASYNC_ENTRY_L2_AGE_TIMER_META_CYCLE_GET,
	BCM_ASYNC_ENTRY_L2_AGE_TIMER_META_CYCLE_SET,
	BCM_ASYNC_ENTRY_L2_AGE_TIMER_SET,
	BCM_ASYNC_ENTRY_L2_AUTH_ADD,
	BCM_ASYNC_ENTRY_L2_AUTH_DELETE,
	BCM_ASYNC_ENTRY_L2_AUTH_DELETE_ALL,
	BCM_ASYNC_ENTRY_L2_AUTH_GET,
	BCM_ASYNC_ENTRY_L2_AUTH_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_CACHE_DELETE,
	BCM_ASYNC_ENTRY_L2_CACHE_DELETE_ALL,
	BCM_ASYNC_ENTRY_L2_CACHE_GET,
	BCM_ASYNC_ENTRY_L2_CACHE_INIT,
	BCM_ASYNC_ENTRY_L2_CACHE_PROFILE_GET,
	BCM_ASYNC_ENTRY_L2_CACHE_PROFILE_SET,
	BCM_ASYNC_ENTRY_L2_CACHE_SET,
	BCM_ASYNC_ENTRY_L2_CACHE_SIZE_GET,
	BCM_ASYNC_ENTRY_L2_CACHE_VPN_TO_PROFILE_MAP_GET,
	BCM_ASYNC_ENTRY_L2_CACHE_VPN_TO_PROFILE_MAP_SET,
	BCM_ASYNC_ENTRY_L2_CHANGE_FIELDS_ADD,
	BCM_ASYNC_ENTRY_L2_CHANGE_FIELDS_DELETE,
	BCM_ASYNC_ENTRY_L2_CHANGE_FIELDS_GET,
	BCM_ASYNC_ENTRY_L2_CHANGE_FIELDS_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_CLEAR,
	BCM_ASYNC_ENTRY_L2_CONFLICT_GET,
	BCM_ASYNC_ENTRY_L2_DETACH,
	BCM_ASYNC_ENTRY_L2_EGRESS_CREATE,
	BCM_ASYNC_ENTRY_L2_EGRESS_DESTROY,
	BCM_ASYNC_ENTRY_L2_EGRESS_FIND,
	BCM_ASYNC_ENTRY_L2_EGRESS_GET,
	BCM_ASYNC_ENTRY_L2_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_GPORT_CONTROL_INFO_GET,
	BCM_ASYNC_ENTRY_L2_GPORT_CONTROL_INFO_SET,
	BCM_ASYNC_ENTRY_L2_GPORT_FORWARD_INFO_GET,
	BCM_ASYNC_ENTRY_L2_INIT,
	BCM_ASYNC_ENTRY_L2_KEY_DUMP,
	BCM_ASYNC_ENTRY_L2_LEARN_CLASS_GET,
	BCM_ASYNC_ENTRY_L2_LEARN_CLASS_SET,
	BCM_ASYNC_ENTRY_L2_LEARN_LIMIT_DISABLE,
	BCM_ASYNC_ENTRY_L2_LEARN_LIMIT_ENABLE,
	BCM_ASYNC_ENTRY_L2_LEARN_LIMIT_GET,
	BCM_ASYNC_ENTRY_L2_LEARN_LIMIT_SET,
	BCM_ASYNC_ENTRY_L2_LEARN_MSGS_CONFIG_GET,
	BCM_ASYNC_ENTRY_L2_LEARN_MSGS_CONFIG_SET,
	BCM_ASYNC_ENTRY_L2_LEARN_PORT_CLASS_GET,
	BCM_ASYNC_ENTRY_L2_LEARN_PORT_CLASS_SET,
	BCM_ASYNC_ENTRY_L2_LEARN_STAT_GET,
	BCM_ASYNC_ENTRY_L2_LEARN_STAT_SET,
	BCM_ASYNC_ENTRY_L2_MAC_PORT_CREATE,
	BCM_ASYNC_ENTRY_L2_MAC_PORT_DESTROY,
	BCM_ASYNC_ENTRY_L2_MAC_PORT_DESTROY_ALL,
	BCM_ASYNC_ENTRY_L2_MAC_PORT_GET,
	BCM_ASYNC_ENTRY_L2_MAC_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_MATCH_MASKED_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_MATCHED_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_PORT_NATIVE,
	BCM_ASYNC_ENTRY_L2_REPLACE,
	BCM_ASYNC_ENTRY_L2_REPLACE_MATCH,
	BCM_ASYNC_ENTRY_L2_RING_REPLACE,
	BCM_ASYNC_ENTRY_L2_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_L2_STAT_GET,
	BCM_ASYNC_ENTRY_L2_STAT_GET32,
	BCM_ASYNC_ENTRY_L2_STAT_SET,
	BCM_ASYNC_ENTRY_L2_STAT_SET32,
	BCM_ASYNC_ENTRY_L2_STATION_ADD,
	BCM_ASYNC_ENTRY_L2_STATION_DELETE,
	BCM_ASYNC_ENTRY_L2_STATION_DELETE_ALL,
	BCM_ASYNC_ENTRY_L2_STATION_GET,
	BCM_ASYNC_ENTRY_L2_STATION_SIZE_GET,
	BCM_ASYNC_ENTRY_L2_STATION_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_TUNNEL_ADD,
	BCM_ASYNC_ENTRY_L2_TUNNEL_DELETE,
	BCM_ASYNC_ENTRY_L2_TUNNEL_DELETE_ALL,
	BCM_ASYNC_ENTRY_L2GRE_CLEANUP,
	BCM_ASYNC_ENTRY_L2GRE_INIT,
	BCM_ASYNC_ENTRY_L2GRE_PORT_ADD,
	BCM_ASYNC_ENTRY_L2GRE_PORT_DELETE,
	BCM_ASYNC_ENTRY_L2GRE_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_L2GRE_PORT_GET,
	BCM_ASYNC_ENTRY_L2GRE_PORT_GET_ALL,
	BCM_ASYNC_ENTRY_L2GRE_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L2GRE_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_L2GRE_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_L2GRE_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_L2GRE_STAT_DETACH,
	BCM_ASYNC_ENTRY_L2GRE_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L2GRE_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_L2GRE_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_L2GRE_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_L2GRE_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_INITIATOR_CREATE,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_INITIATOR_DESTROY,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_INITIATOR_DESTROY_ALL,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_INITIATOR_GET,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_INITIATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_TERMINATOR_CREATE,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_TERMINATOR_DESTROY,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_TERMINATOR_DESTROY_ALL,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_TERMINATOR_GET,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_TERMINATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_TERMINATOR_UPDATE,
	BCM_ASYNC_ENTRY_L2GRE_VPN_CREATE,
	BCM_ASYNC_ENTRY_L2GRE_VPN_DESTROY,
	BCM_ASYNC_ENTRY_L2GRE_VPN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_L2GRE_VPN_GET,
	BCM_ASYNC_ENTRY_L2GRE_VPN_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_AACL_ADD,
	BCM_ASYNC_ENTRY_L3_AACL_DELETE,
	BCM_ASYNC_ENTRY_L3_AACL_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_AACL_FIND,
	BCM_ASYNC_ENTRY_L3_AACL_MATCHED_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_AACL_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_ALPM_RESOURCE_GET,
	BCM_ASYNC_ENTRY_L3_ALPM_SANITY_CHECK,
	BCM_ASYNC_ENTRY_L3_ALPM_TRACE_CB_REGISTER,
	BCM_ASYNC_ENTRY_L3_ALPM_TRACE_CB_UNREGISTER,
	BCM_ASYNC_ENTRY_L3_CLEANUP,
	BCM_ASYNC_ENTRY_L3_ECMP_AGM_ATTACH,
	BCM_ASYNC_ENTRY_L3_ECMP_AGM_ATTACH_GET,
	BCM_ASYNC_ENTRY_L3_ECMP_AGM_DETACH,
	BCM_ASYNC_ENTRY_L3_ECMP_CREATE,
	BCM_ASYNC_ENTRY_L3_ECMP_DESTROY,
	BCM_ASYNC_ENTRY_L3_ECMP_DLB_MON_CONFIG_GET,
	BCM_ASYNC_ENTRY_L3_ECMP_DLB_MON_CONFIG_SET,
	BCM_ASYNC_ENTRY_L3_ECMP_DLB_PORT_QUALITY_ATTR_GET,
	BCM_ASYNC_ENTRY_L3_ECMP_DLB_PORT_QUALITY_ATTR_SET,
	BCM_ASYNC_ENTRY_L3_ECMP_DLB_STAT_GET,
	BCM_ASYNC_ENTRY_L3_ECMP_DLB_STAT_SET,
	BCM_ASYNC_ENTRY_L3_ECMP_DLB_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_ECMP_FIND,
	BCM_ASYNC_ENTRY_L3_ECMP_FLEXCTR_OBJECT_GET,
	BCM_ASYNC_ENTRY_L3_ECMP_FLEXCTR_OBJECT_SET,
	BCM_ASYNC_ENTRY_L3_ECMP_GET,
	BCM_ASYNC_ENTRY_L3_ECMP_GROUP_INFO_GET,
	BCM_ASYNC_ENTRY_L3_ECMP_MEMBER_ADD,
	BCM_ASYNC_ENTRY_L3_ECMP_MEMBER_DELETE,
	BCM_ASYNC_ENTRY_L3_ECMP_MEMBER_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_ECMP_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L3_ECMP_STAT_DETACH,
	BCM_ASYNC_ENTRY_L3_ECMP_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L3_ECMP_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_ECMP_TUNNEL_PRIORITY_MAP_CREATE,
	BCM_ASYNC_ENTRY_L3_ECMP_TUNNEL_PRIORITY_MAP_DESTROY,
	BCM_ASYNC_ENTRY_L3_ECMP_TUNNEL_PRIORITY_MAP_GET,
	BCM_ASYNC_ENTRY_L3_ECMP_TUNNEL_PRIORITY_MAP_SET,
	BCM_ASYNC_ENTRY_L3_EGRESS_ALLOCATION_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_ARP_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_EGRESS_CREATE,
	BCM_ASYNC_ENTRY_L3_EGRESS_DESTROY,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_ADD,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_CREATE,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_DELETE,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_DESTROY,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_ETHERTYPE_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_ETHERTYPE_SET,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_FIND,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_MEMBER_STATUS_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_MEMBER_STATUS_SET,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_RESILIENT_ADD,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_RESILIENT_DELETE,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_RESILIENT_REPLACE,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_RESILIENT_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_TUNNEL_PRIORITY_SET,
	BCM_ASYNC_ENTRY_L3_EGRESS_FIND,
	BCM_ASYNC_ENTRY_L3_EGRESS_FLEXCTR_OBJECT_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_FLEXCTR_OBJECT_SET,
	BCM_ASYNC_ENTRY_L3_EGRESS_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTI_ALLOC,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTI_FREE,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_ADD,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_CREATE,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_DELETE,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_DESTROY,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_FIND,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_MAX_CREATE,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_DETACH,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_ENABLE_SET,
	BCM_ASYNC_ENTRY_L3_HOST_ADD,
	BCM_ASYNC_ENTRY_L3_HOST_AGE,
	BCM_ASYNC_ENTRY_L3_HOST_CONFLICT_GET,
	BCM_ASYNC_ENTRY_L3_HOST_DELETE,
	BCM_ASYNC_ENTRY_L3_HOST_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_HOST_DELETE_BY_INTERFACE,
	BCM_ASYNC_ENTRY_L3_HOST_DELETE_BY_NETWORK,
	BCM_ASYNC_ENTRY_L3_HOST_FIND,
	BCM_ASYNC_ENTRY_L3_HOST_INVALIDATE_ENTRY,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_DETACH,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L3_HOST_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_HOST_VALIDATE_ENTRY,
	BCM_ASYNC_ENTRY_L3_INFO,
	BCM_ASYNC_ENTRY_L3_INGRESS_CREATE,
	BCM_ASYNC_ENTRY_L3_INGRESS_DESTROY,
	BCM_ASYNC_ENTRY_L3_INGRESS_FIND,
	BCM_ASYNC_ENTRY_L3_INGRESS_GET,
	BCM_ASYNC_ENTRY_L3_INGRESS_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L3_INGRESS_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_L3_INGRESS_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_L3_INGRESS_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_INGRESS_STAT_DETACH,
	BCM_ASYNC_ENTRY_L3_INGRESS_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L3_INGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_INIT,
	BCM_ASYNC_ENTRY_L3_INTF_CREATE,
	BCM_ASYNC_ENTRY_L3_INTF_DELETE,
	BCM_ASYNC_ENTRY_L3_INTF_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_INTF_FIND,
	BCM_ASYNC_ENTRY_L3_INTF_FIND_VLAN,
	BCM_ASYNC_ENTRY_L3_INTF_GET,
	BCM_ASYNC_ENTRY_L3_INTF_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L3_INTF_STAT_DETACH,
	BCM_ASYNC_ENTRY_L3_INTF_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L3_INTF_VPN_GET,
	BCM_ASYNC_ENTRY_L3_INTF_VPN_SET,
	BCM_ASYNC_ENTRY_L3_IP4_OPTIONS_ACTION_GET,
	BCM_ASYNC_ENTRY_L3_IP4_OPTIONS_ACTION_SET,
	BCM_ASYNC_ENTRY_L3_IP4_OPTIONS_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_L3_IP4_OPTIONS_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_ADD,
	BCM_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_DELETE,
	BCM_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_GET,
	BCM_ASYNC_ENTRY_L3_LARGE_NAT_EGRESS_ADD,
	BCM_ASYNC_ENTRY_L3_LARGE_NAT_EGRESS_DELETE,
	BCM_ASYNC_ENTRY_L3_LARGE_NAT_EGRESS_GET,
	BCM_ASYNC_ENTRY_L3_LARGE_NAT_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_ADD,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_DELETE,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_DESTROY,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_GET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_DETACH,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_NAT_INGRESS_ADD,
	BCM_ASYNC_ENTRY_L3_NAT_INGRESS_AGE,
	BCM_ASYNC_ENTRY_L3_NAT_INGRESS_DELETE,
	BCM_ASYNC_ENTRY_L3_NAT_INGRESS_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_NAT_INGRESS_FIND,
	BCM_ASYNC_ENTRY_L3_NAT_INGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_ROUTE_ADD,
	BCM_ASYNC_ENTRY_L3_ROUTE_AGE,
	BCM_ASYNC_ENTRY_L3_ROUTE_DELETE,
	BCM_ASYNC_ENTRY_L3_ROUTE_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_ROUTE_DELETE_BY_INTERFACE,
	BCM_ASYNC_ENTRY_L3_ROUTE_FIND,
	BCM_ASYNC_ENTRY_L3_ROUTE_FLEXCTR_OBJECT_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_FLEXCTR_OBJECT_SET,
	BCM_ASYNC_ENTRY_L3_ROUTE_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_MAX_ECMP_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_MAX_ECMP_SET,
	BCM_ASYNC_ENTRY_L3_ROUTE_MULTIPATH_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_DETACH,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_GET32,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_SET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_SET32,
	BCM_ASYNC_ENTRY_L3_ROUTE_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_SOURCE_BIND_ADD,
	BCM_ASYNC_ENTRY_L3_SOURCE_BIND_DELETE,
	BCM_ASYNC_ENTRY_L3_SOURCE_BIND_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_SOURCE_BIND_ENABLE_GET,
	BCM_ASYNC_ENTRY_L3_SOURCE_BIND_ENABLE_SET,
	BCM_ASYNC_ENTRY_L3_SOURCE_BIND_GET,
	BCM_ASYNC_ENTRY_L3_SOURCE_BIND_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_SUBNET_ROUTE_FIND,
	BCM_ASYNC_ENTRY_L3_TUNNEL_TERM_GLOBAL_CFG_GET,
	BCM_ASYNC_ENTRY_L3_TUNNEL_TERM_GLOBAL_CFG_SET,
	BCM_ASYNC_ENTRY_L3_VPBR_ENTRY_ADD,
	BCM_ASYNC_ENTRY_L3_VPBR_ENTRY_DELETE,
	BCM_ASYNC_ENTRY_L3_VPBR_ENTRY_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_VPBR_ENTRY_GET,
	BCM_ASYNC_ENTRY_L3_VPBR_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_VRF_ROUTE_DATA_MODE_GET,
	BCM_ASYNC_ENTRY_L3_VRF_ROUTE_DATA_MODE_SET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_DETACH,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_GET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_GET32,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_SET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_SET32,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_L3_VRRP_ADD,
	BCM_ASYNC_ENTRY_L3_VRRP_CONFIG_ADD,
	BCM_ASYNC_ENTRY_L3_VRRP_CONFIG_DELETE,
	BCM_ASYNC_ENTRY_L3_VRRP_CONFIG_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_VRRP_CONFIG_GET,
	BCM_ASYNC_ENTRY_L3_VRRP_DELETE,
	BCM_ASYNC_ENTRY_L3_VRRP_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_VRRP_GET,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_CONFIG_GET,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_CONFIG_SET,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_COSQ_CONFIG_GET,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_COSQ_CONFIG_SET,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_DESTROY,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_DETACH,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_ENABLE,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_HISTOGRAM_GET,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_INFO_GET,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_INIT,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_LATENCY_LIMIT_TABLE_GET,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_LATENCY_LIMIT_TABLE_SET,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_REGISTER,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_STAT_ATTACH,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_STAT_DETACH,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_STAT_ID_GET,
	BCM_ASYNC_ENTRY_LATENCY_MONITOR_UNREGISTER,
	BCM_ASYNC_ENTRY_LB_CONTROL_GET,
	BCM_ASYNC_ENTRY_LB_CONTROL_SET,
	BCM_ASYNC_ENTRY_LB_ENABLE_GET,
	BCM_ASYNC_ENTRY_LB_ENABLE_SET,
	BCM_ASYNC_ENTRY_LB_FLUSH_CONFIGURE_GET,
	BCM_ASYNC_ENTRY_LB_FLUSH_CONFIGURE_SET,
	BCM_ASYNC_ENTRY_LB_MODEM_CONTROL_GET,
	BCM_ASYNC_ENTRY_LB_MODEM_CONTROL_SET,
	BCM_ASYNC_ENTRY_LB_MODEM_PACKET_CONFIG_GET,
	BCM_ASYNC_ENTRY_LB_MODEM_PACKET_CONFIG_SET,
	BCM_ASYNC_ENTRY_LB_MODEM_SHAPER_GET,
	BCM_ASYNC_ENTRY_LB_MODEM_SHAPER_SET,
	BCM_ASYNC_ENTRY_LB_MODEM_STAT_GET,
	BCM_ASYNC_ENTRY_LB_MODEM_STATUS_GET,
	BCM_ASYNC_ENTRY_LB_MODEM_TO_LBG_MAP_GET,
	BCM_ASYNC_ENTRY_LB_MODEM_TO_LBG_MAP_SET,
	BCM_ASYNC_ENTRY_LB_MODEM_TO_PORT_MAP_GET,
	BCM_ASYNC_ENTRY_LB_MODEM_TO_PORT_MAP_SET,
	BCM_ASYNC_ENTRY_LB_PACKET_CONFIG_GET,
	BCM_ASYNC_ENTRY_LB_PACKET_CONFIG_SET,
	BCM_ASYNC_ENTRY_LB_RX_MODEM_MAP_GET,
	BCM_ASYNC_ENTRY_LB_RX_MODEM_MAP_SET,
	BCM_ASYNC_ENTRY_LB_SEQUENCE_NUMBER_WIDTH_GET,
	BCM_ASYNC_ENTRY_LB_SEQUENCE_NUMBER_WIDTH_SET,
	BCM_ASYNC_ENTRY_LB_STAT_GET,
	BCM_ASYNC_ENTRY_LB_STATUS_GET,
	BCM_ASYNC_ENTRY_LB_TC_DP_TO_PRIORITY_CONFIG_GET,
	BCM_ASYNC_ENTRY_LB_TC_DP_TO_PRIORITY_CONFIG_SET,
	BCM_ASYNC_ENTRY_LB_TX_SCHED_GET,
	BCM_ASYNC_ENTRY_LB_TX_SCHED_SET,
	BCM_ASYNC_ENTRY_LINK_CHANGE,
	BCM_ASYNC_ENTRY_LINK_WAIT,
	BCM_ASYNC_ENTRY_LINKSCAN_DETACH,
	BCM_ASYNC_ENTRY_LINKSCAN_DUMP,
	BCM_ASYNC_ENTRY_LINKSCAN_ENABLE_GET,
	BCM_ASYNC_ENTRY_LINKSCAN_ENABLE_PORT_GET,
	BCM_ASYNC_ENTRY_LINKSCAN_ENABLE_SET,
	BCM_ASYNC_ENTRY_LINKSCAN_INIT,
	BCM_ASYNC_ENTRY_LINKSCAN_MODE_GET,
	BCM_ASYNC_ENTRY_LINKSCAN_MODE_SET,
	BCM_ASYNC_ENTRY_LINKSCAN_MODE_SET_PBM,
	BCM_ASYNC_ENTRY_LINKSCAN_OVERRIDE_LINK_STATE_GET,
	BCM_ASYNC_ENTRY_LINKSCAN_OVERRIDE_LINK_STATE_SET,
	BCM_ASYNC_ENTRY_LINKSCAN_PORT_REGISTER,
	BCM_ASYNC_ENTRY_LINKSCAN_PORT_UNREGISTER,
	BCM_ASYNC_ENTRY_LINKSCAN_REGISTER,
	BCM_ASYNC_ENTRY_LINKSCAN_TRIGGER_EVENT_GET,
	BCM_ASYNC_ENTRY_LINKSCAN_TRIGGER_EVENT_SET,
	BCM_ASYNC_ENTRY_LINKSCAN_UNREGISTER,
	BCM_ASYNC_ENTRY_LINKSCAN_UPDATE,
	BCM_ASYNC_ENTRY_MACSEC_EVENT_ENABLE_GET,
	BCM_ASYNC_ENTRY_MACSEC_EVENT_ENABLE_SET,
	BCM_ASYNC_ENTRY_MACSEC_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_MACSEC_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_MACSEC_FLOW_CREATE,
	BCM_ASYNC_ENTRY_MACSEC_FLOW_DESTROY,
	BCM_ASYNC_ENTRY_MACSEC_FLOW_GET,
	BCM_ASYNC_ENTRY_MACSEC_FLOW_TRAVERSE,
	BCM_ASYNC_ENTRY_MACSEC_PORT_CAPABILITY_GET,
	BCM_ASYNC_ENTRY_MACSEC_PORT_CONFIG_GET,
	BCM_ASYNC_ENTRY_MACSEC_PORT_CONFIG_SET,
	BCM_ASYNC_ENTRY_MACSEC_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_ASSOC_CREATE,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_ASSOC_DESTROY,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_ASSOC_GET,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_ASSOC_TRAVERSE,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_CHAN_CREATE,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_CHAN_DESTROY,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_CHAN_GET,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_CHAN_TRAVERSE,
	BCM_ASYNC_ENTRY_MACSEC_STAT_CLEAR,
	BCM_ASYNC_ENTRY_MACSEC_STAT_GET,
	BCM_ASYNC_ENTRY_MACSEC_STAT_GET32,
	BCM_ASYNC_ENTRY_MACSEC_STAT_SET,
	BCM_ASYNC_ENTRY_MACSEC_STAT_SET32,
	BCM_ASYNC_ENTRY_MCAST_ADDR_ADD,
	BCM_ASYNC_ENTRY_MCAST_ADDR_ADD_W_L2MCINDEX,
	BCM_ASYNC_ENTRY_MCAST_ADDR_REMOVE,
	BCM_ASYNC_ENTRY_MCAST_ADDR_REMOVE_W_L2MCINDEX,
	BCM_ASYNC_ENTRY_MCAST_BITMAP_DEL,
	BCM_ASYNC_ENTRY_MCAST_BITMAP_GET,
	BCM_ASYNC_ENTRY_MCAST_BITMAP_MAX_GET,
	BCM_ASYNC_ENTRY_MCAST_BITMAP_SET,
	BCM_ASYNC_ENTRY_MCAST_INIT,
	BCM_ASYNC_ENTRY_MCAST_JOIN,
	BCM_ASYNC_ENTRY_MCAST_LEAVE,
	BCM_ASYNC_ENTRY_MCAST_PORT_ADD,
	BCM_ASYNC_ENTRY_MCAST_PORT_GET,
	BCM_ASYNC_ENTRY_MCAST_PORT_REMOVE,
	BCM_ASYNC_ENTRY_MIM_DETACH,
	BCM_ASYNC_ENTRY_MIM_INIT,
	BCM_ASYNC_ENTRY_MIM_LOOKUP_ID_STAT_ATTACH,
	BCM_ASYNC_ENTRY_MIM_LOOKUP_ID_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_MIM_LOOKUP_ID_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_MIM_LOOKUP_ID_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_MIM_LOOKUP_ID_STAT_DETACH,
	BCM_ASYNC_ENTRY_MIM_LOOKUP_ID_STAT_ID_GET,
	BCM_ASYNC_ENTRY_MIM_PORT_ADD,
	BCM_ASYNC_ENTRY_MIM_PORT_DELETE,
	BCM_ASYNC_ENTRY_MIM_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_MIM_PORT_GET,
	BCM_ASYNC_ENTRY_MIM_PORT_GET_ALL,
	BCM_ASYNC_ENTRY_MIM_VPN_CREATE,
	BCM_ASYNC_ENTRY_MIM_VPN_DESTROY,
	BCM_ASYNC_ENTRY_MIM_VPN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_MIM_VPN_GET,
	BCM_ASYNC_ENTRY_MIM_VPN_STAT_ATTACH,
	BCM_ASYNC_ENTRY_MIM_VPN_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_MIM_VPN_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_MIM_VPN_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_MIM_VPN_STAT_DETACH,
	BCM_ASYNC_ENTRY_MIM_VPN_STAT_ID_GET,
	BCM_ASYNC_ENTRY_MIM_VPN_TRAVERSE,
	BCM_ASYNC_ENTRY_MIRROR_DESTINATION_COUNT_COMMAND_GET,
	BCM_ASYNC_ENTRY_MIRROR_DESTINATION_COUNT_COMMAND_SET,
	BCM_ASYNC_ENTRY_MIRROR_DESTINATION_CREATE,
	BCM_ASYNC_ENTRY_MIRROR_DESTINATION_DESTROY,
	BCM_ASYNC_ENTRY_MIRROR_DESTINATION_GET,
	BCM_ASYNC_ENTRY_MIRROR_DESTINATION_TRAVERSE,
	BCM_ASYNC_ENTRY_MIRROR_EGRESS_GET,
	BCM_ASYNC_ENTRY_MIRROR_EGRESS_SET,
	BCM_ASYNC_ENTRY_MIRROR_GLOBAL_TRUNCATE_GET,
	BCM_ASYNC_ENTRY_MIRROR_GLOBAL_TRUNCATE_SET,
	BCM_ASYNC_ENTRY_MIRROR_HEADER_INFO_GET,
	BCM_ASYNC_ENTRY_MIRROR_HEADER_INFO_SET,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_GET,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_MOD_EVENT_GROUP_CREATE,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_MOD_EVENT_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_MOD_EVENT_GROUP_GET,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_MOD_EVENT_GROUP_GET_ALL,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_MOD_EVENT_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_MOD_EVENT_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_MOD_EVENT_PROFILE_GET,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_MOD_EVENT_PROFILE_GET_ALL,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_MOD_EVENT_PROFILE_GROUP_ADD,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_MOD_EVENT_PROFILE_GROUP_DELETE,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_MOD_EVENT_PROFILE_GROUP_GET,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_MOD_EVENT_PROFILE_GROUP_GET_ALL,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_SET,
	BCM_ASYNC_ENTRY_MIRROR_INIT,
	BCM_ASYNC_ENTRY_MIRROR_MODE_GET,
	BCM_ASYNC_ENTRY_MIRROR_MODE_SET,
	BCM_ASYNC_ENTRY_MIRROR_MULTI_DIP_GROUP_IPV4_CREATE,
	BCM_ASYNC_ENTRY_MIRROR_MULTI_DIP_GROUP_IPV4_DESTROY,
	BCM_ASYNC_ENTRY_MIRROR_MULTI_DIP_GROUP_IPV4_GET,
	BCM_ASYNC_ENTRY_MIRROR_MULTI_DIP_GROUP_IPV4_GET_ALL,
	BCM_ASYNC_ENTRY_MIRROR_MULTI_DIP_GROUP_IPV6_CREATE,
	BCM_ASYNC_ENTRY_MIRROR_MULTI_DIP_GROUP_IPV6_DESTROY,
	BCM_ASYNC_ENTRY_MIRROR_MULTI_DIP_GROUP_IPV6_GET,
	BCM_ASYNC_ENTRY_MIRROR_MULTI_DIP_GROUP_IPV6_GET_ALL,
	BCM_ASYNC_ENTRY_MIRROR_PAYLOAD_ZERO_CONTROL_MULTI_GET,
	BCM_ASYNC_ENTRY_MIRROR_PAYLOAD_ZERO_CONTROL_MULTI_SET,
	BCM_ASYNC_ENTRY_MIRROR_PAYLOAD_ZERO_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_MIRROR_PAYLOAD_ZERO_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DEST_ADD,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DEST_DELETE,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DEST_DELETE_ALL,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DEST_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DESTINATION_ADD,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DESTINATION_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_INFO_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_INFO_SET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_SET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_TO_RCY_PORT_MAP_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_TO_RCY_PORT_MAP_SET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_DEST_ADD,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_DEST_DELETE,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_DEST_DELETE_ALL,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_DEST_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_DESTINATION_ADD,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_DESTINATION_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_SET,
	BCM_ASYNC_ENTRY_MIRROR_SAMPLE_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_MIRROR_SAMPLE_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_MIRROR_SAMPLE_PROFILE_GET,
	BCM_ASYNC_ENTRY_MIRROR_SAMPLE_PROFILE_SET,
	BCM_ASYNC_ENTRY_MIRROR_SAMPLE_STAT_ATTACH,
	BCM_ASYNC_ENTRY_MIRROR_SAMPLE_STAT_DETACH,
	BCM_ASYNC_ENTRY_MIRROR_SOURCE_DEST_ADD,
	BCM_ASYNC_ENTRY_MIRROR_SOURCE_DEST_DELETE,
	BCM_ASYNC_ENTRY_MIRROR_SOURCE_DEST_DELETE_ALL,
	BCM_ASYNC_ENTRY_MIRROR_SOURCE_DEST_GET_ALL,
	BCM_ASYNC_ENTRY_MIRROR_STAT_GET,
	BCM_ASYNC_ENTRY_MIRROR_STAT_SET,
	BCM_ASYNC_ENTRY_MIRROR_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_MIRROR_TO_GET,
	BCM_ASYNC_ENTRY_MIRROR_TO_PBMP_GET,
	BCM_ASYNC_ENTRY_MIRROR_TO_PBMP_SET,
	BCM_ASYNC_ENTRY_MIRROR_TO_SET,
	BCM_ASYNC_ENTRY_MIRROR_TRUNCATE_LENGTH_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_MIRROR_TRUNCATE_LENGTH_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_MIRROR_TRUNCATE_LENGTH_PROFILE_GET,
	BCM_ASYNC_ENTRY_MIRROR_VLAN_GET,
	BCM_ASYNC_ENTRY_MIRROR_VLAN_SET,
	BCM_ASYNC_ENTRY_MPLS_CLEANUP,
	BCM_ASYNC_ENTRY_MPLS_CONTROL_PKT_ADD,
	BCM_ASYNC_ENTRY_MPLS_CONTROL_PKT_DELETE,
	BCM_ASYNC_ENTRY_MPLS_CONTROL_PKT_DELETE_ALL,
	BCM_ASYNC_ENTRY_MPLS_CONTROL_PKT_GET,
	BCM_ASYNC_ENTRY_MPLS_CONTROL_PKT_TRAVERSE,
	BCM_ASYNC_ENTRY_MPLS_ENTROPY_IDENTIFIER_ADD,
	BCM_ASYNC_ENTRY_MPLS_ENTROPY_IDENTIFIER_DELETE,
	BCM_ASYNC_ENTRY_MPLS_ENTROPY_IDENTIFIER_DELETE_ALL,
	BCM_ASYNC_ENTRY_MPLS_ENTROPY_IDENTIFIER_GET,
	BCM_ASYNC_ENTRY_MPLS_ENTROPY_IDENTIFIER_TRAVERSE,
	BCM_ASYNC_ENTRY_MPLS_ESI_ENCAP_ADD,
	BCM_ASYNC_ENTRY_MPLS_ESI_ENCAP_DELETE,
	BCM_ASYNC_ENTRY_MPLS_ESI_ENCAP_GET,
	BCM_ASYNC_ENTRY_MPLS_ESI_ENCAP_TRAVERSE,
	BCM_ASYNC_ENTRY_MPLS_EXP_MAP_CREATE,
	BCM_ASYNC_ENTRY_MPLS_EXP_MAP_DESTROY,
	BCM_ASYNC_ENTRY_MPLS_EXP_MAP_GET,
	BCM_ASYNC_ENTRY_MPLS_EXP_MAP_SET,
	BCM_ASYNC_ENTRY_MPLS_INIT,
	BCM_ASYNC_ENTRY_MPLS_LABEL_FLEXCTR_OBJECT_GET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_FLEXCTR_OBJECT_SET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_ATTACH,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_CLEAR,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_DETACH,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_GET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_GET32,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_ID_GET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_MPLS_PORT_ADD,
	BCM_ASYNC_ENTRY_MPLS_PORT_DELETE,
	BCM_ASYNC_ENTRY_MPLS_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_MPLS_PORT_GET,
	BCM_ASYNC_ENTRY_MPLS_PORT_GET_ALL,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_ATTACH,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_DETACH,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_GET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_GET32,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_ID_GET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_SET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_SET32,
	BCM_ASYNC_ENTRY_MPLS_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_MPLS_RANGE_ACTION_ADD,
	BCM_ASYNC_ENTRY_MPLS_RANGE_ACTION_GET,
	BCM_ASYNC_ENTRY_MPLS_RANGE_ACTION_REMOVE,
	BCM_ASYNC_ENTRY_MPLS_SPECIAL_LABEL_EGRESS_ADD,
	BCM_ASYNC_ENTRY_MPLS_SPECIAL_LABEL_EGRESS_DELETE,
	BCM_ASYNC_ENTRY_MPLS_SPECIAL_LABEL_EGRESS_DELETE_ALL,
	BCM_ASYNC_ENTRY_MPLS_SPECIAL_LABEL_EGRESS_GET,
	BCM_ASYNC_ENTRY_MPLS_SPECIAL_LABEL_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_MPLS_SPECIAL_LABEL_IDENTIFIER_ADD,
	BCM_ASYNC_ENTRY_MPLS_SPECIAL_LABEL_IDENTIFIER_DELETE,
	BCM_ASYNC_ENTRY_MPLS_SPECIAL_LABEL_IDENTIFIER_DELETE_ALL,
	BCM_ASYNC_ENTRY_MPLS_SPECIAL_LABEL_IDENTIFIER_GET,
	BCM_ASYNC_ENTRY_MPLS_SPECIAL_LABEL_IDENTIFIER_TRAVERSE,
	BCM_ASYNC_ENTRY_MPLS_SPECIAL_LABEL_PUSH_ACTION_GET,
	BCM_ASYNC_ENTRY_MPLS_SPECIAL_LABEL_PUSH_ACTION_SET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_ENCAP_CREATE,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_ENCAP_DESTROY,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_ENCAP_DESTROY_ALL,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_ENCAP_GET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_CLEAR,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_CLEAR_ALL,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_CREATE,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_GET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_SET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_LABEL_COUNTER_ID_DETACH,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_LABEL_COUNTER_ID_NUM_GET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_LABEL_COUNTER_ID_STAT_GET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_LABEL_COUNTER_ID_STAT_SET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_LABEL_COUNTER_ID_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_STAT_ATTACH,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_STAT_DETACH,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_STAT_ID_GET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_ADD,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_CREATE,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_DELETE,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_DELETE_ALL,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_GET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_TRAVERSE,
	BCM_ASYNC_ENTRY_MPLS_VPN_ID_CREATE,
	BCM_ASYNC_ENTRY_MPLS_VPN_ID_DESTROY,
	BCM_ASYNC_ENTRY_MPLS_VPN_ID_DESTROY_ALL,
	BCM_ASYNC_ENTRY_MPLS_VPN_ID_GET,
	BCM_ASYNC_ENTRY_MPLS_VPN_TRAVERSE,
	BCM_ASYNC_ENTRY_MULTICAST_ADD,
	BCM_ASYNC_ENTRY_MULTICAST_CONTROL_GET,
	BCM_ASYNC_ENTRY_MULTICAST_CONTROL_SET,
	BCM_ASYNC_ENTRY_MULTICAST_CREATE,
	BCM_ASYNC_ENTRY_MULTICAST_DELETE,
	BCM_ASYNC_ENTRY_MULTICAST_DESTROY,
	BCM_ASYNC_ENTRY_MULTICAST_DETACH,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_ADD,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_DELETE,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_DELETE_ALL,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_GET,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_OBJECT_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_SET,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_SUBSCRIBER_ADD,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_SUBSCRIBER_DELETE,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_SUBSCRIBER_GET,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_SUBSCRIBER_QOS_MAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_SUBSCRIBER_QOS_MAP_SET,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_SUBSCRIBER_SET,
	BCM_ASYNC_ENTRY_MULTICAST_ENCAP_CREATE,
	BCM_ASYNC_ENTRY_MULTICAST_ENCAP_DESTROY,
	BCM_ASYNC_ENTRY_MULTICAST_ENCAP_EXTENSION_CREATE,
	BCM_ASYNC_ENTRY_MULTICAST_ENCAP_EXTENSION_DELETE_ALL,
	BCM_ASYNC_ENTRY_MULTICAST_ENCAP_EXTENSION_DESTROY,
	BCM_ASYNC_ENTRY_MULTICAST_ENCAP_EXTENSION_GET,
	BCM_ASYNC_ENTRY_MULTICAST_ENCAP_EXTENSION_TRAVERSE,
	BCM_ASYNC_ENTRY_MULTICAST_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_EXTENDER_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_FABRIC_DISTRIBUTION_GET,
	BCM_ASYNC_ENTRY_MULTICAST_FABRIC_DISTRIBUTION_SET,
	BCM_ASYNC_ENTRY_MULTICAST_GET,
	BCM_ASYNC_ENTRY_MULTICAST_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_MULTICAST_GROUP_FREE_RANGE_GET,
	BCM_ASYNC_ENTRY_MULTICAST_GROUP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_GROUP_IS_FREE,
	BCM_ASYNC_ENTRY_MULTICAST_GROUP_TRAVERSE,
	BCM_ASYNC_ENTRY_MULTICAST_INGRESS_ADD,
	BCM_ASYNC_ENTRY_MULTICAST_INGRESS_DELETE,
	BCM_ASYNC_ENTRY_MULTICAST_INGRESS_DELETE_ALL,
	BCM_ASYNC_ENTRY_MULTICAST_INGRESS_GET,
	BCM_ASYNC_ENTRY_MULTICAST_INGRESS_SET,
	BCM_ASYNC_ENTRY_MULTICAST_INIT,
	BCM_ASYNC_ENTRY_MULTICAST_L2_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_L2GRE_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_L3_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_MAC_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_MIM_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_MULTI_ALLOC,
	BCM_ASYNC_ENTRY_MULTICAST_MULTI_FREE,
	BCM_ASYNC_ENTRY_MULTICAST_NIV_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_REPL_GET,
	BCM_ASYNC_ENTRY_MULTICAST_REPL_SET,
	BCM_ASYNC_ENTRY_MULTICAST_SET,
	BCM_ASYNC_ENTRY_MULTICAST_STAT_CONTROL_GET,
	BCM_ASYNC_ENTRY_MULTICAST_STAT_CONTROL_SET,
	BCM_ASYNC_ENTRY_MULTICAST_SUBPORT_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_TRILL_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_VLAN_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_VPLS_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_VXLAN_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_WLAN_ENCAP_GET,
	BCM_ASYNC_ENTRY_NIV_CLEANUP,
	BCM_ASYNC_ENTRY_NIV_EGRESS_ADD,
	BCM_ASYNC_ENTRY_NIV_EGRESS_DELETE,
	BCM_ASYNC_ENTRY_NIV_EGRESS_DELETE_ALL,
	BCM_ASYNC_ENTRY_NIV_EGRESS_GET,
	BCM_ASYNC_ENTRY_NIV_EGRESS_SET,
	BCM_ASYNC_ENTRY_NIV_FORWARD_ADD,
	BCM_ASYNC_ENTRY_NIV_FORWARD_DELETE,
	BCM_ASYNC_ENTRY_NIV_FORWARD_DELETE_ALL,
	BCM_ASYNC_ENTRY_NIV_FORWARD_GET,
	BCM_ASYNC_ENTRY_NIV_FORWARD_TRAVERSE,
	BCM_ASYNC_ENTRY_NIV_INIT,
	BCM_ASYNC_ENTRY_NIV_PORT_ADD,
	BCM_ASYNC_ENTRY_NIV_PORT_DELETE,
	BCM_ASYNC_ENTRY_NIV_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_NIV_PORT_GET,
	BCM_ASYNC_ENTRY_NIV_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_OAM_AIS_ADD,
	BCM_ASYNC_ENTRY_OAM_AIS_DELETE,
	BCM_ASYNC_ENTRY_OAM_AIS_GET,
	BCM_ASYNC_ENTRY_OAM_CONTROL_GET,
	BCM_ASYNC_ENTRY_OAM_CONTROL_INDEXED_GET,
	BCM_ASYNC_ENTRY_OAM_CONTROL_INDEXED_SET,
	BCM_ASYNC_ENTRY_OAM_CONTROL_SET,
	BCM_ASYNC_ENTRY_OAM_CSF_ADD,
	BCM_ASYNC_ENTRY_OAM_CSF_DELETE,
	BCM_ASYNC_ENTRY_OAM_CSF_GET,
	BCM_ASYNC_ENTRY_OAM_DELAY_ADD,
	BCM_ASYNC_ENTRY_OAM_DELAY_DELETE,
	BCM_ASYNC_ENTRY_OAM_DELAY_GET,
	BCM_ASYNC_ENTRY_OAM_DETACH,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_ACTION_SET,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_CREATE,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_DESTROY,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_DESTROY_ALL,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_EGRESS_INTF_EGRESS_ATTACH,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_EGRESS_INTF_EGRESS_ATTACH_GET,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_EGRESS_INTF_EGRESS_DETACH,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_FAULTS_MULTI_GET,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_GET,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_GPORT_EGRESS_ATTACH,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_GPORT_EGRESS_ATTACH_GET,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_GPORT_EGRESS_DETACH,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_TRAVERSE,
	BCM_ASYNC_ENTRY_OAM_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_OAM_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_OAM_GROUP_CREATE,
	BCM_ASYNC_ENTRY_OAM_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_OAM_GROUP_DESTROY_ALL,
	BCM_ASYNC_ENTRY_OAM_GROUP_GET,
	BCM_ASYNC_ENTRY_OAM_GROUP_TRAVERSE,
	BCM_ASYNC_ENTRY_OAM_INIT,
	BCM_ASYNC_ENTRY_OAM_LIF_PROFILE_GET,
	BCM_ASYNC_ENTRY_OAM_LIF_PROFILE_SET,
	BCM_ASYNC_ENTRY_OAM_LOOKUP_ENABLE_GET,
	BCM_ASYNC_ENTRY_OAM_LOOKUP_ENABLE_MULTI_SET,
	BCM_ASYNC_ENTRY_OAM_LOOKUP_ENABLE_SET,
	BCM_ASYNC_ENTRY_OAM_LOOPBACK_ADD,
	BCM_ASYNC_ENTRY_OAM_LOOPBACK_DELETE,
	BCM_ASYNC_ENTRY_OAM_LOOPBACK_GET,
	BCM_ASYNC_ENTRY_OAM_LOSS_ADD,
	BCM_ASYNC_ENTRY_OAM_LOSS_DELETE,
	BCM_ASYNC_ENTRY_OAM_LOSS_GET,
	BCM_ASYNC_ENTRY_OAM_MPLS_TP_CHANNEL_TYPE_RX_DELETE,
	BCM_ASYNC_ENTRY_OAM_MPLS_TP_CHANNEL_TYPE_RX_GET,
	BCM_ASYNC_ENTRY_OAM_MPLS_TP_CHANNEL_TYPE_RX_SET,
	BCM_ASYNC_ENTRY_OAM_MPLS_TP_CHANNEL_TYPE_TX_DELETE,
	BCM_ASYNC_ENTRY_OAM_MPLS_TP_CHANNEL_TYPE_TX_GET,
	BCM_ASYNC_ENTRY_OAM_MPLS_TP_CHANNEL_TYPE_TX_SET,
	BCM_ASYNC_ENTRY_OAM_OPCODE_GROUP_GET,
	BCM_ASYNC_ENTRY_OAM_OPCODE_GROUP_SET,
	BCM_ASYNC_ENTRY_OAM_OPCODE_MAP_GET,
	BCM_ASYNC_ENTRY_OAM_OPCODE_MAP_SET,
	BCM_ASYNC_ENTRY_OAM_OPCODES_COUNT_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_OAM_OPCODES_COUNT_PROFILE_DELETE,
	BCM_ASYNC_ENTRY_OAM_OPCODES_COUNT_PROFILE_GET,
	BCM_ASYNC_ENTRY_OAM_OPCODES_COUNT_PROFILE_SET,
	BCM_ASYNC_ENTRY_OAM_PERFORMANCE_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_OAM_PERFORMANCE_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_OAM_PM_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_OAM_PM_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_OAM_PM_PROFILE_ATTACH,
	BCM_ASYNC_ENTRY_OAM_PM_PROFILE_ATTACH_GET,
	BCM_ASYNC_ENTRY_OAM_PM_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_OAM_PM_PROFILE_DELETE,
	BCM_ASYNC_ENTRY_OAM_PM_PROFILE_DELETE_ALL,
	BCM_ASYNC_ENTRY_OAM_PM_PROFILE_DETACH,
	BCM_ASYNC_ENTRY_OAM_PM_PROFILE_GET,
	BCM_ASYNC_ENTRY_OAM_PM_PROFILE_TRAVERSE,
	BCM_ASYNC_ENTRY_OAM_PM_RAW_DATA_READ_DONE,
	BCM_ASYNC_ENTRY_OAM_PM_STATS_GET,
	BCM_ASYNC_ENTRY_OAM_PROFILE_ACTION_GET,
	BCM_ASYNC_ENTRY_OAM_PROFILE_ACTION_SET,
	BCM_ASYNC_ENTRY_OAM_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_OAM_PROFILE_DELETE,
	BCM_ASYNC_ENTRY_OAM_PROFILE_ID_GET_BY_TYPE,
	BCM_ASYNC_ENTRY_OAM_PROTECTION_PACKET_HEADER_GET,
	BCM_ASYNC_ENTRY_OAM_PROTECTION_PACKET_HEADER_SET,
	BCM_ASYNC_ENTRY_OAM_PSC_ADD,
	BCM_ASYNC_ENTRY_OAM_PSC_DELETE,
	BCM_ASYNC_ENTRY_OAM_PSC_GET,
	BCM_ASYNC_ENTRY_OAM_PW_STATUS_ADD,
	BCM_ASYNC_ENTRY_OAM_PW_STATUS_DELETE,
	BCM_ASYNC_ENTRY_OAM_PW_STATUS_GET,
	BCM_ASYNC_ENTRY_OAM_REFLECTOR_ENCAP_CREATE,
	BCM_ASYNC_ENTRY_OAM_REFLECTOR_ENCAP_DESTROY,
	BCM_ASYNC_ENTRY_OAM_SD_SF_DETECTION_ADD,
	BCM_ASYNC_ENTRY_OAM_SD_SF_DETECTION_DELETE,
	BCM_ASYNC_ENTRY_OAM_SD_SF_DETECTION_GET,
	BCM_ASYNC_ENTRY_OAM_TOD_LEAP_CONTROL_GET,
	BCM_ASYNC_ENTRY_OAM_TOD_LEAP_CONTROL_SET,
	BCM_ASYNC_ENTRY_OAM_TRUNK_PORTS_ADD,
	BCM_ASYNC_ENTRY_OAM_TRUNK_PORTS_DELETE,
	BCM_ASYNC_ENTRY_OAM_TRUNK_PORTS_GET,
	BCM_ASYNC_ENTRY_OAM_TST_RX_ADD,
	BCM_ASYNC_ENTRY_OAM_TST_RX_DELETE,
	BCM_ASYNC_ENTRY_OAM_TST_RX_GET,
	BCM_ASYNC_ENTRY_OAM_TST_TX_ADD,
	BCM_ASYNC_ENTRY_OAM_TST_TX_DELETE,
	BCM_ASYNC_ENTRY_OAM_TST_TX_GET,
	BCM_ASYNC_ENTRY_OAM_UPMEP_COSQ_GET,
	BCM_ASYNC_ENTRY_OAM_UPMEP_COSQ_SET,
	BCM_ASYNC_ENTRY_OAM_Y_1711_ALARM_ADD,
	BCM_ASYNC_ENTRY_OAM_Y_1711_ALARM_DELETE,
	BCM_ASYNC_ENTRY_OAM_Y_1711_ALARM_GET,
	BCM_ASYNC_ENTRY_OBM_CB_REGISTER,
	BCM_ASYNC_ENTRY_OBM_CB_UNREGISTER,
	BCM_ASYNC_ENTRY_OBM_PORT_MAX_USAGE_MODE_GET,
	BCM_ASYNC_ENTRY_OBM_PORT_MAX_USAGE_MODE_SET,
	BCM_ASYNC_ENTRY_OBM_PORT_PRI_TRAFFIC_CLASS_MAPPING_GET,
	BCM_ASYNC_ENTRY_OBM_PORT_PRI_TRAFFIC_CLASS_MAPPING_SET,
	BCM_ASYNC_ENTRY_OBM_TRAFFIC_CLASS_PFC_PRIORITY_MAPPING_GET,
	BCM_ASYNC_ENTRY_OBM_TRAFFIC_CLASS_PFC_PRIORITY_MAPPING_SET,
	BCM_ASYNC_ENTRY_OOB_FC_RX_CONFIG_GET,
	BCM_ASYNC_ENTRY_OOB_FC_RX_CONFIG_SET,
	BCM_ASYNC_ENTRY_OOB_FC_RX_PORT_OFFSET_GET,
	BCM_ASYNC_ENTRY_OOB_FC_RX_PORT_TC_MAPPING_GET,
	BCM_ASYNC_ENTRY_OOB_FC_RX_PORT_TC_MAPPING_MULTI_GET,
	BCM_ASYNC_ENTRY_OOB_FC_RX_PORT_TC_MAPPING_MULTI_SET,
	BCM_ASYNC_ENTRY_OOB_FC_RX_PORT_TC_MAPPING_SET,
	BCM_ASYNC_ENTRY_OOB_FC_TX_CONFIG_GET,
	BCM_ASYNC_ENTRY_OOB_FC_TX_CONFIG_SET,
	BCM_ASYNC_ENTRY_OOB_FC_TX_INFO_GET,
	BCM_ASYNC_ENTRY_OOB_FC_TX_PORT_MAPPING_GET,
	BCM_ASYNC_ENTRY_OOB_FC_TX_PORT_MAPPING_SET,
	BCM_ASYNC_ENTRY_OOB_FC_TX_QUEUE_PROFILE_GET,
	BCM_ASYNC_ENTRY_OOB_FC_TX_QUEUE_PROFILE_SET,
	BCM_ASYNC_ENTRY_OOB_STATS_CONFIG_GET,
	BCM_ASYNC_ENTRY_OOB_STATS_CONFIG_SET,
	BCM_ASYNC_ENTRY_OOB_STATS_POOL_MAPPING_GET,
	BCM_ASYNC_ENTRY_OOB_STATS_POOL_MAPPING_MULTI_GET,
	BCM_ASYNC_ENTRY_OOB_STATS_POOL_MAPPING_MULTI_SET,
	BCM_ASYNC_ENTRY_OOB_STATS_POOL_MAPPING_SET,
	BCM_ASYNC_ENTRY_OOB_STATS_QUEUE_MAPPING_GET,
	BCM_ASYNC_ENTRY_OOB_STATS_QUEUE_MAPPING_MULTI_GET,
	BCM_ASYNC_ENTRY_OOB_STATS_QUEUE_MAPPING_MULTI_SET,
	BCM_ASYNC_ENTRY_OOB_STATS_QUEUE_MAPPING_SET,
	BCM_ASYNC_ENTRY_PKT_ALLOC,
	BCM_ASYNC_ENTRY_PKT_BLK_ALLOC,
	BCM_ASYNC_ENTRY_PKT_BLK_FREE,
	BCM_ASYNC_ENTRY_PKT_BYTE_INDEX,
	BCM_ASYNC_ENTRY_PKT_CLEAR,
	BCM_ASYNC_ENTRY_PKT_ECMP_GRP_SET,
	BCM_ASYNC_ENTRY_PKT_ECMP_MEMBER_SET,
	BCM_ASYNC_ENTRY_PKT_FLAGS_INIT,
	BCM_ASYNC_ENTRY_PKT_FLAGS_LEN_SETUP,
	BCM_ASYNC_ENTRY_PKT_FREE,
	BCM_ASYNC_ENTRY_PKT_MEMCPY,
	BCM_ASYNC_ENTRY_PKT_NEXTHOP_SET,
	BCM_ASYNC_ENTRY_PKT_RX_ALLOC,
	BCM_ASYNC_ENTRY_PKT_RX_FREE,
	BCM_ASYNC_ENTRY_PKTIO_ALLOC,
	BCM_ASYNC_ENTRY_PKTIO_CLAIM,
	BCM_ASYNC_ENTRY_PKTIO_CLEANUP,
	BCM_ASYNC_ENTRY_PKTIO_FILTER_CREATE,
	BCM_ASYNC_ENTRY_PKTIO_FILTER_DESTROY,
	BCM_ASYNC_ENTRY_PKTIO_FILTER_GET,
	BCM_ASYNC_ENTRY_PKTIO_FILTER_TRAVERSE,
	BCM_ASYNC_ENTRY_PKTIO_FREE,
	BCM_ASYNC_ENTRY_PKTIO_INIT,
	BCM_ASYNC_ENTRY_PKTIO_NETIF_CREATE,
	BCM_ASYNC_ENTRY_PKTIO_NETIF_DESTROY,
	BCM_ASYNC_ENTRY_PKTIO_NETIF_GET,
	BCM_ASYNC_ENTRY_PKTIO_NETIF_LINK_STATUS_SET,
	BCM_ASYNC_ENTRY_PKTIO_NETIF_TRAVERSE,
	BCM_ASYNC_ENTRY_PKTIO_PKT_DATA_GET,
	BCM_ASYNC_ENTRY_PKTIO_PMD_FID_SUPPORT_GET,
	BCM_ASYNC_ENTRY_PKTIO_PMD_FIELD_GET,
	BCM_ASYNC_ENTRY_PKTIO_PMD_FIELD_SET,
	BCM_ASYNC_ENTRY_PKTIO_PMD_PKT_FORMAT_GET,
	BCM_ASYNC_ENTRY_PKTIO_PMD_REASONS_GET,
	BCM_ASYNC_ENTRY_PKTIO_PMD_SET,
	BCM_ASYNC_ENTRY_PKTIO_PULL,
	BCM_ASYNC_ENTRY_PKTIO_PUSH,
	BCM_ASYNC_ENTRY_PKTIO_PUT,
	BCM_ASYNC_ENTRY_PKTIO_RAW_PMD_FID_SUPPORT_GET,
	BCM_ASYNC_ENTRY_PKTIO_RAW_PMD_FIELD_GET,
	BCM_ASYNC_ENTRY_PKTIO_RAW_PMD_FIELD_SET,
	BCM_ASYNC_ENTRY_PKTIO_RAW_PMD_REASONS_GET,
	BCM_ASYNC_ENTRY_PKTIO_RAW_PMD_REASONS_SET,
	BCM_ASYNC_ENTRY_PKTIO_RESERVE,
	BCM_ASYNC_ENTRY_PKTIO_RX_REGISTER,
	BCM_ASYNC_ENTRY_PKTIO_RX_UNREGISTER,
	BCM_ASYNC_ENTRY_PKTIO_TRACE_COUNTER_GET,
	BCM_ASYNC_ENTRY_PKTIO_TRACE_DATA_COLLECT,
	BCM_ASYNC_ENTRY_PKTIO_TRACE_DOP_DATA_COLLECT,
	BCM_ASYNC_ENTRY_PKTIO_TRACE_DROP_REASONS_GET,
	BCM_ASYNC_ENTRY_PKTIO_TRACE_FIELD_GET,
	BCM_ASYNC_ENTRY_PKTIO_TRACE_TX,
	BCM_ASYNC_ENTRY_PKTIO_TRIM,
	BCM_ASYNC_ENTRY_PKTIO_TX,
	BCM_ASYNC_ENTRY_POLICER_ACTION_ADD,
	BCM_ASYNC_ENTRY_POLICER_ACTION_ATTACH,
	BCM_ASYNC_ENTRY_POLICER_ACTION_ATTACH_GET,
	BCM_ASYNC_ENTRY_POLICER_ACTION_CREATE,
	BCM_ASYNC_ENTRY_POLICER_ACTION_DESTROY,
	BCM_ASYNC_ENTRY_POLICER_ACTION_DETACH,
	BCM_ASYNC_ENTRY_POLICER_ACTION_GET,
	BCM_ASYNC_ENTRY_POLICER_AGGREGATE_GROUP_CREATE,
	BCM_ASYNC_ENTRY_POLICER_COLOR_DECISION_GET,
	BCM_ASYNC_ENTRY_POLICER_COLOR_DECISION_SET,
	BCM_ASYNC_ENTRY_POLICER_COLOR_RESOLUTION_GET,
	BCM_ASYNC_ENTRY_POLICER_COLOR_RESOLUTION_SET,
	BCM_ASYNC_ENTRY_POLICER_CONTROL_GET,
	BCM_ASYNC_ENTRY_POLICER_CONTROL_SET,
	BCM_ASYNC_ENTRY_POLICER_CREATE,
	BCM_ASYNC_ENTRY_POLICER_CUSTOM_GROUP_CREATE,
	BCM_ASYNC_ENTRY_POLICER_CUSTOM_GROUP_ID_COPY,
	BCM_ASYNC_ENTRY_POLICER_CUSTOM_GROUP_ID_CREATE,
	BCM_ASYNC_ENTRY_POLICER_DATABASE_CREATE,
	BCM_ASYNC_ENTRY_POLICER_DATABASE_DESTROY,
	BCM_ASYNC_ENTRY_POLICER_DATABASE_ENABLE_GET,
	BCM_ASYNC_ENTRY_POLICER_DATABASE_ENABLE_SET,
	BCM_ASYNC_ENTRY_POLICER_DESTROY,
	BCM_ASYNC_ENTRY_POLICER_DESTROY_ALL,
	BCM_ASYNC_ENTRY_POLICER_ENGINE_DATABASE_ATTACH,
	BCM_ASYNC_ENTRY_POLICER_ENGINE_DATABASE_DETACH,
	BCM_ASYNC_ENTRY_POLICER_ENGINE_DATABASE_GET,
	BCM_ASYNC_ENTRY_POLICER_ENVELOP_CREATE,
	BCM_ASYNC_ENTRY_POLICER_ENVELOP_GROUP_CREATE,
	BCM_ASYNC_ENTRY_POLICER_EXPANSION_GROUPS_GET,
	BCM_ASYNC_ENTRY_POLICER_EXPANSION_GROUPS_SET,
	BCM_ASYNC_ENTRY_POLICER_GET,
	BCM_ASYNC_ENTRY_POLICER_GLOBAL_METER_CONFIG_GET,
	BCM_ASYNC_ENTRY_POLICER_GLOBAL_METER_CONFIG_SET,
	BCM_ASYNC_ENTRY_POLICER_GROUP_CREATE,
	BCM_ASYNC_ENTRY_POLICER_GROUP_CREATE_WITH_MAP,
	BCM_ASYNC_ENTRY_POLICER_GROUP_GET,
	BCM_ASYNC_ENTRY_POLICER_GROUP_MODE_ID_CREATE,
	BCM_ASYNC_ENTRY_POLICER_GROUP_MODE_ID_DESTROY,
	BCM_ASYNC_ENTRY_POLICER_GROUP_MODE_ID_GET,
	BCM_ASYNC_ENTRY_POLICER_INIT,
	BCM_ASYNC_ENTRY_POLICER_PACKET_COUNTER_GET32,
	BCM_ASYNC_ENTRY_POLICER_PACKET_RESET_COUNTER_GET32,
	BCM_ASYNC_ENTRY_POLICER_PRIMARY_COLOR_RESOLUTION_GET,
	BCM_ASYNC_ENTRY_POLICER_PRIMARY_COLOR_RESOLUTION_SET,
	BCM_ASYNC_ENTRY_POLICER_SET,
	BCM_ASYNC_ENTRY_POLICER_STAT_ENABLE_GET,
	BCM_ASYNC_ENTRY_POLICER_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_POLICER_STAT_GET,
	BCM_ASYNC_ENTRY_POLICER_STAT_GET32,
	BCM_ASYNC_ENTRY_POLICER_STAT_SET,
	BCM_ASYNC_ENTRY_POLICER_STAT_SET32,
	BCM_ASYNC_ENTRY_POLICER_TRAVERSE,
	BCM_ASYNC_ENTRY_PORT_ABILITY_ADVERT_GET,
	BCM_ASYNC_ENTRY_PORT_ABILITY_ADVERT_SET,
	BCM_ASYNC_ENTRY_PORT_ABILITY_GET,
	BCM_ASYNC_ENTRY_PORT_ABILITY_LOCAL_GET,
	BCM_ASYNC_ENTRY_PORT_ABILITY_REMOTE_GET,
	BCM_ASYNC_ENTRY_PORT_ADD,
	BCM_ASYNC_ENTRY_PORT_ADVERT_GET,
	BCM_ASYNC_ENTRY_PORT_ADVERT_REMOTE_GET,
	BCM_ASYNC_ENTRY_PORT_ADVERT_SET,
	BCM_ASYNC_ENTRY_PORT_AUTONEG_ABILITY_ADVERT_GET,
	BCM_ASYNC_ENTRY_PORT_AUTONEG_ABILITY_ADVERT_SET,
	BCM_ASYNC_ENTRY_PORT_AUTONEG_ABILITY_REMOTE_GET,
	BCM_ASYNC_ENTRY_PORT_AUTONEG_GET,
	BCM_ASYNC_ENTRY_PORT_AUTONEG_SET,
	BCM_ASYNC_ENTRY_PORT_BPDU_ENABLE_GET,
	BCM_ASYNC_ENTRY_PORT_BPDU_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_BUFFER_PBMP_GET,
	BCM_ASYNC_ENTRY_PORT_CABLE_DIAG,
	BCM_ASYNC_ENTRY_PORT_CFI_COLOR_GET,
	BCM_ASYNC_ENTRY_PORT_CFI_COLOR_SET,
	BCM_ASYNC_ENTRY_PORT_CLASS_GET,
	BCM_ASYNC_ENTRY_PORT_CLASS_SET,
	BCM_ASYNC_ENTRY_PORT_CLEAR,
	BCM_ASYNC_ENTRY_PORT_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_CONFIG_PHY_OAM_GET,
	BCM_ASYNC_ENTRY_PORT_CONFIG_PHY_OAM_SET,
	BCM_ASYNC_ENTRY_PORT_CONGESTION_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_CONGESTION_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_CONGESTION_GET,
	BCM_ASYNC_ENTRY_PORT_CONGESTION_SET,
	BCM_ASYNC_ENTRY_PORT_CONTROL_GET,
	BCM_ASYNC_ENTRY_PORT_CONTROL_PHY_OAM_GET,
	BCM_ASYNC_ENTRY_PORT_CONTROL_PHY_OAM_SET,
	BCM_ASYNC_ENTRY_PORT_CONTROL_PHY_TIMESYNC_GET,
	BCM_ASYNC_ENTRY_PORT_CONTROL_PHY_TIMESYNC_SET,
	BCM_ASYNC_ENTRY_PORT_CONTROL_SET,
	BCM_ASYNC_ENTRY_PORT_DETACH,
	BCM_ASYNC_ENTRY_PORT_DISCARD_GET,
	BCM_ASYNC_ENTRY_PORT_DISCARD_SET,
	BCM_ASYNC_ENTRY_PORT_DSCP_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_DSCP_MAP_MODE_GET,
	BCM_ASYNC_ENTRY_PORT_DSCP_MAP_MODE_SET,
	BCM_ASYNC_ENTRY_PORT_DSCP_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_DSCP_UNMAP_GET,
	BCM_ASYNC_ENTRY_PORT_DSCP_UNMAP_SET,
	BCM_ASYNC_ENTRY_PORT_DTAG_MODE_GET,
	BCM_ASYNC_ENTRY_PORT_DTAG_MODE_SET,
	BCM_ASYNC_ENTRY_PORT_DUPLEX_GET,
	BCM_ASYNC_ENTRY_PORT_DUPLEX_SET,
	BCM_ASYNC_ENTRY_PORT_E2EFC_REMOTE_MODULE_ENABLE_GET,
	BCM_ASYNC_ENTRY_PORT_E2EFC_REMOTE_MODULE_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_E2EFC_REMOTE_MODULE_TRAVERSE,
	BCM_ASYNC_ENTRY_PORT_E2EFC_REMOTE_PORT_ADD,
	BCM_ASYNC_ENTRY_PORT_E2EFC_REMOTE_PORT_DELETE,
	BCM_ASYNC_ENTRY_PORT_E2EFC_REMOTE_PORT_GET,
	BCM_ASYNC_ENTRY_PORT_E2EFC_REMOTE_PORT_SET,
	BCM_ASYNC_ENTRY_PORT_E2EFC_REMOTE_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_PORT_EGRESS_GET,
	BCM_ASYNC_ENTRY_PORT_EGRESS_SET,
	BCM_ASYNC_ENTRY_PORT_ENABLE_GET,
	BCM_ASYNC_ENTRY_PORT_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_GET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_LOCAL_GET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_SET,
	BCM_ASYNC_ENTRY_PORT_EXTENDER_MAPPING_INFO_GET,
	BCM_ASYNC_ENTRY_PORT_EXTENDER_MAPPING_INFO_SET,
	BCM_ASYNC_ENTRY_PORT_FAST_REBOOT_TRAFFIC_ENABLE,
	BCM_ASYNC_ENTRY_PORT_FAULT_GET,
	BCM_ASYNC_ENTRY_PORT_FDR_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_PORT_FDR_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_PORT_FDR_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_FDR_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_FDR_STATS_GET,
	BCM_ASYNC_ENTRY_PORT_FLEXE_FLOW_CLEAR,
	BCM_ASYNC_ENTRY_PORT_FLEXE_FLOW_SET,
	BCM_ASYNC_ENTRY_PORT_FLEXE_GROUP_CAL_ACTIVE_GET,
	BCM_ASYNC_ENTRY_PORT_FLEXE_GROUP_CAL_ACTIVE_SET,
	BCM_ASYNC_ENTRY_PORT_FLEXE_GROUP_CAL_SLOTS_GET,
	BCM_ASYNC_ENTRY_PORT_FLEXE_GROUP_CAL_SLOTS_SET,
	BCM_ASYNC_ENTRY_PORT_FLEXE_GROUP_CREATE,
	BCM_ASYNC_ENTRY_PORT_FLEXE_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_PORT_FLEXE_GROUP_GET,
	BCM_ASYNC_ENTRY_PORT_FLEXE_GROUP_PHY_ADD,
	BCM_ASYNC_ENTRY_PORT_FLEXE_GROUP_PHY_REMOVE,
	BCM_ASYNC_ENTRY_PORT_FLEXE_OAM_ALARM_GET,
	BCM_ASYNC_ENTRY_PORT_FLEXE_OAM_CONTROL_GET,
	BCM_ASYNC_ENTRY_PORT_FLEXE_OAM_CONTROL_SET,
	BCM_ASYNC_ENTRY_PORT_FLEXE_OAM_STAT_GET,
	BCM_ASYNC_ENTRY_PORT_FLEXE_OH_ALARM_GET,
	BCM_ASYNC_ENTRY_PORT_FLEXE_OH_GET,
	BCM_ASYNC_ENTRY_PORT_FLEXE_OH_SET,
	BCM_ASYNC_ENTRY_PORT_FLEXSTATE_ATTACH,
	BCM_ASYNC_ENTRY_PORT_FLEXSTATE_DETACH_WITH_ID,
	BCM_ASYNC_ENTRY_PORT_FLOOD_BLOCK_GET,
	BCM_ASYNC_ENTRY_PORT_FLOOD_BLOCK_SET,
	BCM_ASYNC_ENTRY_PORT_FLOOD_GROUP_GET,
	BCM_ASYNC_ENTRY_PORT_FLOOD_GROUP_SET,
	BCM_ASYNC_ENTRY_PORT_FORCE_DEST_GET,
	BCM_ASYNC_ENTRY_PORT_FORCE_DEST_SET,
	BCM_ASYNC_ENTRY_PORT_FORCE_FORWARD_GET,
	BCM_ASYNC_ENTRY_PORT_FORCE_FORWARD_MODE_GET,
	BCM_ASYNC_ENTRY_PORT_FORCE_FORWARD_MODE_SET,
	BCM_ASYNC_ENTRY_PORT_FORCE_FORWARD_SET,
	BCM_ASYNC_ENTRY_PORT_FORCE_VLAN_GET,
	BCM_ASYNC_ENTRY_PORT_FORCE_VLAN_SET,
	BCM_ASYNC_ENTRY_PORT_FRAME_MAX_GET,
	BCM_ASYNC_ENTRY_PORT_FRAME_MAX_SET,
	BCM_ASYNC_ENTRY_PORT_GET,
	BCM_ASYNC_ENTRY_PORT_GPORT_ADD,
	BCM_ASYNC_ENTRY_PORT_GPORT_DELETE,
	BCM_ASYNC_ENTRY_PORT_GPORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_PORT_GPORT_FREE_RANGE_GET,
	BCM_ASYNC_ENTRY_PORT_GPORT_GET,
	BCM_ASYNC_ENTRY_PORT_GPORT_GET_ALL,
	BCM_ASYNC_ENTRY_PORT_GPORT_IS_FREE,
	BCM_ASYNC_ENTRY_PORT_GROUP_RANGE_GET,
	BCM_ASYNC_ENTRY_PORT_IFG_GET,
	BCM_ASYNC_ENTRY_PORT_IFG_SET,
	BCM_ASYNC_ENTRY_PORT_IFILTER_GET,
	BCM_ASYNC_ENTRY_PORT_IFILTER_SET,
	BCM_ASYNC_ENTRY_PORT_ILKN_LANE_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_ILKN_LANE_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_INFO_GET,
	BCM_ASYNC_ENTRY_PORT_INFO_RESTORE,
	BCM_ASYNC_ENTRY_PORT_INFO_SAVE,
	BCM_ASYNC_ENTRY_PORT_INFO_SET,
	BCM_ASYNC_ENTRY_PORT_INGRESS_TDM_FAILOVER_GET,
	BCM_ASYNC_ENTRY_PORT_INGRESS_TDM_FAILOVER_SET,
	BCM_ASYNC_ENTRY_PORT_INIT,
	BCM_ASYNC_ENTRY_PORT_INNER_TPID_GET,
	BCM_ASYNC_ENTRY_PORT_INNER_TPID_SET,
	BCM_ASYNC_ENTRY_PORT_INTERFACE_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_INTERFACE_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_INTERFACE_GET,
	BCM_ASYNC_ENTRY_PORT_INTERFACE_SET,
	BCM_ASYNC_ENTRY_PORT_INTERNAL_GET,
	BCM_ASYNC_ENTRY_PORT_IPMC_MODIFY_GET,
	BCM_ASYNC_ENTRY_PORT_IPMC_MODIFY_SET,
	BCM_ASYNC_ENTRY_PORT_JAM_GET,
	BCM_ASYNC_ENTRY_PORT_JAM_SET,
	BCM_ASYNC_ENTRY_PORT_L2_INTERFACE_GPORT_GET,
	BCM_ASYNC_ENTRY_PORT_L2_INTERFACE_ID_GET,
	BCM_ASYNC_ENTRY_PORT_L2_TUNNEL_PAYLOAD_TPID_ADD,
	BCM_ASYNC_ENTRY_PORT_L2_TUNNEL_PAYLOAD_TPID_DELETE,
	BCM_ASYNC_ENTRY_PORT_L2_TUNNEL_PAYLOAD_TPID_DELETE_ALL,
	BCM_ASYNC_ENTRY_PORT_L2_TUNNEL_PAYLOAD_TPID_GET,
	BCM_ASYNC_ENTRY_PORT_L2_TUNNEL_PAYLOAD_TPID_GET_ALL,
	BCM_ASYNC_ENTRY_PORT_L2_TUNNEL_PAYLOAD_TPID_SET,
	BCM_ASYNC_ENTRY_PORT_L3_ENABLE_GET,
	BCM_ASYNC_ENTRY_PORT_L3_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_L3_ENCAPSULATED_MTU_GET,
	BCM_ASYNC_ENTRY_PORT_L3_ENCAPSULATED_MTU_SET,
	BCM_ASYNC_ENTRY_PORT_L3_MODIFY_GET,
	BCM_ASYNC_ENTRY_PORT_L3_MODIFY_SET,
	BCM_ASYNC_ENTRY_PORT_L3_MTU_GET,
	BCM_ASYNC_ENTRY_PORT_L3_MTU_SET,
	BCM_ASYNC_ENTRY_PORT_LANE_TO_SERDES_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_LANE_TO_SERDES_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_LEARN_GET,
	BCM_ASYNC_ENTRY_PORT_LEARN_MODIFY,
	BCM_ASYNC_ENTRY_PORT_LEARN_SET,
	BCM_ASYNC_ENTRY_PORT_LINK_FAILED_CLEAR,
	BCM_ASYNC_ENTRY_PORT_LINK_STATE_GET,
	BCM_ASYNC_ENTRY_PORT_LINK_STATUS_GET,
	BCM_ASYNC_ENTRY_PORT_LINKSCAN_GET,
	BCM_ASYNC_ENTRY_PORT_LINKSCAN_SET,
	BCM_ASYNC_ENTRY_PORT_LOCAL_GET,
	BCM_ASYNC_ENTRY_PORT_LOOPBACK_GET,
	BCM_ASYNC_ENTRY_PORT_LOOPBACK_SET,
	BCM_ASYNC_ENTRY_PORT_MANAGEMENT_PACKET_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_MANAGEMENT_PACKET_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_MASTER_GET,
	BCM_ASYNC_ENTRY_PORT_MASTER_SET,
	BCM_ASYNC_ENTRY_PORT_MATCH_ADD,
	BCM_ASYNC_ENTRY_PORT_MATCH_DELETE,
	BCM_ASYNC_ENTRY_PORT_MATCH_DELETE_ALL,
	BCM_ASYNC_ENTRY_PORT_MATCH_MULTI_GET,
	BCM_ASYNC_ENTRY_PORT_MATCH_REPLACE,
	BCM_ASYNC_ENTRY_PORT_MATCH_SET,
	BCM_ASYNC_ENTRY_PORT_MDIX_GET,
	BCM_ASYNC_ENTRY_PORT_MDIX_SET,
	BCM_ASYNC_ENTRY_PORT_MDIX_STATUS_GET,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_GET,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_STATUS_REGISTER,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_STATUS_UNREGISTER,
	BCM_ASYNC_ENTRY_PORT_MODID_EGRESS_GET,
	BCM_ASYNC_ENTRY_PORT_MODID_EGRESS_SET,
	BCM_ASYNC_ENTRY_PORT_MODID_ENABLE_GET,
	BCM_ASYNC_ENTRY_PORT_MODID_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_NIF_PRIORITY_GET,
	BCM_ASYNC_ENTRY_PORT_NIF_PRIORITY_SET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_ADDR_GET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_ADDR_SET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_GET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_SET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_SYM_GET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_SYM_SET,
	BCM_ASYNC_ENTRY_PORT_PCS_LANE_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_PFM_GET,
	BCM_ASYNC_ENTRY_PORT_PFM_SET,
	BCM_ASYNC_ENTRY_PORT_PHY_CONTROL_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_CONTROL_SET,
	BCM_ASYNC_ENTRY_PORT_PHY_DRV_NAME_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_FEC_ERROR_INJECT_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_FEC_ERROR_INJECT_SET,
	BCM_ASYNC_ENTRY_PORT_PHY_FIRMWARE_SET,
	BCM_ASYNC_ENTRY_PORT_PHY_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_MODIFY,
	BCM_ASYNC_ENTRY_PORT_PHY_MULTI_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_RESET,
	BCM_ASYNC_ENTRY_PORT_PHY_RESET_REGISTER,
	BCM_ASYNC_ENTRY_PORT_PHY_RESET_UNREGISTER,
	BCM_ASYNC_ENTRY_PORT_PHY_SET,
	BCM_ASYNC_ENTRY_PORT_PHY_TIMESYNC_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_TIMESYNC_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_PHY_TIMESYNC_ENHANCED_CAPTURE_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_TX_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_TX_SET,
	BCM_ASYNC_ENTRY_PORT_PIPE_PBMP_GET,
	BCM_ASYNC_ENTRY_PORT_POLICER_GET,
	BCM_ASYNC_ENTRY_PORT_POLICER_SET,
	BCM_ASYNC_ENTRY_PORT_PON_INFO_GET,
	BCM_ASYNC_ENTRY_PORT_PON_INFO_SET,
	BCM_ASYNC_ENTRY_PORT_PON_TUNNEL_ADD,
	BCM_ASYNC_ENTRY_PORT_PON_TUNNEL_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_PON_TUNNEL_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_PON_TUNNEL_REMOVE,
	BCM_ASYNC_ENTRY_PORT_POST_BER_PROJ_GET,
	BCM_ASYNC_ENTRY_PORT_PREEMPTION_CONTROL_GET,
	BCM_ASYNC_ENTRY_PORT_PREEMPTION_CONTROL_SET,
	BCM_ASYNC_ENTRY_PORT_PREEMPTION_STATUS_GET,
	BCM_ASYNC_ENTRY_PORT_PRIORITY_COLOR_GET,
	BCM_ASYNC_ENTRY_PORT_PRIORITY_COLOR_SET,
	BCM_ASYNC_ENTRY_PORT_PRIORITY_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_PRIORITY_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_PRIORITY_GROUP_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_PRIORITY_GROUP_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_PRIORITY_GROUP_MAPPING_GET,
	BCM_ASYNC_ENTRY_PORT_PRIORITY_GROUP_MAPPING_SET,
	BCM_ASYNC_ENTRY_PORT_PROBE,
	BCM_ASYNC_ENTRY_PORT_PROTOCOL_VLAN_ADD,
	BCM_ASYNC_ENTRY_PORT_PROTOCOL_VLAN_DELETE,
	BCM_ASYNC_ENTRY_PORT_PROTOCOL_VLAN_DELETE_ALL,
	BCM_ASYNC_ENTRY_PORT_QUEUED_COUNT_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_EGRESS_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_EGRESS_PPS_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_EGRESS_PPS_SET,
	BCM_ASYNC_ENTRY_PORT_RATE_EGRESS_SET,
	BCM_ASYNC_ENTRY_PORT_RATE_INGRESS_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_INGRESS_SET,
	BCM_ASYNC_ENTRY_PORT_RATE_PAUSE_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_PAUSE_SET,
	BCM_ASYNC_ENTRY_PORT_REDIRECT_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_REDIRECT_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_REMOVE,
	BCM_ASYNC_ENTRY_PORT_RESOURCE_DEFAULT_GET,
	BCM_ASYNC_ENTRY_PORT_RESOURCE_GET,
	BCM_ASYNC_ENTRY_PORT_RESOURCE_MULTI_SET,
	BCM_ASYNC_ENTRY_PORT_RESOURCE_SET,
	BCM_ASYNC_ENTRY_PORT_RESOURCE_SPEED_CONFIG_VALIDATE,
	BCM_ASYNC_ENTRY_PORT_RESOURCE_SPEED_GET,
	BCM_ASYNC_ENTRY_PORT_RESOURCE_SPEED_MULTI_SET,
	BCM_ASYNC_ENTRY_PORT_RESOURCE_SPEED_SET,
	BCM_ASYNC_ENTRY_PORT_RESOURCE_TRAVERSE,
	BCM_ASYNC_ENTRY_PORT_RLM_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_RLM_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_RLM_STATUS_GET,
	BCM_ASYNC_ENTRY_PORT_SAMPLE_RATE_GET,
	BCM_ASYNC_ENTRY_PORT_SAMPLE_RATE_SET,
	BCM_ASYNC_ENTRY_PORT_SELECTIVE_GET,
	BCM_ASYNC_ENTRY_PORT_SELECTIVE_SET,
	BCM_ASYNC_ENTRY_PORT_SPEED_ABILITY_LOCAL_GET,
	BCM_ASYNC_ENTRY_PORT_SPEED_GET,
	BCM_ASYNC_ENTRY_PORT_SPEED_MAX,
	BCM_ASYNC_ENTRY_PORT_SPEED_SET,
	BCM_ASYNC_ENTRY_PORT_STAT_ATTACH,
	BCM_ASYNC_ENTRY_PORT_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_PORT_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_PORT_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_PORT_STAT_DETACH,
	BCM_ASYNC_ENTRY_PORT_STAT_DETACH_WITH_ID,
	BCM_ASYNC_ENTRY_PORT_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_STAT_GET,
	BCM_ASYNC_ENTRY_PORT_STAT_GET32,
	BCM_ASYNC_ENTRY_PORT_STAT_ID_GET,
	BCM_ASYNC_ENTRY_PORT_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_PORT_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_PORT_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_PORT_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_PORT_STAT_SET,
	BCM_ASYNC_ENTRY_PORT_STAT_SET32,
	BCM_ASYNC_ENTRY_PORT_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_PORT_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_PORT_STP_GET,
	BCM_ASYNC_ENTRY_PORT_STP_SET,
	BCM_ASYNC_ENTRY_PORT_SUBSIDIARY_PORTS_GET,
	BCM_ASYNC_ENTRY_PORT_TGID_GET,
	BCM_ASYNC_ENTRY_PORT_TGID_SET,
	BCM_ASYNC_ENTRY_PORT_TIMESTAMP_ADJUST_GET,
	BCM_ASYNC_ENTRY_PORT_TIMESTAMP_ADJUST_SET,
	BCM_ASYNC_ENTRY_PORT_TIMESYNC_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_TIMESYNC_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_TIMESYNC_TX_INFO_GET,
	BCM_ASYNC_ENTRY_PORT_TPID_ADD,
	BCM_ASYNC_ENTRY_PORT_TPID_CLASS_CREATE,
	BCM_ASYNC_ENTRY_PORT_TPID_CLASS_DESTROY,
	BCM_ASYNC_ENTRY_PORT_TPID_CLASS_GET,
	BCM_ASYNC_ENTRY_PORT_TPID_CLASS_SET,
	BCM_ASYNC_ENTRY_PORT_TPID_DELETE,
	BCM_ASYNC_ENTRY_PORT_TPID_DELETE_ALL,
	BCM_ASYNC_ENTRY_PORT_TPID_GET,
	BCM_ASYNC_ENTRY_PORT_TPID_GET_ALL,
	BCM_ASYNC_ENTRY_PORT_TPID_SET,
	BCM_ASYNC_ENTRY_PORT_TRUNK_INDEX_GET,
	BCM_ASYNC_ENTRY_PORT_TRUNK_INDEX_SET,
	BCM_ASYNC_ENTRY_PORT_TXPI_RXCDR_CLK_GET,
	BCM_ASYNC_ENTRY_PORT_UNTAGGED_PRIORITY_GET,
	BCM_ASYNC_ENTRY_PORT_UNTAGGED_PRIORITY_SET,
	BCM_ASYNC_ENTRY_PORT_UNTAGGED_VLAN_GET,
	BCM_ASYNC_ENTRY_PORT_UNTAGGED_VLAN_SET,
	BCM_ASYNC_ENTRY_PORT_UPDATE,
	BCM_ASYNC_ENTRY_PORT_VLAN_DSCP_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_DSCP_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_INNER_TAG_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_INNER_TAG_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_MEMBER_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_MEMBER_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRI_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRI_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_MAPPING_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_MAPPING_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_UNMAP_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_UNMAP_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_VECTOR_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_VECTOR_SET,
	BCM_ASYNC_ENTRY_PORT_WIDE_DATA_GET,
	BCM_ASYNC_ENTRY_PORT_WIDE_DATA_SET,
	BCM_ASYNC_ENTRY_PPP_INITIATOR_CREATE,
	BCM_ASYNC_ENTRY_PPP_INITIATOR_DELETE,
	BCM_ASYNC_ENTRY_PPP_INITIATOR_GET,
	BCM_ASYNC_ENTRY_PPP_INITIATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_PPP_TERM_SPOOFING_CHECK_ADD,
	BCM_ASYNC_ENTRY_PPP_TERM_SPOOFING_CHECK_DELETE,
	BCM_ASYNC_ENTRY_PPP_TERM_SPOOFING_CHECK_TRAVERSE,
	BCM_ASYNC_ENTRY_PPP_TERMINATOR_CREATE,
	BCM_ASYNC_ENTRY_PPP_TERMINATOR_DELETE,
	BCM_ASYNC_ENTRY_PPP_TERMINATOR_GET,
	BCM_ASYNC_ENTRY_PPP_TERMINATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_PROXY_CLEANUP,
	BCM_ASYNC_ENTRY_PROXY_CLIENT_SET,
	BCM_ASYNC_ENTRY_PROXY_EGRESS_CREATE,
	BCM_ASYNC_ENTRY_PROXY_EGRESS_DESTROY,
	BCM_ASYNC_ENTRY_PROXY_EGRESS_GET,
	BCM_ASYNC_ENTRY_PROXY_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_PROXY_INIT,
	BCM_ASYNC_ENTRY_PROXY_SERVER_GET,
	BCM_ASYNC_ENTRY_PROXY_SERVER_PORT_GET,
	BCM_ASYNC_ENTRY_PROXY_SERVER_PORT_SET,
	BCM_ASYNC_ENTRY_PROXY_SERVER_SET,
	BCM_ASYNC_ENTRY_PSTATS_DATA_SYNC,
	BCM_ASYNC_ENTRY_PSTATS_SESSION_CREATE,
	BCM_ASYNC_ENTRY_PSTATS_SESSION_DATA_CLEAR,
	BCM_ASYNC_ENTRY_PSTATS_SESSION_DATA_GET,
	BCM_ASYNC_ENTRY_PSTATS_SESSION_DATA_SYNC_GET,
	BCM_ASYNC_ENTRY_PSTATS_SESSION_DESTROY,
	BCM_ASYNC_ENTRY_PSTATS_SESSION_GET,
	BCM_ASYNC_ENTRY_PSTATS_SESSION_TRAVERSE,
	BCM_ASYNC_ENTRY_PTP_ACCEPTABLE_MASTER_ADD,
	BCM_ASYNC_ENTRY_PTP_ACCEPTABLE_MASTER_ENABLED_GET,
	BCM_ASYNC_ENTRY_PTP_ACCEPTABLE_MASTER_ENABLED_SET,
	BCM_ASYNC_ENTRY_PTP_ACCEPTABLE_MASTER_LIST,
	BCM_ASYNC_ENTRY_PTP_ACCEPTABLE_MASTER_REMOVE,
	BCM_ASYNC_ENTRY_PTP_ACCEPTABLE_MASTER_TABLE_CLEAR,
	BCM_ASYNC_ENTRY_PTP_ACCEPTABLE_MASTER_TABLE_SIZE_GET,
	BCM_ASYNC_ENTRY_PTP_BS_TIME_INFO_GET,
	BCM_ASYNC_ENTRY_PTP_CB_REGISTER,
	BCM_ASYNC_ENTRY_PTP_CB_UNREGISTER,
	BCM_ASYNC_ENTRY_PTP_CLOCK_ACCURACY_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_ACCURACY_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_APTS_ENABLE_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_APTS_ENABLE_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_APTS_GPS_OFFSET_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_APTS_GPS_OFFSET_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_APTS_MODE_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_APTS_SOURCE_ENABLE_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_APTS_SOURCE_ENABLE_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_APTS_SOURCE_PRIO_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_APTS_SOURCE_PRIO_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_BMCA_OVERRIDE_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_BMCA_OVERRIDE_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_CREATE,
	BCM_ASYNC_ENTRY_PTP_CLOCK_CURRENT_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_DEFAULT_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_DOMAIN_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_DOMAIN_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_LOCAL_PRIORITY_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_LOCAL_PRIORITY_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_MAX_STEPS_REMOVED_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_MAX_STEPS_REMOVED_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PARENT_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PEER_AGE_TIMER_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PEER_AGE_TIMER_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_ANNOUNCE_RECEIPT_TIMEOUT_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_ANNOUNCE_RECEIPT_TIMEOUT_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_CONFIGURE,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_DELAY_MECHANISM_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_DELAY_MECHANISM_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_DISABLE,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_DROP_COUNTERS_ENABLE_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_DROP_COUNTERS_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_ENABLE,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_IDENTITY_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_INFO_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LATENCY_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_ANNOUNCE_INTERVAL_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_ANNOUNCE_INTERVAL_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_MIN_DELAY_REQ_INTERVAL_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_MIN_DELAY_REQ_INTERVAL_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_MIN_PDELAY_REQ_INTERVAL_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_MIN_PDELAY_REQ_INTERVAL_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_SYNC_INTERVAL_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_SYNC_INTERVAL_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_MAC_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_PROTOCOL_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_TLV_CONFIG_ADD,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_TLV_CONFIG_DELETE,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_TLV_CONFIG_DELETE_ALL,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_TYPE_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_VERSION_NUMBER_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PRIORITY1_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PRIORITY1_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PRIORITY2_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PRIORITY2_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_QUALITY_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_QUALITY_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_SLAVEONLY_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_SLAVEONLY_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TIME_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TIME_PROPERTIES_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TIME_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TIMESCALE_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TIMESCALE_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TLV_ENABLE_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TLV_ENABLE_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TRACEABILITY_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TRACEABILITY_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_USER_DESCRIPTION_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_UTC_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_UTC_SET,
	BCM_ASYNC_ENTRY_PTP_CTDEV_ALARM_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_PTP_CTDEV_ALARM_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_PTP_CTDEV_ALPHA_GET,
	BCM_ASYNC_ENTRY_PTP_CTDEV_ALPHA_SET,
	BCM_ASYNC_ENTRY_PTP_CTDEV_ENABLE_GET,
	BCM_ASYNC_ENTRY_PTP_CTDEV_ENABLE_SET,
	BCM_ASYNC_ENTRY_PTP_CTDEV_VERBOSE_GET,
	BCM_ASYNC_ENTRY_PTP_CTDEV_VERBOSE_SET,
	BCM_ASYNC_ENTRY_PTP_DETACH,
	BCM_ASYNC_ENTRY_PTP_EXTERNAL_PHY_SYNCHRONIZE,
	BCM_ASYNC_ENTRY_PTP_FOREIGN_MASTER_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_G8275P1_TRACEABILITY_INFO_CLOCK_CLASS_MAP,
	BCM_ASYNC_ENTRY_PTP_INIT,
	BCM_ASYNC_ENTRY_PTP_INPUT_CHANNEL_PRECEDENCE_MODE_SET,
	BCM_ASYNC_ENTRY_PTP_INPUT_CHANNEL_SWITCHING_MODE_SET,
	BCM_ASYNC_ENTRY_PTP_INPUT_CHANNELS_GET,
	BCM_ASYNC_ENTRY_PTP_INPUT_CHANNELS_SET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_ENABLE_GET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_ENABLE_SET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_PHYTS_GET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_PHYTS_SET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_PORTBITMAP_GET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_PORTBITMAP_SET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_VERBOSE_GET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_VERBOSE_SET,
	BCM_ASYNC_ENTRY_PTP_PACKET_COUNTERS_CLEAR,
	BCM_ASYNC_ENTRY_PTP_PACKET_COUNTERS_GET,
	BCM_ASYNC_ENTRY_PTP_PEER_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_PHASE_OFFSET_GET,
	BCM_ASYNC_ENTRY_PTP_PHASE_OFFSET_SET,
	BCM_ASYNC_ENTRY_PTP_PKT_FLAGS_OVERRIDE_GET,
	BCM_ASYNC_ENTRY_PTP_PKT_FLAGS_OVERRIDE_SET,
	BCM_ASYNC_ENTRY_PTP_PRIMARY_DOMAIN_GET,
	BCM_ASYNC_ENTRY_PTP_PRIMARY_DOMAIN_SET,
	BCM_ASYNC_ENTRY_PTP_SERVO_CONFIGURATION_GET,
	BCM_ASYNC_ENTRY_PTP_SERVO_CONFIGURATION_SET,
	BCM_ASYNC_ENTRY_PTP_SERVO_STATUS_GET,
	BCM_ASYNC_ENTRY_PTP_SERVO_THRESHOLD_GET,
	BCM_ASYNC_ENTRY_PTP_SERVO_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_PTP_SIGNAL_OUTPUT_GET,
	BCM_ASYNC_ENTRY_PTP_SIGNAL_OUTPUT_REMOVE,
	BCM_ASYNC_ENTRY_PTP_SIGNAL_OUTPUT_SET,
	BCM_ASYNC_ENTRY_PTP_SIGNALED_UNICAST_MASTER_ADD,
	BCM_ASYNC_ENTRY_PTP_SIGNALED_UNICAST_MASTER_REMOVE,
	BCM_ASYNC_ENTRY_PTP_SIGNALED_UNICAST_SLAVE_LIST,
	BCM_ASYNC_ENTRY_PTP_SIGNALED_UNICAST_SLAVE_TABLE_CLEAR,
	BCM_ASYNC_ENTRY_PTP_SIGNALING_ARBITER_REGISTER,
	BCM_ASYNC_ENTRY_PTP_SIGNALING_ARBITER_UNREGISTER,
	BCM_ASYNC_ENTRY_PTP_STACK_CREATE,
	BCM_ASYNC_ENTRY_PTP_STACK_DESTROY,
	BCM_ASYNC_ENTRY_PTP_STACK_GET,
	BCM_ASYNC_ENTRY_PTP_STACK_GET_ALL,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_MASTER_ADD,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_MASTER_LIST,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_MASTER_REMOVE,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_MASTER_TABLE_CLEAR,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_MASTER_TABLE_SIZE_GET,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_SLAVE_ADD,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_SLAVE_LIST,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_SLAVE_REMOVE,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_SLAVE_TABLE_CLEAR,
	BCM_ASYNC_ENTRY_PTP_SYNC_PHY,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_INIT,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_NETWORK_OPTION_GET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_NETWORK_OPTION_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_ADD,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_BEST_GET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_GET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_LIST,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_LOCKOUT_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_NON_REVERSION_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_PRIORITY_OVERRIDE,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_PRIORITY_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_REMOVE,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_WAIT_DURATION_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PKTSTATS_THRESHOLDS_GET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PKTSTATS_THRESHOLDS_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_QUALITY_LEVEL_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_RECEIPT_TIMEOUT_GET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_RECEIPT_TIMEOUT_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_SHUTDOWN,
	BCM_ASYNC_ENTRY_PTP_TIME_FORMAT_SET,
	BCM_ASYNC_ENTRY_PTP_TIMESOURCE_INPUT_STATUS_GET,
	BCM_ASYNC_ENTRY_PTP_TOD_INPUT_SOURCES_GET,
	BCM_ASYNC_ENTRY_PTP_TOD_INPUT_SOURCES_SET,
	BCM_ASYNC_ENTRY_PTP_TOD_OUTPUT_GET,
	BCM_ASYNC_ENTRY_PTP_TOD_OUTPUT_REMOVE,
	BCM_ASYNC_ENTRY_PTP_TOD_OUTPUT_SET,
	BCM_ASYNC_ENTRY_PTP_TRANSPARENT_CLOCK_DEFAULT_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_TRANSPARENT_CLOCK_PORT_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_UNICAST_REQUEST_DURATION_GET,
	BCM_ASYNC_ENTRY_PTP_UNICAST_REQUEST_DURATION_MAX_GET,
	BCM_ASYNC_ENTRY_PTP_UNICAST_REQUEST_DURATION_MAX_SET,
	BCM_ASYNC_ENTRY_PTP_UNICAST_REQUEST_DURATION_MIN_GET,
	BCM_ASYNC_ENTRY_PTP_UNICAST_REQUEST_DURATION_MIN_SET,
	BCM_ASYNC_ENTRY_PTP_UNICAST_REQUEST_DURATION_SET,
	BCM_ASYNC_ENTRY_QOS_CONTROL_GET,
	BCM_ASYNC_ENTRY_QOS_CONTROL_SET,
	BCM_ASYNC_ENTRY_QOS_DETACH,
	BCM_ASYNC_ENTRY_QOS_INIT,
	BCM_ASYNC_ENTRY_QOS_MAP_ADD,
	BCM_ASYNC_ENTRY_QOS_MAP_CONTROL_GET,
	BCM_ASYNC_ENTRY_QOS_MAP_CONTROL_SET,
	BCM_ASYNC_ENTRY_QOS_MAP_CREATE,
	BCM_ASYNC_ENTRY_QOS_MAP_DELETE,
	BCM_ASYNC_ENTRY_QOS_MAP_DESTROY,
	BCM_ASYNC_ENTRY_QOS_MAP_ID_GET_BY_PROFILE,
	BCM_ASYNC_ENTRY_QOS_MAP_MULTI_GET,
	BCM_ASYNC_ENTRY_QOS_MULTI_GET,
	BCM_ASYNC_ENTRY_QOS_PORT_MAP_GET,
	BCM_ASYNC_ENTRY_QOS_PORT_MAP_SET,
	BCM_ASYNC_ENTRY_QOS_PORT_MAP_TYPE_GET,
	BCM_ASYNC_ENTRY_QOS_PORT_VLAN_MAP_GET,
	BCM_ASYNC_ENTRY_QOS_PORT_VLAN_MAP_SET,
	BCM_ASYNC_ENTRY_QOS_VPN_MAP_SET,
	BCM_ASYNC_ENTRY_QOS_VPN_MAP_TYPE_GET,
	BCM_ASYNC_ENTRY_RANGE_CREATE,
	BCM_ASYNC_ENTRY_RANGE_DESTROY,
	BCM_ASYNC_ENTRY_RANGE_GET,
	BCM_ASYNC_ENTRY_RANGE_GROUP_CREATE,
	BCM_ASYNC_ENTRY_RANGE_GROUP_DELETE,
	BCM_ASYNC_ENTRY_RANGE_GROUP_GET,
	BCM_ASYNC_ENTRY_RANGE_GROUP_UPDATE,
	BCM_ASYNC_ENTRY_RANGE_OPER_MODE_GET,
	BCM_ASYNC_ENTRY_RANGE_OPER_MODE_SET,
	BCM_ASYNC_ENTRY_RANGE_TRAVERSE,
	BCM_ASYNC_ENTRY_RATE_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_RATE_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_RATE_BCAST_GET,
	BCM_ASYNC_ENTRY_RATE_BCAST_SET,
	BCM_ASYNC_ENTRY_RATE_DLFBC_GET,
	BCM_ASYNC_ENTRY_RATE_DLFBC_SET,
	BCM_ASYNC_ENTRY_RATE_GET,
	BCM_ASYNC_ENTRY_RATE_MCAST_GET,
	BCM_ASYNC_ENTRY_RATE_MCAST_SET,
	BCM_ASYNC_ENTRY_RATE_PACKET_GET,
	BCM_ASYNC_ENTRY_RATE_PACKET_SET,
	BCM_ASYNC_ENTRY_RATE_SET,
	BCM_ASYNC_ENTRY_RATE_TYPE_GET,
	BCM_ASYNC_ENTRY_RATE_TYPE_SET,
	BCM_ASYNC_ENTRY_REGEX_CONFIG_GET,
	BCM_ASYNC_ENTRY_REGEX_CONFIG_SET,
	BCM_ASYNC_ENTRY_REGEX_ENGINE_CREATE,
	BCM_ASYNC_ENTRY_REGEX_ENGINE_DESTROY,
	BCM_ASYNC_ENTRY_REGEX_ENGINE_GET,
	BCM_ASYNC_ENTRY_REGEX_ENGINE_INFO_GET,
	BCM_ASYNC_ENTRY_REGEX_ENGINE_TRAVERSE,
	BCM_ASYNC_ENTRY_REGEX_EXCLUDE_ADD,
	BCM_ASYNC_ENTRY_REGEX_EXCLUDE_DELETE,
	BCM_ASYNC_ENTRY_REGEX_EXCLUDE_DELETE_ALL,
	BCM_ASYNC_ENTRY_REGEX_EXCLUDE_GET,
	BCM_ASYNC_ENTRY_REGEX_GET_MATCH_ID,
	BCM_ASYNC_ENTRY_REGEX_GET_SIG_ID,
	BCM_ASYNC_ENTRY_REGEX_INFO_GET,
	BCM_ASYNC_ENTRY_REGEX_INIT,
	BCM_ASYNC_ENTRY_REGEX_MATCH_CHECK,
	BCM_ASYNC_ENTRY_REGEX_MATCH_SET,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_ADD,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_DELETE,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_GET,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_MAC_ADD,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_MAC_GET,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_PORTS_ADD,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_PORTS_GET,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_REMOVE,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_REMOVE_ALL,
	BCM_ASYNC_ENTRY_REGEX_POLICY_CREATE,
	BCM_ASYNC_ENTRY_REGEX_POLICY_DESTROY,
	BCM_ASYNC_ENTRY_REGEX_POLICY_DESTROY_ALL,
	BCM_ASYNC_ENTRY_REGEX_POLICY_INSTALL,
	BCM_ASYNC_ENTRY_REGEX_POLICY_POLICER_ATTACH,
	BCM_ASYNC_ENTRY_REGEX_POLICY_POLICER_DETACH,
	BCM_ASYNC_ENTRY_REGEX_POLICY_POLICER_DETACH_ALL,
	BCM_ASYNC_ENTRY_REGEX_POLICY_POLICER_GET,
	BCM_ASYNC_ENTRY_REGEX_POLICY_REMOVE,
	BCM_ASYNC_ENTRY_REGEX_POLICY_STAT_ATTACH,
	BCM_ASYNC_ENTRY_REGEX_POLICY_STAT_DETACH,
	BCM_ASYNC_ENTRY_REGEX_POLICY_STAT_GET,
	BCM_ASYNC_ENTRY_REGEX_REPORT_REGISTER,
	BCM_ASYNC_ENTRY_REGEX_REPORT_UNREGISTER,
	BCM_ASYNC_ENTRY_REGEX_SESSION_ADD,
	BCM_ASYNC_ENTRY_REGEX_SESSION_DELETE,
	BCM_ASYNC_ENTRY_REGEX_SESSION_DELETE_ALL,
	BCM_ASYNC_ENTRY_REGEX_SESSION_GET,
	BCM_ASYNC_ENTRY_REGEX_SESSION_POLICY_UPDATE,
	BCM_ASYNC_ENTRY_REGEX_SESSION_TRAVERSE,
	BCM_ASYNC_ENTRY_REGEX_STAT_CREATE,
	BCM_ASYNC_ENTRY_REGEX_STAT_DESTROY,
	BCM_ASYNC_ENTRY_REGEX_STAT_GET,
	BCM_ASYNC_ENTRY_REGEX_STAT_SET,
	BCM_ASYNC_ENTRY_RX_COPYTOCPU_CONFIG_ADD,
	BCM_ASYNC_ENTRY_RX_COPYTOCPU_CONFIG_DELETE,
	BCM_ASYNC_ENTRY_RX_COPYTOCPU_CONFIG_DELETE_ALL,
	BCM_ASYNC_ENTRY_RX_COPYTOCPU_CONFIG_GET,
	BCM_ASYNC_ENTRY_RX_COPYTOCPU_CONFIG_GET_ALL,
	BCM_ASYNC_ENTRY_RX_ACTIVE,
	BCM_ASYNC_ENTRY_RX_ALLOC,
	BCM_ASYNC_ENTRY_RX_BURST_GET,
	BCM_ASYNC_ENTRY_RX_BURST_SET,
	BCM_ASYNC_ENTRY_RX_CFG_GET,
	BCM_ASYNC_ENTRY_RX_CFG_INIT,
	BCM_ASYNC_ENTRY_RX_CHANNELS_RUNNING,
	BCM_ASYNC_ENTRY_RX_CLEAR,
	BCM_ASYNC_ENTRY_RX_CONTROL_GET,
	BCM_ASYNC_ENTRY_RX_CONTROL_SET,
	BCM_ASYNC_ENTRY_RX_COS_BURST_GET,
	BCM_ASYNC_ENTRY_RX_COS_BURST_SET,
	BCM_ASYNC_ENTRY_RX_COS_MAX_LEN_GET,
	BCM_ASYNC_ENTRY_RX_COS_MAX_LEN_SET,
	BCM_ASYNC_ENTRY_RX_COS_RATE_GET,
	BCM_ASYNC_ENTRY_RX_COS_RATE_SET,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_DELETE,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_EXTENDED_ADD,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_EXTENDED_DELETE,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_EXTENDED_DELETE_ALL,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_EXTENDED_GET,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_EXTENDED_SET,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_GET,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_REASONS_GET,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_SET,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_SIZE_GET,
	BCM_ASYNC_ENTRY_RX_CPU_RATE_GET,
	BCM_ASYNC_ENTRY_RX_CPU_RATE_SET,
	BCM_ASYNC_ENTRY_RX_FREE,
	BCM_ASYNC_ENTRY_RX_FREE_ENQUEUE,
	BCM_ASYNC_ENTRY_RX_INIT,
	BCM_ASYNC_ENTRY_RX_MTU_GET,
	BCM_ASYNC_ENTRY_RX_MTU_PROFILE_GET,
	BCM_ASYNC_ENTRY_RX_MTU_PROFILE_SET,
	BCM_ASYNC_ENTRY_RX_MTU_SET,
	BCM_ASYNC_ENTRY_RX_POOL_ALLOC,
	BCM_ASYNC_ENTRY_RX_POOL_CLEANUP,
	BCM_ASYNC_ENTRY_RX_POOL_FREE,
	BCM_ASYNC_ENTRY_RX_POOL_SETUP,
	BCM_ASYNC_ENTRY_RX_POOL_SETUP_DONE,
	BCM_ASYNC_ENTRY_RX_QUEUE_CHANNEL_GET,
	BCM_ASYNC_ENTRY_RX_QUEUE_CHANNEL_SET,
	BCM_ASYNC_ENTRY_RX_QUEUE_MAX_GET,
	BCM_ASYNC_ENTRY_RX_QUEUE_PACKET_COUNT_GET,
	BCM_ASYNC_ENTRY_RX_QUEUE_RATE_LIMIT_STATUS_GET,
	BCM_ASYNC_ENTRY_RX_QUEUE_REGISTER,
	BCM_ASYNC_ENTRY_RX_QUEUE_UNREGISTER,
	BCM_ASYNC_ENTRY_RX_RATE_GET,
	BCM_ASYNC_ENTRY_RX_RATE_SET,
	BCM_ASYNC_ENTRY_RX_REASONS_GET,
	BCM_ASYNC_ENTRY_RX_REASONS_POLICER_SET,
	BCM_ASYNC_ENTRY_RX_REDIRECT_REASONS_GET,
	BCM_ASYNC_ENTRY_RX_REDIRECT_REASONS_SET,
	BCM_ASYNC_ENTRY_RX_REGISTER,
	BCM_ASYNC_ENTRY_RX_REMOTE_PKT_ALLOC,
	BCM_ASYNC_ENTRY_RX_REMOTE_PKT_ENQUEUE,
	BCM_ASYNC_ENTRY_RX_REMOTE_PKT_FREE,
	BCM_ASYNC_ENTRY_RX_SCHED_REGISTER,
	BCM_ASYNC_ENTRY_RX_SCHED_UNREGISTER,
	BCM_ASYNC_ENTRY_RX_SHOW,
	BCM_ASYNC_ENTRY_RX_SNOOP_CREATE,
	BCM_ASYNC_ENTRY_RX_SNOOP_DESTROY,
	BCM_ASYNC_ENTRY_RX_SNOOP_GET,
	BCM_ASYNC_ENTRY_RX_SNOOP_SET,
	BCM_ASYNC_ENTRY_RX_START,
	BCM_ASYNC_ENTRY_RX_STOP,
	BCM_ASYNC_ENTRY_RX_TRAP_ACTION_PROFILE_CLEAR,
	BCM_ASYNC_ENTRY_RX_TRAP_ACTION_PROFILE_GET,
	BCM_ASYNC_ENTRY_RX_TRAP_ACTION_PROFILE_SET,
	BCM_ASYNC_ENTRY_RX_TRAP_GET,
	BCM_ASYNC_ENTRY_RX_TRAP_LIF_GET,
	BCM_ASYNC_ENTRY_RX_TRAP_LIF_SET,
	BCM_ASYNC_ENTRY_RX_TRAP_PROG_GET,
	BCM_ASYNC_ENTRY_RX_TRAP_PROG_SET,
	BCM_ASYNC_ENTRY_RX_TRAP_PROTOCOL_CLEAR,
	BCM_ASYNC_ENTRY_RX_TRAP_PROTOCOL_GET,
	BCM_ASYNC_ENTRY_RX_TRAP_PROTOCOL_INTERFACE_PROFILES_GET,
	BCM_ASYNC_ENTRY_RX_TRAP_PROTOCOL_INTERFACE_PROFILES_SET,
	BCM_ASYNC_ENTRY_RX_TRAP_PROTOCOL_PROFILES_GET,
	BCM_ASYNC_ENTRY_RX_TRAP_PROTOCOL_PROFILES_SET,
	BCM_ASYNC_ENTRY_RX_TRAP_PROTOCOL_SET,
	BCM_ASYNC_ENTRY_RX_TRAP_SET,
	BCM_ASYNC_ENTRY_RX_TRAP_SVTAG_GET,
	BCM_ASYNC_ENTRY_RX_TRAP_SVTAG_SET,
	BCM_ASYNC_ENTRY_RX_TRAP_SW_TO_HW_ID_MAP_GET,
	BCM_ASYNC_ENTRY_RX_TRAP_TYPE_CREATE,
	BCM_ASYNC_ENTRY_RX_TRAP_TYPE_DESTROY,
	BCM_ASYNC_ENTRY_RX_TRAP_TYPE_FROM_ID_GET,
	BCM_ASYNC_ENTRY_RX_TRAP_TYPE_GET,
	BCM_ASYNC_ENTRY_RX_UNIT_NEXT_GET,
	BCM_ASYNC_ENTRY_RX_UNREGISTER,
	BCM_ASYNC_ENTRY_SAT_CONFIG_GET,
	BCM_ASYNC_ENTRY_SAT_CONFIG_SET,
	BCM_ASYNC_ENTRY_SAT_CTF_AVAILABILITY_CONFIG_SET,
	BCM_ASYNC_ENTRY_SAT_CTF_BIN_LIMIT_GET,
	BCM_ASYNC_ENTRY_SAT_CTF_BIN_LIMIT_SET,
	BCM_ASYNC_ENTRY_SAT_CTF_CREATE,
	BCM_ASYNC_ENTRY_SAT_CTF_DESTROY,
	BCM_ASYNC_ENTRY_SAT_CTF_DESTROY_ALL,
	BCM_ASYNC_ENTRY_SAT_CTF_IDENTIFIER_MAP,
	BCM_ASYNC_ENTRY_SAT_CTF_IDENTIFIER_UNMAP,
	BCM_ASYNC_ENTRY_SAT_CTF_PACKET_CONFIG,
	BCM_ASYNC_ENTRY_SAT_CTF_REPORTS_CONFIG_SET,
	BCM_ASYNC_ENTRY_SAT_CTF_STAT_CONFIG_SET,
	BCM_ASYNC_ENTRY_SAT_CTF_STAT_GET,
	BCM_ASYNC_ENTRY_SAT_CTF_TRAP_ADD,
	BCM_ASYNC_ENTRY_SAT_CTF_TRAP_DATA_TO_SESSION_MAP,
	BCM_ASYNC_ENTRY_SAT_CTF_TRAP_DATA_TO_SESSION_UNMAP,
	BCM_ASYNC_ENTRY_SAT_CTF_TRAP_REMOVE,
	BCM_ASYNC_ENTRY_SAT_CTF_TRAP_REMOVE_ALL,
	BCM_ASYNC_ENTRY_SAT_CTF_TRAVERSE,
	BCM_ASYNC_ENTRY_SAT_ENDPOINT_CREATE,
	BCM_ASYNC_ENTRY_SAT_ENDPOINT_DESTROY,
	BCM_ASYNC_ENTRY_SAT_ENDPOINT_DESTROY_ALL,
	BCM_ASYNC_ENTRY_SAT_ENDPOINT_GET,
	BCM_ASYNC_ENTRY_SAT_ENDPOINT_TRAVERSE,
	BCM_ASYNC_ENTRY_SAT_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_SAT_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_SAT_GTF_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_SAT_GTF_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_SAT_GTF_CREATE,
	BCM_ASYNC_ENTRY_SAT_GTF_DESTROY,
	BCM_ASYNC_ENTRY_SAT_GTF_DESTROY_ALL,
	BCM_ASYNC_ENTRY_SAT_GTF_PACKET_CONFIG,
	BCM_ASYNC_ENTRY_SAT_GTF_PACKET_CONFIG_GET,
	BCM_ASYNC_ENTRY_SAT_GTF_PACKET_CONFIG_SET,
	BCM_ASYNC_ENTRY_SAT_GTF_PACKET_START,
	BCM_ASYNC_ENTRY_SAT_GTF_PACKET_STOP,
	BCM_ASYNC_ENTRY_SAT_GTF_RATE_PATTERN_GET,
	BCM_ASYNC_ENTRY_SAT_GTF_RATE_PATTERN_SET,
	BCM_ASYNC_ENTRY_SAT_GTF_STAT_GET,
	BCM_ASYNC_ENTRY_SAT_GTF_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_SAT_GTF_TRAVERSE,
	BCM_ASYNC_ENTRY_SRV6_EXTENSION_TERMINATOR_ADD,
	BCM_ASYNC_ENTRY_SRV6_EXTENSION_TERMINATOR_DELETE,
	BCM_ASYNC_ENTRY_SRV6_EXTENSION_TERMINATOR_GET,
	BCM_ASYNC_ENTRY_SRV6_EXTENSION_TERMINATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_SRV6_SID_INITIATOR_CREATE,
	BCM_ASYNC_ENTRY_SRV6_SID_INITIATOR_DELETE,
	BCM_ASYNC_ENTRY_SRV6_SID_INITIATOR_GET,
	BCM_ASYNC_ENTRY_SRV6_SID_INITIATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_SRV6_SRH_BASE_INITIATOR_CREATE,
	BCM_ASYNC_ENTRY_SRV6_SRH_BASE_INITIATOR_DELETE,
	BCM_ASYNC_ENTRY_SRV6_SRH_BASE_INITIATOR_GET,
	BCM_ASYNC_ENTRY_SRV6_SRH_BASE_INITIATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_STAT_CLEAR,
	BCM_ASYNC_ENTRY_STAT_CLEAR_SINGLE,
	BCM_ASYNC_ENTRY_STAT_CONTROL_GET,
	BCM_ASYNC_ENTRY_STAT_CONTROL_SET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_CONFIG_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_CONFIG_SET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_DATABASE_CONTROL_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_DATABASE_CONTROL_SET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_DATABASE_CREATE,
	BCM_ASYNC_ENTRY_STAT_COUNTER_DATABASE_DESTROY,
	BCM_ASYNC_ENTRY_STAT_COUNTER_DATABASE_ENABLE_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_DATABASE_ENABLE_SET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_ENGINE_ATTACH,
	BCM_ASYNC_ENTRY_STAT_COUNTER_ENGINE_CONTROL_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_ENGINE_CONTROL_SET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_ENGINE_DETACH,
	BCM_ASYNC_ENTRY_STAT_COUNTER_EVICTION_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_EVICTION_SET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_EXPANSION_SELECT_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_EXPANSION_SELECT_SET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_EXPLICIT_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_FILTER_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_FILTER_GROUP_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_FILTER_GROUP_SET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_FILTER_IS_ACTIVE_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_FILTER_SET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_INTERFACE_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_INTERFACE_SET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_LIF_COUNTING_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_LIF_COUNTING_RANGE_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_LIF_COUNTING_RANGE_SET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_LIF_COUNTING_SET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_SET_MAPPING_GET,
	BCM_ASYNC_ENTRY_STAT_COUNTER_SET_MAPPING_SET,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_ADD,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_CHECK,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_COUNTER_ID_MOVE,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_DELETE,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_DELETE_ALL,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_GET,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_GROUP_CREATE,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_GROUP_ID_CREATE,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_SET,
	BCM_ASYNC_ENTRY_STAT_DATABASE_EVICTION_BOUNDARIES_GET,
	BCM_ASYNC_ENTRY_STAT_DATABASE_EVICTION_BOUNDARIES_SET,
	BCM_ASYNC_ENTRY_STAT_DIRECT_GET,
	BCM_ASYNC_ENTRY_STAT_DIRECT_MULTI_GET,
	BCM_ASYNC_ENTRY_STAT_DROP_EVENT_COUNTER_GET,
	BCM_ASYNC_ENTRY_STAT_DROP_EVENT_COUNTER_SET,
	BCM_ASYNC_ENTRY_STAT_DROP_EVENT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_STAT_EGRESS_RECEIVE_TM_POINTER_FORMAT_GET,
	BCM_ASYNC_ENTRY_STAT_EGRESS_RECEIVE_TM_POINTER_FORMAT_SET,
	BCM_ASYNC_ENTRY_STAT_EVICTION_BOUNDARIES_GET,
	BCM_ASYNC_ENTRY_STAT_EVICTION_BOUNDARIES_SET,
	BCM_ASYNC_ENTRY_STAT_FLEX_COUNTER_GET,
	BCM_ASYNC_ENTRY_STAT_FLEX_COUNTER_SET,
	BCM_ASYNC_ENTRY_STAT_FLEX_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_STAT_FLEX_POOL_INFO_MULTI_GET,
	BCM_ASYNC_ENTRY_STAT_GET,
	BCM_ASYNC_ENTRY_STAT_GET32,
	BCM_ASYNC_ENTRY_STAT_GROUP_CREATE,
	BCM_ASYNC_ENTRY_STAT_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_STAT_GROUP_DROP_REASONS_GET,
	BCM_ASYNC_ENTRY_STAT_GROUP_DROP_REASONS_SET,
	BCM_ASYNC_ENTRY_STAT_GROUP_DUMP,
	BCM_ASYNC_ENTRY_STAT_GROUP_DUMP_ALL,
	BCM_ASYNC_ENTRY_STAT_GROUP_MODE_ATTR_CLASS_ID_CREATE,
	BCM_ASYNC_ENTRY_STAT_GROUP_MODE_ATTR_CLASS_ID_DESTROY,
	BCM_ASYNC_ENTRY_STAT_GROUP_MODE_ID_CONFIG_CREATE,
	BCM_ASYNC_ENTRY_STAT_GROUP_MODE_ID_CONFIG_GET,
	BCM_ASYNC_ENTRY_STAT_GROUP_MODE_ID_CREATE,
	BCM_ASYNC_ENTRY_STAT_GROUP_MODE_ID_DESTROY,
	BCM_ASYNC_ENTRY_STAT_GROUP_MODE_ID_GET,
	BCM_ASYNC_ENTRY_STAT_ID_GET_ALL,
	BCM_ASYNC_ENTRY_STAT_INIT,
	BCM_ASYNC_ENTRY_STAT_LATENCY_PORT_STAT_ID_GET,
	BCM_ASYNC_ENTRY_STAT_LIF_COUNTING_PROFILE_GET,
	BCM_ASYNC_ENTRY_STAT_LIF_COUNTING_PROFILE_SET,
	BCM_ASYNC_ENTRY_STAT_LIF_COUNTING_STACK_LEVEL_PRIORITY_GET,
	BCM_ASYNC_ENTRY_STAT_LIF_COUNTING_STACK_LEVEL_PRIORITY_SET,
	BCM_ASYNC_ENTRY_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_STAT_PKT_SIZE_ADJUST_SELECT_GET,
	BCM_ASYNC_ENTRY_STAT_PKT_SIZE_ADJUST_SELECT_SET,
	BCM_ASYNC_ENTRY_STAT_PORT_GROUP_CREATE,
	BCM_ASYNC_ENTRY_STAT_PORT_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_STAT_PP_METADATA_GET,
	BCM_ASYNC_ENTRY_STAT_PP_METADATA_SET,
	BCM_ASYNC_ENTRY_STAT_PP_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_STAT_PP_PROFILE_DELETE,
	BCM_ASYNC_ENTRY_STAT_PP_PROFILE_GET,
	BCM_ASYNC_ENTRY_STAT_STIF_RECORD_FORMAT_GET,
	BCM_ASYNC_ENTRY_STAT_STIF_RECORD_FORMAT_SET,
	BCM_ASYNC_ENTRY_STAT_STIF_SOURCE_MAPPING_GET,
	BCM_ASYNC_ENTRY_STAT_STIF_SOURCE_MAPPING_SET,
	BCM_ASYNC_ENTRY_STAT_SYNC,
	BCM_ASYNC_ENTRY_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_STAT_SYNC_MULTI_GET,
	BCM_ASYNC_ENTRY_STAT_SYNC_MULTI_GET32,
	BCM_ASYNC_ENTRY_STAT_THRESHOLD_GET,
	BCM_ASYNC_ENTRY_STAT_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_STAT_TRACE_EVENT_COUNTER_GET,
	BCM_ASYNC_ENTRY_STAT_TRACE_EVENT_COUNTER_SET,
	BCM_ASYNC_ENTRY_STAT_TRACE_EVENT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_STG_CLEAR,
	BCM_ASYNC_ENTRY_STG_COUNT_GET,
	BCM_ASYNC_ENTRY_STG_CREATE,
	BCM_ASYNC_ENTRY_STG_CREATE_ID,
	BCM_ASYNC_ENTRY_STG_DEFAULT_GET,
	BCM_ASYNC_ENTRY_STG_DEFAULT_SET,
	BCM_ASYNC_ENTRY_STG_DESTROY,
	BCM_ASYNC_ENTRY_STG_INIT,
	BCM_ASYNC_ENTRY_STG_LIST,
	BCM_ASYNC_ENTRY_STG_LIST_DESTROY,
	BCM_ASYNC_ENTRY_STG_STP_GET,
	BCM_ASYNC_ENTRY_STG_STP_SET,
	BCM_ASYNC_ENTRY_STG_VLAN_ADD,
	BCM_ASYNC_ENTRY_STG_VLAN_LIST,
	BCM_ASYNC_ENTRY_STG_VLAN_LIST_DESTROY,
	BCM_ASYNC_ENTRY_STG_VLAN_REMOVE,
	BCM_ASYNC_ENTRY_STG_VLAN_REMOVE_ALL,
	BCM_ASYNC_ENTRY_STK_DOMAIN_STK_TRUNK_ADD,
	BCM_ASYNC_ENTRY_STK_DOMAIN_STK_TRUNK_DELETE,
	BCM_ASYNC_ENTRY_STK_DOMAIN_STK_TRUNK_GET,
	BCM_ASYNC_ENTRY_STK_FMOD_LMOD_MAPPING_GET,
	BCM_ASYNC_ENTRY_STK_FMOD_LMOD_MAPPING_SET,
	BCM_ASYNC_ENTRY_STK_FMOD_SMOD_MAPPING_GET,
	BCM_ASYNC_ENTRY_STK_FMOD_SMOD_MAPPING_SET,
	BCM_ASYNC_ENTRY_STK_GPORT_SYSPORT_GET,
	BCM_ASYNC_ENTRY_STK_INIT,
	BCM_ASYNC_ENTRY_STK_MODE_GET,
	BCM_ASYNC_ENTRY_STK_MODE_SET,
	BCM_ASYNC_ENTRY_STK_MODID_CONFIG_ADD,
	BCM_ASYNC_ENTRY_STK_MODID_CONFIG_DELETE,
	BCM_ASYNC_ENTRY_STK_MODID_CONFIG_DELETE_ALL,
	BCM_ASYNC_ENTRY_STK_MODID_CONFIG_GET,
	BCM_ASYNC_ENTRY_STK_MODID_CONFIG_GET_ALL,
	BCM_ASYNC_ENTRY_STK_MODID_CONFIG_SET,
	BCM_ASYNC_ENTRY_STK_MODID_COUNT,
	BCM_ASYNC_ENTRY_STK_MODID_DOMAIN_ADD,
	BCM_ASYNC_ENTRY_STK_MODID_DOMAIN_DELETE,
	BCM_ASYNC_ENTRY_STK_MODID_DOMAIN_GET,
	BCM_ASYNC_ENTRY_STK_MODID_GET,
	BCM_ASYNC_ENTRY_STK_MODID_SET,
	BCM_ASYNC_ENTRY_STK_MODMAP_ENABLE_GET,
	BCM_ASYNC_ENTRY_STK_MODMAP_ENABLE_SET,
	BCM_ASYNC_ENTRY_STK_MODMAP_MAP,
	BCM_ASYNC_ENTRY_STK_MODMAP_REGISTER,
	BCM_ASYNC_ENTRY_STK_MODMAP_UNREGISTER,
	BCM_ASYNC_ENTRY_STK_MODPORT_ADD,
	BCM_ASYNC_ENTRY_STK_MODPORT_CLEAR,
	BCM_ASYNC_ENTRY_STK_MODPORT_CLEAR_ALL,
	BCM_ASYNC_ENTRY_STK_MODPORT_DELETE,
	BCM_ASYNC_ENTRY_STK_MODPORT_GET,
	BCM_ASYNC_ENTRY_STK_MODPORT_GET_ALL,
	BCM_ASYNC_ENTRY_STK_MODPORT_REMOTE_MAP_GET,
	BCM_ASYNC_ENTRY_STK_MODPORT_REMOTE_MAP_SET,
	BCM_ASYNC_ENTRY_STK_MODPORT_SET,
	BCM_ASYNC_ENTRY_STK_MODULE_CONTROL_GET,
	BCM_ASYNC_ENTRY_STK_MODULE_CONTROL_SET,
	BCM_ASYNC_ENTRY_STK_MODULE_ENABLE,
	BCM_ASYNC_ENTRY_STK_MODULE_MAX_GET,
	BCM_ASYNC_ENTRY_STK_MODULE_MAX_SET,
	BCM_ASYNC_ENTRY_STK_MODULE_REMOTE_PORT_ENABLE_GET,
	BCM_ASYNC_ENTRY_STK_MODULE_REMOTE_PORT_ENABLE_SET,
	BCM_ASYNC_ENTRY_STK_MY_MODID_GET,
	BCM_ASYNC_ENTRY_STK_MY_MODID_SET,
	BCM_ASYNC_ENTRY_STK_PBMP_GET,
	BCM_ASYNC_ENTRY_STK_PORT_GET,
	BCM_ASYNC_ENTRY_STK_PORT_MODMAP_GROUP_GET,
	BCM_ASYNC_ENTRY_STK_PORT_MODMAP_GROUP_MAX_GET,
	BCM_ASYNC_ENTRY_STK_PORT_MODMAP_GROUP_SET,
	BCM_ASYNC_ENTRY_STK_PORT_MODPORT_ADD,
	BCM_ASYNC_ENTRY_STK_PORT_MODPORT_CLEAR,
	BCM_ASYNC_ENTRY_STK_PORT_MODPORT_CLEAR_ALL,
	BCM_ASYNC_ENTRY_STK_PORT_MODPORT_DELETE,
	BCM_ASYNC_ENTRY_STK_PORT_MODPORT_GET,
	BCM_ASYNC_ENTRY_STK_PORT_MODPORT_GET_ALL,
	BCM_ASYNC_ENTRY_STK_PORT_MODPORT_SET,
	BCM_ASYNC_ENTRY_STK_PORT_SET,
	BCM_ASYNC_ENTRY_STK_SYSPORT_GPORT_GET,
	BCM_ASYNC_ENTRY_STK_SYSPORT_GPORT_SET,
	BCM_ASYNC_ENTRY_STK_SYSTEM_GPORT_MAP_CREATE,
	BCM_ASYNC_ENTRY_STK_SYSTEM_GPORT_MAP_DESTROY,
	BCM_ASYNC_ENTRY_STK_SYSTEM_GPORT_MAP_GET,
	BCM_ASYNC_ENTRY_STK_UCBITMAP_DEL,
	BCM_ASYNC_ENTRY_STK_UCBITMAP_GET,
	BCM_ASYNC_ENTRY_STK_UCBITMAP_SET,
	BCM_ASYNC_ENTRY_STK_UPDATE_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_STK_UPDATE_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_SUBPORT_CLEANUP,
	BCM_ASYNC_ENTRY_SUBPORT_GPORT_MODPORT_GET,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_CREATE,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_GET,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_LINKPHY_CONFIG_GET,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_LINKPHY_CONFIG_SET,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_TRAVERSE,
	BCM_ASYNC_ENTRY_SUBPORT_INIT,
	BCM_ASYNC_ENTRY_SUBPORT_LINKPHY_RX_ERROR_REGISTER,
	BCM_ASYNC_ENTRY_SUBPORT_LINKPHY_RX_ERROR_UNREGISTER,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_ADD,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_DELETE,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_GET,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_GROUP_ID_CREATE,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_GROUP_ID_DESTROY,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_GROUP_ID_DESTROY_ALL,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_GROUP_ID_GET,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_GROUP_ID_GET_ALL,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_GROUP_SUBPORT_MULTI_GET,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_GROUP_SUBPORT_MULTI_SET,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_STAT_GET,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_STAT_SET,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_SUBPORT_TUNNEL_PBMP_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_SUBPORT_TUNNEL_PBMP_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_SUBPORT_TUNNEL_PBMP_PROFILE_DESTROY_ALL,
	BCM_ASYNC_ENTRY_SUBPORT_TUNNEL_PBMP_PROFILE_GET,
	BCM_ASYNC_ENTRY_SUM_CONFIG_GET,
	BCM_ASYNC_ENTRY_SUM_CONFIG_SET,
	BCM_ASYNC_ENTRY_SUM_DETACH,
	BCM_ASYNC_ENTRY_SUM_INIT,
	BCM_ASYNC_ENTRY_SUM_STAT_GET,
	BCM_ASYNC_ENTRY_SWITCH_AGM_CREATE,
	BCM_ASYNC_ENTRY_SWITCH_AGM_DESTROY,
	BCM_ASYNC_ENTRY_SWITCH_AGM_ENABLE_GET,
	BCM_ASYNC_ENTRY_SWITCH_AGM_ENABLE_SET,
	BCM_ASYNC_ENTRY_SWITCH_AGM_GET,
	BCM_ASYNC_ENTRY_SWITCH_AGM_L3_ECMP_ATTACH_GET,
	BCM_ASYNC_ENTRY_SWITCH_AGM_STAT_CLEAR,
	BCM_ASYNC_ENTRY_SWITCH_AGM_STAT_GET,
	BCM_ASYNC_ENTRY_SWITCH_AGM_TRAVERSE,
	BCM_ASYNC_ENTRY_SWITCH_AGM_TRUNK_ATTACH_GET,
	BCM_ASYNC_ENTRY_SWITCH_APPL_SIGNATURE_CREATE,
	BCM_ASYNC_ENTRY_SWITCH_APPL_SIGNATURE_DESTROY,
	BCM_ASYNC_ENTRY_SWITCH_APPL_SIGNATURE_GET,
	BCM_ASYNC_ENTRY_SWITCH_APPL_SIGNATURE_GET_ALL,
	BCM_ASYNC_ENTRY_SWITCH_APPL_SIGNATURE_PRIO_SET,
	BCM_ASYNC_ENTRY_SWITCH_CHIP_INFO_GET,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_GET,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_INDEXED_GET,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_INDEXED_PORT_GET,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_INDEXED_PORT_SET,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_INDEXED_SET,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_PORT_GET,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_PORT_SET,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_SET,
	BCM_ASYNC_ENTRY_SWITCH_DOSATTACK_EVENT_GET,
	BCM_ASYNC_ENTRY_SWITCH_DOSATTACK_EVENT_SET,
	BCM_ASYNC_ENTRY_SWITCH_DRAM_INIT,
	BCM_ASYNC_ENTRY_SWITCH_DRAM_POWER_DOWN,
	BCM_ASYNC_ENTRY_SWITCH_DRAM_POWER_DOWN_CB_REGISTER,
	BCM_ASYNC_ENTRY_SWITCH_DRAM_POWER_DOWN_CB_UNREGISTER,
	BCM_ASYNC_ENTRY_SWITCH_DRAM_TRAFFIC_ENABLE_SET,
	BCM_ASYNC_ENTRY_SWITCH_DRAM_VENDOR_INFO_GET,
	BCM_ASYNC_ENTRY_SWITCH_DROP_EVENT_MON_GET,
	BCM_ASYNC_ENTRY_SWITCH_DROP_EVENT_MON_SET,
	BCM_ASYNC_ENTRY_SWITCH_ENCAP_CREATE,
	BCM_ASYNC_ENTRY_SWITCH_ENCAP_DEST_MAP_ADD,
	BCM_ASYNC_ENTRY_SWITCH_ENCAP_DEST_MAP_DELETE,
	BCM_ASYNC_ENTRY_SWITCH_ENCAP_DEST_MAP_GET,
	BCM_ASYNC_ENTRY_SWITCH_ENCAP_DEST_MAP_TRAVERSE,
	BCM_ASYNC_ENTRY_SWITCH_ENCAP_DESTROY,
	BCM_ASYNC_ENTRY_SWITCH_ENCAP_DESTROY_ALL,
	BCM_ASYNC_ENTRY_SWITCH_ENCAP_GET,
	BCM_ASYNC_ENTRY_SWITCH_ENCAP_SET,
	BCM_ASYNC_ENTRY_SWITCH_ENCAP_TRAVERSE,
	BCM_ASYNC_ENTRY_SWITCH_EP_RECIRC_DROP_EVENT_CONTROL_GET,
	BCM_ASYNC_ENTRY_SWITCH_EP_RECIRC_DROP_EVENT_CONTROL_SET,
	BCM_ASYNC_ENTRY_SWITCH_EP_RECIRC_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_SWITCH_EP_RECIRC_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_SWITCH_EP_RECIRC_PROFILE_GET,
	BCM_ASYNC_ENTRY_SWITCH_EP_RECIRC_PROFILE_GET_ALL,
	BCM_ASYNC_ENTRY_SWITCH_EP_RECIRC_TRACE_EVENT_CONTROL_GET,
	BCM_ASYNC_ENTRY_SWITCH_EP_RECIRC_TRACE_EVENT_CONTROL_SET,
	BCM_ASYNC_ENTRY_SWITCH_EP_RECIRC_TRACE_EVENT_ENABLE_GET,
	BCM_ASYNC_ENTRY_SWITCH_EP_RECIRC_TRACE_EVENT_ENABLE_GET_ALL,
	BCM_ASYNC_ENTRY_SWITCH_EP_RECIRC_TRACE_EVENT_ENABLE_SET,
	BCM_ASYNC_ENTRY_SWITCH_EVENT_CONTROL_GET,
	BCM_ASYNC_ENTRY_SWITCH_EVENT_CONTROL_SET,
	BCM_ASYNC_ENTRY_SWITCH_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_SWITCH_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_SWITCH_FEC_PROPERTY_GET,
	BCM_ASYNC_ENTRY_SWITCH_HARD_RESET_CB_REGISTER,
	BCM_ASYNC_ENTRY_SWITCH_HARD_RESET_CB_UNREGISTER,
	BCM_ASYNC_ENTRY_SWITCH_HASH_BANK_CONTROL_GET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_BANK_CONTROL_SET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_BANK_INFO_GET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_BANK_MULTI_GET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_BANKS_CONFIG_GET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_BANKS_CONFIG_SET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_BANKS_MAX_GET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_CREATE,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_CREATE_QSET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_DESTROY,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_GET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_INSTALL,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_REINSTALL,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_REMOVE,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_SET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_TRAVERSE,
	BCM_ASYNC_ENTRY_SWITCH_HASH_QUALIFY_DATA,
	BCM_ASYNC_ENTRY_SWITCH_HASH_QUALIFY_UDF,
	BCM_ASYNC_ENTRY_SWITCH_HASH_QUALIFY_UDF_GET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_TABLE_MULTI_GET,
	BCM_ASYNC_ENTRY_SWITCH_IPV6_RESERVED_MULTICAST_ADDR_GET,
	BCM_ASYNC_ENTRY_SWITCH_IPV6_RESERVED_MULTICAST_ADDR_MULTI_GET,
	BCM_ASYNC_ENTRY_SWITCH_IPV6_RESERVED_MULTICAST_ADDR_MULTI_SET,
	BCM_ASYNC_ENTRY_SWITCH_IPV6_RESERVED_MULTICAST_ADDR_SET,
	BCM_ASYNC_ENTRY_SWITCH_KBP_APPTYPE_INFO_GET,
	BCM_ASYNC_ENTRY_SWITCH_KBP_INFO_GET,
	BCM_ASYNC_ENTRY_SWITCH_L3_PROTOCOL_GROUP_GET,
	BCM_ASYNC_ENTRY_SWITCH_L3_PROTOCOL_GROUP_SET,
	BCM_ASYNC_ENTRY_SWITCH_LED_CONTROL_DATA_READ,
	BCM_ASYNC_ENTRY_SWITCH_LED_CONTROL_DATA_WRITE,
	BCM_ASYNC_ENTRY_SWITCH_LED_FW_LOAD,
	BCM_ASYNC_ENTRY_SWITCH_LED_FW_START_GET,
	BCM_ASYNC_ENTRY_SWITCH_LED_FW_START_SET,
	BCM_ASYNC_ENTRY_SWITCH_LED_PORT_TO_UC_PORT_GET,
	BCM_ASYNC_ENTRY_SWITCH_LED_PORT_TO_UC_PORT_SET,
	BCM_ASYNC_ENTRY_SWITCH_LED_UC_NUM_GET,
	BCM_ASYNC_ENTRY_SWITCH_LIF_HIT_GET,
	BCM_ASYNC_ENTRY_SWITCH_LIF_PROPERTY_GET,
	BCM_ASYNC_ENTRY_SWITCH_LIF_PROPERTY_SET,
	BCM_ASYNC_ENTRY_SWITCH_MATCH_CONFIG_ADD,
	BCM_ASYNC_ENTRY_SWITCH_MATCH_CONFIG_DELETE,
	BCM_ASYNC_ENTRY_SWITCH_MATCH_CONFIG_DELETE_ALL,
	BCM_ASYNC_ENTRY_SWITCH_MATCH_CONFIG_GET,
	BCM_ASYNC_ENTRY_SWITCH_MATCH_CONFIG_SET,
	BCM_ASYNC_ENTRY_SWITCH_MATCH_CONFIG_TRAVERSE,
	BCM_ASYNC_ENTRY_SWITCH_MATCH_CONTROL_GET,
	BCM_ASYNC_ENTRY_SWITCH_MATCH_CONTROL_SET,
	BCM_ASYNC_ENTRY_SWITCH_MATCH_CONTROL_TRAVERSE,
	BCM_ASYNC_ENTRY_SWITCH_NETWORK_GROUP_CONFIG_GET,
	BCM_ASYNC_ENTRY_SWITCH_NETWORK_GROUP_CONFIG_SET,
	BCM_ASYNC_ENTRY_SWITCH_OBJECT_COUNT_GET,
	BCM_ASYNC_ENTRY_SWITCH_OBJECT_COUNT_MULTI_GET,
	BCM_ASYNC_ENTRY_SWITCH_OBM_CLASSIFIER_MAPPING_GET,
	BCM_ASYNC_ENTRY_SWITCH_OBM_CLASSIFIER_MAPPING_MULTI_GET,
	BCM_ASYNC_ENTRY_SWITCH_OBM_CLASSIFIER_MAPPING_MULTI_SET,
	BCM_ASYNC_ENTRY_SWITCH_OBM_CLASSIFIER_MAPPING_SET,
	BCM_ASYNC_ENTRY_SWITCH_OLP_L2_ADDR_ADD,
	BCM_ASYNC_ENTRY_SWITCH_OLP_L2_ADDR_DELETE,
	BCM_ASYNC_ENTRY_SWITCH_OLP_L2_ADDR_DELETE_ALL,
	BCM_ASYNC_ENTRY_SWITCH_OLP_L2_ADDR_GET,
	BCM_ASYNC_ENTRY_SWITCH_OLP_L2_ADDR_TRAVERSE,
	BCM_ASYNC_ENTRY_SWITCH_OPAQUE_TAG_CONFIG_GET,
	BCM_ASYNC_ENTRY_SWITCH_OPAQUE_TAG_CONFIG_SET,
	BCM_ASYNC_ENTRY_SWITCH_PAYLOAD_OPAQUE_TAG_CONFIG_GET,
	BCM_ASYNC_ENTRY_SWITCH_PAYLOAD_OPAQUE_TAG_CONFIG_SET,
	BCM_ASYNC_ENTRY_SWITCH_PKT_INFO_HASH_GET,
	BCM_ASYNC_ENTRY_SWITCH_PKT_INTEGRITY_CHECK_ADD,
	BCM_ASYNC_ENTRY_SWITCH_PKT_INTEGRITY_CHECK_DELETE,
	BCM_ASYNC_ENTRY_SWITCH_PKT_INTEGRITY_CHECK_GET,
	BCM_ASYNC_ENTRY_SWITCH_PKT_PROTOCOL_CONTROL_ADD,
	BCM_ASYNC_ENTRY_SWITCH_PKT_PROTOCOL_CONTROL_DELETE,
	BCM_ASYNC_ENTRY_SWITCH_PKT_PROTOCOL_CONTROL_DELETE_ALL,
	BCM_ASYNC_ENTRY_SWITCH_PKT_PROTOCOL_CONTROL_GET,
	BCM_ASYNC_ENTRY_SWITCH_PKT_PROTOCOL_CONTROL_TRAVERSE,
	BCM_ASYNC_ENTRY_SWITCH_PKT_TRACE_INFO_CLEAR,
	BCM_ASYNC_ENTRY_SWITCH_PKT_TRACE_INFO_GET,
	BCM_ASYNC_ENTRY_SWITCH_PKT_TRACE_RAW_DATA_GET,
	BCM_ASYNC_ENTRY_SWITCH_RCPU_DECAP_PRIORITY_MAP_GET,
	BCM_ASYNC_ENTRY_SWITCH_RCPU_DECAP_PRIORITY_MAP_SET,
	BCM_ASYNC_ENTRY_SWITCH_RCPU_ENCAP_PRIORITY_MAP_GET,
	BCM_ASYNC_ENTRY_SWITCH_RCPU_ENCAP_PRIORITY_MAP_SET,
	BCM_ASYNC_ENTRY_SWITCH_REFLECTOR_CREATE,
	BCM_ASYNC_ENTRY_SWITCH_REFLECTOR_DESTROY,
	BCM_ASYNC_ENTRY_SWITCH_REFLECTOR_GET,
	BCM_ASYNC_ENTRY_SWITCH_REFLECTOR_TRAVERSE,
	BCM_ASYNC_ENTRY_SWITCH_RESOURCE_UTILIZATION_GET,
	BCM_ASYNC_ENTRY_SWITCH_ROV_GET,
	BCM_ASYNC_ENTRY_SWITCH_SER_ERROR_STAT_CLEAR,
	BCM_ASYNC_ENTRY_SWITCH_SER_ERROR_STAT_GET,
	BCM_ASYNC_ENTRY_SWITCH_SER_LOG_INFO_GET,
	BCM_ASYNC_ENTRY_SWITCH_SERVICE_GET,
	BCM_ASYNC_ENTRY_SWITCH_SERVICE_SET,
	BCM_ASYNC_ENTRY_SWITCH_STABLE_REGISTER,
	BCM_ASYNC_ENTRY_SWITCH_SVTAG_EGRESS_ENTRY_ADD,
	BCM_ASYNC_ENTRY_SWITCH_SVTAG_EGRESS_ENTRY_DELETE,
	BCM_ASYNC_ENTRY_SWITCH_SVTAG_EGRESS_ENTRY_GET,
	BCM_ASYNC_ENTRY_SWITCH_SVTAG_EGRESS_ENTRY_TRAVERSE,
	BCM_ASYNC_ENTRY_SWITCH_TEMPERATURE_MONITOR_GET,
	BCM_ASYNC_ENTRY_SWITCH_THERMO_SENSOR_READ,
	BCM_ASYNC_ENTRY_SWITCH_TPID_ADD,
	BCM_ASYNC_ENTRY_SWITCH_TPID_CLASS_GET,
	BCM_ASYNC_ENTRY_SWITCH_TPID_DELETE,
	BCM_ASYNC_ENTRY_SWITCH_TPID_DELETE_ALL,
	BCM_ASYNC_ENTRY_SWITCH_TPID_GET,
	BCM_ASYNC_ENTRY_SWITCH_TPID_GET_ALL,
	BCM_ASYNC_ENTRY_SWITCH_TRACE_EVENT_MON_GET,
	BCM_ASYNC_ENTRY_SWITCH_TRACE_EVENT_MON_SET,
	BCM_ASYNC_ENTRY_SWITCH_USER_BUFFER_READ,
	BCM_ASYNC_ENTRY_SWITCH_USER_BUFFER_WRITE,
	BCM_ASYNC_ENTRY_SWITCH_WIDE_DATA_EXTENSION_ADD,
	BCM_ASYNC_ENTRY_SWITCH_WIDE_DATA_EXTENSION_DELETE,
	BCM_ASYNC_ENTRY_SWITCH_WIDE_DATA_EXTENSION_GET,
	BCM_ASYNC_ENTRY_SWITCH_WIDE_DATA_EXTENSION_TRAVERSE,
	BCM_ASYNC_ENTRY_TDM_CONTROL_GET,
	BCM_ASYNC_ENTRY_TDM_CONTROL_SET,
	BCM_ASYNC_ENTRY_TDM_EGRESS_EDITING_GET,
	BCM_ASYNC_ENTRY_TDM_EGRESS_EDITING_SET,
	BCM_ASYNC_ENTRY_TDM_INGRESS_CONTEXT_CREATE,
	BCM_ASYNC_ENTRY_TDM_INGRESS_CONTEXT_DESTROY,
	BCM_ASYNC_ENTRY_TDM_INGRESS_CONTEXT_FAILOVER_GET,
	BCM_ASYNC_ENTRY_TDM_INGRESS_CONTEXT_FAILOVER_SET,
	BCM_ASYNC_ENTRY_TDM_INGRESS_CONTEXT_GET,
	BCM_ASYNC_ENTRY_TDM_INTERFACE_CONFIG_GET,
	BCM_ASYNC_ENTRY_TDM_INTERFACE_CONFIG_SET,
	BCM_ASYNC_ENTRY_TDM_STREAM_INGRESS_CONTEXT_GET,
	BCM_ASYNC_ENTRY_TDM_STREAM_INGRESS_CONTEXT_SET,
	BCM_ASYNC_ENTRY_TDPLL_DPLL_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_TDPLL_DPLL_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_TDPLL_DPLL_BINDINGS_GET,
	BCM_ASYNC_ENTRY_TDPLL_DPLL_BINDINGS_SET,
	BCM_ASYNC_ENTRY_TDPLL_DPLL_PHASE_CONTROL_GET,
	BCM_ASYNC_ENTRY_TDPLL_DPLL_PHASE_CONTROL_SET,
	BCM_ASYNC_ENTRY_TDPLL_DPLL_REFERENCE_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_ESSM_CODE_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_ESSM_CODE_SET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_HOLDOVER_QL_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_HOLDOVER_QL_SET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_MAC_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_MAC_SET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_QL_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_QL_SET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_RX_ENABLE_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_RX_ENABLE_SET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_RX_PORTBITMAP_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_RX_PORTBITMAP_SET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_RX_STATE_MACHINE,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_TX_ENABLE_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_TX_ENABLE_SET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_TX_PORTBITMAP_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_TX_PORTBITMAP_SET,
	BCM_ASYNC_ENTRY_TDPLL_EVENT_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_TDPLL_EVENT_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_BEST_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_CONTROL,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_ENABLE_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_ENABLE_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_FREQUENCY_ERROR_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_FREQUENCY_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_FREQUENCY_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_L1MUX_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_L1MUX_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_LOCKOUT_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_LOCKOUT_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MAC_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MAC_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MONITOR_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MONITOR_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MONITOR_INTERVAL_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MONITOR_INTERVAL_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MONITOR_THRESHOLD_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MONITOR_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_PRIORITY_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_PRIORITY_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_QL_CHANGE_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_QL_CHANGE_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_QL_ENABLED_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_QL_ENABLED_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_QL_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_QL_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_REVERTIVE_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_REVERTIVE_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_SELECTOR_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_SELECTOR_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_THRESHOLD_STATE_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_VALID_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_VALID_SET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_CREATE,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_DERIV_FREQUENCY_GET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_DERIV_FREQUENCY_SET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_ENABLE_GET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_ENABLE_SET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_HOLDOVER_DATA_GET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_HOLDOVER_FREQUENCY_SET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_HOLDOVER_MODE_GET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_HOLDOVER_MODE_SET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_HOLDOVER_RESET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_SYNTH_FREQUENCY_GET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_SYNTH_FREQUENCY_SET,
	BCM_ASYNC_ENTRY_TELEMETRY_CONFIG_GET,
	BCM_ASYNC_ENTRY_TELEMETRY_CONFIG_SET,
	BCM_ASYNC_ENTRY_TELEMETRY_DETACH,
	BCM_ASYNC_ENTRY_TELEMETRY_EXPORT_CONFIG_DELETE,
	BCM_ASYNC_ENTRY_TELEMETRY_EXPORT_CONFIG_GET,
	BCM_ASYNC_ENTRY_TELEMETRY_EXPORT_CONFIG_SET,
	BCM_ASYNC_ENTRY_TELEMETRY_INIT,
	BCM_ASYNC_ENTRY_TELEMETRY_INSTANCE_EXPORT_STATS_GET,
	BCM_ASYNC_ENTRY_TELEMETRY_INSTANCE_EXPORT_STATS_SET,
	BCM_ASYNC_ENTRY_TELEMETRY_SYSTEM_ID_GET,
	BCM_ASYNC_ENTRY_TELEMETRY_SYSTEM_ID_SET,
	BCM_ASYNC_ENTRY_TIME_BS_LOG_CONFIGURE_GET,
	BCM_ASYNC_ENTRY_TIME_BS_LOG_CONFIGURE_SET,
	BCM_ASYNC_ENTRY_TIME_BS_TIME_GET,
	BCM_ASYNC_ENTRY_TIME_CAPTURE_CB_REGISTER,
	BCM_ASYNC_ENTRY_TIME_CAPTURE_CB_UNREGISTER,
	BCM_ASYNC_ENTRY_TIME_CAPTURE_ENABLE_SET,
	BCM_ASYNC_ENTRY_TIME_CAPTURE_GET,
	BCM_ASYNC_ENTRY_TIME_DEINIT,
	BCM_ASYNC_ENTRY_TIME_HEARTBEAT_ENABLE_GET,
	BCM_ASYNC_ENTRY_TIME_HEARTBEAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_TIME_HEARTBEAT_REGISTER,
	BCM_ASYNC_ENTRY_TIME_HEARTBEAT_UNREGISTER,
	BCM_ASYNC_ENTRY_TIME_INIT,
	BCM_ASYNC_ENTRY_TIME_INTERFACE_ADD,
	BCM_ASYNC_ENTRY_TIME_INTERFACE_DELETE,
	BCM_ASYNC_ENTRY_TIME_INTERFACE_DELETE_ALL,
	BCM_ASYNC_ENTRY_TIME_INTERFACE_GET,
	BCM_ASYNC_ENTRY_TIME_INTERFACE_TRAVERSE,
	BCM_ASYNC_ENTRY_TIME_SYNCE_CLOCK_GET,
	BCM_ASYNC_ENTRY_TIME_SYNCE_CLOCK_SET,
	BCM_ASYNC_ENTRY_TIME_SYNCE_CLOCK_SOURCE_CONTROL_GET,
	BCM_ASYNC_ENTRY_TIME_SYNCE_CLOCK_SOURCE_CONTROL_SET,
	BCM_ASYNC_ENTRY_TIME_TOD_GET,
	BCM_ASYNC_ENTRY_TIME_TOD_SET,
	BCM_ASYNC_ENTRY_TIME_TRIGGER_ENABLE_GET,
	BCM_ASYNC_ENTRY_TIME_TRIGGER_ENABLE_SET,
	BCM_ASYNC_ENTRY_TIME_TS_COUNTER_GET,
	BCM_ASYNC_ENTRY_TIME_TS_COUNTER_SET,
	BCM_ASYNC_ENTRY_TIME_TS_COUNTER_TIME_INIT,
	BCM_ASYNC_ENTRY_TIME_TS_OFFSET_SET,
	BCM_ASYNC_ENTRY_TIME_TS_TIME_CONVERT,
	BCM_ASYNC_ENTRY_TIME_TS_TIME_UPDATE,
	BCM_ASYNC_ENTRY_TOPO_PORT_GET,
	BCM_ASYNC_ENTRY_TRILL_CLEANUP,
	BCM_ASYNC_ENTRY_TRILL_INIT,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ADJACENCY_ADD,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ADJACENCY_DELETE,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ADJACENCY_DELETE_ALL,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ADJACENCY_TRAVERSE,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_DELETE_ALL,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ENTRY_ADD,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ENTRY_DELETE,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ENTRY_GET,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ENTRY_TRAVERSE,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_SOURCE_ADD,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_SOURCE_DELETE,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_SOURCE_GET,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_SOURCE_TRAVERSE,
	BCM_ASYNC_ENTRY_TRILL_PORT_ADD,
	BCM_ASYNC_ENTRY_TRILL_PORT_DELETE,
	BCM_ASYNC_ENTRY_TRILL_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_TRILL_PORT_GET,
	BCM_ASYNC_ENTRY_TRILL_PORT_GET_ALL,
	BCM_ASYNC_ENTRY_TRILL_RBRIDGE_ENTRY_ADD,
	BCM_ASYNC_ENTRY_TRILL_RBRIDGE_ENTRY_DELETE,
	BCM_ASYNC_ENTRY_TRILL_RBRIDGE_ENTRY_GET,
	BCM_ASYNC_ENTRY_TRILL_STAT_CLEAR,
	BCM_ASYNC_ENTRY_TRILL_STAT_GET,
	BCM_ASYNC_ENTRY_TRILL_STAT_GET32,
	BCM_ASYNC_ENTRY_TRILL_VPN_CREATE,
	BCM_ASYNC_ENTRY_TRILL_VPN_DESTROY,
	BCM_ASYNC_ENTRY_TRILL_VPN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_TRILL_VPN_GET,
	BCM_ASYNC_ENTRY_TRILL_VPN_TRAVERSE,
	BCM_ASYNC_ENTRY_TRUNK_AGM_ATTACH,
	BCM_ASYNC_ENTRY_TRUNK_AGM_ATTACH_GET,
	BCM_ASYNC_ENTRY_TRUNK_AGM_DETACH,
	BCM_ASYNC_ENTRY_TRUNK_BITMAP_EXPAND,
	BCM_ASYNC_ENTRY_TRUNK_CHIP_INFO_GET,
	BCM_ASYNC_ENTRY_TRUNK_CREATE,
	BCM_ASYNC_ENTRY_TRUNK_DESTROY,
	BCM_ASYNC_ENTRY_TRUNK_DETACH,
	BCM_ASYNC_ENTRY_TRUNK_DLB_MON_CONFIG_GET,
	BCM_ASYNC_ENTRY_TRUNK_DLB_MON_CONFIG_SET,
	BCM_ASYNC_ENTRY_TRUNK_DLB_STAT_GET,
	BCM_ASYNC_ENTRY_TRUNK_DLB_STAT_SET,
	BCM_ASYNC_ENTRY_TRUNK_DLB_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_TRUNK_EGRESS_GET,
	BCM_ASYNC_ENTRY_TRUNK_EGRESS_SET,
	BCM_ASYNC_ENTRY_TRUNK_ETHERTYPE_GET,
	BCM_ASYNC_ENTRY_TRUNK_ETHERTYPE_SET,
	BCM_ASYNC_ENTRY_TRUNK_FAILOVER_GET,
	BCM_ASYNC_ENTRY_TRUNK_FAILOVER_SET,
	BCM_ASYNC_ENTRY_TRUNK_FIND,
	BCM_ASYNC_ENTRY_TRUNK_FLEXCTR_OBJECT_GET,
	BCM_ASYNC_ENTRY_TRUNK_FLEXCTR_OBJECT_SET,
	BCM_ASYNC_ENTRY_TRUNK_GET,
	BCM_ASYNC_ENTRY_TRUNK_GPORT_ADD,
	BCM_ASYNC_ENTRY_TRUNK_GPORT_DELETE,
	BCM_ASYNC_ENTRY_TRUNK_GPORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_TRUNK_GPORT_GET_ALL,
	BCM_ASYNC_ENTRY_TRUNK_INIT,
	BCM_ASYNC_ENTRY_TRUNK_MCAST_JOIN,
	BCM_ASYNC_ENTRY_TRUNK_MEMBER_ADD,
	BCM_ASYNC_ENTRY_TRUNK_MEMBER_DELETE,
	BCM_ASYNC_ENTRY_TRUNK_MEMBER_DELETE_ALL,
	BCM_ASYNC_ENTRY_TRUNK_MEMBER_STATUS_GET,
	BCM_ASYNC_ENTRY_TRUNK_MEMBER_STATUS_SET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_IPMC_GET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_IPMC_SET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_MCAST_GET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_MCAST_SET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_NON_UCAST_GET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_NON_UCAST_SET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_UCAST_GET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_UCAST_SET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_VLAN_GET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_VLAN_SET,
	BCM_ASYNC_ENTRY_TRUNK_POOL_GET,
	BCM_ASYNC_ENTRY_TRUNK_POOL_SET,
	BCM_ASYNC_ENTRY_TRUNK_PP_PORT_ALLOCATION_GET,
	BCM_ASYNC_ENTRY_TRUNK_PP_PORT_ALLOCATION_SET,
	BCM_ASYNC_ENTRY_TRUNK_PSC_GET,
	BCM_ASYNC_ENTRY_TRUNK_PSC_SET,
	BCM_ASYNC_ENTRY_TRUNK_RESILIENT_REPLACE,
	BCM_ASYNC_ENTRY_TRUNK_RESILIENT_TRAVERSE,
	BCM_ASYNC_ENTRY_TRUNK_SET,
	BCM_ASYNC_ENTRY_TRUNK_SPA_TO_SYSTEM_PHYS_PORT_MAP_GET,
	BCM_ASYNC_ENTRY_TRUNK_STAT_ATTACH,
	BCM_ASYNC_ENTRY_TRUNK_STAT_DETACH,
	BCM_ASYNC_ENTRY_TRUNK_STAT_ID_GET,
	BCM_ASYNC_ENTRY_TRUNK_VPLAG_GET,
	BCM_ASYNC_ENTRY_TRUNK_WITH_VPLAG_CREATE,
	BCM_ASYNC_ENTRY_TSN_CONTROL_GET,
	BCM_ASYNC_ENTRY_TSN_CONTROL_SET,
	BCM_ASYNC_ENTRY_TSN_DETACH,
	BCM_ASYNC_ENTRY_TSN_EVENT_NOTIFICATION_TRAVERSE,
	BCM_ASYNC_ENTRY_TSN_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_TSN_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_TSN_FLOW_CONFIG_GET,
	BCM_ASYNC_ENTRY_TSN_FLOW_CONFIG_SET,
	BCM_ASYNC_ENTRY_TSN_FLOWSET_CONFIG_GET,
	BCM_ASYNC_ENTRY_TSN_FLOWSET_CREATE,
	BCM_ASYNC_ENTRY_TSN_FLOWSET_DESTROY,
	BCM_ASYNC_ENTRY_TSN_FLOWSET_FLOW_GET,
	BCM_ASYNC_ENTRY_TSN_FLOWSET_STATUS_GET,
	BCM_ASYNC_ENTRY_TSN_FLOWSET_TRAVERSE,
	BCM_ASYNC_ENTRY_TSN_INGRESS_MTU_CONFIG_GET,
	BCM_ASYNC_ENTRY_TSN_INGRESS_MTU_CONFIG_SET,
	BCM_ASYNC_ENTRY_TSN_INGRESS_STU_CONFIG_GET,
	BCM_ASYNC_ENTRY_TSN_INGRESS_STU_CONFIG_SET,
	BCM_ASYNC_ENTRY_TSN_INIT,
	BCM_ASYNC_ENTRY_TSN_MTU_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_TSN_MTU_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_TSN_MTU_PROFILE_GET,
	BCM_ASYNC_ENTRY_TSN_MTU_PROFILE_SET,
	BCM_ASYNC_ENTRY_TSN_MTU_PROFILE_TRAVERSE,
	BCM_ASYNC_ENTRY_TSN_PORT_CONTROL_GET,
	BCM_ASYNC_ENTRY_TSN_PORT_CONTROL_SET,
	BCM_ASYNC_ENTRY_TSN_PORT_STAT_GET,
	BCM_ASYNC_ENTRY_TSN_PORT_STAT_GET32,
	BCM_ASYNC_ENTRY_TSN_PORT_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_TSN_PORT_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_TSN_PORT_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_TSN_PORT_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_TSN_PORT_STAT_SET,
	BCM_ASYNC_ENTRY_TSN_PORT_STAT_SET32,
	BCM_ASYNC_ENTRY_TSN_PORT_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_TSN_PORT_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_TSN_PORT_STAT_SYNC_MULTI_GET,
	BCM_ASYNC_ENTRY_TSN_PORT_STAT_SYNC_MULTI_GET32,
	BCM_ASYNC_ENTRY_TSN_PRI_MAP_CREATE,
	BCM_ASYNC_ENTRY_TSN_PRI_MAP_DESTROY,
	BCM_ASYNC_ENTRY_TSN_PRI_MAP_GET,
	BCM_ASYNC_ENTRY_TSN_PRI_MAP_SET,
	BCM_ASYNC_ENTRY_TSN_PRI_MAP_TRAVERSE,
	BCM_ASYNC_ENTRY_TSN_SR_AUTO_LEARN_ENABLE,
	BCM_ASYNC_ENTRY_TSN_SR_AUTO_LEARN_ENABLE_GET,
	BCM_ASYNC_ENTRY_TSN_SR_AUTO_LEARN_GROUP_CREATE,
	BCM_ASYNC_ENTRY_TSN_SR_AUTO_LEARN_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_TSN_SR_AUTO_LEARN_GROUP_GET,
	BCM_ASYNC_ENTRY_TSN_SR_AUTO_LEARN_GROUP_SET,
	BCM_ASYNC_ENTRY_TSN_SR_AUTO_LEARN_GROUP_TRAVERSE,
	BCM_ASYNC_ENTRY_TSN_SR_FLOW_STAT_GET,
	BCM_ASYNC_ENTRY_TSN_SR_FLOW_STAT_GET32,
	BCM_ASYNC_ENTRY_TSN_SR_FLOW_STAT_GROUP_GET,
	BCM_ASYNC_ENTRY_TSN_SR_FLOW_STAT_GROUP_SET,
	BCM_ASYNC_ENTRY_TSN_SR_FLOW_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_TSN_SR_FLOW_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_TSN_SR_FLOW_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_TSN_SR_FLOW_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_TSN_SR_FLOW_STAT_SET,
	BCM_ASYNC_ENTRY_TSN_SR_FLOW_STAT_SET32,
	BCM_ASYNC_ENTRY_TSN_SR_FLOW_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_TSN_SR_FLOW_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_TSN_SR_FLOW_STAT_SYNC_MULTI_GET,
	BCM_ASYNC_ENTRY_TSN_SR_FLOW_STAT_SYNC_MULTI_GET32,
	BCM_ASYNC_ENTRY_TSN_SR_FLOWSET_DESTROY,
	BCM_ASYNC_ENTRY_TSN_SR_FLOWSET_FLOW_GET,
	BCM_ASYNC_ENTRY_TSN_SR_FLOWSET_STATUS_GET,
	BCM_ASYNC_ENTRY_TSN_SR_FLOWSET_TRAVERSE,
	BCM_ASYNC_ENTRY_TSN_SR_PORT_CONFIG_GET,
	BCM_ASYNC_ENTRY_TSN_SR_PORT_CONFIG_SET,
	BCM_ASYNC_ENTRY_TSN_SR_RX_FLOW_CONFIG_GET,
	BCM_ASYNC_ENTRY_TSN_SR_RX_FLOW_CONFIG_SET,
	BCM_ASYNC_ENTRY_TSN_SR_RX_FLOW_RESET,
	BCM_ASYNC_ENTRY_TSN_SR_RX_FLOW_SEQNUM_HISTORY_GET,
	BCM_ASYNC_ENTRY_TSN_SR_RX_FLOW_SEQNUM_HISTORY_SET,
	BCM_ASYNC_ENTRY_TSN_SR_RX_FLOW_STATUS_GET,
	BCM_ASYNC_ENTRY_TSN_SR_RX_FLOWSET_CONFIG_GET,
	BCM_ASYNC_ENTRY_TSN_SR_RX_FLOWSET_CREATE,
	BCM_ASYNC_ENTRY_TSN_SR_TX_FLOW_CONFIG_GET,
	BCM_ASYNC_ENTRY_TSN_SR_TX_FLOW_CONFIG_SET,
	BCM_ASYNC_ENTRY_TSN_SR_TX_FLOW_STATUS_GET,
	BCM_ASYNC_ENTRY_TSN_SR_TX_FLOWSET_CONFIG_GET,
	BCM_ASYNC_ENTRY_TSN_SR_TX_FLOWSET_CREATE,
	BCM_ASYNC_ENTRY_TSN_STAT_GROUP_CREATE,
	BCM_ASYNC_ENTRY_TSN_STAT_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_TSN_STAT_GROUP_GET,
	BCM_ASYNC_ENTRY_TSN_STAT_GROUP_SET,
	BCM_ASYNC_ENTRY_TSN_STAT_GROUP_TRAVERSE,
	BCM_ASYNC_ENTRY_TSN_STAT_THRESHOLD_GET,
	BCM_ASYNC_ENTRY_TSN_STAT_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_TSN_STU_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_TSN_STU_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_TSN_STU_PROFILE_GET,
	BCM_ASYNC_ENTRY_TSN_STU_PROFILE_SET,
	BCM_ASYNC_ENTRY_TSN_STU_PROFILE_TRAVERSE,
	BCM_ASYNC_ENTRY_TSN_TAF_CONTROL_GET,
	BCM_ASYNC_ENTRY_TSN_TAF_CONTROL_SET,
	BCM_ASYNC_ENTRY_TSN_TAF_COSQ_MAPPING_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_TSN_TAF_COSQ_MAPPING_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_TSN_TAF_COSQ_MAPPING_PROFILE_GET,
	BCM_ASYNC_ENTRY_TSN_TAF_COSQ_MAPPING_PROFILE_SET,
	BCM_ASYNC_ENTRY_TSN_TAF_COSQ_MAPPING_PROFILE_TRAVERSE,
	BCM_ASYNC_ENTRY_TSN_TAF_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_TSN_TAF_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_CREATE,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_DESTROY,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_MAX_BYTES_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_MAX_BYTES_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_MAX_BYTES_PROFILE_GET,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_MAX_BYTES_PROFILE_SET,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_MAX_BYTES_PROFILE_TRAVERSE,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_STAT_GET,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_STAT_GET32,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_STAT_SET,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_STAT_SET32,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_STAT_SYNC_MULTI_GET,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_STAT_SYNC_MULTI_GET32,
	BCM_ASYNC_ENTRY_TSN_TAF_GATE_TRAVERSE,
	BCM_ASYNC_ENTRY_TSN_TAF_PROFILE_COMMIT,
	BCM_ASYNC_ENTRY_TSN_TAF_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_TSN_TAF_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_TSN_TAF_PROFILE_DESTROY_ALL,
	BCM_ASYNC_ENTRY_TSN_TAF_PROFILE_GET,
	BCM_ASYNC_ENTRY_TSN_TAF_PROFILE_SET,
	BCM_ASYNC_ENTRY_TSN_TAF_PROFILE_STATUS_GET,
	BCM_ASYNC_ENTRY_TSN_TAF_PROFILE_TRAVERSE,
	BCM_ASYNC_ENTRY_TSN_TAF_STATUS_GET,
	BCM_ASYNC_ENTRY_TUNNEL_CONFIG_GET,
	BCM_ASYNC_ENTRY_TUNNEL_CONFIG_SET,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_CREATE,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_DESTROY,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_GET,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_PORT_GET,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_PORT_SET,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_SET,
	BCM_ASYNC_ENTRY_TUNNEL_INITIATOR_CLEAR,
	BCM_ASYNC_ENTRY_TUNNEL_INITIATOR_CREATE,
	BCM_ASYNC_ENTRY_TUNNEL_INITIATOR_DESTROY,
	BCM_ASYNC_ENTRY_TUNNEL_INITIATOR_GET,
	BCM_ASYNC_ENTRY_TUNNEL_INITIATOR_SET,
	BCM_ASYNC_ENTRY_TUNNEL_INITIATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_ADD,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_CONFIG_ADD,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_CONFIG_DELETE,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_CONFIG_GET,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_CONFIG_TRAVERSE,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_CREATE,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_DELETE,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_FLEXCTR_OBJECT_GET,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_FLEXCTR_OBJECT_SET,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_GET,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_STAT_ATTACH,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_STAT_DETACH,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_STAT_ID_GET,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_UPDATE,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_VLAN_GET,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_VLAN_SET,
	BCM_ASYNC_ENTRY_TX,
	BCM_ASYNC_ENTRY_TX_ARRAY,
	BCM_ASYNC_ENTRY_TX_CLEANUP,
	BCM_ASYNC_ENTRY_TX_CPU_TUNNEL,
	BCM_ASYNC_ENTRY_TX_CPU_TUNNEL_GET,
	BCM_ASYNC_ENTRY_TX_CPU_TUNNEL_SET,
	BCM_ASYNC_ENTRY_TX_DV_DUMP,
	BCM_ASYNC_ENTRY_TX_INIT,
	BCM_ASYNC_ENTRY_TX_LIST,
	BCM_ASYNC_ENTRY_TX_PKT_L2_MAP,
	BCM_ASYNC_ENTRY_TX_PKT_SETUP,
	BCM_ASYNC_ENTRY_TX_SHOW,
	BCM_ASYNC_ENTRY_TXBEACON_DESTROY,
	BCM_ASYNC_ENTRY_TXBEACON_INIT,
	BCM_ASYNC_ENTRY_TXBEACON_PKT_GET,
	BCM_ASYNC_ENTRY_TXBEACON_PKT_SETUP,
	BCM_ASYNC_ENTRY_TXBEACON_START,
	BCM_ASYNC_ENTRY_TXBEACON_STOP,
	BCM_ASYNC_ENTRY_TXBEACON_TRAVERSE,
	BCM_ASYNC_ENTRY_UDF_ABSTRACT_PKT_FORMAT_INFO_GET,
	BCM_ASYNC_ENTRY_UDF_ABSTRACT_PKT_FORMAT_OBJECT_LIST_GET,
	BCM_ASYNC_ENTRY_UDF_ABSTRACT_PKT_FORMAT_SUPPORTED_LIST_GET,
	BCM_ASYNC_ENTRY_UDF_CHUNK_CREATE,
	BCM_ASYNC_ENTRY_UDF_CHUNK_INFO_GET,
	BCM_ASYNC_ENTRY_UDF_CREATE,
	BCM_ASYNC_ENTRY_UDF_DESTROY,
	BCM_ASYNC_ENTRY_UDF_DETACH,
	BCM_ASYNC_ENTRY_UDF_FLOW_BASED_CHUNK_ARRANGE_GET,
	BCM_ASYNC_ENTRY_UDF_FLOW_BASED_CHUNK_ARRANGE_SET,
	BCM_ASYNC_ENTRY_UDF_GET,
	BCM_ASYNC_ENTRY_UDF_GET_ALL,
	BCM_ASYNC_ENTRY_UDF_HASH_CONFIG_ADD,
	BCM_ASYNC_ENTRY_UDF_HASH_CONFIG_DELETE,
	BCM_ASYNC_ENTRY_UDF_HASH_CONFIG_DELETE_ALL,
	BCM_ASYNC_ENTRY_UDF_HASH_CONFIG_GET,
	BCM_ASYNC_ENTRY_UDF_HASH_CONFIG_GET_ALL,
	BCM_ASYNC_ENTRY_UDF_INIT,
	BCM_ASYNC_ENTRY_UDF_MULTI_ABSTRACT_PKT_FORMAT_INFO_GET,
	BCM_ASYNC_ENTRY_UDF_MULTI_CHUNK_CREATE,
	BCM_ASYNC_ENTRY_UDF_MULTI_CHUNK_INFO_GET,
	BCM_ASYNC_ENTRY_UDF_OPER_MODE_GET,
	BCM_ASYNC_ENTRY_UDF_OPER_MODE_SET,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_ACTION_GET,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_ACTION_SET,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_ADD,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_CREATE,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_DELETE,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_DELETE_ALL,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_DESTROY,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_GET,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_GET_ALL,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_INFO_GET,
	BCM_ASYNC_ENTRY_UDF_RANGE_CHECKER_CHUNK_INFO_GET,
	BCM_ASYNC_ENTRY_VLAN_BLOCK_GET,
	BCM_ASYNC_ENTRY_VLAN_BLOCK_SET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_GET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_PORT_GET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_PORT_SET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_SET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_VLAN_GET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_VLAN_SELECTIVE_GET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_VLAN_SELECTIVE_SET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_VLAN_SET,
	BCM_ASYNC_ENTRY_VLAN_CREATE,
	BCM_ASYNC_ENTRY_VLAN_CROSS_CONNECT_ADD,
	BCM_ASYNC_ENTRY_VLAN_CROSS_CONNECT_DELETE,
	BCM_ASYNC_ENTRY_VLAN_CROSS_CONNECT_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_CROSS_CONNECT_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_DEFAULT_GET,
	BCM_ASYNC_ENTRY_VLAN_DEFAULT_SET,
	BCM_ASYNC_ENTRY_VLAN_DESTROY,
	BCM_ASYNC_ENTRY_VLAN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VLAN_DTAG_ADD,
	BCM_ASYNC_ENTRY_VLAN_DTAG_DELETE,
	BCM_ASYNC_ENTRY_VLAN_DTAG_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_DTAG_GET,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_ADD,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_DELETE,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_GET,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_DTAG_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_GPORT_ADD,
	BCM_ASYNC_ENTRY_VLAN_GPORT_DELETE,
	BCM_ASYNC_ENTRY_VLAN_GPORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_GPORT_EXTENDED_DELETE,
	BCM_ASYNC_ENTRY_VLAN_GPORT_GET,
	BCM_ASYNC_ENTRY_VLAN_GPORT_GET_ALL,
	BCM_ASYNC_ENTRY_VLAN_GPORT_INFO_GET,
	BCM_ASYNC_ENTRY_VLAN_INIT,
	BCM_ASYNC_ENTRY_VLAN_IP_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_IP_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_IP_ACTION_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_IP_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_IP_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_IP_ADD,
	BCM_ASYNC_ENTRY_VLAN_IP_DELETE,
	BCM_ASYNC_ENTRY_VLAN_IP_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_LIST,
	BCM_ASYNC_ENTRY_VLAN_LIST_BY_PBMP,
	BCM_ASYNC_ENTRY_VLAN_LIST_DESTROY,
	BCM_ASYNC_ENTRY_VLAN_MAC_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_MAC_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_MAC_ACTION_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_MAC_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_MAC_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_MAC_ADD,
	BCM_ASYNC_ENTRY_VLAN_MAC_DELETE,
	BCM_ASYNC_ENTRY_VLAN_MAC_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_MATCH_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_MATCH_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_MATCH_ACTION_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_MATCH_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_MATCH_ACTION_MULTI_GET,
	BCM_ASYNC_ENTRY_VLAN_MCAST_FLOOD_GET,
	BCM_ASYNC_ENTRY_VLAN_MCAST_FLOOD_SET,
	BCM_ASYNC_ENTRY_VLAN_POLICER_GET,
	BCM_ASYNC_ENTRY_VLAN_POLICER_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_ADD,
	BCM_ASYNC_ENTRY_VLAN_PORT_CREATE,
	BCM_ASYNC_ENTRY_VLAN_PORT_DEFAULT_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_PORT_DEFAULT_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_DEFAULT_ACTION_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_DESTROY,
	BCM_ASYNC_ENTRY_VLAN_PORT_EGRESS_DEFAULT_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_PORT_EGRESS_DEFAULT_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_EGRESS_DEFAULT_ACTION_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_FIND,
	BCM_ASYNC_ENTRY_VLAN_PORT_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_PORT_REMOVE,
	BCM_ASYNC_ENTRY_VLAN_PORT_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_VLAN_PORT_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_VLAN_PORT_TRANSLATION_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_TRANSLATION_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_ATTACH,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_ATTACH_GET,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_CREATE,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_DESTROY,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_DETACH,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_DETACH_ALL,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_GET,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_SET,
	BCM_ASYNC_ENTRY_VLAN_STAT_ATTACH,
	BCM_ASYNC_ENTRY_VLAN_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_VLAN_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_VLAN_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_VLAN_STAT_DETACH,
	BCM_ASYNC_ENTRY_VLAN_STAT_DETACH_WITH_ID,
	BCM_ASYNC_ENTRY_VLAN_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_VLAN_STAT_GET,
	BCM_ASYNC_ENTRY_VLAN_STAT_GET32,
	BCM_ASYNC_ENTRY_VLAN_STAT_ID_GET,
	BCM_ASYNC_ENTRY_VLAN_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_VLAN_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_VLAN_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_VLAN_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_VLAN_STAT_SET,
	BCM_ASYNC_ENTRY_VLAN_STAT_SET32,
	BCM_ASYNC_ENTRY_VLAN_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_VLAN_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_VLAN_STG_GET,
	BCM_ASYNC_ENTRY_VLAN_STG_SET,
	BCM_ASYNC_ENTRY_VLAN_STP_GET,
	BCM_ASYNC_ENTRY_VLAN_STP_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_CLASS_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_CLASS_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_CREATE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_ID_CREATE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_ID_DESTROY,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_ID_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_ID_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_ID_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_EXTENDED_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_EXTENDED_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_EXTENDED_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_EXTENDED_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_FLEXCTR_ATTACH,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_FLEXCTR_DETACH,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_FLEXCTR_DETACH_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_FLEXCTR_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_GPORT_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_GPORT_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_GPORT_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_ATTACH,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_DETACH,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_GET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_ID_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_SET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_FLEXCTR_ATTACH,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_FLEXCTR_DETACH,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_FLEXCTR_DETACH_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_FLEXCTR_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_ATTACH,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_DETACH,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_GET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_ID_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_SET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_VECTOR_FLAGS_SET,
	BCM_ASYNC_ENTRY_VLAN_VECTOR_STP_SET,
	BCM_ASYNC_ENTRY_VLAN_VPN_CREATE,
	BCM_ASYNC_ENTRY_VLAN_VPN_DESTROY,
	BCM_ASYNC_ENTRY_VLAN_VPN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VLAN_VPN_GET,
	BCM_ASYNC_ENTRY_VLAN_VPN_TRAVERSE,
	BCM_ASYNC_ENTRY_VSWITCH_CREATE,
	BCM_ASYNC_ENTRY_VSWITCH_CREATE_WITH_ID,
	BCM_ASYNC_ENTRY_VSWITCH_CROSS_CONNECT_ADD,
	BCM_ASYNC_ENTRY_VSWITCH_CROSS_CONNECT_DELETE,
	BCM_ASYNC_ENTRY_VSWITCH_CROSS_CONNECT_DELETE_ALL,
	BCM_ASYNC_ENTRY_VSWITCH_CROSS_CONNECT_GET,
	BCM_ASYNC_ENTRY_VSWITCH_CROSS_CONNECT_TRAVERSE,
	BCM_ASYNC_ENTRY_VSWITCH_DESTROY,
	BCM_ASYNC_ENTRY_VSWITCH_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VSWITCH_DETACH,
	BCM_ASYNC_ENTRY_VSWITCH_FLEXIBLE_CONNECT_ADD,
	BCM_ASYNC_ENTRY_VSWITCH_FLEXIBLE_CONNECT_DELETE,
	BCM_ASYNC_ENTRY_VSWITCH_FLEXIBLE_CONNECT_GET,
	BCM_ASYNC_ENTRY_VSWITCH_INIT,
	BCM_ASYNC_ENTRY_VSWITCH_PORT_ADD,
	BCM_ASYNC_ENTRY_VSWITCH_PORT_DELETE,
	BCM_ASYNC_ENTRY_VSWITCH_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_VSWITCH_PORT_GET,
	BCM_ASYNC_ENTRY_VSWITCH_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_VXLAN_CLEANUP,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_ATTACH,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_DETACH,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_ID_GET,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_VXLAN_INIT,
	BCM_ASYNC_ENTRY_VXLAN_NETWORK_DOMAIN_CONFIG_ADD,
	BCM_ASYNC_ENTRY_VXLAN_NETWORK_DOMAIN_CONFIG_GET,
	BCM_ASYNC_ENTRY_VXLAN_NETWORK_DOMAIN_CONFIG_REMOVE,
	BCM_ASYNC_ENTRY_VXLAN_NETWORK_DOMAIN_CONFIG_TRAVERSE,
	BCM_ASYNC_ENTRY_VXLAN_PORT_ADD,
	BCM_ASYNC_ENTRY_VXLAN_PORT_DELETE,
	BCM_ASYNC_ENTRY_VXLAN_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_VXLAN_PORT_GET,
	BCM_ASYNC_ENTRY_VXLAN_PORT_GET_ALL,
	BCM_ASYNC_ENTRY_VXLAN_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_VXLAN_STAT_ATTACH,
	BCM_ASYNC_ENTRY_VXLAN_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_VXLAN_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_VXLAN_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_VXLAN_STAT_DETACH,
	BCM_ASYNC_ENTRY_VXLAN_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_VXLAN_STAT_ID_GET,
	BCM_ASYNC_ENTRY_VXLAN_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_VXLAN_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_VXLAN_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_VXLAN_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_INITIATOR_CREATE,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_INITIATOR_DESTROY,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_INITIATOR_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_INITIATOR_GET,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_INITIATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_TERMINATOR_CREATE,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_TERMINATOR_DESTROY,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_TERMINATOR_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_TERMINATOR_GET,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_TERMINATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_TERMINATOR_UPDATE,
	BCM_ASYNC_ENTRY_VXLAN_VPN_CREATE,
	BCM_ASYNC_ENTRY_VXLAN_VPN_DESTROY,
	BCM_ASYNC_ENTRY_VXLAN_VPN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VXLAN_VPN_GET,
	BCM_ASYNC_ENTRY_VXLAN_VPN_TRAVERSE,
	BCM_ASYNC_ENTRY_WARMBOOT_GET,
	BCM_ASYNC_ENTRY_WARMBOOT_SET,
	BCM_ASYNC_ENTRY_WLAN_CLIENT_ADD,
	BCM_ASYNC_ENTRY_WLAN_CLIENT_DELETE,
	BCM_ASYNC_ENTRY_WLAN_CLIENT_DELETE_ALL,
	BCM_ASYNC_ENTRY_WLAN_CLIENT_GET,
	BCM_ASYNC_ENTRY_WLAN_CLIENT_TRAVERSE,
	BCM_ASYNC_ENTRY_WLAN_DETACH,
	BCM_ASYNC_ENTRY_WLAN_INIT,
	BCM_ASYNC_ENTRY_WLAN_PORT_ADD,
	BCM_ASYNC_ENTRY_WLAN_PORT_DELETE,
	BCM_ASYNC_ENTRY_WLAN_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_WLAN_PORT_GET,
	BCM_ASYNC_ENTRY_WLAN_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_WLAN_TUNNEL_INITIATOR_CREATE,
	BCM_ASYNC_ENTRY_WLAN_TUNNEL_INITIATOR_DESTROY,
	BCM_ASYNC_ENTRY_WLAN_TUNNEL_INITIATOR_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_CONTROL_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_CONTROL_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_FLOW_CREATE,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_FLOW_DEFAULT_POLICY_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_FLOW_DESTROY,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_FLOW_ENABLE_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_FLOW_ENABLE_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_FLOW_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_FLOW_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_POLICY_CREATE,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_POLICY_DESTROY,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_POLICY_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_POLICY_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_SVTAG_CPU_FLEX_MAP_ENABLE_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_SVTAG_CPU_FLEX_MAP_ENABLE_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_SVTAG_CPU_FLEX_MAP_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_DECRYPT_SVTAG_CPU_FLEX_MAP_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_EVENT_DEREGISTER,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_HANDLE_CREATE,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_HANDLE_INFO_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_INSTANCE_PBMP_MAP_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_IPSEC_SECURE_ASSOC_CREATE,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_IPSEC_SECURE_ASSOC_DESTROY,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_IPSEC_SECURE_ASSOC_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_IPSEC_SECURE_ASSOC_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_IPSEC_SECURE_ASSOC_TRAVERSE,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_IPSEC_SECURE_CHAN_CREATE,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_IPSEC_SECURE_CHAN_DESTROY,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_IPSEC_SECURE_CHAN_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_IPSEC_SECURE_CHAN_INFO_TRAVERSE,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_IPSEC_SECURE_CHAN_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_MAC_ADDR_CONTROL_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_MAC_ADDR_CONTROL_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_MTU_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_MTU_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_PORT_CONTROL_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_PORT_CONTROL_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_PORT_INFO_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_PORT_INFO_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_PORT_MAP_INFO_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_PORT_RSVD_SECURE_CHAN_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SECTAG_ETYPE_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SECTAG_ETYPE_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SECURE_ASSOC_CREATE,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SECURE_ASSOC_DESTROY,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SECURE_ASSOC_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SECURE_ASSOC_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SECURE_ASSOC_TRAVERSE,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SECURE_CHAN_CREATE,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SECURE_CHAN_DESTROY,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SECURE_CHAN_ENABLE_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SECURE_CHAN_ENABLE_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SECURE_CHAN_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SECURE_CHAN_INFO_TRAVERSE,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SECURE_CHAN_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_STAT_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_STAT_SET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_SUBPORT_ID_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_VLAN_TPID_ARRAY_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_VLAN_TPID_ARRAY_INDEX_GET,
	BCM_ASYNC_ENTRY_XFLOW_MACSEC_VLAN_TPID_ARRAY_SET,
	BCM_ASYNC_ENTRY_COUNT
} bcm_async_entry_t;

#endif	/* BCM_ASYNC_SUPPORT */
#endif	/* !_BCM_INT_ASYNC_REQ_H */
