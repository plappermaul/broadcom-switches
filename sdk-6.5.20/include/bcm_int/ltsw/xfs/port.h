/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_XFS_PORT_H
#define BCMINT_LTSW_XFS_PORT_H

#include <bcm/types.h>
#include <bcm/port.h>

#include <bcm_int/ltsw/port.h>
#include <bcm_int/ltsw/port_int.h>

#include <sal/sal_types.h>

/*!
 * \brief Port feature structure.
 */
typedef struct xfs_ltsw_port_feature_s {

    /*! L2 MTU */
    int l2_mtu;

    /*! Select the source of egress VLAN priority */
    int egr_vlan_pri_src;

} xfs_ltsw_port_feature_t;

/*!
 * \brief Port database structure.
 */
typedef struct xfs_ltsw_port_db_s {

    /*! Feature info. */
    const xfs_ltsw_port_feature_t *feature;

    /*! Port tab mapping. */
    const ltsw_port_tab_info_t *port_tab_map;

} xfs_ltsw_port_db_t;

/*!
 * \brief Set port database.
 *
 * \param [in] unit Unit Number.
 * \param [in] db Port database.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_db_set(
    int unit,
    const xfs_ltsw_port_db_t *db);

/*!
 * \brief Per-port misc init.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_misc_init_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief Per-port misc deinit.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_misc_deinit_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief Per-port profile init.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_profile_init_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief Per-port profile deinit.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_profile_deinit_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief Initialize TPID.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_tpid_init(int unit);

/*!
 * \brief Initialize TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_tpid_init_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief De-initialize TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_tpid_deinit_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief Initialize base strength settings.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_strength_init(int unit);

/*!
 * \brief De-initialize base strength settings.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_strength_deinit(int unit);

/*!
 * \brief Initialize GIH CPU settings.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_gih_cpu_init(int unit);

/*!
 * \brief De-initialize GIH CPU settings.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_gih_cpu_deinit(int unit);

/*!
 * \brief Add L2_IF to a port. L2_IF based tables are added with a new entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_l2_if_add(
    int unit,
    bcm_port_t port,
    int l2_if);

/*!
 * \brief Delete L2_IF from a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Logical port number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_l2_if_del(
    int unit,
    bcm_port_t port);

/*!
 * \brief Get gport from L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 * \param [out] port Gport.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_if_to_gport(
    int unit,
    int l2_if,
    int *port);

/*!
 * \brief Get L2 interface from port or gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Local logical port or gport.
 * \param [out] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_gport_to_l2_if(
    int unit,
    bcm_port_t port,
    int *l2_if);

/*!
 * \brief Get L2 interface of a trunk group from its member port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Local logical port or gport.
 * \param [out] l2_if L2 interface of trunk group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_gport_to_trunk_l2_if(
    int unit,
    bcm_port_t port,
    int *l2_if);

/*!
 * \brief Add System Port to a port. System Port based tables are added with a new entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] sys_port System port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_sys_port_add(
    int unit,
    bcm_port_t port,
    int sys_port);

/*!
 * \brief Delete System Port from a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_sys_port_del(
    int unit,
    bcm_port_t port);

/*!
 * \brief Get gport from system port.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [out] port Gport.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_sys_port_to_gport(
    int unit,
    int sys_port,
    int *port);

/*!
 * \brief Get system port from port or gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Local logical port or gport.
 * \param [out] sys_port System port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_gport_to_sys_port(
    int unit,
    bcm_port_t port,
    int *sys_port);

/*!
 * \brief Get system ports from port or gport. If gport is a trunk, get system ports from its member ports.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Local logical port or gport.
 * \param [in] array_size Size of system port array.
 * \param [out] sys_port_array System port array.
 * \param [out] count Real count of system ports.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_gport_to_sys_ports(
    int unit,
    bcm_port_t port,
    int array_size,
    int *sys_port_array,
    int *count);

/*!
 * \brief Add port-based LTs to a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_lt_add(
    int unit,
    bcm_port_t port);

/*!
 * \brief Delete port-based LTs from a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_lt_del(
    int unit,
    bcm_port_t port);

/*!
 * \brief Get logic table info from port tab type.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Enum value of the port tab.
 * \param [out] info Logic table info of the type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_tab_info_get(
    int unit,
    bcmi_ltsw_port_tab_t type,
    const ltsw_port_tab_info_t **info);

/*!
 * \brief Attach default PHB to a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_attach_phb(
    int unit,
    bcm_port_t port);

/*!
 * \brief Detach default PHB from a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_detach_phb(
    int unit,
    bcm_port_t port);

/*!
 * \brief Initialize L2_IF pool.
 *
 * \param [in] unit Unit Number.
 * \param [in] size Size of L2_IF pool.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_if_init(
    int unit,
    int size);

/*!
 * \brief De-initialize L2_IF pool.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_if_deinit(int unit);

/*!
 * \brief Reserve a range of IDs from L2_IF pool. Must be called before id alloc.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if Start ID.
 * \param [in] num Number of IDs to reserve.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_if_reserve(
    int unit,
    int l2_if,
    int num);

/*!
 * \brief Initialize device specific information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_info_init(int unit);

/*!
 * \brief Initialize device specific information for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_info_init_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief De-initialize device specific information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_info_deinit(int unit);

/*!
 * \brief Recover device specific information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_info_recover(int unit);

/*!
 * \brief Initialize port profile tables.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_profile_init(int unit);

/*!
 * \brief De-initialize port profile tables.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_profile_deinit(int unit);

/*!
 * \brief Port module misc init.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_misc_init(int unit);

/*!
 * \brief Port module misc deinit.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_misc_deinit(int unit);

/*!
 * \brief Set the status of specified port feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type Enum value of the port feature.
 * \param [in] value Value of the port feature to be set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_control_set(
    int unit,
    bcm_port_t port,
    bcm_port_control_t type,
    int value);

/*!
 * \brief Get the status of specified port feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type Enum value of the port feature.
 * \param [out] value Current value of the port feature.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_control_get(
    int unit,
    bcm_port_t port,
    bcm_port_control_t type,
    int *value);

/*!
 * \brief Add specified entry to L2_IF based tables.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_if_add(
    int unit,
    int l2_if);

/*!
 * \brief Delete specified entry of L2_IF based tables.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_if_del(
    int unit,
    int l2_if);

/*!
 * \brief Get port from L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 * \param [out] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_if_to_port(
    int unit,
    int l2_if,
    bcm_port_t *port);

/*!
 * \brief Get L2 interface from port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_to_l2_if(
    int unit,
    bcm_port_t port,
    int *l2_if);

/*!
 * \brief Get port mask from L2 interface mask.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if_mask L2 interface mask.
 * \param [out] port_mask Local logical port mask.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_if_mask_to_port_mask(
    int unit,
    int l2_if_mask,
    int *port_mask);

/*!
 * \brief Get L2 interface mask from port mask.
 *
 * \param [in] unit Unit Number.
 * \param [in] port_mask Local logical port mask.
 * \param [out] l2_if_mask L2 interface mask.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_mask_to_l2_if_mask(
    int unit,
    int port_mask,
    int *l2_if_mask);

/*!
 * \brief Get which pipes are using identified  L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 * \param [out] pipe_bmp Pipe bitmap.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_if_to_pipes(
    int unit,
    int l2_if,
    uint32_t *pipe_bmp);

/*!
 * \brief Add specified entry to System Port based tables.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [in] flags Operation flags BCMI_LTSW_PORT_XXX.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_sys_port_add(
    int unit,
    int sys_port,
    int flags);

/*!
 * \brief Delete specified entry of System Port based tables.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [in] flags Operation flags BCMI_LTSW_PORT_XXX.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_sys_port_del(
    int unit,
    int sys_port,
    int flags);

/*!
 * \brief Change the system port of a port. The settings of the old system port is moved to the new system port. The old system port is deleted then.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] sys_port New system port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_sys_port_move(
    int unit,
    bcm_port_t port,
    int sys_port);

/*!
 * \brief Get gport from system port.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [out] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_sys_port_to_port(
    int unit,
    int sys_port,
    bcm_port_t *port);

/*!
 * \brief Get system port from port or gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] sys_port System port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_to_sys_port(
    int unit,
    bcm_port_t port,
    int *sys_port);

/*!
 * \brief Map System Port with L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [in] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_sys_port_map_l2_if(
    int unit,
    int sys_port,
    int l2_if);

/*!
 * \brief Demap System Port and L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [in] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_sys_port_demap_l2_if(
    int unit,
    int sys_port,
    int l2_if);

/*!
 * \brief Traverse over all system ports.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb Callback function.
 * \param [in] user_data User data to a call back.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_sys_port_traverse(
    int unit,
    bcmi_ltsw_port_traverse_cb cb,
    void *user_data);

/*!
 * \brief Get logic table info from port tab type.
 *
 * \param [in] unit Unit Number.
 * \param [inout] fields A set of fields which contain type and LT info.
 * \param [in] count Number of fields.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_tabs_info_get(
    int unit,
    ltsw_port_tab_field_t *fields,
    int count);

/*!
 * \brief Get operation flags for logic table access.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port or gport.
 * \param [inout] fields A set of fields which contain type and LT info.
 * \param [in] count Number of fields.
 * \param [out] op Operation flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_tabs_op_get(
    int unit,
    bcm_port_t port,
    ltsw_port_tab_field_t *fields,
    int count,
    uint32_t *op);

/*!
 * \brief Get parameters for logic table access.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port or gport.
 * \param [inout] fields A set of fields which contain type and LT info.
 * \param [in] count Number of fields.
 * \param [in] op Port tab operation flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_tabs_para_get(
    int unit,
    bcm_port_t port,
    ltsw_port_tab_field_t *fields,
    int count,
    uint32_t op);

/*!
 * \brief Set the ARL hardware learning options for this port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] flags Logical OR of BCM_PORT_LEARN_xxx flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_learn_set(
    int unit,
    bcm_port_t port,
    uint32_t flags);

/*!
 * \brief Get the ARL hardware learning options for this port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags Logical OR of BCM_PORT_LEARN_xxx flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_learn_get(
    int unit,
    bcm_port_t port,
    uint32_t *flags);

/*!
 * \brief Set the maximum L3 frame size for the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] size Maximum frame size in bytes.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_l3_mtu_set(
    int unit,
    bcm_port_t port,
    int size);

/*!
 * \brief Get the maximum L3 frame size for the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] size Maximum frame size in bytes.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_l3_mtu_get(
    int unit,
    bcm_port_t port,
    int *size);

/*!
 * \brief Add allowed TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] tpid Tag Protocol ID.
 * \param [in] color_select Color mode of the TPID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_tpid_add(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t tpid,
    int color_select);

/*!
 * \brief Set the default Tag Protocol ID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_tpid_set(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t tpid);

/*!
 * \brief Retrieve the default Tag Protocol ID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [out] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_tpid_get(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t *tpid);

/*!
 * \brief Get a list of tpids and associated color selections for a given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] size Number of elements of the next two array parameters.
 * \param [out] tpid_array Buffer array to hold a list of retrieved tpids.
 * \param [out] color_array Buffer array to hold a list of retrieved color selections.
 * \param [out] count Actual number of tpids retrieved.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_tpid_get_all(
    int unit,
    bcm_port_t port,
    int type,
    int size,
    uint16_t *tpid_array,
    int *color_array,
    int *count);

/*!
 * \brief Delete allowed TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_tpid_delete(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t tpid);

/*!
 * \brief Delete all allowed TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_tpid_delete_all(
    int unit,
    bcm_port_t port,
    int type);

/*!
 * \brief Set the expected TPID for the inner tag in double-tagging mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_inner_tpid_set(
    int unit,
    bcm_port_t port,
    uint16_t tpid);

/*!
 * \brief Get the expected TPID for the inner tag in double-tagging mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_inner_tpid_get(
    int unit,
    bcm_port_t port,
    uint16_t *tpid);

/*!
 * \brief Set the default VLAN ID for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] vid VLAN ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_untagged_vlan_set(
    int unit,
    bcm_port_t port,
    bcm_vlan_t vid);

/*!
 * \brief Retrieve the default VLAN ID for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] vid VLAN ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_untagged_vlan_get(
    int unit,
    bcm_port_t port,
    bcm_vlan_t *vid);

/*!
 * \brief Set the 802.1p priority for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] priority 802.1p priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_untagged_priority_set(
    int unit,
    bcm_port_t port,
    int priority);

/*!
 * \brief Retrieve the 802.1p priority for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] priority 802.1p priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_untagged_priority_get(
    int unit,
    bcm_port_t port,
    int *priority);

/*!
 * \brief Set the private VLAN attribute of a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] vlan VLAN ID.
 * \param [in] pkt_prio Egress packet priority.
 * \param [in] flags BCM_PORT_FORCE_VLAN_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_force_vlan_set(
    int unit,
    bcm_port_t port,
    bcm_vlan_t vlan,
    int pkt_prio,
    uint32_t flags);

/*!
 * \brief Get the private VLAN attribute of a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] vlan VLAN ID.
 * \param [out] pkt_prio Egress packet priority.
 * \param [out] flags BCM_PORT_FORCE_VLAN_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_force_vlan_get(
    int unit,
    bcm_port_t port,
    bcm_vlan_t *vlan,
    int *pkt_prio,
    uint32_t *flags);

/*!
 * \brief Set port default vlan tag actions.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] action Vlan tag actions.
 * \param [in] action_profile_index Index of vlan action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_ing_vlan_action_set(
    int unit,
    bcm_port_t port,
    bcm_vlan_action_set_t *action,
    int action_profile_index);

/*!
 * \brief Get port default vlan tag actions.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] action Vlan tag actions.
 * \param [out] action_profile_index Index of vlan action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_ing_vlan_action_get(
    int unit,
    bcm_port_t port,
    bcm_vlan_action_set_t *action,
    int *action_profile_index);

/*!
 * \brief Set port default vlan tag actions to reset values.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_ing_vlan_action_reset(
    int unit,
    bcm_port_t port);

/*!
 * \brief Set egress vlan translation enable.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] enable Egress vlan translation enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_egr_vlan_xlate_enable_set(
    int unit,
    bcm_port_t port,
    int enable);

/*!
 * \brief Get egress vlan translation enable.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] enable Egress vlan translation enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_egr_vlan_xlate_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*!
 * \brief Set the ports class ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] class Classification type.
 * \param [in] class_id Class ID of the port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_class_set(
    int unit,
    bcm_port_t port,
    bcm_port_class_t class,
    uint32_t class_id);

/*!
 * \brief Get the ports class ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] class Classification type.
 * \param [out] class_id Class ID of the port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_class_get(
    int unit,
    bcm_port_t port,
    bcm_port_class_t class,
    uint32_t *class_id);

/*!
 * \brief Get which pipes are using identified port group.
 *
 * \param [in] unit Unit Number.
 * \param [in] port_group Port group.
 * \param [in] flags Operation flags BCMI_LTSW_PORT_XXX.
 * \param [out] pipe_bmp Pipe bitmap.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_group_to_pipes(
    int unit,
    int port_group,
    int flags,
    uint32_t *pipe_bmp);

/*!
 * \brief Set packet priority and cfi to internal priority and congestion mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] pri Packet 802.1p priority. -1 means any priority.
 * \param [in] cfi Packet CFI. -1 means any CFI.
 * \param [in] int_pri Internal priority. -1 means not to change it.
 * \param [in] cng Congestion. -1 means not to change it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_vlan_phb_map_set(
    int unit,
    bcm_port_t port,
    int pri,
    int cfi,
    int int_pri,
    int cng);

/*!
 * \brief Get packet priority and cfi to internal priority and congestion mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] pri Packet 802.1p priority. -1 means first priority.
 * \param [in] cfi Packet CFI. -1 means first CFI.
 * \param [out] int_pri Internal priority. NULL means not to get it.
 * \param [out] cng Congestion. NULL means not to get it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_vlan_phb_map_get(
    int unit,
    bcm_port_t port,
    int pri,
    int cfi,
    int *int_pri,
    int *cng);

/*!
 * \brief Set DSCP remapping, and DSCP to internal priority and congestion mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] srccp Source DSCP. -1 means any DSCP.
 * \param [in] mapcp Mapped DSCP. -1 means not to change it.
 * \param [in] int_pri Internal priority. -1 means not to change it.
 * \param [in] cng Congestion. -1 means not to change it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_dscp_phb_map_set(
    int unit,
    bcm_port_t port,
    int srccp,
    int mapcp,
    int int_pri,
    int cng);

/*!
 * \brief Get DSCP remapping, and DSCP to internal priority and congestion mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] srccp Source DSCP. -1 means first DSCP.
 * \param [out] mapcp Mapped DSCP. NULL means not to get it.
 * \param [out] int_pri Internal priority. NULL means not to get it.
 * \param [out] cng Congestion. NULL means not to get it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_dscp_phb_map_get(
    int unit,
    bcm_port_t port,
    int srccp,
    int *mapcp,
    int *int_pri,
    int *cng);

/*!
 * \brief Set internal priority and congestion to packet priority and cfi mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] int_pri Internal priority. -1 means any internal priority.
 * \param [in] cng Congestion. -1 means any congestion.
 * \param [in] pri Packet 802.1p priority. -1 means not to change it.
 * \param [in] cfi Packet CFI. -1 means not to change it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_phb_vlan_map_set(
    int unit,
    bcm_port_t port,
    int int_pri,
    int cng,
    int pri,
    int cfi);

/*!
 * \brief Get internal priority and congestion to packet priority and cfi mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] int_pri Internal priority. -1 means first internal priority.
 * \param [in] cng Congestion. -1 means first congestion.
 * \param [out] pri Packet 802.1p priority. NULL means not to get it.
 * \param [out] cfi Packet CFI. NULL means not to get it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_phb_vlan_map_get(
    int unit,
    bcm_port_t port,
    int int_pri,
    int cng,
    int *pri,
    int *cfi);

/*!
 * \brief Set internal priority and congestion to packet DSCP mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] int_pri Internal priority. -1 means any internal priority.
 * \param [in] cng Congestion. -1 means any congestion.
 * \param [in] dscp DSCP marking on outgoing packet. -1 means not to change it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_phb_dscp_map_set(
    int unit,
    bcm_port_t port,
    int int_pri,
    int cng,
    int dscp);

/*!
 * \brief Get internal priority and congestion to packet DSCP mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] int_pri Internal priority. -1 means first internal priority.
 * \param [in] cng Congestion. -1 means first congestion.
 * \param [out] dscp DSCP marking on outgoing packet. NULL means not to get it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_phb_dscp_map_get(
    int unit,
    bcm_port_t port,
    int int_pri,
    int cng,
    int *dscp);

/*!
 * \brief Set DSCP mapping mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] mode DSCP mapping mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_dscp_phb_map_mode_set(
    int unit,
    bcm_port_t port,
    int mode);

/*!
 * \brief Get DSCP mapping mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] mode DSCP mapping mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_dscp_phb_map_mode_get(
    int unit,
    bcm_port_t port,
    int *mode);

/*!
 * \brief Set egress shaper information.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] bandwidth Port bandwidth in kbps or pps. 0 means shaper is disabled.
 * \param [in] burst Maximum burst size in kbits or packets.
 * \param [in] mode Byte mode or packet mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_egr_shaper_set(
    int unit,
    bcm_port_t port,
    uint32_t bandwidth,
    uint32_t burst,
    bcmi_ltsw_port_shaper_mode_t mode);

/*!
 * \brief Get egress shaper information.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] bandwidth Port bandwidth in kbps or pps.
 * \param [out] burst Maximum burst size in kbits or packets.
 * \param [out] mode Byte mode or packet mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_egr_shaper_get(
    int unit,
    bcm_port_t port,
    uint32_t *bandwidth,
    uint32_t *burst,
    bcmi_ltsw_port_shaper_mode_t *mode);

/*!
 * \brief Validate egress shaper settings.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] bandwidth Port bandwidth in kbps or pps. 0 means shaper is disabled.
 * \param [in] burst Maximum burst size in kbits or packets.
 * \param [in] mode Byte mode or packet mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_egr_shaper_validate(
    int unit,
    bcm_port_t port,
    uint32_t bandwidth,
    uint32_t burst,
    bcmi_ltsw_port_shaper_mode_t mode);

/*!
 * \brief Validate port class settings.
 *
 * \param [in] unit Unit Number.
 * \param [inout] port Port Number.
 * \param [in] class Classification type.
 * \param [in] class_id Class ID of the port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_class_validate(
    int unit,
    bcm_port_t *port,
    bcm_port_class_t class,
    uint32_t class_id);

/*!
 * \brief Get port group range based on destination type.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Destination type.
 * \param [out] range Range of port group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_group_range_get(
    int unit,
    bcm_port_group_type_t type,
    bcm_port_group_range_t *range);

/*!
 * \brief Get the count of packets (or cells) currently buffered for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] count Count of packets (or cells) currently buffered.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_queue_count_get(
    int unit,
    bcm_port_t port,
    uint32_t *count);

/*!
 * \brief Attach counter entries to the given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id Stat Counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_stat_attach(
    int unit,
    bcm_port_t port,
    uint32_t stat_id);

/*!
 * \brief Detach counter entries to given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id Stat Counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_stat_detach(
    int unit,
    bcm_port_t port,
    uint32_t stat_id);

/*!
 * \brief Attach flex state action to the given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] action_id Flex state ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_flexstate_attach(
    int unit,
    bcm_port_t port,
    uint32_t action_id);

/*!
 * \brief Detach flex state action to given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] action_id Flex state ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_flexstate_detach(
    int unit,
    bcm_port_t port,
    uint32_t action_id);

/*!
 * \brief Set selective per-port blocking of flooded traffic.
 *
 * \param [in] unit Unit Number.
 * \param [in] ing_port Ingress port.
 * \param [in] egr_port Egress port.
 * \param [in] flags Specifies the type of traffic to block.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_flood_block_set(
    int unit,
    bcm_port_t ing_port,
    bcm_port_t egr_port,
    uint32_t flags);

/*!
 * \brief Get the current per-port flood block settings.
 *
 * \param [in] unit Unit Number.
 * \param [in] ing_port Ingress port.
 * \param [in] egr_port Egress port.
 * \param [out] flags Specifies the type of traffic to block.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_flood_block_get(
    int unit,
    bcm_port_t ing_port,
    bcm_port_t egr_port,
    uint32_t *flags);

/*!
 * \brief Set switching only to indicated ports from given (modid, port).
 *
 * \param [in] unit Unit Number.
 * \param [in] port Ingress port or gport.
 * \param [in] modid Source module ID.
 * \param [in] pbmp Bitmap of ports to allow egress.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_egress_set(
    int unit,
    bcm_port_t port,
    int modid,
    bcm_pbmp_t pbmp);

/*!
 * \brief Retrieve bitmap of ports for which switching is enabled for (modid, port).
 *
 * \param [in] unit Unit Number.
 * \param [in] port Ingress port or gport.
 * \param [in] modid Source module ID.
 * \param [out] pbmp Bitmap of ports where egress allowed.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_egress_get(
    int unit,
    bcm_port_t port,
    int modid,
    bcm_pbmp_t *pbmp);

/*!
 * \brief Add a match to an existing port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] match Match criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_match_add(
    int unit,
    bcm_port_t port,
    bcm_port_match_info_t *match);

/*!
 * \brief Remove a match from an existing port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] match Match criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_match_delete(
    int unit,
    bcm_port_t port,
    bcm_port_match_info_t *match);

/*!
 * \brief Get all the matches for an existing port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] size Number of elements in match array.
 * \param [out] array Match criteria array.
 * \param [out] count Match count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_match_multi_get(
    int unit,
    bcm_port_t port,
    int size,
    bcm_port_match_info_t *array,
    int *count);

/*!
 * \brief Set port HG3 enable.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] enable HG3 enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_hg3_enable_set(
    int unit,
    bcm_port_t port,
    int enable);

/*!
 * \brief Get port HG3 enable.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] enable HG3 enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_hg3_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*!
 * \brief Set HG3 Ethernet Type.
 *
 * \param [in] unit Unit Number.
 * \param [in] type HG3 Ethernet Type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_hg3_eth_type_set(
    int unit,
    int type);

/*!
 * \brief Get HG3 Ethernet Type.
 *
 * \param [in] unit Unit Number.
 * \param [out] type HG3 Ethernet Type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_hg3_eth_type_get(
    int unit,
    int *type);

/*!
 * \brief Enable egress VLAN membership check for IFP redirection.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable Enable or disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_ifp_egr_vlan_check_enable_set(
    int unit,
    uint32_t enable);

/*!
 * \brief Get egress VLAN membership check enable for IFP redirection.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Enable or disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_ifp_egr_vlan_check_enable_get(
    int unit,
    uint32_t *enable);

/*!
 * \brief Get flags to disable VLAN membership check.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags Flags to disable VLAN membership check.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_vlan_check_disable_get(
    int unit,
    bcm_port_t port,
    uint16_t *flags);

/*!
 * \brief Get flags to disable STG check.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags Flags to disable STG check.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_stg_check_disable_get(
    int unit,
    bcm_port_t port,
    uint16_t *flags);

/*!
 * \brief Dump port sw infomation.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_port_dump_sw(int unit);

/*!
 * \brief Allocate an ID from L2_IF pool.
 *
 * \param [in] unit Unit Number.
 * \param [out] l2_if Allocated ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval SHR_E_EMPTY No available ID to allocacte.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_if_alloc(
    int unit,
    int *l2_if);

/*!
 * \brief Free an ID to L2_IF pool.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if ID to free.
 *
 * \retval SHR_E_NONE No errors.
 * \retval SHR_E_FULL The ID is already free.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_if_free(
    int unit,
    int l2_if);

/*!
 * \brief Dump L2_IF pool.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_if_dump(int unit);

#endif /* BCMINT_LTSW_XFS_PORT_H */
