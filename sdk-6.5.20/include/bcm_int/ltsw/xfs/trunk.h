/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_XFS_TRUNK_H
#define BCMINT_LTSW_XFS_TRUNK_H

#include <bcm/types.h>
#include <bcm/trunk.h>

#include <bcm_int/ltsw/trunk_int.h>

#include <sal/sal_types.h>

/*!
 * \brief Convert trunk type Id to L2 destination.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_type Trunk Type.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_priv Trunk private information.
 * \param [out] l2_dest L2 destination.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_type_id_to_l2_dest(
    int unit,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_priv_info_t *t_priv,
    int *l2_dest);

/*!
 * \brief Convert L2 destination to trunk type Id.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_dest L2 destination.
 * \param [out] t_type Trunk Type.
 * \param [out] t_id Type-based Trunk Identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_l2_dest_to_type_id(
    int unit,
    int l2_dest,
    bcmint_trunk_type_t *t_type,
    bcmint_trunk_id_t *t_id);

/*!
 * \brief Judge the gport is channelized access port or not.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [out] is_channelized_access_port TRUE/False: Is or Isn't.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_gport_is_channelized_access_port(
    int unit,
    bcm_gport_t gport,
    bool *is_channelized_access_port);

/*!
 * \brief Get TRUNK module public information.
 *
 * \param [in] unit Unit Number.
 * \param [out] t_pub Trunk public information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_pub_info_get(
    int unit,
    bcmint_trunk_pub_info_t *t_pub);

/*!
 * \brief Compare two psc values and return the result.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_type Trunk Type.
 * \param [in] psc0 First Port Selection Criteria.
 * \param [in] psc1 Second Port Selection Criteria.
 * \param [in] exact Exact match.
 * \param [out] result TRUE/False: Same or Not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_psc_compare(
    int unit,
    bcmint_trunk_type_t t_type,
    int psc0,
    int psc1,
    int exact,
    bool *result);

/*!
 * \brief Initialized the trunk module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_init(int unit);

/*!
 * \brief De-init trunk module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_detach(int unit);

/*!
 * \brief Clear trunk related LT tables.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_clear(int unit);

/*!
 * \brief Create a specific trunk with identifier.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] t_priv Trunk private information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_create(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_priv_info_t *t_priv);

/*!
 * \brief Validate the trunk input parameters before trunk set function is executed.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] trunk_info Trunk Information.
 * \param [in] member_count Trunk Member Count.
 * \param [in] member_array Trunk Member Array.
 * \param [in] op Trunk Member Operation Code.
 * \param [in] member Trunk Member.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_params_validate(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcm_trunk_info_t *trunk_info,
    int member_count,
    bcm_trunk_member_t *member_array,
    int op,
    bcm_trunk_member_t *member);

/*!
 * \brief Get the trunk configuration from HW.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] t_priv Trunk private information.
 * \param [out] trunk_info Trunk Information.
 * \param [in] member_max Max Number of Trunk Members.
 * \param [out] member_array Trunk Member Array.
 * \param [out] member_count Trunk Member Count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_get(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_priv_info_t *t_priv,
    bcm_trunk_info_t *trunk_info,
    int member_max,
    bcm_trunk_member_t *member_array,
    int *member_count);

/*!
 * \brief Update the trunk configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] trunk_info Trunk Information.
 * \param [in] member_count Trunk Member Count.
 * \param [in] member_array Trunk Member Array.
 * \param [in] op Trunk Member Operation Code.
 * \param [in] member Trunk Member.
 * \param [in] t_priv Trunk private information.
 * \param [in] t_update Trunk update information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_update(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcm_trunk_info_t *trunk_info,
    int member_count,
    bcm_trunk_member_t *member_array,
    int op,
    bcm_trunk_member_t *member,
    bcmint_trunk_priv_info_t *t_priv,
    bcmint_trunk_update_info_t *t_update);

/*!
 * \brief Destroy a specific trunk with identifier.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] t_priv Trunk private information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_destroy(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_priv_info_t *t_priv);

/*!
 * \brief Find a specific trunk with member gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [out] t_id Type-based Trunk Identifier.
 * \param [out] t_type Trunk Type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_find(
    int unit,
    bcm_gport_t gport,
    bcmint_trunk_id_t *t_id,
    bcmint_trunk_type_t *t_type);

/*!
 * \brief Find a specific virtual trunk with member gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [out] vp_lag_vp The VPLAG vp Id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_find_virtual(
    int unit,
    bcm_gport_t gport,
    int *vp_lag_vp);

/*!
 * \brief To notify the trunk is updated.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_notify(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type);

/*!
 * \brief Extract trunk failover flags from trunk configuration flags.
 *
 * \param [in] unit Unit Number.
 * \param [in] flags Trunk Configuration Flags.
 * \param [in] t_type Trunk Type.
 * \param [in] fail_flags Trunk Failover Flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_failover_flags_extract(
    int unit,
    uint32_t flags,
    bcmint_trunk_type_t t_type,
    uint32_t *fail_flags);

/*!
 * \brief Validate the trunk failover psc configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_type Trunk Type.
 * \param [in] psc Port Selection Criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_failover_psc_validate(
    int unit,
    bcmint_trunk_type_t t_type,
    int psc);

/*!
 * \brief Set trunk failover members to a specific port member.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] fail_port Local Failover Port Gport Number.
 * \param [in] psc Port Selection Criteria.
 * \param [in] ftp_count Failto Port Count.
 * \param [in] ftp Failto Port Array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_failover_set(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcm_gport_t fail_port,
    int psc,
    int ftp_count,
    bcm_gport_t *ftp);

/*!
 * \brief Get trunk failover members of a specific port member.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] fail_port Local Failover Port Gport Number.
 * \param [out] psc Port Selection Criteria.
 * \param [in] ftp_max Failto Port Max Count.
 * \param [out] ftp Failto Port Array.
 * \param [out] ftp_count Failto Port Count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_failover_get(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcm_gport_t fail_port,
    int *psc,
    int ftp_max,
    bcm_gport_t *ftp,
    int *ftp_count);

/*!
 * \brief Update trunk failover configuration for a specific trunk.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] psc Port Selection Criteria.
 * \param [in] fail_flags Failover Configuration Flags.
 * \param [in] fail_port Local Failover Port Gport Number.
 * \param [in] ftp_max Failto Port Max Number.
 * \param [in] member_count Trunk Member Count.
 * \param [in] member_array Trunk Member Array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_failover_update(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    int psc,
    uint32_t fail_flags,
    bcm_gport_t fail_port,
    int ftp_max,
    int member_count,
    bcm_trunk_member_t *member_array);

/*!
 * \brief Enable/disable fabric trunk resolution.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] o_type Fabric trunk override Type.
 * \param [in] o_index Fabric trunk override Type based index.
 * \param [in] enable Enable/Disable fabric trunk resolution.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_override_set(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_override_type_t o_type,
    int o_index,
    int enable);

/*!
 * \brief Get fabric trunk resolution enable/disable status.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] o_type Fabric trunk override Type.
 * \param [in] o_index Fabric trunk override Type based index.
 * \param [out] enable Enable/Disable fabric trunk resolution.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_override_get(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_override_type_t o_type,
    int o_index,
    int *enable);

/*!
 * \brief Set trunk member port status.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] status Trunk member link status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_member_status_set(
    int unit,
    bcm_port_t port,
    int status);

/*!
 * \brief Get trunk member port status.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] status Trunk member link status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_member_status_get(
    int unit,
    bcm_port_t port,
    int *status);

/*!
 * \brief Find trunk DLB Identifier.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_type Trunk Type.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_priv Trunk private information.
 * \param [out] dlb_id Trunk dlb identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_find_dlb_id(
    int unit,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_priv_info_t *t_priv,
    int *dlb_id);

/*!
 * \brief Update the VPLAG member.
 *
 * \param [in] unit Unit Number.
 * \param [in] vp_lag_vp The VPLAG vp Id.
 * \param [in] gport The generic port number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_vp_lag_member_update(
    int unit,
    int vp_lag_vp,
    bcm_gport_t gport);

/*!
 * \brief Get the CML bits for a vp_lag port.
 *
 * \param [in] unit Unit Number.
 * \param [in] vp_lag_vp The VPLAG vp Id.
 * \param [out] flags The L2 CML FLAGS.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_vp_lag_vp_learn_get(
    int unit,
    int vp_lag_vp,
    uint32_t *flags);

/*!
 * \brief Set the CML bits for a vp_lag port.
 *
 * \param [in] unit Unit Number.
 * \param [in] vp_lag_vp The VPLAG vp Id.
 * \param [in] flags The L2 CML FLAGS.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_trunk_vp_lag_vp_learn_set(
    int unit,
    int vp_lag_vp,
    uint32_t flags);

#endif /* BCMINT_LTSW_XFS_TRUNK_H */
