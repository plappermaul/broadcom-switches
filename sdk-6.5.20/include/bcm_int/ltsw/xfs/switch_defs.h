#ifndef BCMINT_SC_DEFS_H
#define BCMINT_SC_DEFS_H
/*******************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the tools/ltsw/switch/ configuration file.
 * Edits to this file will be lost when it is regenerated.
 *
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *
 * Definition file for switch control implementation.
 */

/*! Device-wide switch control set function prototype. */
typedef int (*sc_set_f)(int unit, int arg);

/*! Device-wide switch control get function prototype. */
typedef int (*sc_get_f)(int unit, int *arg);

/*! Port base switch control set function prototype. */
typedef int (*scp_set_f)(int unit, int port, int arg);

/*! Port base switch control get function prototype. */
typedef int (*scp_get_f)(int unit, int port, int *arg);

/*! Encode argument to setting value */
typedef int (*sc_arg_encode_f)(int unit, int port, int arg,
                                      uint64_t *val);

/*! Decode getting value to argment */
typedef int (*sc_arg_decode_f)(int unit, int port, uint64_t val,
                                      int *arg);

/*! Map device-wide functions to a switch control type. */
#define SC_FUNC(_m) {_m, sc_##_m##_set, sc_##_m##_get}

/*! Map per port functions to a switch control type. */
#define SCP_FUNC(_m) {_m, scp_##_m##_set, scp_##_m##_get}

/*! Device-wide function mapping list */
#define SC_FUNC_LIST \
    {-1, NULL, NULL}, \
    SC_FUNC(bcmSwitchTrunkDynamicSampleRate), \
    SC_FUNC(bcmSwitchFabricTrunkDynamicSampleRate), \
    SC_FUNC(bcmSwitchEcmpDynamicSampleRate), \
    SC_FUNC(bcmSwitchTrunkDynamicEgressBytesMinThreshold), \
    SC_FUNC(bcmSwitchFabricTrunkDynamicEgressBytesMinThreshold), \
    SC_FUNC(bcmSwitchEcmpDynamicEgressBytesMinThreshold), \
    SC_FUNC(bcmSwitchTrunkDynamicEgressBytesMaxThreshold), \
    SC_FUNC(bcmSwitchFabricTrunkDynamicEgressBytesMaxThreshold), \
    SC_FUNC(bcmSwitchEcmpDynamicEgressBytesMaxThreshold), \
    SC_FUNC(bcmSwitchTrunkDynamicQueuedBytesMinThreshold), \
    SC_FUNC(bcmSwitchFabricTrunkDynamicQueuedBytesMinThreshold), \
    SC_FUNC(bcmSwitchEcmpDynamicQueuedBytesMinThreshold), \
    SC_FUNC(bcmSwitchTrunkDynamicQueuedBytesMaxThreshold), \
    SC_FUNC(bcmSwitchFabricTrunkDynamicQueuedBytesMaxThreshold), \
    SC_FUNC(bcmSwitchEcmpDynamicQueuedBytesMaxThreshold), \
    SC_FUNC(bcmSwitchTrunkDynamicPhysicalQueuedBytesMinThreshold), \
    SC_FUNC(bcmSwitchFabricTrunkDynamicPhysicalQueuedBytesMinThreshold), \
    SC_FUNC(bcmSwitchEcmpDynamicPhysicalQueuedBytesMinThreshold), \
    SC_FUNC(bcmSwitchTrunkDynamicPhysicalQueuedBytesMaxThreshold), \
    SC_FUNC(bcmSwitchFabricTrunkDynamicPhysicalQueuedBytesMaxThreshold), \
    SC_FUNC(bcmSwitchEcmpDynamicPhysicalQueuedBytesMaxThreshold), \
    SC_FUNC(bcmSwitchTrunkDynamicEgressBytesExponent), \
    SC_FUNC(bcmSwitchFabricTrunkDynamicEgressBytesExponent), \
    SC_FUNC(bcmSwitchEcmpDynamicEgressBytesExponent), \
    SC_FUNC(bcmSwitchTrunkDynamicQueuedBytesExponent), \
    SC_FUNC(bcmSwitchFabricTrunkDynamicQueuedBytesExponent), \
    SC_FUNC(bcmSwitchEcmpDynamicQueuedBytesExponent), \
    SC_FUNC(bcmSwitchTrunkDynamicPhysicalQueuedBytesExponent), \
    SC_FUNC(bcmSwitchFabricTrunkDynamicPhysicalQueuedBytesExponent), \
    SC_FUNC(bcmSwitchEcmpDynamicPhysicalQueuedBytesExponent), \
    SC_FUNC(bcmSwitchTrunkDynamicEgressBytesDecreaseReset), \
    SC_FUNC(bcmSwitchFabricTrunkDynamicEgressBytesDecreaseReset), \
    SC_FUNC(bcmSwitchEcmpDynamicEgressBytesDecreaseReset), \
    SC_FUNC(bcmSwitchTrunkDynamicQueuedBytesDecreaseReset), \
    SC_FUNC(bcmSwitchFabricTrunkDynamicQueuedBytesDecreaseReset), \
    SC_FUNC(bcmSwitchEcmpDynamicQueuedBytesDecreaseReset), \
    SC_FUNC(bcmSwitchTrunkDynamicPhysicalQueuedBytesDecreaseReset), \
    SC_FUNC(bcmSwitchFabricTrunkDynamicPhysicalQueuedBytesDecreaseReset), \
    SC_FUNC(bcmSwitchEcmpDynamicPhysicalQueuedBytesDecreaseReset), \
    SC_FUNC(bcmSwitchTrunkDynamicRandomSeed), \
    SC_FUNC(bcmSwitchFabricTrunkDynamicRandomSeed), \
    SC_FUNC(bcmSwitchEcmpDynamicRandomSeed), \
    SC_FUNC(bcmSwitchDlbMonitorIngressRandomSeed), \
    SC_FUNC(bcmSwitchTrunkDynamicMonitorIngressRandomSeed), \
    SC_FUNC(bcmSwitchL2StaticMoveToCpu), \
    SC_FUNC(bcmSwitchHWL2Freeze), \
    SC_FUNC(bcmSwitchL2HitClear), \
    SC_FUNC(bcmSwitchL2SrcHitClear), \
    SC_FUNC(bcmSwitchL2DstHitClear), \
    SC_FUNC(bcmSwitchBstEnable), \
    SC_FUNC(bcmSwitchBstTrackingMode), \
    SC_FUNC(bcmSwitchBstSnapshotEnable), \
    SC_FUNC(bcmSwitchSampleIngressRandomSeed), \
    SC_FUNC(bcmSwitchSampleEgressRandomSeed), \
    SC_FUNC(bcmSwitchSampleFlexRandomSeed), \
    SC_FUNC(bcmSwitchMirrorAllowDuplicateMirroredPackets), \
    SC_FUNC(bcmSwitchMirrorCpuCosq), \
    SC_FUNC(bcmSwitchMirrorMulticastCosq), \
    SC_FUNC(bcmSwitchMirrorPktChecksEnable), \
    SC_FUNC(bcmSwitchPFCDeadlockRecoveryAction), \
    SC_FUNC(bcmSwitchIpmcSameVlanPruning), \
    SC_FUNC(bcmSwitchRateLimitLinear), \
    SC_FUNC(bcmSwitchEcnNonTcpResponsive), \
    SC_FUNC(bcmSwitchNetworkGroupDepth), \
    SC_FUNC(bcmSwitchEccSingleBitErrorEvent), \
    SC_FUNC(bcmSwitchHashUseFlowSelEcmpOverlay), \
    SC_FUNC(bcmSwitchHashUseFlowSelEcmp), \
    SC_FUNC(bcmSwitchMacroFlowEcmpHashOverlayConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowEcmpUnderlayHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowECMPOverlayHashSeed), \
    SC_FUNC(bcmSwitchMacroFlowECMPUnderlayHashSeed), \
    SC_FUNC(bcmSwitchMplsPortIndependentLowerRange1), \
    SC_FUNC(bcmSwitchMplsPortIndependentUpperRange1), \
    SC_FUNC(bcmSwitchMplsPortIndependentLowerRange2), \
    SC_FUNC(bcmSwitchMplsPortIndependentUpperRange2), \
    SC_FUNC(bcmSwitchMplsPwControlWordUpperClear), \
    SC_FUNC(bcmSwitchMplsPwControlWordLowerClear), \
    SC_FUNC(bcmSwitchMplsGal), \
    SC_FUNC(bcmSwitchMplsEli), \
    SC_FUNC(bcmSwitchMplsPwTermSeqNumberRange), \
    SC_FUNC(bcmSwitchHigig3Ethertype), \
    SC_FUNC(bcmSwitchAlternateStoreForward), \
    SC_FUNC(bcmSwitchHashUseFlowSelTrunkUc), \
    SC_FUNC(bcmSwitchHashUseFlowSelTrunkNonUnicast), \
    SC_FUNC(bcmSwitchHashUseFlowSelTrunkFailover), \
    SC_FUNC(bcmSwitchHashUseFlowSelHigigTrunk), \
    SC_FUNC(bcmSwitchHashUseFlowSelHigigTrunkFailover), \
    SC_FUNC(bcmSwitchHashUseFlowSelTrunkDynamic), \
    SC_FUNC(bcmSwitchHashUseFlowSelVpTrunk), \
    SC_FUNC(bcmSwitchHashUseFlowSelEntropy), \
    SC_FUNC(bcmSwitchHashUseHigig3EntropyTrunkNonUnicast), \
    SC_FUNC(bcmSwitchMacroFlowTrunkUnicastHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowTrunkNonUnicastHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowTrunkFailoverHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowHigigTrunkHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowHigigTrunkFailoverHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowTrunkDynamicHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowVpTrunkHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowEntropyHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowEcmpDynamicHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowTrunkUnicastHashSeed), \
    SC_FUNC(bcmSwitchMacroFlowTrunkNonUnicastHashSeed), \
    SC_FUNC(bcmSwitchMacroFlowTrunkFailoverHashSeed), \
    SC_FUNC(bcmSwitchMacroFlowHigigTrunkHashSeed), \
    SC_FUNC(bcmSwitchMacroFlowHigigTrunkFailoverHashSeed), \
    SC_FUNC(bcmSwitchMacroFlowTrunkDynamicHashSeed), \
    SC_FUNC(bcmSwitchMacroFlowVpTrunkHashSeed), \
    SC_FUNC(bcmSwitchMacroFlowEntropyHashSeed), \
    SC_FUNC(bcmSwitchMacroFlowEcmpDynamicHashSeed), \
    SC_FUNC(bcmSwitchMacroFlowTrunkUnicastHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkUnicastHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkUnicastHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkNonUnicastHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkNonUnicastHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkNonUnicastHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkFailoverHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkFailoverHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkFailoverHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowHigigTrunkHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowHigigTrunkHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowHigigTrunkHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowHigigTrunkFailoverHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowHigigTrunkFailoverHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowHigigTrunkFailoverHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkDynamicHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkDynamicHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkDynamicHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowVpTrunkHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowVpTrunkHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowVpTrunkHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowHashOverlayMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowHashOverlayMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowHashOverlayStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowLoadBalanceEntropyHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowLoadBalanceEntropyHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowLoadBalanceEntropyHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpDynamicHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpDynamicHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpDynamicHashStrideOffset), \
    SC_FUNC(bcmSwitchTrunkUnicastHashBitCountSelect), \
    SC_FUNC(bcmSwitchTrunkNonunicastHashBitCountSelect), \
    SC_FUNC(bcmSwitchTrunkFailoverHashBitCountSelect), \
    SC_FUNC(bcmSwitchHigigTrunkHashBitCountSelect), \
    SC_FUNC(bcmSwitchHigigTrunkFailoverHashBitCountSelect), \
    SC_FUNC(bcmSwitchTrunkDynamicHashBitCountSelect), \
    SC_FUNC(bcmSwitchVpTrunkHashBitCountSelect), \
    SC_FUNC(bcmSwitchEntropyHashBitCountSelect), \
    SC_FUNC(bcmSwitchEcmpOverlayHashBitCountSelect), \
    SC_FUNC(bcmSwitchECMPHashBitCountSelect), \
    SC_FUNC(bcmSwitchEcmpDynamicHashBitCountSelect), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthL2), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthL3), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthExactMatch), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthVlanTranslate1), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthVlanTranslate2), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthEgressVlanTranslate1), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthEgressVlanTranslate2), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthL3Tunnel), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthVlanTranslate3), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthL2Tunnel), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthL2TunnelVnid), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthFlowTracker), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthIpmcGroup), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthIpmcSourceGroup), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthL2mc), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthMpls), \
    SC_FUNC(bcmSwitchLatencyEcnMarkMode), \
    SC_FUNC(bcmSwitchVxlanEvpnEnable), \
    SC_FUNC(bcmSwitchL3UcSameInterfaceDrop), \
    SC_FUNC(bcmSwitchL3RouteHitClear), \
    SC_FUNC(bcmSwitchL3HostHitClear), \
    SC_FUNC(bcmSwitchMirrorUnicastCosqEnable), \
    SC_FUNC(bcmSwitchIfaProtocol), \
    SC_FUNC(bcmSwitchIntEgressTimeDelta), \
    SC_FUNC(bcmSwitchIntProbeMarker1), \
    SC_FUNC(bcmSwitchIntProbeMarker2), \
    SC_FUNC(bcmSwitchTimesyncLiveWireToD), \
    SC_FUNC(bcmSwitchTimesyncEgressVersion), \
    SC_FUNC(bcmSwitchTimesyncIngressVersion), \
    SC_FUNC(bcmSwitchNtpL4DestPort), \
    SC_FUNC(bcmSwitchEgressFlexCounterPresel), \

/*! Per port function mapping list.*/
#define SCP_FUNC_LIST \
    {-1, NULL, NULL}, \
    SCP_FUNC(bcmSwitchLinkDownInfoSkip), \
    SCP_FUNC(bcmSwitchMeterAdjust), \
    SCP_FUNC(bcmSwitchShaperAdjust), \
    SCP_FUNC(bcmSwitchAlternateStoreForward), \
    SCP_FUNC(bcmSwitchECMPOverlayHashOffset), \
    SCP_FUNC(bcmSwitchECMPUnderlayHashSet0Offset), \
    SCP_FUNC(bcmSwitchEcmpDynamicHashOffset), \
    SCP_FUNC(bcmSwitchTrunkUnicastHashOffset), \
    SCP_FUNC(bcmSwitchTimesyncEgressTimestampingMode), \
    SCP_FUNC(bcmSwitchTrunkNonUnicastHashOffset), \
    SCP_FUNC(bcmSwitchTrunkFailoverHashOffset), \
    SCP_FUNC(bcmSwitchHigigTrunkHashOffset), \
    SCP_FUNC(bcmSwitchFabricTrunkFailoverHashOffset), \
    SCP_FUNC(bcmSwitchTrunkDynamicHashOffset), \
    SCP_FUNC(bcmSwitchVpTrunkHashOffset), \
    SCP_FUNC(bcmSwitchEntropyHashOffset), \
    SCP_FUNC(bcmSwitchL2SourceDiscardMoveToCpu), \

/*! Device-wide value control list */
#define SC_VALUE_CONTROLS \
    {bcmSwitchL2TunnelTpid, \
        FALSE, R_TUNNEL_TPIDs, V_0s, \
        NULL, NULL}, \
    {bcmSwitchECMPLevel1RandomSeed, \
        FALSE, ECMP_CONTROLs, LEVEL0_RANDOM_SEEDs, \
        NULL, NULL}, \
    {bcmSwitchECMPLevel2RandomSeed, \
        FALSE, ECMP_CONTROLs, LEVEL1_RANDOM_SEEDs, \
        NULL, NULL}, \
    {bcmSwitchTrunkRandomSeed, \
        FALSE, TRUNK_CONTROLs, RANDOM_SEEDs, \
        NULL, NULL}, \
    {bcmSwitchHigigTrunkRandomSeed, \
        FALSE, TRUNK_CONTROLs, SYSTEM_RANDOM_SEEDs, \
        NULL, NULL}, \
    {bcmSwitchVPTrunkRandomSeed, \
        FALSE, ECMP_CONTROLs, LEVEL0_RANDOM_SEEDs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackMaxIpPayloadEnable, \
        FALSE, DOS_CONTROLs, OUTER_IP_PAYLOAD_MAX_CHECKs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackMaxIpPayloadSize, \
        FALSE, DOS_CONTROLs, OUTER_IP_PAYLOAD_MAX_SIZEs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackMinIpPayloadEnable, \
        FALSE, DOS_CONTROLs, OUTER_IP_PAYLOAD_MIN_CHECKs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackMinIpPayloadSize, \
        FALSE, DOS_CONTROLs, OUTER_IP_PAYLOAD_MIN_SIZEs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackMaxInnerIpPayloadEnable, \
        FALSE, DOS_CONTROLs, INNER_IP_PAYLOAD_MAX_CHECKs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackMaxInnerIpPayloadSize, \
        FALSE, DOS_CONTROLs, INNER_IP_PAYLOAD_MAX_SIZEs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackMinInnerIpPayloadEnable, \
        FALSE, DOS_CONTROLs, INNER_IP_PAYLOAD_MIN_CHECKs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackMinInnerIpPayloadSize, \
        FALSE, DOS_CONTROLs, INNER_IP_PAYLOAD_MIN_SIZEs, \
        NULL, NULL}, \
    {bcmSwitchVxlanUdpDestPortSet, \
        FALSE, R_VXLAN_UDP_DST_PORTs, PORTs, \
        NULL, NULL}, \

/*! Device-wide bit control list */
#define SC_BIT_CONTROLS \

/*! Device-wide symbol control config list */
#define SC_SYMBOL_CONTROLS \

/*! Per port value control config list */
#define SCP_VALUE_CONTROLS \

/*! Per port bit control config list */
#define SCP_BIT_CONTROLS \

/*! Per port symbol control config list */
#define SCP_SYMBOL_CONTROLS \

/*! Per port key access symbol control config list */
#define SCP_KEY_SYMBOL_CONTROLS \

/*! PORT_PKT_CONTROL config list */
#define SCP_PORT_PKT_CONTROLS \

#endif /* BCMINT_SC_DEFS_H */
