/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_STG_INT_H
#define BCMINT_LTSW_STG_INT_H

#include <bcm/types.h>

#include <sal/sal_types.h>

/*!
 * \brief HA subcomponent id for STG module.
 */
/*! Default STG. */
#define BCMINT_STG_SUB_COMP_ID_HA_DEF 0

/*! STG STP information. */
#define BCMINT_STG_SUB_COMP_ID_HA_STP_INFO 1

/*!
 * \brief Get scalar value from symbol.
 *
 * \param [in] unit Unit Number.
 * \param [in] symbol Symbol string.
 * \param [out] val Scalar value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stg_symbol_to_scalar_f)(
    int unit,
    const char *symbol,
    uint64_t *val);

/*!
 * \brief Get symbol from scalar value.
 *
 * \param [in] unit Unit Number.
 * \param [in] val Scalar value.
 * \param [out] symbol Symbol string.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stg_scalar_to_symbol_f)(
    int unit,
    uint64_t val,
    const char * *symbol);

/*!
 * \brief STG LT field description.
 */
typedef struct bcmint_stg_fld_s {

    /*! LT field name. */
    const char *name;

    /*! Callback to get scalar value from symbol. */
    stg_symbol_to_scalar_f symbol_to_scalar;

    /*! Callback to get symbol from scalar value. */
    stg_scalar_to_symbol_f scalar_to_symbol;

} bcmint_stg_fld_t;

/*!
 * \brief STG LT description.
 */
typedef struct bcmint_stg_lt_s {

    /*! LT name. */
    const char *name;

    /*! Bitmap of valid fields. */
    uint32_t fld_bmp;

    /*! LT fields. */
    const bcmint_stg_fld_t *flds;

} bcmint_stg_lt_t;

/*!
 * \brief STG LT database.
 */
typedef struct bcmint_stg_lt_db_s {

    /*! LT bitmap. */
    uint32_t lt_bmp;

    /*! LT array. */
    const bcmint_stg_lt_t *lts;

} bcmint_stg_lt_db_t;

/*!
 * \brief VLAN_STG/VFI_STG LT fields.
 */
typedef enum bcmint_stg_vlan_vfi_stg_s {

    /*! ID. */
    BCMINT_LTSW_STG_FLD_VLAN_VFI_STG_ID = 0,

    /*! STP state. */
    BCMINT_LTSW_STG_FLD_VLAN_VFI_STG_STATE = 1,

    /*! The last one, not valid. */
    BCMINT_LTSW_STG_FLD_VLAN_VFI_STG_CNT = 2

} bcmint_stg_vlan_vfi_stg_t;

#define BCMINT_STG_VLAN_VFI_STG_STR \
{ \
    "ID", \
    "STATE", \
    "CNT" \
}

/*!
 * \brief STG LTs.
 */
typedef enum bcmint_stg_lt_id_s {

    /*! LT VLAN_STG/VFI_STG. */
    BCMINT_LTSW_STG_VLAN_VFI_STG = 0,

    /*! STG LT count. */
    BCMINT_LTSW_STG_LT_CNT = 1

} bcmint_stg_lt_id_t;

#define BCMINT_STG_LT_ID_STR \
{ \
    "VLAN_VFI_STG", \
    "LT_CNT" \
}

/*!
 * \brief Get the default STG.
 *
 * \param [in] unit Unit Number.
 * \param [out] stg STG index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmint_stg_default_get(
    int unit,
    bcm_stg_t *stg);

/*!
 * \brief Check if STG exists.
 *
 * \param [in] unit Unit Number.
 * \param [in] stg STG index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmint_stg_exist_check(
    int unit,
    bcm_stg_t stg);

/*!
 * \brief Get STG user index per STG user.
 *
 * \param [in] unit Unit Number.
 * \param [in] user STG user
 *
 * \retval Value STG user index.
 */
extern int
bcmint_stg_user_idx_get(
    int unit,
    int user);

/*!
 * \brief Get per npl/chip LT info.
 *
 * \param [in] unit Unit Number.
 * \param [in] lt_id STG LT ID
 * \param [out] lt_info LT info
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmint_stg_lt_get(
    int unit,
    bcmint_stg_lt_id_t lt_id,
    const bcmint_stg_lt_t * *lt_info);

#endif /* BCMINT_LTSW_STG_INT_H */
