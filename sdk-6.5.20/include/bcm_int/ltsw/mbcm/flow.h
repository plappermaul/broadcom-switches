/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_MBCM_FLOW_H
#define BCMINT_LTSW_MBCM_FLOW_H

#include <bcm/types.h>
#include <bcm/flow.h>
#include <bcm/switch.h>
#include <bcm/flexctr.h>

#include <bcm_int/ltsw/flow_int.h>

#include <sal/sal_types.h>

/*!
 * \brief Initialize flow module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_init_f)(int unit);

/*!
 * \brief Get LT database.
 *
 * \param [in] unit Unit Number.
 * \param [in] lt_db LT database.
 */
typedef int (*flow_lt_db_get_f)(
    int unit,
    bcmint_flow_lt_db_t *lt_db);

/*!
 * \brief De-initialize flow module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_detach_f)(int unit);

/*!
 * \brief Get mapping info of given type.
 *
 * \param [in] unit Unit Number.
 * \param [in] info_type Info type from ltsw_flow_mapping_info_type_t.
 * \param [out] info_ptr Info pointer.
 * \param [out] rec_num Number of records.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_mapping_info_get_f)(
    int unit,
    bcmint_flow_mapping_info_type_t info_type,
    uint8_t **info_ptr,
    uint32_t *rec_num);

/*!
 * \brief Update HW table for given VPN.
 *
 * \param [in] unit Unit Number.
 * \param [in] opt Opt type from ltsw_flow_hw_opt_type_t.
 * \param [in] vpn VPN ID.
 * \param [in-out] info VPN configuration structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_vpn_hw_opt_f)(
    int unit,
    bcmint_flow_hw_opt_type_t opt,
    bcm_vpn_t vpn,
    bcm_flow_vpn_config_t *info);

/*!
 * \brief Update HW table for given VP.
 *
 * \param [in] unit Unit Number.
 * \param [in] opt Opt type from ltsw_flow_hw_opt_type_t.
 * \param [in-out] flow_port Flow port information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_vp_hw_opt_f)(
    int unit,
    bcmint_flow_hw_opt_type_t opt,
    bcm_flow_port_t *flow_port);

/*!
 * \brief Update HW table based on match criteria.
 *
 * \param [in] unit Unit Number.
 * \param [in] opt Opt type from ltsw_flow_hw_opt_type_t.
 * \param [in-out] info Flow match information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_match_hw_opt_f)(
    int unit,
    bcmint_flow_hw_opt_type_t opt,
    bcm_flow_match_config_t *info);

/*!
 * \brief Traverse HW table based on match criteria.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb User callback function.
 * \param [in] user_data User context data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_match_traverse_f)(
    int unit,
    bcm_flow_match_traverse_cb cb,
    void *user_data);

/*!
 * \brief Update HW table based on encap criteria.
 *
 * \param [in] unit Unit Number.
 * \param [in] opt Opt type from ltsw_flow_hw_opt_type_t.
 * \param [in-out] info Flow encap information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_encap_hw_opt_f)(
    int unit,
    bcmint_flow_hw_opt_type_t opt,
    bcm_flow_encap_config_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field);

/*!
 * \brief Traverse HW table based on encap criteria.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb User callback function.
 * \param [in] user_data User context data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_encap_traverse_f)(
    int unit,
    bcm_flow_encap_traverse_cb cb,
    void *user_data);

/*!
 * \brief Update HW table based on VP attributes.
 *
 * \param [in] unit Unit Number.
 * \param [in] opt Opt type from ltsw_flow_hw_opt_type_t.
 * \param [in-out] info Flow  port encap information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_port_encap_hw_opt_f)(
    int unit,
    bcmint_flow_hw_opt_type_t opt,
    bcm_flow_port_encap_t *info);

/*!
 * \brief Get flow port from L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 * \param [out] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_l2_if_to_port_f)(
    int unit,
    int l2_if,
    bcm_port_t *port);

/*!
 * \brief Get L2 interface from flow gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_port_to_l2_if_f)(
    int unit,
    bcm_port_t port,
    int *l2_if);

/*!
 * \brief Update HW table based on tunnel terminator.
 *
 * \param [in] unit Unit Number.
 * \param [in] opt Opt type from ltsw_flow_hw_opt_type_t.
 * \param [in-out] info Flow tunnel terminator information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_tunnel_term_hw_opt_f)(
    int unit,
    bcmint_flow_hw_opt_type_t opt,
    bcm_flow_tunnel_terminator_t *info);

/*!
 * \brief Traverse HW table based on tunnel terminator.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb User callback function.
 * \param [in] user_data User context data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_tunnel_term_traverse_f)(
    int unit,
    bcm_flow_tunnel_terminator_traverse_cb cb,
    void *user_data);

/*!
 * \brief Update HW table based on tunnel initiator.
 *
 * \param [in] unit Unit Number.
 * \param [in] opt Opt type from ltsw_flow_hw_opt_type_t.
 * \param [in-out] info Flow tunnel initiator information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_tunnel_initiator_hw_opt_f)(
    int unit,
    bcmint_flow_hw_opt_type_t opt,
    bcm_flow_tunnel_initiator_t *info);

/*!
 * \brief Traverse HW table based on tunnel initiator.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb User callback function.
 * \param [in] user_data User context data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_tunnel_initiator_traverse_f)(
    int unit,
    bcm_flow_tunnel_initiator_traverse_cb cb,
    void *user_data);

/*!
 * \brief Attach counter to the given table.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow stat config structure.
 * \param [in] stat_counter_id Stat counter id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_stat_attach_f)(
    int unit,
    bcm_flow_stat_info_t *info,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter from the given table.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow stat config structure.
 * \param [in] stat_counter_id Stat counter id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_stat_detach_f)(
    int unit,
    bcm_flow_stat_info_t *info,
    uint32_t stat_counter_id);

/*!
 * \brief Dump device-specific FLOW S/W state.
 *
 * \param [in] unit Unit Number.
 */
typedef void (*flow_sw_dump_f)(int unit);

/*!
 * \brief Enable/disable EVPN functionality.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable EVPN enable indicator. 0 : Disable EVPN, 1 : Enable EVPN.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_evpn_enable_set_f)(
    int unit,
    int enable);

/*!
 * \brief Get the enable status of EVPN functionality.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable EVPN enable indicator. 0 : EVPN disabled , 1 : EVPN enabled.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_evpn_enable_get_f)(
    int unit,
    int *enable);

/*!
 * \brief Specify general switch behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] type The desired configuration parameter to modify.
 * \param [in] arg The value with which to set the parameter.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_switch_control_set_f)(
    int unit,
    bcm_switch_control_t type,
    int arg);

/*!
 * \brief Retrieve general switch behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] type The desired configuration parameter to modify.
 * \param [in] arg Pointer to where the retrieved value will be written.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_switch_control_get_f)(
    int unit,
    bcm_switch_control_t type,
    int *arg);

/*!
 * \brief Specify the filter control for the given ethernet segment identifier.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] es_id ethernet segment identifier.
 * \param [in] flags BCM_FLOW_ES_FILTER_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_es_filter_set_f)(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t es_id,
    uint32_t flags);

/*!
 * \brief Get the filter status for the given ethernet segment identifier.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] es_id ethernet segment identifier.
 * \param [in] flags BCM_FLOW_ES_FILTER_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_es_filter_get_f)(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t es_id,
    uint32_t *flags);

/*!
 * \brief Set the flex counter object value to the ethernet segment filter.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_es_filter_flexctr_object_set_f)(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t value);

/*!
 * \brief Get the flex counter object value from the ethernet segment filter.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_es_filter_flexctr_object_get_f)(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t *value);

/*!
 * \brief Attach counter entries to the ethernet segment filter.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_es_filter_stat_attach_f)(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter entries from the ethernet segment filter.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_es_filter_stat_detach_f)(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t stat_counter_id);

/*!
 * \brief Get stat counter id associated from ethernet segment filter.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_es_filter_stat_id_get_f)(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t *stat_counter_id);

/*!
 * \brief Attach counter entries to the given flow VPN.
 *
 * \param [in] unit Unit Number.
 * \param [in] vpn VPN Instance.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_vpn_stat_attach_f)(
    int unit,
    bcm_vpn_t vpn,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter entries from the given flow VPN.
 *
 * \param [in] unit Unit Number.
 * \param [in] vpn VPN Instance.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_vpn_stat_detach_f)(
    int unit,
    bcm_vpn_t vpn,
    uint32_t stat_counter_id);

/*!
 * \brief Get stat counter ID associated to the given flow VPN.
 *
 * \param [in] unit Unit Number.
 * \param [in] vpn VPN Instance.
 * \param [in] direction Direction.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_vpn_stat_id_get_f)(
    int unit,
    bcm_vpn_t vpn,
    bcm_flexctr_direction_t direction,
    uint32_t *stat_counter_id);

/*!
 * \brief Attach counter entries to the given flow port.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_port_stat_attach_f)(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter entries from the given flow port.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_port_stat_detach_f)(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t stat_counter_id);

/*!
 * \brief Get stat counter ID associated to the given flow port.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] direction Direction.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_port_stat_id_get_f)(
    int unit,
    bcm_gport_t flow_port_id,
    bcm_flexctr_direction_t direction,
    uint32_t *stat_counter_id);

/*!
 * \brief Attach counter entries to the flow tunnel initiator.
 *
 * \param [in] unit Unit Number.
 * \param [in] tunnel_id Flow tunnel initiator object ID.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_tunnel_initiator_stat_attach_f)(
    int unit,
    bcm_gport_t tunnel_id,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter entries from the flow tunnel initiator.
 *
 * \param [in] unit Unit Number.
 * \param [in] tunnel_id Flow tunnel initiator object ID.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_tunnel_initiator_stat_detach_f)(
    int unit,
    bcm_gport_t tunnel_id,
    uint32_t stat_counter_id);

/*!
 * \brief Get stat counter ID associated to the flow tunnel initiator.
 *
 * \param [in] unit Unit Number.
 * \param [in] tunnel_id Flow tunnel initiator object ID.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_tunnel_initiator_stat_id_get_f)(
    int unit,
    bcm_gport_t tunnel_id,
    uint32_t *stat_counter_id);

/*!
 * \brief Set the flex counter object value to the encap entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow encap information.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_encap_flexctr_object_set_f)(
    int unit,
    bcm_flow_encap_config_t *info,
    uint32_t value);

/*!
 * \brief Get the flex counter object value from the encap entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow encap information.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_encap_flexctr_object_get_f)(
    int unit,
    bcm_flow_encap_config_t *info,
    uint32_t *value);

/*!
 * \brief Attach counter entries to the encap entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow encap information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_encap_stat_attach_f)(
    int unit,
    bcm_flow_encap_config_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t stat_counter_id);

/*!
 * \brief Detach the counter entries from the encap entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow encap information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_encap_stat_detach_f)(
    int unit,
    bcm_flow_encap_config_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t stat_counter_id);

/*!
 * \brief Get stat counter ID associated to the encap entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow encap information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_encap_stat_id_get_f)(
    int unit,
    bcm_flow_encap_config_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t *stat_counter_id);

/*!
 * \brief Set the flex counter object value to the given match entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow match information.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_match_flexctr_object_set_f)(
    int unit,
    bcm_flow_match_config_t *info,
    uint32_t value);

/*!
 * \brief Get the flex counter object value from the given match entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow match information.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_match_flexctr_object_get_f)(
    int unit,
    bcm_flow_match_config_t *info,
    uint32_t *value);

/*!
 * \brief Attach counter entries to the given match entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow match information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_match_stat_attach_f)(
    int unit,
    bcm_flow_match_config_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter entries from the given match entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow match information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_match_stat_detach_f)(
    int unit,
    bcm_flow_match_config_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t stat_counter_id);

/*!
 * \brief Get stat counter ID associated to the given match entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow match information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_match_stat_id_get_f)(
    int unit,
    bcm_flow_match_config_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t *stat_counter_id);

/*!
 * \brief Set the flex counter object value to the flow tunnel terminator object.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow tunnel terminator information.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_tunnel_terminator_flexctr_object_set_f)(
    int unit,
    bcm_flow_tunnel_terminator_t *info,
    uint32_t value);

/*!
 * \brief Get the flex counter object value from the flow tunnel terminator object.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow tunnel terminator information.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_tunnel_terminator_flexctr_object_get_f)(
    int unit,
    bcm_flow_tunnel_terminator_t *info,
    uint32_t *value);

/*!
 * \brief Attach counter entries to the flow tunnel terminator object.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow tunnel terminator information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_tunnel_terminator_stat_attach_f)(
    int unit,
    bcm_flow_tunnel_terminator_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter entries from the flow tunnel terminator object.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow tunnel terminator information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_tunnel_terminator_stat_detach_f)(
    int unit,
    bcm_flow_tunnel_terminator_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t stat_counter_id);

/*!
 * \brief Get stat counter ID associated to the flow tunnel terminator object.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow tunnel terminator information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flow_tunnel_terminator_stat_id_get_f)(
    int unit,
    bcm_flow_tunnel_terminator_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t *stat_counter_id);

/*!
 * \brief Flow driver structure.
 */
typedef struct mbcm_ltsw_flow_drv_s {

    /*! Initialize flow module. */
    flow_init_f flow_init;

    /*! Get LT database. */
    flow_lt_db_get_f flow_lt_db_get;

    /*! De-initialize flow module. */
    flow_detach_f flow_detach;

    /*! Get mapping info of given type. */
    flow_mapping_info_get_f flow_mapping_info_get;

    /*! Update HW table for given VPN. */
    flow_vpn_hw_opt_f flow_vpn_hw_opt;

    /*! Update HW table for given VP. */
    flow_vp_hw_opt_f flow_vp_hw_opt;

    /*! Update HW table based on match criteria. */
    flow_match_hw_opt_f flow_match_hw_opt;

    /*! Traverse HW table based on match criteria. */
    flow_match_traverse_f flow_match_traverse;

    /*! Update HW table based on encap criteria. */
    flow_encap_hw_opt_f flow_encap_hw_opt;

    /*! Traverse HW table based on encap criteria. */
    flow_encap_traverse_f flow_encap_traverse;

    /*! Update HW table based on VP attributes. */
    flow_port_encap_hw_opt_f flow_port_encap_hw_opt;

    /*! Get flow port from L2 interface. */
    flow_l2_if_to_port_f flow_l2_if_to_port;

    /*! Get L2 interface from flow gport. */
    flow_port_to_l2_if_f flow_port_to_l2_if;

    /*! Update HW table based on tunnel terminator. */
    flow_tunnel_term_hw_opt_f flow_tunnel_term_hw_opt;

    /*! Traverse HW table based on tunnel terminator. */
    flow_tunnel_term_traverse_f flow_tunnel_term_traverse;

    /*! Update HW table based on tunnel initiator. */
    flow_tunnel_initiator_hw_opt_f flow_tunnel_initiator_hw_opt;

    /*! Traverse HW table based on tunnel initiator. */
    flow_tunnel_initiator_traverse_f flow_tunnel_initiator_traverse;

    /*! Attach counter to the given table. */
    flow_stat_attach_f flow_stat_attach;

    /*! Detach counter from the given table. */
    flow_stat_detach_f flow_stat_detach;

    /*! Dump device-specific FLOW S/W state. */
    flow_sw_dump_f flow_sw_dump;

    /*! Enable/disable EVPN functionality. */
    flow_evpn_enable_set_f flow_evpn_enable_set;

    /*! Get the enable status of EVPN functionality. */
    flow_evpn_enable_get_f flow_evpn_enable_get;

    /*! Specify general switch behaviors. */
    flow_switch_control_set_f flow_switch_control_set;

    /*! Retrieve general switch behaviors. */
    flow_switch_control_get_f flow_switch_control_get;

    /*! Specify the filter control for the given ethernet segment identifier. */
    flow_es_filter_set_f flow_es_filter_set;

    /*! Get the filter status for the given ethernet segment identifier. */
    flow_es_filter_get_f flow_es_filter_get;

    /*! Set the flex counter object value to the ethernet segment filter. */
    flow_es_filter_flexctr_object_set_f flow_es_filter_flexctr_object_set;

    /*! Get the flex counter object value from the ethernet segment filter. */
    flow_es_filter_flexctr_object_get_f flow_es_filter_flexctr_object_get;

    /*! Attach counter entries to the ethernet segment filter. */
    flow_es_filter_stat_attach_f flow_es_filter_stat_attach;

    /*! Detach counter entries from the ethernet segment filter. */
    flow_es_filter_stat_detach_f flow_es_filter_stat_detach;

    /*! Get stat counter id associated from ethernet segment filter. */
    flow_es_filter_stat_id_get_f flow_es_filter_stat_id_get;

    /*! Attach counter entries to the given flow VPN. */
    flow_vpn_stat_attach_f flow_vpn_stat_attach;

    /*! Detach counter entries from the given flow VPN. */
    flow_vpn_stat_detach_f flow_vpn_stat_detach;

    /*! Get stat counter ID associated to the given flow VPN. */
    flow_vpn_stat_id_get_f flow_vpn_stat_id_get;

    /*! Attach counter entries to the given flow port. */
    flow_port_stat_attach_f flow_port_stat_attach;

    /*! Detach counter entries from the given flow port. */
    flow_port_stat_detach_f flow_port_stat_detach;

    /*! Get stat counter ID associated to the given flow port. */
    flow_port_stat_id_get_f flow_port_stat_id_get;

    /*! Attach counter entries to the flow tunnel initiator. */
    flow_tunnel_initiator_stat_attach_f flow_tunnel_initiator_stat_attach;

    /*! Detach counter entries from the flow tunnel initiator. */
    flow_tunnel_initiator_stat_detach_f flow_tunnel_initiator_stat_detach;

    /*! Get stat counter ID associated to the flow tunnel initiator. */
    flow_tunnel_initiator_stat_id_get_f flow_tunnel_initiator_stat_id_get;

    /*! Set the flex counter object value to the encap entry. */
    flow_encap_flexctr_object_set_f flow_encap_flexctr_object_set;

    /*! Get the flex counter object value from the encap entry. */
    flow_encap_flexctr_object_get_f flow_encap_flexctr_object_get;

    /*! Attach counter entries to the encap entry. */
    flow_encap_stat_attach_f flow_encap_stat_attach;

    /*! Detach the counter entries from the encap entry. */
    flow_encap_stat_detach_f flow_encap_stat_detach;

    /*! Get stat counter ID associated to the encap entry. */
    flow_encap_stat_id_get_f flow_encap_stat_id_get;

    /*! Set the flex counter object value to the given match entry. */
    flow_match_flexctr_object_set_f flow_match_flexctr_object_set;

    /*! Get the flex counter object value from the given match entry. */
    flow_match_flexctr_object_get_f flow_match_flexctr_object_get;

    /*! Attach counter entries to the given match entry. */
    flow_match_stat_attach_f flow_match_stat_attach;

    /*! Detach counter entries from the given match entry. */
    flow_match_stat_detach_f flow_match_stat_detach;

    /*! Get stat counter ID associated to the given match entry. */
    flow_match_stat_id_get_f flow_match_stat_id_get;

    /*! Set the flex counter object value to the flow tunnel terminator object. */
    flow_tunnel_terminator_flexctr_object_set_f flow_tunnel_terminator_flexctr_object_set;

    /*! Get the flex counter object value from the flow tunnel terminator object. */
    flow_tunnel_terminator_flexctr_object_get_f flow_tunnel_terminator_flexctr_object_get;

    /*! Attach counter entries to the flow tunnel terminator object. */
    flow_tunnel_terminator_stat_attach_f flow_tunnel_terminator_stat_attach;

    /*! Detach counter entries from the flow tunnel terminator object. */
    flow_tunnel_terminator_stat_detach_f flow_tunnel_terminator_stat_detach;

    /*! Get stat counter ID associated to the flow tunnel terminator object. */
    flow_tunnel_terminator_stat_id_get_f flow_tunnel_terminator_stat_id_get;

} mbcm_ltsw_flow_drv_t;

/*!
 * \brief Set the FLOW driver of the device.
 *
 * \param [in] unit Unit Number.
 * \param [in] drv Flow driver to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_drv_set(
    int unit,
    mbcm_ltsw_flow_drv_t *drv);

/*!
 * \brief Initialize flow module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_init(int unit);

/*!
 * \brief Get LT database.
 *
 * \param [in] unit Unit Number.
 * \param [in] lt_db LT database.
 */
extern int
mbcm_ltsw_flow_lt_db_get(
    int unit,
    bcmint_flow_lt_db_t *lt_db);

/*!
 * \brief De-initialize flow module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_detach(int unit);

/*!
 * \brief Get mapping info of given type.
 *
 * \param [in] unit Unit Number.
 * \param [in] info_type Info type from ltsw_flow_mapping_info_type_t.
 * \param [out] info_ptr Info pointer.
 * \param [out] rec_num Number of records.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_mapping_info_get(
    int unit,
    bcmint_flow_mapping_info_type_t info_type,
    uint8_t **info_ptr,
    uint32_t *rec_num);

/*!
 * \brief Update HW table for given VPN.
 *
 * \param [in] unit Unit Number.
 * \param [in] opt Opt type from ltsw_flow_hw_opt_type_t.
 * \param [in] vpn VPN ID.
 * \param [in-out] info VPN configuration structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_vpn_hw_opt(
    int unit,
    bcmint_flow_hw_opt_type_t opt,
    bcm_vpn_t vpn,
    bcm_flow_vpn_config_t *info);

/*!
 * \brief Update HW table for given VP.
 *
 * \param [in] unit Unit Number.
 * \param [in] opt Opt type from ltsw_flow_hw_opt_type_t.
 * \param [in-out] flow_port Flow port information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_vp_hw_opt(
    int unit,
    bcmint_flow_hw_opt_type_t opt,
    bcm_flow_port_t *flow_port);

/*!
 * \brief Update HW table based on match criteria.
 *
 * \param [in] unit Unit Number.
 * \param [in] opt Opt type from ltsw_flow_hw_opt_type_t.
 * \param [in-out] info Flow match information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_match_hw_opt(
    int unit,
    bcmint_flow_hw_opt_type_t opt,
    bcm_flow_match_config_t *info);

/*!
 * \brief Traverse HW table based on match criteria.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb User callback function.
 * \param [in] user_data User context data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_match_traverse(
    int unit,
    bcm_flow_match_traverse_cb cb,
    void *user_data);

/*!
 * \brief Update HW table based on encap criteria.
 *
 * \param [in] unit Unit Number.
 * \param [in] opt Opt type from ltsw_flow_hw_opt_type_t.
 * \param [in-out] info Flow encap information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_encap_hw_opt(
    int unit,
    bcmint_flow_hw_opt_type_t opt,
    bcm_flow_encap_config_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field);

/*!
 * \brief Traverse HW table based on encap criteria.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb User callback function.
 * \param [in] user_data User context data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_encap_traverse(
    int unit,
    bcm_flow_encap_traverse_cb cb,
    void *user_data);

/*!
 * \brief Update HW table based on VP attributes.
 *
 * \param [in] unit Unit Number.
 * \param [in] opt Opt type from ltsw_flow_hw_opt_type_t.
 * \param [in-out] info Flow  port encap information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_port_encap_hw_opt(
    int unit,
    bcmint_flow_hw_opt_type_t opt,
    bcm_flow_port_encap_t *info);

/*!
 * \brief Get flow port from L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 * \param [out] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_l2_if_to_port(
    int unit,
    int l2_if,
    bcm_port_t *port);

/*!
 * \brief Get L2 interface from flow gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_port_to_l2_if(
    int unit,
    bcm_port_t port,
    int *l2_if);

/*!
 * \brief Update HW table based on tunnel terminator.
 *
 * \param [in] unit Unit Number.
 * \param [in] opt Opt type from ltsw_flow_hw_opt_type_t.
 * \param [in-out] info Flow tunnel terminator information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_tunnel_term_hw_opt(
    int unit,
    bcmint_flow_hw_opt_type_t opt,
    bcm_flow_tunnel_terminator_t *info);

/*!
 * \brief Traverse HW table based on tunnel terminator.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb User callback function.
 * \param [in] user_data User context data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_tunnel_term_traverse(
    int unit,
    bcm_flow_tunnel_terminator_traverse_cb cb,
    void *user_data);

/*!
 * \brief Update HW table based on tunnel initiator.
 *
 * \param [in] unit Unit Number.
 * \param [in] opt Opt type from ltsw_flow_hw_opt_type_t.
 * \param [in-out] info Flow tunnel initiator information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_tunnel_initiator_hw_opt(
    int unit,
    bcmint_flow_hw_opt_type_t opt,
    bcm_flow_tunnel_initiator_t *info);

/*!
 * \brief Traverse HW table based on tunnel initiator.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb User callback function.
 * \param [in] user_data User context data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_tunnel_initiator_traverse(
    int unit,
    bcm_flow_tunnel_initiator_traverse_cb cb,
    void *user_data);

/*!
 * \brief Attach counter to the given table.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow stat config structure.
 * \param [in] stat_counter_id Stat counter id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_stat_attach(
    int unit,
    bcm_flow_stat_info_t *info,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter from the given table.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow stat config structure.
 * \param [in] stat_counter_id Stat counter id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_stat_detach(
    int unit,
    bcm_flow_stat_info_t *info,
    uint32_t stat_counter_id);

/*!
 * \brief Dump device-specific FLOW S/W state.
 *
 * \param [in] unit Unit Number.
 */
extern void
mbcm_ltsw_flow_sw_dump(int unit);

/*!
 * \brief Enable/disable EVPN functionality.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable EVPN enable indicator. 0 : Disable EVPN, 1 : Enable EVPN.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_evpn_enable_set(
    int unit,
    int enable);

/*!
 * \brief Get the enable status of EVPN functionality.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable EVPN enable indicator. 0 : EVPN disabled , 1 : EVPN enabled.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_evpn_enable_get(
    int unit,
    int *enable);

/*!
 * \brief Specify general switch behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] type The desired configuration parameter to modify.
 * \param [in] arg The value with which to set the parameter.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_switch_control_set(
    int unit,
    bcm_switch_control_t type,
    int arg);

/*!
 * \brief Retrieve general switch behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] type The desired configuration parameter to modify.
 * \param [in] arg Pointer to where the retrieved value will be written.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_switch_control_get(
    int unit,
    bcm_switch_control_t type,
    int *arg);

/*!
 * \brief Specify the filter control for the given ethernet segment identifier.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] es_id ethernet segment identifier.
 * \param [in] flags BCM_FLOW_ES_FILTER_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_es_filter_set(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t es_id,
    uint32_t flags);

/*!
 * \brief Get the filter status for the given ethernet segment identifier.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] es_id ethernet segment identifier.
 * \param [in] flags BCM_FLOW_ES_FILTER_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_es_filter_get(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t es_id,
    uint32_t *flags);

/*!
 * \brief Set the flex counter object value to the ethernet segment filter.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_es_filter_flexctr_object_set(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t value);

/*!
 * \brief Get the flex counter object value from the ethernet segment filter.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_es_filter_flexctr_object_get(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t *value);

/*!
 * \brief Attach counter entries to the ethernet segment filter.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_es_filter_stat_attach(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter entries from the ethernet segment filter.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_es_filter_stat_detach(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t stat_counter_id);

/*!
 * \brief Get stat counter id associated from ethernet segment filter.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_es_filter_stat_id_get(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t *stat_counter_id);

/*!
 * \brief Attach counter entries to the given flow VPN.
 *
 * \param [in] unit Unit Number.
 * \param [in] vpn VPN Instance.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_vpn_stat_attach(
    int unit,
    bcm_vpn_t vpn,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter entries from the given flow VPN.
 *
 * \param [in] unit Unit Number.
 * \param [in] vpn VPN Instance.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_vpn_stat_detach(
    int unit,
    bcm_vpn_t vpn,
    uint32_t stat_counter_id);

/*!
 * \brief Get stat counter ID associated to the given flow VPN.
 *
 * \param [in] unit Unit Number.
 * \param [in] vpn VPN Instance.
 * \param [in] direction Direction.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_vpn_stat_id_get(
    int unit,
    bcm_vpn_t vpn,
    bcm_flexctr_direction_t direction,
    uint32_t *stat_counter_id);

/*!
 * \brief Attach counter entries to the given flow port.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_port_stat_attach(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter entries from the given flow port.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_port_stat_detach(
    int unit,
    bcm_gport_t flow_port_id,
    uint32_t stat_counter_id);

/*!
 * \brief Get stat counter ID associated to the given flow port.
 *
 * \param [in] unit Unit Number.
 * \param [in] flow_port_id GPORT identifier.
 * \param [in] direction Direction.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_port_stat_id_get(
    int unit,
    bcm_gport_t flow_port_id,
    bcm_flexctr_direction_t direction,
    uint32_t *stat_counter_id);

/*!
 * \brief Attach counter entries to the flow tunnel initiator.
 *
 * \param [in] unit Unit Number.
 * \param [in] tunnel_id Flow tunnel initiator object ID.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_tunnel_initiator_stat_attach(
    int unit,
    bcm_gport_t tunnel_id,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter entries from the flow tunnel initiator.
 *
 * \param [in] unit Unit Number.
 * \param [in] tunnel_id Flow tunnel initiator object ID.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_tunnel_initiator_stat_detach(
    int unit,
    bcm_gport_t tunnel_id,
    uint32_t stat_counter_id);

/*!
 * \brief Get stat counter ID associated to the flow tunnel initiator.
 *
 * \param [in] unit Unit Number.
 * \param [in] tunnel_id Flow tunnel initiator object ID.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_tunnel_initiator_stat_id_get(
    int unit,
    bcm_gport_t tunnel_id,
    uint32_t *stat_counter_id);

/*!
 * \brief Set the flex counter object value to the encap entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow encap information.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_encap_flexctr_object_set(
    int unit,
    bcm_flow_encap_config_t *info,
    uint32_t value);

/*!
 * \brief Get the flex counter object value from the encap entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow encap information.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_encap_flexctr_object_get(
    int unit,
    bcm_flow_encap_config_t *info,
    uint32_t *value);

/*!
 * \brief Attach counter entries to the encap entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow encap information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_encap_stat_attach(
    int unit,
    bcm_flow_encap_config_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t stat_counter_id);

/*!
 * \brief Detach the counter entries from the encap entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow encap information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_encap_stat_detach(
    int unit,
    bcm_flow_encap_config_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t stat_counter_id);

/*!
 * \brief Get stat counter ID associated to the encap entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow encap information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_encap_stat_id_get(
    int unit,
    bcm_flow_encap_config_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t *stat_counter_id);

/*!
 * \brief Set the flex counter object value to the given match entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow match information.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_match_flexctr_object_set(
    int unit,
    bcm_flow_match_config_t *info,
    uint32_t value);

/*!
 * \brief Get the flex counter object value from the given match entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow match information.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_match_flexctr_object_get(
    int unit,
    bcm_flow_match_config_t *info,
    uint32_t *value);

/*!
 * \brief Attach counter entries to the given match entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow match information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_match_stat_attach(
    int unit,
    bcm_flow_match_config_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter entries from the given match entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow match information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_match_stat_detach(
    int unit,
    bcm_flow_match_config_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t stat_counter_id);

/*!
 * \brief Get stat counter ID associated to the given match entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow match information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_match_stat_id_get(
    int unit,
    bcm_flow_match_config_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t *stat_counter_id);

/*!
 * \brief Set the flex counter object value to the flow tunnel terminator object.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow tunnel terminator information.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_tunnel_terminator_flexctr_object_set(
    int unit,
    bcm_flow_tunnel_terminator_t *info,
    uint32_t value);

/*!
 * \brief Get the flex counter object value from the flow tunnel terminator object.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow tunnel terminator information.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_tunnel_terminator_flexctr_object_get(
    int unit,
    bcm_flow_tunnel_terminator_t *info,
    uint32_t *value);

/*!
 * \brief Attach counter entries to the flow tunnel terminator object.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow tunnel terminator information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_tunnel_terminator_stat_attach(
    int unit,
    bcm_flow_tunnel_terminator_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter entries from the flow tunnel terminator object.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow tunnel terminator information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_tunnel_terminator_stat_detach(
    int unit,
    bcm_flow_tunnel_terminator_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t stat_counter_id);

/*!
 * \brief Get stat counter ID associated to the flow tunnel terminator object.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flow tunnel terminator information.
 * \param [in] num_of_fields Number of logical fields.
 * \param [in] field Logical field array.
 * \param [in] stat_counter_id Stat counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flow_tunnel_terminator_stat_id_get(
    int unit,
    bcm_flow_tunnel_terminator_t *info,
    uint32_t num_of_fields,
    bcm_flow_logical_field_t *field,
    uint32_t *stat_counter_id);

#endif /* BCMINT_LTSW_MBCM_FLOW_H */
