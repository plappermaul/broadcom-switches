/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_MBCM_PFC_H
#define BCMINT_LTSW_MBCM_PFC_H

#include <bcm/cosq.h>
#include <bcm/types.h>

#include <sal/sal_types.h>

/*!
 * \brief Get an entire PFC class (RX) profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile ID.
 * \param [in] max_count Maximum number of elements in config array.
 * \param [out] config_array PFC class config array.
 * \param [out] count actual size of array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_class_config_profile_get_f)(
    int unit,
    int profile_id,
    int max_count,
    bcm_cosq_pfc_class_map_config_t *config_array,
    int *count);

/*!
 * \brief Set an entire PFC class (RX) profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile ID.
 * \param [in] count The length of array.
 * \param [out] config_array PFC class config array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_class_config_profile_set_f)(
    int unit,
    int profile_id,
    int count,
    bcm_cosq_pfc_class_map_config_t *config_array);

/*!
 * \brief Get a PFC-tx priority to PG mapping profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile ID.
 * \param [in] array_max Maximum number of elements in PG array.
 * \param [out] pg_array PG array, indexed by PFC priority.
 * \param [out] array_count actual size of array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_priority_mapping_profile_get_f)(
    int unit,
    int profile_id,
    int array_max,
    int *pg_array,
    int *array_count);

/*!
 * \brief Set a PFC-tx priority to PG mapping profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile ID.
 * \param [in] array_count actual size of array.
 * \param [out] pg_array PG array, indexed by PFC priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_priority_mapping_profile_set_f)(
    int unit,
    int profile_id,
    int array_count,
    int *pg_array);

/*!
 * \brief Get number of optimized PFC groups on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port logical port number.
 * \param [out] arg number of optimized PFC groups supported.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_group_num_get_f)(
    int unit,
    int port,
    int *arg);

/*!
 * \brief Initialize the pfc module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_init_f)(int unit);

/*!
 * \brief Detach the pfc module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_detach_f)(int unit);

/*!
 * \brief Enable/diable PFC rx.
 *
 * \param [in] unit Unit Number.
 * \param [in] lport Logical port ID.
 * \param [in] pfc_enable PFC enable, 0: disable, 1: enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_rx_config_set_f)(
    int unit,
    int lport,
    int pfc_enable);

/*!
 * \brief Enable/diable PFC tx.
 *
 * \param [in] unit Unit Number.
 * \param [in] lport Logical port ID.
 * \param [in] pfc_enable PFC enable, 0: disable, 1: enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_tx_config_set_f)(
    int unit,
    int lport,
    int pfc_enable);

/*!
 * \brief enable port pg pfc.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] pg priority group id.
 * \param [in] pfc_enable pfc enable state.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_port_pg_pfc_set_f)(
    int unit,
    bcm_port_t port,
    int pg,
    int pfc_enable);

/*!
 * \brief Get per port pg pfc enable state.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] pg priority group id.
 * \param [out] pfc_enable pfc enable state.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_port_pg_pfc_get_f)(
    int unit,
    bcm_port_t port,
    int pg,
    int *pfc_enable);

/*!
 * \brief Set the PFC-related profile ID for a given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] lport Logical port ID.
 * \param [in] profile_id profile ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_config_profile_id_set_f)(
    int unit,
    int lport,
    int profile_id);

/*!
 * \brief Set Recovery action to be performed in PFC deadlock recovery state.
 *
 * \param [in] unit Unit Number.
 * \param [in] action 0-Transmit Packets (Default), 1-Drop.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_deadlock_recovery_action_set_f)(
    int unit,
    int action);

/*!
 * \brief Get Recovery action to be performed in PFC deadlock recovery state.
 *
 * \param [in] unit Unit Number.
 * \param [out] action 0-Transmit Packets (Default), 1-Drop.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_deadlock_recovery_action_get_f)(
    int unit,
    int *action);

/*!
 * \brief Get config for the given (PFC priority, port) for the PFC Deadlock feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] pfc_priority PFC Priority.
 * \param [in] type PFC deadlock control type.
 * \param [out] arg pointer to value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_deadlock_control_get_f)(
    int unit,
    bcm_port_t port,
    int pfc_priority,
    bcm_cosq_pfc_deadlock_control_t type,
    int *arg);

/*!
 * \brief Set config for the given (PFC priority, port) for the PFC Deadlock feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] pfc_priority PFC Priority.
 * \param [in] type PFC deadlock control type.
 * \param [in] arg value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_deadlock_control_set_f)(
    int unit,
    bcm_port_t port,
    int pfc_priority,
    bcm_cosq_pfc_deadlock_control_t type,
    int arg);

/*!
 * \brief Get bitmap of Enabled(Admin) and Current Deadlock ports status for a given priority in PFC deadlock feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] pfc_priority PFC Priority.
 * \param [out] pfc_deadlock_info Info for a given priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_deadlock_info_get_f)(
    int unit,
    int pfc_priority,
    bcm_cosq_pfc_deadlock_info_t *pfc_deadlock_info);

/*!
 * \brief Get the current Deadlock status for the given Port.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport id.
 * \param [out] deadlock_status Deatlock status for the given port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_deadlock_queue_status_get_f)(
    int unit,
    bcm_gport_t gport,
    uint8_t *deadlock_status);

/*!
 * \brief Register pfc deadlock recovery callback in PFC deadlock feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] callback callback function.
 * \param [in] userdata user data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_deadlock_recovery_event_register_f)(
    int unit,
    bcm_cosq_pfc_deadlock_recovery_event_cb_t callback,
    void *userdata);

/*!
 * \brief Unregister pfc deadlock recovery callback in PFC deadlock feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] callback callback function.
 * \param [in] userdata user data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pfc_deadlock_recovery_event_unregister_f)(
    int unit,
    bcm_cosq_pfc_deadlock_recovery_event_cb_t callback,
    void *userdata);

/*!
 * \brief PFC driver structure.
 */
typedef struct mbcm_ltsw_pfc_drv_s {

    /*! Get an entire PFC class (RX) profile */
    pfc_class_config_profile_get_f pfc_class_config_profile_get;

    /*! Set an entire PFC class (RX) profile */
    pfc_class_config_profile_set_f pfc_class_config_profile_set;

    /*! Get a PFC-tx priority to PG mapping profile */
    pfc_priority_mapping_profile_get_f pfc_priority_mapping_profile_get;

    /*! Set a PFC-tx priority to PG mapping profile */
    pfc_priority_mapping_profile_set_f pfc_priority_mapping_profile_set;

    /*! Get number of optimized PFC groups on a port. */
    pfc_group_num_get_f pfc_group_num_get;

    /*! Initialize the pfc module. */
    pfc_init_f pfc_init;

    /*! Detach the pfc module. */
    pfc_detach_f pfc_detach;

    /*! Enable/diable PFC rx. */
    pfc_rx_config_set_f pfc_rx_config_set;

    /*! Enable/diable PFC tx. */
    pfc_tx_config_set_f pfc_tx_config_set;

    /*! enable port pg pfc. */
    pfc_port_pg_pfc_set_f pfc_port_pg_pfc_set;

    /*! Get per port pg pfc enable state. */
    pfc_port_pg_pfc_get_f pfc_port_pg_pfc_get;

    /*! Set the PFC-related profile ID for a given port. */
    pfc_config_profile_id_set_f pfc_config_profile_id_set;

    /*! Set Recovery action to be performed in PFC deadlock recovery state. */
    pfc_deadlock_recovery_action_set_f pfc_deadlock_recovery_action_set;

    /*! Get Recovery action to be performed in PFC deadlock recovery state. */
    pfc_deadlock_recovery_action_get_f pfc_deadlock_recovery_action_get;

    /*! Get config for the given (PFC priority, port) for the PFC Deadlock feature. */
    pfc_deadlock_control_get_f pfc_deadlock_control_get;

    /*! Set config for the given (PFC priority, port) for the PFC Deadlock feature. */
    pfc_deadlock_control_set_f pfc_deadlock_control_set;

    /*! Get bitmap of Enabled(Admin) and Current Deadlock ports status for a given priority in PFC deadlock feature. */
    pfc_deadlock_info_get_f pfc_deadlock_info_get;

    /*! Get the current Deadlock status for the given Port. */
    pfc_deadlock_queue_status_get_f pfc_deadlock_queue_status_get;

    /*! Register pfc deadlock recovery callback in PFC deadlock feature. */
    pfc_deadlock_recovery_event_register_f pfc_deadlock_recovery_event_register;

    /*! Unregister pfc deadlock recovery callback in PFC deadlock feature. */
    pfc_deadlock_recovery_event_unregister_f pfc_deadlock_recovery_event_unregister;

} mbcm_ltsw_pfc_drv_t;

/*!
 * \brief Set the PFC driver of the device.
 *
 * \param [in] unit Unit Number.
 * \param [in] drv Pfc driver to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_drv_set(
    int unit,
    mbcm_ltsw_pfc_drv_t *drv);

/*!
 * \brief Get an entire PFC class (RX) profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile ID.
 * \param [in] max_count Maximum number of elements in config array.
 * \param [out] config_array PFC class config array.
 * \param [out] count actual size of array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_class_config_profile_get(
    int unit,
    int profile_id,
    int max_count,
    bcm_cosq_pfc_class_map_config_t *config_array,
    int *count);

/*!
 * \brief Set an entire PFC class (RX) profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile ID.
 * \param [in] count The length of array.
 * \param [out] config_array PFC class config array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_class_config_profile_set(
    int unit,
    int profile_id,
    int count,
    bcm_cosq_pfc_class_map_config_t *config_array);

/*!
 * \brief Get a PFC-tx priority to PG mapping profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile ID.
 * \param [in] array_max Maximum number of elements in PG array.
 * \param [out] pg_array PG array, indexed by PFC priority.
 * \param [out] array_count actual size of array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_priority_mapping_profile_get(
    int unit,
    int profile_id,
    int array_max,
    int *pg_array,
    int *array_count);

/*!
 * \brief Set a PFC-tx priority to PG mapping profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile ID.
 * \param [in] array_count actual size of array.
 * \param [out] pg_array PG array, indexed by PFC priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_priority_mapping_profile_set(
    int unit,
    int profile_id,
    int array_count,
    int *pg_array);

/*!
 * \brief Get number of optimized PFC groups on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port logical port number.
 * \param [out] arg number of optimized PFC groups supported.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_group_num_get(
    int unit,
    int port,
    int *arg);

/*!
 * \brief Initialize the pfc module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_init(int unit);

/*!
 * \brief Detach the pfc module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_detach(int unit);

/*!
 * \brief Enable/diable PFC rx.
 *
 * \param [in] unit Unit Number.
 * \param [in] lport Logical port ID.
 * \param [in] pfc_enable PFC enable, 0: disable, 1: enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_rx_config_set(
    int unit,
    int lport,
    int pfc_enable);

/*!
 * \brief Enable/diable PFC tx.
 *
 * \param [in] unit Unit Number.
 * \param [in] lport Logical port ID.
 * \param [in] pfc_enable PFC enable, 0: disable, 1: enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_tx_config_set(
    int unit,
    int lport,
    int pfc_enable);

/*!
 * \brief enable port pg pfc.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] pg priority group id.
 * \param [in] pfc_enable pfc enable state.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_port_pg_pfc_set(
    int unit,
    bcm_port_t port,
    int pg,
    int pfc_enable);

/*!
 * \brief Get per port pg pfc enable state.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] pg priority group id.
 * \param [out] pfc_enable pfc enable state.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_port_pg_pfc_get(
    int unit,
    bcm_port_t port,
    int pg,
    int *pfc_enable);

/*!
 * \brief Set the PFC-related profile ID for a given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] lport Logical port ID.
 * \param [in] profile_id profile ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_config_profile_id_set(
    int unit,
    int lport,
    int profile_id);

/*!
 * \brief Set Recovery action to be performed in PFC deadlock recovery state.
 *
 * \param [in] unit Unit Number.
 * \param [in] action 0-Transmit Packets (Default), 1-Drop.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_deadlock_recovery_action_set(
    int unit,
    int action);

/*!
 * \brief Get Recovery action to be performed in PFC deadlock recovery state.
 *
 * \param [in] unit Unit Number.
 * \param [out] action 0-Transmit Packets (Default), 1-Drop.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_deadlock_recovery_action_get(
    int unit,
    int *action);

/*!
 * \brief Get config for the given (PFC priority, port) for the PFC Deadlock feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] pfc_priority PFC Priority.
 * \param [in] type PFC deadlock control type.
 * \param [out] arg pointer to value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_deadlock_control_get(
    int unit,
    bcm_port_t port,
    int pfc_priority,
    bcm_cosq_pfc_deadlock_control_t type,
    int *arg);

/*!
 * \brief Set config for the given (PFC priority, port) for the PFC Deadlock feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] pfc_priority PFC Priority.
 * \param [in] type PFC deadlock control type.
 * \param [in] arg value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_deadlock_control_set(
    int unit,
    bcm_port_t port,
    int pfc_priority,
    bcm_cosq_pfc_deadlock_control_t type,
    int arg);

/*!
 * \brief Get bitmap of Enabled(Admin) and Current Deadlock ports status for a given priority in PFC deadlock feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] pfc_priority PFC Priority.
 * \param [out] pfc_deadlock_info Info for a given priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_deadlock_info_get(
    int unit,
    int pfc_priority,
    bcm_cosq_pfc_deadlock_info_t *pfc_deadlock_info);

/*!
 * \brief Get the current Deadlock status for the given Port.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport id.
 * \param [out] deadlock_status Deatlock status for the given port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_deadlock_queue_status_get(
    int unit,
    bcm_gport_t gport,
    uint8_t *deadlock_status);

/*!
 * \brief Register pfc deadlock recovery callback in PFC deadlock feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] callback callback function.
 * \param [in] userdata user data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_deadlock_recovery_event_register(
    int unit,
    bcm_cosq_pfc_deadlock_recovery_event_cb_t callback,
    void *userdata);

/*!
 * \brief Unregister pfc deadlock recovery callback in PFC deadlock feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] callback callback function.
 * \param [in] userdata user data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pfc_deadlock_recovery_event_unregister(
    int unit,
    bcm_cosq_pfc_deadlock_recovery_event_cb_t callback,
    void *userdata);

#endif /* BCMINT_LTSW_MBCM_PFC_H */
