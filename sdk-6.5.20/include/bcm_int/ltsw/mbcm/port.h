/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_MBCM_PORT_H
#define BCMINT_LTSW_MBCM_PORT_H

#include <bcm/types.h>
#include <bcm/port.h>

#include <bcm_int/ltsw/port.h>
#include <bcm_int/ltsw/port_int.h>

#include <sal/sal_types.h>

/*!
 * \brief Initialize device specific information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_info_init_f)(int unit);

/*!
 * \brief Initialize device specific information for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_info_init_per_port_f)(
    int unit,
    bcm_port_t port);

/*!
 * \brief De-initialize device specific information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_info_deinit_f)(int unit);

/*!
 * \brief Recover device specific information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_info_recover_f)(int unit);

/*!
 * \brief Initialize port profile tables.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_profile_init_f)(int unit);

/*!
 * \brief De-initialize port profile tables.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_profile_deinit_f)(int unit);

/*!
 * \brief Initialize basic port pipeline configuration.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_service_init_f)(int unit);

/*!
 * \brief De-initialize basic port pipeline configuration.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_service_deinit_f)(int unit);

/*!
 * \brief Port module misc init.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_misc_init_f)(int unit);

/*!
 * \brief Port module misc deinit.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_misc_deinit_f)(int unit);

/*!
 * \brief Port database initialization.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_db_init_f)(int unit);

/*!
 * \brief Set the status of specified port feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type Enum value of the port feature.
 * \param [in] value Value of the port feature to be set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_control_set_f)(
    int unit,
    bcm_port_t port,
    bcm_port_control_t type,
    int value);

/*!
 * \brief Get the status of specified port feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type Enum value of the port feature.
 * \param [out] value Current value of the port feature.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_control_get_f)(
    int unit,
    bcm_port_t port,
    bcm_port_control_t type,
    int *value);

/*!
 * \brief Control the sampling of packets ingressing or egressing a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] ingress_rate Ingress direction rate.
 * \param [in] egress_rate Egress direction rate.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_sample_rate_set_f)(
    int unit,
    bcm_port_t port,
    int ingress_rate,
    int egress_rate);

/*!
 * \brief Get the sampling rate of packets ingressing or egressing a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] ingress_rate Ingress direction rate.
 * \param [out] egress_rate Egress direction rate.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_sample_rate_get_f)(
    int unit,
    bcm_port_t port,
    int *ingress_rate,
    int *egress_rate);

/*!
 * \brief Update profile for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] fields Field list.
 * \param [in] fields_cnt Field number in list.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_profile_lport_tab_update_f)(
    int unit,
    ltsw_port_tab_field_t *fields,
    int fields_cnt);

/*!
 * \brief Add profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile Profile to be added.
 * \param [out] index Index of the added or existed profile enrty.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_profile_port_pkt_ctrl_add_f)(
    int unit,
    void *profile,
    int *index);

/*!
 * \brief Get profile from LT.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Index of the first entry.
 * \param [out] profile Profile entries.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_profile_port_pkt_ctrl_get_f)(
    int unit,
    int index,
    void *profile);

/*!
 * \brief Delete profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Index of the first entry to be deleted.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_profile_port_pkt_ctrl_delete_f)(
    int unit,
    int index);

/*!
 * \brief Recover hash and reference count for profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Profile index to be recovered.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_profile_port_pkt_ctrl_recover_f)(
    int unit,
    int index);

/*!
 * \brief Update one field of PORT_PKT_CONTROL.
 *
 * \param [in] unit Unit Number.
 * \param [in] port port ID.
 * \param [in] lt_fld_name Field name of PORT_PKT_CONTROL.
 * \param [in] lt_fld_value Field value of PORT_PKT_CONTROL.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_profile_port_pkt_ctrl_update_f)(
    int unit,
    int port,
    const char *lt_fld_name,
    int lt_fld_value);

/*!
 * \brief Get one field value of PORT_PKT_CONTROL.
 *
 * \param [in] unit Unit Number.
 * \param [in] port port ID.
 * \param [in] lt_fld_name Field name of PORT_PKT_CONTROL.
 * \param [out] lt_fld_value Field value of PORT_PKT_CONTROL.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_profile_port_pkt_ctrl_field_get_f)(
    int unit,
    int port,
    const char *lt_fld_name,
    int *lt_fld_value);

/*!
 * \brief Add specified entry to L2_IF based tables.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_if_add_f)(
    int unit,
    int l2_if);

/*!
 * \brief Delete specified entry of L2_IF based tables.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_if_del_f)(
    int unit,
    int l2_if);

/*!
 * \brief Get port from L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 * \param [out] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_if_to_port_f)(
    int unit,
    int l2_if,
    bcm_port_t *port);

/*!
 * \brief Get L2 interface from port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_to_l2_if_f)(
    int unit,
    bcm_port_t port,
    int *l2_if);

/*!
 * \brief Get port mask from L2 interface mask.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if_mask L2 interface mask.
 * \param [out] port_mask Local logical port mask.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_if_mask_to_port_mask_f)(
    int unit,
    int l2_if_mask,
    int *port_mask);

/*!
 * \brief Get L2 interface mask from port mask.
 *
 * \param [in] unit Unit Number.
 * \param [in] port_mask Local logical port mask.
 * \param [out] l2_if_mask L2 interface mask.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_mask_to_l2_if_mask_f)(
    int unit,
    int port_mask,
    int *l2_if_mask);

/*!
 * \brief Get which pipes are using identified  L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 * \param [out] pipe_bmp Pipe bitmap.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_if_to_pipes_f)(
    int unit,
    int l2_if,
    uint32_t *pipe_bmp);

/*!
 * \brief Add specified entry to System Port based tables.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [in] flags Operation flags BCMI_LTSW_PORT_XXX.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*sys_port_add_f)(
    int unit,
    int sys_port,
    int flags);

/*!
 * \brief Delete specified entry of System Port based tables.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [in] flags Operation flags BCMI_LTSW_PORT_XXX.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*sys_port_del_f)(
    int unit,
    int sys_port,
    int flags);

/*!
 * \brief Change the system port of a port. The settings of the old system port is moved to the new system port. The old system port is deleted then.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] sys_port New system port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_sys_port_move_f)(
    int unit,
    bcm_port_t port,
    int sys_port);

/*!
 * \brief Get gport from system port.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [out] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*sys_port_to_port_f)(
    int unit,
    int sys_port,
    bcm_port_t *port);

/*!
 * \brief Get system port from port or gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] sys_port System port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_to_sys_port_f)(
    int unit,
    bcm_port_t port,
    int *sys_port);

/*!
 * \brief Get system ports from port or gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Local logical port or gport.
 * \param [in] array_size Size of system port array.
 * \param [out] sys_port_array System port array.
 * \param [out] count Real count of system ports.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_to_sys_ports_f)(
    int unit,
    bcm_port_t port,
    int array_size,
    int *sys_port_array,
    int *count);

/*!
 * \brief Map System Port with L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [in] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*sys_port_map_l2_if_f)(
    int unit,
    int sys_port,
    int l2_if);

/*!
 * \brief Demap System Port and L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [in] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*sys_port_demap_l2_if_f)(
    int unit,
    int sys_port,
    int l2_if);

/*!
 * \brief Traverse over all system ports.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb Callback function.
 * \param [in] user_data User data to a call back.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*sys_port_traverse_f)(
    int unit,
    bcmi_ltsw_port_traverse_cb cb,
    void *user_data);

/*!
 * \brief Get logic table info from port tab type.
 *
 * \param [in] unit Unit Number.
 * \param [inout] fields A set of fields which contain type and LT info.
 * \param [in] count Number of fields.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_tabs_info_get_f)(
    int unit,
    ltsw_port_tab_field_t *fields,
    int count);

/*!
 * \brief Get operation flags for logic table access.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port or gport.
 * \param [inout] fields A set of fields which contain type and LT info.
 * \param [in] count Number of fields.
 * \param [out] op Operation flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_tabs_op_get_f)(
    int unit,
    bcm_port_t port,
    ltsw_port_tab_field_t *fields,
    int count,
    uint32_t *op);

/*!
 * \brief Get parameters for logic table access.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port or gport.
 * \param [inout] fields A set of fields which contain type and LT info.
 * \param [in] count Number of fields.
 * \param [in] op Port tab operation flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_tabs_para_get_f)(
    int unit,
    bcm_port_t port,
    ltsw_port_tab_field_t *fields,
    int count,
    uint32_t op);

/*!
 * \brief Set the ARL hardware learning options for this port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] flags Logical OR of BCM_PORT_LEARN_xxx flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_learn_set_f)(
    int unit,
    bcm_port_t port,
    uint32_t flags);

/*!
 * \brief Get the ARL hardware learning options for this port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags Logical OR of BCM_PORT_LEARN_xxx flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_learn_get_f)(
    int unit,
    bcm_port_t port,
    uint32_t *flags);

/*!
 * \brief Enable/Disable L3 switching on the specified port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] enable TRUE to enable, FALSE to disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_l3_enable_set_f)(
    int unit,
    bcm_port_t port,
    int enable);

/*!
 * \brief Return whether L3 switching is enabled on the specified port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] enable TRUE if enabled, FALSE if disabled.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_l3_enable_get_f)(
    int unit,
    bcm_port_t port,
    int *enable);

/*!
 * \brief Set the maximum L3 frame size for the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] size Maximum frame size in bytes.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_l3_mtu_set_f)(
    int unit,
    bcm_port_t port,
    int size);

/*!
 * \brief Get the maximum L3 frame size for the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] size Maximum frame size in bytes.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_l3_mtu_get_f)(
    int unit,
    bcm_port_t port,
    int *size);

/*!
 * \brief Set the L3 multicast options for the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] flags Logical OR of BCM_PORT_IPMC_xxx flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_ipmc_modify_set_f)(
    int unit,
    bcm_port_t port,
    uint32_t flags);

/*!
 * \brief Get the L3 multicast options for the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags Logical OR of BCM_PORT_IPMC_xxx flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_ipmc_modify_get_f)(
    int unit,
    bcm_port_t port,
    uint32_t *flags);

/*!
 * \brief Add allowed TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] tpid Tag Protocol ID.
 * \param [in] color_select Color mode of the TPID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_tpid_add_f)(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t tpid,
    int color_select);

/*!
 * \brief Set the default Tag Protocol ID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_tpid_set_f)(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t tpid);

/*!
 * \brief Retrieve the default Tag Protocol ID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [out] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_tpid_get_f)(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t *tpid);

/*!
 * \brief Get a list of tpids and associated color selections for a given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] size Number of elements of the next two array parameters.
 * \param [out] tpid_array Buffer array to hold a list of retrieved tpids.
 * \param [out] color_array Buffer array to hold a list of retrieved color selections.
 * \param [out] count Actual number of tpids retrieved.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_tpid_get_all_f)(
    int unit,
    bcm_port_t port,
    int type,
    int size,
    uint16_t *tpid_array,
    int *color_array,
    int *count);

/*!
 * \brief Delete allowed TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_tpid_delete_f)(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t tpid);

/*!
 * \brief Delete all allowed TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_tpid_delete_all_f)(
    int unit,
    bcm_port_t port,
    int type);

/*!
 * \brief Set the expected TPID for the inner tag in double-tagging mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_inner_tpid_set_f)(
    int unit,
    bcm_port_t port,
    uint16_t tpid);

/*!
 * \brief Get the expected TPID for the inner tag in double-tagging mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_inner_tpid_get_f)(
    int unit,
    bcm_port_t port,
    uint16_t *tpid);

/*!
 * \brief Set the default VLAN ID for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] vid VLAN ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_untagged_vlan_set_f)(
    int unit,
    bcm_port_t port,
    bcm_vlan_t vid);

/*!
 * \brief Retrieve the default VLAN ID for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] vid VLAN ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_untagged_vlan_get_f)(
    int unit,
    bcm_port_t port,
    bcm_vlan_t *vid);

/*!
 * \brief Set the 802.1p priority for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] priority 802.1p priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_untagged_priority_set_f)(
    int unit,
    bcm_port_t port,
    int priority);

/*!
 * \brief Retrieve the 802.1p priority for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] priority 802.1p priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_untagged_priority_get_f)(
    int unit,
    bcm_port_t port,
    int *priority);

/*!
 * \brief Set the private VLAN attribute of a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] vlan VLAN ID.
 * \param [in] pkt_prio Egress packet priority.
 * \param [in] flags BCM_PORT_FORCE_VLAN_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_force_vlan_set_f)(
    int unit,
    bcm_port_t port,
    bcm_vlan_t vlan,
    int pkt_prio,
    uint32_t flags);

/*!
 * \brief Get the private VLAN attribute of a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] vlan VLAN ID.
 * \param [out] pkt_prio Egress packet priority.
 * \param [out] flags BCM_PORT_FORCE_VLAN_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_force_vlan_get_f)(
    int unit,
    bcm_port_t port,
    bcm_vlan_t *vlan,
    int *pkt_prio,
    uint32_t *flags);

/*!
 * \brief Set the trunk group for a given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] tid trunk ID.
 * \param [in] psc trunk selection criterion.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_tgid_set_f)(
    int unit,
    bcm_port_t port,
    int tid,
    int psc);

/*!
 * \brief Get the trunk group for a given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] tid trunk ID.
 * \param [out] psc trunk selection criterion.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_tgid_get_f)(
    int unit,
    bcm_port_t port,
    int *tid,
    int *psc);

/*!
 * \brief Set ingress and egress filter mode for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] flags BCM_PORT_VLAN_MEMBER_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_vlan_member_set_f)(
    int unit,
    bcm_port_t port,
    uint32_t flags);

/*!
 * \brief Get filter mode for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags BCM_PORT_VLAN_MEMBER_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_vlan_member_get_f)(
    int unit,
    bcm_port_t port,
    uint32_t *flags);

/*!
 * \brief Set port default vlan tag actions.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] action Vlan tag actions.
 * \param [in] action_profile_index Index of vlan action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_ing_vlan_action_set_f)(
    int unit,
    bcm_port_t port,
    bcm_vlan_action_set_t *action,
    int action_profile_index);

/*!
 * \brief Get port default vlan tag actions.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] action Vlan tag actions.
 * \param [out] action_profile_index Index of vlan action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_ing_vlan_action_get_f)(
    int unit,
    bcm_port_t port,
    bcm_vlan_action_set_t *action,
    int *action_profile_index);

/*!
 * \brief Set port egr vlan tag actions.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] action Vlan tag actions.
 * \param [in] action_profile_index Index of egr vlan action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_egr_vlan_action_set_f)(
    int unit,
    bcm_port_t port,
    bcm_vlan_action_set_t *action,
    int action_profile_index);

/*!
 * \brief Get port egr vlan tag actions.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] action Vlan tag actions.
 * \param [out] action_profile_index Index of egr vlan action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_egr_vlan_action_get_f)(
    int unit,
    bcm_port_t port,
    bcm_vlan_action_set_t *action,
    int *action_profile_index);

/*!
 * \brief Set port default vlan tag actions to reset values.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_ing_vlan_action_reset_f)(
    int unit,
    bcm_port_t port);

/*!
 * \brief Set egress vlan translation enable.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] enable Egress vlan translation enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_egr_vlan_xlate_enable_set_f)(
    int unit,
    bcm_port_t port,
    int enable);

/*!
 * \brief Get egress vlan translation enable.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] enable Egress vlan translation enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_egr_vlan_xlate_enable_get_f)(
    int unit,
    bcm_port_t port,
    int *enable);

/*!
 * \brief Set the ports class ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] class Classification type.
 * \param [in] class_id Class ID of the port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_class_set_f)(
    int unit,
    bcm_port_t port,
    bcm_port_class_t class,
    uint32_t class_id);

/*!
 * \brief Get the ports class ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] class Classification type.
 * \param [out] class_id Class ID of the port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_class_get_f)(
    int unit,
    bcm_port_t port,
    bcm_port_class_t class,
    uint32_t *class_id);

/*!
 * \brief Get which pipes are using identified port group.
 *
 * \param [in] unit Unit Number.
 * \param [in] port_group Port group.
 * \param [in] flags Operation flags BCMI_LTSW_PORT_XXX.
 * \param [out] pipe_bmp Pipe bitmap.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_group_to_pipes_f)(
    int unit,
    int port_group,
    int flags,
    uint32_t *pipe_bmp);

/*!
 * \brief Set port discard attributes.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] mode Port discard mode, BCM_PORT_DISCARD_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_discard_set_f)(
    int unit,
    bcm_port_t port,
    int mode);

/*!
 * \brief Get port discard attributes.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] mode Port discard mode, BCM_PORT_DISCARD_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_discard_get_f)(
    int unit,
    bcm_port_t port,
    int *mode);

/*!
 * \brief Set packet priority and cfi to internal priority and congestion mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] pri Packet 802.1p priority. -1 means any priority.
 * \param [in] cfi Packet CFI. -1 means any CFI.
 * \param [in] int_pri Internal priority. -1 means not to change it.
 * \param [in] cng Congestion. -1 means not to change it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_vlan_phb_map_set_f)(
    int unit,
    bcm_port_t port,
    int pri,
    int cfi,
    int int_pri,
    int cng);

/*!
 * \brief Get packet priority and cfi to internal priority and congestion mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] pri Packet 802.1p priority. -1 means first priority.
 * \param [in] cfi Packet CFI. -1 means first CFI.
 * \param [out] int_pri Internal priority. NULL means not to get it.
 * \param [out] cng Congestion. NULL means not to get it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_vlan_phb_map_get_f)(
    int unit,
    bcm_port_t port,
    int pri,
    int cfi,
    int *int_pri,
    int *cng);

/*!
 * \brief Set DSCP remapping, and DSCP to internal priority and congestion mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] srccp Source DSCP. -1 means any DSCP.
 * \param [in] mapcp Mapped DSCP. -1 means not to change it.
 * \param [in] int_pri Internal priority. -1 means not to change it.
 * \param [in] cng Congestion. -1 means not to change it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_dscp_phb_map_set_f)(
    int unit,
    bcm_port_t port,
    int srccp,
    int mapcp,
    int int_pri,
    int cng);

/*!
 * \brief Get DSCP remapping, and DSCP to internal priority and congestion mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] srccp Source DSCP. -1 means first DSCP.
 * \param [out] mapcp Mapped DSCP. NULL means not to get it.
 * \param [out] int_pri Internal priority. NULL means not to get it.
 * \param [out] cng Congestion. NULL means not to get it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_dscp_phb_map_get_f)(
    int unit,
    bcm_port_t port,
    int srccp,
    int *mapcp,
    int *int_pri,
    int *cng);

/*!
 * \brief Set internal priority and congestion to packet priority and cfi mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] int_pri Internal priority. -1 means any internal priority.
 * \param [in] cng Congestion. -1 means any congestion.
 * \param [in] pri Packet 802.1p priority. -1 means not to change it.
 * \param [in] cfi Packet CFI. -1 means not to change it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_phb_vlan_map_set_f)(
    int unit,
    bcm_port_t port,
    int int_pri,
    int cng,
    int pri,
    int cfi);

/*!
 * \brief Get internal priority and congestion to packet priority and cfi mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] int_pri Internal priority. -1 means first internal priority.
 * \param [in] cng Congestion. -1 means first congestion.
 * \param [out] pri Packet 802.1p priority. NULL means not to get it.
 * \param [out] cfi Packet CFI. NULL means not to get it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_phb_vlan_map_get_f)(
    int unit,
    bcm_port_t port,
    int int_pri,
    int cng,
    int *pri,
    int *cfi);

/*!
 * \brief Set internal priority and congestion to packet DSCP mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] int_pri Internal priority. -1 means any internal priority.
 * \param [in] cng Congestion. -1 means any congestion.
 * \param [in] dscp DSCP marking on outgoing packet. -1 means not to change it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_phb_dscp_map_set_f)(
    int unit,
    bcm_port_t port,
    int int_pri,
    int cng,
    int dscp);

/*!
 * \brief Get internal priority and congestion to packet DSCP mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] int_pri Internal priority. -1 means first internal priority.
 * \param [in] cng Congestion. -1 means first congestion.
 * \param [out] dscp DSCP marking on outgoing packet. NULL means not to get it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_phb_dscp_map_get_f)(
    int unit,
    bcm_port_t port,
    int int_pri,
    int cng,
    int *dscp);

/*!
 * \brief Set DSCP mapping mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] mode DSCP mapping mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_dscp_phb_map_mode_set_f)(
    int unit,
    bcm_port_t port,
    int mode);

/*!
 * \brief Get DSCP mapping mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] mode DSCP mapping mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_dscp_phb_map_mode_get_f)(
    int unit,
    bcm_port_t port,
    int *mode);

/*!
 * \brief Enable/Disable BPDU reception on the specified port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] enable TRUE to enable, FALSE to disable (reject bpdu).
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_bpdu_enable_set_f)(
    int unit,
    bcm_port_t port,
    int enable);

/*!
 * \brief Return whether BPDU reception is enabled on the specified port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] enable TRUE if enabled, FALSE if disabled
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_bpdu_enable_get_f)(
    int unit,
    bcm_port_t port,
    int *enable);

/*!
 * \brief Set egress shaper information.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] bandwidth Port bandwidth in kbps or pps. 0 means shaper is disabled.
 * \param [in] burst Maximum burst size in kbits or packets.
 * \param [in] mode Byte mode or packet mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_egr_shaper_set_f)(
    int unit,
    bcm_port_t port,
    uint32_t bandwidth,
    uint32_t burst,
    bcmi_ltsw_port_shaper_mode_t mode);

/*!
 * \brief Get egress shaper information.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] bandwidth Port bandwidth in kbps or pps.
 * \param [out] burst Maximum burst size in kbits or packets.
 * \param [out] mode Byte mode or packet mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_egr_shaper_get_f)(
    int unit,
    bcm_port_t port,
    uint32_t *bandwidth,
    uint32_t *burst,
    bcmi_ltsw_port_shaper_mode_t *mode);

/*!
 * \brief Validate egress shaper settings.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] bandwidth Port bandwidth in kbps or pps. 0 means shaper is disabled.
 * \param [in] burst Maximum burst size in kbits or packets.
 * \param [in] mode Byte mode or packet mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_egr_shaper_validate_f)(
    int unit,
    bcm_port_t port,
    uint32_t bandwidth,
    uint32_t burst,
    bcmi_ltsw_port_shaper_mode_t mode);

/*!
 * \brief Validate port class settings.
 *
 * \param [in] unit Unit Number.
 * \param [inout] port Port Number.
 * \param [in] class Classification type.
 * \param [in] class_id Class ID of the port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_class_validate_f)(
    int unit,
    bcm_port_t *port,
    bcm_port_class_t class,
    uint32_t class_id);

/*!
 * \brief Get port group range based on destination type.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Destination type.
 * \param [out] range Range of port group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_group_range_get_f)(
    int unit,
    bcm_port_group_type_t type,
    bcm_port_group_range_t *range);

/*!
 * \brief Get the count of packets (or cells) currently buffered for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] count Count of packets (or cells) currently buffered.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_queue_count_get_f)(
    int unit,
    bcm_port_t port,
    uint32_t *count);

/*!
 * \brief Check flexport input parameters and port status are valid.
 *
 * \param [in] unit Unit Number.
 * \param [in] resource Flexport internal resource.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexport_input_validate_f)(
    int unit,
    ltsw_flexport_resource_t *resource);

/*!
 * \brief Check device has enough resource to complete all operations.
 *
 * \param [in] unit Unit Number.
 * \param [in] resource Flexport internal resource.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexport_resource_validate_f)(
    int unit,
    ltsw_flexport_resource_t *resource);

/*!
 * \brief check if Portmacro accommodate the new speed.
 *
 * \param [in] unit Unit Number.
 * \param [in] speed_resource speed resource.
 * \param [out] affected_ports Bitmap of affected ports.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_speed_config_validate_f)(
    int unit,
    bcm_port_resource_t *speed_resource,
    bcm_pbmp_t *affected_ports);

/*!
 * \brief Check if the device has enough resource to complete all operations and rearrange ports in one pm.
 *
 * \param [in] unit Unit Number.
 * \param [in] nport Port number.
 * \param [in] port_resource Port configuration resource.
 * \param [in] original_tvco PM original tvco.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*pm_port_init_adjust_f)(
    int unit,
    int nport,
    ltsw_flexport_port_cfg_t *port_resource,
    int original_tvco);

/*!
 * \brief Attach ports to the BCM layer and initialize them to the default state.
 *
 * \param [in] unit Unit Number.
 * \param [in] resource Flexport internal resource.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexport_resource_attach_f)(
    int unit,
    ltsw_flexport_resource_t *resource);

/*!
 * \brief Detach ports from the BCM layer.
 *
 * \param [in] unit Unit Number.
 * \param [in] resource Flexport internal resource.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexport_resource_detach_f)(
    int unit,
    ltsw_flexport_resource_t *resource);

/*!
 * \brief Update the port resource status to depedent modules after flex operation.
 *
 * \param [in] unit Unit Number.
 * \param [in] resource Flexport internal resource.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexport_resource_status_update_f)(
    int unit,
    ltsw_flexport_resource_t *resource);

/*!
 * \brief Attach counter entries to the given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id Stat Counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_stat_attach_f)(
    int unit,
    bcm_port_t port,
    uint32_t stat_id);

/*!
 * \brief Detach counter entries to given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id Stat Counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_stat_detach_f)(
    int unit,
    bcm_port_t port,
    uint32_t stat_id);

/*!
 * \brief Attach flex state action to the given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] action_id Flex state ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_flexstate_attach_f)(
    int unit,
    bcm_port_t port,
    uint32_t action_id);

/*!
 * \brief Detach flex state action to given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] action_id Flex state ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_flexstate_detach_f)(
    int unit,
    bcm_port_t port,
    uint32_t action_id);

/*!
 * \brief Set selective per-port blocking of flooded traffic.
 *
 * \param [in] unit Unit Number.
 * \param [in] ing_port Ingress port.
 * \param [in] egr_port Egress port.
 * \param [in] flags Specifies the type of traffic to block.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_flood_block_set_f)(
    int unit,
    bcm_port_t ing_port,
    bcm_port_t egr_port,
    uint32_t flags);

/*!
 * \brief Get the current per-port flood block settings.
 *
 * \param [in] unit Unit Number.
 * \param [in] ing_port Ingress port.
 * \param [in] egr_port Egress port.
 * \param [out] flags Specifies the type of traffic to block.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_flood_block_get_f)(
    int unit,
    bcm_port_t ing_port,
    bcm_port_t egr_port,
    uint32_t *flags);

/*!
 * \brief Set switching only to indicated ports from given (modid, port).
 *
 * \param [in] unit Unit Number.
 * \param [in] port Ingress port or gport.
 * \param [in] modid Source module ID.
 * \param [in] pbmp Bitmap of ports to allow egress.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_egress_set_f)(
    int unit,
    bcm_port_t port,
    int modid,
    bcm_pbmp_t pbmp);

/*!
 * \brief Retrieve bitmap of ports for which switching is enabled for (modid, port).
 *
 * \param [in] unit Unit Number.
 * \param [in] port Ingress port or gport.
 * \param [in] modid Source module ID.
 * \param [out] pbmp Bitmap of ports where egress allowed.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_egress_get_f)(
    int unit,
    bcm_port_t port,
    int modid,
    bcm_pbmp_t *pbmp);

/*!
 * \brief Add a match to an existing port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] match Match criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_match_add_f)(
    int unit,
    bcm_port_t port,
    bcm_port_match_info_t *match);

/*!
 * \brief Remove a match from an existing port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] match Match criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_match_delete_f)(
    int unit,
    bcm_port_t port,
    bcm_port_match_info_t *match);

/*!
 * \brief Get all the matches for an existing port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] size Number of elements in match array.
 * \param [out] array Match criteria array.
 * \param [out] count Match count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_match_multi_get_f)(
    int unit,
    bcm_port_t port,
    int size,
    bcm_port_match_info_t *array,
    int *count);

/*!
 * \brief Set port HG3 enable.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] enable HG3 enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_hg3_enable_set_f)(
    int unit,
    bcm_port_t port,
    int enable);

/*!
 * \brief Get port HG3 enable.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] enable HG3 enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_hg3_enable_get_f)(
    int unit,
    bcm_port_t port,
    int *enable);

/*!
 * \brief Set HG3 Ethernet Type.
 *
 * \param [in] unit Unit Number.
 * \param [in] type HG3 Ethernet Type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_hg3_eth_type_set_f)(
    int unit,
    int type);

/*!
 * \brief Get HG3 Ethernet Type.
 *
 * \param [in] unit Unit Number.
 * \param [out] type HG3 Ethernet Type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_hg3_eth_type_get_f)(
    int unit,
    int *type);

/*!
 * \brief Get the list of ancillary ports belonging to the same port block as the controlling port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Controlling port.
 * \param [out] pbmp Ports belonging to the controlling port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_subsidiary_ports_get_f)(
    int unit,
    bcm_port_t port,
    bcm_pbmp_t *pbmp);

/*!
 * \brief Get the spec of port module resources.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Resource type.
 * \param [out] spec Spec of identified resource.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_resource_spec_get_f)(
    int unit,
    bcmi_ltsw_port_resource_type_t type,
    const bcmi_ltsw_port_resource_spec_t **spec);

/*!
 * \brief Enable egress VLAN membership check for IFP redirection.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable Enable or disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_ifp_egr_vlan_check_enable_set_f)(
    int unit,
    uint32_t enable);

/*!
 * \brief Get egress VLAN membership check enable for IFP redirection.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Enable or disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_ifp_egr_vlan_check_enable_get_f)(
    int unit,
    uint32_t *enable);

/*!
 * \brief Get flags to disable VLAN membership check.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags Flags to disable VLAN membership check.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_vlan_check_disable_get_f)(
    int unit,
    bcm_port_t port,
    uint16_t *flags);

/*!
 * \brief Get flags to disable STG check.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags Flags to disable STG check.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_stg_check_disable_get_f)(
    int unit,
    bcm_port_t port,
    uint16_t *flags);

/*!
 * \brief Dump port sw infomation.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_dump_sw_f)(int unit);

/*!
 * \brief Allocate an ID from L2_IF pool.
 *
 * \param [in] unit Unit Number.
 * \param [out] l2_if Allocated ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval SHR_E_EMPTY No available ID to allocacte.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_if_alloc_f)(
    int unit,
    int *l2_if);

/*!
 * \brief Free an ID to L2_IF pool.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if ID to free.
 *
 * \retval SHR_E_NONE No errors.
 * \retval SHR_E_FULL The ID is already free.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_if_free_f)(
    int unit,
    int l2_if);

/*!
 * \brief Dump L2_IF pool.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_if_dump_f)(int unit);

/*!
 * \brief Set the configuration for Flight Data Recorder (FDR) on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port number.
 * \param [in] fdr_config Flight Data Recorder (FDR) configuration
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_fdr_config_set_f)(
    int unit,
    bcm_port_t port,
    bcm_port_fdr_config_t *fdr_config);

/*!
 * \brief Get the configuration for Flight Data Recorder (FDR) on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port number.
 * \param [out] fdr_config Flight Data Recorder (FDR) configuration
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_fdr_config_get_f)(
    int unit,
    bcm_port_t port,
    bcm_port_fdr_config_t *fdr_config);

/*!
 * \brief Get the statistics of Flight Data Recorder (FDR) on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port number.
 * \param [out] fdr_stats Flight Data Recorder (FDR) statistics
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_fdr_stats_get_f)(
    int unit,
    bcm_port_t port,
    bcm_port_fdr_stats_t *fdr_stats);

/*!
 * \brief Register port Flight Data Recorder (FDR) interrupt notification callbacks.
 *
 * \param [in] unit Unit Number.
 * \param [in] f Flight Data Recorder (FDR) callback
 * \param [in] user_data user data pointer
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_fdr_callback_register_f)(
    int unit,
    bcm_port_fdr_handler_t f,
    void *user_data);

/*!
 * \brief Unregister port Flight Data Recorder (FDR) interrupt notification callbacks.
 *
 * \param [in] unit Unit Number.
 * \param [in] f Flight Data Recorder (FDR) callback
 * \param [in] user_data user data pointer
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*port_fdr_callback_unregister_f)(
    int unit,
    bcm_port_fdr_handler_t f,
    void *user_data);

/*!
 * \brief Port driver structure.
 */
typedef struct mbcm_ltsw_port_drv_s {

    /*! Initialize device specific information. */
    port_info_init_f port_info_init;

    /*! Initialize device specific information for a port. */
    port_info_init_per_port_f port_info_init_per_port;

    /*! De-initialize device specific information. */
    port_info_deinit_f port_info_deinit;

    /*! Recover device specific information. */
    port_info_recover_f port_info_recover;

    /*! Initialize port profile tables. */
    port_profile_init_f port_profile_init;

    /*! De-initialize port profile tables. */
    port_profile_deinit_f port_profile_deinit;

    /*! Initialize basic port pipeline configuration. */
    port_service_init_f port_service_init;

    /*! De-initialize basic port pipeline configuration. */
    port_service_deinit_f port_service_deinit;

    /*! Port module misc init. */
    port_misc_init_f port_misc_init;

    /*! Port module misc deinit. */
    port_misc_deinit_f port_misc_deinit;

    /*! Port database initialization. */
    port_db_init_f port_db_init;

    /*! Set the status of specified port feature. */
    port_control_set_f port_control_set;

    /*! Get the status of specified port feature. */
    port_control_get_f port_control_get;

    /*! Control the sampling of packets ingressing or egressing a port. */
    port_sample_rate_set_f port_sample_rate_set;

    /*! Get the sampling rate of packets ingressing or egressing a port. */
    port_sample_rate_get_f port_sample_rate_get;

    /*! Update profile for a port. */
    port_profile_lport_tab_update_f port_profile_lport_tab_update;

    /*! Add profile. */
    port_profile_port_pkt_ctrl_add_f port_profile_port_pkt_ctrl_add;

    /*! Get profile from LT. */
    port_profile_port_pkt_ctrl_get_f port_profile_port_pkt_ctrl_get;

    /*! Delete profile. */
    port_profile_port_pkt_ctrl_delete_f port_profile_port_pkt_ctrl_delete;

    /*! Recover hash and reference count for profile. */
    port_profile_port_pkt_ctrl_recover_f port_profile_port_pkt_ctrl_recover;

    /*! Update one field of PORT_PKT_CONTROL. */
    port_profile_port_pkt_ctrl_update_f port_profile_port_pkt_ctrl_update;

    /*! Get one field value of PORT_PKT_CONTROL. */
    port_profile_port_pkt_ctrl_field_get_f port_profile_port_pkt_ctrl_field_get;

    /*! Add specified entry to L2_IF based tables. */
    l2_if_add_f l2_if_add;

    /*! Delete specified entry of L2_IF based tables. */
    l2_if_del_f l2_if_del;

    /*! Get port from L2 interface. */
    l2_if_to_port_f l2_if_to_port;

    /*! Get L2 interface from port. */
    port_to_l2_if_f port_to_l2_if;

    /*! Get port mask from L2 interface mask. */
    l2_if_mask_to_port_mask_f l2_if_mask_to_port_mask;

    /*! Get L2 interface mask from port mask. */
    port_mask_to_l2_if_mask_f port_mask_to_l2_if_mask;

    /*! Get which pipes are using identified  L2 interface. */
    l2_if_to_pipes_f l2_if_to_pipes;

    /*! Add specified entry to System Port based tables. */
    sys_port_add_f sys_port_add;

    /*! Delete specified entry of System Port based tables. */
    sys_port_del_f sys_port_del;

    /*! Change the system port of a port. The settings of the old system port is moved to the new system port. The old system port is deleted then. */
    port_sys_port_move_f port_sys_port_move;

    /*! Get gport from system port. */
    sys_port_to_port_f sys_port_to_port;

    /*! Get system port from port or gport. */
    port_to_sys_port_f port_to_sys_port;

    /*! Get system ports from port or gport. */
    port_to_sys_ports_f port_to_sys_ports;

    /*! Map System Port with L2 interface. */
    sys_port_map_l2_if_f sys_port_map_l2_if;

    /*! Demap System Port and L2 interface. */
    sys_port_demap_l2_if_f sys_port_demap_l2_if;

    /*! Traverse over all system ports. */
    sys_port_traverse_f sys_port_traverse;

    /*! Get logic table info from port tab type. */
    port_tabs_info_get_f port_tabs_info_get;

    /*! Get operation flags for logic table access. */
    port_tabs_op_get_f port_tabs_op_get;

    /*! Get parameters for logic table access. */
    port_tabs_para_get_f port_tabs_para_get;

    /*! Set the ARL hardware learning options for this port. */
    port_learn_set_f port_learn_set;

    /*! Get the ARL hardware learning options for this port. */
    port_learn_get_f port_learn_get;

    /*! Enable/Disable L3 switching on the specified port. */
    port_l3_enable_set_f port_l3_enable_set;

    /*! Return whether L3 switching is enabled on the specified port. */
    port_l3_enable_get_f port_l3_enable_get;

    /*! Set the maximum L3 frame size for the port. */
    port_l3_mtu_set_f port_l3_mtu_set;

    /*! Get the maximum L3 frame size for the port. */
    port_l3_mtu_get_f port_l3_mtu_get;

    /*! Set the L3 multicast options for the port. */
    port_ipmc_modify_set_f port_ipmc_modify_set;

    /*! Get the L3 multicast options for the port. */
    port_ipmc_modify_get_f port_ipmc_modify_get;

    /*! Add allowed TPID for a port. */
    port_tpid_add_f port_tpid_add;

    /*! Set the default Tag Protocol ID for a port. */
    port_tpid_set_f port_tpid_set;

    /*! Retrieve the default Tag Protocol ID for a port. */
    port_tpid_get_f port_tpid_get;

    /*! Get a list of tpids and associated color selections for a given port. */
    port_tpid_get_all_f port_tpid_get_all;

    /*! Delete allowed TPID for a port. */
    port_tpid_delete_f port_tpid_delete;

    /*! Delete all allowed TPID for a port. */
    port_tpid_delete_all_f port_tpid_delete_all;

    /*! Set the expected TPID for the inner tag in double-tagging mode. */
    port_inner_tpid_set_f port_inner_tpid_set;

    /*! Get the expected TPID for the inner tag in double-tagging mode. */
    port_inner_tpid_get_f port_inner_tpid_get;

    /*! Set the default VLAN ID for received untagged packets on a port. */
    port_untagged_vlan_set_f port_untagged_vlan_set;

    /*! Retrieve the default VLAN ID for received untagged packets on a port. */
    port_untagged_vlan_get_f port_untagged_vlan_get;

    /*! Set the 802.1p priority for received untagged packets on a port. */
    port_untagged_priority_set_f port_untagged_priority_set;

    /*! Retrieve the 802.1p priority for received untagged packets on a port. */
    port_untagged_priority_get_f port_untagged_priority_get;

    /*! Set the private VLAN attribute of a port. */
    port_force_vlan_set_f port_force_vlan_set;

    /*! Get the private VLAN attribute of a port. */
    port_force_vlan_get_f port_force_vlan_get;

    /*! Set the trunk group for a given port. */
    port_tgid_set_f port_tgid_set;

    /*! Get the trunk group for a given port. */
    port_tgid_get_f port_tgid_get;

    /*! Set ingress and egress filter mode for a port. */
    port_vlan_member_set_f port_vlan_member_set;

    /*! Get filter mode for a port. */
    port_vlan_member_get_f port_vlan_member_get;

    /*! Set port default vlan tag actions. */
    port_ing_vlan_action_set_f port_ing_vlan_action_set;

    /*! Get port default vlan tag actions. */
    port_ing_vlan_action_get_f port_ing_vlan_action_get;

    /*! Set port egr vlan tag actions. */
    port_egr_vlan_action_set_f port_egr_vlan_action_set;

    /*! Get port egr vlan tag actions. */
    port_egr_vlan_action_get_f port_egr_vlan_action_get;

    /*! Set port default vlan tag actions to reset values. */
    port_ing_vlan_action_reset_f port_ing_vlan_action_reset;

    /*! Set egress vlan translation enable. */
    port_egr_vlan_xlate_enable_set_f port_egr_vlan_xlate_enable_set;

    /*! Get egress vlan translation enable. */
    port_egr_vlan_xlate_enable_get_f port_egr_vlan_xlate_enable_get;

    /*! Set the ports class ID. */
    port_class_set_f port_class_set;

    /*! Get the ports class ID. */
    port_class_get_f port_class_get;

    /*! Get which pipes are using identified port group. */
    port_group_to_pipes_f port_group_to_pipes;

    /*! Set port discard attributes. */
    port_discard_set_f port_discard_set;

    /*! Get port discard attributes. */
    port_discard_get_f port_discard_get;

    /*! Set packet priority and cfi to internal priority and congestion mapping. */
    port_vlan_phb_map_set_f port_vlan_phb_map_set;

    /*! Get packet priority and cfi to internal priority and congestion mapping. */
    port_vlan_phb_map_get_f port_vlan_phb_map_get;

    /*! Set DSCP remapping, and DSCP to internal priority and congestion mapping. */
    port_dscp_phb_map_set_f port_dscp_phb_map_set;

    /*! Get DSCP remapping, and DSCP to internal priority and congestion mapping. */
    port_dscp_phb_map_get_f port_dscp_phb_map_get;

    /*! Set internal priority and congestion to packet priority and cfi mapping. */
    port_phb_vlan_map_set_f port_phb_vlan_map_set;

    /*! Get internal priority and congestion to packet priority and cfi mapping. */
    port_phb_vlan_map_get_f port_phb_vlan_map_get;

    /*! Set internal priority and congestion to packet DSCP mapping. */
    port_phb_dscp_map_set_f port_phb_dscp_map_set;

    /*! Get internal priority and congestion to packet DSCP mapping. */
    port_phb_dscp_map_get_f port_phb_dscp_map_get;

    /*! Set DSCP mapping mode. */
    port_dscp_phb_map_mode_set_f port_dscp_phb_map_mode_set;

    /*! Get DSCP mapping mode. */
    port_dscp_phb_map_mode_get_f port_dscp_phb_map_mode_get;

    /*! Enable/Disable BPDU reception on the specified port. */
    port_bpdu_enable_set_f port_bpdu_enable_set;

    /*! Return whether BPDU reception is enabled on the specified port. */
    port_bpdu_enable_get_f port_bpdu_enable_get;

    /*! Set egress shaper information. */
    port_egr_shaper_set_f port_egr_shaper_set;

    /*! Get egress shaper information. */
    port_egr_shaper_get_f port_egr_shaper_get;

    /*! Validate egress shaper settings. */
    port_egr_shaper_validate_f port_egr_shaper_validate;

    /*! Validate port class settings. */
    port_class_validate_f port_class_validate;

    /*! Get port group range based on destination type. */
    port_group_range_get_f port_group_range_get;

    /*! Get the count of packets (or cells) currently buffered for a port. */
    port_queue_count_get_f port_queue_count_get;

    /*! Check flexport input parameters and port status are valid. */
    flexport_input_validate_f flexport_input_validate;

    /*! Check device has enough resource to complete all operations. */
    flexport_resource_validate_f flexport_resource_validate;

    /*! check if Portmacro accommodate the new speed. */
    port_speed_config_validate_f port_speed_config_validate;

    /*! Check if the device has enough resource to complete all operations and rearrange ports in one pm. */
    pm_port_init_adjust_f pm_port_init_adjust;

    /*! Attach ports to the BCM layer and initialize them to the default state. */
    flexport_resource_attach_f flexport_resource_attach;

    /*! Detach ports from the BCM layer. */
    flexport_resource_detach_f flexport_resource_detach;

    /*! Update the port resource status to depedent modules after flex operation. */
    flexport_resource_status_update_f flexport_resource_status_update;

    /*! Attach counter entries to the given port. */
    port_stat_attach_f port_stat_attach;

    /*! Detach counter entries to given port. */
    port_stat_detach_f port_stat_detach;

    /*! Attach flex state action to the given port. */
    port_flexstate_attach_f port_flexstate_attach;

    /*! Detach flex state action to given port. */
    port_flexstate_detach_f port_flexstate_detach;

    /*! Set selective per-port blocking of flooded traffic. */
    port_flood_block_set_f port_flood_block_set;

    /*! Get the current per-port flood block settings. */
    port_flood_block_get_f port_flood_block_get;

    /*! Set switching only to indicated ports from given (modid, port). */
    port_egress_set_f port_egress_set;

    /*! Retrieve bitmap of ports for which switching is enabled for (modid, port). */
    port_egress_get_f port_egress_get;

    /*! Add a match to an existing port. */
    port_match_add_f port_match_add;

    /*! Remove a match from an existing port. */
    port_match_delete_f port_match_delete;

    /*! Get all the matches for an existing port. */
    port_match_multi_get_f port_match_multi_get;

    /*! Set port HG3 enable. */
    port_hg3_enable_set_f port_hg3_enable_set;

    /*! Get port HG3 enable. */
    port_hg3_enable_get_f port_hg3_enable_get;

    /*! Set HG3 Ethernet Type. */
    port_hg3_eth_type_set_f port_hg3_eth_type_set;

    /*! Get HG3 Ethernet Type. */
    port_hg3_eth_type_get_f port_hg3_eth_type_get;

    /*! Get the list of ancillary ports belonging to the same port block as the controlling port. */
    port_subsidiary_ports_get_f port_subsidiary_ports_get;

    /*! Get the spec of port module resources. */
    port_resource_spec_get_f port_resource_spec_get;

    /*! Enable egress VLAN membership check for IFP redirection. */
    port_ifp_egr_vlan_check_enable_set_f port_ifp_egr_vlan_check_enable_set;

    /*! Get egress VLAN membership check enable for IFP redirection. */
    port_ifp_egr_vlan_check_enable_get_f port_ifp_egr_vlan_check_enable_get;

    /*! Get flags to disable VLAN membership check. */
    port_vlan_check_disable_get_f port_vlan_check_disable_get;

    /*! Get flags to disable STG check. */
    port_stg_check_disable_get_f port_stg_check_disable_get;

    /*! Dump port sw infomation. */
    port_dump_sw_f port_dump_sw;

    /*! Allocate an ID from L2_IF pool. */
    l2_if_alloc_f l2_if_alloc;

    /*! Free an ID to L2_IF pool. */
    l2_if_free_f l2_if_free;

    /*! Dump L2_IF pool. */
    l2_if_dump_f l2_if_dump;

    /*! Set the configuration for Flight Data Recorder (FDR) on a port. */
    port_fdr_config_set_f port_fdr_config_set;

    /*! Get the configuration for Flight Data Recorder (FDR) on a port. */
    port_fdr_config_get_f port_fdr_config_get;

    /*! Get the statistics of Flight Data Recorder (FDR) on a port. */
    port_fdr_stats_get_f port_fdr_stats_get;

    /*! Register port Flight Data Recorder (FDR) interrupt notification callbacks. */
    port_fdr_callback_register_f port_fdr_callback_register;

    /*! Unregister port Flight Data Recorder (FDR) interrupt notification callbacks. */
    port_fdr_callback_unregister_f port_fdr_callback_unregister;

} mbcm_ltsw_port_drv_t;

/*!
 * \brief Set the PORT driver of the device.
 *
 * \param [in] unit Unit Number.
 * \param [in] drv Port driver to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_drv_set(
    int unit,
    mbcm_ltsw_port_drv_t *drv);

/*!
 * \brief Initialize device specific information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_info_init(int unit);

/*!
 * \brief Initialize device specific information for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_info_init_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief De-initialize device specific information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_info_deinit(int unit);

/*!
 * \brief Recover device specific information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_info_recover(int unit);

/*!
 * \brief Initialize port profile tables.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_profile_init(int unit);

/*!
 * \brief De-initialize port profile tables.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_profile_deinit(int unit);

/*!
 * \brief Initialize basic port pipeline configuration.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_service_init(int unit);

/*!
 * \brief De-initialize basic port pipeline configuration.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_service_deinit(int unit);

/*!
 * \brief Port module misc init.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_misc_init(int unit);

/*!
 * \brief Port module misc deinit.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_misc_deinit(int unit);

/*!
 * \brief Port database initialization.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_db_init(int unit);

/*!
 * \brief Set the status of specified port feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type Enum value of the port feature.
 * \param [in] value Value of the port feature to be set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_control_set(
    int unit,
    bcm_port_t port,
    bcm_port_control_t type,
    int value);

/*!
 * \brief Get the status of specified port feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type Enum value of the port feature.
 * \param [out] value Current value of the port feature.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_control_get(
    int unit,
    bcm_port_t port,
    bcm_port_control_t type,
    int *value);

/*!
 * \brief Control the sampling of packets ingressing or egressing a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] ingress_rate Ingress direction rate.
 * \param [in] egress_rate Egress direction rate.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_sample_rate_set(
    int unit,
    bcm_port_t port,
    int ingress_rate,
    int egress_rate);

/*!
 * \brief Get the sampling rate of packets ingressing or egressing a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] ingress_rate Ingress direction rate.
 * \param [out] egress_rate Egress direction rate.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_sample_rate_get(
    int unit,
    bcm_port_t port,
    int *ingress_rate,
    int *egress_rate);

/*!
 * \brief Update profile for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] fields Field list.
 * \param [in] fields_cnt Field number in list.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_profile_lport_tab_update(
    int unit,
    ltsw_port_tab_field_t *fields,
    int fields_cnt);

/*!
 * \brief Add profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile Profile to be added.
 * \param [out] index Index of the added or existed profile enrty.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_profile_port_pkt_ctrl_add(
    int unit,
    void *profile,
    int *index);

/*!
 * \brief Get profile from LT.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Index of the first entry.
 * \param [out] profile Profile entries.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_profile_port_pkt_ctrl_get(
    int unit,
    int index,
    void *profile);

/*!
 * \brief Delete profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Index of the first entry to be deleted.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_profile_port_pkt_ctrl_delete(
    int unit,
    int index);

/*!
 * \brief Recover hash and reference count for profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Profile index to be recovered.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_profile_port_pkt_ctrl_recover(
    int unit,
    int index);

/*!
 * \brief Update one field of PORT_PKT_CONTROL.
 *
 * \param [in] unit Unit Number.
 * \param [in] port port ID.
 * \param [in] lt_fld_name Field name of PORT_PKT_CONTROL.
 * \param [in] lt_fld_value Field value of PORT_PKT_CONTROL.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_profile_port_pkt_ctrl_update(
    int unit,
    int port,
    const char *lt_fld_name,
    int lt_fld_value);

/*!
 * \brief Get one field value of PORT_PKT_CONTROL.
 *
 * \param [in] unit Unit Number.
 * \param [in] port port ID.
 * \param [in] lt_fld_name Field name of PORT_PKT_CONTROL.
 * \param [out] lt_fld_value Field value of PORT_PKT_CONTROL.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_profile_port_pkt_ctrl_field_get(
    int unit,
    int port,
    const char *lt_fld_name,
    int *lt_fld_value);

/*!
 * \brief Add specified entry to L2_IF based tables.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_if_add(
    int unit,
    int l2_if);

/*!
 * \brief Delete specified entry of L2_IF based tables.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_if_del(
    int unit,
    int l2_if);

/*!
 * \brief Get port from L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 * \param [out] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_if_to_port(
    int unit,
    int l2_if,
    bcm_port_t *port);

/*!
 * \brief Get L2 interface from port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_to_l2_if(
    int unit,
    bcm_port_t port,
    int *l2_if);

/*!
 * \brief Get port mask from L2 interface mask.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if_mask L2 interface mask.
 * \param [out] port_mask Local logical port mask.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_if_mask_to_port_mask(
    int unit,
    int l2_if_mask,
    int *port_mask);

/*!
 * \brief Get L2 interface mask from port mask.
 *
 * \param [in] unit Unit Number.
 * \param [in] port_mask Local logical port mask.
 * \param [out] l2_if_mask L2 interface mask.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_mask_to_l2_if_mask(
    int unit,
    int port_mask,
    int *l2_if_mask);

/*!
 * \brief Get which pipes are using identified  L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface.
 * \param [out] pipe_bmp Pipe bitmap.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_if_to_pipes(
    int unit,
    int l2_if,
    uint32_t *pipe_bmp);

/*!
 * \brief Add specified entry to System Port based tables.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [in] flags Operation flags BCMI_LTSW_PORT_XXX.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_sys_port_add(
    int unit,
    int sys_port,
    int flags);

/*!
 * \brief Delete specified entry of System Port based tables.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [in] flags Operation flags BCMI_LTSW_PORT_XXX.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_sys_port_del(
    int unit,
    int sys_port,
    int flags);

/*!
 * \brief Change the system port of a port. The settings of the old system port is moved to the new system port. The old system port is deleted then.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] sys_port New system port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_sys_port_move(
    int unit,
    bcm_port_t port,
    int sys_port);

/*!
 * \brief Get gport from system port.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [out] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_sys_port_to_port(
    int unit,
    int sys_port,
    bcm_port_t *port);

/*!
 * \brief Get system port from port or gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] sys_port System port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_to_sys_port(
    int unit,
    bcm_port_t port,
    int *sys_port);

/*!
 * \brief Get system ports from port or gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Local logical port or gport.
 * \param [in] array_size Size of system port array.
 * \param [out] sys_port_array System port array.
 * \param [out] count Real count of system ports.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_to_sys_ports(
    int unit,
    bcm_port_t port,
    int array_size,
    int *sys_port_array,
    int *count);

/*!
 * \brief Map System Port with L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [in] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_sys_port_map_l2_if(
    int unit,
    int sys_port,
    int l2_if);

/*!
 * \brief Demap System Port and L2 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] sys_port System port.
 * \param [in] l2_if L2 interface.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_sys_port_demap_l2_if(
    int unit,
    int sys_port,
    int l2_if);

/*!
 * \brief Traverse over all system ports.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb Callback function.
 * \param [in] user_data User data to a call back.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_sys_port_traverse(
    int unit,
    bcmi_ltsw_port_traverse_cb cb,
    void *user_data);

/*!
 * \brief Get logic table info from port tab type.
 *
 * \param [in] unit Unit Number.
 * \param [inout] fields A set of fields which contain type and LT info.
 * \param [in] count Number of fields.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_tabs_info_get(
    int unit,
    ltsw_port_tab_field_t *fields,
    int count);

/*!
 * \brief Get operation flags for logic table access.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port or gport.
 * \param [inout] fields A set of fields which contain type and LT info.
 * \param [in] count Number of fields.
 * \param [out] op Operation flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_tabs_op_get(
    int unit,
    bcm_port_t port,
    ltsw_port_tab_field_t *fields,
    int count,
    uint32_t *op);

/*!
 * \brief Get parameters for logic table access.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port or gport.
 * \param [inout] fields A set of fields which contain type and LT info.
 * \param [in] count Number of fields.
 * \param [in] op Port tab operation flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_tabs_para_get(
    int unit,
    bcm_port_t port,
    ltsw_port_tab_field_t *fields,
    int count,
    uint32_t op);

/*!
 * \brief Set the ARL hardware learning options for this port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] flags Logical OR of BCM_PORT_LEARN_xxx flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_learn_set(
    int unit,
    bcm_port_t port,
    uint32_t flags);

/*!
 * \brief Get the ARL hardware learning options for this port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags Logical OR of BCM_PORT_LEARN_xxx flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_learn_get(
    int unit,
    bcm_port_t port,
    uint32_t *flags);

/*!
 * \brief Enable/Disable L3 switching on the specified port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] enable TRUE to enable, FALSE to disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_l3_enable_set(
    int unit,
    bcm_port_t port,
    int enable);

/*!
 * \brief Return whether L3 switching is enabled on the specified port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] enable TRUE if enabled, FALSE if disabled.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_l3_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*!
 * \brief Set the maximum L3 frame size for the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] size Maximum frame size in bytes.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_l3_mtu_set(
    int unit,
    bcm_port_t port,
    int size);

/*!
 * \brief Get the maximum L3 frame size for the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] size Maximum frame size in bytes.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_l3_mtu_get(
    int unit,
    bcm_port_t port,
    int *size);

/*!
 * \brief Set the L3 multicast options for the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] flags Logical OR of BCM_PORT_IPMC_xxx flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_ipmc_modify_set(
    int unit,
    bcm_port_t port,
    uint32_t flags);

/*!
 * \brief Get the L3 multicast options for the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags Logical OR of BCM_PORT_IPMC_xxx flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_ipmc_modify_get(
    int unit,
    bcm_port_t port,
    uint32_t *flags);

/*!
 * \brief Add allowed TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] tpid Tag Protocol ID.
 * \param [in] color_select Color mode of the TPID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_tpid_add(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t tpid,
    int color_select);

/*!
 * \brief Set the default Tag Protocol ID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_tpid_set(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t tpid);

/*!
 * \brief Retrieve the default Tag Protocol ID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [out] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_tpid_get(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t *tpid);

/*!
 * \brief Get a list of tpids and associated color selections for a given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] size Number of elements of the next two array parameters.
 * \param [out] tpid_array Buffer array to hold a list of retrieved tpids.
 * \param [out] color_array Buffer array to hold a list of retrieved color selections.
 * \param [out] count Actual number of tpids retrieved.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_tpid_get_all(
    int unit,
    bcm_port_t port,
    int type,
    int size,
    uint16_t *tpid_array,
    int *color_array,
    int *count);

/*!
 * \brief Delete allowed TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_tpid_delete(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t tpid);

/*!
 * \brief Delete all allowed TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_tpid_delete_all(
    int unit,
    bcm_port_t port,
    int type);

/*!
 * \brief Set the expected TPID for the inner tag in double-tagging mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_inner_tpid_set(
    int unit,
    bcm_port_t port,
    uint16_t tpid);

/*!
 * \brief Get the expected TPID for the inner tag in double-tagging mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_inner_tpid_get(
    int unit,
    bcm_port_t port,
    uint16_t *tpid);

/*!
 * \brief Set the default VLAN ID for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] vid VLAN ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_untagged_vlan_set(
    int unit,
    bcm_port_t port,
    bcm_vlan_t vid);

/*!
 * \brief Retrieve the default VLAN ID for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] vid VLAN ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_untagged_vlan_get(
    int unit,
    bcm_port_t port,
    bcm_vlan_t *vid);

/*!
 * \brief Set the 802.1p priority for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] priority 802.1p priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_untagged_priority_set(
    int unit,
    bcm_port_t port,
    int priority);

/*!
 * \brief Retrieve the 802.1p priority for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] priority 802.1p priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_untagged_priority_get(
    int unit,
    bcm_port_t port,
    int *priority);

/*!
 * \brief Set the private VLAN attribute of a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] vlan VLAN ID.
 * \param [in] pkt_prio Egress packet priority.
 * \param [in] flags BCM_PORT_FORCE_VLAN_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_force_vlan_set(
    int unit,
    bcm_port_t port,
    bcm_vlan_t vlan,
    int pkt_prio,
    uint32_t flags);

/*!
 * \brief Get the private VLAN attribute of a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] vlan VLAN ID.
 * \param [out] pkt_prio Egress packet priority.
 * \param [out] flags BCM_PORT_FORCE_VLAN_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_force_vlan_get(
    int unit,
    bcm_port_t port,
    bcm_vlan_t *vlan,
    int *pkt_prio,
    uint32_t *flags);

/*!
 * \brief Set the trunk group for a given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] tid trunk ID.
 * \param [in] psc trunk selection criterion.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_tgid_set(
    int unit,
    bcm_port_t port,
    int tid,
    int psc);

/*!
 * \brief Get the trunk group for a given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] tid trunk ID.
 * \param [out] psc trunk selection criterion.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_tgid_get(
    int unit,
    bcm_port_t port,
    int *tid,
    int *psc);

/*!
 * \brief Set ingress and egress filter mode for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] flags BCM_PORT_VLAN_MEMBER_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_vlan_member_set(
    int unit,
    bcm_port_t port,
    uint32_t flags);

/*!
 * \brief Get filter mode for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags BCM_PORT_VLAN_MEMBER_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_vlan_member_get(
    int unit,
    bcm_port_t port,
    uint32_t *flags);

/*!
 * \brief Set port default vlan tag actions.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] action Vlan tag actions.
 * \param [in] action_profile_index Index of vlan action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_ing_vlan_action_set(
    int unit,
    bcm_port_t port,
    bcm_vlan_action_set_t *action,
    int action_profile_index);

/*!
 * \brief Get port default vlan tag actions.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] action Vlan tag actions.
 * \param [out] action_profile_index Index of vlan action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_ing_vlan_action_get(
    int unit,
    bcm_port_t port,
    bcm_vlan_action_set_t *action,
    int *action_profile_index);

/*!
 * \brief Set port egr vlan tag actions.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] action Vlan tag actions.
 * \param [in] action_profile_index Index of egr vlan action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_egr_vlan_action_set(
    int unit,
    bcm_port_t port,
    bcm_vlan_action_set_t *action,
    int action_profile_index);

/*!
 * \brief Get port egr vlan tag actions.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] action Vlan tag actions.
 * \param [out] action_profile_index Index of egr vlan action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_egr_vlan_action_get(
    int unit,
    bcm_port_t port,
    bcm_vlan_action_set_t *action,
    int *action_profile_index);

/*!
 * \brief Set port default vlan tag actions to reset values.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_ing_vlan_action_reset(
    int unit,
    bcm_port_t port);

/*!
 * \brief Set egress vlan translation enable.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] enable Egress vlan translation enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_egr_vlan_xlate_enable_set(
    int unit,
    bcm_port_t port,
    int enable);

/*!
 * \brief Get egress vlan translation enable.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] enable Egress vlan translation enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_egr_vlan_xlate_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*!
 * \brief Set the ports class ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] class Classification type.
 * \param [in] class_id Class ID of the port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_class_set(
    int unit,
    bcm_port_t port,
    bcm_port_class_t class,
    uint32_t class_id);

/*!
 * \brief Get the ports class ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] class Classification type.
 * \param [out] class_id Class ID of the port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_class_get(
    int unit,
    bcm_port_t port,
    bcm_port_class_t class,
    uint32_t *class_id);

/*!
 * \brief Get which pipes are using identified port group.
 *
 * \param [in] unit Unit Number.
 * \param [in] port_group Port group.
 * \param [in] flags Operation flags BCMI_LTSW_PORT_XXX.
 * \param [out] pipe_bmp Pipe bitmap.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_group_to_pipes(
    int unit,
    int port_group,
    int flags,
    uint32_t *pipe_bmp);

/*!
 * \brief Set port discard attributes.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] mode Port discard mode, BCM_PORT_DISCARD_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_discard_set(
    int unit,
    bcm_port_t port,
    int mode);

/*!
 * \brief Get port discard attributes.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] mode Port discard mode, BCM_PORT_DISCARD_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_discard_get(
    int unit,
    bcm_port_t port,
    int *mode);

/*!
 * \brief Set packet priority and cfi to internal priority and congestion mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] pri Packet 802.1p priority. -1 means any priority.
 * \param [in] cfi Packet CFI. -1 means any CFI.
 * \param [in] int_pri Internal priority. -1 means not to change it.
 * \param [in] cng Congestion. -1 means not to change it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_vlan_phb_map_set(
    int unit,
    bcm_port_t port,
    int pri,
    int cfi,
    int int_pri,
    int cng);

/*!
 * \brief Get packet priority and cfi to internal priority and congestion mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] pri Packet 802.1p priority. -1 means first priority.
 * \param [in] cfi Packet CFI. -1 means first CFI.
 * \param [out] int_pri Internal priority. NULL means not to get it.
 * \param [out] cng Congestion. NULL means not to get it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_vlan_phb_map_get(
    int unit,
    bcm_port_t port,
    int pri,
    int cfi,
    int *int_pri,
    int *cng);

/*!
 * \brief Set DSCP remapping, and DSCP to internal priority and congestion mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] srccp Source DSCP. -1 means any DSCP.
 * \param [in] mapcp Mapped DSCP. -1 means not to change it.
 * \param [in] int_pri Internal priority. -1 means not to change it.
 * \param [in] cng Congestion. -1 means not to change it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_dscp_phb_map_set(
    int unit,
    bcm_port_t port,
    int srccp,
    int mapcp,
    int int_pri,
    int cng);

/*!
 * \brief Get DSCP remapping, and DSCP to internal priority and congestion mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] srccp Source DSCP. -1 means first DSCP.
 * \param [out] mapcp Mapped DSCP. NULL means not to get it.
 * \param [out] int_pri Internal priority. NULL means not to get it.
 * \param [out] cng Congestion. NULL means not to get it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_dscp_phb_map_get(
    int unit,
    bcm_port_t port,
    int srccp,
    int *mapcp,
    int *int_pri,
    int *cng);

/*!
 * \brief Set internal priority and congestion to packet priority and cfi mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] int_pri Internal priority. -1 means any internal priority.
 * \param [in] cng Congestion. -1 means any congestion.
 * \param [in] pri Packet 802.1p priority. -1 means not to change it.
 * \param [in] cfi Packet CFI. -1 means not to change it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_phb_vlan_map_set(
    int unit,
    bcm_port_t port,
    int int_pri,
    int cng,
    int pri,
    int cfi);

/*!
 * \brief Get internal priority and congestion to packet priority and cfi mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] int_pri Internal priority. -1 means first internal priority.
 * \param [in] cng Congestion. -1 means first congestion.
 * \param [out] pri Packet 802.1p priority. NULL means not to get it.
 * \param [out] cfi Packet CFI. NULL means not to get it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_phb_vlan_map_get(
    int unit,
    bcm_port_t port,
    int int_pri,
    int cng,
    int *pri,
    int *cfi);

/*!
 * \brief Set internal priority and congestion to packet DSCP mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] int_pri Internal priority. -1 means any internal priority.
 * \param [in] cng Congestion. -1 means any congestion.
 * \param [in] dscp DSCP marking on outgoing packet. -1 means not to change it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_phb_dscp_map_set(
    int unit,
    bcm_port_t port,
    int int_pri,
    int cng,
    int dscp);

/*!
 * \brief Get internal priority and congestion to packet DSCP mapping.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] int_pri Internal priority. -1 means first internal priority.
 * \param [in] cng Congestion. -1 means first congestion.
 * \param [out] dscp DSCP marking on outgoing packet. NULL means not to get it.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_phb_dscp_map_get(
    int unit,
    bcm_port_t port,
    int int_pri,
    int cng,
    int *dscp);

/*!
 * \brief Set DSCP mapping mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] mode DSCP mapping mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_dscp_phb_map_mode_set(
    int unit,
    bcm_port_t port,
    int mode);

/*!
 * \brief Get DSCP mapping mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] mode DSCP mapping mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_dscp_phb_map_mode_get(
    int unit,
    bcm_port_t port,
    int *mode);

/*!
 * \brief Enable/Disable BPDU reception on the specified port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] enable TRUE to enable, FALSE to disable (reject bpdu).
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_bpdu_enable_set(
    int unit,
    bcm_port_t port,
    int enable);

/*!
 * \brief Return whether BPDU reception is enabled on the specified port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] enable TRUE if enabled, FALSE if disabled
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_bpdu_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*!
 * \brief Set egress shaper information.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] bandwidth Port bandwidth in kbps or pps. 0 means shaper is disabled.
 * \param [in] burst Maximum burst size in kbits or packets.
 * \param [in] mode Byte mode or packet mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_egr_shaper_set(
    int unit,
    bcm_port_t port,
    uint32_t bandwidth,
    uint32_t burst,
    bcmi_ltsw_port_shaper_mode_t mode);

/*!
 * \brief Get egress shaper information.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] bandwidth Port bandwidth in kbps or pps.
 * \param [out] burst Maximum burst size in kbits or packets.
 * \param [out] mode Byte mode or packet mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_egr_shaper_get(
    int unit,
    bcm_port_t port,
    uint32_t *bandwidth,
    uint32_t *burst,
    bcmi_ltsw_port_shaper_mode_t *mode);

/*!
 * \brief Validate egress shaper settings.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] bandwidth Port bandwidth in kbps or pps. 0 means shaper is disabled.
 * \param [in] burst Maximum burst size in kbits or packets.
 * \param [in] mode Byte mode or packet mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_egr_shaper_validate(
    int unit,
    bcm_port_t port,
    uint32_t bandwidth,
    uint32_t burst,
    bcmi_ltsw_port_shaper_mode_t mode);

/*!
 * \brief Validate port class settings.
 *
 * \param [in] unit Unit Number.
 * \param [inout] port Port Number.
 * \param [in] class Classification type.
 * \param [in] class_id Class ID of the port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_class_validate(
    int unit,
    bcm_port_t *port,
    bcm_port_class_t class,
    uint32_t class_id);

/*!
 * \brief Get port group range based on destination type.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Destination type.
 * \param [out] range Range of port group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_group_range_get(
    int unit,
    bcm_port_group_type_t type,
    bcm_port_group_range_t *range);

/*!
 * \brief Get the count of packets (or cells) currently buffered for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] count Count of packets (or cells) currently buffered.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_queue_count_get(
    int unit,
    bcm_port_t port,
    uint32_t *count);

/*!
 * \brief Check flexport input parameters and port status are valid.
 *
 * \param [in] unit Unit Number.
 * \param [in] resource Flexport internal resource.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexport_input_validate(
    int unit,
    ltsw_flexport_resource_t *resource);

/*!
 * \brief Check device has enough resource to complete all operations.
 *
 * \param [in] unit Unit Number.
 * \param [in] resource Flexport internal resource.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexport_resource_validate(
    int unit,
    ltsw_flexport_resource_t *resource);

/*!
 * \brief check if Portmacro accommodate the new speed.
 *
 * \param [in] unit Unit Number.
 * \param [in] speed_resource speed resource.
 * \param [out] affected_ports Bitmap of affected ports.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_speed_config_validate(
    int unit,
    bcm_port_resource_t *speed_resource,
    bcm_pbmp_t *affected_ports);

/*!
 * \brief Check if the device has enough resource to complete all operations and rearrange ports in one pm.
 *
 * \param [in] unit Unit Number.
 * \param [in] nport Port number.
 * \param [in] port_resource Port configuration resource.
 * \param [in] original_tvco PM original tvco.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_pm_port_init_adjust(
    int unit,
    int nport,
    ltsw_flexport_port_cfg_t *port_resource,
    int original_tvco);

/*!
 * \brief Attach ports to the BCM layer and initialize them to the default state.
 *
 * \param [in] unit Unit Number.
 * \param [in] resource Flexport internal resource.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexport_resource_attach(
    int unit,
    ltsw_flexport_resource_t *resource);

/*!
 * \brief Detach ports from the BCM layer.
 *
 * \param [in] unit Unit Number.
 * \param [in] resource Flexport internal resource.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexport_resource_detach(
    int unit,
    ltsw_flexport_resource_t *resource);

/*!
 * \brief Update the port resource status to depedent modules after flex operation.
 *
 * \param [in] unit Unit Number.
 * \param [in] resource Flexport internal resource.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexport_resource_status_update(
    int unit,
    ltsw_flexport_resource_t *resource);

/*!
 * \brief Attach counter entries to the given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id Stat Counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_stat_attach(
    int unit,
    bcm_port_t port,
    uint32_t stat_id);

/*!
 * \brief Detach counter entries to given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id Stat Counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_stat_detach(
    int unit,
    bcm_port_t port,
    uint32_t stat_id);

/*!
 * \brief Attach flex state action to the given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] action_id Flex state ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_flexstate_attach(
    int unit,
    bcm_port_t port,
    uint32_t action_id);

/*!
 * \brief Detach flex state action to given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] action_id Flex state ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_flexstate_detach(
    int unit,
    bcm_port_t port,
    uint32_t action_id);

/*!
 * \brief Set selective per-port blocking of flooded traffic.
 *
 * \param [in] unit Unit Number.
 * \param [in] ing_port Ingress port.
 * \param [in] egr_port Egress port.
 * \param [in] flags Specifies the type of traffic to block.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_flood_block_set(
    int unit,
    bcm_port_t ing_port,
    bcm_port_t egr_port,
    uint32_t flags);

/*!
 * \brief Get the current per-port flood block settings.
 *
 * \param [in] unit Unit Number.
 * \param [in] ing_port Ingress port.
 * \param [in] egr_port Egress port.
 * \param [out] flags Specifies the type of traffic to block.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_flood_block_get(
    int unit,
    bcm_port_t ing_port,
    bcm_port_t egr_port,
    uint32_t *flags);

/*!
 * \brief Set switching only to indicated ports from given (modid, port).
 *
 * \param [in] unit Unit Number.
 * \param [in] port Ingress port or gport.
 * \param [in] modid Source module ID.
 * \param [in] pbmp Bitmap of ports to allow egress.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_egress_set(
    int unit,
    bcm_port_t port,
    int modid,
    bcm_pbmp_t pbmp);

/*!
 * \brief Retrieve bitmap of ports for which switching is enabled for (modid, port).
 *
 * \param [in] unit Unit Number.
 * \param [in] port Ingress port or gport.
 * \param [in] modid Source module ID.
 * \param [out] pbmp Bitmap of ports where egress allowed.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_egress_get(
    int unit,
    bcm_port_t port,
    int modid,
    bcm_pbmp_t *pbmp);

/*!
 * \brief Add a match to an existing port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] match Match criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_match_add(
    int unit,
    bcm_port_t port,
    bcm_port_match_info_t *match);

/*!
 * \brief Remove a match from an existing port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] match Match criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_match_delete(
    int unit,
    bcm_port_t port,
    bcm_port_match_info_t *match);

/*!
 * \brief Get all the matches for an existing port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] size Number of elements in match array.
 * \param [out] array Match criteria array.
 * \param [out] count Match count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_match_multi_get(
    int unit,
    bcm_port_t port,
    int size,
    bcm_port_match_info_t *array,
    int *count);

/*!
 * \brief Set port HG3 enable.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] enable HG3 enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_hg3_enable_set(
    int unit,
    bcm_port_t port,
    int enable);

/*!
 * \brief Get port HG3 enable.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] enable HG3 enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_hg3_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*!
 * \brief Set HG3 Ethernet Type.
 *
 * \param [in] unit Unit Number.
 * \param [in] type HG3 Ethernet Type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_hg3_eth_type_set(
    int unit,
    int type);

/*!
 * \brief Get HG3 Ethernet Type.
 *
 * \param [in] unit Unit Number.
 * \param [out] type HG3 Ethernet Type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_hg3_eth_type_get(
    int unit,
    int *type);

/*!
 * \brief Get the list of ancillary ports belonging to the same port block as the controlling port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Controlling port.
 * \param [out] pbmp Ports belonging to the controlling port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_subsidiary_ports_get(
    int unit,
    bcm_port_t port,
    bcm_pbmp_t *pbmp);

/*!
 * \brief Get the spec of port module resources.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Resource type.
 * \param [out] spec Spec of identified resource.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_resource_spec_get(
    int unit,
    bcmi_ltsw_port_resource_type_t type,
    const bcmi_ltsw_port_resource_spec_t **spec);

/*!
 * \brief Enable egress VLAN membership check for IFP redirection.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable Enable or disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_ifp_egr_vlan_check_enable_set(
    int unit,
    uint32_t enable);

/*!
 * \brief Get egress VLAN membership check enable for IFP redirection.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Enable or disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_ifp_egr_vlan_check_enable_get(
    int unit,
    uint32_t *enable);

/*!
 * \brief Get flags to disable VLAN membership check.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags Flags to disable VLAN membership check.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_vlan_check_disable_get(
    int unit,
    bcm_port_t port,
    uint16_t *flags);

/*!
 * \brief Get flags to disable STG check.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags Flags to disable STG check.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_stg_check_disable_get(
    int unit,
    bcm_port_t port,
    uint16_t *flags);

/*!
 * \brief Dump port sw infomation.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_dump_sw(int unit);

/*!
 * \brief Allocate an ID from L2_IF pool.
 *
 * \param [in] unit Unit Number.
 * \param [out] l2_if Allocated ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval SHR_E_EMPTY No available ID to allocacte.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_if_alloc(
    int unit,
    int *l2_if);

/*!
 * \brief Free an ID to L2_IF pool.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if ID to free.
 *
 * \retval SHR_E_NONE No errors.
 * \retval SHR_E_FULL The ID is already free.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_if_free(
    int unit,
    int l2_if);

/*!
 * \brief Dump L2_IF pool.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_if_dump(int unit);

/*!
 * \brief Set the configuration for Flight Data Recorder (FDR) on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port number.
 * \param [in] fdr_config Flight Data Recorder (FDR) configuration
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_fdr_config_set(
    int unit,
    bcm_port_t port,
    bcm_port_fdr_config_t *fdr_config);

/*!
 * \brief Get the configuration for Flight Data Recorder (FDR) on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port number.
 * \param [out] fdr_config Flight Data Recorder (FDR) configuration
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_fdr_config_get(
    int unit,
    bcm_port_t port,
    bcm_port_fdr_config_t *fdr_config);

/*!
 * \brief Get the statistics of Flight Data Recorder (FDR) on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port number.
 * \param [out] fdr_stats Flight Data Recorder (FDR) statistics
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_fdr_stats_get(
    int unit,
    bcm_port_t port,
    bcm_port_fdr_stats_t *fdr_stats);

/*!
 * \brief Register port Flight Data Recorder (FDR) interrupt notification callbacks.
 *
 * \param [in] unit Unit Number.
 * \param [in] f Flight Data Recorder (FDR) callback
 * \param [in] user_data user data pointer
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_fdr_callback_register(
    int unit,
    bcm_port_fdr_handler_t f,
    void *user_data);

/*!
 * \brief Unregister port Flight Data Recorder (FDR) interrupt notification callbacks.
 *
 * \param [in] unit Unit Number.
 * \param [in] f Flight Data Recorder (FDR) callback
 * \param [in] user_data user data pointer
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_port_fdr_callback_unregister(
    int unit,
    bcm_port_fdr_handler_t f,
    void *user_data);

#endif /* BCMINT_LTSW_MBCM_PORT_H */
