/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_MBCM_FLOWTRACKER_H
#define BCMINT_LTSW_MBCM_FLOWTRACKER_H

#include <bcm/types.h>
#include <bcm/flowtracker.h>

#include <sal/sal_types.h>

/*!
 * \brief Deinitialize Flowtracker module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_detach_f)(int unit);

/*!
 * \brief Init Flowtracker module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_init_f)(int unit);

/*!
 * \brief Set the match criteria for an elephant action.
 *
 * \param [in] unit Unit Number.
 * \param [in] action Match action.
 * \param [in] match_types Match types.
 * \param [in] match_data Match data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_elephant_action_match_set_f)(
    int unit,
    bcm_flowtracker_elephant_match_action_t action,
    uint32_t match_types,
    bcm_flowtracker_elephant_match_data_t *match_data);

/*!
 * \brief Get the match criteria for an elephant action.
 *
 * \param [in] unit Unit Number.
 * \param [in] action Match action.
 * \param [out] match_types Match types.
 * \param [out] match_data Match data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_elephant_action_match_get_f)(
    int unit,
    bcm_flowtracker_elephant_match_action_t action,
    uint32_t *match_types,
    bcm_flowtracker_elephant_match_data_t *match_data);

/*!
 * \brief Set the internal priority remap for elephant flows.
 *
 * \param [in] unit Unit Number.
 * \param [in] int_pri Internal priority.
 * \param [in] new_int_pri New internal priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_elephant_int_pri_remap_set_f)(
    int unit,
    bcm_cos_t int_pri,
    bcm_cos_t new_int_pri);

/*!
 * \brief Get the internal priority remap from elephant flows.
 *
 * \param [in] unit Unit Number.
 * \param [in] int_pri Internal priority.
 * \param [out] new_int_pri New internal priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_elephant_int_pri_remap_get_f)(
    int unit,
    bcm_cos_t int_pri,
    bcm_cos_t *new_int_pri);

/*!
 * \brief Set the hashing configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_table Hash table.
 * \param [in] instance_num Hash table instance number.
 * \param [in] bank_num Hash table bank number.
 * \param [in] hash_type Hash type.
 * \param [in] right_rotate_bits Number of bits the hash result should be rotated.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_elephant_hash_config_set_f)(
    int unit,
    bcm_flowtracker_elephant_hash_table_t hash_table,
    int instance_num,
    int bank_num,
    bcm_flowtracker_elephant_hash_type_t hash_type,
    int right_rotate_bits);

/*!
 * \brief Get the hashing configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_table Hash table.
 * \param [in] instance_num Hash table instance number.
 * \param [in] bank_num Hash table bank number.
 * \param [out] hash_type Hash type.
 * \param [out] right_rotate_bits Number of bits the hash result should be rotated.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_elephant_hash_config_get_f)(
    int unit,
    bcm_flowtracker_elephant_hash_table_t hash_table,
    int instance_num,
    int bank_num,
    bcm_flowtracker_elephant_hash_type_t *hash_type,
    int *right_rotate_bits);

/*!
 * \brief Set the control configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Control type.
 * \param [in] arg Control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_elephant_control_set_f)(
    int unit,
    bcm_flowtracker_elephant_control_t type,
    int arg);

/*!
 * \brief Get the control configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Control type.
 * \param [out] arg Control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_elephant_control_get_f)(
    int unit,
    bcm_flowtracker_elephant_control_t type,
    int *arg);

/*!
 * \brief Set the elephant counters.
 *
 * \param [in] unit Unit Number.
 * \param [in] stats Elephant statistics.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_elephant_stats_set_f)(
    int unit,
    bcm_flowtracker_elephant_stats_t *stats);

/*!
 * \brief Get the elephant counters.
 *
 * \param [in] unit Unit Number.
 * \param [out] stats Elephant statistics.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_elephant_stats_get_f)(
    int unit,
    bcm_flowtracker_elephant_stats_t *stats);

/*!
 * \brief Get the elephant counters.
 *
 * \param [in] unit Unit Number.
 * \param [out] stats Elephant statistics.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_elephant_stats_sync_get_f)(
    int unit,
    bcm_flowtracker_elephant_stats_t *stats);

/*!
 * \brief Is default group supported.
 *
 * \param [in] unit Unit Number.
 * \param [out] supported Supported or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_default_grp_supported_f)(
    int unit,
    bool *supported);

/*!
 * \brief Validate tracking params.
 *
 * \param [in] unit Unit Number.
 * \param [in] id Flow group ID
 * \param [in] num_tracking_params Number of tracking parameters
 * \param [in] list_of_tracking_params Number of tracking parameters
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_group_tracking_params_validate_f)(
    int unit,
    bcm_flowtracker_group_t id,
    int num_tracking_params,
    bcm_flowtracker_tracking_param_info_t *list_of_tracking_params);

/*!
 * \brief Validate export triggers
 *
 * \param [in] unit Unit Number.
 * \param [in] id Flow group ID
 * \param [in] export_trigger_info Export triggers
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_group_export_triggers_validate_f)(
    int unit,
    bcm_flowtracker_group_t id,
    bcm_flowtracker_export_trigger_info_t *export_trigger_info);

/*!
 * \brief Validate actions
 *
 * \param [in] unit Unit Number.
 * \param [in] id Flow group ID
 * \param [in] flags Flags
 * \param [in] hw_learn_en Flow learning is enabled in HW
 * \param [in] num_actions Number of actions
 * \param [in] action_list Action list
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_group_actions_validate_f)(
    int unit,
    bcm_flowtracker_group_t id,
    uint32 flags,
    uint8_t hw_learn_en,
    int num_actions,
    bcm_flowtracker_group_action_info_t *action_list);

/*!
 * \brief Reserve necessary flex counters
 *
 * \param [in] unit Unit Number.
 * \param [in] max_flows Max flows enabled for learning by flowtracker
 * \param [in] hw_learn_en Flow learning is enabled in HW
 * \param [out] flex_ctr_stat_id Output flex ctr stat ID
 * \param [out] flex_ctr_lt_id Output flex ctr LT index
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_flex_ctr_pkt_byte_reserve_f)(
    int unit,
    int max_flows,
    uint8_t hw_learn_en,
    uint32_t *flex_ctr_stat_id,
    uint32_t *flex_ctr_lt_id);

/*!
 * \brief Reserve necessary hit bit related flex counters
 *
 * \param [in] unit Unit Number.
 * \param [in] hitbit_type Hitbit type for which flex counters need to be reserved
 * \param [in] max_flows Max flows enabled for learning by flowtracker
 * \param [in] hw_learn_en Flow learning is enabled in HW
 * \param [out] flex_ctr_stat_id Output flex ctr stat ID
 * \param [out] flex_ctr_lt_id Output flex ctr LT index
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_flex_ctr_hit_bit_reserve_f)(
    int unit,
    int hitbit_type,
    int max_flows,
    uint8_t hw_learn_en,
    uint32_t *flex_ctr_stat_id,
    uint32_t *flex_ctr_lt_id);

/*!
 * \brief Get the maximum number of HW learnt flows
 *
 * \param [in] unit Unit Number.
 * \param [in] uft_mode Current UFT mode.
 * \param [out] max_flows_per_pipe Maximum number of HW learnt flows.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_hw_learn_max_flows_per_pipe_get_f)(
    int unit,
    uint8_t uft_mode,
    uint32_t *max_flows_per_pipe);

/*!
 * \brief Get the names of the Hw learn enable register and field
 *
 * \param [in] unit Unit Number.
 * \param [out] reg_str Register name.
 * \param [out] field_str Field name.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_hw_learn_global_enable_reg_field_name_get_f)(
    int unit,
    char **reg_str,
    char **field_str);

/*!
 * \brief Group flex counter actions and return group action
 *
 * \param [in] unit Unit Number.
 * \param [in] main_ctr_stat_id The main flex counter banks stat ID.
 * \param [in] hitbit_ctr_stat_id The 2x or 4x hitbit counter banks stat ID.
 * \param [out] group_action_stat_id The grouped action stat ID.
 * \param [out] group_action_hw_idx The grouped action HW index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_flex_ctr_action_group_f)(
    int unit,
    uint32_t main_ctr_stat_id,
    uint32_t hitbit_ctr_stat_id,
    uint32_t *group_action_stat_id,
    uint32_t *group_action_hw_idx);

/*!
 * \brief Get the maximum number of SW learnt flows
 *
 * \param [in] unit Unit Number.
 * \param [out] max_flows_per_pipe Maximum number of SW learnt flows.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_sw_learn_max_flows_per_pipe_get_f)(
    int unit,
    uint32_t *max_flows_per_pipe);

/*!
 * \brief Check if the UFT mode is supported for HW learning feature
 *
 * \param [in] unit Unit Number.
 * \param [in] uft_mode Current UFT mode.
 * \param [out] supported Is supported or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_hw_learn_is_supported_uft_mode_f)(
    int unit,
    uint8_t uft_mode,
    bool *supported);

/*!
 * \brief Check if the UFT mode is supported for SW learning feature
 *
 * \param [in] unit Unit Number.
 * \param [in] uft_mode Current UFT mode.
 * \param [out] supported Is supported or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flowtracker_sw_learn_is_supported_uft_mode_f)(
    int unit,
    uint8_t uft_mode,
    bool *supported);

/*!
 * \brief Flowtracker driver structure.
 */
typedef struct mbcm_ltsw_flowtracker_drv_s {

    /*! Deinitialize Flowtracker module. */
    flowtracker_detach_f flowtracker_detach;

    /*! Init Flowtracker module. */
    flowtracker_init_f flowtracker_init;

    /*! Set the match criteria for an elephant action. */
    flowtracker_elephant_action_match_set_f flowtracker_elephant_action_match_set;

    /*! Get the match criteria for an elephant action. */
    flowtracker_elephant_action_match_get_f flowtracker_elephant_action_match_get;

    /*! Set the internal priority remap for elephant flows. */
    flowtracker_elephant_int_pri_remap_set_f flowtracker_elephant_int_pri_remap_set;

    /*! Get the internal priority remap from elephant flows. */
    flowtracker_elephant_int_pri_remap_get_f flowtracker_elephant_int_pri_remap_get;

    /*! Set the hashing configuration. */
    flowtracker_elephant_hash_config_set_f flowtracker_elephant_hash_config_set;

    /*! Get the hashing configuration. */
    flowtracker_elephant_hash_config_get_f flowtracker_elephant_hash_config_get;

    /*! Set the control configuration. */
    flowtracker_elephant_control_set_f flowtracker_elephant_control_set;

    /*! Get the control configuration. */
    flowtracker_elephant_control_get_f flowtracker_elephant_control_get;

    /*! Set the elephant counters. */
    flowtracker_elephant_stats_set_f flowtracker_elephant_stats_set;

    /*! Get the elephant counters. */
    flowtracker_elephant_stats_get_f flowtracker_elephant_stats_get;

    /*! Get the elephant counters. */
    flowtracker_elephant_stats_sync_get_f flowtracker_elephant_stats_sync_get;

    /*! Is default group supported. */
    flowtracker_default_grp_supported_f flowtracker_default_grp_supported;

    /*! Validate tracking params. */
    flowtracker_group_tracking_params_validate_f flowtracker_group_tracking_params_validate;

    /*! Validate export triggers */
    flowtracker_group_export_triggers_validate_f flowtracker_group_export_triggers_validate;

    /*! Validate actions */
    flowtracker_group_actions_validate_f flowtracker_group_actions_validate;

    /*! Reserve necessary flex counters */
    flowtracker_flex_ctr_pkt_byte_reserve_f flowtracker_flex_ctr_pkt_byte_reserve;

    /*! Reserve necessary hit bit related flex counters */
    flowtracker_flex_ctr_hit_bit_reserve_f flowtracker_flex_ctr_hit_bit_reserve;

    /*! Get the maximum number of HW learnt flows */
    flowtracker_hw_learn_max_flows_per_pipe_get_f flowtracker_hw_learn_max_flows_per_pipe_get;

    /*! Get the names of the Hw learn enable register and field */
    flowtracker_hw_learn_global_enable_reg_field_name_get_f flowtracker_hw_learn_global_enable_reg_field_name_get;

    /*! Group flex counter actions and return group action */
    flowtracker_flex_ctr_action_group_f flowtracker_flex_ctr_action_group;

    /*! Get the maximum number of SW learnt flows */
    flowtracker_sw_learn_max_flows_per_pipe_get_f flowtracker_sw_learn_max_flows_per_pipe_get;

    /*! Check if the UFT mode is supported for HW learning feature */
    flowtracker_hw_learn_is_supported_uft_mode_f flowtracker_hw_learn_is_supported_uft_mode;

    /*! Check if the UFT mode is supported for SW learning feature */
    flowtracker_sw_learn_is_supported_uft_mode_f flowtracker_sw_learn_is_supported_uft_mode;

} mbcm_ltsw_flowtracker_drv_t;

/*!
 * \brief Set the FLOWTRACKER driver of the device.
 *
 * \param [in] unit Unit Number.
 * \param [in] drv Flowtracker driver to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_drv_set(
    int unit,
    mbcm_ltsw_flowtracker_drv_t *drv);

/*!
 * \brief Deinitialize Flowtracker module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_detach(int unit);

/*!
 * \brief Init Flowtracker module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_init(int unit);

/*!
 * \brief Set the match criteria for an elephant action.
 *
 * \param [in] unit Unit Number.
 * \param [in] action Match action.
 * \param [in] match_types Match types.
 * \param [in] match_data Match data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_elephant_action_match_set(
    int unit,
    bcm_flowtracker_elephant_match_action_t action,
    uint32_t match_types,
    bcm_flowtracker_elephant_match_data_t *match_data);

/*!
 * \brief Get the match criteria for an elephant action.
 *
 * \param [in] unit Unit Number.
 * \param [in] action Match action.
 * \param [out] match_types Match types.
 * \param [out] match_data Match data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_elephant_action_match_get(
    int unit,
    bcm_flowtracker_elephant_match_action_t action,
    uint32_t *match_types,
    bcm_flowtracker_elephant_match_data_t *match_data);

/*!
 * \brief Set the internal priority remap for elephant flows.
 *
 * \param [in] unit Unit Number.
 * \param [in] int_pri Internal priority.
 * \param [in] new_int_pri New internal priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_elephant_int_pri_remap_set(
    int unit,
    bcm_cos_t int_pri,
    bcm_cos_t new_int_pri);

/*!
 * \brief Get the internal priority remap from elephant flows.
 *
 * \param [in] unit Unit Number.
 * \param [in] int_pri Internal priority.
 * \param [out] new_int_pri New internal priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_elephant_int_pri_remap_get(
    int unit,
    bcm_cos_t int_pri,
    bcm_cos_t *new_int_pri);

/*!
 * \brief Set the hashing configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_table Hash table.
 * \param [in] instance_num Hash table instance number.
 * \param [in] bank_num Hash table bank number.
 * \param [in] hash_type Hash type.
 * \param [in] right_rotate_bits Number of bits the hash result should be rotated.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_elephant_hash_config_set(
    int unit,
    bcm_flowtracker_elephant_hash_table_t hash_table,
    int instance_num,
    int bank_num,
    bcm_flowtracker_elephant_hash_type_t hash_type,
    int right_rotate_bits);

/*!
 * \brief Get the hashing configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_table Hash table.
 * \param [in] instance_num Hash table instance number.
 * \param [in] bank_num Hash table bank number.
 * \param [out] hash_type Hash type.
 * \param [out] right_rotate_bits Number of bits the hash result should be rotated.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_elephant_hash_config_get(
    int unit,
    bcm_flowtracker_elephant_hash_table_t hash_table,
    int instance_num,
    int bank_num,
    bcm_flowtracker_elephant_hash_type_t *hash_type,
    int *right_rotate_bits);

/*!
 * \brief Set the control configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Control type.
 * \param [in] arg Control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_elephant_control_set(
    int unit,
    bcm_flowtracker_elephant_control_t type,
    int arg);

/*!
 * \brief Get the control configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Control type.
 * \param [out] arg Control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_elephant_control_get(
    int unit,
    bcm_flowtracker_elephant_control_t type,
    int *arg);

/*!
 * \brief Set the elephant counters.
 *
 * \param [in] unit Unit Number.
 * \param [in] stats Elephant statistics.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_elephant_stats_set(
    int unit,
    bcm_flowtracker_elephant_stats_t *stats);

/*!
 * \brief Get the elephant counters.
 *
 * \param [in] unit Unit Number.
 * \param [out] stats Elephant statistics.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_elephant_stats_get(
    int unit,
    bcm_flowtracker_elephant_stats_t *stats);

/*!
 * \brief Get the elephant counters.
 *
 * \param [in] unit Unit Number.
 * \param [out] stats Elephant statistics.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_elephant_stats_sync_get(
    int unit,
    bcm_flowtracker_elephant_stats_t *stats);

/*!
 * \brief Is default group supported.
 *
 * \param [in] unit Unit Number.
 * \param [out] supported Supported or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_default_grp_supported(
    int unit,
    bool *supported);

/*!
 * \brief Validate tracking params.
 *
 * \param [in] unit Unit Number.
 * \param [in] id Flow group ID
 * \param [in] num_tracking_params Number of tracking parameters
 * \param [in] list_of_tracking_params Number of tracking parameters
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_group_tracking_params_validate(
    int unit,
    bcm_flowtracker_group_t id,
    int num_tracking_params,
    bcm_flowtracker_tracking_param_info_t *list_of_tracking_params);

/*!
 * \brief Validate export triggers
 *
 * \param [in] unit Unit Number.
 * \param [in] id Flow group ID
 * \param [in] export_trigger_info Export triggers
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_group_export_triggers_validate(
    int unit,
    bcm_flowtracker_group_t id,
    bcm_flowtracker_export_trigger_info_t *export_trigger_info);

/*!
 * \brief Validate actions
 *
 * \param [in] unit Unit Number.
 * \param [in] id Flow group ID
 * \param [in] flags Flags
 * \param [in] hw_learn_en Flow learning is enabled in HW
 * \param [in] num_actions Number of actions
 * \param [in] action_list Action list
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_group_actions_validate(
    int unit,
    bcm_flowtracker_group_t id,
    uint32 flags,
    uint8_t hw_learn_en,
    int num_actions,
    bcm_flowtracker_group_action_info_t *action_list);

/*!
 * \brief Reserve necessary flex counters
 *
 * \param [in] unit Unit Number.
 * \param [in] max_flows Max flows enabled for learning by flowtracker
 * \param [in] hw_learn_en Flow learning is enabled in HW
 * \param [out] flex_ctr_stat_id Output flex ctr stat ID
 * \param [out] flex_ctr_lt_id Output flex ctr LT index
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_flex_ctr_pkt_byte_reserve(
    int unit,
    int max_flows,
    uint8_t hw_learn_en,
    uint32_t *flex_ctr_stat_id,
    uint32_t *flex_ctr_lt_id);

/*!
 * \brief Reserve necessary hit bit related flex counters
 *
 * \param [in] unit Unit Number.
 * \param [in] hitbit_type Hitbit type for which flex counters need to be reserved
 * \param [in] max_flows Max flows enabled for learning by flowtracker
 * \param [in] hw_learn_en Flow learning is enabled in HW
 * \param [out] flex_ctr_stat_id Output flex ctr stat ID
 * \param [out] flex_ctr_lt_id Output flex ctr LT index
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_flex_ctr_hit_bit_reserve(
    int unit,
    int hitbit_type,
    int max_flows,
    uint8_t hw_learn_en,
    uint32_t *flex_ctr_stat_id,
    uint32_t *flex_ctr_lt_id);

/*!
 * \brief Get the maximum number of HW learnt flows
 *
 * \param [in] unit Unit Number.
 * \param [in] uft_mode Current UFT mode.
 * \param [out] max_flows_per_pipe Maximum number of HW learnt flows.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_hw_learn_max_flows_per_pipe_get(
    int unit,
    uint8_t uft_mode,
    uint32_t *max_flows_per_pipe);

/*!
 * \brief Get the names of the Hw learn enable register and field
 *
 * \param [in] unit Unit Number.
 * \param [out] reg_str Register name.
 * \param [out] field_str Field name.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_hw_learn_global_enable_reg_field_name_get(
    int unit,
    char **reg_str,
    char **field_str);

/*!
 * \brief Group flex counter actions and return group action
 *
 * \param [in] unit Unit Number.
 * \param [in] main_ctr_stat_id The main flex counter banks stat ID.
 * \param [in] hitbit_ctr_stat_id The 2x or 4x hitbit counter banks stat ID.
 * \param [out] group_action_stat_id The grouped action stat ID.
 * \param [out] group_action_hw_idx The grouped action HW index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_flex_ctr_action_group(
    int unit,
    uint32_t main_ctr_stat_id,
    uint32_t hitbit_ctr_stat_id,
    uint32_t *group_action_stat_id,
    uint32_t *group_action_hw_idx);

/*!
 * \brief Get the maximum number of SW learnt flows
 *
 * \param [in] unit Unit Number.
 * \param [out] max_flows_per_pipe Maximum number of SW learnt flows.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_sw_learn_max_flows_per_pipe_get(
    int unit,
    uint32_t *max_flows_per_pipe);

/*!
 * \brief Check if the UFT mode is supported for HW learning feature
 *
 * \param [in] unit Unit Number.
 * \param [in] uft_mode Current UFT mode.
 * \param [out] supported Is supported or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_hw_learn_is_supported_uft_mode(
    int unit,
    uint8_t uft_mode,
    bool *supported);

/*!
 * \brief Check if the UFT mode is supported for SW learning feature
 *
 * \param [in] unit Unit Number.
 * \param [in] uft_mode Current UFT mode.
 * \param [out] supported Is supported or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flowtracker_sw_learn_is_supported_uft_mode(
    int unit,
    uint8_t uft_mode,
    bool *supported);

#endif /* BCMINT_LTSW_MBCM_FLOWTRACKER_H */
