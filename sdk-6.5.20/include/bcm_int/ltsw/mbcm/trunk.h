/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_MBCM_TRUNK_H
#define BCMINT_LTSW_MBCM_TRUNK_H

#include <bcm/types.h>
#include <bcm/trunk.h>
#include <bcm_int/ltsw/flexctr.h>

#include <bcm_int/ltsw/trunk_int.h>

#include <sal/sal_types.h>

/*!
 * \brief Convert trunk type Id to L2 destination.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_type Trunk Type.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_priv Trunk private information.
 * \param [out] l2_dest L2 destination.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_type_id_to_l2_dest_f)(
    int unit,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_priv_info_t *t_priv,
    int *l2_dest);

/*!
 * \brief Convert L2 destination to trunk type Id.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_dest L2 destination.
 * \param [out] t_type Trunk Type.
 * \param [out] t_id Type-based Trunk Identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_l2_dest_to_type_id_f)(
    int unit,
    int l2_dest,
    bcmint_trunk_type_t *t_type,
    bcmint_trunk_id_t *t_id);

/*!
 * \brief Judge the gport is channelized access port or not.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [out] is_channelized_access_port TRUE/False: Is or Isn't.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_gport_is_channelized_access_port_f)(
    int unit,
    bcm_gport_t gport,
    bool *is_channelized_access_port);

/*!
 * \brief Get TRUNK module public information.
 *
 * \param [in] unit Unit Number.
 * \param [out] t_pub Trunk public information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_pub_info_get_f)(
    int unit,
    bcmint_trunk_pub_info_t *t_pub);

/*!
 * \brief Compare two psc values and return the result.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_type Trunk Type.
 * \param [in] psc0 First Port Selection Criteria.
 * \param [in] psc1 Second Port Selection Criteria.
 * \param [in] exact Exact match.
 * \param [out] result TRUE/False: Same or Not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_psc_compare_f)(
    int unit,
    bcmint_trunk_type_t t_type,
    int psc0,
    int psc1,
    int exact,
    bool *result);

/*!
 * \brief Initialized the trunk module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_init_f)(int unit);

/*!
 * \brief De-init trunk module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_detach_f)(int unit);

/*!
 * \brief Clear trunk related LT tables.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_clear_f)(int unit);

/*!
 * \brief Create a specific trunk with identifier.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] t_priv Trunk private information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_create_f)(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_priv_info_t *t_priv);

/*!
 * \brief Validate the trunk input parameters before trunk set function is executed.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] trunk_info Trunk Information.
 * \param [in] member_count Trunk Member Count.
 * \param [in] member_array Trunk Member Array.
 * \param [in] op Trunk Member Operation Code.
 * \param [in] member Trunk Member.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_params_validate_f)(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcm_trunk_info_t *trunk_info,
    int member_count,
    bcm_trunk_member_t *member_array,
    int op,
    bcm_trunk_member_t *member);

/*!
 * \brief Get the trunk configuration from HW.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] t_priv Trunk private information.
 * \param [out] trunk_info Trunk Information.
 * \param [in] member_max Max Number of Trunk Members.
 * \param [out] member_array Trunk Member Array.
 * \param [out] member_count Trunk Member Count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_get_f)(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_priv_info_t *t_priv,
    bcm_trunk_info_t *trunk_info,
    int member_max,
    bcm_trunk_member_t *member_array,
    int *member_count);

/*!
 * \brief Update the trunk configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] trunk_info Trunk Information.
 * \param [in] member_count Trunk Member Count.
 * \param [in] member_array Trunk Member Array.
 * \param [in] op Trunk Member Operation Code.
 * \param [in] member Trunk Member.
 * \param [in] t_priv Trunk private information.
 * \param [in] t_update Trunk update information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_update_f)(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcm_trunk_info_t *trunk_info,
    int member_count,
    bcm_trunk_member_t *member_array,
    int op,
    bcm_trunk_member_t *member,
    bcmint_trunk_priv_info_t *t_priv,
    bcmint_trunk_update_info_t *t_update);

/*!
 * \brief Destroy a specific trunk with identifier.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] t_priv Trunk private information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_destroy_f)(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_priv_info_t *t_priv);

/*!
 * \brief Find a specific trunk with member gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [out] t_id Type-based Trunk Identifier.
 * \param [out] t_type Trunk Type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_find_f)(
    int unit,
    bcm_gport_t gport,
    bcmint_trunk_id_t *t_id,
    bcmint_trunk_type_t *t_type);

/*!
 * \brief Find a specific virtual trunk with member gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [out] vp_lag_vp The VPLAG vp Id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_find_virtual_f)(
    int unit,
    bcm_gport_t gport,
    int *vp_lag_vp);

/*!
 * \brief To notify the trunk is updated.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_notify_f)(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type);

/*!
 * \brief Extract trunk failover flags from trunk configuration flags.
 *
 * \param [in] unit Unit Number.
 * \param [in] flags Trunk Configuration Flags.
 * \param [in] t_type Trunk Type.
 * \param [in] fail_flags Trunk Failover Flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_failover_flags_extract_f)(
    int unit,
    uint32_t flags,
    bcmint_trunk_type_t t_type,
    uint32_t *fail_flags);

/*!
 * \brief Validate the trunk failover psc configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_type Trunk Type.
 * \param [in] psc Port Selection Criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_failover_psc_validate_f)(
    int unit,
    bcmint_trunk_type_t t_type,
    int psc);

/*!
 * \brief Set trunk failover members to a specific port member.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] fail_port Local Failover Port Gport Number.
 * \param [in] psc Port Selection Criteria.
 * \param [in] ftp_count Failto Port Count.
 * \param [in] ftp Failto Port Array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_failover_set_f)(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcm_gport_t fail_port,
    int psc,
    int ftp_count,
    bcm_gport_t *ftp);

/*!
 * \brief Get trunk failover members of a specific port member.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] fail_port Local Failover Port Gport Number.
 * \param [out] psc Port Selection Criteria.
 * \param [in] ftp_max Failto Port Max Count.
 * \param [out] ftp Failto Port Array.
 * \param [out] ftp_count Failto Port Count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_failover_get_f)(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcm_gport_t fail_port,
    int *psc,
    int ftp_max,
    bcm_gport_t *ftp,
    int *ftp_count);

/*!
 * \brief Update trunk failover configuration for a specific trunk.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] psc Port Selection Criteria.
 * \param [in] fail_flags Failover Configuration Flags.
 * \param [in] fail_port Local Failover Port Gport Number.
 * \param [in] ftp_max Failto Port Max Number.
 * \param [in] member_count Trunk Member Count.
 * \param [in] member_array Trunk Member Array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_failover_update_f)(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    int psc,
    uint32_t fail_flags,
    bcm_gport_t fail_port,
    int ftp_max,
    int member_count,
    bcm_trunk_member_t *member_array);

/*!
 * \brief Enable/disable fabric trunk resolution.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] o_type Fabric trunk override Type.
 * \param [in] o_index Fabric trunk override Type based index.
 * \param [in] enable Enable/Disable fabric trunk resolution.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_override_set_f)(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_override_type_t o_type,
    int o_index,
    int enable);

/*!
 * \brief Get fabric trunk resolution enable/disable status.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] o_type Fabric trunk override Type.
 * \param [in] o_index Fabric trunk override Type based index.
 * \param [out] enable Enable/Disable fabric trunk resolution.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_override_get_f)(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_override_type_t o_type,
    int o_index,
    int *enable);

/*!
 * \brief Set trunk member port status.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] status Trunk member link status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_member_status_set_f)(
    int unit,
    bcm_port_t port,
    int status);

/*!
 * \brief Get trunk member port status.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] status Trunk member link status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_member_status_get_f)(
    int unit,
    bcm_port_t port,
    int *status);

/*!
 * \brief Expand a port bitmap to include all associated trunk member ports.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_pub Trunk public information.
 * \param [in/out] pbmp Pointer to returned expanded port bitmap.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_bitmap_expand_f)(
    int unit,
    bcmint_trunk_pub_info_t *t_pub,
    bcm_pbmp_t *pbmp);

/*!
 * \brief Add the specified trunk group to an existing MAC multicast entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Trunk Identifier.
 * \param [in] vid VLAN ID.
 * \param [in] mac MAC address.
 *
 * \retval SHR_E_NONE Success.
 * \retval SHR_E_INIT Trunk module has not been initialized.
 * \retval SHR_E_BADID Invalid or unsupported trunk ID.
 * \retval SHR_E_NOT_FOUND Specified trunk ID is not currently defined.
 */
typedef int (*trunk_mcast_join_f)(
    int unit,
    bcm_trunk_t t_id,
    bcm_vlan_t vid,
    bcm_mac_t mac);

/*!
 * \brief Find trunk DLB Identifier.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_type Trunk Type.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_priv Trunk private information.
 * \param [out] dlb_id Trunk dlb identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_find_dlb_id_f)(
    int unit,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_priv_info_t *t_priv,
    int *dlb_id);

/*!
 * \brief Update the VPLAG member.
 *
 * \param [in] unit Unit Number.
 * \param [in] vp_lag_vp The VPLAG vp Id.
 * \param [in] gport The generic port number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_vp_lag_member_update_f)(
    int unit,
    int vp_lag_vp,
    bcm_gport_t gport);

/*!
 * \brief Get the CML bits for a vp_lag port.
 *
 * \param [in] unit Unit Number.
 * \param [in] vp_lag_vp The VPLAG vp Id.
 * \param [out] flags The L2 CML FLAGS.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_vp_lag_vp_learn_get_f)(
    int unit,
    int vp_lag_vp,
    uint32_t *flags);

/*!
 * \brief Set the CML bits for a vp_lag port.
 *
 * \param [in] unit Unit Number.
 * \param [in] vp_lag_vp The VPLAG vp Id.
 * \param [in] flags The L2 CML FLAGS.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_vp_lag_vp_learn_set_f)(
    int unit,
    int vp_lag_vp,
    uint32_t flags);

/*!
 * \brief Set Hash Control for L2, L3 and Multipath
 *
 * \param [in] unit Unit Number.
 * \param [in] arg BCM_HASH_CONTROL_TRUNK_XXX
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_sc_hash_control_set_f)(
    int unit,
    uint32_t arg);

/*!
 * \brief Get Hash Control for L2, L3 and Multipath
 *
 * \param [in] unit Unit Number.
 * \param [out] arg BCM_HASH_CONTROL_TRUNK_XXX
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_sc_hash_control_get_f)(
    int unit,
    uint32_t *arg);

/*!
 * \brief Set flow based hash selection for Trunk unicast
 *
 * \param [in] unit Unit Number.
 * \param [in] arg Enable/Disable
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_sc_lb_control_unicast_set_f)(
    int unit,
    uint32_t arg);

/*!
 * \brief Get flow based hash selection for Trunk unicast
 *
 * \param [in] unit Unit Number.
 * \param [out] arg Enable/Disable
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_sc_lb_control_unicast_get_f)(
    int unit,
    uint32_t *arg);

/*!
 * \brief Set flow based hash selection for Trunk non-unicast
 *
 * \param [in] unit Unit Number.
 * \param [in] arg Enable/Disable
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_sc_lb_control_nonunicast_set_f)(
    int unit,
    uint32_t arg);

/*!
 * \brief Get flow based hash selection for Trunk non-unicast
 *
 * \param [in] unit Unit Number.
 * \param [out] arg Enable/Disable
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_sc_lb_control_nonunicast_get_f)(
    int unit,
    uint32_t *arg);

/*!
 * \brief Attach stat counter ID to a given trunk ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier.
 * \param [in] info Counter information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_flexctr_attach_f)(
    int unit,
    bcm_trunk_t tid,
    bcmi_ltsw_flexctr_counter_info_t *info);

/*!
 * \brief Detach stat counter ID to a given trunk ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_flexctr_detach_f)(
    int unit,
    bcm_trunk_t tid);

/*!
 * \brief Get stat counter ID if associated with given trunk ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier.
 * \param [out] info Counter information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_flexctr_info_get_f)(
    int unit,
    bcm_trunk_t tid,
    bcmi_ltsw_flexctr_counter_info_t *info);

/*!
 * \brief Set object for a given trunk ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier.
 * \param [in] value Object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_flexctr_object_set_f)(
    int unit,
    bcm_trunk_t tid,
    uint16_t value);

/*!
 * \brief Get object for a given trunk ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier.
 * \param [out] value Object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*trunk_flexctr_object_get_f)(
    int unit,
    bcm_trunk_t tid,
    uint16_t *value);

/*!
 * \brief Trunk driver structure.
 */
typedef struct mbcm_ltsw_trunk_drv_s {

    /*! Convert trunk type Id to L2 destination. */
    trunk_type_id_to_l2_dest_f trunk_type_id_to_l2_dest;

    /*! Convert L2 destination to trunk type Id. */
    trunk_l2_dest_to_type_id_f trunk_l2_dest_to_type_id;

    /*! Judge the gport is channelized access port or not. */
    trunk_gport_is_channelized_access_port_f trunk_gport_is_channelized_access_port;

    /*! Get TRUNK module public information. */
    trunk_pub_info_get_f trunk_pub_info_get;

    /*! Compare two psc values and return the result. */
    trunk_psc_compare_f trunk_psc_compare;

    /*! Initialized the trunk module. */
    trunk_init_f trunk_init;

    /*! De-init trunk module. */
    trunk_detach_f trunk_detach;

    /*! Clear trunk related LT tables. */
    trunk_clear_f trunk_clear;

    /*! Create a specific trunk with identifier. */
    trunk_create_f trunk_create;

    /*! Validate the trunk input parameters before trunk set function is executed. */
    trunk_params_validate_f trunk_params_validate;

    /*! Get the trunk configuration from HW. */
    trunk_get_f trunk_get;

    /*! Update the trunk configuration. */
    trunk_update_f trunk_update;

    /*! Destroy a specific trunk with identifier. */
    trunk_destroy_f trunk_destroy;

    /*! Find a specific trunk with member gport. */
    trunk_find_f trunk_find;

    /*! Find a specific virtual trunk with member gport. */
    trunk_find_virtual_f trunk_find_virtual;

    /*! To notify the trunk is updated. */
    trunk_notify_f trunk_notify;

    /*! Extract trunk failover flags from trunk configuration flags. */
    trunk_failover_flags_extract_f trunk_failover_flags_extract;

    /*! Validate the trunk failover psc configuration. */
    trunk_failover_psc_validate_f trunk_failover_psc_validate;

    /*! Set trunk failover members to a specific port member. */
    trunk_failover_set_f trunk_failover_set;

    /*! Get trunk failover members of a specific port member. */
    trunk_failover_get_f trunk_failover_get;

    /*! Update trunk failover configuration for a specific trunk. */
    trunk_failover_update_f trunk_failover_update;

    /*! Enable/disable fabric trunk resolution. */
    trunk_override_set_f trunk_override_set;

    /*! Get fabric trunk resolution enable/disable status. */
    trunk_override_get_f trunk_override_get;

    /*! Set trunk member port status. */
    trunk_member_status_set_f trunk_member_status_set;

    /*! Get trunk member port status. */
    trunk_member_status_get_f trunk_member_status_get;

    /*! Expand a port bitmap to include all associated trunk member ports. */
    trunk_bitmap_expand_f trunk_bitmap_expand;

    /*! Add the specified trunk group to an existing MAC multicast entry. */
    trunk_mcast_join_f trunk_mcast_join;

    /*! Find trunk DLB Identifier. */
    trunk_find_dlb_id_f trunk_find_dlb_id;

    /*! Update the VPLAG member. */
    trunk_vp_lag_member_update_f trunk_vp_lag_member_update;

    /*! Get the CML bits for a vp_lag port. */
    trunk_vp_lag_vp_learn_get_f trunk_vp_lag_vp_learn_get;

    /*! Set the CML bits for a vp_lag port. */
    trunk_vp_lag_vp_learn_set_f trunk_vp_lag_vp_learn_set;

    /*! Set Hash Control for L2, L3 and Multipath */
    trunk_sc_hash_control_set_f trunk_sc_hash_control_set;

    /*! Get Hash Control for L2, L3 and Multipath */
    trunk_sc_hash_control_get_f trunk_sc_hash_control_get;

    /*! Set flow based hash selection for Trunk unicast */
    trunk_sc_lb_control_unicast_set_f trunk_sc_lb_control_unicast_set;

    /*! Get flow based hash selection for Trunk unicast */
    trunk_sc_lb_control_unicast_get_f trunk_sc_lb_control_unicast_get;

    /*! Set flow based hash selection for Trunk non-unicast */
    trunk_sc_lb_control_nonunicast_set_f trunk_sc_lb_control_nonunicast_set;

    /*! Get flow based hash selection for Trunk non-unicast */
    trunk_sc_lb_control_nonunicast_get_f trunk_sc_lb_control_nonunicast_get;

    /*! Attach stat counter ID to a given trunk ID. */
    trunk_flexctr_attach_f trunk_flexctr_attach;

    /*! Detach stat counter ID to a given trunk ID. */
    trunk_flexctr_detach_f trunk_flexctr_detach;

    /*! Get stat counter ID if associated with given trunk ID. */
    trunk_flexctr_info_get_f trunk_flexctr_info_get;

    /*! Set object for a given trunk ID. */
    trunk_flexctr_object_set_f trunk_flexctr_object_set;

    /*! Get object for a given trunk ID. */
    trunk_flexctr_object_get_f trunk_flexctr_object_get;

} mbcm_ltsw_trunk_drv_t;

/*!
 * \brief Set the TRUNK driver of the device.
 *
 * \param [in] unit Unit Number.
 * \param [in] drv Trunk driver to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_drv_set(
    int unit,
    mbcm_ltsw_trunk_drv_t *drv);

/*!
 * \brief Convert trunk type Id to L2 destination.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_type Trunk Type.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_priv Trunk private information.
 * \param [out] l2_dest L2 destination.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_type_id_to_l2_dest(
    int unit,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_priv_info_t *t_priv,
    int *l2_dest);

/*!
 * \brief Convert L2 destination to trunk type Id.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_dest L2 destination.
 * \param [out] t_type Trunk Type.
 * \param [out] t_id Type-based Trunk Identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_l2_dest_to_type_id(
    int unit,
    int l2_dest,
    bcmint_trunk_type_t *t_type,
    bcmint_trunk_id_t *t_id);

/*!
 * \brief Judge the gport is channelized access port or not.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [out] is_channelized_access_port TRUE/False: Is or Isn't.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_gport_is_channelized_access_port(
    int unit,
    bcm_gport_t gport,
    bool *is_channelized_access_port);

/*!
 * \brief Get TRUNK module public information.
 *
 * \param [in] unit Unit Number.
 * \param [out] t_pub Trunk public information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_pub_info_get(
    int unit,
    bcmint_trunk_pub_info_t *t_pub);

/*!
 * \brief Compare two psc values and return the result.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_type Trunk Type.
 * \param [in] psc0 First Port Selection Criteria.
 * \param [in] psc1 Second Port Selection Criteria.
 * \param [in] exact Exact match.
 * \param [out] result TRUE/False: Same or Not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_psc_compare(
    int unit,
    bcmint_trunk_type_t t_type,
    int psc0,
    int psc1,
    int exact,
    bool *result);

/*!
 * \brief Initialized the trunk module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_init(int unit);

/*!
 * \brief De-init trunk module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_detach(int unit);

/*!
 * \brief Clear trunk related LT tables.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_clear(int unit);

/*!
 * \brief Create a specific trunk with identifier.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] t_priv Trunk private information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_create(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_priv_info_t *t_priv);

/*!
 * \brief Validate the trunk input parameters before trunk set function is executed.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] trunk_info Trunk Information.
 * \param [in] member_count Trunk Member Count.
 * \param [in] member_array Trunk Member Array.
 * \param [in] op Trunk Member Operation Code.
 * \param [in] member Trunk Member.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_params_validate(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcm_trunk_info_t *trunk_info,
    int member_count,
    bcm_trunk_member_t *member_array,
    int op,
    bcm_trunk_member_t *member);

/*!
 * \brief Get the trunk configuration from HW.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] t_priv Trunk private information.
 * \param [out] trunk_info Trunk Information.
 * \param [in] member_max Max Number of Trunk Members.
 * \param [out] member_array Trunk Member Array.
 * \param [out] member_count Trunk Member Count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_get(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_priv_info_t *t_priv,
    bcm_trunk_info_t *trunk_info,
    int member_max,
    bcm_trunk_member_t *member_array,
    int *member_count);

/*!
 * \brief Update the trunk configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] trunk_info Trunk Information.
 * \param [in] member_count Trunk Member Count.
 * \param [in] member_array Trunk Member Array.
 * \param [in] op Trunk Member Operation Code.
 * \param [in] member Trunk Member.
 * \param [in] t_priv Trunk private information.
 * \param [in] t_update Trunk update information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_update(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcm_trunk_info_t *trunk_info,
    int member_count,
    bcm_trunk_member_t *member_array,
    int op,
    bcm_trunk_member_t *member,
    bcmint_trunk_priv_info_t *t_priv,
    bcmint_trunk_update_info_t *t_update);

/*!
 * \brief Destroy a specific trunk with identifier.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] t_priv Trunk private information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_destroy(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_priv_info_t *t_priv);

/*!
 * \brief Find a specific trunk with member gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [out] t_id Type-based Trunk Identifier.
 * \param [out] t_type Trunk Type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_find(
    int unit,
    bcm_gport_t gport,
    bcmint_trunk_id_t *t_id,
    bcmint_trunk_type_t *t_type);

/*!
 * \brief Find a specific virtual trunk with member gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [out] vp_lag_vp The VPLAG vp Id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_find_virtual(
    int unit,
    bcm_gport_t gport,
    int *vp_lag_vp);

/*!
 * \brief To notify the trunk is updated.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_notify(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type);

/*!
 * \brief Extract trunk failover flags from trunk configuration flags.
 *
 * \param [in] unit Unit Number.
 * \param [in] flags Trunk Configuration Flags.
 * \param [in] t_type Trunk Type.
 * \param [in] fail_flags Trunk Failover Flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_failover_flags_extract(
    int unit,
    uint32_t flags,
    bcmint_trunk_type_t t_type,
    uint32_t *fail_flags);

/*!
 * \brief Validate the trunk failover psc configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_type Trunk Type.
 * \param [in] psc Port Selection Criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_failover_psc_validate(
    int unit,
    bcmint_trunk_type_t t_type,
    int psc);

/*!
 * \brief Set trunk failover members to a specific port member.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] fail_port Local Failover Port Gport Number.
 * \param [in] psc Port Selection Criteria.
 * \param [in] ftp_count Failto Port Count.
 * \param [in] ftp Failto Port Array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_failover_set(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcm_gport_t fail_port,
    int psc,
    int ftp_count,
    bcm_gport_t *ftp);

/*!
 * \brief Get trunk failover members of a specific port member.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] fail_port Local Failover Port Gport Number.
 * \param [out] psc Port Selection Criteria.
 * \param [in] ftp_max Failto Port Max Count.
 * \param [out] ftp Failto Port Array.
 * \param [out] ftp_count Failto Port Count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_failover_get(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    bcm_gport_t fail_port,
    int *psc,
    int ftp_max,
    bcm_gport_t *ftp,
    int *ftp_count);

/*!
 * \brief Update trunk failover configuration for a specific trunk.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_type Trunk Type.
 * \param [in] psc Port Selection Criteria.
 * \param [in] fail_flags Failover Configuration Flags.
 * \param [in] fail_port Local Failover Port Gport Number.
 * \param [in] ftp_max Failto Port Max Number.
 * \param [in] member_count Trunk Member Count.
 * \param [in] member_array Trunk Member Array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_failover_update(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_type_t t_type,
    int psc,
    uint32_t fail_flags,
    bcm_gport_t fail_port,
    int ftp_max,
    int member_count,
    bcm_trunk_member_t *member_array);

/*!
 * \brief Enable/disable fabric trunk resolution.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] o_type Fabric trunk override Type.
 * \param [in] o_index Fabric trunk override Type based index.
 * \param [in] enable Enable/Disable fabric trunk resolution.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_override_set(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_override_type_t o_type,
    int o_index,
    int enable);

/*!
 * \brief Get fabric trunk resolution enable/disable status.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] o_type Fabric trunk override Type.
 * \param [in] o_index Fabric trunk override Type based index.
 * \param [out] enable Enable/Disable fabric trunk resolution.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_override_get(
    int unit,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_override_type_t o_type,
    int o_index,
    int *enable);

/*!
 * \brief Set trunk member port status.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] status Trunk member link status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_member_status_set(
    int unit,
    bcm_port_t port,
    int status);

/*!
 * \brief Get trunk member port status.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] status Trunk member link status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_member_status_get(
    int unit,
    bcm_port_t port,
    int *status);

/*!
 * \brief Expand a port bitmap to include all associated trunk member ports.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_pub Trunk public information.
 * \param [in/out] pbmp Pointer to returned expanded port bitmap.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_bitmap_expand(
    int unit,
    bcmint_trunk_pub_info_t *t_pub,
    bcm_pbmp_t *pbmp);

/*!
 * \brief Add the specified trunk group to an existing MAC multicast entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_id Trunk Identifier.
 * \param [in] vid VLAN ID.
 * \param [in] mac MAC address.
 *
 * \retval SHR_E_NONE Success.
 * \retval SHR_E_INIT Trunk module has not been initialized.
 * \retval SHR_E_BADID Invalid or unsupported trunk ID.
 * \retval SHR_E_NOT_FOUND Specified trunk ID is not currently defined.
 */
extern int
mbcm_ltsw_trunk_mcast_join(
    int unit,
    bcm_trunk_t t_id,
    bcm_vlan_t vid,
    bcm_mac_t mac);

/*!
 * \brief Find trunk DLB Identifier.
 *
 * \param [in] unit Unit Number.
 * \param [in] t_type Trunk Type.
 * \param [in] t_id Type-based Trunk Identifier.
 * \param [in] t_priv Trunk private information.
 * \param [out] dlb_id Trunk dlb identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_find_dlb_id(
    int unit,
    bcmint_trunk_type_t t_type,
    bcmint_trunk_id_t t_id,
    bcmint_trunk_priv_info_t *t_priv,
    int *dlb_id);

/*!
 * \brief Update the VPLAG member.
 *
 * \param [in] unit Unit Number.
 * \param [in] vp_lag_vp The VPLAG vp Id.
 * \param [in] gport The generic port number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_vp_lag_member_update(
    int unit,
    int vp_lag_vp,
    bcm_gport_t gport);

/*!
 * \brief Get the CML bits for a vp_lag port.
 *
 * \param [in] unit Unit Number.
 * \param [in] vp_lag_vp The VPLAG vp Id.
 * \param [out] flags The L2 CML FLAGS.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_vp_lag_vp_learn_get(
    int unit,
    int vp_lag_vp,
    uint32_t *flags);

/*!
 * \brief Set the CML bits for a vp_lag port.
 *
 * \param [in] unit Unit Number.
 * \param [in] vp_lag_vp The VPLAG vp Id.
 * \param [in] flags The L2 CML FLAGS.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_vp_lag_vp_learn_set(
    int unit,
    int vp_lag_vp,
    uint32_t flags);

/*!
 * \brief Set Hash Control for L2, L3 and Multipath
 *
 * \param [in] unit Unit Number.
 * \param [in] arg BCM_HASH_CONTROL_TRUNK_XXX
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_sc_hash_control_set(
    int unit,
    uint32_t arg);

/*!
 * \brief Get Hash Control for L2, L3 and Multipath
 *
 * \param [in] unit Unit Number.
 * \param [out] arg BCM_HASH_CONTROL_TRUNK_XXX
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_sc_hash_control_get(
    int unit,
    uint32_t *arg);

/*!
 * \brief Set flow based hash selection for Trunk unicast
 *
 * \param [in] unit Unit Number.
 * \param [in] arg Enable/Disable
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_sc_lb_control_unicast_set(
    int unit,
    uint32_t arg);

/*!
 * \brief Get flow based hash selection for Trunk unicast
 *
 * \param [in] unit Unit Number.
 * \param [out] arg Enable/Disable
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_sc_lb_control_unicast_get(
    int unit,
    uint32_t *arg);

/*!
 * \brief Set flow based hash selection for Trunk non-unicast
 *
 * \param [in] unit Unit Number.
 * \param [in] arg Enable/Disable
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_sc_lb_control_nonunicast_set(
    int unit,
    uint32_t arg);

/*!
 * \brief Get flow based hash selection for Trunk non-unicast
 *
 * \param [in] unit Unit Number.
 * \param [out] arg Enable/Disable
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_sc_lb_control_nonunicast_get(
    int unit,
    uint32_t *arg);

/*!
 * \brief Attach stat counter ID to a given trunk ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier.
 * \param [in] info Counter information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_flexctr_attach(
    int unit,
    bcm_trunk_t tid,
    bcmi_ltsw_flexctr_counter_info_t *info);

/*!
 * \brief Detach stat counter ID to a given trunk ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_flexctr_detach(
    int unit,
    bcm_trunk_t tid);

/*!
 * \brief Get stat counter ID if associated with given trunk ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier.
 * \param [out] info Counter information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_flexctr_info_get(
    int unit,
    bcm_trunk_t tid,
    bcmi_ltsw_flexctr_counter_info_t *info);

/*!
 * \brief Set object for a given trunk ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier.
 * \param [in] value Object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_flexctr_object_set(
    int unit,
    bcm_trunk_t tid,
    uint16_t value);

/*!
 * \brief Get object for a given trunk ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier.
 * \param [out] value Object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_trunk_flexctr_object_get(
    int unit,
    bcm_trunk_t tid,
    uint16_t *value);

#endif /* BCMINT_LTSW_MBCM_TRUNK_H */
