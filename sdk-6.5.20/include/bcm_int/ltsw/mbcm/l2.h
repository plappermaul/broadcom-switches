/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_MBCM_L2_H
#define BCMINT_LTSW_MBCM_L2_H

#include <bcm/l2.h>
#include <bcm/types.h>

#include <bcm_int/ltsw/l2_int.h>
#include <bcm_int/ltsw/l2.h>

#include <sal/sal_types.h>

/*!
 * \brief Initialize L2 module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_init_f)(int unit);

/*!
 * \brief Detach L2 module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_detach_f)(int unit);

/*!
 * \brief Add a L2 address entry into device.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2addr L2 address structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_addr_add_f)(
    int unit,
    bcm_l2_addr_t *l2addr);

/*!
 * \brief Get l2 data structure info for given mac and vid from device.
 *
 * \param [in] unit Unit Number.
 * \param [in] mac Mac address.
 * \param [in] vid Vlan id.
 * \param [out] l2addr L2 address structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_addr_get_f)(
    int unit,
    bcm_mac_t mac,
    bcm_vlan_t vid,
    bcm_l2_addr_t *l2addr);

/*!
 * \brief Delete l2 address entry from device.
 *
 * \param [in] unit Unit Number.
 * \param [in] mac Mac address.
 * \param [in] vid Vlan id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_addr_delete_f)(
    int unit,
    bcm_mac_t mac,
    bcm_vlan_t vid);

/*!
 * \brief Replace a l2 address entry with given info.
 *
 * \param [in] unit Unit Number.
 * \param [in] rep_st Replace info structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_addr_replace_f)(
    int unit,
    bcmint_l2_replace_t *rep_st);

/*!
 * \brief Traverse L2 address table and call users callback for matched entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] trav_fn User specified callback function.
 * \param [in] user_data User specified data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_addr_traverse_f)(
    int unit,
    bcm_l2_traverse_cb trav_fn,
    void *user_data);

/*!
 * \brief Purge L2 entries belong to set of (vlan, gport) tuple.
 *
 * \param [in] unit Unit Number.
 * \param [in] tuple_ctrl Tuple control structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_addr_del_by_tuple_f)(
    int unit,
    bcmint_l2_tuple_ctrl_t *tuple_ctrl);

/*!
 * \brief Get size of L2 Station table.
 *
 * \param [in] unit Unit Number.
 * \param [out] tbl_sz L2 Station table size.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_station_size_get_f)(
    int unit,
    uint32_t *tbl_sz);

/*!
 * \brief Get size of L2 overlay Station table.
 *
 * \param [in] unit Unit Number.
 * \param [out] tbl_sz L2 overlay Station table size.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_overlay_station_size_get_f)(
    int unit,
    uint32_t *tbl_sz);

/*!
 * \brief Age L2 entries.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_age_f)(int unit);

/*!
 * \brief Add a L2 station entry to device.
 *
 * \param [in] unit Unit Number.
 * \param [in] station L2 station entry.
 * \param [in] flags Internal L2 station flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_station_add_f)(
    int unit,
    bcm_l2_station_t *station,
    int flags);

/*!
 * \brief Get L2 station entry from device with given key.
 *
 * \param [in] unit Unit Number.
 * \param [in|out] station L2 station entry.
 * \param [in] flags Internal L2 station flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_station_get_f)(
    int unit,
    bcm_l2_station_t *station,
    int flags);

/*!
 * \brief Delete a L2 station entry from device.
 *
 * \param [in] unit Unit Number.
 * \param [in] station L2 station entry.
 * \param [in] flags Internal L2 station flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_station_delete_f)(
    int unit,
    bcm_l2_station_t *station,
    int flags);

/*!
 * \brief Set force vlan for all L2 entries of associated port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port id.
 * \param [in] vlan Force vlan id.
 * \param [in] flags Force vlan flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_force_vlan_set_f)(
    int unit,
    bcm_port_t port,
    bcm_vlan_t vlan,
    uint32_t flags);

/*!
 * \brief Enable/Disable global L2 learning.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable 1 indicates enable, 0 indicates disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_learn_set_f)(
    int unit,
    int enable);

/*!
 * \brief Get global L2 learning setting.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Current global L2 learning setting.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_learn_get_f)(
    int unit,
    int *enable);

/*!
 * \brief Update VLAN info used by station.
 *
 * \param [in] unit Unit Number.
 * \param [in] vid VLAN id.
 * \param [in] flags Flags to indicate update which part of VLAN info.
 * \param [in] vlan_info VLAN info used by station.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_station_vlan_update_f)(
    int unit,
    int vid,
    int flags,
    bcmi_ltsw_l2_station_vlan_t *vlan_info);

/*!
 * \brief Get L2 table size.
 *
 * \param [in] unit Unit Number.
 * \param [out] size L2 table size.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_size_get_f)(
    int unit,
    int *size);

/*!
 * \brief Get L2 entry count.
 *
 * \param [in] unit Unit Number.
 * \param [out] count L2 entry count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_count_get_f)(
    int unit,
    int *count);

/*!
 * \brief Init L2 cache.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_cache_init_f)(int unit);

/*!
 * \brief Add data to a L2 cache entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Physical table index.
 * \param [in] l2caddr Entry data configured by applications.
 * \param [out] index_used Index of entry is written acctually.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_cache_set_f)(
    int unit,
    int index,
    bcm_l2_cache_addr_t *l2caddr,
    int *index_used);

/*!
 * \brief Get data from a L2 cache entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Physical table index.
 * \param [out] l2caddr Entry data which format is defined by applications.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_cache_get_f)(
    int unit,
    int index,
    bcm_l2_cache_addr_t *l2caddr);

/*!
 * \brief Get depth of L2 cache.
 *
 * \param [in] unit Unit Number.
 * \param [out] size Depth of L2 cache.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_cache_size_get_f)(
    int unit,
    int *size);

/*!
 * \brief Delete an entry of L2 cache.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Physical table index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_cache_delete_f)(
    int unit,
    int index);

/*!
 * \brief Delete all entries of L2 cache.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_cache_delete_all_f)(int unit);

/*!
 * \brief Update L2 table view info for a vlan.
 *
 * \param [in] unit Unit Number.
 * \param [in] info L2 table view info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_view_vlan_update_f)(
    int unit,
    bcmi_ltsw_l2_view_vlan_info_t *info);

/*!
 * \brief Update logical table L2_OPAQUE_TAG.
 *
 * \param [in] unit Unit Number.
 * \param [in] opaque_tag_id Index into the L2 opaque tag table.
 * \param [in] tag_size Size of the opaque tag.
 * \param [in] ether_type Ethertype used to identify the opaque tag.
 * \param [in] tag_type Type of the opaque tag.
 * \param [in] valid Make config active or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_opaque_tag_set_f)(
    int unit,
    int opaque_tag_id,
    int tag_size,
    int ether_type,
    int tag_type,
    int valid);

/*!
 * \brief Get value of fields of logical table L2_OPAQUE_TAG.
 *
 * \param [in] unit Unit Number.
 * \param [in] opaque_tag_id Index into the L2 opaque tag table.
 * \param [out] tag_size Size of the opaque tag.
 * \param [out] ether_type Ethertype used to identify the opaque tag.
 * \param [out] tag_type Type of the opaque tag.
 * \param [out] valid Make config active or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_opaque_tag_get_f)(
    int unit,
    int opaque_tag_id,
    int *tag_size,
    int *ether_type,
    int *tag_type,
    int *valid);

/*!
 * \brief Update logical table L2_PAYLOAD_OPAQUE_TAG.
 *
 * \param [in] unit Unit Number.
 * \param [in] opaque_tag_id Index into the L2 opaque tag table.
 * \param [in] tag_size Size of the opaque tag.
 * \param [in] ether_type Ethertype used to identify the opaque tag.
 * \param [in] tag_type Type of the opaque tag.
 * \param [in] valid Make config active or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_payload_opaque_tag_set_f)(
    int unit,
    int opaque_tag_id,
    int tag_size,
    int ether_type,
    int tag_type,
    int valid);

/*!
 * \brief Get value of fields of logical table L2_PAYLOAD_OPAQUE_TAG.
 *
 * \param [in] unit Unit Number.
 * \param [in] opaque_tag_id Index into the L2 opaque tag table.
 * \param [out] tag_size Size of the opaque tag.
 * \param [out] ether_type Ethertype used to identify the opaque tag.
 * \param [out] tag_type Type of the opaque tag.
 * \param [out] valid Make config active or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_payload_opaque_tag_get_f)(
    int unit,
    int opaque_tag_id,
    int *tag_size,
    int *ether_type,
    int *tag_type,
    int *valid);

/*!
 * \brief Restore L2 MAC learn and move.
 *
 * \param [in] unit Unit Number.
 * \param [out] l2_freeze_mode L2 freeze mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_frozen_cml_restore_f)(
    int unit,
    int *l2_freeze_mode);

/*!
 * \brief Freeze L2 MAC learn and move.
 *
 * \param [in] unit Unit Number.
 * \param [out] l2_freeze_mode L2 freeze mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_frozen_cml_save_f)(
    int unit,
    int *l2_freeze_mode);

/*!
 * \brief Recover L2 learn override during Warmboot.
 *
 * \param [in] unit Unit Number.
 * \param [out] l2_freeze_override L2 frozen by L2_LEARN_OVERRIDE.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_frozen_cml_recover_f)(
    int unit,
    int *l2_freeze_override);

/*!
 * \brief Dump L2 module software bookkeepings.
 *
 * \param [in] unit Unit Number.
 */
typedef void (*l2_sw_dump_f)(int unit);

/*!
 * \brief Update L2 table virtual info for a gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Virtual info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_virtual_info_update_f)(
    int unit,
    bcmi_ltsw_l2_virtual_info_t *info);

/*!
 * \brief L2 map database initialization.
 *
 * \param [in] unit Unit Number.
 * \param [in|out] map_db L2 map database.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_map_db_init_f)(
    int unit,
    const bcmint_l2_map_db_t ** map_db);

/*!
 * \brief Detach flex counter resources for L2 hit bit.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flexctr info pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_hitbit_detach_f)(
    int unit,
    bcmint_l2_flexctr_info_t *info);

/*!
 * \brief Init flex counter resources for L2 hit bit.
 *
 * \param [in] unit Unit Number.
 * \param [out] info Flexctr info pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*l2_hitbit_init_f)(
    int unit,
    bcmint_l2_flexctr_info_t *info);

/*!
 * \brief L2 driver structure.
 */
typedef struct mbcm_ltsw_l2_drv_s {

    /*! Initialize L2 module. */
    l2_init_f l2_init;

    /*! Detach L2 module. */
    l2_detach_f l2_detach;

    /*! Add a L2 address entry into device. */
    l2_addr_add_f l2_addr_add;

    /*! Get l2 data structure info for given mac and vid from device. */
    l2_addr_get_f l2_addr_get;

    /*! Delete l2 address entry from device. */
    l2_addr_delete_f l2_addr_delete;

    /*! Replace a l2 address entry with given info. */
    l2_addr_replace_f l2_addr_replace;

    /*! Traverse L2 address table and call users callback for matched entry. */
    l2_addr_traverse_f l2_addr_traverse;

    /*! Purge L2 entries belong to set of (vlan, gport) tuple. */
    l2_addr_del_by_tuple_f l2_addr_del_by_tuple;

    /*! Get size of L2 Station table. */
    l2_station_size_get_f l2_station_size_get;

    /*! Get size of L2 overlay Station table. */
    l2_overlay_station_size_get_f l2_overlay_station_size_get;

    /*! Age L2 entries. */
    l2_age_f l2_age;

    /*! Add a L2 station entry to device. */
    l2_station_add_f l2_station_add;

    /*! Get L2 station entry from device with given key. */
    l2_station_get_f l2_station_get;

    /*! Delete a L2 station entry from device. */
    l2_station_delete_f l2_station_delete;

    /*! Set force vlan for all L2 entries of associated port. */
    l2_force_vlan_set_f l2_force_vlan_set;

    /*! Enable/Disable global L2 learning. */
    l2_learn_set_f l2_learn_set;

    /*! Get global L2 learning setting. */
    l2_learn_get_f l2_learn_get;

    /*! Update VLAN info used by station. */
    l2_station_vlan_update_f l2_station_vlan_update;

    /*! Get L2 table size. */
    l2_size_get_f l2_size_get;

    /*! Get L2 entry count. */
    l2_count_get_f l2_count_get;

    /*! Init L2 cache. */
    l2_cache_init_f l2_cache_init;

    /*! Add data to a L2 cache entry. */
    l2_cache_set_f l2_cache_set;

    /*! Get data from a L2 cache entry. */
    l2_cache_get_f l2_cache_get;

    /*! Get depth of L2 cache. */
    l2_cache_size_get_f l2_cache_size_get;

    /*! Delete an entry of L2 cache. */
    l2_cache_delete_f l2_cache_delete;

    /*! Delete all entries of L2 cache. */
    l2_cache_delete_all_f l2_cache_delete_all;

    /*! Update L2 table view info for a vlan. */
    l2_view_vlan_update_f l2_view_vlan_update;

    /*! Update logical table L2_OPAQUE_TAG. */
    l2_opaque_tag_set_f l2_opaque_tag_set;

    /*! Get value of fields of logical table L2_OPAQUE_TAG. */
    l2_opaque_tag_get_f l2_opaque_tag_get;

    /*! Update logical table L2_PAYLOAD_OPAQUE_TAG. */
    l2_payload_opaque_tag_set_f l2_payload_opaque_tag_set;

    /*! Get value of fields of logical table L2_PAYLOAD_OPAQUE_TAG. */
    l2_payload_opaque_tag_get_f l2_payload_opaque_tag_get;

    /*! Restore L2 MAC learn and move. */
    l2_frozen_cml_restore_f l2_frozen_cml_restore;

    /*! Freeze L2 MAC learn and move. */
    l2_frozen_cml_save_f l2_frozen_cml_save;

    /*! Recover L2 learn override during Warmboot. */
    l2_frozen_cml_recover_f l2_frozen_cml_recover;

    /*! Dump L2 module software bookkeepings. */
    l2_sw_dump_f l2_sw_dump;

    /*! Update L2 table virtual info for a gport. */
    l2_virtual_info_update_f l2_virtual_info_update;

    /*! L2 map database initialization. */
    l2_map_db_init_f l2_map_db_init;

    /*! Detach flex counter resources for L2 hit bit. */
    l2_hitbit_detach_f l2_hitbit_detach;

    /*! Init flex counter resources for L2 hit bit. */
    l2_hitbit_init_f l2_hitbit_init;

} mbcm_ltsw_l2_drv_t;

/*!
 * \brief Set the L2 driver of the device.
 *
 * \param [in] unit Unit Number.
 * \param [in] drv L2 driver to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_drv_set(
    int unit,
    mbcm_ltsw_l2_drv_t *drv);

/*!
 * \brief Initialize L2 module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_init(int unit);

/*!
 * \brief Detach L2 module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_detach(int unit);

/*!
 * \brief Add a L2 address entry into device.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2addr L2 address structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_addr_add(
    int unit,
    bcm_l2_addr_t *l2addr);

/*!
 * \brief Get l2 data structure info for given mac and vid from device.
 *
 * \param [in] unit Unit Number.
 * \param [in] mac Mac address.
 * \param [in] vid Vlan id.
 * \param [out] l2addr L2 address structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_addr_get(
    int unit,
    bcm_mac_t mac,
    bcm_vlan_t vid,
    bcm_l2_addr_t *l2addr);

/*!
 * \brief Delete l2 address entry from device.
 *
 * \param [in] unit Unit Number.
 * \param [in] mac Mac address.
 * \param [in] vid Vlan id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_addr_delete(
    int unit,
    bcm_mac_t mac,
    bcm_vlan_t vid);

/*!
 * \brief Replace a l2 address entry with given info.
 *
 * \param [in] unit Unit Number.
 * \param [in] rep_st Replace info structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_addr_replace(
    int unit,
    bcmint_l2_replace_t *rep_st);

/*!
 * \brief Traverse L2 address table and call users callback for matched entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] trav_fn User specified callback function.
 * \param [in] user_data User specified data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_addr_traverse(
    int unit,
    bcm_l2_traverse_cb trav_fn,
    void *user_data);

/*!
 * \brief Purge L2 entries belong to set of (vlan, gport) tuple.
 *
 * \param [in] unit Unit Number.
 * \param [in] tuple_ctrl Tuple control structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_addr_del_by_tuple(
    int unit,
    bcmint_l2_tuple_ctrl_t *tuple_ctrl);

/*!
 * \brief Get size of L2 Station table.
 *
 * \param [in] unit Unit Number.
 * \param [out] tbl_sz L2 Station table size.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_station_size_get(
    int unit,
    uint32_t *tbl_sz);

/*!
 * \brief Get size of L2 overlay Station table.
 *
 * \param [in] unit Unit Number.
 * \param [out] tbl_sz L2 overlay Station table size.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_overlay_station_size_get(
    int unit,
    uint32_t *tbl_sz);

/*!
 * \brief Age L2 entries.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_age(int unit);

/*!
 * \brief Add a L2 station entry to device.
 *
 * \param [in] unit Unit Number.
 * \param [in] station L2 station entry.
 * \param [in] flags Internal L2 station flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_station_add(
    int unit,
    bcm_l2_station_t *station,
    int flags);

/*!
 * \brief Get L2 station entry from device with given key.
 *
 * \param [in] unit Unit Number.
 * \param [in|out] station L2 station entry.
 * \param [in] flags Internal L2 station flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_station_get(
    int unit,
    bcm_l2_station_t *station,
    int flags);

/*!
 * \brief Delete a L2 station entry from device.
 *
 * \param [in] unit Unit Number.
 * \param [in] station L2 station entry.
 * \param [in] flags Internal L2 station flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_station_delete(
    int unit,
    bcm_l2_station_t *station,
    int flags);

/*!
 * \brief Set force vlan for all L2 entries of associated port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port id.
 * \param [in] vlan Force vlan id.
 * \param [in] flags Force vlan flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_force_vlan_set(
    int unit,
    bcm_port_t port,
    bcm_vlan_t vlan,
    uint32_t flags);

/*!
 * \brief Enable/Disable global L2 learning.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable 1 indicates enable, 0 indicates disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_learn_set(
    int unit,
    int enable);

/*!
 * \brief Get global L2 learning setting.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Current global L2 learning setting.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_learn_get(
    int unit,
    int *enable);

/*!
 * \brief Update VLAN info used by station.
 *
 * \param [in] unit Unit Number.
 * \param [in] vid VLAN id.
 * \param [in] flags Flags to indicate update which part of VLAN info.
 * \param [in] vlan_info VLAN info used by station.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_station_vlan_update(
    int unit,
    int vid,
    int flags,
    bcmi_ltsw_l2_station_vlan_t *vlan_info);

/*!
 * \brief Get L2 table size.
 *
 * \param [in] unit Unit Number.
 * \param [out] size L2 table size.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_size_get(
    int unit,
    int *size);

/*!
 * \brief Get L2 entry count.
 *
 * \param [in] unit Unit Number.
 * \param [out] count L2 entry count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_count_get(
    int unit,
    int *count);

/*!
 * \brief Init L2 cache.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_cache_init(int unit);

/*!
 * \brief Add data to a L2 cache entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Physical table index.
 * \param [in] l2caddr Entry data configured by applications.
 * \param [out] index_used Index of entry is written acctually.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_cache_set(
    int unit,
    int index,
    bcm_l2_cache_addr_t *l2caddr,
    int *index_used);

/*!
 * \brief Get data from a L2 cache entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Physical table index.
 * \param [out] l2caddr Entry data which format is defined by applications.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_cache_get(
    int unit,
    int index,
    bcm_l2_cache_addr_t *l2caddr);

/*!
 * \brief Get depth of L2 cache.
 *
 * \param [in] unit Unit Number.
 * \param [out] size Depth of L2 cache.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_cache_size_get(
    int unit,
    int *size);

/*!
 * \brief Delete an entry of L2 cache.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Physical table index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_cache_delete(
    int unit,
    int index);

/*!
 * \brief Delete all entries of L2 cache.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_cache_delete_all(int unit);

/*!
 * \brief Update L2 table view info for a vlan.
 *
 * \param [in] unit Unit Number.
 * \param [in] info L2 table view info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_view_vlan_update(
    int unit,
    bcmi_ltsw_l2_view_vlan_info_t *info);

/*!
 * \brief Update logical table L2_OPAQUE_TAG.
 *
 * \param [in] unit Unit Number.
 * \param [in] opaque_tag_id Index into the L2 opaque tag table.
 * \param [in] tag_size Size of the opaque tag.
 * \param [in] ether_type Ethertype used to identify the opaque tag.
 * \param [in] tag_type Type of the opaque tag.
 * \param [in] valid Make config active or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_opaque_tag_set(
    int unit,
    int opaque_tag_id,
    int tag_size,
    int ether_type,
    int tag_type,
    int valid);

/*!
 * \brief Get value of fields of logical table L2_OPAQUE_TAG.
 *
 * \param [in] unit Unit Number.
 * \param [in] opaque_tag_id Index into the L2 opaque tag table.
 * \param [out] tag_size Size of the opaque tag.
 * \param [out] ether_type Ethertype used to identify the opaque tag.
 * \param [out] tag_type Type of the opaque tag.
 * \param [out] valid Make config active or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_opaque_tag_get(
    int unit,
    int opaque_tag_id,
    int *tag_size,
    int *ether_type,
    int *tag_type,
    int *valid);

/*!
 * \brief Update logical table L2_PAYLOAD_OPAQUE_TAG.
 *
 * \param [in] unit Unit Number.
 * \param [in] opaque_tag_id Index into the L2 opaque tag table.
 * \param [in] tag_size Size of the opaque tag.
 * \param [in] ether_type Ethertype used to identify the opaque tag.
 * \param [in] tag_type Type of the opaque tag.
 * \param [in] valid Make config active or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_payload_opaque_tag_set(
    int unit,
    int opaque_tag_id,
    int tag_size,
    int ether_type,
    int tag_type,
    int valid);

/*!
 * \brief Get value of fields of logical table L2_PAYLOAD_OPAQUE_TAG.
 *
 * \param [in] unit Unit Number.
 * \param [in] opaque_tag_id Index into the L2 opaque tag table.
 * \param [out] tag_size Size of the opaque tag.
 * \param [out] ether_type Ethertype used to identify the opaque tag.
 * \param [out] tag_type Type of the opaque tag.
 * \param [out] valid Make config active or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_payload_opaque_tag_get(
    int unit,
    int opaque_tag_id,
    int *tag_size,
    int *ether_type,
    int *tag_type,
    int *valid);

/*!
 * \brief Restore L2 MAC learn and move.
 *
 * \param [in] unit Unit Number.
 * \param [out] l2_freeze_mode L2 freeze mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_frozen_cml_restore(
    int unit,
    int *l2_freeze_mode);

/*!
 * \brief Freeze L2 MAC learn and move.
 *
 * \param [in] unit Unit Number.
 * \param [out] l2_freeze_mode L2 freeze mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_frozen_cml_save(
    int unit,
    int *l2_freeze_mode);

/*!
 * \brief Recover L2 learn override during Warmboot.
 *
 * \param [in] unit Unit Number.
 * \param [out] l2_freeze_override L2 frozen by L2_LEARN_OVERRIDE.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_frozen_cml_recover(
    int unit,
    int *l2_freeze_override);

/*!
 * \brief Dump L2 module software bookkeepings.
 *
 * \param [in] unit Unit Number.
 */
extern void
mbcm_ltsw_l2_sw_dump(int unit);

/*!
 * \brief Update L2 table virtual info for a gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Virtual info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_virtual_info_update(
    int unit,
    bcmi_ltsw_l2_virtual_info_t *info);

/*!
 * \brief L2 map database initialization.
 *
 * \param [in] unit Unit Number.
 * \param [in|out] map_db L2 map database.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_map_db_init(
    int unit,
    const bcmint_l2_map_db_t ** map_db);

/*!
 * \brief Detach flex counter resources for L2 hit bit.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Flexctr info pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_hitbit_detach(
    int unit,
    bcmint_l2_flexctr_info_t *info);

/*!
 * \brief Init flex counter resources for L2 hit bit.
 *
 * \param [in] unit Unit Number.
 * \param [out] info Flexctr info pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_l2_hitbit_init(
    int unit,
    bcmint_l2_flexctr_info_t *info);

#endif /* BCMINT_LTSW_MBCM_L2_H */
