/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_MBCM_COSQ_H
#define BCMINT_LTSW_MBCM_COSQ_H

#include <bcm/types.h>
#include <bcm/cosq.h>

#include <bcm_int/ltsw/cosq_int.h>
#include <bcm_int/ltsw/cosq.h>

#include <sal/sal_types.h>

/*!
 * \brief Initialize cosq module information
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_init_f)(int unit);

/*!
 * \brief Destroy cosq module information
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_detach_f)(int unit);

/*!
 * \brief Cosq map database initialization.
 *
 * \param [in] unit Unit Number.
 * \param [in|out] map_db Cosq map database.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_map_db_init_f)(
    int unit,
    const bcmint_cosq_map_db_t ** map_db);

/*!
 * \brief retrieve TM_Q_ASSIGNMENT_INFO.
 *
 * \param [in] unit Unit Number.
 * \param [in] info_id Queue assignment info id.
 * \param [out] info Queue assignment info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_queue_assignment_info_get_f)(
    int unit,
    const char *info_id,
    bcmint_cosq_assignment_info_t *info);

/*!
 * \brief Get port number and queue or scheduler identifier for the specified GPORT.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport GPORT identifier.
 * \param [out] port port number.
 * \param [out] id  Queue or scheduler identifier
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_gport_port_resolve_f)(
    int unit,
    bcm_gport_t gport,
    bcm_gport_t *port,
    int *id);

/*!
 * \brief Validate input parameters of ingress threshold.
 *
 * \param [in] unit Unit Number.
 * \param [in] port port ID.
 * \param [out] itm itm
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_port_itm_validate_f)(
    int unit,
    int port,
    int *itm);

/*!
 * \brief Displays COS Queue information maintained by software.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_sw_dump_f)(int unit);

/*!
 * \brief COS queue bandwidth control bucket setting.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport GPORT identifier.
 * \param [in] cosq COS queue number.
 * \param [in] min_quantum kbps or packet/second.
 * \param [in] max_quantum kbps or packet/second.
 * \param [in] burst_size_auto Enables automatic calculation of burst size.
 * \param [in] kbits_burst_min Configured size of minimum burst traffic.
 * \param [in] kbits_burst_max Configured size of maximum burst traffic.
 * \param [in] flags flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_bucket_set_f)(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    uint32_t min_quantum,
    uint32_t max_quantum,
    bool burst_size_auto,
    uint32_t kbits_burst_min,
    uint32_t kbits_burst_max,
    uint32_t flags);

/*!
 * \brief Get COS queue bandwidth control bucket setting.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport GPORT identifier.
 * \param [in] cosq COS queue number.
 * \param [out] min_quantum kbps or packet/second.
 * \param [out] max_quantum kbps or packet/second.
 * \param [in] burst_size_auto Enables automatic calculation of burst size.
 * \param [out] kbits_burst_min Configured size of minimum burst traffic.
 * \param [out] kbits_burst_max Configured size of maximum burst traffic.
 * \param [out] flags flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_bucket_get_f)(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    uint32_t *min_quantum,
    uint32_t *max_quantum,
    bool burst_size_auto,
    uint32_t *kbits_burst_min,
    uint32_t *kbits_burst_max,
    uint32_t *flags);

/*!
 * \brief Clear cosq configuration of port
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_port_detach_f)(
    int unit,
    bcm_port_t port);

/*!
 * \brief Initialize Cosq for newly added port
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_port_attach_f)(
    int unit,
    bcm_port_t port);

/*!
 * \brief Enable to use multicast COS from mirroring.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable Enable
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_mc_cos_mirror_set_f)(
    int unit,
    int enable);

/*!
 * \brief Enable to use multicast COS from mirroring.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Enable status
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_mc_cos_mirror_get_f)(
    int unit,
    int *enable);

/*!
 * \brief Get the number of child nodes and child node gport array for scheduler gport
 *
 * \param [in] unit Unit Number.
 * \param [in] sched_gport GPORT identifier.
 * \param [out] num_uc_child number of uc child
 * \param [out] uc_queue uc queue array
 * \param [out] num_mc_child number of mc child
 * \param [out] mc_queue mc queue array
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_sched_node_child_get_f)(
    int unit,
    bcm_gport_t sched_gport,
    int *num_uc_child,
    int *uc_queue,
    int *num_mc_child,
    int *mc_queue);

/*!
 * \brief Get a cosq gport structure
 *
 * \param [in] unit Unit Number.
 * \param [in] gport GPORT identifier.
 * \param [out] port port number.
 * \param [out] numq number of COS queues
 * \param [out] flags flags (BCM_COSQ_GPORT_XXX)
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_gport_get_f)(
    int unit,
    bcm_gport_t gport,
    bcm_gport_t *port,
    int *numq,
    uint32_t *flags);

/*!
 * \brief Get the child node GPORT atatched to N-th index (cosq)
 *
 * \param [in] unit Unit Number.
 * \param [in] in_gport Scheduler GPORT ID.
 * \param [in] cosq COS queue attached to
 * \param [out] out_gport child GPORT ID
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_gport_child_get_f)(
    int unit,
    bcm_gport_t in_gport,
    bcm_cos_queue_t cosq,
    bcm_gport_t *out_gport);

/*!
 * \brief Attach sched_port to the specified index (cosq) of input_port.
 *
 * \param [in] unit Unit Number.
 * \param [in] input_gport GPORT id, that will attach to parent gport.
 * \param [in] parent_gport Parent Gport to which current gport will be attached
 * \param [in] cosq COS queue attached to
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_gport_attach_f)(
    int unit,
    bcm_gport_t input_gport,
    bcm_gport_t parent_gport,
    bcm_cos_queue_t cosq);

/*!
 * \brief Attach sched_port to the specified index (cosq) of input_port.
 *
 * \param [in] unit Unit Number.
 * \param [in] input_gport GPORT id, that will attach to parent gport.
 * \param [in] parent_gport Parent Gport to which current gport will be detached
 * \param [in] cosq COS queue detached from
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_gport_detach_f)(
    int unit,
    bcm_gport_t input_gport,
    bcm_gport_t parent_gport,
    bcm_cos_queue_t cosq);

/*!
 * \brief Get attached status of a scheduler port.
 *
 * \param [in] unit Unit Number.
 * \param [in] sched_gport scheduler GPORT identifier.
 * \param [out] input_gport GPORT to attach to
 * \param [out] cosq COS queue attached to
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_gport_attach_get_f)(
    int unit,
    bcm_gport_t sched_gport,
    bcm_gport_t *input_gport,
    bcm_cos_queue_t *cosq);

/*!
 * \brief Walks through the valid COSQ GPORTs and calls the user supplied callback function for each entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb Callback function.
 * \param [out] user_data User data to be passed to callback function
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_gport_traverse_f)(
    int unit,
    bcm_cosq_gport_traverse_cb cb,
    void *user_data);

/*!
 * \brief Retrieve maximum weights for given COS policy.
 *
 * \param [in] unit Unit Number.
 * \param [in] mode Scheduling mode, one of BCM_COSQ_xxx.
 * \param [out] weight_max Maximum weight for COS queue
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_sched_weight_max_get_f)(
    int unit,
    int mode,
    int *weight_max);

/*!
 * \brief Cosq schedq mapping set
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_index Profile index.
 * \param [in] size Array size.
 * \param [in] cosq_mapping_arr Cosq to queue mapping for scheduler.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_schedq_mapping_set_f)(
    int unit,
    int profile_index,
    int size,
    bcm_cosq_mapping_t *cosq_mapping_arr);

/*!
 * \brief cosq schedq mapping get
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_index Profile index.
 * \param [in] array_max Max size.
 * \param [out] cosq_mapping_arr Cosq to queue mapping for scheduler.
 * \param [out] size Array size.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_schedq_mapping_get_f)(
    int unit,
    int profile_index,
    int array_max,
    bcm_cosq_mapping_t *cosq_mapping_arr,
    int *size);

/*!
 * \brief Set Port to Profile Mapping for Cosq profiles
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_port_scheduler_profile_set_f)(
    int unit,
    bcm_port_t port,
    int profile_id);

/*!
 * \brief Get Port to Profile Mapping for Cosq profiles
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_port_scheduler_profile_get_f)(
    int unit,
    bcm_port_t port,
    int *profile_id);

/*!
 * \brief Set port node scheduling mode and weight
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Port number or GPORT identifier.
 * \param [in] cosq Node id.
 * \param [in] mode sched mode.
 * \param [in] weight weight.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_sched_set_f)(
    int unit,
    bcm_port_t gport,
    bcm_cos_queue_t cosq,
    int mode,
    int weight);

/*!
 * \brief Get port node scheduling mode and weight
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Port number or GPORT identifier.
 * \param [in] cosq COS queue number.
 * \param [out] mode sched mode.
 * \param [out] weight weight.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_sched_get_f)(
    int unit,
    bcm_port_t gport,
    bcm_cos_queue_t cosq,
    int *mode,
    int *weight);

/*!
 * \brief Retrieve maximum number for given profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_type Profile type.
 * \param [out] max_num Maximum number for profile
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_cosq_profile_max_num_get_f)(
    int unit,
    bcm_cosq_profile_type_t profile_type,
    int *max_num);

/*!
 * \brief Set up class-of-service policy and corresponding weights and mode
 *
 * \param [in] unit Unit Number.
 * \param [in] pbm port bitmap.
 * \param [in] mode Scheduling mode.
 * \param [in] weight_arr_size Size of the weights array.
 * \param [in] weights Weights for each COS queue.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_port_sched_config_set_f)(
    int unit,
    bcm_pbmp_t pbm,
    int mode,
    int weight_arr_size,
    int *weights);

/*!
 * \brief Retrieve class-of-service policy and corresponding weights and mode
 *
 * \param [in] unit Unit Number.
 * \param [in] pbm port bitmap.
 * \param [in] weight_arr_size Size of the weights array.
 * \param [out] weights Weights for each COS queue.
 * \param [out] weight_arr_count Actual size of weights array.
 * \param [out] mode Scheduling mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_port_sched_config_get_f)(
    int unit,
    bcm_pbmp_t pbm,
    int weight_arr_size,
    int *weights,
    int *weight_arr_count,
    int *mode);

/*!
 * \brief Set the COS queue WRED parameters
 *
 * \param [in] unit Unit Number.
 * \param [in] flags BCM_COSQ_DISCARD_*
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_discard_set_f)(
    int unit,
    uint32_t flags);

/*!
 * \brief Get the COS queue WRED parameters
 *
 * \param [in] unit Unit Number.
 * \param [out] flags BCM_COSQ_DISCARD_*
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_discard_get_f)(
    int unit,
    uint32_t *flags);

/*!
 * \brief Set the COS queue WRED parameters
 *
 * \param [in] unit Unit Number.
 * \param [in] gport GPORT ID.
 * \param [in] cosq cosq.
 * \param [in] discard Discard settings.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_gport_discard_set_f)(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    bcm_cosq_gport_discard_t *discard);

/*!
 * \brief Get the COS queue WRED parameters
 *
 * \param [in] unit Unit Number.
 * \param [in] gport GPORT ID.
 * \param [in] cosq cosq.
 * \param [out] discard Discard settings.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_gport_discard_get_f)(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    bcm_cosq_gport_discard_t *discard);

/*!
 * \brief Create an empty rule profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_discard_profile_create_f)(
    int unit,
    int *profile_id);

/*!
 * \brief Destroy a rule profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_discard_profile_destroy_f)(
    int unit,
    int profile_id);

/*!
 * \brief Update one rule in a profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile index.
 * \param [in] rule discard rule
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_discard_profile_update_f)(
    int unit,
    int profile_id,
    bcm_cosq_discard_rule_t *rule);

/*!
 * \brief Get all rules of a profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile index.
 * \param [in] max rule array size.
 * \param [out] rule_array rule array.
 * \param [out] rule_count actual rules count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_discard_profile_get_f)(
    int unit,
    int profile_id,
    int max,
    bcm_cosq_discard_rule_t *rule_array,
    int *rule_count);

/*!
 * \brief Set COS queue for the specified priority of an ingress port
 *
 * \param [in] unit Unit Number.
 * \param [in] local_port local port
 * \param [in] priority priority value to map
 * \param [in] flags BCM_COSQ_GPORT_XXX_QUEUE_GROUP
 * \param [in] gport queue group GPORT identifier
 * \param [in] cosq COS queue number
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_cos_mapping_set_f)(
    int unit,
    bcm_port_t local_port,
    bcm_cos_t priority,
    uint32_t flags,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq);

/*!
 * \brief Get COS queue for the specified priority of an ingress port.
 *
 * \param [in] unit Unit Number.
 * \param [in] local_port local port
 * \param [in] priority priority value to map
 * \param [in] flags BCM_COSQ_GPORT_XXX_QUEUE_GROUP
 * \param [out] gport queue group GPORT identifier
 * \param [out] cosq COS queue number
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_cos_mapping_get_f)(
    int unit,
    bcm_port_t local_port,
    bcm_cos_t priority,
    uint32_t flags,
    bcm_gport_t *gport,
    bcm_cos_queue_t *cosq);

/*!
 * \brief Get shaper configure from LT TM_SHAPER_CONFIG
 *
 * \param [in] unit Unit Number.
 * \param [out] refresh_time Refresh time.
 * \param [out] itu_mode itu mode enable.
 * \param [out] shaper Shaper enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_shaper_config_get_f)(
    int unit,
    int *refresh_time,
    int *itu_mode,
    int *shaper);

/*!
 * \brief  Create a cosq classifier.
 *
 * \param [in] unit Unit Number.
 * \param [out] classifier_id Classifier ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_field_classifier_id_create_f)(
    int unit,
    int *classifier_id);

/*!
 * \brief Free resource associated with this field classifier id.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_field_classifier_id_destroy_f)(
    int unit,
    int classifier_id);

/*!
 * \brief Set the mapping from port, classifier, and multiple internal priorities to multiple COS queues in a queue group.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 * \param [in] count Number of elements in priority_array and cosq_array.
 * \param [in] priority_array Array of internal priorities.
 * \param [in] cosq_array Array of COS queues.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_field_classifier_map_set_f)(
    int unit,
    int classifier_id,
    int count,
    bcm_cos_t *priority_array,
    bcm_cos_queue_t *cosq_array);

/*!
 * \brief Get internal priority to ingress field processor CoS queue override mapping information.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 * \param [in] array_max Size of priority_array and cosq_array.
 * \param [in] priority_array Array of internal priorities.
 * \param [out] cosq_array Array of COS queues.
 * \param [out] array_count Size of cosq_array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_field_classifier_map_get_f)(
    int unit,
    int classifier_id,
    int array_max,
    bcm_cos_t *priority_array,
    bcm_cos_queue_t *cosq_array,
    int *array_count);

/*!
 * \brief Delete an internal priority to ingress field processor CoS queue override mapping profile set.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_field_classifier_map_clear_f)(
    int unit,
    int classifier_id);

/*!
 * \brief  Create a cosq classifier.
 *
 * \param [in] unit Unit Number.
 * \param [out] classifier_id Classifier ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_field_hi_classifier_id_create_f)(
    int unit,
    int *classifier_id);

/*!
 * \brief Free resource associated with this field classifier id.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_field_hi_classifier_id_destroy_f)(
    int unit,
    int classifier_id);

/*!
 * \brief Set the mapping from port, classifier, and multiple internal priorities to multiple COS queues in a queue group.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 * \param [in] count Number of elements in priority_array and cosq_array.
 * \param [in] priority_array Array of internal priorities.
 * \param [in] cosq_array Array of COS queues.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_field_hi_classifier_map_set_f)(
    int unit,
    int classifier_id,
    int count,
    bcm_cos_t *priority_array,
    bcm_cos_queue_t *cosq_array);

/*!
 * \brief Get internal priority to ingress field processor CoS queue override mapping information.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 * \param [in] array_max Size of priority_array and cosq_array.
 * \param [in] priority_array Array of internal priorities.
 * \param [out] cosq_array Array of COS queues.
 * \param [out] array_count Size of cosq_array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_field_hi_classifier_map_get_f)(
    int unit,
    int classifier_id,
    int array_max,
    bcm_cos_t *priority_array,
    bcm_cos_queue_t *cosq_array,
    int *array_count);

/*!
 * \brief Delete an internal priority to ingress field processor CoS queue override mapping profile set.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_field_hi_classifier_map_clear_f)(
    int unit,
    int classifier_id);

/*!
 * \brief Retrieve number UC&MC queue according to multcast queue mode.
 *
 * \param [in] unit Unit Number.
 * \param [out] num_ucq unicast queue number.
 * \param [out] num_mcq multcast queue number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_num_queue_get_f)(
    int unit,
    int *num_ucq,
    int *num_mcq);

/*!
 * \brief Get port map information
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] info port map information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_port_map_info_get_f)(
    int unit,
    bcm_port_t port,
    bcmi_ltsw_cosq_port_map_info_t *info);

/*!
 * \brief Get device specific TM information
 *
 * \param [in] unit Unit Number.
 * \param [out] info Device specific TM information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_device_info_get_f)(
    int unit,
    bcmi_ltsw_cosq_device_info_t *info);

/*!
 * \brief Set cut-through mode for a specific port
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] enable Enable to use cut-through mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_port_ct_mode_set_f)(
    int unit,
    bcm_port_t port,
    int enable);

/*!
 * \brief Get cut-through mode for a specific port
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] enable Enable to use cut-through mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_port_ct_mode_get_f)(
    int unit,
    bcm_port_t port,
    int *enable);

/*!
 * \brief Dump per-port asf configurations to diag Shell
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] port_speed Port speed in MB/s.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_port_asf_config_dump_f)(
    int unit,
    bcm_port_t port,
    int port_speed);

/*!
 * \brief Print per-port traffic forwarding mode in diag Shell
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] port_speed Port speed in MB/s.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_port_asf_config_show_f)(
    int unit,
    bcm_port_t port,
    int port_speed);

/*!
 * \brief Get the associated rx channel with a given cosq
 *
 * \param [in] unit Unit Number.
 * \param [in] queue_id input queue id
 * \param [in] chan_id channel index
 * \param [out] enable enable state
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_rx_queue_channel_get_f)(
    int unit,
    bcm_cos_queue_t queue_id,
    bcm_rx_chan_t chan_id,
    bool *enable);

/*!
 * \brief Assign a RX channel to a cosq
 *
 * \param [in] unit Unit Number.
 * \param [in] queue_id input queue id
 * \param [in] chan_id channel index
 * \param [in] enable enable state
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_rx_queue_channel_set_f)(
    int unit,
    bcm_cos_queue_t queue_id,
    bcm_rx_chan_t chan_id,
    bool enable);

/*!
 * \brief Tests whether the corresponding COS_BMP bit is set or not
 *
 * \param [in] unit Unit Number.
 * \param [in] queue_id input queue id
 * \param [in] chan_id channel index
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_rx_queue_channel_set_test_f)(
    int unit,
    bcm_cos_queue_t queue_id,
    bcm_rx_chan_t chan_id);

/*!
 * \brief Walks through the valid COSQ GPORTs belong to a port and calls the user supplied callback function for each entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] port GPORT identifier.
 * \param [in] cb Callback function.
 * \param [out] user_data User data to be passed to callback function
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_gport_traverse_by_port_f)(
    int unit,
    bcm_gport_t port,
    bcm_cosq_gport_traverse_cb cb,
    void *user_data);

/*!
 * \brief Cosq driver structure.
 */
typedef struct mbcm_ltsw_cosq_drv_s {

    /*! Initialize cosq module information */
    cosq_init_f cosq_init;

    /*! Destroy cosq module information */
    cosq_detach_f cosq_detach;

    /*! Cosq map database initialization. */
    cosq_map_db_init_f cosq_map_db_init;

    /*! retrieve TM_Q_ASSIGNMENT_INFO. */
    cosq_queue_assignment_info_get_f cosq_queue_assignment_info_get;

    /*! Get port number and queue or scheduler identifier for the specified GPORT. */
    cosq_gport_port_resolve_f cosq_gport_port_resolve;

    /*! Validate input parameters of ingress threshold. */
    cosq_port_itm_validate_f cosq_port_itm_validate;

    /*! Displays COS Queue information maintained by software. */
    cosq_sw_dump_f cosq_sw_dump;

    /*! COS queue bandwidth control bucket setting. */
    cosq_bucket_set_f cosq_bucket_set;

    /*! Get COS queue bandwidth control bucket setting. */
    cosq_bucket_get_f cosq_bucket_get;

    /*! Clear cosq configuration of port */
    cosq_port_detach_f cosq_port_detach;

    /*! Initialize Cosq for newly added port */
    cosq_port_attach_f cosq_port_attach;

    /*! Enable to use multicast COS from mirroring. */
    cosq_mc_cos_mirror_set_f cosq_mc_cos_mirror_set;

    /*! Enable to use multicast COS from mirroring. */
    cosq_mc_cos_mirror_get_f cosq_mc_cos_mirror_get;

    /*! Get the number of child nodes and child node gport array for scheduler gport */
    cosq_sched_node_child_get_f cosq_sched_node_child_get;

    /*! Get a cosq gport structure */
    cosq_gport_get_f cosq_gport_get;

    /*! Get the child node GPORT atatched to N-th index (cosq) */
    cosq_gport_child_get_f cosq_gport_child_get;

    /*! Attach sched_port to the specified index (cosq) of input_port. */
    cosq_gport_attach_f cosq_gport_attach;

    /*! Attach sched_port to the specified index (cosq) of input_port. */
    cosq_gport_detach_f cosq_gport_detach;

    /*! Get attached status of a scheduler port. */
    cosq_gport_attach_get_f cosq_gport_attach_get;

    /*! Walks through the valid COSQ GPORTs and calls the user supplied callback function for each entry. */
    cosq_gport_traverse_f cosq_gport_traverse;

    /*! Retrieve maximum weights for given COS policy. */
    cosq_sched_weight_max_get_f cosq_sched_weight_max_get;

    /*! Cosq schedq mapping set */
    cosq_schedq_mapping_set_f cosq_schedq_mapping_set;

    /*! cosq schedq mapping get */
    cosq_schedq_mapping_get_f cosq_schedq_mapping_get;

    /*! Set Port to Profile Mapping for Cosq profiles */
    cosq_port_scheduler_profile_set_f cosq_port_scheduler_profile_set;

    /*! Get Port to Profile Mapping for Cosq profiles */
    cosq_port_scheduler_profile_get_f cosq_port_scheduler_profile_get;

    /*! Set port node scheduling mode and weight */
    cosq_sched_set_f cosq_sched_set;

    /*! Get port node scheduling mode and weight */
    cosq_sched_get_f cosq_sched_get;

    /*! Retrieve maximum number for given profile. */
    cosq_cosq_profile_max_num_get_f cosq_cosq_profile_max_num_get;

    /*! Set up class-of-service policy and corresponding weights and mode */
    cosq_port_sched_config_set_f cosq_port_sched_config_set;

    /*! Retrieve class-of-service policy and corresponding weights and mode */
    cosq_port_sched_config_get_f cosq_port_sched_config_get;

    /*! Set the COS queue WRED parameters */
    cosq_discard_set_f cosq_discard_set;

    /*! Get the COS queue WRED parameters */
    cosq_discard_get_f cosq_discard_get;

    /*! Set the COS queue WRED parameters */
    cosq_gport_discard_set_f cosq_gport_discard_set;

    /*! Get the COS queue WRED parameters */
    cosq_gport_discard_get_f cosq_gport_discard_get;

    /*! Create an empty rule profile */
    cosq_discard_profile_create_f cosq_discard_profile_create;

    /*! Destroy a rule profile */
    cosq_discard_profile_destroy_f cosq_discard_profile_destroy;

    /*! Update one rule in a profile */
    cosq_discard_profile_update_f cosq_discard_profile_update;

    /*! Get all rules of a profile */
    cosq_discard_profile_get_f cosq_discard_profile_get;

    /*! Set COS queue for the specified priority of an ingress port */
    cosq_cos_mapping_set_f cosq_cos_mapping_set;

    /*! Get COS queue for the specified priority of an ingress port. */
    cosq_cos_mapping_get_f cosq_cos_mapping_get;

    /*! Get shaper configure from LT TM_SHAPER_CONFIG */
    cosq_shaper_config_get_f cosq_shaper_config_get;

    /*!  Create a cosq classifier. */
    cosq_field_classifier_id_create_f cosq_field_classifier_id_create;

    /*! Free resource associated with this field classifier id. */
    cosq_field_classifier_id_destroy_f cosq_field_classifier_id_destroy;

    /*! Set the mapping from port, classifier, and multiple internal priorities to multiple COS queues in a queue group. */
    cosq_field_classifier_map_set_f cosq_field_classifier_map_set;

    /*! Get internal priority to ingress field processor CoS queue override mapping information. */
    cosq_field_classifier_map_get_f cosq_field_classifier_map_get;

    /*! Delete an internal priority to ingress field processor CoS queue override mapping profile set. */
    cosq_field_classifier_map_clear_f cosq_field_classifier_map_clear;

    /*!  Create a cosq classifier. */
    cosq_field_hi_classifier_id_create_f cosq_field_hi_classifier_id_create;

    /*! Free resource associated with this field classifier id. */
    cosq_field_hi_classifier_id_destroy_f cosq_field_hi_classifier_id_destroy;

    /*! Set the mapping from port, classifier, and multiple internal priorities to multiple COS queues in a queue group. */
    cosq_field_hi_classifier_map_set_f cosq_field_hi_classifier_map_set;

    /*! Get internal priority to ingress field processor CoS queue override mapping information. */
    cosq_field_hi_classifier_map_get_f cosq_field_hi_classifier_map_get;

    /*! Delete an internal priority to ingress field processor CoS queue override mapping profile set. */
    cosq_field_hi_classifier_map_clear_f cosq_field_hi_classifier_map_clear;

    /*! Retrieve number UC&MC queue according to multcast queue mode. */
    cosq_num_queue_get_f cosq_num_queue_get;

    /*! Get port map information */
    cosq_port_map_info_get_f cosq_port_map_info_get;

    /*! Get device specific TM information */
    cosq_device_info_get_f cosq_device_info_get;

    /*! Set cut-through mode for a specific port */
    cosq_port_ct_mode_set_f cosq_port_ct_mode_set;

    /*! Get cut-through mode for a specific port */
    cosq_port_ct_mode_get_f cosq_port_ct_mode_get;

    /*! Dump per-port asf configurations to diag Shell */
    cosq_port_asf_config_dump_f cosq_port_asf_config_dump;

    /*! Print per-port traffic forwarding mode in diag Shell */
    cosq_port_asf_config_show_f cosq_port_asf_config_show;

    /*! Get the associated rx channel with a given cosq */
    cosq_rx_queue_channel_get_f cosq_rx_queue_channel_get;

    /*! Assign a RX channel to a cosq */
    cosq_rx_queue_channel_set_f cosq_rx_queue_channel_set;

    /*! Tests whether the corresponding COS_BMP bit is set or not */
    cosq_rx_queue_channel_set_test_f cosq_rx_queue_channel_set_test;

    /*! Walks through the valid COSQ GPORTs belong to a port and calls the user supplied callback function for each entry. */
    cosq_gport_traverse_by_port_f cosq_gport_traverse_by_port;

} mbcm_ltsw_cosq_drv_t;

/*!
 * \brief Set the COSQ driver of the device.
 *
 * \param [in] unit Unit Number.
 * \param [in] drv Cosq driver to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_drv_set(
    int unit,
    mbcm_ltsw_cosq_drv_t *drv);

/*!
 * \brief Initialize cosq module information
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_init(int unit);

/*!
 * \brief Destroy cosq module information
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_detach(int unit);

/*!
 * \brief Cosq map database initialization.
 *
 * \param [in] unit Unit Number.
 * \param [in|out] map_db Cosq map database.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_map_db_init(
    int unit,
    const bcmint_cosq_map_db_t ** map_db);

/*!
 * \brief retrieve TM_Q_ASSIGNMENT_INFO.
 *
 * \param [in] unit Unit Number.
 * \param [in] info_id Queue assignment info id.
 * \param [out] info Queue assignment info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_queue_assignment_info_get(
    int unit,
    const char *info_id,
    bcmint_cosq_assignment_info_t *info);

/*!
 * \brief Get port number and queue or scheduler identifier for the specified GPORT.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport GPORT identifier.
 * \param [out] port port number.
 * \param [out] id  Queue or scheduler identifier
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_gport_port_resolve(
    int unit,
    bcm_gport_t gport,
    bcm_gport_t *port,
    int *id);

/*!
 * \brief Validate input parameters of ingress threshold.
 *
 * \param [in] unit Unit Number.
 * \param [in] port port ID.
 * \param [out] itm itm
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_port_itm_validate(
    int unit,
    int port,
    int *itm);

/*!
 * \brief Displays COS Queue information maintained by software.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_sw_dump(int unit);

/*!
 * \brief COS queue bandwidth control bucket setting.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport GPORT identifier.
 * \param [in] cosq COS queue number.
 * \param [in] min_quantum kbps or packet/second.
 * \param [in] max_quantum kbps or packet/second.
 * \param [in] burst_size_auto Enables automatic calculation of burst size.
 * \param [in] kbits_burst_min Configured size of minimum burst traffic.
 * \param [in] kbits_burst_max Configured size of maximum burst traffic.
 * \param [in] flags flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_bucket_set(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    uint32_t min_quantum,
    uint32_t max_quantum,
    bool burst_size_auto,
    uint32_t kbits_burst_min,
    uint32_t kbits_burst_max,
    uint32_t flags);

/*!
 * \brief Get COS queue bandwidth control bucket setting.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport GPORT identifier.
 * \param [in] cosq COS queue number.
 * \param [out] min_quantum kbps or packet/second.
 * \param [out] max_quantum kbps or packet/second.
 * \param [in] burst_size_auto Enables automatic calculation of burst size.
 * \param [out] kbits_burst_min Configured size of minimum burst traffic.
 * \param [out] kbits_burst_max Configured size of maximum burst traffic.
 * \param [out] flags flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_bucket_get(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    uint32_t *min_quantum,
    uint32_t *max_quantum,
    bool burst_size_auto,
    uint32_t *kbits_burst_min,
    uint32_t *kbits_burst_max,
    uint32_t *flags);

/*!
 * \brief Clear cosq configuration of port
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_port_detach(
    int unit,
    bcm_port_t port);

/*!
 * \brief Initialize Cosq for newly added port
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_port_attach(
    int unit,
    bcm_port_t port);

/*!
 * \brief Enable to use multicast COS from mirroring.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable Enable
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_mc_cos_mirror_set(
    int unit,
    int enable);

/*!
 * \brief Enable to use multicast COS from mirroring.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Enable status
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_mc_cos_mirror_get(
    int unit,
    int *enable);

/*!
 * \brief Get the number of child nodes and child node gport array for scheduler gport
 *
 * \param [in] unit Unit Number.
 * \param [in] sched_gport GPORT identifier.
 * \param [out] num_uc_child number of uc child
 * \param [out] uc_queue uc queue array
 * \param [out] num_mc_child number of mc child
 * \param [out] mc_queue mc queue array
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_sched_node_child_get(
    int unit,
    bcm_gport_t sched_gport,
    int *num_uc_child,
    int *uc_queue,
    int *num_mc_child,
    int *mc_queue);

/*!
 * \brief Get a cosq gport structure
 *
 * \param [in] unit Unit Number.
 * \param [in] gport GPORT identifier.
 * \param [out] port port number.
 * \param [out] numq number of COS queues
 * \param [out] flags flags (BCM_COSQ_GPORT_XXX)
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_gport_get(
    int unit,
    bcm_gport_t gport,
    bcm_gport_t *port,
    int *numq,
    uint32_t *flags);

/*!
 * \brief Get the child node GPORT atatched to N-th index (cosq)
 *
 * \param [in] unit Unit Number.
 * \param [in] in_gport Scheduler GPORT ID.
 * \param [in] cosq COS queue attached to
 * \param [out] out_gport child GPORT ID
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_gport_child_get(
    int unit,
    bcm_gport_t in_gport,
    bcm_cos_queue_t cosq,
    bcm_gport_t *out_gport);

/*!
 * \brief Attach sched_port to the specified index (cosq) of input_port.
 *
 * \param [in] unit Unit Number.
 * \param [in] input_gport GPORT id, that will attach to parent gport.
 * \param [in] parent_gport Parent Gport to which current gport will be attached
 * \param [in] cosq COS queue attached to
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_gport_attach(
    int unit,
    bcm_gport_t input_gport,
    bcm_gport_t parent_gport,
    bcm_cos_queue_t cosq);

/*!
 * \brief Attach sched_port to the specified index (cosq) of input_port.
 *
 * \param [in] unit Unit Number.
 * \param [in] input_gport GPORT id, that will attach to parent gport.
 * \param [in] parent_gport Parent Gport to which current gport will be detached
 * \param [in] cosq COS queue detached from
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_gport_detach(
    int unit,
    bcm_gport_t input_gport,
    bcm_gport_t parent_gport,
    bcm_cos_queue_t cosq);

/*!
 * \brief Get attached status of a scheduler port.
 *
 * \param [in] unit Unit Number.
 * \param [in] sched_gport scheduler GPORT identifier.
 * \param [out] input_gport GPORT to attach to
 * \param [out] cosq COS queue attached to
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_gport_attach_get(
    int unit,
    bcm_gport_t sched_gport,
    bcm_gport_t *input_gport,
    bcm_cos_queue_t *cosq);

/*!
 * \brief Walks through the valid COSQ GPORTs and calls the user supplied callback function for each entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb Callback function.
 * \param [out] user_data User data to be passed to callback function
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_gport_traverse(
    int unit,
    bcm_cosq_gport_traverse_cb cb,
    void *user_data);

/*!
 * \brief Retrieve maximum weights for given COS policy.
 *
 * \param [in] unit Unit Number.
 * \param [in] mode Scheduling mode, one of BCM_COSQ_xxx.
 * \param [out] weight_max Maximum weight for COS queue
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_sched_weight_max_get(
    int unit,
    int mode,
    int *weight_max);

/*!
 * \brief Cosq schedq mapping set
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_index Profile index.
 * \param [in] size Array size.
 * \param [in] cosq_mapping_arr Cosq to queue mapping for scheduler.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_schedq_mapping_set(
    int unit,
    int profile_index,
    int size,
    bcm_cosq_mapping_t *cosq_mapping_arr);

/*!
 * \brief cosq schedq mapping get
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_index Profile index.
 * \param [in] array_max Max size.
 * \param [out] cosq_mapping_arr Cosq to queue mapping for scheduler.
 * \param [out] size Array size.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_schedq_mapping_get(
    int unit,
    int profile_index,
    int array_max,
    bcm_cosq_mapping_t *cosq_mapping_arr,
    int *size);

/*!
 * \brief Set Port to Profile Mapping for Cosq profiles
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_port_scheduler_profile_set(
    int unit,
    bcm_port_t port,
    int profile_id);

/*!
 * \brief Get Port to Profile Mapping for Cosq profiles
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_port_scheduler_profile_get(
    int unit,
    bcm_port_t port,
    int *profile_id);

/*!
 * \brief Set port node scheduling mode and weight
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Port number or GPORT identifier.
 * \param [in] cosq Node id.
 * \param [in] mode sched mode.
 * \param [in] weight weight.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_sched_set(
    int unit,
    bcm_port_t gport,
    bcm_cos_queue_t cosq,
    int mode,
    int weight);

/*!
 * \brief Get port node scheduling mode and weight
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Port number or GPORT identifier.
 * \param [in] cosq COS queue number.
 * \param [out] mode sched mode.
 * \param [out] weight weight.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_sched_get(
    int unit,
    bcm_port_t gport,
    bcm_cos_queue_t cosq,
    int *mode,
    int *weight);

/*!
 * \brief Retrieve maximum number for given profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_type Profile type.
 * \param [out] max_num Maximum number for profile
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_cosq_profile_max_num_get(
    int unit,
    bcm_cosq_profile_type_t profile_type,
    int *max_num);

/*!
 * \brief Set up class-of-service policy and corresponding weights and mode
 *
 * \param [in] unit Unit Number.
 * \param [in] pbm port bitmap.
 * \param [in] mode Scheduling mode.
 * \param [in] weight_arr_size Size of the weights array.
 * \param [in] weights Weights for each COS queue.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_port_sched_config_set(
    int unit,
    bcm_pbmp_t pbm,
    int mode,
    int weight_arr_size,
    int *weights);

/*!
 * \brief Retrieve class-of-service policy and corresponding weights and mode
 *
 * \param [in] unit Unit Number.
 * \param [in] pbm port bitmap.
 * \param [in] weight_arr_size Size of the weights array.
 * \param [out] weights Weights for each COS queue.
 * \param [out] weight_arr_count Actual size of weights array.
 * \param [out] mode Scheduling mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_port_sched_config_get(
    int unit,
    bcm_pbmp_t pbm,
    int weight_arr_size,
    int *weights,
    int *weight_arr_count,
    int *mode);

/*!
 * \brief Set the COS queue WRED parameters
 *
 * \param [in] unit Unit Number.
 * \param [in] flags BCM_COSQ_DISCARD_*
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_discard_set(
    int unit,
    uint32_t flags);

/*!
 * \brief Get the COS queue WRED parameters
 *
 * \param [in] unit Unit Number.
 * \param [out] flags BCM_COSQ_DISCARD_*
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_discard_get(
    int unit,
    uint32_t *flags);

/*!
 * \brief Set the COS queue WRED parameters
 *
 * \param [in] unit Unit Number.
 * \param [in] gport GPORT ID.
 * \param [in] cosq cosq.
 * \param [in] discard Discard settings.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_gport_discard_set(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    bcm_cosq_gport_discard_t *discard);

/*!
 * \brief Get the COS queue WRED parameters
 *
 * \param [in] unit Unit Number.
 * \param [in] gport GPORT ID.
 * \param [in] cosq cosq.
 * \param [out] discard Discard settings.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_gport_discard_get(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    bcm_cosq_gport_discard_t *discard);

/*!
 * \brief Create an empty rule profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_discard_profile_create(
    int unit,
    int *profile_id);

/*!
 * \brief Destroy a rule profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_discard_profile_destroy(
    int unit,
    int profile_id);

/*!
 * \brief Update one rule in a profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile index.
 * \param [in] rule discard rule
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_discard_profile_update(
    int unit,
    int profile_id,
    bcm_cosq_discard_rule_t *rule);

/*!
 * \brief Get all rules of a profile
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile index.
 * \param [in] max rule array size.
 * \param [out] rule_array rule array.
 * \param [out] rule_count actual rules count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_discard_profile_get(
    int unit,
    int profile_id,
    int max,
    bcm_cosq_discard_rule_t *rule_array,
    int *rule_count);

/*!
 * \brief Set COS queue for the specified priority of an ingress port
 *
 * \param [in] unit Unit Number.
 * \param [in] local_port local port
 * \param [in] priority priority value to map
 * \param [in] flags BCM_COSQ_GPORT_XXX_QUEUE_GROUP
 * \param [in] gport queue group GPORT identifier
 * \param [in] cosq COS queue number
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_cos_mapping_set(
    int unit,
    bcm_port_t local_port,
    bcm_cos_t priority,
    uint32_t flags,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq);

/*!
 * \brief Get COS queue for the specified priority of an ingress port.
 *
 * \param [in] unit Unit Number.
 * \param [in] local_port local port
 * \param [in] priority priority value to map
 * \param [in] flags BCM_COSQ_GPORT_XXX_QUEUE_GROUP
 * \param [out] gport queue group GPORT identifier
 * \param [out] cosq COS queue number
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_cos_mapping_get(
    int unit,
    bcm_port_t local_port,
    bcm_cos_t priority,
    uint32_t flags,
    bcm_gport_t *gport,
    bcm_cos_queue_t *cosq);

/*!
 * \brief Get shaper configure from LT TM_SHAPER_CONFIG
 *
 * \param [in] unit Unit Number.
 * \param [out] refresh_time Refresh time.
 * \param [out] itu_mode itu mode enable.
 * \param [out] shaper Shaper enable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_shaper_config_get(
    int unit,
    int *refresh_time,
    int *itu_mode,
    int *shaper);

/*!
 * \brief  Create a cosq classifier.
 *
 * \param [in] unit Unit Number.
 * \param [out] classifier_id Classifier ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_field_classifier_id_create(
    int unit,
    int *classifier_id);

/*!
 * \brief Free resource associated with this field classifier id.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_field_classifier_id_destroy(
    int unit,
    int classifier_id);

/*!
 * \brief Set the mapping from port, classifier, and multiple internal priorities to multiple COS queues in a queue group.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 * \param [in] count Number of elements in priority_array and cosq_array.
 * \param [in] priority_array Array of internal priorities.
 * \param [in] cosq_array Array of COS queues.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_field_classifier_map_set(
    int unit,
    int classifier_id,
    int count,
    bcm_cos_t *priority_array,
    bcm_cos_queue_t *cosq_array);

/*!
 * \brief Get internal priority to ingress field processor CoS queue override mapping information.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 * \param [in] array_max Size of priority_array and cosq_array.
 * \param [in] priority_array Array of internal priorities.
 * \param [out] cosq_array Array of COS queues.
 * \param [out] array_count Size of cosq_array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_field_classifier_map_get(
    int unit,
    int classifier_id,
    int array_max,
    bcm_cos_t *priority_array,
    bcm_cos_queue_t *cosq_array,
    int *array_count);

/*!
 * \brief Delete an internal priority to ingress field processor CoS queue override mapping profile set.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_field_classifier_map_clear(
    int unit,
    int classifier_id);

/*!
 * \brief  Create a cosq classifier.
 *
 * \param [in] unit Unit Number.
 * \param [out] classifier_id Classifier ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_field_hi_classifier_id_create(
    int unit,
    int *classifier_id);

/*!
 * \brief Free resource associated with this field classifier id.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_field_hi_classifier_id_destroy(
    int unit,
    int classifier_id);

/*!
 * \brief Set the mapping from port, classifier, and multiple internal priorities to multiple COS queues in a queue group.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 * \param [in] count Number of elements in priority_array and cosq_array.
 * \param [in] priority_array Array of internal priorities.
 * \param [in] cosq_array Array of COS queues.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_field_hi_classifier_map_set(
    int unit,
    int classifier_id,
    int count,
    bcm_cos_t *priority_array,
    bcm_cos_queue_t *cosq_array);

/*!
 * \brief Get internal priority to ingress field processor CoS queue override mapping information.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 * \param [in] array_max Size of priority_array and cosq_array.
 * \param [in] priority_array Array of internal priorities.
 * \param [out] cosq_array Array of COS queues.
 * \param [out] array_count Size of cosq_array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_field_hi_classifier_map_get(
    int unit,
    int classifier_id,
    int array_max,
    bcm_cos_t *priority_array,
    bcm_cos_queue_t *cosq_array,
    int *array_count);

/*!
 * \brief Delete an internal priority to ingress field processor CoS queue override mapping profile set.
 *
 * \param [in] unit Unit Number.
 * \param [in] classifier_id Classifier ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_field_hi_classifier_map_clear(
    int unit,
    int classifier_id);

/*!
 * \brief Retrieve number UC&MC queue according to multcast queue mode.
 *
 * \param [in] unit Unit Number.
 * \param [out] num_ucq unicast queue number.
 * \param [out] num_mcq multcast queue number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_num_queue_get(
    int unit,
    int *num_ucq,
    int *num_mcq);

/*!
 * \brief Get port map information
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] info port map information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_port_map_info_get(
    int unit,
    bcm_port_t port,
    bcmi_ltsw_cosq_port_map_info_t *info);

/*!
 * \brief Get device specific TM information
 *
 * \param [in] unit Unit Number.
 * \param [out] info Device specific TM information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_device_info_get(
    int unit,
    bcmi_ltsw_cosq_device_info_t *info);

/*!
 * \brief Set cut-through mode for a specific port
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] enable Enable to use cut-through mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_port_ct_mode_set(
    int unit,
    bcm_port_t port,
    int enable);

/*!
 * \brief Get cut-through mode for a specific port
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] enable Enable to use cut-through mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_port_ct_mode_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*!
 * \brief Dump per-port asf configurations to diag Shell
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] port_speed Port speed in MB/s.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_port_asf_config_dump(
    int unit,
    bcm_port_t port,
    int port_speed);

/*!
 * \brief Print per-port traffic forwarding mode in diag Shell
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] port_speed Port speed in MB/s.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_port_asf_config_show(
    int unit,
    bcm_port_t port,
    int port_speed);

/*!
 * \brief Get the associated rx channel with a given cosq
 *
 * \param [in] unit Unit Number.
 * \param [in] queue_id input queue id
 * \param [in] chan_id channel index
 * \param [out] enable enable state
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_rx_queue_channel_get(
    int unit,
    bcm_cos_queue_t queue_id,
    bcm_rx_chan_t chan_id,
    bool *enable);

/*!
 * \brief Assign a RX channel to a cosq
 *
 * \param [in] unit Unit Number.
 * \param [in] queue_id input queue id
 * \param [in] chan_id channel index
 * \param [in] enable enable state
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_rx_queue_channel_set(
    int unit,
    bcm_cos_queue_t queue_id,
    bcm_rx_chan_t chan_id,
    bool enable);

/*!
 * \brief Tests whether the corresponding COS_BMP bit is set or not
 *
 * \param [in] unit Unit Number.
 * \param [in] queue_id input queue id
 * \param [in] chan_id channel index
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_rx_queue_channel_set_test(
    int unit,
    bcm_cos_queue_t queue_id,
    bcm_rx_chan_t chan_id);

/*!
 * \brief Walks through the valid COSQ GPORTs belong to a port and calls the user supplied callback function for each entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] port GPORT identifier.
 * \param [in] cb Callback function.
 * \param [out] user_data User data to be passed to callback function
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_gport_traverse_by_port(
    int unit,
    bcm_gport_t port,
    bcm_cosq_gport_traverse_cb cb,
    void *user_data);

#endif /* BCMINT_LTSW_MBCM_COSQ_H */
