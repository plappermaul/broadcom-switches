/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_MBCM_OBM_H
#define BCMINT_LTSW_MBCM_OBM_H

#include <bcm/types.h>
#include <bcm/cosq.h>

#include <bcm_int/ltsw/obm.h>

/*!
 * \brief Get OBM traffic class for max watermark mode
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [out] obm_wm_mode OBM traffic class for max watermark mode selection.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_port_max_usage_mode_get_f)(
    int unit,
    bcm_port_t port,
    bcm_obm_max_watermark_mode_t *obm_wm_mode);

/*!
 * \brief Set OBM traffic class for max watermark mode
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] obm_wm_mode OBM traffic class for max watermark mode selection.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_port_max_usage_mode_set_f)(
    int unit,
    bcm_port_t port,
    bcm_obm_max_watermark_mode_t obm_wm_mode);

/*!
 * \brief Determine which COS queue a given priority currently maps to
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] piority_type Lookup priority type.
 * \param [in] priority Priority.
 * \param [out] obm_tc OBM traffic class to be mapped.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_port_pri_traffic_class_mapping_get_f)(
    int unit,
    bcm_port_t port,
    bcm_obm_lookup_priority_type_t piority_type,
    int priority,
    bcm_obm_traffic_class_t *obm_tc);

/*!
 * \brief Determine which COS queue a given priority currently maps to
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] piority_type Lookup priority type.
 * \param [in] priority Priority.
 * \param [in] obm_tc OBM traffic class to be mapped.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_port_pri_traffic_class_mapping_set_f)(
    int unit,
    bcm_port_t port,
    bcm_obm_lookup_priority_type_t piority_type,
    int priority,
    bcm_obm_traffic_class_t obm_tc);

/*!
 * \brief Get port controls for OBM parsing
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] type Parse type.
 * \param [out] arg arg.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_port_control_get_f)(
    int unit,
    bcm_port_t port,
    bcmi_ltsw_obm_port_control_t type,
    int *arg);

/*!
 * \brief Set port controls for OBM parsing
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] type Parse type.
 * \param [in] arg arg.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_port_control_set_f)(
    int unit,
    bcm_port_t port,
    bcmi_ltsw_obm_port_control_t type,
    int arg);

/*!
 * \brief Get pm port controls for OBM parsing
 *
 * \param [in] unit Unit Number.
 * \param [in] pm_id PM ID.
 * \param [in] type Parse type.
 * \param [out] arg arg.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_pm_port_control_get_f)(
    int unit,
    int pm_id,
    bcmi_ltsw_obm_port_control_t type,
    int *arg);

/*!
 * \brief Set pm port controls for OBM parsing
 *
 * \param [in] unit Unit Number.
 * \param [in] pm_id PM ID.
 * \param [in] type Parse type.
 * \param [in] arg arg.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_pm_port_control_set_f)(
    int unit,
    int pm_id,
    bcmi_ltsw_obm_port_control_t type,
    int arg);

/*!
 * \brief Get the mapping of bcm_obm_code_point to bcm_obm_priority
 *
 * \param [in] unit Unit Number.
 * \param [in] gport gport for a given port.
 * \param [in] switch_obm_classifier_type type of switch_obm_classifier.
 * \param [in] array_max Maximum number of elements in switch_obm_classifier.
 * \param [out] switch_obm_classifier Array of bcm_switch_obm_classifier_t.
 * \param [out] array_count Number of elements in switch_obm_classifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_classifier_mapping_multi_get_f)(
    int unit,
    bcm_gport_t gport,
    bcm_switch_obm_classifier_type_t switch_obm_classifier_type,
    int array_max,
    bcm_switch_obm_classifier_t *switch_obm_classifier,
    int *array_count);

/*!
 * \brief Set the mapping of bcm_obm_code_point to bcm_obm_priority
 *
 * \param [in] unit Unit Number.
 * \param [in] gport gport for a given port.
 * \param [in] switch_obm_classifier_type type of switch_obm_classifier.
 * \param [in] array_count Number of elements in switch_obm_classifier.
 * \param [in] switch_obm_classifier Array of bcm_switch_obm_classifier_t.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_classifier_mapping_multi_set_f)(
    int unit,
    bcm_gport_t gport,
    bcm_switch_obm_classifier_type_t switch_obm_classifier_type,
    int array_count,
    bcm_switch_obm_classifier_t *switch_obm_classifier);

/*!
 * \brief Get OBM flow control configuration
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] obm_traffic_class OBM traffic classes.
 * \param [in] max_pri_count Max count.
 * \param [out] priority_list priority array.
 * \param [out] pri_count Count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_traffic_class_pfc_priority_mapping_get_f)(
    int unit,
    bcm_port_t port,
    bcm_obm_traffic_class_t obm_traffic_class,
    int max_pri_count,
    int *priority_list,
    int *pri_count);

/*!
 * \brief Set OBM flow control configuration
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] obm_traffic_class OBM traffic classes.
 * \param [in] max_pri_count Max count.
 * \param [in] priority_list priority array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_traffic_class_pfc_priority_mapping_set_f)(
    int unit,
    bcm_port_t port,
    bcm_obm_traffic_class_t obm_traffic_class,
    int max_pri_count,
    int *priority_list);

/*!
 * \brief Initialize the obm module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_init_f)(int unit);

/*!
 * \brief Detach the obm module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_detach_f)(int unit);

/*!
 * \brief Enable obm port flow control setting.
 *
 * \param [in] unit Unit Number.
 * \param [in] lport Logical port ID.
 * \param [in] fc_type Flow control type, 0: parse, 1: PFC.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*obm_port_fc_enable_set_f)(
    int unit,
    int lport,
    int fc_type);

/*!
 * \brief OBM driver structure.
 */
typedef struct mbcm_ltsw_obm_drv_s {

    /*! Get OBM traffic class for max watermark mode */
    obm_port_max_usage_mode_get_f obm_port_max_usage_mode_get;

    /*! Set OBM traffic class for max watermark mode */
    obm_port_max_usage_mode_set_f obm_port_max_usage_mode_set;

    /*! Determine which COS queue a given priority currently maps to */
    obm_port_pri_traffic_class_mapping_get_f obm_port_pri_traffic_class_mapping_get;

    /*! Determine which COS queue a given priority currently maps to */
    obm_port_pri_traffic_class_mapping_set_f obm_port_pri_traffic_class_mapping_set;

    /*! Get port controls for OBM parsing */
    obm_port_control_get_f obm_port_control_get;

    /*! Set port controls for OBM parsing */
    obm_port_control_set_f obm_port_control_set;

    /*! Get pm port controls for OBM parsing */
    obm_pm_port_control_get_f obm_pm_port_control_get;

    /*! Set pm port controls for OBM parsing */
    obm_pm_port_control_set_f obm_pm_port_control_set;

    /*! Get the mapping of bcm_obm_code_point to bcm_obm_priority */
    obm_classifier_mapping_multi_get_f obm_classifier_mapping_multi_get;

    /*! Set the mapping of bcm_obm_code_point to bcm_obm_priority */
    obm_classifier_mapping_multi_set_f obm_classifier_mapping_multi_set;

    /*! Get OBM flow control configuration */
    obm_traffic_class_pfc_priority_mapping_get_f obm_traffic_class_pfc_priority_mapping_get;

    /*! Set OBM flow control configuration */
    obm_traffic_class_pfc_priority_mapping_set_f obm_traffic_class_pfc_priority_mapping_set;

    /*! Initialize the obm module. */
    obm_init_f obm_init;

    /*! Detach the obm module. */
    obm_detach_f obm_detach;

    /*! Enable obm port flow control setting. */
    obm_port_fc_enable_set_f obm_port_fc_enable_set;

} mbcm_ltsw_obm_drv_t;

/*!
 * \brief Set the OBM driver of the device.
 *
 * \param [in] unit Unit Number.
 * \param [in] drv Obm driver to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_drv_set(
    int unit,
    mbcm_ltsw_obm_drv_t *drv);

/*!
 * \brief Get OBM traffic class for max watermark mode
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [out] obm_wm_mode OBM traffic class for max watermark mode selection.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_port_max_usage_mode_get(
    int unit,
    bcm_port_t port,
    bcm_obm_max_watermark_mode_t *obm_wm_mode);

/*!
 * \brief Set OBM traffic class for max watermark mode
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] obm_wm_mode OBM traffic class for max watermark mode selection.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_port_max_usage_mode_set(
    int unit,
    bcm_port_t port,
    bcm_obm_max_watermark_mode_t obm_wm_mode);

/*!
 * \brief Determine which COS queue a given priority currently maps to
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] piority_type Lookup priority type.
 * \param [in] priority Priority.
 * \param [out] obm_tc OBM traffic class to be mapped.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_port_pri_traffic_class_mapping_get(
    int unit,
    bcm_port_t port,
    bcm_obm_lookup_priority_type_t piority_type,
    int priority,
    bcm_obm_traffic_class_t *obm_tc);

/*!
 * \brief Determine which COS queue a given priority currently maps to
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] piority_type Lookup priority type.
 * \param [in] priority Priority.
 * \param [in] obm_tc OBM traffic class to be mapped.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_port_pri_traffic_class_mapping_set(
    int unit,
    bcm_port_t port,
    bcm_obm_lookup_priority_type_t piority_type,
    int priority,
    bcm_obm_traffic_class_t obm_tc);

/*!
 * \brief Get port controls for OBM parsing
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] type Parse type.
 * \param [out] arg arg.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_port_control_get(
    int unit,
    bcm_port_t port,
    bcmi_ltsw_obm_port_control_t type,
    int *arg);

/*!
 * \brief Set port controls for OBM parsing
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] type Parse type.
 * \param [in] arg arg.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_port_control_set(
    int unit,
    bcm_port_t port,
    bcmi_ltsw_obm_port_control_t type,
    int arg);

/*!
 * \brief Get pm port controls for OBM parsing
 *
 * \param [in] unit Unit Number.
 * \param [in] pm_id PM ID.
 * \param [in] type Parse type.
 * \param [out] arg arg.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_pm_port_control_get(
    int unit,
    int pm_id,
    bcmi_ltsw_obm_port_control_t type,
    int *arg);

/*!
 * \brief Set pm port controls for OBM parsing
 *
 * \param [in] unit Unit Number.
 * \param [in] pm_id PM ID.
 * \param [in] type Parse type.
 * \param [in] arg arg.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_pm_port_control_set(
    int unit,
    int pm_id,
    bcmi_ltsw_obm_port_control_t type,
    int arg);

/*!
 * \brief Get the mapping of bcm_obm_code_point to bcm_obm_priority
 *
 * \param [in] unit Unit Number.
 * \param [in] gport gport for a given port.
 * \param [in] switch_obm_classifier_type type of switch_obm_classifier.
 * \param [in] array_max Maximum number of elements in switch_obm_classifier.
 * \param [out] switch_obm_classifier Array of bcm_switch_obm_classifier_t.
 * \param [out] array_count Number of elements in switch_obm_classifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_classifier_mapping_multi_get(
    int unit,
    bcm_gport_t gport,
    bcm_switch_obm_classifier_type_t switch_obm_classifier_type,
    int array_max,
    bcm_switch_obm_classifier_t *switch_obm_classifier,
    int *array_count);

/*!
 * \brief Set the mapping of bcm_obm_code_point to bcm_obm_priority
 *
 * \param [in] unit Unit Number.
 * \param [in] gport gport for a given port.
 * \param [in] switch_obm_classifier_type type of switch_obm_classifier.
 * \param [in] array_count Number of elements in switch_obm_classifier.
 * \param [in] switch_obm_classifier Array of bcm_switch_obm_classifier_t.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_classifier_mapping_multi_set(
    int unit,
    bcm_gport_t gport,
    bcm_switch_obm_classifier_type_t switch_obm_classifier_type,
    int array_count,
    bcm_switch_obm_classifier_t *switch_obm_classifier);

/*!
 * \brief Get OBM flow control configuration
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] obm_traffic_class OBM traffic classes.
 * \param [in] max_pri_count Max count.
 * \param [out] priority_list priority array.
 * \param [out] pri_count Count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_traffic_class_pfc_priority_mapping_get(
    int unit,
    bcm_port_t port,
    bcm_obm_traffic_class_t obm_traffic_class,
    int max_pri_count,
    int *priority_list,
    int *pri_count);

/*!
 * \brief Set OBM flow control configuration
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port ID.
 * \param [in] obm_traffic_class OBM traffic classes.
 * \param [in] max_pri_count Max count.
 * \param [in] priority_list priority array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_traffic_class_pfc_priority_mapping_set(
    int unit,
    bcm_port_t port,
    bcm_obm_traffic_class_t obm_traffic_class,
    int max_pri_count,
    int *priority_list);

/*!
 * \brief Initialize the obm module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_init(int unit);

/*!
 * \brief Detach the obm module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_detach(int unit);

/*!
 * \brief Enable obm port flow control setting.
 *
 * \param [in] unit Unit Number.
 * \param [in] lport Logical port ID.
 * \param [in] fc_type Flow control type, 0: parse, 1: PFC.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_obm_port_fc_enable_set(
    int unit,
    int lport,
    int fc_type);

#endif /* BCMINT_LTSW_MBCM_OBM_H */
