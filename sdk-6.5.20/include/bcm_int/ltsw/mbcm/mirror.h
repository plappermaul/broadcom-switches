/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_MBCM_MIRROR_H
#define BCMINT_LTSW_MBCM_MIRROR_H

#include <bcm/mirror.h>
#include <bcm/types.h>
#include <bcm/switch.h>

#include <bcm_int/ltsw/mirror_int.h>
#include <bcm_int/ltsw/mirror.h>

#include <sal/sal_types.h>

/*!
 * \brief Initialize Mirror control info.
 *
 * \param [in] unit Unit Number.
 * \param [out] mirror_ctrl Mirror control info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_ctrl_info_init_f)(
    int unit,
    bcmint_mirror_ctrl_info_t *mirror_ctrl);

/*!
 * \brief Chip specific mirror init.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_init_f)(int unit);

/*!
 * \brief Chip specific mirror de-init.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_deinit_f)(int unit);

/*!
 * \brief Add Mirror encap entry and return the encap index.
 *
 * \param [in] unit Unit Number.
 * \param [in] egr Egress Mirror encap.
 * \param [in] mirror_dest Mirror destination pointer.
 * \param [out] index Mirror encap index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_encap_add_f)(
    int unit,
    bool egr,
    bcm_mirror_destination_t *mirror_dest,
    int *index);

/*!
 * \brief Delete Mirror encap entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] mirror_dest Mirror destination pointer.
 * \param [in] index Mirror encap index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_encap_delete_f)(
    int unit,
    bcm_mirror_destination_t *mirror_dest,
    int index);

/*!
 * \brief Get Mirror destination for given encap index.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Mirror encap index.
 * \param [out] mirror_dest Mirror destination pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_encap_get_f)(
    int unit,
    int index,
    bcm_mirror_destination_t *mirror_dest);

/*!
 * \brief Add Mirror session entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] session_id Mirror session id.
 * \param [in] session Mirror session entry.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_session_add_f)(
    int unit,
    int session_id,
    bcmint_mirror_session_entry_t *session);

/*!
 * \brief Delete Mirror session entry with given session id.
 *
 * \param [in] unit Unit Number.
 * \param [in] session_id Mirror session id.
 * \param [in] egr For egress or ingress Mirroring.
 * \param [in] cosq_mod For cosq_mod Mirroring.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_session_delete_f)(
    int unit,
    int session_id,
    bool egr,
    bool cosq_mod);

/*!
 * \brief Get Mirror session entry for given id.
 *
 * \param [in] unit Unit Number.
 * \param [in] session_id Mirror session id.
 * \param [out] session Mirror session entry.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_session_get_f)(
    int unit,
    int session_id,
    bcmint_mirror_session_entry_t *session);

/*!
 * \brief Get statistics for a Mirror session.
 *
 * \param [in] unit Unit Number.
 * \param [in] session_id Mirror session id.
 * \param [in] sync Sync mode.
 * \param [out] value Statistics.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_session_stat_get_f)(
    int unit,
    int session_id,
    bool sync,
    uint64_t *value);

/*!
 * \brief Set statistics for a Mirror session.
 *
 * \param [in] unit Unit Number.
 * \param [in] session_id Mirror session id.
 * \param [in] value Statistics.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_session_stat_set_f)(
    int unit,
    int session_id,
    uint64_t value);

/*!
 * \brief Get Mirror enable status on a Mirror source.
 *
 * \param [in] unit Unit Number.
 * \param [in] source Mirror source.
 * \param [out] enable Enable status.
 * \param [out] instance_id Mirror instance id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_enable_get_f)(
    int unit,
    bcmint_mirror_source_t *source,
    int *enable,
    int *instance_id);

/*!
 * \brief Set Mirror enable status on a Mirror source.
 *
 * \param [in] unit Unit Number.
 * \param [in] source Mirror source.
 * \param [in] mc_bmp Bitmap of Mirror containers cared.
 * \param [in] enable Enable status for Mirror container.
 * \param [in] instance_id Mirror instance id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_enable_set_f)(
    int unit,
    bcmint_mirror_source_t *source,
    int mc_bmp,
    int enable,
    int *instance_id);

/*!
 * \brief Mirror misc init.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_misc_init_f)(int unit);

/*!
 * \brief Mirror misc deinit.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_misc_deinit_f)(int unit);

/*!
 * \brief Init sample profile.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_sample_profile_init_f)(int unit);

/*!
 * \brief Deinit sample profile.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_sample_profile_deinit_f)(int unit);

/*!
 * \brief Get max rate range of egress sampler.
 *
 * \param [in] unit Unit Number.
 * \param [out] range_max Max rate range.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_egress_sampler_rate_range_max_f)(
    int unit,
    int *range_max);

/*!
 * \brief Set sampler random seed value.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sampler seed type.
 * \param [in] value Sampler seed value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_sampler_seed_set_f)(
    int unit,
    bcmi_ltsw_mirror_sampler_seed_type_t type,
    int value);

/*!
 * \brief Get sampler random seed value.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sampler seed type.
 * \param [out] value Sampler seed value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_sampler_seed_get_f)(
    int unit,
    bcmi_ltsw_mirror_sampler_seed_type_t type,
    int *value);

/*!
 * \brief Set sFlow version number.
 *
 * \param [in] unit Unit Number.
 * \param [in] value sFlow version number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_sample_version_set_f)(
    int unit,
    int value);

/*!
 * \brief Get sFlow version number.
 *
 * \param [in] unit Unit Number.
 * \param [out] value sFlow version number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_sample_version_get_f)(
    int unit,
    int *value);

/*!
 * \brief Set PSAMP IPFIX version number.
 *
 * \param [in] unit Unit Number.
 * \param [in] value PSAMP IPFIX version number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_psamp_ipfix_version_set_f)(
    int unit,
    int value);

/*!
 * \brief Get PSAMP IPFIX version number.
 *
 * \param [in] unit Unit Number.
 * \param [out] value PSAMP IPFIX version number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_psamp_ipfix_version_get_f)(
    int unit,
    int *value);

/*!
 * \brief Set PSAMP epoch number.
 *
 * \param [in] unit Unit Number.
 * \param [in] value PSAMP epoch number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_psamp_epoch_set_f)(
    int unit,
    int value);

/*!
 * \brief Get PSAMP epoch number.
 *
 * \param [in] unit Unit Number.
 * \param [out] value PSAMP epoch number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_psamp_epoch_get_f)(
    int unit,
    int *value);

/*!
 * \brief Set uc_cos for mirror copies.
 *
 * \param [in] unit Unit Number.
 * \param [in] uc_cos UC cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_uc_cos_set_f)(
    int unit,
    int uc_cos);

/*!
 * \brief Get uc_cos for mirror copies.
 *
 * \param [in] unit Unit Number.
 * \param [out] uc_cos UC cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_uc_cos_get_f)(
    int unit,
    int *uc_cos);

/*!
 * \brief Set mc_cos for mirror copies.
 *
 * \param [in] unit Unit Number.
 * \param [in] mc_cos MC cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_mc_cos_set_f)(
    int unit,
    int mc_cos);

/*!
 * \brief Get mc_cos for mirror copies.
 *
 * \param [in] unit Unit Number.
 * \param [out] mc_cos MC cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_mc_cos_get_f)(
    int unit,
    int *mc_cos);

/*!
 * \brief Set cpu_cos for mirror-to-cpu copies. This cos will override cpu_cos from CCBI bus.
 *
 * \param [in] unit Unit Number.
 * \param [in] cpu_cos Cpu_cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_cpu_cos_set_f)(
    int unit,
    int cpu_cos);

/*!
 * \brief Get cpu_cos for mirror-to-cpu copies.
 *
 * \param [in] unit Unit Number.
 * \param [out] cpu_cos Cpu_cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_cpu_cos_get_f)(
    int unit,
    int *cpu_cos);

/*!
 * \brief Set enable status for mirror traffic to drop pkts with invalid VLAN.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable Enable status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_invalid_vlan_drop_set_f)(
    int unit,
    int enable);

/*!
 * \brief Get enable status of mirror traffic dropping pkts with invalid VLAN.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Enable status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_invalid_vlan_drop_get_f)(
    int unit,
    int *enable);

/*!
 * \brief Set enable status for skipping packet checks for mirror packets.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable Enable status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_pkt_checks_set_f)(
    int unit,
    int enable);

/*!
 * \brief Get enable status of skipping packet checks for mirror packets.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Enable status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_pkt_checks_get_f)(
    int unit,
    int *enable);

/*!
 * \brief Validate mirror destination structure parameters.
 *
 * \param [in] unit Unit Number.
 * \param [in] mirror_dest Mirror destination pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_destination_validate_f)(
    int unit,
    bcm_mirror_destination_t *mirror_dest);

/*!
 * \brief Set sample profile entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sample type.
 * \param [in] profile_id Sample profile id.
 * \param [in] profile Sample profile entry.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_sample_profile_set_f)(
    int unit,
    bcmint_mirror_sample_type_t type,
    int profile_id,
    bcm_mirror_sample_profile_t *profile);

/*!
 * \brief Get sample profile entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sample type.
 * \param [in] profile_id Sample profile id.
 * \param [out] profile Sample profile entry.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_sample_profile_get_f)(
    int unit,
    bcmint_mirror_sample_type_t type,
    int profile_id,
    bcm_mirror_sample_profile_t *profile);

/*!
 * \brief Attach counter entries to a sample type.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sample type.
 * \param [in] stat_counter_id Counter id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_sample_stat_attach_f)(
    int unit,
    bcmint_mirror_sample_type_t type,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter entries from a sample type.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sample type.
 * \param [in] stat_counter_id Counter id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_sample_stat_detach_f)(
    int unit,
    bcmint_mirror_sample_type_t type,
    uint32_t stat_counter_id);

/*!
 * \brief Set global mirror truncate.
 *
 * \param [in] unit Unit Number.
 * \param [in] global_truncate Mirror global truncate pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_global_truncate_set_f)(
    int unit,
    bcm_mirror_global_truncate_t *global_truncate);

/*!
 * \brief Get global mirror truncate.
 *
 * \param [in] unit Unit Number.
 * \param [out] global_truncate Mirror global truncate pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_global_truncate_get_f)(
    int unit,
    bcm_mirror_global_truncate_t *global_truncate);

/*!
 * \brief Create a truncate length profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] options Options flags.
 * \param [inout] profile_id Profile id.
 * \param [in] profile Profile entry.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_truncate_length_profile_create_f)(
    int unit,
    uint32_t options,
    int *profile_id,
    bcm_mirror_truncate_length_profile_t *profile);

/*!
 * \brief Destroy a truncate length profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_truncate_length_profile_destroy_f)(
    int unit,
    int profile_id);

/*!
 * \brief Get a truncate length profile with given profile id.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile id.
 * \param [out] profile Profile entry.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_truncate_length_profile_get_f)(
    int unit,
    int profile_id,
    bcm_mirror_truncate_length_profile_t *profile);

/*!
 * \brief Get VLAN for egress mirrored packets on a port (RSPAN).
 *
 * \param [in] unit Unit Number.
 * \param [in] port Mirror-to port for which to get tag info.
 * \param [out] tpid Tag protocol id.
 * \param [out] vlan Virtual LAN number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_vlan_get_f)(
    int unit,
    bcm_port_t port,
    uint16_t *tpid,
    uint16_t *vlan);

/*!
 * \brief Set VLAN for egress mirrored packets on a port (RSPAN).
 *
 * \param [in] unit Unit Number.
 * \param [in] port Mirror-to port for which to get tag info.
 * \param [in] tpid Tag protocol id.
 * \param [in] vlan Virtual LAN number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_vlan_set_f)(
    int unit,
    bcm_port_t port,
    uint16_t tpid,
    uint16_t vlan);

/*!
 * \brief Retrive a list of payload offset and protocol values from HW.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] pyld_zero_cfg Array with the desired 'field_id' initialized with a valid bcm_mirror_payload_zero_field_t enum value in each array member.
 * \param [in] num_elems Number of elements in pyld_zero_cfg array. Must be between 1 to bcmMirrorPayloadZeroCount.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_payload_zero_control_multi_get_f)(
    int unit,
    bcm_mirror_payload_zero_info_t *pyld_zero_cfg,
    int num_elems);

/*!
 * \brief This function programs payload offset and protocol values required for payload wiping feature. They are used when this feature is enabled on a MTP.
 *
 * \param [in] unit Unit Number.
 * \param [in] pyld_zero_cfg Array containing protocol number or port number and/or offset value for the fields represented by bcm_mirror_payload_zero_field_t.
 * \param [in] num_elems Number of elements in pyld_zero_cfg array. Must be between 1 to bcmMirrorPayloadZeroCount.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_payload_zero_control_multi_set_f)(
    int unit,
    bcm_mirror_payload_zero_info_t *pyld_zero_cfg,
    int num_elems);

/*!
 * \brief This function creates the zero payload offset profile used for the mirror payload wiping feature by FP.
 *
 * \param [in] unit Unit Number.
 * \param [in] mirror_payload_offset_info Structure with the egress zero payload offsets.
 * \param [in] flags Define module using the profile entry.
 * \param [in] profile_index Profile index created.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_payload_zero_profile_create_f)(
    int unit,
    bcm_mirror_payload_zero_offsets_t *mirror_payload_offset_info,
    uint32 flags,
    uint32 * profile_index);

/*!
 * \brief This function deletes the zero payload offset profile created for the mirror payload wiping feature by FP.
 *
 * \param [in] unit Unit Number.
 * \param [in] flags Define module using the profile entry.
 * \param [in] profile_index Profile index to be deleted.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_payload_zero_profile_destroy_f)(
    int unit,
    uint32 flags,
    uint32 profile_index);

/*!
 * \brief Create an ingress mirror-on-drop event group.
 *
 * \param [in] unit Unit Number.
 * \param [in] event_array Ingress mirror-on-drop events of the group.
 * \param [in] num_events Number of events given.
 * \param [out] group Event group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_ingress_mod_event_group_create_f)(
    int unit,
    bcm_mirror_ingress_mod_event_t *event_array,
    int num_events,
    bcm_mirror_ingress_mod_event_group_t *group);

/*!
 * \brief Destroy an ingress mirror-on-drop event group.
 *
 * \param [in] unit Unit Number.
 * \param [in] group Event group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_ingress_mod_event_group_destroy_f)(
    int unit,
    bcm_mirror_ingress_mod_event_group_t group);

/*!
 * \brief Get all ingress mirror-on-drop event groups.
 *
 * \param [in] unit Unit Number.
 * \param [out] group_array Event group array.
 * \param [in/out] count Count of the event groups.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_ingress_mod_event_group_get_all_f)(
    int unit,
    bcm_mirror_ingress_mod_event_group_t *group_array,
    int *count);

/*!
 * \brief Get events of an ingress mirror-on-drop event group.
 *
 * \param [in] unit Unit Number.
 * \param [in] group Event group.
 * \param [out] event_array Ingress mirror-on-drop events of the group.
 * \param [in/out] count Count of the events in the group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_ingress_mod_event_group_event_get_f)(
    int unit,
    bcm_mirror_ingress_mod_event_group_t group,
    bcm_mirror_ingress_mod_event_t *event_array,
    int *count);

/*!
 * \brief Create an ingress mirror-on-drop event profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile Ingress mirror-on-drop event profile data.
 * \param [out] profile_id Profile id returned on success.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_ingress_mod_event_profile_create_f)(
    int unit,
    bcm_mirror_ingress_mod_event_profile_t *profile,
    int *profile_id);

/*!
 * \brief Destroy an ingress mirror-on-drop event profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Ingress mirror-on-drop event profile id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_ingress_mod_event_profile_destroy_f)(
    int unit,
    int profile_id);

/*!
 * \brief Get all ingress mirror-on-drop event profile ids.
 *
 * \param [in] unit Unit Number.
 * \param [out] profile_id_array Event profile id array.
 * \param [in/out] count Count of the event profiles.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_ingress_mod_event_profile_get_all_f)(
    int unit,
    int *profile_id_array,
    int *count);

/*!
 * \brief Get an ingress mirror-on-drop event profile config.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Event profile id.
 * \param [out] profile Event profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_ingress_mod_event_profile_cfg_get_f)(
    int unit,
    int profile_id,
    bcm_mirror_ingress_mod_event_profile_t *profile);

/*!
 * \brief Add an ingress mirror-on-drop event group to an event profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Event profile id.
 * \param [in] group Event group.
 * \param [in] hit Event group hit expectation.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_ingress_mod_event_profile_group_add_f)(
    int unit,
    int profile_id,
    bcm_mirror_ingress_mod_event_group_t group,
    int hit);

/*!
 * \brief Delete an ingress mirror-on-drop event group to an event profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Event profile id.
 * \param [in] group Event group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_ingress_mod_event_profile_group_delete_f)(
    int unit,
    int profile_id,
    bcm_mirror_ingress_mod_event_group_t group);

/*!
 * \brief Get all event groups of an ingress mirror-on-drop event profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Event profile id.
 * \param [out] group_array Event group array.
 * \param [in/out] count Count of the groups in the profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_ingress_mod_event_profile_group_get_all_f)(
    int unit,
    int profile_id,
    bcm_mirror_ingress_mod_event_group_t *group_array,
    int *count);

/*!
 * \brief Get hit expectation of an ingress mirror-on-drop event group from an event profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Event profile id.
 * \param [in] group Event group array.
 * \param [out] hit Event group hit expectation.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_ingress_mod_event_profile_group_get_f)(
    int unit,
    int profile_id,
    bcm_mirror_ingress_mod_event_group_t group,
    int *hit);

/*!
 * \brief Create a group of multiple destination IPv4 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [in] num_entries Number of entries of the group.
 * \param [in] ipv4_addr_array The addresses to be set for the group.
 * \param [out] group Multiple destination IP group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_multi_dip_group_ipv4_create_f)(
    int unit,
    bcm_mirror_multi_dip_entry_num_t num_entries,
    bcm_ip_t *ipv4_addr_array,
    bcm_mirror_multi_dip_group_t *group);

/*!
 * \brief Remove a group of multiple destination IPv4 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [in] group Multiple destination IP group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_multi_dip_group_ipv4_destroy_f)(
    int unit,
    bcm_mirror_multi_dip_group_t group);

/*!
 * \brief Get all groups of multiple destination IPv4 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [out] ipv4_group_array Number of entries of the group.
 * \param [in/out] count Count of the ipv4_groups.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_multi_dip_group_ipv4_get_all_f)(
    int unit,
    bcm_mirror_multi_dip_group_t *ipv4_group_array,
    int *count);

/*!
 * \brief Get a group of multiple destination IPv4 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [in] group Multiple destination ip group.
 * \param [out] ipv4_addr_array The addresses of the group.
 * \param [in/out] count Count of addresses in the group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_multi_dip_group_ipv4_get_f)(
    int unit,
    bcm_mirror_multi_dip_group_t group,
    bcm_ip_t *ipv4_addr_array,
    int *count);

/*!
 * \brief Create a group of multiple destination IPv6 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [in] num_entries Number of entries of the group.
 * \param [in] ipv6_addr_array The addresses to be set for the group.
 * \param [out] group Multiple destination IP group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_multi_dip_group_ipv6_create_f)(
    int unit,
    bcm_mirror_multi_dip_entry_num_t num_entries,
    bcm_ip6_t *ipv6_addr_array,
    bcm_mirror_multi_dip_group_t *group);

/*!
 * \brief Remove a group of multiple destination IPv6 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [in] group Multiple destination IP group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_multi_dip_group_ipv6_destroy_f)(
    int unit,
    bcm_mirror_multi_dip_group_t group);

/*!
 * \brief Get all groups of multiple destination IPv6 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [out] ipv6_group_array Number of entries of the group.
 * \param [in/out] count Count of the ipv6_groups.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_multi_dip_group_ipv6_get_all_f)(
    int unit,
    bcm_mirror_multi_dip_group_t *ipv6_group_array,
    int *count);

/*!
 * \brief Get a group of multiple destination IPv6 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [in] group Multiple destination ip group.
 * \param [out] ipv6_addr_array The addresses of the group.
 * \param [in/out] count Count of addresses in the group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_multi_dip_group_ipv6_get_f)(
    int unit,
    bcm_mirror_multi_dip_group_t group,
    bcm_ip6_t *ipv6_addr_array,
    int *count);

/*!
 * \brief Dump multiple destination IP allocators.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_multi_dip_dump_f)(int unit);

/*!
 * \brief Mirror database initialization.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_db_init_f)(int unit);

/*!
 * \brief Specify general mirror switch behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] type The desired switch control type.
 * \param [in] arg Value to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_switch_control_set_f)(
    int unit,
    bcm_switch_control_t type,
    int arg);

/*!
 * \brief Retrieve general mirror switch behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] type The desired switch control type.
 * \param [out] arg Value to get.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*mirror_switch_control_get_f)(
    int unit,
    bcm_switch_control_t type,
    int *arg);

/*!
 * \brief Mirror driver structure.
 */
typedef struct mbcm_ltsw_mirror_drv_s {

    /*! Initialize Mirror control info. */
    mirror_ctrl_info_init_f mirror_ctrl_info_init;

    /*! Chip specific mirror init. */
    mirror_init_f mirror_init;

    /*! Chip specific mirror de-init. */
    mirror_deinit_f mirror_deinit;

    /*! Add Mirror encap entry and return the encap index. */
    mirror_encap_add_f mirror_encap_add;

    /*! Delete Mirror encap entry. */
    mirror_encap_delete_f mirror_encap_delete;

    /*! Get Mirror destination for given encap index. */
    mirror_encap_get_f mirror_encap_get;

    /*! Add Mirror session entry. */
    mirror_session_add_f mirror_session_add;

    /*! Delete Mirror session entry with given session id. */
    mirror_session_delete_f mirror_session_delete;

    /*! Get Mirror session entry for given id. */
    mirror_session_get_f mirror_session_get;

    /*! Get statistics for a Mirror session. */
    mirror_session_stat_get_f mirror_session_stat_get;

    /*! Set statistics for a Mirror session. */
    mirror_session_stat_set_f mirror_session_stat_set;

    /*! Get Mirror enable status on a Mirror source. */
    mirror_enable_get_f mirror_enable_get;

    /*! Set Mirror enable status on a Mirror source. */
    mirror_enable_set_f mirror_enable_set;

    /*! Mirror misc init. */
    mirror_misc_init_f mirror_misc_init;

    /*! Mirror misc deinit. */
    mirror_misc_deinit_f mirror_misc_deinit;

    /*! Init sample profile. */
    mirror_sample_profile_init_f mirror_sample_profile_init;

    /*! Deinit sample profile. */
    mirror_sample_profile_deinit_f mirror_sample_profile_deinit;

    /*! Get max rate range of egress sampler. */
    mirror_egress_sampler_rate_range_max_f mirror_egress_sampler_rate_range_max;

    /*! Set sampler random seed value. */
    mirror_sampler_seed_set_f mirror_sampler_seed_set;

    /*! Get sampler random seed value. */
    mirror_sampler_seed_get_f mirror_sampler_seed_get;

    /*! Set sFlow version number. */
    mirror_sample_version_set_f mirror_sample_version_set;

    /*! Get sFlow version number. */
    mirror_sample_version_get_f mirror_sample_version_get;

    /*! Set PSAMP IPFIX version number. */
    mirror_psamp_ipfix_version_set_f mirror_psamp_ipfix_version_set;

    /*! Get PSAMP IPFIX version number. */
    mirror_psamp_ipfix_version_get_f mirror_psamp_ipfix_version_get;

    /*! Set PSAMP epoch number. */
    mirror_psamp_epoch_set_f mirror_psamp_epoch_set;

    /*! Get PSAMP epoch number. */
    mirror_psamp_epoch_get_f mirror_psamp_epoch_get;

    /*! Set uc_cos for mirror copies. */
    mirror_uc_cos_set_f mirror_uc_cos_set;

    /*! Get uc_cos for mirror copies. */
    mirror_uc_cos_get_f mirror_uc_cos_get;

    /*! Set mc_cos for mirror copies. */
    mirror_mc_cos_set_f mirror_mc_cos_set;

    /*! Get mc_cos for mirror copies. */
    mirror_mc_cos_get_f mirror_mc_cos_get;

    /*! Set cpu_cos for mirror-to-cpu copies. This cos will override cpu_cos from CCBI bus. */
    mirror_cpu_cos_set_f mirror_cpu_cos_set;

    /*! Get cpu_cos for mirror-to-cpu copies. */
    mirror_cpu_cos_get_f mirror_cpu_cos_get;

    /*! Set enable status for mirror traffic to drop pkts with invalid VLAN. */
    mirror_invalid_vlan_drop_set_f mirror_invalid_vlan_drop_set;

    /*! Get enable status of mirror traffic dropping pkts with invalid VLAN. */
    mirror_invalid_vlan_drop_get_f mirror_invalid_vlan_drop_get;

    /*! Set enable status for skipping packet checks for mirror packets. */
    mirror_pkt_checks_set_f mirror_pkt_checks_set;

    /*! Get enable status of skipping packet checks for mirror packets. */
    mirror_pkt_checks_get_f mirror_pkt_checks_get;

    /*! Validate mirror destination structure parameters. */
    mirror_destination_validate_f mirror_destination_validate;

    /*! Set sample profile entry. */
    mirror_sample_profile_set_f mirror_sample_profile_set;

    /*! Get sample profile entry. */
    mirror_sample_profile_get_f mirror_sample_profile_get;

    /*! Attach counter entries to a sample type. */
    mirror_sample_stat_attach_f mirror_sample_stat_attach;

    /*! Detach counter entries from a sample type. */
    mirror_sample_stat_detach_f mirror_sample_stat_detach;

    /*! Set global mirror truncate. */
    mirror_global_truncate_set_f mirror_global_truncate_set;

    /*! Get global mirror truncate. */
    mirror_global_truncate_get_f mirror_global_truncate_get;

    /*! Create a truncate length profile. */
    mirror_truncate_length_profile_create_f mirror_truncate_length_profile_create;

    /*! Destroy a truncate length profile. */
    mirror_truncate_length_profile_destroy_f mirror_truncate_length_profile_destroy;

    /*! Get a truncate length profile with given profile id. */
    mirror_truncate_length_profile_get_f mirror_truncate_length_profile_get;

    /*! Get VLAN for egress mirrored packets on a port (RSPAN). */
    mirror_vlan_get_f mirror_vlan_get;

    /*! Set VLAN for egress mirrored packets on a port (RSPAN). */
    mirror_vlan_set_f mirror_vlan_set;

    /*! Retrive a list of payload offset and protocol values from HW. */
    mirror_payload_zero_control_multi_get_f mirror_payload_zero_control_multi_get;

    /*! This function programs payload offset and protocol values required for payload wiping feature. They are used when this feature is enabled on a MTP. */
    mirror_payload_zero_control_multi_set_f mirror_payload_zero_control_multi_set;

    /*! This function creates the zero payload offset profile used for the mirror payload wiping feature by FP. */
    mirror_payload_zero_profile_create_f mirror_payload_zero_profile_create;

    /*! This function deletes the zero payload offset profile created for the mirror payload wiping feature by FP. */
    mirror_payload_zero_profile_destroy_f mirror_payload_zero_profile_destroy;

    /*! Create an ingress mirror-on-drop event group. */
    mirror_ingress_mod_event_group_create_f mirror_ingress_mod_event_group_create;

    /*! Destroy an ingress mirror-on-drop event group. */
    mirror_ingress_mod_event_group_destroy_f mirror_ingress_mod_event_group_destroy;

    /*! Get all ingress mirror-on-drop event groups. */
    mirror_ingress_mod_event_group_get_all_f mirror_ingress_mod_event_group_get_all;

    /*! Get events of an ingress mirror-on-drop event group. */
    mirror_ingress_mod_event_group_event_get_f mirror_ingress_mod_event_group_event_get;

    /*! Create an ingress mirror-on-drop event profile. */
    mirror_ingress_mod_event_profile_create_f mirror_ingress_mod_event_profile_create;

    /*! Destroy an ingress mirror-on-drop event profile. */
    mirror_ingress_mod_event_profile_destroy_f mirror_ingress_mod_event_profile_destroy;

    /*! Get all ingress mirror-on-drop event profile ids. */
    mirror_ingress_mod_event_profile_get_all_f mirror_ingress_mod_event_profile_get_all;

    /*! Get an ingress mirror-on-drop event profile config. */
    mirror_ingress_mod_event_profile_cfg_get_f mirror_ingress_mod_event_profile_cfg_get;

    /*! Add an ingress mirror-on-drop event group to an event profile. */
    mirror_ingress_mod_event_profile_group_add_f mirror_ingress_mod_event_profile_group_add;

    /*! Delete an ingress mirror-on-drop event group to an event profile. */
    mirror_ingress_mod_event_profile_group_delete_f mirror_ingress_mod_event_profile_group_delete;

    /*! Get all event groups of an ingress mirror-on-drop event profile. */
    mirror_ingress_mod_event_profile_group_get_all_f mirror_ingress_mod_event_profile_group_get_all;

    /*! Get hit expectation of an ingress mirror-on-drop event group from an event profile. */
    mirror_ingress_mod_event_profile_group_get_f mirror_ingress_mod_event_profile_group_get;

    /*! Create a group of multiple destination IPv4 addresses. */
    mirror_multi_dip_group_ipv4_create_f mirror_multi_dip_group_ipv4_create;

    /*! Remove a group of multiple destination IPv4 addresses. */
    mirror_multi_dip_group_ipv4_destroy_f mirror_multi_dip_group_ipv4_destroy;

    /*! Get all groups of multiple destination IPv4 addresses. */
    mirror_multi_dip_group_ipv4_get_all_f mirror_multi_dip_group_ipv4_get_all;

    /*! Get a group of multiple destination IPv4 addresses. */
    mirror_multi_dip_group_ipv4_get_f mirror_multi_dip_group_ipv4_get;

    /*! Create a group of multiple destination IPv6 addresses. */
    mirror_multi_dip_group_ipv6_create_f mirror_multi_dip_group_ipv6_create;

    /*! Remove a group of multiple destination IPv6 addresses. */
    mirror_multi_dip_group_ipv6_destroy_f mirror_multi_dip_group_ipv6_destroy;

    /*! Get all groups of multiple destination IPv6 addresses. */
    mirror_multi_dip_group_ipv6_get_all_f mirror_multi_dip_group_ipv6_get_all;

    /*! Get a group of multiple destination IPv6 addresses. */
    mirror_multi_dip_group_ipv6_get_f mirror_multi_dip_group_ipv6_get;

    /*! Dump multiple destination IP allocators. */
    mirror_multi_dip_dump_f mirror_multi_dip_dump;

    /*! Mirror database initialization. */
    mirror_db_init_f mirror_db_init;

    /*! Specify general mirror switch behaviors. */
    mirror_switch_control_set_f mirror_switch_control_set;

    /*! Retrieve general mirror switch behaviors. */
    mirror_switch_control_get_f mirror_switch_control_get;

} mbcm_ltsw_mirror_drv_t;

/*!
 * \brief Set the MIRROR driver of the device.
 *
 * \param [in] unit Unit Number.
 * \param [in] drv Mirror driver to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_drv_set(
    int unit,
    mbcm_ltsw_mirror_drv_t *drv);

/*!
 * \brief Initialize Mirror control info.
 *
 * \param [in] unit Unit Number.
 * \param [out] mirror_ctrl Mirror control info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_ctrl_info_init(
    int unit,
    bcmint_mirror_ctrl_info_t *mirror_ctrl);

/*!
 * \brief Chip specific mirror init.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_init(int unit);

/*!
 * \brief Chip specific mirror de-init.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_deinit(int unit);

/*!
 * \brief Add Mirror encap entry and return the encap index.
 *
 * \param [in] unit Unit Number.
 * \param [in] egr Egress Mirror encap.
 * \param [in] mirror_dest Mirror destination pointer.
 * \param [out] index Mirror encap index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_encap_add(
    int unit,
    bool egr,
    bcm_mirror_destination_t *mirror_dest,
    int *index);

/*!
 * \brief Delete Mirror encap entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] mirror_dest Mirror destination pointer.
 * \param [in] index Mirror encap index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_encap_delete(
    int unit,
    bcm_mirror_destination_t *mirror_dest,
    int index);

/*!
 * \brief Get Mirror destination for given encap index.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Mirror encap index.
 * \param [out] mirror_dest Mirror destination pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_encap_get(
    int unit,
    int index,
    bcm_mirror_destination_t *mirror_dest);

/*!
 * \brief Add Mirror session entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] session_id Mirror session id.
 * \param [in] session Mirror session entry.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_session_add(
    int unit,
    int session_id,
    bcmint_mirror_session_entry_t *session);

/*!
 * \brief Delete Mirror session entry with given session id.
 *
 * \param [in] unit Unit Number.
 * \param [in] session_id Mirror session id.
 * \param [in] egr For egress or ingress Mirroring.
 * \param [in] cosq_mod For cosq_mod Mirroring.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_session_delete(
    int unit,
    int session_id,
    bool egr,
    bool cosq_mod);

/*!
 * \brief Get Mirror session entry for given id.
 *
 * \param [in] unit Unit Number.
 * \param [in] session_id Mirror session id.
 * \param [out] session Mirror session entry.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_session_get(
    int unit,
    int session_id,
    bcmint_mirror_session_entry_t *session);

/*!
 * \brief Get statistics for a Mirror session.
 *
 * \param [in] unit Unit Number.
 * \param [in] session_id Mirror session id.
 * \param [in] sync Sync mode.
 * \param [out] value Statistics.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_session_stat_get(
    int unit,
    int session_id,
    bool sync,
    uint64_t *value);

/*!
 * \brief Set statistics for a Mirror session.
 *
 * \param [in] unit Unit Number.
 * \param [in] session_id Mirror session id.
 * \param [in] value Statistics.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_session_stat_set(
    int unit,
    int session_id,
    uint64_t value);

/*!
 * \brief Get Mirror enable status on a Mirror source.
 *
 * \param [in] unit Unit Number.
 * \param [in] source Mirror source.
 * \param [out] enable Enable status.
 * \param [out] instance_id Mirror instance id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_enable_get(
    int unit,
    bcmint_mirror_source_t *source,
    int *enable,
    int *instance_id);

/*!
 * \brief Set Mirror enable status on a Mirror source.
 *
 * \param [in] unit Unit Number.
 * \param [in] source Mirror source.
 * \param [in] mc_bmp Bitmap of Mirror containers cared.
 * \param [in] enable Enable status for Mirror container.
 * \param [in] instance_id Mirror instance id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_enable_set(
    int unit,
    bcmint_mirror_source_t *source,
    int mc_bmp,
    int enable,
    int *instance_id);

/*!
 * \brief Mirror misc init.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_misc_init(int unit);

/*!
 * \brief Mirror misc deinit.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_misc_deinit(int unit);

/*!
 * \brief Init sample profile.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_sample_profile_init(int unit);

/*!
 * \brief Deinit sample profile.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_sample_profile_deinit(int unit);

/*!
 * \brief Get max rate range of egress sampler.
 *
 * \param [in] unit Unit Number.
 * \param [out] range_max Max rate range.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_egress_sampler_rate_range_max(
    int unit,
    int *range_max);

/*!
 * \brief Set sampler random seed value.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sampler seed type.
 * \param [in] value Sampler seed value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_sampler_seed_set(
    int unit,
    bcmi_ltsw_mirror_sampler_seed_type_t type,
    int value);

/*!
 * \brief Get sampler random seed value.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sampler seed type.
 * \param [out] value Sampler seed value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_sampler_seed_get(
    int unit,
    bcmi_ltsw_mirror_sampler_seed_type_t type,
    int *value);

/*!
 * \brief Set sFlow version number.
 *
 * \param [in] unit Unit Number.
 * \param [in] value sFlow version number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_sample_version_set(
    int unit,
    int value);

/*!
 * \brief Get sFlow version number.
 *
 * \param [in] unit Unit Number.
 * \param [out] value sFlow version number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_sample_version_get(
    int unit,
    int *value);

/*!
 * \brief Set PSAMP IPFIX version number.
 *
 * \param [in] unit Unit Number.
 * \param [in] value PSAMP IPFIX version number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_psamp_ipfix_version_set(
    int unit,
    int value);

/*!
 * \brief Get PSAMP IPFIX version number.
 *
 * \param [in] unit Unit Number.
 * \param [out] value PSAMP IPFIX version number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_psamp_ipfix_version_get(
    int unit,
    int *value);

/*!
 * \brief Set PSAMP epoch number.
 *
 * \param [in] unit Unit Number.
 * \param [in] value PSAMP epoch number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_psamp_epoch_set(
    int unit,
    int value);

/*!
 * \brief Get PSAMP epoch number.
 *
 * \param [in] unit Unit Number.
 * \param [out] value PSAMP epoch number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_psamp_epoch_get(
    int unit,
    int *value);

/*!
 * \brief Set uc_cos for mirror copies.
 *
 * \param [in] unit Unit Number.
 * \param [in] uc_cos UC cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_uc_cos_set(
    int unit,
    int uc_cos);

/*!
 * \brief Get uc_cos for mirror copies.
 *
 * \param [in] unit Unit Number.
 * \param [out] uc_cos UC cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_uc_cos_get(
    int unit,
    int *uc_cos);

/*!
 * \brief Set mc_cos for mirror copies.
 *
 * \param [in] unit Unit Number.
 * \param [in] mc_cos MC cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_mc_cos_set(
    int unit,
    int mc_cos);

/*!
 * \brief Get mc_cos for mirror copies.
 *
 * \param [in] unit Unit Number.
 * \param [out] mc_cos MC cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_mc_cos_get(
    int unit,
    int *mc_cos);

/*!
 * \brief Set cpu_cos for mirror-to-cpu copies. This cos will override cpu_cos from CCBI bus.
 *
 * \param [in] unit Unit Number.
 * \param [in] cpu_cos Cpu_cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_cpu_cos_set(
    int unit,
    int cpu_cos);

/*!
 * \brief Get cpu_cos for mirror-to-cpu copies.
 *
 * \param [in] unit Unit Number.
 * \param [out] cpu_cos Cpu_cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_cpu_cos_get(
    int unit,
    int *cpu_cos);

/*!
 * \brief Set enable status for mirror traffic to drop pkts with invalid VLAN.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable Enable status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_invalid_vlan_drop_set(
    int unit,
    int enable);

/*!
 * \brief Get enable status of mirror traffic dropping pkts with invalid VLAN.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Enable status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_invalid_vlan_drop_get(
    int unit,
    int *enable);

/*!
 * \brief Set enable status for skipping packet checks for mirror packets.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable Enable status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_pkt_checks_set(
    int unit,
    int enable);

/*!
 * \brief Get enable status of skipping packet checks for mirror packets.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Enable status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_pkt_checks_get(
    int unit,
    int *enable);

/*!
 * \brief Validate mirror destination structure parameters.
 *
 * \param [in] unit Unit Number.
 * \param [in] mirror_dest Mirror destination pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_destination_validate(
    int unit,
    bcm_mirror_destination_t *mirror_dest);

/*!
 * \brief Set sample profile entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sample type.
 * \param [in] profile_id Sample profile id.
 * \param [in] profile Sample profile entry.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_sample_profile_set(
    int unit,
    bcmint_mirror_sample_type_t type,
    int profile_id,
    bcm_mirror_sample_profile_t *profile);

/*!
 * \brief Get sample profile entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sample type.
 * \param [in] profile_id Sample profile id.
 * \param [out] profile Sample profile entry.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_sample_profile_get(
    int unit,
    bcmint_mirror_sample_type_t type,
    int profile_id,
    bcm_mirror_sample_profile_t *profile);

/*!
 * \brief Attach counter entries to a sample type.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sample type.
 * \param [in] stat_counter_id Counter id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_sample_stat_attach(
    int unit,
    bcmint_mirror_sample_type_t type,
    uint32_t stat_counter_id);

/*!
 * \brief Detach counter entries from a sample type.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sample type.
 * \param [in] stat_counter_id Counter id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_sample_stat_detach(
    int unit,
    bcmint_mirror_sample_type_t type,
    uint32_t stat_counter_id);

/*!
 * \brief Set global mirror truncate.
 *
 * \param [in] unit Unit Number.
 * \param [in] global_truncate Mirror global truncate pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_global_truncate_set(
    int unit,
    bcm_mirror_global_truncate_t *global_truncate);

/*!
 * \brief Get global mirror truncate.
 *
 * \param [in] unit Unit Number.
 * \param [out] global_truncate Mirror global truncate pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_global_truncate_get(
    int unit,
    bcm_mirror_global_truncate_t *global_truncate);

/*!
 * \brief Create a truncate length profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] options Options flags.
 * \param [inout] profile_id Profile id.
 * \param [in] profile Profile entry.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_truncate_length_profile_create(
    int unit,
    uint32_t options,
    int *profile_id,
    bcm_mirror_truncate_length_profile_t *profile);

/*!
 * \brief Destroy a truncate length profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_truncate_length_profile_destroy(
    int unit,
    int profile_id);

/*!
 * \brief Get a truncate length profile with given profile id.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Profile id.
 * \param [out] profile Profile entry.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_truncate_length_profile_get(
    int unit,
    int profile_id,
    bcm_mirror_truncate_length_profile_t *profile);

/*!
 * \brief Get VLAN for egress mirrored packets on a port (RSPAN).
 *
 * \param [in] unit Unit Number.
 * \param [in] port Mirror-to port for which to get tag info.
 * \param [out] tpid Tag protocol id.
 * \param [out] vlan Virtual LAN number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_vlan_get(
    int unit,
    bcm_port_t port,
    uint16_t *tpid,
    uint16_t *vlan);

/*!
 * \brief Set VLAN for egress mirrored packets on a port (RSPAN).
 *
 * \param [in] unit Unit Number.
 * \param [in] port Mirror-to port for which to get tag info.
 * \param [in] tpid Tag protocol id.
 * \param [in] vlan Virtual LAN number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_vlan_set(
    int unit,
    bcm_port_t port,
    uint16_t tpid,
    uint16_t vlan);

/*!
 * \brief Retrive a list of payload offset and protocol values from HW.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] pyld_zero_cfg Array with the desired 'field_id' initialized with a valid bcm_mirror_payload_zero_field_t enum value in each array member.
 * \param [in] num_elems Number of elements in pyld_zero_cfg array. Must be between 1 to bcmMirrorPayloadZeroCount.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_payload_zero_control_multi_get(
    int unit,
    bcm_mirror_payload_zero_info_t *pyld_zero_cfg,
    int num_elems);

/*!
 * \brief This function programs payload offset and protocol values required for payload wiping feature. They are used when this feature is enabled on a MTP.
 *
 * \param [in] unit Unit Number.
 * \param [in] pyld_zero_cfg Array containing protocol number or port number and/or offset value for the fields represented by bcm_mirror_payload_zero_field_t.
 * \param [in] num_elems Number of elements in pyld_zero_cfg array. Must be between 1 to bcmMirrorPayloadZeroCount.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_payload_zero_control_multi_set(
    int unit,
    bcm_mirror_payload_zero_info_t *pyld_zero_cfg,
    int num_elems);

/*!
 * \brief This function creates the zero payload offset profile used for the mirror payload wiping feature by FP.
 *
 * \param [in] unit Unit Number.
 * \param [in] mirror_payload_offset_info Structure with the egress zero payload offsets.
 * \param [in] flags Define module using the profile entry.
 * \param [in] profile_index Profile index created.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_payload_zero_profile_create(
    int unit,
    bcm_mirror_payload_zero_offsets_t *mirror_payload_offset_info,
    uint32 flags,
    uint32 * profile_index);

/*!
 * \brief This function deletes the zero payload offset profile created for the mirror payload wiping feature by FP.
 *
 * \param [in] unit Unit Number.
 * \param [in] flags Define module using the profile entry.
 * \param [in] profile_index Profile index to be deleted.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_payload_zero_profile_destroy(
    int unit,
    uint32 flags,
    uint32 profile_index);

/*!
 * \brief Create an ingress mirror-on-drop event group.
 *
 * \param [in] unit Unit Number.
 * \param [in] event_array Ingress mirror-on-drop events of the group.
 * \param [in] num_events Number of events given.
 * \param [out] group Event group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_ingress_mod_event_group_create(
    int unit,
    bcm_mirror_ingress_mod_event_t *event_array,
    int num_events,
    bcm_mirror_ingress_mod_event_group_t *group);

/*!
 * \brief Destroy an ingress mirror-on-drop event group.
 *
 * \param [in] unit Unit Number.
 * \param [in] group Event group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_ingress_mod_event_group_destroy(
    int unit,
    bcm_mirror_ingress_mod_event_group_t group);

/*!
 * \brief Get all ingress mirror-on-drop event groups.
 *
 * \param [in] unit Unit Number.
 * \param [out] group_array Event group array.
 * \param [in/out] count Count of the event groups.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_ingress_mod_event_group_get_all(
    int unit,
    bcm_mirror_ingress_mod_event_group_t *group_array,
    int *count);

/*!
 * \brief Get events of an ingress mirror-on-drop event group.
 *
 * \param [in] unit Unit Number.
 * \param [in] group Event group.
 * \param [out] event_array Ingress mirror-on-drop events of the group.
 * \param [in/out] count Count of the events in the group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_ingress_mod_event_group_event_get(
    int unit,
    bcm_mirror_ingress_mod_event_group_t group,
    bcm_mirror_ingress_mod_event_t *event_array,
    int *count);

/*!
 * \brief Create an ingress mirror-on-drop event profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile Ingress mirror-on-drop event profile data.
 * \param [out] profile_id Profile id returned on success.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_ingress_mod_event_profile_create(
    int unit,
    bcm_mirror_ingress_mod_event_profile_t *profile,
    int *profile_id);

/*!
 * \brief Destroy an ingress mirror-on-drop event profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Ingress mirror-on-drop event profile id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_ingress_mod_event_profile_destroy(
    int unit,
    int profile_id);

/*!
 * \brief Get all ingress mirror-on-drop event profile ids.
 *
 * \param [in] unit Unit Number.
 * \param [out] profile_id_array Event profile id array.
 * \param [in/out] count Count of the event profiles.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_ingress_mod_event_profile_get_all(
    int unit,
    int *profile_id_array,
    int *count);

/*!
 * \brief Get an ingress mirror-on-drop event profile config.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Event profile id.
 * \param [out] profile Event profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_ingress_mod_event_profile_cfg_get(
    int unit,
    int profile_id,
    bcm_mirror_ingress_mod_event_profile_t *profile);

/*!
 * \brief Add an ingress mirror-on-drop event group to an event profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Event profile id.
 * \param [in] group Event group.
 * \param [in] hit Event group hit expectation.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_ingress_mod_event_profile_group_add(
    int unit,
    int profile_id,
    bcm_mirror_ingress_mod_event_group_t group,
    int hit);

/*!
 * \brief Delete an ingress mirror-on-drop event group to an event profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Event profile id.
 * \param [in] group Event group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_ingress_mod_event_profile_group_delete(
    int unit,
    int profile_id,
    bcm_mirror_ingress_mod_event_group_t group);

/*!
 * \brief Get all event groups of an ingress mirror-on-drop event profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Event profile id.
 * \param [out] group_array Event group array.
 * \param [in/out] count Count of the groups in the profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_ingress_mod_event_profile_group_get_all(
    int unit,
    int profile_id,
    bcm_mirror_ingress_mod_event_group_t *group_array,
    int *count);

/*!
 * \brief Get hit expectation of an ingress mirror-on-drop event group from an event profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Event profile id.
 * \param [in] group Event group array.
 * \param [out] hit Event group hit expectation.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_ingress_mod_event_profile_group_get(
    int unit,
    int profile_id,
    bcm_mirror_ingress_mod_event_group_t group,
    int *hit);

/*!
 * \brief Create a group of multiple destination IPv4 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [in] num_entries Number of entries of the group.
 * \param [in] ipv4_addr_array The addresses to be set for the group.
 * \param [out] group Multiple destination IP group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_multi_dip_group_ipv4_create(
    int unit,
    bcm_mirror_multi_dip_entry_num_t num_entries,
    bcm_ip_t *ipv4_addr_array,
    bcm_mirror_multi_dip_group_t *group);

/*!
 * \brief Remove a group of multiple destination IPv4 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [in] group Multiple destination IP group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_multi_dip_group_ipv4_destroy(
    int unit,
    bcm_mirror_multi_dip_group_t group);

/*!
 * \brief Get all groups of multiple destination IPv4 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [out] ipv4_group_array Number of entries of the group.
 * \param [in/out] count Count of the ipv4_groups.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_multi_dip_group_ipv4_get_all(
    int unit,
    bcm_mirror_multi_dip_group_t *ipv4_group_array,
    int *count);

/*!
 * \brief Get a group of multiple destination IPv4 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [in] group Multiple destination ip group.
 * \param [out] ipv4_addr_array The addresses of the group.
 * \param [in/out] count Count of addresses in the group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_multi_dip_group_ipv4_get(
    int unit,
    bcm_mirror_multi_dip_group_t group,
    bcm_ip_t *ipv4_addr_array,
    int *count);

/*!
 * \brief Create a group of multiple destination IPv6 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [in] num_entries Number of entries of the group.
 * \param [in] ipv6_addr_array The addresses to be set for the group.
 * \param [out] group Multiple destination IP group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_multi_dip_group_ipv6_create(
    int unit,
    bcm_mirror_multi_dip_entry_num_t num_entries,
    bcm_ip6_t *ipv6_addr_array,
    bcm_mirror_multi_dip_group_t *group);

/*!
 * \brief Remove a group of multiple destination IPv6 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [in] group Multiple destination IP group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_multi_dip_group_ipv6_destroy(
    int unit,
    bcm_mirror_multi_dip_group_t group);

/*!
 * \brief Get all groups of multiple destination IPv6 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [out] ipv6_group_array Number of entries of the group.
 * \param [in/out] count Count of the ipv6_groups.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_multi_dip_group_ipv6_get_all(
    int unit,
    bcm_mirror_multi_dip_group_t *ipv6_group_array,
    int *count);

/*!
 * \brief Get a group of multiple destination IPv6 addresses.
 *
 * \param [in] unit Unit Number.
 * \param [in] group Multiple destination ip group.
 * \param [out] ipv6_addr_array The addresses of the group.
 * \param [in/out] count Count of addresses in the group.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_multi_dip_group_ipv6_get(
    int unit,
    bcm_mirror_multi_dip_group_t group,
    bcm_ip6_t *ipv6_addr_array,
    int *count);

/*!
 * \brief Dump multiple destination IP allocators.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_multi_dip_dump(int unit);

/*!
 * \brief Mirror database initialization.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_db_init(int unit);

/*!
 * \brief Specify general mirror switch behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] type The desired switch control type.
 * \param [in] arg Value to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_switch_control_set(
    int unit,
    bcm_switch_control_t type,
    int arg);

/*!
 * \brief Retrieve general mirror switch behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] type The desired switch control type.
 * \param [out] arg Value to get.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_mirror_switch_control_get(
    int unit,
    bcm_switch_control_t type,
    int *arg);

#endif /* BCMINT_LTSW_MBCM_MIRROR_H */
