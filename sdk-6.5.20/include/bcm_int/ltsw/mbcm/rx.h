/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_MBCM_RX_H
#define BCMINT_LTSW_MBCM_RX_H

#include <bcm/rx.h>
#include <bcm/types.h>

#include <bcm_int/ltsw/rx_int.h>

/*!
 * \brief Add a CPU cos map.
 *
 * \param [in] unit Unit Number.
 * \param [in] options options
 * \param [in] rx_cosq_mapping rx cosq mapping ptr
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*rx_cosq_mapping_extended_add_f)(
    int unit,
    uint32 options,
    bcm_rx_cosq_mapping_t *rx_cosq_mapping);

/*!
 * \brief Delete a CPU cos map. 
 *
 * \param [in] unit Unit Number.
 * \param [in] rx_cosq_mapping rx cosq mapping ptr
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*rx_cosq_mapping_extended_delete_f)(
    int unit,
    bcm_rx_cosq_mapping_t *rx_cosq_mapping);

/*!
 * \brief Delete all CPU cos maps.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*rx_cosq_mapping_extended_delete_all_f)(int unit);

/*!
 * \brief Get packets to CPU COS queue mappings
 *
 * \param [in] unit Unit Number.
 * \param [out] rx_cosq_mapping rx cosq mapping ptr
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*rx_cosq_mapping_extended_get_f)(
    int unit,
    bcm_rx_cosq_mapping_t *rx_cosq_mapping);

/*!
 * \brief Get the associated rx channel with a given cosq
 *
 * \param [in] unit Unit Number.
 * \param [in] queue_id CPU cos queue index (0 - (max cosq - 1))
 * \param [out] chan_id channel index
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*rx_queue_channel_get_f)(
    int unit,
    bcm_cos_queue_t queue_id,
    bcm_rx_chan_t *chan_id);

/*!
 * \brief Assign a RX channel to a cosq
 *
 * \param [in] unit Unit Number.
 * \param [in] queue_id CPU cos queue index (0 - (max cosq - 1))
 * \param [in] chan_id channel index
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*rx_queue_channel_set_f)(
    int unit,
    bcm_cos_queue_t queue_id,
    bcm_rx_chan_t chan_id);

/*!
 * \brief Initialize the rx module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*rx_init_f)(int unit);

/*!
 * \brief Detach the rx module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*rx_detach_f)(int unit);

/*!
 * \brief rx map database initialization.
 *
 * \param [in] unit Unit Number.
 * \param [in|out] map_db rx map database.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*rx_map_db_init_f)(
    int unit,
    const bcmint_rx_map_db_t ** map_db);

/*!
 * \brief retrieve TM_COS_Q_CPU_MAP_INFO.
 *
 * \param [in] unit Unit Number.
 * \param [in] info_id cosq cpu map info id.
 * \param [out] info cosq cpu map info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*rx_tm_cos_q_cpu_map_info_get_f)(
    int unit,
    const char *info_id,
    bcmint_tm_cos_q_cpu_map_info_t *info);

/*!
 * \brief Rx driver structure.
 */
typedef struct mbcm_ltsw_rx_drv_s {

    /*! Add a CPU cos map. */
    rx_cosq_mapping_extended_add_f rx_cosq_mapping_extended_add;

    /*! Delete a CPU cos map.  */
    rx_cosq_mapping_extended_delete_f rx_cosq_mapping_extended_delete;

    /*! Delete all CPU cos maps. */
    rx_cosq_mapping_extended_delete_all_f rx_cosq_mapping_extended_delete_all;

    /*! Get packets to CPU COS queue mappings */
    rx_cosq_mapping_extended_get_f rx_cosq_mapping_extended_get;

    /*! Get the associated rx channel with a given cosq */
    rx_queue_channel_get_f rx_queue_channel_get;

    /*! Assign a RX channel to a cosq */
    rx_queue_channel_set_f rx_queue_channel_set;

    /*! Initialize the rx module. */
    rx_init_f rx_init;

    /*! Detach the rx module. */
    rx_detach_f rx_detach;

    /*! rx map database initialization. */
    rx_map_db_init_f rx_map_db_init;

    /*! retrieve TM_COS_Q_CPU_MAP_INFO. */
    rx_tm_cos_q_cpu_map_info_get_f rx_tm_cos_q_cpu_map_info_get;

} mbcm_ltsw_rx_drv_t;

/*!
 * \brief Set the RX driver of the device.
 *
 * \param [in] unit Unit Number.
 * \param [in] drv Rx driver to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_rx_drv_set(
    int unit,
    mbcm_ltsw_rx_drv_t *drv);

/*!
 * \brief Add a CPU cos map.
 *
 * \param [in] unit Unit Number.
 * \param [in] options options
 * \param [in] rx_cosq_mapping rx cosq mapping ptr
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_rx_cosq_mapping_extended_add(
    int unit,
    uint32 options,
    bcm_rx_cosq_mapping_t *rx_cosq_mapping);

/*!
 * \brief Delete a CPU cos map. 
 *
 * \param [in] unit Unit Number.
 * \param [in] rx_cosq_mapping rx cosq mapping ptr
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_rx_cosq_mapping_extended_delete(
    int unit,
    bcm_rx_cosq_mapping_t *rx_cosq_mapping);

/*!
 * \brief Delete all CPU cos maps.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_rx_cosq_mapping_extended_delete_all(int unit);

/*!
 * \brief Get packets to CPU COS queue mappings
 *
 * \param [in] unit Unit Number.
 * \param [out] rx_cosq_mapping rx cosq mapping ptr
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_rx_cosq_mapping_extended_get(
    int unit,
    bcm_rx_cosq_mapping_t *rx_cosq_mapping);

/*!
 * \brief Get the associated rx channel with a given cosq
 *
 * \param [in] unit Unit Number.
 * \param [in] queue_id CPU cos queue index (0 - (max cosq - 1))
 * \param [out] chan_id channel index
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_rx_queue_channel_get(
    int unit,
    bcm_cos_queue_t queue_id,
    bcm_rx_chan_t *chan_id);

/*!
 * \brief Assign a RX channel to a cosq
 *
 * \param [in] unit Unit Number.
 * \param [in] queue_id CPU cos queue index (0 - (max cosq - 1))
 * \param [in] chan_id channel index
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_rx_queue_channel_set(
    int unit,
    bcm_cos_queue_t queue_id,
    bcm_rx_chan_t chan_id);

/*!
 * \brief Initialize the rx module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_rx_init(int unit);

/*!
 * \brief Detach the rx module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_rx_detach(int unit);

/*!
 * \brief rx map database initialization.
 *
 * \param [in] unit Unit Number.
 * \param [in|out] map_db rx map database.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_rx_map_db_init(
    int unit,
    const bcmint_rx_map_db_t ** map_db);

/*!
 * \brief retrieve TM_COS_Q_CPU_MAP_INFO.
 *
 * \param [in] unit Unit Number.
 * \param [in] info_id cosq cpu map info id.
 * \param [out] info cosq cpu map info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_rx_tm_cos_q_cpu_map_info_get(
    int unit,
    const char *info_id,
    bcmint_tm_cos_q_cpu_map_info_t *info);

#endif /* BCMINT_LTSW_MBCM_RX_H */
