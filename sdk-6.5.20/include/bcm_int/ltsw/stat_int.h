/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_STAT_INT_H
#define BCMINT_LTSW_STAT_INT_H

#include <bcm/stat.h>
#include <bcm/types.h>

#include <sal/sal_types.h>

/*!
 * \brief SDKLT counter logical table information structure.
 */
typedef struct bcmint_stat_ctr_map_info_s {

    /*! SNMP type. */
    bcm_stat_val_t type;

    /*! LT table name. */
    const char *table_name;

    /*! LT field name. */
    const char *field_name;

    /*! True if the field value should be substracted. */
    bool minus;

} bcmint_stat_ctr_map_info_t;

/*!
 * \brief SDKLT counter logical table information structure.
 */
typedef struct bcmint_stat_map_info_s {

    /*! Stat type. */
    int type;

    /*! Logic table name. */
    const char *table;

    /*! Logic table field name. */
    const char *field;

} bcmint_stat_map_info_t;

/*!
 * \brief Structure for stat variant specific information.
 */
typedef struct bcmint_stat_db_s {

    /*! Drop event counter database. */
    const bcmint_stat_map_info_t *drop_event_table_info;

    /*! Num of elements in drop event counter database. */
    int num_drop_event;

    /*! Trace event counter database. */
    const bcmint_stat_map_info_t *trace_event_table_info;

    /*! Num of elements in trace event counter database. */
    int num_trace_event;

} bcmint_stat_db_t;

/*!
 * \brief Structure for stat device specific information.
 */
typedef struct bcmint_stat_dev_info_s {

    /*! Per-chip device information for stat counter. */
    const bcmint_stat_ctr_map_info_t *stat_ctr_table_info;

    /*! Number of stat counters. */
    const int num_stat_ctr;

    /*! Per-chip device information for stat debug counter. */
    const bcmint_stat_map_info_t *dbg_ctr_table_info;

    /*! Number of stat debug counters. */
    const int num_dbg_ctr;

} bcmint_stat_dev_info_t;

/*!
 * \brief Enum defines stat operations.
 */
typedef enum bcmint_stat_oper_s {

    /*! Stat get. */
    LTSW_STAT_GET = 0,

    /*! Stat set. */
    LTSW_STAT_SET = 1

} bcmint_stat_oper_t;

#define BCMINT_STAT_OPER_STR \
{ \
    "GET", \
    "SET" \
}

/*!
 * \brief Clear the port based counters with specified LT table name.
 *
 * \param [in] unit Unit Number.
 * \param [in] table_name Logic table name.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmint_stat_lt_counter_clear(
    int unit,
    const char *table_name,
    bcm_port_t port);

/*!
 * \brief Insert the port based counters with specified LT table name.
 *
 * \param [in] unit Unit Number.
 * \param [in] table_name Logic table name.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmint_stat_lt_counter_insert(
    int unit,
    const char *table_name,
    bcm_port_t port);

/*!
 * \brief Delete the port based counters with specified LT table name.
 *
 * \param [in] unit Unit Number.
 * \param [in] table_name Logic table name.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmint_stat_lt_counter_delete(
    int unit,
    const char *table_name,
    bcm_port_t port);

/*!
 * \brief Get the port based counters with specified LT table and field.
 *
 * \param [in] unit Unit Number.
 * \param [in] table_name Logic table name.
 * \param [in] field_name Logic table field name.
 * \param [in] port Port Number.
 * \param [in] entry_attr Sync mode.
 * \param [out] field_val 64-bit counter value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmint_stat_lt_counter_get(
    int unit,
    const char *table_name,
    const char *field_name,
    bcm_port_t port,
    uint32_t entry_attr,
    uint64_t *field_val);

#endif /* BCMINT_LTSW_STAT_INT_H */
