/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_XGS_ECN_H
#define BCMINT_LTSW_XGS_ECN_H

#include <bcm/ecn.h>
#include <bcm/types.h>

#include <sal/sal_types.h>

/*!
 * \brief Deinit ECN module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_deinit(int unit);

/*!
 * \brief Init ECN module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_init(int unit);

/*!
 * \brief Create MPLS ECN map.
 *
 * \param [in] unit Unit Number.
 * \param [in] flags flags.
 * \param [out] ecn_map_id ECN map ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_map_create(
    int unit,
    uint32_t flags,
    int *ecn_map_id);

/*!
 * \brief Destroy MPLS ECN map.
 *
 * \param [in] unit Unit Number.
 * \param [in] ecn_map_id ECN map ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_map_destroy(
    int unit,
    int ecn_map_id);

/*!
 * \brief Set MPLS ECN map.
 *
 * \param [in] unit Unit Number.
 * \param [in] options options, not used currently.
 * \param [in] ecn_map_id ECN map ID.
 * \param [in] ecn_map ECN mapping values.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_map_set(
    int unit,
    uint32_t options,
    int ecn_map_id,
    bcm_ecn_map_t *ecn_map);

/*!
 * \brief Get MPLS ECN map.
 *
 * \param [in] unit Unit Number.
 * \param [in] ecn_map_id ECN map ID.
 * \param [inout] ecn_map ECN mapping values.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_map_get(
    int unit,
    int ecn_map_id,
    bcm_ecn_map_t *ecn_map);

/*!
 * \brief To configure the value of responsive indication based on the IP protocol value.
 *
 * \param [in] unit Unit Number.
 * \param [in] ip_proto IP Protocol value.
 * \param [in] responsive Responsice indication.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_responsive_protocol_set(
    int unit,
    uint8 ip_proto,
    int responsive);

/*!
 * \brief To get the value of responsive indication based on the IP protocol value.
 *
 * \param [in] unit Unit Number.
 * \param [in] ip_proto IP Protocol value.
 * \param [inout] responsive Responsice indication.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_responsive_protocol_get(
    int unit,
    uint8 ip_proto,
    int *responsive);

/*!
 * \brief To get an ECN mapping info from a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port gport.
 * \param [inout] ecn_map ECN mapping values.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_port_map_get(
    int unit,
    bcm_gport_t port,
    bcm_ecn_port_map_t *ecn_map);

/*!
 * \brief To set an ECN mapping info to a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port gport.
 * \param [inout] ecn_map ECN mapping values.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_port_map_set(
    int unit,
    bcm_gport_t port,
    bcm_ecn_port_map_t *ecn_map);

/*!
 * \brief To get an ECN mapping type.
 *
 * \param [in] unit Unit Number.
 * \param [in] flags Indicates the operation by BCM_ECN_TYPE_MAP_XXX flags.
 * \param [out] map ECN type map structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_type_map_get(
    int unit,
    uint32_t flags,
    bcm_ecn_type_map_t *map);

/*!
 * \brief To set an ECN mapping type.
 *
 * \param [in] unit Unit Number.
 * \param [in] flags Indicates the operation by BCM_ECN_TYPE_MAP_XXX flags.
 * \param [in] map ECN type map structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_type_map_set(
    int unit,
    uint32_t flags,
    bcm_ecn_type_map_t *map);

/*!
 * \brief Resolve ECN map ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] ecn_map_id ECN map ID.
 * \param [out] ecn_map_type ECN map type.
 * \param [out] prof_id ECN map profile ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_map_id_resolve(
    int unit,
    int ecn_map_id,
    int *ecn_map_type,
    uint32_t *prof_id);

/*!
 * \brief Construct ECN map ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] ecn_map_type ECN map type.
 * \param [in] prof_id ECN map profile ID.
 * \param [out] ecn_map_id ECN map ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_map_id_construct(
    int unit,
    int ecn_map_type,
    uint32_t prof_id,
    int *ecn_map_id);

/*!
 * \brief To set the mapped internal congestion notification (int_cn) value.
 *
 * \param [in] unit Unit Number.
 * \param [in] map Internal congestion notification map.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_traffic_map_set(
    int unit,
    bcm_ecn_traffic_map_info_t *map);

/*!
 * \brief To get the mapped internal congestion notification (int_cn) value.
 *
 * \param [in] unit Unit Number.
 * \param [inout] map Internal congestion notification map.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_traffic_map_get(
    int unit,
    bcm_ecn_traffic_map_info_t *map);

/*!
 * \brief To set the ECN enqueue action.
 *
 * \param [in] unit Unit Number.
 * \param [in] ecn_config ECN traffic action configuration.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_action_enqueue_set(
    int unit,
    bcm_ecn_traffic_action_config_t *ecn_config);

/*!
 * \brief To get the ECN enqueue action.
 *
 * \param [in] unit Unit Number.
 * \param [inout] ecn_config ECN traffic action configuration.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_action_enqueue_get(
    int unit,
    bcm_ecn_traffic_action_config_t *ecn_config);

/*!
 * \brief To set the ECN dequeue action.
 *
 * \param [in] unit Unit Number.
 * \param [in] ecn_config ECN traffic action configuration.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_action_dequeue_set(
    int unit,
    bcm_ecn_traffic_action_config_t *ecn_config);

/*!
 * \brief To get the ECN dequeue action.
 *
 * \param [in] unit Unit Number.
 * \param [inout] ecn_config ECN traffic action configuration.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_action_dequeue_get(
    int unit,
    bcm_ecn_traffic_action_config_t *ecn_config);

/*!
 * \brief To set the ECN egress action.
 *
 * \param [in] unit Unit Number.
 * \param [in] ecn_config ECN traffic action configuration.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_action_egress_set(
    int unit,
    bcm_ecn_traffic_action_config_t *ecn_config);

/*!
 * \brief To get the ECN egress action.
 *
 * \param [in] unit Unit Number.
 * \param [inout] ecn_config ECN traffic action configuration.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_action_egress_get(
    int unit,
    bcm_ecn_traffic_action_config_t *ecn_config);

/*!
 * \brief To set the ECN egress action.
 *
 * \param [in] unit Unit Number.
 * \param [in] ecn_config ECN traffic action configuration.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_action_latency_dequeue_set(
    int unit,
    bcm_ecn_traffic_action_config_t *ecn_config);

/*!
 * \brief To get the ECN egress action.
 *
 * \param [in] unit Unit Number.
 * \param [inout] ecn_config ECN traffic action configuration.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_action_latency_dequeue_get(
    int unit,
    bcm_ecn_traffic_action_config_t *ecn_config);

/*!
 * \brief To set the default responsive value for Non-TCP packets.
 *
 * \param [in] unit Unit Number.
 * \param [in] value Default responsive value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_responsive_default_set(
    int unit,
    int value);

/*!
 * \brief To get the default responsive value for Non-TCP packets.
 *
 * \param [in] unit Unit Number.
 * \param [out] value Returned default responsive value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_responsive_default_get(
    int unit,
    int *value);

/*!
 * \brief Enable or disable one field ECN control table.
 *
 * \param [in] unit Unit Number.
 * \param [in] lt_name ecn_ctrl_name LT name.
 * \param [in] lt_fld_name ecn_ctrl_fld LT field name.
 * \param [in] val value set in the field.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_ctrl_set(
    int unit,
    const char *lt_name,
    const char *lt_fld_name,
    int val);

/*!
 * \brief Get status ECN control table.
 *
 * \param [in] unit Unit Number.
 * \param [in] lt_name ecn_ctrl_name LT name.
 * \param [in] lt_fld_name ecn_ctrl_fld LT field name.
 * \param [in] val value get in the field.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_ctrl_get(
    int unit,
    const char *lt_name,
    const char *lt_fld_name,
    int *val);

/*!
 * \brief Traverse all specified ECN type maps.
 *
 * \param [in] unit Unit Number.
 * \param [in] flags BCM_ECN_TYPE_MAP_XXX flags.
 * \param [in] cb User callback function.
 * \param [in] user_data User data to be passed to callback function.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_ecn_type_map_traverse(
    int unit,
    uint32_t flags,
    bcm_ecn_type_map_traverse_cb cb,
    void *user_data);

#endif /* BCMINT_LTSW_XGS_ECN_H */
