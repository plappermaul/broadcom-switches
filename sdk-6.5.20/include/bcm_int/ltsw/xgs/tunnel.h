/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_XGS_TUNNEL_H
#define BCMINT_LTSW_XGS_TUNNEL_H

#include <bcm/types.h>
#include <bcm/tunnel.h>
#include <bcm_int/ltsw/flexctr.h>
#include <bcm_int/ltsw/tunnel.h>

#include <sal/sal_types.h>

/*!
 * \brief Init tunnel module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_init(int unit);

/*!
 * \brief Free tunnel module resources.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_free_resource(int unit);

/*!
 * \brief Get a tunnel initiator entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] intf L3 interface info. (ONLY ifindex used to identify interface).
 * \param [in] tunnel_id Tunnel ID.
 * \param [out] tnl_info Tunnel initiator information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_initiator_get(
    int unit,
    bcm_l3_intf_t *intf,
    bcm_gport_t tunnel_id,
    bcm_tunnel_initiator_t *tnl_info);

/*!
 * \brief Traverse L3 IP tunnel initiator entries.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb User callback function, called once per valid entry.
 * \param [in] user_data User supplied cookie used in callback function.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_initiator_traverse(
    int unit,
    bcm_tunnel_initiator_traverse_cb cb,
    void *user_data);

/*!
 * \brief Set the tunnel initiator property for the given L3 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] intf L3 interface info. (ONLY ifindex used to identify interface).
 * \param [in] tnl_info Tunnel initiator information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_initiator_set(
    int unit,
    bcm_l3_intf_t *intf,
    bcm_tunnel_initiator_t *tnl_info);

/*!
 * \brief Delete the tunnel association for the given L3 interface.
 *
 * \param [in] unit Unit Number.
 * \param [in] intf L3 interface info. (ONLY ifindex used to identify interface).
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_initiator_clear(
    int unit,
    bcm_l3_intf_t *intf);

/*!
 * \brief Add a tunnel terminator entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] tnl_term_info L3 tunnel terminator information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_terminator_add(
    int unit,
    bcm_tunnel_terminator_t *tnl_term_info);

/*!
 * \brief Get a tunnel terminator entry.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] tnl_term_info Lookup key and tunnel terminator information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_terminator_get(
    int unit,
    bcm_tunnel_terminator_t *tnl_term_info);

/*!
 * \brief Delete a tunnel terminator entry.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] tnl_term_info Tunnel terminator parameters.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_terminator_delete(
    int unit,
    bcm_tunnel_terminator_t *tnl_term_info);

/*!
 * \brief Traverse L3 tunnel terminator entries.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb User callback function, called once per valid entry.
 * \param [in] user_data User supplied cookie used in callback function.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_terminator_traverse(
    int unit,
    bcm_tunnel_terminator_traverse_cb cb,
    void *user_data);

/*!
 * \brief Attach counters entries to the given tunnel.
 *
 * \param [in] unit Unit Number.
 * \param [in] terminator Tunnel terminator.
 * \param [in] info Flex counter information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_terminator_stat_attach(
    int unit,
    bcm_tunnel_terminator_t *terminator,
    bcmi_ltsw_flexctr_counter_info_t *info);

/*!
 * \brief Detach counters entries to the given tunnel.
 *
 * \param [in] unit Unit Number.
 * \param [in] terminator Tunnel terminator.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_terminator_stat_detach(
    int unit,
    bcm_tunnel_terminator_t *terminator);

/*!
 * \brief Set flex counter object value for the given tunnel.
 *
 * \param [in] unit Unit Number.
 * \param [in] terminator Tunnel terminator.
 * \param [in] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_terminator_flexctr_object_set(
    int unit,
    bcm_tunnel_terminator_t *terminator,
    uint32 value);

/*!
 * \brief Get flex counter object value for the given tunnel.
 *
 * \param [in] unit Unit Number.
 * \param [in] terminator Tunnel terminator.
 * \param [out] value The flex counter object value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_terminator_flexctr_object_get(
    int unit,
    bcm_tunnel_terminator_t *terminator,
    uint32 *value);

/*!
 * \brief Get flex counter information for the given tunnel.
 *
 * \param [in] unit Unit Number.
 * \param [in] terminator Tunnel terminator.
 * \param [out] info The flex counter information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_terminator_flexctr_info_get(
    int unit,
    bcm_tunnel_terminator_t *terminator,
    bcmi_ltsw_flexctr_counter_info_t *info);

/*!
 * \brief Check if tunnel type is supported on a device.
 *
 * \param [in] unit Unit Number.
 * \param [in] tnl_type Tunnel type to check.
 * \param [out] tunnel_term Type supported as tunnel terminator.
 * \param [out] tunnel_init Type supported as tunnel initiator.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_type_support_check(
    int unit,
    bcm_tunnel_type_t tnl_type,
    int *tunnel_term,
    int *tunnel_init);

/*!
 * \brief Specify tunnel switch control behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] control The desired configuration parameter to modify.
 * \param [in] value The value with which to set the parameter.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_control_set(
    int unit,
    bcmi_ltsw_tunnel_control_t control,
    uint32_t value);

/*!
 * \brief Retrieve tunnel switch control behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] control The desired configuration parameter to retrieve.
 * \param [out] value Pointer to where the retrieved value will be written.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_control_get(
    int unit,
    bcmi_ltsw_tunnel_control_t control,
    uint32_t *value);

/*!
 * \brief Set the global tunnel property.
 *
 * \param [in] unit Unit Number.
 * \param [in] tconfig Global information about the L3 tunneling config.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_config_set(
    int unit,
    bcm_tunnel_config_t *tconfig);

/*!
 * \brief Get the global tunnel property.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] tconfig Global information about the L3 tunneling config.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_config_get(
    int unit,
    bcm_tunnel_config_t *tconfig);

/*!
 * \brief Add tunnel decap port profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] entry Decap port profile.
 * \param [out] index Index of sequence number profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_decap_port_profile_add(
    int unit,
    bcmi_ltsw_tunnel_decap_port_profile_t *entry,
    int *index);

/*!
 * \brief Get tunnel decap port profile.
 *
 * \param [in] unit Unit Number.
 * \param [out] entry Get tunnel decap port profile.
 * \param [in] index Index of sequence number profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_decap_port_profile_get(
    int unit,
    bcmi_ltsw_tunnel_decap_port_profile_t *entry,
    int index);

/*!
 * \brief Delete tunnel decap port profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Index of sequence number profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_decap_port_profile_delete(
    int unit,
    int index);

/*!
 * \brief Recover tunnel decap port profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Index of sequence number profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_tunnel_decap_port_profile_recover(
    int unit,
    int index);

#endif /* BCMINT_LTSW_XGS_TUNNEL_H */
