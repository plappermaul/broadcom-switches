#ifndef BCMINT_SC_DEFS_H
#define BCMINT_SC_DEFS_H
/*******************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the tools/ltsw/switch/ configuration file.
 * Edits to this file will be lost when it is regenerated.
 *
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *
 * Definition file for switch control implementation.
 */

/*! Device-wide switch control set function prototype. */
typedef int (*sc_set_f)(int unit, int arg);

/*! Device-wide switch control get function prototype. */
typedef int (*sc_get_f)(int unit, int *arg);

/*! Port base switch control set function prototype. */
typedef int (*scp_set_f)(int unit, int port, int arg);

/*! Port base switch control get function prototype. */
typedef int (*scp_get_f)(int unit, int port, int *arg);

/*! Encode argument to setting value */
typedef int (*sc_arg_encode_f)(int unit, int port, int arg,
                                      uint64_t *val);

/*! Decode getting value to argment */
typedef int (*sc_arg_decode_f)(int unit, int port, uint64_t val,
                                      int *arg);

/*! Map device-wide functions to a switch control type. */
#define SC_FUNC(_m) {_m, sc_##_m##_set, sc_##_m##_get}

/*! Map per port functions to a switch control type. */
#define SCP_FUNC(_m) {_m, scp_##_m##_set, scp_##_m##_get}

/*! Device-wide function mapping list */
#define SC_FUNC_LIST \
    {-1, NULL, NULL}, \
    SC_FUNC(bcmSwitchAlternateStoreForward), \
    SC_FUNC(bcmSwitchEccSingleBitErrorEvent), \
    SC_FUNC(bcmSwitchEcmpDynamicSampleRate), \
    SC_FUNC(bcmSwitchEcmpDynamicEgressBytesMinThreshold), \
    SC_FUNC(bcmSwitchEcmpDynamicEgressBytesMaxThreshold), \
    SC_FUNC(bcmSwitchEcmpDynamicQueuedBytesMinThreshold), \
    SC_FUNC(bcmSwitchEcmpDynamicQueuedBytesMaxThreshold), \
    SC_FUNC(bcmSwitchEcmpDynamicPhysicalQueuedBytesMinThreshold), \
    SC_FUNC(bcmSwitchEcmpDynamicPhysicalQueuedBytesMaxThreshold), \
    SC_FUNC(bcmSwitchEcmpDynamicEgressBytesExponent), \
    SC_FUNC(bcmSwitchEcmpDynamicQueuedBytesExponent), \
    SC_FUNC(bcmSwitchEcmpDynamicPhysicalQueuedBytesExponent), \
    SC_FUNC(bcmSwitchEcmpDynamicEgressBytesDecreaseReset), \
    SC_FUNC(bcmSwitchEcmpDynamicQueuedBytesDecreaseReset), \
    SC_FUNC(bcmSwitchEcmpDynamicPhysicalQueuedBytesDecreaseReset), \
    SC_FUNC(bcmSwitchEcmpDynamicRandomSeed), \
    SC_FUNC(bcmSwitchDlbMonitorIngressRandomSeed), \
    SC_FUNC(bcmSwitchHashMultipath), \
    SC_FUNC(bcmSwitchHashControl), \
    SC_FUNC(bcmSwitchHashUseFlowSelEcmp), \
    SC_FUNC(bcmSwitchHashUseFlowSelEntropy), \
    SC_FUNC(bcmSwitchMacroFlowEcmpHashConcatEnable), \
    SC_FUNC(bcmSwitchECMPHashBitCountSelect), \
    SC_FUNC(bcmSwitchHashUseFlowSelEcmpOverlay), \
    SC_FUNC(bcmSwitchHashUseFlowSelL2Ecmp), \
    SC_FUNC(bcmSwitchHashUseFlowSelL2EcmpOverlay), \
    SC_FUNC(bcmSwitchHashUseFlowSelEcmpResilientHash), \
    SC_FUNC(bcmSwitchHashUseFlowSelEcmpOverlayResilientHash), \
    SC_FUNC(bcmSwitchHashUseFlowSelEcmpWeightedOverlay), \
    SC_FUNC(bcmSwitchHashUseFlowSelMplsEcmpOverlay), \
    SC_FUNC(bcmSwitchEcnNonIpResponsive), \
    SC_FUNC(bcmSwitchEcnNonIpIntCongestionNotification), \
    SC_FUNC(bcmSwitchMplsNonIpPayloadDefaultEcn), \
    SC_FUNC(bcmSwitchEcnIpPayloadResponsive), \
    SC_FUNC(bcmSwitchL2StaticMoveToCpu), \
    SC_FUNC(bcmSwitchUnknownMcastToCpu), \
    SC_FUNC(bcmSwitchUnknownUcastToCpu), \
    SC_FUNC(bcmSwitchSourceRouteToCpu), \
    SC_FUNC(bcmSwitchL2NonStaticMoveToCpu), \
    SC_FUNC(bcmSwitchSourceMacZeroDrop), \
    SC_FUNC(bcmSwitchDhcpLearn), \
    SC_FUNC(bcmSwitchL2HitClear), \
    SC_FUNC(bcmSwitchL2SrcHitClear), \
    SC_FUNC(bcmSwitchL2DstHitClear), \
    SC_FUNC(bcmSwitchL2SourceDiscardMoveToCpu), \
    SC_FUNC(bcmSwitchL2DstHitEnable), \
    SC_FUNC(bcmSwitchHWL2Freeze), \
    SC_FUNC(bcmSwitchParityErrorToCpu), \
    SC_FUNC(bcmSwitchSharedVlanL2McastEnable), \
    SC_FUNC(bcmSwitchMcastUnknownErrToCpu), \
    SC_FUNC(bcmSwitchNonIpL3ErrToCpu), \
    SC_FUNC(bcmSwitchUnknownL3DestToCpu), \
    SC_FUNC(bcmSwitchIpmcPortMissToCpu), \
    SC_FUNC(bcmSwitchIpmcErrorToCpu), \
    SC_FUNC(bcmSwitchV6L3ErrToCpu), \
    SC_FUNC(bcmSwitchV6L3DstMissToCpu), \
    SC_FUNC(bcmSwitchV6L3LocalLinkDrop), \
    SC_FUNC(bcmSwitchV4L3ErrToCpu), \
    SC_FUNC(bcmSwitchV4L3DstMissToCpu), \
    SC_FUNC(bcmSwitchMartianAddrToCpu), \
    SC_FUNC(bcmSwitchL3UcTtlErrToCpu), \
    SC_FUNC(bcmSwitchL3SlowpathToCpu), \
    SC_FUNC(bcmSwitchIpmcTtlErrToCpu), \
    SC_FUNC(bcmSwitchL3MtuFailToCpu), \
    SC_FUNC(bcmSwitchIgmpReservedMcastEnable), \
    SC_FUNC(bcmSwitchMldReservedMcastEnable), \
    SC_FUNC(bcmSwitchMldDirectAttachedOnly), \
    SC_FUNC(bcmSwitchUnknownIpmcAsMcast), \
    SC_FUNC(bcmSwitchTunnelUnknownIpmcDrop), \
    SC_FUNC(bcmSwitchIpmcTtl1ToCpu), \
    SC_FUNC(bcmSwitchL3UcastTtl1ToCpu), \
    SC_FUNC(bcmSwitchL3RouteHitClear), \
    SC_FUNC(bcmSwitchL3HostHitClear), \
    SC_FUNC(bcmSwitchIpmcSameVlanPruning), \
    SC_FUNC(bcmSwitchL3SrcHitEnable), \
    SC_FUNC(bcmSwitchFlexIP6ExtHdr), \
    SC_FUNC(bcmSwitchFlexIP6ExtHdrEgress), \
    SC_FUNC(bcmSwitchV6L3SrcDstLocalLinkDropCancel), \
    SC_FUNC(bcmSwitchIgmpUcastEnable), \
    SC_FUNC(bcmSwitchMldUcastEnable), \
    SC_FUNC(bcmSwitchIp4McastL2DestCheck), \
    SC_FUNC(bcmSwitchIp6McastL2DestCheck), \
    SC_FUNC(bcmSwitchIpmcSameVlanL3Route), \
    SC_FUNC(bcmSwitchWESPProtocolEnable), \
    SC_FUNC(bcmSwitchWESPProtocol), \
    SC_FUNC(bcmSwitchHashField0PreProcessEnable), \
    SC_FUNC(bcmSwitchHashField1PreProcessEnable), \
    SC_FUNC(bcmSwitchHashField0Config), \
    SC_FUNC(bcmSwitchHashField0Config1), \
    SC_FUNC(bcmSwitchHashField1Config), \
    SC_FUNC(bcmSwitchHashField1Config1), \
    SC_FUNC(bcmSwitchMacroFlowHashFieldConfig), \
    SC_FUNC(bcmSwitchHashSelectControl), \
    SC_FUNC(bcmSwitchHashIP4Field0), \
    SC_FUNC(bcmSwitchHashIP4Field1), \
    SC_FUNC(bcmSwitchHashIP4TcpUdpField0), \
    SC_FUNC(bcmSwitchHashIP4TcpUdpField1), \
    SC_FUNC(bcmSwitchHashIP4TcpUdpPortsEqualField0), \
    SC_FUNC(bcmSwitchHashIP4TcpUdpPortsEqualField1), \
    SC_FUNC(bcmSwitchHashIP6Field0), \
    SC_FUNC(bcmSwitchHashIP6Field1), \
    SC_FUNC(bcmSwitchHashIP6TcpUdpField0), \
    SC_FUNC(bcmSwitchHashIP6TcpUdpField1), \
    SC_FUNC(bcmSwitchHashIP6TcpUdpPortsEqualField0), \
    SC_FUNC(bcmSwitchHashIP6TcpUdpPortsEqualField1), \
    SC_FUNC(bcmSwitchHashL2Field0), \
    SC_FUNC(bcmSwitchHashL2Field1), \
    SC_FUNC(bcmSwitchHashField0OverlayCntagRpidEnable), \
    SC_FUNC(bcmSwitchHashField1OverlayCntagRpidEnable), \
    SC_FUNC(bcmSwitchHashField0Ip6FlowLabel), \
    SC_FUNC(bcmSwitchHashField1Ip6FlowLabel), \
    SC_FUNC(bcmSwitchMacroFlowEcmpUnderlayHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowHashStrideOffset), \
    SC_FUNC(bcmSwitchHashL3MPLSField0), \
    SC_FUNC(bcmSwitchHashL3MPLSField1), \
    SC_FUNC(bcmSwitchHashMPLSTunnelField0), \
    SC_FUNC(bcmSwitchHashMPLSTunnelField1), \
    SC_FUNC(bcmSwitchMplsPortIndependentLowerRange1), \
    SC_FUNC(bcmSwitchMplsPortIndependentUpperRange1), \
    SC_FUNC(bcmSwitchMplsPortIndependentLowerRange2), \
    SC_FUNC(bcmSwitchMplsPortIndependentUpperRange2), \
    SC_FUNC(bcmSwitchMacroFlowLoadBalanceHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowTrunkHashConcatEnable), \
    SC_FUNC(bcmSwitchHashIP6AddrCollapseSelect0), \
    SC_FUNC(bcmSwitchHashIP6AddrCollapseSelect1), \
    SC_FUNC(bcmSwitchSymmetricHashControl), \
    SC_FUNC(bcmSwitchUdfHashEnable), \
    SC_FUNC(bcmSwitchHashMPLSUseLabelStack), \
    SC_FUNC(bcmSwitchHashIP6NextHeaderUseExtensionHeader0), \
    SC_FUNC(bcmSwitchHashGtpTeidEnable0), \
    SC_FUNC(bcmSwitchHashGtpTeidEnable1), \
    SC_FUNC(bcmSwitchMacroFlowTrunkHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowLoadBalanceEntropyHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowLoadBalanceEntropyHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowLoadBalanceEntropyHashStrideOffset), \
    SC_FUNC(bcmSwitchHashMPLSExcludeReservedLabel), \
    SC_FUNC(bcmSwitchMacroFlowEcmpDynamicHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpDynamicHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpDynamicHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpDynamicHashConcatEnable), \
    SC_FUNC(bcmSwitchHashUseFlowSelEcmpWeighted), \
    SC_FUNC(bcmSwitchMacroFlowEcmpWeightedHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowEcmpWeightedHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpWeightedHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpWeightedHashMinOffset), \
    SC_FUNC(bcmSwitchECMPRandomSeed), \
    SC_FUNC(bcmSwitchHashVersatileInitValue0), \
    SC_FUNC(bcmSwitchHashVersatileInitValue1), \
    SC_FUNC(bcmSwitchHash0VersatileInitValue0), \
    SC_FUNC(bcmSwitchHash0VersatileInitValue1), \
    SC_FUNC(bcmSwitchHash1VersatileInitValue0), \
    SC_FUNC(bcmSwitchHash1VersatileInitValue1), \
    SC_FUNC(bcmSwitchHashSeed0), \
    SC_FUNC(bcmSwitchHashSeed1), \
    SC_FUNC(bcmSwitchECMPLevel1RandomSeed), \
    SC_FUNC(bcmSwitchECMPLevel2RandomSeed), \
    SC_FUNC(bcmSwitchMacroFlowEcmpResilientHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowEcmpResilientHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpResilientHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpResilientHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpOverlayResilientHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowEcmpOverlayResilientHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpOverlayResilientHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpOverlayResilientHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpMplsHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowEcmpMplsHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpMplsHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpMplsHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpOverlayMplsHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowEcmpOverlayMplsHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpOverlayMplsHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpOverlayMplsHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkFailoverHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowTrunkFailoverHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkFailoverHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkFailoverHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowL2EcmpHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowL2EcmpHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowL2EcmpHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowL2EcmpHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowL2EcmpOverlayHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowL2EcmpOverlayHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowL2EcmpOverlayHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowL2EcmpOverlayHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkUnicastHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowTrunkUnicastHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkUnicastHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkUnicastHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkNonUnicastHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowTrunkNonUnicastHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkNonUnicastHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowTrunkNonUnicastHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpWeightedOverlayHashConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowEcmpWeightedOverlayHashMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpWeightedOverlayHashMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpWeightedOverlayHashStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowEcmpHashOverlayConcatEnable), \
    SC_FUNC(bcmSwitchMacroFlowHashOverlayMinOffset), \
    SC_FUNC(bcmSwitchMacroFlowHashOverlayMaxOffset), \
    SC_FUNC(bcmSwitchMacroFlowHashOverlayStrideOffset), \
    SC_FUNC(bcmSwitchMacroFlowECMPHashSeed), \
    SC_FUNC(bcmSwitchMacroFlowECMPOverlayHashSeed), \
    SC_FUNC(bcmSwitchMacroFlowLoadBalanceHashSeed), \
    SC_FUNC(bcmSwitchMacroFlowECMPUnderlayHashSeed), \
    SC_FUNC(bcmSwitchMacroFlowTrunkHashSeed), \
    SC_FUNC(bcmSwitchSampleVersion), \
    SC_FUNC(bcmSwitchSampleIngressRandomSeed), \
    SC_FUNC(bcmSwitchSampleEgressRandomSeed), \
    SC_FUNC(bcmSwitchMirrorPktChecksEnable), \
    SC_FUNC(bcmSwitchMirrorUnicastCosq), \
    SC_FUNC(bcmSwitchMirrorMulticastCosq), \
    SC_FUNC(bcmSwitchSampleFlexRandomSeed), \
    SC_FUNC(bcmSwitchMirrorPsampFormat2Epoch), \
    SC_FUNC(bcmSwitchMirrorCpuCosq), \
    SC_FUNC(bcmSwitchMirrorPsampIpfixVersion), \
    SC_FUNC(bcmSwitchPFCDeadlockRecoveryAction), \
    SC_FUNC(bcmSwitchBstSnapshotEnable), \
    SC_FUNC(bcmSwitchBstEnable), \
    SC_FUNC(bcmSwitchBstTrackingMode), \
    SC_FUNC(bcmSwitchRateLimitLinear), \
    SC_FUNC(bcmSwitchTunnelIp4IdShared), \
    SC_FUNC(bcmSwitchTunnelErrToCpu), \
    SC_FUNC(bcmSwitchMplsLabelMissToCpu), \
    SC_FUNC(bcmSwitchMplsTtlErrToCpu), \
    SC_FUNC(bcmSwitchMplsInvalidL3PayloadToCpu), \
    SC_FUNC(bcmSwitchMplsInvalidActionToCpu), \
    SC_FUNC(bcmSwitchMplsGalAlertLabelToCpu), \
    SC_FUNC(bcmSwitchMplsRalAlertLabelToCpu), \
    SC_FUNC(bcmSwitchMplsIllegalReservedLabelToCpu), \
    SC_FUNC(bcmSwitchMplsUnknownAchTypeToCpu), \
    SC_FUNC(bcmSwitchMplsUnknownAchVersionToCpu), \
    SC_FUNC(bcmSwitchMplsPWControlWordToCpu), \
    SC_FUNC(bcmSwitchHashUseFlowSelMplsEcmp), \
    SC_FUNC(bcmSwitchHashUseFlowSelTrunkUc), \
    SC_FUNC(bcmSwitchHashUseFlowSelTrunkNonUnicast), \
    SC_FUNC(bcmSwitchUnknownVlanToCpu), \
    SC_FUNC(bcmSwitchSharedVlanMismatchToCpu), \
    SC_FUNC(bcmSwitchMcastFloodDefault), \
    SC_FUNC(bcmSwitchBpduInvalidVlanDrop), \
    SC_FUNC(bcmSwitchMirrorInvalidVlanDrop), \
    SC_FUNC(bcmSwitchSharedVlanEnable), \
    SC_FUNC(bcmSwitchSnapNonZeroOui), \
    SC_FUNC(bcmSwitchEgressStgCheckIngressEnable), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthL2), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthMpls), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthL3Tunnel), \
    SC_FUNC(bcmSwitchHashMultiMoveDepthExactMatch), \
    SC_FUNC(bcmSwitchIntVectorMatchMissAction), \
    SC_FUNC(bcmSwitchIntEgressTimeDelta), \
    SC_FUNC(bcmSwitchIntSwitchId), \
    SC_FUNC(bcmSwitchIfaVersion), \
    SC_FUNC(bcmSwitchIfaProtocol), \
    SC_FUNC(bcmSwitchIoamGreProtocolParse), \
    SC_FUNC(bcmSwitchIoamGreProtocol), \
    SC_FUNC(bcmSwitchIoamOptionIncrementalParse), \
    SC_FUNC(bcmSwitchIoamOptionIncremental), \
    SC_FUNC(bcmSwitchIoamType), \
    SC_FUNC(bcmSwitchIntVersion), \
    SC_FUNC(bcmSwitchIntL4DestPort1), \
    SC_FUNC(bcmSwitchIntL4DestPort2), \
    SC_FUNC(bcmSwitchIntProbeMarker1), \
    SC_FUNC(bcmSwitchIntProbeMarker2), \
    SC_FUNC(bcmSwitchIntTurnAroundCpuEnable), \
    SC_FUNC(bcmSwitchIntHopLimitCpuEnable), \
    SC_FUNC(bcmSwitchVxlanUdpSrcPortSelect), \
    SC_FUNC(bcmSwitchVxlanUdpDestPortSet), \
    SC_FUNC(bcmSwitchVxlanTunnelMissToCpu), \
    SC_FUNC(bcmSwitchVxlanVnIdMissToCpu), \
    SC_FUNC(bcmSwitchVxlanHeaderFlags), \
    SC_FUNC(bcmSwitchVxlanHeaderReserved1), \
    SC_FUNC(bcmSwitchVxlanHeaderReserved2), \
    SC_FUNC(bcmSwitchVxlanHeaderMatchFlags), \
    SC_FUNC(bcmSwitchVxlanHeaderFlagsMask), \
    SC_FUNC(bcmSwitchVxlanHeaderFlagsMismatchDrop), \
    SC_FUNC(bcmSwitchTimesyncLiveWireToD), \
    SC_FUNC(bcmSwitchTimesyncEgressVersion), \
    SC_FUNC(bcmSwitchTimesyncIngressVersion), \
    SC_FUNC(bcmSwitchNtpL4DestPort), \
    SC_FUNC(bcmSwitchFlowCountFlexCtrIngAction), \

/*! Per port function mapping list.*/
#define SCP_FUNC_LIST \
    {-1, NULL, NULL}, \
    SCP_FUNC(bcmSwitchArpReplyToCpu), \
    SCP_FUNC(bcmSwitchArpReplyDrop), \
    SCP_FUNC(bcmSwitchArpRequestToCpu), \
    SCP_FUNC(bcmSwitchArpRequestDrop), \
    SCP_FUNC(bcmSwitchNdPktToCpu), \
    SCP_FUNC(bcmSwitchNdPktDrop), \
    SCP_FUNC(bcmSwitchMcastFloodBlocking), \
    SCP_FUNC(bcmSwitchIgmpPktToCpu), \
    SCP_FUNC(bcmSwitchIgmpPktDrop), \
    SCP_FUNC(bcmSwitchDhcpPktToCpu), \
    SCP_FUNC(bcmSwitchDhcpPktDrop), \
    SCP_FUNC(bcmSwitchMldPktToCpu), \
    SCP_FUNC(bcmSwitchMldPktDrop), \
    SCP_FUNC(bcmSwitchV4ResvdMcPktToCpu), \
    SCP_FUNC(bcmSwitchV4ResvdMcPktDrop), \
    SCP_FUNC(bcmSwitchV4ResvdMcPktFlood), \
    SCP_FUNC(bcmSwitchV6ResvdMcPktToCpu), \
    SCP_FUNC(bcmSwitchV6ResvdMcPktDrop), \
    SCP_FUNC(bcmSwitchV6ResvdMcPktFlood), \
    SCP_FUNC(bcmSwitchIgmpReportLeaveToCpu), \
    SCP_FUNC(bcmSwitchIgmpReportLeaveDrop), \
    SCP_FUNC(bcmSwitchIgmpReportLeaveFlood), \
    SCP_FUNC(bcmSwitchIgmpQueryToCpu), \
    SCP_FUNC(bcmSwitchIgmpQueryDrop), \
    SCP_FUNC(bcmSwitchIgmpQueryFlood), \
    SCP_FUNC(bcmSwitchIgmpUnknownToCpu), \
    SCP_FUNC(bcmSwitchIgmpUnknownDrop), \
    SCP_FUNC(bcmSwitchIgmpUnknownFlood), \
    SCP_FUNC(bcmSwitchMldReportDoneToCpu), \
    SCP_FUNC(bcmSwitchMldReportDoneDrop), \
    SCP_FUNC(bcmSwitchMldReportDoneFlood), \
    SCP_FUNC(bcmSwitchMldQueryToCpu), \
    SCP_FUNC(bcmSwitchMldQueryDrop), \
    SCP_FUNC(bcmSwitchMldQueryFlood), \
    SCP_FUNC(bcmSwitchIpmcV4RouterDiscoveryToCpu), \
    SCP_FUNC(bcmSwitchIpmcV4RouterDiscoveryDrop), \
    SCP_FUNC(bcmSwitchIpmcV4RouterDiscoveryFlood), \
    SCP_FUNC(bcmSwitchIpmcV6RouterDiscoveryToCpu), \
    SCP_FUNC(bcmSwitchIpmcV6RouterDiscoveryDrop), \
    SCP_FUNC(bcmSwitchIpmcV6RouterDiscoveryFlood), \
    SCP_FUNC(bcmSwitchPortEgressBlockL2), \
    SCP_FUNC(bcmSwitchPortEgressBlockL3), \
    SCP_FUNC(bcmSwitchMmrpPktToCpu), \
    SCP_FUNC(bcmSwitchMmrpPktDrop), \
    SCP_FUNC(bcmSwitchMmrpPktFlood), \
    SCP_FUNC(bcmSwitchSrpPktToCpu), \
    SCP_FUNC(bcmSwitchSrpPktDrop), \
    SCP_FUNC(bcmSwitchSrpPktFlood), \
    SCP_FUNC(bcmSwitchSRPEthertype), \
    SCP_FUNC(bcmSwitchMMRPEthertype), \
    SCP_FUNC(bcmSwitchSRPDestMacOui), \
    SCP_FUNC(bcmSwitchMMRPDestMacOui), \
    SCP_FUNC(bcmSwitchSRPDestMacNonOui), \
    SCP_FUNC(bcmSwitchMMRPDestMacNonOui), \
    SCP_FUNC(bcmSwitchCpuToCpuEnable), \
    SCP_FUNC(bcmSwitchEgressBlockUcast), \
    SCP_FUNC(bcmSwitchLinkDownInfoSkip), \
    SCP_FUNC(bcmSwitchMeterAdjust), \
    SCP_FUNC(bcmSwitchShaperAdjust), \
    SCP_FUNC(bcmSwitchTrunkHashSet0UnicastOffset), \
    SCP_FUNC(bcmSwitchTrunkHashSet0NonUnicastOffset), \
    SCP_FUNC(bcmSwitchTrunkFailoverHashOffset), \
    SCP_FUNC(bcmSwitchECMPHashSet0Offset), \
    SCP_FUNC(bcmSwitchEntropyHashSet0Offset), \
    SCP_FUNC(bcmSwitchEcmpDynamicHashOffset), \
    SCP_FUNC(bcmSwitchECMPMplsHashOffset), \
    SCP_FUNC(bcmSwitchEcmpResilientHashOffset), \
    SCP_FUNC(bcmSwitchEcmpWeightedHashOffset), \
    SCP_FUNC(bcmSwitchFieldMultipathHashSelect), \
    SCP_FUNC(bcmSwitchAlternateStoreForward), \
    SCP_FUNC(bcmSwitchEcmpOverlayResilientHashOffset), \
    SCP_FUNC(bcmSwitchEcmpOverlayMplsHashOffset), \
    SCP_FUNC(bcmSwitchEcmpOverlayHashOffset), \
    SCP_FUNC(bcmSwitchEcmpOverlayWeightedHashOffset), \
    SCP_FUNC(bcmSwitchL2EcmpHashOffset), \
    SCP_FUNC(bcmSwitchL2EcmpOverlayHashOffset), \
    SCP_FUNC(bcmSwitchTimesyncEgressTimestampingMode), \
    SCP_FUNC(bcmSwitchNtpResidenceTimeUpdate), \
    SCP_FUNC(bcmSwitchLayeredQoSResolution), \

/*! Device-wide value control list */
#define SC_VALUE_CONTROLS \
    {bcmSwitchHashSctpL4Port, \
        FALSE, LB_HASH_CONTROLs, USE_SCTP_SRC_AND_DST_L4_PORTs, \
        NULL, NULL}, \
    {bcmSwitchGtpDetectEnable, \
        FALSE, LB_HASH_CONTROLs, USE_GTP_TEIDs, \
        NULL, NULL}, \
    {bcmSwitchGtpHdrFirstByte, \
        FALSE, LB_HASH_CONTROLs, GTP_HDR_FIRST_BYTEs, \
        NULL, NULL}, \
    {bcmSwitchGtpHdrFirstByteMask, \
        FALSE, LB_HASH_CONTROLs, GTP_HDR_FIRST_BYTE_MASKs, \
        NULL, NULL}, \
    {bcmSwitchMacroFlowHashUseMSB, \
        FALSE, LB_HASH_FLOW_ID_SELECTIONs, USE_MOST_SIGNIFICANT_BYTE_AS_FLOW_IDs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackFlagZeroSeqZero, \
        FALSE, DOS_CONTROLs, TCP_PKT_CTRL_FLAG_SEQ_NUM_ZEROs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackIcmp, \
        FALSE, DOS_CONTROLs, ICMPV4_PKT_MAX_SIZE_EXCEEDEDs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackIcmpFragments, \
        FALSE, DOS_CONTROLs, ICMP_FRAGMENTs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackIcmpPktOversize, \
        FALSE, DOS_CONTROLs, ICMPV4_PKT_MAX_SIZEs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackIcmpV4, \
        FALSE, DOS_CONTROLs, ICMPV4_PKT_MAX_SIZE_EXCEEDEDs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackIcmpV6, \
        FALSE, DOS_CONTROLs, ICMPV6_PKT_MAX_SIZE_EXCEEDEDs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackIcmpV6PingSize, \
        FALSE, DOS_CONTROLs, ICMPV6_PKT_MAX_SIZEs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackMACSAEqualMACDA, \
        FALSE, DOS_CONTROLs, DST_MAC_EQUAL_TO_SRC_MACs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackMinTcpHdrSize, \
        FALSE, DOS_CONTROLs, TCP_HDR_MIN_SIZEs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackSipEqualDip, \
        FALSE, DOS_CONTROLs, DST_IP_EQUAL_TO_SRC_IPs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackSynFrag, \
        FALSE, DOS_CONTROLs, TCP_SYN_PKT_FRAGMENTs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackTcpFlagsFUP, \
        FALSE, DOS_CONTROLs, TCP_PKT_FIN_URG_PUSH_SEQ_NUM_ZEROs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackTcpFlagsSF, \
        FALSE, DOS_CONTROLs, TCP_PKT_SYN_FIN_SETs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackTcpHdrPartial, \
        FALSE, DOS_CONTROLs, TCP_HDR_SIZE_CHECKs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackTcpOffset, \
        FALSE, DOS_CONTROLs, TCP_FRAGMENT_OFFSET_ONEs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackTcpPortsEqual, \
        FALSE, DOS_CONTROLs, TCP_DST_PORT_EQUAL_TO_SRC_PORTs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackUdpPortsEqual, \
        FALSE, DOS_CONTROLs, UDP_DST_PORT_EQUAL_TO_SRC_PORTs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackV6MinFragEnable, \
        FALSE, DOS_CONTROLs, IPV6_MIN_FRAGMENT_SIZE_CHECKs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackV6MinFragSize, \
        FALSE, DOS_CONTROLs, IPV6_MIN_FRAGMENT_SIZEs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackV4FirstFrag, \
        FALSE, DOS_CONTROLs, IP_FIRST_FRAGMENTs, \
        NULL, NULL}, \
    {bcmSwitchDosAttackToCpu, \
        FALSE, DOS_CONTROLs, DOS_ATTACK_TO_CPUs, \
        NULL, NULL}, \
    {bcmSwitchFlowCountHashShift, \
        FALSE, MON_FLOWCOUNT_CONTROLs, SHIFTs, \
        NULL, NULL}, \
    {bcmSwitchFlowCountHashMask, \
        FALSE, MON_FLOWCOUNT_CONTROLs, MASKs, \
        NULL, NULL}, \

/*! Device-wide bit control list */
#define SC_BIT_CONTROLS \

/*! Device-wide symbol control config list */
#define SC_SYMBOL_CONTROLS \

/*! Per port value control config list */
#define SCP_VALUE_CONTROLS \

/*! Per port bit control config list */
#define SCP_BIT_CONTROLS \

/*! Per port symbol control config list */
#define SCP_SYMBOL_CONTROLS \

/*! Per port key access symbol control config list */
#define SCP_KEY_SYMBOL_CONTROLS \

/*! PORT_PKT_CONTROL config list */
#define SCP_PORT_PKT_CONTROLS \

#endif /* BCMINT_SC_DEFS_H */
