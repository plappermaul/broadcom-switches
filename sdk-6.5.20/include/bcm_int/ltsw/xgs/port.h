/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_XGS_PORT_H
#define BCMINT_LTSW_XGS_PORT_H

#include <bcm/types.h>
#include <bcm/port.h>

#include <bcm_int/ltsw/port.h>
#include <bcm_int/ltsw/port_int.h>

#include <sal/sal_types.h>

/*!
 * \brief Per-port misc init.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_misc_init_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief Per-port misc deinit.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_misc_deinit_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief Per-port service deinit.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_service_deinit_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief Per-port profile init.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_profile_init_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief Per-port profile deinit.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_profile_deinit_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief Get LPORT_TAB profile information.
 *
 * \param [in] unit Unit Number.
 * \param [in] pipe PP pipe.
 *
 * \return Pointer of profile info.
 */
extern ltsw_port_profile_info_t *
xgs_ltsw_port_system_profile(
    int unit,
    int pipe);

/*!
 * \brief Initialize LPORT_TAB profile information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_system_profile_init(int unit);

/*!
 * \brief Initialize LPORT_TAB profile information for one port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_system_profile_per_port_init(
    int unit,
    bcm_port_t port);

/*!
 * \brief De-initialize LPORT_TAB profile information for one port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_system_profile_per_port_deinit(
    int unit,
    bcm_port_t port);

/*!
 * \brief Retrieve operation mode of system profile table.
 *
 * \param [in] unit Unit Number.
 * \param [out] mode Unique or global mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_system_profile_opermode_get(
    int unit,
    bool *mode);

/*!
 * \brief Get PORT_PKT_CONTROL profile information.
 *
 * \param [in] unit Unit Number.
 *
 * \return Pointer of profile info.
 */
extern ltsw_port_profile_info_t *
xgs_ltsw_port_profile_port_pkt_ctrl(int unit);

/*!
 * \brief Initialize PORT_PKT_CONTROL profile information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_profile_port_pkt_ctrl_init(int unit);

/*!
 * \brief Initialize PORT_PKT_CONTROL profile information for one port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_profile_port_pkt_ctrl_per_port_init(
    int unit,
    bcm_port_t port);

/*!
 * \brief De-initialize PORT_PKT_CONTROL profile information for one port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_profile_port_pkt_ctrl_per_port_deinit(
    int unit,
    bcm_port_t port);

/*!
 * \brief Initialize TPID.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tpid_init(int unit);

/*!
 * \brief Initialize TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tpid_init_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief De-initialize TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tpid_deinit_per_port(
    int unit,
    bcm_port_t port);

/*!
 * \brief Get logic table info from port tab type.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Enum value of the port tab.
 * \param [out] info Logic table info of the type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tab_info_get(
    int unit,
    bcmi_ltsw_port_tab_t type,
    const ltsw_port_tab_info_t **info);

/*!
 * \brief Modify or add logic table info for a port tab type.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Enum value of the port tab.
 * \param [in] info Logic table info of the type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tab_info_update(
    int unit,
    bcmi_ltsw_port_tab_t type,
    const ltsw_port_tab_info_t *info);

/*!
 * \brief Modify or add logic table info for a lport tab type.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Enum value of the port tab.
 * \param [in] info Logic table info of the type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_lport_tab_info_update(
    int unit,
    bcmi_ltsw_port_tab_t type,
    const ltsw_port_tab_info_t *info);

/*!
 * \brief Initialize device specific information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_info_init(int unit);

/*!
 * \brief De-initialize device specific information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_info_deinit(int unit);

/*!
 * \brief Recover device specific information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_info_recover(int unit);

/*!
 * \brief Initialize port profile tables.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_profile_init(int unit);

/*!
 * \brief De-initialize port profile tables.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_profile_deinit(int unit);

/*!
 * \brief Port module misc init.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_misc_init(int unit);

/*!
 * \brief Port module misc deinit.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_misc_deinit(int unit);

/*!
 * \brief Set the status of specified port feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type Enum value of the port feature.
 * \param [in] value Value of the port feature to be set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_control_set(
    int unit,
    bcm_port_t port,
    bcm_port_control_t type,
    int value);

/*!
 * \brief Get the status of specified port feature.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type Enum value of the port feature.
 * \param [out] value Current value of the port feature.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_control_get(
    int unit,
    bcm_port_t port,
    bcm_port_control_t type,
    int *value);

/*!
 * \brief Control the sampling of packets ingressing or egressing a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] ingress_rate Ingress direction rate.
 * \param [in] egress_rate Egress direction rate.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_sample_rate_set(
    int unit,
    bcm_port_t port,
    int ingress_rate,
    int egress_rate);

/*!
 * \brief Get the sampling rate of packets ingressing or egressing a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] ingress_rate Ingress direction rate.
 * \param [out] egress_rate Egress direction rate.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_sample_rate_get(
    int unit,
    bcm_port_t port,
    int *ingress_rate,
    int *egress_rate);

/*!
 * \brief Update profile for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] fields Field list.
 * \param [in] fields_cnt Field number in list.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_profile_lport_tab_update(
    int unit,
    ltsw_port_tab_field_t *fields,
    int fields_cnt);

/*!
 * \brief Add profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile Profile to be added.
 * \param [out] index Index of the added or existed profile enrty.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_profile_port_pkt_ctrl_add(
    int unit,
    void *profile,
    int *index);

/*!
 * \brief Get profile from LT.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Index of the first entry.
 * \param [out] profile Profile entries.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_profile_port_pkt_ctrl_get(
    int unit,
    int index,
    void *profile);

/*!
 * \brief Delete profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Index of the first entry to be deleted.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_profile_port_pkt_ctrl_delete(
    int unit,
    int index);

/*!
 * \brief Recover hash and reference count for profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Profile index to be recovered.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_profile_port_pkt_ctrl_recover(
    int unit,
    int index);

/*!
 * \brief Update one field of PORT_PKT_CONTROL.
 *
 * \param [in] unit Unit Number.
 * \param [in] port port ID.
 * \param [in] lt_fld_name Field name of PORT_PKT_CONTROL.
 * \param [in] lt_fld_value Field value of PORT_PKT_CONTROL.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_profile_port_pkt_ctrl_update(
    int unit,
    int port,
    const char *lt_fld_name,
    int lt_fld_value);

/*!
 * \brief Get one field value of PORT_PKT_CONTROL.
 *
 * \param [in] unit Unit Number.
 * \param [in] port port ID.
 * \param [in] lt_fld_name Field name of PORT_PKT_CONTROL.
 * \param [out] lt_fld_value Field value of PORT_PKT_CONTROL.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_profile_port_pkt_ctrl_field_get(
    int unit,
    int port,
    const char *lt_fld_name,
    int *lt_fld_value);

/*!
 * \brief Get logic table info from port tab type.
 *
 * \param [in] unit Unit Number.
 * \param [inout] fields A set of fields which contain type and LT info.
 * \param [in] count Number of fields.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tabs_info_get(
    int unit,
    ltsw_port_tab_field_t *fields,
    int count);

/*!
 * \brief Get operation flags for logic table access.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port or gport.
 * \param [inout] fields A set of fields which contain type and LT info.
 * \param [in] count Number of fields.
 * \param [out] op Operation flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tabs_op_get(
    int unit,
    bcm_port_t port,
    ltsw_port_tab_field_t *fields,
    int count,
    uint32_t *op);

/*!
 * \brief Get parameters for logic table access.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port or gport.
 * \param [inout] fields A set of fields which contain type and LT info.
 * \param [in] count Number of fields.
 * \param [in] op Port tab operation flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tabs_para_get(
    int unit,
    bcm_port_t port,
    ltsw_port_tab_field_t *fields,
    int count,
    uint32_t op);

/*!
 * \brief Set the ARL hardware learning options for this port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] flags Logical OR of BCM_PORT_LEARN_xxx flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_learn_set(
    int unit,
    bcm_port_t port,
    uint32_t flags);

/*!
 * \brief Get the ARL hardware learning options for this port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags Logical OR of BCM_PORT_LEARN_xxx flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_learn_get(
    int unit,
    bcm_port_t port,
    uint32_t *flags);

/*!
 * \brief Enable/Disable L3 switching on the specified port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] enable TRUE to enable, FALSE to disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_l3_enable_set(
    int unit,
    bcm_port_t port,
    int enable);

/*!
 * \brief Return whether L3 switching is enabled on the specified port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] enable TRUE if enabled, FALSE if disabled.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_l3_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*!
 * \brief Set the maximum L3 frame size for the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] size Maximum frame size in bytes.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_l3_mtu_set(
    int unit,
    bcm_port_t port,
    int size);

/*!
 * \brief Get the maximum L3 frame size for the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] size Maximum frame size in bytes.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_l3_mtu_get(
    int unit,
    bcm_port_t port,
    int *size);

/*!
 * \brief Set the L3 multicast options for the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] flags Logical OR of BCM_PORT_IPMC_xxx flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_ipmc_modify_set(
    int unit,
    bcm_port_t port,
    uint32_t flags);

/*!
 * \brief Get the L3 multicast options for the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags Logical OR of BCM_PORT_IPMC_xxx flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_ipmc_modify_get(
    int unit,
    bcm_port_t port,
    uint32_t *flags);

/*!
 * \brief Add allowed TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] tpid Tag Protocol ID.
 * \param [in] color_select Color mode of the TPID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tpid_add(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t tpid,
    int color_select);

/*!
 * \brief Set the default Tag Protocol ID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tpid_set(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t tpid);

/*!
 * \brief Retrieve the default Tag Protocol ID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [out] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tpid_get(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t *tpid);

/*!
 * \brief Get a list of tpids and associated color selections for a given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] size Number of elements of the next two array parameters.
 * \param [out] tpid_array Buffer array to hold a list of retrieved tpids.
 * \param [out] color_array Buffer array to hold a list of retrieved color selections.
 * \param [out] count Actual number of tpids retrieved.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tpid_get_all(
    int unit,
    bcm_port_t port,
    int type,
    int size,
    uint16_t *tpid_array,
    int *color_array,
    int *count);

/*!
 * \brief Delete allowed TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 * \param [in] tpid Tag Protocol ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tpid_delete(
    int unit,
    bcm_port_t port,
    int type,
    uint16_t tpid);

/*!
 * \brief Delete all allowed TPID for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] type TPID type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tpid_delete_all(
    int unit,
    bcm_port_t port,
    int type);

/*!
 * \brief Set the default VLAN ID for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] vid VLAN ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_untagged_vlan_set(
    int unit,
    bcm_port_t port,
    bcm_vlan_t vid);

/*!
 * \brief Retrieve the default VLAN ID for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] vid VLAN ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_untagged_vlan_get(
    int unit,
    bcm_port_t port,
    bcm_vlan_t *vid);

/*!
 * \brief Set the 802.1p priority for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] priority 802.1p priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_untagged_priority_set(
    int unit,
    bcm_port_t port,
    int priority);

/*!
 * \brief Retrieve the 802.1p priority for received untagged packets on a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] priority 802.1p priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_untagged_priority_get(
    int unit,
    bcm_port_t port,
    int *priority);

/*!
 * \brief Set the private VLAN attribute of a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] vlan VLAN ID.
 * \param [in] pkt_prio Egress packet priority.
 * \param [in] flags BCM_PORT_FORCE_VLAN_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_force_vlan_set(
    int unit,
    bcm_port_t port,
    bcm_vlan_t vlan,
    int pkt_prio,
    uint32_t flags);

/*!
 * \brief Get the private VLAN attribute of a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] vlan VLAN ID.
 * \param [out] pkt_prio Egress packet priority.
 * \param [out] flags BCM_PORT_FORCE_VLAN_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_force_vlan_get(
    int unit,
    bcm_port_t port,
    bcm_vlan_t *vlan,
    int *pkt_prio,
    uint32_t *flags);

/*!
 * \brief Set the trunk group for a given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] tid trunk ID.
 * \param [in] psc trunk selection criterion.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tgid_set(
    int unit,
    bcm_port_t port,
    int tid,
    int psc);

/*!
 * \brief Get the trunk group for a given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] tid trunk ID.
 * \param [out] psc trunk selection criterion.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_tgid_get(
    int unit,
    bcm_port_t port,
    int *tid,
    int *psc);

/*!
 * \brief Set ingress and egress filter mode for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] flags BCM_PORT_VLAN_MEMBER_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_vlan_member_set(
    int unit,
    bcm_port_t port,
    uint32_t flags);

/*!
 * \brief Get filter mode for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] flags BCM_PORT_VLAN_MEMBER_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_vlan_member_get(
    int unit,
    bcm_port_t port,
    uint32_t *flags);

/*!
 * \brief Set port default vlan tag actions.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] action Vlan tag actions.
 * \param [in] action_profile_index Index of vlan action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_ing_vlan_action_set(
    int unit,
    bcm_port_t port,
    bcm_vlan_action_set_t *action,
    int action_profile_index);

/*!
 * \brief Get port default vlan tag actions.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] action Vlan tag actions.
 * \param [out] action_profile_index Index of vlan action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_ing_vlan_action_get(
    int unit,
    bcm_port_t port,
    bcm_vlan_action_set_t *action,
    int *action_profile_index);

/*!
 * \brief Set port egr vlan tag actions.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] action Vlan tag actions.
 * \param [in] action_profile_index Index of egr vlan action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_egr_vlan_action_set(
    int unit,
    bcm_port_t port,
    bcm_vlan_action_set_t *action,
    int action_profile_index);

/*!
 * \brief Get port egr vlan tag actions.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] action Vlan tag actions.
 * \param [out] action_profile_index Index of egr vlan action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_egr_vlan_action_get(
    int unit,
    bcm_port_t port,
    bcm_vlan_action_set_t *action,
    int *action_profile_index);

/*!
 * \brief Set the ports class ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] class Classification type.
 * \param [in] class_id Class ID of the port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_class_set(
    int unit,
    bcm_port_t port,
    bcm_port_class_t class,
    uint32_t class_id);

/*!
 * \brief Get the ports class ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] class Classification type.
 * \param [out] class_id Class ID of the port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_class_get(
    int unit,
    bcm_port_t port,
    bcm_port_class_t class,
    uint32_t *class_id);

/*!
 * \brief Set port discard attributes.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] mode Port discard mode, BCM_PORT_DISCARD_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_discard_set(
    int unit,
    bcm_port_t port,
    int mode);

/*!
 * \brief Get port discard attributes.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] mode Port discard mode, BCM_PORT_DISCARD_xxx.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_discard_get(
    int unit,
    bcm_port_t port,
    int *mode);

/*!
 * \brief Set DSCP mapping mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] mode DSCP mapping mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_dscp_phb_map_mode_set(
    int unit,
    bcm_port_t port,
    int mode);

/*!
 * \brief Get DSCP mapping mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] mode DSCP mapping mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_dscp_phb_map_mode_get(
    int unit,
    bcm_port_t port,
    int *mode);

/*!
 * \brief Enable/Disable BPDU reception on the specified port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] enable TRUE to enable, FALSE to disable (reject bpdu).
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_bpdu_enable_set(
    int unit,
    bcm_port_t port,
    int enable);

/*!
 * \brief Return whether BPDU reception is enabled on the specified port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] enable TRUE if enabled, FALSE if disabled
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_bpdu_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*!
 * \brief Set egress shaper information.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] bandwidth Port bandwidth in kbps or pps. 0 means shaper is disabled.
 * \param [in] burst Maximum burst size in kbits or packets.
 * \param [in] mode Byte mode or packet mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_egr_shaper_set(
    int unit,
    bcm_port_t port,
    uint32_t bandwidth,
    uint32_t burst,
    bcmi_ltsw_port_shaper_mode_t mode);

/*!
 * \brief Get egress shaper information.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] bandwidth Port bandwidth in kbps or pps.
 * \param [out] burst Maximum burst size in kbits or packets.
 * \param [out] mode Byte mode or packet mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_egr_shaper_get(
    int unit,
    bcm_port_t port,
    uint32_t *bandwidth,
    uint32_t *burst,
    bcmi_ltsw_port_shaper_mode_t *mode);

/*!
 * \brief Validate egress shaper settings.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] bandwidth Port bandwidth in kbps or pps. 0 means shaper is disabled.
 * \param [in] burst Maximum burst size in kbits or packets.
 * \param [in] mode Byte mode or packet mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_egr_shaper_validate(
    int unit,
    bcm_port_t port,
    uint32_t bandwidth,
    uint32_t burst,
    bcmi_ltsw_port_shaper_mode_t mode);

/*!
 * \brief Validate port class settings.
 *
 * \param [in] unit Unit Number.
 * \param [inout] port Port Number.
 * \param [in] class Classification type.
 * \param [in] class_id Class ID of the port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_class_validate(
    int unit,
    bcm_port_t *port,
    bcm_port_class_t class,
    uint32_t class_id);

/*!
 * \brief Get the count of packets (or cells) currently buffered for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] count Count of packets (or cells) currently buffered.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_queue_count_get(
    int unit,
    bcm_port_t port,
    uint32_t *count);

/*!
 * \brief Attach counter entries to the given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id Stat Counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_stat_attach(
    int unit,
    bcm_port_t port,
    uint32_t stat_id);

/*!
 * \brief Detach counter entries to given port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id Stat Counter ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_stat_detach(
    int unit,
    bcm_port_t port,
    uint32_t stat_id);

/*!
 * \brief Set selective per-port blocking of flooded traffic.
 *
 * \param [in] unit Unit Number.
 * \param [in] ing_port Ingress port.
 * \param [in] egr_port Egress port.
 * \param [in] flags Specifies the type of traffic to block.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_flood_block_set(
    int unit,
    bcm_port_t ing_port,
    bcm_port_t egr_port,
    uint32_t flags);

/*!
 * \brief Get the current per-port flood block settings.
 *
 * \param [in] unit Unit Number.
 * \param [in] ing_port Ingress port.
 * \param [in] egr_port Egress port.
 * \param [out] flags Specifies the type of traffic to block.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_flood_block_get(
    int unit,
    bcm_port_t ing_port,
    bcm_port_t egr_port,
    uint32_t *flags);

/*!
 * \brief Set switching only to indicated ports from given (modid, port).
 *
 * \param [in] unit Unit Number.
 * \param [in] port Ingress port or gport.
 * \param [in] modid Source module ID.
 * \param [in] pbmp Bitmap of ports to allow egress.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_egress_set(
    int unit,
    bcm_port_t port,
    int modid,
    bcm_pbmp_t pbmp);

/*!
 * \brief Retrieve bitmap of ports for which switching is enabled for (modid, port).
 *
 * \param [in] unit Unit Number.
 * \param [in] port Ingress port or gport.
 * \param [in] modid Source module ID.
 * \param [out] pbmp Bitmap of ports where egress allowed.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_egress_get(
    int unit,
    bcm_port_t port,
    int modid,
    bcm_pbmp_t *pbmp);

/*!
 * \brief Dump port sw infomation.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xgs_ltsw_port_dump_sw(int unit);

#endif /* BCMINT_LTSW_XGS_PORT_H */
