/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMI_LTSW_TUNNEL_H
#define BCMI_LTSW_TUNNEL_H

#include <bcm/types.h>
#include <bcm_int/ltsw/tunnel.h>

#include <sal/sal_types.h>

/*! IPv6 tunnel outer header. */
#define BCMI_LTSW_TUNNEL_OUTER_HEADER_IPV6(tnl_type) \
            (((tnl_type == bcmTunnelTypeIp4In6) || \
              (tnl_type == bcmTunnelTypeIp6In6) || \
              (tnl_type == bcmTunnelTypeIpAnyIn6) || \
              (tnl_type == bcmTunnelTypeGre4In6) || \
              (tnl_type == bcmTunnelTypeGre6In6) || \
              (tnl_type == bcmTunnelTypeGreAnyIn6)) ? 1 : 0)

/*!
 * \brief Tunnel encap sequence profile.
 */
typedef struct bcmi_ltsw_tunnel_encap_seq_profile_s {

    /*! Enable sequence number processing. */
    bool enable;

    /*! Enable to write back updated counter value to the TNL_ENCAP_SEQUENCE_NUMBER table. */
    bool update_en;

    /*! Sequence number increment value. */
    uint32_t increment;

    /*! Sequence number reserved value. This value is skipped during counter increment. */
    uint32_t reserved_value;

    /*! Sequence number value mask. A bit value of 1 indicates the corresponding bit of the sequence number is to be masked. */
    uint32_t mask;

} bcmi_ltsw_tunnel_encap_seq_profile_t;

/*!
 * \brief Tunnel decap port profile structure.
 */
typedef struct bcmi_ltsw_tunnel_decap_port_profile_s {

    /*! Enable to set the specified port as a tunnel end point. */
    bcm_pbmp_t decap_ports;

} bcmi_ltsw_tunnel_decap_port_profile_t;

/*!
 * \brief Tunnel encap sequence number type.
 */
typedef enum bcmi_ltsw_tunnel_encap_seq_num_type_s {

    /*! TNL type. */
    ENCAP_SEQ_NUM_TYPE_TNL = 0,

    /*! VP type. */
    ENCAP_SEQ_NUM_TYPE_VP = 1,

    /*! Mirror type. */
    ENCAP_SEQ_NUM_TYPE_MIRROR = 2

} bcmi_ltsw_tunnel_encap_seq_num_type_t;

#define BCMI_LTSW_TUNNEL_ENCAP_SEQ_NUM_TYPE_STR \
{ \
    "TNL", \
    "VP", \
    "MIRROR" \
}

/*!
 * \brief Application switch control type of tunnel for a specific device.
 */
typedef enum bcmi_ltsw_tunnel_control_s {

    /*! Share the IPv4 ID space across tunnels. */
    bcmiTunnelControlTunnelIp4IdShared = 0,

    /*! Invalid tunnel packets to CPU. */
    bcmiTunnelControlTunnelErrToCpu = 1,

    /*! MPLS label lookup miss to CPU. */
    bcmiTunnelControlMplsLabelMissToCpu = 2,

    /*! MPLS Header TTL used value is 0 or 1. */
    bcmiTunnelControlMplsTtlErrToCpu = 3,

    /*! MPLS L3 payload invalid. */
    bcmiTunnelControlMplsInvalidL3PayloadToCpu = 4,

    /*! Invalid action / comnination of actions. */
    bcmiTunnelControlMplsInvalidActionToCpu = 5,

    /*! When a GAL label is exposed in a packet, such a packet will be dropped. This control determines whether such a packet gets copied to CPU. */
    bcmiTunnelControlMplsGalAlertLabelToCpu = 6,

    /*! When a RAL label is exposed in a packet, such a packet will be dropped. This control determines whether such a packet gets copied to CPU. */
    bcmiTunnelControlMplsRalAlertLabelToCpu = 7,

    /*! Exposed an illegal reserved label to CPU. For example, exposed GAL Label has BOS=0. */
    bcmiTunnelControlMplsIllegalReservedLabelToCpu = 8,

    /*! Packet has an unknown ACH Type. */
    bcmiTunnelControlMplsUnknownAchTypeToCpu = 9,

    /*! The version number of ACH is not 1. */
    bcmiTunnelControlMplsUnknownAchVersionToCpu = 10,

    /*! Enable MPLS packets with PWACH control word, to be copied to CPU. */
    bcmiTunnelControlMplsPWControlWordToCpu = 11,

    /*! Enable/Disable flow based hashing for MPLS ECMP. */
    bcmiTunnelControlHashUseFlowSelMplsEcmp = 12,

    /*! Enable/Disable flow based hashing for MPLS Overlay ECMP. */
    bcmiTunnelControlHashUseFlowSelMplsEcmpOverlay = 13,

    /*! Tunnel control type count. */
    bcmiTunnelControlCount = 14

} bcmi_ltsw_tunnel_control_t;

#define BCMI_LTSW_TUNNEL_CONTROL_STR \
{ \
    "TunnelIp4IdShared", \
    "TunnelErrToCpu", \
    "MplsLabelMissToCpu", \
    "MplsTtlErrToCpu", \
    "MplsInvalidL3PayloadToCpu", \
    "MplsInvalidActionToCpu", \
    "MplsGalAlertLabelToCpu", \
    "MplsRalAlertLabelToCpu", \
    "MplsIllegalReservedLabelToCpu", \
    "MplsUnknownAchTypeToCpu", \
    "MplsUnknownAchVersionToCpu", \
    "MplsPWControlWordToCpu", \
    "HashUseFlowSelMplsEcmp", \
    "HashUseFlowSelMplsEcmpOverlay" \
}

/*!
 * \brief Initialize the tunnel module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_init(int unit);

/*!
 * \brief De-initialize the tunnel module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_deinit(int unit);

/*!
 * \brief Alloc egress encapsulation sequence number entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] flags Operation flags.
 * \param [in] type Sequence Number type.
 * \param [out] index Sequence number index.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_encap_seq_num_alloc(
    int unit,
    uint32_t flags,
    bcmi_ltsw_tunnel_encap_seq_num_type_t type,
    int *index);

/*!
 * \brief Free egress encapsulation sequence number entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sequence Number type.
 * \param [in] index Sequence number index.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_encap_seq_num_free(
    int unit,
    bcmi_ltsw_tunnel_encap_seq_num_type_t type,
    int index);

/*!
 * \brief Get egress encapsulation sequence number.
 *
 * \param [in] unit Unit Number.
 * \param [in] idx Index of sequence number table.
 * \param [in] pipe Pipe number.
 * \param [out] number Sequence number.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_encap_seq_num_get(
    int unit,
    int idx,
    int pipe,
    uint32_t *number);

/*!
 * \brief Set egress encapsulation sequence number.
 *
 * \param [in] unit Unit Number.
 * \param [in] idx Index of sequence number table.
 * \param [in] pipe Pipe number.
 * \param [in] number Sequence number.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_encap_seq_num_set(
    int unit,
    int idx,
    int pipe,
    uint32_t number);

/*!
 * \brief Add egress encapsulation sequence number profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] entry Sequence number profile.
 * \param [out] index Index of sequence number profile.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_encap_seq_profile_add(
    int unit,
    bcmi_ltsw_tunnel_encap_seq_profile_t *entry,
    int *index);

/*!
 * \brief Get egress encapsulation sequence number profile.
 *
 * \param [in] unit Unit Number.
 * \param [out] entry Sequence number profile.
 * \param [in] index Index of sequence number profile.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_encap_seq_profile_get(
    int unit,
    bcmi_ltsw_tunnel_encap_seq_profile_t *entry,
    int index);

/*!
 * \brief Delete egress encapsulation sequence number profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Index of sequence number profile.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_encap_seq_profile_delete(
    int unit,
    int index);

/*!
 * \brief Recover egress encapsulation sequence number profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Index of sequence number profile.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_encap_seq_profile_recover(
    int unit,
    int index);

/*!
 * \brief Specify tunnel switch control behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] control The desired configuration parameter to modify.
 * \param [in] value The value with which to set the parameter.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_control_set(
    int unit,
    bcmi_ltsw_tunnel_control_t control,
    uint32_t value);

/*!
 * \brief Retrieve tunnel switch control behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] control The desired configuration parameter to retrieve.
 * \param [out] value Pointer to where the retrieved value will be written.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_control_get(
    int unit,
    bcmi_ltsw_tunnel_control_t control,
    uint32_t *value);

/*!
 * \brief Add tunnel decap port profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] entry Decap port profile.
 * \param [out] index Index of sequence number profile.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_decap_port_profile_add(
    int unit,
    bcmi_ltsw_tunnel_decap_port_profile_t *entry,
    int *index);

/*!
 * \brief Get tunnel decap port profile.
 *
 * \param [in] unit Unit Number.
 * \param [out] entry Get tunnel decap port profile.
 * \param [in] index Index of sequence number profile.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_decap_port_profile_get(
    int unit,
    bcmi_ltsw_tunnel_decap_port_profile_t *entry,
    int index);

/*!
 * \brief Delete tunnel decap port profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Index of sequence number profile.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_decap_port_profile_delete(
    int unit,
    int index);

/*!
 * \brief Recover tunnel decap port profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Index of sequence number profile.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_decap_port_profile_recover(
    int unit,
    int index);

/*!
 * \brief Initialize tunnel encap sequence profiles.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_encap_seq_profile_init(int unit);

/*!
 * \brief De-Initialize egress sequence number profile.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_tunnel_encap_seq_profile_deinit(int unit);

#endif /* BCMI_LTSW_TUNNEL_H */
