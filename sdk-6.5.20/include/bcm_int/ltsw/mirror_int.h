/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_MIRROR_INT_H
#define BCMINT_LTSW_MIRROR_INT_H

#include <bcm/types.h>
#include <bcm/field.h>

#include <sal/sal_types.h>

/*!
 * \brief HA subcomponent id for Mirror module.
 */
/*! Mirror session. */
#define BCMINT_MIRROR_SUB_COMP_ID_MIRROR_SESSION 0

/*! Mirror container. */
#define BCMINT_MIRROR_SUB_COMP_ID_MIRROR_CONTAINER 1

/*! Mirror encapsulation type. */
#define BCMINT_MIRROR_SUB_COMP_ID_MIRROR_ENCAP_TYPE 2

/*! Mirror destination ids for MOD. */
#define BCMINT_MIRROR_SUB_COMP_ID_MIRROR_MOD_MIRROR_DEST_ID 3

/*! Map for Mirror destination ids to MOD destination id array allocated by MOD module. */
#define BCMINT_MIRROR_SUB_COMP_ID_MIRROR_MOD_DEST_ID_MAP 4

/*! Mirror ingress sample profile used bitmap. */
#define BCMINT_MIRROR_SUB_COMP_ID_MIRROR_ING_SAMPLE_PRF_BMP 5

/*! Mirror flex sample profile used bitmap. */
#define BCMINT_MIRROR_SUB_COMP_ID_MIRROR_FLEX_SAMPLE_PRF_BMP 6

/*! Ingress MOD event group. */
#define BCMINT_MIRROR_SUB_COMP_ID_MIRROR_ING_MOD_EVENT_GROUP 7

/*! Ingress MOD event profile. */
#define BCMINT_MIRROR_SUB_COMP_ID_MIRROR_ING_MOD_EVENT_PROFILE 8

/*! Multiple mirror destination group. */
#define BCMINT_MIRROR_SUB_COMP_ID_MIRROR_MULTI_DIP_GROUP 9

/*! Truncate length profile id used bitmap. */
#define BCMINT_MIRROR_SUB_COMP_ID_MIRROR_TRUNCATE_LENGTH_PRF_ID_BMP 10

/*!
 * \brief Mirror container source type flags.
 */
/*! Port ingress mirroring. */
#define BCMINT_MIRROR_ST_F_PORT_ING (1 << 0)

/*! Port egress mirroring. */
#define BCMINT_MIRROR_ST_F_PORT_EGR (1 << 1)

/*! Virtual port ingress mirroring. */
#define BCMINT_MIRROR_ST_F_VP_ING (1 << 2)

/*! FP ingress mirroring. */
#define BCMINT_MIRROR_ST_F_FP_ING (1 << 3)

/*! FP egress mirroring. */
#define BCMINT_MIRROR_ST_F_FP_EGR (1 << 4)

/*! sFlow mirroring. */
#define BCMINT_MIRROR_ST_F_SAMPLER (1 << 5)

/*! Trace event mirroring. */
#define BCMINT_MIRROR_ST_F_TRACE_EVENT (1 << 6)

/*! Drop event mirroring. */
#define BCMINT_MIRROR_ST_F_DROP_EVENT (1 << 7)

/*! Inband Network Telemetry mirroring. */
#define BCMINT_MIRROR_ST_F_INT (1 << 8)

/*! Elephant flow mirroring. */
#define BCMINT_MIRROR_ST_F_ELEPHANT (1 << 9)

/*! Dynamic Load Balancing flow monitor mirroring. */
#define BCMINT_MIRROR_ST_F_DLB_MONITOR (1 << 10)

/*! CosQ Mirror-on-drop mirroring. */
#define BCMINT_MIRROR_ST_F_COSQ_MOD (1 << 11)

/*! Ingress sample mirroring. */
#define BCMINT_MIRROR_ST_F_SAMPLE_INGRESS (1 << 12)

/*! Flex sample mirroring. */
#define BCMINT_MIRROR_ST_F_SAMPLE_FLEX (1 << 13)

/*! Field destination mirroring. */
#define BCMINT_MIRROR_ST_F_FIELD_DEST (1 << 14)

/*! Ingress mirror-on-drop mirroring. */
#define BCMINT_MIRROR_ST_F_ING_MOD (1 << 15)

/*! EP Recirculate mirroring. */
#define BCMINT_MIRROR_ST_F_EP_RECIRC (1 << 16)

/*! Mirror destination with tunnel encap. */
#define BCMINT_MIRROR_DEST_TUNNELS (BCM_MIRROR_DEST_TUNNEL_L2 | \
                                    BCM_MIRROR_DEST_TUNNEL_IP_GRE | \
                                    BCM_MIRROR_DEST_TUNNEL_WITH_SEQ | \
                                    BCM_MIRROR_DEST_TUNNEL_TRILL | \
                                    BCM_MIRROR_DEST_TUNNEL_NIV | \
                                    BCM_MIRROR_DEST_TUNNEL_ETAG | \
                                    BCM_MIRROR_DEST_TUNNEL_PSAMP | \
                                    BCM_MIRROR_DEST_TUNNEL_SFLOW)

/*! Ingress mirror-on-drop event group id base. */
#define BCMINT_MIRROR_ING_MOD_EVENT_GRP_ID_BASE 1

/*! Ingress mirror-on-drop event profile id base. */
#define BCMINT_MIRROR_ING_MOD_EVENT_PROF_ID_BASE 1

/*! Multiple mirror destination IP group id base. */
#define BCMINT_MIRROR_MULTI_DIP_GRP_ID_BASE 1

/*!
 * \brief Mirror session model.
 */
typedef enum bcmint_mirror_session_model_s {

    /*! In this model, Mirror session is exclusive to each Mirror container. */
    bcmintMirrorSessionModelExclusive = 0,

    /*! In this model, Mirror session is shared by different Mirror containers. */
    bcmintMirrorSessionModelShared = 1,

    /*! Mirror session model count. */
    bcmintMirrorSessionModelCount = 2

} bcmint_mirror_session_model_t;

#define BCMINT_MIRROR_SESSION_MODEL_STR \
{ \
    "Exclusive", \
    "Shared" \
}

/*!
 * \brief Mirror session attributes.
 */
typedef struct bcmint_mirror_session_attrs_s {

    /*! Mirror session model. */
    bcmint_mirror_session_model_t model;

    /*! Mirror session array number. */
    int session_array_num;

    /*! Mirror instance number per mirror session array. */
    int instance_num;

    /*! Total number of Mirror session entries. */
    int session_num;

    /*! Reserve instance zero for invalid. */
    bool rsvd_instance_zero;

    /*! MOD destinations share a unique encap. */
    bool mod_dest_shared_encap;

} bcmint_mirror_session_attrs_t;

/*!
 * \brief Mirror database structure.
 */
typedef struct bcmint_mirror_db_s {

    /*! IFA 1.0 Probe header encap. */
    const bool ifa_1_probe_encap;

    /*! IFA 1.0 Probe header encap index. */
    const int ifa_1_probe_encap_index;

    /*! IFA 1.0 Probe NPL insert loopback header. */
    const bool ifa_1_probe_encap_npl_lb_header;

} bcmint_mirror_db_t;

/*!
 * \brief Mirror sample type.
 */
typedef enum bcmint_mirror_sample_type_s {

    /*! Ingress sample. */
    bcmintMirrorSampleIngress = 0,

    /*! Flex sample. */
    bcmintMirrorSampleFlex = 1,

    /*! The last one, not valid. */
    bcmintMirrorSampleCount = 2

} bcmint_mirror_sample_type_t;

#define BCMINT_MIRROR_SAMPLE_TYPE_STR \
{ \
    "Ingress", \
    "Flex" \
}

/*!
 * \brief Mirror sample profile information.
 */
typedef struct bcmint_mirror_sample_prf_info_s {

    /*! Mirror sample profile number. */
    int prf_num;

    /*! True for reserve sample profile id zero. */
    bool rsvd_prf_id_zero;

} bcmint_mirror_sample_prf_info_t;

/*!
 * \brief Ingress mirror-on-drop event SDKLT map info structure.
 */
typedef struct bcmint_mirror_ingress_mod_event_map_info_s {

    /*! Ingress mirror-on-drop event type. */
    bcm_mirror_ingress_mod_event_t type;

    /*! Logic table field name. */
    const char *field_name;

} bcmint_mirror_ingress_mod_event_map_info_t;

/*!
 * \brief Mirror control infomation.
 */
typedef struct bcmint_mirror_ctrl_info_s {

    /*! Mirror destination number. */
    int dest_num;

    /*! Mirror container number. */
    int container_num;

    /*! Mirror session attributes. */
    bcmint_mirror_session_attrs_t session_attrs;

    /*! Supported source types of each Mirror container. */
    uint32_t *mc_st_flags;

    /*! MOD destination number. */
    int mod_dest_num;

    /*! Mirror sample profile information. */
    bcmint_mirror_sample_prf_info_t sample_prf_info;

    /*! Ingress MOD event mapping table. */
    bcmint_mirror_ingress_mod_event_map_info_t *ingress_mod_event_map_tab;

    /*! Size of ingress MOD event mapping table. */
    int ingress_mod_event_map_tab_size;

} bcmint_mirror_ctrl_info_t;

/*!
 * \brief Mirror container source.
 */
typedef struct bcmint_mirror_source_s {

    /*! Mirror container source type. */
    uint32_t type;

    /*! Source port id. */
    bcm_port_t port;

    /*! Trace event. */
    bcm_pkt_trace_event_t trace_event;

    /*! Drop event. */
    bcm_pkt_drop_event_t drop_event;

    /*! FP entry id. */
    int entry_id;

    /*! Sample profile id. */
    uint32_t sample_profile_id;

    /*! Field destination match structure. */
    bcm_field_destination_match_t field_dest_match;

    /*! EP Recirculate profile id. */
    int ep_recirc_profile_id;

} bcmint_mirror_source_t;

/*!
 * \brief Mirror session entry.
 */
typedef struct bcmint_mirror_session_entry_s {

    /*! Entry valid. */
    bool valid;

    /*! Indicate it is an egress session. */
    bool egr;

    /*! Indicate it is a cosq_mod session. */
    bool cosq_mod;

    /*! Enable encapsulation. */
    bool encap_ena;

    /*! Encap id, only valid when encap_ena is True. */
    int encap_id;

    /*! MC_COS for unicast mirroring. */
    uint8_t mc_cos;

    /*!  The priority of duplicate mirror packets. */
    uint8_t entry_pri;

    /*! System port for mirror destination. */
    bcm_port_t sys_port;

    /*! Local port for mirror destination. */
    bcm_port_t local_port;

    /*! Type of truncation of the mirrored packet. */
    uint8_t truncate;

    /*! Timestamp mode for mirror encapsulation. */
    uint8_t timestamp_mode;

    /*! Associated multiple destination IP group id. */
    int multi_dip_group_id;

} bcmint_mirror_session_entry_t;

/*!
 * \brief Mirror sample profile field bitmap.
 */
/*! The enable field to set or get. */
#define BCMINT_MIRROR_SAMPLE_PRF_FLD_ENABLE (1 << 0)

/*! The rate field to set or get. */
#define BCMINT_MIRROR_SAMPLE_PRF_FLD_RATE (1 << 1)

/*! The pool_count_enable field to set or get. */
#define BCMINT_MIRROR_SAMPLE_PRF_FLD_POOL_COUNT_ENABLE (1 << 2)

/*! The sample_count_enable field to set or get. */
#define BCMINT_MIRROR_SAMPLE_PRF_FLD_SAMPLE_COUNT_ENABLE (1 << 3)

/*! The trace_enable field to set or get. */
#define BCMINT_MIRROR_SAMPLE_PRF_FLD_TRACE_ENABLE (1 << 4)

/*! The mirror_mode field to set or get. */
#define BCMINT_MIRROR_SAMPLE_PRF_FLD_MIRROR_MODE (1 << 5)

/*! The session_id field to set or get. */
#define BCMINT_MIRROR_SAMPLE_PRF_FLD_SESSION_ID (1 << 6)

/*! The instance_id field to set or get. */
#define BCMINT_MIRROR_SAMPLE_PRF_FLD_INSTANCE_ID (1 << 7)

/*!
 * \brief Sample mirror mode.
 */
typedef enum bcmint_mirror_sample_mirror_mode_s {

    /*! No mirror. */
    bcmintSampleMirrorModeNone = 0,

    /*! Mirror packets below sample rate. */
    bcmintSampleMirrorModeBelowRate = 1,

    /*! Mirror packets above sample rate. */
    bcmintSampleMirrorModeAboveRate = 2,

    /*! The last one, not valid. */
    bcmintSampleMirrorModeCount = 3

} bcmint_mirror_sample_mirror_mode_t;

#define BCMINT_MIRROR_SAMPLE_MIRROR_MODE_STR \
{ \
    "None", \
    "BelowRate", \
    "AboveRate" \
}

/*!
 * \brief Sample profile entry.
 */
typedef struct bcmint_mirror_sample_profile_s {

    /*! Field bitmap. */
    int fld_bmp;

    /*! Sample enable. */
    bool enable;

    /*! Sample rate. */
    int rate;

    /*! Enable to count the packets seen by the sampler. */
    bool pool_count_enable;

    /*! Enable to count the packets sampled by the sampler. */
    bool sample_count_enable;

    /*! Enable to generate trace event, applicable only if mirror_mode is BelowRate. */
    bool trace_enable;

    /*! Sample mirror mode. */
    bcmint_mirror_sample_mirror_mode_t mirror_mode;

    /*! Mirror session id, applicable only if mirror_mode is AboveRate or BelowRate. */
    int session_id;

    /*! Mirror instance id, applicable only if mode is AboveRate or BelowRate. */
    int instance_id;

} bcmint_mirror_sample_profile_t;

/*!
 * \brief Get reference count of given mirror session.
 *
 * \param [in] unit Unit Number.
 * \param [in] id Session id.
 * \param [out] cnt Reference count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmint_mirror_session_ref_cnt_get(
    int unit,
    int id,
    int *cnt);

/*!
 * \brief Get chip-specific ingress mirror-ond-drop event mapping info.
 *
 * \param [in] unit Unit Number.
 * \param [out] ingress_mod_event_map_tab Chip-specific ingress mirror-ond-drop event mapping table.
 * \param [out] map_tab_size Size of ingress mirror-ond-drop event mapping table.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmint_mirror_ingress_mod_event_map_info_get(
    int unit,
    bcmint_mirror_ingress_mod_event_map_info_t **ingress_mod_event_map_tab,
    int *map_tab_size);

#endif /* BCMINT_LTSW_MIRROR_INT_H */
