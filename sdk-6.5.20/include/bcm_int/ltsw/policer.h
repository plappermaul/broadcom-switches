/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMI_LTSW_POLICER_H
#define BCMI_LTSW_POLICER_H

/*!
 * \brief Policer stage.
 */
typedef enum bcmi_ltsw_policer_stage_s {

    /*! Ingress FP policer. */
    bcmiPolicerStageIngress = 0,

    /*! Egress FP policer. */
    bcmiPolicerStageEgress = 1

} bcmi_ltsw_policer_stage_t;


/*!
 * \brief Policer operating modes.
 */
typedef enum bcmi_ltsw_policer_mode_e {
    /*! Policer in Global mode. */
    bcmiPolicerModeGlobal = 0,

    /*! Policer in Pipe unique mode. */
    bcmiPolicerModePipeUnique = 1,
} bcmi_ltsw_policer_mode_t;

#define BCMI_LTSW_POLICER_STAGE_STR \
{ \
    "Ingress", \
    "Egress" \
}

#define BCMI_LTSW_POLICER_POOL_MODE_WITH_ID    (1)

#define BCMI_LTSW_POLICER_POOL_USED_BY_NONE        (0)
#define BCMI_LTSW_POLICER_POOL_USED_BY_IFP         (1)
#define BCMI_LTSW_POLICER_POOL_USED_BY_EM          (2)

/*!
 * \brief Attach a policer entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] policer_id Policer ID.
 * \param [in] pipe Pipe instance.
 * \param [in] pool_id Policer pool id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_policer_attach(
    int unit,
    bcm_policer_t policer_id,
    int pipe,
    int pool_id);

/*!
 * \brief Detach a policer entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] policer_id Policer ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_policer_detach(
    int unit,
    bcm_policer_t policer_id);

/*!
 * \brief Allocate a policer pool.
 *
 * \param [in] unit Unit Number.
 * \param [in] stage FP stage.
 * \param [in] pipe Pipe instance.
 * \param [in] priority Priority.
 * \param [out] pool_id Policer pool id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_policer_pool_alloc(
    int unit,
    int stage,
    int pipe,
    int priority,
    int *pool_id);

/*!
 * \brief Free a policer pool.
 *
 * \param [in] unit Unit Number.
 * \param [in] stage FP stage.
 * \param [in] pipe Pipe instance.
 * \param [in] pool_id Policer pool id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_policer_pool_free(
    int unit,
    int stage,
    int pipe,
    int pool_id);

/*!
 * \brief Update the FP group priority associated with
 * a policer pool.
 *
 * \param [in] unit Unit Number.
 * \param [in] stage FP stage.
 * \param [in] pipe Pipe instance.
 * \param [in] pool_id Policer pool id.
 * \param [in] priority Group priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_policer_pool_prio_update(
    int unit,
    int stage,
    int pipe,
    int pool_id,
    int priority);

/*!
 * \brief Deinit Policer module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_policer_deinit(int unit);

/*!
 * \brief Init Policer module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_policer_init(int unit);

extern int
bcmi_ltsw_policer_num_meters_in_use_per_pool_get(
    int unit,
    int stage,
    int pipe,
    int pool_id,
    uint32 *num_meters_in_use);

#endif /* BCMI_LTSW_POLICER_H */
