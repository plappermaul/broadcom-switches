/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMI_LTSW_L2_H
#define BCMI_LTSW_L2_H

#include <bcm/types.h>

#include <sal/sal_types.h>

/*!
 * \brief Flags to indicate which part of VLAN info is to be updated. These flags are used by bcmi_ltsw_l2_station_vlan_update API.
 */
/*! Update membership profile pointer. */
#define BCMI_LTSW_L2_STATION_VLAN_F_MEMBER_PRF_PTR (1 << 0)

/*! Update spanning tree group id. */
#define BCMI_LTSW_L2_STATION_VLAN_F_STG (1 << 1)

/*!
 * \brief VLAN info used for station API.
 */
typedef struct bcmi_ltsw_l2_station_vlan_s {

    /*! Membership profile pointer. */
    uint16_t member_prf_ptr;

    /*! Spanning tree group id. */
    uint16_t stg;

} bcmi_ltsw_l2_station_vlan_t;

/*!
 * \brief L2 table view vlan info structure.
 */
typedef struct bcmi_ltsw_l2_view_vlan_info_s {

    /*! VLAN id. */
    bcm_vlan_t vlan;

    /*! L2 table view for this vlan. 0: Double wide view, 1: single wide view. */
    bool l2_view;

} bcmi_ltsw_l2_view_vlan_info_t;

/*!
 * \brief Virtual info for L2 table refresh.
 */
typedef struct bcmi_ltsw_l2_virtual_info_s {

    /*! Gport id. */
    bcm_gport_t gport;

    /*! Egress object. */
    bcm_if_t egress_if;

} bcmi_ltsw_l2_virtual_info_t;

/*!
 * \brief Set force vlan for all L2 entries of associated port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port id.
 * \param [in] vlan Force vlan id.
 * \param [in] flags Force vlan flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_force_vlan_set(
    int unit,
    bcm_port_t port,
    bcm_vlan_t vlan,
    uint32_t flags);

/*!
 * \brief Clear Hit bits of L2 address entries.
 *
 * \param [in] unit Unit Number.
 * \param [in] src_hit Clear source hit bit.
 * \param [in] des_hit Clear destination hit bit.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_addr_hit_clear(
    int unit,
    bool src_hit,
    bool des_hit);

/*!
 * \brief Enable or disable one field L2 control table.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_ctrl_name LT name.
 * \param [in] l2_ctrl_fld LT field name.
 * \param [in] enable 1: enable, 0: disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_ctrl_set(
    int unit,
    const char *l2_ctrl_name,
    const char *l2_ctrl_fld,
    int enable);

/*!
 * \brief Get status L2 control table.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_ctrl_name LT name.
 * \param [in] l2_ctrl_fld LT field name.
 * \param [out] enable 1: enable, 0: disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_ctrl_get(
    int unit,
    const char *l2_ctrl_name,
    const char *l2_ctrl_fld,
    int *enable);

/*!
 * \brief Public function to stop L2 age thread without breaking current interval.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_age_stop(int unit);

/*!
 * \brief Public function to resume L2 age thread with current interval.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_age_resume(int unit);

/*!
 * \brief Public function to enable/disable global L2 learning.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable 1 indicates enable, 0 indicates disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_learn_set(
    int unit,
    int enable);

/*!
 * \brief Public function to get global L2 learning setting.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Current global L2 learning setting.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_learn_get(
    int unit,
    int *enable);

/*!
 * \brief Public function to update VLAN info used by station.
 *
 * \param [in] unit Unit Number.
 * \param [in] vid VLAN id or vfi.
 * \param [in] flags Flags to indicate update which part of VLAN info.
 * \param [in] vlan_info VLAN info used by station.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_station_vlan_update(
    int unit,
    int vid,
    int flags,
    bcmi_ltsw_l2_station_vlan_t *vlan_info);

/*!
 * \brief Public function to freeze L2 H/W activities.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_hw_freeze(int unit);

/*!
 * \brief Public function to thaw L2 H/W activities.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_hw_thaw(int unit);

/*!
 * \brief Public function to get L2 H/W frozen state.
 *
 * \param [in] unit Unit Number.
 * \param [out] frozen L2 H/W is frozen or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_hw_is_frozen(
    int unit,
    int *frozen);

/*!
 * \brief Public function to get L2 table size.
 *
 * \param [in] unit Unit Number.
 * \param [out] size L2 table size.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_size_get(
    int unit,
    int *size);

/*!
 * \brief Public function to get current L2 entry count.
 *
 * \param [in] unit Unit Number.
 * \param [out] count L2 entry count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_count_get(
    int unit,
    int *count);

/*!
 * \brief Public function to update L2 table view info for a vlan.
 *
 * \param [in] unit Unit Number.
 * \param [in] info L2 table view info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_view_vlan_update(
    int unit,
    bcmi_ltsw_l2_view_vlan_info_t *info);

/*!
 * \brief Update logical table L2_OPAQUE_TAG.
 *
 * \param [in] unit Unit Number.
 * \param [in] opaque_tag_id Index into the L2 opaque tag table.
 * \param [in] tag_size Size of the opaque tag.
 * \param [in] ether_type Ethertype used to identify the opaque tag.
 * \param [in] tag_type Type of the opaque tag.
 * \param [in] valid Make config active or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_opaque_tag_set(
    int unit,
    int opaque_tag_id,
    int tag_size,
    int ether_type,
    int tag_type,
    int valid);

/*!
 * \brief Get value of fields of logical table L2_OPAQUE_TAG.
 *
 * \param [in] unit Unit Number.
 * \param [in] opaque_tag_id Index into the L2 opaque tag table.
 * \param [out] tag_size Size of the opaque tag.
 * \param [out] ether_type Ethertype used to identify the opaque tag.
 * \param [out] tag_type Type of the opaque tag.
 * \param [out] valid Make config active or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_opaque_tag_get(
    int unit,
    int opaque_tag_id,
    int *tag_size,
    int *ether_type,
    int *tag_type,
    int *valid);

/*!
 * \brief Update logical table L2_PAYLOAD_OPAQUE_TAG.
 *
 * \param [in] unit Unit Number.
 * \param [in] opaque_tag_id Index into the L2 opaque tag table.
 * \param [in] tag_size Size of the opaque tag.
 * \param [in] ether_type Ethertype used to identify the opaque tag.
 * \param [in] tag_type Type of the opaque tag.
 * \param [in] valid Make config active or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_payload_opaque_tag_set(
    int unit,
    int opaque_tag_id,
    int tag_size,
    int ether_type,
    int tag_type,
    int valid);

/*!
 * \brief Get value of fields of logical table L2_PAYLOAD_OPAQUE_TAG.
 *
 * \param [in] unit Unit Number.
 * \param [in] opaque_tag_id Index into the L2 opaque tag table.
 * \param [out] tag_size Size of the opaque tag.
 * \param [out] ether_type Ethertype used to identify the opaque tag.
 * \param [out] tag_type Type of the opaque tag.
 * \param [out] valid Make config active or not.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_payload_opaque_tag_get(
    int unit,
    int opaque_tag_id,
    int *tag_size,
    int *ether_type,
    int *tag_type,
    int *valid);

/*!
 * \brief Dump L2 module software bookkeepings.
 *
 * \param [in] unit Unit Number.
 */
extern void
bcmi_ltsw_l2_sw_dump(int unit);

/*!
 * \brief Public function to update L2 table virtual info for a gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Virtual info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_virtual_info_update(
    int unit,
    bcmi_ltsw_l2_virtual_info_t *info);

/*!
 * \brief Clear L2 entries on a port during flex port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_port_detach(
    int unit,
    bcm_port_t port);

/*!
 * \brief Clear Hit bits of L2 address entries.
 *
 * \param [in] unit Unit Number.
 * \param [in] src_hit Clear source hit bit.
 * \param [in] des_hit Clear destination hit bit.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_l2_addr_hit_clear(
    int unit,
    bool src_hit,
    bool des_hit);

#endif /* BCMI_LTSW_L2_H */
