/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMI_LTSW_DEV_H
#define BCMI_LTSW_DEV_H

#include <bcm/types.h>

#include <sal/sal_types.h>

/*!
 * \brief Initialize the device information for specified unit.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dev_init(int unit);

/*!
 * \brief Initialize the device information for specified unit.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dev_info_init(int unit);

/*!
 * \brief Get the BCMDRD unit ID associated with a given BCM unit ID.
 *
 * \param [in] unit Unit Number.
 *
 * \return BCMDRD unit ID.
 */
extern int
bcmi_ltsw_dev_dunit(int unit);

/*!
 * \brief Get the BCM unit ID associated with a given BCMDRD unit ID.
 *
 * \param [in] dunit BCM unit ID.
 *
 * \return BCMDRD unit ID.
 */
extern int
bcmi_ltsw_dev_unit(int dunit);

/*!
 * \brief Check if a device has been created.
 *
 * \param [in] unit Unit Number.
 *
 * \return true if device exists, otherwise false.
 */
extern int
bcmi_ltsw_dev_exists(int unit);

/*!
 * \brief Get the PCI vendor ID.
 *
 * \param [in] unit Unit Number.
 *
 * \return Broadcom device vendor ID.
 */
extern int
bcmi_ltsw_dev_vendor_id(int unit);

/*!
 * \brief Get the PCI device ID.
 *
 * \param [in] unit Unit Number.
 *
 * \return Broadcom device ID.
 */
extern int
bcmi_ltsw_dev_device_id(int unit);

/*!
 * \brief Get the PCI revision ID.
 *
 * \param [in] unit Unit Number.
 *
 * \return Broadcom device revison ID.
 */
extern int
bcmi_ltsw_dev_revision_id(int unit);

/*!
 * \brief Get the error handling of user callback.
 *
 * \param [in] unit Unit Number.
 *
 * \retval 0 Continue processing on the error of user callback.
 * \retval !0 Abort processing on the error of user callback.
 */
extern int
bcmi_ltsw_dev_cb_err_abort(int unit);

/*!
 * \brief Get the number of logical port.
 *
 * \param [in] unit Unit Number.
 *
 * \return Number of logical port.
 */
extern int
bcmi_ltsw_dev_logic_port_num(int unit);

/*!
 * \brief Get the maximum logical port.
 *
 * \param [in] unit Unit Number.
 *
 * \return Maximum logical port.
 */
extern int
bcmi_ltsw_dev_logic_port_max(int unit);

/*!
 * \brief Get the number of physical port.
 *
 * \param [in] unit Unit Number.
 *
 * \return Number of physical port.
 */
extern int
bcmi_ltsw_dev_phys_port_num(int unit);

/*!
 * \brief Get the maximum physical port.
 *
 * \param [in] unit Unit Number.
 *
 * \return Maximum physical port.
 */
extern int
bcmi_ltsw_dev_phys_port_max(int unit);

/*!
 * \brief Get the number of pipes.
 *
 * \param [in] unit Unit Number.
 *
 * \return number of pipes.
 */
extern int
bcmi_ltsw_dev_max_pipe_num(int unit);

/*!
 * \brief Get the maximum pipe.
 *
 * \param [in] unit Unit Number.
 *
 * \return maximum pipe.
 */
extern int
bcmi_ltsw_dev_pipe_max(int unit);

/*!
 * \brief Get bitmap of pipes.
 *
 * \param [in] unit Unit Number.
 * \param [out] pipe_bmp Bitmap of pipes.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dev_pipe_bmp(
    int unit,
    uint32_t *pipe_bmp);

/*!
 * \brief Get the number of pp pipes.
 *
 * \param [in] unit Unit Number.
 *
 * \return Number of pp pipes.
 */
extern int
bcmi_ltsw_dev_max_pp_pipe_num(int unit);

/*!
 * \brief Get the number of packet buffers.
 *
 * \param [in] unit Unit Number.
 *
 * \return Number of packet buffers.
 */
extern int
bcmi_ltsw_dev_max_packet_buffer_num(int unit);

/*!
 * \brief Get the maximum pp pipe.
 *
 * \param [in] unit Unit Number.
 *
 * \return maximum pp pipe.
 */
extern int
bcmi_ltsw_dev_pp_pipe_max(int unit);

/*!
 * \brief Get bitmap of pp pipes.
 *
 * \param [in] unit Unit Number.
 * \param [out] pipe_bmp Bitmap of pp pipes.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dev_pp_pipe_bmp(
    int unit,
    uint32_t *pipe_bmp);

/*!
 * \brief Get the maximum modid.
 *
 * \param [in] unit Unit Number.
 *
 * \return Maximum modid.
 */
extern int
bcmi_ltsw_dev_max_modid(int unit);

/*!
 * \brief Get the modport max first.
 *
 * \param [in] unit Unit Number.
 *
 * \return modport max first.
 */
extern int
bcmi_ltsw_dev_modport_max_first(int unit);

/*!
 * \brief Get the modport max.
 *
 * \param [in] unit Unit Number.
 *
 * \return modport max.
 */
extern int
bcmi_ltsw_dev_modport_max(int unit);

/*!
 * \brief Get the modid count.
 *
 * \param [in] unit Unit Number.
 *
 * \return Modid count.
 */
extern int
bcmi_ltsw_dev_modid_count(int unit);

/*!
 * \brief Get the maximum addressable port number.
 *
 * \param [in] unit Unit Number.
 *
 * \return Maximum addressable port.
 */
extern int
bcmi_ltsw_dev_max_port_addr(int unit);

/*!
 * \brief Get pipeline index of a given logical port for this unit.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Logical port number.
 *
 * \return Pipeline index, or -1 on error.
 */
extern int
bcmi_ltsw_dev_logic_port_pipe(
    int unit,
    int port);

/*!
 * \brief Get pipeline index of a given physical port for this unit.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Physical port number.
 *
 * \return Pipeline index, or -1 on error.
 */
extern int
bcmi_ltsw_dev_phys_port_pipe(
    int unit,
    int port);

/*!
 * \brief Get PP pipe index of a given logical port for this unit.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Logical port number.
 *
 * \return PP pipe index, or -1 on error.
 */
extern int
bcmi_ltsw_dev_logic_port_pp_pipe(
    int unit,
    int port);

/*!
 * \brief Get port index inside its PP pipe, for a given logical port for this unit.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Logical port number.
 *
 * \return Port index inside its PP pipe, or -1 on error.
 */
extern int
bcmi_ltsw_dev_logic_port_pp_pipe_port(
    int unit,
    int port);

/*!
 * \brief Get logical port, from given PP pipe and port index inside its PP pipe.
 *
 * \param [in] unit Unit Number.
 * \param [in] pipe PP pipe index.
 * \param [in] pp_port Port index inside its PP pipe.
 *
 * \return Logical port number, or -1 on error.
 */
extern int
bcmi_ltsw_dev_pp_pipe_port_logic_port(
    int unit,
    int pipe,
    int pp_port);

/*!
 * \brief Get bitmap of physical ports.
 *
 * \param [in] unit Unit Number.
 * \param [out] pbmp Bitmap of physical ports.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dev_phys_pbmp(
    int unit,
    bcm_pbmp_t *pbmp);

/*!
 * \brief Get bit map of physical ports associated with a given pipeline.
 *
 * \param [in] unit Unit Number.
 * \param [in] pipe Switch pipeline index.
 * \param [out] pbmp Bitmap of physical ports associated with the specified pipeline.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dev_pipe_phys_pbmp(
    int unit,
    int pipe,
    bcm_pbmp_t *pbmp);

/*!
 * \brief Get bit map of logical ports.
 *
 * \param [in] unit Unit Number.
 * \param [out] pbmp Bitmap of logical ports.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dev_logic_pbmp(
    int unit,
    bcm_pbmp_t *pbmp);

/*!
 * \brief Get bit map of logical ports associated with a given pipeline.
 *
 * \param [in] unit Unit Number.
 * \param [in] pipe Switch pipeline index.
 * \param [out] pbmp Bitmap of logical ports associated with the specified pipeline.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dev_pipe_logic_pbmp(
    int unit,
    int pipe,
    bcm_pbmp_t *pbmp);

/*!
 * \brief Get bit map of logical ports associated with a given PP pipe.
 *
 * \param [in] unit Unit Number.
 * \param [in] pipe PP pipe index.
 * \param [out] pbmp Bitmap of logical ports associated with the specified PP pipe.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dev_pp_pipe_logic_pbmp(
    int unit,
    int pipe,
    bcm_pbmp_t *pbmp);

/*!
 * \brief Get the maximum port number inside mod.
 *
 * \param [in] unit Unit Number.
 *
 * \return Maximum port number inside mod.
 */
extern int
bcmi_ltsw_dev_max_modport(int unit);

/*!
 * \brief Get the cmic port id for this unit.
 *
 * \param [in] unit Unit Number.
 *
 * \return CMIC port.
 */
extern int
bcmi_ltsw_dev_cmic_port(int unit);

/*!
 * \brief Get the core clock frequency.
 *
 * \param [in] unit Unit Number.
 *
 * \return Core clock frequency.
 */
extern int
bcmi_ltsw_dev_core_clk_freq(int unit);

#endif /* BCMI_LTSW_DEV_H */
