/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMI_LTSW_TRUNK_H
#define BCMI_LTSW_TRUNK_H

#include <bcm/trunk.h>
#include <bcm/types.h>
#include <bcm_int/ltsw/flexctr.h>

#include <sal/sal_types.h>

/*!
 * \brief Service routine to validate validity of trunk id.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier Number.
 *
 * \retval SHR_E_NONE Success.
 * \retval SHR_E_INIT No Initialization.
 * \retval SHR_E_PARAM Invalid Parameter.
 * \retval SHR_E_UNAVAIL Not Support.
 */
extern int
bcmi_ltsw_trunk_id_validate(
    int unit,
    bcm_trunk_t tid);

/*!
 * \brief convert trunk id to the L2 interface Id.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier Number.
 * \param [out] l2_if L2 interface Id.
 *
 * \retval SHR_E_NONE Success.
 * \retval SHR_E_INIT No Initialization.
 * \retval SHR_E_PARAM Invalid Parameter.
 * \retval SHR_E_UNAVAIL Not Support.
 * \retval SHR_E_PORT Invalid trunk number.
 */
extern int
bcmi_ltsw_trunk_tid_to_l2_if(
    int unit,
    bcm_trunk_t tid,
    int *l2_if);

/*!
 * \brief convert the L2 interface Id to trunk Id.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2_if L2 interface Id.
 * \param [out] tid Trunk Identifier Number.
 *
 * \retval SHR_E_NONE Success.
 * \retval SHR_E_INIT No Initialization.
 * \retval SHR_E_PARAM Invalid Parameter.
 * \retval SHR_E_UNAVAIL Not Support.
 * \retval SHR_E_PORT Invalid trunk number.
 */
extern int
bcmi_ltsw_trunk_l2_if_to_tid(
    int unit,
    int l2_if,
    bcm_trunk_t *tid);

/*!
 * \brief convert the trunk Id to the VPLAG vp Id.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier Number.
 * \param [out] vp_lag_vp The VPLAG vp Id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_tid_to_vp_lag_vp(
    int unit,
    bcm_trunk_t tid,
    int *vp_lag_vp);

/*!
 * \brief Update the VPLAG member.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier Number.
 * \param [in] gport The generic port number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_vp_lag_member_update(
    int unit,
    bcm_trunk_t tid,
    bcm_gport_t gport);

/*!
 * \brief convert the VPLAG vp Id to the trunk Id.
 *
 * \param [in] unit Unit Number.
 * \param [in] vp_lag_vp The VPLAG vp Id.
 * \param [out] tid Trunk Identifier Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_vp_lag_vp_to_tid(
    int unit,
    int vp_lag_vp,
    bcm_trunk_t *tid);

/*!
 * \brief Get the CML bits for a vp_lag port.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier Number.
 * \param [out] flags The L2 CML FLAGS.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_vp_lag_vp_learn_get(
    int unit,
    bcm_trunk_t tid,
    uint32_t *flags);

/*!
 * \brief Set the CML bits for a vp_lag port.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier Number.
 * \param [in] flags The L2 CML FLAGS.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_vp_lag_vp_learn_set(
    int unit,
    bcm_trunk_t tid,
    uint32_t flags);

/*!
 * \brief Get local member ports of a trunk group.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier Number.
 * \param [in] local_member_max Size of local_member_array.
 * \param [out] local_member_array Array of local trunk members.
 * \param [out] local_member_count Number of local trunk members.
 *
 * \retval SHR_E_NONE Success.
 * \retval BCM_E_PORT Invalid trunk identifier.
 * \retval SHR_E_PARAM Invalid Parameter.
 * \retval BCM_E_MEMORY No memory resource.
 */
extern int
bcmi_ltsw_trunk_local_members_get(
    int unit,
    bcm_trunk_t tid,
    int local_member_max,
    bcm_port_t *local_member_array,
    int *local_member_count);

/*!
 * \brief Find the dlb id of a trunk group.
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk Identifier Number.
 * \param [out] dlb_id DLB Identifier.
 *
 * \retval SHR_E_NONE Success.
 * \retval SHR_E_PARAM Invalid Parameter.
 * \retval SHR_E_NOT_FOUND DLB id is not found.
 */
extern int
bcmi_ltsw_trunk_find_dlb_id(
    int unit,
    bcm_trunk_t tid,
    int *dlb_id);

/*!
 * \brief dump software information for this module.
 *
 * \param [in] unit Unit Number.
 */
extern void
bcmi_ltsw_trunk_sw_dump(int unit);

/*!
 * \brief Set Hash Control for L2, L3 and Multipath
 *
 * \param [in] unit Unit Number.
 * \param [in] arg BCM_HASH_CONTROL_TRUNK_XXX
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_sc_hash_control_set(
    int unit,
    uint32_t arg);

/*!
 * \brief Get Hash Control for L2, L3 and Multipath
 *
 * \param [in] unit Unit Number.
 * \param [out] arg BCM_HASH_CONTROL_TRUNK_XXX
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_sc_hash_control_get(
    int unit,
    uint32_t *arg);

/*!
 * \brief Set flow based hash selection for Trunk unicast
 *
 * \param [in] unit Unit Number.
 * \param [in] arg Enable/Disable
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_sc_lb_control_unicast_set(
    int unit,
    uint32_t arg);

/*!
 * \brief Get flow based hash selection for Trunk unicast
 *
 * \param [in] unit Unit Number.
 * \param [out] arg Enable/Disable
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_sc_lb_control_unicast_get(
    int unit,
    uint32_t *arg);

/*!
 * \brief Set flow based hash selection for Trunk non-unicast
 *
 * \param [in] unit Unit Number.
 * \param [in] arg Enable/Disable
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_sc_lb_control_nonunicast_set(
    int unit,
    uint32_t arg);

/*!
 * \brief Get flow based hash selection for Trunk non-unicast
 *
 * \param [in] unit Unit Number.
 * \param [out] arg Enable/Disable
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_sc_lb_control_nonunicast_get(
    int unit,
    uint32_t *arg);

/*!
 * \brief Attach stat counter ID to a given trunk ID
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk ID
 * \param [in] info Counter information
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_flexctr_attach(
    int unit,
    bcm_trunk_t tid,
    bcmi_ltsw_flexctr_counter_info_t *info);

/*!
 * \brief Detach stat counter ID to a given trunk ID
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk ID
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_flexctr_detach(
    int unit,
    bcm_trunk_t tid);

/*!
 * \brief Get stat counter ID if associated with given trunk ID
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk ID
 * \param [out] info Counter information
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_flexctr_info_get(
    int unit,
    bcm_trunk_t tid,
    bcmi_ltsw_flexctr_counter_info_t *info);

/*!
 * \brief Set object for a given trunk ID
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk ID
 * \param [in] value Object value
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_flexctr_object_set(
    int unit,
    bcm_trunk_t tid,
    uint16_t value);

/*!
 * \brief Get object from a given trunk ID
 *
 * \param [in] unit Unit Number.
 * \param [in] tid Trunk ID
 * \param [out] value Object value
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_trunk_flexctr_object_get(
    int unit,
    bcm_trunk_t tid,
    uint16_t *value);

#endif /* BCMI_LTSW_TRUNK_H */
