/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMI_LTSW_MIRROR_H
#define BCMI_LTSW_MIRROR_H

#include <bcm/switch.h>
#include <bcm/types.h>
#include <bcm/field.h>

#include <sal/sal_types.h>

/*!
 * \brief Mirror-on-drop mode.
 */
typedef enum bcmi_ltsw_mirror_mirror_on_drop_mode_s {

    /*! Packet is mirrored due to drop at Ingress. */
    bcmiMirrorOnDropModeIngress = 0,

    /*! Packet is mirrored due to drop at Egress. */
    bcmiMirrorOnDropModeEgress = 1,

    /*! Must be the last, an invalid value. */
    bcmiMirrorOnDropModeCount = 2

} bcmi_ltsw_mirror_mirror_on_drop_mode_t;

#define BCMI_LTSW_MIRROR_MIRROR_ON_DROP_MODE_STR \
{ \
    "Ingress", \
    "Egress" \
}

/*!
 * \brief Sampler mirror mode.
 */
typedef enum bcmi_ltsw_mirror_sampler_mirror_mode_s {

    /*! Do not modify mirror container. */
    bcmiSamplerMirrorModeNotModify = 0,

    /*! Modify mirror container if sampler is above threshold. */
    bcmiSamplerMirrorModeAboveRate = 1,

    /*! Modify mirror container if sampler is below threshold. */
    bcmiSamplerMirrorModeBelowRate = 2,

    /*! Must be the last, an invalid value. */
    bcmiSamplerMirrorModeCount = 3

} bcmi_ltsw_mirror_sampler_mirror_mode_t;

#define BCMI_LTSW_MIRROR_SAMPLER_MIRROR_MODE_STR \
{ \
    "NotModify", \
    "AboveRate", \
    "BelowRate" \
}

/*!
 * \brief Sampler profile attributes.
 */
/*! Enable sampler. */
#define BCMI_LTSW_MIRROR_SAMPLER_ATTR_ENABLE (1 << 0)

/*! Sampling rate. */
#define BCMI_LTSW_MIRROR_SAMPLER_ATTR_RATE (1 << 1)

/*!
 * \brief Ingress sampler profile entry.
 */
typedef struct bcmi_ltsw_mirror_ingress_sampler_profile_s {

    /*! Enable to sample ingress packets. */
    bool enable;

    /*! Enable to trace packets seen by this sampler, applicable only if mode is BelowRate. */
    bool trace_enable;

    /*! Enable to count the number of packets seen by this sampler. */
    bool count_enable;

    /*! Enable to count the number of packets sampled by this sampler. */
    bool count_sampled_enable;

    /*! Ingress sampler mirror mode. */
    bcmi_ltsw_mirror_sampler_mirror_mode_t mode;

    /*! Mirror session number for ingress sampled packet, applicable only if mode is AboveRate or BelowRate. */
    int session_id;

    /*! Mirror instance number of ingress sampled packet, applicable only if mode is AboveRate or BelowRate. */
    int instance_id;

    /*! Sample ingress packet if the generated sFlow random number is greater than the threshold, a lower threshold leads to higher sampling frequency. */
    int rate;

} bcmi_ltsw_mirror_ingress_sampler_profile_t;

/*!
 * \brief Sampler random seed type.
 */
typedef enum bcmi_ltsw_mirror_sampler_seed_type_s {

    /*! Seed for Ingress sFlow Random Number Generator. */
    bcmiSamplerSeedIngress = 0,

    /*! Seed for Egress sFlow Random Number Generator. */
    bcmiSamplerSeedEgress = 1,

    /*! Seed for Flex sFlow Random Number Generator. */
    bcmiSamplerSeedFlex = 2,

    /*! Must be the last, an invalid value. */
    bcmiSamplerSeedCount = 3

} bcmi_ltsw_mirror_sampler_seed_type_t;

#define BCMI_LTSW_MIRROR_SAMPLER_SEED_TYPE_STR \
{ \
    "Ingress", \
    "Egress", \
    "Flex" \
}

/*!
 * \brief Mirror container.
 */
typedef enum bcmi_ltsw_mirror_container_s {

    /*! Mirror container 0. */
    bcmiMirrorCon0 = 0,

    /*! Mirror container 1. */
    bcmiMirrorCon1 = 1,

    /*! Mirror container 2. */
    bcmiMirrorCon2 = 2,

    /*! Mirror container 3. */
    bcmiMirrorCon3 = 3,

    /*! Mirror container 4. */
    bcmiMirrorCon4 = 4,

    /*! Mirror container 5. */
    bcmiMirrorCon5 = 5,

    /*! Mirror container 6. */
    bcmiMirrorCon6 = 6,

    /*! Mirror container 7. */
    bcmiMirrorCon7 = 7,

    /*! Last count - Not in use. */
    bcmiMirrorConLast = 8

} bcmi_ltsw_mirror_container_t;

#define BCMI_LTSW_MIRROR_CONTAINER_STR \
{ \
    "0", \
    "1", \
    "2", \
    "3", \
    "4", \
    "5", \
    "6", \
    "7", \
    "Last" \
}

/*!
 * \brief Type of truncation (if any) of the mirrored packet.
 */
typedef enum bcmi_ltsw_mirror_truncate_action_s {

    /*! Do not truncate the mirror copy. */
    bcmiTruncateDoNotTruncate = 0,

    /*! Truncate the mirror copy to 1 cell. */
    bcmiTruncateTruncate = 1,

    /*! Truncate the mirror copy to 1 cell and zero payload. */
    bcmiTruncateTruncateAndZero = 2,

    /*! Must be the last, an invalid value. */
    bcmiTruncateCount = 3

} bcmi_ltsw_mirror_truncate_action_t;

#define BCMI_LTSW_MIRROR_TRUNCATE_ACTION_STR \
{ \
    "DoNotTruncate", \
    "Truncate", \
    "TruncateAndZero" \
}

/*!
 * \brief Mirror information structure.
 */
typedef struct bcmi_ltsw_mirror_info_s {

    /*! Mirror container. */
    bcmi_ltsw_mirror_container_t mirror_cont;

    /*! Mirror index. */
    int mirror_index;

} bcmi_ltsw_mirror_info_t;

/*! Ingress mirroring. */
#define BCMI_LTSW_MIRROR_INGRESS 0x00000001

/*! Egress mirroring. */
#define BCMI_LTSW_MIRROR_EGRESS 0x00000002

/*!
 * \brief Specify general mirror switch behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] type The desired switch control type.
 * \param [in] arg Value to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_switch_control_set(
    int unit,
    bcm_switch_control_t type,
    int arg);

/*!
 * \brief Retrieve general mirror switch behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] type The desired switch control type.
 * \param [out] arg Value to get.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_switch_control_get(
    int unit,
    bcm_switch_control_t type,
    int *arg);

/*!
 * \brief Get local port from mirror gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Mirror gport.
 * \param [out] is_remote Mirror gport is a remote port.
 * \param [out] local_port Local port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_local_port_get(
    int unit,
    bcm_gport_t gport,
    bool *is_remote,
    bcm_gport_t *local_port);

/*!
 * \brief Get max rate range of egress sampler.
 *
 * \param [in] unit Unit Number.
 * \param [out] range_max Max rate range.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_egress_sampler_rate_range_max(
    int unit,
    int *range_max);

/*!
 * \brief Detach Mirror module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_detach(int unit);

/*!
 * \brief Display Mirror module software structure information.
 *
 * \param [in] unit Unit Number.
 */
extern void
bcmi_ltsw_mirror_sw_dump(int unit);

/*!
 * \brief Initialize the mirror per-port configuration in the runtime.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Local port number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_port_attach(
    int unit,
    bcm_port_t port);

/*!
 * \brief Clear the mirror per-port configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Local port number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_port_detach(
    int unit,
    bcm_port_t port);

/*!
 * \brief Set sampler random seed value.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sampler seed type.
 * \param [in] value Sampler seed value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_sampler_seed_set(
    int unit,
    bcmi_ltsw_mirror_sampler_seed_type_t type,
    int value);

/*!
 * \brief Get sampler random seed value.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Sampler seed type.
 * \param [out] value Sampler seed value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_sampler_seed_get(
    int unit,
    bcmi_ltsw_mirror_sampler_seed_type_t type,
    int *value);

/*!
 * \brief Set sFlow version number.
 *
 * \param [in] unit Unit Number.
 * \param [in] value sFlow version number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_sample_version_set(
    int unit,
    int value);

/*!
 * \brief Get sFlow version number.
 *
 * \param [in] unit Unit Number.
 * \param [out] value sFlow version number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_sample_version_get(
    int unit,
    int *value);

/*!
 * \brief Set PSAMP IPFIX version number.
 *
 * \param [in] unit Unit Number.
 * \param [in] value PSAMP IPFIX version number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_psamp_ipfix_version_set(
    int unit,
    int value);

/*!
 * \brief Get PSAMP IPFIX version number.
 *
 * \param [in] unit Unit Number.
 * \param [out] value PSAMP IPFIX version number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_psamp_ipfix_version_get(
    int unit,
    int *value);

/*!
 * \brief Set PSAMP epoch number.
 *
 * \param [in] unit Unit Number.
 * \param [in] value PSAMP epoch number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_psamp_epoch_set(
    int unit,
    int value);

/*!
 * \brief Get PSAMP epoch number.
 *
 * \param [in] unit Unit Number.
 * \param [out] value PSAMP epoch number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_psamp_epoch_get(
    int unit,
    int *value);

/*!
 * \brief Set uc_cos for mirror copies.
 *
 * \param [in] unit Unit Number.
 * \param [in] uc_cos UC cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_uc_cos_set(
    int unit,
    int uc_cos);

/*!
 * \brief Get uc_cos for mirror copies.
 *
 * \param [in] unit Unit Number.
 * \param [out] uc_cos UC cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_uc_cos_get(
    int unit,
    int *uc_cos);

/*!
 * \brief Set mc_cos for mirror copies.
 *
 * \param [in] unit Unit Number.
 * \param [in] mc_cos MC cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_mc_cos_set(
    int unit,
    int mc_cos);

/*!
 * \brief Get mc_cos for mirror copies.
 *
 * \param [in] unit Unit Number.
 * \param [out] mc_cos MC cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_mc_cos_get(
    int unit,
    int *mc_cos);

/*!
 * \brief Set cpu_cos for mirror-to-cpu copies. This cos will override cpu_cos from CCBI bus.
 *
 * \param [in] unit Unit Number.
 * \param [in] cpu_cos Cpu_cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_cpu_cos_set(
    int unit,
    int cpu_cos);

/*!
 * \brief Get cpu_cos for mirror-to-cpu copies.
 *
 * \param [in] unit Unit Number.
 * \param [out] cpu_cos Cpu_cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_cpu_cos_get(
    int unit,
    int *cpu_cos);

/*!
 * \brief Set enable status for mirror traffic to drop pkts with invalid VLAN.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable Enable status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_invalid_vlan_drop_set(
    int unit,
    int enable);

/*!
 * \brief Get enable status of mirror traffic dropping pkts with invalid VLAN.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Enable status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_invalid_vlan_drop_get(
    int unit,
    int *enable);

/*!
 * \brief Set enable status for skipping packet checks for mirror packets.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable Enable status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_pkt_checks_set(
    int unit,
    int enable);

/*!
 * \brief Get enable status of skipping packet checks for mirror packets.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Enable status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_pkt_checks_get(
    int unit,
    int *enable);

/*!
 * \brief Set cpu_cos for mirror-to-cpu copies. This cos will override cpu_cos from CCBI bus.
 *
 * \param [in] unit Unit Number.
 * \param [in] cpu_cos Cpu_cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_cpu_cos_set(
    int unit,
    int cpu_cos);

/*!
 * \brief Get cpu_cos for mirror-to-cpu copies.
 *
 * \param [in] unit Unit Number.
 * \param [out] cpu_cos Cpu_cos value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_cpu_cos_get(
    int unit,
    int *cpu_cos);

/*!
 * \brief Add mirror destination on a FP entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] entry_id FP entry id.
 * \param [in] flags Mirror flags to indicate ingress/egress mirroring.
 * \param [in] mirror_dest Mirror destination id.
 * \param [out] info Returned Mirror info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_field_dest_add(
    int unit,
    int entry_id,
    int flags,
    bcm_gport_t mirror_dest,
    bcmi_ltsw_mirror_info_t *info);

/*!
 * \brief Get the mirror info for given mirror destination on a FP entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] entry_id FP entry id.
 * \param [in] flags Mirror flags to indicate ingress/egress mirroring.
 * \param [in] mirror_dest Mirror destination id.
 * \param [out] info Returned Mirror info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_field_dest_get(
    int unit,
    int entry_id,
    int flags,
    bcm_gport_t mirror_dest,
    bcmi_ltsw_mirror_info_t *info);

/*!
 * \brief Delete mirror destination on a FP entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] entry_id FP entry id.
 * \param [in] flags Mirror flags to indicate ingress/egress mirroring.
 * \param [in] mirror_dest Mirror destination id. -1 indicates delete all destinations
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_field_dest_delete(
    int unit,
    int entry_id,
    int flags,
    bcm_gport_t mirror_dest);

/*!
 * \brief Get the mirror destination id for given mirror info.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Mirror info.
 * \param [out] mirror_dest Mirror destination id.
 * \param [out] flags Mirror flags to indicate ingress/egress mirroring.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_dest_id_get(
    int unit,
    bcmi_ltsw_mirror_info_t *info,
    bcm_gport_t *mirror_dest,
    int *flags);

/*!
 * \brief Add mirror destination on a field destination entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] match Field destination match.
 * \param [in] mirror_dest Mirror destination id.
 * \param [out] info Returned Mirror info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_field_destination_add(
    int unit,
    bcm_field_destination_match_t *match,
    bcm_gport_t mirror_dest,
    bcmi_ltsw_mirror_info_t *info);

/*!
 * \brief Get the mirror destination on a field destination entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] match Field destination match.
 * \param [out] mirror_dest Mirror destination id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_field_destination_get(
    int unit,
    bcm_field_destination_match_t *match,
    bcm_gport_t *mirror_dest);

/*!
 * \brief Delete mirror destination applied on a field destination entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] match Field destination match.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mirror_field_destination_delete(
    int unit,
    bcm_field_destination_match_t *match);

#endif /* BCMI_LTSW_MIRROR_H */
