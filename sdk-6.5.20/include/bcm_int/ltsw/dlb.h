/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMI_LTSW_DLB_H
#define BCMI_LTSW_DLB_H

#include <bcm/types.h>

#include <sal/sal_types.h>

/*!
 * \brief Application type of DLB for a specific device.
 */
typedef enum bcmi_ltsw_dlb_type_s {

    /*! For Link Aggregate Group application. */
    bcmi_dlb_type_fp_trunk = 0,

    /*! For fabric trunk application. */
    bcmi_dlb_type_fabric_trunk = 1,

    /*! For ECMP application. */
    bcmi_dlb_type_ecmp = 2,

    /*! DLB application type count. */
    bcmi_dlb_type_count = 3

} bcmi_ltsw_dlb_type_t;

#define BCMI_LTSW_DLB_TYPE_STR \
{ \
    "fp_trunk", \
    "fabric_trunk", \
    "ecmp" \
}

/*!
 * \brief Application controlling type of DLB for a specific device.
 */
typedef enum bcmi_ltsw_dlb_control_type_s {

    /*! Number of times historical member load and queued bytes are computed in a second. */
    bcmiDlbControlTypeSampleRate = 0,

    /*! The minimum threshold, in mbps, used to quantize historical member load. */
    bcmiDlbControlTypeEgressBytesMinThreshold = 1,

    /*! The maximum threshold, in mbps, used to quantize historical member load. */
    bcmiDlbControlTypeEgressBytesMaxThreshold = 2,

    /*! The minimum threshold, in bytes, used to quantize historical member queued bytes. */
    bcmiDlbControlTypeQueuedBytesMinThreshold = 3,

    /*! The maximum threshold, in bytes, used to quantize historical member queued bytes. */
    bcmiDlbControlTypeQueuedBytesMaxThreshold = 4,

    /*! The minimum threshold, in bytes, used to quantize historical member bytes in physical queue. */
    bcmiDlbControlTypePhysicalQueuedBytesMinThreshold = 5,

    /*! The maximum threshold, in bytes, used to quantize historical member bytes in physical queue. */
    bcmiDlbControlTypePhysicalQueuedBytesMaxThreshold = 6,

    /*! The exponent used in the calculation of exponentially weighted moving average of historical member load. */
    bcmiDlbControlTypeEgressBytesExponent = 7,

    /*! The exponent used in the calculation of exponentially weighted moving average of historical member queued bytes. */
    bcmiDlbControlTypeQueuedBytesExponent = 8,

    /*! The exponent used in the calculation of exponentially weighted moving average of historical member bytes in physical queue. */
    bcmiDlbControlTypePhysicalQueuedBytesExponent = 9,

    /*! If set, the historical member load is reset to the instantaneous value if the latter is smaller. */
    bcmiDlbControlTypeEgressBytesDecreaseReset = 10,

    /*! If set, the historical member queued bytes is updated with the instantaneous value if the latter is smaller. */
    bcmiDlbControlTypeQueuedBytesDecreaseReset = 11,

    /*! If set, the historical member bytes in physical queue is updated with the instantaneous value if the latter is smaller. */
    bcmiDlbControlTypePhysicalQueuedBytesDecreaseReset = 12,

    /*! Seed for RNG used in Dynamic Load Balancing. */
    bcmiDlbControlTypeRandomSeed = 13,

    /*! Set RNG seed for DLB flow monitoring for IFP. */
    bcmiDlbControlTypeMonitorIngressFieldRandomSeed = 14,

    /*! Set RNG seed for DLB flow monitoring. */
    bcmiDlbControlTypeMonitorIngressRandomSeed = 15,

    /*! Offset in ECMP_GROUP pointer for DLB. */
    bcmiDlbControlTypeBaseEcmpId = 16,

    /*! DLB application controlling type count. */
    bcmiDlbControlTypeCount = 17

} bcmi_ltsw_dlb_control_type_t;

#define BCMI_LTSW_DLB_CONTROL_TYPE_STR \
{ \
    "SampleRate", \
    "EgressBytesMinThreshold", \
    "EgressBytesMaxThreshold", \
    "QueuedBytesMinThreshold", \
    "QueuedBytesMaxThreshold", \
    "PhysicalQueuedBytesMinThreshold", \
    "PhysicalQueuedBytesMaxThreshold", \
    "EgressBytesExponent", \
    "QueuedBytesExponent", \
    "PhysicalQueuedBytesExponent", \
    "EgressBytesDecreaseReset", \
    "QueuedBytesDecreaseReset", \
    "PhysicalQueuedBytesDecreaseReset", \
    "RandomSeed", \
    "MonitorIngressFieldRandomSeed", \
    "MonitorIngressRandomSeed", \
    "BaseEcmpId" \
}

/*!
 * \brief Type-based Trunk Id.
 */
typedef int bcmi_ltsw_dlb_id_t;

/*!
 * \brief DLB supported features.
 */
/*! DLB supports for front panel trunk application. */
#define BCMI_LTSW_DLB_F_FP_TRUNK (1 << 0)

/*! DLB supports for fabric trunk application. */
#define BCMI_LTSW_DLB_F_FABRIC_TRUNK (1 << 1)

/*! DLB supports for equal cost multi-path application. */
#define BCMI_LTSW_DLB_F_ECMP (1 << 2)

/*! DLB trunk supports Dynamic Group Multipath. */
#define BCMI_LTSW_DLB_F_TRUNK_DGM (1 << 3)

/*! DLB trunk supports Dynamic Group Multipath. */
#define BCMI_LTSW_DLB_F_ECMP_DGM (1 << 4)

/*! DLB trunk resources are shared between front panel trunk and fabric trunk. */
#define BCMI_LTSW_DLB_F_TRUNK_SHARED (1 << 5)

/*!
 * \brief Option to control DLB id allocation.
 */
/*! Use input DLB Id instead of allocating one. */
#define BCMI_LTSW_DLB_O_WITH_ID (1 << 0)

/*!
 * \brief DLB assignment mode.
 */
/*! Reassignment to aggregate members whenever the flow set is idle for a time which exceeds or equal to inactivity duration. */
#define BCMI_LTSW_DLB_ASSIGNMENT_MODE_TIME_ELIGIBILITY 0

/*! Fixed assignment of port per flow. */
#define BCMI_LTSW_DLB_ASSIGNMENT_MODE_FIXED 1

/*! Reassignment to new member for every packet. */
#define BCMI_LTSW_DLB_ASSIGNMENT_MODE_PACKET_SPRAY 2

/*! Invalid value for dynamic_scaling_factor. */
#define BCMI_LTSW_DLB_SCALING_FACTOR_INVALID (-1)

/*! Invalid value for dynamic_load_weight. */
#define BCMI_LTSW_DLB_LOAD_WEIGHT_INVALID (-1)

/*! Invalid value for dynamic_queue_size_weight. */
#define BCMI_LTSW_DLB_QUEUE_SIZE_WEIGHT_INVALID (-1)

/*!
 * \brief DLB member link status.
 */
/*! Force down the DLB member link status. */
#define BCMI_LTSW_DLB_MEMBER_STATUS_FORCE_DOWN 0

/*! Force up the DLB member link status. */
#define BCMI_LTSW_DLB_MEMBER_STATUS_FORCE_UP 1

/*! Let HW determine the member link status. */
#define BCMI_LTSW_DLB_MEMBER_STATUS_HW 2

/*! HW indicates the link down status. */
#define BCMI_LTSW_DLB_MEMBER_STATUS_HW_DOWN 3

/*! HW indicates the link up status. */
#define BCMI_LTSW_DLB_MEMBER_STATUS_HW_UP 4

/*!
 * \brief DLB monitoring actions.
 */
/*! Do not perform monitoring actions. */
#define BCMI_LTSW_DLB_MON_ACTION_NONE 0

/*! Perform copy to cpu action. */
#define BCMI_LTSW_DLB_MON_COPY_TO_CPU 1

/*! Perform mirroring action. */
#define BCMI_LTSW_DLB_MON_MIRROR 2

/*! Perform copy to cpu and mirroring action. */
#define BCMI_LTSW_DLB_MON_COPY_TO_CPU_AND_MIRROR 3

/*! Perform trace action. */
#define BCMI_LTSW_DLB_MON_TRACE 4

/*!
 * \brief Type-based capability of Dynamic Load Balance.
 */
typedef struct bcmi_ltsw_dlb_capability_s {

    /*! The min value of DLB group identifier. */
    int id_min;

    /*! The max value of DLB group identifier. */
    int id_max;

    /*! Max groups. */
    int max_groups;

    /*! Max members per group. */
    int max_members_per_group;

    /*! Max alternate members per group. */
    int max_alt_members_per_group;

} bcmi_ltsw_dlb_capability_t;

/*!
 * \brief The member of Dynamic Load Balance.
 */
typedef struct bcmi_ltsw_dlb_member_s {

    /*! Port Number. */
    int port_id;

    /*! Next Hop Index, only for ECMP. */
    int nhop_id;

} bcmi_ltsw_dlb_member_t;

/*!
 * \brief The member port attribute of Dynamic Load Balance.
 */
typedef struct bcmi_ltsw_dlb_member_attribute_s {

    /*! Threshold scaling factor. */
    int scaling_factor;

    /*! Weighting of load in determining member quality. */
    int load_weight;

    /*! Weighting of total qsize in determining member quality. */
    int qsize_weight;

} bcmi_ltsw_dlb_member_attribute_t;

/*!
 * \brief The statistics of Dynamic Load Balance.
 */
typedef struct bcmi_ltsw_dlb_stat_s {

    /*! Fail count. */
    uint64_t fail_count;

    /*! Port reassignment count. */
    uint64_t port_reassignment_count;

    /*! Member reassignment count for ECMP only. */
    uint64_t member_reassignment_count;

} bcmi_ltsw_dlb_stat_t;

/*!
 * \brief DLB configuration flags.
 */
/*! DGM is enabled on this DLB Id. */
#define BCMI_LTSW_DLB_CF_DGM_ENABLED (1 << 0)

/*!
 * \brief The alternate path configuration of Dynamic Load Balance.
 */
typedef struct bcmi_ltsw_dlb_alternate_config_s {

    /*! Primary path threshold. */
    uint32_t primary_path_threshold;

    /*! Alternate path cost. */
    uint32_t alternate_path_cost;

    /*! Alternate path bias. */
    uint32_t alternate_path_bias;

} bcmi_ltsw_dlb_alternate_config_t;

/*!
 * \brief Generic configurations of Dynamic Load Balance.
 */
typedef struct bcmi_ltsw_dlb_config_s {

    /*! DLB configuration flags. See BCMI_LTSW_DLB_CF_xxx. */
    uint32_t flags;

    /*! Inactivity duration, in microseconds. */
    int inactivity_time;

    /*! Assignment mode. */
    int assignment_mode;

    /*! Number of flowset for Dynamic Load Balance. */
    int flowset_size;

    /*! DLB group primary path member size. */
    int num_paths;

    /*! DLB member array. */
    bcmi_ltsw_dlb_member_t *member;

    /*! DLB group primary path member max size. Used for get function only. */
    int max_num_paths;

    /*! DLB group alternate path configurations. */
    bcmi_ltsw_dlb_alternate_config_t alternate_config;

    /*! DLB group alternate path member size. */
    int alternate_num_paths;

    /*! DLB alternate member array. */
    bcmi_ltsw_dlb_member_t *alternate_member;

    /*! DLB group alternate path member max size. Used for get function only. */
    int max_alternate_num_paths;

} bcmi_ltsw_dlb_config_t;

/*!
 * \brief The statistics of Dynamic Load Balance.
 */
typedef struct bcmi_ltsw_dlb_monitor_s {

    /*! Enable monitoring for a specified DLB Id. */
    int enable;

    /*! Dlb monitoring actions. */
    int action;

    /*! DLB monitor sampling rate. */
    uint64_t sample_rate;

} bcmi_ltsw_dlb_monitor_t;

/*!
 * \brief Create a dlb Id for a specific application type
 *
 * \param [in] unit Unit Number.
 * \param [in] option DLB create option, See BCMI_LTSW_DLB_O_XXX.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [out] dlb_id Dynamic Load Balance Id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_id_create(
    int unit,
    uint32_t option,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_id_t *dlb_id);

/*!
 * \brief Destroy a dlb Id for a specific application type.
 *
 * \param [in] unit Unit Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [in] dlb_id Dynamic Load Balance Id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_id_destroy(
    int unit,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_id_t dlb_id);

/*!
 * \brief Validate the DLB id is configured or not.
 *
 * \param [in] unit Unit Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [in] dlb_id Dynamic Load Balance Id.
 *
 * \retval true The DLB Id is configured.
 * \retval false The DLB Id is not configured.
 */
extern bool
bcmi_ltsw_dlb_id_configured(
    int unit,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_id_t dlb_id);

/*!
 * \brief Set DLB member port attributes.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [in] attribute Type-based DLB member port attribute.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_member_attribute_set(
    int unit,
    bcm_port_t port,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_member_attribute_t *attribute);

/*!
 * \brief Get DLB member port attributes.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [out] attribute Type-based DLB member port attribute.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_member_attribute_get(
    int unit,
    bcm_port_t port,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_member_attribute_t *attribute);

/*!
 * \brief Get statistics for a DLB group.
 *
 * \param [in] unit Unit Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [in] dlb_id Dynamic Load Balance Id.
 * \param [out] stat DLB configurations.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_stat_get(
    int unit,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_id_t dlb_id,
    bcmi_ltsw_dlb_stat_t *stat);

/*!
 * \brief Get statistics from HW for a DLB group.
 *
 * \param [in] unit Unit Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [in] dlb_id Dynamic Load Balance Id.
 * \param [out] stat DLB configurations.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_stat_sync_get(
    int unit,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_id_t dlb_id,
    bcmi_ltsw_dlb_stat_t *stat);

/*!
 * \brief dump software information for DLB module.
 *
 * \param [in] unit Unit Number.
 */
extern void
bcmi_ltsw_dlb_sw_dump(int unit);

/*!
 * \brief Get chip-specific sub-features for DLB.
 *
 * \param [in] unit Unit Number.
 * \param [out] features Trunk Type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_feature_get(
    int unit,
    uint32_t *features);

/*!
 * \brief Get chip-specific sub-features for DLB.
 *
 * \param [in] unit Unit Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [out] cap Type-based capability for DLB.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_capability_get(
    int unit,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_capability_t *cap);

/*!
 * \brief Initialize the dlb module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_init(int unit);

/*!
 * \brief De-init the dlb module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_deinit(int unit);

/*!
 * \brief Initialize the dlb module.
 *
 * \param [in] unit Unit Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_type_init(
    int unit,
    bcmi_ltsw_dlb_type_t dlb_type);

/*!
 * \brief De-init the dlb module.
 *
 * \param [in] unit Unit Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_type_deinit(
    int unit,
    bcmi_ltsw_dlb_type_t dlb_type);

/*!
 * \brief Set configurations of a DLB group.
 *
 * \param [in] unit Unit Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [in] dlb_id Dynamic Load Balance Id.
 * \param [in] dlb_config DLB configurations.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_config_set(
    int unit,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_id_t dlb_id,
    bcmi_ltsw_dlb_config_t *dlb_config);

/*!
 * \brief Get configurations of a DLB group.
 *
 * \param [in] unit Unit Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [in] dlb_id Dynamic Load Balance Id.
 * \param [out] dlb_config DLB configurations.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_config_get(
    int unit,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_id_t dlb_id,
    bcmi_ltsw_dlb_config_t *dlb_config);

/*!
 * \brief Set DLB monitor.
 *
 * \param [in] unit Unit Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [in] dlb_id Dynamic Load Balance Id.
 * \param [in] monitor DLB monitoring configurations.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_monitor_set(
    int unit,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_id_t dlb_id,
    bcmi_ltsw_dlb_monitor_t *monitor);

/*!
 * \brief Get DLB monitor configurations.
 *
 * \param [in] unit Unit Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [in] dlb_id Dynamic Load Balance Id.
 * \param [out] monitor DLB monitoring configurations.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_monitor_get(
    int unit,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_id_t dlb_id,
    bcmi_ltsw_dlb_monitor_t *monitor);

/*!
 * \brief Set DLB member status.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [in] status Type-based DLB member status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_member_status_set(
    int unit,
    bcm_port_t port,
    bcmi_ltsw_dlb_type_t dlb_type,
    int status);

/*!
 * \brief Get DLB member status.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [out] status Type-based DLB member status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_member_status_get(
    int unit,
    bcm_port_t port,
    bcmi_ltsw_dlb_type_t dlb_type,
    int *status);

/*!
 * \brief Set DLB Eligibility Ethertype.
 *
 * \param [in] unit Unit Number.
 * \param [in] flags Flags.
 * \param [in] ethertype_count Ethertype array count.
 * \param [in] ethertype_array Ethertype array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_ethertype_set(
    int unit,
    uint32_t flags,
    int ethertype_count,
    int *ethertype_array);

/*!
 * \brief Get DLB Eligibility Ethertype.
 *
 * \param [in] unit Unit Number.
 * \param [in] ethertype_count_max Max ethertype array count.
 * \param [out] flags Flags.
 * \param [out] ethertype_array Ethertype array.
 * \param [out] ethertype_count Actual ethertype array count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_ethertype_get(
    int unit,
    int ethertype_count_max,
    uint32_t *flags,
    int *ethertype_array,
    int *ethertype_count);

/*!
 * \brief Set DLB controlling information.
 *
 * \param [in] unit Unit Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [in] type Dynamic Load Balance controlling type.
 * \param [in] value Type-based controlling value for DLB.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_control_set(
    int unit,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_control_type_t type,
    uint64_t value);

/*!
 * \brief Get DLB controlling information.
 *
 * \param [in] unit Unit Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [in] type Dynamic Load Balance controlling type.
 * \param [out] value Type-based controlling value for DLB.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_control_get(
    int unit,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_control_type_t type,
    uint64_t *value);

/*!
 * \brief Set statistics for a DLB group.
 *
 * \param [in] unit Unit Number.
 * \param [in] dlb_type Dynamic Load Balance type.
 * \param [in] dlb_id Dynamic Load Balance Id.
 * \param [in] stat DLB configurations.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_dlb_stat_set(
    int unit,
    bcmi_ltsw_dlb_type_t dlb_type,
    bcmi_ltsw_dlb_id_t dlb_id,
    bcmi_ltsw_dlb_stat_t *stat);

#endif /* BCMI_LTSW_DLB_H */
