
/*
 *         
 * 
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *         
 *     
 * DO NOT EDIT THIS FILE!
 */

#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX family only!"
#endif /* BCM_DNX_SUPPORT */

#ifndef _FLEXE_STD_H__H_
#define _FLEXE_STD_H__H_

#include <soc/portmod/portmod.h>
#include <shared/shrextend/shrextend_debug.h>
/*initialize an FlexE core.*/
shr_error_e flexe_std_init(
    int unit);

/*De-initialize an FlexE core.*/
shr_error_e flexe_std_deinit(
    int unit);

/*Add FlexE core ports to FlexE group*/
shr_error_e flexe_std_group_phy_add(
    int unit,
    uint32 flags,
    int group_index,
    soc_pbmp_t flexe_core_port_bmp,
    const int *logical_phy_id,
    const flexe_core_port_info_t * port_info);

/*Remove FlexE core ports from FlexE group*/
shr_error_e flexe_std_group_phy_remove(
    int unit,
    uint32 flags,
    int group_index,
    soc_pbmp_t flexe_core_port_bmp);

/*Add FlexE client to FlexE group(bus A)*/
shr_error_e flexe_std_client_add(
    int unit,
    int client_channel,
    uint32 flags,
    int cal_id,
    const int *flexe_core_port_array,
    bcm_port_flexe_time_slot_t ts_mask,
    int nof_flexe_core_ports);

/*Delete an existing FlexE client (bus A)*/
shr_error_e flexe_std_client_delete(
    int unit,
    int client_channel,
    uint32 flags,
    int cal_id,
    const int *flexe_core_port_array,
    bcm_port_flexe_time_slot_t ts_mask,
    int nof_flexe_core_ports);

/*Add a MAC client to bus B*/
shr_error_e flexe_std_mac_client_add(
    int unit,
    int client_channel,
    int nof_slots);

/*Delete a MAC client from bus B*/
shr_error_e flexe_std_mac_client_delete(
    int unit,
    int client_channel,
    int nof_slots);

/*Add SAR client to bus C*/
shr_error_e flexe_std_sar_client_add(
    int unit,
    int client_channel,
    uint32 flags,
    int ts_num);

/*Delete SAR client from bus C*/
shr_error_e flexe_std_sar_client_delete(
    int unit,
    int client_channel,
    uint32 flags,
    int ts_num);

/*Allocated time slots in rate adapter*/
shr_error_e flexe_std_rateadpt_slots_add(
    int unit,
    int client_channel,
    int ts_num);

/*Delete time slots in rate adapter*/
shr_error_e flexe_std_rateadpt_slots_delete(
    int unit,
    int client_channel);

/*Map SAR channel to ILKN channel*/
shr_error_e flexe_std_sar_channel_map_set(
    int unit,
    uint32 flags,
    int sar_channel,
    int ilkn_channel,
    int enable);

/*Add a cross-connect in 66b switch*/
shr_error_e flexe_std_66b_switch_set(
    int unit,
    int src_channel,
    int dest_channel,
    int index,
    int enable);

/*Get/Set FlexE logical PHY ID for FlexE core port*/
shr_error_e flexe_std_oh_logical_phy_id_set(
    int unit,
    int flexe_core_port,
    int logical_phy_id);
shr_error_e flexe_std_oh_logical_phy_id_get(
    int unit,
    int flexe_core_port,
    uint32 flags,
    int *logical_phy_id);

/*Get/Set FlexE group ID for FlexE core port*/
shr_error_e flexe_std_oh_group_id_set(
    int unit,
    int flexe_core_port,
    int group_id);
shr_error_e flexe_std_oh_group_id_get(
    int unit,
    int flexe_core_port,
    uint32 flags,
    int *group_id);

/*Get/Set FlexE client IDs for FlexE OH calendar*/
shr_error_e flexe_std_oh_client_id_set(
    int unit,
    int cal_id,
    int nof_ports,
    const int *flexe_core_port_array,
    int nof_slots,
    const int *calendar_slots);
shr_error_e flexe_std_oh_client_id_get(
    int unit,
    int cal_id,
    uint32 flags,
    int nof_ports,
    const int *flexe_core_port_array,
    int nof_slots,
    int *calendar_slots);

/*Set FlexE PHYMAP for FlexE core port*/
shr_error_e flexe_std_oh_phymap_set(
    int unit,
    int flexe_core_port,
    int logical_phy_id,
    int enable);

/*Get/Set CR bit for FlexE core port*/
shr_error_e flexe_std_oh_cr_bit_set(
    int unit,
    int flexe_core_port,
    int cal_id);
shr_error_e flexe_std_oh_cr_bit_get(
    int unit,
    int flexe_core_port,
    uint32 flags,
    int *cal_id);

/*Get/Set CA bit for FlexE core port*/
shr_error_e flexe_std_oh_ca_bit_set(
    int unit,
    int flexe_core_port,
    int cal_id);
shr_error_e flexe_std_oh_ca_bit_get(
    int unit,
    int flexe_core_port,
    uint32 flags,
    int *cal_id);

/*Get/Set C bit for FlexE core port*/
shr_error_e flexe_std_oh_c_bit_set(
    int unit,
    int flexe_core_port,
    int cal_id);
shr_error_e flexe_std_oh_c_bit_get(
    int unit,
    int flexe_core_port,
    uint32 flags,
    int *cal_id);

/*Get/Set SC bit for FlexE core port*/
shr_error_e flexe_std_oh_sc_bit_set(
    int unit,
    int flexe_core_port,
    int sync_config);
shr_error_e flexe_std_oh_sc_bit_get(
    int unit,
    int flexe_core_port,
    uint32 flags,
    int *sync_config);

/*Get/Set active calendar for FlexE core port*/
shr_error_e flexe_std_active_calendar_set(
    int unit,
    int flexe_core_port,
    int cal_id);
shr_error_e flexe_std_active_calendar_get(
    int unit,
    int flexe_core_port,
    uint32 flags,
    int *cal_id);

/*Get OH alarm status for FlexE core port*/
shr_error_e flexe_std_oh_alarm_status_get(
    int unit,
    int flexe_core_port,
    uint16 *alarm_status);

/*Get calendar OH mismatch timeslots for FlexE core port*/
shr_error_e flexe_std_oh_cal_mismatch_ts_get(
    int unit,
    int flexe_core_port,
    bcm_port_flexe_time_slot_t * time_slots);

/*Get OAM alarm status for FlexE core port*/
shr_error_e flexe_std_oam_alarm_status_get(
    int unit,
    int flexe_core_port,
    uint16 *alarms_status);

/*Enable/disable OAM alarm for FlexE client*/
shr_error_e flexe_std_oam_alarm_enable_set(
    int unit,
    int client_channel,
    int alarm_type,
    int enable);

/*Set BAS OAM period for FlexE client*/
shr_error_e flexe_std_oam_base_period_set(
    int unit,
    int client_channel,
    uint32 flags,
    uint32 base_period);
shr_error_e flexe_std_oam_base_period_get(
    int unit,
    int client_channel,
    uint32 flags,
    uint32 *base_period);

/*Enable/disable BAS insertion for FlexE client*/
shr_error_e flexe_std_oam_base_insert_enable_set(
    int unit,
    int client_channel,
    uint32 enable);
shr_error_e flexe_std_oam_base_insert_enable_get(
    int unit,
    int client_channel,
    uint32 *enable);

/*Enable/disable OAM bypass for FlexE client*/
shr_error_e flexe_std_oam_bypass_enable_set(
    int unit,
    int client_channel,
    uint32 flags,
    uint32 enable);
shr_error_e flexe_std_oam_bypass_enable_get(
    int unit,
    int client_channel,
    uint32 flags,
    uint32 *enable);

/*Enable/disable OAM bypass for SAR client*/
shr_error_e flexe_std_sar_oam_bypass_enable_set(
    int unit,
    int client_channel,
    uint32 flags,
    uint32 enable);
shr_error_e flexe_std_sar_oam_bypass_enable_get(
    int unit,
    int client_channel,
    uint32 flags,
    uint32 *enable);

/*Enable/disable OAM local fault insertion for FlexE client*/
shr_error_e flexe_std_oam_local_fault_insert_set(
    int unit,
    int client_channel,
    uint32 enable);
shr_error_e flexe_std_oam_local_fault_insert_get(
    int unit,
    int client_channel,
    uint32 *enable);

/*Enable/disable OAM remote fault insertion for FlexE client*/
shr_error_e flexe_std_oam_remote_fault_insert_set(
    int unit,
    int client_channel,
    uint32 enable);
shr_error_e flexe_std_oam_remote_fault_insert_get(
    int unit,
    int client_channel,
    uint32 *enable);

/*Configure SD alarm block number for FlexE client*/
shr_error_e flexe_std_oam_sd_alm_block_num_set(
    int unit,
    int client_channel,
    uint32 block_num);
shr_error_e flexe_std_oam_sd_alm_block_num_get(
    int unit,
    int client_channel,
    uint32 *block_num);

/*Configure SD BIP8 error set threshold for FlexE client*/
shr_error_e flexe_std_oam_sd_alm_trigger_thr_set(
    int unit,
    int client_channel,
    uint32 threshold);
shr_error_e flexe_std_oam_sd_alm_trigger_thr_get(
    int unit,
    int client_channel,
    uint32 *threshold);

/*Configure SD BIP8 error clear threshold for FlexE client*/
shr_error_e flexe_std_oam_sd_alm_clear_thr_set(
    int unit,
    int client_channel,
    uint32 threshold);
shr_error_e flexe_std_oam_sd_alm_clear_thr_get(
    int unit,
    int client_channel,
    uint32 *threshold);

/*Configure SF bip8 alarm block number for FlexE client*/
shr_error_e flexe_std_oam_sf_bip8_alm_block_num_set(
    int unit,
    int client_channel,
    uint32 block_num);
shr_error_e flexe_std_oam_sf_bip8_alm_block_num_get(
    int unit,
    int client_channel,
    uint32 *block_num);

/*Configure SF BIP8 error set threshold for FlexE client*/
shr_error_e flexe_std_oam_sf_bip8_alm_trigger_thr_set(
    int unit,
    int client_channel,
    uint32 threshold);
shr_error_e flexe_std_oam_sf_bip8_alm_trigger_thr_get(
    int unit,
    int client_channel,
    uint32 *threshold);

/*Configure SF BIP8 error clear threshold for FlexE client*/
shr_error_e flexe_std_oam_sf_bip8_alm_clear_thr_set(
    int unit,
    int client_channel,
    uint32 threshold);
shr_error_e flexe_std_oam_sf_bip8_alm_clear_thr_get(
    int unit,
    int client_channel,
    uint32 *threshold);

/*Configure SD BEI alarm block number for FlexE client*/
shr_error_e flexe_std_oam_sd_bei_alm_block_num_set(
    int unit,
    int client_channel,
    uint32 block_num);
shr_error_e flexe_std_oam_sd_bei_alm_block_num_get(
    int unit,
    int client_channel,
    uint32 *block_num);

/*Configure SD BEI error set threshold for FlexE client*/
shr_error_e flexe_std_oam_sd_bei_alm_trigger_thr_set(
    int unit,
    int client_channel,
    uint32 threshold);
shr_error_e flexe_std_oam_sd_bei_alm_trigger_thr_get(
    int unit,
    int client_channel,
    uint32 *threshold);

/*Configure SD BEI error clear threshold for FlexE client*/
shr_error_e flexe_std_oam_sd_bei_alm_clear_thr_set(
    int unit,
    int client_channel,
    uint32 threshold);
shr_error_e flexe_std_oam_sd_bei_alm_clear_thr_get(
    int unit,
    int client_channel,
    uint32 *threshold);

/*Configure SF BEI alarm block number for FlexE client*/
shr_error_e flexe_std_oam_sf_bei_alm_block_num_set(
    int unit,
    int client_channel,
    uint32 block_num);
shr_error_e flexe_std_oam_sf_bei_alm_block_num_get(
    int unit,
    int client_channel,
    uint32 *block_num);

/*Configure SF BEI error set threshold for FlexE client*/
shr_error_e flexe_std_oam_sf_bei_alm_trigger_thr_set(
    int unit,
    int client_channel,
    uint32 threshold);
shr_error_e flexe_std_oam_sf_bei_alm_trigger_thr_get(
    int unit,
    int client_channel,
    uint32 *threshold);

/*Configure SF BEI error clear threshold for FlexE client*/
shr_error_e flexe_std_oam_sf_bei_alm_clear_thr_set(
    int unit,
    int client_channel,
    uint32 threshold);
shr_error_e flexe_std_oam_sf_bei_alm_clear_thr_get(
    int unit,
    int client_channel,
    uint32 *threshold);

/*Get OAM BIP8 counter for FlexE client*/
shr_error_e flexe_std_oam_bip8_counter_get(
    int unit,
    int client_channel,
    uint64 *val);

/*Get OAM BEI counter for FlexE client*/
shr_error_e flexe_std_oam_bei_counter_get(
    int unit,
    int client_channel,
    uint64 *val);

/*Get OAM packet counter for FlexE client*/
shr_error_e flexe_std_oam_pkt_count_get(
    int unit,
    int client_channel,
    uint64 *val);

/*Get OAM BAS packet counter for FlexE client*/
shr_error_e flexe_std_oam_base_pkt_count_get(
    int unit,
    int client_channel,
    uint64 *val);

/*Configure default FlexE phy settings*/
shr_error_e flexe_std_phy_default_config_set(
    int unit,
    int flexe_core_port,
    int speed);

/*Configure FlexE OAM alarm collection timer step*/
shr_error_e flexe_std_oam_alarm_collection_timer_step_set(
    int unit,
    int step);
shr_error_e flexe_std_oam_alarm_collection_timer_step_get(
    int unit,
    int *step);

/*Number of steps for OAM alarm collection period*/
shr_error_e flexe_std_oam_alarm_collection_step_count_set(
    int unit,
    int step_count);
shr_error_e flexe_std_oam_alarm_collection_step_count_get(
    int unit,
    int *step_count);

/*Configure/get SAR cell mode in FlexE core*/
shr_error_e flexe_std_sar_cell_mode_set(
    int unit,
    int cell_mode);
shr_error_e flexe_std_sar_cell_mode_get(
    int unit,
    int *cell_mode);

/*Set the channel map in FlexE Core*/
shr_error_e flexe_std_channel_map_set(
    int unit,
    uint32 flags,
    int flexe_core_port,
    uint32 local_port);

/*The local fault status for FlexE client*/
shr_error_e flexe_std_client_local_fault_get(
    int unit,
    int client_channel,
    int *local_fault_status);

/*The Remote fault status for FlexE client*/
shr_error_e flexe_std_client_remote_fault_get(
    int unit,
    int client_channel,
    int *remote_fault_status);

/*The local fault status for FlexE SAR client*/
shr_error_e flexe_std_sar_client_local_fault_get(
    int unit,
    int client_channel,
    int *local_fault_status);

/*The Remote fault status for FlexE SAR client*/
shr_error_e flexe_std_sar_client_remote_fault_get(
    int unit,
    int client_channel,
    int *remote_fault_status);

#endif /*_FLEXE_STD_H_*/
