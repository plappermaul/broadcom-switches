
/*
 *         
 * 
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *         
 *     
 * DO NOT EDIT THIS FILE!
 */

#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX family only!"
#endif /* BCM_DNX_SUPPORT */

#ifndef _IMB_ILE_H__H_
#define _IMB_ILE_H__H_

#include <soc/portmod/portmod.h>
#include <bcm/port.h>
#include <bcm/cosq.h>
#include <bcm_int/dnx/port/imb/imb_diag.h>
#include <bcm_int/dnx/cosq/ingress/cosq_ingress_port.h>
#include <soc/dnxc/dnxc_port.h>
/*initialize an IMB.*/
int imb_ile_init(
    int unit,
    const imb_create_info_t * imb_info,
    imb_specific_create_info_t * imb_specific_info);

/*De-initialize an existing IMB.*/
int imb_ile_deinit(
    int unit,
    const imb_create_info_t * imb_info,
    imb_specific_create_info_t * imb_specific_info);

/*Add new IMB (Interface Management Block) port*/
int imb_ile_port_attach(
    int unit,
    bcm_port_t port,
    uint32 flags);

/*Remove an existing IMB (Interface Management Block) port*/
int imb_ile_port_detach(
    int unit,
    bcm_port_t port);

/*Enable / disable a port*/
int imb_ile_port_enable_set(
    int unit,
    bcm_port_t port,
    uint32 flags,
    int enable);
int imb_ile_port_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*Enable / disable port RX*/
int imb_ile_port_rx_data_enable_set(
    int unit,
    bcm_port_t port,
    int enable);

/*Enable / disable loopback on a port*/
int imb_ile_port_loopback_set(
    int unit,
    bcm_port_t port,
    int loopback);
int imb_ile_port_loopback_get(
    int unit,
    bcm_port_t port,
    int *loopback);

/*Get port link state*/
int imb_ile_port_link_state_get(
    int unit,
    bcm_port_t port,
    int clear_status,
    bcm_port_link_state_t * link_state);

/*We can't measure the serdes freq directly, but we can measure the sync_eth counter, 
            and reconstruct the serdes freq from it by multiplying it with the blocks dividers. 
            In PML and PMH GSMII the dividers are:
            VCO                                                   Sync_eth counter
              _        --> PM synce_div --> NBIL/H synce div -->         _
            _| |_                                                      _| |_
            So 
            VCO = Fsynce * PMH_40_PML_20 * PM_1_7_11
            and we need to do:
            SerDes_rate = VCO/Oversample = Fsynce * PMH_40_PML_20 * PM_1_7_11 / Oversample

            In PMH which is not GSMII the dividers are:
            Serdes freq                                            Sync_eth counter
              _         --> PM synce_div --> NBIL/H synce div -->        _
            _| |_                                                      _| |_
            So we need to do:
            SerDes_rate = Fsynce * PMH_40_PML_20 * PM_1_7_11 */
int imb_ile_port_phy_measure_get(
    int unit,
    bcm_port_t port,
    int is_rx,
    soc_dnxc_port_phy_measure_t * phy_measure);

/*Set/Get the logical lane order for ILKN ports*/
int imb_ile_port_logical_lane_order_set(
    int unit,
    bcm_port_t port,
    const int *lane_order,
    int lane_order_size);
int imb_ile_port_logical_lane_order_get(
    int unit,
    bcm_port_t port,
    int lane_order_max_size,
    int *lane_order,
    int *lane_order_actual_size);

/*Set prbs rx or tx enable status*/
int imb_ile_port_prbs_enable_set(
    int unit,
    bcm_port_t port,
    int type,
    portmod_prbs_mode_t prbs_mode,
    int enable);

/*Port speed configuration*/
int imb_ile_port_speed_config_set(
    int unit,
    bcm_port_t port,
    const portmod_speed_config_t * speed_config);
int imb_ile_port_speed_config_get(
    int unit,
    bcm_port_t port,
    portmod_speed_config_t * speed_config);

/*Get mib counter*/
int imb_ile_port_mib_counter_get(
    int unit,
    bcm_port_t port,
    int counter_type,
    uint64 *counter_val);

/*Clear mib counter*/
int imb_ile_port_mib_counter_clear(
    int unit,
    bcm_port_t port);

/*Get port's default resource configurations*/
int imb_ile_port_resource_default_get(
    int unit,
    bcm_port_t port,
    uint32 flags,
    bcm_port_resource_t * resource);

/*Validate the FEC+SPEED combinations*/
int imb_ile_port_fec_speed_validate(
    int unit,
    bcm_port_t port,
    bcm_port_phy_fec_t fec_type,
    int speed);

/*Check if phy control is supported for current PM.*/
int imb_ile_port_phy_control_validate(
    int unit,
    bcm_port_t port,
    bcm_port_phy_control_t type,
    int is_set);

/*Action on link status change*/
int imb_ile_port_link_status_change_event(
    int unit,
    bcm_port_t port);

/*Initialize Portmod add_info before calling portmod_port_add.*/
int imb_ile_portmod_add_info_config(
    int unit,
    bcm_port_t port,
    portmod_port_add_info_t * add_info);

#endif /*_IMB_ILE_H_*/
