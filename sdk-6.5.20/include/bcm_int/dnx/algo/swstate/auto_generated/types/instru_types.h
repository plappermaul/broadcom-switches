/** \file algo/swstate/auto_generated/types/instru_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef __INSTRU_TYPES_H__
#define __INSTRU_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr_internal.h>
#include <include/bcm_int/dnx/algo/instru/algo_instru.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_instru.h>
#include <soc/dnxc/swstate/callbacks/sw_state_htb_callbacks.h>
#include <soc/dnxc/swstate/types/sw_state_bitmap.h>
#include <soc/dnxc/swstate/types/sw_state_hash_table.h>
/*
 * STRUCTs
 */

/**
 * Key for sFlow collector destination
 */
typedef struct {
    /**
     * UDP tunnel to the collector
     */
    bcm_gport_t udp_tunnel;
    /**
     * Sub agent id for this destination
     */
    uint32 sub_agent_id;
    /**
     * Eventor RX context to use for this flow
     */
    uint16 eventor_id;
} sflow_destination_key_t;

/**
 * SW structs for sFlow.
 */
typedef struct {
    /**
     * Virtual template keeping track of sFlow destinations.
     */
    dnx_algo_template_t sflow_destination_profile;
    /**
     * Map between udp tunnel profile to sFlow RAW stack.
     */
    int** raw_outlifs_by_profile;
    /**
     * Map between the sFlow profile and the udp tunnel profile.
     */
    sw_state_htbl_t sflow_encap_to_sflow_destination_profile;
    /**
     * Number of allocated encap entries.                     This number can't exceed the maximum.
     */
    int nof_sflow_encaps;
    /**
     * Global agent ip address for sFlow
     */
    uint32 agent_ip_address;
} sflow_info_t;

/**
 * SW structs for Eventor constant values info.
 */
typedef struct {
    /**
     * output offset for the constant value in 4 byte words.
     */
    uint32 offset;
} eventor_const_values_info_t;

/**
 * SW structs for Eventor context.
 */
typedef struct {
    /**
     * buffer 0 offset.
     */
    uint32 buffer0_offset;
    /**
     * buffer 1 offset.
     */
    uint32 buffer1_offset;
    /**
     * buffer size in bytes.
     */
    uint32 buffer_size;
    /**
     * program 0 offset.
     */
    uint32 program0_offset;
    /**
     * program 1 offset.
     */
    uint32 program1_offset;
    /**
     * number of context operations.
     */
    uint32 nof_operations;
    /**
     * number of context constant values
     */
    uint32 nof_const_values;
    /**
     * context used builders bitmap
     */
    uint32 builders;
} eventor_tx_context_info_t;

/**
 * SW structs for Eventor context.
 */
typedef struct {
    /**
     * buffer 0 offset.
     */
    uint32 buffer0_offset;
    /**
     * buffer 1 offset.
     */
    uint32 buffer1_offset;
    /**
     * buffer size in bytes.
     */
    uint32 buffer_size;
} eventor_rx_context_info_t;

/**
 * SW structs for Eventor
 */
typedef struct {
    /**
     * flags.
     */
    uint32 flags;
    /**
     * bitmap of sram banks used for rx.
     */
    SHR_BITDCL* rx_sram_banks_bitmap;
    /**
     * bitmap of configured builders.
     */
    SHR_BITDCL* builder_configured_bitmap;
    /**
     * bitmap of used rx contexts.
     */
    SHR_BITDCL* rx_contexts_bitmap;
    /**
     * eventor context info.
     */
    eventor_rx_context_info_t* rx_contexts_info;
    /**
     * bitmap of used tx contexts.
     */
    SHR_BITDCL* tx_contexts_bitmap;
    /**
     * bitmap of used tx contexts queue type.
     */
    SHR_BITDCL* tx_contexts_queue_type_bitmap;
    /**
     * bitmap of sram banks used for tx.
     */
    SHR_BITDCL* tx_sram_banks_bitmap;
    /**
     * eventor context info.
     */
    eventor_tx_context_info_t* tx_contexts_info;
} eventor_info_t;

/**
 * SW state for instru
 */
typedef struct {
    /**
     * SW state for sFlow
     */
    sflow_info_t sflow_info;
    /**
     * SW state for Eventor
     */
    eventor_info_t eventor_info;
} instru_sw_state_t;


#endif /* __INSTRU_TYPES_H__ */
