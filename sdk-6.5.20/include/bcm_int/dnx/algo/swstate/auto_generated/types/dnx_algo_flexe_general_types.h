/** \file algo/swstate/auto_generated/types/dnx_algo_flexe_general_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef __DNX_ALGO_FLEXE_GENERAL_TYPES_H__
#define __DNX_ALGO_FLEXE_GENERAL_TYPES_H__

#ifdef BCM_DNX_SUPPORT
#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm/port.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_nif.h>
#include <soc/dnxc/swstate/types/sw_state_mutex.h>
#include <soc/dnxc/swstate/types/sw_state_pbmp.h>
/*
 * ENUMs
 */

/**
 * FlexE link list FIFO types
 */
typedef enum {
    /**
     * FlexE Southbound Rx fifo
     */
    DNX_ALGO_FLEXE_FIFO_SB_RX = 0,
    /**
     * TMC FIFO
     */
    DNX_ALGO_FLEXE_FIFO_TMC = 1,
    /**
     * RMC FIFO
     */
    DNX_ALGO_FLEXE_FIFO_RMC = 2,
    /**
     * Number of fifos
     */
    DNX_ALGO_FLEXE_NOF_LINK_LIST_FIFOS = 3
} dnx_algo_flexe_link_list_fifo_type_e;

/*
 * STRUCTs
 */

/**
 * FlexE group resource mngr, including FlexE group id and index
 */
typedef struct {
    /**
     * FlexE BusA client channel allocation manager
     */
    dnx_algo_res_t client_channel;
    /**
     * FlexE MAC channel allocation manager
     */
    dnx_algo_res_t mac_channel;
    /**
     * FlexE SAR channel allocation manager
     */
    dnx_algo_res_t sar_channel;
    /**
     * FlexE core port allocation
     */
    dnx_algo_res_t flexe_core_port;
    /**
     * Allocate FlexE RMC ID
     */
    dnx_algo_res_t rmc_id;
} dnx_algo_flexe_general_resource_alloc_t;

/**
 * FlexE group info Data base.
 */
typedef struct {
    /**
     * Boolean, If group is valid.
     */
    int valid;
    /**
     * FlexE group ID required by FlexE spec.
     */
    int group_id;
    /**
     * The FlexE phy ports in the FlexE group.
     */
    bcm_pbmp_t phy_ports;
    /**
     * Demux Calendar slots for each group
     */
    int demux_cal_slots[bcmPortFlexeGroupCalCount][DNX_DATA_MAX_NIF_FLEXE_MAX_NOF_SLOTS];
    /**
     * Mux Calendar slots for each group
     */
    int mux_cal_slots[bcmPortFlexeGroupCalCount][DNX_DATA_MAX_NIF_FLEXE_MAX_NOF_SLOTS];
    /**
     * Boolean, If group is used for FlexE core bypass mode.
     */
    int is_bypass;
    /**
     * Boolean, Indicate FlexE cal slots is unaligned in FlexE core.
     */
    uint8 cal_slots_unaligned;
} dnx_algo_flexe_general_group_info_t;

/**
 * FlexE general Data Base
 */
typedef struct {
    /**
     * FlexE general resource mngr, including FlexE client channel id
     */
    dnx_algo_flexe_general_resource_alloc_t resource_alloc;
    /**
     * FlexE group info for each FlexE group
     */
    dnx_algo_flexe_general_group_info_t* group_info;
    /**
     * Store FlexE fifos link list info
     */
    int* fifo_link_list[DNX_ALGO_FLEXE_NOF_LINK_LIST_FIFOS];
    /**
     * Indicate if FlexE core is active
     */
    uint8 flexe_core_is_active;
    /**
     * mutex to prevent race condition on TMAC access from different threads
     */
    sw_state_mutex_t tiny_mac_access_mutex;
} dnx_algo_flexe_general_db_t;

#endif /* BCM_DNX_SUPPORT*/ 

#endif /* __DNX_ALGO_FLEXE_GENERAL_TYPES_H__ */
