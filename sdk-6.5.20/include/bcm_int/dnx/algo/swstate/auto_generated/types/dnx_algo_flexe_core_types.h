/** \file algo/swstate/auto_generated/types/dnx_algo_flexe_core_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef __DNX_ALGO_FLEXE_CORE_TYPES_H__
#define __DNX_ALGO_FLEXE_CORE_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <bcm_int/dnx/port/flexe/flexe_core.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_nif.h>
#include <soc/dnxc/swstate/callbacks/sw_state_ll_callbacks.h>
#include <soc/dnxc/swstate/types/sw_state_bitmap.h>
#include <soc/dnxc/swstate/types/sw_state_linked_list.h>
/*
 * STRUCTs
 */

/**
 * FlexE core resource mngr
 */
typedef struct {
    /**
     * FlexE instance allocation manager
     */
    dnx_algo_res_t instance;
    /**
     * FlexE logical PHY allocation manager
     */
    dnx_algo_res_t lphy;
    /**
     * FlexE MAC timeslot allocation manager
     */
    dnx_algo_res_t mac_timeslot;
    /**
     * FlexE SAR RX timeslot allocation manager
     */
    dnx_algo_res_t sar_rx_timeslot;
    /**
     * FlexE SAR TX timeslot allocation manager
     */
    dnx_algo_res_t sar_tx_timeslot;
    /**
     * FlexE rate adapter timeslot allocation manager
     */
    dnx_algo_res_t rateadpt_timeslot;
} dnx_algo_flexe_core_resource_alloc_t;

/**
 * FlexE core MAC channel info Data base.
 */
typedef struct {
    /**
     * Timeslots allocated for MAC channel
     */
    SHR_BITDCL timeslot_bitmap[((DNX_DATA_MAX_NIF_FLEXE_NOF_MAC_TIMESLOTS)/SHR_BITWID)+1];
} dnx_algo_flexe_core_mac_channel_info_t;

/**
 * FlexE core SAR channel info Data base.
 */
typedef struct {
    /**
     * RX timeslots allocated for SAR channel
     */
    SHR_BITDCL rx_timeslot_bitmap[((DNX_DATA_MAX_NIF_FLEXE_NOF_SAR_TIMESLOTS)/SHR_BITWID)+1];
    /**
     * RX timeslots allocated for SAR channel
     */
    SHR_BITDCL tx_timeslot_bitmap[((DNX_DATA_MAX_NIF_FLEXE_NOF_SAR_TIMESLOTS)/SHR_BITWID)+1];
} dnx_algo_flexe_core_sar_channel_info_t;

/**
 * FlexE core FlexE channel info Data base.
 */
typedef struct {
    /**
     * Timeslots allocated for FlexE channel
     */
    SHR_BITDCL timeslot_bitmap[((DNX_DATA_MAX_NIF_FLEXE_MAX_NOF_SLOTS)/SHR_BITWID)+1];
} dnx_algo_flexe_core_channel_info_t;

/**
 * FlexE core port info Data base.
 */
typedef struct {
    /**
     * The FlexE group that the FlexE port belongs to.
     */
    int group;
    /**
     * The logical PHY ID of the FlexE port.
     */
    int logical_phy_id;
    /**
     * Speed of the PHYs inside the group.
     */
    int phy_speed;
    /**
     * Rate of the SerDes of the PHYs inside the group.
     */
    int serdes_rate;
    /**
     * The local FlexE port (base instance) inside the FlexE core that the FlexE port is mapped to.
     */
    int instance;
    /**
     * Number of instances allocated for this FlexE port.
     */
    int nof_instances;
    /**
     * LPHY bitmap allocated for this FlexE port.
     */
    SHR_BITDCL lphy_bitmap[((DNX_DATA_MAX_NIF_FLEXE_NOF_FLEXE_LPHYS)/SHR_BITWID)+1];
    /**
     * Physical FlexE instance is 100G.
     */
    int is_100g;
    /**
     * FlexE core port works in bypass mode.
     */
    int is_bypass;
} dnx_algo_flexe_core_port_info_t;

/**
 * FlexE core group info Data base.
 */
typedef struct {
    /**
     * This linked list enlists the currently added FlexE core port in the group.
     */
    sw_state_sorted_ll_t flexe_ports;
    /**
     * This linked list enlists the currently added RX FlexE clients in the group.
     */
    sw_state_ll_t clients_rx;
    /**
     * This linked list enlists the currently added TX FlexE clients in the group.
     */
    sw_state_ll_t clients_tx;
} dnx_algo_flexe_core_group_info_t;

/**
 * FlexE core Data Base
 */
typedef struct {
    /**
     * FlexE driver type
     */
    flexe_core_dispatch_type_t drv_type;
    /**
     * FlexE core resource mngr, including instances/LPHYs/timeslots
     */
    dnx_algo_flexe_core_resource_alloc_t resource_alloc;
    /**
     * FlexE group info for each FlexE group
     */
    dnx_algo_flexe_core_group_info_t* group;
    /**
     * FlexE port info of FlexE core
     */
    dnx_algo_flexe_core_port_info_t* port;
    /**
     * FlexE MAC client info for each FlexE core
     */
    dnx_algo_flexe_core_mac_channel_info_t* mac_client;
    /**
     * FlexE SAR client info for each FlexE core
     */
    dnx_algo_flexe_core_sar_channel_info_t* sar_client;
    /**
     * FlexE client info for each FlexE core
     */
    dnx_algo_flexe_core_channel_info_t* flexe_client;
} dnx_algo_flexe_core_db_t;


#endif /* __DNX_ALGO_FLEXE_CORE_TYPES_H__ */
