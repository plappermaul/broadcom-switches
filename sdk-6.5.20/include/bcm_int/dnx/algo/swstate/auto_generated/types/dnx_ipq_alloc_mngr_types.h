/** \file algo/swstate/auto_generated/types/dnx_ipq_alloc_mngr_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef __DNX_IPQ_ALLOC_MNGR_TYPES_H__
#define __DNX_IPQ_ALLOC_MNGR_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/ipq/ipq_alloc_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr_internal.h>
#include <bcm_int/dnx/cosq/cosq.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_device.h>
/*
 * ENUMs
 */

/**
 * An enum that represents region type
 */
typedef enum {
    /**
     * Region is not allocated
     */
    DNX_IPQ_REGION_TYPE_NONE = 0,
    /**
     * Region type is normal (non-interdigitated)
     */
    DNX_IPQ_REGION_TYPE_NORMAL = 1,
    /**
     * Region type is interdigitated
     */
    DNX_IPQ_REGION_TYPE_INTERDIG = 2
} dnx_ipq_region_type_e;

/**
 * reperesentation for different queue types
 */
typedef enum {
    /**
     * Queue not valid
     */
    DNX_ALGO_IPQ_QUEUE_TYPE_INVALID = -1,
    /**
     * Queue is of type Unicast
     */
    DNX_ALGO_IPQ_QUEUE_TYPE_UNICAST = 0,
    /**
     * Queue is of type Multicast
     */
    DNX_ALGO_IPQ_QUEUE_TYPE_MULTICAST = 1,
    /**
     * Unicast interdigitated queue
     */
    DNX_ALGO_IPQ_QUEUE_TYPE_UNICAST_INTERDIGITATED = 2,
    /**
     * Number of all queue types
     */
    NUM_DNX_ALGO_IPQ_QUEUE_TYPE = 3
} dnx_ipq_queue_type_e;

/*
 * STRUCTs
 */

/**
 * Info for queue qrtt bitmap allocation
 */
typedef struct {
    /**
     * core id of queue to be allocated
     */
    bcm_core_t core;
    /**
     * queue type to be allocated - see dnx_ipq_region_type_e
     */
    dnx_ipq_queue_type_e queue_type;
    /**
     * number of queue quartets to be allocated
     */
    uint32 nof_queue_bundles_to_alloc;
    /**
     * start element (not relevant if DNX_ALGO_RES_ALLOCATE_WITH_ID is set)
     */
    uint32 start_element;
    /**
     * end element (not relevant if DNX_ALGO_RES_ALLOCATE_WITH_ID is set)
     */
    uint32 end_element;
} dnx_ipq_alloc_info_t;

/**
 * Info about queues region
 */
typedef struct {
    /**
     * Region type - see dnx_ipq_region_type_e
     */
    dnx_ipq_region_type_e type;
    /**
     * Number of queue quartets allocated in this region
     */
    uint32 nof_allocated_queue_quartets;
} dnx_ipq_region_t;

/**
 * Info about FMQs
 */
typedef struct {
    /**
     * Boolean - is enhance shceduler mode is active.                                                                     Enhance mode can be set by calling                                                                     bcm_fabric_control_set(bcmFabricMulticastSchedulerMode)
     */
    int is_enhance_scheduler_mode;
    /**
     * Maximum multicast queue
     */
    int max_multicast_queue;
} dnx_ipq_fmq_info_t;

/**
 * Map (TC,DP) to VOQ offset
 */
typedef struct {
    /**
     * (tc,dp) to voq offset mapping
     */
    uint32 offset[DNX_COSQ_NOF_TC][DNX_COSQ_NOF_DP];
} dnx_ipq_tc_map_t;

/**
 * DB for Ingress Packet Queuing Alloc Manager
 */
typedef struct {
    /**
     * Regions info to help allocation in resource manager
     */
    dnx_ipq_region_t* regions;
    /**
     * Information about FMQs
     */
    dnx_ipq_fmq_info_t fmq;
    /**
     * Ipq alloc mngr sw state variable.
     */
    dnx_algo_res_t ipq_alloc_mngr;
    /**
     * TC mapping profile template for flow based forwarding
     */
    dnx_algo_template_t* tc_voq_flow_map;
    /**
     * TC mapping profile template for system port forwarding
     */
    dnx_algo_template_t tc_sysport_map;
} dnx_ipq_alloc_mngr_db_t;


#endif /* __DNX_IPQ_ALLOC_MNGR_TYPES_H__ */
