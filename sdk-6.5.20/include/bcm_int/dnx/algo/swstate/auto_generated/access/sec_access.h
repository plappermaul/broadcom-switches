/** \file algo/swstate/auto_generated/access/sec_access.h
 *
 * sw state functions declarations
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef __SEC_ACCESS_H__
#define __SEC_ACCESS_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/swstate/auto_generated/types/sec_types.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_macsec.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_trunk.h>
/*
 * TYPEDEFs
 */

/**
 * implemented by: dnx_sec_db_is_init
 */
typedef int (*dnx_sec_db_is_init_cb)(
    int unit, uint8 *is_init);

/**
 * implemented by: dnx_sec_db_init
 */
typedef int (*dnx_sec_db_init_cb)(
    int unit);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_set
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_set_cb)(
    int unit, uint32 flow_res_mngr_idx_0, dnx_algo_res_t flow_res_mngr);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_get
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_get_cb)(
    int unit, uint32 flow_res_mngr_idx_0, dnx_algo_res_t *flow_res_mngr);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_alloc
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_create
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_create_cb)(
    int unit, uint32 flow_res_mngr_idx_0, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_allocate_single
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_allocate_single_cb)(
    int unit, uint32 flow_res_mngr_idx_0, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_allocate_several
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_allocate_several_cb)(
    int unit, uint32 flow_res_mngr_idx_0, uint32 flags, uint32 nof_elements, void *extra_arguments, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_free_single
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_free_single_cb)(
    int unit, uint32 flow_res_mngr_idx_0, int element);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_free_several
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_free_several_cb)(
    int unit, uint32 flow_res_mngr_idx_0, uint32 nof_elements, int element);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_is_allocated
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_is_allocated_cb)(
    int unit, uint32 flow_res_mngr_idx_0, int element, uint8 *is_allocated);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_clear
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_clear_cb)(
    int unit, uint32 flow_res_mngr_idx_0);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_nof_free_elements_get
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_nof_free_elements_get_cb)(
    int unit, uint32 flow_res_mngr_idx_0, int *nof_free_elements);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_get_next
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_get_next_cb)(
    int unit, uint32 flow_res_mngr_idx_0, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_dump_info_get
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_dump_info_get_cb)(
    int unit, uint32 flow_res_mngr_idx_0, dnx_algo_res_dump_data_t * info);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_nof_allocated_elements_in_range_get
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_nof_allocated_elements_in_range_get_cb)(
    int unit, uint32 flow_res_mngr_idx_0, int range_start, int nof_elements_in_range, int *nof_allocated_elements);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_advanced_algorithm_info_set
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_advanced_algorithm_info_set_cb)(
    int unit, uint32 flow_res_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: dnx_sec_db_ingress_sec_flow_res_mngr_advanced_algorithm_info_get
 */
typedef int (*dnx_sec_db_ingress_sec_flow_res_mngr_advanced_algorithm_info_get_cb)(
    int unit, uint32 flow_res_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_set
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_set_cb)(
    int unit, uint32 policy_res_mngr_idx_0, dnx_algo_res_t policy_res_mngr);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_get
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_get_cb)(
    int unit, uint32 policy_res_mngr_idx_0, dnx_algo_res_t *policy_res_mngr);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_alloc
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_create
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_create_cb)(
    int unit, uint32 policy_res_mngr_idx_0, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_allocate_single
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_allocate_single_cb)(
    int unit, uint32 policy_res_mngr_idx_0, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_allocate_several
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_allocate_several_cb)(
    int unit, uint32 policy_res_mngr_idx_0, uint32 flags, uint32 nof_elements, void *extra_arguments, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_free_single
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_free_single_cb)(
    int unit, uint32 policy_res_mngr_idx_0, int element);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_free_several
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_free_several_cb)(
    int unit, uint32 policy_res_mngr_idx_0, uint32 nof_elements, int element);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_is_allocated
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_is_allocated_cb)(
    int unit, uint32 policy_res_mngr_idx_0, int element, uint8 *is_allocated);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_clear
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_clear_cb)(
    int unit, uint32 policy_res_mngr_idx_0);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_nof_free_elements_get
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_nof_free_elements_get_cb)(
    int unit, uint32 policy_res_mngr_idx_0, int *nof_free_elements);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_get_next
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_get_next_cb)(
    int unit, uint32 policy_res_mngr_idx_0, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_dump_info_get
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_dump_info_get_cb)(
    int unit, uint32 policy_res_mngr_idx_0, dnx_algo_res_dump_data_t * info);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_nof_allocated_elements_in_range_get
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_nof_allocated_elements_in_range_get_cb)(
    int unit, uint32 policy_res_mngr_idx_0, int range_start, int nof_elements_in_range, int *nof_allocated_elements);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_advanced_algorithm_info_set
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_advanced_algorithm_info_set_cb)(
    int unit, uint32 policy_res_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: dnx_sec_db_ingress_sec_policy_res_mngr_advanced_algorithm_info_get
 */
typedef int (*dnx_sec_db_ingress_sec_policy_res_mngr_advanced_algorithm_info_get_cb)(
    int unit, uint32 policy_res_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_set
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_set_cb)(
    int unit, uint32 sc_res_mngr_idx_0, dnx_algo_res_t sc_res_mngr);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_get
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_get_cb)(
    int unit, uint32 sc_res_mngr_idx_0, dnx_algo_res_t *sc_res_mngr);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_alloc
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_create
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_create_cb)(
    int unit, uint32 sc_res_mngr_idx_0, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_allocate_single
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_allocate_single_cb)(
    int unit, uint32 sc_res_mngr_idx_0, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_allocate_several
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_allocate_several_cb)(
    int unit, uint32 sc_res_mngr_idx_0, uint32 flags, uint32 nof_elements, void *extra_arguments, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_free_single
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_free_single_cb)(
    int unit, uint32 sc_res_mngr_idx_0, int element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_free_several
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_free_several_cb)(
    int unit, uint32 sc_res_mngr_idx_0, uint32 nof_elements, int element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_is_allocated
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_is_allocated_cb)(
    int unit, uint32 sc_res_mngr_idx_0, int element, uint8 *is_allocated);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_clear
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_clear_cb)(
    int unit, uint32 sc_res_mngr_idx_0);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_nof_free_elements_get
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_nof_free_elements_get_cb)(
    int unit, uint32 sc_res_mngr_idx_0, int *nof_free_elements);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_get_next
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_get_next_cb)(
    int unit, uint32 sc_res_mngr_idx_0, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_dump_info_get
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_dump_info_get_cb)(
    int unit, uint32 sc_res_mngr_idx_0, dnx_algo_res_dump_data_t * info);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_nof_allocated_elements_in_range_get
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_nof_allocated_elements_in_range_get_cb)(
    int unit, uint32 sc_res_mngr_idx_0, int range_start, int nof_elements_in_range, int *nof_allocated_elements);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_advanced_algorithm_info_set
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_advanced_algorithm_info_set_cb)(
    int unit, uint32 sc_res_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_res_mngr_advanced_algorithm_info_get
 */
typedef int (*dnx_sec_db_ingress_sec_sc_res_mngr_advanced_algorithm_info_get_cb)(
    int unit, uint32 sc_res_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_set
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_set_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0, dnx_algo_res_t sc_tcam_res_mngr);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_get
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_get_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0, dnx_algo_res_t *sc_tcam_res_mngr);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_alloc
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_create
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_create_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_allocate_single
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_allocate_single_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_allocate_several
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_allocate_several_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0, uint32 flags, uint32 nof_elements, void *extra_arguments, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_free_single
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_free_single_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0, int element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_free_several
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_free_several_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0, uint32 nof_elements, int element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_is_allocated
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_is_allocated_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0, int element, uint8 *is_allocated);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_clear
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_clear_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_nof_free_elements_get
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_nof_free_elements_get_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0, int *nof_free_elements);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_get_next
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_get_next_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_dump_info_get
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_dump_info_get_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0, dnx_algo_res_dump_data_t * info);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_nof_allocated_elements_in_range_get
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_nof_allocated_elements_in_range_get_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0, int range_start, int nof_elements_in_range, int *nof_allocated_elements);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_advanced_algorithm_info_set
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_advanced_algorithm_info_set_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_tcam_res_mngr_advanced_algorithm_info_get
 */
typedef int (*dnx_sec_db_ingress_sec_sc_tcam_res_mngr_advanced_algorithm_info_get_cb)(
    int unit, uint32 sc_tcam_res_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_set
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_set_cb)(
    int unit, uint32 sa_res_mngr_idx_0, dnx_algo_res_t sa_res_mngr);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_get
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_get_cb)(
    int unit, uint32 sa_res_mngr_idx_0, dnx_algo_res_t *sa_res_mngr);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_alloc
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_create
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_create_cb)(
    int unit, uint32 sa_res_mngr_idx_0, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_allocate_single
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_allocate_single_cb)(
    int unit, uint32 sa_res_mngr_idx_0, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_allocate_several
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_allocate_several_cb)(
    int unit, uint32 sa_res_mngr_idx_0, uint32 flags, uint32 nof_elements, void *extra_arguments, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_free_single
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_free_single_cb)(
    int unit, uint32 sa_res_mngr_idx_0, int element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_free_several
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_free_several_cb)(
    int unit, uint32 sa_res_mngr_idx_0, uint32 nof_elements, int element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_is_allocated
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_is_allocated_cb)(
    int unit, uint32 sa_res_mngr_idx_0, int element, uint8 *is_allocated);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_clear
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_clear_cb)(
    int unit, uint32 sa_res_mngr_idx_0);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_nof_free_elements_get
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_nof_free_elements_get_cb)(
    int unit, uint32 sa_res_mngr_idx_0, int *nof_free_elements);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_get_next
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_get_next_cb)(
    int unit, uint32 sa_res_mngr_idx_0, int *element);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_dump_info_get
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_dump_info_get_cb)(
    int unit, uint32 sa_res_mngr_idx_0, dnx_algo_res_dump_data_t * info);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_nof_allocated_elements_in_range_get
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_nof_allocated_elements_in_range_get_cb)(
    int unit, uint32 sa_res_mngr_idx_0, int range_start, int nof_elements_in_range, int *nof_allocated_elements);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_advanced_algorithm_info_set
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_advanced_algorithm_info_set_cb)(
    int unit, uint32 sa_res_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_res_mngr_advanced_algorithm_info_get
 */
typedef int (*dnx_sec_db_ingress_sec_sa_res_mngr_advanced_algorithm_info_get_cb)(
    int unit, uint32 sa_res_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: dnx_sec_db_ingress_sec_default_policy_id_set
 */
typedef int (*dnx_sec_db_ingress_sec_default_policy_id_set_cb)(
    int unit, uint32 default_policy_id_idx_0, int default_policy_id);

/**
 * implemented by: dnx_sec_db_ingress_sec_default_policy_id_get
 */
typedef int (*dnx_sec_db_ingress_sec_default_policy_id_get_cb)(
    int unit, uint32 default_policy_id_idx_0, int *default_policy_id);

/**
 * implemented by: dnx_sec_db_ingress_sec_default_policy_id_alloc
 */
typedef int (*dnx_sec_db_ingress_sec_default_policy_id_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_index_map_alloc
 */
typedef int (*dnx_sec_db_ingress_sec_sc_index_map_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0, uint32 nof_instances_to_alloc_1);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_index_map_sc_tcam_index_set
 */
typedef int (*dnx_sec_db_ingress_sec_sc_index_map_sc_tcam_index_set_cb)(
    int unit, uint32 sc_index_map_idx_0, uint32 sc_index_map_idx_1, uint32 sc_tcam_index_idx_0, int sc_tcam_index);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_index_map_sc_tcam_index_get
 */
typedef int (*dnx_sec_db_ingress_sec_sc_index_map_sc_tcam_index_get_cb)(
    int unit, uint32 sc_index_map_idx_0, uint32 sc_index_map_idx_1, uint32 sc_tcam_index_idx_0, int *sc_tcam_index);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_index_map_is_ipsec_set
 */
typedef int (*dnx_sec_db_ingress_sec_sc_index_map_is_ipsec_set_cb)(
    int unit, uint32 sc_index_map_idx_0, uint32 sc_index_map_idx_1, int is_ipsec);

/**
 * implemented by: dnx_sec_db_ingress_sec_sc_index_map_is_ipsec_get
 */
typedef int (*dnx_sec_db_ingress_sec_sc_index_map_is_ipsec_get_cb)(
    int unit, uint32 sc_index_map_idx_0, uint32 sc_index_map_idx_1, int *is_ipsec);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_index_info_alloc
 */
typedef int (*dnx_sec_db_ingress_sec_sa_index_info_alloc_cb)(
    int unit);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_index_info_is_ipsec_set
 */
typedef int (*dnx_sec_db_ingress_sec_sa_index_info_is_ipsec_set_cb)(
    int unit, uint32 sa_index_info_idx_0, uint32 sa_index_info_idx_1, int is_ipsec);

/**
 * implemented by: dnx_sec_db_ingress_sec_sa_index_info_is_ipsec_get
 */
typedef int (*dnx_sec_db_ingress_sec_sa_index_info_is_ipsec_get_cb)(
    int unit, uint32 sa_index_info_idx_0, uint32 sa_index_info_idx_1, int *is_ipsec);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_set
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_set_cb)(
    int unit, uint32 sc_res_mngr_idx_0, dnx_algo_res_t sc_res_mngr);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_get
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_get_cb)(
    int unit, uint32 sc_res_mngr_idx_0, dnx_algo_res_t *sc_res_mngr);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_alloc
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_create
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_create_cb)(
    int unit, uint32 sc_res_mngr_idx_0, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_allocate_single
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_allocate_single_cb)(
    int unit, uint32 sc_res_mngr_idx_0, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_allocate_several
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_allocate_several_cb)(
    int unit, uint32 sc_res_mngr_idx_0, uint32 flags, uint32 nof_elements, void *extra_arguments, int *element);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_free_single
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_free_single_cb)(
    int unit, uint32 sc_res_mngr_idx_0, int element);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_free_several
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_free_several_cb)(
    int unit, uint32 sc_res_mngr_idx_0, uint32 nof_elements, int element);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_is_allocated
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_is_allocated_cb)(
    int unit, uint32 sc_res_mngr_idx_0, int element, uint8 *is_allocated);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_clear
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_clear_cb)(
    int unit, uint32 sc_res_mngr_idx_0);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_nof_free_elements_get
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_nof_free_elements_get_cb)(
    int unit, uint32 sc_res_mngr_idx_0, int *nof_free_elements);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_get_next
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_get_next_cb)(
    int unit, uint32 sc_res_mngr_idx_0, int *element);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_dump_info_get
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_dump_info_get_cb)(
    int unit, uint32 sc_res_mngr_idx_0, dnx_algo_res_dump_data_t * info);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_nof_allocated_elements_in_range_get
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_nof_allocated_elements_in_range_get_cb)(
    int unit, uint32 sc_res_mngr_idx_0, int range_start, int nof_elements_in_range, int *nof_allocated_elements);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_advanced_algorithm_info_set
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_advanced_algorithm_info_set_cb)(
    int unit, uint32 sc_res_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_res_mngr_advanced_algorithm_info_get
 */
typedef int (*dnx_sec_db_egress_sec_sc_res_mngr_advanced_algorithm_info_get_cb)(
    int unit, uint32 sc_res_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_set
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_set_cb)(
    int unit, uint32 sa_res_mngr_idx_0, dnx_algo_res_t sa_res_mngr);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_get
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_get_cb)(
    int unit, uint32 sa_res_mngr_idx_0, dnx_algo_res_t *sa_res_mngr);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_alloc
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_create
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_create_cb)(
    int unit, uint32 sa_res_mngr_idx_0, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_allocate_single
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_allocate_single_cb)(
    int unit, uint32 sa_res_mngr_idx_0, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_allocate_several
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_allocate_several_cb)(
    int unit, uint32 sa_res_mngr_idx_0, uint32 flags, uint32 nof_elements, void *extra_arguments, int *element);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_free_single
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_free_single_cb)(
    int unit, uint32 sa_res_mngr_idx_0, int element);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_free_several
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_free_several_cb)(
    int unit, uint32 sa_res_mngr_idx_0, uint32 nof_elements, int element);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_is_allocated
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_is_allocated_cb)(
    int unit, uint32 sa_res_mngr_idx_0, int element, uint8 *is_allocated);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_clear
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_clear_cb)(
    int unit, uint32 sa_res_mngr_idx_0);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_nof_free_elements_get
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_nof_free_elements_get_cb)(
    int unit, uint32 sa_res_mngr_idx_0, int *nof_free_elements);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_get_next
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_get_next_cb)(
    int unit, uint32 sa_res_mngr_idx_0, int *element);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_dump_info_get
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_dump_info_get_cb)(
    int unit, uint32 sa_res_mngr_idx_0, dnx_algo_res_dump_data_t * info);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_nof_allocated_elements_in_range_get
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_nof_allocated_elements_in_range_get_cb)(
    int unit, uint32 sa_res_mngr_idx_0, int range_start, int nof_elements_in_range, int *nof_allocated_elements);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_advanced_algorithm_info_set
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_advanced_algorithm_info_set_cb)(
    int unit, uint32 sa_res_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_res_mngr_advanced_algorithm_info_get
 */
typedef int (*dnx_sec_db_egress_sec_sa_res_mngr_advanced_algorithm_info_get_cb)(
    int unit, uint32 sa_res_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_index_info_alloc
 */
typedef int (*dnx_sec_db_egress_sec_sa_index_info_alloc_cb)(
    int unit);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_index_info_is_ipsec_set
 */
typedef int (*dnx_sec_db_egress_sec_sa_index_info_is_ipsec_set_cb)(
    int unit, uint32 sa_index_info_idx_0, uint32 sa_index_info_idx_1, int is_ipsec);

/**
 * implemented by: dnx_sec_db_egress_sec_sa_index_info_is_ipsec_get
 */
typedef int (*dnx_sec_db_egress_sec_sa_index_info_is_ipsec_get_cb)(
    int unit, uint32 sa_index_info_idx_0, uint32 sa_index_info_idx_1, int *is_ipsec);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_index_info_alloc
 */
typedef int (*dnx_sec_db_egress_sec_sc_index_info_alloc_cb)(
    int unit);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_index_info_is_ipsec_set
 */
typedef int (*dnx_sec_db_egress_sec_sc_index_info_is_ipsec_set_cb)(
    int unit, uint32 sc_index_info_idx_0, uint32 sc_index_info_idx_1, int is_ipsec);

/**
 * implemented by: dnx_sec_db_egress_sec_sc_index_info_is_ipsec_get
 */
typedef int (*dnx_sec_db_egress_sec_sc_index_info_is_ipsec_get_cb)(
    int unit, uint32 sc_index_info_idx_0, uint32 sc_index_info_idx_1, int *is_ipsec);

/**
 * implemented by: dnx_sec_db_control_sec_trunk_info_alloc
 */
typedef int (*dnx_sec_db_control_sec_trunk_info_alloc_cb)(
    int unit);

/**
 * implemented by: dnx_sec_db_control_sec_trunk_info_is_macsec_enabled_set
 */
typedef int (*dnx_sec_db_control_sec_trunk_info_is_macsec_enabled_set_cb)(
    int unit, uint32 trunk_info_idx_0, uint32 trunk_info_idx_1, int is_macsec_enabled);

/**
 * implemented by: dnx_sec_db_control_sec_trunk_info_is_macsec_enabled_get
 */
typedef int (*dnx_sec_db_control_sec_trunk_info_is_macsec_enabled_get_cb)(
    int unit, uint32 trunk_info_idx_0, uint32 trunk_info_idx_1, int *is_macsec_enabled);

/*
 * STRUCTs
 */

/**
 * This structure holds the access functions for the variable flow_res_mngr
 */
typedef struct {
    dnx_sec_db_ingress_sec_flow_res_mngr_set_cb set;
    dnx_sec_db_ingress_sec_flow_res_mngr_get_cb get;
    dnx_sec_db_ingress_sec_flow_res_mngr_alloc_cb alloc;
    dnx_sec_db_ingress_sec_flow_res_mngr_create_cb create;
    dnx_sec_db_ingress_sec_flow_res_mngr_allocate_single_cb allocate_single;
    dnx_sec_db_ingress_sec_flow_res_mngr_allocate_several_cb allocate_several;
    dnx_sec_db_ingress_sec_flow_res_mngr_free_single_cb free_single;
    dnx_sec_db_ingress_sec_flow_res_mngr_free_several_cb free_several;
    dnx_sec_db_ingress_sec_flow_res_mngr_is_allocated_cb is_allocated;
    dnx_sec_db_ingress_sec_flow_res_mngr_clear_cb clear;
    dnx_sec_db_ingress_sec_flow_res_mngr_nof_free_elements_get_cb nof_free_elements_get;
    dnx_sec_db_ingress_sec_flow_res_mngr_get_next_cb get_next;
    dnx_sec_db_ingress_sec_flow_res_mngr_dump_info_get_cb dump_info_get;
    dnx_sec_db_ingress_sec_flow_res_mngr_nof_allocated_elements_in_range_get_cb nof_allocated_elements_in_range_get;
    dnx_sec_db_ingress_sec_flow_res_mngr_advanced_algorithm_info_set_cb advanced_algorithm_info_set;
    dnx_sec_db_ingress_sec_flow_res_mngr_advanced_algorithm_info_get_cb advanced_algorithm_info_get;
} dnx_sec_db_ingress_sec_flow_res_mngr_cbs;

/**
 * This structure holds the access functions for the variable policy_res_mngr
 */
typedef struct {
    dnx_sec_db_ingress_sec_policy_res_mngr_set_cb set;
    dnx_sec_db_ingress_sec_policy_res_mngr_get_cb get;
    dnx_sec_db_ingress_sec_policy_res_mngr_alloc_cb alloc;
    dnx_sec_db_ingress_sec_policy_res_mngr_create_cb create;
    dnx_sec_db_ingress_sec_policy_res_mngr_allocate_single_cb allocate_single;
    dnx_sec_db_ingress_sec_policy_res_mngr_allocate_several_cb allocate_several;
    dnx_sec_db_ingress_sec_policy_res_mngr_free_single_cb free_single;
    dnx_sec_db_ingress_sec_policy_res_mngr_free_several_cb free_several;
    dnx_sec_db_ingress_sec_policy_res_mngr_is_allocated_cb is_allocated;
    dnx_sec_db_ingress_sec_policy_res_mngr_clear_cb clear;
    dnx_sec_db_ingress_sec_policy_res_mngr_nof_free_elements_get_cb nof_free_elements_get;
    dnx_sec_db_ingress_sec_policy_res_mngr_get_next_cb get_next;
    dnx_sec_db_ingress_sec_policy_res_mngr_dump_info_get_cb dump_info_get;
    dnx_sec_db_ingress_sec_policy_res_mngr_nof_allocated_elements_in_range_get_cb nof_allocated_elements_in_range_get;
    dnx_sec_db_ingress_sec_policy_res_mngr_advanced_algorithm_info_set_cb advanced_algorithm_info_set;
    dnx_sec_db_ingress_sec_policy_res_mngr_advanced_algorithm_info_get_cb advanced_algorithm_info_get;
} dnx_sec_db_ingress_sec_policy_res_mngr_cbs;

/**
 * This structure holds the access functions for the variable sc_res_mngr
 */
typedef struct {
    dnx_sec_db_ingress_sec_sc_res_mngr_set_cb set;
    dnx_sec_db_ingress_sec_sc_res_mngr_get_cb get;
    dnx_sec_db_ingress_sec_sc_res_mngr_alloc_cb alloc;
    dnx_sec_db_ingress_sec_sc_res_mngr_create_cb create;
    dnx_sec_db_ingress_sec_sc_res_mngr_allocate_single_cb allocate_single;
    dnx_sec_db_ingress_sec_sc_res_mngr_allocate_several_cb allocate_several;
    dnx_sec_db_ingress_sec_sc_res_mngr_free_single_cb free_single;
    dnx_sec_db_ingress_sec_sc_res_mngr_free_several_cb free_several;
    dnx_sec_db_ingress_sec_sc_res_mngr_is_allocated_cb is_allocated;
    dnx_sec_db_ingress_sec_sc_res_mngr_clear_cb clear;
    dnx_sec_db_ingress_sec_sc_res_mngr_nof_free_elements_get_cb nof_free_elements_get;
    dnx_sec_db_ingress_sec_sc_res_mngr_get_next_cb get_next;
    dnx_sec_db_ingress_sec_sc_res_mngr_dump_info_get_cb dump_info_get;
    dnx_sec_db_ingress_sec_sc_res_mngr_nof_allocated_elements_in_range_get_cb nof_allocated_elements_in_range_get;
    dnx_sec_db_ingress_sec_sc_res_mngr_advanced_algorithm_info_set_cb advanced_algorithm_info_set;
    dnx_sec_db_ingress_sec_sc_res_mngr_advanced_algorithm_info_get_cb advanced_algorithm_info_get;
} dnx_sec_db_ingress_sec_sc_res_mngr_cbs;

/**
 * This structure holds the access functions for the variable sc_tcam_res_mngr
 */
typedef struct {
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_set_cb set;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_get_cb get;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_alloc_cb alloc;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_create_cb create;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_allocate_single_cb allocate_single;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_allocate_several_cb allocate_several;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_free_single_cb free_single;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_free_several_cb free_several;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_is_allocated_cb is_allocated;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_clear_cb clear;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_nof_free_elements_get_cb nof_free_elements_get;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_get_next_cb get_next;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_dump_info_get_cb dump_info_get;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_nof_allocated_elements_in_range_get_cb nof_allocated_elements_in_range_get;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_advanced_algorithm_info_set_cb advanced_algorithm_info_set;
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_advanced_algorithm_info_get_cb advanced_algorithm_info_get;
} dnx_sec_db_ingress_sec_sc_tcam_res_mngr_cbs;

/**
 * This structure holds the access functions for the variable sa_res_mngr
 */
typedef struct {
    dnx_sec_db_ingress_sec_sa_res_mngr_set_cb set;
    dnx_sec_db_ingress_sec_sa_res_mngr_get_cb get;
    dnx_sec_db_ingress_sec_sa_res_mngr_alloc_cb alloc;
    dnx_sec_db_ingress_sec_sa_res_mngr_create_cb create;
    dnx_sec_db_ingress_sec_sa_res_mngr_allocate_single_cb allocate_single;
    dnx_sec_db_ingress_sec_sa_res_mngr_allocate_several_cb allocate_several;
    dnx_sec_db_ingress_sec_sa_res_mngr_free_single_cb free_single;
    dnx_sec_db_ingress_sec_sa_res_mngr_free_several_cb free_several;
    dnx_sec_db_ingress_sec_sa_res_mngr_is_allocated_cb is_allocated;
    dnx_sec_db_ingress_sec_sa_res_mngr_clear_cb clear;
    dnx_sec_db_ingress_sec_sa_res_mngr_nof_free_elements_get_cb nof_free_elements_get;
    dnx_sec_db_ingress_sec_sa_res_mngr_get_next_cb get_next;
    dnx_sec_db_ingress_sec_sa_res_mngr_dump_info_get_cb dump_info_get;
    dnx_sec_db_ingress_sec_sa_res_mngr_nof_allocated_elements_in_range_get_cb nof_allocated_elements_in_range_get;
    dnx_sec_db_ingress_sec_sa_res_mngr_advanced_algorithm_info_set_cb advanced_algorithm_info_set;
    dnx_sec_db_ingress_sec_sa_res_mngr_advanced_algorithm_info_get_cb advanced_algorithm_info_get;
} dnx_sec_db_ingress_sec_sa_res_mngr_cbs;

/**
 * This structure holds the access functions for the variable default_policy_id
 */
typedef struct {
    dnx_sec_db_ingress_sec_default_policy_id_set_cb set;
    dnx_sec_db_ingress_sec_default_policy_id_get_cb get;
    dnx_sec_db_ingress_sec_default_policy_id_alloc_cb alloc;
} dnx_sec_db_ingress_sec_default_policy_id_cbs;

/**
 * This structure holds the access functions for the variable sc_tcam_index
 */
typedef struct {
    dnx_sec_db_ingress_sec_sc_index_map_sc_tcam_index_set_cb set;
    dnx_sec_db_ingress_sec_sc_index_map_sc_tcam_index_get_cb get;
} dnx_sec_db_ingress_sec_sc_index_map_sc_tcam_index_cbs;

/**
 * This structure holds the access functions for the variable is_ipsec
 */
typedef struct {
    dnx_sec_db_ingress_sec_sc_index_map_is_ipsec_set_cb set;
    dnx_sec_db_ingress_sec_sc_index_map_is_ipsec_get_cb get;
} dnx_sec_db_ingress_sec_sc_index_map_is_ipsec_cbs;

/**
 * This structure holds the access functions for the variable dnx_sec_sc_index_map_t
 */
typedef struct {
    dnx_sec_db_ingress_sec_sc_index_map_alloc_cb alloc;
    /**
     * Access struct for sc_tcam_index
     */
    dnx_sec_db_ingress_sec_sc_index_map_sc_tcam_index_cbs sc_tcam_index;
    /**
     * Access struct for is_ipsec
     */
    dnx_sec_db_ingress_sec_sc_index_map_is_ipsec_cbs is_ipsec;
} dnx_sec_db_ingress_sec_sc_index_map_cbs;

/**
 * This structure holds the access functions for the variable is_ipsec
 */
typedef struct {
    dnx_sec_db_ingress_sec_sa_index_info_is_ipsec_set_cb set;
    dnx_sec_db_ingress_sec_sa_index_info_is_ipsec_get_cb get;
} dnx_sec_db_ingress_sec_sa_index_info_is_ipsec_cbs;

/**
 * This structure holds the access functions for the variable dnx_sec_sa_index_info_t
 */
typedef struct {
    dnx_sec_db_ingress_sec_sa_index_info_alloc_cb alloc;
    /**
     * Access struct for is_ipsec
     */
    dnx_sec_db_ingress_sec_sa_index_info_is_ipsec_cbs is_ipsec;
} dnx_sec_db_ingress_sec_sa_index_info_cbs;

/**
 * This structure holds the access functions for the variable dnx_ingress_sec_t
 */
typedef struct {
    /**
     * Access struct for flow_res_mngr
     */
    dnx_sec_db_ingress_sec_flow_res_mngr_cbs flow_res_mngr;
    /**
     * Access struct for policy_res_mngr
     */
    dnx_sec_db_ingress_sec_policy_res_mngr_cbs policy_res_mngr;
    /**
     * Access struct for sc_res_mngr
     */
    dnx_sec_db_ingress_sec_sc_res_mngr_cbs sc_res_mngr;
    /**
     * Access struct for sc_tcam_res_mngr
     */
    dnx_sec_db_ingress_sec_sc_tcam_res_mngr_cbs sc_tcam_res_mngr;
    /**
     * Access struct for sa_res_mngr
     */
    dnx_sec_db_ingress_sec_sa_res_mngr_cbs sa_res_mngr;
    /**
     * Access struct for default_policy_id
     */
    dnx_sec_db_ingress_sec_default_policy_id_cbs default_policy_id;
    /**
     * Access struct for sc_index_map
     */
    dnx_sec_db_ingress_sec_sc_index_map_cbs sc_index_map;
    /**
     * Access struct for sa_index_info
     */
    dnx_sec_db_ingress_sec_sa_index_info_cbs sa_index_info;
} dnx_sec_db_ingress_sec_cbs;

/**
 * This structure holds the access functions for the variable sc_res_mngr
 */
typedef struct {
    dnx_sec_db_egress_sec_sc_res_mngr_set_cb set;
    dnx_sec_db_egress_sec_sc_res_mngr_get_cb get;
    dnx_sec_db_egress_sec_sc_res_mngr_alloc_cb alloc;
    dnx_sec_db_egress_sec_sc_res_mngr_create_cb create;
    dnx_sec_db_egress_sec_sc_res_mngr_allocate_single_cb allocate_single;
    dnx_sec_db_egress_sec_sc_res_mngr_allocate_several_cb allocate_several;
    dnx_sec_db_egress_sec_sc_res_mngr_free_single_cb free_single;
    dnx_sec_db_egress_sec_sc_res_mngr_free_several_cb free_several;
    dnx_sec_db_egress_sec_sc_res_mngr_is_allocated_cb is_allocated;
    dnx_sec_db_egress_sec_sc_res_mngr_clear_cb clear;
    dnx_sec_db_egress_sec_sc_res_mngr_nof_free_elements_get_cb nof_free_elements_get;
    dnx_sec_db_egress_sec_sc_res_mngr_get_next_cb get_next;
    dnx_sec_db_egress_sec_sc_res_mngr_dump_info_get_cb dump_info_get;
    dnx_sec_db_egress_sec_sc_res_mngr_nof_allocated_elements_in_range_get_cb nof_allocated_elements_in_range_get;
    dnx_sec_db_egress_sec_sc_res_mngr_advanced_algorithm_info_set_cb advanced_algorithm_info_set;
    dnx_sec_db_egress_sec_sc_res_mngr_advanced_algorithm_info_get_cb advanced_algorithm_info_get;
} dnx_sec_db_egress_sec_sc_res_mngr_cbs;

/**
 * This structure holds the access functions for the variable sa_res_mngr
 */
typedef struct {
    dnx_sec_db_egress_sec_sa_res_mngr_set_cb set;
    dnx_sec_db_egress_sec_sa_res_mngr_get_cb get;
    dnx_sec_db_egress_sec_sa_res_mngr_alloc_cb alloc;
    dnx_sec_db_egress_sec_sa_res_mngr_create_cb create;
    dnx_sec_db_egress_sec_sa_res_mngr_allocate_single_cb allocate_single;
    dnx_sec_db_egress_sec_sa_res_mngr_allocate_several_cb allocate_several;
    dnx_sec_db_egress_sec_sa_res_mngr_free_single_cb free_single;
    dnx_sec_db_egress_sec_sa_res_mngr_free_several_cb free_several;
    dnx_sec_db_egress_sec_sa_res_mngr_is_allocated_cb is_allocated;
    dnx_sec_db_egress_sec_sa_res_mngr_clear_cb clear;
    dnx_sec_db_egress_sec_sa_res_mngr_nof_free_elements_get_cb nof_free_elements_get;
    dnx_sec_db_egress_sec_sa_res_mngr_get_next_cb get_next;
    dnx_sec_db_egress_sec_sa_res_mngr_dump_info_get_cb dump_info_get;
    dnx_sec_db_egress_sec_sa_res_mngr_nof_allocated_elements_in_range_get_cb nof_allocated_elements_in_range_get;
    dnx_sec_db_egress_sec_sa_res_mngr_advanced_algorithm_info_set_cb advanced_algorithm_info_set;
    dnx_sec_db_egress_sec_sa_res_mngr_advanced_algorithm_info_get_cb advanced_algorithm_info_get;
} dnx_sec_db_egress_sec_sa_res_mngr_cbs;

/**
 * This structure holds the access functions for the variable is_ipsec
 */
typedef struct {
    dnx_sec_db_egress_sec_sa_index_info_is_ipsec_set_cb set;
    dnx_sec_db_egress_sec_sa_index_info_is_ipsec_get_cb get;
} dnx_sec_db_egress_sec_sa_index_info_is_ipsec_cbs;

/**
 * This structure holds the access functions for the variable dnx_sec_sa_index_info_t
 */
typedef struct {
    dnx_sec_db_egress_sec_sa_index_info_alloc_cb alloc;
    /**
     * Access struct for is_ipsec
     */
    dnx_sec_db_egress_sec_sa_index_info_is_ipsec_cbs is_ipsec;
} dnx_sec_db_egress_sec_sa_index_info_cbs;

/**
 * This structure holds the access functions for the variable is_ipsec
 */
typedef struct {
    dnx_sec_db_egress_sec_sc_index_info_is_ipsec_set_cb set;
    dnx_sec_db_egress_sec_sc_index_info_is_ipsec_get_cb get;
} dnx_sec_db_egress_sec_sc_index_info_is_ipsec_cbs;

/**
 * This structure holds the access functions for the variable dnx_sec_sc_index_info_t
 */
typedef struct {
    dnx_sec_db_egress_sec_sc_index_info_alloc_cb alloc;
    /**
     * Access struct for is_ipsec
     */
    dnx_sec_db_egress_sec_sc_index_info_is_ipsec_cbs is_ipsec;
} dnx_sec_db_egress_sec_sc_index_info_cbs;

/**
 * This structure holds the access functions for the variable dnx_egress_sec_t
 */
typedef struct {
    /**
     * Access struct for sc_res_mngr
     */
    dnx_sec_db_egress_sec_sc_res_mngr_cbs sc_res_mngr;
    /**
     * Access struct for sa_res_mngr
     */
    dnx_sec_db_egress_sec_sa_res_mngr_cbs sa_res_mngr;
    /**
     * Access struct for sa_index_info
     */
    dnx_sec_db_egress_sec_sa_index_info_cbs sa_index_info;
    /**
     * Access struct for sc_index_info
     */
    dnx_sec_db_egress_sec_sc_index_info_cbs sc_index_info;
} dnx_sec_db_egress_sec_cbs;

/**
 * This structure holds the access functions for the variable is_macsec_enabled
 */
typedef struct {
    dnx_sec_db_control_sec_trunk_info_is_macsec_enabled_set_cb set;
    dnx_sec_db_control_sec_trunk_info_is_macsec_enabled_get_cb get;
} dnx_sec_db_control_sec_trunk_info_is_macsec_enabled_cbs;

/**
 * This structure holds the access functions for the variable dnx_control_trunk_info_t
 */
typedef struct {
    dnx_sec_db_control_sec_trunk_info_alloc_cb alloc;
    /**
     * Access struct for is_macsec_enabled
     */
    dnx_sec_db_control_sec_trunk_info_is_macsec_enabled_cbs is_macsec_enabled;
} dnx_sec_db_control_sec_trunk_info_cbs;

/**
 * This structure holds the access functions for the variable dnx_control_sec_t
 */
typedef struct {
    /**
     * Access struct for trunk_info
     */
    dnx_sec_db_control_sec_trunk_info_cbs trunk_info;
} dnx_sec_db_control_sec_cbs;

/**
 * This structure holds the access functions for the variable dnx_sec_t
 */
typedef struct {
    dnx_sec_db_is_init_cb is_init;
    dnx_sec_db_init_cb init;
    /**
     * Access struct for ingress_sec
     */
    dnx_sec_db_ingress_sec_cbs ingress_sec;
    /**
     * Access struct for egress_sec
     */
    dnx_sec_db_egress_sec_cbs egress_sec;
    /**
     * Access struct for control_sec
     */
    dnx_sec_db_control_sec_cbs control_sec;
} dnx_sec_db_cbs;

/*
 * Global Variables
 */

/*
 * Global Variables
 */

extern dnx_sec_db_cbs dnx_sec_db;

#endif /* __SEC_ACCESS_H__ */
