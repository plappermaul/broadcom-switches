/** \file algo/swstate/auto_generated/access/crps_access.h
 *
 * sw state functions declarations
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef __CRPS_ACCESS_H__
#define __CRPS_ACCESS_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/swstate/auto_generated/types/crps_types.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <include/bcm/stat.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_max_crps.h>
/*
 * TYPEDEFs
 */

/**
 * implemented by: dnx_crps_db_is_init
 */
typedef int (*dnx_crps_db_is_init_cb)(
    int unit, uint8 *is_init);

/**
 * implemented by: dnx_crps_db_init
 */
typedef int (*dnx_crps_db_init_cb)(
    int unit);

/**
 * implemented by: dnx_crps_db_proc_alloc
 */
typedef int (*dnx_crps_db_proc_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0, uint32 nof_instances_to_alloc_1);

/**
 * implemented by: dnx_crps_db_proc_used_for_meter_set
 */
typedef int (*dnx_crps_db_proc_used_for_meter_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int used_for_meter);

/**
 * implemented by: dnx_crps_db_proc_used_for_meter_get
 */
typedef int (*dnx_crps_db_proc_used_for_meter_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int *used_for_meter);

/**
 * implemented by: dnx_crps_db_proc_config_started_set
 */
typedef int (*dnx_crps_db_proc_config_started_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int config_started);

/**
 * implemented by: dnx_crps_db_proc_config_started_get
 */
typedef int (*dnx_crps_db_proc_config_started_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int *config_started);

/**
 * implemented by: dnx_crps_db_proc_config_done_set
 */
typedef int (*dnx_crps_db_proc_config_done_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int config_done);

/**
 * implemented by: dnx_crps_db_proc_config_done_get
 */
typedef int (*dnx_crps_db_proc_config_done_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int *config_done);

/**
 * implemented by: dnx_crps_db_proc_enablers_set
 */
typedef int (*dnx_crps_db_proc_enablers_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, CONST dnx_engine_enablers_t *enablers);

/**
 * implemented by: dnx_crps_db_proc_enablers_get
 */
typedef int (*dnx_crps_db_proc_enablers_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, dnx_engine_enablers_t *enablers);

/**
 * implemented by: dnx_crps_db_proc_enablers_counting_enable_set
 */
typedef int (*dnx_crps_db_proc_enablers_counting_enable_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int counting_enable);

/**
 * implemented by: dnx_crps_db_proc_enablers_counting_enable_get
 */
typedef int (*dnx_crps_db_proc_enablers_counting_enable_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int *counting_enable);

/**
 * implemented by: dnx_crps_db_proc_enablers_eviction_enable_set
 */
typedef int (*dnx_crps_db_proc_enablers_eviction_enable_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int eviction_enable);

/**
 * implemented by: dnx_crps_db_proc_enablers_eviction_enable_get
 */
typedef int (*dnx_crps_db_proc_enablers_eviction_enable_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int *eviction_enable);

/**
 * implemented by: dnx_crps_db_proc_interface_set
 */
typedef int (*dnx_crps_db_proc_interface_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, CONST dnx_engine_interface_info_t *interface);

/**
 * implemented by: dnx_crps_db_proc_interface_get
 */
typedef int (*dnx_crps_db_proc_interface_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, dnx_engine_interface_info_t *interface);

/**
 * implemented by: dnx_crps_db_proc_interface_next_engine_id_set
 */
typedef int (*dnx_crps_db_proc_interface_next_engine_id_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int next_engine_id);

/**
 * implemented by: dnx_crps_db_proc_interface_next_engine_id_get
 */
typedef int (*dnx_crps_db_proc_interface_next_engine_id_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int *next_engine_id);

/**
 * implemented by: dnx_crps_db_proc_interface_prev_engine_id_set
 */
typedef int (*dnx_crps_db_proc_interface_prev_engine_id_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int prev_engine_id);

/**
 * implemented by: dnx_crps_db_proc_interface_prev_engine_id_get
 */
typedef int (*dnx_crps_db_proc_interface_prev_engine_id_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int *prev_engine_id);

/**
 * implemented by: dnx_crps_db_proc_interface_database_id_set
 */
typedef int (*dnx_crps_db_proc_interface_database_id_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int database_id);

/**
 * implemented by: dnx_crps_db_proc_interface_database_id_get
 */
typedef int (*dnx_crps_db_proc_interface_database_id_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int *database_id);

/**
 * implemented by: dnx_crps_db_proc_interface_src_type_set
 */
typedef int (*dnx_crps_db_proc_interface_src_type_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, bcm_stat_counter_interface_type_t src_type);

/**
 * implemented by: dnx_crps_db_proc_interface_src_type_get
 */
typedef int (*dnx_crps_db_proc_interface_src_type_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, bcm_stat_counter_interface_type_t *src_type);

/**
 * implemented by: dnx_crps_db_proc_interface_command_id_set
 */
typedef int (*dnx_crps_db_proc_interface_command_id_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int command_id);

/**
 * implemented by: dnx_crps_db_proc_interface_command_id_get
 */
typedef int (*dnx_crps_db_proc_interface_command_id_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int *command_id);

/**
 * implemented by: dnx_crps_db_proc_interface_format_set
 */
typedef int (*dnx_crps_db_proc_interface_format_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, bcm_stat_counter_format_type_t format);

/**
 * implemented by: dnx_crps_db_proc_interface_format_get
 */
typedef int (*dnx_crps_db_proc_interface_format_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, bcm_stat_counter_format_type_t *format);

/**
 * implemented by: dnx_crps_db_proc_interface_counter_set_size_set
 */
typedef int (*dnx_crps_db_proc_interface_counter_set_size_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int counter_set_size);

/**
 * implemented by: dnx_crps_db_proc_interface_counter_set_size_get
 */
typedef int (*dnx_crps_db_proc_interface_counter_set_size_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int *counter_set_size);

/**
 * implemented by: dnx_crps_db_proc_interface_type_hw_valid_set
 */
typedef int (*dnx_crps_db_proc_interface_type_hw_valid_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint32 type_hw_valid_idx_0, int type_hw_valid);

/**
 * implemented by: dnx_crps_db_proc_interface_type_hw_valid_get
 */
typedef int (*dnx_crps_db_proc_interface_type_hw_valid_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint32 type_hw_valid_idx_0, int *type_hw_valid);

/**
 * implemented by: dnx_crps_db_proc_eviction_eviction_type_set
 */
typedef int (*dnx_crps_db_proc_eviction_eviction_type_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, bcm_eviction_destination_type_t eviction_type);

/**
 * implemented by: dnx_crps_db_proc_eviction_eviction_type_get
 */
typedef int (*dnx_crps_db_proc_eviction_eviction_type_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, bcm_eviction_destination_type_t *eviction_type);

/**
 * implemented by: dnx_crps_db_proc_eviction_record_format_set
 */
typedef int (*dnx_crps_db_proc_eviction_record_format_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, bcm_eviction_record_format_t record_format);

/**
 * implemented by: dnx_crps_db_proc_eviction_record_format_get
 */
typedef int (*dnx_crps_db_proc_eviction_record_format_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, bcm_eviction_record_format_t *record_format);

/**
 * implemented by: dnx_crps_db_proc_eviction_eviction_event_id_set
 */
typedef int (*dnx_crps_db_proc_eviction_eviction_event_id_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int eviction_event_id);

/**
 * implemented by: dnx_crps_db_proc_eviction_eviction_event_id_get
 */
typedef int (*dnx_crps_db_proc_eviction_eviction_event_id_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int *eviction_event_id);

/**
 * implemented by: dnx_crps_db_proc_eviction_sequential_timer_value_set
 */
typedef int (*dnx_crps_db_proc_eviction_sequential_timer_value_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint32 sequential_timer_value);

/**
 * implemented by: dnx_crps_db_proc_eviction_sequential_timer_value_get
 */
typedef int (*dnx_crps_db_proc_eviction_sequential_timer_value_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint32 *sequential_timer_value);

/**
 * implemented by: dnx_crps_db_proc_eviction_dma_fifo_set
 */
typedef int (*dnx_crps_db_proc_eviction_dma_fifo_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int dma_fifo);

/**
 * implemented by: dnx_crps_db_proc_eviction_dma_fifo_get
 */
typedef int (*dnx_crps_db_proc_eviction_dma_fifo_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int *dma_fifo);

/**
 * implemented by: dnx_crps_db_proc_eviction_eviction_algorithmic_disable_set
 */
typedef int (*dnx_crps_db_proc_eviction_eviction_algorithmic_disable_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int eviction_algorithmic_disable);

/**
 * implemented by: dnx_crps_db_proc_eviction_eviction_algorithmic_disable_get
 */
typedef int (*dnx_crps_db_proc_eviction_eviction_algorithmic_disable_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int *eviction_algorithmic_disable);

/**
 * implemented by: dnx_crps_db_proc_eviction_conditional_condition_source_select_set
 */
typedef int (*dnx_crps_db_proc_eviction_conditional_condition_source_select_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, bcm_stat_eviction_conditional_source_t condition_source_select);

/**
 * implemented by: dnx_crps_db_proc_eviction_conditional_condition_source_select_get
 */
typedef int (*dnx_crps_db_proc_eviction_conditional_condition_source_select_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, bcm_stat_eviction_conditional_source_t *condition_source_select);

/**
 * implemented by: dnx_crps_db_proc_eviction_conditional_condition_user_data_set
 */
typedef int (*dnx_crps_db_proc_eviction_conditional_condition_user_data_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint64 condition_user_data);

/**
 * implemented by: dnx_crps_db_proc_eviction_conditional_condition_user_data_get
 */
typedef int (*dnx_crps_db_proc_eviction_conditional_condition_user_data_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint64 *condition_user_data);

/**
 * implemented by: dnx_crps_db_proc_eviction_conditional_qualifier_set
 */
typedef int (*dnx_crps_db_proc_eviction_conditional_qualifier_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, bcm_stat_eviction_conditional_qual_t qualifier);

/**
 * implemented by: dnx_crps_db_proc_eviction_conditional_qualifier_get
 */
typedef int (*dnx_crps_db_proc_eviction_conditional_qualifier_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, bcm_stat_eviction_conditional_qual_t *qualifier);

/**
 * implemented by: dnx_crps_db_proc_eviction_conditional_action_flags_set
 */
typedef int (*dnx_crps_db_proc_eviction_conditional_action_flags_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint32 action_flags);

/**
 * implemented by: dnx_crps_db_proc_eviction_conditional_action_flags_get
 */
typedef int (*dnx_crps_db_proc_eviction_conditional_action_flags_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint32 *action_flags);

/**
 * implemented by: dnx_crps_db_proc_eviction_conditional_enable_set
 */
typedef int (*dnx_crps_db_proc_eviction_conditional_enable_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int enable);

/**
 * implemented by: dnx_crps_db_proc_eviction_conditional_enable_get
 */
typedef int (*dnx_crps_db_proc_eviction_conditional_enable_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, int *enable);

/**
 * implemented by: dnx_crps_db_proc_log_obj_id_range_set
 */
typedef int (*dnx_crps_db_proc_log_obj_id_range_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, CONST dnx_engine_log_obj_id_range_t *log_obj_id_range);

/**
 * implemented by: dnx_crps_db_proc_log_obj_id_range_get
 */
typedef int (*dnx_crps_db_proc_log_obj_id_range_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, dnx_engine_log_obj_id_range_t *log_obj_id_range);

/**
 * implemented by: dnx_crps_db_proc_log_obj_id_range_logical_object_id_first_set
 */
typedef int (*dnx_crps_db_proc_log_obj_id_range_logical_object_id_first_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint32 logical_object_id_first);

/**
 * implemented by: dnx_crps_db_proc_log_obj_id_range_logical_object_id_first_get
 */
typedef int (*dnx_crps_db_proc_log_obj_id_range_logical_object_id_first_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint32 *logical_object_id_first);

/**
 * implemented by: dnx_crps_db_proc_log_obj_id_range_logical_object_id_last_set
 */
typedef int (*dnx_crps_db_proc_log_obj_id_range_logical_object_id_last_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint32 logical_object_id_last);

/**
 * implemented by: dnx_crps_db_proc_log_obj_id_range_logical_object_id_last_get
 */
typedef int (*dnx_crps_db_proc_log_obj_id_range_logical_object_id_last_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint32 *logical_object_id_last);

/**
 * implemented by: dnx_crps_db_proc_counter_set
 */
typedef int (*dnx_crps_db_proc_counter_set_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint32 counter_idx_0, uint64 counter);

/**
 * implemented by: dnx_crps_db_proc_counter_get
 */
typedef int (*dnx_crps_db_proc_counter_get_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint32 counter_idx_0, uint64 *counter);

/**
 * implemented by: dnx_crps_db_proc_counter_alloc
 */
typedef int (*dnx_crps_db_proc_counter_alloc_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnx_crps_db_proc_counter_is_allocated
 */
typedef int (*dnx_crps_db_proc_counter_is_allocated_cb)(
    int unit, uint32 proc_idx_0, uint32 proc_idx_1, uint8 *is_allocated);

/**
 * implemented by: dnx_crps_db_bg_thread_enable_set
 */
typedef int (*dnx_crps_db_bg_thread_enable_set_cb)(
    int unit, int bg_thread_enable);

/**
 * implemented by: dnx_crps_db_bg_thread_enable_get
 */
typedef int (*dnx_crps_db_bg_thread_enable_get_cb)(
    int unit, int *bg_thread_enable);

/**
 * implemented by: dnx_crps_db_database_alloc
 */
typedef int (*dnx_crps_db_database_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0, uint32 nof_instances_to_alloc_1);

/**
 * implemented by: dnx_crps_db_database_base_engine_set
 */
typedef int (*dnx_crps_db_database_base_engine_set_cb)(
    int unit, uint32 database_idx_0, uint32 database_idx_1, int base_engine);

/**
 * implemented by: dnx_crps_db_database_base_engine_get
 */
typedef int (*dnx_crps_db_database_base_engine_get_cb)(
    int unit, uint32 database_idx_0, uint32 database_idx_1, int *base_engine);

/**
 * implemented by: dnx_crps_db_database_type_set
 */
typedef int (*dnx_crps_db_database_type_set_cb)(
    int unit, uint32 database_idx_0, uint32 database_idx_1, uint32 type_idx_0, CONST dnx_type_config_t *type);

/**
 * implemented by: dnx_crps_db_database_type_get
 */
typedef int (*dnx_crps_db_database_type_get_cb)(
    int unit, uint32 database_idx_0, uint32 database_idx_1, uint32 type_idx_0, dnx_type_config_t *type);

/**
 * implemented by: dnx_crps_db_database_type_valid_set
 */
typedef int (*dnx_crps_db_database_type_valid_set_cb)(
    int unit, uint32 database_idx_0, uint32 database_idx_1, uint32 type_idx_0, uint32 valid);

/**
 * implemented by: dnx_crps_db_database_type_valid_get
 */
typedef int (*dnx_crps_db_database_type_valid_get_cb)(
    int unit, uint32 database_idx_0, uint32 database_idx_1, uint32 type_idx_0, uint32 *valid);

/**
 * implemented by: dnx_crps_db_database_type_offset_set
 */
typedef int (*dnx_crps_db_database_type_offset_set_cb)(
    int unit, uint32 database_idx_0, uint32 database_idx_1, uint32 type_idx_0, uint32 offset);

/**
 * implemented by: dnx_crps_db_database_type_offset_get
 */
typedef int (*dnx_crps_db_database_type_offset_get_cb)(
    int unit, uint32 database_idx_0, uint32 database_idx_1, uint32 type_idx_0, uint32 *offset);

/**
 * implemented by: dnx_crps_db_database_type_start_set
 */
typedef int (*dnx_crps_db_database_type_start_set_cb)(
    int unit, uint32 database_idx_0, uint32 database_idx_1, uint32 type_idx_0, int start);

/**
 * implemented by: dnx_crps_db_database_type_start_get
 */
typedef int (*dnx_crps_db_database_type_start_get_cb)(
    int unit, uint32 database_idx_0, uint32 database_idx_1, uint32 type_idx_0, int *start);

/**
 * implemented by: dnx_crps_db_database_type_end_set
 */
typedef int (*dnx_crps_db_database_type_end_set_cb)(
    int unit, uint32 database_idx_0, uint32 database_idx_1, uint32 type_idx_0, int end);

/**
 * implemented by: dnx_crps_db_database_type_end_get
 */
typedef int (*dnx_crps_db_database_type_end_get_cb)(
    int unit, uint32 database_idx_0, uint32 database_idx_1, uint32 type_idx_0, int *end);

/**
 * implemented by: dnx_crps_db_database_res_set
 */
typedef int (*dnx_crps_db_database_res_set_cb)(
    int unit, uint32 database_res_idx_0, dnx_algo_res_t database_res);

/**
 * implemented by: dnx_crps_db_database_res_get
 */
typedef int (*dnx_crps_db_database_res_get_cb)(
    int unit, uint32 database_res_idx_0, dnx_algo_res_t *database_res);

/**
 * implemented by: dnx_crps_db_database_res_alloc
 */
typedef int (*dnx_crps_db_database_res_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: dnx_crps_db_database_res_create
 */
typedef int (*dnx_crps_db_database_res_create_cb)(
    int unit, uint32 database_res_idx_0, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: dnx_crps_db_database_res_allocate_single
 */
typedef int (*dnx_crps_db_database_res_allocate_single_cb)(
    int unit, uint32 database_res_idx_0, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: dnx_crps_db_database_res_free_single
 */
typedef int (*dnx_crps_db_database_res_free_single_cb)(
    int unit, uint32 database_res_idx_0, int element);

/**
 * implemented by: dnx_crps_db_database_res_is_allocated
 */
typedef int (*dnx_crps_db_database_res_is_allocated_cb)(
    int unit, uint32 database_res_idx_0, int element, uint8 *is_allocated);

/*
 * STRUCTs
 */

/**
 * This structure holds the access functions for the variable used_for_meter
 */
typedef struct {
    dnx_crps_db_proc_used_for_meter_set_cb set;
    dnx_crps_db_proc_used_for_meter_get_cb get;
} dnx_crps_db_proc_used_for_meter_cbs;

/**
 * This structure holds the access functions for the variable config_started
 */
typedef struct {
    dnx_crps_db_proc_config_started_set_cb set;
    dnx_crps_db_proc_config_started_get_cb get;
} dnx_crps_db_proc_config_started_cbs;

/**
 * This structure holds the access functions for the variable config_done
 */
typedef struct {
    dnx_crps_db_proc_config_done_set_cb set;
    dnx_crps_db_proc_config_done_get_cb get;
} dnx_crps_db_proc_config_done_cbs;

/**
 * This structure holds the access functions for the variable counting_enable
 */
typedef struct {
    dnx_crps_db_proc_enablers_counting_enable_set_cb set;
    dnx_crps_db_proc_enablers_counting_enable_get_cb get;
} dnx_crps_db_proc_enablers_counting_enable_cbs;

/**
 * This structure holds the access functions for the variable eviction_enable
 */
typedef struct {
    dnx_crps_db_proc_enablers_eviction_enable_set_cb set;
    dnx_crps_db_proc_enablers_eviction_enable_get_cb get;
} dnx_crps_db_proc_enablers_eviction_enable_cbs;

/**
 * This structure holds the access functions for the variable dnx_engine_enablers_t
 */
typedef struct {
    dnx_crps_db_proc_enablers_set_cb set;
    dnx_crps_db_proc_enablers_get_cb get;
    /**
     * Access struct for counting_enable
     */
    dnx_crps_db_proc_enablers_counting_enable_cbs counting_enable;
    /**
     * Access struct for eviction_enable
     */
    dnx_crps_db_proc_enablers_eviction_enable_cbs eviction_enable;
} dnx_crps_db_proc_enablers_cbs;

/**
 * This structure holds the access functions for the variable next_engine_id
 */
typedef struct {
    dnx_crps_db_proc_interface_next_engine_id_set_cb set;
    dnx_crps_db_proc_interface_next_engine_id_get_cb get;
} dnx_crps_db_proc_interface_next_engine_id_cbs;

/**
 * This structure holds the access functions for the variable prev_engine_id
 */
typedef struct {
    dnx_crps_db_proc_interface_prev_engine_id_set_cb set;
    dnx_crps_db_proc_interface_prev_engine_id_get_cb get;
} dnx_crps_db_proc_interface_prev_engine_id_cbs;

/**
 * This structure holds the access functions for the variable database_id
 */
typedef struct {
    dnx_crps_db_proc_interface_database_id_set_cb set;
    dnx_crps_db_proc_interface_database_id_get_cb get;
} dnx_crps_db_proc_interface_database_id_cbs;

/**
 * This structure holds the access functions for the variable src_type
 */
typedef struct {
    dnx_crps_db_proc_interface_src_type_set_cb set;
    dnx_crps_db_proc_interface_src_type_get_cb get;
} dnx_crps_db_proc_interface_src_type_cbs;

/**
 * This structure holds the access functions for the variable command_id
 */
typedef struct {
    dnx_crps_db_proc_interface_command_id_set_cb set;
    dnx_crps_db_proc_interface_command_id_get_cb get;
} dnx_crps_db_proc_interface_command_id_cbs;

/**
 * This structure holds the access functions for the variable format
 */
typedef struct {
    dnx_crps_db_proc_interface_format_set_cb set;
    dnx_crps_db_proc_interface_format_get_cb get;
} dnx_crps_db_proc_interface_format_cbs;

/**
 * This structure holds the access functions for the variable counter_set_size
 */
typedef struct {
    dnx_crps_db_proc_interface_counter_set_size_set_cb set;
    dnx_crps_db_proc_interface_counter_set_size_get_cb get;
} dnx_crps_db_proc_interface_counter_set_size_cbs;

/**
 * This structure holds the access functions for the variable type_hw_valid
 */
typedef struct {
    dnx_crps_db_proc_interface_type_hw_valid_set_cb set;
    dnx_crps_db_proc_interface_type_hw_valid_get_cb get;
} dnx_crps_db_proc_interface_type_hw_valid_cbs;

/**
 * This structure holds the access functions for the variable dnx_engine_interface_info_t
 */
typedef struct {
    dnx_crps_db_proc_interface_set_cb set;
    dnx_crps_db_proc_interface_get_cb get;
    /**
     * Access struct for next_engine_id
     */
    dnx_crps_db_proc_interface_next_engine_id_cbs next_engine_id;
    /**
     * Access struct for prev_engine_id
     */
    dnx_crps_db_proc_interface_prev_engine_id_cbs prev_engine_id;
    /**
     * Access struct for database_id
     */
    dnx_crps_db_proc_interface_database_id_cbs database_id;
    /**
     * Access struct for src_type
     */
    dnx_crps_db_proc_interface_src_type_cbs src_type;
    /**
     * Access struct for command_id
     */
    dnx_crps_db_proc_interface_command_id_cbs command_id;
    /**
     * Access struct for format
     */
    dnx_crps_db_proc_interface_format_cbs format;
    /**
     * Access struct for counter_set_size
     */
    dnx_crps_db_proc_interface_counter_set_size_cbs counter_set_size;
    /**
     * Access struct for type_hw_valid
     */
    dnx_crps_db_proc_interface_type_hw_valid_cbs type_hw_valid;
} dnx_crps_db_proc_interface_cbs;

/**
 * This structure holds the access functions for the variable eviction_type
 */
typedef struct {
    dnx_crps_db_proc_eviction_eviction_type_set_cb set;
    dnx_crps_db_proc_eviction_eviction_type_get_cb get;
} dnx_crps_db_proc_eviction_eviction_type_cbs;

/**
 * This structure holds the access functions for the variable record_format
 */
typedef struct {
    dnx_crps_db_proc_eviction_record_format_set_cb set;
    dnx_crps_db_proc_eviction_record_format_get_cb get;
} dnx_crps_db_proc_eviction_record_format_cbs;

/**
 * This structure holds the access functions for the variable eviction_event_id
 */
typedef struct {
    dnx_crps_db_proc_eviction_eviction_event_id_set_cb set;
    dnx_crps_db_proc_eviction_eviction_event_id_get_cb get;
} dnx_crps_db_proc_eviction_eviction_event_id_cbs;

/**
 * This structure holds the access functions for the variable sequential_timer_value
 */
typedef struct {
    dnx_crps_db_proc_eviction_sequential_timer_value_set_cb set;
    dnx_crps_db_proc_eviction_sequential_timer_value_get_cb get;
} dnx_crps_db_proc_eviction_sequential_timer_value_cbs;

/**
 * This structure holds the access functions for the variable dma_fifo
 */
typedef struct {
    dnx_crps_db_proc_eviction_dma_fifo_set_cb set;
    dnx_crps_db_proc_eviction_dma_fifo_get_cb get;
} dnx_crps_db_proc_eviction_dma_fifo_cbs;

/**
 * This structure holds the access functions for the variable eviction_algorithmic_disable
 */
typedef struct {
    dnx_crps_db_proc_eviction_eviction_algorithmic_disable_set_cb set;
    dnx_crps_db_proc_eviction_eviction_algorithmic_disable_get_cb get;
} dnx_crps_db_proc_eviction_eviction_algorithmic_disable_cbs;

/**
 * This structure holds the access functions for the variable condition_source_select
 */
typedef struct {
    dnx_crps_db_proc_eviction_conditional_condition_source_select_set_cb set;
    dnx_crps_db_proc_eviction_conditional_condition_source_select_get_cb get;
} dnx_crps_db_proc_eviction_conditional_condition_source_select_cbs;

/**
 * This structure holds the access functions for the variable condition_user_data
 */
typedef struct {
    dnx_crps_db_proc_eviction_conditional_condition_user_data_set_cb set;
    dnx_crps_db_proc_eviction_conditional_condition_user_data_get_cb get;
} dnx_crps_db_proc_eviction_conditional_condition_user_data_cbs;

/**
 * This structure holds the access functions for the variable qualifier
 */
typedef struct {
    dnx_crps_db_proc_eviction_conditional_qualifier_set_cb set;
    dnx_crps_db_proc_eviction_conditional_qualifier_get_cb get;
} dnx_crps_db_proc_eviction_conditional_qualifier_cbs;

/**
 * This structure holds the access functions for the variable action_flags
 */
typedef struct {
    dnx_crps_db_proc_eviction_conditional_action_flags_set_cb set;
    dnx_crps_db_proc_eviction_conditional_action_flags_get_cb get;
} dnx_crps_db_proc_eviction_conditional_action_flags_cbs;

/**
 * This structure holds the access functions for the variable enable
 */
typedef struct {
    dnx_crps_db_proc_eviction_conditional_enable_set_cb set;
    dnx_crps_db_proc_eviction_conditional_enable_get_cb get;
} dnx_crps_db_proc_eviction_conditional_enable_cbs;

/**
 * This structure holds the access functions for the variable dnx_eviction_conditional_t
 */
typedef struct {
    /**
     * Access struct for condition_source_select
     */
    dnx_crps_db_proc_eviction_conditional_condition_source_select_cbs condition_source_select;
    /**
     * Access struct for condition_user_data
     */
    dnx_crps_db_proc_eviction_conditional_condition_user_data_cbs condition_user_data;
    /**
     * Access struct for qualifier
     */
    dnx_crps_db_proc_eviction_conditional_qualifier_cbs qualifier;
    /**
     * Access struct for action_flags
     */
    dnx_crps_db_proc_eviction_conditional_action_flags_cbs action_flags;
    /**
     * Access struct for enable
     */
    dnx_crps_db_proc_eviction_conditional_enable_cbs enable;
} dnx_crps_db_proc_eviction_conditional_cbs;

/**
 * This structure holds the access functions for the variable dnx_engine_eviction_t
 */
typedef struct {
    /**
     * Access struct for eviction_type
     */
    dnx_crps_db_proc_eviction_eviction_type_cbs eviction_type;
    /**
     * Access struct for record_format
     */
    dnx_crps_db_proc_eviction_record_format_cbs record_format;
    /**
     * Access struct for eviction_event_id
     */
    dnx_crps_db_proc_eviction_eviction_event_id_cbs eviction_event_id;
    /**
     * Access struct for sequential_timer_value
     */
    dnx_crps_db_proc_eviction_sequential_timer_value_cbs sequential_timer_value;
    /**
     * Access struct for dma_fifo
     */
    dnx_crps_db_proc_eviction_dma_fifo_cbs dma_fifo;
    /**
     * Access struct for eviction_algorithmic_disable
     */
    dnx_crps_db_proc_eviction_eviction_algorithmic_disable_cbs eviction_algorithmic_disable;
    /**
     * Access struct for conditional
     */
    dnx_crps_db_proc_eviction_conditional_cbs conditional;
} dnx_crps_db_proc_eviction_cbs;

/**
 * This structure holds the access functions for the variable logical_object_id_first
 */
typedef struct {
    dnx_crps_db_proc_log_obj_id_range_logical_object_id_first_set_cb set;
    dnx_crps_db_proc_log_obj_id_range_logical_object_id_first_get_cb get;
} dnx_crps_db_proc_log_obj_id_range_logical_object_id_first_cbs;

/**
 * This structure holds the access functions for the variable logical_object_id_last
 */
typedef struct {
    dnx_crps_db_proc_log_obj_id_range_logical_object_id_last_set_cb set;
    dnx_crps_db_proc_log_obj_id_range_logical_object_id_last_get_cb get;
} dnx_crps_db_proc_log_obj_id_range_logical_object_id_last_cbs;

/**
 * This structure holds the access functions for the variable dnx_engine_log_obj_id_range_t
 */
typedef struct {
    dnx_crps_db_proc_log_obj_id_range_set_cb set;
    dnx_crps_db_proc_log_obj_id_range_get_cb get;
    /**
     * Access struct for logical_object_id_first
     */
    dnx_crps_db_proc_log_obj_id_range_logical_object_id_first_cbs logical_object_id_first;
    /**
     * Access struct for logical_object_id_last
     */
    dnx_crps_db_proc_log_obj_id_range_logical_object_id_last_cbs logical_object_id_last;
} dnx_crps_db_proc_log_obj_id_range_cbs;

/**
 * This structure holds the access functions for the variable counter
 */
typedef struct {
    dnx_crps_db_proc_counter_set_cb set;
    dnx_crps_db_proc_counter_get_cb get;
    dnx_crps_db_proc_counter_alloc_cb alloc;
    dnx_crps_db_proc_counter_is_allocated_cb is_allocated;
} dnx_crps_db_proc_counter_cbs;

/**
 * This structure holds the access functions for the variable dnx_engine_info_t
 */
typedef struct {
    dnx_crps_db_proc_alloc_cb alloc;
    /**
     * Access struct for used_for_meter
     */
    dnx_crps_db_proc_used_for_meter_cbs used_for_meter;
    /**
     * Access struct for config_started
     */
    dnx_crps_db_proc_config_started_cbs config_started;
    /**
     * Access struct for config_done
     */
    dnx_crps_db_proc_config_done_cbs config_done;
    /**
     * Access struct for enablers
     */
    dnx_crps_db_proc_enablers_cbs enablers;
    /**
     * Access struct for interface
     */
    dnx_crps_db_proc_interface_cbs interface;
    /**
     * Access struct for eviction
     */
    dnx_crps_db_proc_eviction_cbs eviction;
    /**
     * Access struct for log_obj_id_range
     */
    dnx_crps_db_proc_log_obj_id_range_cbs log_obj_id_range;
    /**
     * Access struct for counter
     */
    dnx_crps_db_proc_counter_cbs counter;
} dnx_crps_db_proc_cbs;

/**
 * This structure holds the access functions for the variable bg_thread_enable
 */
typedef struct {
    dnx_crps_db_bg_thread_enable_set_cb set;
    dnx_crps_db_bg_thread_enable_get_cb get;
} dnx_crps_db_bg_thread_enable_cbs;

/**
 * This structure holds the access functions for the variable base_engine
 */
typedef struct {
    dnx_crps_db_database_base_engine_set_cb set;
    dnx_crps_db_database_base_engine_get_cb get;
} dnx_crps_db_database_base_engine_cbs;

/**
 * This structure holds the access functions for the variable valid
 */
typedef struct {
    dnx_crps_db_database_type_valid_set_cb set;
    dnx_crps_db_database_type_valid_get_cb get;
} dnx_crps_db_database_type_valid_cbs;

/**
 * This structure holds the access functions for the variable offset
 */
typedef struct {
    dnx_crps_db_database_type_offset_set_cb set;
    dnx_crps_db_database_type_offset_get_cb get;
} dnx_crps_db_database_type_offset_cbs;

/**
 * This structure holds the access functions for the variable start
 */
typedef struct {
    dnx_crps_db_database_type_start_set_cb set;
    dnx_crps_db_database_type_start_get_cb get;
} dnx_crps_db_database_type_start_cbs;

/**
 * This structure holds the access functions for the variable end
 */
typedef struct {
    dnx_crps_db_database_type_end_set_cb set;
    dnx_crps_db_database_type_end_get_cb get;
} dnx_crps_db_database_type_end_cbs;

/**
 * This structure holds the access functions for the variable dnx_type_config_t
 */
typedef struct {
    dnx_crps_db_database_type_set_cb set;
    dnx_crps_db_database_type_get_cb get;
    /**
     * Access struct for valid
     */
    dnx_crps_db_database_type_valid_cbs valid;
    /**
     * Access struct for offset
     */
    dnx_crps_db_database_type_offset_cbs offset;
    /**
     * Access struct for start
     */
    dnx_crps_db_database_type_start_cbs start;
    /**
     * Access struct for end
     */
    dnx_crps_db_database_type_end_cbs end;
} dnx_crps_db_database_type_cbs;

/**
 * This structure holds the access functions for the variable dnx_database_info_t
 */
typedef struct {
    dnx_crps_db_database_alloc_cb alloc;
    /**
     * Access struct for base_engine
     */
    dnx_crps_db_database_base_engine_cbs base_engine;
    /**
     * Access struct for type
     */
    dnx_crps_db_database_type_cbs type;
} dnx_crps_db_database_cbs;

/**
 * This structure holds the access functions for the variable database_res
 */
typedef struct {
    dnx_crps_db_database_res_set_cb set;
    dnx_crps_db_database_res_get_cb get;
    dnx_crps_db_database_res_alloc_cb alloc;
    dnx_crps_db_database_res_create_cb create;
    dnx_crps_db_database_res_allocate_single_cb allocate_single;
    dnx_crps_db_database_res_free_single_cb free_single;
    dnx_crps_db_database_res_is_allocated_cb is_allocated;
} dnx_crps_db_database_res_cbs;

/**
 * This structure holds the access functions for the variable dnx_crps_db_t
 */
typedef struct {
    dnx_crps_db_is_init_cb is_init;
    dnx_crps_db_init_cb init;
    /**
     * Access struct for proc
     */
    dnx_crps_db_proc_cbs proc;
    /**
     * Access struct for bg_thread_enable
     */
    dnx_crps_db_bg_thread_enable_cbs bg_thread_enable;
    /**
     * Access struct for database
     */
    dnx_crps_db_database_cbs database;
    /**
     * Access struct for database_res
     */
    dnx_crps_db_database_res_cbs database_res;
} dnx_crps_db_cbs;

/*
 * Global Variables
 */

/*
 * Global Variables
 */

extern dnx_crps_db_cbs dnx_crps_db;

#endif /* __CRPS_ACCESS_H__ */
