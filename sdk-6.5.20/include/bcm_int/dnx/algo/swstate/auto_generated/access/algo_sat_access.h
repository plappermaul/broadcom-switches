/** \file algo/swstate/auto_generated/access/algo_sat_access.h
 *
 * sw state functions declarations
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef __ALGO_SAT_ACCESS_H__
#define __ALGO_SAT_ACCESS_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/swstate/auto_generated/types/algo_sat_types.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr_internal.h>
#include <bcm_int/dnx/sat/sat.h>
/*
 * TYPEDEFs
 */

/**
 * implemented by: algo_sat_db_is_init
 */
typedef int (*algo_sat_db_is_init_cb)(
    int unit, uint8 *is_init);

/**
 * implemented by: algo_sat_db_init
 */
typedef int (*algo_sat_db_init_cb)(
    int unit);

/**
 * implemented by: algo_sat_db_sat_res_alloc_gtf_id_set
 */
typedef int (*algo_sat_db_sat_res_alloc_gtf_id_set_cb)(
    int unit, dnx_algo_res_t sat_res_alloc_gtf_id);

/**
 * implemented by: algo_sat_db_sat_res_alloc_gtf_id_get
 */
typedef int (*algo_sat_db_sat_res_alloc_gtf_id_get_cb)(
    int unit, dnx_algo_res_t *sat_res_alloc_gtf_id);

/**
 * implemented by: algo_sat_db_sat_res_alloc_gtf_id_create
 */
typedef int (*algo_sat_db_sat_res_alloc_gtf_id_create_cb)(
    int unit, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_sat_db_sat_res_alloc_gtf_id_allocate_single
 */
typedef int (*algo_sat_db_sat_res_alloc_gtf_id_allocate_single_cb)(
    int unit, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: algo_sat_db_sat_res_alloc_gtf_id_free_single
 */
typedef int (*algo_sat_db_sat_res_alloc_gtf_id_free_single_cb)(
    int unit, int element);

/**
 * implemented by: algo_sat_db_sat_res_alloc_gtf_id_is_allocated
 */
typedef int (*algo_sat_db_sat_res_alloc_gtf_id_is_allocated_cb)(
    int unit, int element, uint8 *is_allocated);

/**
 * implemented by: algo_sat_db_sat_res_alloc_gtf_id_nof_free_elements_get
 */
typedef int (*algo_sat_db_sat_res_alloc_gtf_id_nof_free_elements_get_cb)(
    int unit, int *nof_free_elements);

/**
 * implemented by: algo_sat_db_sat_res_alloc_gtf_id_nof_allocated_elements_in_range_get
 */
typedef int (*algo_sat_db_sat_res_alloc_gtf_id_nof_allocated_elements_in_range_get_cb)(
    int unit, int range_start, int nof_elements_in_range, int *nof_allocated_elements);

/**
 * implemented by: algo_sat_db_sat_res_alloc_ctf_id_set
 */
typedef int (*algo_sat_db_sat_res_alloc_ctf_id_set_cb)(
    int unit, dnx_algo_res_t sat_res_alloc_ctf_id);

/**
 * implemented by: algo_sat_db_sat_res_alloc_ctf_id_get
 */
typedef int (*algo_sat_db_sat_res_alloc_ctf_id_get_cb)(
    int unit, dnx_algo_res_t *sat_res_alloc_ctf_id);

/**
 * implemented by: algo_sat_db_sat_res_alloc_ctf_id_create
 */
typedef int (*algo_sat_db_sat_res_alloc_ctf_id_create_cb)(
    int unit, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_sat_db_sat_res_alloc_ctf_id_allocate_single
 */
typedef int (*algo_sat_db_sat_res_alloc_ctf_id_allocate_single_cb)(
    int unit, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: algo_sat_db_sat_res_alloc_ctf_id_free_single
 */
typedef int (*algo_sat_db_sat_res_alloc_ctf_id_free_single_cb)(
    int unit, int element);

/**
 * implemented by: algo_sat_db_sat_res_alloc_ctf_id_is_allocated
 */
typedef int (*algo_sat_db_sat_res_alloc_ctf_id_is_allocated_cb)(
    int unit, int element, uint8 *is_allocated);

/**
 * implemented by: algo_sat_db_sat_res_alloc_trap_id_set
 */
typedef int (*algo_sat_db_sat_res_alloc_trap_id_set_cb)(
    int unit, dnx_algo_res_t sat_res_alloc_trap_id);

/**
 * implemented by: algo_sat_db_sat_res_alloc_trap_id_get
 */
typedef int (*algo_sat_db_sat_res_alloc_trap_id_get_cb)(
    int unit, dnx_algo_res_t *sat_res_alloc_trap_id);

/**
 * implemented by: algo_sat_db_sat_res_alloc_trap_id_create
 */
typedef int (*algo_sat_db_sat_res_alloc_trap_id_create_cb)(
    int unit, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_sat_db_sat_res_alloc_trap_id_allocate_single
 */
typedef int (*algo_sat_db_sat_res_alloc_trap_id_allocate_single_cb)(
    int unit, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: algo_sat_db_sat_res_alloc_trap_id_free_single
 */
typedef int (*algo_sat_db_sat_res_alloc_trap_id_free_single_cb)(
    int unit, int element);

/**
 * implemented by: algo_sat_db_sat_res_alloc_trap_id_is_allocated
 */
typedef int (*algo_sat_db_sat_res_alloc_trap_id_is_allocated_cb)(
    int unit, int element, uint8 *is_allocated);

/**
 * implemented by: algo_sat_db_sat_res_alloc_trap_data_set
 */
typedef int (*algo_sat_db_sat_res_alloc_trap_data_set_cb)(
    int unit, dnx_algo_res_t sat_res_alloc_trap_data);

/**
 * implemented by: algo_sat_db_sat_res_alloc_trap_data_get
 */
typedef int (*algo_sat_db_sat_res_alloc_trap_data_get_cb)(
    int unit, dnx_algo_res_t *sat_res_alloc_trap_data);

/**
 * implemented by: algo_sat_db_sat_res_alloc_trap_data_create
 */
typedef int (*algo_sat_db_sat_res_alloc_trap_data_create_cb)(
    int unit, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_sat_db_sat_res_alloc_trap_data_allocate_single
 */
typedef int (*algo_sat_db_sat_res_alloc_trap_data_allocate_single_cb)(
    int unit, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: algo_sat_db_sat_res_alloc_trap_data_free_single
 */
typedef int (*algo_sat_db_sat_res_alloc_trap_data_free_single_cb)(
    int unit, int element);

/**
 * implemented by: algo_sat_db_sat_res_alloc_trap_data_is_allocated
 */
typedef int (*algo_sat_db_sat_res_alloc_trap_data_is_allocated_cb)(
    int unit, int element, uint8 *is_allocated);

/**
 * implemented by: algo_sat_db_sat_pkt_header_set
 */
typedef int (*algo_sat_db_sat_pkt_header_set_cb)(
    int unit, dnx_algo_template_t sat_pkt_header);

/**
 * implemented by: algo_sat_db_sat_pkt_header_get
 */
typedef int (*algo_sat_db_sat_pkt_header_get_cb)(
    int unit, dnx_algo_template_t *sat_pkt_header);

/**
 * implemented by: algo_sat_db_sat_pkt_header_create
 */
typedef int (*algo_sat_db_sat_pkt_header_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_sat_db_sat_pkt_header_allocate_single
 */
typedef int (*algo_sat_db_sat_pkt_header_allocate_single_cb)(
    int unit, uint32 flags, dnx_sat_gtf_pkt_hdr_tbl_info_t *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

/**
 * implemented by: algo_sat_db_sat_pkt_header_free_single
 */
typedef int (*algo_sat_db_sat_pkt_header_free_single_cb)(
    int unit, int profile, uint8 *last_reference);

/**
 * implemented by: algo_sat_db_sat_pkt_header_exchange
 */
typedef int (*algo_sat_db_sat_pkt_header_exchange_cb)(
    int unit, uint32 flags, const dnx_sat_gtf_pkt_hdr_tbl_info_t *profile_data, int old_profile, const void *extra_arguments, int *new_profile, uint8 *first_reference, uint8 *last_reference);

/**
 * implemented by: algo_sat_db_sat_pkt_header_profile_data_get
 */
typedef int (*algo_sat_db_sat_pkt_header_profile_data_get_cb)(
    int unit, int profile, int *ref_count, dnx_sat_gtf_pkt_hdr_tbl_info_t *profile_data);

/*
 * STRUCTs
 */

/**
 * This structure holds the access functions for the variable sat_res_alloc_gtf_id
 */
typedef struct {
    algo_sat_db_sat_res_alloc_gtf_id_set_cb set;
    algo_sat_db_sat_res_alloc_gtf_id_get_cb get;
    algo_sat_db_sat_res_alloc_gtf_id_create_cb create;
    algo_sat_db_sat_res_alloc_gtf_id_allocate_single_cb allocate_single;
    algo_sat_db_sat_res_alloc_gtf_id_free_single_cb free_single;
    algo_sat_db_sat_res_alloc_gtf_id_is_allocated_cb is_allocated;
    algo_sat_db_sat_res_alloc_gtf_id_nof_free_elements_get_cb nof_free_elements_get;
    algo_sat_db_sat_res_alloc_gtf_id_nof_allocated_elements_in_range_get_cb nof_allocated_elements_in_range_get;
} algo_sat_db_sat_res_alloc_gtf_id_cbs;

/**
 * This structure holds the access functions for the variable sat_res_alloc_ctf_id
 */
typedef struct {
    algo_sat_db_sat_res_alloc_ctf_id_set_cb set;
    algo_sat_db_sat_res_alloc_ctf_id_get_cb get;
    algo_sat_db_sat_res_alloc_ctf_id_create_cb create;
    algo_sat_db_sat_res_alloc_ctf_id_allocate_single_cb allocate_single;
    algo_sat_db_sat_res_alloc_ctf_id_free_single_cb free_single;
    algo_sat_db_sat_res_alloc_ctf_id_is_allocated_cb is_allocated;
} algo_sat_db_sat_res_alloc_ctf_id_cbs;

/**
 * This structure holds the access functions for the variable sat_res_alloc_trap_id
 */
typedef struct {
    algo_sat_db_sat_res_alloc_trap_id_set_cb set;
    algo_sat_db_sat_res_alloc_trap_id_get_cb get;
    algo_sat_db_sat_res_alloc_trap_id_create_cb create;
    algo_sat_db_sat_res_alloc_trap_id_allocate_single_cb allocate_single;
    algo_sat_db_sat_res_alloc_trap_id_free_single_cb free_single;
    algo_sat_db_sat_res_alloc_trap_id_is_allocated_cb is_allocated;
} algo_sat_db_sat_res_alloc_trap_id_cbs;

/**
 * This structure holds the access functions for the variable sat_res_alloc_trap_data
 */
typedef struct {
    algo_sat_db_sat_res_alloc_trap_data_set_cb set;
    algo_sat_db_sat_res_alloc_trap_data_get_cb get;
    algo_sat_db_sat_res_alloc_trap_data_create_cb create;
    algo_sat_db_sat_res_alloc_trap_data_allocate_single_cb allocate_single;
    algo_sat_db_sat_res_alloc_trap_data_free_single_cb free_single;
    algo_sat_db_sat_res_alloc_trap_data_is_allocated_cb is_allocated;
} algo_sat_db_sat_res_alloc_trap_data_cbs;

/**
 * This structure holds the access functions for the variable sat_pkt_header
 */
typedef struct {
    algo_sat_db_sat_pkt_header_set_cb set;
    algo_sat_db_sat_pkt_header_get_cb get;
    algo_sat_db_sat_pkt_header_create_cb create;
    algo_sat_db_sat_pkt_header_allocate_single_cb allocate_single;
    algo_sat_db_sat_pkt_header_free_single_cb free_single;
    algo_sat_db_sat_pkt_header_exchange_cb exchange;
    algo_sat_db_sat_pkt_header_profile_data_get_cb profile_data_get;
} algo_sat_db_sat_pkt_header_cbs;

/**
 * This structure holds the access functions for the variable algo_sat_sw_state_t
 */
typedef struct {
    algo_sat_db_is_init_cb is_init;
    algo_sat_db_init_cb init;
    /**
     * Access struct for sat_res_alloc_gtf_id
     */
    algo_sat_db_sat_res_alloc_gtf_id_cbs sat_res_alloc_gtf_id;
    /**
     * Access struct for sat_res_alloc_ctf_id
     */
    algo_sat_db_sat_res_alloc_ctf_id_cbs sat_res_alloc_ctf_id;
    /**
     * Access struct for sat_res_alloc_trap_id
     */
    algo_sat_db_sat_res_alloc_trap_id_cbs sat_res_alloc_trap_id;
    /**
     * Access struct for sat_res_alloc_trap_data
     */
    algo_sat_db_sat_res_alloc_trap_data_cbs sat_res_alloc_trap_data;
    /**
     * Access struct for sat_pkt_header
     */
    algo_sat_db_sat_pkt_header_cbs sat_pkt_header;
} algo_sat_db_cbs;

/*
 * Global Variables
 */

/*
 * Global Variables
 */

extern algo_sat_db_cbs algo_sat_db;

#endif /* __ALGO_SAT_ACCESS_H__ */
