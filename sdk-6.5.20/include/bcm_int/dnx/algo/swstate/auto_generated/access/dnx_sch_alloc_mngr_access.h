/** \file algo/swstate/auto_generated/access/dnx_sch_alloc_mngr_access.h
 *
 * sw state functions declarations
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef __DNX_SCH_ALLOC_MNGR_ACCESS_H__
#define __DNX_SCH_ALLOC_MNGR_ACCESS_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/swstate/auto_generated/types/dnx_sch_alloc_mngr_types.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr_internal.h>
#include <bcm_int/dnx/cosq/scheduler/scheduler.h>
/*
 * TYPEDEFs
 */

/**
 * implemented by: sch_alloc_db_is_init
 */
typedef int (*sch_alloc_db_is_init_cb)(
    int unit, uint8 *is_init);

/**
 * implemented by: sch_alloc_db_init
 */
typedef int (*sch_alloc_db_init_cb)(
    int unit);

/**
 * implemented by: sch_alloc_db_sch_flow_alloc_mngr_set
 */
typedef int (*sch_alloc_db_sch_flow_alloc_mngr_set_cb)(
    int unit, uint32 sch_flow_alloc_mngr_idx_0, uint32 sch_flow_alloc_mngr_idx_1, dnx_algo_res_t sch_flow_alloc_mngr);

/**
 * implemented by: sch_alloc_db_sch_flow_alloc_mngr_get
 */
typedef int (*sch_alloc_db_sch_flow_alloc_mngr_get_cb)(
    int unit, uint32 sch_flow_alloc_mngr_idx_0, uint32 sch_flow_alloc_mngr_idx_1, dnx_algo_res_t *sch_flow_alloc_mngr);

/**
 * implemented by: sch_alloc_db_sch_flow_alloc_mngr_alloc
 */
typedef int (*sch_alloc_db_sch_flow_alloc_mngr_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0, uint32 nof_instances_to_alloc_1);

/**
 * implemented by: sch_alloc_db_sch_flow_alloc_mngr_create
 */
typedef int (*sch_alloc_db_sch_flow_alloc_mngr_create_cb)(
    int unit, uint32 sch_flow_alloc_mngr_idx_0, uint32 sch_flow_alloc_mngr_idx_1, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: sch_alloc_db_sch_flow_alloc_mngr_allocate_single
 */
typedef int (*sch_alloc_db_sch_flow_alloc_mngr_allocate_single_cb)(
    int unit, uint32 sch_flow_alloc_mngr_idx_0, uint32 sch_flow_alloc_mngr_idx_1, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: sch_alloc_db_sch_flow_alloc_mngr_free_single
 */
typedef int (*sch_alloc_db_sch_flow_alloc_mngr_free_single_cb)(
    int unit, uint32 sch_flow_alloc_mngr_idx_0, uint32 sch_flow_alloc_mngr_idx_1, int element);

/**
 * implemented by: sch_alloc_db_sch_flow_alloc_mngr_is_allocated
 */
typedef int (*sch_alloc_db_sch_flow_alloc_mngr_is_allocated_cb)(
    int unit, uint32 sch_flow_alloc_mngr_idx_0, uint32 sch_flow_alloc_mngr_idx_1, int element, uint8 *is_allocated);

/**
 * implemented by: sch_alloc_db_sch_flow_alloc_mngr_nof_allocated_elements_in_range_get
 */
typedef int (*sch_alloc_db_sch_flow_alloc_mngr_nof_allocated_elements_in_range_get_cb)(
    int unit, uint32 sch_flow_alloc_mngr_idx_0, uint32 sch_flow_alloc_mngr_idx_1, int range_start, int nof_elements_in_range, int *nof_allocated_elements);

/**
 * implemented by: sch_alloc_db_interface_set
 */
typedef int (*sch_alloc_db_interface_set_cb)(
    int unit, uint32 interface_idx_0, dnx_algo_res_t interface);

/**
 * implemented by: sch_alloc_db_interface_get
 */
typedef int (*sch_alloc_db_interface_get_cb)(
    int unit, uint32 interface_idx_0, dnx_algo_res_t *interface);

/**
 * implemented by: sch_alloc_db_interface_alloc
 */
typedef int (*sch_alloc_db_interface_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: sch_alloc_db_interface_create
 */
typedef int (*sch_alloc_db_interface_create_cb)(
    int unit, uint32 interface_idx_0, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: sch_alloc_db_interface_allocate_several
 */
typedef int (*sch_alloc_db_interface_allocate_several_cb)(
    int unit, uint32 interface_idx_0, uint32 flags, uint32 nof_elements, void *extra_arguments, int *element);

/**
 * implemented by: sch_alloc_db_interface_free_several
 */
typedef int (*sch_alloc_db_interface_free_several_cb)(
    int unit, uint32 interface_idx_0, uint32 nof_elements, int element);

/**
 * implemented by: sch_alloc_db_interface_is_allocated
 */
typedef int (*sch_alloc_db_interface_is_allocated_cb)(
    int unit, uint32 interface_idx_0, int element, uint8 *is_allocated);

/**
 * implemented by: sch_alloc_db_interface_nof_allocated_elements_in_range_get
 */
typedef int (*sch_alloc_db_interface_nof_allocated_elements_in_range_get_cb)(
    int unit, uint32 interface_idx_0, int range_start, int nof_elements_in_range, int *nof_allocated_elements);

/**
 * implemented by: sch_alloc_db_interface_advanced_algorithm_info_set
 */
typedef int (*sch_alloc_db_interface_advanced_algorithm_info_set_cb)(
    int unit, uint32 interface_idx_0, void *algorithm_info);

/**
 * implemented by: sch_alloc_db_cl_class_alloc_mngr_set
 */
typedef int (*sch_alloc_db_cl_class_alloc_mngr_set_cb)(
    int unit, uint32 cl_class_alloc_mngr_idx_0, dnx_algo_template_t cl_class_alloc_mngr);

/**
 * implemented by: sch_alloc_db_cl_class_alloc_mngr_get
 */
typedef int (*sch_alloc_db_cl_class_alloc_mngr_get_cb)(
    int unit, uint32 cl_class_alloc_mngr_idx_0, dnx_algo_template_t *cl_class_alloc_mngr);

/**
 * implemented by: sch_alloc_db_cl_class_alloc_mngr_alloc
 */
typedef int (*sch_alloc_db_cl_class_alloc_mngr_alloc_cb)(
    int unit);

/**
 * implemented by: sch_alloc_db_cl_class_alloc_mngr_create
 */
typedef int (*sch_alloc_db_cl_class_alloc_mngr_create_cb)(
    int unit, uint32 cl_class_alloc_mngr_idx_0, dnx_algo_template_create_data_t * data, void *extra_arguments);

/**
 * implemented by: sch_alloc_db_cl_class_alloc_mngr_allocate_single
 */
typedef int (*sch_alloc_db_cl_class_alloc_mngr_allocate_single_cb)(
    int unit, uint32 cl_class_alloc_mngr_idx_0, uint32 flags, dnx_sch_cl_info_t *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

/**
 * implemented by: sch_alloc_db_cl_class_alloc_mngr_free_single
 */
typedef int (*sch_alloc_db_cl_class_alloc_mngr_free_single_cb)(
    int unit, uint32 cl_class_alloc_mngr_idx_0, int profile, uint8 *last_reference);

/**
 * implemented by: sch_alloc_db_cl_class_alloc_mngr_exchange
 */
typedef int (*sch_alloc_db_cl_class_alloc_mngr_exchange_cb)(
    int unit, uint32 cl_class_alloc_mngr_idx_0, uint32 flags, const dnx_sch_cl_info_t *profile_data, int old_profile, const void *extra_arguments, int *new_profile, uint8 *first_reference, uint8 *last_reference);

/**
 * implemented by: sch_alloc_db_cl_class_alloc_mngr_profile_data_get
 */
typedef int (*sch_alloc_db_cl_class_alloc_mngr_profile_data_get_cb)(
    int unit, uint32 cl_class_alloc_mngr_idx_0, int profile, int *ref_count, dnx_sch_cl_info_t *profile_data);

/**
 * implemented by: sch_alloc_db_cl_class_alloc_mngr_advanced_algorithm_info_set
 */
typedef int (*sch_alloc_db_cl_class_alloc_mngr_advanced_algorithm_info_set_cb)(
    int unit, uint32 cl_class_alloc_mngr_idx_0, void *algorithm_info);

/**
 * implemented by: sch_alloc_db_cl_class_alloc_mngr_advanced_algorithm_info_get
 */
typedef int (*sch_alloc_db_cl_class_alloc_mngr_advanced_algorithm_info_get_cb)(
    int unit, uint32 cl_class_alloc_mngr_idx_0, void *algorithm_info);

/*
 * STRUCTs
 */

/**
 * This structure holds the access functions for the variable sch_flow_alloc_mngr
 */
typedef struct {
    sch_alloc_db_sch_flow_alloc_mngr_set_cb set;
    sch_alloc_db_sch_flow_alloc_mngr_get_cb get;
    sch_alloc_db_sch_flow_alloc_mngr_alloc_cb alloc;
    sch_alloc_db_sch_flow_alloc_mngr_create_cb create;
    sch_alloc_db_sch_flow_alloc_mngr_allocate_single_cb allocate_single;
    sch_alloc_db_sch_flow_alloc_mngr_free_single_cb free_single;
    sch_alloc_db_sch_flow_alloc_mngr_is_allocated_cb is_allocated;
    sch_alloc_db_sch_flow_alloc_mngr_nof_allocated_elements_in_range_get_cb nof_allocated_elements_in_range_get;
} sch_alloc_db_sch_flow_alloc_mngr_cbs;

/**
 * This structure holds the access functions for the variable interface
 */
typedef struct {
    sch_alloc_db_interface_set_cb set;
    sch_alloc_db_interface_get_cb get;
    sch_alloc_db_interface_alloc_cb alloc;
    sch_alloc_db_interface_create_cb create;
    sch_alloc_db_interface_allocate_several_cb allocate_several;
    sch_alloc_db_interface_free_several_cb free_several;
    sch_alloc_db_interface_is_allocated_cb is_allocated;
    sch_alloc_db_interface_nof_allocated_elements_in_range_get_cb nof_allocated_elements_in_range_get;
    sch_alloc_db_interface_advanced_algorithm_info_set_cb advanced_algorithm_info_set;
} sch_alloc_db_interface_cbs;

/**
 * This structure holds the access functions for the variable cl_class_alloc_mngr
 */
typedef struct {
    sch_alloc_db_cl_class_alloc_mngr_set_cb set;
    sch_alloc_db_cl_class_alloc_mngr_get_cb get;
    sch_alloc_db_cl_class_alloc_mngr_alloc_cb alloc;
    sch_alloc_db_cl_class_alloc_mngr_create_cb create;
    sch_alloc_db_cl_class_alloc_mngr_allocate_single_cb allocate_single;
    sch_alloc_db_cl_class_alloc_mngr_free_single_cb free_single;
    sch_alloc_db_cl_class_alloc_mngr_exchange_cb exchange;
    sch_alloc_db_cl_class_alloc_mngr_profile_data_get_cb profile_data_get;
    sch_alloc_db_cl_class_alloc_mngr_advanced_algorithm_info_set_cb advanced_algorithm_info_set;
    sch_alloc_db_cl_class_alloc_mngr_advanced_algorithm_info_get_cb advanced_algorithm_info_get;
} sch_alloc_db_cl_class_alloc_mngr_cbs;

/**
 * This structure holds the access functions for the variable dnx_sch_alloc_db_t
 */
typedef struct {
    sch_alloc_db_is_init_cb is_init;
    sch_alloc_db_init_cb init;
    /**
     * Access struct for sch_flow_alloc_mngr
     */
    sch_alloc_db_sch_flow_alloc_mngr_cbs sch_flow_alloc_mngr;
    /**
     * Access struct for interface
     */
    sch_alloc_db_interface_cbs interface;
    /**
     * Access struct for cl_class_alloc_mngr
     */
    sch_alloc_db_cl_class_alloc_mngr_cbs cl_class_alloc_mngr;
} sch_alloc_db_cbs;

/*
 * Global Variables
 */

/*
 * Global Variables
 */

extern sch_alloc_db_cbs sch_alloc_db;

#endif /* __DNX_SCH_ALLOC_MNGR_ACCESS_H__ */
