/** \file algo/swstate/auto_generated/access/flow_control_access.h
 *
 * sw state functions declarations
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef __FLOW_CONTROL_ACCESS_H__
#define __FLOW_CONTROL_ACCESS_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/swstate/auto_generated/types/flow_control_types.h>
#include <bcm/cosq.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr_internal.h>
#include <bcm_int/dnx/cosq/flow_control/flow_control_imp.h>
#include <bcm_int/dnx/cosq/flow_control/pfc_deadlock.h>
#include <include/shared/periodic_event.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_max_nif.h>
/*
 * TYPEDEFs
 */

/**
 * implemented by: flow_control_db_is_init
 */
typedef int (*flow_control_db_is_init_cb)(
    int unit, uint8 *is_init);

/**
 * implemented by: flow_control_db_init
 */
typedef int (*flow_control_db_init_cb)(
    int unit);

/**
 * implemented by: flow_control_db_fc_generic_bmp_set
 */
typedef int (*flow_control_db_fc_generic_bmp_set_cb)(
    int unit, dnx_algo_template_t fc_generic_bmp);

/**
 * implemented by: flow_control_db_fc_generic_bmp_get
 */
typedef int (*flow_control_db_fc_generic_bmp_get_cb)(
    int unit, dnx_algo_template_t *fc_generic_bmp);

/**
 * implemented by: flow_control_db_fc_generic_bmp_create
 */
typedef int (*flow_control_db_fc_generic_bmp_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

/**
 * implemented by: flow_control_db_fc_generic_bmp_allocate_single
 */
typedef int (*flow_control_db_fc_generic_bmp_allocate_single_cb)(
    int unit, uint32 flags, dnx_pfc_generic_bmp_t *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

/**
 * implemented by: flow_control_db_fc_generic_bmp_free_single
 */
typedef int (*flow_control_db_fc_generic_bmp_free_single_cb)(
    int unit, int profile, uint8 *last_reference);

/**
 * implemented by: flow_control_db_fc_generic_bmp_exchange
 */
typedef int (*flow_control_db_fc_generic_bmp_exchange_cb)(
    int unit, uint32 flags, const dnx_pfc_generic_bmp_t *profile_data, int old_profile, const void *extra_arguments, int *new_profile, uint8 *first_reference, uint8 *last_reference);

/**
 * implemented by: flow_control_db_fc_generic_bmp_replace_data
 */
typedef int (*flow_control_db_fc_generic_bmp_replace_data_cb)(
    int unit, int profile,  const dnx_pfc_generic_bmp_t *new_profile_data);

/**
 * implemented by: flow_control_db_fc_generic_bmp_profile_data_get
 */
typedef int (*flow_control_db_fc_generic_bmp_profile_data_get_cb)(
    int unit, int profile, int *ref_count, dnx_pfc_generic_bmp_t *profile_data);

/**
 * implemented by: flow_control_db_fc_generic_bmp_profile_get
 */
typedef int (*flow_control_db_fc_generic_bmp_profile_get_cb)(
    int unit, const dnx_pfc_generic_bmp_t *profile_data, int *profile);

/**
 * implemented by: flow_control_db_fc_generic_bmp_free_all
 */
typedef int (*flow_control_db_fc_generic_bmp_free_all_cb)(
    int unit, int profile);

/**
 * implemented by: flow_control_db_pfc_deadlock_recovery_enabled_set
 */
typedef int (*flow_control_db_pfc_deadlock_recovery_enabled_set_cb)(
    int unit, uint32 enabled_idx_0, int enabled);

/**
 * implemented by: flow_control_db_pfc_deadlock_recovery_enabled_get
 */
typedef int (*flow_control_db_pfc_deadlock_recovery_enabled_get_cb)(
    int unit, uint32 enabled_idx_0, int *enabled);

/**
 * implemented by: flow_control_db_pfc_deadlock_recovery_action_set
 */
typedef int (*flow_control_db_pfc_deadlock_recovery_action_set_cb)(
    int unit, int action);

/**
 * implemented by: flow_control_db_pfc_deadlock_recovery_action_get
 */
typedef int (*flow_control_db_pfc_deadlock_recovery_action_get_cb)(
    int unit, int *action);

/**
 * implemented by: flow_control_db_pfc_deadlock_recovery_detection_timer_granularity_set
 */
typedef int (*flow_control_db_pfc_deadlock_recovery_detection_timer_granularity_set_cb)(
    int unit, int detection_timer_granularity);

/**
 * implemented by: flow_control_db_pfc_deadlock_recovery_detection_timer_granularity_get
 */
typedef int (*flow_control_db_pfc_deadlock_recovery_detection_timer_granularity_get_cb)(
    int unit, int *detection_timer_granularity);

/**
 * implemented by: flow_control_db_pfc_deadlock_recovery_timer_set
 */
typedef int (*flow_control_db_pfc_deadlock_recovery_timer_set_cb)(
    int unit, uint32 timer_idx_0, uint32 timer_idx_1, int timer);

/**
 * implemented by: flow_control_db_pfc_deadlock_recovery_timer_get
 */
typedef int (*flow_control_db_pfc_deadlock_recovery_timer_get_cb)(
    int unit, uint32 timer_idx_0, uint32 timer_idx_1, int *timer);

/**
 * implemented by: flow_control_db_pfc_deadlock_recovery_data_set
 */
typedef int (*flow_control_db_pfc_deadlock_recovery_data_set_cb)(
    int unit, pfc_deadlock_recovery_userdata_t data);

/**
 * implemented by: flow_control_db_pfc_deadlock_recovery_data_get
 */
typedef int (*flow_control_db_pfc_deadlock_recovery_data_get_cb)(
    int unit, pfc_deadlock_recovery_userdata_t *data);

/**
 * implemented by: flow_control_db_pfc_deadlock_recovery_occurances_set
 */
typedef int (*flow_control_db_pfc_deadlock_recovery_occurances_set_cb)(
    int unit, uint32 occurances_idx_0, uint32 occurances_idx_1, int occurances);

/**
 * implemented by: flow_control_db_pfc_deadlock_recovery_occurances_get
 */
typedef int (*flow_control_db_pfc_deadlock_recovery_occurances_get_cb)(
    int unit, uint32 occurances_idx_0, uint32 occurances_idx_1, int *occurances);

/**
 * implemented by: flow_control_db_pfc_deadlock_recovery_event_handle_set
 */
typedef int (*flow_control_db_pfc_deadlock_recovery_event_handle_set_cb)(
    int unit, periodic_event_handler_t event_handle);

/**
 * implemented by: flow_control_db_pfc_deadlock_recovery_event_handle_get
 */
typedef int (*flow_control_db_pfc_deadlock_recovery_event_handle_get_cb)(
    int unit, periodic_event_handler_t *event_handle);

/*
 * STRUCTs
 */

/**
 * This structure holds the access functions for the variable fc_generic_bmp
 */
typedef struct {
    flow_control_db_fc_generic_bmp_set_cb set;
    flow_control_db_fc_generic_bmp_get_cb get;
    flow_control_db_fc_generic_bmp_create_cb create;
    flow_control_db_fc_generic_bmp_allocate_single_cb allocate_single;
    flow_control_db_fc_generic_bmp_free_single_cb free_single;
    flow_control_db_fc_generic_bmp_exchange_cb exchange;
    flow_control_db_fc_generic_bmp_replace_data_cb replace_data;
    flow_control_db_fc_generic_bmp_profile_data_get_cb profile_data_get;
    flow_control_db_fc_generic_bmp_profile_get_cb profile_get;
    flow_control_db_fc_generic_bmp_free_all_cb free_all;
} flow_control_db_fc_generic_bmp_cbs;

/**
 * This structure holds the access functions for the variable enabled
 */
typedef struct {
    flow_control_db_pfc_deadlock_recovery_enabled_set_cb set;
    flow_control_db_pfc_deadlock_recovery_enabled_get_cb get;
} flow_control_db_pfc_deadlock_recovery_enabled_cbs;

/**
 * This structure holds the access functions for the variable action
 */
typedef struct {
    flow_control_db_pfc_deadlock_recovery_action_set_cb set;
    flow_control_db_pfc_deadlock_recovery_action_get_cb get;
} flow_control_db_pfc_deadlock_recovery_action_cbs;

/**
 * This structure holds the access functions for the variable detection_timer_granularity
 */
typedef struct {
    flow_control_db_pfc_deadlock_recovery_detection_timer_granularity_set_cb set;
    flow_control_db_pfc_deadlock_recovery_detection_timer_granularity_get_cb get;
} flow_control_db_pfc_deadlock_recovery_detection_timer_granularity_cbs;

/**
 * This structure holds the access functions for the variable timer
 */
typedef struct {
    flow_control_db_pfc_deadlock_recovery_timer_set_cb set;
    flow_control_db_pfc_deadlock_recovery_timer_get_cb get;
} flow_control_db_pfc_deadlock_recovery_timer_cbs;

/**
 * This structure holds the access functions for the variable data
 */
typedef struct {
    flow_control_db_pfc_deadlock_recovery_data_set_cb set;
    flow_control_db_pfc_deadlock_recovery_data_get_cb get;
} flow_control_db_pfc_deadlock_recovery_data_cbs;

/**
 * This structure holds the access functions for the variable occurances
 */
typedef struct {
    flow_control_db_pfc_deadlock_recovery_occurances_set_cb set;
    flow_control_db_pfc_deadlock_recovery_occurances_get_cb get;
} flow_control_db_pfc_deadlock_recovery_occurances_cbs;

/**
 * This structure holds the access functions for the variable event_handle
 */
typedef struct {
    flow_control_db_pfc_deadlock_recovery_event_handle_set_cb set;
    flow_control_db_pfc_deadlock_recovery_event_handle_get_cb get;
} flow_control_db_pfc_deadlock_recovery_event_handle_cbs;

/**
 * This structure holds the access functions for the variable pfc_deadlock_recovery_t
 */
typedef struct {
    /**
     * Access struct for enabled
     */
    flow_control_db_pfc_deadlock_recovery_enabled_cbs enabled;
    /**
     * Access struct for action
     */
    flow_control_db_pfc_deadlock_recovery_action_cbs action;
    /**
     * Access struct for detection_timer_granularity
     */
    flow_control_db_pfc_deadlock_recovery_detection_timer_granularity_cbs detection_timer_granularity;
    /**
     * Access struct for timer
     */
    flow_control_db_pfc_deadlock_recovery_timer_cbs timer;
    /**
     * Access struct for data
     */
    flow_control_db_pfc_deadlock_recovery_data_cbs data;
    /**
     * Access struct for occurances
     */
    flow_control_db_pfc_deadlock_recovery_occurances_cbs occurances;
    /**
     * Access struct for event_handle
     */
    flow_control_db_pfc_deadlock_recovery_event_handle_cbs event_handle;
} flow_control_db_pfc_deadlock_recovery_cbs;

/**
 * This structure holds the access functions for the variable flow_control_sw_state_t
 */
typedef struct {
    flow_control_db_is_init_cb is_init;
    flow_control_db_init_cb init;
    /**
     * Access struct for fc_generic_bmp
     */
    flow_control_db_fc_generic_bmp_cbs fc_generic_bmp;
    /**
     * Access struct for pfc_deadlock_recovery
     */
    flow_control_db_pfc_deadlock_recovery_cbs pfc_deadlock_recovery;
} flow_control_db_cbs;

/*
 * Global Variables
 */

/*
 * Global Variables
 */

extern flow_control_db_cbs flow_control_db;

#endif /* __FLOW_CONTROL_ACCESS_H__ */
