/** \file algo/swstate/auto_generated/access/algo_l3_access.h
 *
 * sw state functions declarations
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef __ALGO_L3_ACCESS_H__
#define __ALGO_L3_ACCESS_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/swstate/auto_generated/types/algo_l3_types.h>
#include <bcm_int/dnx/algo/l3/source_address_table_allocation.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr_internal.h>
#include <bcm_int/dnx/l3/l3_ecmp.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_l3.h>
#include <bcm_int/dnx/algo/swstate/auto_generated/types/algo_consistent_hashing_types.h>
/*
 * TYPEDEFs
 */

/**
 * implemented by: algo_l3_db_is_init
 */
typedef int (*algo_l3_db_is_init_cb)(
    int unit, uint8 *is_init);

/**
 * implemented by: algo_l3_db_init
 */
typedef int (*algo_l3_db_init_cb)(
    int unit);

/**
 * implemented by: algo_l3_db_source_address_table_allocation_egress_source_address_table_set
 */
typedef int (*algo_l3_db_source_address_table_allocation_egress_source_address_table_set_cb)(
    int unit, dnx_algo_template_t egress_source_address_table);

/**
 * implemented by: algo_l3_db_source_address_table_allocation_egress_source_address_table_get
 */
typedef int (*algo_l3_db_source_address_table_allocation_egress_source_address_table_get_cb)(
    int unit, dnx_algo_template_t *egress_source_address_table);

/**
 * implemented by: algo_l3_db_source_address_table_allocation_egress_source_address_table_create
 */
typedef int (*algo_l3_db_source_address_table_allocation_egress_source_address_table_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_l3_db_source_address_table_allocation_egress_source_address_table_allocate_single
 */
typedef int (*algo_l3_db_source_address_table_allocation_egress_source_address_table_allocate_single_cb)(
    int unit, uint32 flags, source_address_entry_t *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

/**
 * implemented by: algo_l3_db_source_address_table_allocation_egress_source_address_table_free_single
 */
typedef int (*algo_l3_db_source_address_table_allocation_egress_source_address_table_free_single_cb)(
    int unit, int profile, uint8 *last_reference);

/**
 * implemented by: algo_l3_db_source_address_table_allocation_egress_source_address_table_exchange
 */
typedef int (*algo_l3_db_source_address_table_allocation_egress_source_address_table_exchange_cb)(
    int unit, uint32 flags, const source_address_entry_t *profile_data, int old_profile, const void *extra_arguments, int *new_profile, uint8 *first_reference, uint8 *last_reference);

/**
 * implemented by: algo_l3_db_source_address_table_allocation_egress_source_address_table_profile_data_get
 */
typedef int (*algo_l3_db_source_address_table_allocation_egress_source_address_table_profile_data_get_cb)(
    int unit, int profile, int *ref_count, source_address_entry_t *profile_data);

/**
 * implemented by: algo_l3_db_source_address_table_allocation_egress_source_address_table_get_next
 */
typedef int (*algo_l3_db_source_address_table_allocation_egress_source_address_table_get_next_cb)(
    int unit, int *current_profile);

/**
 * implemented by: algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_set
 */
typedef int (*algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_set_cb)(
    int unit, uint32 sub_resource_id, dnx_algo_res_t fec_res_manager);

/**
 * implemented by: algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_get
 */
typedef int (*algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_get_cb)(
    int unit, uint32 sub_resource_id, dnx_algo_res_t *fec_res_manager);

/**
 * implemented by: algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_alloc
 */
typedef int (*algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0);

/**
 * implemented by: algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_create
 */
typedef int (*algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_create_cb)(
    int unit, uint32 sub_resource_id, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_allocate_single
 */
typedef int (*algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_allocate_single_cb)(
    int unit, uint32 sub_resource_id, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_free_single
 */
typedef int (*algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_free_single_cb)(
    int unit, uint32 sub_resource_id, int element);

/**
 * implemented by: algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_is_allocated
 */
typedef int (*algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_is_allocated_cb)(
    int unit, uint32 sub_resource_id, int element, uint8 *is_allocated);

/**
 * implemented by: algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_nof_free_elements_get
 */
typedef int (*algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_nof_free_elements_get_cb)(
    int unit, uint32 sub_resource_id, int *nof_free_elements);

/**
 * implemented by: algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_get_next
 */
typedef int (*algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_get_next_cb)(
    int unit, uint32 sub_resource_id, int *element);

/**
 * implemented by: algo_l3_db_fec_alloc_fec_resource_type_set
 */
typedef int (*algo_l3_db_fec_alloc_fec_resource_type_set_cb)(
    int unit, uint32 fec_resource_type_idx_0, uint32 fec_resource_type_idx_1, uint32 fec_resource_type);

/**
 * implemented by: algo_l3_db_fec_alloc_fec_resource_type_get
 */
typedef int (*algo_l3_db_fec_alloc_fec_resource_type_get_cb)(
    int unit, uint32 fec_resource_type_idx_0, uint32 fec_resource_type_idx_1, uint32 *fec_resource_type);

/**
 * implemented by: algo_l3_db_fec_alloc_fec_resource_type_alloc
 */
typedef int (*algo_l3_db_fec_alloc_fec_resource_type_alloc_cb)(
    int unit);

/**
 * implemented by: algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_set
 */
typedef int (*algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_set_cb)(
    int unit, dnx_algo_res_t egr_pointed_res_manager);

/**
 * implemented by: algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_get
 */
typedef int (*algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_get_cb)(
    int unit, dnx_algo_res_t *egr_pointed_res_manager);

/**
 * implemented by: algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_create
 */
typedef int (*algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_create_cb)(
    int unit, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_allocate_single
 */
typedef int (*algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_allocate_single_cb)(
    int unit, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_free_single
 */
typedef int (*algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_free_single_cb)(
    int unit, int element);

/**
 * implemented by: algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_is_allocated
 */
typedef int (*algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_is_allocated_cb)(
    int unit, int element, uint8 *is_allocated);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_consistent_manager_set
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_consistent_manager_set_cb)(
    int unit, dnx_algo_template_t ecmp_consistent_manager);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_consistent_manager_get
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_consistent_manager_get_cb)(
    int unit, dnx_algo_template_t *ecmp_consistent_manager);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_consistent_manager_create
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_consistent_manager_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_consistent_manager_allocate_single
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_consistent_manager_allocate_single_cb)(
    int unit, uint32 flags, dnx_algo_consistent_hashing_manager_template_manager_key_t *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_consistent_manager_free_single
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_consistent_manager_free_single_cb)(
    int unit, int profile, uint8 *last_reference);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_consistent_manager_exchange
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_consistent_manager_exchange_cb)(
    int unit, uint32 flags, const dnx_algo_consistent_hashing_manager_template_manager_key_t *profile_data, int old_profile, const void *extra_arguments, int *new_profile, uint8 *first_reference, uint8 *last_reference);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_consistent_manager_profile_data_get
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_consistent_manager_profile_data_get_cb)(
    int unit, int profile, int *ref_count, dnx_algo_consistent_hashing_manager_template_manager_key_t *profile_data);

/**
 * implemented by: algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_set
 */
typedef int (*algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_set_cb)(
    int unit, dnx_algo_template_t vrrp_vsi_tcam_table);

/**
 * implemented by: algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_get
 */
typedef int (*algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_get_cb)(
    int unit, dnx_algo_template_t *vrrp_vsi_tcam_table);

/**
 * implemented by: algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_create
 */
typedef int (*algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_allocate_single
 */
typedef int (*algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_allocate_single_cb)(
    int unit, uint32 flags, algo_dnx_l3_vrrp_tcam_key_t *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

/**
 * implemented by: algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_free_single
 */
typedef int (*algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_free_single_cb)(
    int unit, int profile, uint8 *last_reference);

/**
 * implemented by: algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_profile_data_get
 */
typedef int (*algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_profile_data_get_cb)(
    int unit, int profile, int *ref_count, algo_dnx_l3_vrrp_tcam_key_t *profile_data);

/**
 * implemented by: algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_profile_get
 */
typedef int (*algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_profile_get_cb)(
    int unit, const algo_dnx_l3_vrrp_tcam_key_t *profile_data, int *profile);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_set
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_set_cb)(
    int unit, uint32 ecmp_profile_hier_table_idx_0, dnx_algo_template_t ecmp_profile_hier_table);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_get
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_get_cb)(
    int unit, uint32 ecmp_profile_hier_table_idx_0, dnx_algo_template_t *ecmp_profile_hier_table);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_alloc
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_alloc_cb)(
    int unit);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_create
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_create_cb)(
    int unit, uint32 ecmp_profile_hier_table_idx_0, dnx_algo_template_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_allocate_single
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_allocate_single_cb)(
    int unit, uint32 ecmp_profile_hier_table_idx_0, uint32 flags, dnx_l3_ecmp_profile_t *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_free_single
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_free_single_cb)(
    int unit, uint32 ecmp_profile_hier_table_idx_0, int profile, uint8 *last_reference);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_profile_data_get
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_profile_data_get_cb)(
    int unit, uint32 ecmp_profile_hier_table_idx_0, int profile, int *ref_count, dnx_l3_ecmp_profile_t *profile_data);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_get_next
 */
typedef int (*algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_get_next_cb)(
    int unit, uint32 ecmp_profile_hier_table_idx_0, int *current_profile);

/**
 * implemented by: algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_set
 */
typedef int (*algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_set_cb)(
    int unit, dnx_algo_template_t vrrp_exem_tcam_table);

/**
 * implemented by: algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_get
 */
typedef int (*algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_get_cb)(
    int unit, dnx_algo_template_t *vrrp_exem_tcam_table);

/**
 * implemented by: algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_create
 */
typedef int (*algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_allocate_single
 */
typedef int (*algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_allocate_single_cb)(
    int unit, uint32 flags, algo_dnx_l3_vrrp_tcam_key_t *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

/**
 * implemented by: algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_free_single
 */
typedef int (*algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_free_single_cb)(
    int unit, int profile, uint8 *last_reference);

/**
 * implemented by: algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_profile_get
 */
typedef int (*algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_profile_get_cb)(
    int unit, const algo_dnx_l3_vrrp_tcam_key_t *profile_data, int *profile);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_set
 */
typedef int (*algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_set_cb)(
    int unit, dnx_algo_template_t ingress_mymac_prefix_table);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_get
 */
typedef int (*algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_get_cb)(
    int unit, dnx_algo_template_t *ingress_mymac_prefix_table);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_create
 */
typedef int (*algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_allocate_single
 */
typedef int (*algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_allocate_single_cb)(
    int unit, uint32 flags, uint8 *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_free_single
 */
typedef int (*algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_free_single_cb)(
    int unit, int profile, uint8 *last_reference);

/**
 * implemented by: algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_profile_data_get
 */
typedef int (*algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_profile_data_get_cb)(
    int unit, int profile, int *ref_count, uint8 *profile_data);

/**
 * implemented by: algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_set
 */
typedef int (*algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_set_cb)(
    int unit, dnx_algo_res_t res_bitmap);

/**
 * implemented by: algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_get
 */
typedef int (*algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_get_cb)(
    int unit, dnx_algo_res_t *res_bitmap);

/**
 * implemented by: algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_create
 */
typedef int (*algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_create_cb)(
    int unit, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_allocate_single
 */
typedef int (*algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_allocate_single_cb)(
    int unit, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_free_single
 */
typedef int (*algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_free_single_cb)(
    int unit, int element);

/**
 * implemented by: algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_is_allocated
 */
typedef int (*algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_is_allocated_cb)(
    int unit, int element, uint8 *is_allocated);

/**
 * implemented by: algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_nof_free_elements_get
 */
typedef int (*algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_nof_free_elements_get_cb)(
    int unit, int *nof_free_elements);

/**
 * implemented by: algo_l3_db_rif_alloc_rif_res_manager_set
 */
typedef int (*algo_l3_db_rif_alloc_rif_res_manager_set_cb)(
    int unit, dnx_algo_res_t rif_res_manager);

/**
 * implemented by: algo_l3_db_rif_alloc_rif_res_manager_get
 */
typedef int (*algo_l3_db_rif_alloc_rif_res_manager_get_cb)(
    int unit, dnx_algo_res_t *rif_res_manager);

/**
 * implemented by: algo_l3_db_rif_alloc_rif_res_manager_create
 */
typedef int (*algo_l3_db_rif_alloc_rif_res_manager_create_cb)(
    int unit, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_l3_db_rif_alloc_rif_res_manager_allocate_single
 */
typedef int (*algo_l3_db_rif_alloc_rif_res_manager_allocate_single_cb)(
    int unit, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: algo_l3_db_rif_alloc_rif_res_manager_allocate_several
 */
typedef int (*algo_l3_db_rif_alloc_rif_res_manager_allocate_several_cb)(
    int unit, uint32 flags, uint32 nof_elements, void *extra_arguments, int *element);

/**
 * implemented by: algo_l3_db_rif_alloc_rif_res_manager_free_single
 */
typedef int (*algo_l3_db_rif_alloc_rif_res_manager_free_single_cb)(
    int unit, int element);

/**
 * implemented by: algo_l3_db_rif_alloc_rif_res_manager_free_several
 */
typedef int (*algo_l3_db_rif_alloc_rif_res_manager_free_several_cb)(
    int unit, uint32 nof_elements, int element);

/**
 * implemented by: algo_l3_db_rif_alloc_rif_res_manager_is_allocated
 */
typedef int (*algo_l3_db_rif_alloc_rif_res_manager_is_allocated_cb)(
    int unit, int element, uint8 *is_allocated);

/**
 * implemented by: algo_l3_db_rif_alloc_rif_res_manager_clear
 */
typedef int (*algo_l3_db_rif_alloc_rif_res_manager_clear_cb)(
    int unit);

/**
 * implemented by: algo_l3_db_rif_alloc_rif_res_manager_nof_free_elements_get
 */
typedef int (*algo_l3_db_rif_alloc_rif_res_manager_nof_free_elements_get_cb)(
    int unit, int *nof_free_elements);

/**
 * implemented by: algo_l3_db_rif_alloc_rif_res_manager_get_next
 */
typedef int (*algo_l3_db_rif_alloc_rif_res_manager_get_next_cb)(
    int unit, int *element);

/**
 * implemented by: algo_l3_db_rif_alloc_rif_res_manager_dump_info_get
 */
typedef int (*algo_l3_db_rif_alloc_rif_res_manager_dump_info_get_cb)(
    int unit, dnx_algo_res_dump_data_t * info);

/**
 * implemented by: algo_l3_db_rif_alloc_rif_res_manager_nof_allocated_elements_in_range_get
 */
typedef int (*algo_l3_db_rif_alloc_rif_res_manager_nof_allocated_elements_in_range_get_cb)(
    int unit, int range_start, int nof_elements_in_range, int *nof_allocated_elements);

/**
 * implemented by: algo_l3_db_tp_modes_alloc
 */
typedef int (*algo_l3_db_tp_modes_alloc_cb)(
    int unit);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_set
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_set_cb)(
    int unit, uint32 tp_modes_idx_0, dnx_algo_res_t l3_ecmp_tunnel_priority_modes_res_mngr);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_get
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_get_cb)(
    int unit, uint32 tp_modes_idx_0, dnx_algo_res_t *l3_ecmp_tunnel_priority_modes_res_mngr);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_create
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_create_cb)(
    int unit, uint32 tp_modes_idx_0, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_allocate_single
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_allocate_single_cb)(
    int unit, uint32 tp_modes_idx_0, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_allocate_several
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_allocate_several_cb)(
    int unit, uint32 tp_modes_idx_0, uint32 flags, uint32 nof_elements, void *extra_arguments, int *element);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_free_single
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_free_single_cb)(
    int unit, uint32 tp_modes_idx_0, int element);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_free_several
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_free_several_cb)(
    int unit, uint32 tp_modes_idx_0, uint32 nof_elements, int element);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_is_allocated
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_is_allocated_cb)(
    int unit, uint32 tp_modes_idx_0, int element, uint8 *is_allocated);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_clear
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_clear_cb)(
    int unit, uint32 tp_modes_idx_0);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_nof_free_elements_get
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_nof_free_elements_get_cb)(
    int unit, uint32 tp_modes_idx_0, int *nof_free_elements);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_get_next
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_get_next_cb)(
    int unit, uint32 tp_modes_idx_0, int *element);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_dump_info_get
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_dump_info_get_cb)(
    int unit, uint32 tp_modes_idx_0, dnx_algo_res_dump_data_t * info);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_nof_allocated_elements_in_range_get
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_nof_allocated_elements_in_range_get_cb)(
    int unit, uint32 tp_modes_idx_0, int range_start, int nof_elements_in_range, int *nof_allocated_elements);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_advanced_algorithm_info_set
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_advanced_algorithm_info_set_cb)(
    int unit, uint32 tp_modes_idx_0, void *algorithm_info);

/**
 * implemented by: algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_advanced_algorithm_info_get
 */
typedef int (*algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_advanced_algorithm_info_get_cb)(
    int unit, uint32 tp_modes_idx_0, void *algorithm_info);

/**
 * implemented by: algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_set
 */
typedef int (*algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_set_cb)(
    int unit, dnx_algo_res_t vip_ecmp_res_manager);

/**
 * implemented by: algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_get
 */
typedef int (*algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_get_cb)(
    int unit, dnx_algo_res_t *vip_ecmp_res_manager);

/**
 * implemented by: algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_create
 */
typedef int (*algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_create_cb)(
    int unit, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_allocate_single
 */
typedef int (*algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_allocate_single_cb)(
    int unit, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_free_single
 */
typedef int (*algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_free_single_cb)(
    int unit, int element);

/**
 * implemented by: algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_is_allocated
 */
typedef int (*algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_is_allocated_cb)(
    int unit, int element, uint8 *is_allocated);

/**
 * implemented by: algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_nof_free_elements_get
 */
typedef int (*algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_nof_free_elements_get_cb)(
    int unit, int *nof_free_elements);

/*
 * STRUCTs
 */

/**
 * This structure holds the access functions for the variable egress_source_address_table
 */
typedef struct {
    algo_l3_db_source_address_table_allocation_egress_source_address_table_set_cb set;
    algo_l3_db_source_address_table_allocation_egress_source_address_table_get_cb get;
    algo_l3_db_source_address_table_allocation_egress_source_address_table_create_cb create;
    algo_l3_db_source_address_table_allocation_egress_source_address_table_allocate_single_cb allocate_single;
    algo_l3_db_source_address_table_allocation_egress_source_address_table_free_single_cb free_single;
    algo_l3_db_source_address_table_allocation_egress_source_address_table_exchange_cb exchange;
    algo_l3_db_source_address_table_allocation_egress_source_address_table_profile_data_get_cb profile_data_get;
    algo_l3_db_source_address_table_allocation_egress_source_address_table_get_next_cb get_next;
} algo_l3_db_source_address_table_allocation_egress_source_address_table_cbs;

/**
 * This structure holds the access functions for the variable source_address_table_allocation_t
 */
typedef struct {
    /**
     * Access struct for egress_source_address_table
     */
    algo_l3_db_source_address_table_allocation_egress_source_address_table_cbs egress_source_address_table;
} algo_l3_db_source_address_table_allocation_cbs;

/**
 * This structure holds the access functions for the variable fec_res_manager
 */
typedef struct {
    algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_set_cb set;
    algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_get_cb get;
    algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_alloc_cb alloc;
    algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_create_cb create;
    algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_allocate_single_cb allocate_single;
    algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_free_single_cb free_single;
    algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_is_allocated_cb is_allocated;
    algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_nof_free_elements_get_cb nof_free_elements_get;
    algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_get_next_cb get_next;
} algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_cbs;

/**
 * This structure holds the access functions for the variable l3_fec_res_t
 */
typedef struct {
    /**
     * Access struct for fec_res_manager
     */
    algo_l3_db_fec_alloc_l3_fec_res_mngr_fec_res_manager_cbs fec_res_manager;
} algo_l3_db_fec_alloc_l3_fec_res_mngr_cbs;

/**
 * This structure holds the access functions for the variable fec_resource_type
 */
typedef struct {
    algo_l3_db_fec_alloc_fec_resource_type_set_cb set;
    algo_l3_db_fec_alloc_fec_resource_type_get_cb get;
    algo_l3_db_fec_alloc_fec_resource_type_alloc_cb alloc;
} algo_l3_db_fec_alloc_fec_resource_type_cbs;

/**
 * This structure holds the access functions for the variable l3_fec_alloc_t
 */
typedef struct {
    /**
     * Access struct for l3_fec_res_mngr
     */
    algo_l3_db_fec_alloc_l3_fec_res_mngr_cbs l3_fec_res_mngr;
    /**
     * Access struct for fec_resource_type
     */
    algo_l3_db_fec_alloc_fec_resource_type_cbs fec_resource_type;
} algo_l3_db_fec_alloc_cbs;

/**
 * This structure holds the access functions for the variable egr_pointed_res_manager
 */
typedef struct {
    algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_set_cb set;
    algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_get_cb get;
    algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_create_cb create;
    algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_allocate_single_cb allocate_single;
    algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_free_single_cb free_single;
    algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_is_allocated_cb is_allocated;
} algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_cbs;

/**
 * This structure holds the access functions for the variable l3_egr_pointed_res_t
 */
typedef struct {
    /**
     * Access struct for egr_pointed_res_manager
     */
    algo_l3_db_egr_pointed_alloc_egr_pointed_res_manager_cbs egr_pointed_res_manager;
} algo_l3_db_egr_pointed_alloc_cbs;

/**
 * This structure holds the access functions for the variable ecmp_consistent_manager
 */
typedef struct {
    algo_l3_db_algo_l3_templates_ecmp_consistent_manager_set_cb set;
    algo_l3_db_algo_l3_templates_ecmp_consistent_manager_get_cb get;
    algo_l3_db_algo_l3_templates_ecmp_consistent_manager_create_cb create;
    algo_l3_db_algo_l3_templates_ecmp_consistent_manager_allocate_single_cb allocate_single;
    algo_l3_db_algo_l3_templates_ecmp_consistent_manager_free_single_cb free_single;
    algo_l3_db_algo_l3_templates_ecmp_consistent_manager_exchange_cb exchange;
    algo_l3_db_algo_l3_templates_ecmp_consistent_manager_profile_data_get_cb profile_data_get;
} algo_l3_db_algo_l3_templates_ecmp_consistent_manager_cbs;

/**
 * This structure holds the access functions for the variable vrrp_vsi_tcam_table
 */
typedef struct {
    algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_set_cb set;
    algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_get_cb get;
    algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_create_cb create;
    algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_allocate_single_cb allocate_single;
    algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_free_single_cb free_single;
    algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_profile_data_get_cb profile_data_get;
    algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_profile_get_cb profile_get;
} algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_cbs;

/**
 * This structure holds the access functions for the variable ecmp_profile_hier_table
 */
typedef struct {
    algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_set_cb set;
    algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_get_cb get;
    algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_alloc_cb alloc;
    algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_create_cb create;
    algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_allocate_single_cb allocate_single;
    algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_free_single_cb free_single;
    algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_profile_data_get_cb profile_data_get;
    algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_get_next_cb get_next;
} algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_cbs;

/**
 * This structure holds the access functions for the variable vrrp_exem_tcam_table
 */
typedef struct {
    algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_set_cb set;
    algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_get_cb get;
    algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_create_cb create;
    algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_allocate_single_cb allocate_single;
    algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_free_single_cb free_single;
    algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_profile_get_cb profile_get;
} algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_cbs;

/**
 * This structure holds the access functions for the variable ingress_mymac_prefix_table
 */
typedef struct {
    algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_set_cb set;
    algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_get_cb get;
    algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_create_cb create;
    algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_allocate_single_cb allocate_single;
    algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_free_single_cb free_single;
    algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_profile_data_get_cb profile_data_get;
} algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_cbs;

/**
 * This structure holds the access functions for the variable algo_l3_template_t
 */
typedef struct {
    /**
     * Access struct for ecmp_consistent_manager
     */
    algo_l3_db_algo_l3_templates_ecmp_consistent_manager_cbs ecmp_consistent_manager;
    /**
     * Access struct for vrrp_vsi_tcam_table
     */
    algo_l3_db_algo_l3_templates_vrrp_vsi_tcam_table_cbs vrrp_vsi_tcam_table;
    /**
     * Access struct for ecmp_profile_hier_table
     */
    algo_l3_db_algo_l3_templates_ecmp_profile_hier_table_cbs ecmp_profile_hier_table;
    /**
     * Access struct for vrrp_exem_tcam_table
     */
    algo_l3_db_algo_l3_templates_vrrp_exem_tcam_table_cbs vrrp_exem_tcam_table;
    /**
     * Access struct for ingress_mymac_prefix_table
     */
    algo_l3_db_algo_l3_templates_ingress_mymac_prefix_table_cbs ingress_mymac_prefix_table;
} algo_l3_db_algo_l3_templates_cbs;

/**
 * This structure holds the access functions for the variable res_bitmap
 */
typedef struct {
    algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_set_cb set;
    algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_get_cb get;
    algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_create_cb create;
    algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_allocate_single_cb allocate_single;
    algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_free_single_cb free_single;
    algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_is_allocated_cb is_allocated;
    algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_nof_free_elements_get_cb nof_free_elements_get;
} algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_cbs;

/**
 * This structure holds the access functions for the variable vrrp_exem_table_allocation_t
 */
typedef struct {
    /**
     * Access struct for res_bitmap
     */
    algo_l3_db_vrrp_exem_l2_station_id_alloc_res_bitmap_cbs res_bitmap;
} algo_l3_db_vrrp_exem_l2_station_id_alloc_cbs;

/**
 * This structure holds the access functions for the variable rif_res_manager
 */
typedef struct {
    algo_l3_db_rif_alloc_rif_res_manager_set_cb set;
    algo_l3_db_rif_alloc_rif_res_manager_get_cb get;
    algo_l3_db_rif_alloc_rif_res_manager_create_cb create;
    algo_l3_db_rif_alloc_rif_res_manager_allocate_single_cb allocate_single;
    algo_l3_db_rif_alloc_rif_res_manager_allocate_several_cb allocate_several;
    algo_l3_db_rif_alloc_rif_res_manager_free_single_cb free_single;
    algo_l3_db_rif_alloc_rif_res_manager_free_several_cb free_several;
    algo_l3_db_rif_alloc_rif_res_manager_is_allocated_cb is_allocated;
    algo_l3_db_rif_alloc_rif_res_manager_clear_cb clear;
    algo_l3_db_rif_alloc_rif_res_manager_nof_free_elements_get_cb nof_free_elements_get;
    algo_l3_db_rif_alloc_rif_res_manager_get_next_cb get_next;
    algo_l3_db_rif_alloc_rif_res_manager_dump_info_get_cb dump_info_get;
    algo_l3_db_rif_alloc_rif_res_manager_nof_allocated_elements_in_range_get_cb nof_allocated_elements_in_range_get;
} algo_l3_db_rif_alloc_rif_res_manager_cbs;

/**
 * This structure holds the access functions for the variable rif_t
 */
typedef struct {
    /**
     * Access struct for rif_res_manager
     */
    algo_l3_db_rif_alloc_rif_res_manager_cbs rif_res_manager;
} algo_l3_db_rif_alloc_cbs;

/**
 * This structure holds the access functions for the variable l3_ecmp_tunnel_priority_modes_res_mngr
 */
typedef struct {
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_set_cb set;
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_get_cb get;
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_create_cb create;
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_allocate_single_cb allocate_single;
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_allocate_several_cb allocate_several;
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_free_single_cb free_single;
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_free_several_cb free_several;
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_is_allocated_cb is_allocated;
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_clear_cb clear;
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_nof_free_elements_get_cb nof_free_elements_get;
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_get_next_cb get_next;
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_dump_info_get_cb dump_info_get;
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_nof_allocated_elements_in_range_get_cb nof_allocated_elements_in_range_get;
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_advanced_algorithm_info_set_cb advanced_algorithm_info_set;
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_advanced_algorithm_info_get_cb advanced_algorithm_info_get;
} algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_cbs;

/**
 * This structure holds the access functions for the variable l3_ecmp_tunnel_priority_modes_t
 */
typedef struct {
    algo_l3_db_tp_modes_alloc_cb alloc;
    /**
     * Access struct for l3_ecmp_tunnel_priority_modes_res_mngr
     */
    algo_l3_db_tp_modes_l3_ecmp_tunnel_priority_modes_res_mngr_cbs l3_ecmp_tunnel_priority_modes_res_mngr;
} algo_l3_db_tp_modes_cbs;

/**
 * This structure holds the access functions for the variable vip_ecmp_res_manager
 */
typedef struct {
    algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_set_cb set;
    algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_get_cb get;
    algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_create_cb create;
    algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_allocate_single_cb allocate_single;
    algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_free_single_cb free_single;
    algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_is_allocated_cb is_allocated;
    algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_nof_free_elements_get_cb nof_free_elements_get;
} algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_cbs;

/**
 * This structure holds the access functions for the variable vip_ecmp_t
 */
typedef struct {
    /**
     * Access struct for vip_ecmp_res_manager
     */
    algo_l3_db_vip_ecmp_alloc_vip_ecmp_res_manager_cbs vip_ecmp_res_manager;
} algo_l3_db_vip_ecmp_alloc_cbs;

/**
 * This structure holds the access functions for the variable algo_l3_sw_state_t
 */
typedef struct {
    algo_l3_db_is_init_cb is_init;
    algo_l3_db_init_cb init;
    /**
     * Access struct for source_address_table_allocation
     */
    algo_l3_db_source_address_table_allocation_cbs source_address_table_allocation;
    /**
     * Access struct for fec_alloc
     */
    algo_l3_db_fec_alloc_cbs fec_alloc;
    /**
     * Access struct for egr_pointed_alloc
     */
    algo_l3_db_egr_pointed_alloc_cbs egr_pointed_alloc;
    /**
     * Access struct for algo_l3_templates
     */
    algo_l3_db_algo_l3_templates_cbs algo_l3_templates;
    /**
     * Access struct for vrrp_exem_l2_station_id_alloc
     */
    algo_l3_db_vrrp_exem_l2_station_id_alloc_cbs vrrp_exem_l2_station_id_alloc;
    /**
     * Access struct for rif_alloc
     */
    algo_l3_db_rif_alloc_cbs rif_alloc;
    /**
     * Access struct for tp_modes
     */
    algo_l3_db_tp_modes_cbs tp_modes;
    /**
     * Access struct for vip_ecmp_alloc
     */
    algo_l3_db_vip_ecmp_alloc_cbs vip_ecmp_alloc;
} algo_l3_db_cbs;

/*
 * Global Variables
 */

/*
 * Global Variables
 */

extern algo_l3_db_cbs algo_l3_db;

#endif /* __ALGO_L3_ACCESS_H__ */
