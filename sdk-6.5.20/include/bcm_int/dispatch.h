/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *
 * File:	dispatch.h
 * Purpose:	dispatch table definition
 * Generator:	mkdispatch 1.54
 */

#ifndef	_BCM_INT_DISPATCH_H
#define	_BCM_INT_DISPATCH_H

#include <bcm/types.h>
#include <bcm/auth.h>
#include <bcm/bfd.h>
#include <bcm/bregex.h>
#include <bcm/collector.h>
#include <bcm/cosq.h>
#include <bcm/cpri.h>
#include <bcm/custom.h>
#include <bcm/eav.h>
#include <bcm/ecn.h>
#include <bcm/error.h>
#include <bcm/extender.h>
#include <bcm/fabric.h>
#include <bcm/failover.h>
#include <bcm/fcmap.h>
#include <bcm/fcoe.h>
#include <bcm/field.h>
#include <bcm/flexctr.h>
#include <bcm/flexdigest.h>
#include <bcm/flexstate.h>
#include <bcm/flow.h>
#include <bcm/flowtracker.h>
#include <bcm/gdpll.h>
#include <bcm/hash.h>
#include <bcm/ifa.h>
#include <bcm/init.h>
#include <bcm/instru.h>
#include <bcm/int.h>
#include <bcm/ipfix.h>
#include <bcm/ipmc.h>
#include <bcm/ipsec.h>
#include <bcm/knet.h>
#include <bcm/l2.h>
#include <bcm/l2gre.h>
#include <bcm/l3.h>
#include <bcm/latency_monitor.h>
#include <bcm/lb.h>
#include <bcm/link.h>
#include <bcm/macsec.h>
#include <bcm/mcast.h>
#include <bcm/mim.h>
#include <bcm/mirror.h>
#include <bcm/mpls.h>
#include <bcm/multicast.h>
#include <bcm/nat.h>
#include <bcm/niv.h>
#include <bcm/oam.h>
#include <bcm/oob.h>
#include <bcm/pkt.h>
#include <bcm/pktio.h>
#include <bcm/policer.h>
#include <bcm/port.h>
#include <bcm/ppp.h>
#include <bcm/proxy.h>
#include <bcm/pstats.h>
#include <bcm/ptp.h>
#include <bcm/qos.h>
#include <bcm/range.h>
#include <bcm/rate.h>
#include <bcm/rx.h>
#include <bcm/sat.h>
#include <bcm/srv6.h>
#include <bcm/stack.h>
#include <bcm/stat.h>
#include <bcm/stg.h>
#include <bcm/subport.h>
#include <bcm/sum.h>
#include <bcm/switch.h>
#include <bcm/tdm.h>
#include <bcm/telemetry.h>
#include <bcm/time.h>
#include <bcm/topo.h>
#include <bcm/trill.h>
#include <bcm/trunk.h>
#include <bcm/tsn.h>
#include <bcm/tunnel.h>
#include <bcm/tx.h>
#include <bcm/txbeacon.h>
#include <bcm/udf.h>
#include <bcm/vlan.h>
#include <bcm/vswitch.h>
#include <bcm/vxlan.h>
#include <bcm/wlan.h>
#include <bcm/xflow_macsec.h>

typedef struct {
	char *name;
	int (*_attach)(int,char *);
	int (*_detach)(int);
	/* _bcm_shutdown not dispatchable */
	/* bcm_attach not dispatchable */
	/* bcm_attach_check not dispatchable */
	/* bcm_attach_early_txrx not dispatchable */
	/* bcm_attach_info_t_init not dispatchable */
	/* bcm_attach_max not dispatchable */
	/* bcm_attach_register not dispatchable */
	/* bcm_attach_unregister not dispatchable */
	int (*auth_detach)(int);
	int (*auth_egress_get)(int,int,int *);
	int (*auth_egress_set)(int,int,int);
	int (*auth_init)(int);
	int (*auth_mac_add)(int,int,bcm_mac_t);
	int (*auth_mac_control_get)(int,bcm_auth_mac_control_t,uint32 *);
	int (*auth_mac_control_set)(int,bcm_auth_mac_control_t,uint32);
	int (*auth_mac_delete)(int,int,bcm_mac_t);
	int (*auth_mac_delete_all)(int,int);
	int (*auth_mode_get)(int,int,uint32 *);
	int (*auth_mode_set)(int,int,uint32);
	int (*auth_unauth_callback)(int,bcm_auth_cb_t,void *);
#ifdef	INCLUDE_BFD
	int (*bfd_auth_sha1_get)(int,int,bcm_bfd_auth_sha1_t *);
	int (*bfd_auth_sha1_set)(int,int,bcm_bfd_auth_sha1_t *);
	int (*bfd_auth_simple_password_get)(int,int,bcm_bfd_auth_simple_password_t *);
	int (*bfd_auth_simple_password_set)(int,int,bcm_bfd_auth_simple_password_t *);
	int (*bfd_detach)(int);
	int (*bfd_discard_stat_get)(int,bcm_bfd_discard_stat_t *);
	int (*bfd_discard_stat_set)(int,bcm_bfd_discard_stat_t *);
	int (*bfd_endpoint_create)(int,bcm_bfd_endpoint_info_t *);
	int (*bfd_endpoint_destroy)(int,bcm_bfd_endpoint_t);
	int (*bfd_endpoint_destroy_all)(int);
	int (*bfd_endpoint_get)(int,bcm_bfd_endpoint_t,bcm_bfd_endpoint_info_t *);
	/* bcm_bfd_endpoint_info_t_init not dispatchable */
	int (*bfd_endpoint_poll)(int,bcm_bfd_endpoint_t);
	int (*bfd_endpoint_stat_get)(int,bcm_bfd_endpoint_t,bcm_bfd_endpoint_stat_t *,uint32);
	int (*bfd_event_register)(int,bcm_bfd_event_types_t,bcm_bfd_event_cb,void *);
	int (*bfd_event_unregister)(int,bcm_bfd_event_types_t,bcm_bfd_event_cb);
	int (*bfd_init)(int);
	int (*bfd_status_multi_get)(int,int,bcm_bfd_status_t *,int *);
	int (*bfd_tx_start)(int);
	int (*bfd_tx_stop)(int);
#endif	/* INCLUDE_BFD */
	int (*clear)(int);
	/* bcm_collector_callback_options_t_init not dispatchable */
	int (*collector_create)(int,uint32,bcm_collector_t *,bcm_collector_info_t *);
	int (*collector_destroy)(int,bcm_collector_t);
	int (*collector_detach)(int);
	int (*collector_export_profile_create)(int,uint32,int *,bcm_collector_export_profile_t *);
	int (*collector_export_profile_destroy)(int,int);
	int (*collector_export_profile_get)(int,int,bcm_collector_export_profile_t *);
	int (*collector_export_profile_ids_get_all)(int,int,int *,int *);
	/* bcm_collector_export_profile_t_init not dispatchable */
	int (*collector_export_record_register)(int,bcm_collector_t,bcm_collector_callback_options_t,bcm_collector_export_record_cb_f,void *);
	/* bcm_collector_export_record_t_init not dispatchable */
	int (*collector_export_record_unregister)(int,bcm_collector_t,bcm_collector_callback_options_t,bcm_collector_export_record_cb_f);
	int (*collector_get)(int,bcm_collector_t,bcm_collector_info_t *);
	int (*collector_get_all)(int,int,bcm_collector_t *,int *);
	/* bcm_collector_info_t_init not dispatchable */
	int (*collector_init)(int);
	int (*cosq_bandwidth_fabric_adjust_get)(int,uint32,bcm_cosq_bandwidth_fabric_adjust_key_t *,uint32 *);
	int (*cosq_bandwidth_fabric_adjust_set)(int,uint32,bcm_cosq_bandwidth_fabric_adjust_key_t *,uint32);
	int (*cosq_bst_multi_profile_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_bst_stat_id_t,int,bcm_cosq_bst_profile_t *,int *);
	int (*cosq_bst_multi_profile_set)(int,bcm_gport_t,bcm_cos_queue_t,bcm_bst_stat_id_t,int,bcm_cosq_bst_profile_t *);
	int (*cosq_bst_profile_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_bst_stat_id_t,bcm_cosq_bst_profile_t *);
	int (*cosq_bst_profile_set)(int,bcm_gport_t,bcm_cos_queue_t,bcm_bst_stat_id_t,bcm_cosq_bst_profile_t *);
	/* bcm_cosq_bst_profile_t_init not dispatchable */
	int (*cosq_bst_stat_clear)(int,bcm_gport_t,bcm_cos_queue_t,bcm_bst_stat_id_t);
	int (*cosq_bst_stat_extended_clear)(int,bcm_cosq_object_id_t *,bcm_bst_stat_id_t);
	int (*cosq_bst_stat_extended_get)(int,bcm_cosq_object_id_t *,bcm_bst_stat_id_t,uint32,uint64 *);
	int (*cosq_bst_stat_extended_get32)(int,bcm_cosq_object_id_t *,bcm_bst_stat_id_t,uint32,uint32 *);
	int (*cosq_bst_stat_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_bst_stat_id_t,uint32,uint64 *);
	int (*cosq_bst_stat_get32)(int,bcm_gport_t,bcm_cos_queue_t,bcm_bst_stat_id_t,uint32,uint32 *);
	int (*cosq_bst_stat_multi_get)(int,bcm_gport_t,bcm_cos_queue_t,uint32,int,bcm_bst_stat_id_t *,uint64 *);
	int (*cosq_bst_stat_multi_get32)(int,bcm_gport_t,bcm_cos_queue_t,uint32,int,bcm_bst_stat_id_t *,uint32 *);
	int (*cosq_bst_stat_sync)(int,bcm_bst_stat_id_t);
	int (*cosq_buffer_id_multi_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_dir_t,int,bcm_cosq_buffer_id_t *,int *);
	int (*cosq_burst_monitor_detach)(int);
	int (*cosq_burst_monitor_dma_config_get)(int,uint32 *,uint32 **);
	int (*cosq_burst_monitor_dma_config_set)(int,uint32,uint32 **);
	int (*cosq_burst_monitor_flow_view_config_get)(int,bcm_cosq_burst_monitor_flow_view_info_t *);
	int (*cosq_burst_monitor_flow_view_config_set)(int,uint32,bcm_cosq_burst_monitor_flow_view_info_t *);
	int (*cosq_burst_monitor_flow_view_data_clear)(int);
	int (*cosq_burst_monitor_flow_view_data_get)(int,uint32,uint8 *);
	int (*cosq_burst_monitor_flow_view_stats_get)(int,uint32,uint8 *,int,int,uint32,int *);
	int (*cosq_burst_monitor_get)(int,int,bcm_gport_t *,int *);
	int (*cosq_burst_monitor_get_current_time)(int,uint64 *);
	int (*cosq_burst_monitor_init)(int);
	int (*cosq_burst_monitor_set)(int,int,bcm_gport_t *);
	int (*cosq_burst_monitor_view_summary_get)(int,uint32,uint8 *,int,int *);
	int (*cosq_classifier_create)(int,bcm_cosq_classifier_t *,int *);
	int (*cosq_classifier_destroy)(int,int);
	int (*cosq_classifier_get)(int,int,bcm_cosq_classifier_t *);
	int (*cosq_classifier_id_get)(int,bcm_cosq_classifier_t *,int,bcm_cos_t *,bcm_cos_queue_t *,int *);
	int (*cosq_classifier_mapping_clear)(int,bcm_gport_t,int);
	int (*cosq_classifier_mapping_get)(int,bcm_gport_t,int,bcm_gport_t *,bcm_cos_t,bcm_cos_queue_t *);
	int (*cosq_classifier_mapping_multi_get)(int,bcm_gport_t,int,bcm_gport_t *,int,bcm_cos_t *,bcm_cos_queue_t *,int *);
	int (*cosq_classifier_mapping_multi_set)(int,bcm_gport_t,int,bcm_gport_t,int,bcm_cos_t *,bcm_cos_queue_t *);
	int (*cosq_classifier_mapping_set)(int,bcm_gport_t,int,bcm_gport_t,bcm_cos_t,bcm_cos_queue_t);
	/* bcm_cosq_classifier_t_init not dispatchable */
	int (*cosq_config_get)(int,int *);
	int (*cosq_config_set)(int,int);
	/* bcm_cosq_congestion_info_t_init not dispatchable */
	int (*cosq_congestion_mapping_get)(int,int,bcm_cosq_congestion_mapping_info_t *);
	/* bcm_cosq_congestion_mapping_info_t_init not dispatchable */
	int (*cosq_congestion_mapping_set)(int,int,bcm_cosq_congestion_mapping_info_t *);
	/* bcm_cosq_control_data_t_init not dispatchable */
	int (*cosq_control_dynamic_get)(int,bcm_cosq_control_t,bcm_cosq_dynamic_setting_type_t *);
	int (*cosq_control_extended_get)(int,bcm_cosq_object_id_t *,bcm_cosq_control_data_t *);
	int (*cosq_control_extended_set)(int,bcm_cosq_object_id_t *,bcm_cosq_control_data_t *);
	int (*cosq_control_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_control_t,int *);
	int (*cosq_control_range_get)(int,bcm_gport_t,uint32,bcm_cosq_control_range_type_t,bcm_cosq_range_t *);
	int (*cosq_control_range_set)(int,bcm_gport_t,uint32,bcm_cosq_control_range_type_t,bcm_cosq_range_t *);
	int (*cosq_control_set)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_control_t,int);
	int (*cosq_cpu_cosq_enable_get)(int,bcm_cos_queue_t,int *);
	int (*cosq_cpu_cosq_enable_set)(int,bcm_cos_queue_t,int);
	int (*cosq_debug_stat_match_get)(int,bcm_port_t,bcm_cosq_stat_t,bcm_cosq_debug_stat_match_t *);
	int (*cosq_debug_stat_match_set)(int,bcm_port_t,bcm_cosq_stat_t,bcm_cosq_debug_stat_match_t *);
	/* bcm_cosq_debug_stat_match_t_init not dispatchable */
	int (*cosq_delay_tolerance_level_get)(int,int,bcm_cosq_delay_tolerance_t *);
	int (*cosq_delay_tolerance_level_set)(int,int,bcm_cosq_delay_tolerance_t *);
	/* bcm_cosq_delay_tolerance_preset_attr_t_init not dispatchable */
	int (*cosq_delay_tolerance_preset_get)(int,bcm_cosq_delay_tolerance_preset_attr_t *,bcm_cosq_delay_tolerance_t *);
	int (*cosq_dest_credit_size_get)(int,bcm_module_t,uint32 *);
	int (*cosq_dest_credit_size_set)(int,bcm_module_t,uint32);
	int (*cosq_detach)(int);
	int (*cosq_discard_get)(int,uint32 *);
	int (*cosq_discard_port_get)(int,bcm_port_t,bcm_cos_queue_t,uint32,int *,int *,int *);
	int (*cosq_discard_port_set)(int,bcm_port_t,bcm_cos_queue_t,uint32,int,int,int);
	int (*cosq_discard_profile_create)(int,int *);
	int (*cosq_discard_profile_destroy)(int,int);
	int (*cosq_discard_profile_get)(int,int,int,bcm_cosq_discard_rule_t *,int *);
	int (*cosq_discard_profile_update)(int,int,bcm_cosq_discard_rule_t *);
	/* bcm_cosq_discard_rule_t_init not dispatchable */
	int (*cosq_discard_set)(int,uint32);
	int (*cosq_ebst_control_get)(int,bcm_cosq_ebst_control_t,int *);
	int (*cosq_ebst_control_set)(int,bcm_cosq_ebst_control_t,int);
	int (*cosq_ebst_data_get)(int,bcm_cosq_object_id_t *,bcm_bst_stat_id_t,int,bcm_cosq_ebst_data_entry_t *,int *);
	int (*cosq_ebst_data_stat_info_get)(int,bcm_cosq_object_id_t *,bcm_cosq_ebst_data_stat_info_t *);
	/* bcm_cosq_ebst_data_stat_info_t_init not dispatchable */
	int (*cosq_ebst_enable_get)(int,int *);
	int (*cosq_ebst_enable_set)(int,int);
	int (*cosq_ebst_monitor_get)(int,bcm_cosq_object_id_t *,bcm_bst_stat_id_t,bcm_cosq_ebst_monitor_t *);
	int (*cosq_ebst_monitor_set)(int,bcm_cosq_object_id_t *,bcm_bst_stat_id_t,bcm_cosq_ebst_monitor_t *);
	/* bcm_cosq_ebst_monitor_t_init not dispatchable */
	int (*cosq_ebst_threshold_profile_get)(int,bcm_cosq_object_id_t *,bcm_bst_stat_id_t,bcm_cosq_ebst_threshold_profile_t *);
	int (*cosq_ebst_threshold_profile_set)(int,bcm_cosq_object_id_t *,bcm_bst_stat_id_t,bcm_cosq_ebst_threshold_profile_t *);
	/* bcm_cosq_ebst_threshold_profile_t_init not dispatchable */
	int (*cosq_event_register)(int,bcm_cosq_event_types_t,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_event_cb,void *);
	int (*cosq_event_unregister)(int,bcm_cosq_event_types_t,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_event_cb);
	/* bcm_cosq_fadt_info_t_init not dispatchable */
	int (*cosq_fc_path_add)(int,bcm_cosq_fc_direction_type_t,bcm_cosq_fc_endpoint_t *,bcm_cosq_fc_endpoint_t *);
	int (*cosq_fc_path_delete)(int,bcm_cosq_fc_direction_type_t,bcm_cosq_fc_endpoint_t *,bcm_cosq_fc_endpoint_t *);
	int (*cosq_fc_path_get)(int,bcm_cosq_fc_direction_type_t,bcm_cosq_fc_endpoint_t *,int,bcm_cosq_fc_endpoint_t *,int *);
	int (*cosq_generic_control_get)(int,uint32,bcm_gport_t,uint32,bcm_cosq_generic_control_t,uint32 *);
	int (*cosq_generic_control_set)(int,uint32,bcm_gport_t,uint32,bcm_cosq_generic_control_t,uint32);
	int (*cosq_gport_add)(int,bcm_gport_t,int,uint32,bcm_gport_t *);
	int (*cosq_gport_attach)(int,bcm_gport_t,bcm_gport_t,bcm_cos_queue_t);
	int (*cosq_gport_attach_get)(int,bcm_gport_t,bcm_gport_t *,bcm_cos_queue_t *);
	int (*cosq_gport_bandwidth_get)(int,bcm_gport_t,bcm_cos_queue_t,uint32 *,uint32 *,uint32 *);
	int (*cosq_gport_bandwidth_set)(int,bcm_gport_t,bcm_cos_queue_t,uint32,uint32,uint32);
	int (*cosq_gport_child_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_gport_t *);
	int (*cosq_gport_color_size_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_color_t,uint32,bcm_cosq_gport_size_t *);
	int (*cosq_gport_color_size_set)(int,bcm_gport_t,bcm_cos_queue_t,bcm_color_t,uint32,bcm_cosq_gport_size_t *);
	int (*cosq_gport_congestion_config_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_congestion_info_t *);
	int (*cosq_gport_congestion_config_set)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_congestion_info_t *);
	int (*cosq_gport_connection_get)(int,bcm_cosq_gport_connection_t *);
	int (*cosq_gport_connection_set)(int,bcm_cosq_gport_connection_t *);
	int (*cosq_gport_delete)(int,bcm_gport_t);
	int (*cosq_gport_destmod_attach)(int,bcm_gport_t,bcm_port_t,bcm_module_t,int);
	int (*cosq_gport_destmod_detach)(int,bcm_gport_t,bcm_port_t,bcm_module_t,int);
	int (*cosq_gport_detach)(int,bcm_gport_t,bcm_gport_t,bcm_cos_queue_t);
	int (*cosq_gport_discard_extended_get)(int,bcm_cosq_object_id_t *,bcm_cosq_gport_discard_t *);
	int (*cosq_gport_discard_extended_set)(int,bcm_cosq_object_id_t *,bcm_cosq_gport_discard_t *);
	int (*cosq_gport_discard_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_gport_discard_t *);
	int (*cosq_gport_discard_set)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_gport_discard_t *);
	/* bcm_cosq_gport_discard_t_init not dispatchable */
	int (*cosq_gport_dynamic_sched_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_dynamic_state_t,int *);
	int (*cosq_gport_dynamic_sched_set)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_dynamic_state_t,int);
	int (*cosq_gport_egress_map_get)(int,bcm_gport_t,bcm_cos_t,bcm_color_t,bcm_cos_queue_t *);
	int (*cosq_gport_egress_map_set)(int,bcm_gport_t,bcm_cos_t,bcm_color_t,bcm_cos_queue_t);
	int (*cosq_gport_egress_mapping_get)(int,bcm_gport_t,bcm_cos_t *,bcm_cos_t *,uint32);
	int (*cosq_gport_egress_mapping_set)(int,bcm_gport_t,bcm_cos_t,bcm_cos_t,uint32);
	int (*cosq_gport_egress_multicast_config_get)(int,bcm_gport_t,bcm_cos_t,bcm_color_t,uint32,bcm_cosq_egress_multicast_config_t *);
	int (*cosq_gport_egress_multicast_config_set)(int,bcm_gport_t,bcm_cos_t,bcm_color_t,uint32,bcm_cosq_egress_multicast_config_t *);
	int (*cosq_gport_enable_get)(int,bcm_gport_t,bcm_cos_queue_t,int *);
	int (*cosq_gport_enable_set)(int,bcm_gport_t,bcm_cos_queue_t,int);
	int (*cosq_gport_fadt_threshold_get)(int,uint32,bcm_cosq_fadt_info_t *,bcm_cosq_fadt_threshold_t *);
	int (*cosq_gport_fadt_threshold_set)(int,uint32,bcm_cosq_fadt_info_t *,bcm_cosq_fadt_threshold_t *);
	int (*cosq_gport_flow_control_get)(int,bcm_gport_t,bcm_cos_t,uint32 *);
	int (*cosq_gport_flow_control_set)(int,bcm_gport_t,bcm_cos_t,uint32);
	int (*cosq_gport_get)(int,bcm_gport_t,bcm_gport_t *,int *,uint32 *);
	int (*cosq_gport_handle_core_get)(int,bcm_core_t,bcm_cosq_gport_info_core_t *,bcm_gport_t *);
	int (*cosq_gport_handle_get)(int,bcm_cosq_gport_type_t,bcm_cosq_gport_info_t *);
	int (*cosq_gport_info_get)(int,bcm_gport_t,bcm_cosq_gport_level_info_t *);
	/* bcm_cosq_gport_level_info_t_init not dispatchable */
	int (*cosq_gport_mapping_get)(int,bcm_port_t,bcm_cos_t,uint32,bcm_gport_t *,bcm_cos_queue_t *);
	int (*cosq_gport_mapping_set)(int,bcm_port_t,bcm_cos_t,uint32,bcm_gport_t,bcm_cos_queue_t);
	int (*cosq_gport_multipath_add)(int,bcm_gport_t,bcm_gport_t,bcm_cos_queue_t);
	int (*cosq_gport_multipath_delete)(int,bcm_gport_t,bcm_gport_t,bcm_cos_queue_t);
	int (*cosq_gport_multipath_get)(int,bcm_gport_t,int,bcm_gport_t *,bcm_cos_queue_t *,int *);
	int (*cosq_gport_parent_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_gport_t *);
	int (*cosq_gport_pkt_size_adjust_get)(int,bcm_cosq_pkt_size_adjust_info_t *,int *);
	int (*cosq_gport_pkt_size_adjust_set)(int,bcm_cosq_pkt_size_adjust_info_t *,int);
	int (*cosq_gport_pon_link_sla_get)(int,bcm_gport_t,bcm_cos_pon_link_sla_t *);
	int (*cosq_gport_pon_link_sla_set)(int,bcm_gport_t,bcm_cos_pon_link_sla_t *);
	int (*cosq_gport_queue_attach)(int,uint32,bcm_gport_t,bcm_cos_t,bcm_gport_t,bcm_cos_t,int *);
	int (*cosq_gport_queue_attach_get)(int,bcm_gport_t,bcm_cos_t,bcm_gport_t *,bcm_cos_t *,int);
	int (*cosq_gport_queue_detach)(int,bcm_gport_t,bcm_cos_t,int);
	int (*cosq_gport_queue_offset_mapping_get)(int,uint32,bcm_gport_t,int,bcm_cosq_queue_offset_mapping_key_t *,bcm_cosq_queue_offset_t *);
	int (*cosq_gport_queue_offset_mapping_set)(int,uint32,bcm_gport_t,int,bcm_cosq_queue_offset_mapping_key_t *,bcm_cosq_queue_offset_t *);
	int (*cosq_gport_rate_class_create)(int,bcm_gport_t,uint32,bcm_cosq_rate_class_create_info_t *);
	int (*cosq_gport_reattach)(int,bcm_gport_t,bcm_gport_t,bcm_cos_queue_t);
	int (*cosq_gport_report_threshold_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_report_threshold_t *);
	int (*cosq_gport_report_threshold_set)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_report_threshold_t *);
	int (*cosq_gport_sched_config_get)(int,bcm_gport_t,int,int,uint32 *);
	int (*cosq_gport_sched_config_set)(int,bcm_gport_t,int,int,uint32);
	int (*cosq_gport_sched_get)(int,bcm_gport_t,bcm_cos_queue_t,int *,int *);
	int (*cosq_gport_sched_set)(int,bcm_gport_t,bcm_cos_queue_t,int,int);
	int (*cosq_gport_size_get)(int,bcm_gport_t,bcm_cos_queue_t,uint32 *,uint32 *);
	int (*cosq_gport_size_set)(int,bcm_gport_t,bcm_cos_queue_t,uint32,uint32);
	int (*cosq_gport_stat_enable_get)(int,bcm_gport_t,int *);
	int (*cosq_gport_stat_enable_set)(int,bcm_gport_t,int);
	int (*cosq_gport_stat_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_gport_stats_t,uint64 *);
	int (*cosq_gport_stat_set)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_gport_stats_t,uint64);
	int (*cosq_gport_stat_sync_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_gport_stats_t,uint64 *);
	int (*cosq_gport_static_threshold_get)(int,uint32,bcm_cosq_static_threshold_info_t *,bcm_cosq_static_threshold_t *);
	int (*cosq_gport_static_threshold_set)(int,uint32,bcm_cosq_static_threshold_info_t *,bcm_cosq_static_threshold_t *);
	int (*cosq_gport_statistic_multi_get)(int,bcm_gport_t,bcm_gport_t,bcm_cos_queue_t,int,bcm_cosq_gport_stats_t *,int,uint64 *);
	int (*cosq_gport_statistic_multi_set)(int,bcm_gport_t,bcm_gport_t,bcm_cos_queue_t,int,bcm_cosq_gport_stats_t *,uint64);
	int (*cosq_gport_threshold_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_threshold_t *);
	int (*cosq_gport_threshold_set)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_threshold_t *);
	int (*cosq_gport_traverse)(int,bcm_cosq_gport_traverse_cb,void *);
	int (*cosq_gport_traverse_by_port)(int,bcm_gport_t,bcm_cosq_gport_traverse_cb,void *);
	int (*cosq_gport_vsq_add)(int,bcm_gport_t,bcm_gport_t,bcm_cos_queue_t);
	int (*cosq_gport_vsq_create)(int,bcm_cosq_vsq_info_t *,bcm_gport_t *);
	int (*cosq_gport_vsq_delete)(int,bcm_gport_t,bcm_gport_t,bcm_cos_queue_t);
	int (*cosq_gport_vsq_delete_all)(int,bcm_gport_t);
	int (*cosq_gport_vsq_destroy)(int,bcm_gport_t);
	int (*cosq_gport_vsq_get)(int,bcm_gport_t,int,bcm_gport_t *,bcm_cos_queue_t *,int *);
	int (*cosq_hdrm_pool_limit_set)(int,int,int,int,bcm_cosq_pkt_size_dist_t *);
	int (*cosq_icgm_resource_stat_get)(int,bcm_cosq_icgm_resource_stat_key_t *,uint64 *);
	/* bcm_cosq_ingress_drop_control_frame_config_t_init not dispatchable */
	/* bcm_cosq_ingress_drop_flex_key_construct_id_t_init not dispatchable */
	/* bcm_cosq_ingress_drop_flex_key_construct_t_init not dispatchable */
	/* bcm_cosq_ingress_drop_flex_key_entry_t_init not dispatchable */
	/* bcm_cosq_ingress_drop_flex_key_t_init not dispatchable */
	int (*cosq_ingress_port_drop_control_frame_get)(int,bcm_port_t,uint32,uint32,bcm_cosq_ingress_drop_control_frame_config_t *);
	int (*cosq_ingress_port_drop_control_frame_set)(int,bcm_port_t,uint32,uint32,bcm_cosq_ingress_drop_control_frame_config_t *);
	int (*cosq_ingress_port_drop_custom_ether_type_get)(int,bcm_port_t,uint32,uint32,uint32 *);
	int (*cosq_ingress_port_drop_custom_ether_type_set)(int,bcm_port_t,uint32,uint32,uint32);
	int (*cosq_ingress_port_drop_default_priority_get)(int,bcm_port_t,uint32,uint32 *);
	int (*cosq_ingress_port_drop_default_priority_set)(int,bcm_port_t,uint32,uint32);
	int (*cosq_ingress_port_drop_enable_get)(int,bcm_port_t,uint32,int *);
	int (*cosq_ingress_port_drop_enable_set)(int,bcm_port_t,uint32,int);
	int (*cosq_ingress_port_drop_flex_key_construct_get)(int,bcm_cosq_ingress_drop_flex_key_construct_id_t *,uint32,bcm_cosq_ingress_drop_flex_key_construct_t *);
	int (*cosq_ingress_port_drop_flex_key_construct_set)(int,bcm_cosq_ingress_drop_flex_key_construct_id_t *,uint32,bcm_cosq_ingress_drop_flex_key_construct_t *);
	int (*cosq_ingress_port_drop_flex_key_entry_get)(int,bcm_port_t,uint32,uint32,bcm_cosq_ingress_drop_flex_key_entry_t *);
	int (*cosq_ingress_port_drop_flex_key_entry_set)(int,bcm_port_t,uint32,uint32,bcm_cosq_ingress_drop_flex_key_entry_t *);
	int (*cosq_ingress_port_drop_map_get)(int,bcm_port_t,uint32,bcm_cosq_ingress_port_drop_map_t,uint32,int *);
	int (*cosq_ingress_port_drop_map_set)(int,bcm_port_t,uint32,bcm_cosq_ingress_port_drop_map_t,uint32,int);
	/* bcm_cosq_ingress_port_drop_mpls_special_label_config_t_init not dispatchable */
	int (*cosq_ingress_port_drop_mpls_special_label_get)(int,bcm_port_t,uint32,uint32,bcm_cosq_ingress_port_drop_mpls_special_label_config_t *);
	int (*cosq_ingress_port_drop_mpls_special_label_set)(int,bcm_port_t,uint32,uint32,bcm_cosq_ingress_port_drop_mpls_special_label_config_t *);
	int (*cosq_ingress_port_drop_threshold_get)(int,bcm_port_t,uint32,int,uint32 *);
	int (*cosq_ingress_port_drop_threshold_set)(int,bcm_port_t,uint32,int,uint32);
	int (*cosq_ingress_queue_bundle_gport_add)(int,bcm_cosq_ingress_queue_bundle_gport_config_t *,bcm_gport_t *);
	int (*cosq_init)(int);
	int (*cosq_inst_congestion_info_get)(int,uint32,bcm_cosq_inst_congestion_info_key_t *,bcm_cosq_inst_congestion_info_data_t *);
	int (*cosq_latency_profile_create)(int,int,bcm_gport_t *);
	int (*cosq_latency_profile_destroy)(int,int,bcm_gport_t);
	int (*cosq_mapping_get)(int,bcm_cos_t,bcm_cos_queue_t *);
	int (*cosq_mapping_set)(int,bcm_cos_t,bcm_cos_queue_t);
	/* bcm_cosq_mapping_t_init not dispatchable */
	int (*cosq_max_latency_pkts_get)(int,bcm_gport_t,uint32,int,bcm_cosq_max_latency_pkts_t *,int *);
	int (*cosq_mirror_on_drop_group_get)(int,uint32,int,bcm_cosq_mirror_on_drop_group_info_t *);
	int (*cosq_mirror_on_drop_group_set)(int,uint32,int,bcm_cosq_mirror_on_drop_group_info_t *);
	int (*cosq_mod_control_get)(int,bcm_cosq_mod_control_t *);
	int (*cosq_mod_control_set)(int,bcm_cosq_mod_control_t *);
	/* bcm_cosq_mod_control_t_init not dispatchable */
	int (*cosq_mod_profile_create)(int,uint32,int *);
	int (*cosq_mod_profile_destroy)(int,int);
	int (*cosq_mod_profile_get)(int,int,bcm_cosq_mod_profile_t *);
	int (*cosq_mod_profile_set)(int,int,bcm_cosq_mod_profile_t *);
	/* bcm_cosq_mod_profile_t_init not dispatchable */
	int (*cosq_mod_stat_get)(int,bcm_cosq_object_id_t *,bcm_cosq_mod_stat_t,uint64 *);
	int (*cosq_mod_stat_set)(int,bcm_cosq_object_id_t *,bcm_cosq_mod_stat_t,uint64);
	/* bcm_cosq_object_id_t_init not dispatchable */
	int (*cosq_pfc_class_config_profile_get)(int,int,int,bcm_cosq_pfc_class_map_config_t *,int *);
	int (*cosq_pfc_class_config_profile_set)(int,int,int,bcm_cosq_pfc_class_map_config_t *);
	/* bcm_cosq_pfc_class_map_config_t_init not dispatchable */
	int (*cosq_pfc_class_mapping_get)(int,bcm_gport_t,int,bcm_cosq_pfc_class_mapping_t *,int *);
	int (*cosq_pfc_class_mapping_set)(int,bcm_gport_t,int,bcm_cosq_pfc_class_mapping_t *);
	/* bcm_cosq_pfc_class_mapping_t_init not dispatchable */
	int (*cosq_pfc_config_get)(int,bcm_gport_t,bcm_cos_queue_t,uint32,bcm_cosq_pfc_config_t *);
	int (*cosq_pfc_config_set)(int,bcm_gport_t,bcm_cos_queue_t,uint32,bcm_cosq_pfc_config_t *);
	int (*cosq_pfc_dd_recovery_mode_get)(int,bcm_port_t,bcm_cosq_pfc_dd_recovery_mode_t *);
	int (*cosq_pfc_dd_recovery_mode_set)(int,bcm_port_t,bcm_cosq_pfc_dd_recovery_mode_t);
	int (*cosq_pfc_deadlock_config_get)(int,int,bcm_cosq_pfc_deadlock_config_t *);
	int (*cosq_pfc_deadlock_config_set)(int,int,bcm_cosq_pfc_deadlock_config_t *);
	/* bcm_cosq_pfc_deadlock_config_t_init not dispatchable */
	int (*cosq_pfc_deadlock_control_get)(int,bcm_port_t,int,bcm_cosq_pfc_deadlock_control_t,int *);
	int (*cosq_pfc_deadlock_control_set)(int,bcm_port_t,int,bcm_cosq_pfc_deadlock_control_t,int);
	int (*cosq_pfc_deadlock_info_get)(int,int,bcm_cosq_pfc_deadlock_info_t *);
	/* bcm_cosq_pfc_deadlock_info_t_init not dispatchable */
	int (*cosq_pfc_deadlock_queue_config_get)(int,bcm_gport_t,bcm_cosq_pfc_deadlock_queue_config_t *);
	int (*cosq_pfc_deadlock_queue_config_set)(int,bcm_gport_t,bcm_cosq_pfc_deadlock_queue_config_t *);
	/* bcm_cosq_pfc_deadlock_queue_config_t_init not dispatchable */
	int (*cosq_pfc_deadlock_queue_status_get)(int,bcm_gport_t,uint8 *);
	int (*cosq_pfc_deadlock_recovery_event_register)(int,bcm_cosq_pfc_deadlock_recovery_event_cb_t,void *);
	int (*cosq_pfc_deadlock_recovery_event_unregister)(int,bcm_cosq_pfc_deadlock_recovery_event_cb_t,void *);
	int (*cosq_pfc_deadlock_recovery_exit)(int,bcm_port_t,bcm_cos_t);
	int (*cosq_pfc_deadlock_recovery_start)(int,bcm_port_t,bcm_cos_t);
	int (*cosq_pkt_size_adjust_delta_map_get)(int,int,int *);
	int (*cosq_pkt_size_adjust_delta_map_set)(int,int,int);
	int (*cosq_port_bandwidth_get)(int,bcm_port_t,bcm_cos_queue_t,uint32 *,uint32 *,uint32 *);
	int (*cosq_port_bandwidth_set)(int,bcm_port_t,bcm_cos_queue_t,uint32,uint32,uint32);
	int (*cosq_port_mapping_get)(int,bcm_port_t,bcm_cos_t,bcm_cos_queue_t *);
	int (*cosq_port_mapping_multi_get)(int,bcm_port_t,int,bcm_cos_t *,bcm_cos_queue_t *);
	int (*cosq_port_mapping_multi_set)(int,bcm_port_t,int,bcm_cos_t *,bcm_cos_queue_t *);
	int (*cosq_port_mapping_set)(int,bcm_port_t,bcm_cos_t,bcm_cos_queue_t);
	int (*cosq_port_optimized_pfc_group_num_get)(int,bcm_port_t,int *);
	int (*cosq_port_prigrp_hdrm_set)(int,bcm_port_t,uint32,int,int,bcm_cosq_pkt_size_dist_t *);
	int (*cosq_port_priority_group_property_get)(int,bcm_port_t,int,bcm_cosq_port_prigroup_control_t,int *);
	int (*cosq_port_priority_group_property_set)(int,bcm_port_t,int,bcm_cosq_port_prigroup_control_t,int);
	int (*cosq_port_profile_get)(int,bcm_port_t,bcm_cosq_profile_type_t,int *);
	int (*cosq_port_profile_set)(int,bcm_port_t,bcm_cosq_profile_type_t,int);
	int (*cosq_port_sched_config_get)(int,bcm_pbmp_t,int,int *,int *,int *);
	int (*cosq_port_sched_config_set)(int,bcm_pbmp_t,int,int,int *);
	int (*cosq_port_sched_get)(int,bcm_pbmp_t,int *,int [BCM_COS_COUNT],int *);
	int (*cosq_port_sched_set)(int,bcm_pbmp_t,int,const int [BCM_COS_COUNT],int);
	int (*cosq_priority_get)(int,int,int,int *);
	int (*cosq_priority_group_mapping_profile_get)(int,int,bcm_cosq_priority_group_mapping_profile_type_t,int,int *,int *);
	int (*cosq_priority_group_mapping_profile_set)(int,int,bcm_cosq_priority_group_mapping_profile_type_t,int,int *);
	int (*cosq_priority_group_pfc_priority_mapping_profile_get)(int,int,int,int *,int *);
	int (*cosq_priority_group_pfc_priority_mapping_profile_set)(int,int,int,int *);
	int (*cosq_priority_mapping_get_all)(int,bcm_gport_t,int,bcm_cosq_priority_mapping_t,int,int *,int *);
	int (*cosq_priority_profile_get)(int,int,int *,bcm_cosq_gport_priority_profile_t *);
	int (*cosq_priority_profile_set)(int,int,int,bcm_cosq_gport_priority_profile_t *);
	int (*cosq_priority_set)(int,int,int,int);
	int (*cosq_profile_info_inuse_get)(int,bcm_cosq_profile_type_t,int,int *);
	int (*cosq_profile_info_portlist_get)(int,bcm_cosq_profile_type_t,int,int,bcm_port_t *,int *);
	int (*cosq_profile_mapping_get)(int,bcm_gport_t,bcm_cos_queue_t,uint32,bcm_switch_profile_mapping_t *);
	int (*cosq_profile_mapping_set)(int,bcm_gport_t,bcm_cos_queue_t,uint32,bcm_switch_profile_mapping_t *);
	int (*cosq_profile_property_dynamic_get)(int,bcm_cosq_profile_type_t,bcm_cosq_dynamic_setting_type_t *);
	int (*cosq_qcn_config_get)(int,bcm_gport_t,bcm_cos_queue_t,uint32,bcm_cosq_qcn_config_t *);
	int (*cosq_qcn_config_set)(int,bcm_gport_t,bcm_cos_queue_t,uint32,bcm_cosq_qcn_config_t *);
	/* bcm_cosq_queue_offset_mapping_key_t_init not dispatchable */
	int (*cosq_resource_allocation_get)(int,uint32,bcm_cosq_resource_t,bcm_cosq_allocation_entity_t *,bcm_cosq_resource_amounts_t *);
	int (*cosq_resource_allocation_set)(int,uint32,bcm_cosq_resource_t,bcm_cosq_allocation_entity_t *,bcm_cosq_resource_amounts_t *);
	int (*cosq_safc_class_mapping_get)(int,bcm_gport_t,int,bcm_cosq_safc_class_mapping_t *,int *);
	int (*cosq_safc_class_mapping_set)(int,bcm_gport_t,int,bcm_cosq_safc_class_mapping_t *);
	/* bcm_cosq_safc_class_mapping_t_init not dispatchable */
	int (*cosq_sched_config_get)(int,int,int *,int *,int *);
	int (*cosq_sched_config_set)(int,int,int,int *);
	int (*cosq_sched_get)(int,int *,int [BCM_COS_COUNT],int *);
	int (*cosq_sched_set)(int,int,const int [BCM_COS_COUNT],int);
	int (*cosq_sched_weight_max_get)(int,int,int *);
	int (*cosq_schedq_mapping_get)(int,int,int,bcm_cosq_mapping_t *,int *);
	int (*cosq_schedq_mapping_set)(int,int,int,bcm_cosq_mapping_t *);
	int (*cosq_scheduler_gport_add)(int,uint32,bcm_cosq_scheduler_gport_params_t *,bcm_gport_t *);
	int (*cosq_scheduler_gport_get)(int,uint32,bcm_gport_t,bcm_cosq_scheduler_gport_params_t *);
	int (*cosq_service_pool_get)(int,bcm_service_pool_id_t,bcm_cosq_service_pool_t *);
	int (*cosq_service_pool_override_get)(int,bcm_cosq_service_pool_override_type_t,bcm_service_pool_id_t *,int *);
	int (*cosq_service_pool_override_set)(int,bcm_cosq_service_pool_override_type_t,bcm_service_pool_id_t,int);
	int (*cosq_service_pool_set)(int,bcm_service_pool_id_t,bcm_cosq_service_pool_t);
	/* bcm_cosq_service_pool_t_init not dispatchable */
	int (*cosq_slow_profile_get)(int,bcm_cosq_slow_level_t *,bcm_cosq_slow_profile_attributes_t *);
	int (*cosq_slow_profile_set)(int,bcm_cosq_slow_level_t *,bcm_cosq_slow_profile_attributes_t *);
	int (*cosq_src_vsqs_gport_add)(int,bcm_gport_t,bcm_cosq_src_vsqs_gport_config_t *,bcm_gport_t *,bcm_gport_t *);
	int (*cosq_src_vsqs_gport_get)(int,bcm_gport_t,bcm_cosq_src_vsqs_gport_config_t *,bcm_gport_t *,bcm_gport_t *);
	int (*cosq_stat_config_get)(int,int,bcm_cosq_stat_t *);
	int (*cosq_stat_config_set)(int,int,bcm_cosq_stat_t *);
	int (*cosq_stat_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_stat_t,uint64 *);
	int (*cosq_stat_get32)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_stat_t,uint32 *);
	int (*cosq_stat_info_get)(int,int,bcm_cosq_stat_info_key_t *,bcm_cosq_stat_info_t *);
	int (*cosq_stat_info_set)(int,int,bcm_cosq_stat_info_key_t *,bcm_cosq_stat_info_t *);
	int (*cosq_stat_obj_map_get)(int,int,bcm_cosq_obj_map_key_t *,uint32 *);
	int (*cosq_stat_obj_map_set)(int,int,bcm_cosq_obj_map_key_t *,uint32);
	int (*cosq_stat_set)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_stat_t,uint64);
	int (*cosq_stat_set32)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_stat_t,uint32);
	int (*cosq_stat_sync_get)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_stat_t,uint64 *);
	int (*cosq_stat_sync_get32)(int,bcm_gport_t,bcm_cos_queue_t,bcm_cosq_stat_t,uint32 *);
	int (*cosq_stat_sync_multi_get)(int,bcm_gport_t,bcm_cos_queue_t,int,bcm_cosq_stat_t *,uint64 *);
	int (*cosq_stat_sync_multi_get32)(int,bcm_gport_t,bcm_cos_queue_t,int,bcm_cosq_stat_t *,uint32 *);
	int (*cosq_subport_congestion_config_get)(int,bcm_gport_t,bcm_cosq_subport_congestion_type_t,bcm_cosq_subport_congestion_config_t *);
	int (*cosq_subport_congestion_config_set)(int,bcm_gport_t,bcm_cosq_subport_congestion_type_t,bcm_cosq_subport_congestion_config_t *);
	/* bcm_cosq_subport_congestion_config_t_init not dispatchable */
	int (*cosq_subport_flow_control_get)(int,bcm_gport_t,bcm_gport_t *);
	int (*cosq_subport_flow_control_set)(int,bcm_gport_t,bcm_gport_t);
	int (*cosq_subport_pfc_class_mapping_get)(int,bcm_gport_t,bcm_subport_cos_to_pfc_pri_map_t *);
	int (*cosq_subport_pfc_class_mapping_set)(int,bcm_gport_t,bcm_subport_cos_to_pfc_pri_map_t *,int *);
	int (*cosq_subscriber_map_add)(int,bcm_cosq_subscriber_map_t *);
	int (*cosq_subscriber_map_delete)(int,bcm_cosq_subscriber_map_t *);
	int (*cosq_subscriber_map_delete_all)(int);
	int (*cosq_subscriber_map_get)(int,bcm_cosq_subscriber_map_t *);
	int (*cosq_subscriber_traverse)(int,bcm_cosq_subscriber_map_traverse_cb,void *);
	int (*cosq_sysport_ingress_queue_map_get)(int,uint32,bcm_gport_t,bcm_gport_t *);
	int (*cosq_sysport_ingress_queue_map_set)(int,uint32,bcm_gport_t,bcm_gport_t);
	int (*cosq_tas_control_get)(int,bcm_gport_t,bcm_cosq_tas_control_t,int *);
	int (*cosq_tas_control_set)(int,bcm_gport_t,bcm_cosq_tas_control_t,int);
	int (*cosq_tas_profile_commit)(int,bcm_gport_t,bcm_cosq_tas_profile_id_t);
	int (*cosq_tas_profile_create)(int,bcm_gport_t,bcm_cosq_tas_profile_t *,bcm_cosq_tas_profile_id_t *);
	int (*cosq_tas_profile_destroy)(int,bcm_gport_t,bcm_cosq_tas_profile_id_t);
	int (*cosq_tas_profile_destroy_all)(int,bcm_gport_t);
	int (*cosq_tas_profile_get)(int,bcm_gport_t,bcm_cosq_tas_profile_id_t,bcm_cosq_tas_profile_t *);
	int (*cosq_tas_profile_set)(int,bcm_gport_t,bcm_cosq_tas_profile_id_t,bcm_cosq_tas_profile_t *);
	int (*cosq_tas_profile_status_get)(int,bcm_gport_t,bcm_cosq_tas_profile_id_t,bcm_cosq_tas_profile_status_t *);
	/* bcm_cosq_tas_profile_status_t_init not dispatchable */
	/* bcm_cosq_tas_profile_t_init not dispatchable */
	int (*cosq_tas_profile_traverse)(int,bcm_gport_t,bcm_cosq_tas_profile_traverse_cb,void *);
	int (*cosq_tas_status_get)(int,bcm_gport_t,bcm_cosq_tas_status_t,int *);
#ifdef	INCLUDE_TCB
	int (*cosq_tcb_buffer_multi_get)(int,bcm_cosq_buffer_id_t,int,bcm_cosq_tcb_buffer_t *,int *);
	int (*cosq_tcb_cb_register)(int,bcm_cosq_tcb_callback_t,void *);
	int (*cosq_tcb_cb_unregister)(int,bcm_cosq_tcb_callback_t);
	int (*cosq_tcb_config_get)(int,bcm_cosq_buffer_id_t,bcm_cosq_tcb_config_t *);
	int (*cosq_tcb_config_set)(int,bcm_cosq_buffer_id_t,bcm_cosq_tcb_config_t *);
	/* bcm_cosq_tcb_config_t_init not dispatchable */
	int (*cosq_tcb_control_get)(int,int,bcm_cosq_tcb_control_t,int *);
	int (*cosq_tcb_control_set)(int,bcm_cosq_buffer_id_t,bcm_cosq_tcb_control_t,int);
	int (*cosq_tcb_event_multi_get)(int,bcm_cosq_buffer_id_t,int,bcm_cosq_tcb_event_t *,int *,int *);
	int (*cosq_tcb_gport_threshold_mapping_get)(int,bcm_cosq_object_id_t *,int *);
	int (*cosq_tcb_gport_threshold_mapping_set)(int,bcm_cosq_object_id_t *,int);
	int (*cosq_tcb_threshold_profile_create)(int,int,bcm_cosq_buffer_id_t,bcm_cosq_tcb_threshold_profile_t *,int *);
	int (*cosq_tcb_threshold_profile_destroy)(int,bcm_cosq_buffer_id_t,int);
	int (*cosq_tcb_threshold_profile_get)(int,bcm_cosq_buffer_id_t,int,bcm_cosq_tcb_threshold_profile_t *);
	/* bcm_cosq_tcb_threshold_profile_t_init not dispatchable */
	/* bcm_cosq_threshold_t_init not dispatchable */
#endif	/* INCLUDE_TCB */
	int (*cosq_voq_connector_gport_add)(int,bcm_cosq_voq_connector_gport_t *,bcm_gport_t *);
	int (*cosq_voq_connector_gport_get)(int,bcm_gport_t,bcm_cosq_voq_connector_gport_t *);
	int (*cpri_decap_presentation_time_config_get)(int,bcm_port_t,bcm_cpri_decap_presentation_config_t *);
	int (*cpri_decap_presentation_time_config_set)(int,bcm_port_t,bcm_cpri_decap_presentation_config_t *);
	int (*cpri_detach)(int);
	int (*cpri_encap_control_queue_tag_to_flow_id_map_set)(int,int,uint32,uint32);
	int (*cpri_encap_presentation_time_config_get)(int,bcm_port_t,bcm_cpri_presentation_ts_attribute_t,bcm_cpri_presentation_time_t *);
	int (*cpri_encap_presentation_time_config_set)(int,bcm_port_t,bcm_cpri_presentation_ts_attribute_t,bcm_cpri_presentation_time_t *);
	int (*cpri_init)(int);
	int (*cpri_port_1588_timestamp_capture_config_get)(int,bcm_port_t,bcm_cpri_dir_t,bcm_cpri_1588_capture_config_t *);
	int (*cpri_port_1588_timestamp_capture_config_set)(int,bcm_port_t,bcm_cpri_dir_t,bcm_cpri_1588_capture_config_t *);
	int (*cpri_port_1588_timestamp_config_get)(int,bcm_port_t,bcm_cpri_dir_t,bcm_cpri_1588_config_t *);
	int (*cpri_port_1588_timestamp_config_set)(int,bcm_port_t,bcm_cpri_dir_t,bcm_cpri_1588_config_t *);
	int (*cpri_port_1588_timestamp_get)(int,bcm_port_t,bcm_cpri_dir_t,bcm_cpri_1588_ts_type_t,int,int *,bcm_cpri_1588_timestamp_t *);
	int (*cpri_port_1588_timestamp_ts_config_get)(int,bcm_port_t,bcm_cpri_dir_t,bcm_cpri_1588_ts_type_t,bcm_cpri_1588_timestamp_ts_config_t *);
	int (*cpri_port_1588_timestamp_ts_config_set)(int,bcm_port_t,bcm_cpri_dir_t,bcm_cpri_1588_ts_type_t,bcm_cpri_1588_timestamp_ts_config_t *);
	int (*cpri_port_agnostic_config_get)(int,bcm_port_t,bcm_cpri_dir_t,int *,bcm_cpri_port_agnostic_config_t *);
	int (*cpri_port_agnostic_config_set)(int,bcm_port_t,bcm_cpri_dir_t,int,bcm_cpri_port_agnostic_config_t *);
	int (*cpri_port_compression_lookup_table_get)(int,bcm_gport_t,int,int *,uint32 *);
	int (*cpri_port_compression_lookup_table_set)(int,bcm_gport_t,int,uint32 *);
	int (*cpri_port_compression_saturation_config_get)(int,bcm_port_t,uint32 *);
	int (*cpri_port_compression_saturation_config_set)(int,bcm_port_t,uint32);
	int (*cpri_port_cw_fast_eth_config_get)(int,int,bcm_cpri_fast_eth_config_info_t *);
	int (*cpri_port_cw_fast_eth_config_set)(int,int,bcm_cpri_fast_eth_config_info_t *);
	int (*cpri_port_cw_slow_hdlc_config_get)(int,int,bcm_cpri_slow_hdlc_config_info_t *);
	int (*cpri_port_cw_slow_hdlc_config_set)(int,int,bcm_cpri_slow_hdlc_config_info_t *);
	int (*cpri_port_debug_clear)(int,bcm_gport_t,bcm_cpri_debug_attr_t,int);
	int (*cpri_port_debug_get)(int,bcm_gport_t,bcm_cpri_debug_attr_t,int,int,uint32 *);
	int (*cpri_port_debug_set)(int,bcm_gport_t,bcm_cpri_debug_attr_t,int,int,uint32 *);
	int (*cpri_port_decap_ethertype_get)(int,bcm_gport_t,bcm_cpri_ethertype_t,uint16 *);
	int (*cpri_port_decap_ethertype_set)(int,bcm_gport_t,bcm_cpri_ethertype_t,uint16);
	int (*cpri_port_decap_flow_config_clear)(int,bcm_gport_t,uint8);
	int (*cpri_port_decap_flow_config_get)(int,bcm_gport_t,uint8,bcm_cpri_decap_flow_config_t *);
	int (*cpri_port_decap_flow_config_set)(int,bcm_gport_t,uint8,bcm_cpri_decap_flow_config_t *);
	int (*cpri_port_decap_flow_to_queue_mapping_clear)(int,bcm_gport_t,uint32);
	int (*cpri_port_decap_flow_to_queue_mapping_get)(int,bcm_gport_t,uint32,uint32 *);
	int (*cpri_port_decap_flow_to_queue_mapping_set)(int,bcm_gport_t,uint32,uint32);
	int (*cpri_port_decap_queue_flow_control_get)(int,bcm_gport_t,uint32,uint32 *,uint32 *,int *);
	int (*cpri_port_decap_queue_flow_control_set)(int,bcm_gport_t,uint32,uint32,uint32,int);
	int (*cpri_port_decap_queue_to_ordering_info_index_get)(int,bcm_gport_t,uint32,uint32 *);
	int (*cpri_port_decap_queue_to_ordering_info_index_set)(int,bcm_gport_t,uint32,uint32);
	int (*cpri_port_decap_roe_ordering_info_get)(int,bcm_gport_t,int,bcm_cpri_decap_roe_oi_t *);
	int (*cpri_port_decap_roe_ordering_info_set)(int,bcm_gport_t,int,bcm_cpri_decap_roe_oi_t *);
	int (*cpri_port_decap_roe_ordering_sequence_offset_get)(int,bcm_gport_t,int,bcm_cpri_roe_oi_seq_offset_t *);
	int (*cpri_port_decap_roe_ordering_sequence_offset_set)(int,bcm_gport_t,int,bcm_cpri_roe_oi_seq_offset_t *);
	int (*cpri_port_decap_secondary_key_to_queue_mapping_get)(int,bcm_port_t,uint32,uint32 *);
	int (*cpri_port_decap_secondary_key_to_queue_mapping_set)(int,bcm_port_t,uint32,uint32);
	int (*cpri_port_decompression_lookup_table_get)(int,bcm_gport_t,int,int *,uint32 *);
	int (*cpri_port_decompression_lookup_table_set)(int,bcm_gport_t,int,uint32 *);
	int (*cpri_port_decompression_saturation_config_get)(int,bcm_port_t,uint32 *);
	int (*cpri_port_decompression_saturation_config_set)(int,bcm_port_t,uint32);
	int (*cpri_port_encap_get)(int,bcm_gport_t,int,bcm_cpri_encap_info_t *);
	int (*cpri_port_encap_roe_entry_macda_get)(int,bcm_gport_t,int,bcm_mac_t *);
	int (*cpri_port_encap_roe_entry_macda_set)(int,bcm_gport_t,int,bcm_mac_t);
	int (*cpri_port_encap_roe_entry_macsa_get)(int,bcm_gport_t,int,bcm_mac_t *);
	int (*cpri_port_encap_roe_entry_macsa_set)(int,bcm_gport_t,int,bcm_mac_t);
	int (*cpri_port_encap_roe_entry_vlan_get)(int,bcm_gport_t,uint32,uint32,bcm_vlan_t *);
	int (*cpri_port_encap_roe_entry_vlan_set)(int,bcm_gport_t,uint32,uint32,bcm_vlan_t);
	int (*cpri_port_encap_roe_ordering_info_get)(int,bcm_gport_t,int,bcm_cpri_encap_roe_oi_t *);
	int (*cpri_port_encap_roe_ordering_info_set)(int,bcm_gport_t,int,bcm_cpri_encap_roe_oi_t *);
	int (*cpri_port_encap_roe_ordering_sequence_offset_get)(int,bcm_gport_t,int,int,bcm_cpri_roe_oi_seq_offset_t *);
	int (*cpri_port_encap_roe_ordering_sequence_offset_set)(int,bcm_gport_t,int,int,bcm_cpri_roe_oi_seq_offset_t *);
	int (*cpri_port_encap_set)(int,bcm_gport_t,int,bcm_cpri_encap_info_t *);
	int (*cpri_port_encap_vlan_config_get)(int,bcm_gport_t,bcm_cpri_encap_vlan_config_t *);
	int (*cpri_port_encap_vlan_config_set)(int,bcm_gport_t,bcm_cpri_encap_vlan_config_t *);
	int (*cpri_port_fec_aux_config_get)(int,bcm_gport_t,bcm_cpri_fec_aux_config_t,uint32 *);
	int (*cpri_port_fec_aux_config_set)(int,bcm_gport_t,bcm_cpri_fec_aux_config_t,uint32);
	int (*cpri_port_fec_enable_get)(int,bcm_gport_t,bcm_cpri_dir_t,int *);
	int (*cpri_port_fec_enable_set)(int,bcm_gport_t,bcm_cpri_dir_t,int);
	int (*cpri_port_fec_stat_get)(int,bcm_gport_t,bcm_cpri_fec_stat_type_t,uint32 *);
	int (*cpri_port_fec_timestamp_config_get)(int,bcm_gport_t,bcm_cpri_dir_t,bcm_cpri_fec_timestamp_config_t *);
	int (*cpri_port_fec_timestamp_config_set)(int,bcm_gport_t,bcm_cpri_dir_t,bcm_cpri_fec_timestamp_config_t *);
	int (*cpri_port_frame_config_set)(int,bcm_port_t,bcm_cpri_port_frame_config_t *);
	int (*cpri_port_interrupt_callback_register)(int,bcm_cpri_interrupt_type_t,bcm_cpri_port_interrupt_callback_t,void *);
	int (*cpri_port_interrupt_callback_unregister)(int,bcm_cpri_interrupt_type_t,bcm_cpri_port_interrupt_callback_t);
	int (*cpri_port_interrupt_enable_get)(int,bcm_port_t,bcm_cpri_interrupt_type_t,int,int *);
	int (*cpri_port_interrupt_enable_set)(int,bcm_port_t,bcm_cpri_interrupt_type_t,int,int);
	int (*cpri_port_rsvd4_agnostic_mode_config_get)(int,bcm_port_t,bcm_cpri_dir_t,int *,bcm_cpri_port_rsvd4_agnostic_config_t *);
	int (*cpri_port_rsvd4_agnostic_mode_config_set)(int,bcm_port_t,bcm_cpri_dir_t,int,bcm_cpri_port_rsvd4_agnostic_config_t *);
	int (*cpri_port_rsvd4_cm_fast_eth_config_set)(int,int,int,bcm_rsvd4_fast_eth_config_info_t *);
	int (*cpri_port_rsvd4_dbm_entry_clear)(int,bcm_gport_t,int);
	int (*cpri_port_rsvd4_dbm_entry_get)(int,bcm_gport_t,int,bcm_rsvd4_dbm_entry_t *);
	int (*cpri_port_rsvd4_dbm_entry_set)(int,bcm_gport_t,int,bcm_rsvd4_dbm_entry_t *);
	int (*cpri_port_rsvd4_rx_bfn_sync_config_set)(int,bcm_gport_t,uint16,uint64);
	int (*cpri_port_rsvd4_rx_control_flow_add)(int,int,int,bcm_rsvd4_control_flow_config_t *);
	int (*cpri_port_rsvd4_rx_control_flow_delete)(int,int,int,bcm_rsvd4_control_flow_config_t *);
	int (*cpri_port_rsvd4_rx_current_frame_sync_info_get)(int,bcm_gport_t,bcm_rsvd4_frame_sync_info_t *);
	int (*cpri_port_rsvd4_rx_flow_add)(int,bcm_gport_t,int,bcm_rsvd4_rx_flow_info_t *);
	int (*cpri_port_rsvd4_rx_flow_delete)(int,bcm_gport_t,int);
	int (*cpri_port_rsvd4_rx_frame_config_debug_set)(int,bcm_gport_t,bcm_rsvd4_rx_config_t,uint32);
	int (*cpri_port_rsvd4_rx_frame_config_get)(int,bcm_gport_t,bcm_rsvd4_rx_frame_config_t *);
	int (*cpri_port_rsvd4_rx_frame_config_set)(int,bcm_gport_t,bcm_rsvd4_rx_frame_config_t *);
	int (*cpri_port_rsvd4_rx_fsm_control_get)(int,bcm_gport_t,bcm_rsvd4_rx_fsm_control_t,uint32 *);
	int (*cpri_port_rsvd4_rx_fsm_control_set)(int,bcm_gport_t,bcm_rsvd4_rx_fsm_control_t,uint32);
	int (*cpri_port_rsvd4_rx_fsm_state_set)(int,bcm_gport_t,bcm_rsvd4_rx_fsm_state_t);
	int (*cpri_port_rsvd4_rx_override_set)(int,bcm_gport_t,bcm_rsvd4_rx_params_t,int,int);
	int (*cpri_port_rsvd4_secondary_dbm_entry_clear)(int,bcm_gport_t,int);
	int (*cpri_port_rsvd4_secondary_dbm_entry_get)(int,bcm_gport_t,int,bcm_rsvd4_secondary_dbm_entry_t *);
	int (*cpri_port_rsvd4_secondary_dbm_entry_set)(int,bcm_gport_t,int,bcm_rsvd4_secondary_dbm_entry_t *);
	int (*cpri_port_rsvd4_sync_profile_entry_get)(int,int,int,bcm_rsvd4_sync_profile_entry_t *);
	int (*cpri_port_rsvd4_sync_profile_entry_set)(int,int,int,bcm_rsvd4_sync_profile_entry_t *);
	int (*cpri_port_rsvd4_tx_cm_eth_config_set)(int,int,bcm_rsvd4_tx_cm_eth_config_t *);
	int (*cpri_port_rsvd4_tx_cm_hdr_config_entry_set)(int,int,int,bcm_rsvd4_tx_cm_hdr_entry_t *);
	int (*cpri_port_rsvd4_tx_cm_hdr_lkup_entry_set)(int,int,int,int);
	int (*cpri_port_rsvd4_tx_cm_raw_config_set)(int,int,bcm_rsvd4_tx_cm_raw_config_t *);
	int (*cpri_port_rsvd4_tx_cm_tunnel_crc_config_set)(int,int,bcm_rsvd4_cm_tunnel_crc_option_t);
	int (*cpri_port_rsvd4_tx_control_flow_add)(int,int,int,bcm_rsvd4_tx_control_flow_config_t *);
	int (*cpri_port_rsvd4_tx_control_flow_group_member_add)(int,int,bcm_rsvd4_control_group_id_t,bcm_rsvd4_tx_control_flow_group_config_t *);
	int (*cpri_port_rsvd4_tx_control_flow_group_member_delete)(int,int,bcm_rsvd4_control_group_id_t,bcm_rsvd4_priority_t);
	int (*cpri_port_rsvd4_tx_current_frame_sync_info_get)(int,bcm_gport_t,bcm_rsvd4_frame_sync_info_t *);
	int (*cpri_port_rsvd4_tx_flow_add)(int,bcm_gport_t,int,bcm_rsvd4_tx_flow_info_t *);
	int (*cpri_port_rsvd4_tx_flow_delete)(int,bcm_gport_t,int);
	int (*cpri_port_rsvd4_tx_frame_config_debug_set)(int,bcm_gport_t,bcm_rsvd4_tx_config_t,uint32);
	int (*cpri_port_rsvd4_tx_frame_config_get)(int,bcm_gport_t,bcm_rsvd4_tx_frame_config_t *);
	int (*cpri_port_rsvd4_tx_frame_config_set)(int,bcm_gport_t,bcm_rsvd4_tx_frame_config_t *);
	int (*cpri_port_rsvd4_tx_fsm_control_get)(int,bcm_gport_t,bcm_rsvd4_tx_fsm_control_t,uint32 *);
	int (*cpri_port_rsvd4_tx_fsm_control_set)(int,bcm_gport_t,bcm_rsvd4_tx_fsm_control_t,uint32);
	int (*cpri_port_rsvd4_tx_fsm_state_set)(int,bcm_gport_t,bcm_rsvd4_tx_fsm_state_t);
	int (*cpri_port_rsvd4_tx_modulo_rule_entry_get)(int,bcm_gport_t,uint32,bcm_cpri_tx_rule_type_t,bcm_cpri_modulo_rule_entry_t *);
	int (*cpri_port_rsvd4_tx_modulo_rule_entry_set)(int,bcm_gport_t,uint32,bcm_cpri_tx_rule_type_t,bcm_cpri_modulo_rule_entry_t *);
	int (*cpri_port_rsvd4_tx_override_set)(int,bcm_gport_t,bcm_rsvd4_tx_params_t,int,int);
	int (*cpri_port_rsvd4_tx_position_entry_get)(int,bcm_gport_t,uint32,bcm_cpri_dbm_position_entry_t *);
	int (*cpri_port_rsvd4_tx_position_entry_set)(int,bcm_gport_t,uint32,bcm_cpri_dbm_position_entry_t *);
	int (*cpri_port_rx_axc_frame_add)(int,bcm_gport_t,int,bcm_cpri_axc_frame_info_t *);
	int (*cpri_port_rx_axc_frame_delete)(int,bcm_gport_t,int);
	int (*cpri_port_rx_axc_frame_get)(int,bcm_gport_t,int,bcm_cpri_axc_frame_info_t *);
	int (*cpri_port_rx_axc_frame_get_all)(int,bcm_gport_t,int,bcm_cpri_axc_frame_info_t *,int *);
	int (*cpri_port_rx_cw_gcw_config_get)(int,int,uint8,bcm_cpri_rx_gcw_config_info_t *);
	int (*cpri_port_rx_cw_gcw_config_set)(int,int,uint8,bcm_cpri_rx_gcw_config_info_t *);
	int (*cpri_port_rx_cw_gcw_word_get)(int,bcm_port_t,int,uint16 *);
	int (*cpri_port_rx_cw_l1_inband_info_get)(int,int,bcm_cpri_cw_l1_inband_info_t *);
	int (*cpri_port_rx_cw_l1_signal_protection_get)(int,int,uint32,uint32 *);
	int (*cpri_port_rx_cw_l1_signal_protection_set)(int,int,uint32,uint32);
	int (*cpri_port_rx_cw_rsvd5_config_get)(int,int,bcm_cpri_rx_rsvd5_config_info_t *);
	int (*cpri_port_rx_cw_rsvd5_config_set)(int,int,bcm_cpri_rx_rsvd5_config_info_t *);
	int (*cpri_port_rx_cw_sync_info_get)(int,int,uint32 *,uint32 *);
	int (*cpri_port_rx_cw_vsd_config_get)(int,int,bcm_cpri_rx_vsd_config_info_t *);
	int (*cpri_port_rx_cw_vsd_config_set)(int,int,bcm_cpri_rx_vsd_config_info_t *);
	int (*cpri_port_rx_cw_vsd_ctrl_flow_add)(int,int,uint16,bcm_cpri_rx_vsd_flow_info_t *);
	int (*cpri_port_rx_cw_vsd_ctrl_flow_delete)(int,int,uint16);
	int (*cpri_port_rx_cw_vsd_ctrl_flow_get)(int,int,uint16,bcm_cpri_rx_vsd_flow_info_t *);
	int (*cpri_port_rx_cw_vsd_raw_config_get)(int,int,uint8,bcm_cpri_rx_vsd_raw_config_info_t *);
	int (*cpri_port_rx_cw_vsd_raw_config_set)(int,int,uint8,bcm_cpri_rx_vsd_raw_config_info_t *);
	int (*cpri_port_rx_pipeline_clear)(int,bcm_gport_t);
	int (*cpri_port_rx_speed_get)(int,bcm_gport_t,bcm_cpri_port_type_t *,bcm_cpri_port_speed_t *);
	int (*cpri_port_rx_speed_set)(int,bcm_gport_t,bcm_cpri_port_type_t,bcm_cpri_port_speed_t);
	int (*cpri_port_rx_tag_config_set)(int,int,bcm_cpri_control_tag_config_t *);
	int (*cpri_port_rx_tag_entry_add)(int,int,bcm_cpri_tag_gen_entry_t *);
	int (*cpri_port_rx_tag_entry_delete)(int,int,bcm_cpri_tag_gen_entry_t *);
	int (*cpri_port_stat_get)(int,bcm_gport_t,bcm_cpri_stat_type_t,uint64 *);
	int (*cpri_port_tunnel_mode_config_get)(int,bcm_port_t,bcm_cpri_dir_t,int *,bcm_cpri_port_tunnel_config_t *);
	int (*cpri_port_tunnel_mode_config_set)(int,bcm_port_t,bcm_cpri_dir_t,int,bcm_cpri_port_tunnel_config_t *);
	int (*cpri_port_tx_axc_frame_add)(int,bcm_gport_t,int,bcm_cpri_axc_frame_info_t *);
	int (*cpri_port_tx_axc_frame_delete)(int,bcm_gport_t,int);
	int (*cpri_port_tx_axc_frame_get)(int,bcm_gport_t,int,bcm_cpri_axc_frame_info_t *);
	int (*cpri_port_tx_axc_frame_get_all)(int,bcm_gport_t,int,bcm_cpri_axc_frame_info_t *,int *);
	int (*cpri_port_tx_cw_gcw_config_get)(int,int,uint8,bcm_cpri_tx_gcw_config_info_t *);
	int (*cpri_port_tx_cw_gcw_config_set)(int,int,uint8,bcm_cpri_tx_gcw_config_info_t *);
	int (*cpri_port_tx_cw_gcw_filter_get)(int,int,bcm_cpri_tx_gcw_tx_filter_info_t *);
	int (*cpri_port_tx_cw_gcw_filter_set)(int,int,bcm_cpri_tx_gcw_tx_filter_info_t *);
	int (*cpri_port_tx_cw_gcw_word_set)(int,bcm_port_t,int,uint16);
	int (*cpri_port_tx_cw_l1_inband_info_get)(int,int,bcm_cpri_cw_l1_inband_info_t *);
	int (*cpri_port_tx_cw_l1_inband_info_set)(int,int,bcm_cpri_cw_l1_inband_info_t *);
	int (*cpri_port_tx_cw_rsvd5_config_get)(int,int,bcm_cpri_tx_cw_rsvd5_config_info_t *);
	int (*cpri_port_tx_cw_rsvd5_config_set)(int,int,bcm_cpri_tx_cw_rsvd5_config_info_t *);
	int (*cpri_port_tx_cw_sync_info_get)(int,int,bcm_cpri_cw_sync_info_t *);
	int (*cpri_port_tx_cw_sync_info_set)(int,int,bcm_cpri_cw_sync_info_t *);
	int (*cpri_port_tx_cw_vsd_config_get)(int,int,bcm_cpri_tx_vsd_config_info_t *);
	int (*cpri_port_tx_cw_vsd_config_set)(int,int,bcm_cpri_tx_vsd_config_info_t *);
	int (*cpri_port_tx_cw_vsd_ctrl_flow_add)(int,int,uint16,bcm_cpri_tx_vsd_flow_info_t *);
	int (*cpri_port_tx_cw_vsd_ctrl_flow_delete)(int,int,uint16);
	int (*cpri_port_tx_cw_vsd_ctrl_flow_get)(int,int,uint16,bcm_cpri_tx_vsd_flow_info_t *);
	int (*cpri_port_tx_cw_vsd_raw_filter_get)(int,int,bcm_cpri_tx_cw_vsd_raw_filter_info_t *);
	int (*cpri_port_tx_cw_vsd_raw_filter_set)(int,int,bcm_cpri_tx_cw_vsd_raw_filter_info_t *);
	int (*cpri_port_tx_cw_vsd_raw_flow_config_get)(int,int,uint8,bcm_cpri_tx_vsd_raw_config_info_t *);
	int (*cpri_port_tx_cw_vsd_raw_flow_config_set)(int,int,uint8,bcm_cpri_tx_vsd_raw_config_info_t *);
	int (*cpri_port_tx_enable_get)(int,bcm_gport_t,int *);
	int (*cpri_port_tx_enable_set)(int,bcm_gport_t,int);
	int (*cpri_port_tx_frame_tgen_config_set)(int,bcm_gport_t,int,bcm_cpri_tx_frame_tgen_config_t *);
	int (*cpri_port_tx_pipeline_clear)(int,bcm_gport_t);
	int (*cpri_port_tx_speed_get)(int,bcm_gport_t,bcm_cpri_port_type_t *,bcm_cpri_port_speed_t *);
	int (*cpri_port_tx_speed_set)(int,bcm_gport_t,bcm_cpri_port_type_t,bcm_cpri_port_speed_t);
	int (*cpri_rsvd1_msg_get)(int,bcm_cpri_rsvd1_msg_t *);
	int (*cpri_speed_scan_callback_register)(int,bcm_cpri_speed_scan_handler_t,void *);
	int (*cpri_speed_scan_callback_unregister)(int,bcm_cpri_speed_scan_handler_t);
	int (*cpri_speed_scan_config_get)(int,int *,int *);
	int (*cpri_speed_scan_config_set)(int,int,int);
	int (*cpri_speed_scan_init)(int);
	int (*cpri_speed_scan_port_config_add)(int,bcm_port_t,bcm_cpri_port_speed_t *,int);
	int (*cpri_speed_scan_port_config_delete)(int,bcm_port_t);
	int (*cpri_speed_scan_port_config_get)(int,bcm_port_t,bcm_cpri_port_speed_t *,int,int *);
	int (*custom_port_get)(int,bcm_port_t,int,int,uint32 *,int *);
	int (*custom_port_set)(int,bcm_port_t,int,int,uint32 *);
	int (*custom_register)(int,bcm_custom_cb_t,void *);
	int (*custom_unregister)(int);
	/* bcm_detach not dispatchable */
	/* bcm_detach_late_txrx not dispatchable */
	/* bcm_detach_retry_get not dispatchable */
	/* bcm_detach_retry_set not dispatchable */
	/* bcm_detach_retry_t_init not dispatchable */
	int (*device_member_get)(int,uint32,bcm_device_member_t,int *);
	int (*eav_bandwidth_get)(int,bcm_port_t,bcm_eav_stream_class_t,uint32 *,uint32 *);
	int (*eav_bandwidth_set)(int,bcm_port_t,bcm_eav_stream_class_t,uint32,uint32);
	int (*eav_control_get)(int,bcm_eav_control_t,uint32 *,uint32 *);
	int (*eav_control_set)(int,bcm_eav_control_t,uint32,uint32);
	int (*eav_init)(int);
	int (*eav_link_status_get)(int,bcm_port_t,int *);
	int (*eav_link_status_set)(int,bcm_port_t,int);
	int (*eav_pcp_mapping_get)(int,bcm_eav_stream_class_t,int *,int *);
	int (*eav_pcp_mapping_set)(int,bcm_eav_stream_class_t,int,int);
	int (*eav_port_enable_get)(int,bcm_port_t,int *);
	int (*eav_port_enable_set)(int,bcm_port_t,int);
	int (*eav_srp_mac_ethertype_get)(int,bcm_mac_t,bcm_port_ethertype_t *);
	int (*eav_srp_mac_ethertype_set)(int,bcm_mac_t,bcm_port_ethertype_t);
	int (*eav_timestamp_get)(int,bcm_port_t,uint32 *);
	int (*eav_timesync_mac_get)(int,bcm_mac_t);
	int (*eav_timesync_mac_set)(int,bcm_mac_t);
#ifdef	INCLUDE_L3
	int (*ecn_map_create)(int,uint32,int *);
	int (*ecn_map_destroy)(int,int);
	int (*ecn_map_get)(int,int,bcm_ecn_map_t *);
	int (*ecn_map_mode_get)(int,bcm_ecn_map_mode_t *);
	int (*ecn_map_mode_set)(int,bcm_ecn_map_mode_t *);
	/* bcm_ecn_map_mode_t_init not dispatchable */
	int (*ecn_map_set)(int,uint32,int,bcm_ecn_map_t *);
	/* bcm_ecn_map_t_init not dispatchable */
	int (*ecn_port_map_get)(int,bcm_gport_t,bcm_ecn_port_map_t *);
	int (*ecn_port_map_set)(int,bcm_gport_t,bcm_ecn_port_map_t *);
	/* bcm_ecn_port_map_t_init not dispatchable */
#endif	/* INCLUDE_L3 */
	int (*ecn_responsive_protocol_get)(int,uint8,int *);
	int (*ecn_responsive_protocol_set)(int,uint8,int);
	int (*ecn_traffic_action_config_get)(int,bcm_ecn_traffic_action_config_t *);
	int (*ecn_traffic_action_config_set)(int,bcm_ecn_traffic_action_config_t *);
	/* bcm_ecn_traffic_action_config_t_init not dispatchable */
	int (*ecn_traffic_map_get)(int,bcm_ecn_traffic_map_info_t *);
	/* bcm_ecn_traffic_map_info_t_init not dispatchable */
	int (*ecn_traffic_map_set)(int,bcm_ecn_traffic_map_info_t *);
	int (*ecn_type_map_get)(int,uint32,bcm_ecn_type_map_t *);
	int (*ecn_type_map_set)(int,uint32,bcm_ecn_type_map_t *);
	/* bcm_ecn_type_map_t_init not dispatchable */
	int (*ecn_type_map_traverse)(int,uint32,bcm_ecn_type_map_traverse_cb,void *);
#ifdef	INCLUDE_PTP
	int (*esmc_QL_SSM_map)(int,bcm_esmc_network_option_t,bcm_esmc_quality_level_t,uint8 *);
	int (*esmc_SSM_QL_map)(int,bcm_esmc_network_option_t,uint8,bcm_esmc_quality_level_t *);
	int (*esmc_g781_option_get)(int,int,bcm_esmc_network_option_t *);
	int (*esmc_g781_option_set)(int,int,bcm_esmc_network_option_t);
	int (*esmc_rx_callback_register)(int,int,bcm_esmc_rx_cb);
	int (*esmc_rx_callback_unregister)(int,int);
	int (*esmc_tunnel_get)(int,int,int *);
	int (*esmc_tunnel_set)(int,int,int);
	int (*esmc_tx)(int,int,bcm_pbmp_t,bcm_esmc_pdu_data_t *);
#endif	/* INCLUDE_PTP */
#ifdef	INCLUDE_L3
	int (*extender_cleanup)(int);
	int (*extender_egress_add)(int,bcm_gport_t,bcm_extender_egress_t *);
	int (*extender_egress_delete)(int,bcm_gport_t,bcm_extender_egress_t *);
	int (*extender_egress_delete_all)(int,bcm_gport_t);
	int (*extender_egress_get)(int,bcm_gport_t,bcm_extender_egress_t *);
	int (*extender_egress_get_all)(int,bcm_gport_t,int,bcm_extender_egress_t *,int *);
	int (*extender_egress_set)(int,bcm_gport_t,int,bcm_extender_egress_t *);
	/* bcm_extender_egress_t_init not dispatchable */
	int (*extender_encap_create)(int,bcm_extender_encap_t *);
	int (*extender_encap_destroy)(int,bcm_gport_t *);
	int (*extender_encap_destroy_all)(int);
	int (*extender_encap_get)(int,bcm_extender_encap_t *);
	/* bcm_extender_encap_t_init not dispatchable */
	int (*extender_encap_traverse)(int,bcm_extender_encap_traverse_cb,void *);
	int (*extender_forward_add)(int,bcm_extender_forward_t *);
	int (*extender_forward_delete)(int,bcm_extender_forward_t *);
	int (*extender_forward_delete_all)(int);
	int (*extender_forward_get)(int,bcm_extender_forward_t *);
	/* bcm_extender_forward_t_init not dispatchable */
	int (*extender_forward_traverse)(int,bcm_extender_forward_traverse_cb,void *);
	int (*extender_init)(int);
	int (*extender_port_add)(int,bcm_extender_port_t *);
	int (*extender_port_delete)(int,bcm_gport_t);
	int (*extender_port_delete_all)(int);
	int (*extender_port_get)(int,bcm_extender_port_t *);
	/* bcm_extender_port_t_init not dispatchable */
	int (*extender_port_traverse)(int,bcm_extender_port_traverse_cb,void *);
#endif	/* INCLUDE_L3 */
	int (*fabric_action_create)(int,bcm_fabric_action_info_t *,bcm_fabric_action_t *);
	int (*fabric_action_destroy)(int,bcm_fabric_action_t);
	int (*fabric_action_destroy_all)(int);
	int (*fabric_action_get)(int,bcm_fabric_action_t,bcm_fabric_action_info_t *);
	/* bcm_fabric_action_info_t_init not dispatchable */
	int (*fabric_action_traverse)(int,bcm_fabric_action_traverse_cb,void *);
	int (*fabric_bandwidth_core_profile_get)(int,int,uint32,int,bcm_fabric_bandwidth_profile_t *);
	int (*fabric_bandwidth_core_profile_set)(int,int,uint32,int,bcm_fabric_bandwidth_profile_t *);
	int (*fabric_bandwidth_profile_get)(int,int,bcm_fabric_bandwidth_profile_t *);
	int (*fabric_bandwidth_profile_set)(int,int,bcm_fabric_bandwidth_profile_t *);
	int (*fabric_cgm_control_get)(int,uint32,bcm_fabric_cgm_control_type_t,bcm_fabric_cgm_control_id_t,int *);
	int (*fabric_cgm_control_set)(int,uint32,bcm_fabric_cgm_control_type_t,bcm_fabric_cgm_control_id_t,int);
	int (*fabric_config_discard_get)(int,bcm_fabric_config_discard_t *);
	int (*fabric_config_discard_set)(int,bcm_fabric_config_discard_t *);
	int (*fabric_control_get)(int,bcm_fabric_control_t,int *);
	int (*fabric_control_set)(int,bcm_fabric_control_t,int);
	int (*fabric_destination_link_min_get)(int,uint32,bcm_module_t,int *);
	int (*fabric_destination_link_min_set)(int,uint32,bcm_module_t,int);
	int (*fabric_init)(int);
	int (*fabric_link_connectivity_status_get)(int,int,bcm_fabric_link_connectivity_t *,int *);
	int (*fabric_link_connectivity_status_single_get)(int,bcm_port_t,bcm_fabric_link_connectivity_t *);
	int (*fabric_link_control_get)(int,bcm_port_t,bcm_fabric_link_control_t,int *);
	int (*fabric_link_control_set)(int,bcm_port_t,bcm_fabric_link_control_t,int);
	int (*fabric_link_profile_get)(int,int,uint32,uint32,uint32 *,bcm_port_t *);
	int (*fabric_link_profile_set)(int,int,uint32,uint32,bcm_port_t *);
	int (*fabric_link_remote_pipe_mapping_get)(int,bcm_port_t,bcm_fabric_link_remote_pipe_mapping_t *);
	int (*fabric_link_remote_pipe_mapping_set)(int,bcm_port_t,bcm_fabric_link_remote_pipe_mapping_t *);
	/* bcm_fabric_link_remote_pipe_mapping_t_init not dispatchable */
	int (*fabric_link_status_get)(int,bcm_port_t,uint32 *,uint32 *);
	int (*fabric_link_threshold_add)(int,uint32,int *);
	int (*fabric_link_threshold_delete)(int,int);
	int (*fabric_link_thresholds_attach)(int,int,uint32,bcm_port_t *);
	int (*fabric_link_thresholds_get)(int,int,uint32,bcm_fabric_link_threshold_type_t *,int *);
	int (*fabric_link_thresholds_pipe_get)(int,int,bcm_fabric_pipe_t,uint32,uint32,bcm_fabric_link_threshold_type_t *,int *);
	int (*fabric_link_thresholds_pipe_set)(int,int,bcm_fabric_pipe_t,uint32,uint32,bcm_fabric_link_threshold_type_t *,int *);
	int (*fabric_link_thresholds_retrieve)(int,int,uint32,bcm_port_t *,uint32 *);
	int (*fabric_link_thresholds_set)(int,int,uint32,bcm_fabric_link_threshold_type_t *,int *);
	int (*fabric_link_topology_config_get)(int,uint32,bcm_module_t,bcm_fabric_topology_type_t,int,int *,bcm_port_t *);
	int (*fabric_link_topology_config_set)(int,uint32,bcm_module_t,bcm_fabric_topology_type_t,int,bcm_port_t *);
	int (*fabric_link_topology_get)(int,bcm_module_t,int,int *,bcm_port_t *);
	int (*fabric_link_topology_set)(int,bcm_module_t,int,bcm_port_t *);
	int (*fabric_modid_group_find)(int,bcm_module_t,bcm_module_t *);
	int (*fabric_modid_group_get)(int,bcm_module_t,int,bcm_module_t *,int *);
	int (*fabric_modid_group_set)(int,bcm_module_t,int,bcm_module_t *);
	int (*fabric_modid_local_mapping_get)(int,bcm_module_t,bcm_module_t *);
	int (*fabric_modid_local_mapping_set)(int,bcm_module_t,bcm_module_t);
	int (*fabric_module_control_get)(int,uint32,bcm_module_t,bcm_fabric_module_control_t,int *);
	int (*fabric_module_control_set)(int,uint32,bcm_module_t,bcm_fabric_module_control_t,int);
	int (*fabric_multicast_get)(int,bcm_multicast_t,uint32,int,int *,bcm_module_t *);
	int (*fabric_multicast_local_route_get)(int,uint32,uint32,bcm_multicast_t *,int *);
	int (*fabric_multicast_local_route_set)(int,uint32,uint32,bcm_multicast_t *,int *);
	int (*fabric_multicast_multi_get)(int,uint32,uint32,bcm_multicast_t *,bcm_fabric_module_vector_t *);
	int (*fabric_multicast_multi_set)(int,uint32,uint32,bcm_multicast_t *,bcm_fabric_module_vector_t *);
	int (*fabric_multicast_set)(int,bcm_multicast_t,uint32,uint32,bcm_module_t *);
	int (*fabric_pcp_dest_mode_config_get)(int,uint32,bcm_module_t,bcm_fabric_pcp_mode_config_t *);
	int (*fabric_pcp_dest_mode_config_set)(int,uint32,bcm_module_t,bcm_fabric_pcp_mode_config_t *);
	int (*fabric_port_create)(int,bcm_gport_t,int,uint32,bcm_gport_t *);
	int (*fabric_port_destroy)(int,bcm_gport_t);
	int (*fabric_port_get)(int,bcm_gport_t,uint32,bcm_gport_t *);
	int (*fabric_predicate_action_create)(int,bcm_fabric_predicate_action_info_t *,bcm_fabric_predicate_action_t *);
	int (*fabric_predicate_action_destroy)(int,bcm_fabric_predicate_action_t);
	int (*fabric_predicate_action_destroy_all)(int);
	int (*fabric_predicate_action_get)(int,bcm_fabric_predicate_action_t,bcm_fabric_predicate_action_info_t *);
	/* bcm_fabric_predicate_action_info_t_init not dispatchable */
	int (*fabric_predicate_action_traverse)(int,bcm_fabric_predicate_action_traverse_cb,void *);
	int (*fabric_predicate_create)(int,bcm_fabric_predicate_info_t *,bcm_fabric_predicate_t *);
	int (*fabric_predicate_destroy)(int,bcm_fabric_predicate_t);
	int (*fabric_predicate_destroy_all)(int);
	int (*fabric_predicate_get)(int,bcm_fabric_predicate_t,bcm_fabric_predicate_info_t *);
	/* bcm_fabric_predicate_info_t_init not dispatchable */
	int (*fabric_predicate_traverse)(int,bcm_fabric_predicate_traverse_cb,void *);
	int (*fabric_priority_get)(int,uint32,bcm_cos_t,bcm_color_t,int *);
	int (*fabric_priority_set)(int,uint32,bcm_cos_t,bcm_color_t,int);
	int (*fabric_profile_threshold_get)(int,int,bcm_fabric_threshold_id_t,bcm_fabric_threshold_type_t,uint32,int *);
	int (*fabric_profile_threshold_set)(int,int,bcm_fabric_threshold_id_t,bcm_fabric_threshold_type_t,uint32,int);
	int (*fabric_qsel_create)(int,uint32,int,int,bcm_fabric_qsel_t *);
	int (*fabric_qsel_destroy)(int,bcm_fabric_qsel_t);
	int (*fabric_qsel_destroy_all)(int);
	int (*fabric_qsel_entry_get)(int,bcm_fabric_qsel_t,int,bcm_gport_t *,bcm_fabric_qsel_offset_t *);
	int (*fabric_qsel_entry_multi_get)(int,bcm_fabric_qsel_t,int,int,bcm_gport_t *,bcm_fabric_qsel_offset_t *);
	int (*fabric_qsel_entry_multi_set)(int,bcm_fabric_qsel_t,int,int,bcm_gport_t *,bcm_fabric_qsel_offset_t *);
	int (*fabric_qsel_entry_set)(int,bcm_fabric_qsel_t,int,bcm_gport_t,bcm_fabric_qsel_offset_t);
	int (*fabric_qsel_entry_traverse)(int,bcm_fabric_qsel_t,bcm_fabric_qsel_entry_traverse_cb,void *);
	int (*fabric_qsel_get)(int,bcm_fabric_qsel_t,uint32 *,int *,int *);
	int (*fabric_qsel_offset_create)(int,uint32,bcm_fabric_qsel_offset_t *);
	int (*fabric_qsel_offset_destroy)(int,bcm_fabric_qsel_offset_t);
	int (*fabric_qsel_offset_destroy_all)(int);
	int (*fabric_qsel_offset_entry_get)(int,bcm_fabric_qsel_offset_t,bcm_cos_t,int *);
	int (*fabric_qsel_offset_entry_set)(int,bcm_fabric_qsel_offset_t,bcm_cos_t,int);
	int (*fabric_qsel_offset_entry_traverse)(int,bcm_fabric_qsel_offset_t,bcm_fabric_qsel_offset_entry_traverse_cb,void *);
	int (*fabric_qsel_offset_traverse)(int,bcm_fabric_qsel_offset_traverse_cb,void *);
	int (*fabric_qsel_traverse)(int,bcm_fabric_qsel_traverse_cb,void *);
	int (*fabric_rci_biasing_probability_get)(int,uint32,bcm_fabric_rci_biasing_probability_info_t *,int [BCM_FABRIC_NUM_OF_RCI_LEVELS]);
	int (*fabric_rci_biasing_probability_set)(int,uint32,bcm_fabric_rci_biasing_probability_info_t *,int [BCM_FABRIC_NUM_OF_RCI_LEVELS]);
	int (*fabric_rci_config_get)(int,bcm_fabric_rci_config_t *);
	int (*fabric_rci_config_set)(int,bcm_fabric_rci_config_t);
	/* bcm_fabric_rci_config_t_init not dispatchable */
	int (*fabric_rci_resolution_get)(int,uint32,bcm_fabric_rci_resolution_key_t *,bcm_fabric_rci_resolution_config_t *);
	int (*fabric_rci_resolution_set)(int,uint32,bcm_fabric_rci_resolution_key_t *,bcm_fabric_rci_resolution_config_t *);
	int (*fabric_reachability_status_get)(int,int,int,uint32 *,int *);
	int (*fabric_route_rx)(int,uint32,uint32,uint32 *,uint32 *);
	/* bcm_fabric_route_t_init not dispatchable */
	int (*fabric_route_tx)(int,uint32,bcm_fabric_route_t *,uint32,uint32 *);
	int (*fabric_stat_get)(int,uint32,bcm_fabric_stat_index_t,bcm_fabric_stat_t,uint64 *);
	int (*fabric_static_replication_set)(int,bcm_port_t,uint32,uint32,bcm_module_t *);
	int (*fabric_tdm_direct_routing_get)(int,bcm_gport_t,bcm_fabric_tdm_direct_routing_t *);
	int (*fabric_tdm_direct_routing_set)(int,bcm_gport_t,bcm_fabric_tdm_direct_routing_t *);
	int (*fabric_tdm_editing_get)(int,bcm_gport_t,bcm_fabric_tdm_editing_t *);
	int (*fabric_tdm_editing_set)(int,bcm_gport_t,bcm_fabric_tdm_editing_t *);
	/* bcm_fabric_tdm_editing_t_init not dispatchable */
#ifdef	INCLUDE_L3
	int (*failover_cleanup)(int);
	int (*failover_create)(int,uint32,bcm_failover_t *);
	int (*failover_destroy)(int,bcm_failover_t);
	int (*failover_egress_clear)(int,bcm_if_t);
	int (*failover_egress_get)(int,bcm_if_t,bcm_l3_egress_t *);
	int (*failover_egress_protection_get)(int,bcm_if_t,bcm_if_t *);
	int (*failover_egress_set)(int,bcm_if_t,bcm_l3_egress_t *);
	int (*failover_egress_status_get)(int,bcm_if_t,int *);
	int (*failover_egress_status_set)(int,bcm_if_t,int);
	/* bcm_failover_element_t_init not dispatchable */
	int (*failover_get)(int,bcm_failover_t,int *);
	int (*failover_init)(int);
	int (*failover_multi_level_attach)(int,bcm_failover_multi_level_t);
	/* bcm_failover_multi_level_t_init not dispatchable */
#endif	/* INCLUDE_L3 */
	int (*failover_ring_config_get)(int,bcm_failover_ring_t *);
	int (*failover_ring_config_set)(int,bcm_failover_ring_t *);
	/* bcm_failover_ring_t_init not dispatchable */
#ifdef	INCLUDE_L3
	int (*failover_set)(int,bcm_failover_t,int);
	int (*failover_status_get)(int,bcm_failover_element_t *,int *);
	int (*failover_status_set)(int,bcm_failover_element_t *,int);
#endif	/* INCLUDE_L3 */
#ifdef	INCLUDE_FCMAP
	int (*fcmap_diag_get)(int,bcm_port_t,bcm_fcmap_diag_code_t *);
	int (*fcmap_event_enable_get)(int,bcm_fcmap_event_t,int *);
	int (*fcmap_event_enable_set)(int,bcm_fcmap_event_t,int);
	int (*fcmap_event_register)(int,bcm_fcmap_event_cb,void *);
	int (*fcmap_event_unregister)(int,bcm_fcmap_event_cb);
	int (*fcmap_linkfault_trigger_rc_get)(int,bcm_port_t,bcm_fcmap_lf_tr_t *,bcm_fcmap_lf_rc_t *);
	int (*fcmap_port_ability_advert_get)(int,bcm_port_t,bcm_fcmap_port_ability_t *);
	int (*fcmap_port_ability_advert_set)(int,bcm_port_t,bcm_fcmap_port_ability_t *);
	int (*fcmap_port_config_get)(int,bcm_port_t,bcm_fcmap_port_config_t *);
	int (*fcmap_port_config_selective_get)(int,bcm_port_t,bcm_fcmap_port_config_t *);
	int (*fcmap_port_config_selective_set)(int,bcm_port_t,bcm_fcmap_port_config_t *);
	int (*fcmap_port_config_set)(int,bcm_port_t,bcm_fcmap_port_config_t *);
	int (*fcmap_port_enable)(int,bcm_port_t);
	int (*fcmap_port_link_reset)(int,bcm_port_t);
	int (*fcmap_port_shutdown)(int,bcm_port_t);
	int (*fcmap_port_speed_set)(int,bcm_port_t,bcm_fcmap_port_speed_t);
	int (*fcmap_port_traverse)(int,bcm_fcmap_port_traverse_cb,void *);
	int (*fcmap_stat_clear)(int,bcm_port_t);
	int (*fcmap_stat_get)(int,bcm_port_t,bcm_fcmap_stat_t,uint64 *);
	int (*fcmap_stat_get32)(int,bcm_port_t,bcm_fcmap_stat_t,uint32 *);
	int (*fcmap_vlan_map_add)(int,bcm_port_t,bcm_fcmap_vlan_vsan_map_t *);
	int (*fcmap_vlan_map_delete)(int,bcm_port_t,bcm_fcmap_vlan_vsan_map_t *);
	int (*fcmap_vlan_map_get)(int,bcm_port_t,bcm_fcmap_vlan_vsan_map_t *);
#endif	/* INCLUDE_FCMAP */
	int (*fcoe_cleanup)(int);
	int (*fcoe_control_vsan_get)(int,bcm_fcoe_vsan_id_t,bcm_fcoe_vsan_control_t,int *);
	int (*fcoe_control_vsan_set)(int,bcm_fcoe_vsan_id_t,bcm_fcoe_vsan_control_t,int);
	int (*fcoe_enable_set)(int);
	int (*fcoe_fc_header_type_get)(int,uint32,uint8,bcm_fcoe_fc_header_type_t *);
	int (*fcoe_fc_header_type_set)(int,uint32,uint8,bcm_fcoe_fc_header_type_t);
	int (*fcoe_init)(int);
	int (*fcoe_intf_config_get)(int,uint32,bcm_if_t,bcm_fcoe_intf_config_t *);
	int (*fcoe_intf_config_set)(int,uint32,bcm_if_t,bcm_fcoe_intf_config_t *);
	/* bcm_fcoe_intf_config_t_init not dispatchable */
	int (*fcoe_route_add)(int,bcm_fcoe_route_t *);
	int (*fcoe_route_delete)(int,bcm_fcoe_route_t *);
	int (*fcoe_route_delete_all)(int);
	int (*fcoe_route_delete_by_interface)(int,bcm_fcoe_route_t *);
	int (*fcoe_route_delete_by_prefix)(int,bcm_fcoe_route_t *);
	int (*fcoe_route_find)(int,bcm_fcoe_route_t *);
	int (*fcoe_route_stat_attach)(int,bcm_fcoe_route_t *,uint32);
	int (*fcoe_route_stat_counter_get)(int,bcm_fcoe_route_t *,bcm_fcoe_route_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*fcoe_route_stat_counter_set)(int,bcm_fcoe_route_t *,bcm_fcoe_route_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*fcoe_route_stat_counter_sync_get)(int,bcm_fcoe_route_t *,bcm_fcoe_route_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*fcoe_route_stat_detach)(int,bcm_fcoe_route_t *);
	int (*fcoe_route_stat_id_get)(int,bcm_fcoe_route_t *,bcm_fcoe_route_stat_t,uint32 *);
	/* bcm_fcoe_route_t_init not dispatchable */
	int (*fcoe_route_traverse)(int,uint32,bcm_fcoe_route_traverse_cb,void *);
	/* bcm_fcoe_vsan_action_set_t_init not dispatchable */
	int (*fcoe_vsan_create)(int,uint32,bcm_fcoe_vsan_t *,bcm_fcoe_vsan_id_t *);
	int (*fcoe_vsan_destroy)(int,bcm_fcoe_vsan_id_t);
	int (*fcoe_vsan_destroy_all)(int);
	int (*fcoe_vsan_get)(int,bcm_fcoe_vsan_id_t,bcm_fcoe_vsan_t *);
	int (*fcoe_vsan_set)(int,bcm_fcoe_vsan_id_t,bcm_fcoe_vsan_t *);
	int (*fcoe_vsan_stat_attach)(int,bcm_fcoe_vsan_id_t,uint32);
	int (*fcoe_vsan_stat_counter_get)(int,bcm_fcoe_vsan_id_t,bcm_fcoe_vsan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*fcoe_vsan_stat_counter_set)(int,bcm_fcoe_vsan_id_t,bcm_fcoe_vsan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*fcoe_vsan_stat_counter_sync_get)(int,bcm_fcoe_vsan_id_t,bcm_fcoe_vsan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*fcoe_vsan_stat_detach)(int,bcm_fcoe_vsan_id_t);
	int (*fcoe_vsan_stat_id_get)(int,bcm_fcoe_vsan_id_t,bcm_fcoe_vsan_stat_t,uint32 *);
	/* bcm_fcoe_vsan_t_init not dispatchable */
	int (*fcoe_vsan_translate_action_add)(int,bcm_fcoe_vsan_translate_key_config_t *,bcm_fcoe_vsan_action_set_t *);
	int (*fcoe_vsan_translate_action_delete)(int,bcm_fcoe_vsan_translate_key_config_t *);
	/* bcm_fcoe_vsan_translate_key_config_t_init not dispatchable */
	int (*fcoe_vsan_traverse)(int,uint32,bcm_fcoe_vsan_traverse_cb,void *);
	/* bcm_fcoe_vsan_vft_t_init not dispatchable */
	int (*fcoe_zone_add)(int,bcm_fcoe_zone_entry_t *);
	int (*fcoe_zone_delete)(int,bcm_fcoe_zone_entry_t *);
	int (*fcoe_zone_delete_all)(int);
	int (*fcoe_zone_delete_by_did)(int,bcm_fcoe_zone_entry_t *);
	int (*fcoe_zone_delete_by_sid)(int,bcm_fcoe_zone_entry_t *);
	int (*fcoe_zone_delete_by_vsan)(int,bcm_fcoe_zone_entry_t *);
	/* bcm_fcoe_zone_entry_t_init not dispatchable */
	int (*fcoe_zone_get)(int,bcm_fcoe_zone_entry_t *);
	int (*fcoe_zone_traverse)(int,uint32,bcm_fcoe_zone_traverse_cb,void *);
	int (*field_ace_entry_add)(int,uint32,bcm_field_ace_format_t,bcm_field_ace_entry_info_t *,uint32 *);
	int (*field_ace_entry_delete)(int,uint32);
	int (*field_ace_entry_info_get)(int,uint32,bcm_field_ace_entry_info_t *);
	/* bcm_field_ace_entry_info_t_init not dispatchable */
	int (*field_ace_format_add)(int,uint32,bcm_field_ace_format_info_t *,bcm_field_ace_format_t *);
	int (*field_ace_format_delete)(int,bcm_field_ace_format_t);
	int (*field_ace_format_info_get)(int,bcm_field_ace_format_t,bcm_field_ace_format_info_t *);
	/* bcm_field_ace_format_info_t_init not dispatchable */
	int (*field_action_add)(int,bcm_field_entry_t,bcm_field_action_t,uint32,uint32);
	int (*field_action_class_add)(int,bcm_field_entry_t,bcm_field_class_info_t *);
	int (*field_action_class_get)(int,bcm_field_entry_t,bcm_field_class_info_t *);
	int (*field_action_config_add)(int,bcm_field_entry_t,bcm_field_action_t,int,bcm_field_action_core_config_t *);
	int (*field_action_config_get)(int,bcm_field_entry_t,bcm_field_action_t,int,bcm_field_action_core_config_t *);
	int (*field_action_config_info_add)(int,bcm_field_entry_t,bcm_field_action_t,bcm_field_action_params_t *,bcm_field_action_match_config_t *);
	int (*field_action_config_info_get)(int,bcm_field_entry_t,bcm_field_action_t,bcm_field_action_params_t *,bcm_field_action_match_config_t *);
	int (*field_action_cont_info_get)(int,bcm_field_stage_t,bcm_field_action_t,uint8,uint16 *,uint16 *,uint8 *,uint8 *);
	int (*field_action_copytocpu_config_get)(int,bcm_field_entry_t,bcm_field_CopyToCpu_config_t *);
	int (*field_action_copytocpu_config_set)(int,bcm_field_entry_t,bcm_field_CopyToCpu_config_t);
	int (*field_action_create)(int,uint32,bcm_field_action_info_t *,bcm_field_action_t *);
	int (*field_action_delete)(int,bcm_field_entry_t,bcm_field_action_t,uint32,uint32);
	int (*field_action_destroy)(int,bcm_field_action_t);
	int (*field_action_get)(int,bcm_field_entry_t,bcm_field_action_t,uint32 *,uint32 *);
	int (*field_action_info_get)(int,bcm_field_action_t,bcm_field_stage_t,bcm_field_action_info_t *);
	/* bcm_field_action_info_t_init not dispatchable */
	int (*field_action_mac_add)(int,bcm_field_entry_t,bcm_field_action_t,bcm_mac_t);
	int (*field_action_mac_get)(int,bcm_field_entry_t,bcm_field_action_t,bcm_mac_t *);
	int (*field_action_ports_add)(int,bcm_field_entry_t,bcm_field_action_t,bcm_pbmp_t);
	int (*field_action_ports_get)(int,bcm_field_entry_t,bcm_field_action_t,bcm_pbmp_t *);
	int (*field_action_redirect_config_get)(int,bcm_field_entry_t,bcm_field_redirect_config_t *);
	int (*field_action_redirect_config_set)(int,bcm_field_entry_t,bcm_field_redirect_config_t);
	int (*field_action_remove)(int,bcm_field_entry_t,bcm_field_action_t);
	int (*field_action_remove_all)(int,bcm_field_entry_t);
	int (*field_action_value_map)(int,bcm_field_stage_t,bcm_field_action_t,uint32 [BCM_FIELD_ACTION_WIDTH_IN_WORDS],uint32 [BCM_FIELD_ACTION_WIDTH_IN_WORDS]);
	int (*field_action_vlan_actions_add)(int,bcm_field_entry_t,bcm_field_action_t,bcm_vlan_action_set_t *);
	int (*field_action_vlan_actions_get)(int,bcm_field_entry_t,bcm_field_action_t,bcm_vlan_action_set_t *);
	int (*field_action_width_get)(int,uint32,int,uint32 *);
	int (*field_action_width_set)(int,uint32,int,uint32);
	/* bcm_field_aset_t_init not dispatchable */
	/* bcm_field_class_info_t_init not dispatchable */
	int (*field_class_map_get)(int,bcm_field_stage_t,bcm_field_qualify_t,uint32,uint32 *,uint32 *);
	int (*field_class_map_set)(int,bcm_field_stage_t,bcm_field_qualify_t,uint32,uint32 *,uint32 *);
	int (*field_class_size_get)(int,bcm_field_qualify_t,uint16 *);
	int (*field_compare_operand_offset_get)(int,int,bcm_field_compare_operand_t,int *);
	int (*field_compression_direct_mapped_get)(int,bcm_field_compression_map_type_t,bcm_pbmp_t,uint16,uint16 *,uint16 *);
	int (*field_compression_direct_mapped_set)(int,bcm_field_compression_map_type_t,bcm_pbmp_t,uint16,uint16 *,uint16 *);
	int (*field_compression_index_mapped_get)(int,bcm_field_compression_map_type_t,uint16,bcm_pbmp_t,uint16 *,uint16 *);
	int (*field_compression_index_mapped_set)(int,bcm_field_compression_map_type_t,uint16,bcm_pbmp_t,uint16,uint16);
	int (*field_context_compare_create)(int,uint32,bcm_field_stage_t,bcm_field_context_t,uint32,bcm_field_context_compare_info_t *);
	int (*field_context_compare_destroy)(int,bcm_field_stage_t,bcm_field_context_t,uint32);
	int (*field_context_compare_info_get)(int,bcm_field_stage_t,bcm_field_context_t,uint32,bcm_field_context_compare_info_t *);
	/* bcm_field_context_compare_info_t_init not dispatchable */
	int (*field_context_create)(int,uint32,bcm_field_stage_t,bcm_field_context_info_t *,bcm_field_context_t *);
	int (*field_context_destroy)(int,bcm_field_stage_t,bcm_field_context_t);
	int (*field_context_hash_create)(int,uint32,bcm_field_stage_t,bcm_field_context_t,bcm_field_context_hash_info_t *);
	int (*field_context_hash_destroy)(int,bcm_field_stage_t,bcm_field_context_t);
	int (*field_context_hash_info_get)(int,bcm_field_stage_t,bcm_field_context_t,bcm_field_context_hash_info_t *);
	/* bcm_field_context_hash_info_t_init not dispatchable */
	int (*field_context_info_get)(int,bcm_field_stage_t,bcm_field_context_t,bcm_field_context_info_t *);
	/* bcm_field_context_info_t_init not dispatchable */
	/* bcm_field_context_param_info_t_init not dispatchable */
	int (*field_context_param_set)(int,uint32,bcm_field_stage_t,bcm_field_context_t,bcm_field_context_param_info_t *);
	int (*field_control_get)(int,bcm_field_control_t,uint32 *);
	int (*field_control_set)(int,bcm_field_control_t,uint32);
	/* bcm_field_copytocpu_config_t_init not dispatchable */
	/* bcm_field_data_ethertype_t_init not dispatchable */
	/* bcm_field_data_ip_protocol_t_init not dispatchable */
	/* bcm_field_data_packet_format_t_init not dispatchable */
	int (*field_data_qualifier_create)(int,bcm_field_data_qualifier_t *);
	int (*field_data_qualifier_destroy)(int,int);
	int (*field_data_qualifier_destroy_all)(int);
	int (*field_data_qualifier_ethertype_add)(int,int,bcm_field_data_ethertype_t *);
	int (*field_data_qualifier_ethertype_delete)(int,int,bcm_field_data_ethertype_t *);
	int (*field_data_qualifier_get)(int,int,bcm_field_data_qualifier_t *);
	int (*field_data_qualifier_ip_protocol_add)(int,int,bcm_field_data_ip_protocol_t *);
	int (*field_data_qualifier_ip_protocol_delete)(int,int,bcm_field_data_ip_protocol_t *);
	int (*field_data_qualifier_multi_get)(int,int,int *,int *);
	int (*field_data_qualifier_packet_format_add)(int,int,bcm_field_data_packet_format_t *);
	int (*field_data_qualifier_packet_format_delete)(int,int,bcm_field_data_packet_format_t *);
	/* bcm_field_data_qualifier_t_init not dispatchable */
	/* bcm_field_destination_action_t_init not dispatchable */
	int (*field_destination_entry_add)(int,uint32,bcm_field_destination_match_t *,bcm_field_destination_action_t *);
	int (*field_destination_entry_delete)(int,bcm_field_destination_match_t *);
	int (*field_destination_entry_get)(int,bcm_field_destination_match_t *,bcm_field_destination_action_t *);
	int (*field_destination_entry_traverse)(int,bcm_field_destination_entry_traverse_cb,void *);
	int (*field_destination_flexctr_object_get)(int,bcm_field_destination_match_t *,uint32 *);
	int (*field_destination_flexctr_object_set)(int,bcm_field_destination_match_t *,uint32);
	/* bcm_field_destination_match_t_init not dispatchable */
	int (*field_destination_stat_attach)(int,bcm_field_destination_match_t *,uint32);
	int (*field_destination_stat_detach)(int,bcm_field_destination_match_t *);
	int (*field_destination_stat_id_get)(int,bcm_field_destination_match_t *,uint32 *);
	int (*field_detach)(int);
	int (*field_direct_extraction_action_add)(int,bcm_field_entry_t,bcm_field_extraction_action_t,int,bcm_field_extraction_field_t *);
	int (*field_direct_extraction_action_get)(int,bcm_field_entry_t,bcm_field_extraction_action_t *,int,bcm_field_extraction_field_t *,int *);
	int (*field_efes_action_add)(int,uint32,bcm_field_group_t,bcm_field_context_t,bcm_field_action_priority_t *,bcm_field_efes_action_info_t *);
	int (*field_efes_action_delete)(int,bcm_field_group_t,bcm_field_context_t,bcm_field_action_priority_t);
	int (*field_efes_action_info_get)(int,bcm_field_group_t,bcm_field_context_t,bcm_field_action_priority_t,bcm_field_efes_action_info_t *);
	/* bcm_field_efes_action_info_t_init not dispatchable */
	int (*field_entry_add)(int,uint32,bcm_field_group_t,bcm_field_entry_info_t *,bcm_field_entry_t *);
	int (*field_entry_config_copy)(int,bcm_field_entry_t,bcm_field_entry_t *,uint32);
	int (*field_entry_config_create)(int,bcm_field_entry_config_t *);
	int (*field_entry_config_get)(int,bcm_field_entry_config_t *);
	/* bcm_field_entry_config_t_init not dispatchable */
	int (*field_entry_copy)(int,bcm_field_entry_t,bcm_field_entry_t *);
	int (*field_entry_copy_id)(int,bcm_field_entry_t,bcm_field_entry_t);
	int (*field_entry_create)(int,bcm_field_group_t,bcm_field_entry_t *);
	int (*field_entry_create_id)(int,bcm_field_group_t,bcm_field_entry_t);
	int (*field_entry_delete)(int,bcm_field_group_t,bcm_field_entry_qual_t [BCM_FIELD_NUMBER_OF_QUALS_PER_GROUP],bcm_field_entry_t);
	int (*field_entry_delete_all)(int);
	int (*field_entry_destroy)(int,bcm_field_entry_t);
	int (*field_entry_destroy_all)(int);
#ifdef	BROADCOM_DEBUG
	int (*field_entry_dump)(int,bcm_field_entry_t);
#endif	/* BROADCOM_DEBUG */
	int (*field_entry_enable_get)(int,bcm_field_entry_t,int *);
	int (*field_entry_enable_set)(int,bcm_field_entry_t,int);
	int (*field_entry_flexctr_attach)(int,bcm_field_entry_t,bcm_field_flexctr_config_t *);
	int (*field_entry_flexctr_detach)(int,bcm_field_entry_t,bcm_field_flexctr_config_t *);
	int (*field_entry_hit_flush)(int,uint32,bcm_field_entry_t);
	int (*field_entry_hit_get)(int,uint32,bcm_field_entry_t,uint8 *);
	int (*field_entry_info_get)(int,bcm_field_group_t,bcm_field_entry_t,bcm_field_entry_info_t *);
	/* bcm_field_entry_info_t_init not dispatchable */
	int (*field_entry_install)(int,bcm_field_entry_t);
	int (*field_entry_install_and_handler_update)(int,bcm_field_entry_t,bcm_field_entry_t *);
	int (*field_entry_multi_get)(int,bcm_field_group_t,int,bcm_field_entry_t *,int *);
	/* bcm_field_entry_oper_t_init not dispatchable */
	int (*field_entry_operation)(int,bcm_field_entry_oper_t *);
	int (*field_entry_policer_attach)(int,bcm_field_entry_t,int,bcm_policer_t);
	int (*field_entry_policer_detach)(int,bcm_field_entry_t,int);
	int (*field_entry_policer_detach_all)(int,bcm_field_entry_t);
	int (*field_entry_policer_get)(int,bcm_field_entry_t,int,bcm_policer_t *);
	int (*field_entry_prio_get)(int,bcm_field_entry_t,int *);
	int (*field_entry_prio_set)(int,bcm_field_entry_t,int);
	/* bcm_field_entry_qual_t_init not dispatchable */
	int (*field_entry_reinstall)(int,bcm_field_entry_t);
	int (*field_entry_remove)(int,bcm_field_entry_t);
	int (*field_entry_stat_attach)(int,bcm_field_entry_t,int);
	int (*field_entry_stat_detach)(int,bcm_field_entry_t,int);
	int (*field_entry_stat_extended_attach)(int,bcm_field_entry_t,int,bcm_field_stat_action_t);
	int (*field_entry_stat_extended_get)(int,bcm_field_entry_t,int *,bcm_field_stat_action_t *);
	int (*field_entry_stat_get)(int,bcm_field_entry_t,int *);
	/* bcm_field_extraction_action_t_init not dispatchable */
	/* bcm_field_extraction_field_t_init not dispatchable */
	int (*field_fem_action_add)(int,uint32,bcm_field_group_t,bcm_field_action_priority_t,bcm_field_fem_action_info_t *);
	int (*field_fem_action_delete)(int,bcm_field_group_t,bcm_field_action_priority_t);
	int (*field_fem_action_info_get)(int,bcm_field_group_t,bcm_field_action_priority_t,bcm_field_fem_action_info_t *);
	/* bcm_field_fem_action_info_t_init not dispatchable */
	int (*field_flush_entry_add)(int,uint32,bcm_field_group_t,int,bcm_field_flush_entry_info_t *);
	int (*field_flush_entry_delete)(int,uint32,bcm_field_group_t,int);
	int (*field_flush_entry_get)(int,uint32,bcm_field_group_t,int,bcm_field_flush_entry_info_t *);
	/* bcm_field_flush_entry_info_t_init not dispatchable */
	int (*field_flush_profile_attach)(int,uint32,bcm_field_group_t,uint32);
	int (*field_flush_profile_create)(int,uint32,bcm_field_flush_profile_info_t *,uint32 *);
	int (*field_flush_profile_destroy)(int,uint32,uint32);
	int (*field_flush_profile_get)(int,uint32,uint32,bcm_field_flush_profile_info_t *);
	/* bcm_field_flush_profile_info_t_init not dispatchable */
	int (*field_group_action_get)(int,bcm_field_group_t,bcm_field_aset_t *);
	int (*field_group_action_offset_get)(int,uint32,bcm_field_group_t,bcm_field_action_t,int *);
	int (*field_group_action_set)(int,bcm_field_group_t,bcm_field_aset_t);
	int (*field_group_add)(int,uint32,bcm_field_group_info_t *,bcm_field_group_t *);
	/* bcm_field_group_attach_info_t_init not dispatchable */
	int (*field_group_compress)(int,bcm_field_group_t);
	int (*field_group_config_create)(int,bcm_field_group_config_t *);
	int (*field_group_config_extension_create)(int,bcm_field_group_config_extension_t *);
	/* bcm_field_group_config_extension_t_init not dispatchable */
	/* bcm_field_group_config_t_init not dispatchable */
	int (*field_group_config_validate)(int,bcm_field_group_config_t *,bcm_field_group_mode_t *);
	int (*field_group_context_attach)(int,uint32,bcm_field_group_t,bcm_field_context_t,bcm_field_group_attach_info_t *);
	int (*field_group_context_detach)(int,bcm_field_group_t,bcm_field_context_t);
	int (*field_group_context_info_get)(int,bcm_field_group_t,bcm_field_context_t,bcm_field_group_attach_info_t *);
	int (*field_group_create)(int,bcm_field_qset_t,int,bcm_field_group_t *);
	int (*field_group_create_id)(int,bcm_field_qset_t,int,bcm_field_group_t);
	int (*field_group_create_mode)(int,bcm_field_qset_t,int,bcm_field_group_mode_t,bcm_field_group_t *);
	int (*field_group_create_mode_id)(int,bcm_field_qset_t,int,bcm_field_group_mode_t,bcm_field_group_t);
	int (*field_group_default_entry_get)(int,bcm_field_group_t,bcm_field_entry_t *);
	int (*field_group_default_entry_set)(int,bcm_field_group_t,bcm_field_entry_t,int);
	int (*field_group_delete)(int,bcm_field_group_t);
	int (*field_group_destroy)(int,bcm_field_group_t);
#ifdef	BROADCOM_DEBUG
	int (*field_group_dump)(int,bcm_field_group_t);
#endif	/* BROADCOM_DEBUG */
	int (*field_group_enable_get)(int,bcm_field_group_t,int *);
	int (*field_group_enable_set)(int,bcm_field_group_t,int);
	int (*field_group_expansion_enable_get)(int,bcm_field_group_t,int *);
	int (*field_group_expansion_enable_set)(int,bcm_field_group_t,int);
	int (*field_group_flush)(int,bcm_field_group_t);
	int (*field_group_get)(int,bcm_field_group_t,bcm_field_qset_t *);
	int (*field_group_info_get)(int,bcm_field_group_t,bcm_field_group_info_t *);
	/* bcm_field_group_info_t_init not dispatchable */
	int (*field_group_install)(int,bcm_field_group_t);
	int (*field_group_mode_get)(int,bcm_field_group_t,bcm_field_group_mode_t *);
	int (*field_group_mode_qset_get)(int,bcm_field_group_mode_type_t,bcm_field_group_packet_type_t,bcm_field_qset_t *);
	int (*field_group_oper_mode_get)(int,bcm_field_qualify_t,bcm_field_group_oper_mode_t *);
	int (*field_group_oper_mode_set)(int,bcm_field_qualify_t,bcm_field_group_oper_mode_t);
	int (*field_group_port_create_mode)(int,bcm_port_t,bcm_field_qset_t,int,bcm_field_group_mode_t,bcm_field_group_t *);
	int (*field_group_port_create_mode_id)(int,bcm_port_t,bcm_field_qset_t,int,bcm_field_group_mode_t,bcm_field_group_t);
	int (*field_group_ports_add)(int,bcm_field_group_t,bcm_pbmp_t);
	int (*field_group_ports_create_mode)(int,bcm_pbmp_t,bcm_field_qset_t,int,bcm_field_group_mode_t,bcm_field_group_t *);
	int (*field_group_ports_create_mode_id)(int,bcm_pbmp_t,bcm_field_qset_t,int,bcm_field_group_mode_t,bcm_field_group_t);
	int (*field_group_ports_get)(int,bcm_field_group_t,bcm_pbmp_t *);
	int (*field_group_ports_remove)(int,bcm_field_group_t,bcm_pbmp_t);
	int (*field_group_presel_get)(int,bcm_field_group_t,bcm_field_presel_set_t *);
	/* bcm_field_group_presel_info_init not dispatchable */
	int (*field_group_presel_set)(int,bcm_field_group_t,bcm_field_presel_set_t *);
	int (*field_group_priority_get)(int,bcm_field_group_t,int *);
	int (*field_group_priority_set)(int,bcm_field_group_t,int);
	int (*field_group_qualifier_offset_get)(int,uint32,bcm_field_group_t,bcm_field_qualify_t,int *);
	int (*field_group_remove)(int,bcm_field_group_t);
	int (*field_group_set)(int,bcm_field_group_t,bcm_field_qset_t);
	int (*field_group_status_get)(int,bcm_field_group_t,bcm_field_group_status_t *);
	/* bcm_field_group_status_t_init not dispatchable */
	int (*field_group_traverse)(int,bcm_field_group_traverse_cb,void *);
	int (*field_group_wlan_create_mode)(int,bcm_field_qset_t,int,bcm_field_group_mode_t,bcm_field_group_t *);
	int (*field_group_wlan_create_mode_id)(int,bcm_field_qset_t,int,bcm_field_group_mode_t,bcm_field_group_t);
	/* bcm_field_hint_t_init not dispatchable */
	int (*field_hints_add)(int,bcm_field_hintid_t,bcm_field_hint_t *);
	int (*field_hints_create)(int,bcm_field_hintid_t *);
	int (*field_hints_delete)(int,bcm_field_hintid_t,bcm_field_hint_t *);
	int (*field_hints_delete_all)(int,bcm_field_hintid_t);
	int (*field_hints_destroy)(int,bcm_field_hintid_t);
	int (*field_hints_get)(int,bcm_field_hintid_t,bcm_field_hint_t *);
	int (*field_init)(int);
	int (*field_internal_to_bcm_action_map)(int,uint32,int,uint32,bcm_field_internal_to_bcm_map_t *,uint32 *);
	/* bcm_field_llc_header_t_init not dispatchable */
	int (*field_macsec_DstMacRange_get)(int,bcm_mac_t *,bcm_mac_t *);
	int (*field_macsec_DstMacRange_set)(int,bcm_mac_t,bcm_mac_t);
	int (*field_name_to_id)(int,uint32,bcm_field_name_to_id_info_t *,int *,uint32 *);
	/* bcm_field_name_to_id_info_t_init not dispatchable */
	int (*field_oam_stat_action_add)(int,bcm_field_entry_t,bcm_field_oam_stat_action_t *);
	int (*field_oam_stat_action_delete)(int,bcm_field_entry_t,bcm_field_oam_stat_action_t *);
	int (*field_oam_stat_action_delete_all)(int,bcm_field_entry_t);
	int (*field_oam_stat_action_get)(int,bcm_field_entry_t,bcm_field_oam_stat_action_t *);
	int (*field_oam_stat_action_get_all)(int,bcm_field_entry_t,int,bcm_field_oam_stat_action_t *,int *);
	/* bcm_field_oam_stat_action_t_init not dispatchable */
	int (*field_presel_config_create)(int,bcm_field_presel_config_t *);
	int (*field_presel_config_get)(int,bcm_field_presel_t,bcm_field_presel_config_t *);
	int (*field_presel_config_set)(int,bcm_field_presel_t,bcm_field_presel_config_t *);
	/* bcm_field_presel_config_t_init not dispatchable */
	int (*field_presel_create)(int,bcm_field_presel_t *);
	int (*field_presel_create_id)(int,bcm_field_presel_t);
	int (*field_presel_create_stage_id)(int,bcm_field_stage_t,bcm_field_presel_t);
	int (*field_presel_destroy)(int,bcm_field_presel_t);
	/* bcm_field_presel_entry_data_info_init not dispatchable */
	/* bcm_field_presel_entry_id_info_init not dispatchable */
	int (*field_presel_get)(int,uint32,bcm_field_presel_entry_id_t *,bcm_field_presel_entry_data_t *);
	int (*field_presel_group_config_create)(int,bcm_field_presel_group_config_t *);
	int (*field_presel_group_config_get)(int,bcm_field_presel_group_config_t *);
	/* bcm_field_presel_group_config_t_init not dispatchable */
	int (*field_presel_group_destroy)(int,bcm_field_presel_group_t);
	int (*field_presel_set)(int,uint32,bcm_field_presel_entry_id_t *,bcm_field_presel_entry_data_t *);
	/* bcm_field_presel_set_t_init not dispatchable */
	int (*field_qset_data_qualifier_add)(int,bcm_field_qset_t *,int);
	int (*field_qset_data_qualifier_delete)(int,bcm_field_qset_t *,int);
	int (*field_qset_data_qualifier_get)(int,bcm_field_qset_t,int,int *,int *);
	int (*field_qset_id_multi_delete)(int,bcm_field_qualify_t,int,int *,bcm_field_qset_t *);
	int (*field_qset_id_multi_get)(int,bcm_field_qset_t,bcm_field_qualify_t,int,int *,int *);
	int (*field_qset_id_multi_set)(int,bcm_field_qualify_t,int,int *,bcm_field_qset_t *);
	/* bcm_field_qset_t_init not dispatchable */
	/* bcm_field_qual_attach_info_t_init not dispatchable */
	int (*field_qualifier_create)(int,uint32,bcm_field_qualifier_info_create_t *,bcm_field_qualify_t *);
	int (*field_qualifier_delete)(int,bcm_field_entry_t,bcm_field_qualify_t);
	int (*field_qualifier_destroy)(int,bcm_field_qualify_t);
	/* bcm_field_qualifier_info_create_t_init not dispatchable */
	int (*field_qualifier_info_get)(int,bcm_field_qualify_t,bcm_field_stage_t,bcm_field_qualifier_info_get_t *);
	/* bcm_field_qualifier_info_get_t_init not dispatchable */
	int (*field_qualifier_value_map)(int,bcm_field_stage_t,bcm_field_qualify_t,uint32 [BCM_FIELD_QUAL_WIDTH_IN_WORDS],uint32 [BCM_FIELD_QUAL_WIDTH_IN_WORDS]);
	int (*field_qualify_AppType)(int,bcm_field_entry_t,bcm_field_AppType_t);
	int (*field_qualify_AppType_get)(int,bcm_field_entry_t,bcm_field_AppType_t *);
	int (*field_qualify_ApplSignatureId)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_ApplSignatureId_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_ArpDstMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_ArpDstMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_ArpOpcode)(int,bcm_field_entry_t,bcm_field_ArpOpcode_t);
	int (*field_qualify_ArpOpcode_get)(int,bcm_field_entry_t,bcm_field_ArpOpcode_t *);
	int (*field_qualify_ArpSenderIp4)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_ArpSenderIp4_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_ArpSrcMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_ArpSrcMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_ArpTargetIp4)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_ArpTargetIp4_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_BfdGoodPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_BfdGoodPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_BfdMultiplierLen)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_BfdMultiplierLen_get)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_BfdPktVersionOne)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_BfdPktVersionOne_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_BfdPktWithDstIpLoopbackAddr)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_BfdPktWithDstIpLoopbackAddr_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_BfdVerFlags)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_BfdVerFlags_get)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_BfdYourDiscriminator)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_BfdYourDiscriminator_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_BypassFilter)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_BypassFilter32)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_BypassFilter32_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_BypassFilter_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_BypassSrcMacFilter)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_BypassSrcMacFilter_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CapwapHdrRid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CapwapHdrRid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CapwapHdrType)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CapwapHdrType_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CapwapPayloadDip)(int,bcm_field_entry_t,bcm_ip_t,bcm_ip_t);
	int (*field_qualify_CapwapPayloadDip6)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_CapwapPayloadDip6_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_CapwapPayloadDip_get)(int,bcm_field_entry_t,bcm_ip_t *,bcm_ip_t *);
	int (*field_qualify_CapwapPayloadDstMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_CapwapPayloadDstMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_CapwapPayloadEtherType)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_CapwapPayloadEtherType_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_CapwapPayloadInnerVlan)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_CapwapPayloadInnerVlanCfi)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CapwapPayloadInnerVlanCfi_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CapwapPayloadInnerVlanId)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_CapwapPayloadInnerVlanId_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_CapwapPayloadInnerVlanPri)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CapwapPayloadInnerVlanPri_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CapwapPayloadInnerVlan_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_CapwapPayloadIpProtocol)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CapwapPayloadIpProtocol_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CapwapPayloadL3HdrParseable)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CapwapPayloadL3HdrParseable_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CapwapPayloadL4DstPort)(int,bcm_field_entry_t,bcm_l4_port_t,bcm_l4_port_t);
	int (*field_qualify_CapwapPayloadL4DstPort_get)(int,bcm_field_entry_t,bcm_l4_port_t *,bcm_l4_port_t *);
	int (*field_qualify_CapwapPayloadL4HdrParseable)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CapwapPayloadL4HdrParseable_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CapwapPayloadL4SrcPort)(int,bcm_field_entry_t,bcm_l4_port_t,bcm_l4_port_t);
	int (*field_qualify_CapwapPayloadL4SrcPort_get)(int,bcm_field_entry_t,bcm_l4_port_t *,bcm_l4_port_t *);
	int (*field_qualify_CapwapPayloadOuterVlan)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_CapwapPayloadOuterVlanCfi)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CapwapPayloadOuterVlanCfi_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CapwapPayloadOuterVlanId)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_CapwapPayloadOuterVlanId_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_CapwapPayloadOuterVlanPri)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CapwapPayloadOuterVlanPri_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CapwapPayloadOuterVlan_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_CapwapPayloadSOF)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CapwapPayloadSOF_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CapwapPayloadSip)(int,bcm_field_entry_t,bcm_ip_t,bcm_ip_t);
	int (*field_qualify_CapwapPayloadSip6)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_CapwapPayloadSip6_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_CapwapPayloadSip_get)(int,bcm_field_entry_t,bcm_ip_t *,bcm_ip_t *);
	int (*field_qualify_CapwapPayloadSrcMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_CapwapPayloadSrcMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_CapwapPayloadTos)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CapwapPayloadTos_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CapwapPayloadVlanFormat)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CapwapPayloadVlanFormat_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CascadedKeyValue)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_CascadedKeyValue_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_ClassId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_ClassId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_CnTag)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_CnTagPresent)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CnTagPresent_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CnTag_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_Color)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_Color_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_CompressionDstHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CompressionDstHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CompressionSrcHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CompressionSrcHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CongestionExperienced)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CongestionExperienced_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CongestionMarked)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CongestionMarked_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Container)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_Container_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_CopyToCpu)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CopyToCpuReasonHigh)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_CopyToCpuReasonHigh_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_CopyToCpuReasonLow)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_CopyToCpuReasonLow_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_CopyToCpuTruncate)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CopyToCpuTruncate_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CopyToCpu_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CosMapSelect)(int,bcm_field_entry_t,bcm_field_cos_map_select_t);
	int (*field_qualify_CosMapSelect_get)(int,bcm_field_entry_t,bcm_field_cos_map_select_t *);
	int (*field_qualify_CosQueueId)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_CosQueueId_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_CosQueueNum)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_CosQueueNum_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_CpuQueue)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CpuQueue_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CpuVisibilityPacket)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CpuVisibilityPacket_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_CustomHeaderData)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_CustomHeaderData_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_CustomHeaderPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_CustomHeaderPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_DSCP)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_DSCP_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Decap)(int,bcm_field_entry_t,bcm_field_decap_t);
	int (*field_qualify_Decap_get)(int,bcm_field_entry_t,bcm_field_decap_t *);
	int (*field_qualify_DestVirtualPortValid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_DestVirtualPortValid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_DevicePortBitmap)(int,bcm_field_entry_t,bcm_pbmp_t,bcm_pbmp_t);
	int (*field_qualify_DevicePortBitmap_get)(int,bcm_field_entry_t,bcm_pbmp_t *,bcm_pbmp_t *);
	int (*field_qualify_DevicePortOpaqueCommand)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_DevicePortOpaqueCommand_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Dhcp)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_Dhcp_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_DoNotModify)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_DoNotModify_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_DosAttack)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_DosAttackEvents)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_DosAttackEvents_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_DosAttack_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_DownMepSatTerminated)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_DownMepSatTerminated_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Drop)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_DropReason)(int,bcm_field_entry_t,bcm_field_drop_reason_t);
	int (*field_qualify_DropReason_get)(int,bcm_field_entry_t,bcm_field_drop_reason_t *);
	int (*field_qualify_Drop_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_DstClassField)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_DstClassField_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_DstClassL2)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_DstClassL2_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_DstClassL3)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_DstClassL3_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_DstCompressionClassId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_DstCompressionClassId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_DstGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_DstGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_DstGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_DstGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_DstHiGig)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_DstHiGig_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_DstIp)(int,bcm_field_entry_t,bcm_ip_t,bcm_ip_t);
	int (*field_qualify_DstIp6)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_DstIp6Class)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_DstIp6ClassLower)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_DstIp6ClassLower_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_DstIp6ClassMsbNibble)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_DstIp6ClassMsbNibble_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_DstIp6ClassUpper)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_DstIp6ClassUpper_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_DstIp6Class_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_DstIp6High)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_DstIp6High_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_DstIp6Low)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_DstIp6Low_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_DstIp6_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_DstIpClass)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_DstIpClassLower)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_DstIpClassLower_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_DstIpClassMsbNibble)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_DstIpClassMsbNibble_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_DstIpClassUpper)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_DstIpClassUpper_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_DstIpClass_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_DstIpLocal)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_DstIpLocal_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_DstIp_get)(int,bcm_field_entry_t,bcm_ip_t *,bcm_ip_t *);
	int (*field_qualify_DstL2MulticastGroup)(int,bcm_field_entry_t,bcm_multicast_t,bcm_multicast_t);
	int (*field_qualify_DstL2MulticastGroup_get)(int,bcm_field_entry_t,bcm_multicast_t *,bcm_multicast_t *);
	int (*field_qualify_DstL3Egress)(int,bcm_field_entry_t,bcm_if_t);
	int (*field_qualify_DstL3EgressNextHops)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_DstL3EgressNextHopsUnderlay)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_DstL3EgressNextHopsUnderlay_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_DstL3EgressNextHops_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_DstL3EgressUnderlay)(int,bcm_field_entry_t,bcm_if_t);
	int (*field_qualify_DstL3EgressUnderlay_get)(int,bcm_field_entry_t,bcm_if_t *);
	int (*field_qualify_DstL3Egress_get)(int,bcm_field_entry_t,bcm_if_t *);
	int (*field_qualify_DstL3MulticastGroup)(int,bcm_field_entry_t,bcm_multicast_t,bcm_multicast_t);
	int (*field_qualify_DstL3MulticastGroup_get)(int,bcm_field_entry_t,bcm_multicast_t *,bcm_multicast_t *);
	int (*field_qualify_DstMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_DstMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_DstMimGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_DstMimGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_DstMimGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_DstMimGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_DstMplsGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_DstMplsGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_DstMplsGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_DstMplsGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_DstMulticastGroup)(int,bcm_field_entry_t,bcm_multicast_t);
	int (*field_qualify_DstMulticastGroup_get)(int,bcm_field_entry_t,bcm_multicast_t *);
	int (*field_qualify_DstMulticastGroups)(int,bcm_field_entry_t,bcm_multicast_t,bcm_multicast_t);
	int (*field_qualify_DstMulticastGroups_get)(int,bcm_field_entry_t,bcm_multicast_t *,bcm_multicast_t *);
	int (*field_qualify_DstMultipath)(int,bcm_field_entry_t,bcm_if_t);
	int (*field_qualify_DstMultipathLevel1)(int,bcm_field_entry_t,bcm_if_t,bcm_if_t);
	int (*field_qualify_DstMultipathLevel1_get)(int,bcm_field_entry_t,bcm_if_t *,bcm_if_t *);
	int (*field_qualify_DstMultipathLevel2)(int,bcm_field_entry_t,bcm_if_t,bcm_if_t);
	int (*field_qualify_DstMultipathLevel2_get)(int,bcm_field_entry_t,bcm_if_t *,bcm_if_t *);
	int (*field_qualify_DstMultipathOverlay)(int,bcm_field_entry_t,bcm_if_t,bcm_if_t);
	int (*field_qualify_DstMultipathOverlay_get)(int,bcm_field_entry_t,bcm_if_t *,bcm_if_t *);
	int (*field_qualify_DstMultipathUnderlay)(int,bcm_field_entry_t,bcm_if_t,bcm_if_t);
	int (*field_qualify_DstMultipathUnderlay_get)(int,bcm_field_entry_t,bcm_if_t *,bcm_if_t *);
	int (*field_qualify_DstMultipath_get)(int,bcm_field_entry_t,bcm_if_t *);
	int (*field_qualify_DstNivGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_DstNivGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_DstNivGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_DstNivGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_DstPort)(int,bcm_field_entry_t,bcm_module_t,bcm_module_t,bcm_port_t,bcm_port_t);
	int (*field_qualify_DstPortSRLanId)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_DstPortSRLanId_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_DstPortSRMode)(int,bcm_field_entry_t,bcm_field_sr_port_mode_t,uint8);
	int (*field_qualify_DstPortSRMode_get)(int,bcm_field_entry_t,bcm_field_sr_port_mode_t *,uint8 *);
	int (*field_qualify_DstPortSRNetId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_DstPortSRNetId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_DstPortSRRoleInterlink)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_DstPortSRRoleInterlink_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_DstPortSRType)(int,bcm_field_entry_t,bcm_field_port_sr_type_t);
	int (*field_qualify_DstPortSRType_get)(int,bcm_field_entry_t,bcm_field_port_sr_type_t *);
	int (*field_qualify_DstPort_get)(int,bcm_field_entry_t,bcm_module_t *,bcm_module_t *,bcm_port_t *,bcm_port_t *);
	int (*field_qualify_DstRpfGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_DstRpfGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_DstSysPortExt)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_DstSysPortExt_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_DstTrunk)(int,bcm_field_entry_t,bcm_trunk_t,bcm_trunk_t);
	int (*field_qualify_DstTrunk_get)(int,bcm_field_entry_t,bcm_trunk_t *,bcm_trunk_t *);
	int (*field_qualify_DstType)(int,bcm_field_entry_t,bcm_field_DstType_t);
	int (*field_qualify_DstType_get)(int,bcm_field_entry_t,bcm_field_DstType_t *);
	int (*field_qualify_DstVlanGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_DstVlanGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_DstVlanGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_DstVlanGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_DstVxlanGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_DstVxlanGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_DstVxlanGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_DstVxlanGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_DstWlanGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_DstWlanGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_DstWlanGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_DstWlanGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_ECid)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_ECid_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_ETag)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_ETag_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_EcnValue)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EcnValue_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EffectiveTtl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EffectiveTtl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EgressClass)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_EgressClassL2Gre)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_EgressClassL2Gre_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_EgressClassL3Interface)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_EgressClassL3InterfaceTunnel)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_EgressClassL3InterfaceTunnel_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_EgressClassL3Interface_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_EgressClassPort)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_EgressClassPort_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_EgressClassTrill)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_EgressClassTrill_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_EgressClassTunnel)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_EgressClassTunnel_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_EgressClassVxlan)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_EgressClassVxlan_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_EgressClassWlan)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_EgressClassWlan_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_EgressClass_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_EgressDOPTrigger)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EgressDOPTrigger_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EgressForwardingClassId)(int,bcm_field_entry_t,int,int);
	int (*field_qualify_EgressForwardingClassId_get)(int,bcm_field_entry_t,int *,int *);
	int (*field_qualify_EgressL3TunnelGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_EgressL3TunnelGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_EgressMcastPktReason)(int,bcm_field_entry_t,bcm_field_mcast_pkt_reason_t);
	int (*field_qualify_EgressMcastPktReason_get)(int,bcm_field_entry_t,bcm_field_mcast_pkt_reason_t *);
	int (*field_qualify_EgressPktQueueNotification)(int,bcm_field_entry_t,bcm_field_pkt_queue_notif_t);
	int (*field_qualify_EgressPktQueueNotification_get)(int,bcm_field_entry_t,bcm_field_pkt_queue_notif_t *);
	int (*field_qualify_EgressPortCtrlType)(int,bcm_field_entry_t,bcm_field_egress_port_ctrl_t);
	int (*field_qualify_EgressPortCtrlType_get)(int,bcm_field_entry_t,bcm_field_egress_port_ctrl_t *);
	int (*field_qualify_EgressPortQueue)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EgressPortQueue_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EgressTunnelIpHeaderDscp)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EgressTunnelIpHeaderDscp_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EgressTunnelIpHeaderEcn)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EgressTunnelIpHeaderEcn_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EgressTunnelIpHeaderFlowLabel)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_EgressTunnelIpHeaderFlowLabel_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_EtherType)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_EtherTypeClass)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_EtherTypeClass_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_EtherType_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_EthernetOamClassVlanTranslateKeyFirst)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EthernetOamClassVlanTranslateKeyFirst_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EthernetOamClassVlanTranslateKeySecond)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EthernetOamClassVlanTranslateKeySecond_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EthernetOamClassVpn)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EthernetOamClassVpn_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EthernetOamDstClassL2)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EthernetOamDstClassL2_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EthernetOamHeaderBits0_31)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_EthernetOamHeaderBits0_31_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_EthernetOamHeaderBits32_63)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_EthernetOamHeaderBits32_63_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_EthernetOamInterfaceClassMim)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EthernetOamInterfaceClassMim_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EthernetOamInterfaceClassMpls)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EthernetOamInterfaceClassMpls_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EthernetOamInterfaceClassNiv)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EthernetOamInterfaceClassNiv_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EthernetOamInterfaceClassPort)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EthernetOamInterfaceClassPort_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EthernetOamInterfaceClassVlan)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EthernetOamInterfaceClassVlan_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EthernetOamInterfaceClassVxlan)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EthernetOamInterfaceClassVxlan_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_EthernetOamTxPktUPMEP)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_EthernetOamTxPktUPMEP_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ExactMatchActionClassId)(int,bcm_field_entry_t,int,uint32,uint32);
	int (*field_qualify_ExactMatchActionClassId_get)(int,bcm_field_entry_t,int,uint32 *,uint32 *);
	int (*field_qualify_ExactMatchGroupClassId)(int,bcm_field_entry_t,int,bcm_field_group_t);
	int (*field_qualify_ExactMatchGroupClassId_get)(int,bcm_field_entry_t,int,bcm_field_group_t *);
	int (*field_qualify_ExactMatchHitStatus)(int,bcm_field_entry_t,int,uint8,uint8);
	int (*field_qualify_ExactMatchHitStatus_get)(int,bcm_field_entry_t,int,uint8 *,uint8 *);
	int (*field_qualify_ExactMatchOpaqueObject0)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_ExactMatchOpaqueObject0_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_ExtensionHeader2Type)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ExtensionHeader2Type_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ExtensionHeaderSubCode)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ExtensionHeaderSubCode_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ExtensionHeaderType)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ExtensionHeaderType_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ExternalHit0)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ExternalHit0_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ExternalHit1)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ExternalHit1_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ExternalHit2)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ExternalHit2_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ExternalHit3)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ExternalHit3_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ExternalHit4)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ExternalHit4_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ExternalHit5)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ExternalHit5_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ExternalHit6)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ExternalHit6_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ExternalHit7)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ExternalHit7_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ExternalValue0)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_ExternalValue0_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_ExternalValue1)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_ExternalValue1_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_ExternalValue2)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_ExternalValue2_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_ExternalValue3)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_ExternalValue3_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_ExternalValue4)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_ExternalValue4_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_ExternalValue5)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_ExternalValue5_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_ExternalValue6)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_ExternalValue6_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_ExternalValue7)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_ExternalValue7_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_FabricQueueTag)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_FabricQueueTag_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_FcoeOxID)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_FcoeOxIDClass)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_FcoeOxIDClass_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_FcoeOxID_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_FcoeRxID)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_FcoeRxIDClass)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_FcoeRxIDClass_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_FcoeRxID_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_FcoeSOF)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FcoeSOF_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FcoeVersionIsZero)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FcoeVersionIsZero_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Fhei)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_FheiSize)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_FheiSize_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_Fhei_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_FibreChanCSCtl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FibreChanCSCtl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FibreChanDFCtl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FibreChanDFCtl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FibreChanDstId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_FibreChanDstIdClass)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_FibreChanDstIdClassLower)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_FibreChanDstIdClassLower_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_FibreChanDstIdClassMsbNibble)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_FibreChanDstIdClassMsbNibble_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_FibreChanDstIdClassUpper)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_FibreChanDstIdClassUpper_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_FibreChanDstIdClass_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_FibreChanDstId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_FibreChanFCtl)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_FibreChanFCtl_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_FibreChanInner)(int,bcm_field_entry_t,bcm_field_FibreChan_t);
	int (*field_qualify_FibreChanInner_get)(int,bcm_field_entry_t,bcm_field_FibreChan_t *);
	int (*field_qualify_FibreChanOuter)(int,bcm_field_entry_t,bcm_field_FibreChan_t);
	int (*field_qualify_FibreChanOuter_get)(int,bcm_field_entry_t,bcm_field_FibreChan_t *);
	int (*field_qualify_FibreChanRCtl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FibreChanRCtl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FibreChanSrcBindCheck)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FibreChanSrcBindCheck_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FibreChanSrcFpmaCheck)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FibreChanSrcFpmaCheck_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FibreChanSrcId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_FibreChanSrcIdClass)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_FibreChanSrcIdClassLower)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_FibreChanSrcIdClassLower_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_FibreChanSrcIdClassMsbNibble)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_FibreChanSrcIdClassMsbNibble_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_FibreChanSrcIdClassUpper)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_FibreChanSrcIdClassUpper_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_FibreChanSrcIdClass_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_FibreChanSrcId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_FibreChanType)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FibreChanType_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FibreChanVFTFabricId)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_FibreChanVFTFabricId_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_FibreChanVFTHopCount)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FibreChanVFTHopCount_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FibreChanVFTPri)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FibreChanVFTPri_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FibreChanVFTValid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FibreChanVFTValid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FibreChanVFTVersion)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FibreChanVFTVersion_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FibreChanVFTVsanId)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_FibreChanVFTVsanId_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_FibreChanVFTVsanPri)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FibreChanVFTVsanPri_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FibreChanZoneCheck)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FibreChanZoneCheck_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FirstDropReason)(int,bcm_field_entry_t,bcm_field_drop_reason_t);
	int (*field_qualify_FirstDropReason_get)(int,bcm_field_entry_t,bcm_field_drop_reason_t *);
	int (*field_qualify_FlexStateResultA0)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_FlexStateResultA0_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_FlexStateResultA1)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_FlexStateResultA1_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_FlowControlType)(int,bcm_field_entry_t,bcm_field_flow_control_pkt_type_t);
	int (*field_qualify_FlowControlType_get)(int,bcm_field_entry_t,bcm_field_flow_control_pkt_type_t *);
	int (*field_qualify_FlowId)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_FlowId_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_FlowtrackerAggregateClass)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_FlowtrackerAggregateClass_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_FlowtrackerCheck)(int,bcm_field_entry_t,bcm_flowtracker_group_t,uint32,bcm_field_flowtrackercheck_t *);
	int (*field_qualify_FlowtrackerCheck_get)(int,bcm_field_entry_t,bcm_flowtracker_group_t,uint32,bcm_field_flowtrackercheck_t *,uint32 *);
	int (*field_qualify_FlowtrackerClassId)(int,bcm_field_entry_t,int,int);
	int (*field_qualify_FlowtrackerClassIdSource1)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_FlowtrackerClassIdSource1_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_FlowtrackerClassIdSource2)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_FlowtrackerClassIdSource2_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_FlowtrackerClassId_get)(int,bcm_field_entry_t,int *,int *);
	int (*field_qualify_FlowtrackerCollectorCopy)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FlowtrackerCollectorCopy_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FlowtrackerDisabled)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FlowtrackerDisabled_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FlowtrackerExportQueueFull)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FlowtrackerExportQueueFull_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FlowtrackerFlowTableFull)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FlowtrackerFlowTableFull_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FlowtrackerGroupFlowExceeded)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FlowtrackerGroupFlowExceeded_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FlowtrackerGroupId)(int,bcm_field_entry_t,int,int);
	int (*field_qualify_FlowtrackerGroupId_get)(int,bcm_field_entry_t,int *,int *);
	int (*field_qualify_FlowtrackerGroupValid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FlowtrackerGroupValid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FlowtrackerLearn)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FlowtrackerLearn_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FlowtrackerMeteringExceeded)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FlowtrackerMeteringExceeded_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ForwardCode)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ForwardCode_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ForwardCopy)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ForwardCopy_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ForwardHdrDstMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_ForwardHdrDstMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_ForwardHdrSrcMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_ForwardHdrSrcMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_ForwardHdrVlanId)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_ForwardHdrVlanId_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_ForwardingEligible)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_ForwardingEligible_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_ForwardingHeaderOffset)(int,bcm_field_entry_t,bcm_field_data_offset_base_t,uint32,uint32);
	int (*field_qualify_ForwardingHeaderOffset_get)(int,bcm_field_entry_t,bcm_field_data_offset_base_t *,uint32 *,uint32 *);
	int (*field_qualify_ForwardingOuterTpid)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_ForwardingOuterTpid_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_ForwardingOuterVlanPri)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ForwardingOuterVlanPri_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ForwardingPacketRes)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_ForwardingPacketRes_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_ForwardingStatus)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_ForwardingStatus_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_ForwardingType)(int,bcm_field_entry_t,bcm_field_ForwardingType_t);
	int (*field_qualify_ForwardingType_get)(int,bcm_field_entry_t,bcm_field_ForwardingType_t *);
	int (*field_qualify_ForwardingVlanId)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_ForwardingVlanId_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_ForwardingVlanValid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ForwardingVlanValid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FromMacSecPort)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FromMacSecPort_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_FrontPanelPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_FrontPanelPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_GbpDstId)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_GbpDstId_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_GbpPresent)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_GbpPresent_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_GbpSrcId)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_GbpSrcId_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_GeneratedTtl)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_GeneratedTtl_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_GenericAssociatedChannelLabelValid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_GenericAssociatedChannelLabelValid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_GenevePktVersionZero)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_GenevePktVersionZero_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_GenevePktWithOam)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_GenevePktWithOam_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_GpeFlags)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_GpeFlags_get)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_GpeNetworkId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_GpeNetworkId_get)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_GpePktVersionZero)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_GpePktVersionZero_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_GpePktWithOam)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_GpePktWithOam_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_GpeProtocol)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_GpeProtocol_get)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_GpeReserved0)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_GpeReserved0_get)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_GpeReserved1)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_GpeReserved1_get)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_GroupClass)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_GroupClass_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_HeaderFormat)(int,bcm_field_entry_t,bcm_field_header_format_t);
	int (*field_qualify_HeaderFormatExtension)(int,bcm_field_entry_t,bcm_field_header_format_extension_t);
	int (*field_qualify_HeaderFormatExtension_get)(int,bcm_field_entry_t,bcm_field_header_format_extension_t *);
	int (*field_qualify_HeaderFormatSet)(int,bcm_field_entry_t,bcm_field_header_format_set_t);
	int (*field_qualify_HeaderFormatSet_get)(int,bcm_field_entry_t,bcm_field_header_format_set_t *);
	int (*field_qualify_HeaderFormat_get)(int,bcm_field_entry_t,bcm_field_header_format_t *);
	int (*field_qualify_HiGig)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGig3Class)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_HiGig3Class_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_HiGig3Flags)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_HiGig3Flags_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_HiGig3Pkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGig3Pkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigColor)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_HiGigColor_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_HiGigDoNotFlags)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigDoNotFlags_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigDstGport)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_HiGigDstGport_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_HiGigDstModPortGport)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_HiGigDstModPortGport_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_HiGigDstModuleGport)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_HiGigDstModuleGport_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_HiGigDstMulticast)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigDstMulticastGroupId)(int,bcm_field_entry_t,bcm_multicast_t,bcm_multicast_t);
	int (*field_qualify_HiGigDstMulticastGroupId_get)(int,bcm_field_entry_t,bcm_multicast_t *,bcm_multicast_t *);
	int (*field_qualify_HiGigDstMulticast_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigDstPortGport)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_HiGigDstPortGport_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_HiGigDstTrunk)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigDstTrunkId)(int,bcm_field_entry_t,bcm_trunk_t,bcm_trunk_t);
	int (*field_qualify_HiGigDstTrunkId_get)(int,bcm_field_entry_t,bcm_trunk_t *,bcm_trunk_t *);
	int (*field_qualify_HiGigDstTrunk_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigDstType)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigDstType_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigEgressMcast)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigEgressMcast_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigExtendedHeaderPresent)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigExtendedHeaderPresent_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigForwardingType)(int,bcm_field_entry_t,bcm_field_HiGigForwardingType_t);
	int (*field_qualify_HiGigForwardingType_get)(int,bcm_field_entry_t,bcm_field_HiGigForwardingType_t *);
	int (*field_qualify_HiGigGbpPresent)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigGbpPresent_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigGbpSrcId)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_HiGigGbpSrcId_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_HiGigIngressClassificationTag)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_HiGigIngressClassificationTag_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_HiGigIngressL3SwitchPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigIngressL3SwitchPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigIngressTagged)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigIngressTagged_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigIntCongestionNotification)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigIntCongestionNotification_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigLabel)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_HiGigLabelType)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigLabelType_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigLabel_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_HiGigLoadBalanceID)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigLoadBalanceID_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigMirrorOrSwitchPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigMirrorOrSwitchPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigMirrorToVp)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigMirrorToVp_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigMplsPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigMplsPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigMulticastIndex)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_HiGigMulticastIndex_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_HiGigOffloadEngineClassificationTag)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_HiGigOffloadEngineClassificationTag_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_HiGigOffloadEngineDeferredFlags)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigOffloadEngineDeferredFlags_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigOffloadEngineDscpNew)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigOffloadEngineDscpNew_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigOffloadEnginePktPriNew)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigOffloadEnginePktPriNew_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigOffloadEnginePreserveDot1p)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigOffloadEnginePreserveDot1p_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigOffloadEnginePreserveDscp)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigOffloadEnginePreserveDscp_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigOffloadEngineSrcType)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigOffloadEngineSrcType_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigOffloadEngineVxltStatus)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigOffloadEngineVxltStatus_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigPortFilteringMode)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigPortFilteringMode_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigPreserveFlags)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigPreserveFlags_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigProtectionSwitchingStatus)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigProtectionSwitchingStatus_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigProxy)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigProxyTunnelType)(int,bcm_field_entry_t,bcm_field_higig_proxy_tunnel_type_t);
	int (*field_qualify_HiGigProxyTunnelType_get)(int,bcm_field_entry_t,bcm_field_higig_proxy_tunnel_type_t *);
	int (*field_qualify_HiGigProxy_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigReplicationId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_HiGigReplicationId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_HiGigSrcGport)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_HiGigSrcGport_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_HiGigSrcModPortGport)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_HiGigSrcModPortGport_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_HiGigSrcModuleGport)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_HiGigSrcModuleGport_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_HiGigSrcPortGport)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_HiGigSrcPortGport_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_HiGigSrcTrunk)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigSrcTrunk_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigSrcType)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigSrcType_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigTrafficClass)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigTrafficClass_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigVlan)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_HiGigVlan_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_HiGigVni)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_HiGigVni_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_HiGigVpLagFailoverPacket)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigVpLagFailoverPacket_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigVpPreserveFlags)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_HiGigVpPreserveFlags_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_HiGigVpReplicationId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_HiGigVpReplicationId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_HiGig_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IEEE1588Command)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IEEE1588Command_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IEEE1588CompensateTimeStamp)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IEEE1588CompensateTimeStamp_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IEEE1588Encapsulation)(int,bcm_field_entry_t,bcm_field_IEEE1588Encap_t);
	int (*field_qualify_IEEE1588Encapsulation_get)(int,bcm_field_entry_t,bcm_field_IEEE1588Encap_t *);
	int (*field_qualify_IEEE1588HeaderOffset)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IEEE1588HeaderOffset_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_INTProbeMarker1)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_INTProbeMarker1_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_INTProbeMarker2)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_INTProbeMarker2_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_INTReserved4Bytes)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_INTReserved4Bytes_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IOAMNameSpaceIdMatch)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IOAMNameSpaceIdMatch_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IOAMPktOverflowed)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IOAMPktOverflowed_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IOAMRemainingLenValid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IOAMRemainingLenValid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ISid)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_ISid_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_ITag)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_ITag_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IcmpError)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IcmpError_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IcmpType)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IcmpTypeCode)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_IcmpTypeCode_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_IcmpType_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IfaActionVector)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IfaActionVector_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IfaAttrOpaqData)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_IfaAttrOpaqData_get)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_IfaCurrentLength)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IfaCurrentLengthEqualToZero)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IfaCurrentLengthEqualToZero_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IfaCurrentLength_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IfaFlags)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IfaFlags_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IfaGlobalNameSpace)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IfaGlobalNameSpace_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IfaHopCount)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_IfaHopCount_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_IfaHopLimit)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_IfaHopLimitEqualToZero)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IfaHopLimitEqualToZero_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IfaHopLimit_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_IfaLocalNameSpace)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IfaLocalNameSpace_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IfaMaxLength)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IfaMaxLength_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IfaNextHdr)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IfaNextHdr_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IfaRequestVector)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IfaRequestVector_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IfaVersion)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IfaVersion2)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IfaVersion2_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IfaVersion_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IgmpMaxRespTime)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IgmpMaxRespTime_get)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IgmpType)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_IgmpType_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InDscpExp)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InDscpExp_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InPort)(int,bcm_field_entry_t,bcm_port_t,bcm_port_t);
	int (*field_qualify_InPort_get)(int,bcm_field_entry_t,bcm_port_t *,bcm_port_t *);
	int (*field_qualify_InPorts)(int,bcm_field_entry_t,bcm_pbmp_t,bcm_pbmp_t);
	int (*field_qualify_InPorts_get)(int,bcm_field_entry_t,bcm_pbmp_t *,bcm_pbmp_t *);
	int (*field_qualify_InVPort)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InVPort32)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_InVPort32_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_InVPortWide)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_InVPortWide_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_InVPort_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InVportDataIndex)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InVportDataIndex_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IncomingIpIfClass)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IncomingIpIfClass_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IncomingOuterVlanId)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_IncomingOuterVlanId_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_IncomingVlanFormat)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IncomingVlanFormat_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IngressClassField)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IngressClassField_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IngressDropEthernetOamControl)(int,bcm_field_entry_t,bcm_field_oam_drop_mep_type_t);
	int (*field_qualify_IngressDropEthernetOamControl_get)(int,bcm_field_entry_t,bcm_field_oam_drop_mep_type_t *);
	int (*field_qualify_IngressDropEthernetOamData)(int,bcm_field_entry_t,bcm_field_oam_drop_mep_type_t);
	int (*field_qualify_IngressDropEthernetOamData_get)(int,bcm_field_entry_t,bcm_field_oam_drop_mep_type_t *);
	int (*field_qualify_IngressDropMplsOamControl)(int,bcm_field_entry_t,bcm_field_oam_drop_mep_type_t);
	int (*field_qualify_IngressDropMplsOamControl_get)(int,bcm_field_entry_t,bcm_field_oam_drop_mep_type_t *);
	int (*field_qualify_IngressDropMplsOamData)(int,bcm_field_entry_t,bcm_field_oam_drop_mep_type_t);
	int (*field_qualify_IngressDropMplsOamData_get)(int,bcm_field_entry_t,bcm_field_oam_drop_mep_type_t *);
	int (*field_qualify_IngressECid)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IngressECid_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IngressInterfaceClass)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IngressInterfaceClassPort)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IngressInterfaceClassPort_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IngressInterfaceClassVPort)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IngressInterfaceClassVPort_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IngressInterfaceClass_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IngressL2InterfaceFlexDigestCtrlIdA)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IngressL2InterfaceFlexDigestCtrlIdA_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IngressL2InterfaceFlexDigestCtrlIdB)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IngressL2InterfaceFlexDigestCtrlIdB_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IngressL2InterfaceOpaqueCtrlId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IngressL2InterfaceOpaqueCtrlId1)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IngressL2InterfaceOpaqueCtrlId1_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IngressL2InterfaceOpaqueCtrlId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IngressL3InterfaceOpaqueCtrlId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IngressL3InterfaceOpaqueCtrlId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IngressStpState)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IngressStpState_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IngressVPortBridgeDisable)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IngressVPortBridgeDisable_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerApplSignatureId)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_InnerApplSignatureId_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_InnerBfdPktVersionOne)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerBfdPktVersionOne_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerDSCP)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerDSCP_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerDosAttack)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerDosAttackEvents)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_InnerDosAttackEvents_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_InnerDosAttack_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerDstIp)(int,bcm_field_entry_t,bcm_ip_t,bcm_ip_t);
	int (*field_qualify_InnerDstIp6)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_InnerDstIp6High)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_InnerDstIp6High_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_InnerDstIp6_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_InnerDstIp_get)(int,bcm_field_entry_t,bcm_ip_t *,bcm_ip_t *);
	int (*field_qualify_InnerDstMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_InnerDstMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_InnerEtherType)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_InnerEtherType_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_InnerIp6FlowLabel)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_InnerIp6FlowLabel_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_InnerIp6HopLimit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerIp6HopLimit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerIp6NextHeader)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerIp6NextHeader_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerIp6PktHopLimit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerIp6PktHopLimit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerIp6PktNextHeader)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerIp6PktNextHeader_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerIp6PktTrafficClass)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerIp6PktTrafficClass_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerIpFrag)(int,bcm_field_entry_t,bcm_field_IpFrag_t);
	int (*field_qualify_InnerIpFrag_get)(int,bcm_field_entry_t,bcm_field_IpFrag_t *);
	int (*field_qualify_InnerIpInfo)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_InnerIpInfo_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_InnerIpProtocol)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerIpProtocolCommon)(int,bcm_field_entry_t,bcm_field_IpProtocolCommon_t);
	int (*field_qualify_InnerIpProtocolCommon_get)(int,bcm_field_entry_t,bcm_field_IpProtocolCommon_t *);
	int (*field_qualify_InnerIpProtocol_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerIpType)(int,bcm_field_entry_t,bcm_field_IpType_t);
	int (*field_qualify_InnerIpType_get)(int,bcm_field_entry_t,bcm_field_IpType_t *);
	int (*field_qualify_InnerL2MacInfo)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_InnerL2MacInfo_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_InnerL4DstPort)(int,bcm_field_entry_t,bcm_l4_port_t,bcm_l4_port_t);
	int (*field_qualify_InnerL4DstPort_get)(int,bcm_field_entry_t,bcm_l4_port_t *,bcm_l4_port_t *);
	int (*field_qualify_InnerL4Info)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_InnerL4Info_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_InnerL4Ports)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerL4Ports_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerL4SrcPort)(int,bcm_field_entry_t,bcm_l4_port_t,bcm_l4_port_t);
	int (*field_qualify_InnerL4SrcPort_get)(int,bcm_field_entry_t,bcm_l4_port_t *,bcm_l4_port_t *);
	int (*field_qualify_InnerPriTaggedPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerPriTaggedPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerSrcIp)(int,bcm_field_entry_t,bcm_ip_t,bcm_ip_t);
	int (*field_qualify_InnerSrcIp6)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_InnerSrcIp6High)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_InnerSrcIp6High_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_InnerSrcIp6_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_InnerSrcIp_get)(int,bcm_field_entry_t,bcm_ip_t *,bcm_ip_t *);
	int (*field_qualify_InnerSrcMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_InnerSrcMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_InnerTcpControl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerTcpControl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerTos)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerTos_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerTpid)(int,bcm_field_entry_t,uint16);
	int (*field_qualify_InnerTpid_get)(int,bcm_field_entry_t,uint16 *);
	int (*field_qualify_InnerTtl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerTtl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerVlan)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_InnerVlanActionRange)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_InnerVlanActionRange_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_InnerVlanCfi)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerVlanCfi_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerVlanId)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_InnerVlanId_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_InnerVlanPri)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerVlanPri_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerVlanRangeMatch)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerVlanRangeMatch_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerVlanTagPreserve)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_InnerVlanTagPreserve_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InnerVlan_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_IntCongestionNotification)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IntCongestionNotification_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IntCtrl)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IntCtrl_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IntFlags)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IntFlags_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IntHdrPresent)(int,bcm_field_entry_t,bcm_field_IntHdr_Location_t);
	int (*field_qualify_IntHdrPresent_get)(int,bcm_field_entry_t,bcm_field_IntHdr_Location_t *);
	int (*field_qualify_IntHdrType)(int,bcm_field_entry_t,bcm_field_IntHdr_Type_t);
	int (*field_qualify_IntHdrType_get)(int,bcm_field_entry_t,bcm_field_IntHdr_Type_t *);
	int (*field_qualify_IntMetadataHdrType)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IntMetadataHdrType_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IntPktFinalHop)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IntPktFinalHop_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IntPktLengthValid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IntPktLengthValid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IntPktOverflowed)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IntPktOverflowed_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IntPktType)(int,bcm_field_entry_t,bcm_field_int_pkt_type_t);
	int (*field_qualify_IntPktType_get)(int,bcm_field_entry_t,bcm_field_int_pkt_type_t *);
	int (*field_qualify_IntPktVersionOne)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IntPktVersionOne_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IntPriority)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IntPriority_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IntUdpChecksumEqualsZero)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IntUdpChecksumEqualsZero_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_InterfaceClassL2)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_InterfaceClassL2Type)(int,bcm_field_entry_t,bcm_field_interface_class_l2_type_t);
	int (*field_qualify_InterfaceClassL2Type_get)(int,bcm_field_entry_t,bcm_field_interface_class_l2_type_t *);
	int (*field_qualify_InterfaceClassL2_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_InterfaceClassL3)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_InterfaceClassL3Tunnel)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_InterfaceClassL3Tunnel_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_InterfaceClassL3_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_InterfaceClassMpls)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_InterfaceClassMplsLookup1)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_InterfaceClassMplsLookup1_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_InterfaceClassMplsLookup2)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_InterfaceClassMplsLookup2_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_InterfaceClassMplsLookup3)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_InterfaceClassMplsLookup3_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_InterfaceClassMpls_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_InterfaceClassPort)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_InterfaceClassPort_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_InterfaceClassProcessingPort)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_InterfaceClassProcessingPort_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_InterfaceClassVPort)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_InterfaceClassVPort_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_InterfaceInPorts)(int,bcm_field_entry_t,bcm_pbmp_t,bcm_pbmp_t);
	int (*field_qualify_InterfaceInPorts_get)(int,bcm_field_entry_t,bcm_pbmp_t *,bcm_pbmp_t *);
	int (*field_qualify_InterfaceIngressKeySelectClassPort)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_InterfaceIngressKeySelectClassPort_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_InterfaceLookupClassPort)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_InterfaceLookupClassPort_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_Ip4Length)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_Ip4Length_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_Ip4Tos)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_Ip4Tos_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Ip6FlowLabel)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_Ip6FlowLabel_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_Ip6HopLimit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_Ip6HopLimit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Ip6Length)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_Ip6Length_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_Ip6NextHeader)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_Ip6NextHeader_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Ip6PktHopLimit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_Ip6PktHopLimit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Ip6PktNextHeader)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_Ip6PktNextHeader_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Ip6PktTrafficClass)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_Ip6PktTrafficClass_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Ip6TrafficClass)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_Ip6TrafficClass_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpAddrsNormalized)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpAddrsNormalized_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpChecksumOkPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpChecksumOkPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpExtHdr2Protocol)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpExtHdr2Protocol_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpExtensionHdrNum)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpExtensionHdrNum_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpFlags)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpFlags_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpFrag)(int,bcm_field_entry_t,bcm_field_IpFrag_t);
	int (*field_qualify_IpFragInfo)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_IpFragInfo_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_IpFragNonOrFirst)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpFragNonOrFirst_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpFragPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpFragPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpFrag_get)(int,bcm_field_entry_t,bcm_field_IpFrag_t *);
	int (*field_qualify_IpFwdPlusOneNextProtocol)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IpFwdPlusOneNextProtocol_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IpIdentifier)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_IpIdentifier_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_IpInIpPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpInIpPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpInfo)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IpInfo_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IpMulticastCompatible)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_IpMulticastCompatible_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_IpOptionHdrType)(int,bcm_field_entry_t,bcm_field_ip_option_hdr_type_t);
	int (*field_qualify_IpOptionHdrType_get)(int,bcm_field_entry_t,bcm_field_ip_option_hdr_type_t *);
	int (*field_qualify_IpProtocol)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpProtocolClass)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_IpProtocolClass_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_IpProtocolCommon)(int,bcm_field_entry_t,bcm_field_IpProtocolCommon_t);
	int (*field_qualify_IpProtocolCommon_get)(int,bcm_field_entry_t,bcm_field_IpProtocolCommon_t *);
	int (*field_qualify_IpProtocol_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpTtlZeroPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpTtlZeroPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpTunnelHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpTunnelHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpTunnelTtl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpTunnelTtlClassZero)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_IpTunnelTtlClassZero_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_IpTunnelTtl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpTunnelValue)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_IpTunnelValue_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_IpType)(int,bcm_field_entry_t,bcm_field_IpType_t);
	int (*field_qualify_IpType_get)(int,bcm_field_entry_t,bcm_field_IpType_t *);
	int (*field_qualify_IpmcHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpmcHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpmcStarGroupHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpmcStarGroupHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpmcStarGroupValue)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_IpmcStarGroupValue_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_IpmcV4Pkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpmcV4Pkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpmcV6Pkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IpmcV6Pkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IpmcValue)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_IpmcValue_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_Ipv4OptionHdrType)(int,bcm_field_entry_t,bcm_field_ip_option_hdr_type_t);
	int (*field_qualify_Ipv4OptionHdrType_get)(int,bcm_field_entry_t,bcm_field_ip_option_hdr_type_t *);
	int (*field_qualify_Ipv6ExtensionHdrType)(int,bcm_field_entry_t,bcm_field_ip_option_hdr_type_t);
	int (*field_qualify_Ipv6ExtensionHdrType_get)(int,bcm_field_entry_t,bcm_field_ip_option_hdr_type_t *);
	int (*field_qualify_IsEqualValue)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IsEqualValue_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_IsUcastCosQueue)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_IsUcastCosQueue_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_KeyGenVar)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_L2CacheHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2CacheHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2DestHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2DestHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2DestSRNodeType)(int,bcm_field_entry_t,bcm_field_sr_node_type_t);
	int (*field_qualify_L2DestSRNodeType_get)(int,bcm_field_entry_t,bcm_field_sr_node_type_t *);
	int (*field_qualify_L2DestValue)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_L2DestValue_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_L2DstMiscClassId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2DstMiscClassId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2DstMulticastHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2DstMulticastHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2EgrIntfEfpCtrlId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2EgrIntfEfpCtrlId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2EgressInterface)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_L2EgressInterface_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_L2Format)(int,bcm_field_entry_t,bcm_field_L2Format_t);
	int (*field_qualify_L2Format_get)(int,bcm_field_entry_t,bcm_field_L2Format_t *);
	int (*field_qualify_L2GreFlowId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2GreFlowId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2GreProtocolType)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_L2GreProtocolType_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_L2GreSrcIpHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2GreSrcIpHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2GreVfiHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2GreVfiHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2GreVsid)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_L2GreVsid_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_L2IngressInterface)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_L2IngressInterface_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_L2InterfaceMatch)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2InterfaceMatch_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2Learn)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2LearnCommands)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_L2LearnCommands_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_L2Learn_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2MacInfo)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_L2MacInfo_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_L2PayLoad)(int,bcm_field_entry_t,uint32,const uint8 *,const uint8 *);
	int (*field_qualify_L2PayLoad_get)(int,bcm_field_entry_t,uint32,uint8 *,uint8 *);
	int (*field_qualify_L2PayloadFirstEightBytes)(int,bcm_field_entry_t,uint32,uint32,uint32,uint32);
	int (*field_qualify_L2PayloadFirstEightBytes_get)(int,bcm_field_entry_t,uint32 *,uint32 *,uint32 *,uint32 *);
	int (*field_qualify_L2PktType)(int,bcm_field_entry_t,bcm_field_l2_pkt_type_t);
	int (*field_qualify_L2PktType_get)(int,bcm_field_entry_t,bcm_field_l2_pkt_type_t *);
	int (*field_qualify_L2SrcDiscard)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2SrcDiscard_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2SrcHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2SrcHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2SrcMiscClassId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2SrcMiscClassId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2SrcMulticastHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2SrcMulticastHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2SrcStatic)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2SrcStatic_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L2SrcValue)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_L2SrcValue_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_L2StationMove)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L2StationMove_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L3Check)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_L3Check_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_L3DestHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L3DestHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L3DestHostHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L3DestHostHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L3DestRouteHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L3DestRouteHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L3DestRouteValue)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_L3DestRouteValue_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_L3DstMiscClassId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L3DstMiscClassId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L3EgressIntf)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_L3EgressIntf_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_L3Ingress)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_L3Ingress_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_L3Routable)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L3Routable_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L3SrcBind)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L3SrcBind_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L3SrcHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L3SrcHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L3SrcHostHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L3SrcHostHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L3SrcMiscClassId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L3SrcMiscClassId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L3SrcRouteHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L3SrcRouteHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L3SrcRouteValue)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_L3SrcRouteValue_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_L4DstPort)(int,bcm_field_entry_t,bcm_l4_port_t,bcm_l4_port_t);
	int (*field_qualify_L4DstPortClass)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_L4DstPortClass_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_L4DstPort_get)(int,bcm_field_entry_t,bcm_l4_port_t *,bcm_l4_port_t *);
	int (*field_qualify_L4Info)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_L4Info_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_L4PortRangeCheck)(int,bcm_field_entry_t,bcm_field_range_t,int);
	int (*field_qualify_L4PortRangeCheck_get)(int,bcm_field_entry_t,int,bcm_field_range_t *,int *,int *);
	int (*field_qualify_L4Ports)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L4Ports_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L4SrcPort)(int,bcm_field_entry_t,bcm_l4_port_t,bcm_l4_port_t);
	int (*field_qualify_L4SrcPortClass)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_L4SrcPortClass_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_L4SrcPort_get)(int,bcm_field_entry_t,bcm_l4_port_t *,bcm_l4_port_t *);
	int (*field_qualify_L5PayloadByte1)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L5PayloadByte1_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L5PayloadByte2)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L5PayloadByte2_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L5PayloadByte3)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L5PayloadByte3_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L5PayloadByte4)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L5PayloadByte4_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L5PayloadByte5)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L5PayloadByte5_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L5PayloadByte6)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L5PayloadByte6_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L5PayloadByte7)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L5PayloadByte7_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_L5PayloadByte8)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_L5PayloadByte8_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_LastIpProtocol)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_LastIpProtocol_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_LearnExtension)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_LearnExtension_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_LearnInVPort)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_LearnInVPort_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_LearnSrcMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_LearnSrcMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_LearnSrcPort)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_LearnSrcPort_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_LearnVlan)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_LearnVlan_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_Llc)(int,bcm_field_entry_t,bcm_field_llc_header_t,bcm_field_llc_header_t);
	int (*field_qualify_Llc_get)(int,bcm_field_entry_t,bcm_field_llc_header_t *,bcm_field_llc_header_t *);
	int (*field_qualify_LlidValue)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_LlidValue_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_LookupClassField)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_LookupClassField_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_LoopBackColor)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_LoopBackColor_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_LoopBackCpuMasqueradePktProfile)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_LoopBackCpuMasqueradePktProfile_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_LoopBackPacketProcessingPort)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_LoopBackPacketProcessingPort_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_LoopBackQueue)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_LoopBackQueue_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_LoopBackSrcGport)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_LoopBackSrcGport_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_LoopBackTrafficClass)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_LoopBackTrafficClass_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Loopback)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_LoopbackHdrDstType)(int,bcm_field_entry_t,bcm_field_DstType_t);
	int (*field_qualify_LoopbackHdrDstType_get)(int,bcm_field_entry_t,bcm_field_DstType_t *);
	int (*field_qualify_LoopbackHdrFlags)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_LoopbackHdrFlags_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_LoopbackHiGig3Flags)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_LoopbackHiGig3Flags_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_LoopbackIfaSwitchCopyDrop)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_LoopbackIfaSwitchCopyDrop_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_LoopbackLagFailoverPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_LoopbackLagFailoverPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_LoopbackSubtype)(int,bcm_field_entry_t,bcm_field_loopback_subtype_t);
	int (*field_qualify_LoopbackSubtype_get)(int,bcm_field_entry_t,bcm_field_loopback_subtype_t *);
	int (*field_qualify_LoopbackType)(int,bcm_field_entry_t,bcm_field_LoopbackType_t);
	int (*field_qualify_LoopbackType_get)(int,bcm_field_entry_t,bcm_field_LoopbackType_t *);
	int (*field_qualify_Loopback_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MHOpcode)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MHOpcode_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MHPriority)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MHPriority_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MacAddrsNormalized)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MacAddrsNormalized_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MacSecControlPkt)(int,bcm_field_entry_t,bcm_field_macsec_encrypt_decrypt_pkt_t);
	int (*field_qualify_MacSecControlPkt_get)(int,bcm_field_entry_t,bcm_field_macsec_encrypt_decrypt_pkt_t *);
	int (*field_qualify_MacSecDstMacRangeHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MacSecDstMacRangeHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MacSecFlow)(int,bcm_field_entry_t,bcm_field_macsec_flow_t);
	int (*field_qualify_MacSecFlow_get)(int,bcm_field_entry_t,bcm_field_macsec_flow_t *);
	int (*field_qualify_MacSecOpaque)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_MacSecOpaque_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_MacSecSecTagCbit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MacSecSecTagCbit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MacSecSecTagEbit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MacSecSecTagEbit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MacSecTag)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MacSecTagPresent)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MacSecTagPresent_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MacSecTag_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_McastPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_McastPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MimSrcGportHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MimSrcGportHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MimVfiHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MimVfiHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MimVlanCfi)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MimVlanCfi_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MimVlanPri)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MimVlanPri_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MimlDstMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_MimlDstMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_MimlInnerTag)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MimlInnerTag_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MimlPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MimlPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MimlSrcMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_MimlSrcMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_MimlVlan)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_MimlVlanCfi)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MimlVlanCfi_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MimlVlanId)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_MimlVlanId_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_MimlVlanPri)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MimlVlanPri_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MimlVlan_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_MirrorCopy)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MirrorCopy_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MirrorDest)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_MirrorDest_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_MirrorEgressDisabled)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MirrorEgressDisabled_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MirrorOnDrop)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MirrorOnDropReason)(int,bcm_field_entry_t,bcm_field_mirror_on_drop_reason_t);
	int (*field_qualify_MirrorOnDropReason_get)(int,bcm_field_entry_t,bcm_field_mirror_on_drop_reason_t *);
	int (*field_qualify_MirrorOnDrop_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MirrorPktType)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MirrorPktType_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MixedSrcClassId)(int,bcm_field_entry_t,bcm_pbmp_t,bcm_field_src_class_t,bcm_field_src_class_t);
	int (*field_qualify_MixedSrcClassId_get)(int,bcm_field_entry_t,bcm_pbmp_t,bcm_field_src_class_t *,bcm_field_src_class_t *);
	int (*field_qualify_MplsBos)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsBos_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsControlPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsControlPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsControlWord)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsControlWordValid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsControlWordValid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsControlWord_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsCtrlPktType)(int,bcm_field_entry_t,bcm_field_mpls_ctrl_pkt_type_t);
	int (*field_qualify_MplsCtrlPktType_get)(int,bcm_field_entry_t,bcm_field_mpls_ctrl_pkt_type_t *);
	int (*field_qualify_MplsCwPresent)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsCwPresent_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsForwardingControlWord)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsForwardingControlWord_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsForwardingLabel)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsForwardingLabelAction)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsForwardingLabelAction32)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsForwardingLabelAction32_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsForwardingLabelAction_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsForwardingLabelBos)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsForwardingLabelBos_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsForwardingLabelExp)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsForwardingLabelExp_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsForwardingLabelId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsForwardingLabelId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsForwardingLabelPayload)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_MplsForwardingLabelPayload_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_MplsForwardingLabelTtl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsForwardingLabelTtl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsForwardingLabel_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsLabel1)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsLabel1Bos)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel1Bos_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel1Exp)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel1Exp_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel1Hit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel1Hit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel1Id)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsLabel1Id_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsLabel1Ttl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel1Ttl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel1_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsLabel2)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsLabel2Bos)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel2Bos_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel2Exp)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel2Exp_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel2Hit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel2Hit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel2Id)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsLabel2Id_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsLabel2Ttl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel2Ttl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel2_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsLabel3)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsLabel3Bos)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel3Bos_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel3Exp)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel3Exp_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel3Id)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsLabel3Id_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsLabel3Ttl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel3Ttl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel3_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsLabel4)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsLabel4Bos)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel4Bos_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel4Exp)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel4Exp_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel4Id)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsLabel4Id_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsLabel4Ttl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel4Ttl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel4_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsLabel5)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsLabel5Bos)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel5Bos_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel5Exp)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel5Exp_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel5Id)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsLabel5Id_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsLabel5Ttl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel5Ttl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel5_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsLabel6)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsLabel6Bos)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel6Bos_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel6Exp)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel6Exp_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel6Id)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsLabel6Id_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsLabel6Ttl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel6Ttl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel6_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsLabel7)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsLabel7Bos)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel7Bos_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel7Exp)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel7Exp_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel7Id)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsLabel7Id_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsLabel7Ttl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsLabel7Ttl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsLabel7_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsMcastEthertypePresent)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsMcastEthertypePresent_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsOamACH)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsOamACH_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsOamClassMplsSwitchLabel)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_MplsOamClassMplsSwitchLabel_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_MplsOamControlPktType)(int,bcm_field_entry_t,bcm_field_MplsOam_Control_pktType_t);
	int (*field_qualify_MplsOamControlPktType_get)(int,bcm_field_entry_t,bcm_field_MplsOam_Control_pktType_t *);
	int (*field_qualify_MplsOamGALExposed)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsOamGALExposed_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsOamGALLabelOnly)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsOamGALLabelOnly_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsOamHeaderBits0_31)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsOamHeaderBits0_31_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsOamHeaderBits32_63)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsOamHeaderBits32_63_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_MplsOamUpperLabelDataDrop)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsOamUpperLabelDataDrop_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsOuterLabelPop)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsOuterLabelPop_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsStationHitTunnelUnterminated)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsStationHitTunnelUnterminated_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsTerminated)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsTerminatedHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MplsTerminatedHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsTerminatedValue)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_MplsTerminatedValue_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_MplsTerminated_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MplsTopHeader)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsTopHeader_get)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsVcLabelHeader)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MplsVcLabelHeader_get)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_MyStation2Hit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MyStation2Hit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_MyStationHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_MyStationHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_NatDstRealmId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_NatDstRealmId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_NatNeeded)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_NatNeeded_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_NatSrcRealmId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_NatSrcRealmId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_NativeVSwitch)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_NativeVSwitchValid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_NativeVSwitchValid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_NativeVSwitch_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_NetworkTagMulticastPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_NetworkTagMulticastPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_NetworkTagType)(int,bcm_field_entry_t,bcm_field_network_tag_type_t);
	int (*field_qualify_NetworkTagType_get)(int,bcm_field_entry_t,bcm_field_network_tag_type_t *);
	int (*field_qualify_NshServiceIndex)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_NshServiceIndex_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_NshServicePathId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_NshServicePathId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OamDownMEPLoopbackPacket)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OamDownMEPLoopbackPacket_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OamEgressClass2Vxlt)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_OamEgressClass2Vxlt_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OamEgressClassPort)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_OamEgressClassPort_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_OamEgressClassSrcMac)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_OamEgressClassSrcMac_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OamEgressClassVxlt)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_OamEgressClassVxlt_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_OamEgressEtherType)(int,bcm_field_entry_t,uint16);
	int (*field_qualify_OamEgressEtherType_get)(int,bcm_field_entry_t,uint16 *);
	int (*field_qualify_OamEgressMulticastMacHit)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_OamEgressMulticastMacHit_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_OamEgressPortUnicastDstMacHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OamEgressPortUnicastDstMacHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OamEgressVxltFirstHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OamEgressVxltFirstHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OamEgressVxltSecondHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OamEgressVxltSecondHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OamHeaderBits0_31)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_OamHeaderBits0_31_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OamHeaderBits32_63)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_OamHeaderBits32_63_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OamHeaderOffset)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_OamHeaderOffset_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OamInLifId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_OamInLifIdValid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OamInLifIdValid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OamInLifId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OamMdl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OamMdl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OamMepId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_OamMepId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OamMeterDisable)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OamMeterDisable_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OamStampOffset)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_OamStampOffset_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OamSubtype)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OamSubtype_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OamTsSystemHeader)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_OamTsSystemHeader_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_OamType)(int,bcm_field_entry_t,bcm_field_oam_type_t);
	int (*field_qualify_OamType_get)(int,bcm_field_entry_t,bcm_field_oam_type_t *);
	int (*field_qualify_OamUpMep)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OamUpMep_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OpaqueObject1)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_OpaqueObject1_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_OpaqueObject2)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_OpaqueObject2_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_OpaqueObject3)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_OpaqueObject3_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_OpaqueObject4)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_OpaqueObject4_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_OpaqueTagHigh)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_OpaqueTagHigh_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OpaqueTagLow)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_OpaqueTagLow_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OpaqueTagType)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OpaqueTagType_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OutPort)(int,bcm_field_entry_t,bcm_port_t,bcm_port_t);
	int (*field_qualify_OutPort_get)(int,bcm_field_entry_t,bcm_port_t *,bcm_port_t *);
	int (*field_qualify_OutPorts)(int,bcm_field_entry_t,bcm_pbmp_t,bcm_pbmp_t);
	int (*field_qualify_OutPorts_get)(int,bcm_field_entry_t,bcm_pbmp_t *,bcm_pbmp_t *);
	int (*field_qualify_OutVPort)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OutVPort32)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_OutVPort32_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OutVPort_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterIpInfo)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_OuterIpInfo_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OuterL2MacInfo)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_OuterL2MacInfo_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OuterL4Info)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_OuterL4Info_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_OuterL5PayloadByte1)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OuterL5PayloadByte1_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterL5PayloadByte2)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OuterL5PayloadByte2_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterL5PayloadByte3)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OuterL5PayloadByte3_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterL5PayloadByte4)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OuterL5PayloadByte4_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterL5PayloadByte5)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OuterL5PayloadByte5_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterL5PayloadByte6)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OuterL5PayloadByte6_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterL5PayloadByte7)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OuterL5PayloadByte7_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterL5PayloadByte8)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OuterL5PayloadByte8_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterPriTaggedPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OuterPriTaggedPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterTpid)(int,bcm_field_entry_t,uint16);
	int (*field_qualify_OuterTpid_get)(int,bcm_field_entry_t,uint16 *);
	int (*field_qualify_OuterVlan)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_OuterVlanActionRange)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_OuterVlanActionRange_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_OuterVlanCfi)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OuterVlanCfi_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterVlanId)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_OuterVlanId_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_OuterVlanPri)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OuterVlanPriCfi)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OuterVlanPriCfi_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterVlanPri_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterVlanRangeMatch)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OuterVlanRangeMatch_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterVlanTagPreserve)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OuterVlanTagPreserve_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_OuterVlan_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_OverlayEgressClass)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_OverlayEgressClass_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_OverlayIpOptionHdrType)(int,bcm_field_entry_t,bcm_field_ip_option_hdr_type_t);
	int (*field_qualify_OverlayIpOptionHdrType_get)(int,bcm_field_entry_t,bcm_field_ip_option_hdr_type_t *);
	int (*field_qualify_OverlayIpv4OptionHdrType)(int,bcm_field_entry_t,bcm_field_ip_option_hdr_type_t);
	int (*field_qualify_OverlayIpv4OptionHdrType_get)(int,bcm_field_entry_t,bcm_field_ip_option_hdr_type_t *);
	int (*field_qualify_OverlayIpv6ExtensionHdrType)(int,bcm_field_entry_t,bcm_field_ip_option_hdr_type_t);
	int (*field_qualify_OverlayIpv6ExtensionHdrType_get)(int,bcm_field_entry_t,bcm_field_ip_option_hdr_type_t *);
	int (*field_qualify_OverlayL2PktType)(int,bcm_field_entry_t,bcm_field_l2_pkt_type_t);
	int (*field_qualify_OverlayL2PktType_get)(int,bcm_field_entry_t,bcm_field_l2_pkt_type_t *);
	int (*field_qualify_OverlayNetworkTagType)(int,bcm_field_entry_t,bcm_field_network_tag_type_t);
	int (*field_qualify_OverlayNetworkTagType_get)(int,bcm_field_entry_t,bcm_field_network_tag_type_t *);
	int (*field_qualify_OverlayPktType)(int,bcm_field_entry_t,bcm_field_pkt_type_t);
	int (*field_qualify_OverlayPktType_get)(int,bcm_field_entry_t,bcm_field_pkt_type_t *);
	int (*field_qualify_OverlayVlanFormat)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_OverlayVlanFormat_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_PacketIsIEEE1588)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_PacketIsIEEE1588_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_PacketLength)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_PacketLengthRangeCheck)(int,bcm_field_entry_t,bcm_field_range_t,int);
	int (*field_qualify_PacketLengthRangeCheck_get)(int,bcm_field_entry_t,int,bcm_field_range_t *,int *,int *);
	int (*field_qualify_PacketLength_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_PacketRes)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_PacketRes_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_PacketSize)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_PacketSize_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_PacketStatus)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_PacketStatus_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_PacketTerminatedBytes)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_PacketTerminatedBytes_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_PdelayReq)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_PdelayReq_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_PimBidirDfStatus)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_PimBidirDfStatus_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_PktDstAddrType)(int,bcm_field_entry_t,uint32);
	int (*field_qualify_PktDstAddrType_get)(int,bcm_field_entry_t,uint32 *);
	int (*field_qualify_PktFlowType)(int,bcm_field_entry_t,bcm_field_pkt_flow_type_t);
	int (*field_qualify_PktFlowType_get)(int,bcm_field_entry_t,bcm_field_pkt_flow_type_t *);
	int (*field_qualify_PktFwdType)(int,bcm_field_entry_t,bcm_field_PktFwdType_t);
	int (*field_qualify_PktFwdType_get)(int,bcm_field_entry_t,bcm_field_PktFwdType_t *);
	int (*field_qualify_PktInnerDstAddrType)(int,bcm_field_entry_t,uint32);
	int (*field_qualify_PktInnerDstAddrType_get)(int,bcm_field_entry_t,uint32 *);
	int (*field_qualify_PktIsVisible)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_PktIsVisible_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_PktMiscCtrl)(int,bcm_field_entry_t,bcm_field_pkt_misc_ctrl_t);
	int (*field_qualify_PktMiscCtrl_get)(int,bcm_field_entry_t,bcm_field_pkt_misc_ctrl_t *);
	int (*field_qualify_PktType)(int,bcm_field_entry_t,bcm_field_pkt_type_t);
	int (*field_qualify_PktType_get)(int,bcm_field_entry_t,bcm_field_pkt_type_t *);
	int (*field_qualify_PolicerIntPrio)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_PolicerIntPrio_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_PortOrientation)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_PortOrientation_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_PphType)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_PphType_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_PreemptablePacket)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_PreemptablePacket_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_PreselId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_PreselId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_ProtocolPktOpaqueCtrlId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ProtocolPktOpaqueCtrlId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Ptch)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_Ptch_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_PtpMsgType)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_PtpMsgType_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_PtpPktCtrl)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_PtpPktCtrl_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_PtpReserved1)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_PtpReserved1_get)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_PtpTransportSpec)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_PtpTransportSpec_get)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_PtpVersion)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_PtpVersion_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_RangeCheck)(int,bcm_field_entry_t,bcm_field_range_t,int);
	int (*field_qualify_RangeCheckGroup)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_RangeCheckGroup_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_RangeCheck_get)(int,bcm_field_entry_t,int,bcm_field_range_t *,int *,int *);
	int (*field_qualify_RawResidenceTime)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_RawResidenceTime_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_RecircleHdrCode)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_RecircleHdrCode_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_RecircleHdrDropReason)(int,bcm_field_entry_t,bcm_field_drop_reason_t);
	int (*field_qualify_RecircleHdrDropReason_get)(int,bcm_field_entry_t,bcm_field_drop_reason_t *);
	int (*field_qualify_RecircleHdrFirstDropReason)(int,bcm_field_entry_t,bcm_field_drop_reason_t);
	int (*field_qualify_RecircleHdrFirstDropReason_get)(int,bcm_field_entry_t,bcm_field_drop_reason_t *);
	int (*field_qualify_RecircleHdrOpaqueCtrlIdC)(int,bcm_field_entry_t,int,int);
	int (*field_qualify_RecircleHdrOpaqueCtrlIdC_get)(int,bcm_field_entry_t,int *,int *);
	int (*field_qualify_RecoverableDrop)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_RecoverableDrop_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_RepCopy)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_RepCopy_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ReplicantAny)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ReplicantAny_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_ReplicantFirst)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_ReplicantFirst_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_RoceBthDstQueuePair)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_RoceBthDstQueuePair_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_RoceBthFlags)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_RoceBthFlags_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_RoceBthOpcode)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_RoceBthOpcode_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_RoceBthPartitionKey)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_RoceBthPartitionKey_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_RoceVer1Pkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_RoceVer1Pkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_RoceVer2Pkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_RoceVer2Pkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_RoeFrameType)(int,bcm_field_entry_t,bcm_field_roe_frame_type_t);
	int (*field_qualify_RoeFrameType_get)(int,bcm_field_entry_t,bcm_field_roe_frame_type_t *);
	int (*field_qualify_RouterAlertLabelValid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_RouterAlertLabelValid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Rtag7AHashLower)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_Rtag7AHashLower_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_Rtag7AHashUpper)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_Rtag7AHashUpper_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_Rtag7BHashLower)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_Rtag7BHashLower_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_Rtag7BHashUpper)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_Rtag7BHashUpper_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_Rtag7CHashLower)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_Rtag7CHashLower_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_Rtag7CHashUpper)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_Rtag7CHashUpper_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_RxPortType)(int,bcm_field_entry_t,bcm_field_PortType_t);
	int (*field_qualify_RxPortType_get)(int,bcm_field_entry_t,bcm_field_PortType_t *);
	int (*field_qualify_RxTrapCode)(int,bcm_field_entry_t,bcm_rx_trap_t);
	int (*field_qualify_RxTrapCode32)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_RxTrapCode32_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_RxTrapCodeForSnoop)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_RxTrapCodeForSnoop_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_RxTrapCode_get)(int,bcm_field_entry_t,bcm_rx_trap_t *);
	int (*field_qualify_RxTrapData)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_RxTrapData_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_RxTrapStrength)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_RxTrapStrength_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_SRDuplicate)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_SRDuplicate_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_SRError)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_SRError_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_SRFlowId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_SRFlowId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_SRLanId)(int,bcm_field_entry_t,int);
	int (*field_qualify_SRLanId_get)(int,bcm_field_entry_t,int *);
	int (*field_qualify_SRNetId)(int,bcm_field_entry_t,int);
	int (*field_qualify_SRNetIdMatched)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_SRNetIdMatched_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_SRNetId_get)(int,bcm_field_entry_t,int *);
	int (*field_qualify_SRSrcNodeIsSan)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_SRSrcNodeIsSan_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_SRSupervisionType)(int,bcm_field_entry_t,bcm_field_sr_supervision_type_t);
	int (*field_qualify_SRSupervisionType_get)(int,bcm_field_entry_t,bcm_field_sr_supervision_type_t *);
	int (*field_qualify_SRTagType)(int,bcm_field_entry_t,bcm_field_sr_tag_type_t);
	int (*field_qualify_SRTagType_get)(int,bcm_field_entry_t,bcm_field_sr_tag_type_t *);
	int (*field_qualify_SampledPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_SampledPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Snap)(int,bcm_field_entry_t,bcm_field_snap_header_t,bcm_field_snap_header_t);
	int (*field_qualify_Snap_get)(int,bcm_field_entry_t,bcm_field_snap_header_t *,bcm_field_snap_header_t *);
	int (*field_qualify_SnoopCopy)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_SnoopCopy_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_SourceGportBitmap)(int,bcm_field_entry_t,bcm_pbmp_t,bcm_pbmp_t);
	int (*field_qualify_SourceGportBitmap_get)(int,bcm_field_entry_t,bcm_pbmp_t *,bcm_pbmp_t *);
	int (*field_qualify_SrcClassField)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_SrcClassField_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_SrcClassL2)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_SrcClassL2_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_SrcClassL3)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_SrcClassL3_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_SrcCompressionClassId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_SrcCompressionClassId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_SrcGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_SrcGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_SrcGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_SrcGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_SrcIp)(int,bcm_field_entry_t,bcm_ip_t,bcm_ip_t);
	int (*field_qualify_SrcIp6)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_SrcIp6Class)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_SrcIp6ClassLower)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_SrcIp6ClassLower_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_SrcIp6ClassMsbNibble)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_SrcIp6ClassMsbNibble_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_SrcIp6ClassUpper)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_SrcIp6ClassUpper_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_SrcIp6Class_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_SrcIp6High)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_SrcIp6High_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_SrcIp6Low)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_SrcIp6Low_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_SrcIp6SrhValid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_SrcIp6SrhValid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_SrcIp6_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_SrcIpClass)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_SrcIpClassLower)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_SrcIpClassLower_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_SrcIpClassMsbNibble)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_SrcIpClassMsbNibble_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_SrcIpClassUpper)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_SrcIpClassUpper_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_SrcIpClass_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_SrcIp_get)(int,bcm_field_entry_t,bcm_ip_t *,bcm_ip_t *);
	int (*field_qualify_SrcMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_SrcMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_SrcMimGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_SrcMimGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_SrcMimGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_SrcMimGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_SrcModPortGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_SrcModPortGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_SrcModPortGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_SrcModPortGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_SrcModuleGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_SrcModuleGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_SrcMplsGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_SrcMplsGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_SrcMplsGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_SrcMplsGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_SrcNivGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_SrcNivGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_SrcNivGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_SrcNivGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_SrcPort)(int,bcm_field_entry_t,bcm_module_t,bcm_module_t,bcm_port_t,bcm_port_t);
	int (*field_qualify_SrcPortSRLanId)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_SrcPortSRLanId_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_SrcPortSRMode)(int,bcm_field_entry_t,bcm_field_sr_port_mode_t,uint8);
	int (*field_qualify_SrcPortSRMode_get)(int,bcm_field_entry_t,bcm_field_sr_port_mode_t *,uint8 *);
	int (*field_qualify_SrcPortSRNetId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_SrcPortSRNetId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_SrcPortSRRoleInterlink)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_SrcPortSRRoleInterlink_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_SrcPortSRType)(int,bcm_field_entry_t,bcm_field_port_sr_type_t);
	int (*field_qualify_SrcPortSRType_get)(int,bcm_field_entry_t,bcm_field_port_sr_type_t *);
	int (*field_qualify_SrcPort_get)(int,bcm_field_entry_t,bcm_module_t *,bcm_module_t *,bcm_port_t *,bcm_port_t *);
	int (*field_qualify_SrcTMPort)(int,bcm_field_entry_t,bcm_port_t,bcm_port_t);
	int (*field_qualify_SrcTMPort_get)(int,bcm_field_entry_t,bcm_port_t *,bcm_port_t *);
	int (*field_qualify_SrcTrunk)(int,bcm_field_entry_t,bcm_trunk_t,bcm_trunk_t);
	int (*field_qualify_SrcTrunkMemberGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_SrcTrunkMemberGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_SrcTrunk_get)(int,bcm_field_entry_t,bcm_trunk_t *,bcm_trunk_t *);
	int (*field_qualify_SrcVirtualPortValid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_SrcVirtualPortValid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_SrcVlanGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_SrcVlanGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_SrcVlanGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_SrcVlanGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_SrcVxlanGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_SrcVxlanGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_SrcVxlanGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_SrcVxlanGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_SrcWlanGport)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_SrcWlanGport_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_SrcWlanGports)(int,bcm_field_entry_t,bcm_gport_t,bcm_gport_t);
	int (*field_qualify_SrcWlanGports_get)(int,bcm_field_entry_t,bcm_gport_t *,bcm_gport_t *);
	int (*field_qualify_StackingRoute)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_StackingRoute_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_Stage)(int,bcm_field_entry_t,bcm_field_stage_t);
	int (*field_qualify_Stage_get)(int,bcm_field_entry_t,bcm_field_stage_t *);
	int (*field_qualify_StaggeredDirectValue)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_StaggeredDirectValue_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_StaggeredPreselProfile0)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_StaggeredPreselProfile0_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_StaggeredPreselProfile1)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_StaggeredPreselProfile1_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_StaggeredPreselProfile2)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_StaggeredPreselProfile2_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_StaggeredPreselProfile3)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_StaggeredPreselProfile3_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_StaggeredPreselProfileDirect)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_StaggeredPreselProfileDirect_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_StaggeredValue0)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_StaggeredValue0_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_StaggeredValue1)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_StaggeredValue1_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_StaggeredValue2)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_StaggeredValue2_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_StaggeredValue3)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_StaggeredValue3_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_Stg)(int,bcm_field_entry_t,bcm_stg_t,bcm_stg_t);
	int (*field_qualify_Stg_get)(int,bcm_field_entry_t,bcm_stg_t *,bcm_stg_t *);
	int (*field_qualify_StpState)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_StpState_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_SubportGroupIds)(int,bcm_field_entry_t,uint32,bcm_subport_port_group_t *);
	int (*field_qualify_SubportGroupIds_get)(int,bcm_field_entry_t,uint32,bcm_subport_port_group_t *,uint32 *);
	int (*field_qualify_SubportPktTag)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_SubportPktTag_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_SubportTagPresent)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_SubportTagPresent_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_SvpOpaqueCtrlId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_SvpOpaqueCtrlId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Svtag)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_Svtag_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_SysHdrLocalDstport)(int,bcm_field_entry_t,bcm_port_t,bcm_port_t);
	int (*field_qualify_SysHdrLocalDstport_get)(int,bcm_field_entry_t,bcm_port_t *,bcm_port_t *);
	int (*field_qualify_SysHdrType)(int,bcm_field_entry_t,bcm_field_sys_hdr_type_t);
	int (*field_qualify_SysHdrType_get)(int,bcm_field_entry_t,bcm_field_sys_hdr_type_t *);
	int (*field_qualify_SystemPortBitmap)(int,bcm_field_entry_t,bcm_pbmp_t,bcm_pbmp_t);
	int (*field_qualify_SystemPortBitmap_get)(int,bcm_field_entry_t,bcm_pbmp_t *,bcm_pbmp_t *);
	int (*field_qualify_TafCosProfile)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_TafCosProfile_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_TafEnable)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_TafEnable_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_TafGateId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_TafGateId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_TafGateState)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_TafGateState_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_TcpAckNum)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_TcpAckNum_get)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_TcpClassOne)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_TcpClassOne_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_TcpClassZero)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_TcpClassZero_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_TcpControl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TcpControl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TcpHeaderSize)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TcpHeaderSize_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TcpSequenceNum)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_TcpSequenceNum_get)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_TcpSequenceZero)(int,bcm_field_entry_t,uint32);
	int (*field_qualify_TcpSequenceZero_get)(int,bcm_field_entry_t,uint32 *);
	int (*field_qualify_TimeStampTxPktType)(int,bcm_field_entry_t,bcm_field_timestamp_transmit_pkt_type_t);
	int (*field_qualify_TimeStampTxPktType_get)(int,bcm_field_entry_t,bcm_field_timestamp_transmit_pkt_type_t *);
	int (*field_qualify_Tos)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TosClassOne)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_TosClassOne_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_TosClassZero)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_TosClassZero_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_TosLower4Bits)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TosLower4Bits_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_Tos_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TranslatedInnerVlan)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_TranslatedInnerVlanCfi)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TranslatedInnerVlanCfi_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TranslatedInnerVlanId)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_TranslatedInnerVlanId_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_TranslatedInnerVlanPri)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TranslatedInnerVlanPri_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TranslatedInnerVlan_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_TranslatedOuterVlan)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_TranslatedOuterVlanCfi)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TranslatedOuterVlanCfi_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TranslatedOuterVlanId)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_TranslatedOuterVlanId_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_TranslatedOuterVlanPri)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TranslatedOuterVlanPri_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TranslatedOuterVlan_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_TranslatedVlanFormat)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TranslatedVlanFormat_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TrillEgressRbridge)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_TrillEgressRbridgeHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TrillEgressRbridgeHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TrillEgressRbridge_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_TrillHopCount)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TrillHopCount_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TrillIVersion)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TrillIVersion_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TrillIngressRbridge)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_TrillIngressRbridgeHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TrillIngressRbridgeHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TrillIngressRbridge_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_TrillMultiDestination)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TrillMultiDestination_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TrillOpLength)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TrillOpLength_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TrillPayload)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_TrillPayload_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_TrunkHashResult)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_TrunkHashResult_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_TrunkMemberSourceModuleId)(int,bcm_field_entry_t,int,int);
	int (*field_qualify_TrunkMemberSourceModuleId_get)(int,bcm_field_entry_t,int *,int *);
	int (*field_qualify_TsnFlowId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_TsnFlowId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_Ttl)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TtlClassOne)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_TtlClassOne_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_TtlClassZero)(int,bcm_field_entry_t,bcm_class_t,bcm_class_t);
	int (*field_qualify_TtlClassZero_get)(int,bcm_field_entry_t,bcm_class_t *,bcm_class_t *);
	int (*field_qualify_Ttl_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TunnelAltDstIp)(int,bcm_field_entry_t,bcm_ip_t,bcm_ip_t);
	int (*field_qualify_TunnelAltDstIp6)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_TunnelAltDstIp6_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_TunnelAltDstIp_get)(int,bcm_field_entry_t,bcm_ip_t *,bcm_ip_t *);
	int (*field_qualify_TunnelAltEtherType)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_TunnelAltEtherType_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_TunnelAltIpProtocol)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TunnelAltIpProtocol_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TunnelAltL4DstPort)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_TunnelAltL4DstPort_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_TunnelAltL4SrcPort)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_TunnelAltL4SrcPort_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_TunnelAltSrcIp)(int,bcm_field_entry_t,bcm_ip_t,bcm_ip_t);
	int (*field_qualify_TunnelAltSrcIp6)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_TunnelAltSrcIp6_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_TunnelAltSrcIp_get)(int,bcm_field_entry_t,bcm_ip_t *,bcm_ip_t *);
	int (*field_qualify_TunnelHeaderDip)(int,bcm_field_entry_t,bcm_ip_t,bcm_ip_t);
	int (*field_qualify_TunnelHeaderDip6)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_TunnelHeaderDip6_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_TunnelHeaderDip_get)(int,bcm_field_entry_t,bcm_ip_t *,bcm_ip_t *);
	int (*field_qualify_TunnelHeaderDstMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_TunnelHeaderDstMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_TunnelHeaderIpProtocol)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TunnelHeaderIpProtocol_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TunnelHeaderSip)(int,bcm_field_entry_t,bcm_ip_t,bcm_ip_t);
	int (*field_qualify_TunnelHeaderSip6)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_TunnelHeaderSip6_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_TunnelHeaderSip_get)(int,bcm_field_entry_t,bcm_ip_t *,bcm_ip_t *);
	int (*field_qualify_TunnelHeaderSrcMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_TunnelHeaderSrcMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_TunnelId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_TunnelId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_TunnelPayloadDip)(int,bcm_field_entry_t,bcm_ip_t,bcm_ip_t);
	int (*field_qualify_TunnelPayloadDip6)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_TunnelPayloadDip6_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_TunnelPayloadDip_get)(int,bcm_field_entry_t,bcm_ip_t *,bcm_ip_t *);
	int (*field_qualify_TunnelPayloadDstMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_TunnelPayloadDstMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_TunnelPayloadEtherType)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_TunnelPayloadEtherType_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_TunnelPayloadIp4Length)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_TunnelPayloadIp4Length_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_TunnelPayloadIp6Length)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_TunnelPayloadIp6Length_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_TunnelPayloadIpProtocol)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TunnelPayloadIpProtocol_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TunnelPayloadL4DstPort)(int,bcm_field_entry_t,bcm_l4_port_t,bcm_l4_port_t);
	int (*field_qualify_TunnelPayloadL4DstPort_get)(int,bcm_field_entry_t,bcm_l4_port_t *,bcm_l4_port_t *);
	int (*field_qualify_TunnelPayloadL4SrcPort)(int,bcm_field_entry_t,bcm_l4_port_t,bcm_l4_port_t);
	int (*field_qualify_TunnelPayloadL4SrcPort_get)(int,bcm_field_entry_t,bcm_l4_port_t *,bcm_l4_port_t *);
	int (*field_qualify_TunnelPayloadOuterVlan)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_TunnelPayloadOuterVlanCfi)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TunnelPayloadOuterVlanCfi_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TunnelPayloadOuterVlanId)(int,bcm_field_entry_t,bcm_vlan_t,bcm_vlan_t);
	int (*field_qualify_TunnelPayloadOuterVlanId_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_TunnelPayloadOuterVlanPri)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TunnelPayloadOuterVlanPri_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TunnelPayloadOuterVlan_get)(int,bcm_field_entry_t,bcm_vlan_t *,bcm_vlan_t *);
	int (*field_qualify_TunnelPayloadSip)(int,bcm_field_entry_t,bcm_ip_t,bcm_ip_t);
	int (*field_qualify_TunnelPayloadSip6)(int,bcm_field_entry_t,bcm_ip6_t,bcm_ip6_t);
	int (*field_qualify_TunnelPayloadSip6_get)(int,bcm_field_entry_t,bcm_ip6_t *,bcm_ip6_t *);
	int (*field_qualify_TunnelPayloadSip_get)(int,bcm_field_entry_t,bcm_ip_t *,bcm_ip_t *);
	int (*field_qualify_TunnelPayloadSrcMac)(int,bcm_field_entry_t,bcm_mac_t,bcm_mac_t);
	int (*field_qualify_TunnelPayloadSrcMac_get)(int,bcm_field_entry_t,bcm_mac_t *,bcm_mac_t *);
	int (*field_qualify_TunnelSubType)(int,bcm_field_entry_t,bcm_field_TunnelSubType_t);
	int (*field_qualify_TunnelSubType_get)(int,bcm_field_entry_t,bcm_field_TunnelSubType_t *);
	int (*field_qualify_TunnelTermStatus)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_TunnelTermStatus_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_TunnelTerminated)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TunnelTerminatedHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TunnelTerminatedHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TunnelTerminatedValue)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_TunnelTerminatedValue_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_TunnelTerminated_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TunnelTerminationProcessingProfile)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_TunnelTerminationProcessingProfile_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_TunnelType)(int,bcm_field_entry_t,bcm_field_TunnelType_t);
	int (*field_qualify_TunnelType_get)(int,bcm_field_entry_t,bcm_field_TunnelType_t *);
	int (*field_qualify_TxPortType)(int,bcm_field_entry_t,bcm_field_PortType_t);
	int (*field_qualify_TxPortType_get)(int,bcm_field_entry_t,bcm_field_PortType_t *);
	int (*field_qualify_UdfClass)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_UdfClass_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_UdpLength)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_UdpLength_get)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_UntagPkt)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_UntagPkt_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_VPortRangeCheck)(int,bcm_field_entry_t,bcm_field_range_t,int);
	int (*field_qualify_VPortRangeCheck_get)(int,bcm_field_entry_t,int,bcm_field_range_t *,int *,int *);
	int (*field_qualify_VlanAction)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_VlanAction_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_VlanFormat)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_VlanFormat_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_VlanMembershipCheck)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_VlanMembershipCheck_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_VlanSREnable)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_VlanSREnable_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_VlanSRLanId)(int,bcm_field_entry_t,uint8);
	int (*field_qualify_VlanSRLanId_get)(int,bcm_field_entry_t,uint8 *);
	int (*field_qualify_VlanTranslateClassId)(int,bcm_field_entry_t,uint16,uint16);
	int (*field_qualify_VlanTranslateClassId_get)(int,bcm_field_entry_t,uint16 *,uint16 *);
	int (*field_qualify_VlanTranslationHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_VlanTranslationHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_VlanTranslationValue)(int,bcm_field_entry_t,uint64,uint64);
	int (*field_qualify_VlanTranslationValue_get)(int,bcm_field_entry_t,uint64 *,uint64 *);
	int (*field_qualify_VnTag)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_VnTag_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_Vpn)(int,bcm_field_entry_t,bcm_vpn_t,bcm_vpn_t);
	int (*field_qualify_VpnOpaqueCtrlId)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_VpnOpaqueCtrlId_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_VpnUnknownDstMacDstPort)(int,bcm_field_entry_t,bcm_gport_t);
	int (*field_qualify_VpnUnknownDstMacDstPort_get)(int,bcm_field_entry_t,bcm_gport_t *);
	int (*field_qualify_Vpn_get)(int,bcm_field_entry_t,bcm_vpn_t *,bcm_vpn_t *);
	int (*field_qualify_Vrf)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_Vrf_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_VxlanClassValid)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_VxlanClassValid_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_VxlanFlags)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_VxlanFlags_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_VxlanGbpPresent)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_VxlanGbpPresent_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_VxlanHeaderBits56_63)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_VxlanHeaderBits56_63_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_VxlanHeaderBits8_31)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_VxlanHeaderBits8_31_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_VxlanNetworkId)(int,bcm_field_entry_t,uint32,uint32);
	int (*field_qualify_VxlanNetworkId_get)(int,bcm_field_entry_t,uint32 *,uint32 *);
	int (*field_qualify_VxlanPacket)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_VxlanPacket_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_VxlanPayloadVlanFormat)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_VxlanPayloadVlanFormat_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_VxlanVnidVlanTranslateHit)(int,bcm_field_entry_t,uint8,uint8);
	int (*field_qualify_VxlanVnidVlanTranslateHit_get)(int,bcm_field_entry_t,uint8 *,uint8 *);
	int (*field_qualify_clear)(int,bcm_field_entry_t);
	int (*field_qualify_data)(int,bcm_field_entry_t,int,uint8 *,uint8 *,uint16);
	int (*field_qualify_data_get)(int,bcm_field_entry_t,int,uint16,uint8 *,uint8 *,uint16 *);
	int (*field_qualify_udf)(int,bcm_field_entry_t,bcm_udf_id_t,int,uint8 *,uint8 *);
	int (*field_qualify_udf_get)(int,bcm_field_entry_t,bcm_udf_id_t,int,uint8 *,uint8 *,int *);
	int (*field_range_create)(int,bcm_field_range_t *,uint32,bcm_l4_port_t,bcm_l4_port_t);
	int (*field_range_create_id)(int,bcm_field_range_t,uint32,bcm_l4_port_t,bcm_l4_port_t);
	int (*field_range_destroy)(int,bcm_field_range_t);
	int (*field_range_get)(int,bcm_field_range_t,uint32 *,bcm_l4_port_t *,bcm_l4_port_t *);
	int (*field_range_group_create)(int,bcm_field_range_t *,uint32,bcm_l4_port_t,bcm_l4_port_t,bcm_if_group_t);
	int (*field_range_group_create_id)(int,bcm_field_range_t,uint32,bcm_l4_port_t,bcm_l4_port_t,bcm_if_group_t);
	int (*field_range_info_get)(int,bcm_field_stage_t,bcm_field_range_t *,bcm_field_range_info_t *);
	/* bcm_field_range_info_t_init not dispatchable */
	int (*field_range_multi_create)(int,bcm_field_range_t *,uint32,int,uint32 *,uint32 *,uint32 *);
	int (*field_range_multi_get)(int,bcm_field_range_t,int,uint32 *,uint32 *,uint32 *,int *);
	int (*field_range_set)(int,uint32,bcm_field_stage_t,bcm_field_range_t,bcm_field_range_info_t *);
	int (*field_range_type_config_get)(int,uint32,bcm_field_stage_t,bcm_field_context_t,uint32,bcm_field_range_qual_info_t *);
	int (*field_range_type_config_set)(int,uint32,bcm_field_stage_t,bcm_field_context_t,uint32,bcm_field_range_qual_info_t *);
	/* bcm_field_redirect_config_t_init not dispatchable */
	int (*field_resync)(int);
	int (*field_sat_macsa_add)(int,bcm_mac_t,uint32);
	int (*field_sat_macsa_delete)(int,bcm_mac_t);
	int (*field_sat_macsa_delete_all)(int);
	int (*field_sat_macsa_get)(int,bcm_mac_t,uint32 *);
#ifdef	BROADCOM_DEBUG
	int (*field_show)(int,const char *);
	/* bcm_field_snap_header_t_init not dispatchable */
#endif	/* BROADCOM_DEBUG */
	int (*field_source_class_mode_get)(int,bcm_field_stage_t,bcm_pbmp_t,bcm_field_src_class_mode_t *);
	int (*field_source_class_mode_set)(int,bcm_field_stage_t,bcm_pbmp_t,bcm_field_src_class_mode_t);
	/* bcm_field_src_class_t_init not dispatchable */
	int (*field_stage_aset_get)(int,bcm_field_stage_t,bcm_field_aset_t *);
	int (*field_stage_info_get)(int,bcm_field_stage_t,bcm_field_stage_info_t *);
	int (*field_stage_qset_get)(int,bcm_field_stage_t,uint8,bcm_field_qset_t *);
	int (*field_stage_slice_count_get)(int,bcm_field_stage_t,int *);
	int (*field_stage_slice_info_get)(int,bcm_field_stage_t,bcm_pbmp_t,int,bcm_field_stage_slice_info_t *);
	int (*field_stat_all_set)(int,int,uint64);
	int (*field_stat_all_set32)(int,int,uint32);
	int (*field_stat_attach)(int,bcm_field_group_t,uint32,uint32 *);
	int (*field_stat_config_get)(int,int,int,bcm_field_stat_t *);
	int (*field_stat_counter_get)(int,uint32,bcm_field_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*field_stat_counter_set)(int,uint32,bcm_field_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*field_stat_counter_sync_get)(int,uint32,bcm_field_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*field_stat_create)(int,bcm_field_group_t,int,bcm_field_stat_t *,int *);
	int (*field_stat_create_id)(int,bcm_field_group_t,int,bcm_field_stat_t *,int);
	int (*field_stat_destroy)(int,int);
	int (*field_stat_detach)(int,uint32);
	int (*field_stat_get)(int,int,bcm_field_stat_t,uint64 *);
	int (*field_stat_get32)(int,int,bcm_field_stat_t,uint32 *);
	int (*field_stat_id_get)(int,bcm_field_group_t,uint32,uint32 *);
	int (*field_stat_multi_get)(int,int,int,bcm_field_stat_t *,uint64 *);
	int (*field_stat_multi_get32)(int,int,int,bcm_field_stat_t *,uint32 *);
	int (*field_stat_set)(int,int,bcm_field_stat_t,uint64);
	int (*field_stat_set32)(int,int,bcm_field_stat_t,uint32);
	int (*field_stat_size)(int,int,int *);
	int (*field_stat_sync_get)(int,int,bcm_field_stat_t,uint64 *);
	int (*field_stat_sync_get32)(int,int,bcm_field_stat_t,uint32 *);
	int (*field_tcam_bank_add)(int,uint32,bcm_field_tcam_bank_info_t *);
	int (*field_tcam_bank_evacuate)(int,uint32,bcm_field_tcam_bank_info_t *);
	/* bcm_field_tcam_bank_info_t_init not dispatchable */
	/* bcm_field_udf_spec_t_init not dispatchable */
	/* bcm_find not dispatchable */
	int (*flexctr_action_create)(int,int,bcm_flexctr_action_t *,uint32 *);
	int (*flexctr_action_destroy)(int,uint32);
	int (*flexctr_action_get)(int,uint32,bcm_flexctr_action_t *);
	/* bcm_flexctr_action_t_init not dispatchable */
	int (*flexctr_action_traverse)(int,bcm_flexctr_action_traverse_cb,void *);
	int (*flexctr_cleanup)(int);
	int (*flexctr_group_action_create)(int,int,bcm_flexctr_group_action_t *,uint32 *);
	int (*flexctr_group_action_destroy)(int,uint32);
	int (*flexctr_group_action_get)(int,uint32,bcm_flexctr_group_action_t *);
	/* bcm_flexctr_group_action_t_init not dispatchable */
	int (*flexctr_group_action_traverse)(int,bcm_flexctr_group_action_traverse_cb,void *);
	int (*flexctr_init)(int);
	int (*flexctr_object_overlay_multi_get)(int,bcm_flexctr_object_t,int,bcm_flexctr_object_t *,int *);
	int (*flexctr_packet_attribute_map_add)(int,int,bcm_flexctr_packet_attribute_map_t *,uint32);
	int (*flexctr_packet_attribute_map_delete)(int,int,bcm_flexctr_packet_attribute_map_t *);
	int (*flexctr_packet_attribute_map_delete_all)(int,int);
	/* bcm_flexctr_packet_attribute_map_entry_t_init not dispatchable */
	int (*flexctr_packet_attribute_map_get)(int,int,bcm_flexctr_packet_attribute_map_t *,uint32 *);
	/* bcm_flexctr_packet_attribute_map_t_init not dispatchable */
	int (*flexctr_packet_attribute_map_traverse)(int,int,bcm_flexctr_packet_attribute_map_traverse_cb,void *);
	int (*flexctr_packet_attribute_profile_create)(int,int,bcm_flexctr_packet_attribute_profile_t *,int *);
	int (*flexctr_packet_attribute_profile_destroy)(int,int);
	int (*flexctr_packet_attribute_profile_get)(int,int,bcm_flexctr_packet_attribute_profile_t *);
	/* bcm_flexctr_packet_attribute_profile_t_init not dispatchable */
	int (*flexctr_packet_attribute_profile_traverse)(int,bcm_flexctr_packet_attribute_profile_traverse_cb,void *);
	/* bcm_flexctr_packet_attribute_selector_t_init not dispatchable */
	int (*flexctr_quantization_create)(int,int,bcm_flexctr_quantization_t *,uint32 *);
	int (*flexctr_quantization_destroy)(int,uint32);
	int (*flexctr_quantization_get)(int,uint32,bcm_flexctr_quantization_t *);
	/* bcm_flexctr_quantization_t_init not dispatchable */
	int (*flexctr_quantization_traverse)(int,bcm_flexctr_quantization_traverse_cb,void *);
	int (*flexctr_stat_get)(int,uint32,uint32,uint32 *,bcm_flexctr_counter_value_t *);
	int (*flexctr_stat_set)(int,uint32,uint32,uint32 *,bcm_flexctr_counter_value_t *);
	int (*flexctr_stat_sync_get)(int,uint32,uint32,uint32 *,bcm_flexctr_counter_value_t *);
	int (*flexctr_trigger_enable_get)(int,uint32,int *);
	int (*flexctr_trigger_enable_set)(int,uint32,int);
	int (*flexdigest_action_add)(int,bcm_flexdigest_entry_t,bcm_flexdigest_action_t,uint16,uint16);
	int (*flexdigest_action_delete)(int,bcm_flexdigest_entry_t,bcm_flexdigest_action_t);
	int (*flexdigest_action_delete_all)(int,bcm_flexdigest_entry_t);
	int (*flexdigest_action_get)(int,bcm_flexdigest_entry_t,bcm_flexdigest_action_t,uint16 *,uint16 *);
	int (*flexdigest_control_get)(int,bcm_flexdigest_control_t,int *);
	int (*flexdigest_control_set)(int,bcm_flexdigest_control_t,int);
	int (*flexdigest_detach)(int);
	int (*flexdigest_entry_create)(int,bcm_flexdigest_group_t,bcm_flexdigest_entry_t *);
	int (*flexdigest_entry_create_id)(int,bcm_flexdigest_group_t,bcm_flexdigest_entry_t);
	int (*flexdigest_entry_destroy)(int,bcm_flexdigest_entry_t);
	int (*flexdigest_entry_destroy_all)(int,bcm_flexdigest_group_t);
#ifdef	BROADCOM_DEBUG
	int (*flexdigest_entry_dump)(int,bcm_field_entry_t);
#endif	/* BROADCOM_DEBUG */
	int (*flexdigest_entry_install)(int,bcm_flexdigest_entry_t);
	int (*flexdigest_entry_priority_get)(int,bcm_flexdigest_entry_t,int *);
	int (*flexdigest_entry_priority_set)(int,bcm_flexdigest_entry_t,int);
	int (*flexdigest_entry_reinstall)(int,bcm_flexdigest_entry_t);
	int (*flexdigest_entry_remove)(int,bcm_flexdigest_entry_t);
	int (*flexdigest_group_create)(int,bcm_flexdigest_qset_t,int,bcm_flexdigest_group_t *);
	int (*flexdigest_group_create_id)(int,bcm_flexdigest_qset_t,int,bcm_flexdigest_group_t);
	int (*flexdigest_group_destroy)(int,bcm_flexdigest_group_t);
	int (*flexdigest_group_destroy_all)(int);
#ifdef	BROADCOM_DEBUG
	int (*flexdigest_group_dump)(int,bcm_field_group_t);
#endif	/* BROADCOM_DEBUG */
	int (*flexdigest_group_get)(int,bcm_flexdigest_group_t,bcm_flexdigest_qset_t *,int *);
	int (*flexdigest_hash_profile_create)(int,uint32,int *);
	int (*flexdigest_hash_profile_destroy)(int,int);
	int (*flexdigest_hash_profile_destroy_all)(int);
	int (*flexdigest_hash_profile_get)(int,int,bcm_flexdigest_hash_profile_control_t,int *);
	int (*flexdigest_hash_profile_set)(int,int,bcm_flexdigest_hash_profile_control_t,int);
	int (*flexdigest_hash_salt_get)(int,bcm_flexdigest_hash_bin_set_t,int,uint16 *,int *);
	int (*flexdigest_hash_salt_set)(int,bcm_flexdigest_hash_bin_set_t,int,uint16 *);
	int (*flexdigest_init)(int);
	int (*flexdigest_match_add)(int,bcm_flexdigest_match_id_t,bcm_flexdigest_match_t);
	int (*flexdigest_match_delete)(int,bcm_flexdigest_match_id_t,bcm_flexdigest_match_t);
	int (*flexdigest_match_delete_all)(int,bcm_flexdigest_match_id_t);
	int (*flexdigest_match_get)(int,bcm_flexdigest_match_id_t,int,bcm_flexdigest_match_t *,int *);
	int (*flexdigest_match_id_create)(int,bcm_flexdigest_match_id_t *);
	int (*flexdigest_match_id_destroy)(int,bcm_flexdigest_match_id_t);
	int (*flexdigest_match_id_destroy_all)(int);
	int (*flexdigest_norm_profile_create)(int,uint32,int *);
	int (*flexdigest_norm_profile_destroy)(int,int);
	int (*flexdigest_norm_profile_destroy_all)(int);
	int (*flexdigest_norm_profile_get)(int,int,bcm_flexdigest_norm_profile_control_t,int *);
	int (*flexdigest_norm_profile_set)(int,int,bcm_flexdigest_norm_profile_control_t,int);
	int (*flexdigest_norm_seed_profile_create)(int,uint32,int *);
	int (*flexdigest_norm_seed_profile_destroy)(int,int);
	int (*flexdigest_norm_seed_profile_destroy_all)(int);
	int (*flexdigest_norm_seed_profile_get)(int,int,bcm_flexdigest_norm_seed_control_t,int *);
	int (*flexdigest_norm_seed_profile_set)(int,int,bcm_flexdigest_norm_seed_control_t,int);
	/* bcm_flexdigest_qset_t_init not dispatchable */
	int (*flexdigest_qualifier_delete)(int,bcm_flexdigest_entry_t,bcm_flexdigest_qualify_t);
	int (*flexdigest_qualifier_delete_all)(int,bcm_flexdigest_entry_t);
	int (*flexdigest_qualify_FixedHve1ResultSet0)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_FixedHve1ResultSet0_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
	int (*flexdigest_qualify_FixedHve2ResultSet0)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_FixedHve2ResultSet0_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
	int (*flexdigest_qualify_FlexHve1ResultSet1)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_FlexHve1ResultSet1_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
	int (*flexdigest_qualify_FlexHve2ResultSet1)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_FlexHve2ResultSet1_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
	int (*flexdigest_qualify_L2IifFlexDigestCtrlIdA)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_L2IifFlexDigestCtrlIdA_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
	int (*flexdigest_qualify_L2IifFlexDigestCtrlIdB)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_L2IifFlexDigestCtrlIdB_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
	int (*flexdigest_qualify_L2IifOpaqueCtrlId)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_L2IifOpaqueCtrlId_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
	int (*flexdigest_qualify_L3IifOpaqueCtrlId)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_L3IifOpaqueCtrlId_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
	int (*flexdigest_qualify_L4Valid)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_L4Valid_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
	int (*flexdigest_qualify_MatchId)(int,bcm_flexdigest_entry_t,bcm_flexdigest_match_id_t);
	int (*flexdigest_qualify_MatchId_get)(int,bcm_flexdigest_entry_t,bcm_flexdigest_match_id_t *);
	int (*flexdigest_qualify_MyStation1Hit)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_MyStation1Hit_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
	int (*flexdigest_qualify_ProtocolPktOpaqueCtrlId)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_ProtocolPktOpaqueCtrlId_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
	int (*flexdigest_qualify_SvpOpaqueCtrlId)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_SvpOpaqueCtrlId_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
	int (*flexdigest_qualify_TunnelProcessingResults1)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_TunnelProcessingResults1_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
	int (*flexdigest_qualify_TunnelProcessingResultsRaw)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_TunnelProcessingResultsRaw_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
	int (*flexdigest_qualify_VfiOpaqueCtrlId)(int,bcm_flexdigest_entry_t,uint8,uint8);
	int (*flexdigest_qualify_VfiOpaqueCtrlId_get)(int,bcm_flexdigest_entry_t,uint8 *,uint8 *);
#ifdef	BROADCOM_DEBUG
	int (*flexdigest_show)(int,const char *);
#endif	/* BROADCOM_DEBUG */
	int (*flexstate_action_create)(int,int,bcm_flexstate_action_t *,uint32 *);
	int (*flexstate_action_destroy)(int,uint32);
	int (*flexstate_action_get)(int,uint32,bcm_flexstate_action_t *);
	/* bcm_flexstate_action_t_init not dispatchable */
	int (*flexstate_action_traverse)(int,bcm_flexstate_action_traverse_cb,void *);
	int (*flexstate_cleanup)(int);
	int (*flexstate_group_action_create)(int,int,bcm_flexstate_group_action_t *,uint32 *);
	int (*flexstate_group_action_destroy)(int,uint32);
	int (*flexstate_group_action_get)(int,uint32,bcm_flexstate_group_action_t *);
	/* bcm_flexstate_group_action_t_init not dispatchable */
	int (*flexstate_group_action_traverse)(int,bcm_flexstate_group_action_traverse_cb,void *);
	int (*flexstate_init)(int);
	int (*flexstate_quantization_create)(int,int,bcm_flexstate_quantization_t *,uint32 *);
	int (*flexstate_quantization_destroy)(int,uint32);
	int (*flexstate_quantization_get)(int,uint32,bcm_flexstate_quantization_t *);
	/* bcm_flexstate_quantization_t_init not dispatchable */
	int (*flexstate_quantization_traverse)(int,bcm_flexstate_quantization_traverse_cb,void *);
	int (*flexstate_stat_get)(int,uint32,uint32,uint32 *,bcm_flexstate_counter_value_t *);
	int (*flexstate_stat_set)(int,uint32,uint32,uint32 *,bcm_flexstate_counter_value_t *);
	int (*flexstate_stat_sync_get)(int,uint32,uint32,uint32 *,bcm_flexstate_counter_value_t *);
	int (*flexstate_trigger_enable_get)(int,uint32,int *);
	int (*flexstate_trigger_enable_set)(int,uint32,int);
#ifdef	INCLUDE_L3
	int (*flow_cleanup)(int);
	int (*flow_encap_add)(int,bcm_flow_encap_config_t *,uint32,bcm_flow_logical_field_t *);
	/* bcm_flow_encap_config_t_init not dispatchable */
	int (*flow_encap_delete)(int,bcm_flow_encap_config_t *,uint32,bcm_flow_logical_field_t *);
	int (*flow_encap_flexctr_object_get)(int,bcm_flow_encap_config_t *,uint32 *);
	int (*flow_encap_flexctr_object_set)(int,bcm_flow_encap_config_t *,uint32);
	int (*flow_encap_get)(int,bcm_flow_encap_config_t *,uint32,bcm_flow_logical_field_t *);
	int (*flow_encap_stat_attach)(int,bcm_flow_encap_config_t *,uint32,bcm_flow_logical_field_t *,uint32);
	int (*flow_encap_stat_detach)(int,bcm_flow_encap_config_t *,uint32,bcm_flow_logical_field_t *,uint32);
	int (*flow_encap_stat_id_get)(int,bcm_flow_encap_config_t *,uint32,bcm_flow_logical_field_t *,uint32 *);
	int (*flow_encap_traverse)(int,bcm_flow_encap_traverse_cb,void *);
	int (*flow_es_filter_flexctr_object_get)(int,bcm_gport_t,uint32 *);
	int (*flow_es_filter_flexctr_object_set)(int,bcm_gport_t,uint32);
	int (*flow_es_filter_get)(int,bcm_gport_t,uint32,uint32 *);
	int (*flow_es_filter_set)(int,bcm_gport_t,uint32,uint32);
	int (*flow_es_filter_stat_attach)(int,bcm_gport_t,uint32);
	int (*flow_es_filter_stat_detach)(int,bcm_gport_t,uint32);
	int (*flow_es_filter_stat_id_get)(int,bcm_gport_t,uint32 *);
	int (*flow_handle_get)(int,const char *,bcm_flow_handle_t *);
	/* bcm_flow_handle_info_t_init not dispatchable */
	int (*flow_init)(int);
	int (*flow_initiator_info_create)(int,bcm_flow_handle_info_t *,bcm_flow_initiator_info_t *,bcm_flow_special_fields_t *);
	int (*flow_initiator_info_destroy)(int,bcm_flow_handle_info_t *);
	int (*flow_initiator_info_get)(int,bcm_flow_handle_info_t *,bcm_flow_initiator_info_t *,bcm_flow_special_fields_t *);
	int (*flow_initiator_info_traverse)(int,bcm_flow_handle_info_t *,bcm_flow_initiator_info_traverse_cb,void *);
	/* bcm_flow_l3_ingress_info_t_init not dispatchable */
	int (*flow_logical_field_id_get)(int,bcm_flow_handle_t,const char *,bcm_flow_field_id_t *);
	/* bcm_flow_logical_field_t_init not dispatchable */
	int (*flow_match_add)(int,bcm_flow_match_config_t *,uint32,bcm_flow_logical_field_t *);
	/* bcm_flow_match_config_t_init not dispatchable */
	int (*flow_match_delete)(int,bcm_flow_match_config_t *,uint32,bcm_flow_logical_field_t *);
	int (*flow_match_flexctr_object_get)(int,bcm_flow_match_config_t *,uint32 *);
	int (*flow_match_flexctr_object_set)(int,bcm_flow_match_config_t *,uint32);
	int (*flow_match_get)(int,bcm_flow_match_config_t *,uint32,bcm_flow_logical_field_t *);
	int (*flow_match_info_add)(int,bcm_flow_handle_info_t *,bcm_flow_special_fields_t *);
	int (*flow_match_info_delete)(int,bcm_flow_handle_info_t *,bcm_flow_special_fields_t *);
	int (*flow_match_info_get)(int,bcm_flow_handle_info_t *,bcm_flow_special_fields_t *);
	int (*flow_match_info_traverse)(int,bcm_flow_handle_info_t *,bcm_flow_match_info_traverse_cb,void *);
	int (*flow_match_stat_attach)(int,bcm_flow_match_config_t *,uint32,bcm_flow_logical_field_t *,uint32);
	int (*flow_match_stat_detach)(int,bcm_flow_match_config_t *,uint32,bcm_flow_logical_field_t *,uint32);
	int (*flow_match_stat_id_get)(int,bcm_flow_match_config_t *,uint32,bcm_flow_logical_field_t *,uint32 *);
	int (*flow_match_traverse)(int,bcm_flow_match_traverse_cb,void *);
	int (*flow_option_id_get)(int,bcm_flow_handle_t,const char *,bcm_flow_option_id_t *);
	int (*flow_port_create)(int,bcm_vpn_t,bcm_flow_port_t *);
	int (*flow_port_destroy)(int,bcm_vpn_t,bcm_gport_t);
	int (*flow_port_encap_get)(int,bcm_flow_port_encap_t *,uint32,bcm_flow_logical_field_t *);
	int (*flow_port_encap_set)(int,bcm_flow_port_encap_t *,uint32,bcm_flow_logical_field_t *);
	/* bcm_flow_port_encap_t_init not dispatchable */
	int (*flow_port_get)(int,bcm_vpn_t,bcm_flow_port_t *);
	int (*flow_port_get_all)(int,bcm_vpn_t,int,bcm_flow_port_t *,int *);
	int (*flow_port_stat_attach)(int,bcm_gport_t,uint32);
	int (*flow_port_stat_detach)(int,bcm_gport_t,uint32);
	int (*flow_port_stat_id_get)(int,bcm_gport_t,bcm_flexctr_direction_t,uint32 *);
	/* bcm_flow_port_t_init not dispatchable */
	int (*flow_stat_attach)(int,bcm_flow_stat_info_t *,uint32,bcm_flow_logical_field_t *,uint32);
	int (*flow_stat_detach)(int,bcm_flow_stat_info_t *,uint32,bcm_flow_logical_field_t *,uint32);
	int (*flow_stat_id_get)(int,bcm_flow_stat_info_t *,uint32,bcm_flow_logical_field_t *,bcm_stat_object_t,uint32 *);
	/* bcm_flow_stat_info_t_init not dispatchable */
	int (*flow_stat_object_get)(int,bcm_flow_handle_t,bcm_flow_option_id_t,bcm_flow_function_type_t,bcm_stat_object_t *);
	int (*flow_terminator_info_create)(int,bcm_flow_handle_info_t *,bcm_flow_terminator_info_t *,bcm_flow_special_fields_t *);
	int (*flow_terminator_info_destroy)(int,bcm_flow_handle_info_t *);
	int (*flow_terminator_info_get)(int,bcm_flow_handle_info_t *,bcm_flow_terminator_info_t *,bcm_flow_special_fields_t *);
	int (*flow_terminator_info_traverse)(int,bcm_flow_handle_info_t *,bcm_flow_terminator_info_traverse_cb,void *);
	int (*flow_tunnel_initiator_create)(int,bcm_flow_tunnel_initiator_t *,uint32,bcm_flow_logical_field_t *);
	int (*flow_tunnel_initiator_destroy)(int,bcm_gport_t);
	int (*flow_tunnel_initiator_get)(int,bcm_flow_tunnel_initiator_t *,uint32,bcm_flow_logical_field_t *);
	int (*flow_tunnel_initiator_stat_attach)(int,bcm_gport_t,uint32);
	int (*flow_tunnel_initiator_stat_detach)(int,bcm_gport_t,uint32);
	int (*flow_tunnel_initiator_stat_id_get)(int,bcm_gport_t,uint32 *);
	/* bcm_flow_tunnel_initiator_t_init not dispatchable */
	int (*flow_tunnel_initiator_traverse)(int,bcm_flow_tunnel_initiator_traverse_cb,void *);
	int (*flow_tunnel_terminator_create)(int,bcm_flow_tunnel_terminator_t *,uint32,bcm_flow_logical_field_t *);
	int (*flow_tunnel_terminator_destroy)(int,bcm_flow_tunnel_terminator_t *,uint32,bcm_flow_logical_field_t *);
	int (*flow_tunnel_terminator_flexctr_object_get)(int,bcm_flow_tunnel_terminator_t *,uint32 *);
	int (*flow_tunnel_terminator_flexctr_object_set)(int,bcm_flow_tunnel_terminator_t *,uint32);
	int (*flow_tunnel_terminator_get)(int,bcm_flow_tunnel_terminator_t *,uint32,bcm_flow_logical_field_t *);
	int (*flow_tunnel_terminator_stat_attach)(int,bcm_flow_tunnel_terminator_t *,uint32,bcm_flow_logical_field_t *,uint32);
	int (*flow_tunnel_terminator_stat_detach)(int,bcm_flow_tunnel_terminator_t *,uint32,bcm_flow_logical_field_t *,uint32);
	int (*flow_tunnel_terminator_stat_id_get)(int,bcm_flow_tunnel_terminator_t *,uint32,bcm_flow_logical_field_t *,uint32 *);
	/* bcm_flow_tunnel_terminator_t_init not dispatchable */
	int (*flow_tunnel_terminator_traverse)(int,bcm_flow_tunnel_terminator_traverse_cb,void *);
	/* bcm_flow_vpn_config_t_init not dispatchable */
	int (*flow_vpn_create)(int,bcm_vpn_t *,bcm_flow_vpn_config_t *);
	int (*flow_vpn_destroy)(int,bcm_vpn_t);
	int (*flow_vpn_destroy_all)(int);
	int (*flow_vpn_get)(int,bcm_vpn_t,bcm_flow_vpn_config_t *);
	int (*flow_vpn_stat_attach)(int,bcm_vpn_t,uint32);
	int (*flow_vpn_stat_detach)(int,bcm_vpn_t,uint32);
	int (*flow_vpn_stat_id_get)(int,bcm_vpn_t,bcm_flexctr_direction_t,uint32 *);
	int (*flow_vpn_traverse)(int,bcm_flow_vpn_traverse_cb,void *);
#endif	/* INCLUDE_L3 */
	int (*flowtracker_aggregate_class_create)(int,uint32,bcm_flowtracker_group_type_t,bcm_flowtracker_aggregate_class_info_t *,uint32 *);
	int (*flowtracker_aggregate_class_destroy)(int,uint32,bcm_flowtracker_group_type_t);
	int (*flowtracker_aggregate_class_get)(int,uint32,bcm_flowtracker_group_type_t,bcm_flowtracker_aggregate_class_info_t *);
	int (*flowtracker_aggregate_class_get_all)(int,bcm_flowtracker_group_type_t,int,uint32 *,int *);
	/* bcm_flowtracker_aggregate_class_info_t_init not dispatchable */
	int (*flowtracker_check_action_info_get)(int,bcm_flowtracker_check_t,bcm_flowtracker_check_action_info_t *);
	int (*flowtracker_check_action_info_set)(int,bcm_flowtracker_check_t,bcm_flowtracker_check_action_info_t);
	/* bcm_flowtracker_check_action_info_t_init not dispatchable */
	int (*flowtracker_check_create)(int,uint32,bcm_flowtracker_check_info_t,bcm_flowtracker_check_t *);
	int (*flowtracker_check_delay_info_get)(int,bcm_flowtracker_check_t,bcm_flowtracker_check_delay_info_t *);
	int (*flowtracker_check_delay_info_set)(int,bcm_flowtracker_check_t,bcm_flowtracker_check_delay_info_t);
	/* bcm_flowtracker_check_delay_info_t_init not dispatchable */
	int (*flowtracker_check_destroy)(int,bcm_flowtracker_check_t);
	int (*flowtracker_check_destroy_all)(int);
	int (*flowtracker_check_export_info_get)(int,bcm_flowtracker_check_t,bcm_flowtracker_check_export_info_t *);
	int (*flowtracker_check_export_info_set)(int,bcm_flowtracker_check_t,bcm_flowtracker_check_export_info_t);
	/* bcm_flowtracker_check_export_info_t_init not dispatchable */
	int (*flowtracker_check_get)(int,bcm_flowtracker_check_t,bcm_flowtracker_check_info_t *);
	/* bcm_flowtracker_check_info_t_init not dispatchable */
	int (*flowtracker_check_traverse)(int,bcm_flowtracker_check_traverse_cb,void *);
	int (*flowtracker_chip_debug_info_get)(int,int,bcm_flowtracker_chip_debug_info_t *,int *);
	int (*flowtracker_chip_debug_info_set)(int,int,bcm_flowtracker_chip_debug_info_t *);
	/* bcm_flowtracker_chip_debug_info_t_init not dispatchable */
	/* bcm_flowtracker_collector_callback_options_t_init not dispatchable */
	/* bcm_flowtracker_collector_copy_info_t_init not dispatchable */
	int (*flowtracker_collector_create)(int,uint32,bcm_flowtracker_collector_t *,bcm_flowtracker_collector_info_t *);
	int (*flowtracker_collector_destroy)(int,bcm_flowtracker_collector_t);
	int (*flowtracker_collector_get)(int,bcm_flowtracker_collector_t,bcm_flowtracker_collector_info_t *);
	int (*flowtracker_collector_get_all)(int,int,bcm_flowtracker_collector_t *,int *);
	/* bcm_flowtracker_collector_info_t_init not dispatchable */
	int (*flowtracker_control_get)(int,bcm_flowtracker_control_type_t,int *);
	int (*flowtracker_control_set)(int,bcm_flowtracker_control_type_t,int);
	int (*flowtracker_detach)(int);
	int (*flowtracker_drop_reason_group_create)(int,uint32,bcm_flowtracker_drop_reasons_t,bcm_flowtracker_drop_reason_group_t *);
	int (*flowtracker_drop_reason_group_delete)(int,bcm_flowtracker_drop_reason_group_t);
	int (*flowtracker_drop_reason_group_get)(int,bcm_flowtracker_drop_reason_group_t,bcm_flowtracker_drop_reasons_t *);
	int (*flowtracker_egress_class_source_get)(int,uint32,bcm_flowtracker_class_source_type_t *);
	int (*flowtracker_egress_class_source_set)(int,uint32,bcm_flowtracker_class_source_type_t);
	int (*flowtracker_elephant_action_match_get)(int,bcm_flowtracker_elephant_match_action_t,uint32 *,bcm_flowtracker_elephant_match_data_t *);
	int (*flowtracker_elephant_action_match_set)(int,bcm_flowtracker_elephant_match_action_t,uint32,bcm_flowtracker_elephant_match_data_t *);
	int (*flowtracker_elephant_control_get)(int,bcm_flowtracker_elephant_control_t,int *);
	int (*flowtracker_elephant_control_set)(int,bcm_flowtracker_elephant_control_t,int);
	int (*flowtracker_elephant_hash_config_get)(int,bcm_flowtracker_elephant_hash_table_t,int,int,bcm_flowtracker_elephant_hash_type_t *,int *);
	int (*flowtracker_elephant_hash_config_set)(int,bcm_flowtracker_elephant_hash_table_t,int,int,bcm_flowtracker_elephant_hash_type_t,int);
	int (*flowtracker_elephant_int_pri_remap_get)(int,bcm_cos_t,bcm_cos_t *);
	int (*flowtracker_elephant_int_pri_remap_set)(int,bcm_cos_t,bcm_cos_t);
	/* bcm_flowtracker_elephant_match_data_t_init not dispatchable */
	int (*flowtracker_elephant_profile_create)(int,uint32,bcm_flowtracker_elephant_profile_info_t *,bcm_flowtracker_elephant_profile_t *);
	int (*flowtracker_elephant_profile_destroy)(int,bcm_flowtracker_elephant_profile_t);
	int (*flowtracker_elephant_profile_get)(int,bcm_flowtracker_elephant_profile_t,bcm_flowtracker_elephant_profile_info_t *);
	int (*flowtracker_elephant_profile_get_all)(int,int,bcm_flowtracker_elephant_profile_t *,int *);
	/* bcm_flowtracker_elephant_profile_info_t_init not dispatchable */
	int (*flowtracker_elephant_stats_get)(int,bcm_flowtracker_elephant_stats_t *);
	int (*flowtracker_elephant_stats_set)(int,bcm_flowtracker_elephant_stats_t *);
	int (*flowtracker_elephant_stats_sync_get)(int,bcm_flowtracker_elephant_stats_t *);
	/* bcm_flowtracker_elephant_stats_t_init not dispatchable */
	int (*flowtracker_export_record_data_info_get)(int,bcm_flowtracker_export_record_t *,int,bcm_flowtracker_export_element_info_t *,bcm_flowtracker_export_record_data_info_t *,int *);
	/* bcm_flowtracker_export_record_data_info_t_init not dispatchable */
	int (*flowtracker_export_record_register)(int,bcm_flowtracker_collector_t,bcm_flowtracker_collector_callback_options_t,bcm_flowtracker_export_record_cb_f,void *);
	/* bcm_flowtracker_export_record_t_init not dispatchable */
	int (*flowtracker_export_record_unregister)(int,bcm_flowtracker_collector_t,bcm_flowtracker_collector_callback_options_t,bcm_flowtracker_export_record_cb_f);
	int (*flowtracker_export_template_create)(int,uint32,bcm_flowtracker_export_template_t *,uint16,int,bcm_flowtracker_export_element_info_t *);
	int (*flowtracker_export_template_destroy)(int,bcm_flowtracker_export_template_t);
	int (*flowtracker_export_template_get)(int,bcm_flowtracker_export_template_t,uint16 *,int,bcm_flowtracker_export_element_info_t *,int *);
	int (*flowtracker_export_template_validate)(int,bcm_flowtracker_group_t,int,bcm_flowtracker_export_element_info_t *,int,bcm_flowtracker_export_element_info_t *,int *);
	/* bcm_flowtracker_export_trigger_info_t_init not dispatchable */
	/* bcm_flowtracker_flow_key_t_init not dispatchable */
	/* bcm_flowtracker_group_action_info_t_init not dispatchable */
	int (*flowtracker_group_actions_get)(int,bcm_flowtracker_group_t,uint32,int,bcm_flowtracker_group_action_info_t *,int *);
	int (*flowtracker_group_actions_set)(int,bcm_flowtracker_group_t,uint32,int,bcm_flowtracker_group_action_info_t *);
	int (*flowtracker_group_age_timer_get)(int,bcm_flowtracker_group_t,uint32 *);
	int (*flowtracker_group_age_timer_set)(int,bcm_flowtracker_group_t,uint32);
	int (*flowtracker_group_check_add)(int,bcm_flowtracker_group_t,bcm_flowtracker_check_t);
	int (*flowtracker_group_check_delete)(int,bcm_flowtracker_group_t,bcm_flowtracker_check_t);
	int (*flowtracker_group_check_get_all)(int,bcm_flowtracker_group_t,int,bcm_flowtracker_check_t *,int *);
	int (*flowtracker_group_clear)(int,bcm_flowtracker_group_t,uint32);
	int (*flowtracker_group_collector_add)(int,bcm_flowtracker_group_t,bcm_flowtracker_collector_t,bcm_flowtracker_export_template_t);
	int (*flowtracker_group_collector_attach)(int,bcm_flowtracker_group_t,bcm_collector_t,int,bcm_flowtracker_export_template_t);
	int (*flowtracker_group_collector_attach_get_all)(int,bcm_flowtracker_group_t,int,bcm_collector_t *,bcm_flowtracker_export_template_t *,int *,int *);
	int (*flowtracker_group_collector_copy_info_get)(int,bcm_flowtracker_group_t,bcm_flowtracker_collector_copy_info_t *);
	int (*flowtracker_group_collector_copy_info_set)(int,bcm_flowtracker_group_t,bcm_flowtracker_collector_copy_info_t);
	int (*flowtracker_group_collector_delete)(int,bcm_flowtracker_group_t,bcm_flowtracker_collector_t,bcm_flowtracker_export_template_t);
	int (*flowtracker_group_collector_detach)(int,bcm_flowtracker_group_t,bcm_collector_t,int,bcm_flowtracker_export_template_t);
	int (*flowtracker_group_collector_get_all)(int,bcm_flowtracker_group_t,int,bcm_flowtracker_collector_t *,bcm_flowtracker_export_template_t *,int *);
	int (*flowtracker_group_control_get)(int,bcm_flowtracker_group_t,bcm_flowtracker_group_control_type_t,int *);
	int (*flowtracker_group_control_set)(int,bcm_flowtracker_group_t,bcm_flowtracker_group_control_type_t,int);
	int (*flowtracker_group_create)(int,uint32,bcm_flowtracker_group_t *,bcm_flowtracker_group_info_t *);
	int (*flowtracker_group_data_get)(int,bcm_flowtracker_group_t,bcm_flowtracker_flow_key_t *,bcm_flowtracker_flow_data_t *);
	int (*flowtracker_group_destroy)(int,bcm_flowtracker_group_t);
	int (*flowtracker_group_elephant_profile_attach)(int,bcm_flowtracker_group_t,bcm_flowtracker_elephant_profile_t);
	int (*flowtracker_group_elephant_profile_attach_get)(int,bcm_flowtracker_group_t,bcm_flowtracker_elephant_profile_t *);
	int (*flowtracker_group_elephant_profile_detach)(int,bcm_flowtracker_group_t);
	int (*flowtracker_group_export_trigger_get)(int,bcm_flowtracker_group_t,bcm_flowtracker_export_trigger_info_t *);
	int (*flowtracker_group_export_trigger_set)(int,bcm_flowtracker_group_t,bcm_flowtracker_export_trigger_info_t *);
	int (*flowtracker_group_flow_action_update)(int,bcm_flowtracker_group_t,bcm_flowtracker_group_flow_action_info_t *,int,bcm_flowtracker_group_action_info_t *);
	int (*flowtracker_group_flow_count_get)(int,bcm_flowtracker_group_t,uint32 *);
	int (*flowtracker_group_flow_delete)(int,bcm_flowtracker_group_t,bcm_flowtracker_group_flow_action_info_t *);
	int (*flowtracker_group_flow_limit_get)(int,bcm_flowtracker_group_t,uint32 *);
	int (*flowtracker_group_flow_limit_set)(int,bcm_flowtracker_group_t,uint32);
	int (*flowtracker_group_get)(int,bcm_flowtracker_group_t,bcm_flowtracker_group_info_t *);
	int (*flowtracker_group_get_all)(int,int,bcm_flowtracker_group_t *,int *);
	/* bcm_flowtracker_group_info_t_init not dispatchable */
	int (*flowtracker_group_meter_info_get)(int,bcm_flowtracker_group_t,bcm_flowtracker_meter_info_t *);
	int (*flowtracker_group_meter_info_set)(int,bcm_flowtracker_group_t,bcm_flowtracker_meter_info_t);
	int (*flowtracker_group_multi_clear)(int,uint32,int,bcm_flowtracker_group_t *);
	/* bcm_flowtracker_group_record_info_t_init not dispatchable */
	int (*flowtracker_group_record_traverse)(int,bcm_flowtracker_group_t,bcm_flowtracker_group_record_type_t,bcm_flowtracker_group_record_traverse_cb,void *);
	int (*flowtracker_group_stat_get)(int,bcm_flowtracker_group_t,bcm_flowtracker_group_stat_t *);
	int (*flowtracker_group_stat_modeid_get)(int,bcm_flowtracker_group_t,uint32 *);
	int (*flowtracker_group_stat_modeid_set)(int,bcm_flowtracker_group_t,uint32);
	int (*flowtracker_group_stat_set)(int,bcm_flowtracker_group_t,bcm_flowtracker_group_stat_t *);
	/* bcm_flowtracker_group_stat_t_init not dispatchable */
	int (*flowtracker_group_tracking_params_get)(int,bcm_flowtracker_group_t,int,bcm_flowtracker_tracking_param_info_t *,int *);
	int (*flowtracker_group_tracking_params_set)(int,bcm_flowtracker_group_t,int,bcm_flowtracker_tracking_param_info_t *);
	int (*flowtracker_init)(int);
	/* bcm_flowtracker_meter_info_t_init not dispatchable */
	int (*flowtracker_periodic_export_config_get)(int,uint32,bcm_flowtracker_periodic_export_config_t *);
	int (*flowtracker_periodic_export_config_set)(int,uint32,bcm_flowtracker_periodic_export_config_t *);
	/* bcm_flowtracker_periodic_export_config_t_init not dispatchable */
	int (*flowtracker_static_flow_add)(int,bcm_flowtracker_group_t,bcm_flowtracker_flow_key_t *);
	int (*flowtracker_static_flow_delete)(int,bcm_flowtracker_group_t,bcm_flowtracker_flow_key_t *);
	int (*flowtracker_static_flow_delete_all)(int,bcm_flowtracker_group_t);
	int (*flowtracker_static_flow_get_all)(int,bcm_flowtracker_group_t,int,bcm_flowtracker_flow_key_t *,int *);
	int (*flowtracker_template_transmit_config_get)(int,bcm_flowtracker_export_template_t,bcm_collector_t,bcm_flowtracker_template_transmit_config_t *);
	int (*flowtracker_template_transmit_config_set)(int,bcm_flowtracker_export_template_t,bcm_collector_t,bcm_flowtracker_template_transmit_config_t *);
	/* bcm_flowtracker_template_transmit_config_t_init not dispatchable */
	/* bcm_flowtracker_tracking_param_info_t_init not dispatchable */
	/* bcm_flowtracker_udf_info_t_init not dispatchable */
	int (*flowtracker_udf_tracking_param_get)(int,uint32,bcm_flowtracker_tracking_param_type_t,uint16,bcm_flowtracker_udf_info_t *);
	int (*flowtracker_udf_tracking_param_set)(int,uint32,bcm_flowtracker_tracking_param_type_t,uint16,bcm_flowtracker_udf_info_t *);
	int (*flowtracker_user_entry_add)(int,bcm_flowtracker_group_t,uint32,int,bcm_flowtracker_tracking_param_info_t *,bcm_flowtracker_user_entry_handle_t *);
	int (*flowtracker_user_entry_delete)(int,bcm_flowtracker_group_t,bcm_flowtracker_user_entry_handle_t *);
	int (*flowtracker_user_entry_delete_all)(int,bcm_flowtracker_group_t);
	int (*flowtracker_user_entry_get)(int,bcm_flowtracker_user_entry_handle_t *,int,bcm_flowtracker_tracking_param_info_t *,int *);
	int (*flowtracker_user_entry_get_all)(int,bcm_flowtracker_group_t,int,bcm_flowtracker_user_entry_handle_t *,int *);
	/* bcm_flowtracker_user_entry_handle_t_init not dispatchable */
#ifdef	INCLUDE_GDPLL
	int (*gdpll_cb_register)(int,bcm_gdpll_cb_reg_t,bcm_gdpll_cb,void *);
	int (*gdpll_cb_unregister)(int,bcm_gdpll_cb_reg_t);
	int (*gdpll_chan_create)(int,uint32,bcm_gdpll_chan_t *,int *);
	int (*gdpll_chan_debug_enable)(int,int,bcm_gdpll_debug_mode_t,int);
	int (*gdpll_chan_destroy)(int,int);
	int (*gdpll_chan_enable)(int,int,int);
	int (*gdpll_chan_get)(int,int,bcm_gdpll_chan_t *);
	int (*gdpll_chan_state_get)(int,int,uint32 *);
	int (*gdpll_debug)(int,int);
	int (*gdpll_debug_cb_register)(int,bcm_gdpll_debug_cb,void *);
	int (*gdpll_flush)(int);
	int (*gdpll_input_event_poll)(int,bcm_gdpll_input_event_t,uint32);
	int (*gdpll_offset_get)(int,int,uint64 *);
	int (*gdpll_offset_set)(int,int,uint64);
#endif	/* INCLUDE_GDPLL */
	int (*gport_stat_get)(int,bcm_gport_t,bcm_core_t,bcm_stat_counter_interface_type_t,bcm_stat_pp_info_t *);
	int (*gport_stat_set)(int,bcm_gport_t,bcm_core_t,bcm_stat_counter_interface_type_t,bcm_stat_pp_info_t);
	int (*hash_flex_bin_add)(int,bcm_hash_flex_bin_config_t *,int,bcm_hash_flex_bin_cmd_t *,int,bcm_hash_flex_field_t *);
	/* bcm_hash_flex_bin_config_t_init not dispatchable */
	int (*hash_flex_bin_delete)(int,int);
	int (*hash_flex_bin_delete_all)(int);
	int (*hash_flex_bin_get)(int,bcm_hash_flex_bin_config_t *,int,bcm_hash_flex_bin_cmd_t *,int,bcm_hash_flex_field_t *);
	int (*hash_flex_bin_traverse)(int,uint32,bcm_hash_flex_bin_traverse_cb,void *);
	int (*hash_flex_field_id_get)(int,bcm_hash_flex_object_t,const char *,uint32 *);
	int (*hash_flex_field_name_get)(int,uint32,bcm_hash_flex_object_t *,int,char *);
	int (*hash_init)(int);
#ifdef	INCLUDE_I2C
	int (*i2c_ioctl)(int,int,int,void *,int);
	int (*i2c_open)(int,char *,uint32,int);
	int (*i2c_read)(int,int,uint32,uint8 *,uint32 *);
	int (*i2c_write)(int,int,uint32,uint8 *,uint32);
#endif	/* INCLUDE_I2C */
	int (*ifa_cc_config_get)(int,bcm_ifa_cc_config_t *);
	int (*ifa_cc_config_set)(int,bcm_ifa_cc_config_t *);
	/* bcm_ifa_cc_config_t_init not dispatchable */
	int (*ifa_collector_attach)(int,bcm_collector_t,int,bcm_ifa_export_template_t);
	int (*ifa_collector_attach_get)(int,bcm_collector_t *,int *,bcm_ifa_export_template_t *);
	int (*ifa_collector_detach)(int,bcm_collector_t,int,bcm_ifa_export_template_t);
	int (*ifa_collector_get)(int,bcm_ifa_collector_info_t *);
	/* bcm_ifa_collector_info_t_init not dispatchable */
	int (*ifa_collector_set)(int,uint32,bcm_ifa_collector_info_t *);
	int (*ifa_config_info_get)(int,bcm_ifa_config_info_t *);
	int (*ifa_config_info_set)(int,uint32,bcm_ifa_config_info_t *);
	/* bcm_ifa_config_info_t_init not dispatchable */
	int (*ifa_detach)(int);
	int (*ifa_export_template_create)(int,uint32,bcm_ifa_export_template_t *,uint16,int,bcm_ifa_export_element_info_t *);
	int (*ifa_export_template_destroy)(int,bcm_ifa_export_template_t);
	int (*ifa_export_template_get)(int,bcm_ifa_export_template_t,uint16 *,int,bcm_ifa_export_element_info_t *,int *);
	int (*ifa_header_create)(int,uint32,int *,bcm_ifa_header_t *);
	int (*ifa_header_destroy)(int,int);
	int (*ifa_header_get)(int,int,bcm_ifa_header_t *);
	/* bcm_ifa_header_t_init not dispatchable */
	int (*ifa_header_traverse)(int,bcm_ifa_header_traverse_cb,void *);
	int (*ifa_init)(int);
	int (*ifa_stat_info_get)(int,bcm_ifa_stat_info_t *);
	int (*ifa_stat_info_set)(int,bcm_ifa_stat_info_t *);
	int (*ifa_template_transmit_config_get)(int,bcm_ifa_export_template_t,bcm_collector_t,bcm_ifa_template_transmit_config_t *);
	int (*ifa_template_transmit_config_set)(int,bcm_ifa_export_template_t,bcm_collector_t,bcm_ifa_template_transmit_config_t *);
	/* bcm_ifa_template_transmit_config_t_init not dispatchable */
	int (*info_get)(int,bcm_info_t *);
	/* bcm_info_t_init not dispatchable */
	int (*init)(int);
	int (*init_advanced)(int,bcm_init_advanced_info_t *);
	int (*init_check)(int);
	int (*init_selective)(int,uint32);
	int (*instru_control_get)(int,uint32,bcm_instru_control_t,int *);
	int (*instru_control_set)(int,uint32,bcm_instru_control_t,int);
	int (*instru_eventor_active_get)(int,uint32,int *);
	int (*instru_eventor_active_set)(int,uint32,int);
	int (*instru_eventor_builder_get)(int,uint32,bcm_eventor_builder_id_t,bcm_instru_eventor_builder_conf_t *);
	int (*instru_eventor_builder_set)(int,uint32,bcm_eventor_builder_id_t,bcm_instru_eventor_builder_conf_t *);
	int (*instru_eventor_context_get)(int,uint32,bcm_eventor_context_id_t,bcm_eventor_context_type_t,bcm_instru_eventor_context_conf_t *);
	int (*instru_eventor_context_set)(int,uint32,bcm_eventor_context_id_t,bcm_eventor_context_type_t,bcm_instru_eventor_context_conf_t *);
	int (*instru_eventor_event_generate)(int,uint32,bcm_eventor_event_id_t);
	int (*instru_eventor_event_id_config_get)(int,uint32,bcm_eventor_event_id_t,bcm_instru_eventor_event_id_config_t *);
	int (*instru_eventor_event_id_config_set)(int,uint32,bcm_eventor_event_id_t,bcm_instru_eventor_event_id_config_t *);
	int (*instru_get_memory_access_info)(int,uint32,int,uint32,uint32,uint32,bcm_instru_access_info_t *);
	int (*instru_get_register_access_info)(int,uint32,int,uint32,uint32,bcm_instru_access_info_t *);
	int (*instru_gport_control_get)(int,bcm_gport_t,uint32,bcm_instru_gport_control_t,int *);
	int (*instru_gport_control_set)(int,bcm_gport_t,uint32,bcm_instru_gport_control_t,int);
	int (*instru_ifa_encap_create)(int,bcm_instru_ifa_info_t *);
	int (*instru_ifa_encap_delete)(int,bcm_instru_ifa_info_t *);
	int (*instru_ifa_encap_get)(int,bcm_instru_ifa_info_t *);
	int (*instru_ifa_encap_traverse)(int,bcm_instru_ifa_encap_traverse_cb,void *);
	int (*instru_ipt_profile_get)(int,uint32,int,bcm_instru_ipt_t *);
	int (*instru_ipt_profile_set)(int,uint32,int,bcm_instru_ipt_t *);
	/* bcm_instru_ipt_t_init not dispatchable */
	int (*instru_sflow_encap_create)(int,bcm_instru_sflow_encap_info_t *);
	int (*instru_sflow_encap_delete)(int,bcm_instru_sflow_encap_info_t *);
	int (*instru_sflow_encap_extended_dst_create)(int,bcm_instru_sflow_encap_extended_dst_info_t *);
	int (*instru_sflow_encap_extended_dst_delete)(int,bcm_instru_sflow_encap_extended_dst_info_t *);
	int (*instru_sflow_encap_extended_dst_get)(int,bcm_instru_sflow_encap_extended_dst_info_t *);
	int (*instru_sflow_encap_extended_dst_traverse)(int,bcm_instru_sflow_encap_extended_dst_cb,void *);
	int (*instru_sflow_encap_extended_src_create)(int,bcm_instru_sflow_encap_extended_src_info_t *);
	int (*instru_sflow_encap_extended_src_delete)(int,bcm_instru_sflow_encap_extended_src_info_t *);
	int (*instru_sflow_encap_extended_src_get)(int,bcm_instru_sflow_encap_extended_src_info_t *);
	int (*instru_sflow_encap_extended_src_traverse)(int,bcm_instru_sflow_encap_extended_src_cb,void *);
	int (*instru_sflow_encap_get)(int,bcm_instru_sflow_encap_info_t *);
	int (*instru_sflow_encap_traverse)(int,bcm_instru_sflow_encap_traverse_cb,void *);
	int (*instru_sflow_sample_interface_add)(int,bcm_instru_sflow_sample_interface_info_t *);
	int (*instru_sflow_sample_interface_get)(int,bcm_instru_sflow_sample_interface_info_t *);
	int (*instru_sflow_sample_interface_remove)(int,bcm_instru_sflow_sample_interface_info_t *);
	int (*instru_sflow_sample_interface_traverse)(int,bcm_instru_sflow_sample_interface_traverse_info_t *,bcm_instru_sflow_sample_traverse_cb,void *);
	int (*instru_synced_counters_config_get)(int,uint32,bcm_instru_synced_counters_source_type_t,bcm_instru_synced_counters_config_t *);
	int (*instru_synced_counters_config_set)(int,uint32,bcm_instru_synced_counters_source_type_t,bcm_instru_synced_counters_config_t *);
	/* bcm_instru_synced_counters_config_t_init not dispatchable */
	/* bcm_instru_synced_counters_data_t_init not dispatchable */
	int (*instru_synced_counters_records_get)(int,uint32,bcm_instru_synced_counters_records_key_t *,bcm_instru_synced_counters_data_t *);
	/* bcm_instru_synced_counters_records_key_t_init not dispatchable */
	int (*instru_synced_counters_trigger_enable_get)(int,uint32,uint32,bcm_instru_synced_counters_source_type_t *,uint32 *);
	int (*instru_synced_counters_trigger_enable_set)(int,uint32,uint32,bcm_instru_synced_counters_source_type_t *,uint32 *);
	int (*instru_vis_resume)(int,bcm_core_t,uint32);
	int (*instru_vis_signal_get)(int,bcm_core_t,uint32,int,bcm_instru_vis_signal_key_t *,bcm_instru_vis_signal_result_t *);
#ifdef	INCLUDE_INT
	int (*int_cosq_stat_config_get)(int,bcm_int_cosq_stat_config_t *);
	int (*int_cosq_stat_config_set)(int,bcm_int_cosq_stat_config_t *);
	/* bcm_int_cosq_stat_config_t_init not dispatchable */
	int (*int_detach)(int);
	int (*int_dp_action_profile_create)(int,uint32,int *,bcm_int_dp_action_profile_t *);
	int (*int_dp_action_profile_destroy)(int,int);
	int (*int_dp_action_profile_get)(int,int,bcm_int_dp_action_profile_t *);
	/* bcm_int_dp_action_profile_t_init not dispatchable */
	int (*int_dp_action_profile_traverse)(int,bcm_int_dp_action_profile_traverse_cb,void *);
	int (*int_dp_vector_match_add)(int,uint32,bcm_int_dp_vector_match_t *);
	int (*int_dp_vector_match_delete)(int,bcm_int_dp_vector_match_t *);
	int (*int_dp_vector_match_delete_all)(int);
	int (*int_dp_vector_match_get)(int,bcm_int_dp_vector_match_t *);
	/* bcm_int_dp_vector_match_t_init not dispatchable */
	int (*int_dp_vector_match_traverse)(int,bcm_int_dp_vector_match_traverse_cb,void *);
	int (*int_ifa_action_profile_create)(int,uint32,int *,bcm_int_ifa_action_profile_t *);
	int (*int_ifa_action_profile_destroy)(int,int);
	int (*int_ifa_action_profile_get)(int,int,bcm_int_ifa_action_profile_t *);
	/* bcm_int_ifa_action_profile_t_init not dispatchable */
	int (*int_ifa_action_profile_traverse)(int,bcm_int_ifa_action_profile_traverse_cb,void *);
	int (*int_ifa_vector_match_add)(int,uint32,bcm_int_ifa_vector_match_t *);
	int (*int_ifa_vector_match_delete)(int,bcm_int_ifa_vector_match_t *);
	int (*int_ifa_vector_match_delete_all)(int);
	int (*int_ifa_vector_match_get)(int,bcm_int_ifa_vector_match_t *);
	/* bcm_int_ifa_vector_match_t_init not dispatchable */
	int (*int_ifa_vector_match_traverse)(int,bcm_int_ifa_vector_match_traverse_cb,void *);
	int (*int_init)(int);
	int (*int_ioam_action_profile_create)(int,uint32,int *,bcm_int_ioam_action_profile_t *);
	int (*int_ioam_action_profile_destroy)(int,int);
	int (*int_ioam_action_profile_get)(int,int,bcm_int_ioam_action_profile_t *);
	/* bcm_int_ioam_action_profile_t_init not dispatchable */
	int (*int_ioam_action_profile_traverse)(int,bcm_int_ioam_action_profile_traverse_cb,void *);
	int (*int_ioam_vector_match_add)(int,uint32,bcm_int_ioam_vector_match_t *);
	int (*int_ioam_vector_match_delete)(int,bcm_int_ioam_vector_match_t *);
	int (*int_ioam_vector_match_delete_all)(int);
	int (*int_ioam_vector_match_get)(int,bcm_int_ioam_vector_match_t *);
	/* bcm_int_ioam_vector_match_t_init not dispatchable */
	int (*int_ioam_vector_match_traverse)(int,bcm_int_ioam_vector_match_traverse_cb,void *);
	int (*int_metadata_field_add)(int,int,bcm_int_metadata_field_entry_t *);
	/* bcm_int_metadata_field_construct_t_init not dispatchable */
	int (*int_metadata_field_delete)(int,int,bcm_int_metadata_field_entry_t *);
	int (*int_metadata_field_delete_all)(int,int);
	/* bcm_int_metadata_field_entry_t_init not dispatchable */
	int (*int_metadata_field_select_info_get)(int,bcm_int_metadata_field_t,bcm_int_metadata_field_select_info_t *);
	/* bcm_int_metadata_field_select_info_t_init not dispatchable */
	/* bcm_int_metadata_field_select_t_init not dispatchable */
	int (*int_metadata_profile_create)(int,uint32,int *);
	int (*int_metadata_profile_destroy)(int,int);
	int (*int_metadata_profile_get)(int,int,int,bcm_int_metadata_field_entry_t *,int *);
	int (*int_metadata_profile_traverse)(int,bcm_int_metadata_profile_traverse_cb,void *);
	int (*int_opaque_data_profile_create)(int,uint32,int *,bcm_int_opaque_data_profile_t *);
	int (*int_opaque_data_profile_destroy)(int,int);
	int (*int_opaque_data_profile_get)(int,int,bcm_int_opaque_data_profile_t *);
	/* bcm_int_opaque_data_profile_t_init not dispatchable */
	int (*int_opaque_data_profile_traverse)(int,bcm_int_opaque_data_profile_traverse_cb,void *);
	int (*int_turnaround_config_get)(int,bcm_int_turnaround_config_t *);
	int (*int_turnaround_config_set)(int,bcm_int_turnaround_config_t *);
	/* bcm_int_turnaround_config_t_init not dispatchable */
	int (*int_turnaround_stat_get)(int,bcm_int_turnaround_stat_t *);
	/* bcm_ip6_mask_create not dispatchable */
	/* bcm_ip6_mask_length not dispatchable */
	/* bcm_ip_mask_create not dispatchable */
	/* bcm_ip_mask_length not dispatchable */
#endif	/* INCLUDE_INT */
	int (*ipfix_config_get)(int,bcm_ipfix_stage_t,bcm_port_t,bcm_ipfix_config_t *);
	int (*ipfix_config_set)(int,bcm_ipfix_stage_t,bcm_port_t,bcm_ipfix_config_t *);
	/* bcm_ipfix_config_t_init not dispatchable */
	int (*ipfix_mirror_config_get)(int,bcm_ipfix_stage_t,bcm_gport_t,bcm_ipfix_mirror_config_t *);
	int (*ipfix_mirror_config_set)(int,bcm_ipfix_stage_t,bcm_gport_t,bcm_ipfix_mirror_config_t *);
	/* bcm_ipfix_mirror_config_t_init not dispatchable */
	int (*ipfix_mirror_port_dest_add)(int,bcm_ipfix_stage_t,bcm_gport_t,bcm_gport_t);
	int (*ipfix_mirror_port_dest_delete)(int,bcm_ipfix_stage_t,bcm_gport_t,bcm_gport_t);
	int (*ipfix_mirror_port_dest_delete_all)(int,bcm_ipfix_stage_t,bcm_gport_t);
	int (*ipfix_mirror_port_dest_get)(int,bcm_ipfix_stage_t,bcm_gport_t,int,bcm_gport_t *,int *);
	int (*ipfix_rate_create)(int,bcm_ipfix_rate_t *);
	int (*ipfix_rate_destroy)(int,bcm_ipfix_rate_id_t);
	int (*ipfix_rate_destroy_all)(int);
	int (*ipfix_rate_get)(int,bcm_ipfix_rate_t *);
	int (*ipfix_rate_mirror_add)(int,bcm_ipfix_rate_id_t,bcm_gport_t);
	int (*ipfix_rate_mirror_delete)(int,bcm_ipfix_rate_id_t,bcm_gport_t);
	int (*ipfix_rate_mirror_delete_all)(int,bcm_ipfix_rate_id_t);
	int (*ipfix_rate_mirror_get)(int,bcm_ipfix_rate_id_t,int,bcm_gport_t *,int *);
	/* bcm_ipfix_rate_t_init not dispatchable */
	int (*ipfix_rate_traverse)(int,bcm_ipfix_rate_traverse_cb,void *);
	int (*ipfix_register)(int,bcm_ipfix_callback_t,void *);
	int (*ipfix_unregister)(int,bcm_ipfix_callback_t,void *);
#ifdef	INCLUDE_L3
	int (*ipmc_add)(int,bcm_ipmc_addr_t *);
	/* bcm_ipmc_addr_t_init not dispatchable */
	int (*ipmc_age)(int,uint32,bcm_ipmc_traverse_cb,void *);
	int (*ipmc_bitmap_del)(int,int,bcm_port_t,bcm_pbmp_t);
	int (*ipmc_bitmap_get)(int,int,bcm_port_t,bcm_pbmp_t *);
	int (*ipmc_bitmap_max_get)(int,int *);
	int (*ipmc_bitmap_set)(int,int,bcm_port_t,bcm_pbmp_t);
	int (*ipmc_config_add)(int,bcm_ipmc_addr_t *);
	int (*ipmc_config_find)(int,bcm_ipmc_addr_t *);
	int (*ipmc_config_remove)(int,bcm_ipmc_addr_t *);
	int (*ipmc_config_traverse)(int,uint32,bcm_ipmc_config_traverse_cb,void *);
	int (*ipmc_counters_get)(int,bcm_port_t,bcm_ipmc_counters_t *);
	/* bcm_ipmc_counters_t_init not dispatchable */
	int (*ipmc_detach)(int);
	int (*ipmc_egress_port_get)(int,bcm_port_t,bcm_mac_t,int *,bcm_vlan_t *,int *);
	int (*ipmc_egress_port_init)(int);
	int (*ipmc_egress_port_set)(int,bcm_port_t,const bcm_mac_t,int,bcm_vlan_t,int);
	int (*ipmc_enable)(int,int);
	int (*ipmc_find)(int,bcm_ipmc_addr_t *);
	int (*ipmc_flexctr_object_get)(int,bcm_ipmc_addr_t *,uint32 *);
	int (*ipmc_flexctr_object_set)(int,bcm_ipmc_addr_t *,uint32);
	int (*ipmc_init)(int);
	int (*ipmc_range_add)(int,int *,bcm_ipmc_range_t *);
	int (*ipmc_range_delete)(int,int);
	int (*ipmc_range_delete_all)(int);
	int (*ipmc_range_get)(int,int,bcm_ipmc_range_t *);
	int (*ipmc_range_size_get)(int,int *);
	/* bcm_ipmc_range_t_init not dispatchable */
	int (*ipmc_remove)(int,bcm_ipmc_addr_t *);
	int (*ipmc_remove_all)(int);
	int (*ipmc_rp_add)(int,int,bcm_if_t);
	int (*ipmc_rp_create)(int,uint32,int *);
	int (*ipmc_rp_delete)(int,int,bcm_if_t);
	int (*ipmc_rp_delete_all)(int,int);
	int (*ipmc_rp_destroy)(int,int);
	int (*ipmc_rp_get)(int,int,int,bcm_if_t *,int *);
	int (*ipmc_rp_set)(int,int,int,bcm_if_t *);
	int (*ipmc_stat_attach)(int,bcm_ipmc_addr_t *,uint32);
	int (*ipmc_stat_counter_get)(int,bcm_ipmc_addr_t *,bcm_ipmc_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*ipmc_stat_counter_set)(int,bcm_ipmc_addr_t *,bcm_ipmc_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*ipmc_stat_counter_sync_get)(int,bcm_ipmc_addr_t *,bcm_ipmc_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*ipmc_stat_detach)(int,bcm_ipmc_addr_t *);
	int (*ipmc_stat_id_get)(int,bcm_ipmc_addr_t *,bcm_ipmc_stat_t,uint32 *);
	int (*ipmc_stat_multi_get)(int,bcm_ipmc_addr_t *,int,bcm_ipmc_stat_t *,uint64 *);
	int (*ipmc_stat_multi_get32)(int,bcm_ipmc_addr_t *,int,bcm_ipmc_stat_t *,uint32 *);
	int (*ipmc_stat_multi_set)(int,bcm_ipmc_addr_t *,int,bcm_ipmc_stat_t *,uint64 *);
	int (*ipmc_stat_multi_set32)(int,bcm_ipmc_addr_t *,int,bcm_ipmc_stat_t *,uint32 *);
	int (*ipmc_traverse)(int,uint32,bcm_ipmc_traverse_cb,void *);
#endif	/* INCLUDE_L3 */
	int (*ipsec_config_set)(int,bcm_ipsec_config_t *);
	int (*ipsec_sa_create)(int,uint32,uint32 *,bcm_ipsec_sa_info_t *);
	int (*ipsec_sa_delete)(int,uint32,uint32);
	int (*ipsec_sa_key_update)(int,uint32,uint32,bcm_ipsec_sa_keys_t *);
	int (*ipsec_sa_to_tunnel_map_get)(int,uint32,uint32 *);
	int (*ipsec_sa_to_tunnel_map_set)(int,uint32,uint32);
	int (*ipsec_tunnel_create)(int,uint32,uint32 *,bcm_ipsec_tunnel_info_t *);
	int (*ipsec_tunnel_delete)(int,uint32,uint32);
	int (*knet_cleanup)(int);
	int (*knet_filter_create)(int,bcm_knet_filter_t *);
	int (*knet_filter_destroy)(int,int);
	int (*knet_filter_get)(int,int,bcm_knet_filter_t *);
	/* bcm_knet_filter_t_init not dispatchable */
	int (*knet_filter_traverse)(int,bcm_knet_filter_traverse_cb,void *);
	int (*knet_init)(int);
	int (*knet_netif_create)(int,bcm_knet_netif_t *);
	int (*knet_netif_destroy)(int,int);
	int (*knet_netif_get)(int,int,bcm_knet_netif_t *);
	/* bcm_knet_netif_t_init not dispatchable */
	int (*knet_netif_traverse)(int,bcm_knet_netif_traverse_cb,void *);
	int (*knetsync_deinit)(int);
	int (*knetsync_init)(int);
	int (*l2_addr_add)(int,bcm_l2_addr_t *);
	int (*l2_addr_by_struct_delete)(int,bcm_l2_addr_t *);
	int (*l2_addr_by_struct_get)(int,bcm_l2_addr_t *);
	int (*l2_addr_delete)(int,bcm_mac_t,bcm_vlan_t);
	int (*l2_addr_delete_by_mac)(int,bcm_mac_t,uint32);
	int (*l2_addr_delete_by_mac_port)(int,bcm_mac_t,bcm_module_t,bcm_port_t,uint32);
	int (*l2_addr_delete_by_port)(int,bcm_module_t,bcm_port_t,uint32);
	int (*l2_addr_delete_by_trunk)(int,bcm_trunk_t,uint32);
	int (*l2_addr_delete_by_vlan)(int,bcm_vlan_t,uint32);
	int (*l2_addr_delete_by_vlan_gport_multi)(int,uint32,int,bcm_vlan_t *,bcm_gport_t *);
	int (*l2_addr_delete_by_vlan_port)(int,bcm_vlan_t,bcm_module_t,bcm_port_t,uint32);
	int (*l2_addr_delete_by_vlan_trunk)(int,bcm_vlan_t,bcm_trunk_t,uint32);
	/* bcm_l2_addr_distribute_t_init not dispatchable */
	/* bcm_l2_addr_dump not dispatchable */
	int (*l2_addr_freeze)(int);
	int (*l2_addr_get)(int,bcm_mac_t,bcm_vlan_t,bcm_l2_addr_t *);
	int (*l2_addr_msg_distribute_get)(int,bcm_l2_addr_distribute_t *);
	int (*l2_addr_msg_distribute_set)(int,bcm_l2_addr_distribute_t *);
	int (*l2_addr_multi_add)(int,bcm_l2_addr_t *,int);
	int (*l2_addr_multi_delete)(int,bcm_l2_addr_t *,int);
	int (*l2_addr_register)(int,bcm_l2_addr_callback_t,void *);
	/* bcm_l2_addr_t_init not dispatchable */
	int (*l2_addr_thaw)(int);
	int (*l2_addr_unregister)(int,bcm_l2_addr_callback_t,void *);
	int (*l2_age_timer_get)(int,int *);
	int (*l2_age_timer_meta_cycle_get)(int,int *);
	int (*l2_age_timer_meta_cycle_set)(int,int);
	int (*l2_age_timer_set)(int,int);
	int (*l2_auth_add)(int,bcm_l2_auth_addr_t *);
	/* bcm_l2_auth_addr_t_init not dispatchable */
	int (*l2_auth_delete)(int,bcm_l2_auth_addr_t *);
	int (*l2_auth_delete_all)(int);
	int (*l2_auth_get)(int,bcm_l2_auth_addr_t *);
	int (*l2_auth_traverse)(int,bcm_l2_auth_traverse_cb,void *);
	/* bcm_l2_cache_addr_t_init not dispatchable */
	int (*l2_cache_delete)(int,int);
	int (*l2_cache_delete_all)(int);
	int (*l2_cache_get)(int,int,bcm_l2_cache_addr_t *);
	int (*l2_cache_init)(int);
	int (*l2_cache_profile_get)(int,int,uint32,uint32,bcm_l2cp_profile_info_t *);
	int (*l2_cache_profile_set)(int,int,uint32,uint32,bcm_l2cp_profile_info_t *);
	int (*l2_cache_set)(int,int,bcm_l2_cache_addr_t *,int *);
	int (*l2_cache_size_get)(int,int *);
	int (*l2_cache_vpn_to_profile_map_get)(int,uint32,uint32 *);
	int (*l2_cache_vpn_to_profile_map_set)(int,uint32,uint32);
#ifdef	INCLUDE_L3
	int (*l2_change_fields_add)(int,bcm_l2_change_fields_t *);
	int (*l2_change_fields_delete)(int,bcm_l2_change_fields_t *);
	int (*l2_change_fields_get)(int,bcm_l2_change_fields_t *);
	/* bcm_l2_change_fields_t_init not dispatchable */
	int (*l2_change_fields_traverse)(int,bcm_l2_change_fields_traverse_cb,void *);
#endif	/* INCLUDE_L3 */
	int (*l2_clear)(int);
	int (*l2_conflict_get)(int,bcm_l2_addr_t *,bcm_l2_addr_t *,int,int *);
	int (*l2_detach)(int);
	int (*l2_egress_create)(int,bcm_l2_egress_t *);
	int (*l2_egress_destroy)(int,bcm_if_t);
	int (*l2_egress_find)(int,bcm_l2_egress_t *,bcm_if_t *);
	int (*l2_egress_get)(int,bcm_if_t,bcm_l2_egress_t *);
	/* bcm_l2_egress_t_init not dispatchable */
	int (*l2_egress_traverse)(int,bcm_l2_egress_traverse_cb,void *);
	int (*l2_gport_control_info_get)(int,bcm_l2_gport_control_info_t *);
	int (*l2_gport_control_info_set)(int,bcm_l2_gport_control_info_t *);
	/* bcm_l2_gport_control_info_t_init not dispatchable */
	int (*l2_gport_forward_info_get)(int,int,bcm_l2_gport_forward_info_t *);
	/* bcm_l2_gport_forward_info_t_init not dispatchable */
	int (*l2_init)(int);
	int (*l2_key_dump)(int,char *,bcm_l2_addr_t *,char *);
	int (*l2_learn_class_get)(int,int,int *,uint32 *);
	int (*l2_learn_class_set)(int,int,int,uint32);
	int (*l2_learn_limit_disable)(int);
	int (*l2_learn_limit_enable)(int);
	int (*l2_learn_limit_get)(int,bcm_l2_learn_limit_t *);
	int (*l2_learn_limit_set)(int,bcm_l2_learn_limit_t *);
	/* bcm_l2_learn_limit_t_init not dispatchable */
	int (*l2_learn_msgs_config_get)(int,bcm_l2_learn_msgs_config_t *);
	int (*l2_learn_msgs_config_set)(int,bcm_l2_learn_msgs_config_t *);
	/* bcm_l2_learn_msgs_config_t_init not dispatchable */
	int (*l2_learn_port_class_get)(int,bcm_gport_t,int *);
	int (*l2_learn_port_class_set)(int,bcm_gport_t,int);
	int (*l2_learn_stat_get)(int,bcm_l2_learn_stat_t *);
	int (*l2_learn_stat_set)(int,bcm_l2_learn_stat_t *);
	/* bcm_l2_learn_stat_t_init not dispatchable */
	int (*l2_mac_port_create)(int,bcm_l2_mac_port_t *);
	int (*l2_mac_port_destroy)(int,bcm_gport_t);
	int (*l2_mac_port_destroy_all)(int);
	int (*l2_mac_port_get)(int,bcm_l2_mac_port_t *);
	/* bcm_l2_mac_port_t_init not dispatchable */
	int (*l2_mac_port_traverse)(int,bcm_l2_mac_port_traverse_cb,void *);
	int (*l2_match_masked_traverse)(int,uint32,bcm_l2_addr_t *,bcm_l2_addr_t *,bcm_l2_traverse_cb,void *);
	int (*l2_matched_traverse)(int,uint32,bcm_l2_addr_t *,bcm_l2_traverse_cb,void *);
	int (*l2_port_native)(int,int,int);
	int (*l2_replace)(int,uint32,bcm_l2_addr_t *,bcm_module_t,bcm_port_t,bcm_trunk_t);
	int (*l2_replace_match)(int,uint32,bcm_l2_addr_t *,bcm_l2_addr_t *,bcm_l2_addr_t *,bcm_l2_addr_t *);
	int (*l2_ring_replace)(int,bcm_l2_ring_t *);
	/* bcm_l2_ring_t_init not dispatchable */
	int (*l2_stat_enable_set)(int,bcm_l2_addr_t *,int);
	int (*l2_stat_get)(int,bcm_l2_addr_t *,bcm_l2_stat_t,uint64 *);
	int (*l2_stat_get32)(int,bcm_l2_addr_t *,bcm_l2_stat_t,uint32 *);
	int (*l2_stat_set)(int,bcm_l2_addr_t *,bcm_l2_stat_t,uint64);
	int (*l2_stat_set32)(int,bcm_l2_addr_t *,bcm_l2_stat_t,uint32);
	int (*l2_station_add)(int,int *,bcm_l2_station_t *);
	int (*l2_station_delete)(int,int);
	int (*l2_station_delete_all)(int);
	int (*l2_station_get)(int,int,bcm_l2_station_t *);
	int (*l2_station_size_get)(int,int *);
	/* bcm_l2_station_t_init not dispatchable */
	int (*l2_station_traverse)(int,bcm_l2_station_traverse_cb,void *);
	int (*l2_traverse)(int,bcm_l2_traverse_cb,void *);
	int (*l2_tunnel_add)(int,bcm_mac_t,bcm_vlan_t);
	int (*l2_tunnel_delete)(int,bcm_mac_t,bcm_vlan_t);
	int (*l2_tunnel_delete_all)(int);
#ifdef	INCLUDE_L3
	int (*l2gre_cleanup)(int);
	int (*l2gre_init)(int);
	int (*l2gre_port_add)(int,bcm_vpn_t,bcm_l2gre_port_t *);
	int (*l2gre_port_delete)(int,bcm_vpn_t,bcm_gport_t);
	int (*l2gre_port_delete_all)(int,bcm_vpn_t);
	int (*l2gre_port_get)(int,bcm_vpn_t,bcm_l2gre_port_t *);
	int (*l2gre_port_get_all)(int,bcm_vpn_t,int,bcm_l2gre_port_t *,int *);
	/* bcm_l2gre_port_t_init not dispatchable */
	int (*l2gre_stat_attach)(int,bcm_gport_t,bcm_vpn_t,uint32);
	int (*l2gre_stat_counter_get)(int,bcm_gport_t,bcm_vpn_t,bcm_l2gre_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l2gre_stat_counter_set)(int,bcm_gport_t,bcm_vpn_t,bcm_l2gre_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l2gre_stat_counter_sync_get)(int,bcm_gport_t,bcm_vpn_t,bcm_l2gre_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l2gre_stat_detach)(int,bcm_gport_t,bcm_vpn_t);
	int (*l2gre_stat_id_get)(int,bcm_gport_t,bcm_vpn_t,bcm_l2gre_stat_t,uint32 *);
	int (*l2gre_stat_multi_get)(int,bcm_gport_t,bcm_vpn_t,int,bcm_l2gre_stat_t *,uint64 *);
	int (*l2gre_stat_multi_get32)(int,bcm_gport_t,bcm_vpn_t,int,bcm_l2gre_stat_t *,uint32 *);
	int (*l2gre_stat_multi_set)(int,bcm_gport_t,bcm_vpn_t,int,bcm_l2gre_stat_t *,uint64 *);
	int (*l2gre_stat_multi_set32)(int,bcm_gport_t,bcm_vpn_t,int,bcm_l2gre_stat_t *,uint32 *);
	int (*l2gre_tunnel_initiator_create)(int,bcm_tunnel_initiator_t *);
	int (*l2gre_tunnel_initiator_destroy)(int,bcm_gport_t);
	int (*l2gre_tunnel_initiator_destroy_all)(int);
	int (*l2gre_tunnel_initiator_get)(int,bcm_tunnel_initiator_t *);
	int (*l2gre_tunnel_initiator_traverse)(int,bcm_tunnel_initiator_traverse_cb,void *);
	int (*l2gre_tunnel_terminator_create)(int,bcm_tunnel_terminator_t *);
	int (*l2gre_tunnel_terminator_destroy)(int,bcm_gport_t);
	int (*l2gre_tunnel_terminator_destroy_all)(int);
	int (*l2gre_tunnel_terminator_get)(int,bcm_tunnel_terminator_t *);
	int (*l2gre_tunnel_terminator_traverse)(int,bcm_tunnel_terminator_traverse_cb,void *);
	int (*l2gre_tunnel_terminator_update)(int,bcm_tunnel_terminator_t *);
	/* bcm_l2gre_vpn_config_t_init not dispatchable */
	int (*l2gre_vpn_create)(int,bcm_l2gre_vpn_config_t *);
	int (*l2gre_vpn_destroy)(int,bcm_vpn_t);
	int (*l2gre_vpn_destroy_all)(int);
	int (*l2gre_vpn_get)(int,bcm_vpn_t,bcm_l2gre_vpn_config_t *);
	int (*l2gre_vpn_traverse)(int,bcm_l2gre_vpn_traverse_cb,void *);
	int (*l3_aacl_add)(int,uint32,bcm_l3_aacl_t *);
	int (*l3_aacl_delete)(int,bcm_l3_aacl_t *);
	int (*l3_aacl_delete_all)(int,bcm_l3_aacl_t *);
	int (*l3_aacl_find)(int,bcm_l3_aacl_t *);
	int (*l3_aacl_matched_traverse)(int,uint32,bcm_l3_aacl_traverse_cb,void *);
	/* bcm_l3_aacl_t_init not dispatchable */
	int (*l3_aacl_traverse)(int,bcm_l3_aacl_traverse_cb,void *);
	int (*l3_alpm_resource_get)(int,bcm_l3_route_group_t,bcm_l3_alpm_resource_t *);
	int (*l3_alpm_sanity_check)(int,int);
	int (*l3_alpm_trace_cb_register)(int,bcm_l3_alpm_trace_cb_f,void *);
	int (*l3_alpm_trace_cb_unregister)(int,bcm_l3_alpm_trace_cb_f);
	int (*l3_cleanup)(int);
	int (*l3_ecmp_agm_attach)(int,bcm_if_t,bcm_switch_agm_id_t);
	int (*l3_ecmp_agm_attach_get)(int,bcm_if_t,bcm_switch_agm_id_t *);
	int (*l3_ecmp_agm_detach)(int,bcm_if_t,bcm_switch_agm_id_t);
	int (*l3_ecmp_create)(int,uint32,bcm_l3_egress_ecmp_t *,int,bcm_l3_ecmp_member_t *);
	int (*l3_ecmp_destroy)(int,bcm_if_t);
	/* bcm_l3_ecmp_dlb_mon_cfg_t_init not dispatchable */
	int (*l3_ecmp_dlb_mon_config_get)(int,bcm_if_t,bcm_l3_ecmp_dlb_mon_cfg_t *);
	int (*l3_ecmp_dlb_mon_config_set)(int,bcm_if_t,bcm_l3_ecmp_dlb_mon_cfg_t *);
	int (*l3_ecmp_dlb_port_quality_attr_get)(int,bcm_port_t,bcm_l3_ecmp_dlb_port_quality_attr_t *);
	int (*l3_ecmp_dlb_port_quality_attr_set)(int,bcm_port_t,bcm_l3_ecmp_dlb_port_quality_attr_t *);
	/* bcm_l3_ecmp_dlb_port_quality_attr_t_init not dispatchable */
	int (*l3_ecmp_dlb_stat_get)(int,bcm_if_t,bcm_l3_ecmp_dlb_stat_t,uint64 *);
	int (*l3_ecmp_dlb_stat_set)(int,bcm_if_t,bcm_l3_ecmp_dlb_stat_t,uint64);
	int (*l3_ecmp_dlb_stat_sync_get)(int,bcm_if_t,bcm_l3_ecmp_dlb_stat_t,uint64 *);
	int (*l3_ecmp_find)(int,int,bcm_l3_ecmp_member_t *,bcm_l3_egress_ecmp_t *);
	int (*l3_ecmp_flexctr_object_get)(int,bcm_if_t,uint32 *);
	int (*l3_ecmp_flexctr_object_set)(int,bcm_if_t,uint32);
	int (*l3_ecmp_get)(int,bcm_l3_egress_ecmp_t *,int,bcm_l3_ecmp_member_t *,int *);
	int (*l3_ecmp_group_info_get)(int,bcm_l3_ecmp_group_info_t *);
	/* bcm_l3_ecmp_group_info_t_init not dispatchable */
	int (*l3_ecmp_member_add)(int,bcm_if_t,bcm_l3_ecmp_member_t *);
	int (*l3_ecmp_member_delete)(int,bcm_if_t,bcm_l3_ecmp_member_t *);
	int (*l3_ecmp_member_delete_all)(int,bcm_if_t);
	/* bcm_l3_ecmp_member_t_init not dispatchable */
	int (*l3_ecmp_stat_attach)(int,bcm_if_t,uint32);
	int (*l3_ecmp_stat_detach)(int,bcm_if_t);
	int (*l3_ecmp_stat_id_get)(int,bcm_if_t,uint32 *);
	int (*l3_ecmp_traverse)(int,bcm_l3_ecmp_traverse_cb,void *);
	int (*l3_ecmp_tunnel_priority_map_create)(int,bcm_l3_ecmp_tunnel_priority_map_info_t *);
	int (*l3_ecmp_tunnel_priority_map_destroy)(int,bcm_l3_ecmp_tunnel_priority_map_info_t *);
	int (*l3_ecmp_tunnel_priority_map_get)(int,bcm_l3_ecmp_tunnel_priority_map_info_t *);
	int (*l3_ecmp_tunnel_priority_map_set)(int,bcm_l3_ecmp_tunnel_priority_map_info_t *);
	int (*l3_egress_allocation_get)(int,uint32,bcm_l3_egress_t *,uint32,bcm_if_t *);
	int (*l3_egress_arp_traverse)(int,bcm_l3_egress_traverse_cb,void *);
	int (*l3_egress_create)(int,uint32,bcm_l3_egress_t *,bcm_if_t *);
	int (*l3_egress_destroy)(int,bcm_if_t);
	int (*l3_egress_ecmp_add)(int,bcm_l3_egress_ecmp_t *,bcm_if_t);
	int (*l3_egress_ecmp_create)(int,bcm_l3_egress_ecmp_t *,int,bcm_if_t *);
	int (*l3_egress_ecmp_delete)(int,bcm_l3_egress_ecmp_t *,bcm_if_t);
	int (*l3_egress_ecmp_destroy)(int,bcm_l3_egress_ecmp_t *);
	int (*l3_egress_ecmp_ethertype_get)(int,uint32 *,int,int *,int *);
	int (*l3_egress_ecmp_ethertype_set)(int,uint32,int,int *);
	int (*l3_egress_ecmp_find)(int,int,bcm_if_t *,bcm_l3_egress_ecmp_t *);
	int (*l3_egress_ecmp_get)(int,bcm_l3_egress_ecmp_t *,int,bcm_if_t *,int *);
	int (*l3_egress_ecmp_member_status_get)(int,bcm_if_t,int *);
	int (*l3_egress_ecmp_member_status_set)(int,bcm_if_t,int);
	int (*l3_egress_ecmp_resilient_add)(int,uint32,bcm_l3_egress_ecmp_resilient_entry_t *);
	int (*l3_egress_ecmp_resilient_delete)(int,uint32,bcm_l3_egress_ecmp_resilient_entry_t *);
	int (*l3_egress_ecmp_resilient_replace)(int,uint32,bcm_l3_egress_ecmp_resilient_entry_t *,int *,bcm_l3_egress_ecmp_resilient_entry_t *);
	int (*l3_egress_ecmp_resilient_traverse)(int,uint32,bcm_l3_egress_ecmp_resilient_entry_t *,bcm_l3_egress_ecmp_resilient_traverse_cb,void *);
	/* bcm_l3_egress_ecmp_t_init not dispatchable */
	int (*l3_egress_ecmp_traverse)(int,bcm_l3_egress_ecmp_traverse_cb,void *);
	int (*l3_egress_ecmp_tunnel_priority_set)(int,bcm_l3_egress_ecmp_t *,int,bcm_if_t *);
	int (*l3_egress_find)(int,bcm_l3_egress_t *,bcm_if_t *);
	int (*l3_egress_flexctr_object_get)(int,bcm_if_t,uint32 *);
	int (*l3_egress_flexctr_object_set)(int,bcm_if_t,uint32);
	int (*l3_egress_get)(int,bcm_if_t,bcm_l3_egress_t *);
	int (*l3_egress_multi_alloc)(int,bcm_l3_egress_multi_info_t,bcm_if_t *);
	int (*l3_egress_multi_free)(int,bcm_if_t);
	/* bcm_l3_egress_multi_info_t_init not dispatchable */
	int (*l3_egress_multipath_add)(int,bcm_if_t,bcm_if_t);
	int (*l3_egress_multipath_create)(int,uint32,int,bcm_if_t *,bcm_if_t *);
	int (*l3_egress_multipath_delete)(int,bcm_if_t,bcm_if_t);
	int (*l3_egress_multipath_destroy)(int,bcm_if_t);
	int (*l3_egress_multipath_find)(int,int,bcm_if_t *,bcm_if_t *);
	int (*l3_egress_multipath_get)(int,bcm_if_t,int,bcm_if_t *,int *);
	int (*l3_egress_multipath_max_create)(int,uint32,int,int,bcm_if_t *,bcm_if_t *);
	int (*l3_egress_multipath_traverse)(int,bcm_l3_egress_multipath_traverse_cb,void *);
	int (*l3_egress_stat_attach)(int,bcm_if_t,uint32);
	int (*l3_egress_stat_counter_get)(int,bcm_if_t,bcm_l3_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_egress_stat_counter_set)(int,bcm_if_t,bcm_l3_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_egress_stat_counter_sync_get)(int,bcm_if_t,bcm_l3_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_egress_stat_detach)(int,bcm_if_t);
	int (*l3_egress_stat_id_get)(int,bcm_if_t,bcm_l3_stat_t,uint32 *);
	/* bcm_l3_egress_t_init not dispatchable */
	int (*l3_egress_traverse)(int,bcm_l3_egress_traverse_cb,void *);
	int (*l3_enable_set)(int,int);
	int (*l3_host_add)(int,bcm_l3_host_t *);
	int (*l3_host_age)(int,uint32,bcm_l3_host_traverse_cb,void *);
	int (*l3_host_conflict_get)(int,bcm_l3_key_t *,bcm_l3_key_t *,int,int *);
	int (*l3_host_delete)(int,bcm_l3_host_t *);
	int (*l3_host_delete_all)(int,bcm_l3_host_t *);
	int (*l3_host_delete_by_interface)(int,bcm_l3_host_t *);
	int (*l3_host_delete_by_network)(int,bcm_l3_route_t *);
	int (*l3_host_find)(int,bcm_l3_host_t *);
	int (*l3_host_invalidate_entry)(int,bcm_ip_t);
	int (*l3_host_stat_attach)(int,bcm_l3_host_t *,uint32);
	int (*l3_host_stat_counter_get)(int,bcm_l3_host_t *,bcm_l3_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_host_stat_counter_set)(int,bcm_l3_host_t *,bcm_l3_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_host_stat_counter_sync_get)(int,bcm_l3_host_t *,bcm_l3_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_host_stat_detach)(int,bcm_l3_host_t *);
	int (*l3_host_stat_id_get)(int,bcm_l3_host_t *,bcm_l3_stat_t,uint32 *);
	/* bcm_l3_host_t_init not dispatchable */
	int (*l3_host_traverse)(int,uint32,uint32,uint32,bcm_l3_host_traverse_cb,void *);
	int (*l3_host_validate_entry)(int,bcm_ip_t);
	int (*l3_info)(int,bcm_l3_info_t *);
	/* bcm_l3_info_t_init not dispatchable */
	int (*l3_ingress_create)(int,bcm_l3_ingress_t *,bcm_if_t *);
	int (*l3_ingress_destroy)(int,bcm_if_t);
	int (*l3_ingress_find)(int,bcm_l3_ingress_t *,bcm_if_t *);
	int (*l3_ingress_get)(int,bcm_if_t,bcm_l3_ingress_t *);
	int (*l3_ingress_stat_attach)(int,bcm_if_t,uint32);
	int (*l3_ingress_stat_counter_get)(int,bcm_if_t,bcm_l3_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_ingress_stat_counter_set)(int,bcm_if_t,bcm_l3_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_ingress_stat_counter_sync_get)(int,bcm_if_t,bcm_l3_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_ingress_stat_detach)(int,bcm_if_t);
	int (*l3_ingress_stat_id_get)(int,bcm_if_t,bcm_l3_stat_t,uint32 *);
	/* bcm_l3_ingress_t_init not dispatchable */
	int (*l3_ingress_traverse)(int,bcm_l3_ingress_traverse_cb,void *);
	int (*l3_init)(int);
	int (*l3_intf_create)(int,bcm_l3_intf_t *);
	int (*l3_intf_delete)(int,bcm_l3_intf_t *);
	int (*l3_intf_delete_all)(int);
	int (*l3_intf_find)(int,bcm_l3_intf_t *);
	int (*l3_intf_find_vlan)(int,bcm_l3_intf_t *);
	int (*l3_intf_get)(int,bcm_l3_intf_t *);
	/* bcm_l3_intf_qos_t_init not dispatchable */
	int (*l3_intf_stat_attach)(int,bcm_if_t,uint32);
	int (*l3_intf_stat_detach)(int,bcm_if_t);
	int (*l3_intf_stat_id_get)(int,bcm_if_t,uint32 *);
	/* bcm_l3_intf_t_init not dispatchable */
	int (*l3_intf_vpn_get)(int,bcm_if_t,uint32 *,bcm_vpn_t *);
	int (*l3_intf_vpn_set)(int,bcm_if_t,uint32,bcm_vpn_t);
	int (*l3_ip4_options_action_get)(int,int,int,bcm_l3_ip4_options_action_t *);
	int (*l3_ip4_options_action_set)(int,int,int,bcm_l3_ip4_options_action_t);
	int (*l3_ip4_options_profile_create)(int,uint32,bcm_l3_ip4_options_action_t,int *);
	int (*l3_ip4_options_profile_destroy)(int,int);
	int (*l3_ip6_prefix_map_add)(int,bcm_ip6_t);
	int (*l3_ip6_prefix_map_delete)(int,bcm_ip6_t);
	int (*l3_ip6_prefix_map_delete_all)(int);
	int (*l3_ip6_prefix_map_get)(int,int,bcm_ip6_t *,int *);
	/* bcm_l3_key_t_init not dispatchable */
	int (*l3_large_nat_egress_add)(int,bcm_l3_large_nat_egress_t *);
	int (*l3_large_nat_egress_delete)(int,bcm_l3_large_nat_egress_t *);
	int (*l3_large_nat_egress_get)(int,bcm_l3_large_nat_egress_t *);
	/* bcm_l3_large_nat_egress_t_init not dispatchable */
	int (*l3_large_nat_egress_traverse)(int,bcm_l3_large_nat_egress_traverse_cb,void *);
	int (*l3_nat_egress_add)(int,bcm_l3_nat_egress_t *);
	int (*l3_nat_egress_delete)(int,bcm_l3_nat_id_t);
	int (*l3_nat_egress_destroy)(int,bcm_l3_nat_egress_t *);
	int (*l3_nat_egress_get)(int,bcm_l3_nat_egress_t *);
	int (*l3_nat_egress_stat_attach)(int,bcm_l3_nat_egress_t *,uint32);
	int (*l3_nat_egress_stat_counter_get)(int,bcm_l3_nat_egress_t *,bcm_l3_nat_egress_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_nat_egress_stat_counter_set)(int,bcm_l3_nat_egress_t *,bcm_l3_nat_egress_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_nat_egress_stat_counter_sync_get)(int,bcm_l3_nat_egress_t *,bcm_l3_nat_egress_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_nat_egress_stat_detach)(int,bcm_l3_nat_egress_t *);
	int (*l3_nat_egress_stat_id_get)(int,bcm_l3_nat_egress_t *,bcm_l3_nat_egress_stat_t,uint32 *);
	int (*l3_nat_egress_stat_multi_get)(int,bcm_l3_nat_egress_t *,int,bcm_l3_nat_egress_stat_t *,uint64 *);
	int (*l3_nat_egress_stat_multi_get32)(int,bcm_l3_nat_egress_t *,int,bcm_l3_nat_egress_stat_t *,uint32 *);
	int (*l3_nat_egress_stat_multi_set)(int,bcm_l3_nat_egress_t *,int,bcm_l3_nat_egress_stat_t *,uint64 *);
	int (*l3_nat_egress_stat_multi_set32)(int,bcm_l3_nat_egress_t *,int,bcm_l3_nat_egress_stat_t *,uint32 *);
	/* bcm_l3_nat_egress_t_init not dispatchable */
	int (*l3_nat_egress_traverse)(int,uint32,uint32,uint32,bcm_l3_nat_egress_traverse_cb,void *);
	int (*l3_nat_ingress_add)(int,bcm_l3_nat_ingress_t *);
	int (*l3_nat_ingress_age)(int,uint32,bcm_l3_nat_ingress_traverse_cb,void *);
	int (*l3_nat_ingress_delete)(int,bcm_l3_nat_ingress_t *);
	int (*l3_nat_ingress_delete_all)(int,bcm_l3_nat_ingress_t *);
	int (*l3_nat_ingress_find)(int,bcm_l3_nat_ingress_t *);
	/* bcm_l3_nat_ingress_t_init not dispatchable */
	int (*l3_nat_ingress_traverse)(int,uint32,uint32,uint32,bcm_l3_nat_ingress_traverse_cb,void *);
	int (*l3_route_add)(int,bcm_l3_route_t *);
	int (*l3_route_age)(int,uint32,bcm_l3_route_traverse_cb,void *);
	int (*l3_route_delete)(int,bcm_l3_route_t *);
	int (*l3_route_delete_all)(int,bcm_l3_route_t *);
	int (*l3_route_delete_by_interface)(int,bcm_l3_route_t *);
	int (*l3_route_find)(int,bcm_l3_host_t *,bcm_l3_route_t *);
	int (*l3_route_flexctr_object_get)(int,bcm_l3_route_t *,uint32 *);
	int (*l3_route_flexctr_object_set)(int,bcm_l3_route_t *,uint32);
	int (*l3_route_get)(int,bcm_l3_route_t *);
	int (*l3_route_max_ecmp_get)(int,int *);
	int (*l3_route_max_ecmp_set)(int,int);
	int (*l3_route_multipath_get)(int,bcm_l3_route_t *,bcm_l3_route_t *,int,int *);
	int (*l3_route_stat_attach)(int,bcm_l3_route_t *,uint32);
	int (*l3_route_stat_counter_get)(int,bcm_l3_route_t *,bcm_l3_route_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_route_stat_counter_set)(int,bcm_l3_route_t *,bcm_l3_route_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_route_stat_counter_sync_get)(int,bcm_l3_route_t *,bcm_l3_route_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_route_stat_detach)(int,bcm_l3_route_t *);
	int (*l3_route_stat_enable_set)(int,bcm_l3_route_t *,int);
	int (*l3_route_stat_get)(int,bcm_l3_route_t *,bcm_l3_stat_t,uint64 *);
	int (*l3_route_stat_get32)(int,bcm_l3_route_t *,bcm_l3_stat_t,uint32 *);
	int (*l3_route_stat_id_get)(int,bcm_l3_route_t *,bcm_l3_route_stat_t,uint32 *);
	int (*l3_route_stat_multi_get)(int,bcm_l3_route_t *,int,bcm_l3_route_stat_t *,uint64 *);
	int (*l3_route_stat_multi_get32)(int,bcm_l3_route_t *,int,bcm_l3_route_stat_t *,uint32 *);
	int (*l3_route_stat_multi_set)(int,bcm_l3_route_t *,int,bcm_l3_route_stat_t *,uint64 *);
	int (*l3_route_stat_multi_set32)(int,bcm_l3_route_t *,int,bcm_l3_route_stat_t *,uint32 *);
	int (*l3_route_stat_set)(int,bcm_l3_route_t *,bcm_l3_stat_t,uint64);
	int (*l3_route_stat_set32)(int,bcm_l3_route_t *,bcm_l3_stat_t,uint32);
	/* bcm_l3_route_t_init not dispatchable */
	int (*l3_route_traverse)(int,uint32,uint32,uint32,bcm_l3_route_traverse_cb,void *);
	int (*l3_source_bind_add)(int,bcm_l3_source_bind_t *);
	int (*l3_source_bind_delete)(int,bcm_l3_source_bind_t *);
	int (*l3_source_bind_delete_all)(int);
	int (*l3_source_bind_enable_get)(int,bcm_port_t,int *);
	int (*l3_source_bind_enable_set)(int,bcm_port_t,int);
	int (*l3_source_bind_get)(int,bcm_l3_source_bind_t *);
	/* bcm_l3_source_bind_t_init not dispatchable */
	int (*l3_source_bind_traverse)(int,bcm_l3_source_bind_traverse_cb,void *);
	int (*l3_subnet_route_find)(int,bcm_l3_route_t *,bcm_l3_route_t *);
	/* bcm_l3_tunnel_term_extn_t_init not dispatchable */
	int (*l3_tunnel_term_global_cfg_get)(int,bcm_l3_tunnel_term_extn_t *);
	int (*l3_tunnel_term_global_cfg_set)(int,bcm_l3_tunnel_term_extn_t *);
	int (*l3_vpbr_entry_add)(int,bcm_l3_vpbr_entry_t *);
	int (*l3_vpbr_entry_delete)(int,bcm_l3_vpbr_entry_t *);
	int (*l3_vpbr_entry_delete_all)(int,bcm_l3_vpbr_entry_t *);
	int (*l3_vpbr_entry_get)(int,bcm_l3_vpbr_entry_t *);
	/* bcm_l3_vpbr_entry_t_init not dispatchable */
	int (*l3_vpbr_traverse)(int,uint32,bcm_l3_vpbr_traverse_cb,void *);
	int (*l3_vrf_route_data_mode_get)(int,bcm_vrf_t,uint32,bcm_l3_vrf_route_data_mode_t *);
	int (*l3_vrf_route_data_mode_set)(int,bcm_vrf_t,uint32,bcm_l3_vrf_route_data_mode_t);
	int (*l3_vrf_stat_attach)(int,bcm_vrf_t,uint32);
	int (*l3_vrf_stat_counter_get)(int,bcm_vrf_t,bcm_l3_vrf_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_vrf_stat_counter_set)(int,bcm_vrf_t,bcm_l3_vrf_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_vrf_stat_counter_sync_get)(int,bcm_vrf_t,bcm_l3_vrf_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*l3_vrf_stat_detach)(int,bcm_vrf_t);
	int (*l3_vrf_stat_enable_set)(int,bcm_vrf_t,int);
	int (*l3_vrf_stat_get)(int,bcm_vrf_t,bcm_l3_vrf_stat_t,uint64 *);
	int (*l3_vrf_stat_get32)(int,bcm_vrf_t,bcm_l3_vrf_stat_t,uint32 *);
	int (*l3_vrf_stat_id_get)(int,bcm_vrf_t,bcm_l3_vrf_stat_t,uint32 *);
	int (*l3_vrf_stat_multi_get)(int,bcm_vrf_t,int,bcm_l3_vrf_stat_t *,uint64 *);
	int (*l3_vrf_stat_multi_get32)(int,bcm_vrf_t,int,bcm_l3_vrf_stat_t *,uint32 *);
	int (*l3_vrf_stat_multi_set)(int,bcm_vrf_t,int,bcm_l3_vrf_stat_t *,uint64 *);
	int (*l3_vrf_stat_multi_set32)(int,bcm_vrf_t,int,bcm_l3_vrf_stat_t *,uint32 *);
	int (*l3_vrf_stat_set)(int,bcm_vrf_t,bcm_l3_vrf_stat_t,uint64);
	int (*l3_vrf_stat_set32)(int,bcm_vrf_t,bcm_l3_vrf_stat_t,uint32);
	int (*l3_vrf_stat_sync_get)(int,bcm_vrf_t,bcm_l3_vrf_stat_t,uint64 *);
	int (*l3_vrf_stat_sync_get32)(int,bcm_vrf_t,bcm_l3_vrf_stat_t,uint32 *);
	int (*l3_vrrp_add)(int,bcm_vlan_t,uint32);
	int (*l3_vrrp_config_add)(int,uint32,bcm_vlan_t,uint32);
	int (*l3_vrrp_config_delete)(int,uint32,bcm_vlan_t,uint32);
	int (*l3_vrrp_config_delete_all)(int,uint32,bcm_vlan_t);
	int (*l3_vrrp_config_get)(int,uint32,bcm_vlan_t,uint32,uint32 *,uint32 *);
	int (*l3_vrrp_delete)(int,bcm_vlan_t,uint32);
	int (*l3_vrrp_delete_all)(int,bcm_vlan_t);
	int (*l3_vrrp_get)(int,bcm_vlan_t,int,int *,int *);
#endif	/* INCLUDE_L3 */
	int (*latency_monitor_config_get)(int,uint8,bcm_latency_monitor_config_t *);
	int (*latency_monitor_config_set)(int,uint8,bcm_latency_monitor_config_t *);
	/* bcm_latency_monitor_config_t_init not dispatchable */
	int (*latency_monitor_cosq_config_get)(int,uint8,uint8,bcm_latency_monitor_cosq_info_t *);
	int (*latency_monitor_cosq_config_set)(int,uint8,uint8,bcm_latency_monitor_cosq_info_t);
	/* bcm_latency_monitor_cosq_info_t_init not dispatchable */
	int (*latency_monitor_destroy)(int,uint8);
	int (*latency_monitor_detach)(int);
	int (*latency_monitor_enable)(int,uint8,uint8);
	int (*latency_monitor_histogram_get)(int,uint8,uint8,uint8,bcm_latency_monitor_histogram_t *);
	/* bcm_latency_monitor_histogram_t_init not dispatchable */
	int (*latency_monitor_info_get)(int,uint8,bcm_latency_monitor_info_t *);
	/* bcm_latency_monitor_info_t_init not dispatchable */
	int (*latency_monitor_init)(int);
	int (*latency_monitor_latency_limit_table_get)(int,uint8,uint32 *);
	int (*latency_monitor_latency_limit_table_set)(int,uint8,uint32 *);
	int (*latency_monitor_register)(int,int,bcm_latency_monitor_callback_fn,void *);
	int (*latency_monitor_stat_attach)(int,uint8,uint32);
	int (*latency_monitor_stat_detach)(int,uint8);
	int (*latency_monitor_stat_id_get)(int,uint8,uint32 *);
	int (*latency_monitor_unregister)(int,int,bcm_latency_monitor_callback_fn);
	int (*lb_control_get)(int,bcm_lbg_t,bcm_lb_direction_type_t,uint32,bcm_lb_control_t,int *);
	int (*lb_control_set)(int,bcm_lbg_t,bcm_lb_direction_type_t,uint32,bcm_lb_control_t,int);
	int (*lb_enable_get)(int,bcm_lbg_t,uint32,uint32 *);
	int (*lb_enable_set)(int,bcm_lbg_t,uint32,uint32);
	int (*lb_flush_configure_get)(int,bcm_lbg_t,uint32,bcm_lb_flush_type_t,int *);
	int (*lb_flush_configure_set)(int,bcm_lbg_t,uint32,bcm_lb_flush_type_t,int);
	/* bcm_lb_lbg_weight_t_init not dispatchable */
	int (*lb_modem_control_get)(int,bcm_modem_t,bcm_lb_direction_type_t,uint32,bcm_lb_modem_control_t,int *);
	int (*lb_modem_control_set)(int,bcm_modem_t,bcm_lb_direction_type_t,uint32,bcm_lb_modem_control_t,int);
	int (*lb_modem_packet_config_get)(int,bcm_modem_t,uint32,bcm_lb_modem_packet_config_t *);
	int (*lb_modem_packet_config_set)(int,bcm_modem_t,uint32,bcm_lb_modem_packet_config_t *);
	/* bcm_lb_modem_packet_config_t_init not dispatchable */
	/* bcm_lb_modem_shaper_config_t_init not dispatchable */
	int (*lb_modem_shaper_get)(int,bcm_modem_t,uint32,bcm_lb_modem_shaper_config_t *);
	int (*lb_modem_shaper_set)(int,bcm_modem_t,uint32,bcm_lb_modem_shaper_config_t *);
	int (*lb_modem_stat_get)(int,bcm_modem_t,bcm_lb_direction_type_t,uint32,bcm_lb_modem_stat_val_t,uint64 *);
	int (*lb_modem_status_get)(int,bcm_modem_t,bcm_lb_direction_type_t,uint32,bcm_lb_modem_status_type_t,int *);
	int (*lb_modem_to_lbg_map_get)(int,bcm_modem_t,bcm_lb_direction_type_t,uint32,bcm_lbg_t *);
	int (*lb_modem_to_lbg_map_set)(int,bcm_modem_t,bcm_lb_direction_type_t,uint32,bcm_lbg_t);
	int (*lb_modem_to_port_map_get)(int,bcm_modem_t,uint32,bcm_gport_t *);
	int (*lb_modem_to_port_map_set)(int,bcm_modem_t,uint32,bcm_gport_t);
	int (*lb_packet_config_get)(int,uint32,bcm_lb_packet_config_t *);
	int (*lb_packet_config_set)(int,uint32,bcm_lb_packet_config_t *);
	/* bcm_lb_packet_config_t_init not dispatchable */
	/* bcm_lb_pkt_pri_t_init not dispatchable */
	/* bcm_lb_rx_modem_map_config_t_init not dispatchable */
	int (*lb_rx_modem_map_get)(int,bcm_lb_rx_modem_map_index_t *,uint32,bcm_lb_rx_modem_map_config_t *);
	/* bcm_lb_rx_modem_map_index_t_init not dispatchable */
	int (*lb_rx_modem_map_set)(int,bcm_lb_rx_modem_map_index_t *,uint32,bcm_lb_rx_modem_map_config_t *);
	int (*lb_sequence_number_width_get)(int,bcm_lbg_t,bcm_lb_direction_type_t,uint32,int *);
	int (*lb_sequence_number_width_set)(int,bcm_lbg_t,bcm_lb_direction_type_t,uint32,int);
	int (*lb_stat_get)(int,bcm_lbg_t,bcm_lb_direction_type_t,uint32,bcm_lb_stat_val_t,uint64 *);
	int (*lb_status_get)(int,bcm_lbg_t,bcm_lb_direction_type_t,uint32,bcm_lb_status_type_t,int *);
	/* bcm_lb_tc_dp_t_init not dispatchable */
	int (*lb_tc_dp_to_priority_config_get)(int,uint32,bcm_lb_tc_dp_t *,bcm_lb_pkt_pri_t *);
	int (*lb_tc_dp_to_priority_config_set)(int,uint32,bcm_lb_tc_dp_t *,bcm_lb_pkt_pri_t *);
	int (*lb_tx_sched_get)(int,uint32,int,bcm_lb_lbg_weight_t *,int *);
	int (*lb_tx_sched_set)(int,uint32,int,bcm_lb_lbg_weight_t *);
	int (*link_change)(int,bcm_pbmp_t);
	int (*link_wait)(int,bcm_pbmp_t *,int);
	int (*linkscan_detach)(int);
#ifdef	BROADCOM_DEBUG
	int (*linkscan_dump)(int);
#endif	/* BROADCOM_DEBUG */
	int (*linkscan_enable_get)(int,int *);
	int (*linkscan_enable_port_get)(int,bcm_port_t);
	int (*linkscan_enable_set)(int,int);
	int (*linkscan_init)(int);
	int (*linkscan_mode_get)(int,bcm_port_t,int *);
	int (*linkscan_mode_set)(int,bcm_port_t,int);
	int (*linkscan_mode_set_pbm)(int,bcm_pbmp_t,int);
	int (*linkscan_override_link_state_get)(int,bcm_port_t,int *);
	int (*linkscan_override_link_state_set)(int,bcm_port_t,int);
	int (*linkscan_port_register)(int,bcm_port_t,bcm_linkscan_port_handler_t);
	int (*linkscan_port_unregister)(int,bcm_port_t,bcm_linkscan_port_handler_t);
	int (*linkscan_register)(int,bcm_linkscan_handler_t);
	int (*linkscan_trigger_event_get)(int,bcm_port_t,uint32,bcm_linkscan_trigger_event_t,int *);
	int (*linkscan_trigger_event_set)(int,bcm_port_t,uint32,bcm_linkscan_trigger_event_t,int);
	int (*linkscan_unregister)(int,bcm_linkscan_handler_t);
	int (*linkscan_update)(int,bcm_pbmp_t);
#ifdef	INCLUDE_MACSEC
	int (*macsec_event_enable_get)(int,bcm_macsec_event_t,int *);
	int (*macsec_event_enable_set)(int,bcm_macsec_event_t,int);
	int (*macsec_event_register)(int,bcm_macsec_event_cb,void *);
	int (*macsec_event_unregister)(int,bcm_macsec_event_cb);
	int (*macsec_flow_create)(int,bcm_port_t,uint32,bcm_macsec_flow_match_t *,bcm_macsec_flow_action_t *,int *);
	int (*macsec_flow_destroy)(int,bcm_port_t,int);
	int (*macsec_flow_get)(int,bcm_port_t,int,bcm_macsec_flow_match_t *,bcm_macsec_flow_action_t *);
	int (*macsec_flow_traverse)(int,bcm_port_t,bcm_macsec_flow_traverse_cb,void *);
	int (*macsec_port_capability_get)(int,bcm_port_t,bcm_macsec_port_capability_t *);
	int (*macsec_port_config_get)(int,bcm_port_t,bcm_macsec_port_config_t *);
	int (*macsec_port_config_set)(int,bcm_port_t,bcm_macsec_port_config_t *);
	int (*macsec_port_traverse)(int,bcm_macsec_port_traverse_cb,void *);
	int (*macsec_secure_assoc_create)(int,bcm_port_t,uint32,int,bcm_macsec_secure_assoc_t *,int *);
	int (*macsec_secure_assoc_destroy)(int,bcm_port_t,int);
	int (*macsec_secure_assoc_get)(int,bcm_port_t,int,bcm_macsec_secure_assoc_t *,int *);
	int (*macsec_secure_assoc_traverse)(int,bcm_port_t,int,bcm_macsec_secure_assoc_traverse_cb,void *);
	int (*macsec_secure_chan_create)(int,bcm_port_t,uint32,bcm_macsec_secure_chan_t *,int *);
	int (*macsec_secure_chan_destroy)(int,bcm_port_t,int);
	int (*macsec_secure_chan_get)(int,bcm_port_t,int,bcm_macsec_secure_chan_t *);
	int (*macsec_secure_chan_traverse)(int,bcm_port_t,bcm_macsec_chan_traverse_cb,void *);
	int (*macsec_stat_clear)(int,bcm_port_t);
	int (*macsec_stat_get)(int,bcm_port_t,bcm_macsec_stat_t,int,int,uint64 *);
	int (*macsec_stat_get32)(int,bcm_port_t,bcm_macsec_stat_t,int,int,uint32 *);
	int (*macsec_stat_set)(int,bcm_port_t,bcm_macsec_stat_t,int,int,uint64);
	int (*macsec_stat_set32)(int,bcm_port_t,bcm_macsec_stat_t,int,int,uint32);
#endif	/* INCLUDE_MACSEC */
	int (*mcast_addr_add)(int,bcm_mcast_addr_t *);
	int (*mcast_addr_add_w_l2mcindex)(int,bcm_mcast_addr_t *);
	int (*mcast_addr_remove)(int,bcm_mac_t,bcm_vlan_t);
	int (*mcast_addr_remove_w_l2mcindex)(int,bcm_mcast_addr_t *);
	/* bcm_mcast_addr_t_init not dispatchable */
	int (*mcast_bitmap_del)(int,int,bcm_port_t,bcm_pbmp_t);
	int (*mcast_bitmap_get)(int,int,bcm_port_t,bcm_pbmp_t *);
	int (*mcast_bitmap_max_get)(int,int *);
	int (*mcast_bitmap_set)(int,int,bcm_port_t,bcm_pbmp_t);
	int (*mcast_init)(int);
	int (*mcast_join)(int,bcm_mac_t,bcm_vlan_t,int,bcm_mcast_addr_t *,bcm_pbmp_t *);
	int (*mcast_leave)(int,bcm_mac_t,bcm_vlan_t,int);
	int (*mcast_port_add)(int,bcm_mcast_addr_t *);
	int (*mcast_port_get)(int,bcm_mac_t,bcm_vlan_t,bcm_mcast_addr_t *);
	int (*mcast_port_remove)(int,bcm_mcast_addr_t *);
#ifdef	INCLUDE_L3
	int (*mim_detach)(int);
	int (*mim_init)(int);
	int (*mim_lookup_id_stat_attach)(int,int,uint32);
	int (*mim_lookup_id_stat_counter_get)(int,int,bcm_mim_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mim_lookup_id_stat_counter_set)(int,int,bcm_mim_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mim_lookup_id_stat_counter_sync_get)(int,int,bcm_mim_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mim_lookup_id_stat_detach)(int,int);
	int (*mim_lookup_id_stat_id_get)(int,int,bcm_mim_stat_t,uint32 *);
	int (*mim_port_add)(int,bcm_mim_vpn_t,bcm_mim_port_t *);
	int (*mim_port_delete)(int,bcm_mim_vpn_t,bcm_gport_t);
	int (*mim_port_delete_all)(int,bcm_mim_vpn_t);
	int (*mim_port_get)(int,bcm_mim_vpn_t,bcm_mim_port_t *);
	int (*mim_port_get_all)(int,bcm_mim_vpn_t,int,bcm_mim_port_t *,int *);
	/* bcm_mim_port_t_init not dispatchable */
	/* bcm_mim_vpn_config_t_init not dispatchable */
	int (*mim_vpn_create)(int,bcm_mim_vpn_config_t *);
	int (*mim_vpn_destroy)(int,bcm_mim_vpn_t);
	int (*mim_vpn_destroy_all)(int);
	int (*mim_vpn_get)(int,bcm_mim_vpn_t,bcm_mim_vpn_config_t *);
	int (*mim_vpn_stat_attach)(int,bcm_mim_vpn_t,uint32);
	int (*mim_vpn_stat_counter_get)(int,bcm_mim_vpn_t,bcm_mim_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mim_vpn_stat_counter_set)(int,bcm_mim_vpn_t,bcm_mim_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mim_vpn_stat_counter_sync_get)(int,bcm_mim_vpn_t,bcm_mim_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mim_vpn_stat_detach)(int,bcm_mim_vpn_t);
	int (*mim_vpn_stat_id_get)(int,bcm_mim_vpn_t,bcm_mim_stat_t,uint32 *);
	int (*mim_vpn_traverse)(int,bcm_mim_vpn_traverse_cb,void *);
#endif	/* INCLUDE_L3 */
	int (*mirror_destination_count_command_get)(int,bcm_core_t,bcm_gport_t,int,uint32,bcm_mirror_profile_cmd_count_t *);
	int (*mirror_destination_count_command_set)(int,bcm_core_t,bcm_gport_t,int,uint32,bcm_mirror_profile_cmd_count_t *);
	int (*mirror_destination_create)(int,bcm_mirror_destination_t *);
	int (*mirror_destination_destroy)(int,bcm_gport_t);
	int (*mirror_destination_get)(int,bcm_gport_t,bcm_mirror_destination_t *);
	/* bcm_mirror_destination_t_init not dispatchable */
	int (*mirror_destination_traverse)(int,bcm_mirror_destination_traverse_cb,void *);
	int (*mirror_egress_get)(int,bcm_port_t,int *);
	int (*mirror_egress_set)(int,bcm_port_t,int);
	int (*mirror_global_truncate_get)(int,bcm_mirror_global_truncate_t *);
	int (*mirror_global_truncate_set)(int,bcm_mirror_global_truncate_t *);
	/* bcm_mirror_global_truncate_t_init not dispatchable */
	int (*mirror_header_info_get)(int,bcm_gport_t,uint32 *,bcm_mirror_header_info_t *);
	int (*mirror_header_info_set)(int,uint32,bcm_gport_t,bcm_mirror_header_info_t *);
	/* bcm_mirror_header_info_t_init not dispatchable */
	int (*mirror_ingress_get)(int,bcm_port_t,int *);
	int (*mirror_ingress_mod_event_group_create)(int,bcm_mirror_ingress_mod_event_t *,int,bcm_mirror_ingress_mod_event_group_t *);
	int (*mirror_ingress_mod_event_group_destroy)(int,bcm_mirror_ingress_mod_event_group_t);
	int (*mirror_ingress_mod_event_group_get)(int,bcm_mirror_ingress_mod_event_group_t,bcm_mirror_ingress_mod_event_t *,int *);
	int (*mirror_ingress_mod_event_group_get_all)(int,bcm_mirror_ingress_mod_event_group_t *,int *);
	int (*mirror_ingress_mod_event_profile_create)(int,bcm_mirror_ingress_mod_event_profile_t *,int *);
	int (*mirror_ingress_mod_event_profile_destroy)(int,int);
	int (*mirror_ingress_mod_event_profile_get)(int,int,bcm_mirror_ingress_mod_event_profile_t *);
	int (*mirror_ingress_mod_event_profile_get_all)(int,int *,int *);
	int (*mirror_ingress_mod_event_profile_group_add)(int,int,bcm_mirror_ingress_mod_event_group_t,int);
	int (*mirror_ingress_mod_event_profile_group_delete)(int,int,bcm_mirror_ingress_mod_event_group_t);
	int (*mirror_ingress_mod_event_profile_group_get)(int,int,bcm_mirror_ingress_mod_event_group_t,int *);
	int (*mirror_ingress_mod_event_profile_group_get_all)(int,int,bcm_mirror_ingress_mod_event_group_t *,int *);
	/* bcm_mirror_ingress_mod_event_profile_t_init not dispatchable */
	int (*mirror_ingress_set)(int,bcm_port_t,int);
	int (*mirror_init)(int);
	/* bcm_mirror_int_probe_header_t_init not dispatchable */
	int (*mirror_mode_get)(int,int *);
	int (*mirror_mode_set)(int,int);
	int (*mirror_multi_dip_group_ipv4_create)(int,bcm_mirror_multi_dip_entry_num_t,bcm_ip_t *,bcm_mirror_multi_dip_group_t *);
	int (*mirror_multi_dip_group_ipv4_destroy)(int,bcm_mirror_multi_dip_group_t);
	int (*mirror_multi_dip_group_ipv4_get)(int,bcm_mirror_multi_dip_group_t,bcm_ip_t *,int *);
	int (*mirror_multi_dip_group_ipv4_get_all)(int,bcm_mirror_multi_dip_group_t *,int *);
	int (*mirror_multi_dip_group_ipv6_create)(int,bcm_mirror_multi_dip_entry_num_t,bcm_ip6_t *,bcm_mirror_multi_dip_group_t *);
	int (*mirror_multi_dip_group_ipv6_destroy)(int,bcm_mirror_multi_dip_group_t);
	int (*mirror_multi_dip_group_ipv6_get)(int,bcm_mirror_multi_dip_group_t,bcm_ip6_t *,int *);
	int (*mirror_multi_dip_group_ipv6_get_all)(int,bcm_mirror_multi_dip_group_t *,int *);
	/* bcm_mirror_options_t_init not dispatchable */
	int (*mirror_payload_zero_control_multi_get)(int,bcm_mirror_payload_zero_info_t *,int);
	int (*mirror_payload_zero_control_multi_set)(int,bcm_mirror_payload_zero_info_t *,int);
	/* bcm_mirror_payload_zero_info_t_init not dispatchable */
	/* bcm_mirror_payload_zero_offsets_t_init not dispatchable */
	int (*mirror_payload_zero_profile_create)(int,bcm_mirror_payload_zero_offsets_t *,uint32,uint32 *);
	int (*mirror_payload_zero_profile_destroy)(int,uint32,uint32);
	/* bcm_mirror_pkt_header_updates_t_init not dispatchable */
	int (*mirror_port_dest_add)(int,bcm_port_t,uint32,bcm_gport_t);
	int (*mirror_port_dest_delete)(int,bcm_port_t,uint32,bcm_gport_t);
	int (*mirror_port_dest_delete_all)(int,bcm_port_t,uint32);
	int (*mirror_port_dest_get)(int,bcm_port_t,uint32,int,bcm_gport_t *,int *);
	int (*mirror_port_destination_add)(int,bcm_port_t,uint32,bcm_gport_t,bcm_mirror_options_t);
	int (*mirror_port_destination_get)(int,bcm_port_t,uint32,int,bcm_gport_t *,int *,bcm_mirror_options_t *);
	int (*mirror_port_get)(int,bcm_port_t,bcm_module_t *,bcm_port_t *,uint32 *);
	int (*mirror_port_info_get)(int,bcm_port_t,uint32,bcm_mirror_port_info_t *);
	int (*mirror_port_info_set)(int,bcm_port_t,uint32,bcm_mirror_port_info_t *);
	/* bcm_mirror_port_info_t_init not dispatchable */
	int (*mirror_port_set)(int,bcm_port_t,bcm_module_t,bcm_port_t,uint32);
	int (*mirror_port_to_rcy_port_map_get)(int,uint32,bcm_port_t,bcm_mirror_port_to_rcy_map_info_t *);
	int (*mirror_port_to_rcy_port_map_set)(int,uint32,bcm_port_t,bcm_mirror_port_to_rcy_map_info_t *);
	int (*mirror_port_vlan_dest_add)(int,bcm_port_t,bcm_vlan_t,uint32,bcm_gport_t);
	int (*mirror_port_vlan_dest_delete)(int,bcm_port_t,bcm_vlan_t,uint32,bcm_gport_t);
	int (*mirror_port_vlan_dest_delete_all)(int,bcm_port_t,bcm_vlan_t,uint32);
	int (*mirror_port_vlan_dest_get)(int,bcm_port_t,bcm_vlan_t,uint32,uint32,bcm_gport_t *,uint32 *);
	int (*mirror_port_vlan_destination_add)(int,bcm_port_t,bcm_vlan_t,uint32,bcm_gport_t,bcm_mirror_options_t);
	int (*mirror_port_vlan_destination_get)(int,bcm_port_t,bcm_vlan_t,uint32,uint32,bcm_gport_t *,uint32 *,bcm_mirror_options_t *);
	int (*mirror_port_vlan_get)(int,bcm_port_t,bcm_vlan_t,bcm_gport_t *,uint32 *);
	int (*mirror_port_vlan_set)(int,bcm_port_t,bcm_vlan_t,bcm_gport_t,uint32);
	int (*mirror_sample_profile_create)(int,uint32,bcm_mirror_sample_type_t,int *);
	int (*mirror_sample_profile_destroy)(int,bcm_mirror_sample_type_t,int);
	int (*mirror_sample_profile_get)(int,bcm_mirror_sample_type_t,int,bcm_mirror_sample_profile_t *);
	int (*mirror_sample_profile_set)(int,bcm_mirror_sample_type_t,int,bcm_mirror_sample_profile_t *);
	/* bcm_mirror_sample_profile_t_init not dispatchable */
	int (*mirror_sample_stat_attach)(int,bcm_mirror_sample_type_t,uint32);
	int (*mirror_sample_stat_detach)(int,bcm_mirror_sample_type_t,uint32);
	int (*mirror_source_dest_add)(int,bcm_mirror_source_t *,bcm_gport_t);
	int (*mirror_source_dest_delete)(int,bcm_mirror_source_t *,bcm_gport_t);
	int (*mirror_source_dest_delete_all)(int,bcm_mirror_source_t *);
	int (*mirror_source_dest_get_all)(int,bcm_mirror_source_t *,int,bcm_gport_t *,int *);
	/* bcm_mirror_source_t_init not dispatchable */
	int (*mirror_stat_get)(int,bcm_mirror_stat_object_t *,bcm_mirror_stat_t,uint64 *);
	/* bcm_mirror_stat_object_t_init not dispatchable */
	int (*mirror_stat_set)(int,bcm_mirror_stat_object_t *,bcm_mirror_stat_t,uint64);
	int (*mirror_stat_sync_get)(int,bcm_mirror_stat_object_t *,bcm_mirror_stat_t,uint64 *);
	int (*mirror_to_get)(int,bcm_port_t *);
	int (*mirror_to_pbmp_get)(int,bcm_port_t,bcm_pbmp_t *);
	int (*mirror_to_pbmp_set)(int,bcm_port_t,bcm_pbmp_t);
	int (*mirror_to_set)(int,bcm_port_t);
	int (*mirror_truncate_length_profile_create)(int,uint32,int *,bcm_mirror_truncate_length_profile_t *);
	int (*mirror_truncate_length_profile_destroy)(int,int);
	int (*mirror_truncate_length_profile_get)(int,int,bcm_mirror_truncate_length_profile_t *);
	/* bcm_mirror_truncate_length_profile_t_init not dispatchable */
	int (*mirror_vlan_get)(int,bcm_port_t,uint16 *,uint16 *);
	int (*mirror_vlan_set)(int,bcm_port_t,uint16,uint16);
	/* bcm_module_name not dispatchable */
#ifdef	INCLUDE_L3
	int (*mpls_cleanup)(int);
	/* bcm_mpls_control_pkt_action_t_init not dispatchable */
	int (*mpls_control_pkt_add)(int,uint32,bcm_mpls_control_pkt_match_t *,bcm_mpls_control_pkt_action_t *);
	int (*mpls_control_pkt_delete)(int,bcm_mpls_control_pkt_match_t *);
	int (*mpls_control_pkt_delete_all)(int);
	int (*mpls_control_pkt_get)(int,bcm_mpls_control_pkt_match_t *,bcm_mpls_control_pkt_action_t *);
	/* bcm_mpls_control_pkt_match_t_init not dispatchable */
	int (*mpls_control_pkt_traverse)(int,bcm_mpls_control_pkt_traverse_cb,void *);
	/* bcm_mpls_egress_label_t_init not dispatchable */
	int (*mpls_entropy_identifier_add)(int,uint32,bcm_mpls_entropy_identifier_t *);
	int (*mpls_entropy_identifier_delete)(int,bcm_mpls_entropy_identifier_t *);
	int (*mpls_entropy_identifier_delete_all)(int);
	int (*mpls_entropy_identifier_get)(int,bcm_mpls_entropy_identifier_t *);
	/* bcm_mpls_entropy_identifier_t_init not dispatchable */
	int (*mpls_entropy_identifier_traverse)(int,bcm_mpls_entropy_identifier_traverse_cb,void *);
	int (*mpls_esi_encap_add)(int,bcm_mpls_esi_info_t *);
	int (*mpls_esi_encap_delete)(int,bcm_mpls_esi_info_t *);
	int (*mpls_esi_encap_get)(int,bcm_mpls_esi_info_t *);
	int (*mpls_esi_encap_traverse)(int,bcm_mpls_esi_encap_traverse_cb,void *);
	/* bcm_mpls_esi_info_t_init not dispatchable */
	int (*mpls_exp_map_create)(int,uint32,int *);
	int (*mpls_exp_map_destroy)(int,int);
	int (*mpls_exp_map_get)(int,int,bcm_mpls_exp_map_t *);
	int (*mpls_exp_map_set)(int,int,bcm_mpls_exp_map_t *);
	/* bcm_mpls_exp_map_t_init not dispatchable */
	int (*mpls_init)(int);
	int (*mpls_label_flexctr_object_get)(int,bcm_mpls_label_t,bcm_gport_t,uint32 *);
	int (*mpls_label_flexctr_object_set)(int,bcm_mpls_label_t,bcm_gport_t,uint32);
	int (*mpls_label_stat_attach)(int,bcm_mpls_label_t,bcm_gport_t,uint32);
	int (*mpls_label_stat_clear)(int,bcm_mpls_label_t,bcm_gport_t,bcm_mpls_stat_t);
	int (*mpls_label_stat_counter_get)(int,bcm_mpls_label_t,bcm_gport_t,bcm_mpls_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mpls_label_stat_counter_set)(int,bcm_mpls_label_t,bcm_gport_t,bcm_mpls_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mpls_label_stat_counter_sync_get)(int,bcm_mpls_label_t,bcm_gport_t,bcm_mpls_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mpls_label_stat_detach)(int,bcm_mpls_label_t,bcm_gport_t);
	int (*mpls_label_stat_enable_set)(int,bcm_mpls_label_t,bcm_gport_t,int);
	int (*mpls_label_stat_get)(int,bcm_mpls_label_t,bcm_gport_t,bcm_mpls_stat_t,uint64 *);
	int (*mpls_label_stat_get32)(int,bcm_mpls_label_t,bcm_gport_t,bcm_mpls_stat_t,uint32 *);
	int (*mpls_label_stat_id_get)(int,bcm_mpls_label_t,bcm_gport_t,bcm_mpls_stat_t,uint32 *);
	int (*mpls_label_stat_sync_get)(int,bcm_mpls_label_t,bcm_gport_t,bcm_mpls_stat_t,uint64 *);
	int (*mpls_label_stat_sync_get32)(int,bcm_mpls_label_t,bcm_gport_t,bcm_mpls_stat_t,uint32 *);
	int (*mpls_port_add)(int,bcm_vpn_t,bcm_mpls_port_t *);
	int (*mpls_port_delete)(int,bcm_vpn_t,bcm_gport_t);
	int (*mpls_port_delete_all)(int,bcm_vpn_t);
	int (*mpls_port_get)(int,bcm_vpn_t,bcm_mpls_port_t *);
	int (*mpls_port_get_all)(int,bcm_vpn_t,int,bcm_mpls_port_t *,int *);
	int (*mpls_port_stat_attach)(int,bcm_vpn_t,bcm_gport_t,uint32);
	int (*mpls_port_stat_counter_get)(int,bcm_vpn_t,bcm_gport_t,bcm_mpls_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mpls_port_stat_counter_set)(int,bcm_vpn_t,bcm_gport_t,bcm_mpls_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mpls_port_stat_counter_sync_get)(int,bcm_vpn_t,bcm_gport_t,bcm_mpls_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mpls_port_stat_detach)(int,bcm_vpn_t,bcm_gport_t);
	int (*mpls_port_stat_enable_set)(int,bcm_gport_t,int);
	int (*mpls_port_stat_get)(int,bcm_gport_t,bcm_cos_t,bcm_mpls_port_stat_t,uint64 *);
	int (*mpls_port_stat_get32)(int,bcm_gport_t,bcm_cos_t,bcm_mpls_port_stat_t,uint32 *);
	int (*mpls_port_stat_id_get)(int,bcm_vpn_t,bcm_gport_t,bcm_mpls_stat_t,uint32 *);
	int (*mpls_port_stat_set)(int,bcm_gport_t,bcm_cos_t,bcm_mpls_port_stat_t,uint64);
	int (*mpls_port_stat_set32)(int,bcm_gport_t,bcm_cos_t,bcm_mpls_port_stat_t,uint32);
	/* bcm_mpls_port_t_init not dispatchable */
	int (*mpls_port_traverse)(int,bcm_mpls_port_traverse_info_t,bcm_mpls_port_traverse_cb,void *);
	int (*mpls_range_action_add)(int,bcm_mpls_label_t,bcm_mpls_label_t,bcm_mpls_range_action_t *);
	int (*mpls_range_action_get)(int,bcm_mpls_label_t,bcm_mpls_label_t,bcm_mpls_range_action_t *);
	int (*mpls_range_action_remove)(int,bcm_mpls_label_t,bcm_mpls_label_t);
	/* bcm_mpls_range_action_t_init not dispatchable */
	int (*mpls_special_label_egress_add)(int,bcm_mpls_special_label_type_t,bcm_mpls_special_label_t);
	int (*mpls_special_label_egress_delete)(int,bcm_mpls_special_label_type_t,bcm_mpls_special_label_t);
	int (*mpls_special_label_egress_delete_all)(int);
	int (*mpls_special_label_egress_get)(int,bcm_mpls_special_label_type_t,bcm_mpls_special_label_t *);
	int (*mpls_special_label_egress_traverse)(int,bcm_mpls_special_label_egress_traverse_cb,void *);
	int (*mpls_special_label_identifier_add)(int,bcm_mpls_special_label_type_t,bcm_mpls_special_label_t);
	int (*mpls_special_label_identifier_delete)(int,bcm_mpls_special_label_type_t,bcm_mpls_special_label_t);
	int (*mpls_special_label_identifier_delete_all)(int);
	int (*mpls_special_label_identifier_get)(int,bcm_mpls_special_label_type_t,bcm_mpls_special_label_t *);
	int (*mpls_special_label_identifier_traverse)(int,bcm_mpls_special_label_identifier_traverse_cb,void *);
	int (*mpls_special_label_push_action_get)(int,bcm_mpls_special_label_push_element_t *,int *);
	int (*mpls_special_label_push_action_set)(int,bcm_mpls_special_label_push_element_t *,int);
	/* bcm_mpls_special_label_push_element_t_init not dispatchable */
	/* bcm_mpls_special_label_t_init not dispatchable */
	/* bcm_mpls_stat_info_t_init not dispatchable */
	int (*mpls_tunnel_encap_create)(int,uint32,bcm_mpls_tunnel_encap_t *);
	int (*mpls_tunnel_encap_destroy)(int,bcm_gport_t);
	int (*mpls_tunnel_encap_destroy_all)(int);
	int (*mpls_tunnel_encap_get)(int,bcm_mpls_tunnel_encap_t *);
	/* bcm_mpls_tunnel_encap_t_init not dispatchable */
	int (*mpls_tunnel_initiator_clear)(int,bcm_if_t);
	int (*mpls_tunnel_initiator_clear_all)(int);
	int (*mpls_tunnel_initiator_create)(int,bcm_if_t,int,bcm_mpls_egress_label_t *);
	int (*mpls_tunnel_initiator_get)(int,bcm_if_t,int,bcm_mpls_egress_label_t *,int *);
	int (*mpls_tunnel_initiator_set)(int,bcm_if_t,int,bcm_mpls_egress_label_t *);
	int (*mpls_tunnel_initiator_traverse)(int,bcm_mpls_tunnel_initiator_traverse_info_t *,bcm_mpls_tunnel_initiator_traverse_cb,void *);
	int (*mpls_tunnel_label_counter_id_detach)(int,bcm_if_t,uint32);
	int (*mpls_tunnel_label_counter_id_num_get)(int,bcm_if_t,int *,uint32 *);
	int (*mpls_tunnel_label_counter_id_stat_get)(int,bcm_if_t,uint32,bcm_mpls_stat_info_t *);
	int (*mpls_tunnel_label_counter_id_stat_set)(int,bcm_if_t,uint32,bcm_mpls_stat_info_t *);
	int (*mpls_tunnel_label_counter_id_stat_sync_get)(int,bcm_if_t,uint32,bcm_mpls_stat_info_t *);
	int (*mpls_tunnel_stat_attach)(int,bcm_if_t,uint32);
	int (*mpls_tunnel_stat_counter_get)(int,bcm_if_t,bcm_mpls_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mpls_tunnel_stat_counter_set)(int,bcm_if_t,bcm_mpls_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mpls_tunnel_stat_counter_sync_get)(int,bcm_if_t,bcm_mpls_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*mpls_tunnel_stat_detach)(int,bcm_if_t);
	int (*mpls_tunnel_stat_id_get)(int,bcm_if_t,bcm_mpls_stat_t,uint32 *);
	int (*mpls_tunnel_switch_add)(int,bcm_mpls_tunnel_switch_t *);
	int (*mpls_tunnel_switch_create)(int,bcm_mpls_tunnel_switch_t *);
	int (*mpls_tunnel_switch_delete)(int,bcm_mpls_tunnel_switch_t *);
	int (*mpls_tunnel_switch_delete_all)(int);
	int (*mpls_tunnel_switch_get)(int,bcm_mpls_tunnel_switch_t *);
	/* bcm_mpls_tunnel_switch_t_init not dispatchable */
	int (*mpls_tunnel_switch_traverse)(int,bcm_mpls_tunnel_switch_traverse_cb,void *);
	/* bcm_mpls_vpn_config_t_init not dispatchable */
	int (*mpls_vpn_id_create)(int,bcm_mpls_vpn_config_t *);
	int (*mpls_vpn_id_destroy)(int,bcm_vpn_t);
	int (*mpls_vpn_id_destroy_all)(int);
	int (*mpls_vpn_id_get)(int,bcm_vpn_t,bcm_mpls_vpn_config_t *);
	int (*mpls_vpn_traverse)(int,bcm_mpls_vpn_traverse_cb,void *);
#endif	/* INCLUDE_L3 */
	int (*multicast_add)(int,bcm_multicast_t,uint32,int,bcm_multicast_replication_t *);
	int (*multicast_control_get)(int,bcm_multicast_t,bcm_multicast_control_t,int *);
	int (*multicast_control_set)(int,bcm_multicast_t,bcm_multicast_control_t,int);
	int (*multicast_create)(int,uint32,bcm_multicast_t *);
	int (*multicast_delete)(int,bcm_multicast_t,uint32,int,bcm_multicast_replication_t *);
	int (*multicast_destroy)(int,bcm_multicast_t);
	int (*multicast_detach)(int);
	int (*multicast_egress_add)(int,bcm_multicast_t,bcm_gport_t,bcm_if_t);
	int (*multicast_egress_delete)(int,bcm_multicast_t,bcm_gport_t,bcm_if_t);
	int (*multicast_egress_delete_all)(int,bcm_multicast_t);
	int (*multicast_egress_get)(int,bcm_multicast_t,int,bcm_gport_t *,bcm_if_t *,int *);
	int (*multicast_egress_object_encap_get)(int,bcm_multicast_t,bcm_if_t,bcm_if_t *);
	int (*multicast_egress_set)(int,bcm_multicast_t,int,bcm_gport_t *,bcm_if_t *);
	int (*multicast_egress_subscriber_add)(int,bcm_multicast_t,bcm_gport_t,bcm_if_t,bcm_gport_t);
	int (*multicast_egress_subscriber_delete)(int,bcm_multicast_t,bcm_gport_t,bcm_if_t,bcm_gport_t);
	int (*multicast_egress_subscriber_get)(int,bcm_multicast_t,int,bcm_gport_t *,bcm_if_t *,bcm_gport_t *,int *);
	int (*multicast_egress_subscriber_qos_map_get)(int,bcm_multicast_t,bcm_gport_t,bcm_gport_t,int *);
	int (*multicast_egress_subscriber_qos_map_set)(int,bcm_multicast_t,bcm_gport_t,bcm_gport_t,int);
	int (*multicast_egress_subscriber_set)(int,bcm_multicast_t,int,bcm_gport_t *,bcm_if_t *,bcm_gport_t *);
	int (*multicast_encap_create)(int,bcm_multicast_encap_t *,bcm_if_t *);
	int (*multicast_encap_destroy)(int,bcm_if_t);
	int (*multicast_encap_extension_create)(int,uint32,bcm_if_t *,int,bcm_if_t *);
	int (*multicast_encap_extension_delete_all)(int);
	int (*multicast_encap_extension_destroy)(int,uint32,bcm_if_t);
	int (*multicast_encap_extension_get)(int,uint32,bcm_if_t,int,bcm_if_t *,int *);
	int (*multicast_encap_extension_traverse)(int,bcm_multicast_encap_extension_traverse_cb,void *);
	int (*multicast_encap_get)(int,bcm_if_t,bcm_multicast_encap_t *);
	/* bcm_multicast_encap_t_init not dispatchable */
	int (*multicast_extender_encap_get)(int,bcm_multicast_t,bcm_gport_t,bcm_gport_t,bcm_if_t *);
	int (*multicast_fabric_distribution_get)(int,bcm_multicast_t,bcm_fabric_distribution_t *);
	int (*multicast_fabric_distribution_set)(int,bcm_multicast_t,bcm_fabric_distribution_t);
	int (*multicast_get)(int,bcm_multicast_t,uint32,int,bcm_multicast_replication_t *,int *);
	int (*multicast_group_destroy)(int,uint32,bcm_multicast_t);
	int (*multicast_group_free_range_get)(int,uint32,bcm_multicast_t *,bcm_multicast_t *);
	int (*multicast_group_get)(int,bcm_multicast_t,uint32 *);
	int (*multicast_group_is_free)(int,bcm_multicast_t);
	int (*multicast_group_traverse)(int,bcm_multicast_group_traverse_cb_t,uint32,void *);
	int (*multicast_ingress_add)(int,bcm_multicast_t,bcm_gport_t,bcm_if_t);
	int (*multicast_ingress_delete)(int,bcm_multicast_t,bcm_gport_t,bcm_if_t);
	int (*multicast_ingress_delete_all)(int,bcm_multicast_t);
	int (*multicast_ingress_get)(int,bcm_multicast_t,int,bcm_gport_t *,bcm_if_t *,int *);
	int (*multicast_ingress_set)(int,bcm_multicast_t,int,bcm_gport_t *,bcm_if_t *);
	int (*multicast_init)(int);
	int (*multicast_l2_encap_get)(int,bcm_multicast_t,bcm_gport_t,bcm_vlan_t,bcm_if_t *);
	int (*multicast_l2gre_encap_get)(int,bcm_multicast_t,bcm_gport_t,bcm_gport_t,bcm_if_t *);
	int (*multicast_l3_encap_get)(int,bcm_multicast_t,bcm_gport_t,bcm_if_t,bcm_if_t *);
	int (*multicast_mac_encap_get)(int,bcm_multicast_t,bcm_gport_t,bcm_gport_t,bcm_if_t *);
	int (*multicast_mim_encap_get)(int,bcm_multicast_t,bcm_gport_t,bcm_gport_t,bcm_if_t *);
	int (*multicast_multi_alloc)(int,bcm_multicast_multi_info_t,bcm_multicast_t *);
	int (*multicast_multi_free)(int,bcm_multicast_t);
	/* bcm_multicast_multi_info_t_init not dispatchable */
	int (*multicast_niv_encap_get)(int,bcm_multicast_t,bcm_gport_t,bcm_gport_t,bcm_if_t *);
	int (*multicast_repl_get)(int,int,bcm_port_t,bcm_vlan_vector_t);
	int (*multicast_repl_set)(int,int,bcm_port_t,bcm_vlan_vector_t);
	/* bcm_multicast_replication_t_init not dispatchable */
	int (*multicast_set)(int,bcm_multicast_t,uint32,int,bcm_multicast_replication_t *);
	int (*multicast_stat_control_get)(int,bcm_core_t,uint32,int,bcm_multicast_stat_control_type_t,int *);
	int (*multicast_stat_control_set)(int,bcm_core_t,uint32,int,bcm_multicast_stat_control_type_t,int);
	int (*multicast_subport_encap_get)(int,bcm_multicast_t,bcm_gport_t,bcm_gport_t,bcm_if_t *);
	int (*multicast_trill_encap_get)(int,bcm_multicast_t,bcm_gport_t,bcm_if_t,bcm_if_t *);
	int (*multicast_vlan_encap_get)(int,bcm_multicast_t,bcm_gport_t,bcm_gport_t,bcm_if_t *);
	int (*multicast_vpls_encap_get)(int,bcm_multicast_t,bcm_gport_t,bcm_gport_t,bcm_if_t *);
	int (*multicast_vxlan_encap_get)(int,bcm_multicast_t,bcm_gport_t,bcm_gport_t,bcm_if_t *);
	int (*multicast_wlan_encap_get)(int,bcm_multicast_t,bcm_gport_t,bcm_gport_t,bcm_if_t *);
#ifdef	INCLUDE_L3
	int (*niv_cleanup)(int);
	int (*niv_egress_add)(int,bcm_gport_t,bcm_niv_egress_t *);
	int (*niv_egress_delete)(int,bcm_gport_t,bcm_niv_egress_t *);
	int (*niv_egress_delete_all)(int,bcm_gport_t);
	int (*niv_egress_get)(int,bcm_gport_t,int,bcm_niv_egress_t *,int *);
	int (*niv_egress_set)(int,bcm_gport_t,int,bcm_niv_egress_t *);
	/* bcm_niv_egress_t_init not dispatchable */
	int (*niv_forward_add)(int,bcm_niv_forward_t *);
	int (*niv_forward_delete)(int,bcm_niv_forward_t *);
	int (*niv_forward_delete_all)(int);
	int (*niv_forward_get)(int,bcm_niv_forward_t *);
	/* bcm_niv_forward_t_init not dispatchable */
	int (*niv_forward_traverse)(int,bcm_niv_forward_traverse_cb,void *);
	int (*niv_init)(int);
	int (*niv_port_add)(int,bcm_niv_port_t *);
	int (*niv_port_delete)(int,bcm_gport_t);
	int (*niv_port_delete_all)(int);
	int (*niv_port_get)(int,bcm_niv_port_t *);
	/* bcm_niv_port_t_init not dispatchable */
	int (*niv_port_traverse)(int,bcm_niv_port_traverse_cb,void *);
	/* bcm_oam_action_key_t_init not dispatchable */
	/* bcm_oam_action_result_t_init not dispatchable */
#endif	/* INCLUDE_L3 */
	int (*oam_ais_add)(int,bcm_oam_ais_t *);
	int (*oam_ais_delete)(int,bcm_oam_ais_t *);
	int (*oam_ais_get)(int,bcm_oam_ais_t *);
	/* bcm_oam_ais_t_init not dispatchable */
	int (*oam_control_get)(int,bcm_oam_control_type_t,uint64 *);
	int (*oam_control_indexed_get)(int,bcm_oam_control_key_t,uint64 *);
	int (*oam_control_indexed_set)(int,bcm_oam_control_key_t,uint64);
	int (*oam_control_set)(int,bcm_oam_control_type_t,uint64);
	int (*oam_csf_add)(int,bcm_oam_csf_t *);
	int (*oam_csf_delete)(int,bcm_oam_csf_t *);
	int (*oam_csf_get)(int,bcm_oam_csf_t *);
	/* bcm_oam_csf_t_init not dispatchable */
	int (*oam_delay_add)(int,bcm_oam_delay_t *);
	int (*oam_delay_delete)(int,bcm_oam_delay_t *);
	int (*oam_delay_get)(int,bcm_oam_delay_t *);
	/* bcm_oam_delay_t_init not dispatchable */
	int (*oam_detach)(int);
	int (*oam_endpoint_action_set)(int,bcm_oam_endpoint_t,bcm_oam_endpoint_action_t *);
	/* bcm_oam_endpoint_action_t_init not dispatchable */
	int (*oam_endpoint_create)(int,bcm_oam_endpoint_info_t *);
	int (*oam_endpoint_destroy)(int,bcm_oam_endpoint_t);
	int (*oam_endpoint_destroy_all)(int,bcm_oam_group_t);
	int (*oam_endpoint_egress_intf_egress_attach)(int,bcm_oam_endpoint_t,bcm_if_t);
	int (*oam_endpoint_egress_intf_egress_attach_get)(int,bcm_oam_endpoint_t,int,bcm_if_t *,int *);
	int (*oam_endpoint_egress_intf_egress_detach)(int,bcm_oam_endpoint_t,bcm_if_t);
	int (*oam_endpoint_faults_multi_get)(int,uint32,bcm_oam_protocol_type_t,uint32,bcm_oam_endpoint_fault_t *,uint32 *);
	int (*oam_endpoint_get)(int,bcm_oam_endpoint_t,bcm_oam_endpoint_info_t *);
	int (*oam_endpoint_gport_egress_attach)(int,bcm_oam_endpoint_t,bcm_gport_t);
	int (*oam_endpoint_gport_egress_attach_get)(int,bcm_oam_endpoint_t,int,bcm_gport_t *,int *);
	int (*oam_endpoint_gport_egress_detach)(int,bcm_oam_endpoint_t,bcm_gport_t);
	/* bcm_oam_endpoint_info_t_init not dispatchable */
	int (*oam_endpoint_traverse)(int,bcm_oam_group_t,bcm_oam_endpoint_traverse_cb,void *);
	int (*oam_event_register)(int,bcm_oam_event_types_t,bcm_oam_event_cb,void *);
	int (*oam_event_unregister)(int,bcm_oam_event_types_t,bcm_oam_event_cb);
	int (*oam_group_create)(int,bcm_oam_group_info_t *);
	int (*oam_group_destroy)(int,bcm_oam_group_t);
	int (*oam_group_destroy_all)(int);
	int (*oam_group_get)(int,bcm_oam_group_t,bcm_oam_group_info_t *);
	/* bcm_oam_group_info_t_init not dispatchable */
	int (*oam_group_traverse)(int,bcm_oam_group_traverse_cb,void *);
	int (*oam_init)(int);
	int (*oam_lif_profile_get)(int,uint32,bcm_gport_t,bcm_oam_profile_t *,bcm_oam_profile_t *);
	int (*oam_lif_profile_set)(int,uint32,bcm_gport_t,bcm_oam_profile_t,bcm_oam_profile_t);
	int (*oam_lookup_enable_get)(int,bcm_oam_lookup_type_t,bcm_oam_conditions_t *);
	int (*oam_lookup_enable_multi_set)(int,bcm_oam_lookup_types_t,bcm_oam_conditions_t,int);
	int (*oam_lookup_enable_set)(int,bcm_oam_lookup_type_t,bcm_oam_condition_t,int);
	int (*oam_loopback_add)(int,bcm_oam_loopback_t *);
	int (*oam_loopback_delete)(int,bcm_oam_loopback_t *);
	int (*oam_loopback_get)(int,bcm_oam_loopback_t *);
	/* bcm_oam_loopback_t_init not dispatchable */
	int (*oam_loss_add)(int,bcm_oam_loss_t *);
	int (*oam_loss_delete)(int,bcm_oam_loss_t *);
	int (*oam_loss_get)(int,bcm_oam_loss_t *);
	/* bcm_oam_loss_t_init not dispatchable */
	int (*oam_mpls_tp_channel_type_rx_delete)(int,bcm_oam_mpls_tp_channel_type_t,int,int *);
	int (*oam_mpls_tp_channel_type_rx_get)(int,bcm_oam_mpls_tp_channel_type_t,int,int *,int *);
	int (*oam_mpls_tp_channel_type_rx_set)(int,bcm_oam_mpls_tp_channel_type_t,int,int *);
	int (*oam_mpls_tp_channel_type_tx_delete)(int,bcm_oam_mpls_tp_channel_type_t,int);
	int (*oam_mpls_tp_channel_type_tx_get)(int,bcm_oam_mpls_tp_channel_type_t,int *);
	int (*oam_mpls_tp_channel_type_tx_set)(int,bcm_oam_mpls_tp_channel_type_t,int);
	int (*oam_opcode_group_get)(int,bcm_oam_protocol_type_t,bcm_oam_opcode_t,uint8 *);
	int (*oam_opcode_group_set)(int,bcm_oam_protocol_type_t,bcm_oam_opcodes_t,uint8);
	int (*oam_opcode_map_get)(int,int,int *);
	int (*oam_opcode_map_set)(int,int,int);
	int (*oam_opcodes_count_profile_create)(int,uint8 *);
	int (*oam_opcodes_count_profile_delete)(int,uint8);
	int (*oam_opcodes_count_profile_get)(int,uint8,uint8,bcm_oam_opcodes_t *);
	int (*oam_opcodes_count_profile_set)(int,uint8,uint8,bcm_oam_opcodes_t *);
	/* bcm_oam_performance_event_data_t_init not dispatchable */
	int (*oam_performance_event_register)(int,bcm_oam_event_types_t,bcm_oam_performance_event_cb,void *);
	int (*oam_performance_event_unregister)(int,bcm_oam_event_types_t,bcm_oam_performance_event_cb);
	int (*oam_pm_event_register)(int,bcm_oam_event_types_t,bcm_oam_pm_event_cb,void *);
	int (*oam_pm_event_unregister)(int,bcm_oam_event_types_t,bcm_oam_pm_event_cb);
	int (*oam_pm_profile_attach)(int,bcm_oam_endpoint_t,int);
	int (*oam_pm_profile_attach_get)(int,bcm_oam_endpoint_t,int *);
	int (*oam_pm_profile_create)(int,bcm_oam_pm_profile_info_t *);
	int (*oam_pm_profile_delete)(int,bcm_oam_pm_profile_t);
	int (*oam_pm_profile_delete_all)(int);
	int (*oam_pm_profile_detach)(int,bcm_oam_endpoint_t,int);
	int (*oam_pm_profile_get)(int,bcm_oam_pm_profile_info_t *);
	int (*oam_pm_profile_traverse)(int,bcm_oam_pm_profile_traverse_cb,void *);
	int (*oam_pm_raw_data_read_done)(int,bcm_oam_event_types_t,uint32);
	int (*oam_pm_stats_get)(int,bcm_oam_endpoint_t,bcm_oam_pm_stats_t *);
	int (*oam_profile_action_get)(int,uint32,bcm_oam_profile_t,bcm_oam_action_key_t *,bcm_oam_action_result_t *);
	int (*oam_profile_action_set)(int,uint32,bcm_oam_profile_t,bcm_oam_action_key_t *,bcm_oam_action_result_t *);
	int (*oam_profile_create)(int,uint32,bcm_oam_profile_type_t,bcm_oam_profile_t *);
	int (*oam_profile_delete)(int,uint32,bcm_oam_profile_t);
	int (*oam_profile_id_get_by_type)(int,uint8,bcm_oam_profile_type_t,uint32 *,bcm_oam_profile_t *);
	int (*oam_protection_packet_header_get)(int,bcm_pkt_blk_t *);
	int (*oam_protection_packet_header_set)(int,bcm_pkt_blk_t *);
	int (*oam_psc_add)(int,bcm_oam_psc_t *);
	int (*oam_psc_delete)(int,bcm_oam_psc_t *);
	int (*oam_psc_get)(int,bcm_oam_psc_t *);
	/* bcm_oam_psc_t_init not dispatchable */
	int (*oam_pw_status_add)(int,bcm_oam_pw_status_t *);
	int (*oam_pw_status_delete)(int,bcm_oam_pw_status_t *);
	int (*oam_pw_status_get)(int,bcm_oam_pw_status_t *);
	/* bcm_oam_pw_status_t_init not dispatchable */
	int (*oam_reflector_encap_create)(int,uint32,bcm_if_t *);
	int (*oam_reflector_encap_destroy)(int,uint32,bcm_if_t);
	int (*oam_sd_sf_detection_add)(int,bcm_oam_sd_sf_detection_t *);
	int (*oam_sd_sf_detection_delete)(int,bcm_oam_sd_sf_detection_t *);
	int (*oam_sd_sf_detection_get)(int,bcm_oam_sd_sf_detection_t *);
	/* bcm_oam_sd_sf_detection_t_init not dispatchable */
	int (*oam_tod_leap_control_get)(int,bcm_oam_timestamp_format_t,bcm_oam_tod_leap_control_t *);
	int (*oam_tod_leap_control_set)(int,bcm_oam_timestamp_format_t,bcm_oam_tod_leap_control_t);
	int (*oam_trunk_ports_add)(int,bcm_gport_t,int,bcm_gport_t *);
	int (*oam_trunk_ports_delete)(int,bcm_gport_t,int,bcm_gport_t *);
	int (*oam_trunk_ports_get)(int,bcm_gport_t,int,bcm_gport_t *,int *);
	int (*oam_tst_rx_add)(int,bcm_oam_tst_rx_t *);
	int (*oam_tst_rx_delete)(int,bcm_oam_tst_rx_t *);
	int (*oam_tst_rx_get)(int,bcm_oam_tst_rx_t *);
	/* bcm_oam_tst_rx_t_init not dispatchable */
	int (*oam_tst_tx_add)(int,bcm_oam_tst_tx_t *);
	int (*oam_tst_tx_delete)(int,bcm_oam_tst_tx_t *);
	int (*oam_tst_tx_get)(int,bcm_oam_tst_tx_t *);
	/* bcm_oam_tst_tx_t_init not dispatchable */
	int (*oam_upmep_cosq_get)(int,bcm_oam_upmep_pdu_type_t,bcm_cos_queue_t *);
	int (*oam_upmep_cosq_set)(int,bcm_oam_upmep_pdu_type_t,bcm_cos_queue_t);
	int (*oam_y_1711_alarm_add)(int,bcm_oam_y_1711_alarm_t *);
	int (*oam_y_1711_alarm_delete)(int,bcm_oam_y_1711_alarm_t *);
	int (*oam_y_1711_alarm_get)(int,bcm_oam_y_1711_alarm_t *);
	/* bcm_oam_y_1711_alarm_t_init not dispatchable */
	int (*obm_cb_register)(int,bcm_obm_callback_fn,void *);
	int (*obm_cb_unregister)(int,bcm_obm_callback_fn,void *);
	int (*obm_port_max_usage_mode_get)(int,bcm_port_t,bcm_obm_max_watermark_mode_t *);
	int (*obm_port_max_usage_mode_set)(int,bcm_port_t,bcm_obm_max_watermark_mode_t);
	int (*obm_port_pri_traffic_class_mapping_get)(int,bcm_port_t,bcm_obm_lookup_priority_type_t,int,bcm_obm_traffic_class_t *);
	int (*obm_port_pri_traffic_class_mapping_set)(int,bcm_port_t,bcm_obm_lookup_priority_type_t,int,bcm_obm_traffic_class_t);
	int (*obm_traffic_class_pfc_priority_mapping_get)(int,bcm_port_t,bcm_obm_traffic_class_t,int,int *,int *);
	int (*obm_traffic_class_pfc_priority_mapping_set)(int,bcm_port_t,bcm_obm_traffic_class_t,int,int *);
	int (*oob_fc_rx_config_get)(int,bcm_oob_fc_rx_intf_id_t,bcm_oob_fc_rx_config_t *,int,bcm_gport_t *,int *);
	int (*oob_fc_rx_config_set)(int,bcm_oob_fc_rx_intf_id_t,bcm_oob_fc_rx_config_t *,int,bcm_gport_t *);
	/* bcm_oob_fc_rx_config_t_init not dispatchable */
	int (*oob_fc_rx_port_offset_get)(int,bcm_oob_fc_rx_intf_id_t,bcm_gport_t,uint32 *);
	int (*oob_fc_rx_port_tc_mapping_get)(int,bcm_oob_fc_rx_intf_id_t,bcm_gport_t,uint32,uint32 *);
	int (*oob_fc_rx_port_tc_mapping_multi_get)(int,bcm_oob_fc_rx_intf_id_t,bcm_gport_t,int,uint32 *,uint32 *,int *);
	int (*oob_fc_rx_port_tc_mapping_multi_set)(int,bcm_oob_fc_rx_intf_id_t,bcm_gport_t,int,uint32 *,uint32 *);
	int (*oob_fc_rx_port_tc_mapping_set)(int,bcm_oob_fc_rx_intf_id_t,bcm_gport_t,uint32,uint32);
	int (*oob_fc_tx_config_get)(int,bcm_oob_fc_tx_config_t *);
	int (*oob_fc_tx_config_set)(int,bcm_oob_fc_tx_config_t *);
	/* bcm_oob_fc_tx_config_t_init not dispatchable */
	int (*oob_fc_tx_info_get)(int,bcm_oob_fc_tx_info_t *);
	/* bcm_oob_fc_tx_info_t_init not dispatchable */
	int (*oob_fc_tx_port_mapping_get)(int,int,int *,int *,int *);
	int (*oob_fc_tx_port_mapping_set)(int,int,int *,int *);
	/* bcm_oob_fc_tx_queue_config_t_init not dispatchable */
	int (*oob_fc_tx_queue_profile_get)(int,int,int,bcm_oob_fc_tx_queue_config_t *,int *);
	int (*oob_fc_tx_queue_profile_set)(int,int,int,bcm_oob_fc_tx_queue_config_t *);
	int (*oob_stats_config_get)(int,bcm_oob_stats_config_t *);
	int (*oob_stats_config_set)(int,bcm_oob_stats_config_t *);
	/* bcm_oob_stats_config_t_init not dispatchable */
	int (*oob_stats_pool_mapping_get)(int,int,uint8 *,bcm_service_pool_id_t *);
	int (*oob_stats_pool_mapping_multi_get)(int,int,int *,uint8 *,bcm_service_pool_id_t *,int *);
	int (*oob_stats_pool_mapping_multi_set)(int,int,int *,uint8 *,bcm_service_pool_id_t *);
	int (*oob_stats_pool_mapping_set)(int,int,uint8,bcm_service_pool_id_t);
	int (*oob_stats_queue_mapping_get)(int,int,bcm_gport_t *);
	int (*oob_stats_queue_mapping_multi_get)(int,int,int *,bcm_gport_t *,int *);
	int (*oob_stats_queue_mapping_multi_set)(int,int,int *,bcm_gport_t *);
	int (*oob_stats_queue_mapping_set)(int,int,bcm_gport_t);
	/* bcm_phy_config_t_init not dispatchable */
	/* bcm_pkt_alloc not dispatchable */
	/* bcm_pkt_blk_alloc not dispatchable */
	/* bcm_pkt_blk_free not dispatchable */
	/* bcm_pkt_blk_t_init not dispatchable */
	/* bcm_pkt_byte_index not dispatchable */
	/* bcm_pkt_clear not dispatchable */
	/* bcm_pkt_ecmp_grp_set not dispatchable */
	/* bcm_pkt_ecmp_member_set not dispatchable */
	/* bcm_pkt_flags_init not dispatchable */
	/* bcm_pkt_flags_len_setup not dispatchable */
	/* bcm_pkt_free not dispatchable */
	/* bcm_pkt_memcpy not dispatchable */
	/* bcm_pkt_nexthop_set not dispatchable */
	/* bcm_pkt_rx_alloc not dispatchable */
	/* bcm_pkt_rx_free not dispatchable */
	/* bcm_pkt_t_init not dispatchable */
	int (*pktio_alloc)(int,uint32,uint32,bcm_pktio_pkt_t **);
	int (*pktio_claim)(int,bcm_pktio_pkt_t *,bcm_pktio_pkt_t **);
	int (*pktio_cleanup)(int);
	int (*pktio_filter_create)(int,bcm_pktio_filter_t *);
	int (*pktio_filter_destroy)(int,int);
	int (*pktio_filter_get)(int,int,bcm_pktio_filter_t *);
	/* bcm_pktio_filter_t_init not dispatchable */
	int (*pktio_filter_traverse)(int,bcm_pktio_filter_traverse_cb_f,void *);
	int (*pktio_free)(int,bcm_pktio_pkt_t *);
	int (*pktio_init)(int);
	int (*pktio_netif_create)(int,bcm_pktio_netif_t *);
	int (*pktio_netif_destroy)(int,int);
	int (*pktio_netif_get)(int,int,bcm_pktio_netif_t *);
	int (*pktio_netif_link_status_set)(int,int,int);
	int (*pktio_netif_traverse)(int,bcm_pktio_netif_traverse_cb_f,void *);
	int (*pktio_pkt_data_get)(int,bcm_pktio_pkt_t *,void **,uint32 *);
	int (*pktio_pmd_fid_support_get)(int,bcm_pktio_fid_support_t *);
	int (*pktio_pmd_field_get)(int,bcm_pktio_pkt_t *,bcm_pktio_pmd_type_t,int,uint32 *);
	int (*pktio_pmd_field_set)(int,bcm_pktio_pkt_t *,bcm_pktio_pmd_type_t,int,uint32);
	int (*pktio_pmd_pkt_format_get)(int,int,uint32 *,int *,bcm_pktio_bitmap_t *);
	int (*pktio_pmd_reasons_get)(int,bcm_pktio_pkt_t *,bcm_pktio_reasons_t *);
	int (*pktio_pmd_set)(int,bcm_pktio_pkt_t *,bcm_pktio_txpmd_t *);
	/* bcm_pktio_pmd_t_init not dispatchable */
	int (*pktio_pull)(int,bcm_pktio_pkt_t *,uint32,void **);
	int (*pktio_push)(int,bcm_pktio_pkt_t *,uint32,void **);
	int (*pktio_put)(int,bcm_pktio_pkt_t *,uint32,void **);
	int (*pktio_raw_pmd_fid_support_get)(int,bcm_pktio_pmd_t *,bcm_pktio_fid_support_t *);
	int (*pktio_raw_pmd_field_get)(int,bcm_pktio_pmd_t *,bcm_pktio_pmd_type_t,int,uint32 *);
	int (*pktio_raw_pmd_field_set)(int,bcm_pktio_pmd_t *,bcm_pktio_pmd_type_t,int,uint32);
	int (*pktio_raw_pmd_reasons_get)(int,bcm_pktio_pmd_t *,bcm_pktio_reasons_t *);
	int (*pktio_raw_pmd_reasons_set)(int,bcm_pktio_pmd_t *,bcm_pktio_reasons_t *);
	int (*pktio_reserve)(int,bcm_pktio_pkt_t *,uint32,void **);
	int (*pktio_rx_register)(int,const char *,bcm_pktio_rx_cb_f,uint8,void *,uint32);
	int (*pktio_rx_unregister)(int,bcm_pktio_rx_cb_f,uint8);
	int (*pktio_trace_counter_get)(int,bcm_pktio_trace_data_t *,bcm_pktio_bitmap_t *);
	int (*pktio_trace_data_collect)(int,bcm_pktio_trace_pkt_t *,bcm_pktio_trace_data_t *);
	int (*pktio_trace_dop_data_collect)(int,bcm_port_t,uint32,bcm_pktio_trace_data_t *);
	int (*pktio_trace_drop_reasons_get)(int,bcm_pktio_trace_data_t *,bcm_pktio_bitmap_t *);
	int (*pktio_trace_field_get)(int,bcm_pktio_trace_data_t *,int,uint32 *);
	int (*pktio_trace_tx)(int,bcm_pktio_trace_pkt_t *);
	int (*pktio_trim)(int,bcm_pktio_pkt_t *,uint32);
	int (*pktio_tx)(int,bcm_pktio_pkt_t *);
	int (*policer_action_add)(int,uint32,bcm_policer_action_t,uint32);
	int (*policer_action_attach)(int,bcm_policer_t,uint32);
	int (*policer_action_attach_get)(int,bcm_policer_t,uint32 *);
	int (*policer_action_create)(int,uint32 *);
	int (*policer_action_destroy)(int,uint32);
	int (*policer_action_detach)(int,bcm_policer_t,uint32);
	int (*policer_action_get)(int,uint32,bcm_policer_action_t,uint32 *);
	int (*policer_aggregate_group_create)(int,bcm_policer_aggregate_group_info_t *,bcm_policer_t *,int *);
	int (*policer_color_decision_get)(int,bcm_policer_color_decision_t *);
	int (*policer_color_decision_set)(int,bcm_policer_color_decision_t *);
	int (*policer_color_resolution_get)(int,bcm_policer_color_resolution_t *);
	int (*policer_color_resolution_set)(int,bcm_policer_color_resolution_t *);
	/* bcm_policer_color_resolution_t_init not dispatchable */
	/* bcm_policer_config_t_init not dispatchable */
	int (*policer_control_get)(int,int,int,bcm_policer_control_type_t,uint32 *);
	int (*policer_control_set)(int,int,int,bcm_policer_control_type_t,uint32);
	int (*policer_create)(int,bcm_policer_config_t *,bcm_policer_t *);
	int (*policer_custom_group_create)(int,uint32,uint32,bcm_policer_t,bcm_policer_t *,uint32 *);
	int (*policer_custom_group_id_copy)(int,bcm_policer_group_info_t *,bcm_policer_group_info_t *);
	int (*policer_custom_group_id_create)(int,uint32,uint32,bcm_policer_t,bcm_policer_group_info_t *);
	/* bcm_policer_database_attach_config_t_init not dispatchable */
	/* bcm_policer_database_config_t_init not dispatchable */
	int (*policer_database_create)(int,int,int,bcm_policer_database_config_t *);
	int (*policer_database_destroy)(int,int,int);
	int (*policer_database_enable_get)(int,int,int,int *);
	int (*policer_database_enable_set)(int,int,int,int);
	int (*policer_destroy)(int,bcm_policer_t);
	int (*policer_destroy_all)(int);
	int (*policer_engine_database_attach)(int,int,bcm_policer_engine_t *,bcm_policer_database_attach_config_t *);
	int (*policer_engine_database_detach)(int,int,bcm_policer_engine_t *);
	int (*policer_engine_database_get)(int,int,bcm_policer_engine_t *,bcm_policer_database_attach_config_t *);
	/* bcm_policer_engine_t_init not dispatchable */
	int (*policer_envelop_create)(int,uint32,bcm_policer_t,bcm_policer_t *);
	int (*policer_envelop_group_create)(int,uint32,bcm_policer_group_mode_t,bcm_policer_t,bcm_policer_t *,int *);
	/* bcm_policer_expansion_group_t_init not dispatchable */
	int (*policer_expansion_groups_get)(int,int,bcm_core_t,bcm_policer_expansion_group_t *);
	int (*policer_expansion_groups_set)(int,int,bcm_core_t,bcm_policer_expansion_group_t *);
	int (*policer_get)(int,bcm_policer_t,bcm_policer_config_t *);
	int (*policer_global_meter_config_get)(int,bcm_policer_global_meter_config_t *);
	int (*policer_global_meter_config_set)(int,bcm_policer_global_meter_config_t *);
	/* bcm_policer_global_meter_config_t_init not dispatchable */
	int (*policer_group_create)(int,bcm_policer_group_mode_t,bcm_policer_t *,int *);
	int (*policer_group_create_with_map)(int,bcm_policer_group_mode_t,bcm_policer_map_t *,bcm_policer_t *,int *);
	int (*policer_group_get)(int,bcm_policer_t,int,bcm_policer_t *,int *);
	/* bcm_policer_group_info_t_init not dispatchable */
	/* bcm_policer_group_mode_attr_selector_t_init not dispatchable */
	int (*policer_group_mode_id_create)(int,uint32,bcm_policer_group_mode_type_t,uint32,uint32,bcm_policer_group_mode_attr_selector_t *,uint32 *);
	int (*policer_group_mode_id_destroy)(int,uint32);
	int (*policer_group_mode_id_get)(int,uint32,uint32,uint32 *,bcm_policer_group_mode_type_t *,uint32 *,bcm_policer_group_mode_attr_selector_t *,uint32 *);
	int (*policer_init)(int);
	/* bcm_policer_map_t_init not dispatchable */
	int (*policer_packet_counter_get32)(int,bcm_policer_t,uint32 *);
	int (*policer_packet_reset_counter_get32)(int,bcm_policer_t,uint32 *);
	/* bcm_policer_primary_color_resolution_config_t_init not dispatchable */
	int (*policer_primary_color_resolution_get)(int,int,bcm_policer_primary_color_resolution_key_t *,bcm_policer_primary_color_resolution_config_t *);
	/* bcm_policer_primary_color_resolution_key_t_init not dispatchable */
	int (*policer_primary_color_resolution_set)(int,int,bcm_policer_primary_color_resolution_key_t *,bcm_policer_primary_color_resolution_config_t *);
	int (*policer_set)(int,bcm_policer_t,bcm_policer_config_t *);
	int (*policer_stat_enable_get)(int,bcm_policer_t,int *);
	int (*policer_stat_enable_set)(int,bcm_policer_t,int);
	int (*policer_stat_get)(int,bcm_policer_t,bcm_cos_t,bcm_policer_stat_t,uint64 *);
	int (*policer_stat_get32)(int,bcm_policer_t,bcm_cos_t,bcm_policer_stat_t,uint32 *);
	int (*policer_stat_set)(int,bcm_policer_t,bcm_cos_t,bcm_policer_stat_t,uint64);
	int (*policer_stat_set32)(int,bcm_policer_t,bcm_cos_t,bcm_policer_stat_t,uint32);
	int (*policer_traverse)(int,bcm_policer_traverse_cb,void *);
	int (*port_ability_advert_get)(int,bcm_port_t,bcm_port_ability_t *);
	int (*port_ability_advert_set)(int,bcm_port_t,bcm_port_ability_t *);
	int (*port_ability_get)(int,bcm_port_t,bcm_port_abil_t *);
	int (*port_ability_local_get)(int,bcm_port_t,bcm_port_ability_t *);
	int (*port_ability_remote_get)(int,bcm_port_t,bcm_port_ability_t *);
	/* bcm_port_ability_t_init not dispatchable */
	int (*port_add)(int,bcm_port_t,uint32,bcm_port_interface_info_t *,bcm_port_mapping_info_t *);
	int (*port_advert_get)(int,bcm_port_t,bcm_port_abil_t *);
	int (*port_advert_remote_get)(int,bcm_port_t,bcm_port_abil_t *);
	int (*port_advert_set)(int,bcm_port_t,bcm_port_abil_t);
	int (*port_autoneg_ability_advert_get)(int,bcm_port_t,int,bcm_port_speed_ability_t *,int *);
	int (*port_autoneg_ability_advert_set)(int,bcm_port_t,int,bcm_port_speed_ability_t *);
	int (*port_autoneg_ability_remote_get)(int,bcm_port_t,int,bcm_port_speed_ability_t *,int *);
	int (*port_autoneg_get)(int,bcm_port_t,int *);
	int (*port_autoneg_set)(int,bcm_port_t,int);
	int (*port_bpdu_enable_get)(int,bcm_port_t,int *);
	int (*port_bpdu_enable_set)(int,bcm_port_t,int);
	int (*port_buffer_pbmp_get)(int,int,bcm_pbmp_t *);
	int (*port_cable_diag)(int,bcm_port_t,bcm_port_cable_diag_t *);
	int (*port_cfi_color_get)(int,bcm_port_t,int,bcm_color_t *);
	int (*port_cfi_color_set)(int,bcm_port_t,int,bcm_color_t);
	int (*port_class_get)(int,bcm_port_t,bcm_port_class_t,uint32 *);
	int (*port_class_set)(int,bcm_port_t,bcm_port_class_t,uint32);
	int (*port_clear)(int);
	int (*port_config_get)(int,bcm_port_config_t *);
	int (*port_config_phy_oam_get)(int,bcm_port_t,bcm_port_config_phy_oam_t *);
	int (*port_config_phy_oam_set)(int,bcm_port_t,bcm_port_config_phy_oam_t *);
	/* bcm_port_config_t_init not dispatchable */
	int (*port_congestion_config_get)(int,bcm_gport_t,bcm_port_congestion_config_t *);
	int (*port_congestion_config_set)(int,bcm_gport_t,bcm_port_congestion_config_t *);
	/* bcm_port_congestion_config_t_init not dispatchable */
	int (*port_congestion_get)(int,bcm_gport_t,bcm_gport_t,uint32,int *);
	int (*port_congestion_set)(int,bcm_gport_t,bcm_gport_t,uint32,int);
	int (*port_control_get)(int,bcm_port_t,bcm_port_control_t,int *);
	int (*port_control_phy_oam_get)(int,bcm_port_t,bcm_port_control_phy_oam_t,uint64 *);
	int (*port_control_phy_oam_set)(int,bcm_port_t,bcm_port_control_phy_oam_t,uint64);
	int (*port_control_phy_timesync_get)(int,bcm_port_t,bcm_port_control_phy_timesync_t,uint64 *);
	int (*port_control_phy_timesync_set)(int,bcm_port_t,bcm_port_control_phy_timesync_t,uint64);
	int (*port_control_set)(int,bcm_port_t,bcm_port_control_t,int);
	int (*port_detach)(int,bcm_pbmp_t,bcm_pbmp_t *);
	int (*port_discard_get)(int,bcm_port_t,int *);
	int (*port_discard_set)(int,bcm_port_t,int);
	int (*port_dscp_map_get)(int,bcm_port_t,int,int *,int *);
	int (*port_dscp_map_mode_get)(int,bcm_port_t,int *);
	int (*port_dscp_map_mode_set)(int,bcm_port_t,int);
	int (*port_dscp_map_set)(int,bcm_port_t,int,int,int);
	int (*port_dscp_unmap_get)(int,bcm_port_t,int,bcm_color_t,int *);
	int (*port_dscp_unmap_set)(int,bcm_port_t,int,bcm_color_t,int);
	int (*port_dtag_mode_get)(int,bcm_port_t,int *);
	int (*port_dtag_mode_set)(int,bcm_port_t,int);
	int (*port_duplex_get)(int,bcm_port_t,int *);
	int (*port_duplex_set)(int,bcm_port_t,int);
	/* bcm_port_e2efc_remote_module_config_t_init not dispatchable */
	int (*port_e2efc_remote_module_enable_get)(int,bcm_module_t,bcm_port_e2efc_mode_t,int *,bcm_port_e2efc_remote_module_config_t *);
	int (*port_e2efc_remote_module_enable_set)(int,bcm_module_t,bcm_port_e2efc_mode_t,int,bcm_port_e2efc_remote_module_config_t *);
	int (*port_e2efc_remote_module_traverse)(int,bcm_port_e2efc_remote_module_traverse_cb,void *);
	int (*port_e2efc_remote_port_add)(int,bcm_port_e2efc_remote_port_config_t *,int *);
	/* bcm_port_e2efc_remote_port_config_t_init not dispatchable */
	int (*port_e2efc_remote_port_delete)(int,int);
	int (*port_e2efc_remote_port_get)(int,int,bcm_port_e2efc_remote_port_config_t *);
	int (*port_e2efc_remote_port_set)(int,int,bcm_port_e2efc_remote_port_config_t *);
	int (*port_e2efc_remote_port_traverse)(int,bcm_port_e2efc_remote_port_traverse_cb,void *);
	int (*port_egress_get)(int,bcm_port_t,int,bcm_pbmp_t *);
	int (*port_egress_set)(int,bcm_port_t,int,bcm_pbmp_t);
	int (*port_enable_get)(int,bcm_port_t,int *);
	int (*port_enable_set)(int,bcm_port_t,int);
	int (*port_encap_config_get)(int,bcm_gport_t,bcm_port_encap_config_t *);
	int (*port_encap_config_set)(int,bcm_gport_t,bcm_port_encap_config_t *);
	/* bcm_port_encap_config_t_init not dispatchable */
	int (*port_encap_get)(int,bcm_port_t,int *);
	int (*port_encap_local_get)(int,bcm_gport_t,uint32,int *);
	int (*port_encap_map_get)(int,uint32,bcm_if_t,bcm_gport_t *);
	int (*port_encap_map_set)(int,uint32,bcm_if_t,bcm_gport_t);
	int (*port_encap_set)(int,bcm_port_t,int);
	int (*port_extender_mapping_info_get)(int,uint32,bcm_port_extender_mapping_type_t,bcm_port_extender_mapping_info_t *);
	int (*port_extender_mapping_info_set)(int,uint32,bcm_port_extender_mapping_type_t,bcm_port_extender_mapping_info_t *);
	/* bcm_port_extender_mapping_info_t_init not dispatchable */
	int (*port_fast_reboot_traffic_enable)(int);
	int (*port_fault_get)(int,bcm_port_t,uint32 *);
	int (*port_fdr_callback_register)(int,bcm_port_fdr_handler_t,void *);
	int (*port_fdr_callback_unregister)(int,bcm_port_fdr_handler_t,void *);
	int (*port_fdr_config_get)(int,bcm_port_t,bcm_port_fdr_config_t *);
	int (*port_fdr_config_set)(int,bcm_port_t,bcm_port_fdr_config_t *);
	int (*port_fdr_stats_get)(int,bcm_port_t,bcm_port_fdr_stats_t *);
	int (*port_flexe_flow_clear)(int,bcm_port_t,int,bcm_port_t);
	int (*port_flexe_flow_set)(int,uint32,bcm_port_t,int,bcm_port_t);
	int (*port_flexe_group_cal_active_get)(int,bcm_gport_t,uint32,bcm_port_flexe_group_cal_t *);
	int (*port_flexe_group_cal_active_set)(int,bcm_gport_t,uint32,bcm_port_flexe_group_cal_t);
	int (*port_flexe_group_cal_slots_get)(int,bcm_gport_t,uint32,bcm_port_flexe_group_cal_t,int,int *,int *);
	int (*port_flexe_group_cal_slots_set)(int,bcm_gport_t,uint32,bcm_port_flexe_group_cal_t,int,int *);
	int (*port_flexe_group_create)(int,bcm_gport_t,uint32,int,bcm_port_flexe_group_phy_info_t *);
	int (*port_flexe_group_destroy)(int,bcm_gport_t);
	int (*port_flexe_group_get)(int,bcm_gport_t,uint32,int,bcm_port_flexe_group_phy_info_t *,int *);
	int (*port_flexe_group_phy_add)(int,bcm_gport_t,uint32,bcm_port_flexe_group_phy_info_t *);
	int (*port_flexe_group_phy_remove)(int,bcm_gport_t,uint32,bcm_port_flexe_group_phy_info_t *);
	int (*port_flexe_oam_alarm_get)(int,bcm_port_t,uint32,bcm_port_flexe_oam_alarm_t *);
	int (*port_flexe_oam_control_get)(int,bcm_port_t,uint32,bcm_port_flexe_oam_control_type_t,uint32 *);
	int (*port_flexe_oam_control_set)(int,bcm_port_t,uint32,bcm_port_flexe_oam_control_type_t,uint32);
	int (*port_flexe_oam_stat_get)(int,bcm_port_t,uint32,bcm_port_flexe_oam_stat_t,uint64 *);
	int (*port_flexe_oh_alarm_get)(int,bcm_gport_t,uint32,bcm_port_flexe_oh_alarm_t *);
	int (*port_flexe_oh_get)(int,bcm_gport_t,uint32,bcm_port_flexe_oh_type_t,int *);
	int (*port_flexe_oh_set)(int,bcm_gport_t,uint32,bcm_port_flexe_oh_type_t,int);
	int (*port_flexstate_attach)(int,bcm_gport_t,uint32);
	int (*port_flexstate_detach_with_id)(int,bcm_gport_t,uint32);
	int (*port_flood_block_get)(int,bcm_port_t,bcm_port_t,uint32 *);
	int (*port_flood_block_set)(int,bcm_port_t,bcm_port_t,uint32);
	int (*port_flood_group_get)(int,bcm_gport_t,uint32,bcm_port_flood_group_t *);
	int (*port_flood_group_set)(int,bcm_gport_t,uint32,bcm_port_flood_group_t *);
	/* bcm_port_flood_group_t_init not dispatchable */
	int (*port_force_dest_get)(int,bcm_gport_t,bcm_port_dest_info_t *);
	int (*port_force_dest_set)(int,bcm_gport_t,bcm_port_dest_info_t *);
	int (*port_force_forward_get)(int,bcm_port_t,bcm_port_t *,int *);
	int (*port_force_forward_mode_get)(int,bcm_port_t,bcm_port_t *,uint32 *);
	int (*port_force_forward_mode_set)(int,bcm_port_t,bcm_port_t,uint32);
	int (*port_force_forward_set)(int,bcm_port_t,bcm_port_t,int);
	int (*port_force_vlan_get)(int,bcm_port_t,bcm_vlan_t *,int *,uint32 *);
	int (*port_force_vlan_set)(int,bcm_port_t,bcm_vlan_t,int,uint32);
	int (*port_frame_max_get)(int,bcm_port_t,int *);
	int (*port_frame_max_set)(int,bcm_port_t,int);
	int (*port_get)(int,bcm_port_t,uint32 *,bcm_port_interface_info_t *,bcm_port_mapping_info_t *);
	int (*port_gport_add)(int,bcm_port_t,bcm_gport_t);
	int (*port_gport_delete)(int,bcm_port_t,bcm_gport_t);
	int (*port_gport_delete_all)(int,bcm_port_t);
	int (*port_gport_free_range_get)(int,uint32,bcm_gport_t *,bcm_gport_t *);
	int (*port_gport_get)(int,bcm_port_t,bcm_gport_t *);
	int (*port_gport_get_all)(int,bcm_port_t,int,bcm_gport_t *,int *);
	int (*port_gport_is_free)(int,bcm_gport_t);
	int (*port_group_range_get)(int,bcm_port_group_type_t,bcm_port_group_range_t *);
	int (*port_ifg_get)(int,bcm_port_t,int,bcm_port_duplex_t,int *);
	int (*port_ifg_set)(int,bcm_port_t,int,bcm_port_duplex_t,int);
	int (*port_ifilter_get)(int,bcm_port_t,int *);
	int (*port_ifilter_set)(int,bcm_port_t,int);
	int (*port_ilkn_lane_map_get)(int,int,bcm_port_t,int,int *);
	int (*port_ilkn_lane_map_set)(int,int,bcm_port_t,int,int *);
	int (*port_info_get)(int,bcm_port_t,bcm_port_info_t *);
	int (*port_info_restore)(int,bcm_port_t,bcm_port_info_t *);
	int (*port_info_save)(int,bcm_port_t,bcm_port_info_t *);
	int (*port_info_set)(int,bcm_port_t,bcm_port_info_t *);
	/* bcm_port_info_t_init not dispatchable */
	int (*port_ingress_tdm_failover_get)(int,int,bcm_pbmp_t *);
	int (*port_ingress_tdm_failover_set)(int,int,bcm_pbmp_t);
	int (*port_init)(int);
	int (*port_inner_tpid_get)(int,bcm_port_t,uint16 *);
	int (*port_inner_tpid_set)(int,bcm_port_t,uint16);
	int (*port_interface_config_get)(int,bcm_port_t,bcm_port_interface_config_t *);
	int (*port_interface_config_set)(int,bcm_port_t,bcm_port_interface_config_t *);
	/* bcm_port_interface_config_t_init not dispatchable */
	int (*port_interface_get)(int,bcm_port_t,bcm_port_if_t *);
	int (*port_interface_set)(int,bcm_port_t,bcm_port_if_t);
	int (*port_internal_get)(int,uint32,int,bcm_gport_t *,int *);
	int (*port_ipmc_modify_get)(int,bcm_port_t,uint32 *);
	int (*port_ipmc_modify_set)(int,bcm_port_t,uint32);
	int (*port_jam_get)(int,bcm_port_t,int *);
	int (*port_jam_set)(int,bcm_port_t,int);
	int (*port_l2_interface_gport_get)(int,int,bcm_gport_t *);
	int (*port_l2_interface_id_get)(int,bcm_gport_t,int *);
	int (*port_l2_tunnel_payload_tpid_add)(int,bcm_port_t,uint16,int);
	int (*port_l2_tunnel_payload_tpid_delete)(int,bcm_port_t,uint16);
	int (*port_l2_tunnel_payload_tpid_delete_all)(int,bcm_port_t);
	int (*port_l2_tunnel_payload_tpid_get)(int,bcm_port_t,uint16 *);
	int (*port_l2_tunnel_payload_tpid_get_all)(int,bcm_port_t,int,uint16 *,int *,int *);
	int (*port_l2_tunnel_payload_tpid_set)(int,bcm_port_t,uint16);
	int (*port_l3_enable_get)(int,bcm_port_t,int *);
	int (*port_l3_enable_set)(int,bcm_port_t,int);
	int (*port_l3_encapsulated_mtu_get)(int,bcm_port_t,int *);
	int (*port_l3_encapsulated_mtu_set)(int,bcm_port_t,int);
	int (*port_l3_modify_get)(int,bcm_port_t,uint32 *);
	int (*port_l3_modify_set)(int,bcm_port_t,uint32);
	int (*port_l3_mtu_get)(int,bcm_port_t,int *);
	int (*port_l3_mtu_set)(int,bcm_port_t,int);
	int (*port_lane_to_serdes_map_get)(int,int,int,bcm_port_lane_to_serdes_map_t *);
	int (*port_lane_to_serdes_map_set)(int,int,int,bcm_port_lane_to_serdes_map_t *);
	int (*port_learn_get)(int,bcm_port_t,uint32 *);
	int (*port_learn_modify)(int,bcm_port_t,uint32,uint32);
	int (*port_learn_set)(int,bcm_port_t,uint32);
	int (*port_link_failed_clear)(int,bcm_port_t);
	int (*port_link_state_get)(int,bcm_port_t,uint32,bcm_port_link_state_t *);
	int (*port_link_status_get)(int,bcm_port_t,int *);
	int (*port_linkscan_get)(int,bcm_port_t,int *);
	int (*port_linkscan_set)(int,bcm_port_t,int);
	int (*port_local_get)(int,bcm_gport_t,bcm_port_t *);
	int (*port_loopback_get)(int,bcm_port_t,int *);
	int (*port_loopback_set)(int,bcm_port_t,int);
	int (*port_management_packet_config_get)(int,bcm_port_t,bcm_port_management_packet_config_t *,int,int *);
	int (*port_management_packet_config_set)(int,bcm_port_t,bcm_port_management_packet_config_t *);
	/* bcm_port_mapping_info_t_init not dispatchable */
	int (*port_master_get)(int,bcm_port_t,int *);
	int (*port_master_set)(int,bcm_port_t,int);
	int (*port_match_add)(int,bcm_gport_t,bcm_port_match_info_t *);
	int (*port_match_delete)(int,bcm_gport_t,bcm_port_match_info_t *);
	int (*port_match_delete_all)(int,bcm_gport_t);
	/* bcm_port_match_info_t_init not dispatchable */
	int (*port_match_multi_get)(int,bcm_gport_t,int,bcm_port_match_info_t *,int *);
	int (*port_match_replace)(int,bcm_gport_t,bcm_port_match_info_t *,bcm_port_match_info_t *);
	int (*port_match_set)(int,bcm_gport_t,int,bcm_port_match_info_t *);
	int (*port_mdix_get)(int,bcm_port_t,bcm_port_mdix_t *);
	int (*port_mdix_set)(int,bcm_port_t,bcm_port_mdix_t);
	int (*port_mdix_status_get)(int,bcm_port_t,bcm_port_mdix_status_t *);
	int (*port_medium_config_get)(int,bcm_port_t,bcm_port_medium_t,bcm_phy_config_t *);
	int (*port_medium_config_set)(int,bcm_port_t,bcm_port_medium_t,bcm_phy_config_t *);
	int (*port_medium_get)(int,bcm_port_t,bcm_port_medium_t *);
	int (*port_medium_status_register)(int,bcm_port_t,bcm_port_medium_status_cb_t,void *);
	int (*port_medium_status_unregister)(int,bcm_port_t,bcm_port_medium_status_cb_t,void *);
	int (*port_modid_egress_get)(int,bcm_port_t,bcm_module_t,bcm_pbmp_t *);
	int (*port_modid_egress_set)(int,bcm_port_t,bcm_module_t,bcm_pbmp_t);
	int (*port_modid_enable_get)(int,bcm_port_t,int,int *);
	int (*port_modid_enable_set)(int,bcm_port_t,int,int);
	int (*port_nif_priority_get)(int,bcm_gport_t,uint32,bcm_port_nif_prio_t *,bcm_pbmp_t *);
	int (*port_nif_priority_set)(int,bcm_gport_t,uint32,bcm_port_nif_prio_t *,bcm_pbmp_t *);
	int (*port_pause_addr_get)(int,bcm_port_t,bcm_mac_t);
	int (*port_pause_addr_set)(int,bcm_port_t,bcm_mac_t);
	int (*port_pause_get)(int,bcm_port_t,int *,int *);
	int (*port_pause_set)(int,bcm_port_t,int,int);
	int (*port_pause_sym_get)(int,bcm_port_t,int *);
	int (*port_pause_sym_set)(int,bcm_port_t,int);
	int (*port_pcs_lane_map_set)(int,bcm_port_t,uint32,int,bcm_port_lane_to_serdes_map_t *);
	int (*port_pfm_get)(int,bcm_port_t,int *);
	int (*port_pfm_set)(int,bcm_port_t,int);
	int (*port_phy_control_get)(int,bcm_port_t,bcm_port_phy_control_t,uint32 *);
	int (*port_phy_control_set)(int,bcm_port_t,bcm_port_phy_control_t,uint32);
	int (*port_phy_drv_name_get)(int,bcm_port_t,char *,int);
	int (*port_phy_fec_error_inject_get)(int,bcm_port_t,uint16 *,bcm_port_phy_fec_error_mask_t *);
	int (*port_phy_fec_error_inject_set)(int,bcm_port_t,uint16,bcm_port_phy_fec_error_mask_t);
	int (*port_phy_firmware_set)(int,bcm_port_t,uint32,int,uint8 *,int);
	int (*port_phy_get)(int,bcm_port_t,uint32,uint32,uint32 *);
	int (*port_phy_modify)(int,bcm_port_t,uint32,uint32,uint32,uint32);
	int (*port_phy_multi_get)(int,bcm_port_t,uint32,uint32,uint32,int,uint8 *,int *);
	int (*port_phy_reset)(int,bcm_port_t);
	int (*port_phy_reset_register)(int,bcm_port_t,bcm_port_phy_reset_cb_t,void *);
	int (*port_phy_reset_unregister)(int,bcm_port_t,bcm_port_phy_reset_cb_t,void *);
	int (*port_phy_set)(int,bcm_port_t,uint32,uint32,uint32);
	int (*port_phy_timesync_config_get)(int,bcm_port_t,bcm_port_phy_timesync_config_t *);
	int (*port_phy_timesync_config_set)(int,bcm_port_t,bcm_port_phy_timesync_config_t *);
	/* bcm_port_phy_timesync_config_t_init not dispatchable */
	int (*port_phy_timesync_enhanced_capture_get)(int,bcm_port_t,bcm_port_phy_timesync_enhanced_capture_t *);
	int (*port_phy_tx_get)(int,bcm_port_t,bcm_port_phy_tx_t *);
	int (*port_phy_tx_set)(int,bcm_port_t,bcm_port_phy_tx_t *);
	/* bcm_port_phy_tx_t_init not dispatchable */
	int (*port_pipe_pbmp_get)(int,int,bcm_pbmp_t *);
	int (*port_policer_get)(int,bcm_port_t,bcm_policer_t *);
	int (*port_policer_set)(int,bcm_port_t,bcm_policer_t);
	int (*port_pon_info_get)(int,bcm_port_t,bcm_port_pon_info_t *);
	int (*port_pon_info_set)(int,bcm_port_t,bcm_port_pon_info_t *);
	int (*port_pon_tunnel_add)(int,bcm_gport_t,uint32,bcm_gport_t *);
	int (*port_pon_tunnel_map_get)(int,bcm_gport_t,bcm_tunnel_id_t,bcm_gport_t *);
	int (*port_pon_tunnel_map_set)(int,bcm_gport_t,bcm_tunnel_id_t,bcm_gport_t);
	int (*port_pon_tunnel_remove)(int,bcm_gport_t);
	int (*port_post_ber_proj_get)(int,bcm_port_t,bcm_port_ber_proj_params_t *,int,bcm_port_ber_proj_analyzer_errcnt_t *,int *);
	int (*port_preemption_control_get)(int,bcm_gport_t,bcm_port_preempt_control_t,uint32 *);
	int (*port_preemption_control_set)(int,bcm_gport_t,bcm_port_preempt_control_t,uint32);
	int (*port_preemption_status_get)(int,bcm_gport_t,bcm_port_preempt_status_t,uint32 *);
	int (*port_priority_color_get)(int,bcm_port_t,int,bcm_color_t *);
	int (*port_priority_color_set)(int,bcm_port_t,int,bcm_color_t);
	int (*port_priority_config_get)(int,bcm_port_t,bcm_port_prio_config_t *);
	int (*port_priority_config_set)(int,bcm_port_t,bcm_port_prio_config_t *);
	int (*port_priority_group_config_get)(int,bcm_gport_t,int,bcm_port_priority_group_config_t *);
	int (*port_priority_group_config_set)(int,bcm_gport_t,int,bcm_port_priority_group_config_t *);
	/* bcm_port_priority_group_config_t_init not dispatchable */
	int (*port_priority_group_mapping_get)(int,bcm_gport_t,int,int *);
	int (*port_priority_group_mapping_set)(int,bcm_gport_t,int,int);
	int (*port_probe)(int,bcm_pbmp_t,bcm_pbmp_t *);
	int (*port_protocol_vlan_add)(int,bcm_port_t,bcm_port_frametype_t,bcm_port_ethertype_t,bcm_vlan_t);
	int (*port_protocol_vlan_delete)(int,bcm_port_t,bcm_port_frametype_t,bcm_port_ethertype_t);
	int (*port_protocol_vlan_delete_all)(int,bcm_port_t);
	int (*port_queued_count_get)(int,bcm_port_t,uint32 *);
	int (*port_rate_egress_get)(int,bcm_port_t,uint32 *,uint32 *);
	int (*port_rate_egress_pps_get)(int,bcm_port_t,uint32 *,uint32 *);
	int (*port_rate_egress_pps_set)(int,bcm_port_t,uint32,uint32);
	int (*port_rate_egress_set)(int,bcm_port_t,uint32,uint32);
	int (*port_rate_ingress_get)(int,bcm_port_t,uint32 *,uint32 *);
	int (*port_rate_ingress_set)(int,bcm_port_t,uint32,uint32);
	int (*port_rate_pause_get)(int,bcm_port_t,uint32 *,uint32 *);
	int (*port_rate_pause_set)(int,bcm_port_t,uint32,uint32);
	int (*port_redirect_config_get)(int,bcm_gport_t,bcm_port_redirect_config_t *);
	int (*port_redirect_config_set)(int,bcm_gport_t,bcm_port_redirect_config_t *);
	/* bcm_port_redirect_config_t_init not dispatchable */
	int (*port_remove)(int,bcm_port_t,uint32);
	int (*port_resource_default_get)(int,bcm_gport_t,uint32,bcm_port_resource_t *);
	int (*port_resource_get)(int,bcm_gport_t,bcm_port_resource_t *);
	int (*port_resource_multi_set)(int,int,bcm_port_resource_t *);
	int (*port_resource_set)(int,bcm_gport_t,bcm_port_resource_t *);
	int (*port_resource_speed_config_validate)(int,bcm_port_resource_t *,bcm_pbmp_t *);
	int (*port_resource_speed_get)(int,bcm_gport_t,bcm_port_resource_t *);
	int (*port_resource_speed_multi_set)(int,int,bcm_port_resource_t *);
	int (*port_resource_speed_set)(int,bcm_gport_t,bcm_port_resource_t *);
	/* bcm_port_resource_t_init not dispatchable */
	int (*port_resource_traverse)(int,bcm_port_resource_traverse_cb,void *);
	int (*port_rlm_config_get)(int,bcm_port_t,bcm_port_rlm_config_t *,int *);
	int (*port_rlm_config_set)(int,bcm_port_t,bcm_port_rlm_config_t *,int);
	/* bcm_port_rlm_config_t_init not dispatchable */
	int (*port_rlm_status_get)(int,bcm_port_t,bcm_port_rlm_status_t *);
	int (*port_sample_rate_get)(int,bcm_port_t,int *,int *);
	int (*port_sample_rate_set)(int,bcm_port_t,int,int);
	int (*port_selective_get)(int,bcm_port_t,bcm_port_info_t *);
	int (*port_selective_set)(int,bcm_port_t,bcm_port_info_t *);
	int (*port_speed_ability_local_get)(int,bcm_port_t,int,bcm_port_speed_ability_t *,int *);
	int (*port_speed_get)(int,bcm_port_t,int *);
	int (*port_speed_max)(int,bcm_port_t,int *);
	int (*port_speed_set)(int,bcm_port_t,int);
	int (*port_stat_attach)(int,bcm_gport_t,uint32);
	int (*port_stat_counter_get)(int,bcm_gport_t,bcm_port_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*port_stat_counter_set)(int,bcm_gport_t,bcm_port_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*port_stat_counter_sync_get)(int,bcm_gport_t,bcm_port_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*port_stat_detach)(int,bcm_gport_t);
	int (*port_stat_detach_with_id)(int,bcm_gport_t,uint32);
	int (*port_stat_enable_set)(int,bcm_gport_t,int);
	int (*port_stat_get)(int,bcm_gport_t,bcm_port_stat_t,uint64 *);
	int (*port_stat_get32)(int,bcm_gport_t,bcm_port_stat_t,uint32 *);
	int (*port_stat_id_get)(int,bcm_gport_t,bcm_port_stat_t,uint32 *);
	int (*port_stat_multi_get)(int,bcm_gport_t,int,bcm_port_stat_t *,uint64 *);
	int (*port_stat_multi_get32)(int,bcm_gport_t,int,bcm_port_stat_t *,uint32 *);
	int (*port_stat_multi_set)(int,bcm_gport_t,int,bcm_port_stat_t *,uint64 *);
	int (*port_stat_multi_set32)(int,bcm_gport_t,int,bcm_port_stat_t *,uint32 *);
	int (*port_stat_set)(int,bcm_gport_t,bcm_port_stat_t,uint64);
	int (*port_stat_set32)(int,bcm_gport_t,bcm_port_stat_t,uint32);
	int (*port_stat_sync_get)(int,bcm_gport_t,bcm_port_stat_t,uint64 *);
	int (*port_stat_sync_get32)(int,bcm_gport_t,bcm_port_stat_t,uint32 *);
	int (*port_stp_get)(int,bcm_port_t,int *);
	int (*port_stp_set)(int,bcm_port_t,int);
	int (*port_subsidiary_ports_get)(int,bcm_port_t,bcm_pbmp_t *);
	int (*port_tgid_get)(int,bcm_port_t,int *,int *);
	int (*port_tgid_set)(int,bcm_port_t,int,int);
	int (*port_timestamp_adjust_get)(int,bcm_port_t,bcm_port_timestamp_adjust_t *);
	int (*port_timestamp_adjust_set)(int,bcm_port_t,bcm_port_timestamp_adjust_t *);
	int (*port_timesync_config_get)(int,bcm_port_t,int,bcm_port_timesync_config_t *,int *);
	int (*port_timesync_config_set)(int,bcm_port_t,int,bcm_port_timesync_config_t *);
	/* bcm_port_timesync_config_t_init not dispatchable */
	int (*port_timesync_tx_info_get)(int,bcm_port_t,bcm_port_timesync_tx_info_t *);
	int (*port_tpid_add)(int,bcm_port_t,uint16,int);
	int (*port_tpid_class_create)(int,uint32,bcm_port_tag_struct_type_t,bcm_port_tag_format_class_t *);
	int (*port_tpid_class_destroy)(int,uint32,bcm_port_tag_format_class_t);
	int (*port_tpid_class_get)(int,bcm_port_tpid_class_t *);
	int (*port_tpid_class_set)(int,bcm_port_tpid_class_t *);
	/* bcm_port_tpid_class_t_init not dispatchable */
	int (*port_tpid_delete)(int,bcm_port_t,uint16);
	int (*port_tpid_delete_all)(int,bcm_port_t);
	int (*port_tpid_get)(int,bcm_port_t,uint16 *);
	int (*port_tpid_get_all)(int,bcm_port_t,int,uint16 *,int *,int *);
	int (*port_tpid_set)(int,bcm_port_t,uint16);
	int (*port_trunk_index_get)(int,bcm_port_t,int *);
	int (*port_trunk_index_set)(int,bcm_port_t,int);
	int (*port_txpi_rxcdr_clk_get)(int,bcm_port_t,uint32 *,uint32 *);
	int (*port_untagged_priority_get)(int,bcm_port_t,int *);
	int (*port_untagged_priority_set)(int,bcm_port_t,int);
	int (*port_untagged_vlan_get)(int,bcm_port_t,bcm_vlan_t *);
	int (*port_untagged_vlan_set)(int,bcm_port_t,bcm_vlan_t);
	int (*port_update)(int,bcm_port_t,int);
	int (*port_vlan_dscp_map_get)(int,bcm_port_t,bcm_vlan_t,int,int *,bcm_color_t *);
	int (*port_vlan_dscp_map_set)(int,bcm_port_t,bcm_vlan_t,int,int,bcm_color_t);
	int (*port_vlan_inner_tag_get)(int,bcm_port_t,uint16 *);
	int (*port_vlan_inner_tag_set)(int,bcm_port_t,uint16);
	int (*port_vlan_member_get)(int,bcm_port_t,uint32 *);
	int (*port_vlan_member_set)(int,bcm_port_t,uint32);
	int (*port_vlan_pri_map_get)(int,bcm_port_t,bcm_vlan_t,int,int,int *,bcm_color_t *);
	int (*port_vlan_pri_map_set)(int,bcm_port_t,bcm_vlan_t,int,int,int,bcm_color_t);
	int (*port_vlan_priority_map_get)(int,bcm_port_t,int,int,int *,bcm_color_t *);
	int (*port_vlan_priority_map_set)(int,bcm_port_t,int,int,int,bcm_color_t);
	int (*port_vlan_priority_mapping_get)(int,bcm_port_t,bcm_vlan_t,int,int,bcm_priority_mapping_t *);
	int (*port_vlan_priority_mapping_set)(int,bcm_port_t,bcm_vlan_t,int,int,bcm_priority_mapping_t *);
	int (*port_vlan_priority_unmap_get)(int,bcm_port_t,int,bcm_color_t,int *,int *);
	int (*port_vlan_priority_unmap_set)(int,bcm_port_t,int,bcm_color_t,int,int);
	int (*port_vlan_vector_get)(int,bcm_gport_t,bcm_vlan_vector_t);
	int (*port_vlan_vector_set)(int,bcm_gport_t,bcm_vlan_vector_t);
	int (*port_wide_data_get)(int,bcm_gport_t,uint32,uint64 *);
	int (*port_wide_data_set)(int,bcm_gport_t,uint32,uint64);
#ifdef	INCLUDE_L3
	int (*ppp_initiator_create)(int,bcm_ppp_initiator_t *);
	int (*ppp_initiator_delete)(int,bcm_ppp_initiator_t *);
	int (*ppp_initiator_get)(int,bcm_ppp_initiator_t *);
	int (*ppp_initiator_traverse)(int,bcm_ppp_initiator_additional_info_t *,bcm_ppp_initiator_traverse_cb,void *);
	int (*ppp_term_spoofing_check_add)(int,bcm_ppp_term_spoofing_check_t *);
	int (*ppp_term_spoofing_check_delete)(int,bcm_ppp_term_spoofing_check_t *);
	int (*ppp_term_spoofing_check_traverse)(int,bcm_ppp_term_spoofing_check_additional_info_t *,bcm_ppp_term_spoofing_check_traverse_cb,void *);
	int (*ppp_terminator_create)(int,bcm_ppp_terminator_t *);
	int (*ppp_terminator_delete)(int,bcm_ppp_terminator_t *);
	int (*ppp_terminator_get)(int,bcm_ppp_terminator_t *);
	int (*ppp_terminator_traverse)(int,bcm_ppp_terminator_additional_info_t *,bcm_ppp_terminator_traverse_cb,void *);
	/* bcm_priority_mapping_t_init not dispatchable */
	int (*proxy_cleanup)(int);
	int (*proxy_client_set)(int,bcm_port_t,bcm_proxy_proto_type_t,bcm_module_t,bcm_port_t,int);
	int (*proxy_egress_create)(int,uint32,bcm_proxy_egress_t *,bcm_if_t *);
	int (*proxy_egress_destroy)(int,bcm_if_t);
	int (*proxy_egress_get)(int,bcm_if_t,bcm_proxy_egress_t *);
	/* bcm_proxy_egress_t_init not dispatchable */
	int (*proxy_egress_traverse)(int,bcm_proxy_egress_traverse_cb,void *);
	int (*proxy_init)(int);
	int (*proxy_server_get)(int,bcm_port_t,bcm_proxy_mode_t,int *);
	int (*proxy_server_port_get)(int,bcm_gport_t,bcm_proxy_server_t *,int *);
	int (*proxy_server_port_set)(int,bcm_gport_t,bcm_proxy_server_t *,int);
	int (*proxy_server_set)(int,bcm_port_t,bcm_proxy_mode_t,int);
	/* bcm_proxy_server_t_init not dispatchable */
#endif	/* INCLUDE_L3 */
#ifdef	INCLUDE_PSTATS
	int (*pstats_data_sync)(int);
	/* bcm_pstats_data_t_init not dispatchable */
	int (*pstats_session_create)(int,int,int,bcm_pstats_session_element_t *,bcm_pstats_session_id_t *);
	int (*pstats_session_data_clear)(int,bcm_pstats_session_id_t);
	int (*pstats_session_data_get)(int,bcm_pstats_session_id_t,bcm_pstats_timestamp_t *,int,bcm_pstats_data_t *,int *);
	int (*pstats_session_data_sync_get)(int,bcm_pstats_session_id_t,bcm_pstats_timestamp_t *,int,bcm_pstats_data_t *,int *);
	int (*pstats_session_destroy)(int,bcm_pstats_session_id_t);
	/* bcm_pstats_session_element_t_init not dispatchable */
	int (*pstats_session_get)(int,bcm_pstats_session_id_t,int,bcm_pstats_session_element_t *,int *);
	int (*pstats_session_traverse)(int,bcm_pstats_session_traverse_cb,void *);
	/* bcm_pstats_timestamp_t_init not dispatchable */
#endif	/* INCLUDE_PSTATS */
#ifdef	INCLUDE_PTP
	int (*ptp_acceptable_master_add)(int,bcm_ptp_stack_id_t,int,int,int,bcm_ptp_clock_peer_address_t *);
	int (*ptp_acceptable_master_enabled_get)(int,bcm_ptp_stack_id_t,int,int,uint8 *);
	int (*ptp_acceptable_master_enabled_set)(int,bcm_ptp_stack_id_t,int,int,uint8);
	int (*ptp_acceptable_master_list)(int,bcm_ptp_stack_id_t,int,int,int,int *,bcm_ptp_clock_peer_address_t *);
	int (*ptp_acceptable_master_remove)(int,bcm_ptp_stack_id_t,int,int,bcm_ptp_clock_peer_address_t *);
	int (*ptp_acceptable_master_table_clear)(int,bcm_ptp_stack_id_t,int,int);
	int (*ptp_acceptable_master_table_size_get)(int,bcm_ptp_stack_id_t,int,int,int *);
	int (*ptp_bs_time_info_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_bs_time_info_t *);
	int (*ptp_cb_register)(int,bcm_ptp_cb_types_t,bcm_ptp_cb,void *);
	int (*ptp_cb_unregister)(int,bcm_ptp_cb_types_t,bcm_ptp_cb);
	int (*ptp_clock_accuracy_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_clock_accuracy_t *);
	int (*ptp_clock_accuracy_set)(int,bcm_ptp_stack_id_t,int,bcm_ptp_clock_accuracy_t *);
	int (*ptp_clock_apts_enable_get)(int,bcm_ptp_stack_id_t,int,int *);
	int (*ptp_clock_apts_enable_set)(int,bcm_ptp_stack_id_t,int,int);
	int (*ptp_clock_apts_gps_offset_get)(int,bcm_ptp_stack_id_t,int,int *);
	int (*ptp_clock_apts_gps_offset_set)(int,bcm_ptp_stack_id_t,int,int);
	int (*ptp_clock_apts_mode_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_clock_apts_mode_t *);
	int (*ptp_clock_apts_source_enable_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_clock_apts_source_t,int *);
	int (*ptp_clock_apts_source_enable_set)(int,bcm_ptp_stack_id_t,int,bcm_ptp_clock_apts_source_t,int);
	int (*ptp_clock_apts_source_prio_get)(int,bcm_ptp_stack_id_t,int,int *,bcm_ptp_clock_apts_source_t *);
	int (*ptp_clock_apts_source_prio_set)(int,bcm_ptp_stack_id_t,int,int,bcm_ptp_clock_apts_source_t *);
	int (*ptp_clock_bmca_override_get)(int,bcm_ptp_stack_id_t,int,uint32 *,uint32 *);
	int (*ptp_clock_bmca_override_set)(int,bcm_ptp_stack_id_t,int,uint32,uint32);
	int (*ptp_clock_create)(int,bcm_ptp_stack_id_t,bcm_ptp_clock_info_t *);
	int (*ptp_clock_current_dataset_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_current_dataset_t *);
	int (*ptp_clock_default_dataset_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_default_dataset_t *);
	int (*ptp_clock_domain_get)(int,bcm_ptp_stack_id_t,int,uint32 *);
	int (*ptp_clock_domain_set)(int,bcm_ptp_stack_id_t,int,uint32);
	int (*ptp_clock_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_clock_info_t *);
	int (*ptp_clock_local_priority_get)(int,bcm_ptp_stack_id_t,int,uint8 *);
	int (*ptp_clock_local_priority_set)(int,bcm_ptp_stack_id_t,int,uint8);
	int (*ptp_clock_max_steps_removed_get)(int,bcm_ptp_stack_id_t,int,uint8 *);
	int (*ptp_clock_max_steps_removed_set)(int,bcm_ptp_stack_id_t,int,uint8);
	int (*ptp_clock_parent_dataset_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_parent_dataset_t *);
	int (*ptp_clock_peer_age_timer_get)(int,bcm_ptp_stack_id_t,int,uint8 *);
	int (*ptp_clock_peer_age_timer_set)(int,bcm_ptp_stack_id_t,int,uint8);
	int (*ptp_clock_port_announce_receipt_timeout_get)(int,bcm_ptp_stack_id_t,int,uint32,uint32 *);
	int (*ptp_clock_port_announce_receipt_timeout_set)(int,bcm_ptp_stack_id_t,int,uint32,uint32);
	int (*ptp_clock_port_configure)(int,bcm_ptp_stack_id_t,int,uint32,bcm_ptp_clock_port_info_t *);
	int (*ptp_clock_port_dataset_get)(int,bcm_ptp_stack_id_t,int,uint32,bcm_ptp_port_dataset_t *);
	int (*ptp_clock_port_delay_mechanism_get)(int,bcm_ptp_stack_id_t,int,uint32,uint32 *);
	int (*ptp_clock_port_delay_mechanism_set)(int,bcm_ptp_stack_id_t,int,uint32,uint32);
	int (*ptp_clock_port_disable)(int,bcm_ptp_stack_id_t,int,uint32);
	int (*ptp_clock_port_drop_counters_enable_set)(int,bcm_ptp_stack_id_t,int,uint32,int);
	int (*ptp_clock_port_drop_counters_get)(int,bcm_ptp_stack_id_t,int,uint32,bcm_ptp_clock_port_packet_drop_counters_t *);
	int (*ptp_clock_port_enable)(int,bcm_ptp_stack_id_t,int,uint32);
	int (*ptp_clock_port_identity_get)(int,bcm_ptp_stack_id_t,int,uint32,bcm_ptp_port_identity_t *);
	int (*ptp_clock_port_info_get)(int,bcm_ptp_stack_id_t,int,uint32,bcm_ptp_clock_port_info_t *);
	int (*ptp_clock_port_latency_set)(int,bcm_ptp_stack_id_t,int,uint32,uint32,uint32);
	int (*ptp_clock_port_log_announce_interval_get)(int,bcm_ptp_stack_id_t,int,uint32,int *);
	int (*ptp_clock_port_log_announce_interval_set)(int,bcm_ptp_stack_id_t,int,uint32,int);
	int (*ptp_clock_port_log_min_delay_req_interval_get)(int,bcm_ptp_stack_id_t,int,uint32,int *);
	int (*ptp_clock_port_log_min_delay_req_interval_set)(int,bcm_ptp_stack_id_t,int,uint32,int);
	int (*ptp_clock_port_log_min_pdelay_req_interval_get)(int,bcm_ptp_stack_id_t,int,uint32,int *);
	int (*ptp_clock_port_log_min_pdelay_req_interval_set)(int,bcm_ptp_stack_id_t,int,uint32,int);
	int (*ptp_clock_port_log_sync_interval_get)(int,bcm_ptp_stack_id_t,int,uint32,int *);
	int (*ptp_clock_port_log_sync_interval_set)(int,bcm_ptp_stack_id_t,int,uint32,int);
	int (*ptp_clock_port_mac_get)(int,bcm_ptp_stack_id_t,int,uint32,bcm_mac_t *);
	int (*ptp_clock_port_protocol_get)(int,bcm_ptp_stack_id_t,int,uint32,bcm_ptp_protocol_t *);
	int (*ptp_clock_port_tlv_config_add)(int,bcm_ptp_stack_id_t,int,uint32,bcm_ptp_tlv_type_t,uint16,uint8 *,bcm_ptp_tlv_action_t,int);
	int (*ptp_clock_port_tlv_config_delete)(int,bcm_ptp_stack_id_t,int,uint32,int);
	int (*ptp_clock_port_tlv_config_delete_all)(int,bcm_ptp_stack_id_t,int,uint32);
	int (*ptp_clock_port_type_get)(int,bcm_ptp_stack_id_t,int,uint32,bcm_ptp_port_type_t *);
	int (*ptp_clock_port_version_number_get)(int,bcm_ptp_stack_id_t,int,uint32,uint32 *);
	int (*ptp_clock_priority1_get)(int,bcm_ptp_stack_id_t,int,uint32 *);
	int (*ptp_clock_priority1_set)(int,bcm_ptp_stack_id_t,int,uint32);
	int (*ptp_clock_priority2_get)(int,bcm_ptp_stack_id_t,int,uint32 *);
	int (*ptp_clock_priority2_set)(int,bcm_ptp_stack_id_t,int,uint32);
	int (*ptp_clock_quality_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_clock_quality_t *,uint32);
	int (*ptp_clock_quality_set)(int,bcm_ptp_stack_id_t,int,bcm_ptp_clock_quality_t,uint32);
	int (*ptp_clock_slaveonly_get)(int,bcm_ptp_stack_id_t,int,uint32 *);
	int (*ptp_clock_slaveonly_set)(int,bcm_ptp_stack_id_t,int,uint32);
	int (*ptp_clock_time_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_timestamp_t *);
	int (*ptp_clock_time_properties_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_time_properties_t *);
	int (*ptp_clock_time_set)(int,bcm_ptp_stack_id_t,int,bcm_ptp_timestamp_t *);
	int (*ptp_clock_timescale_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_timescale_t *);
	int (*ptp_clock_timescale_set)(int,bcm_ptp_stack_id_t,int,bcm_ptp_timescale_t *);
	int (*ptp_clock_tlv_enable_get)(int,bcm_ptp_stack_id_t,int,uint32,int,int *);
	int (*ptp_clock_tlv_enable_set)(int,bcm_ptp_stack_id_t,int,uint32,int,int);
	int (*ptp_clock_traceability_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_trace_t *);
	int (*ptp_clock_traceability_set)(int,bcm_ptp_stack_id_t,int,bcm_ptp_trace_t *);
	int (*ptp_clock_user_description_set)(int,bcm_ptp_stack_id_t,int,uint8 *);
	int (*ptp_clock_utc_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_utc_t *);
	int (*ptp_clock_utc_set)(int,bcm_ptp_stack_id_t,int,bcm_ptp_utc_t *);
	int (*ptp_ctdev_alarm_callback_register)(int,bcm_ptp_stack_id_t,int,bcm_ptp_ctdev_alarm_cb);
	int (*ptp_ctdev_alarm_callback_unregister)(int,bcm_ptp_stack_id_t,int);
	int (*ptp_ctdev_alpha_get)(int,bcm_ptp_stack_id_t,int,uint16 *,uint16 *);
	int (*ptp_ctdev_alpha_set)(int,bcm_ptp_stack_id_t,int,uint16,uint16);
	int (*ptp_ctdev_enable_get)(int,bcm_ptp_stack_id_t,int,int *,uint32 *);
	int (*ptp_ctdev_enable_set)(int,bcm_ptp_stack_id_t,int,int,uint32);
	int (*ptp_ctdev_verbose_get)(int,bcm_ptp_stack_id_t,int,int *);
	int (*ptp_ctdev_verbose_set)(int,bcm_ptp_stack_id_t,int,int);
	int (*ptp_detach)(int);
	int (*ptp_external_phy_synchronize)(int,bcm_ptp_stack_id_t,int,bcm_ptp_external_phy_config_t *);
	int (*ptp_foreign_master_dataset_get)(int,bcm_ptp_stack_id_t,int,int,bcm_ptp_foreign_master_dataset_t *);
	int (*ptp_g8275p1_traceability_info_clock_class_map)(int,bcm_ptp_stack_id_t,int,bcm_ptp_g8275p1_clock_traceability_info_t,uint8 *);
	int (*ptp_init)(int);
	int (*ptp_input_channel_precedence_mode_set)(int,bcm_ptp_stack_id_t,int,int);
	int (*ptp_input_channel_switching_mode_set)(int,bcm_ptp_stack_id_t,int,int);
	int (*ptp_input_channels_get)(int,bcm_ptp_stack_id_t,int,int *,bcm_ptp_channel_t *);
	int (*ptp_input_channels_set)(int,bcm_ptp_stack_id_t,int,int,bcm_ptp_channel_t *);
	int (*ptp_modular_enable_get)(int,bcm_ptp_stack_id_t,int,int *,uint32 *);
	int (*ptp_modular_enable_set)(int,bcm_ptp_stack_id_t,int,int,uint32);
	int (*ptp_modular_phyts_get)(int,bcm_ptp_stack_id_t,int,int *,int *);
	int (*ptp_modular_phyts_set)(int,bcm_ptp_stack_id_t,int,int,int);
	int (*ptp_modular_portbitmap_get)(int,bcm_ptp_stack_id_t,int,bcm_pbmp_t *);
	int (*ptp_modular_portbitmap_set)(int,bcm_ptp_stack_id_t,int,bcm_pbmp_t);
	int (*ptp_modular_verbose_get)(int,bcm_ptp_stack_id_t,int,int *);
	int (*ptp_modular_verbose_set)(int,bcm_ptp_stack_id_t,int,int);
	int (*ptp_packet_counters_clear)(int,bcm_ptp_stack_id_t,int,int,uint32);
	int (*ptp_packet_counters_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_packet_counters_t *);
	int (*ptp_peer_dataset_get)(int,bcm_ptp_stack_id_t,int,int,int,bcm_ptp_peer_entry_t *,int *);
	int (*ptp_phase_offset_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_phase_offset_t *);
	int (*ptp_phase_offset_set)(int,bcm_ptp_stack_id_t,int,const bcm_ptp_phase_offset_t *);
	int (*ptp_pkt_flags_override_get)(int,bcm_ptp_stack_id_t,int,uint32 *,uint32 *);
	int (*ptp_pkt_flags_override_set)(int,bcm_ptp_stack_id_t,int,uint32,uint32);
	int (*ptp_primary_domain_get)(int,bcm_ptp_stack_id_t,int,int *);
	int (*ptp_primary_domain_set)(int,bcm_ptp_stack_id_t,int,int);
	int (*ptp_servo_configuration_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_servo_config_t *);
	int (*ptp_servo_configuration_set)(int,bcm_ptp_stack_id_t,int,bcm_ptp_servo_config_t *);
	int (*ptp_servo_status_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_servo_status_t *);
	int (*ptp_servo_threshold_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_servo_threshold_t *);
	int (*ptp_servo_threshold_set)(int,bcm_ptp_stack_id_t,int,bcm_ptp_servo_threshold_t *);
	int (*ptp_signal_output_get)(int,bcm_ptp_stack_id_t,int,int *,bcm_ptp_signal_output_t *);
	int (*ptp_signal_output_remove)(int,bcm_ptp_stack_id_t,int,int);
	int (*ptp_signal_output_set)(int,bcm_ptp_stack_id_t,int,int *,bcm_ptp_signal_output_t *);
	int (*ptp_signaled_unicast_master_add)(int,bcm_ptp_stack_id_t,int,int,bcm_ptp_clock_unicast_master_t *,uint32);
	int (*ptp_signaled_unicast_master_remove)(int,bcm_ptp_stack_id_t,int,int,bcm_ptp_clock_peer_address_t *);
	int (*ptp_signaled_unicast_slave_list)(int,bcm_ptp_stack_id_t,int,int,int,int *,bcm_ptp_clock_peer_t *);
	int (*ptp_signaled_unicast_slave_table_clear)(int,bcm_ptp_stack_id_t,int,int,int);
	int (*ptp_signaling_arbiter_register)(int,bcm_ptp_stack_id_t,int,bcm_ptp_signaling_arbiter_t,void *);
	int (*ptp_signaling_arbiter_unregister)(int,bcm_ptp_stack_id_t,int);
	int (*ptp_stack_create)(int,bcm_ptp_stack_info_t *);
	int (*ptp_stack_destroy)(int,bcm_ptp_stack_id_t);
	int (*ptp_stack_get)(int,bcm_ptp_stack_id_t,bcm_ptp_stack_info_t *);
	int (*ptp_stack_get_all)(int,int,bcm_ptp_stack_info_t *,int *);
	int (*ptp_static_unicast_master_add)(int,bcm_ptp_stack_id_t,int,int,bcm_ptp_clock_unicast_master_t *);
	int (*ptp_static_unicast_master_list)(int,bcm_ptp_stack_id_t,int,int,int,int *,bcm_ptp_clock_peer_address_t *);
	int (*ptp_static_unicast_master_remove)(int,bcm_ptp_stack_id_t,int,int,bcm_ptp_clock_peer_address_t *);
	int (*ptp_static_unicast_master_table_clear)(int,bcm_ptp_stack_id_t,int,int);
	int (*ptp_static_unicast_master_table_size_get)(int,bcm_ptp_stack_id_t,int,int,int *);
	int (*ptp_static_unicast_slave_add)(int,bcm_ptp_stack_id_t,int,int,bcm_ptp_clock_peer_t *);
	int (*ptp_static_unicast_slave_list)(int,bcm_ptp_stack_id_t,int,int,int,int *,bcm_ptp_clock_peer_t *);
	int (*ptp_static_unicast_slave_remove)(int,bcm_ptp_stack_id_t,int,int,bcm_ptp_clock_peer_t *);
	int (*ptp_static_unicast_slave_table_clear)(int,bcm_ptp_stack_id_t,int,int);
	int (*ptp_sync_phy)(int,bcm_ptp_stack_id_t,int,bcm_ptp_sync_phy_input_t);
	int (*ptp_telecom_g8265_init)(int,bcm_ptp_stack_id_t,int);
	int (*ptp_telecom_g8265_network_option_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_telecom_g8265_network_option_t *);
	int (*ptp_telecom_g8265_network_option_set)(int,bcm_ptp_stack_id_t,int,bcm_ptp_telecom_g8265_network_option_t);
	int (*ptp_telecom_g8265_packet_master_add)(int,bcm_ptp_stack_id_t,int,int,bcm_ptp_clock_port_address_t *);
	int (*ptp_telecom_g8265_packet_master_best_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_telecom_g8265_pktmaster_t *);
	int (*ptp_telecom_g8265_packet_master_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_clock_port_address_t *,bcm_ptp_telecom_g8265_pktmaster_t *);
	int (*ptp_telecom_g8265_packet_master_list)(int,bcm_ptp_stack_id_t,int,int,int *,int *,bcm_ptp_telecom_g8265_pktmaster_t *);
	int (*ptp_telecom_g8265_packet_master_lockout_set)(int,bcm_ptp_stack_id_t,int,uint8,bcm_ptp_clock_port_address_t *);
	int (*ptp_telecom_g8265_packet_master_non_reversion_set)(int,bcm_ptp_stack_id_t,int,uint8,bcm_ptp_clock_port_address_t *);
	int (*ptp_telecom_g8265_packet_master_priority_override)(int,bcm_ptp_stack_id_t,int,uint8,bcm_ptp_clock_port_address_t *);
	int (*ptp_telecom_g8265_packet_master_priority_set)(int,bcm_ptp_stack_id_t,int,uint16,bcm_ptp_clock_port_address_t *);
	int (*ptp_telecom_g8265_packet_master_remove)(int,bcm_ptp_stack_id_t,int,int,bcm_ptp_clock_port_address_t *);
	int (*ptp_telecom_g8265_packet_master_wait_duration_set)(int,bcm_ptp_stack_id_t,int,uint64,bcm_ptp_clock_port_address_t *);
	int (*ptp_telecom_g8265_pktstats_thresholds_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_telecom_g8265_pktstats_t *);
	int (*ptp_telecom_g8265_pktstats_thresholds_set)(int,bcm_ptp_stack_id_t,int,bcm_ptp_telecom_g8265_pktstats_t);
	int (*ptp_telecom_g8265_quality_level_set)(int,bcm_ptp_stack_id_t,int,bcm_ptp_telecom_g8265_quality_level_t);
	int (*ptp_telecom_g8265_receipt_timeout_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_message_type_t,uint32 *);
	int (*ptp_telecom_g8265_receipt_timeout_set)(int,bcm_ptp_stack_id_t,int,bcm_ptp_message_type_t,uint32);
	int (*ptp_telecom_g8265_shutdown)(int);
	int (*ptp_time_format_set)(int,bcm_ptp_stack_id_t,bcm_ptp_time_type_t);
	int (*ptp_timesource_input_status_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_timesource_status_t *);
	int (*ptp_tod_input_sources_get)(int,bcm_ptp_stack_id_t,int,int *,bcm_ptp_tod_input_t *);
	int (*ptp_tod_input_sources_set)(int,bcm_ptp_stack_id_t,int,int,bcm_ptp_tod_input_t *);
	int (*ptp_tod_output_get)(int,bcm_ptp_stack_id_t,int,int *,bcm_ptp_tod_output_t *);
	int (*ptp_tod_output_remove)(int,bcm_ptp_stack_id_t,int,int);
	int (*ptp_tod_output_set)(int,bcm_ptp_stack_id_t,int,int *,bcm_ptp_tod_output_t *);
	int (*ptp_transparent_clock_default_dataset_get)(int,bcm_ptp_stack_id_t,int,bcm_ptp_transparent_clock_default_dataset_t *);
	int (*ptp_transparent_clock_port_dataset_get)(int,bcm_ptp_stack_id_t,int,uint16,bcm_ptp_transparent_clock_port_dataset_t *);
	int (*ptp_unicast_request_duration_get)(int,bcm_ptp_stack_id_t,int,int,uint32 *);
	int (*ptp_unicast_request_duration_max_get)(int,bcm_ptp_stack_id_t,int,int,uint32 *);
	int (*ptp_unicast_request_duration_max_set)(int,bcm_ptp_stack_id_t,int,int,uint32);
	int (*ptp_unicast_request_duration_min_get)(int,bcm_ptp_stack_id_t,int,int,uint32 *);
	int (*ptp_unicast_request_duration_min_set)(int,bcm_ptp_stack_id_t,int,int,uint32);
	int (*ptp_unicast_request_duration_set)(int,bcm_ptp_stack_id_t,int,int,uint32);
#endif	/* INCLUDE_PTP */
	int (*qos_control_get)(int,uint32,bcm_qos_control_type_t,int *);
	int (*qos_control_set)(int,uint32,bcm_qos_control_type_t,int);
	int (*qos_detach)(int);
	/* bcm_qos_egress_model_t_init not dispatchable */
	/* bcm_qos_ingress_model_t_init not dispatchable */
	int (*qos_init)(int);
	int (*qos_map_add)(int,uint32,bcm_qos_map_t *,int);
	int (*qos_map_control_get)(int,uint32,uint32,bcm_qos_map_control_type_t,int *);
	int (*qos_map_control_set)(int,uint32,uint32,bcm_qos_map_control_type_t,int);
	int (*qos_map_create)(int,uint32,int *);
	int (*qos_map_delete)(int,uint32,bcm_qos_map_t *,int);
	int (*qos_map_destroy)(int,int);
	int (*qos_map_id_get_by_profile)(int,uint32,int,int *);
	int (*qos_map_multi_get)(int,uint32,int,int,bcm_qos_map_t *,int *);
	/* bcm_qos_map_t_init not dispatchable */
	int (*qos_multi_get)(int,int,int *,int *,int *);
	int (*qos_port_map_get)(int,bcm_gport_t,int *,int *);
	int (*qos_port_map_set)(int,bcm_gport_t,int,int);
	int (*qos_port_map_type_get)(int,bcm_gport_t,uint32,int *);
	int (*qos_port_vlan_map_get)(int,bcm_port_t,bcm_vlan_t,int *,int *);
	int (*qos_port_vlan_map_set)(int,bcm_port_t,bcm_vlan_t,int,int);
	int (*qos_vpn_map_set)(int,bcm_vpn_t,int,int);
	int (*qos_vpn_map_type_get)(int,bcm_vpn_t,uint32,int *);
	/* bcm_range_config_t_init not dispatchable */
	int (*range_create)(int,int,bcm_range_config_t *);
	int (*range_destroy)(int,bcm_range_t);
	int (*range_get)(int,bcm_range_config_t *);
	/* bcm_range_group_config_t_init not dispatchable */
	int (*range_group_create)(int,bcm_range_group_config_t *);
	int (*range_group_delete)(int,bcm_range_group_config_t *);
	int (*range_group_get)(int,bcm_range_group_config_t *);
	int (*range_group_update)(int,bcm_range_group_config_t *);
	int (*range_oper_mode_get)(int,bcm_range_oper_mode_t *);
	int (*range_oper_mode_set)(int,bcm_range_oper_mode_t);
	int (*range_traverse)(int,bcm_range_traverse_cb,void *);
	int (*rate_bandwidth_get)(int,bcm_port_t,int,uint32 *,uint32 *);
	int (*rate_bandwidth_set)(int,bcm_port_t,int,uint32,uint32);
	int (*rate_bcast_get)(int,int *,int *,int);
	int (*rate_bcast_set)(int,int,int,int);
	int (*rate_dlfbc_get)(int,int *,int *,int);
	int (*rate_dlfbc_set)(int,int,int,int);
	int (*rate_get)(int,int *,int *);
	/* bcm_rate_limit_t_init not dispatchable */
	int (*rate_mcast_get)(int,int *,int *,int);
	int (*rate_mcast_set)(int,int,int,int);
	int (*rate_packet_get)(int,bcm_port_t,bcm_rate_packet_t *);
	int (*rate_packet_set)(int,bcm_port_t,bcm_rate_packet_t *);
	/* bcm_rate_packet_t_init not dispatchable */
	int (*rate_set)(int,int,int);
	int (*rate_type_get)(int,bcm_rate_limit_t *);
	int (*rate_type_set)(int,bcm_rate_limit_t *);
#ifdef	INCLUDE_REGEX
	int (*regex_config_get)(int,bcm_regex_config_t *);
	int (*regex_config_set)(int,bcm_regex_config_t *);
	/* bcm_regex_config_t_init not dispatchable */
	/* bcm_regex_engine_config_t_init not dispatchable */
	int (*regex_engine_create)(int,bcm_regex_engine_config_t *,bcm_regex_engine_t *);
	int (*regex_engine_destroy)(int,bcm_regex_engine_t);
	int (*regex_engine_get)(int,bcm_regex_engine_t,bcm_regex_engine_config_t *);
	int (*regex_engine_info_get)(int,int,bcm_regex_engine_info_t *);
	int (*regex_engine_traverse)(int,bcm_regex_engine_traverse_cb,void *);
	int (*regex_exclude_add)(int,uint8,uint16,uint16);
	int (*regex_exclude_delete)(int,uint8,uint16,uint16);
	int (*regex_exclude_delete_all)(int);
	int (*regex_exclude_get)(int,int,uint8 *,uint16 *,uint16 *,int *);
	int (*regex_get_match_id)(int,int,int *);
	int (*regex_get_sig_id)(int,int,int *);
	int (*regex_info_get)(int,bcm_regex_info_t *);
	int (*regex_init)(int);
	int (*regex_match_check)(int,bcm_regex_match_t *,int,int *);
	int (*regex_match_set)(int,bcm_regex_engine_t,bcm_regex_match_t *,int);
	/* bcm_regex_match_t_init not dispatchable */
	int (*regex_policy_action_add)(int,bcm_regex_policy_t,bcm_field_action_t,uint32,uint32);
	int (*regex_policy_action_delete)(int,bcm_regex_policy_t,bcm_field_action_t,uint32,uint32);
	int (*regex_policy_action_get)(int,bcm_regex_policy_t,bcm_field_action_t,uint32 *,uint32 *);
	int (*regex_policy_action_mac_add)(int,bcm_regex_policy_t,bcm_field_action_t,bcm_mac_t);
	int (*regex_policy_action_mac_get)(int,bcm_regex_policy_t,bcm_field_action_t,bcm_mac_t *);
	int (*regex_policy_action_ports_add)(int,bcm_regex_policy_t,bcm_field_action_t,bcm_pbmp_t);
	int (*regex_policy_action_ports_get)(int,bcm_regex_policy_t,bcm_field_action_t,bcm_pbmp_t *);
	int (*regex_policy_action_remove)(int,bcm_regex_policy_t,bcm_field_action_t);
	int (*regex_policy_action_remove_all)(int,bcm_regex_policy_t);
	int (*regex_policy_create)(int,int,bcm_regex_policy_t *);
	int (*regex_policy_destroy)(int,bcm_regex_policy_t);
	int (*regex_policy_destroy_all)(int);
	int (*regex_policy_install)(int,bcm_regex_policy_t);
	int (*regex_policy_policer_attach)(int,bcm_regex_policy_t,int,bcm_policer_t);
	int (*regex_policy_policer_detach)(int,bcm_regex_policy_t,int);
	int (*regex_policy_policer_detach_all)(int,bcm_regex_policy_t);
	int (*regex_policy_policer_get)(int,bcm_regex_policy_t,int,bcm_policer_t *);
	int (*regex_policy_remove)(int,bcm_regex_policy_t);
	int (*regex_policy_stat_attach)(int,bcm_regex_policy_t,int);
	int (*regex_policy_stat_detach)(int,bcm_regex_policy_t,int);
	int (*regex_policy_stat_get)(int,bcm_regex_policy_t,int *);
	int (*regex_report_register)(int,uint32,bcm_regex_report_cb,void *);
	/* bcm_regex_report_t_init not dispatchable */
	int (*regex_report_unregister)(int,uint32,bcm_regex_report_cb,void *);
	int (*regex_session_add)(int,int,bcm_regex_session_key_t *,bcm_regex_session_t *);
	int (*regex_session_delete)(int,bcm_regex_session_key_t *);
	int (*regex_session_delete_all)(int);
	int (*regex_session_get)(int,int,bcm_regex_session_key_t *,bcm_regex_session_t *);
	/* bcm_regex_session_key_t_init not dispatchable */
	int (*regex_session_policy_update)(int,int,int,bcm_regex_policy_t);
	/* bcm_regex_session_t_init not dispatchable */
	int (*regex_session_traverse)(int,int,bcm_regex_session_traverse_cb,void *);
	int (*regex_stat_create)(int,int,int,bcm_field_stat_t *,int *);
	int (*regex_stat_destroy)(int,int);
	int (*regex_stat_get)(int,bcm_regex_stat_t,uint64 *);
	int (*regex_stat_set)(int,bcm_regex_stat_t,uint64);
#endif	/* INCLUDE_REGEX */
	int (*rx_CopyToCpu_config_add)(int,uint32,bcm_rx_CopyToCpu_config_t *);
	int (*rx_CopyToCpu_config_delete)(int,int);
	int (*rx_CopyToCpu_config_delete_all)(int);
	int (*rx_CopyToCpu_config_get)(int,int,bcm_rx_CopyToCpu_config_t *);
	int (*rx_CopyToCpu_config_get_all)(int,int,bcm_rx_CopyToCpu_config_t *,int *);
	/* bcm_rx_CopyToCpu_config_t_init not dispatchable */
	int (*rx_active)(int);
	int (*rx_alloc)(int,int,uint32,void **);
	int (*rx_burst_get)(int,int *);
	int (*rx_burst_set)(int,int);
	int (*rx_cfg_get)(int,bcm_rx_cfg_t *);
	int (*rx_cfg_init)(int);
	/* bcm_rx_cfg_t_init not dispatchable */
	int (*rx_channels_running)(int,uint32 *);
	int (*rx_clear)(int);
	int (*rx_control_get)(int,bcm_rx_control_t,int *);
	int (*rx_control_set)(int,bcm_rx_control_t,int);
	int (*rx_cos_burst_get)(int,int,int *);
	int (*rx_cos_burst_set)(int,int,int);
	int (*rx_cos_max_len_get)(int,int,int *);
	int (*rx_cos_max_len_set)(int,int,int);
	int (*rx_cos_rate_get)(int,int,int *);
	int (*rx_cos_rate_set)(int,int,int);
	int (*rx_cosq_mapping_delete)(int,int);
	int (*rx_cosq_mapping_extended_add)(int,uint32,bcm_rx_cosq_mapping_t *);
	int (*rx_cosq_mapping_extended_delete)(int,bcm_rx_cosq_mapping_t *);
	int (*rx_cosq_mapping_extended_delete_all)(int);
	int (*rx_cosq_mapping_extended_get)(int,bcm_rx_cosq_mapping_t *);
	int (*rx_cosq_mapping_extended_set)(int,uint32,bcm_rx_cosq_mapping_t *);
	int (*rx_cosq_mapping_get)(int,int,bcm_rx_reasons_t *,bcm_rx_reasons_t *,uint8 *,uint8 *,uint32 *,uint32 *,bcm_cos_queue_t *);
	int (*rx_cosq_mapping_reasons_get)(int,bcm_rx_reasons_t *);
	int (*rx_cosq_mapping_set)(int,int,bcm_rx_reasons_t,bcm_rx_reasons_t,uint8,uint8,uint32,uint32,bcm_cos_queue_t);
	int (*rx_cosq_mapping_size_get)(int,int *);
	/* bcm_rx_cosq_mapping_t_init not dispatchable */
	int (*rx_cpu_rate_get)(int,int *);
	int (*rx_cpu_rate_set)(int,int);
	int (*rx_free)(int,void *);
	int (*rx_free_enqueue)(int,void *);
	int (*rx_init)(int);
	/* bcm_rx_mtu_config_t_init not dispatchable */
	int (*rx_mtu_get)(int,bcm_rx_mtu_config_t *);
	int (*rx_mtu_profile_get)(int,uint32,bcm_rx_mtu_profile_key_t *,bcm_rx_mtu_profile_value_t *);
	/* bcm_rx_mtu_profile_key_t_init not dispatchable */
	int (*rx_mtu_profile_set)(int,uint32,bcm_rx_mtu_profile_key_t *,bcm_rx_mtu_profile_value_t *);
	/* bcm_rx_mtu_profile_value_t_init not dispatchable */
	int (*rx_mtu_set)(int,bcm_rx_mtu_config_t *);
	/* bcm_rx_pool_alloc not dispatchable */
	/* bcm_rx_pool_cleanup not dispatchable */
	/* bcm_rx_pool_dump not dispatchable */
	/* bcm_rx_pool_free not dispatchable */
	/* bcm_rx_pool_free_verify not dispatchable */
	/* bcm_rx_pool_own not dispatchable */
	/* bcm_rx_pool_report not dispatchable */
	/* bcm_rx_pool_setup not dispatchable */
	/* bcm_rx_pool_setup_done not dispatchable */
	int (*rx_queue_channel_get)(int,bcm_cos_queue_t,bcm_rx_chan_t *);
	int (*rx_queue_channel_set)(int,bcm_cos_queue_t,bcm_rx_chan_t);
	int (*rx_queue_max_get)(int,bcm_cos_queue_t *);
	int (*rx_queue_packet_count_get)(int,bcm_cos_queue_t,int *);
	int (*rx_queue_rate_limit_status_get)(int,bcm_cos_queue_t,int *);
	int (*rx_queue_register)(int,const char *,bcm_cos_queue_t,bcm_rx_cb_f,uint8,void *,uint32);
	int (*rx_queue_unregister)(int,bcm_cos_queue_t,bcm_rx_cb_f,uint8);
	int (*rx_rate_get)(int,int *);
	int (*rx_rate_set)(int,int);
	int (*rx_reasons_get)(int,bcm_rx_reasons_t *);
	int (*rx_reasons_policer_set)(int,bcm_rx_reasons_t,bcm_policer_t);
	/* bcm_rx_reasons_t_init not dispatchable */
	int (*rx_redirect_reasons_get)(int,bcm_rx_redirect_t,bcm_rx_reasons_t *);
	int (*rx_redirect_reasons_set)(int,bcm_rx_redirect_t,bcm_rx_reasons_t);
	int (*rx_register)(int,const char *,bcm_rx_cb_f,uint8,void *,uint32);
	/* bcm_rx_remote_pkt_alloc not dispatchable */
	int (*rx_remote_pkt_enqueue)(int,bcm_pkt_t *);
	/* bcm_rx_remote_pkt_free not dispatchable */
	int (*rx_sched_register)(int,bcm_rx_sched_cb);
	int (*rx_sched_unregister)(int);
#ifdef	BROADCOM_DEBUG
	int (*rx_show)(int);
	/* bcm_rx_snoop_config_t_init not dispatchable */
#endif	/* BROADCOM_DEBUG */
	int (*rx_snoop_create)(int,int,int *);
	int (*rx_snoop_destroy)(int,int,int);
	int (*rx_snoop_get)(int,int,bcm_rx_snoop_config_t *);
	int (*rx_snoop_set)(int,int,bcm_rx_snoop_config_t *);
	int (*rx_start)(int,bcm_rx_cfg_t *);
	int (*rx_stop)(int,bcm_rx_cfg_t *);
	int (*rx_trap_action_profile_clear)(int,bcm_rx_trap_t);
	int (*rx_trap_action_profile_get)(int,bcm_rx_trap_t,bcm_gport_t *);
	int (*rx_trap_action_profile_set)(int,uint32,bcm_rx_trap_t,bcm_gport_t);
	/* bcm_rx_trap_config_t_init not dispatchable */
	int (*rx_trap_get)(int,int,bcm_rx_trap_config_t *);
	/* bcm_rx_trap_lif_config_t_init not dispatchable */
	int (*rx_trap_lif_get)(int,bcm_rx_trap_lif_config_t *);
	int (*rx_trap_lif_set)(int,uint32,bcm_rx_trap_lif_config_t *);
	/* bcm_rx_trap_prog_config_t_init not dispatchable */
	int (*rx_trap_prog_get)(int,uint8,bcm_rx_trap_prog_config_t *);
	int (*rx_trap_prog_set)(int,uint32,uint8,bcm_rx_trap_prog_config_t *);
	int (*rx_trap_protocol_clear)(int,bcm_rx_trap_protocol_key_t *);
	int (*rx_trap_protocol_get)(int,bcm_rx_trap_protocol_key_t *,bcm_gport_t *);
	int (*rx_trap_protocol_interface_profiles_get)(int,bcm_if_t,bcm_rx_trap_protocol_profiles_t *);
	int (*rx_trap_protocol_interface_profiles_set)(int,bcm_if_t,bcm_rx_trap_protocol_profiles_t *);
	/* bcm_rx_trap_protocol_key_t_init not dispatchable */
	int (*rx_trap_protocol_profiles_get)(int,bcm_gport_t,bcm_rx_trap_protocol_profiles_t *);
	int (*rx_trap_protocol_profiles_set)(int,bcm_gport_t,bcm_rx_trap_protocol_profiles_t *);
	/* bcm_rx_trap_protocol_profiles_t_init not dispatchable */
	int (*rx_trap_protocol_set)(int,bcm_rx_trap_protocol_key_t *,bcm_gport_t);
	int (*rx_trap_set)(int,int,bcm_rx_trap_config_t *);
	int (*rx_trap_svtag_get)(int,bcm_rx_trap_svtag_key_t *,bcm_gport_t *);
	/* bcm_rx_trap_svtag_key_t_init not dispatchable */
	int (*rx_trap_svtag_set)(int,bcm_rx_trap_svtag_key_t *,bcm_gport_t);
	int (*rx_trap_sw_to_hw_id_map_get)(int,uint32,int,int *);
	int (*rx_trap_type_create)(int,int,bcm_rx_trap_t,int *);
	int (*rx_trap_type_destroy)(int,int);
	int (*rx_trap_type_from_id_get)(int,int,int,bcm_rx_trap_t *);
	int (*rx_trap_type_get)(int,int,bcm_rx_trap_t,int *);
	int (*rx_unit_next_get)(int,int *);
	int (*rx_unregister)(int,bcm_rx_cb_f,uint8);
	int (*sat_config_get)(int,bcm_sat_config_t *);
	int (*sat_config_set)(int,bcm_sat_config_t *);
	/* bcm_sat_config_t_init not dispatchable */
	int (*sat_ctf_availability_config_set)(int,bcm_sat_ctf_t,bcm_sat_ctf_availability_config_t *);
	/* bcm_sat_ctf_availability_config_t_init not dispatchable */
	int (*sat_ctf_bin_limit_get)(int,int,bcm_sat_ctf_bin_limit_t *,int *);
	int (*sat_ctf_bin_limit_set)(int,int,bcm_sat_ctf_bin_limit_t *);
	/* bcm_sat_ctf_bin_limit_t_init not dispatchable */
	int (*sat_ctf_create)(int,uint32,bcm_sat_ctf_t *);
	int (*sat_ctf_destroy)(int,bcm_sat_ctf_t);
	int (*sat_ctf_destroy_all)(int);
	int (*sat_ctf_identifier_map)(int,bcm_sat_ctf_identifier_t *,bcm_sat_ctf_t);
	/* bcm_sat_ctf_identifier_t_init not dispatchable */
	int (*sat_ctf_identifier_unmap)(int,bcm_sat_ctf_identifier_t *);
	int (*sat_ctf_packet_config)(int,bcm_sat_ctf_t,bcm_sat_ctf_packet_info_t *);
	/* bcm_sat_ctf_packet_info_t_init not dispatchable */
	/* bcm_sat_ctf_report_config_t_init not dispatchable */
	int (*sat_ctf_reports_config_set)(int,bcm_sat_ctf_t,bcm_sat_ctf_report_config_t *);
	int (*sat_ctf_stat_config_set)(int,bcm_sat_ctf_t,bcm_sat_ctf_stat_config_t *);
	/* bcm_sat_ctf_stat_config_t_init not dispatchable */
	int (*sat_ctf_stat_get)(int,bcm_sat_ctf_t,uint32,bcm_sat_ctf_stat_t *);
	/* bcm_sat_ctf_stat_t_init not dispatchable */
	int (*sat_ctf_trap_add)(int,uint32);
	int (*sat_ctf_trap_data_to_session_map)(int,uint32,uint32,uint32);
	int (*sat_ctf_trap_data_to_session_unmap)(int,uint32,uint32);
	int (*sat_ctf_trap_remove)(int,uint32);
	int (*sat_ctf_trap_remove_all)(int);
	int (*sat_ctf_traverse)(int,bcm_sat_ctf_traverse_cb,void *);
	int (*sat_endpoint_create)(int,bcm_sat_endpoint_info_t *);
	int (*sat_endpoint_destroy)(int,bcm_sat_endpoint_t,uint32);
	int (*sat_endpoint_destroy_all)(int,uint32);
	int (*sat_endpoint_get)(int,bcm_sat_endpoint_t,uint32,bcm_sat_endpoint_info_t *);
	/* bcm_sat_endpoint_info_t_init not dispatchable */
	int (*sat_endpoint_traverse)(int,uint32,bcm_sat_endpoint_traverse_cb,void *);
	int (*sat_event_register)(int,bcm_sat_event_type_t,bcm_sat_event_cb,void *);
	int (*sat_event_unregister)(int,bcm_sat_event_type_t,bcm_sat_event_cb);
	int (*sat_gtf_bandwidth_get)(int,bcm_sat_gtf_t,int,bcm_sat_gtf_bandwidth_t *);
	int (*sat_gtf_bandwidth_set)(int,bcm_sat_gtf_t,int,bcm_sat_gtf_bandwidth_t *);
	/* bcm_sat_gtf_bandwidth_t_init not dispatchable */
	int (*sat_gtf_create)(int,uint32,bcm_sat_gtf_t *);
	int (*sat_gtf_destroy)(int,bcm_sat_gtf_t);
	int (*sat_gtf_destroy_all)(int);
	int (*sat_gtf_packet_config)(int,bcm_sat_gtf_t,bcm_sat_gtf_packet_config_t *);
	int (*sat_gtf_packet_config_get)(int,bcm_sat_gtf_t,bcm_sat_gtf_packet_config_t *);
	int (*sat_gtf_packet_config_set)(int,bcm_sat_gtf_t,bcm_sat_gtf_packet_config_t *);
	/* bcm_sat_gtf_packet_config_t_init not dispatchable */
	/* bcm_sat_gtf_packet_edit_t_init not dispatchable */
	int (*sat_gtf_packet_start)(int,bcm_sat_gtf_t,bcm_sat_gtf_pri_t);
	int (*sat_gtf_packet_stop)(int,bcm_sat_gtf_t,bcm_sat_gtf_pri_t);
	int (*sat_gtf_rate_pattern_get)(int,bcm_sat_gtf_t,int,bcm_sat_gtf_rate_pattern_t *);
	int (*sat_gtf_rate_pattern_set)(int,bcm_sat_gtf_t,int,bcm_sat_gtf_rate_pattern_t *);
	/* bcm_sat_gtf_rate_pattern_t_init not dispatchable */
	int (*sat_gtf_stat_get)(int,bcm_sat_gtf_t,int,uint32,bcm_sat_gtf_stat_counter_t,uint64 *);
	int (*sat_gtf_stat_multi_get)(int,bcm_sat_gtf_t,bcm_sat_gtf_stat_multi_t *);
	int (*sat_gtf_traverse)(int,bcm_sat_gtf_traverse_cb,void *);
	/* bcm_sat_header_user_define_offsets_t_init not dispatchable */
	/* bcm_sat_payload_t_init not dispatchable */
	/* bcm_sat_stamp_t_init not dispatchable */
	int (*srv6_extension_terminator_add)(int,bcm_srv6_extension_terminator_mapping_t *);
	int (*srv6_extension_terminator_delete)(int,bcm_srv6_extension_terminator_mapping_t *);
	int (*srv6_extension_terminator_get)(int,bcm_srv6_extension_terminator_mapping_t *);
	/* bcm_srv6_extension_terminator_mapping_t_init not dispatchable */
	int (*srv6_extension_terminator_traverse)(int,bcm_srv6_extension_terminator_traverse_info_t,bcm_srv6_extension_terminator_traverse_cb,void *);
	int (*srv6_sid_initiator_create)(int,bcm_srv6_sid_initiator_info_t *);
	int (*srv6_sid_initiator_delete)(int,bcm_srv6_sid_initiator_info_t *);
	int (*srv6_sid_initiator_get)(int,bcm_srv6_sid_initiator_info_t *);
	/* bcm_srv6_sid_initiator_info_t_init not dispatchable */
	int (*srv6_sid_initiator_traverse)(int,bcm_srv6_sid_initiator_traverse_info_t,bcm_srv6_sid_initiator_traverse_cb,void *);
	int (*srv6_srh_base_initiator_create)(int,bcm_srv6_srh_base_initiator_info_t *);
	int (*srv6_srh_base_initiator_delete)(int,bcm_srv6_srh_base_initiator_info_t *);
	int (*srv6_srh_base_initiator_get)(int,bcm_srv6_srh_base_initiator_info_t *);
	/* bcm_srv6_srh_base_initiator_info_t_init not dispatchable */
	int (*srv6_srh_base_initiator_traverse)(int,bcm_srv6_srh_base_initiator_traverse_info_t,bcm_srv6_srh_base_initiator_traverse_cb,void *);
	int (*stat_clear)(int,bcm_port_t);
	int (*stat_clear_single)(int,bcm_port_t,bcm_stat_val_t);
	int (*stat_control_get)(int,int,bcm_stat_control_t,int *);
	int (*stat_control_set)(int,int,bcm_stat_control_t,int);
	/* bcm_stat_counter_command_id_key_t_init not dispatchable */
	int (*stat_counter_config_get)(int,bcm_stat_counter_engine_t *,bcm_stat_counter_config_t *);
	int (*stat_counter_config_set)(int,bcm_stat_counter_engine_t *,bcm_stat_counter_config_t *);
	int (*stat_counter_database_control_get)(int,uint32,bcm_stat_counter_database_t *,bcm_stat_counter_database_control_t,uint32 *);
	int (*stat_counter_database_control_set)(int,uint32,bcm_stat_counter_database_t *,bcm_stat_counter_database_control_t,uint32);
	int (*stat_counter_database_create)(int,uint32,bcm_core_t,int *);
	int (*stat_counter_database_destroy)(int,uint32,bcm_stat_counter_database_t *);
	int (*stat_counter_database_enable_get)(int,uint32,bcm_stat_counter_database_t *,bcm_stat_counter_enable_t *);
	int (*stat_counter_database_enable_set)(int,uint32,bcm_stat_counter_database_t *,bcm_stat_counter_enable_t *);
	/* bcm_stat_counter_database_t_init not dispatchable */
	/* bcm_stat_counter_enable_t_init not dispatchable */
	int (*stat_counter_engine_attach)(int,uint32,bcm_stat_counter_database_t *,int);
	int (*stat_counter_engine_control_get)(int,uint32,bcm_stat_engine_t *,bcm_stat_counter_engine_control_t,uint32 *);
	int (*stat_counter_engine_control_set)(int,uint32,bcm_stat_engine_t *,bcm_stat_counter_engine_control_t,uint32);
	int (*stat_counter_engine_detach)(int,uint32,bcm_stat_counter_database_t *,int);
	int (*stat_counter_eviction_get)(int,uint32,bcm_stat_engine_t *,bcm_stat_eviction_t *);
	int (*stat_counter_eviction_set)(int,uint32,bcm_stat_engine_t *,bcm_stat_eviction_t *);
	int (*stat_counter_expansion_select_get)(int,uint32,bcm_stat_counter_interface_key_t *,bcm_stat_expansion_select_t *);
	int (*stat_counter_expansion_select_set)(int,uint32,bcm_stat_counter_interface_key_t *,bcm_stat_expansion_select_t *);
	int (*stat_counter_explicit_get)(int,uint32,bcm_stat_counter_explicit_input_data_t *,bcm_stat_counter_output_data_t *);
	/* bcm_stat_counter_explicit_input_data_t_init not dispatchable */
	int (*stat_counter_filter_get)(int,bcm_stat_counter_source_t,int,bcm_stat_counter_filter_t *,int *);
	int (*stat_counter_filter_group_get)(int,uint32,bcm_stat_counter_command_id_key_t *,bcm_stat_counter_group_filter_t,int *);
	int (*stat_counter_filter_group_set)(int,uint32,bcm_stat_counter_command_id_key_t *,bcm_stat_counter_group_filter_t,int);
	int (*stat_counter_filter_is_active_get)(int,bcm_stat_counter_source_t,bcm_stat_counter_filter_t,int *);
	int (*stat_counter_filter_set)(int,bcm_stat_counter_source_t,bcm_stat_counter_filter_t *,int,int);
	int (*stat_counter_get)(int,uint32,bcm_stat_counter_input_data_t *,bcm_stat_counter_output_data_t *);
	/* bcm_stat_counter_input_data_t_init not dispatchable */
	int (*stat_counter_interface_get)(int,uint32,bcm_stat_counter_database_t *,bcm_stat_counter_interface_t *);
	/* bcm_stat_counter_interface_key_t_init not dispatchable */
	int (*stat_counter_interface_set)(int,uint32,bcm_stat_counter_database_t *,bcm_stat_counter_interface_t *);
	/* bcm_stat_counter_interface_t_init not dispatchable */
	int (*stat_counter_lif_counting_get)(int,uint32,bcm_stat_counter_source_t *,bcm_stat_counter_lif_mask_t *,bcm_stat_counter_lif_stack_id_t *);
	int (*stat_counter_lif_counting_range_get)(int,uint32,bcm_stat_counter_source_type_t,bcm_stat_counter_lif_range_id_t,bcm_stat_counter_lif_counting_range_t *);
	int (*stat_counter_lif_counting_range_set)(int,uint32,bcm_stat_counter_source_type_t,bcm_stat_counter_lif_range_id_t,bcm_stat_counter_lif_counting_range_t *);
	int (*stat_counter_lif_counting_set)(int,uint32,bcm_stat_counter_source_t *,bcm_stat_counter_lif_mask_t *,bcm_stat_counter_lif_stack_id_t);
	/* bcm_stat_counter_output_data_t_init not dispatchable */
	/* bcm_stat_counter_set_map_t_init not dispatchable */
	int (*stat_counter_set_mapping_get)(int,uint32,bcm_stat_counter_database_t *,bcm_stat_counter_set_map_t *);
	int (*stat_counter_set_mapping_set)(int,uint32,bcm_stat_counter_database_t *,bcm_stat_counter_set_map_t *);
	int (*stat_custom_add)(int,bcm_port_t,bcm_stat_val_t,bcm_custom_stat_trigger_t);
	int (*stat_custom_check)(int,bcm_port_t,bcm_stat_val_t,bcm_custom_stat_trigger_t,int *);
	int (*stat_custom_counter_id_move)(int,bcm_stat_custom_base_index_action_t,bcm_stat_custom_counter_info_t,bcm_stat_custom_counter_info_t *);
	/* bcm_stat_custom_counter_info_t_init not dispatchable */
	int (*stat_custom_delete)(int,bcm_port_t,bcm_stat_val_t,bcm_custom_stat_trigger_t);
	int (*stat_custom_delete_all)(int,bcm_port_t,bcm_stat_val_t);
	int (*stat_custom_get)(int,bcm_port_t,bcm_stat_val_t,uint32 *);
	int (*stat_custom_group_create)(int,uint32,bcm_stat_object_t,uint32 *,uint32 *);
	int (*stat_custom_group_id_create)(int,uint32,bcm_stat_object_t,uint32,uint32,bcm_stat_custom_counter_info_t *);
	int (*stat_custom_set)(int,bcm_port_t,bcm_stat_val_t,uint32);
	int (*stat_database_eviction_boundaries_get)(int,uint32,bcm_stat_counter_database_t *,int,bcm_stat_eviction_boundaries_t *);
	int (*stat_database_eviction_boundaries_set)(int,uint32,bcm_stat_counter_database_t *,int,bcm_stat_eviction_boundaries_t *);
	int (*stat_direct_get)(int,bcm_port_t,bcm_stat_val_t,uint64 *);
	int (*stat_direct_multi_get)(int,bcm_port_t,int,bcm_stat_val_t *,uint64 *);
	int (*stat_drop_event_counter_get)(int,bcm_pkt_drop_event_t,uint64 *);
	int (*stat_drop_event_counter_set)(int,bcm_pkt_drop_event_t,uint64);
	int (*stat_drop_event_counter_sync_get)(int,bcm_pkt_drop_event_t,uint64 *);
	int (*stat_egress_receive_tm_pointer_format_get)(int,int,bcm_stat_egress_receive_tm_pointer_format_t *);
	int (*stat_egress_receive_tm_pointer_format_set)(int,int,bcm_stat_egress_receive_tm_pointer_format_t *);
	/* bcm_stat_engine_t_init not dispatchable */
	int (*stat_eviction_boundaries_get)(int,uint32,bcm_stat_engine_t *,bcm_stat_eviction_boundaries_t *);
	int (*stat_eviction_boundaries_set)(int,uint32,bcm_stat_engine_t *,bcm_stat_eviction_boundaries_t *);
	/* bcm_stat_eviction_boundaries_t_init not dispatchable */
	/* bcm_stat_eviction_t_init not dispatchable */
	/* bcm_stat_expansion_data_mapping_t_init not dispatchable */
	/* bcm_stat_expansion_select_t_init not dispatchable */
	int (*stat_flex_counter_get)(int,uint32,bcm_stat_flex_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*stat_flex_counter_set)(int,uint32,bcm_stat_flex_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*stat_flex_counter_sync_get)(int,uint32,bcm_stat_flex_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*stat_flex_pool_info_multi_get)(int,bcm_stat_flex_direction_t,uint32,bcm_stat_flex_pool_stat_info_t *,uint32 *);
	/* bcm_stat_flex_pool_stat_info_t_init not dispatchable */
	int (*stat_get)(int,bcm_port_t,bcm_stat_val_t,uint64 *);
	int (*stat_get32)(int,bcm_port_t,bcm_stat_val_t,uint32 *);
	int (*stat_group_create)(int,bcm_stat_object_t,bcm_stat_group_mode_t,uint32 *,uint32 *);
	int (*stat_group_destroy)(int,uint32);
	int (*stat_group_drop_reasons_get)(int,uint32,bcm_stat_counter_group_filter_t,int,bcm_cosq_drop_reason_t *,int *);
	int (*stat_group_drop_reasons_set)(int,uint32,bcm_stat_counter_group_filter_t,bcm_cosq_drop_reason_t *,int);
	int (*stat_group_dump)(int,bcm_stat_object_t,bcm_stat_group_mode_t);
	int (*stat_group_dump_all)(int);
	int (*stat_group_mode_attr_class_id_create)(int,bcm_stat_group_mode_attr_t,uint32,uint32 *,bcm_stat_group_mode_attr_class_id_t *);
	int (*stat_group_mode_attr_class_id_destroy)(int,bcm_stat_group_mode_attr_class_id_t);
	/* bcm_stat_group_mode_attr_selector_t_init not dispatchable */
	/* bcm_stat_group_mode_hint_t_init not dispatchable */
	int (*stat_group_mode_id_config_create)(int,uint32,bcm_stat_group_mode_id_config_t *,uint32,bcm_stat_group_mode_attr_selector_t *,uint32 *);
	int (*stat_group_mode_id_config_get)(int,uint32,bcm_stat_group_mode_id_config_t *,uint32,bcm_stat_group_mode_attr_selector_t *,uint32 *);
	/* bcm_stat_group_mode_id_config_t_init not dispatchable */
	int (*stat_group_mode_id_create)(int,uint32,uint32,uint32,bcm_stat_group_mode_attr_selector_t *,uint32 *);
	int (*stat_group_mode_id_destroy)(int,uint32);
	int (*stat_group_mode_id_get)(int,uint32,uint32 *,uint32 *,uint32,bcm_stat_group_mode_attr_selector_t *,uint32 *);
	int (*stat_id_get_all)(int,bcm_stat_object_t,int,uint32 *,int *);
	int (*stat_init)(int);
	int (*stat_latency_port_stat_id_get)(int,int,bcm_stat_latency_port_stat_id_key_t *,int *);
	int (*stat_lif_counting_profile_get)(int,uint32,int,bcm_stat_lif_counting_t *);
	int (*stat_lif_counting_profile_set)(int,uint32,int,bcm_stat_lif_counting_t *);
	int (*stat_lif_counting_stack_level_priority_get)(int,uint32,bcm_stat_lif_counting_source_t *,bcm_stat_counter_lif_stack_id_t,int *);
	int (*stat_lif_counting_stack_level_priority_set)(int,uint32,bcm_stat_lif_counting_source_t *,bcm_stat_counter_lif_stack_id_t,int);
	int (*stat_multi_get)(int,bcm_port_t,int,bcm_stat_val_t *,uint64 *);
	int (*stat_multi_get32)(int,bcm_port_t,int,bcm_stat_val_t *,uint32 *);
	int (*stat_pkt_size_adjust_select_get)(int,int,bcm_stat_counter_command_id_key_t *,bcm_stat_pkt_size_adjust_select_type_t,int *);
	int (*stat_pkt_size_adjust_select_set)(int,int,bcm_stat_counter_command_id_key_t *,bcm_stat_pkt_size_adjust_select_type_t,int);
	int (*stat_port_group_create)(int,uint32,bcm_gport_t *,uint32 *);
	int (*stat_port_group_destroy)(int,uint32);
	/* bcm_stat_pp_info_t_init not dispatchable */
	int (*stat_pp_metadata_get)(int,bcm_stat_pp_metadata_info_t *);
	/* bcm_stat_pp_metadata_info_t_init not dispatchable */
	int (*stat_pp_metadata_set)(int,bcm_stat_pp_metadata_info_t *);
	int (*stat_pp_profile_create)(int,int,bcm_stat_counter_interface_type_t,int *,bcm_stat_pp_profile_info_t *);
	int (*stat_pp_profile_delete)(int,int);
	int (*stat_pp_profile_get)(int,int,bcm_stat_pp_profile_info_t *);
	/* bcm_stat_pp_profile_info_t_init not dispatchable */
	int (*stat_stif_record_format_get)(int,int,int,bcm_stat_stif_record_format_element_t *,int *);
	int (*stat_stif_record_format_set)(int,int,int,bcm_stat_stif_record_format_element_t *);
	int (*stat_stif_source_mapping_get)(int,int,bcm_stat_stif_source_t,bcm_port_t *);
	int (*stat_stif_source_mapping_set)(int,int,bcm_stat_stif_source_t,bcm_port_t);
	int (*stat_sync)(int);
	int (*stat_sync_get)(int,bcm_port_t,bcm_stat_val_t,uint64 *);
	int (*stat_sync_get32)(int,bcm_port_t,bcm_stat_val_t,uint32 *);
	int (*stat_sync_multi_get)(int,bcm_port_t,int,bcm_stat_val_t *,uint64 *);
	int (*stat_sync_multi_get32)(int,bcm_port_t,int,bcm_stat_val_t *,uint32 *);
	int (*stat_threshold_get)(int,bcm_port_t,bcm_stat_val_t,bcm_stat_threshold_t *);
	int (*stat_threshold_set)(int,bcm_port_t,bcm_stat_val_t,bcm_stat_threshold_t *);
	int (*stat_trace_event_counter_get)(int,bcm_pkt_trace_event_t,uint64 *);
	int (*stat_trace_event_counter_set)(int,bcm_pkt_trace_event_t,uint64);
	int (*stat_trace_event_counter_sync_get)(int,bcm_pkt_trace_event_t,uint64 *);
	/* bcm_stat_value_t_init not dispatchable */
	int (*stg_clear)(int);
	int (*stg_count_get)(int,int *);
	int (*stg_create)(int,bcm_stg_t *);
	int (*stg_create_id)(int,bcm_stg_t);
	int (*stg_default_get)(int,bcm_stg_t *);
	int (*stg_default_set)(int,bcm_stg_t);
	int (*stg_destroy)(int,bcm_stg_t);
	int (*stg_init)(int);
	int (*stg_list)(int,bcm_stg_t **,int *);
	int (*stg_list_destroy)(int,bcm_stg_t *,int);
	int (*stg_stp_get)(int,bcm_stg_t,bcm_port_t,int *);
	int (*stg_stp_set)(int,bcm_stg_t,bcm_port_t,int);
	int (*stg_vlan_add)(int,bcm_stg_t,bcm_vlan_t);
	int (*stg_vlan_list)(int,bcm_stg_t,bcm_vlan_t **,int *);
	int (*stg_vlan_list_destroy)(int,bcm_vlan_t *,int);
	int (*stg_vlan_remove)(int,bcm_stg_t,bcm_vlan_t);
	int (*stg_vlan_remove_all)(int,bcm_stg_t);
	int (*stk_domain_stk_trunk_add)(int,int,bcm_trunk_t);
	int (*stk_domain_stk_trunk_delete)(int,int,bcm_trunk_t);
	int (*stk_domain_stk_trunk_get)(int,bcm_trunk_t,int,int *,int *);
	int (*stk_fmod_lmod_mapping_get)(int,bcm_port_t,bcm_module_t *,bcm_module_t *);
	int (*stk_fmod_lmod_mapping_set)(int,bcm_port_t,bcm_module_t,bcm_module_t);
	int (*stk_fmod_smod_mapping_get)(int,bcm_port_t,bcm_module_t,bcm_module_t *,bcm_port_t *,uint32 *);
	int (*stk_fmod_smod_mapping_set)(int,bcm_port_t,bcm_module_t,bcm_module_t,bcm_port_t,uint32);
	int (*stk_gport_sysport_get)(int,bcm_gport_t,bcm_gport_t *);
	int (*stk_init)(int);
	int (*stk_mode_get)(int,uint32 *);
	int (*stk_mode_set)(int,uint32);
	int (*stk_modid_config_add)(int,bcm_stk_modid_config_t *);
	int (*stk_modid_config_delete)(int,bcm_stk_modid_config_t *);
	int (*stk_modid_config_delete_all)(int);
	int (*stk_modid_config_get)(int,bcm_stk_modid_config_t *);
	int (*stk_modid_config_get_all)(int,int,bcm_stk_modid_config_t *,int *);
	int (*stk_modid_config_set)(int,bcm_stk_modid_config_t *);
	/* bcm_stk_modid_config_t_init not dispatchable */
	int (*stk_modid_count)(int,int *);
	int (*stk_modid_domain_add)(int,int,int);
	int (*stk_modid_domain_delete)(int,int,int);
	int (*stk_modid_domain_get)(int,int,int,int *,int *);
	int (*stk_modid_get)(int,int *);
	int (*stk_modid_set)(int,int);
	int (*stk_modmap_enable_get)(int,bcm_port_t,int *);
	int (*stk_modmap_enable_set)(int,bcm_port_t,int);
	int (*stk_modmap_map)(int,int,bcm_module_t,bcm_port_t,bcm_module_t *,bcm_port_t *);
	int (*stk_modmap_register)(int,bcm_stk_modmap_cb_t);
	int (*stk_modmap_unregister)(int);
	int (*stk_modport_add)(int,int,bcm_port_t);
	int (*stk_modport_clear)(int,int);
	int (*stk_modport_clear_all)(int);
	int (*stk_modport_delete)(int,int,bcm_port_t);
	int (*stk_modport_get)(int,int,int *);
	int (*stk_modport_get_all)(int,int,int,int *,int *);
	int (*stk_modport_remote_map_get)(int,bcm_gport_t,uint32,int *,bcm_port_t *);
	int (*stk_modport_remote_map_set)(int,bcm_gport_t,uint32,int,bcm_port_t);
	int (*stk_modport_set)(int,int,int);
	int (*stk_module_control_get)(int,uint32,bcm_module_t,bcm_stk_module_control_t,int *);
	int (*stk_module_control_set)(int,uint32,bcm_module_t,bcm_stk_module_control_t,int);
	int (*stk_module_enable)(int,bcm_module_t,int,int);
	int (*stk_module_max_get)(int,uint32,bcm_module_t *);
	int (*stk_module_max_set)(int,uint32,bcm_module_t);
	int (*stk_module_remote_port_enable_get)(int,int,bcm_pbmp_t *);
	int (*stk_module_remote_port_enable_set)(int,int,bcm_pbmp_t);
	int (*stk_my_modid_get)(int,int *);
	int (*stk_my_modid_set)(int,int);
	int (*stk_pbmp_get)(int,bcm_pbmp_t *,bcm_pbmp_t *);
	int (*stk_port_get)(int,bcm_port_t,uint32 *);
	int (*stk_port_modmap_group_get)(int,bcm_port_t,int *);
	int (*stk_port_modmap_group_max_get)(int,int *);
	int (*stk_port_modmap_group_set)(int,bcm_port_t,int);
	int (*stk_port_modport_add)(int,bcm_port_t,bcm_module_t,bcm_port_t);
	int (*stk_port_modport_clear)(int,bcm_port_t,bcm_module_t);
	int (*stk_port_modport_clear_all)(int,bcm_port_t);
	int (*stk_port_modport_delete)(int,bcm_port_t,bcm_module_t,bcm_port_t);
	int (*stk_port_modport_get)(int,bcm_port_t,bcm_module_t,bcm_port_t *);
	int (*stk_port_modport_get_all)(int,bcm_port_t,bcm_module_t,int,bcm_port_t *,int *);
	int (*stk_port_modport_set)(int,bcm_port_t,bcm_module_t,bcm_port_t);
	int (*stk_port_set)(int,bcm_port_t,uint32);
	int (*stk_sysport_gport_get)(int,bcm_gport_t,bcm_gport_t *);
	int (*stk_sysport_gport_set)(int,bcm_gport_t,bcm_gport_t);
	int (*stk_system_gport_map_create)(int,bcm_stk_system_gport_map_t *);
	int (*stk_system_gport_map_destroy)(int,bcm_gport_t);
	int (*stk_system_gport_map_get)(int,bcm_stk_system_gport_map_t *);
	int (*stk_ucbitmap_del)(int,bcm_port_t,int,bcm_pbmp_t);
	int (*stk_ucbitmap_get)(int,int,int,bcm_pbmp_t *);
	int (*stk_ucbitmap_set)(int,int,int,bcm_pbmp_t);
	int (*stk_update_callback_register)(int,bcm_stk_cb_f,void *);
	int (*stk_update_callback_unregister)(int,bcm_stk_cb_f,void *);
	int (*subport_cleanup)(int);
	/* bcm_subport_config_t_init not dispatchable */
	/* bcm_subport_cos_to_pfc_pri_map_t_init not dispatchable */
	int (*subport_gport_modport_get)(int,bcm_gport_t,bcm_module_t *,bcm_port_t *);
	/* bcm_subport_group_config_t_init not dispatchable */
	int (*subport_group_create)(int,bcm_subport_group_config_t *,bcm_gport_t *);
	int (*subport_group_destroy)(int,bcm_gport_t);
	int (*subport_group_get)(int,bcm_gport_t,bcm_subport_group_config_t *);
	int (*subport_group_linkphy_config_get)(int,bcm_gport_t,bcm_subport_group_linkphy_config_t *);
	int (*subport_group_linkphy_config_set)(int,bcm_gport_t,bcm_subport_group_linkphy_config_t *);
	/* bcm_subport_group_linkphy_config_t_init not dispatchable */
	int (*subport_group_traverse)(int,bcm_gport_t,bcm_subport_port_traverse_cb,void *);
	int (*subport_init)(int);
	/* bcm_subport_linkphy_rx_error_reg_info_t_init not dispatchable */
	int (*subport_linkphy_rx_error_register)(int,bcm_subport_linkphy_rx_errors_t,bcm_subport_linkphy_rx_error_reg_info_t *,void *);
	int (*subport_linkphy_rx_error_unregister)(int,bcm_subport_linkphy_rx_errors_t);
	int (*subport_port_add)(int,bcm_subport_config_t *,bcm_gport_t *);
	int (*subport_port_delete)(int,bcm_gport_t);
	int (*subport_port_get)(int,bcm_gport_t,bcm_subport_config_t *);
	int (*subport_port_group_id_create)(int,uint32,bcm_subport_port_group_t *);
	int (*subport_port_group_id_destroy)(int,bcm_subport_port_group_t);
	int (*subport_port_group_id_destroy_all)(int);
	int (*subport_port_group_id_get)(int,bcm_subport_port_group_t);
	int (*subport_port_group_id_get_all)(int,int,bcm_subport_port_group_t *,int *);
	int (*subport_port_group_subport_multi_get)(int,bcm_subport_port_group_t,int,bcm_gport_t *,int *);
	int (*subport_port_group_subport_multi_set)(int,bcm_subport_port_group_t,int,bcm_gport_t *);
	int (*subport_port_stat_get)(int,bcm_gport_t,int,bcm_subport_stat_t,uint64 *);
	int (*subport_port_stat_set)(int,bcm_gport_t,int,bcm_subport_stat_t,uint64);
	int (*subport_port_traverse)(int,bcm_subport_port_traverse_cb,void *);
	int (*subport_tunnel_pbmp_profile_create)(int,int,bcm_gport_t *,int *);
	int (*subport_tunnel_pbmp_profile_destroy)(int,int);
	int (*subport_tunnel_pbmp_profile_destroy_all)(int);
	int (*subport_tunnel_pbmp_profile_get)(int,int,bcm_gport_t *,int *);
	int (*sum_config_get)(int,bcm_sum_config_t *,bcm_pbmp_t *);
	int (*sum_config_set)(int,bcm_sum_config_t *,bcm_pbmp_t);
	/* bcm_sum_config_t_init not dispatchable */
	int (*sum_detach)(int);
	int (*sum_init)(int);
	int (*sum_stat_get)(int,uint32,bcm_sum_stat_info_t *,uint32 *,bcm_sum_stat_type_t,uint32);
	/* bcm_sum_stat_info_t_init not dispatchable */
	int (*switch_agm_create)(int,uint32,bcm_switch_agm_info_t *);
	int (*switch_agm_destroy)(int,bcm_switch_agm_id_t);
	int (*switch_agm_enable_get)(int,bcm_switch_agm_id_t,int *);
	int (*switch_agm_enable_set)(int,bcm_switch_agm_id_t,int);
	int (*switch_agm_get)(int,bcm_switch_agm_info_t *);
	/* bcm_switch_agm_info_t_init not dispatchable */
	int (*switch_agm_l3_ecmp_attach_get)(int,bcm_switch_agm_id_t,bcm_if_t *);
	int (*switch_agm_stat_clear)(int,bcm_switch_agm_id_t);
	int (*switch_agm_stat_get)(int,bcm_switch_agm_id_t,int,bcm_switch_agm_stat_t *);
	/* bcm_switch_agm_stat_t_init not dispatchable */
	int (*switch_agm_traverse)(int,int,bcm_switch_agm_traverse_cb,void *);
	int (*switch_agm_trunk_attach_get)(int,bcm_switch_agm_id_t,bcm_trunk_t *);
	int (*switch_appl_signature_create)(int,uint32,bcm_switch_appl_signature_info_t *,bcm_switch_appl_signature_t *);
	int (*switch_appl_signature_destroy)(int,uint32,bcm_switch_appl_signature_t);
	int (*switch_appl_signature_get)(int,uint32,bcm_switch_appl_signature_t,bcm_switch_appl_signature_info_t *);
	int (*switch_appl_signature_get_all)(int,uint32,int,bcm_switch_appl_signature_t *,int *);
	/* bcm_switch_appl_signature_info_t_init not dispatchable */
	int (*switch_appl_signature_prio_set)(int,uint32,bcm_switch_appl_signature_t,uint32);
	int (*switch_chip_info_get)(int,bcm_switch_chip_info_t,int,void *,int *);
	int (*switch_control_get)(int,bcm_switch_control_t,int *);
	int (*switch_control_indexed_get)(int,bcm_switch_control_key_t,bcm_switch_control_info_t *);
	int (*switch_control_indexed_port_get)(int,bcm_port_t,bcm_switch_control_key_t,bcm_switch_control_info_t *);
	int (*switch_control_indexed_port_set)(int,bcm_port_t,bcm_switch_control_key_t,bcm_switch_control_info_t);
	int (*switch_control_indexed_set)(int,bcm_switch_control_key_t,bcm_switch_control_info_t);
	int (*switch_control_port_get)(int,bcm_port_t,bcm_switch_control_t,int *);
	int (*switch_control_port_set)(int,bcm_port_t,bcm_switch_control_t,int);
	int (*switch_control_set)(int,bcm_switch_control_t,int);
	int (*switch_dosattack_event_get)(int,uint32,bcm_switch_dosattack_event_t,int *);
	int (*switch_dosattack_event_set)(int,uint32,bcm_switch_dosattack_event_t,int);
	int (*switch_dram_init)(int,uint32);
	int (*switch_dram_power_down)(int,uint32);
	int (*switch_dram_power_down_cb_register)(int,uint32,bcm_switch_dram_power_down_callback_t,void *);
	int (*switch_dram_power_down_cb_unregister)(int,bcm_switch_dram_power_down_callback_t,void *);
	int (*switch_dram_traffic_enable_set)(int,uint32,uint32);
	int (*switch_dram_vendor_info_get)(int,bcm_switch_dram_vendor_info_t *);
	int (*switch_drop_event_mon_get)(int,bcm_switch_drop_event_mon_t *);
	int (*switch_drop_event_mon_set)(int,bcm_switch_drop_event_mon_t *);
	/* bcm_switch_drop_event_mon_t_init not dispatchable */
	int (*switch_encap_create)(int,bcm_switch_encap_info_t *,bcm_if_t *);
	int (*switch_encap_dest_map_add)(int,bcm_switch_encap_dest_t *);
	int (*switch_encap_dest_map_delete)(int,bcm_switch_encap_dest_t *);
	int (*switch_encap_dest_map_get)(int,bcm_switch_encap_dest_t *);
	int (*switch_encap_dest_map_traverse)(int,bcm_switch_encap_dest_map_traverse_cb,void *);
	int (*switch_encap_destroy)(int,bcm_if_t);
	int (*switch_encap_destroy_all)(int);
	int (*switch_encap_get)(int,bcm_if_t,bcm_switch_encap_info_t *);
	/* bcm_switch_encap_info_t_init not dispatchable */
	int (*switch_encap_set)(int,bcm_if_t,bcm_switch_encap_info_t *);
	int (*switch_encap_traverse)(int,bcm_switch_encap_traverse_cb,void *);
	/* bcm_switch_ep_recirc_cpu_dma_config_t_init not dispatchable */
	/* bcm_switch_ep_recirc_cpu_dma_timestamp_field_config_t_init not dispatchable */
	int (*switch_ep_recirc_drop_event_control_get)(int,bcm_switch_ep_recirc_drop_event_control_t *);
	int (*switch_ep_recirc_drop_event_control_set)(int,bcm_switch_ep_recirc_drop_event_control_t *);
	/* bcm_switch_ep_recirc_drop_event_control_t_init not dispatchable */
	/* bcm_switch_ep_recirc_nih_config_t_init not dispatchable */
	/* bcm_switch_ep_recirc_nih_residence_time_field_config_t_init not dispatchable */
	int (*switch_ep_recirc_profile_create)(int,bcm_switch_ep_recirc_profile_t *,int *);
	int (*switch_ep_recirc_profile_destroy)(int,int);
	int (*switch_ep_recirc_profile_get)(int,int,bcm_switch_ep_recirc_profile_t *);
	int (*switch_ep_recirc_profile_get_all)(int,int *,int *);
	/* bcm_switch_ep_recirc_profile_t_init not dispatchable */
	int (*switch_ep_recirc_trace_event_control_get)(int,bcm_switch_ep_recirc_trace_event_control_t *);
	int (*switch_ep_recirc_trace_event_control_set)(int,bcm_switch_ep_recirc_trace_event_control_t *);
	/* bcm_switch_ep_recirc_trace_event_control_t_init not dispatchable */
	int (*switch_ep_recirc_trace_event_enable_get)(int,bcm_pkt_trace_event_t,int *);
	int (*switch_ep_recirc_trace_event_enable_get_all)(int,bcm_pkt_trace_event_t *,int *);
	int (*switch_ep_recirc_trace_event_enable_set)(int,bcm_pkt_trace_event_t,int);
	int (*switch_event_control_get)(int,bcm_switch_event_t,bcm_switch_event_control_t,uint32 *);
	int (*switch_event_control_set)(int,bcm_switch_event_t,bcm_switch_event_control_t,uint32);
	int (*switch_event_register)(int,bcm_switch_event_cb_t,void *);
	int (*switch_event_unregister)(int,bcm_switch_event_cb_t,void *);
	int (*switch_fec_property_get)(int,bcm_switch_fec_property_config_t *);
	int (*switch_hard_reset_cb_register)(int,uint32,bcm_switch_hard_reset_callback_t,void *);
	int (*switch_hard_reset_cb_unregister)(int,bcm_switch_hard_reset_callback_t,void *);
	int (*switch_hash_bank_control_get)(int,bcm_switch_hash_bank_control_t *);
	/* bcm_switch_hash_bank_control_init not dispatchable */
	int (*switch_hash_bank_control_set)(int,bcm_switch_hash_bank_control_t *);
	int (*switch_hash_bank_info_get)(int,bcm_switch_hash_bank_info_t *);
	/* bcm_switch_hash_bank_info_init not dispatchable */
	int (*switch_hash_bank_multi_get)(int,bcm_switch_hash_table_t,int,bcm_switch_hash_bank_t *,int *);
	int (*switch_hash_banks_config_get)(int,bcm_switch_hash_table_t,uint32,int *,uint32 *);
	int (*switch_hash_banks_config_set)(int,bcm_switch_hash_table_t,uint32,int,uint32);
	int (*switch_hash_banks_max_get)(int,bcm_switch_hash_table_t,uint32 *);
	/* bcm_switch_hash_entry_config_t_init not dispatchable */
	int (*switch_hash_entry_create)(int,bcm_field_group_t,bcm_hash_entry_t *);
	int (*switch_hash_entry_create_qset)(int,bcm_field_qset_t,bcm_hash_entry_t *);
	int (*switch_hash_entry_destroy)(int,bcm_hash_entry_t);
	int (*switch_hash_entry_get)(int,bcm_hash_entry_t,bcm_switch_hash_entry_config_t *);
	int (*switch_hash_entry_install)(int,bcm_hash_entry_t,uint32);
	int (*switch_hash_entry_reinstall)(int,bcm_hash_entry_t,uint32);
	int (*switch_hash_entry_remove)(int,bcm_hash_entry_t);
	int (*switch_hash_entry_set)(int,bcm_hash_entry_t,bcm_switch_hash_entry_config_t *);
	int (*switch_hash_entry_traverse)(int,int,bcm_switch_hash_entry_traverse_cb,void *);
	int (*switch_hash_qualify_data)(int,bcm_hash_entry_t,int,uint32,uint32);
	int (*switch_hash_qualify_udf)(int,bcm_hash_entry_t,bcm_udf_id_t,int,uint8 *,uint8 *);
	int (*switch_hash_qualify_udf_get)(int,bcm_hash_entry_t,bcm_udf_id_t,int,uint8 *,uint8 *,int *);
	int (*switch_hash_table_multi_get)(int,bcm_switch_hash_bank_t,int,bcm_switch_hash_table_t *,int *);
	int (*switch_ipv6_reserved_multicast_addr_get)(int,bcm_ip6_t *,bcm_ip6_t *);
	int (*switch_ipv6_reserved_multicast_addr_multi_get)(int,int,int,bcm_ip6_t *,bcm_ip6_t *);
	int (*switch_ipv6_reserved_multicast_addr_multi_set)(int,int,int,bcm_ip6_t *,bcm_ip6_t *);
	int (*switch_ipv6_reserved_multicast_addr_set)(int,bcm_ip6_t,bcm_ip6_t);
	/* bcm_switch_issu_upgrade_done not dispatchable */
	/* bcm_switch_issu_upgrade_start not dispatchable */
	int (*switch_kbp_apptype_info_get)(int,bcm_core_t,bcm_field_AppType_t,bcm_switch_kbp_apptype_info_t *);
	int (*switch_kbp_info_get)(int,bcm_core_t,bcm_switch_kbp_info_t *);
	int (*switch_l3_protocol_group_get)(int,uint32 *,bcm_l3_protocol_group_id_t *);
	int (*switch_l3_protocol_group_set)(int,uint32,bcm_l3_protocol_group_id_t);
	int (*switch_led_control_data_read)(int,int,int,uint8 *,int);
	int (*switch_led_control_data_write)(int,int,int,const uint8 *,int);
	int (*switch_led_fw_load)(int,int,const uint8 *,int);
	int (*switch_led_fw_start_get)(int,int,int *);
	int (*switch_led_fw_start_set)(int,int,int);
	int (*switch_led_port_to_uc_port_get)(int,int,int *,int *);
	int (*switch_led_port_to_uc_port_set)(int,int,int,int);
	int (*switch_led_uc_num_get)(int,int *);
	int (*switch_lif_hit_get)(int,bcm_switch_lif_hit_t *);
	int (*switch_lif_property_get)(int,bcm_switch_lif_property_t,bcm_switch_lif_property_config_t *);
	int (*switch_lif_property_set)(int,bcm_switch_lif_property_t,bcm_switch_lif_property_config_t *);
	int (*switch_match_config_add)(int,bcm_switch_match_service_t,bcm_switch_match_config_info_t *,int *);
	int (*switch_match_config_delete)(int,bcm_switch_match_service_t,int);
	int (*switch_match_config_delete_all)(int,bcm_switch_match_service_t);
	int (*switch_match_config_get)(int,bcm_switch_match_service_t,int,bcm_switch_match_config_info_t *);
	/* bcm_switch_match_config_info_t_init not dispatchable */
	int (*switch_match_config_set)(int,bcm_switch_match_service_t,int,bcm_switch_match_config_info_t *);
	int (*switch_match_config_traverse)(int,bcm_switch_match_service_t,bcm_switch_match_config_traverse_cb,void *);
	int (*switch_match_control_get)(int,bcm_switch_match_service_t,bcm_switch_match_control_type_t,bcm_gport_t,bcm_switch_match_control_info_t *);
	/* bcm_switch_match_control_info_t_init not dispatchable */
	int (*switch_match_control_set)(int,bcm_switch_match_service_t,bcm_switch_match_control_type_t,bcm_gport_t,bcm_switch_match_control_info_t *);
	int (*switch_match_control_traverse)(int,bcm_switch_match_service_t,bcm_switch_match_control_traverse_cb,void *);
	int (*switch_network_group_config_get)(int,bcm_switch_network_group_t,bcm_switch_network_group_config_t *);
	int (*switch_network_group_config_set)(int,bcm_switch_network_group_t,bcm_switch_network_group_config_t *);
	/* bcm_switch_network_group_config_t_init not dispatchable */
	int (*switch_object_count_get)(int,bcm_switch_object_t,int *);
	int (*switch_object_count_multi_get)(int,int,bcm_switch_object_t *,int *);
	int (*switch_obm_classifier_mapping_get)(int,bcm_gport_t,bcm_switch_obm_classifier_type_t,bcm_switch_obm_classifier_t *);
	int (*switch_obm_classifier_mapping_multi_get)(int,bcm_gport_t,bcm_switch_obm_classifier_type_t,int,bcm_switch_obm_classifier_t *,int *);
	int (*switch_obm_classifier_mapping_multi_set)(int,bcm_gport_t,bcm_switch_obm_classifier_type_t,int,bcm_switch_obm_classifier_t *);
	int (*switch_obm_classifier_mapping_set)(int,bcm_gport_t,bcm_switch_obm_classifier_type_t,bcm_switch_obm_classifier_t *);
	/* bcm_switch_obm_classifier_t_init not dispatchable */
	int (*switch_olp_l2_addr_add)(int,uint32,bcm_switch_olp_l2_addr_t *);
	int (*switch_olp_l2_addr_delete)(int,bcm_switch_olp_l2_addr_t *);
	int (*switch_olp_l2_addr_delete_all)(int);
	int (*switch_olp_l2_addr_get)(int,bcm_switch_olp_l2_addr_t *);
	/* bcm_switch_olp_l2_addr_t_init not dispatchable */
	int (*switch_olp_l2_addr_traverse)(int,bcm_switch_olp_l2_addr_traverse_cb,void *);
	int (*switch_opaque_tag_config_get)(int,int,bcm_switch_opaque_tag_params_t *);
	int (*switch_opaque_tag_config_set)(int,int,bcm_switch_opaque_tag_params_t *);
	/* bcm_switch_opaque_tag_config_t_init not dispatchable */
	int (*switch_payload_opaque_tag_config_get)(int,int,bcm_switch_opaque_tag_params_t *);
	int (*switch_payload_opaque_tag_config_set)(int,int,bcm_switch_opaque_tag_params_t *);
	/* bcm_switch_pkt_control_action_t_init not dispatchable */
	int (*switch_pkt_info_hash_get)(int,bcm_switch_pkt_info_t *,bcm_gport_t *,bcm_if_t *);
	/* bcm_switch_pkt_info_t_init not dispatchable */
	int (*switch_pkt_integrity_check_add)(int,uint32,bcm_switch_pkt_integrity_match_t *,bcm_switch_pkt_control_action_t *,int);
	int (*switch_pkt_integrity_check_delete)(int,bcm_switch_pkt_integrity_match_t *);
	int (*switch_pkt_integrity_check_get)(int,bcm_switch_pkt_integrity_match_t *,bcm_switch_pkt_control_action_t *,int *);
	/* bcm_switch_pkt_integrity_match_t_init not dispatchable */
	int (*switch_pkt_protocol_control_add)(int,uint32,bcm_switch_pkt_protocol_match_t *,bcm_switch_pkt_control_action_t *,int);
	int (*switch_pkt_protocol_control_delete)(int,bcm_switch_pkt_protocol_match_t *);
	int (*switch_pkt_protocol_control_delete_all)(int);
	int (*switch_pkt_protocol_control_get)(int,bcm_switch_pkt_protocol_match_t *,bcm_switch_pkt_control_action_t *,int *);
	int (*switch_pkt_protocol_control_traverse)(int,bcm_switch_pkt_protocol_control_traverse_cb,void *);
	/* bcm_switch_pkt_protocol_match_t_init not dispatchable */
	int (*switch_pkt_trace_info_clear)(int,bcm_port_t);
	int (*switch_pkt_trace_info_get)(int,uint32,uint8,int,uint8 *,bcm_switch_pkt_trace_info_t *);
	int (*switch_pkt_trace_raw_data_get)(int,uint32,uint8,int,uint8 *,uint32,uint8 *,uint32 *);
	/* bcm_switch_profile_mapping_t_init not dispatchable */
	int (*switch_rcpu_decap_priority_map_get)(int,int,int *);
	int (*switch_rcpu_decap_priority_map_set)(int,int,int);
	int (*switch_rcpu_encap_priority_map_get)(int,uint32,int,int *);
	int (*switch_rcpu_encap_priority_map_set)(int,uint32,int,int);
	int (*switch_reflector_create)(int,uint32,bcm_if_t *,bcm_switch_reflector_data_t *);
	/* bcm_switch_reflector_data_t_init not dispatchable */
	int (*switch_reflector_destroy)(int,uint32,bcm_if_t);
	int (*switch_reflector_get)(int,uint32,bcm_if_t,bcm_switch_reflector_data_t *);
	int (*switch_reflector_traverse)(int,uint32,bcm_switch_reflector_traverse_cb,void *);
	int (*switch_resource_utilization_get)(int,bcm_switch_resource_utilization_query_t *,bcm_switch_resource_utilization_t *);
	int (*switch_rov_get)(int,uint32,uint32 *);
	int (*switch_ser_error_stat_clear)(int,bcm_switch_ser_error_stat_type_t);
	int (*switch_ser_error_stat_get)(int,bcm_switch_ser_error_stat_type_t,uint32 *);
	/* bcm_switch_ser_error_stat_type_t_init not dispatchable */
	int (*switch_ser_log_info_get)(int,int,bcm_switch_ser_log_info_t *);
	/* bcm_switch_ser_log_info_t_init not dispatchable */
	/* bcm_switch_service_config_t_init not dispatchable */
	int (*switch_service_get)(int,bcm_switch_service_t,bcm_switch_service_config_t *);
	int (*switch_service_set)(int,bcm_switch_service_t,bcm_switch_service_config_t *);
	int (*switch_stable_register)(int,bcm_switch_read_func_t,bcm_switch_write_func_t);
	int (*switch_svtag_egress_entry_add)(int,uint32,bcm_gport_t,bcm_switch_svtag_egress_info_t *);
	int (*switch_svtag_egress_entry_delete)(int,uint32,bcm_gport_t);
	int (*switch_svtag_egress_entry_get)(int,uint32,bcm_gport_t,bcm_switch_svtag_egress_info_t *);
	int (*switch_svtag_egress_entry_traverse)(int,uint32,bcm_switch_svtag_egress_traverse_cb,void *);
	int (*switch_temperature_monitor_get)(int,int,bcm_switch_temperature_monitor_t *,int *);
	int (*switch_thermo_sensor_read)(int,bcm_switch_thermo_sensor_type_t,int,bcm_switch_thermo_sensor_t *);
	int (*switch_tpid_add)(int,uint32,bcm_switch_tpid_info_t *);
	int (*switch_tpid_class_get)(int,bcm_switch_tpid_class_t *);
	/* bcm_switch_tpid_class_t_init not dispatchable */
	int (*switch_tpid_delete)(int,bcm_switch_tpid_info_t *);
	int (*switch_tpid_delete_all)(int);
	int (*switch_tpid_get)(int,bcm_switch_tpid_info_t *);
	int (*switch_tpid_get_all)(int,int,bcm_switch_tpid_info_t *,int *);
	int (*switch_trace_event_mon_get)(int,bcm_switch_trace_event_mon_t *);
	int (*switch_trace_event_mon_set)(int,bcm_switch_trace_event_mon_t *);
	/* bcm_switch_trace_event_mon_t_init not dispatchable */
	int (*switch_user_buffer_read)(int,uint32,bcm_switch_user_buffer_type_t,uint8 *,int,int);
	int (*switch_user_buffer_write)(int,uint32,bcm_switch_user_buffer_type_t,uint8 *,int,int);
	int (*switch_wide_data_extension_add)(int,uint32,bcm_switch_wide_data_extension_info_t *);
	int (*switch_wide_data_extension_delete)(int,uint32,bcm_switch_wide_data_extension_info_t *);
	int (*switch_wide_data_extension_get)(int,uint32,bcm_switch_wide_data_extension_info_t *);
	int (*switch_wide_data_extension_traverse)(int,bcm_switch_wide_data_extension_traverse_cb,void *);
	int (*tdm_control_get)(int,bcm_tdm_control_t,int *);
	int (*tdm_control_set)(int,bcm_tdm_control_t,int);
	int (*tdm_egress_editing_get)(int,uint32,bcm_gport_t,bcm_tdm_egress_editing_t *);
	int (*tdm_egress_editing_set)(int,uint32,bcm_gport_t,bcm_tdm_egress_editing_t *);
	int (*tdm_ingress_context_create)(int,uint32,int *,bcm_tdm_ingress_context_t *);
	int (*tdm_ingress_context_destroy)(int,uint32,int);
	int (*tdm_ingress_context_failover_get)(int,uint32,int,int *,int *);
	int (*tdm_ingress_context_failover_set)(int,uint32,int,int *,int *);
	int (*tdm_ingress_context_get)(int,uint32,int,bcm_tdm_ingress_context_t *);
	/* bcm_tdm_ingress_editing_context_t_init not dispatchable */
	int (*tdm_interface_config_get)(int,uint32,bcm_gport_t,bcm_tdm_interface_config_t *);
	int (*tdm_interface_config_set)(int,uint32,bcm_gport_t,bcm_tdm_interface_config_t *);
	int (*tdm_stream_ingress_context_get)(int,uint32,int,int *);
	int (*tdm_stream_ingress_context_set)(int,uint32,bcm_gport_t,int);
#ifdef	INCLUDE_PTP
	int (*tdpll_dpll_bandwidth_get)(int,int,int,bcm_tdpll_dpll_bandwidth_t *);
	int (*tdpll_dpll_bandwidth_set)(int,int,int,bcm_tdpll_dpll_bandwidth_t *);
	int (*tdpll_dpll_bindings_get)(int,int,int,bcm_tdpll_dpll_bindings_t *);
	int (*tdpll_dpll_bindings_set)(int,int,int,bcm_tdpll_dpll_bindings_t *);
	int (*tdpll_dpll_phase_control_get)(int,int,int,bcm_tdpll_dpll_phase_control_t *);
	int (*tdpll_dpll_phase_control_set)(int,int,int,bcm_tdpll_dpll_phase_control_t *);
	int (*tdpll_dpll_reference_get)(int,int,int,int *,int *);
	int (*tdpll_esmc_essm_code_get)(int,int,int,bcm_esmc_essm_code_t *);
	int (*tdpll_esmc_essm_code_set)(int,int,int,bcm_esmc_essm_code_t);
	int (*tdpll_esmc_holdover_ql_get)(int,int,int,bcm_esmc_quality_level_t *);
	int (*tdpll_esmc_holdover_ql_set)(int,int,int,bcm_esmc_quality_level_t);
	int (*tdpll_esmc_mac_get)(int,int,int,bcm_mac_t *);
	int (*tdpll_esmc_mac_set)(int,int,int,bcm_mac_t *);
	int (*tdpll_esmc_ql_get)(int,int,int,bcm_esmc_quality_level_t *);
	int (*tdpll_esmc_ql_set)(int,int,int,bcm_esmc_quality_level_t);
	int (*tdpll_esmc_rx_enable_get)(int,int,int *);
	int (*tdpll_esmc_rx_enable_set)(int,int,int);
	int (*tdpll_esmc_rx_portbitmap_get)(int,int,int,bcm_pbmp_t *);
	int (*tdpll_esmc_rx_portbitmap_set)(int,int,int,bcm_pbmp_t);
	int (*tdpll_esmc_rx_state_machine)(int,int,int,bcm_esmc_pdu_data_t *);
	int (*tdpll_esmc_tx_enable_get)(int,int,int,int *);
	int (*tdpll_esmc_tx_enable_set)(int,int,int,int);
	int (*tdpll_esmc_tx_portbitmap_get)(int,int,int,bcm_pbmp_t *);
	int (*tdpll_esmc_tx_portbitmap_set)(int,int,int,bcm_pbmp_t);
	int (*tdpll_event_callback_register)(int,int,bcm_tdpll_event_cb_f);
	int (*tdpll_event_callback_unregister)(int,int);
	int (*tdpll_input_clock_best_get)(int,int,int,int *);
	int (*tdpll_input_clock_callback_register)(int,int,bcm_tdpll_callback_type_t,bcm_tdpll_input_clock_cb);
	int (*tdpll_input_clock_callback_unregister)(int,int,bcm_tdpll_callback_type_t);
	int (*tdpll_input_clock_control)(int,int,int);
	int (*tdpll_input_clock_enable_get)(int,int,int,int *);
	int (*tdpll_input_clock_enable_set)(int,int,int,int);
	int (*tdpll_input_clock_frequency_error_get)(int,int,int,int *);
	int (*tdpll_input_clock_frequency_get)(int,int,int,uint32 *,uint32 *);
	int (*tdpll_input_clock_frequency_set)(int,int,int,uint32,uint32);
	int (*tdpll_input_clock_l1mux_get)(int,int,int,bcm_tdpll_input_clock_l1mux_t *);
	int (*tdpll_input_clock_l1mux_set)(int,int,int,bcm_tdpll_input_clock_l1mux_t *);
	int (*tdpll_input_clock_lockout_get)(int,int,int,int *);
	int (*tdpll_input_clock_lockout_set)(int,int,int,int);
	int (*tdpll_input_clock_mac_get)(int,int,int,bcm_mac_t *);
	int (*tdpll_input_clock_mac_set)(int,int,int,bcm_mac_t *);
	int (*tdpll_input_clock_monitor_callback_register)(int,int,bcm_tdpll_input_clock_monitor_cb);
	int (*tdpll_input_clock_monitor_callback_unregister)(int,int);
	int (*tdpll_input_clock_monitor_interval_get)(int,int,uint32 *);
	int (*tdpll_input_clock_monitor_interval_set)(int,int,uint32);
	int (*tdpll_input_clock_monitor_threshold_get)(int,int,bcm_tdpll_input_clock_monitor_type_t,uint32 *);
	int (*tdpll_input_clock_monitor_threshold_set)(int,int,bcm_tdpll_input_clock_monitor_type_t,uint32);
	int (*tdpll_input_clock_priority_get)(int,int,int,int *);
	int (*tdpll_input_clock_priority_set)(int,int,int,int);
	int (*tdpll_input_clock_ql_change_callback_register)(int,int,bcm_tdpll_input_clock_ql_change_cb);
	int (*tdpll_input_clock_ql_change_callback_unregister)(int,int);
	int (*tdpll_input_clock_ql_enabled_get)(int,int,int,int *);
	int (*tdpll_input_clock_ql_enabled_set)(int,int,int,int);
	int (*tdpll_input_clock_ql_get)(int,int,int,bcm_esmc_quality_level_t *);
	int (*tdpll_input_clock_ql_set)(int,int,int,bcm_esmc_quality_level_t);
	int (*tdpll_input_clock_revertive_get)(int,int,int,int *);
	int (*tdpll_input_clock_revertive_set)(int,int,int,int);
	int (*tdpll_input_clock_selector_callback_register)(int,int,bcm_tdpll_input_clock_selector_cb);
	int (*tdpll_input_clock_selector_callback_unregister)(int,int);
	int (*tdpll_input_clock_threshold_state_get)(int,int,int,bcm_tdpll_input_clock_monitor_type_t,int *);
	int (*tdpll_input_clock_valid_get)(int,int,int,int *);
	int (*tdpll_input_clock_valid_set)(int,int,int,int);
	int (*tdpll_output_clock_create)(int,int,int,bcm_pbmp_t,bcm_tdpll_dpll_bandwidth_t *);
	int (*tdpll_output_clock_deriv_frequency_get)(int,int,int,uint32 *);
	int (*tdpll_output_clock_deriv_frequency_set)(int,int,int,uint32);
	int (*tdpll_output_clock_enable_get)(int,int,int,int *);
	int (*tdpll_output_clock_enable_set)(int,int,int,int);
	int (*tdpll_output_clock_holdover_data_get)(int,int,int,bcm_tdpll_holdover_data_t *);
	int (*tdpll_output_clock_holdover_frequency_set)(int,int,int,bcm_tdpll_frequency_correction_t);
	int (*tdpll_output_clock_holdover_mode_get)(int,int,int,bcm_tdpll_holdover_mode_t *);
	int (*tdpll_output_clock_holdover_mode_set)(int,int,int,bcm_tdpll_holdover_mode_t);
	int (*tdpll_output_clock_holdover_reset)(int,int,int);
	int (*tdpll_output_clock_synth_frequency_get)(int,int,int,uint32 *,uint32 *);
	int (*tdpll_output_clock_synth_frequency_set)(int,int,int,uint32,uint32);
#endif	/* INCLUDE_PTP */
	int (*telemetry_config_get)(int,int,int,int,bcm_telemetry_config_t *,int *);
	int (*telemetry_config_set)(int,int,int,int,bcm_telemetry_config_t *);
	/* bcm_telemetry_config_t_init not dispatchable */
	int (*telemetry_detach)(int);
	int (*telemetry_export_config_delete)(int,int,bcm_collector_t,int);
	int (*telemetry_export_config_get)(int,int,bcm_collector_t *,int *);
	int (*telemetry_export_config_set)(int,int,bcm_collector_t,int);
	int (*telemetry_init)(int);
	int (*telemetry_instance_export_stats_get)(int,int,bcm_collector_t,bcm_telemetry_instance_export_stats_t *);
	int (*telemetry_instance_export_stats_set)(int,int,bcm_collector_t,bcm_telemetry_instance_export_stats_t *);
	int (*telemetry_system_id_get)(int,int,int *,uint8 *);
	int (*telemetry_system_id_set)(int,int,uint8 *);
	int (*time_bs_log_configure_get)(int,bcm_time_bs_log_cfg_t *);
	int (*time_bs_log_configure_set)(int,bcm_time_bs_log_cfg_t);
	int (*time_bs_time_get)(int,bcm_time_spec_t *);
	int (*time_capture_cb_register)(int,bcm_time_if_t,bcm_time_capture_cb_type_t,bcm_time_capture_cb,void *);
	int (*time_capture_cb_unregister)(int,bcm_time_if_t,bcm_time_capture_cb_type_t);
	int (*time_capture_enable_set)(int,bcm_time_if_t,bcm_time_capture_t *,int,int *);
	int (*time_capture_get)(int,bcm_time_if_t,bcm_time_capture_t *);
	/* bcm_time_capture_t_init not dispatchable */
	int (*time_deinit)(int);
	int (*time_heartbeat_enable_get)(int,bcm_time_if_t,int *);
	int (*time_heartbeat_enable_set)(int,bcm_time_if_t,int);
	int (*time_heartbeat_register)(int,bcm_time_if_t,bcm_time_heartbeat_cb,void *);
	int (*time_heartbeat_unregister)(int,bcm_time_if_t);
	int (*time_init)(int);
	int (*time_interface_add)(int,bcm_time_interface_t *);
	int (*time_interface_delete)(int,bcm_time_if_t);
	int (*time_interface_delete_all)(int);
	int (*time_interface_get)(int,bcm_time_interface_t *);
	/* bcm_time_interface_t_init not dispatchable */
	int (*time_interface_traverse)(int,bcm_time_interface_traverse_cb,void *);
	/* bcm_time_spec_t_init not dispatchable */
	int (*time_synce_clock_get)(int,bcm_time_synce_clock_src_type_t,bcm_time_synce_divisor_setting_t *);
	int (*time_synce_clock_set)(int,bcm_time_synce_clock_src_type_t,bcm_time_synce_divisor_setting_t *);
	int (*time_synce_clock_source_control_get)(int,bcm_time_synce_clock_source_config_t *,bcm_time_synce_clock_source_control_t,int *);
	int (*time_synce_clock_source_control_set)(int,bcm_time_synce_clock_source_config_t *,bcm_time_synce_clock_source_control_t,int);
	/* bcm_time_synce_divisor_setting_t_init not dispatchable */
	int (*time_tod_get)(int,uint32,bcm_time_tod_t *);
	int (*time_tod_set)(int,uint32,bcm_time_tod_t *);
	/* bcm_time_tod_t_init not dispatchable */
	int (*time_trigger_enable_get)(int,bcm_time_if_t,uint32 *);
	int (*time_trigger_enable_set)(int,bcm_time_if_t,uint32);
	int (*time_ts_counter_get)(int,bcm_time_ts_counter_t *);
	int (*time_ts_counter_set)(int,bcm_time_ts_counter_t *);
	/* bcm_time_ts_counter_t_init not dispatchable */
	int (*time_ts_counter_time_init)(int);
	int (*time_ts_offset_set)(int,int64,uint64,int);
	int (*time_ts_time_convert)(int,uint32,bcm_time_spec_t *);
	int (*time_ts_time_update)(int);
	/* bcm_topo_map_get not dispatchable */
	/* bcm_topo_map_set not dispatchable */
	int (*topo_port_get)(int,int,bcm_port_t *);
#ifdef	INCLUDE_L3
	int (*trill_cleanup)(int);
	int (*trill_init)(int);
	int (*trill_multicast_adjacency_add)(int,bcm_trill_multicast_adjacency_t *);
	int (*trill_multicast_adjacency_delete)(int,bcm_trill_multicast_adjacency_t *);
	int (*trill_multicast_adjacency_delete_all)(int);
	int (*trill_multicast_adjacency_traverse)(int,bcm_trill_multicast_adjacency_traverse_cb,void *);
	int (*trill_multicast_delete_all)(int,bcm_trill_name_t);
	int (*trill_multicast_entry_add)(int,bcm_trill_multicast_entry_t *);
	int (*trill_multicast_entry_delete)(int,bcm_trill_multicast_entry_t *);
	int (*trill_multicast_entry_get)(int,bcm_trill_multicast_entry_t *);
	/* bcm_trill_multicast_entry_t_init not dispatchable */
	int (*trill_multicast_entry_traverse)(int,bcm_trill_multicast_entry_traverse_cb,void *);
	int (*trill_multicast_source_add)(int,bcm_trill_name_t,bcm_trill_name_t,bcm_gport_t,bcm_if_t);
	int (*trill_multicast_source_delete)(int,bcm_trill_name_t,bcm_trill_name_t,bcm_gport_t,bcm_if_t);
	int (*trill_multicast_source_get)(int,bcm_trill_name_t,bcm_trill_name_t,bcm_gport_t *);
	int (*trill_multicast_source_traverse)(int,bcm_trill_multicast_source_traverse_cb,void *);
	int (*trill_port_add)(int,bcm_trill_port_t *);
	int (*trill_port_delete)(int,bcm_gport_t);
	int (*trill_port_delete_all)(int);
	int (*trill_port_get)(int,bcm_trill_port_t *);
	int (*trill_port_get_all)(int,int,bcm_trill_port_t *,int *);
	/* bcm_trill_port_t_init not dispatchable */
	int (*trill_rbridge_entry_add)(int,bcm_trill_rbridge_t *);
	int (*trill_rbridge_entry_delete)(int,bcm_trill_rbridge_t *);
	int (*trill_rbridge_entry_get)(int,bcm_trill_rbridge_t *);
	int (*trill_stat_clear)(int,bcm_port_t,bcm_trill_stat_t);
	int (*trill_stat_get)(int,bcm_port_t,bcm_trill_stat_t,uint64 *);
	int (*trill_stat_get32)(int,bcm_port_t,bcm_trill_stat_t,uint32 *);
	/* bcm_trill_vpn_config_t_init not dispatchable */
	int (*trill_vpn_create)(int,bcm_trill_vpn_config_t *);
	int (*trill_vpn_destroy)(int,bcm_vpn_t);
	int (*trill_vpn_destroy_all)(int);
	int (*trill_vpn_get)(int,bcm_vpn_t,bcm_trill_vpn_config_t *);
	int (*trill_vpn_traverse)(int,bcm_trill_vpn_traverse_cb,void *);
#endif	/* INCLUDE_L3 */
	int (*trunk_agm_attach)(int,bcm_trunk_t,bcm_switch_agm_id_t);
	int (*trunk_agm_attach_get)(int,bcm_trunk_t,bcm_switch_agm_id_t *);
	int (*trunk_agm_detach)(int,bcm_trunk_t,bcm_switch_agm_id_t);
	int (*trunk_bitmap_expand)(int,bcm_pbmp_t *);
	int (*trunk_chip_info_get)(int,bcm_trunk_chip_info_t *);
	/* bcm_trunk_chip_info_t_init not dispatchable */
	int (*trunk_create)(int,uint32,bcm_trunk_t *);
	int (*trunk_destroy)(int,bcm_trunk_t);
	int (*trunk_detach)(int);
	/* bcm_trunk_dlb_mon_cfg_t_init not dispatchable */
	int (*trunk_dlb_mon_config_get)(int,bcm_trunk_t,bcm_trunk_dlb_mon_cfg_t *);
	int (*trunk_dlb_mon_config_set)(int,bcm_trunk_t,bcm_trunk_dlb_mon_cfg_t *);
	int (*trunk_dlb_stat_get)(int,bcm_trunk_t,bcm_trunk_dlb_stat_t,uint64 *);
	int (*trunk_dlb_stat_set)(int,bcm_trunk_t,bcm_trunk_dlb_stat_t,uint64);
	int (*trunk_dlb_stat_sync_get)(int,bcm_trunk_t,bcm_trunk_dlb_stat_t,uint64 *);
	int (*trunk_egress_get)(int,bcm_trunk_t,bcm_pbmp_t *);
	int (*trunk_egress_set)(int,bcm_trunk_t,bcm_pbmp_t);
	int (*trunk_ethertype_get)(int,uint32 *,int,int *,int *);
	int (*trunk_ethertype_set)(int,uint32,int,int *);
	int (*trunk_failover_get)(int,bcm_trunk_t,bcm_gport_t,int *,uint32 *,int,bcm_gport_t *,int *);
	int (*trunk_failover_set)(int,bcm_trunk_t,bcm_gport_t,int,uint32,int,bcm_gport_t *);
	int (*trunk_find)(int,bcm_module_t,bcm_gport_t,bcm_trunk_t *);
	int (*trunk_flexctr_object_get)(int,bcm_trunk_t,uint16 *);
	int (*trunk_flexctr_object_set)(int,bcm_trunk_t,uint16);
	int (*trunk_get)(int,bcm_trunk_t,bcm_trunk_info_t *,int,bcm_trunk_member_t *,int *);
	int (*trunk_gport_add)(int,bcm_trunk_t,bcm_gport_t);
	int (*trunk_gport_delete)(int,bcm_trunk_t,bcm_gport_t);
	int (*trunk_gport_delete_all)(int,bcm_trunk_t);
	int (*trunk_gport_get_all)(int,bcm_trunk_t,int,bcm_gport_t *,int *);
	/* bcm_trunk_info_t_init not dispatchable */
	int (*trunk_init)(int);
	int (*trunk_mcast_join)(int,bcm_trunk_t,bcm_vlan_t,bcm_mac_t);
	int (*trunk_member_add)(int,bcm_trunk_t,bcm_trunk_member_t *);
	int (*trunk_member_delete)(int,bcm_trunk_t,bcm_trunk_member_t *);
	int (*trunk_member_delete_all)(int,bcm_trunk_t);
	int (*trunk_member_status_get)(int,bcm_gport_t,int *);
	int (*trunk_member_status_set)(int,bcm_gport_t,int);
	/* bcm_trunk_member_t_init not dispatchable */
	int (*trunk_override_ipmc_get)(int,bcm_port_t,bcm_trunk_t,int,int *);
	int (*trunk_override_ipmc_set)(int,bcm_port_t,bcm_trunk_t,int,int);
	int (*trunk_override_mcast_get)(int,bcm_port_t,bcm_trunk_t,int,int *);
	int (*trunk_override_mcast_set)(int,bcm_port_t,bcm_trunk_t,int,int);
	int (*trunk_override_non_ucast_get)(int,bcm_trunk_t,int *);
	int (*trunk_override_non_ucast_set)(int,bcm_trunk_t,int);
	int (*trunk_override_ucast_get)(int,bcm_port_t,bcm_trunk_t,int,int *);
	int (*trunk_override_ucast_set)(int,bcm_port_t,bcm_trunk_t,int,int);
	int (*trunk_override_vlan_get)(int,bcm_port_t,bcm_trunk_t,bcm_vlan_t,int *);
	int (*trunk_override_vlan_set)(int,bcm_port_t,bcm_trunk_t,bcm_vlan_t,int);
	int (*trunk_pool_get)(int,bcm_port_t,bcm_trunk_t,int *,int [BCM_TRUNK_MAX_PORTCNT]);
	int (*trunk_pool_set)(int,bcm_port_t,bcm_trunk_t,int,const int [BCM_TRUNK_MAX_PORTCNT]);
	int (*trunk_pp_port_allocation_get)(int,bcm_trunk_t,uint32,bcm_trunk_pp_port_allocation_info_t *);
	/* bcm_trunk_pp_port_allocation_info_t_init not dispatchable */
	int (*trunk_pp_port_allocation_set)(int,bcm_trunk_t,uint32,bcm_trunk_pp_port_allocation_info_t *);
	int (*trunk_psc_get)(int,bcm_trunk_t,int *);
	int (*trunk_psc_set)(int,bcm_trunk_t,int);
	int (*trunk_resilient_replace)(int,uint32,bcm_trunk_resilient_entry_t *,int *,bcm_trunk_resilient_entry_t *);
	int (*trunk_resilient_traverse)(int,uint32,bcm_trunk_resilient_entry_t *,bcm_trunk_resilient_traverse_cb,void *);
	int (*trunk_set)(int,bcm_trunk_t,bcm_trunk_info_t *,int,bcm_trunk_member_t *);
	int (*trunk_spa_to_system_phys_port_map_get)(int,uint32,uint32,bcm_gport_t *);
	int (*trunk_stat_attach)(int,bcm_trunk_t,uint32);
	int (*trunk_stat_detach)(int,bcm_trunk_t,uint32);
	int (*trunk_stat_id_get)(int,bcm_trunk_t,uint32 *);
	int (*trunk_vplag_get)(int,bcm_trunk_t,bcm_gport_t *);
	int (*trunk_with_vplag_create)(int,uint32,bcm_trunk_t *,bcm_gport_t *);
	int (*tsn_control_get)(int,bcm_tsn_control_t,uint32 *);
	int (*tsn_control_set)(int,bcm_tsn_control_t,uint32);
	int (*tsn_detach)(int);
	int (*tsn_event_notification_traverse)(int,bcm_tsn_event_notification_traverse_cb,void *);
	int (*tsn_event_register)(int,bcm_tsn_event_type_t,bcm_tsn_event_source_t *,bcm_tsn_event_cb,void *);
	/* bcm_tsn_event_source_t_init not dispatchable */
	int (*tsn_event_unregister)(int,bcm_tsn_event_type_t,bcm_tsn_event_source_t *,bcm_tsn_event_cb);
	int (*tsn_flow_config_get)(int,bcm_tsn_flow_t,bcm_tsn_flow_config_t *);
	int (*tsn_flow_config_set)(int,bcm_tsn_flow_t,bcm_tsn_flow_config_t *);
	/* bcm_tsn_flow_config_t_init not dispatchable */
	int (*tsn_flowset_config_get)(int,bcm_tsn_flowset_t,bcm_tsn_pri_map_t *,bcm_tsn_flow_config_t *);
	int (*tsn_flowset_create)(int,bcm_tsn_pri_map_t,bcm_tsn_flow_config_t *,bcm_tsn_flowset_t *);
	int (*tsn_flowset_destroy)(int,bcm_tsn_flowset_t);
	int (*tsn_flowset_flow_get)(int,bcm_tsn_flowset_t,int,bcm_tsn_flow_t *);
	int (*tsn_flowset_status_get)(int,bcm_tsn_flowset_t,bcm_tsn_flowset_status_t *);
	/* bcm_tsn_flowset_status_t_init not dispatchable */
	int (*tsn_flowset_traverse)(int,bcm_tsn_flowset_traverse_cb,void *);
	int (*tsn_ingress_mtu_config_get)(int,bcm_tsn_ingress_mtu_config_t *);
	int (*tsn_ingress_mtu_config_set)(int,bcm_tsn_ingress_mtu_config_t *);
	/* bcm_tsn_ingress_mtu_config_t_init not dispatchable */
	int (*tsn_ingress_stu_config_get)(int,bcm_tsn_ingress_stu_config_t *);
	int (*tsn_ingress_stu_config_set)(int,bcm_tsn_ingress_stu_config_t *);
	/* bcm_tsn_ingress_stu_config_t_init not dispatchable */
	int (*tsn_init)(int);
	/* bcm_tsn_mtu_config_t_init not dispatchable */
	int (*tsn_mtu_profile_create)(int,bcm_tsn_mtu_profile_type_t,bcm_tsn_mtu_config_t *,int *);
	int (*tsn_mtu_profile_destroy)(int,int);
	int (*tsn_mtu_profile_get)(int,int,bcm_tsn_mtu_profile_type_t *,bcm_tsn_mtu_config_t *);
	int (*tsn_mtu_profile_set)(int,int,bcm_tsn_mtu_config_t *);
	int (*tsn_mtu_profile_traverse)(int,bcm_tsn_mtu_profile_traverse_cb,void *);
	int (*tsn_port_control_get)(int,bcm_gport_t,bcm_tsn_control_t,uint32 *);
	int (*tsn_port_control_set)(int,bcm_gport_t,bcm_tsn_control_t,uint32);
	int (*tsn_port_stat_get)(int,bcm_gport_t,bcm_tsn_stat_t,uint64 *);
	int (*tsn_port_stat_get32)(int,bcm_gport_t,bcm_tsn_stat_t,uint32 *);
	int (*tsn_port_stat_multi_get)(int,bcm_gport_t,int,bcm_tsn_stat_t *,uint64 *);
	int (*tsn_port_stat_multi_get32)(int,bcm_gport_t,int,bcm_tsn_stat_t *,uint32 *);
	int (*tsn_port_stat_multi_set)(int,bcm_gport_t,int,bcm_tsn_stat_t *,uint64 *);
	int (*tsn_port_stat_multi_set32)(int,bcm_gport_t,int,bcm_tsn_stat_t *,uint32 *);
	int (*tsn_port_stat_set)(int,bcm_gport_t,bcm_tsn_stat_t,uint64);
	int (*tsn_port_stat_set32)(int,bcm_gport_t,bcm_tsn_stat_t,uint32);
	int (*tsn_port_stat_sync_get)(int,bcm_gport_t,bcm_tsn_stat_t,uint64 *);
	int (*tsn_port_stat_sync_get32)(int,bcm_gport_t,bcm_tsn_stat_t,uint32 *);
	int (*tsn_port_stat_sync_multi_get)(int,bcm_gport_t,int,bcm_tsn_stat_t *,uint64 *);
	int (*tsn_port_stat_sync_multi_get32)(int,bcm_gport_t,int,bcm_tsn_stat_t *,uint32 *);
	/* bcm_tsn_pri_map_config_t_init not dispatchable */
	int (*tsn_pri_map_create)(int,bcm_tsn_pri_map_config_t *,bcm_tsn_pri_map_t *);
	int (*tsn_pri_map_destroy)(int,bcm_tsn_pri_map_t);
	/* bcm_tsn_pri_map_entry_t_init not dispatchable */
	int (*tsn_pri_map_get)(int,bcm_tsn_pri_map_t,bcm_tsn_pri_map_config_t *);
	int (*tsn_pri_map_set)(int,bcm_tsn_pri_map_t,bcm_tsn_pri_map_config_t *);
	int (*tsn_pri_map_traverse)(int,bcm_tsn_pri_map_traverse_cb,void *);
	/* bcm_tsn_sr_auto_learn_config_t_init not dispatchable */
	int (*tsn_sr_auto_learn_enable)(int,int,bcm_tsn_sr_auto_learn_config_t *);
	int (*tsn_sr_auto_learn_enable_get)(int,int *,bcm_tsn_sr_auto_learn_config_t *);
	/* bcm_tsn_sr_auto_learn_group_config_t_init not dispatchable */
	int (*tsn_sr_auto_learn_group_create)(int,bcm_tsn_sr_auto_learn_group_config_t *,int *);
	int (*tsn_sr_auto_learn_group_destroy)(int,int);
	int (*tsn_sr_auto_learn_group_get)(int,int,bcm_tsn_sr_auto_learn_group_config_t *);
	int (*tsn_sr_auto_learn_group_set)(int,int,bcm_tsn_sr_auto_learn_group_config_t *);
	int (*tsn_sr_auto_learn_group_traverse)(int,bcm_tsn_sr_auto_learn_group_traverse_cb,void *);
	int (*tsn_sr_flow_stat_get)(int,bcm_tsn_sr_flow_t,bcm_tsn_stat_t,uint64 *);
	int (*tsn_sr_flow_stat_get32)(int,bcm_tsn_sr_flow_t,bcm_tsn_stat_t,uint32 *);
	int (*tsn_sr_flow_stat_group_get)(int,bcm_tsn_sr_flow_t,bcm_tsn_stat_group_type_t,bcm_tsn_stat_group_t *);
	int (*tsn_sr_flow_stat_group_set)(int,bcm_tsn_sr_flow_t,bcm_tsn_stat_group_type_t,bcm_tsn_stat_group_t);
	int (*tsn_sr_flow_stat_multi_get)(int,bcm_tsn_sr_flow_t,int,bcm_tsn_stat_t *,uint64 *);
	int (*tsn_sr_flow_stat_multi_get32)(int,bcm_tsn_sr_flow_t,int,bcm_tsn_stat_t *,uint32 *);
	int (*tsn_sr_flow_stat_multi_set)(int,bcm_tsn_sr_flow_t,int,bcm_tsn_stat_t *,uint64 *);
	int (*tsn_sr_flow_stat_multi_set32)(int,bcm_tsn_sr_flow_t,int,bcm_tsn_stat_t *,uint32 *);
	int (*tsn_sr_flow_stat_set)(int,bcm_tsn_sr_flow_t,bcm_tsn_stat_t,uint64);
	int (*tsn_sr_flow_stat_set32)(int,bcm_tsn_sr_flow_t,bcm_tsn_stat_t,uint32);
	int (*tsn_sr_flow_stat_sync_get)(int,bcm_tsn_sr_flow_t,bcm_tsn_stat_t,uint64 *);
	int (*tsn_sr_flow_stat_sync_get32)(int,bcm_tsn_sr_flow_t,bcm_tsn_stat_t,uint32 *);
	int (*tsn_sr_flow_stat_sync_multi_get)(int,bcm_tsn_sr_flow_t,int,bcm_tsn_stat_t *,uint64 *);
	int (*tsn_sr_flow_stat_sync_multi_get32)(int,bcm_tsn_sr_flow_t,int,bcm_tsn_stat_t *,uint32 *);
	int (*tsn_sr_flowset_destroy)(int,bcm_tsn_sr_flowset_t);
	int (*tsn_sr_flowset_flow_get)(int,bcm_tsn_sr_flowset_t,int,bcm_tsn_sr_flow_t *);
	int (*tsn_sr_flowset_status_get)(int,bcm_tsn_sr_flowset_t,bcm_tsn_sr_flowset_status_t *);
	/* bcm_tsn_sr_flowset_status_t_init not dispatchable */
	int (*tsn_sr_flowset_traverse)(int,int,bcm_tsn_sr_flowset_traverse_cb,void *);
	int (*tsn_sr_port_config_get)(int,bcm_gport_t,bcm_tsn_sr_port_config_t *);
	int (*tsn_sr_port_config_set)(int,bcm_gport_t,bcm_tsn_sr_port_config_t *);
	/* bcm_tsn_sr_port_config_t_init not dispatchable */
	int (*tsn_sr_rx_flow_config_get)(int,bcm_tsn_sr_flow_t,bcm_tsn_sr_rx_flow_config_t *);
	int (*tsn_sr_rx_flow_config_set)(int,bcm_tsn_sr_flow_t,bcm_tsn_sr_rx_flow_config_t *);
	/* bcm_tsn_sr_rx_flow_config_t_init not dispatchable */
	int (*tsn_sr_rx_flow_reset)(int,uint32,bcm_tsn_sr_flow_t);
	int (*tsn_sr_rx_flow_seqnum_history_get)(int,bcm_tsn_sr_flow_t,int,int,uint8 *,int *);
	int (*tsn_sr_rx_flow_seqnum_history_set)(int,bcm_tsn_sr_flow_t,int,int,uint8 *);
	int (*tsn_sr_rx_flow_status_get)(int,bcm_tsn_sr_flow_t,bcm_tsn_sr_rx_flow_status_t *);
	/* bcm_tsn_sr_rx_flow_status_t_init not dispatchable */
	int (*tsn_sr_rx_flowset_config_get)(int,bcm_tsn_sr_flowset_t,bcm_tsn_pri_map_t *,bcm_tsn_sr_rx_flow_config_t *);
	int (*tsn_sr_rx_flowset_create)(int,bcm_tsn_pri_map_t,bcm_tsn_sr_rx_flow_config_t *,bcm_tsn_sr_flowset_t *);
	int (*tsn_sr_tx_flow_config_get)(int,bcm_tsn_sr_flow_t,bcm_tsn_sr_tx_flow_config_t *);
	int (*tsn_sr_tx_flow_config_set)(int,bcm_tsn_sr_flow_t,bcm_tsn_sr_tx_flow_config_t *);
	/* bcm_tsn_sr_tx_flow_config_t_init not dispatchable */
	int (*tsn_sr_tx_flow_status_get)(int,bcm_tsn_sr_flow_t,bcm_tsn_sr_tx_flow_status_t *);
	/* bcm_tsn_sr_tx_flow_status_t_init not dispatchable */
	int (*tsn_sr_tx_flowset_config_get)(int,bcm_tsn_sr_flowset_t,bcm_tsn_pri_map_t *,bcm_tsn_sr_tx_flow_config_t *);
	int (*tsn_sr_tx_flowset_create)(int,bcm_tsn_pri_map_t,bcm_tsn_sr_tx_flow_config_t *,bcm_tsn_sr_flowset_t *);
	int (*tsn_stat_group_create)(int,bcm_tsn_stat_group_type_t,int,bcm_tsn_stat_t *,bcm_tsn_stat_group_t *);
	int (*tsn_stat_group_destroy)(int,bcm_tsn_stat_group_t);
	int (*tsn_stat_group_get)(int,bcm_tsn_stat_group_t,bcm_tsn_stat_group_type_t *,int,bcm_tsn_stat_t *,int *);
	int (*tsn_stat_group_set)(int,bcm_tsn_stat_group_t,int,bcm_tsn_stat_t *);
	int (*tsn_stat_group_traverse)(int,bcm_tsn_stat_group_traverse_cb,void *);
	/* bcm_tsn_stat_threshold_config_t_init not dispatchable */
	int (*tsn_stat_threshold_get)(int,bcm_tsn_stat_threshold_source_t,bcm_tsn_stat_t,bcm_tsn_stat_threshold_config_t *);
	int (*tsn_stat_threshold_set)(int,bcm_tsn_stat_threshold_source_t,bcm_tsn_stat_t,bcm_tsn_stat_threshold_config_t *);
	/* bcm_tsn_stu_config_t_init not dispatchable */
	int (*tsn_stu_profile_create)(int,bcm_tsn_stu_profile_type_t,bcm_tsn_stu_config_t *,int *);
	int (*tsn_stu_profile_destroy)(int,int);
	int (*tsn_stu_profile_get)(int,int,bcm_tsn_stu_profile_type_t *,bcm_tsn_stu_config_t *);
	int (*tsn_stu_profile_set)(int,int,bcm_tsn_stu_config_t *);
	int (*tsn_stu_profile_traverse)(int,bcm_tsn_stu_profile_traverse_cb,void *);
	int (*tsn_taf_control_get)(int,int,bcm_tsn_taf_control_t,uint32 *);
	int (*tsn_taf_control_set)(int,int,bcm_tsn_taf_control_t,uint32);
	int (*tsn_taf_cosq_mapping_profile_create)(int,int *);
	int (*tsn_taf_cosq_mapping_profile_destroy)(int,int);
	int (*tsn_taf_cosq_mapping_profile_get)(int,int,bcm_cos_t,bcm_cos_queue_t *);
	int (*tsn_taf_cosq_mapping_profile_set)(int,int,bcm_cos_t,bcm_cos_queue_t);
	int (*tsn_taf_cosq_mapping_profile_traverse)(int,bcm_tsn_taf_cosq_mapping_profile_traverse_cb,void *);
	int (*tsn_taf_event_register)(int,bcm_tsn_taf_event_types_t,int,bcm_tsn_taf_event_cb,void *);
	int (*tsn_taf_event_unregister)(int,bcm_tsn_taf_event_types_t,int,bcm_tsn_taf_event_cb);
	int (*tsn_taf_gate_create)(int,int,int *);
	int (*tsn_taf_gate_destroy)(int,int);
	int (*tsn_taf_gate_max_bytes_profile_create)(int,int,uint64,int *);
	int (*tsn_taf_gate_max_bytes_profile_destroy)(int,int,int);
	int (*tsn_taf_gate_max_bytes_profile_get)(int,int,int,uint64 *);
	int (*tsn_taf_gate_max_bytes_profile_set)(int,int,int,uint64);
	int (*tsn_taf_gate_max_bytes_profile_traverse)(int,int,bcm_tsn_taf_gate_max_bytes_profile_traverse_cb,void *);
	int (*tsn_taf_gate_stat_get)(int,int,bcm_tsn_taf_gate_stat_t,uint64 *);
	int (*tsn_taf_gate_stat_get32)(int,int,bcm_tsn_taf_gate_stat_t,uint32 *);
	int (*tsn_taf_gate_stat_multi_get)(int,int,int,bcm_tsn_taf_gate_stat_t *,uint64 *);
	int (*tsn_taf_gate_stat_multi_get32)(int,int,int,bcm_tsn_taf_gate_stat_t *,uint32 *);
	int (*tsn_taf_gate_stat_multi_set)(int,int,int,bcm_tsn_taf_gate_stat_t *,uint64 *);
	int (*tsn_taf_gate_stat_multi_set32)(int,int,int,bcm_tsn_taf_gate_stat_t *,uint32 *);
	int (*tsn_taf_gate_stat_set)(int,int,bcm_tsn_taf_gate_stat_t,uint64);
	int (*tsn_taf_gate_stat_set32)(int,int,bcm_tsn_taf_gate_stat_t,uint32);
	int (*tsn_taf_gate_stat_sync_get)(int,int,bcm_tsn_taf_gate_stat_t,uint64 *);
	int (*tsn_taf_gate_stat_sync_get32)(int,int,bcm_tsn_taf_gate_stat_t,uint32 *);
	int (*tsn_taf_gate_stat_sync_multi_get)(int,int,int,bcm_tsn_taf_gate_stat_t *,uint64 *);
	int (*tsn_taf_gate_stat_sync_multi_get32)(int,int,int,bcm_tsn_taf_gate_stat_t *,uint32 *);
	int (*tsn_taf_gate_traverse)(int,bcm_tsn_taf_gate_traverse_cb,void *);
	int (*tsn_taf_profile_commit)(int,int,bcm_tsn_taf_profile_id_t);
	int (*tsn_taf_profile_create)(int,int,bcm_tsn_taf_profile_t *,bcm_tsn_taf_profile_id_t *);
	int (*tsn_taf_profile_destroy)(int,int,bcm_tsn_taf_profile_id_t);
	int (*tsn_taf_profile_destroy_all)(int,int);
	int (*tsn_taf_profile_get)(int,int,bcm_tsn_taf_profile_id_t,bcm_tsn_taf_profile_t *);
	int (*tsn_taf_profile_set)(int,int,bcm_tsn_taf_profile_id_t,bcm_tsn_taf_profile_t *);
	int (*tsn_taf_profile_status_get)(int,int,bcm_tsn_taf_profile_id_t,bcm_tsn_taf_profile_status_t *);
	/* bcm_tsn_taf_profile_status_t_init not dispatchable */
	/* bcm_tsn_taf_profile_t_init not dispatchable */
	int (*tsn_taf_profile_traverse)(int,int,bcm_tsn_taf_profile_traverse_cb,void *);
	int (*tsn_taf_status_get)(int,int,bcm_tsn_taf_status_t,uint32 *);
#ifdef	INCLUDE_L3
	int (*tunnel_config_get)(int,bcm_tunnel_config_t *);
	int (*tunnel_config_set)(int,bcm_tunnel_config_t *);
	/* bcm_tunnel_config_t_init not dispatchable */
	int (*tunnel_dscp_map_create)(int,uint32,int *);
	int (*tunnel_dscp_map_destroy)(int,int);
	int (*tunnel_dscp_map_get)(int,int,bcm_tunnel_dscp_map_t *);
	int (*tunnel_dscp_map_port_get)(int,bcm_port_t,bcm_tunnel_dscp_map_t *);
	int (*tunnel_dscp_map_port_set)(int,bcm_port_t,bcm_tunnel_dscp_map_t *);
	int (*tunnel_dscp_map_set)(int,int,bcm_tunnel_dscp_map_t *);
	/* bcm_tunnel_dscp_map_t_init not dispatchable */
	int (*tunnel_initiator_clear)(int,bcm_l3_intf_t *);
	int (*tunnel_initiator_create)(int,bcm_l3_intf_t *,bcm_tunnel_initiator_t *);
	int (*tunnel_initiator_destroy)(int,bcm_gport_t);
	int (*tunnel_initiator_get)(int,bcm_l3_intf_t *,bcm_tunnel_initiator_t *);
	int (*tunnel_initiator_set)(int,bcm_l3_intf_t *,bcm_tunnel_initiator_t *);
	/* bcm_tunnel_initiator_t_init not dispatchable */
	int (*tunnel_initiator_traverse)(int,bcm_tunnel_initiator_traverse_cb,void *);
	int (*tunnel_terminator_add)(int,bcm_tunnel_terminator_t *);
	/* bcm_tunnel_terminator_config_action_t_init not dispatchable */
	int (*tunnel_terminator_config_add)(int,uint32,bcm_tunnel_terminator_config_key_t *,bcm_tunnel_terminator_config_action_t *);
	int (*tunnel_terminator_config_delete)(int,bcm_tunnel_terminator_config_key_t *);
	int (*tunnel_terminator_config_get)(int,bcm_tunnel_terminator_config_key_t *,bcm_tunnel_terminator_config_action_t *);
	/* bcm_tunnel_terminator_config_key_t_init not dispatchable */
	int (*tunnel_terminator_config_traverse)(int,bcm_tunnel_terminator_config_traverse_info_t,bcm_tunnel_terminator_config_traverse_cb,void *);
	int (*tunnel_terminator_create)(int,bcm_tunnel_terminator_t *);
	int (*tunnel_terminator_delete)(int,bcm_tunnel_terminator_t *);
	int (*tunnel_terminator_flexctr_object_get)(int,bcm_tunnel_terminator_t *,uint32 *);
	int (*tunnel_terminator_flexctr_object_set)(int,bcm_tunnel_terminator_t *,uint32);
	int (*tunnel_terminator_get)(int,bcm_tunnel_terminator_t *);
	int (*tunnel_terminator_stat_attach)(int,bcm_tunnel_terminator_t *,uint32);
	int (*tunnel_terminator_stat_detach)(int,bcm_tunnel_terminator_t *);
	int (*tunnel_terminator_stat_id_get)(int,bcm_tunnel_terminator_t *,uint32 *);
	/* bcm_tunnel_terminator_t_init not dispatchable */
	int (*tunnel_terminator_traverse)(int,bcm_tunnel_terminator_traverse_cb,void *);
	int (*tunnel_terminator_update)(int,bcm_tunnel_terminator_t *);
	int (*tunnel_terminator_vlan_get)(int,bcm_gport_t,bcm_vlan_vector_t *);
	int (*tunnel_terminator_vlan_set)(int,bcm_gport_t,bcm_vlan_vector_t);
#endif	/* INCLUDE_L3 */
	int (*tx)(int,bcm_pkt_t *,void *);
	int (*tx_array)(int,bcm_pkt_t **,int,bcm_pkt_cb_f,void *);
	int (*tx_cleanup)(int);
	/* bcm_tx_cpu_tunnel not dispatchable */
	/* bcm_tx_cpu_tunnel_get not dispatchable */
	/* bcm_tx_cpu_tunnel_set not dispatchable */
#ifdef	BROADCOM_DEBUG
	int (*tx_dv_dump)(int,void *);
#endif	/* BROADCOM_DEBUG */
	int (*tx_init)(int);
	int (*tx_list)(int,bcm_pkt_t *,bcm_pkt_cb_f,void *);
	int (*tx_pkt_l2_map)(int,bcm_pkt_t *,bcm_mac_t,int);
	int (*tx_pkt_setup)(int,bcm_pkt_t *);
#ifdef	BROADCOM_DEBUG
	int (*tx_show)(int);
#endif	/* BROADCOM_DEBUG */
	int (*txbeacon_destroy)(int,bcm_txbeacon_pkt_id_t);
	int (*txbeacon_init)(int,int);
	int (*txbeacon_pkt_get)(int,bcm_txbeacon_t *);
	int (*txbeacon_pkt_setup)(int,bcm_txbeacon_t *);
	int (*txbeacon_start)(int,bcm_txbeacon_pkt_id_t);
	int (*txbeacon_stop)(int,bcm_txbeacon_pkt_id_t);
	int (*txbeacon_traverse)(int,bcm_txbeacon_traverse_cb_t,void *);
	int (*udf_abstract_pkt_format_info_get)(int,bcm_udf_abstract_pkt_format_t,bcm_udf_abstract_pkt_format_info_t *);
	int (*udf_abstract_pkt_format_object_list_get)(int,bcm_udf_abstract_pkt_format_t,int,bcm_udf_id_t *,int *);
	int (*udf_abstract_pkt_format_supported_list_get)(int,int,bcm_udf_abstract_pkt_format_t *,int *);
	/* bcm_udf_alloc_hints_t_init not dispatchable */
	int (*udf_chunk_create)(int,bcm_udf_alloc_hints_t *,bcm_udf_chunk_info_t *,bcm_udf_id_t *);
	int (*udf_chunk_info_get)(int,bcm_udf_id_t,bcm_udf_chunk_info_t *);
	/* bcm_udf_chunk_info_t_init not dispatchable */
	int (*udf_create)(int,bcm_udf_alloc_hints_t *,bcm_udf_t *,bcm_udf_id_t *);
	int (*udf_destroy)(int,bcm_udf_id_t);
	int (*udf_detach)(int);
	int (*udf_flow_based_chunk_arrange_get)(int,bcm_udf_tunnel_term_flow_type_t,uint32 *);
	int (*udf_flow_based_chunk_arrange_set)(int,bcm_udf_tunnel_term_flow_type_t,uint32);
	int (*udf_get)(int,bcm_udf_id_t,bcm_udf_t *);
	int (*udf_get_all)(int,int,bcm_udf_id_t *,int *);
	int (*udf_hash_config_add)(int,uint32,bcm_udf_hash_config_t *);
	int (*udf_hash_config_delete)(int,bcm_udf_hash_config_t *);
	int (*udf_hash_config_delete_all)(int);
	int (*udf_hash_config_get)(int,bcm_udf_hash_config_t *);
	int (*udf_hash_config_get_all)(int,int,bcm_udf_hash_config_t *,int *);
	/* bcm_udf_hash_config_t_init not dispatchable */
	int (*udf_init)(int);
	int (*udf_multi_abstract_pkt_format_info_get)(int,bcm_udf_abstract_pkt_format_t,bcm_udf_multi_abstract_pkt_format_info_t *);
	int (*udf_multi_chunk_create)(int,bcm_udf_alloc_hints_t *,bcm_udf_multi_chunk_info_t *,bcm_udf_id_t *);
	int (*udf_multi_chunk_info_get)(int,bcm_udf_id_t,bcm_udf_multi_chunk_info_t *);
	/* bcm_udf_multi_chunk_info_t_init not dispatchable */
	int (*udf_oper_mode_get)(int,bcm_udf_oper_mode_t *);
	int (*udf_oper_mode_set)(int,bcm_udf_oper_mode_t);
	int (*udf_pkt_format_action_get)(int,bcm_udf_pkt_format_id_t,bcm_udf_pkt_format_action_t,int *);
	int (*udf_pkt_format_action_set)(int,bcm_udf_pkt_format_id_t,bcm_udf_pkt_format_action_t,int);
	int (*udf_pkt_format_add)(int,bcm_udf_id_t,bcm_udf_pkt_format_id_t);
	int (*udf_pkt_format_create)(int,bcm_udf_pkt_format_options_t,bcm_udf_pkt_format_info_t *,bcm_udf_pkt_format_id_t *);
	int (*udf_pkt_format_delete)(int,bcm_udf_id_t,bcm_udf_pkt_format_id_t);
	int (*udf_pkt_format_delete_all)(int,bcm_udf_id_t);
	int (*udf_pkt_format_destroy)(int,bcm_udf_pkt_format_id_t);
	int (*udf_pkt_format_get)(int,bcm_udf_pkt_format_id_t,int,bcm_udf_id_t *,int *);
	int (*udf_pkt_format_get_all)(int,bcm_udf_id_t,int,bcm_udf_pkt_format_id_t *,int *);
	int (*udf_pkt_format_info_get)(int,bcm_udf_pkt_format_id_t,bcm_udf_pkt_format_info_t *);
	/* bcm_udf_pkt_format_info_t_init not dispatchable */
	int (*udf_range_checker_chunk_info_get)(int,uint8 *,uint32 *);
	/* bcm_udf_t_init not dispatchable */
	/* bcm_unit_local not dispatchable */
	/* bcm_unit_max not dispatchable */
	/* bcm_unit_remote not dispatchable */
	/* bcm_unit_remote_unit_get not dispatchable */
	/* bcm_unit_subtype_get not dispatchable */
	/* bcm_unit_valid not dispatchable */
	/* bcm_vlan_action_set_t_init not dispatchable */
	int (*vlan_block_get)(int,bcm_vlan_t,bcm_vlan_block_t *);
	int (*vlan_block_set)(int,bcm_vlan_t,bcm_vlan_block_t *);
	/* bcm_vlan_block_t_init not dispatchable */
	int (*vlan_control_get)(int,bcm_vlan_control_t,int *);
	int (*vlan_control_port_get)(int,int,bcm_vlan_control_port_t,int *);
	int (*vlan_control_port_set)(int,int,bcm_vlan_control_port_t,int);
	int (*vlan_control_set)(int,bcm_vlan_control_t,int);
	int (*vlan_control_vlan_get)(int,bcm_vlan_t,bcm_vlan_control_vlan_t *);
	int (*vlan_control_vlan_selective_get)(int,bcm_vlan_t,uint32,bcm_vlan_control_vlan_t *);
	int (*vlan_control_vlan_selective_set)(int,bcm_vlan_t,uint32,bcm_vlan_control_vlan_t *);
	int (*vlan_control_vlan_set)(int,bcm_vlan_t,bcm_vlan_control_vlan_t);
	/* bcm_vlan_control_vlan_t_init not dispatchable */
	int (*vlan_create)(int,bcm_vlan_t);
	int (*vlan_cross_connect_add)(int,bcm_vlan_t,bcm_vlan_t,bcm_gport_t,bcm_gport_t);
	int (*vlan_cross_connect_delete)(int,bcm_vlan_t,bcm_vlan_t);
	int (*vlan_cross_connect_delete_all)(int);
	int (*vlan_cross_connect_traverse)(int,bcm_vlan_cross_connect_traverse_cb,void *);
	/* bcm_vlan_data_t_init not dispatchable */
	int (*vlan_default_get)(int,bcm_vlan_t *);
	int (*vlan_default_set)(int,bcm_vlan_t);
	int (*vlan_destroy)(int,bcm_vlan_t);
	int (*vlan_destroy_all)(int);
	int (*vlan_dtag_add)(int,int,bcm_vlan_t,bcm_vlan_t,int);
	int (*vlan_dtag_delete)(int,int,bcm_vlan_t);
	int (*vlan_dtag_delete_all)(int);
	int (*vlan_dtag_get)(int,int,bcm_vlan_t,bcm_vlan_t *,int *);
	int (*vlan_dtag_range_add)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_t,int);
	int (*vlan_dtag_range_delete)(int,int,bcm_vlan_t,bcm_vlan_t);
	int (*vlan_dtag_range_delete_all)(int);
	int (*vlan_dtag_range_get)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_t *,int *);
	int (*vlan_dtag_range_traverse)(int,bcm_vlan_dtag_range_traverse_cb,void *);
	int (*vlan_dtag_traverse)(int,bcm_vlan_dtag_traverse_cb,void *);
	/* bcm_vlan_flexctr_config_t_init not dispatchable */
	int (*vlan_gport_add)(int,bcm_vlan_t,bcm_gport_t,int);
	int (*vlan_gport_delete)(int,bcm_vlan_t,bcm_gport_t);
	int (*vlan_gport_delete_all)(int,bcm_vlan_t);
	int (*vlan_gport_extended_delete)(int,bcm_vlan_t,bcm_gport_t,int);
	int (*vlan_gport_get)(int,bcm_vlan_t,bcm_gport_t,int *);
	int (*vlan_gport_get_all)(int,bcm_vlan_t,int,bcm_gport_t *,int *,int *);
	int (*vlan_gport_info_get)(int,bcm_vlan_gport_info_t *);
	/* bcm_vlan_gport_info_t_init not dispatchable */
	int (*vlan_init)(int);
	int (*vlan_ip_action_add)(int,bcm_vlan_ip_t *,bcm_vlan_action_set_t *);
	int (*vlan_ip_action_delete)(int,bcm_vlan_ip_t *);
	int (*vlan_ip_action_delete_all)(int);
	int (*vlan_ip_action_get)(int,bcm_vlan_ip_t *,bcm_vlan_action_set_t *);
	int (*vlan_ip_action_traverse)(int,bcm_vlan_ip_action_traverse_cb,void *);
	int (*vlan_ip_add)(int,bcm_vlan_ip_t *);
	int (*vlan_ip_delete)(int,bcm_vlan_ip_t *);
	int (*vlan_ip_delete_all)(int);
	/* bcm_vlan_ip_t_init not dispatchable */
	int (*vlan_list)(int,bcm_vlan_data_t **,int *);
	int (*vlan_list_by_pbmp)(int,bcm_pbmp_t,bcm_vlan_data_t **,int *);
	int (*vlan_list_destroy)(int,bcm_vlan_data_t *,int);
	int (*vlan_mac_action_add)(int,bcm_mac_t,bcm_vlan_action_set_t *);
	int (*vlan_mac_action_delete)(int,bcm_mac_t);
	int (*vlan_mac_action_delete_all)(int);
	int (*vlan_mac_action_get)(int,bcm_mac_t,bcm_vlan_action_set_t *);
	int (*vlan_mac_action_traverse)(int,bcm_vlan_mac_action_traverse_cb,void *);
	int (*vlan_mac_add)(int,bcm_mac_t,bcm_vlan_t,int);
	int (*vlan_mac_delete)(int,bcm_mac_t);
	int (*vlan_mac_delete_all)(int);
	int (*vlan_match_action_add)(int,uint32,bcm_vlan_match_info_t *,bcm_vlan_action_set_t *);
	int (*vlan_match_action_delete)(int,bcm_vlan_match_info_t *);
	int (*vlan_match_action_delete_all)(int,bcm_vlan_match_t);
	int (*vlan_match_action_get)(int,bcm_vlan_match_info_t *,bcm_vlan_action_set_t *);
	int (*vlan_match_action_multi_get)(int,bcm_vlan_match_t,int,bcm_vlan_match_info_t *,bcm_vlan_action_set_t *,int *);
	/* bcm_vlan_match_info_t_init not dispatchable */
	int (*vlan_mcast_flood_get)(int,bcm_vlan_t,bcm_vlan_mcast_flood_t *);
	int (*vlan_mcast_flood_set)(int,bcm_vlan_t,bcm_vlan_mcast_flood_t);
	int (*vlan_policer_get)(int,bcm_vlan_t,bcm_policer_t *);
	int (*vlan_policer_set)(int,bcm_vlan_t,bcm_policer_t);
	int (*vlan_port_add)(int,bcm_vlan_t,bcm_pbmp_t,bcm_pbmp_t);
	int (*vlan_port_create)(int,bcm_vlan_port_t *);
	int (*vlan_port_default_action_delete)(int,bcm_port_t);
	int (*vlan_port_default_action_get)(int,bcm_port_t,bcm_vlan_action_set_t *);
	int (*vlan_port_default_action_set)(int,bcm_port_t,bcm_vlan_action_set_t *);
	int (*vlan_port_destroy)(int,bcm_gport_t);
	int (*vlan_port_egress_default_action_delete)(int,bcm_port_t);
	int (*vlan_port_egress_default_action_get)(int,bcm_port_t,bcm_vlan_action_set_t *);
	int (*vlan_port_egress_default_action_set)(int,bcm_port_t,bcm_vlan_action_set_t *);
	int (*vlan_port_find)(int,bcm_vlan_port_t *);
	int (*vlan_port_get)(int,bcm_vlan_t,bcm_pbmp_t *,bcm_pbmp_t *);
	int (*vlan_port_protocol_action_add)(int,bcm_port_t,bcm_port_frametype_t,bcm_port_ethertype_t,bcm_vlan_action_set_t *);
	int (*vlan_port_protocol_action_delete)(int,bcm_port_t,bcm_port_frametype_t,bcm_port_ethertype_t);
	int (*vlan_port_protocol_action_delete_all)(int,bcm_port_t);
	int (*vlan_port_protocol_action_get)(int,bcm_port_t,bcm_port_frametype_t,bcm_port_ethertype_t,bcm_vlan_action_set_t *);
	int (*vlan_port_protocol_action_traverse)(int,bcm_vlan_port_protocol_action_traverse_cb,void *);
	int (*vlan_port_remove)(int,bcm_vlan_t,bcm_pbmp_t);
	int (*vlan_port_stat_multi_get)(int,bcm_vlan_t,bcm_port_t,bcm_cos_t,int,bcm_vlan_stat_t *,uint64 *);
	int (*vlan_port_stat_multi_get32)(int,bcm_vlan_t,bcm_port_t,bcm_cos_t,int,bcm_vlan_stat_t *,uint32 *);
	int (*vlan_port_stat_multi_set)(int,bcm_vlan_t,bcm_port_t,bcm_cos_t,int,bcm_vlan_stat_t *,uint64 *);
	int (*vlan_port_stat_multi_set32)(int,bcm_vlan_t,bcm_port_t,bcm_cos_t,int,bcm_vlan_stat_t *,uint32 *);
	/* bcm_vlan_port_t_init not dispatchable */
	int (*vlan_port_translation_get)(int,bcm_vlan_port_translation_t *);
	int (*vlan_port_translation_set)(int,bcm_vlan_port_translation_t *);
	/* bcm_vlan_port_translation_t_init not dispatchable */
	int (*vlan_port_traverse)(int,bcm_vlan_port_traverse_info_t *,bcm_vlan_port_traverse_cb,void *);
	int (*vlan_queue_map_attach)(int,bcm_vlan_t,int);
	int (*vlan_queue_map_attach_get)(int,bcm_vlan_t,int *);
	int (*vlan_queue_map_create)(int,uint32,int *);
	int (*vlan_queue_map_destroy)(int,int);
	int (*vlan_queue_map_destroy_all)(int);
	int (*vlan_queue_map_detach)(int,bcm_vlan_t);
	int (*vlan_queue_map_detach_all)(int);
	int (*vlan_queue_map_get)(int,int,int,int,int *,int *);
	int (*vlan_queue_map_set)(int,int,int,int,int,int);
	int (*vlan_stat_attach)(int,bcm_vlan_t,uint32);
	int (*vlan_stat_counter_get)(int,bcm_vlan_t,bcm_vlan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*vlan_stat_counter_set)(int,bcm_vlan_t,bcm_vlan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*vlan_stat_counter_sync_get)(int,bcm_vlan_t,bcm_vlan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*vlan_stat_detach)(int,bcm_vlan_t);
	int (*vlan_stat_detach_with_id)(int,bcm_vlan_t,uint32);
	int (*vlan_stat_enable_set)(int,bcm_vlan_t,int);
	int (*vlan_stat_get)(int,bcm_vlan_t,bcm_cos_t,bcm_vlan_stat_t,uint64 *);
	int (*vlan_stat_get32)(int,bcm_vlan_t,bcm_cos_t,bcm_vlan_stat_t,uint32 *);
	int (*vlan_stat_id_get)(int,bcm_vlan_t,bcm_vlan_stat_t,uint32 *);
	int (*vlan_stat_multi_get)(int,bcm_vlan_t,bcm_cos_t,int,bcm_vlan_stat_t *,uint64 *);
	int (*vlan_stat_multi_get32)(int,bcm_vlan_t,bcm_cos_t,int,bcm_vlan_stat_t *,uint32 *);
	int (*vlan_stat_multi_set)(int,bcm_vlan_t,bcm_cos_t,int,bcm_vlan_stat_t *,uint64 *);
	int (*vlan_stat_multi_set32)(int,bcm_vlan_t,bcm_cos_t,int,bcm_vlan_stat_t *,uint32 *);
	int (*vlan_stat_set)(int,bcm_vlan_t,bcm_cos_t,bcm_vlan_stat_t,uint64);
	int (*vlan_stat_set32)(int,bcm_vlan_t,bcm_cos_t,bcm_vlan_stat_t,uint32);
	int (*vlan_stat_sync_get)(int,bcm_vlan_t,bcm_cos_t,bcm_vlan_stat_t,uint64 *);
	int (*vlan_stat_sync_get32)(int,bcm_vlan_t,bcm_cos_t,bcm_vlan_stat_t,uint32 *);
	int (*vlan_stg_get)(int,bcm_vlan_t,bcm_stg_t *);
	int (*vlan_stg_set)(int,bcm_vlan_t,bcm_stg_t);
	int (*vlan_stp_get)(int,bcm_vlan_t,bcm_port_t,int *);
	int (*vlan_stp_set)(int,bcm_vlan_t,bcm_port_t,int);
	int (*vlan_translate_action_add)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_action_set_t *);
	int (*vlan_translate_action_class_get)(int,bcm_vlan_translate_action_class_t *);
	int (*vlan_translate_action_class_set)(int,bcm_vlan_translate_action_class_t *);
	/* bcm_vlan_translate_action_class_t_init not dispatchable */
	int (*vlan_translate_action_create)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_action_set_t *);
	int (*vlan_translate_action_delete)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t);
	int (*vlan_translate_action_get)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_action_set_t *);
	int (*vlan_translate_action_id_create)(int,uint32,int *);
	int (*vlan_translate_action_id_destroy)(int,uint32,int);
	int (*vlan_translate_action_id_destroy_all)(int,uint32);
	int (*vlan_translate_action_id_get)(int,uint32,int,bcm_vlan_action_set_t *);
	int (*vlan_translate_action_id_set)(int,uint32,int,bcm_vlan_action_set_t *);
	int (*vlan_translate_action_range_add)(int,bcm_gport_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_action_set_t *);
	int (*vlan_translate_action_range_delete)(int,bcm_gport_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_t);
	int (*vlan_translate_action_range_delete_all)(int);
	int (*vlan_translate_action_range_get)(int,bcm_gport_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_action_set_t *);
	int (*vlan_translate_action_range_traverse)(int,bcm_vlan_translate_action_range_traverse_cb,void *);
	int (*vlan_translate_action_traverse)(int,bcm_vlan_translate_action_traverse_cb,void *);
	int (*vlan_translate_add)(int,int,bcm_vlan_t,bcm_vlan_t,int);
	int (*vlan_translate_delete)(int,int,bcm_vlan_t);
	int (*vlan_translate_delete_all)(int);
	int (*vlan_translate_egress_action_add)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_action_set_t *);
	int (*vlan_translate_egress_action_delete)(int,int,bcm_vlan_t,bcm_vlan_t);
	int (*vlan_translate_egress_action_extended_add)(int,bcm_vlan_translate_egress_key_config_t *,bcm_vlan_translate_egress_action_set_t *);
	int (*vlan_translate_egress_action_extended_delete)(int,bcm_vlan_translate_egress_key_config_t *);
	int (*vlan_translate_egress_action_extended_get)(int,bcm_vlan_translate_egress_key_config_t *,bcm_vlan_translate_egress_action_set_t *);
	int (*vlan_translate_egress_action_extended_traverse)(int,bcm_vlan_translate_egress_action_extended_traverse_cb,void *);
	int (*vlan_translate_egress_action_get)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_action_set_t *);
	/* bcm_vlan_translate_egress_action_set_t_init not dispatchable */
	int (*vlan_translate_egress_action_traverse)(int,bcm_vlan_translate_egress_action_traverse_cb,void *);
	int (*vlan_translate_egress_add)(int,int,bcm_vlan_t,bcm_vlan_t,int);
	int (*vlan_translate_egress_delete)(int,int,bcm_vlan_t);
	int (*vlan_translate_egress_delete_all)(int);
	int (*vlan_translate_egress_flexctr_attach)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_flexctr_config_t *);
	int (*vlan_translate_egress_flexctr_detach)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_flexctr_config_t *);
	int (*vlan_translate_egress_flexctr_detach_all)(int,int,bcm_vlan_t,bcm_vlan_t);
	int (*vlan_translate_egress_flexctr_get)(int,int,bcm_vlan_t,bcm_vlan_t,int,bcm_vlan_flexctr_config_t *,int *);
	int (*vlan_translate_egress_get)(int,int,bcm_vlan_t,bcm_vlan_t *,int *);
	int (*vlan_translate_egress_gport_action_add)(int,bcm_gport_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_action_set_t *);
	int (*vlan_translate_egress_gport_action_delete)(int,bcm_gport_t,bcm_vlan_t,bcm_vlan_t);
	int (*vlan_translate_egress_gport_action_get)(int,bcm_gport_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_action_set_t *);
	/* bcm_vlan_translate_egress_key_config_t_init not dispatchable */
	int (*vlan_translate_egress_stat_attach)(int,int,bcm_vlan_t,bcm_vlan_t,uint32);
	int (*vlan_translate_egress_stat_counter_get)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*vlan_translate_egress_stat_counter_set)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*vlan_translate_egress_stat_counter_sync_get)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*vlan_translate_egress_stat_detach)(int,int,bcm_vlan_t,bcm_vlan_t);
	int (*vlan_translate_egress_stat_enable_set)(int,int,bcm_vlan_t,bcm_vlan_t,int);
	int (*vlan_translate_egress_stat_get)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint64 *);
	int (*vlan_translate_egress_stat_get32)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint32 *);
	int (*vlan_translate_egress_stat_id_get)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint32 *);
	int (*vlan_translate_egress_stat_multi_get)(int,int,bcm_vlan_t,bcm_vlan_t,int,bcm_vlan_stat_t *,uint64 *);
	int (*vlan_translate_egress_stat_multi_get32)(int,int,bcm_vlan_t,bcm_vlan_t,int,bcm_vlan_stat_t *,uint32 *);
	int (*vlan_translate_egress_stat_multi_set)(int,int,bcm_vlan_t,bcm_vlan_t,int,bcm_vlan_stat_t *,uint64 *);
	int (*vlan_translate_egress_stat_multi_set32)(int,int,bcm_vlan_t,bcm_vlan_t,int,bcm_vlan_stat_t *,uint32 *);
	int (*vlan_translate_egress_stat_set)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint64);
	int (*vlan_translate_egress_stat_set32)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint32);
	int (*vlan_translate_egress_stat_sync_get)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint64 *);
	int (*vlan_translate_egress_stat_sync_get32)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint32 *);
	int (*vlan_translate_egress_traverse)(int,bcm_vlan_translate_egress_traverse_cb,void *);
	int (*vlan_translate_flexctr_attach)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_flexctr_config_t *);
	int (*vlan_translate_flexctr_detach)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_flexctr_config_t *);
	int (*vlan_translate_flexctr_detach_all)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t);
	int (*vlan_translate_flexctr_get)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,int,bcm_vlan_flexctr_config_t *,int *);
	int (*vlan_translate_get)(int,int,bcm_vlan_t,bcm_vlan_t *,int *);
	int (*vlan_translate_range_add)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_t,int);
	int (*vlan_translate_range_delete)(int,int,bcm_vlan_t,bcm_vlan_t);
	int (*vlan_translate_range_delete_all)(int);
	int (*vlan_translate_range_get)(int,int,bcm_vlan_t,bcm_vlan_t,bcm_vlan_t *,int *);
	int (*vlan_translate_range_traverse)(int,bcm_vlan_translate_range_traverse_cb,void *);
	int (*vlan_translate_stat_attach)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,uint32);
	int (*vlan_translate_stat_counter_get)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*vlan_translate_stat_counter_set)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*vlan_translate_stat_counter_sync_get)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*vlan_translate_stat_detach)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t);
	int (*vlan_translate_stat_enable_set)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,int);
	int (*vlan_translate_stat_get)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint64 *);
	int (*vlan_translate_stat_get32)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint32 *);
	int (*vlan_translate_stat_id_get)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint32 *);
	int (*vlan_translate_stat_multi_get)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,int,bcm_vlan_stat_t *,uint64 *);
	int (*vlan_translate_stat_multi_get32)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,int,bcm_vlan_stat_t *,uint32 *);
	int (*vlan_translate_stat_multi_set)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,int,bcm_vlan_stat_t *,uint64 *);
	int (*vlan_translate_stat_multi_set32)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,int,bcm_vlan_stat_t *,uint32 *);
	int (*vlan_translate_stat_set)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint64);
	int (*vlan_translate_stat_set32)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint32);
	int (*vlan_translate_stat_sync_get)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint64 *);
	int (*vlan_translate_stat_sync_get32)(int,bcm_gport_t,bcm_vlan_translate_key_t,bcm_vlan_t,bcm_vlan_t,bcm_vlan_stat_t,uint32 *);
	int (*vlan_translate_traverse)(int,bcm_vlan_translate_traverse_cb,void *);
	int (*vlan_vector_flags_set)(int,bcm_vlan_vector_t,uint32,uint32);
	int (*vlan_vector_stp_set)(int,bcm_vlan_vector_t,bcm_port_t,int);
	/* bcm_vlan_vpn_config_t_init not dispatchable */
#ifdef	INCLUDE_L3
	int (*vlan_vpn_create)(int,bcm_vlan_vpn_config_t *);
	int (*vlan_vpn_destroy)(int,bcm_vpn_t);
	int (*vlan_vpn_destroy_all)(int);
	int (*vlan_vpn_get)(int,bcm_vpn_t,bcm_vlan_vpn_config_t *);
	int (*vlan_vpn_traverse)(int,bcm_vlan_vpn_traverse_cb,void *);
#endif	/* INCLUDE_L3 */
	int (*vswitch_create)(int,bcm_vlan_t *);
	int (*vswitch_create_with_id)(int,bcm_vlan_t);
	int (*vswitch_cross_connect_add)(int,bcm_vswitch_cross_connect_t *);
	int (*vswitch_cross_connect_delete)(int,bcm_vswitch_cross_connect_t *);
	int (*vswitch_cross_connect_delete_all)(int);
	int (*vswitch_cross_connect_get)(int,bcm_vswitch_cross_connect_t *);
	/* bcm_vswitch_cross_connect_t_init not dispatchable */
	int (*vswitch_cross_connect_traverse)(int,bcm_vswitch_cross_connect_traverse_cb,void *);
	int (*vswitch_destroy)(int,bcm_vlan_t);
	int (*vswitch_destroy_all)(int);
	int (*vswitch_detach)(int);
	int (*vswitch_flexible_connect_add)(int,uint32,bcm_vswitch_flexible_connect_match_t *,bcm_vswitch_flexible_connect_fwd_t *);
	int (*vswitch_flexible_connect_delete)(int,bcm_vswitch_flexible_connect_match_t *);
	/* bcm_vswitch_flexible_connect_fwd_t_init not dispatchable */
	int (*vswitch_flexible_connect_get)(int,uint32,bcm_vswitch_flexible_connect_match_t *,bcm_vswitch_flexible_connect_fwd_t *);
	/* bcm_vswitch_flexible_connect_match_t_init not dispatchable */
	int (*vswitch_init)(int);
	int (*vswitch_port_add)(int,bcm_vlan_t,bcm_gport_t);
	int (*vswitch_port_delete)(int,bcm_vlan_t,bcm_gport_t);
	int (*vswitch_port_delete_all)(int,bcm_vlan_t);
	int (*vswitch_port_get)(int,bcm_gport_t,bcm_vlan_t *);
	int (*vswitch_port_traverse)(int,bcm_vlan_t,bcm_vswitch_port_traverse_cb,void *);
#ifdef	INCLUDE_L3
	int (*vxlan_cleanup)(int);
	int (*vxlan_dip_stat_attach)(int,bcm_ip_t,uint32);
	int (*vxlan_dip_stat_counter_get)(int,bcm_ip_t,bcm_vxlan_dip_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*vxlan_dip_stat_counter_set)(int,bcm_ip_t,bcm_vxlan_dip_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*vxlan_dip_stat_detach)(int,bcm_ip_t);
	int (*vxlan_dip_stat_id_get)(int,bcm_ip_t,bcm_vxlan_dip_stat_t,uint32 *);
	int (*vxlan_dip_stat_multi_get)(int,bcm_ip_t,int,bcm_vxlan_dip_stat_t *,uint64 *);
	int (*vxlan_dip_stat_multi_get32)(int,bcm_ip_t,int,bcm_vxlan_dip_stat_t *,uint32 *);
	int (*vxlan_dip_stat_multi_set)(int,bcm_ip_t,int,bcm_vxlan_dip_stat_t *,uint64 *);
	int (*vxlan_dip_stat_multi_set32)(int,bcm_ip_t,int,bcm_vxlan_dip_stat_t *,uint32 *);
	int (*vxlan_init)(int);
	int (*vxlan_network_domain_config_add)(int,bcm_vxlan_network_domain_config_t *);
	int (*vxlan_network_domain_config_get)(int,bcm_vxlan_network_domain_config_t *);
	int (*vxlan_network_domain_config_remove)(int,bcm_vxlan_network_domain_config_t *);
	/* bcm_vxlan_network_domain_config_t_init not dispatchable */
	int (*vxlan_network_domain_config_traverse)(int,bcm_vxlan_network_domain_config_additional_info_t *,bcm_vxlan_network_domain_config_traverse_cb,void *);
	int (*vxlan_port_add)(int,bcm_vpn_t,bcm_vxlan_port_t *);
	int (*vxlan_port_delete)(int,bcm_vpn_t,bcm_gport_t);
	int (*vxlan_port_delete_all)(int,bcm_vpn_t);
	int (*vxlan_port_get)(int,bcm_vpn_t,bcm_vxlan_port_t *);
	int (*vxlan_port_get_all)(int,bcm_vpn_t,int,bcm_vxlan_port_t *,int *);
	/* bcm_vxlan_port_t_init not dispatchable */
	int (*vxlan_port_traverse)(int,bcm_vxlan_port_traverse_cb,void *);
	int (*vxlan_stat_attach)(int,bcm_gport_t,bcm_vpn_t,uint32);
	int (*vxlan_stat_counter_get)(int,bcm_gport_t,bcm_vpn_t,bcm_vxlan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*vxlan_stat_counter_set)(int,bcm_gport_t,bcm_vpn_t,bcm_vxlan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*vxlan_stat_counter_sync_get)(int,bcm_gport_t,bcm_vpn_t,bcm_vxlan_stat_t,uint32,uint32 *,bcm_stat_value_t *);
	int (*vxlan_stat_detach)(int,bcm_gport_t,bcm_vpn_t);
	int (*vxlan_stat_enable_set)(int,bcm_gport_t,bcm_vpn_t,int);
	int (*vxlan_stat_id_get)(int,bcm_gport_t,bcm_vpn_t,bcm_vxlan_stat_t,uint32 *);
	int (*vxlan_stat_multi_get)(int,bcm_gport_t,bcm_vpn_t,int,bcm_vxlan_stat_t *,uint64 *);
	int (*vxlan_stat_multi_get32)(int,bcm_gport_t,bcm_vpn_t,int,bcm_vxlan_stat_t *,uint32 *);
	int (*vxlan_stat_multi_set)(int,bcm_gport_t,bcm_vpn_t,int,bcm_vxlan_stat_t *,uint64 *);
	int (*vxlan_stat_multi_set32)(int,bcm_gport_t,bcm_vpn_t,int,bcm_vxlan_stat_t *,uint32 *);
	int (*vxlan_tunnel_initiator_create)(int,bcm_tunnel_initiator_t *);
	int (*vxlan_tunnel_initiator_destroy)(int,bcm_gport_t);
	int (*vxlan_tunnel_initiator_destroy_all)(int);
	int (*vxlan_tunnel_initiator_get)(int,bcm_tunnel_initiator_t *);
	int (*vxlan_tunnel_initiator_traverse)(int,bcm_tunnel_initiator_traverse_cb,void *);
	int (*vxlan_tunnel_terminator_create)(int,bcm_tunnel_terminator_t *);
	int (*vxlan_tunnel_terminator_destroy)(int,bcm_gport_t);
	int (*vxlan_tunnel_terminator_destroy_all)(int);
	int (*vxlan_tunnel_terminator_get)(int,bcm_tunnel_terminator_t *);
	int (*vxlan_tunnel_terminator_traverse)(int,bcm_tunnel_terminator_traverse_cb,void *);
	int (*vxlan_tunnel_terminator_update)(int,bcm_tunnel_terminator_t *);
	/* bcm_vxlan_vpn_config_t_init not dispatchable */
	int (*vxlan_vpn_create)(int,bcm_vxlan_vpn_config_t *);
	int (*vxlan_vpn_destroy)(int,bcm_vpn_t);
	int (*vxlan_vpn_destroy_all)(int);
	int (*vxlan_vpn_get)(int,bcm_vpn_t,bcm_vxlan_vpn_config_t *);
	int (*vxlan_vpn_traverse)(int,bcm_vxlan_vpn_traverse_cb,void *);
	/* bcm_warmboot_get not dispatchable */
	/* bcm_warmboot_set not dispatchable */
	int (*wlan_client_add)(int,bcm_wlan_client_t *);
	int (*wlan_client_delete)(int,bcm_mac_t);
	int (*wlan_client_delete_all)(int);
	int (*wlan_client_get)(int,bcm_mac_t,bcm_wlan_client_t *);
	/* bcm_wlan_client_t_init not dispatchable */
	int (*wlan_client_traverse)(int,bcm_wlan_client_traverse_cb,void *);
	int (*wlan_detach)(int);
	int (*wlan_init)(int);
	int (*wlan_port_add)(int,bcm_wlan_port_t *);
	int (*wlan_port_delete)(int,bcm_gport_t);
	int (*wlan_port_delete_all)(int);
	int (*wlan_port_get)(int,bcm_gport_t,bcm_wlan_port_t *);
	/* bcm_wlan_port_t_init not dispatchable */
	int (*wlan_port_traverse)(int,bcm_wlan_port_traverse_cb,void *);
	int (*wlan_tunnel_initiator_create)(int,bcm_tunnel_initiator_t *);
	int (*wlan_tunnel_initiator_destroy)(int,bcm_gport_t);
	int (*wlan_tunnel_initiator_get)(int,bcm_tunnel_initiator_t *);
#endif	/* INCLUDE_L3 */
#ifdef	INCLUDE_XFLOW_MACSEC
	int (*xflow_macsec_control_get)(int,uint32,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_control_t,uint64 *);
	int (*xflow_macsec_control_set)(int,uint32,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_control_t,uint64);
	int (*xflow_macsec_decrypt_flow_create)(int,uint32,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_decrypt_flow_info_t *,int,bcm_xflow_macsec_flow_id_t *);
	int (*xflow_macsec_decrypt_flow_default_policy_get)(int,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_policy_id_t *);
	int (*xflow_macsec_decrypt_flow_destroy)(int,bcm_xflow_macsec_flow_id_t);
	int (*xflow_macsec_decrypt_flow_enable_get)(int,bcm_xflow_macsec_flow_id_t,int *);
	int (*xflow_macsec_decrypt_flow_enable_set)(int,bcm_xflow_macsec_flow_id_t,int);
	int (*xflow_macsec_decrypt_flow_get)(int,bcm_xflow_macsec_flow_id_t,bcm_xflow_macsec_decrypt_flow_info_t *,int *);
	/* bcm_xflow_macsec_decrypt_flow_info_t_init not dispatchable */
	int (*xflow_macsec_decrypt_flow_set)(int,bcm_xflow_macsec_flow_id_t,bcm_xflow_macsec_decrypt_flow_info_t *,int);
	int (*xflow_macsec_decrypt_policy_create)(int,uint32,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_decrypt_policy_info_t *,bcm_xflow_macsec_policy_id_t *);
	int (*xflow_macsec_decrypt_policy_destroy)(int,bcm_xflow_macsec_policy_id_t);
	int (*xflow_macsec_decrypt_policy_get)(int,bcm_xflow_macsec_policy_id_t,bcm_xflow_macsec_decrypt_policy_info_t *);
	/* bcm_xflow_macsec_decrypt_policy_info_t_init not dispatchable */
	int (*xflow_macsec_decrypt_policy_set)(int,bcm_xflow_macsec_policy_id_t,bcm_xflow_macsec_decrypt_policy_info_t *);
	int (*xflow_macsec_decrypt_svtag_cpu_flex_map_enable_get)(int,bcm_xflow_macsec_instance_id_t,int,int *);
	int (*xflow_macsec_decrypt_svtag_cpu_flex_map_enable_set)(int,bcm_xflow_macsec_instance_id_t,int,int);
	int (*xflow_macsec_decrypt_svtag_cpu_flex_map_get)(int,bcm_xflow_macsec_instance_id_t,int,bcm_xflow_macsec_svtag_cpu_flex_map_info_t *);
	int (*xflow_macsec_decrypt_svtag_cpu_flex_map_set)(int,bcm_xflow_macsec_instance_id_t,int,bcm_xflow_macsec_svtag_cpu_flex_map_info_t *);
	int (*xflow_macsec_event_deregister)(int,bcm_xflow_macsec_event_cb);
	int (*xflow_macsec_event_register)(int,bcm_xflow_macsec_event_cb,void *);
	int (*xflow_macsec_handle_create)(int,bcm_xflow_macsec_handle_info_t *,bcm_xflow_macsec_id_t *);
	int (*xflow_macsec_handle_info_get)(int,bcm_xflow_macsec_id_t,bcm_xflow_macsec_handle_info_t *);
	int (*xflow_macsec_instance_pbmp_map_get)(int,int,bcm_xflow_macsec_instance_pbmp_t *,int *);
	int (*xflow_macsec_ipsec_secure_assoc_create)(int,uint32,bcm_xflow_macsec_secure_chan_id_t,bcm_xflow_macsec_ipsec_secure_assoc_info_t *,bcm_xflow_macsec_secure_assoc_id_t *);
	int (*xflow_macsec_ipsec_secure_assoc_destroy)(int,bcm_xflow_macsec_secure_assoc_id_t);
	int (*xflow_macsec_ipsec_secure_assoc_get)(int,bcm_xflow_macsec_secure_assoc_id_t,bcm_xflow_macsec_ipsec_secure_assoc_info_t *,bcm_xflow_macsec_secure_chan_id_t *);
	/* bcm_xflow_macsec_ipsec_secure_assoc_info_t_init not dispatchable */
	int (*xflow_macsec_ipsec_secure_assoc_set)(int,bcm_xflow_macsec_secure_assoc_id_t,bcm_xflow_macsec_ipsec_secure_assoc_info_t *);
	int (*xflow_macsec_ipsec_secure_assoc_traverse)(int,bcm_xflow_macsec_secure_chan_id_t,bcm_xflow_macsec_ipsec_secure_assoc_traverse_cb,void *);
	int (*xflow_macsec_ipsec_secure_chan_create)(int,uint32,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_ipsec_secure_chan_info_t *,bcm_xflow_macsec_secure_chan_id_t *);
	int (*xflow_macsec_ipsec_secure_chan_destroy)(int,bcm_xflow_macsec_secure_chan_id_t);
	int (*xflow_macsec_ipsec_secure_chan_get)(int,bcm_xflow_macsec_secure_chan_id_t,bcm_xflow_macsec_ipsec_secure_chan_info_t *);
	/* bcm_xflow_macsec_ipsec_secure_chan_info_t_init not dispatchable */
	int (*xflow_macsec_ipsec_secure_chan_info_traverse)(int,uint32,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_ipsec_chan_traverse_cb,void *);
	int (*xflow_macsec_ipsec_secure_chan_set)(int,uint32,bcm_xflow_macsec_secure_chan_id_t,bcm_xflow_macsec_ipsec_secure_chan_info_t *);
	int (*xflow_macsec_mac_addr_control_get)(int,uint32,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_mac_addr_control_t,bcm_xflow_macsec_mac_addr_info_t *);
	int (*xflow_macsec_mac_addr_control_set)(int,uint32,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_mac_addr_control_t,bcm_xflow_macsec_mac_addr_info_t *);
	int (*xflow_macsec_mtu_get)(int,int,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_mtu_t,uint32 *);
	int (*xflow_macsec_mtu_set)(int,int,bcm_xflow_macsec_instance_id_t,uint32,bcm_xflow_macsec_mtu_t *);
	int (*xflow_macsec_port_control_get)(int,uint32,bcm_gport_t,bcm_xflow_macsec_port_control_t,bcm_xflow_macsec_port_info_t *);
	int (*xflow_macsec_port_control_set)(int,uint32,bcm_gport_t,bcm_xflow_macsec_port_control_t,bcm_xflow_macsec_port_info_t *);
	int (*xflow_macsec_port_info_get)(int,bcm_port_t,bcm_xflow_macsec_port_info_t *);
	int (*xflow_macsec_port_info_set)(int,bcm_port_t,bcm_xflow_macsec_port_info_t *);
	/* bcm_xflow_macsec_port_info_t_init not dispatchable */
	int (*xflow_macsec_port_map_info_get)(int,uint32,bcm_gport_t,bcm_xflow_macsec_port_map_info_t *);
	int (*xflow_macsec_port_rsvd_secure_chan_get)(int,uint32,bcm_gport_t,bcm_xflow_macsec_secure_chan_id_t *);
	int (*xflow_macsec_sectag_etype_get)(int,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_sectag_ethertype_t,uint32 *);
	int (*xflow_macsec_sectag_etype_set)(int,int,bcm_xflow_macsec_instance_id_t,uint32,bcm_xflow_macsec_sectag_ethertype_t *);
	int (*xflow_macsec_secure_assoc_create)(int,uint32,bcm_xflow_macsec_secure_chan_id_t,bcm_xflow_macsec_secure_assoc_info_t *,bcm_xflow_macsec_secure_assoc_id_t *);
	int (*xflow_macsec_secure_assoc_destroy)(int,bcm_xflow_macsec_secure_assoc_id_t);
	int (*xflow_macsec_secure_assoc_get)(int,bcm_xflow_macsec_secure_assoc_id_t,bcm_xflow_macsec_secure_assoc_info_t *,bcm_xflow_macsec_secure_chan_id_t *);
	/* bcm_xflow_macsec_secure_assoc_info_t_init not dispatchable */
	int (*xflow_macsec_secure_assoc_set)(int,bcm_xflow_macsec_secure_assoc_id_t,bcm_xflow_macsec_secure_assoc_info_t *);
	int (*xflow_macsec_secure_assoc_traverse)(int,bcm_xflow_macsec_secure_chan_id_t,bcm_xflow_macsec_secure_assoc_traverse_cb,void *);
	int (*xflow_macsec_secure_chan_create)(int,uint32,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_secure_chan_info_t *,int,bcm_xflow_macsec_secure_chan_id_t *);
	int (*xflow_macsec_secure_chan_destroy)(int,bcm_xflow_macsec_secure_chan_id_t);
	int (*xflow_macsec_secure_chan_enable_get)(int,bcm_xflow_macsec_secure_chan_id_t,int *);
	int (*xflow_macsec_secure_chan_enable_set)(int,bcm_xflow_macsec_secure_chan_id_t,int);
	int (*xflow_macsec_secure_chan_get)(int,bcm_xflow_macsec_secure_chan_id_t,bcm_xflow_macsec_secure_chan_info_t *,int *);
	/* bcm_xflow_macsec_secure_chan_info_t_init not dispatchable */
	int (*xflow_macsec_secure_chan_info_traverse)(int,uint32,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_chan_traverse_cb,void *);
	int (*xflow_macsec_secure_chan_set)(int,uint32,bcm_xflow_macsec_secure_chan_id_t,bcm_xflow_macsec_secure_chan_info_t *,int);
	int (*xflow_macsec_stat_get)(int,uint32,bcm_xflow_macsec_id_t,bcm_xflow_macsec_stat_type_t,uint64 *);
	int (*xflow_macsec_stat_multi_get)(int,uint32,bcm_xflow_macsec_id_t,uint32,bcm_xflow_macsec_stat_type_t *,uint64 *);
	int (*xflow_macsec_stat_multi_set)(int,uint32,bcm_xflow_macsec_id_t,uint32,bcm_xflow_macsec_stat_type_t *,uint64 *);
	int (*xflow_macsec_stat_set)(int,uint32,bcm_xflow_macsec_id_t,bcm_xflow_macsec_stat_type_t,uint64);
	int (*xflow_macsec_subport_id_get)(int,bcm_xflow_macsec_id_t,bcm_xflow_macsec_subport_id_t *);
	int (*xflow_macsec_vlan_tpid_array_get)(int,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_vlan_tpid_t *);
	int (*xflow_macsec_vlan_tpid_array_index_get)(int,bcm_xflow_macsec_instance_id_t,uint32,uint8 *);
	int (*xflow_macsec_vlan_tpid_array_set)(int,bcm_xflow_macsec_instance_id_t,bcm_xflow_macsec_vlan_tpid_t *);
#endif	/* INCLUDE_XFLOW_MACSEC */
} bcm_dispatch_t;

#endif	/* !_BCM_INT_DISPATCH_H */
