/*
 *         
 * 
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *         
 *     
 * DO NOT EDIT THIS FILE!
 */

#ifndef _CPM4X25_H__H_
#define _CPM4X25_H__H_

#include <phymod/phymod.h>
#include <phymod/phymod_diagnostics.h>
#include <phymod/phymod_reg.h>
#include <soc/cprimod/cprimod.h>
#include <soc/portmod/portmod_defs.h>
#include <sal/core/sync.h>
/*Add new port*/
int cpm4x25_port_attach(int unit, int port, pm_info_t pm_info, const portmod_port_add_info_t* add_info);

/*Port remove in PM level*/
int cpm4x25_port_detach(int unit, int port, pm_info_t pm_info);

/*Port replace in PM level*/
int cpm4x25_port_replace(int unit, int port, pm_info_t pm_info, int new_port);

/*Port enable*/
int cpm4x25_port_enable_set(int unit, int port, pm_info_t pm_info, int flags, int enable);
int cpm4x25_port_enable_get(int unit, int port, pm_info_t pm_info, int flags, int* enable);

/* set/get the interface, speed and encapsulation for the specified port.
            For the First port within core this function initialize the PM, MAC and PHY before configure the port.*/
int cpm4x25_port_interface_config_set(int unit, int port, pm_info_t pm_info, const portmod_port_interface_config_t* config, int phy_init_flags);
int cpm4x25_port_interface_config_get(int unit, int port, pm_info_t pm_info, portmod_port_interface_config_t* config, int phy_init_flags);

/*Port speed set\get*/
int cpm4x25_port_loopback_set(int unit, int port, pm_info_t pm_info, portmod_loopback_mode_t loopback_type, int enable);
int cpm4x25_port_loopback_get(int unit, int port, pm_info_t pm_info, portmod_loopback_mode_t loopback_type, int* enable);

/*Port RX MAC ENABLE set\get*/
int cpm4x25_port_rx_mac_enable_set(int unit, int port, pm_info_t pm_info, int enable);
int cpm4x25_port_rx_mac_enable_get(int unit, int port, pm_info_t pm_info, int* enable);

/*Port TX MAC ENABLE set\get*/
int cpm4x25_port_tx_mac_enable_set(int unit, int port, pm_info_t pm_info, int enable);
int cpm4x25_port_tx_mac_enable_get(int unit, int port, pm_info_t pm_info, int* enable);

/*Set\Get autoneg*/
int cpm4x25_port_autoneg_set(int unit, int port, pm_info_t pm_info, uint32 phy_flags, const phymod_autoneg_control_t* an);
int cpm4x25_port_autoneg_get(int unit, int port, pm_info_t pm_info, uint32 phy_flags, phymod_autoneg_control_t* an);

/*Get autoneg status*/
int cpm4x25_port_autoneg_status_get(int unit, int port, pm_info_t pm_info, phymod_autoneg_status_t* an_status);

/*get link status*/
int cpm4x25_port_link_get(int unit, int port, pm_info_t pm_info, int flags, int* link);

/* link up event */
int cpm4x25_port_phy_link_up_event(int unit, int port, pm_info_t pm_info);

/* link down event */
int cpm4x25_port_phy_link_down_event(int unit, int port, pm_info_t pm_info);

/*get port auto negotiation local ability*/
int cpm4x25_port_ability_advert_set(int unit, int port, pm_info_t pm_info, uint32 phy_flags, portmod_port_ability_t* ability);
int cpm4x25_port_ability_advert_get(int unit, int port, pm_info_t pm_info, uint32 phy_flags, portmod_port_ability_t* ability);

/*Port ability remote Adv get*/
int cpm4x25_port_ability_remote_get(int unit, int port, pm_info_t pm_info, uint32 phy_flags, portmod_port_ability_t* ability);

/*set port encap.*/
int cpm4x25_port_encap_set(int unit, int port, pm_info_t pm_info, int flags, portmod_encap_t encap);
int cpm4x25_port_encap_get(int unit, int port, pm_info_t pm_info, int* flags, portmod_encap_t* encap);

/*Restore informaation after drain cells.*/
int cpm4x25_port_drain_cell_stop(int unit, int port, pm_info_t pm_info, const portmod_drain_cells_t* drain_cells);

/*Restore informaation after drain cells.*/
int cpm4x25_port_drain_cell_start(int unit, int port, pm_info_t pm_info);

/**/
int cpm4x25_port_drain_cells_rx_enable(int unit, int port, pm_info_t pm_info, int rx_en);

/**/
int cpm4x25_port_egress_queue_drain_rx_en(int unit, int port, pm_info_t pm_info, int rx_en);

/**/
int cpm4x25_port_mac_ctrl_set(int unit, int port, pm_info_t pm_info, uint64 ctrl);

/**/
int cpm4x25_port_egress_queue_drain_get(int unit, int port, pm_info_t pm_info, uint64* ctrl, int* rxen);

/*Set/get port mac reset */
int cpm4x25_port_mac_reset_set(int unit, int port, pm_info_t pm_info, int val);
int cpm4x25_port_mac_reset_get(int unit, int port, pm_info_t pm_info, int* val);

/*Check if MAC needs to be reset.*/
int cpm4x25_port_mac_reset_check(int unit, int port, pm_info_t pm_info, int enable, int* reset);

/*get the speed for the specified port*/
int cpm4x25_port_speed_get(int unit, int port, pm_info_t pm_info, int* speed);

/*Port tx_en=0 and softreset mac*/
int cpm4x25_port_tx_down(int unit, int port, pm_info_t pm_info);

/*"port control phy timesync config set/get"*/
int cpm4x25_port_control_phy_timesync_set(int unit, int port, pm_info_t pm_info, portmod_port_control_phy_timesync_t config, uint64 value);
int cpm4x25_port_control_phy_timesync_get(int unit, int port, pm_info_t pm_info, portmod_port_control_phy_timesync_t config, uint64* value);

/*"port timesync config set/get"*/
int cpm4x25_port_timesync_config_set(int unit, int port, pm_info_t pm_info, const portmod_phy_timesync_config_t* config);
int cpm4x25_port_timesync_config_get(int unit, int port, pm_info_t pm_info, portmod_phy_timesync_config_t* config);

/*"port timesync enable set/get"*/
int cpm4x25_port_timesync_enable_set(int unit, int port, pm_info_t pm_info, uint32 enable);
int cpm4x25_port_timesync_enable_get(int unit, int port, pm_info_t pm_info, uint32* enable);

/* Activate the basic framer standby table. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_stage_activate(int unit, int port, pm_info_t pm_info, portmod_cpri_stage_t stage);
#endif /* CPRIMOD_SUPPORT */

/*Set rsvd4 fsm state */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_tx_fsm_state_set(int unit, int port, pm_info_t pm_info, cprimod_rsvd4_tx_fsm_state_t state);
#endif /* CPRIMOD_SUPPORT */

/*Set rsvd4 tx override */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_tx_override_set(int unit, int port, pm_info_t pm_info, cprimod_rsvd4_tx_overide_t parameter, int enable, int value);
#endif /* CPRIMOD_SUPPORT */

/*Set rsvd4 rx override */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_rx_override_set(int unit, int port, pm_info_t pm_info, cprimod_rsvd4_rx_overide_t parameter, int enable, int value);
#endif /* CPRIMOD_SUPPORT */

/*Add Rx AxC to the framer. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_axc_frame_add(int unit, int port, pm_info_t pm_info, uint32 axc_id, const portmod_cpri_axc_frame_info_t* frame_info);
#endif /* CPRIMOD_SUPPORT */

/*Set/Get Rx required field. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_frame_optional_config_set(int unit, int port, pm_info_t pm_info, cprimod_rx_config_field_t field, int value);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_frame_optional_config_get(int unit, int port, pm_info_t pm_info, cprimod_rx_config_field_t field, int* value);
#endif /* CPRIMOD_SUPPORT */

/*Set/Get Tx required field. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_frame_optional_config_set(int unit, int port, pm_info_t pm_info, cprimod_tx_config_field_t field, uint32 value);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_frame_optional_config_get(int unit, int port, pm_info_t pm_info, cprimod_tx_config_field_t field, uint32* value);
#endif /* CPRIMOD_SUPPORT */

/*Set/Get Rx required field. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_port_rsvd4_rx_frame_optional_config_set(int unit, int port, pm_info_t pm_info, cprimod_rsvd4_rx_config_field_t field, int value);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_port_rsvd4_rx_frame_optional_config_get(int unit, int port, pm_info_t pm_info, cprimod_rsvd4_rx_config_field_t field, int* value);
#endif /* CPRIMOD_SUPPORT */

/*Set/Get Tx required field. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_port_rsvd4_tx_frame_optional_config_set(int unit, int port, pm_info_t pm_info, cprimod_rsvd4_tx_config_field_t field, int value);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_port_rsvd4_tx_frame_optional_config_get(int unit, int port, pm_info_t pm_info, cprimod_rsvd4_tx_config_field_t field, int* value);
#endif /* CPRIMOD_SUPPORT */

/*Set/Get Tx required field. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_port_rsvd4_rx_speed_set(int unit, int port, pm_info_t pm_info, cprimod_port_rsvd4_speed_mult_t speed);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_port_rsvd4_rx_speed_get(int unit, int port, pm_info_t pm_info, cprimod_port_rsvd4_speed_mult_t* speed);
#endif /* CPRIMOD_SUPPORT */

/*Set/Get Tx required field. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_port_rsvd4_tx_speed_set(int unit, int port, pm_info_t pm_info, cprimod_port_rsvd4_speed_mult_t speed);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_port_rsvd4_tx_speed_get(int unit, int port, pm_info_t pm_info, cprimod_port_rsvd4_speed_mult_t* speed);
#endif /* CPRIMOD_SUPPORT */

/*Delete Rx AxC to the framer. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_axc_frame_delete(int unit, int port, pm_info_t pm_info, uint32 axc_id);
#endif /* CPRIMOD_SUPPORT */

/*Get Rx AxC to the framer. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_axc_frame_get(int unit, int port, pm_info_t pm_info, uint32 axc_id, uint32 from_get_all, portmod_cpri_axc_frame_info_t* frame_info);
#endif /* CPRIMOD_SUPPORT */

/*Set rsvd4 fsm state */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_rx_fsm_state_set(int unit, int port, pm_info_t pm_info, cprimod_rsvd4_rx_fsm_state_t state);
#endif /* CPRIMOD_SUPPORT */

/*Add Tx AxC to the framer. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_axc_frame_add(int unit, int port, pm_info_t pm_info, uint32 axc_id, const portmod_cpri_axc_frame_info_t* frame_info);
#endif /* CPRIMOD_SUPPORT */

/*Delete Tx AxC to the framer. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_axc_frame_delete(int unit, int port, pm_info_t pm_info, uint32 axc_id);
#endif /* CPRIMOD_SUPPORT */

/*Get Tx AxC to the framer. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_axc_frame_get(int unit, int port, pm_info_t pm_info, uint32 axc_id, uint32 from_get_all, portmod_cpri_axc_frame_info_t* frame_info);
#endif /* CPRIMOD_SUPPORT */

/*Encap Header Configuration. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_encap_set(int unit, int port, pm_info_t pm_info, uint32 queue_num, const cprimod_encap_header_config_t* config);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_encap_get(int unit, int port, pm_info_t pm_info, uint32 queue_num, cprimod_encap_header_config_t* config);
#endif /* CPRIMOD_SUPPORT */

/*Encap Ordering info. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_encap_roe_ordering_info_set(int unit, int port, pm_info_t pm_info, uint32 index, const cprimod_encap_ordering_info_entry_t* config);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_encap_roe_ordering_info_get(int unit, int port, pm_info_t pm_info, uint32 index, cprimod_encap_ordering_info_entry_t* config);
#endif /* CPRIMOD_SUPPORT */

/*Encap Ordering info Offset. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_encap_roe_ordering_sequence_offset_set(int unit, int port, pm_info_t pm_info, uint32 queue_num, uint32 control, const cprimod_cpri_ordering_info_offset_t* config);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_encap_roe_ordering_sequence_offset_get(int unit, int port, pm_info_t pm_info, uint32 queue_num, uint32 control, cprimod_cpri_ordering_info_offset_t* config);
#endif /* CPRIMOD_SUPPORT */

/*Encap Mac Da. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_roe_encap_macda_entry_set(int unit, int port, pm_info_t pm_info, uint32 index, cprimod_mac_addr_t mac_addr);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_roe_encap_macda_entry_get(int unit, int port, pm_info_t pm_info, uint32 index, cprimod_mac_addr_t mac_addr);
#endif /* CPRIMOD_SUPPORT */

/*Encap Mac Sa. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_roe_encap_macsa_entry_set(int unit, int port, pm_info_t pm_info, uint32 index, cprimod_mac_addr_t mac_addr);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_roe_encap_macsa_entry_get(int unit, int port, pm_info_t pm_info, uint32 index, cprimod_mac_addr_t mac_addr);
#endif /* CPRIMOD_SUPPORT */

/*Encap VLAN. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_roe_encap_vlan_entry_set(int unit, int port, pm_info_t pm_info, uint32 index, cprimod_vlan_table_id_t table_id, uint32 vlan_id);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_roe_encap_vlan_entry_get(int unit, int port, pm_info_t pm_info, uint32 index, cprimod_vlan_table_id_t table_id, uint32* vlan_id);
#endif /* CPRIMOD_SUPPORT */

/* Set Decap ethtype for a packet type. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_ethertype_config_set(int unit, int port, pm_info_t pm_info, cprimod_ethertype_t pkt_type, uint16 ethtype);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_ethertype_config_get(int unit, int port, pm_info_t pm_info, cprimod_ethertype_t pkt_type, uint16* ethtype);
#endif /* CPRIMOD_SUPPORT */

/* Set Encap ethtype for a packet type. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_encap_ethertype_config_set(int unit, int port, pm_info_t pm_info, cprimod_ethertype_t pkt_type, uint16 ethtype);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_encap_ethertype_config_get(int unit, int port, pm_info_t pm_info, cprimod_ethertype_t pkt_type, uint16* ethtype);
#endif /* CPRIMOD_SUPPORT */

/* Flow Classification. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_flow_config_set(int unit, int port, pm_info_t pm_info, uint8 roe_subtype, uint32 queue_num, cprimod_cls_option_t cls_option, cprimod_cls_flow_type_t flow_type);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_flow_config_get(int unit, int port, pm_info_t pm_info, uint8 roe_subtype, uint32* queue_num, cprimod_cls_option_t* cls_option, cprimod_cls_flow_type_t* flow_type);
#endif /* CPRIMOD_SUPPORT */

/* Clear Flow Classification. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_flow_config_clear(int unit, int port, pm_info_t pm_info, uint8 roe_subtype);
#endif /* CPRIMOD_SUPPORT */

/* Queue to Ordering info Index. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_queue_to_ordering_info_index_set(int unit, int port, pm_info_t pm_info, uint32 queue_num, uint32 ordering_info_index);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_queue_to_ordering_info_index_get(int unit, int port, pm_info_t pm_info, uint32 queue_num, uint32* ordering_info_index);
#endif /* CPRIMOD_SUPPORT */

/* Queue to Ordering info Index. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_flow_to_queue_mapping_set(int unit, int port, pm_info_t pm_info, uint32 flow_id, uint32 queue_num);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_flow_to_queue_mapping_get(int unit, int port, pm_info_t pm_info, uint32 flow_id, uint32* queue_num);
#endif /* CPRIMOD_SUPPORT */

/* Mapping  the flow to Invalid Queue. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_flow_to_queue_mapping_clear(int unit, int port, pm_info_t pm_info, uint32 flow_id);
#endif /* CPRIMOD_SUPPORT */

/*Decap Ordering info. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_roe_ordering_info_set(int unit, int port, pm_info_t pm_info, uint32 index, const cprimod_decap_ordering_info_entry_t* config);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_roe_ordering_info_get(int unit, int port, pm_info_t pm_info, uint32 index, cprimod_decap_ordering_info_entry_t* config);
#endif /* CPRIMOD_SUPPORT */

/*Encap Ordering info Offset. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_roe_ordering_sequence_offset_set(int unit, int port, pm_info_t pm_info, uint32 queue_num, const cprimod_cpri_ordering_info_offset_t* config);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_roe_ordering_sequence_offset_get(int unit, int port, pm_info_t pm_info, uint32 queue_num, cprimod_cpri_ordering_info_offset_t* config);
#endif /* CPRIMOD_SUPPORT */

/*TGEN configuration.*/
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_frame_tgen_config_set(int unit, int port, pm_info_t pm_info, const portmod_tx_frame_tgen_config_t* config);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_frame_tgen_config_get(int unit, int port, pm_info_t pm_info, portmod_tx_frame_tgen_config_t* config);
#endif /* CPRIMOD_SUPPORT */

/*TGEN configuration.*/
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_frame_tgen_enable(int unit, int port, pm_info_t pm_info, uint32 enable);
#endif /* CPRIMOD_SUPPORT */

/*TGEN Offset.*/
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_frame_tgen_ts_offset_set(int unit, int port, pm_info_t pm_info, uint64 offset);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_frame_tgen_ts_offset_get(int unit, int port, pm_info_t pm_info, uint64* offset);
#endif /* CPRIMOD_SUPPORT */

/*Get next hyper frame number.*/
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_frame_next_hfn_get(int unit, int port, pm_info_t pm_info, uint32* hfn);
#endif /* CPRIMOD_SUPPORT */

/*Get next radio frame/master frame number.*/
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_frame_next_bfn_get(int unit, int port, pm_info_t pm_info, uint32* bfn);
#endif /* CPRIMOD_SUPPORT */

/* RSVD4 rx data flow add.*/
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_rx_flow_add(int unit, int port, pm_info_t pm_info, uint32 flow_id, const portmod_rsvd4_rx_flow_info_t* info);
#endif /* CPRIMOD_SUPPORT */

/* RSVD4 rx data flow delete.*/
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_rx_flow_delete(int unit, int port, pm_info_t pm_info, uint32 flow_id);
#endif /* CPRIMOD_SUPPORT */

/* RSVD4 Tx Flow add.*/
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_tx_flow_add(int unit, int port, pm_info_t pm_info, uint32 flow_id, const portmod_rsvd4_tx_flow_info_t* info);
#endif /* CPRIMOD_SUPPORT */

/* RSVD4 tx data flow delete.*/
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_tx_flow_delete(int unit, int port, pm_info_t pm_info, uint32 flow_id);
#endif /* CPRIMOD_SUPPORT */

/* RSVD4 Set/Get DBM Profile.*/
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_dbm_entry_set(int unit, int port, pm_info_t pm_info, uint32 profile_id, const cprimod_dbm_rule_entry_t* profile);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_dbm_entry_get(int unit, int port, pm_info_t pm_info, uint32 profile_id, cprimod_dbm_rule_entry_t* profile);
#endif /* CPRIMOD_SUPPORT */

/* RSVD4 Set/Get Secondary DBM Profile.*/
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_secondary_dbm_entry_set(int unit, int port, pm_info_t pm_info, uint32 profile_id, const cprimod_secondary_dbm_rule_entry_t* profile);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_secondary_dbm_entry_get(int unit, int port, pm_info_t pm_info, uint32 profile_id, cprimod_secondary_dbm_rule_entry_t* profile);
#endif /* CPRIMOD_SUPPORT */

/* Modulo Rule Entry Set/Get.  */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_modulo_rule_entry_set(int unit, int port, pm_info_t pm_info, uint32 modulo_rule_num, cprimod_transmission_rule_type_t modulo_rule_type, const cprimod_modulo_rule_entry_t* modulo_rule);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_modulo_rule_entry_get(int unit, int port, pm_info_t pm_info, uint32 modulo_rule_num, cprimod_transmission_rule_type_t modulo_rule_type, cprimod_modulo_rule_entry_t* modulo_rule);
#endif /* CPRIMOD_SUPPORT */

/* Dual Bitmap Position Table Entry Set/Get.  */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_dbm_position_entry_set(int unit, int port, pm_info_t pm_info, uint32 index, const cprimod_dbm_pos_table_entry_t* pos_entry);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_dbm_position_entry_get(int unit, int port, pm_info_t pm_info, uint32 index, cprimod_dbm_pos_table_entry_t* pos_entry);
#endif /* CPRIMOD_SUPPORT */

/*Set/Get Rx Master Frame Synchronizaiton */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_rx_master_frame_sync_config_set(int unit, int port, pm_info_t pm_info, uint32 master_frame_number, uint64 master_frame_start_time);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rsvd4_rx_master_frame_sync_config_get(int unit, int port, pm_info_t pm_info, uint32* master_frame_number, uint64* master_frame_start_time);
#endif /* CPRIMOD_SUPPORT */

/*Get supported VCOs*/
int cpm4x25_port_vcos_get(int unit, int port, pm_info_t pm_info, const portmod_vcos_speed_config_t* speed_config_list, int size, portmod_dual_vcos_t* dual_vco);

/* CPRI Sync information. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_cw_sync_info_get(int unit, int port, pm_info_t pm_info, uint32* hyper_frame_num, uint32* radio_frame_num);
#endif /* CPRIMOD_SUPPORT */

/*Get L1 portocol information. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_cw_l1_inband_info_get(int unit, int port, pm_info_t pm_info, portmod_cpri_cw_l1_inband_info_t* l1_inband_info);
#endif /* CPRIMOD_SUPPORT */

/*Set/Get L1 Protection. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_cw_l1_signal_signal_protection_set(int unit, int port, pm_info_t pm_info, uint32 signal_map, uint32 enable);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_cw_l1_signal_signal_protection_get(int unit, int port, pm_info_t pm_info, uint32 signal_map, uint32* enable);
#endif /* CPRIMOD_SUPPORT */

/*HDLC Config Set/Get. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_cw_slow_hdlc_config_set(int unit, int port, pm_info_t pm_info, const portmod_cpri_slow_hdlc_config_info_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_cw_slow_hdlc_config_get(int unit, int port, pm_info_t pm_info, portmod_cpri_slow_hdlc_config_info_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/*Fast ETH Config Set/Get. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_cw_fast_eth_config_set(int unit, int port, pm_info_t pm_info, const portmod_cpri_fast_eth_config_info_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_cw_fast_eth_config_get(int unit, int port, pm_info_t pm_info, portmod_cpri_fast_eth_config_info_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/*CPRI Rx VSD  Config Set/Get. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_vsd_config_set(int unit, int port, pm_info_t pm_info, const portmod_cpri_rx_vsd_config_info_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_vsd_config_get(int unit, int port, pm_info_t pm_info, portmod_cpri_rx_vsd_config_info_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/*CPRI Tx VSD Config Set/Get. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_vsd_config_set(int unit, int port, pm_info_t pm_info, const portmod_cpri_tx_vsd_config_info_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_vsd_config_get(int unit, int port, pm_info_t pm_info, portmod_cpri_tx_vsd_config_info_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/*CPRI Rx VSD Config Flow Add. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_vsd_flow_add(int unit, int port, pm_info_t pm_info, uint32 group_id, const portmod_cpri_rx_vsd_flow_info_t* flow_info);
#endif /* CPRIMOD_SUPPORT */

/*CPRI Rx VSD Config Flow Get. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_vsd_flow_get(int unit, int port, pm_info_t pm_info, uint32 group_id, portmod_cpri_rx_vsd_flow_info_t* flow_info);
#endif /* CPRIMOD_SUPPORT */

/* Delete CPRI Rx VSD Group Flow. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_vsd_flow_delete(int unit, int port, pm_info_t pm_info, uint32 group_id);
#endif /* CPRIMOD_SUPPORT */

/*CPRI Rx VSD Config Flow Add. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_vsd_flow_add(int unit, int port, pm_info_t pm_info, uint32 group_id, const portmod_cpri_tx_vsd_flow_info_t* flow_info);
#endif /* CPRIMOD_SUPPORT */

/* Delete CPRI Rx VSD Group Flow. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_vsd_flow_delete(int unit, int port, pm_info_t pm_info, uint32 group_id);
#endif /* CPRIMOD_SUPPORT */

/*CPRI Rx VSD Config Flow Get. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_vsd_flow_get(int unit, int port, pm_info_t pm_info, uint32 group_id, portmod_cpri_tx_vsd_flow_info_t* flow_info);
#endif /* CPRIMOD_SUPPORT */

/*CPRI Rx VSD  Config Set/Get. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_encap_queue_control_tag_to_flow_map_set(int unit, int port, pm_info_t pm_info, uint32 tag_id, uint32 flow_id);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_encap_queue_control_tag_to_flow_map_get(int unit, int port, pm_info_t pm_info, uint32 tag_id, uint32* flow_id);
#endif /* CPRIMOD_SUPPORT */

/* Get/Set VSD Raw Configuration. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_vsd_raw_config_set(int unit, int port, pm_info_t pm_info, uint32 index, const portmod_cpri_rx_vsd_raw_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_vsd_raw_config_get(int unit, int port, pm_info_t pm_info, uint32 index, portmod_cpri_rx_vsd_raw_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/* Get/Set Tx VSD Raw Configuration. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_vsd_raw_config_set(int unit, int port, pm_info_t pm_info, uint32 index, const portmod_cpri_tx_vsd_raw_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_vsd_raw_config_get(int unit, int port, pm_info_t pm_info, uint32 index, portmod_cpri_tx_vsd_raw_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/* VSD Raw Radio Frame Filter Set/Get. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_vsd_raw_filter_set(int unit, int port, pm_info_t pm_info, uint32 bfn0_value, uint32 bfn0_mask, uint32 bfn1_value, uint32 bfn1_mask);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_vsd_raw_filter_get(int unit, int port, pm_info_t pm_info, uint32* bfn0_value, uint32* bfn0_mask, uint32* bfn1_value, uint32* bfn1_mask);
#endif /* CPRIMOD_SUPPORT */

/* Get/Set Rx RSVD5 Configuration. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_brcm_rsvd5_config_set(int unit, int port, pm_info_t pm_info, const portmod_cpri_rx_brcm_rsvd5_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_brcm_rsvd5_config_get(int unit, int port, pm_info_t pm_info, portmod_cpri_rx_brcm_rsvd5_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/* Get/Set Tx RSVD5 Configuration. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_brcm_rsvd5_config_set(int unit, int port, pm_info_t pm_info, const portmod_cpri_tx_brcm_rsvd5_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_brcm_rsvd5_config_get(int unit, int port, pm_info_t pm_info, portmod_cpri_tx_brcm_rsvd5_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/* Get/Set Rx GCW Configuration. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_gcw_config_set(int unit, int port, pm_info_t pm_info, uint32 index, const portmod_cpri_rx_gcw_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_gcw_config_get(int unit, int port, pm_info_t pm_info, uint32 index, portmod_cpri_rx_gcw_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/* Get/Set Tx GCW Configuration. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_gcw_config_set(int unit, int port, pm_info_t pm_info, uint32 index, const portmod_cpri_tx_gcw_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_gcw_config_get(int unit, int port, pm_info_t pm_info, uint32 index, portmod_cpri_tx_gcw_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/* GCW Radio Frame Filter Set/Get. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_gcw_filter_set(int unit, int port, pm_info_t pm_info, uint32 bfn0_value, uint32 bfn0_mask, uint32 bfn1_value, uint32 bfn1_mask);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_gcw_filter_get(int unit, int port, pm_info_t pm_info, uint32* bfn0_value, uint32* bfn0_mask, uint32* bfn1_value, uint32* bfn1_mask);
#endif /* CPRIMOD_SUPPORT */

/* CPRI Sync information. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_cw_sync_info_set(int unit, int port, pm_info_t pm_info, uint32 hyper_frame_num, uint32 radio_frame_num);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_cw_sync_info_get(int unit, int port, pm_info_t pm_info, uint32* hyper_frame_num, uint32* radio_frame_num);
#endif /* CPRIMOD_SUPPORT */

/* CPRI Tx Control Word L1 Inband information. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_cw_l1_inband_info_set(int unit, int port, pm_info_t pm_info, const portmod_cpri_cw_l1_inband_info_t* l1_inband_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_cw_l1_inband_info_get(int unit, int port, pm_info_t pm_info, portmod_cpri_cw_l1_inband_info_t* l1_inband_info);
#endif /* CPRIMOD_SUPPORT */

/* Set Control Message Configuration.. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_rx_control_flow_add(int unit, int port, pm_info_t pm_info, uint32 flow_id, const portmod_control_flow_config_t* config);
#endif /* CPRIMOD_SUPPORT */

/* Set Control Message Configuration.. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_rx_control_flow_delete(int unit, int port, pm_info_t pm_info, uint32 flow_id, const portmod_control_flow_config_t* config);
#endif /* CPRIMOD_SUPPORT */

/* Set Fast Ethernet configuration.. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_fast_eth_config_set(int unit, int port, pm_info_t pm_info, const portmod_cpri_fast_eth_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/* Sync Profile Entry.. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_rx_sync_profile_entry_set(int unit, int port, pm_info_t pm_info, uint32 profile_id, const portmod_sync_profile_entry_t* entry);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_rx_sync_profile_entry_get(int unit, int port, pm_info_t pm_info, uint32 profile_id, portmod_sync_profile_entry_t* entry);
#endif /* CPRIMOD_SUPPORT */

/* Tag Generation Entry.. */
int cpm4x25_rx_tag_config_set(int unit, int port, pm_info_t pm_info, uint32 default_tag, uint32 no_match_tag);

/* Tag Generation Entry.. */
int cpm4x25_rx_tag_gen_entry_add(int unit, int port, pm_info_t pm_info, const portmod_tag_gen_entry_t* entry);

/* Tag Generation Entry.. */
int cpm4x25_rx_tag_gen_entry_delete(int unit, int port, pm_info_t pm_info, const portmod_tag_gen_entry_t* entry);

/* Add member to the Tx Control Flow Group.. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_tx_control_flow_group_member_add(int unit, int port, pm_info_t pm_info, uint32 group_id, uint32 priority, uint32 queue_num, portmod_control_msg_proc_type_t proc_type);
#endif /* CPRIMOD_SUPPORT */

/* Delete member to the Tx Control Flow Group.. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_tx_control_flow_group_member_delete(int unit, int port, pm_info_t pm_info, uint32 group_id, uint32 priority);
#endif /* CPRIMOD_SUPPORT */

/* Setting RSVD4 Fast Ethernet Control Message Configuration.. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_tx_eth_message_config_set(int unit, int port, pm_info_t pm_info, uint32 msg_node, uint32 msg_subnode, uint32 msg_type, uint32 msg_padding);
#endif /* CPRIMOD_SUPPORT */

/* Setting RSVD4 Single Raw Control Message Configuration.. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_tx_single_raw_message_config_set(int unit, int port, pm_info_t pm_info, uint32 msg_id, uint32 msg_type);
#endif /* CPRIMOD_SUPPORT */

/* Set Control Message Configuration.. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_tx_control_flow_config_set(int unit, int port, pm_info_t pm_info, uint32 flow_id, const portmod_rsvd4_tx_config_info_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_tx_control_flow_config_get(int unit, int port, pm_info_t pm_info, uint32 flow_id, portmod_rsvd4_tx_config_info_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/* Set Index to header config table for a particular flow.. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_tx_control_flow_header_index_set(int unit, int port, pm_info_t pm_info, uint32 roe_flow_id, uint32 index);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_tx_control_flow_header_index_get(int unit, int port, pm_info_t pm_info, uint32 roe_flow_id, uint32* index);
#endif /* CPRIMOD_SUPPORT */

/*  Header Look up Entry.. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_tx_control_header_entry_set(int unit, int port, pm_info_t pm_info, uint32 index, uint32 header_node, uint32 header_subnode, uint32 payload_node);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_tx_control_header_entry_get(int unit, int port, pm_info_t pm_info, uint32 index, uint32* header_node, uint32* header_subnode, uint32* payload_node);
#endif /* CPRIMOD_SUPPORT */

/* Setting RSVD4 Single Raw Control Message Configuration.. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_tx_single_tunnel_message_config_set(int unit, int port, pm_info_t pm_info, portmod_cpri_crc_option_t crc_option);
#endif /* CPRIMOD_SUPPORT */

/*Validate a set of speed config within a port macro.*/
int cpm4x25_pm_speed_config_validate(int unit, int pm_id, pm_info_t pm_info, const portmod_pbmp_t* ports, int flag, portmod_pm_vco_setting_t* vco_setting);

/* Get the CPRI Port interrupt status of the ports in the core. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_interrupt_link_status_get(int unit, int port, pm_info_t pm_info, const int* is_link_intr_status);
#endif /* CPRIMOD_SUPPORT */

/* Get the CPRI Port interrupt status. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_interrupt_enable_set(int unit, int port, pm_info_t pm_info, portmod_cpri_port_intr_type_t cpri_intr_type, int data, int enable);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_interrupt_enable_get(int unit, int port, pm_info_t pm_info, portmod_cpri_port_intr_type_t cpri_intr_type, int data, int* enable);
#endif /* CPRIMOD_SUPPORT */

/*  Porcess CPRI PM interrupts. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_pm_interrupt_process(int unit, int pm_id, pm_info_t pm_info);
#endif /* CPRIMOD_SUPPORT */

/* set/get fast clk bit period */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_fast_clk_bit_time_period_set(int unit, int port, pm_info_t pm_info, uint32 bit_time_period);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_fast_clk_bit_time_period_get(int unit, int port, pm_info_t pm_info, uint32* bit_time_period);
#endif /* CPRIMOD_SUPPORT */

/* set/get time stamp bit period */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_1588_bit_time_period_set(int unit, int port, pm_info_t pm_info, portmod_direction_t direction, cprimod_port_speed_t speed);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_1588_bit_time_period_get(int unit, int port, pm_info_t pm_info, portmod_direction_t direction, uint32* bit_time_period);
#endif /* CPRIMOD_SUPPORT */

/* set/get time stamp config */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_1588_timestamp_capture_config_set(int unit, int port, pm_info_t pm_info, portmod_direction_t direction, const cprimod_1588_capture_config_t* config);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_1588_timestamp_capture_config_get(int unit, int port, pm_info_t pm_info, portmod_direction_t direction, cprimod_1588_capture_config_t* config);
#endif /* CPRIMOD_SUPPORT */

/* Get timestemp */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_1588_captured_timestamp_get(int unit, int port, pm_info_t pm_info, portmod_direction_t direction, portmod_1588_ts_type_t ts_type, uint8 mx_cnt, uint8* count, uint64* captured_time);
#endif /* CPRIMOD_SUPPORT */

/* set/get time stamp config */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_1588_timestamp_adjust_set(int unit, int port, pm_info_t pm_info, portmod_direction_t direction, const cprimod_1588_time_t* adjust_time);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_1588_timestamp_adjust_get(int unit, int port, pm_info_t pm_info, portmod_direction_t direction, cprimod_1588_time_t* adjust_time);
#endif /* CPRIMOD_SUPPORT */

/* set/get time stamp modulo for fifo */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_1588_timestamp_fifo_config_set(int unit, int port, pm_info_t pm_info, portmod_direction_t direction, uint16 modulo);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_1588_timestamp_fifo_config_get(int unit, int port, pm_info_t pm_info, portmod_direction_t direction, uint16* modulo);
#endif /* CPRIMOD_SUPPORT */

/* set/get time stamp modulo for cmic */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_1588_timestamp_cmic_config_set(int unit, int port, pm_info_t pm_info, portmod_direction_t direction, uint16 modulo);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_1588_timestamp_cmic_config_get(int unit, int port, pm_info_t pm_info, portmod_direction_t direction, uint16* modulo);
#endif /* CPRIMOD_SUPPORT */

/*Port SyncE clock control config*/
int cpm4x25_port_synce_clk_ctrl_set(int unit, int port, pm_info_t pm_info, const portmod_port_synce_clk_ctrl_t* cfg);
int cpm4x25_port_synce_clk_ctrl_get(int unit, int port, pm_info_t pm_info, portmod_port_synce_clk_ctrl_t* cfg);

/* Setup Rx framer for agnostic mode. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_agnostic_config_set(int unit, int port, pm_info_t pm_info, int enable, const portmod_cpri_rx_agnostic_config_info_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_agnostic_config_get(int unit, int port, pm_info_t pm_info, int* enable, portmod_cpri_rx_agnostic_config_info_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/* Setup Tx framer for agnostic mode. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_agnostic_config_set(int unit, int port, pm_info_t pm_info, int enable, const portmod_cpri_tx_agnostic_config_info_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_agnostic_config_get(int unit, int port, pm_info_t pm_info, int* enable, portmod_cpri_tx_agnostic_config_info_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/* Set/Get Encap Presentation time configuration. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_encap_presentation_time_config_set(int unit, int port, pm_info_t pm_info, portmod_presentation_time_attribute_t attribute, const portmod_presentation_time_t* time);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_encap_presentation_time_config_get(int unit, int port, pm_info_t pm_info, portmod_presentation_time_attribute_t attribute, portmod_presentation_time_t* time);
#endif /* CPRIMOD_SUPPORT */

/* Set/Get Decap Presentation time configuration. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_presentation_time_config_set(int unit, int port, pm_info_t pm_info, const portmod_decap_presentation_time_config_t* config);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_presentation_time_config_get(int unit, int port, pm_info_t pm_info, portmod_decap_presentation_time_config_t* config);
#endif /* CPRIMOD_SUPPORT */

/* Set/Get Compression Lookup Table. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_compression_lookup_table_set(int unit, int port, pm_info_t pm_info, int table_depth, const uint32* table);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_compression_lookup_table_get(int unit, int port, pm_info_t pm_info, int max_depth, int* table_depth, uint32* table);
#endif /* CPRIMOD_SUPPORT */

/* Set/Get DeCompression Lookup Table. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decompression_lookup_table_set(int unit, int port, pm_info_t pm_info, int table_depth, const uint32* table);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decompression_lookup_table_get(int unit, int port, pm_info_t pm_info, int max_depth, int* table_depth, uint32* table);
#endif /* CPRIMOD_SUPPORT */

/* Set/Get control queue flow control. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_queue_flow_control_set(int unit, int port, pm_info_t pm_info, uint32 queue_num, int enable, uint32_t xon_threshold, uint32_t xoff_threshold);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decap_queue_flow_control_get(int unit, int port, pm_info_t pm_info, uint32 queue_num, int* enable, uint32_t* xon_threshold, uint32_t* xoff_threshold);
#endif /* CPRIMOD_SUPPORT */

/* Set/Get FEC enable. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_fec_enable_set(int unit, int port, pm_info_t pm_info, portmod_direction_t dir, int enable);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_fec_enable_get(int unit, int port, pm_info_t pm_info, portmod_direction_t dir, int* enable);
#endif /* CPRIMOD_SUPPORT */

/* Set/Get Fec timestamp config. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_fec_timestamp_config_set(int unit, int port, pm_info_t pm_info, portmod_direction_t dir, const portmod_fec_timestamp_config_t* config);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_fec_timestamp_config_get(int unit, int port, pm_info_t pm_info, portmod_direction_t dir, portmod_fec_timestamp_config_t* config);
#endif /* CPRIMOD_SUPPORT */

/* Set/Get Fec Auxiliry config. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_fec_aux_config_set(int unit, int port, pm_info_t pm_info, portmod_fec_aux_config_para_t parameter_id, uint32 value);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_fec_aux_config_get(int unit, int port, pm_info_t pm_info, portmod_fec_aux_config_para_t parameter_id, uint32* value);
#endif /* CPRIMOD_SUPPORT */

/*  GET FEC Statistics. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_fec_stat_get(int unit, int port, pm_info_t pm_info, portmod_cpri_fec_stat_type_t stat_type, uint32* value);
#endif /* CPRIMOD_SUPPORT */

/* Enable/Disable ECC interrupts. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_ecc_interrupt_enable_set(int unit, int port, pm_info_t pm_info, int enable);
#endif /* CPRIMOD_SUPPORT */

/* ECC PM interrupt status and information get. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_pm_ecc_interrupt_status_get(int unit, int pm_id, pm_info_t pm_info, portmod_cpri_ecc_intr_info_t* ecc_err_info);
#endif /* CPRIMOD_SUPPORT */

/* Reset cpri port */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_init(int unit, int port, pm_info_t pm_info);
#endif /* CPRIMOD_SUPPORT */

/* Get Rx GCW word */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_gcw_word_get(int unit, int port, pm_info_t pm_info, int group_index, uint16* gcw_word);
#endif /* CPRIMOD_SUPPORT */

/* Get Tx GCW word */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_gcw_word_set(int unit, int port, pm_info_t pm_info, int group_index, uint16 gcw_word);
#endif /* CPRIMOD_SUPPORT */

/* Setup Rx framer for Tunnel  mode. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_tunnel_mode_config_set(int unit, int port, pm_info_t pm_info, int enable, const portmod_cpri_rx_tunnel_mode_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_tunnel_mode_config_get(int unit, int port, pm_info_t pm_info, int* enable, portmod_cpri_rx_tunnel_mode_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/* Setup Tx framer for Tunnel  mode. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_tunnel_mode_config_set(int unit, int port, pm_info_t pm_info, int enable, const portmod_cpri_tx_tunnel_mode_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_tunnel_mode_config_get(int unit, int port, pm_info_t pm_info, int* enable, portmod_cpri_tx_tunnel_mode_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/* Setup Rx framer for RSVD4 Agnostic. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_port_rx_agnostic_config_set(int unit, int port, pm_info_t pm_info, int enable, const portmod_rsvd4_rx_agnostic_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_port_rx_agnostic_config_get(int unit, int port, pm_info_t pm_info, int* enable, portmod_rsvd4_rx_agnostic_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/* Setup Tx framer for RSVD4 Agnstic. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_port_tx_agnostic_config_set(int unit, int port, pm_info_t pm_info, int enable, const portmod_rsvd4_tx_agnostic_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_rsvd4_port_tx_agnostic_config_get(int unit, int port, pm_info_t pm_info, int* enable, portmod_rsvd4_tx_agnostic_config_t* config_info);
#endif /* CPRIMOD_SUPPORT */

/* Set CPRI port RoE frame formation configuration. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_frame_config_set(int unit, int port, pm_info_t pm_info, const portmod_cpri_port_frame_config_t* config);
#endif /* CPRIMOD_SUPPORT */

/* Setting the compression saturation threshold. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_compression_saturation_config_set(int unit, int port, pm_info_t pm_info, uint32 threshold_value);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_compression_saturation_config_get(int unit, int port, pm_info_t pm_info, uint32* threshold_value);
#endif /* CPRIMOD_SUPPORT */

/* Setting the decompression saturation value. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decompression_saturation_config_set(int unit, int port, pm_info_t pm_info, uint32 sat_value);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_decompression_saturation_config_get(int unit, int port, pm_info_t pm_info, uint32* sat_value);
#endif /* CPRIMOD_SUPPORT */

/* Clean up the Rx Framer and Encap Pipeline. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_rx_pipeline_clear(int unit, int port, pm_info_t pm_info);
#endif /* CPRIMOD_SUPPORT */

/* Clean up the Tx Framer and Decap Pipeline. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_pipeline_clear(int unit, int port, pm_info_t pm_info);
#endif /* CPRIMOD_SUPPORT */

/* Get tx enable status. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_enable_set(int unit, int port, pm_info_t pm_info, int enable);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_tx_enable_get(int unit, int port, pm_info_t pm_info, int* enable);
#endif /* CPRIMOD_SUPPORT */

/* Setting the Port Speed. */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_speed_set(int unit, int port, pm_info_t pm_info, cprimod_supported_port_speed_t speed_id);
#endif /* CPRIMOD_SUPPORT */

/*Set/Get CPRI debug attribute.*/
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_debug_set(int unit, int port, pm_info_t pm_info, portmod_cpri_debug_attr_t type, int index, int buffer_size, const uint32* data);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_debug_get(int unit, int port, pm_info_t pm_info, portmod_cpri_debug_attr_t type, int index, int buffer_size, uint32* data);
#endif /* CPRIMOD_SUPPORT */

/*Clear  CPRI debug attribute.*/
#ifdef CPRIMOD_SUPPORT
int cpm4x25_cpri_port_debug_clear(int unit, int port, pm_info_t pm_info, portmod_cpri_debug_attr_t type, int index);
#endif /* CPRIMOD_SUPPORT */

#endif /*_CPM4X25_H_*/
