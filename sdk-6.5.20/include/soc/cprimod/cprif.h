/*
 *         
 * 
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *         
 *     
 * DO NOT EDIT THIS FILE!
 */

#ifndef _CPRIF_H__H_
#define _CPRIF_H__H_

#include <soc/types.h>
#include <bcm/types.h>
#include <shared/cpri.h>
#include <phymod/phymod.h>
#include <phymod/phymod_diagnostics.h>
/*test api dispatch*/
int cprif_test_api_dispatch(int unit, int port, int* value);

/* Get/Set Basic Frame set active table number and number of valid entries. */
int cprif_basic_frame_parser_active_table_set(int unit, int port, cprimod_basic_frame_table_id_t table, int sync_enable);
int cprif_basic_frame_parser_active_table_get(int unit, int port, cprimod_basic_frame_table_id_t* table);

/* Get/Set Basic Frame set active table number and number of valid entries. */
int cprif_basic_frame_parser_table_num_entries_set(int unit, int port, cprimod_basic_frame_table_id_t table, uint32 num_entries);
int cprif_basic_frame_parser_table_num_entries_get(int unit, int port, cprimod_basic_frame_table_id_t table, uint32* num_entries);

/* Get/Set Basic Frame set active table number and number of valid entries. */
int cprif_basic_frame_assembly_active_table_set(int unit, int port, cprimod_basic_frame_table_id_t table, int sync_enable);
int cprif_basic_frame_assembly_active_table_get(int unit, int port, cprimod_basic_frame_table_id_t* table);

/* Get/Set Basic Frame set active table number and number of valid entries. */
int cprif_basic_frame_assembly_table_num_entries_set(int unit, int port, cprimod_basic_frame_table_id_t table, uint32 num_entries);
int cprif_basic_frame_assembly_table_num_entries_get(int unit, int port, cprimod_basic_frame_table_id_t table, uint32* num_entries);

/* Switch Basic Frame Table between active and standby, without syncing. */
int cprif_basic_frame_parser_switch_active_table(int unit, int port);

/* Switch Basic Frame Table between active and standby, without syncing. */
int cprif_basic_frame_assembly_switch_active_table(int unit, int port);

/* Add AxC Rx Basic Frame to Shadow Table  */
int cprif_rx_axc_basic_frame_add(int unit, int port, uint32 axc_id, uint32 start_bit, uint32 num_bit);

/* Delete  AxC Rx Basic Frame from Shadow Table  */
int cprif_rx_axc_basic_frame_delete(int unit, int port, uint32 axc_id);

/* Clear all the AxC from the Basic Frame Parser Shadow Table.  */
int cprif_rx_axc_basic_frame_clear(int unit, int port);

/* Retrieve  AxC Rx Basic Frame from Table  */
int cprif_rx_axc_basic_frame_get(int unit, int port, uint32 axc_id, cprimod_basic_frame_table_id_t table, cprimod_basic_frame_usage_entry_t* usage_table, int* num_entries);

/* Add AxC Rx Basic Frame to Shadow Table  */
int cprif_tx_axc_basic_frame_add(int unit, int port, uint32 axc_id, uint32 start_bit, uint32 num_bit);

/* Delete  AxC Rx Basic Frame from Shadow Table  */
int cprif_tx_axc_basic_frame_delete(int unit, int port, uint32 axc_id);

/* Clear all the AxC from the Basic Frame Assembly Shadow Table.  */
int cprif_tx_axc_basic_frame_clear(int unit, int port);

/* Retrieve  AxC Rx Basic Frame from Table  */
int cprif_tx_axc_basic_frame_get(int unit, int port, uint32 axc_id, cprimod_basic_frame_table_id_t table, cprimod_basic_frame_usage_entry_t* usage_table, int* num_entries);

/* Debug API for Basic Frame.  */
int cprif_basic_frame_debug(int unit, int port, uint32 axc_id, cprimod_basic_frame_table_id_t rx_table, cprimod_basic_frame_table_id_t tx_table, uint32 flags);

/* Debug API for Basic Frame.  */
int cprif_cpri_rx_axc_container_config_set(int unit, int port, uint32 axc_id, const cprimod_cpri_container_config_t* config_info);
int cprif_cpri_rx_axc_container_config_get(int unit, int port, uint32 axc_id, cprimod_cpri_container_config_t* config_info);

/* Clear the container Parser config.  */
int cprif_cpri_rx_axc_container_config_clear(int unit, int port, uint32 axc_id);

/* Debug API for Basic Frame.  */
int cprif_cpri_tx_axc_container_config_set(int unit, int port, uint32 axc_id, const cprimod_cpri_container_config_t* config_info);
int cprif_cpri_tx_axc_container_config_get(int unit, int port, uint32 axc_id, cprimod_cpri_container_config_t* config_info);

/* Clear the container Assembly config.  */
int cprif_cpri_tx_axc_container_config_clear(int unit, int port, uint32 axc_id);

/* Debug API for Basic Frame.  */
int cprif_rsvd4_rx_axc_container_config_set(int unit, int port, uint32 flow_id, const cprimod_rsvd4_container_config_t* config_info);
int cprif_rsvd4_rx_axc_container_config_get(int unit, int port, uint32 flow_id, cprimod_rsvd4_container_config_t* config_info);

/* Clear the container parser config.  */
int cprif_rsvd4_rx_axc_container_config_clear(int unit, int port, uint32 flow_id);

/* Debug API for Basic Frame.  */
int cprif_rsvd4_tx_axc_container_config_set(int unit, int port, uint32 flow_id, const cprimod_rsvd4_container_config_t* config_info);
int cprif_rsvd4_tx_axc_container_config_get(int unit, int port, uint32 flow_id, cprimod_rsvd4_container_config_t* config_info);

/* Clear the container Assembly config.  */
int cprif_rsvd4_tx_axc_container_config_clear(int unit, int port, uint32 flow_id);

/* Rx ROE payload size config.  */
int cprif_rx_roe_payload_size_set(int unit, int port, uint32 axc_id, const cprimod_payload_size_info_t* config_info);
int cprif_rx_roe_payload_size_get(int unit, int port, uint32 axc_id, cprimod_payload_size_info_t* config_info);

/* Tx ROE payload size config.  */
int cprif_tx_roe_payload_size_set(int unit, int port, uint32 axc_id, const cprimod_payload_size_info_t* config_info);
int cprif_tx_roe_payload_size_get(int unit, int port, uint32 axc_id, cprimod_payload_size_info_t* config_info);

/* Encapsulation Data Manipulation Configuration.  */
int cprif_cpri_encap_data_config_set(int unit, int port, uint32 queue_num, const cprimod_encap_decap_data_config_t* config_info);
int cprif_cpri_encap_data_config_get(int unit, int port, uint32 queue_num, cprimod_encap_decap_data_config_t* config_info);

/* Decapsulation Data Manipulation Configuration.  */
int cprif_cpri_decap_data_config_set(int unit, int port, uint32 queue_num, const cprimod_encap_decap_data_config_t* config_info);
int cprif_cpri_decap_data_config_get(int unit, int port, uint32 queue_num, cprimod_encap_decap_data_config_t* config_info);

/* Encapsulation Data Manipulation Configuration.  */
int cprif_rsvd4_encap_data_config_set(int unit, int port, uint32 queue_num, const cprimod_rsvd4_encap_data_config_t* config_info);
int cprif_rsvd4_encap_data_config_get(int unit, int port, uint32 queue_num, cprimod_rsvd4_encap_data_config_t* config_info);

/* Decapsulation Data Manipulation Configuration.  */
int cprif_rsvd4_decap_data_config_set(int unit, int port, uint32 queue_num, const cprimod_rsvd4_decap_data_config_t* config_info);
int cprif_rsvd4_decap_data_config_get(int unit, int port, uint32 queue_num, cprimod_rsvd4_decap_data_config_t* config_info);

/* Encapsulation Header Configuration.  */
int cprif_encap_header_config_set(int unit, int port, uint32 queue_num, const cprimod_encap_header_config_t* config_info);
int cprif_encap_header_config_get(int unit, int port, uint32 queue_num, cprimod_encap_header_config_t* config_info);

/* Encapsulation Header Configuration.  */
int cprif_rx_rsvd4_gsm_tsn_bitmap_set(int unit, int port, uint32 queue_num, uint32 tsn_bitmap);
int cprif_rx_rsvd4_gsm_tsn_bitmap_get(int unit, int port, uint32 queue_num, uint32* tsn_bitmap);

/* Encapsulation Header Configuration.  */
int cprif_encap_ordering_info_entry_set(int unit, int port, uint32 index, const cprimod_encap_ordering_info_entry_t* user_entry);
int cprif_encap_ordering_info_entry_get(int unit, int port, uint32 index, cprimod_encap_ordering_info_entry_t* user_entry);

/* Encapsulation Header Configuration.  */
int cprif_decap_ordering_info_entry_set(int unit, int port, uint32 index, const cprimod_decap_ordering_info_entry_t* user_entry);
int cprif_decap_ordering_info_entry_get(int unit, int port, uint32 index, cprimod_decap_ordering_info_entry_t* user_entry);

/* Encapsulation Order Info Offset, _get() user need to provide p_size and q_size.  */
int cprif_encap_ordering_info_sequence_offset_set(int unit, int port, uint32 queue, uint32 control, const cprimod_cpri_ordering_info_offset_t* offset_entry);
int cprif_encap_ordering_info_sequence_offset_get(int unit, int port, uint32 queue, uint32 control, uint32 pcnt_size, uint32 qcnt_size, cprimod_cpri_ordering_info_offset_t* offset_entry);

/* Decapsulation Order Info Offset, _get() user need to provide p_size and q_size.  */
int cprif_decap_ordering_info_sequence_offset_set(int unit, int port, uint32 queue, const cprimod_cpri_ordering_info_offset_t* offset_entry);
int cprif_decap_ordering_info_sequence_offset_get(int unit, int port, uint32 queue, uint32 pcnt_size, uint32 qcnt_size, cprimod_cpri_ordering_info_offset_t* offset_entry);

/* Destination MAC Addr.  */
int cprif_encap_mac_da_entry_set(int unit, int port, uint32 index, cprimod_mac_addr_t addr);
int cprif_encap_mac_da_entry_get(int unit, int port, uint32 index, cprimod_mac_addr_t addr);

/* Source MAC Addr.  */
int cprif_encap_mac_sa_entry_set(int unit, int port, uint32 index, cprimod_mac_addr_t addr);
int cprif_encap_mac_sa_entry_get(int unit, int port, uint32 index, cprimod_mac_addr_t addr);

/* VLAN ID Entry.  */
int cprif_encap_vlan_id_entry_set(int unit, int port, cprimod_vlan_table_id_t table_id, uint32 index, uint32 vlan_id);
int cprif_encap_vlan_id_entry_get(int unit, int port, cprimod_vlan_table_id_t table_id, uint32 index, uint32* vlan_id);

/* Decap Ethertype Set/Get.  */
int cprif_decap_ethertype_config_set(int unit, int port, cprimod_ethertype_t type_id, uint16 ethertype);
int cprif_decap_ethertype_config_get(int unit, int port, cprimod_ethertype_t type_id, uint16* ethertype);

/* Encap Ethtype Set/Get.  */
int cprif_encap_ethertype_config_set(int unit, int port, cprimod_ethertype_t type_id, uint16 ethertype);
int cprif_encap_ethertype_config_get(int unit, int port, cprimod_ethertype_t type_id, uint16* ethertype);

/* Clear the internal queue and memory processing */
int cprif_encap_memory_clear(int unit, int port, int queue_num);

/* Clear the internal state of framer and container processing */
int cprif_cpri_rx_framer_state_clear(int unit, int port, int queue_num);

/* Clear the internal queue and memory processing */
int cprif_decap_memory_clear(int unit, int port, int queue_num);

/* Clear the internal state of framer and container processing */
int cprif_cpri_tx_framer_state_clear(int unit, int port, int queue_num);

/* Set Flow Classification,  Subtype to Queue Mapping.  */
int cprif_decap_flow_classification_config_set(int unit, int port, uint8 subtype, uint32 queue_num, cprimod_cls_option_t cls_option, cprimod_cls_flow_type_t flow_type);
int cprif_decap_flow_classification_config_get(int unit, int port, uint8 subtype, uint32* queue_num, cprimod_cls_option_t* cls_option, cprimod_cls_flow_type_t* flow_type);

/* Set Flow to invalid queue.  */
int cprif_decap_flow_classification_config_clear(int unit, int port, uint8 subtype);

/* Set/Get Flow to  Queue Mapping.  */
int cprif_decap_flow_to_queue_mapping_set(int unit, int port, uint32 flow_id, uint32 queue_num);
int cprif_decap_flow_to_queue_mapping_get(int unit, int port, uint32 flow_id, uint32* queue_num);

/* Set Flow mapped to invalid  Queue to drop the packets.  */
int cprif_decap_flow_to_queue_mapping_clear(int unit, int port, uint32 flow_id);

/* Set/Get Queue to Ordering info Table Index Mapping.  */
int cprif_decap_queue_to_ordering_info_index_mapping_set(int unit, int port, uint32 queue_num, uint32 ordering_info_index);
int cprif_decap_queue_to_ordering_info_index_mapping_get(int unit, int port, uint32 queue_num, uint32* ordering_info_index);

/* Tx Framer TGEN tick configuration.  */
int cprif_tx_framer_tgen_tick_set(int unit, int port, uint32 divider, uint32 basic_frame_tick, uint32 tick_bitmap, uint32 tick_bitmap_size);
int cprif_tx_framer_tgen_tick_get(int unit, int port, uint32* divider, uint32* basic_frame_tick, uint32* tick_bitmap, uint32* tick_bitmap_size);

/* Tx Framer Tgen Enable/Disable set.  */
int cprif_tx_framer_tgen_enable(int unit, int port, uint8 enable);

/* Tx Framer offset to start TGEN.  */
int cprif_tx_framer_tgen_offset_set(int unit, int port, uint64 timestamp_offset);
int cprif_tx_framer_tgen_offset_get(int unit, int port, uint64* timestamp_offset);

/* Tx Framer TGEN next Radio Frame Number/Master Frame number (bfn).  */
int cprif_tx_framer_tgen_next_bfn_config_set(int unit, int port, uint32 tgen_bfn);
int cprif_tx_framer_tgen_next_bfn_config_get(int unit, int port, uint32* tgen_bfn);

/* Tx Framer TGEN next Hyper Frame Number(HFN).  */
int cprif_tx_framer_tgen_next_hfn_config_set(int unit, int port, uint32 tgen_hfn);
int cprif_tx_framer_tgen_next_hfn_config_get(int unit, int port, uint32* tgen_hfn);

/* Tx Framer TGEN next Radio Frame Number/Master Frame (bfn).  */
int cprif_tx_framer_next_bfn_get(int unit, int port, uint32* tgen_bfn);

/* Tx Framer TGEN next Hyper Frame Number(HFN).  */
int cprif_tx_framer_next_hfn_get(int unit, int port, uint32* tgen_hfn);

/* Tx Framer TGEN Select which counter to use.  */
int cprif_tx_framer_tgen_select_counter_set(int unit, int port, cprimod_tgen_counter_select_t tgen_counter_select);
int cprif_tx_framer_tgen_select_counter_get(int unit, int port, cprimod_tgen_counter_select_t* tgen_counter_select);

/* Header Compare Entry Add.  */
int cprif_header_compare_entry_add(int unit, int port, const cprimod_header_compare_entry_t* compare_entry);

/* Header Compare Entry Delete.  */
int cprif_header_compare_entry_delete(int unit, int port, const cprimod_header_compare_entry_t* compare_entry);

/* Header Compare Entry Delete by Flow ID only.  */
int cprif_header_compare_entry_for_flow_delete(int unit, int port, uint8 flow_id, cprimod_flow_type_t flow_type);

/* Modulo Rule Entry Set/Get.  */
int cprif_modulo_rule_entry_set(int unit, int port, uint8 modulo_rule_num, cprimod_transmission_rule_type_t modulo_rule_type, const cprimod_modulo_rule_entry_t* modulo_rule);
int cprif_modulo_rule_entry_get(int unit, int port, uint8 modulo_rule_num, cprimod_transmission_rule_type_t modulo_rule_type, cprimod_modulo_rule_entry_t* modulo_rule);

/* This will disable all modulo rule assocaited with the flow.  */
int cprif_modulo_rule_flow_enable_set(int unit, int port, int enable, cprimod_flow_type_t flow_type, uint32 flow_id);
int cprif_modulo_rule_flow_enable_get(int unit, int port, int* enable, cprimod_flow_type_t flow_type, uint32 flow_id);

/* Dual Bitmap Rule Entry Set/Get.  */
int cprif_dual_bitmap_rule_entry_set(int unit, int port, uint8 dbm_rule_num, const cprimod_dbm_rule_entry_t* dbm_rule);
int cprif_dual_bitmap_rule_entry_get(int unit, int port, uint8 dbm_rule_num, cprimod_dbm_rule_entry_t* dbm_rule);

/* Dual Bitmap Rule Entry Set/Get.  */
int cprif_secondary_dual_bitmap_rule_entry_set(int unit, int port, uint8 dbm_rule_num, const cprimod_secondary_dbm_rule_entry_t* dbm_rule);
int cprif_secondary_dual_bitmap_rule_entry_get(int unit, int port, uint8 dbm_rule_num, cprimod_secondary_dbm_rule_entry_t* dbm_rule);

/* Dual Bitmap Position Table Entry Set/Get.  */
int cprif_dbm_position_entry_set(int unit, int port, uint8 index, const cprimod_dbm_pos_table_entry_t* pos_entry);
int cprif_dbm_position_entry_get(int unit, int port, uint8 index, cprimod_dbm_pos_table_entry_t* pos_entry);

/* This will disable all dbm position  assocaited with the flow.  */
int cprif_dbm_position_flow_enable_set(int unit, int port, int enable, cprimod_flow_type_t flow_type, uint32 flow_id);
int cprif_dbm_position_flow_enable_get(int unit, int port, int* enable, cprimod_flow_type_t flow_type, uint32 flow_id);

/* Speed and interface Set/Get.  */
int cprif_port_rx_interface_config_set(int unit, int port, const phymod_phy_access_t* phy, const cprimod_port_interface_config_t* config);
int cprif_port_rx_interface_config_get(int unit, int port, cprimod_port_interface_config_t* config);

/* Speed and interface Set/Get.  */
int cprif_port_tx_interface_config_set(int unit, int port, const phymod_phy_access_t* phy, const cprimod_port_interface_config_t* config);
int cprif_port_tx_interface_config_get(int unit, int port, cprimod_port_interface_config_t* config);

/* Rx optional config Set/Get.  */
int cprif_port_rx_frame_optional_config_set(int unit, int port, cprimod_rx_config_field_t field, int value);
int cprif_port_rx_frame_optional_config_get(int unit, int port, cprimod_rx_config_field_t field, int* value);

/* Rx optional config Set/Get.  */
int cprif_port_tx_frame_optional_config_set(int unit, int port, cprimod_tx_config_field_t field, uint32 value);
int cprif_port_tx_frame_optional_config_get(int unit, int port, cprimod_tx_config_field_t field, uint32* value);

/* Rx optional config Set/Get.  */
int cprif_port_rsvd4_rx_frame_optional_config_set(int unit, int port, cprimod_rsvd4_rx_config_field_t field, int value);
int cprif_port_rsvd4_rx_frame_optional_config_get(int unit, int port, cprimod_rsvd4_rx_config_field_t field, int* value);

/* Rx optional config Set/Get.  */
int cprif_port_rsvd4_rx_speed_set(int unit, int port, const phymod_phy_access_t* phy, cprimod_port_rsvd4_speed_mult_t speed);
int cprif_port_rsvd4_rx_speed_get(int unit, int port, cprimod_port_rsvd4_speed_mult_t* speed);

/* Rx optional config Set/Get.  */
int cprif_port_rsvd4_tx_speed_set(int unit, int port, const phymod_phy_access_t* phy, cprimod_port_rsvd4_speed_mult_t speed);
int cprif_port_rsvd4_tx_speed_get(int unit, int port, cprimod_port_rsvd4_speed_mult_t* speed);

/* Speed and interface Set.  */
int cprif_port_rsvd4_rx_fsm_state_set(int unit, int port, cprimod_rsvd4_rx_fsm_state_t state);
int cprif_port_rsvd4_rx_fsm_state_get(int unit, int port, cprimod_rsvd4_rx_fsm_state_t* state);

/* Speed and interface Set/Get.  */
int cprif_port_rsvd4_rx_overide_set(int unit, int port, cprimod_rsvd4_rx_overide_t parameter, int enable, int value);
int cprif_port_rsvd4_rx_overide_get(int unit, int port, cprimod_rsvd4_rx_overide_t parameter, int* enable, int* value);

/* tx optional config Set/Get.  */
int cprif_port_rsvd4_tx_frame_optional_config_set(int unit, int port, cprimod_rsvd4_tx_config_field_t field, int value);
int cprif_port_rsvd4_tx_frame_optional_config_get(int unit, int port, cprimod_rsvd4_tx_config_field_t field, int* value);

/* Speed and interface Set.  */
int cprif_port_rsvd4_tx_fsm_state_set(int unit, int port, cprimod_rsvd4_tx_fsm_state_t state);
int cprif_port_rsvd4_tx_fsm_state_get(int unit, int port, cprimod_rsvd4_tx_fsm_state_t* state);

/* Speed and interface Set/Get.  */
int cprif_port_rsvd4_tx_overide_set(int unit, int port, cprimod_rsvd4_tx_overide_t parameter, int enable, int value);
int cprif_port_rsvd4_tx_overide_get(int unit, int port, cprimod_rsvd4_tx_overide_t parameter, int* enable, int* value);

/* Speed and interface Set.  */
int cprif_port_rx_pcs_status_get(int unit, int port, cprimod_rx_pcs_status_t status, uint32* value);

/*Core Initialization*/
int cprif_core_init(int unit, int port, const phymod_core_access_t* phy, const phymod_core_init_config_t* init_config, phymod_core_status_t* core_status);

/*Core Initialization*/
int cprif_port_init(int unit, int port, const phymod_phy_access_t* phy, const cprimod_port_init_config_t* port_config);

/*Set/Get Rx Master Frame Synchronizaiton */
int cprif_rsvd4_rx_master_frame_sync_config_set(int unit, int port, uint32 master_frame_number, uint64 master_frame_start_time);
int cprif_rsvd4_rx_master_frame_sync_config_get(int unit, int port, uint32* master_frame_number, uint64* master_frame_start_time);

/* Get CPRI Frame Sync information from control. */
int cprif_cpri_rx_control_word_sync_info_get(int unit, int port, uint32* hyper_frame_num, uint32* radio_frame_num);

/* Get CPRI Control Word L1 Signal Information. */
int cprif_cpri_rx_control_word_l1_inband_info_get(int unit, int port, cprimod_cpri_cw_l1_inband_info_t* l1_inband_info);

/* Get/Set CPRI Control Word L1 Signal Protection Enable. */
int cprif_cpri_rx_control_word_l1_signal_signal_protection_set(int unit, int port, uint32 signal_map, uint32 enable);
int cprif_cpri_rx_control_word_l1_signal_signal_protection_get(int unit, int port, uint32 signal_map, uint32* enable);

/* Get/Set CPRI HDLC control Configuration. */
int cprif_cpri_port_cw_slow_hdlc_config_set(int unit, int port, const cprimod_slow_hdlc_config_info_t* config_info);
int cprif_cpri_port_cw_slow_hdlc_config_get(int unit, int port, cprimod_slow_hdlc_config_info_t* config_info);

/* Get/Set CPRI Fast Ethernet control Configuration. */
int cprif_cpri_port_cw_fast_eth_config_set(int unit, int port, const cprimod_fast_eth_config_info_t* config_info);
int cprif_cpri_port_cw_fast_eth_config_get(int unit, int port, cprimod_fast_eth_config_info_t* config_info);

/* Get/Set CPRI Rx VSD Control  Configuration. */
int cprif_cpri_port_rx_vsd_cw_config_set(int unit, int port, const cprimod_cpri_rx_vsd_config_info_t* config_info);
int cprif_cpri_port_rx_vsd_cw_config_get(int unit, int port, cprimod_cpri_rx_vsd_config_info_t* config_info);

/* Add CPRI Rx VSD Group Flow. */
int cprif_cpri_port_rx_vsd_ctrl_flow_add(int unit, int port, uint32 group_id, const cprimod_cpri_rx_vsd_flow_info_t* config_info);

/* Delete CPRI Rx VSD Group Flow. */
int cprif_cpri_port_rx_vsd_ctrl_flow_delete(int unit, int port, uint32 group_id);

/* Add CPRI Rx VSD Group Flow  Configuration Get. */
int cprif_cpri_port_rx_vsd_ctrl_flow_get(int unit, int port, uint32 group_id, cprimod_cpri_rx_vsd_flow_info_t* config_info);

/* Get/Set Encap Tag Id to Flow Id Map. */
int cprif_encap_control_queue_tag_to_flow_id_map_set(int unit, int port, uint32 tag_id, uint32 flow_id);
int cprif_encap_control_queue_tag_to_flow_id_map_get(int unit, int port, uint32 tag_id, uint32* flow_id);

/* Get/Set CPRI Tx VSD control Configuration. */
int cprif_cpri_port_tx_vsd_cw_config_set(int unit, int port, const cprimod_cpri_tx_vsd_config_info_t* config_info);
int cprif_cpri_port_tx_vsd_cw_config_get(int unit, int port, cprimod_cpri_tx_vsd_config_info_t* config_info);

/* Add CPRI Tx VSD Group Flow  Configuration. */
int cprif_cpri_port_tx_vsd_ctrl_flow_add(int unit, int port, uint32 group_id, uint32* group_list, const cprimod_cpri_tx_vsd_flow_info_t* config_info);

/* Delete CPRI Tx VSD Control Flow. */
int cprif_cpri_port_tx_vsd_ctrl_flow_delete(int unit, int port, uint32 group_id, uint32* group_list);

/* Get CPRI Tx VSD Group Flow  Configuration. */
int cprif_cpri_port_tx_vsd_ctrl_flow_get(int unit, int port, uint32 group_id, uint32* group_list, cprimod_cpri_tx_vsd_flow_info_t* config_info);

/* Get/Set VSD Raw Configuration. */
int cprif_cpri_port_rx_vsd_raw_config_set(int unit, int port, uint32 index, const cprimod_cpri_rx_vsd_raw_config_t* config_info);
int cprif_cpri_port_rx_vsd_raw_config_get(int unit, int port, uint32 index, cprimod_cpri_rx_vsd_raw_config_t* config_info);

/* Get/Set Tx VSD Raw Configuration. */
int cprif_cpri_port_tx_vsd_raw_config_set(int unit, int port, uint32 index, const cprimod_cpri_tx_vsd_raw_config_t* config_info);
int cprif_cpri_port_tx_vsd_raw_config_get(int unit, int port, uint32 index, cprimod_cpri_tx_vsd_raw_config_t* config_info);

/* VSD Raw Radio Frame Filter Set/Get. */
int cprif_cpri_port_tx_vsd_raw_filter_set(int unit, int port, uint32 bfn0_value, uint32 bfn0_mask, uint32 bfn1_value, uint32 bfn1_mask);
int cprif_cpri_port_tx_vsd_raw_filter_get(int unit, int port, uint32* bfn0_value, uint32* bfn0_mask, uint32* bfn1_value, uint32* bfn1_mask);

/* Get/Set Rx S D V M. */
int cprif_cpri_port_rx_brcm_rsvd5_control_config_set(int unit, int port, uint32 schan_start, uint32 schan_size, uint32 queue_num, int parity_disable);
int cprif_cpri_port_rx_brcm_rsvd5_control_config_get(int unit, int port, uint32* schan_start, uint32* schan_size, uint32* queue_num, int* parity_disable);

/* Get/Set TX  S D V M. */
int cprif_cpri_port_tx_brcm_rsvd5_control_config_set(int unit, int port, uint32 schan_start, uint32 schan_size, uint32 queue_num, int crc_enable);
int cprif_cpri_port_tx_brcm_rsvd5_control_config_get(int unit, int port, uint32* schan_start, uint32* schan_size, uint32* queue_num, int* crc_enable);

/* Get/Set Rx GCW Configuration. */
int cprif_cpri_port_rx_gcw_config_set(int unit, int port, uint32 index, const cprimod_cpri_rx_gcw_config_t* config_info);
int cprif_cpri_port_rx_gcw_config_get(int unit, int port, uint32 index, cprimod_cpri_rx_gcw_config_t* config_info);

/* Get/Set Tx GCW Configuration. */
int cprif_cpri_port_tx_gcw_config_set(int unit, int port, uint32 index, const cprimod_cpri_tx_gcw_config_t* config_info);
int cprif_cpri_port_tx_gcw_config_get(int unit, int port, uint32 index, cprimod_cpri_tx_gcw_config_t* config_info);

/* GCW Radio Frame Filter Set/Get. */
int cprif_cpri_port_tx_gcw_filter_set(int unit, int port, uint32 bfn0_value, uint32 bfn0_mask, uint32 bfn1_value, uint32 bfn1_mask);
int cprif_cpri_port_tx_gcw_filter_get(int unit, int port, uint32* bfn0_value, uint32* bfn0_mask, uint32* bfn1_value, uint32* bfn1_mask);

/* Set CRPI control word information. */
int cprif_cpri_tx_control_word_l1_inband_info_set(int unit, int port, const cprimod_cpri_cw_l1_inband_info_t* control_info);
int cprif_cpri_tx_control_word_l1_inband_info_get(int unit, int port, cprimod_cpri_cw_l1_inband_info_t* control_info);

/* Set Control Message Configuration.. */
int cprif_rsvd4_rx_control_message_config_set(int unit, int port, uint32 queue_num, uint32 default_tag, uint32 no_match_tag);

/* Set Control Message Configuration.. */
int cprif_rsvd4_rx_control_flow_config_set(int unit, int port, uint32 flow_id, const cprimod_control_flow_config_t* config);
int cprif_rsvd4_rx_control_flow_config_get(int unit, int port, uint32 flow_id, cprimod_control_flow_config_t* config);

/* Sync Profile Entry.. */
int cprif_rsvd4_rx_sync_profile_entry_set(int unit, int port, uint32 profile_id, const cprimod_sync_profile_entry_t* entry);
int cprif_rsvd4_rx_sync_profile_entry_get(int unit, int port, uint32 profile_id, cprimod_sync_profile_entry_t* entry);

/* Tag Generation Entry.. */
int cprif_rx_tag_config_set(int unit, int port, uint32 default_tag, uint32 no_match_tag);

/* Tag Generation Entry.. */
int cprif_rx_tag_gen_entry_add(int unit, int port, const cprimod_tag_gen_entry_t* entry);

/* Tag Generation Entry.. */
int cprif_rx_tag_gen_entry_delete(int unit, int port, const cprimod_tag_gen_entry_t* entry);

/* Set tag option for control Flow.. */
int cprif_rx_control_flow_tag_option_set(int unit, int port, uint32 flow_id, cprimod_cpri_tag_option_t tag_option);

/* Add member to the Tx Control Flow Group.. */
int cprif_rsvd4_tx_control_flow_group_member_add(int unit, int port, uint32 group_id, uint32 priority, uint32 queue_num, cprimod_control_msg_proc_type_t proc_type);

/* Delete member to the Tx Control Flow Group.. */
int cprif_rsvd4_tx_control_flow_group_member_delete(int unit, int port, uint32 group_id, uint32 priority);

/* Setting RSVD4 Fast Ethernet Control Message Configuration.. */
int cprif_rsvd4_tx_eth_message_config_set(int unit, int port, uint32 msg_node, uint32 msg_subnode, uint32 msg_type, uint32 msg_padding);

/* Setting RSVD4 Single Raw Control Message Configuration.. */
int cprif_rsvd4_tx_single_raw_message_config_set(int unit, int port, uint32 msg_id, uint32 msg_type);

/* Setting RSVD4 Single Raw Control Message Configuration.. */
int cprif_rsvd4_tx_single_tunnel_message_config_set(int unit, int port, cprimod_cpri_crc_option_t crc_option);

/* Set Control Message Configuration.. */
int cprif_rsvd4_tx_control_flow_config_set(int unit, int port, uint32 flow_id, const cprimod_rsvd4_tx_config_info_t* config_info);
int cprif_rsvd4_tx_control_flow_config_get(int unit, int port, uint32 flow_id, cprimod_rsvd4_tx_config_info_t* config_info);

/* Set Index to header config table for a particular flow.. */
int cprif_rsvd4_tx_control_flow_header_index_set(int unit, int port, uint32 roe_flow_id, uint32 index);
int cprif_rsvd4_tx_control_flow_header_index_get(int unit, int port, uint32 roe_flow_id, uint32* index);

/*  Header Look up Entry.. */
int cprif_rsvd4_tx_control_header_entry_set(int unit, int port, uint32 index, uint32 header_node, uint32 header_subnode, uint32 payload_node);
int cprif_rsvd4_tx_control_header_entry_get(int unit, int port, uint32 index, uint32* header_node, uint32* header_subnode, uint32* payload_node);

/* Set Fast Ethernet configuration.. */
int cprif_rsvd4_fast_eth_config_set(int unit, int port, const cprimod_cpri_fast_eth_config_t* config_info);

/* Set Get if the port is cpri or Ethernet */
int cprif_cpri_or_enet_port_set(int unit, int port, int val);
int cprif_cpri_or_enet_port_get(int unit, int port, int* val);

/* Set Get if Rx enabled */
int cprif_cpri_port_rx_enable_set(int unit, int port, int val);
int cprif_cpri_port_rx_enable_get(int unit, int port, int* val);

/* Set Get if Tx enabled */
int cprif_cpri_port_tx_enable_set(int unit, int port, int val);
int cprif_cpri_port_tx_enable_get(int unit, int port, int* val);

/* Get Interrupt status */
int cprif_cpri_port_interrupt_link_status_get(int unit, int port, const int* is_link_intr_status);

/* Get the CPRI Port interrupt status. */
int cprif_cpri_port_interrupt_enable_set(int unit, int port, cprimod_cpri_port_intr_type_t cpri_intr_type, int data, int enable);
int cprif_cpri_port_interrupt_enable_get(int unit, int port, cprimod_cpri_port_intr_type_t cpri_intr_type, int data, int* enable);

/* Get the CPRI Port interrupt status. */
int cprif_cpri_port_interrupt_process(int unit, int port);

/* set/get fast clk bit period */
int cprif_fast_clk_bit_time_period_set(int unit, int port, uint32 bit_time_period);
int cprif_fast_clk_bit_time_period_get(int unit, int port, uint32* bit_time_period);

/* set/get time stamp bit period */
int cprif_1588_bit_time_period_set(int unit, int port, cprimod_direction_t direction, cprimod_port_speed_t speed);
int cprif_1588_bit_time_period_get(int unit, int port, cprimod_direction_t direction, uint32* bit_time_period);

/* set/get time stamp config */
int cprif_1588_timestamp_capture_config_set(int unit, int port, cprimod_direction_t direction, const cprimod_1588_capture_config_t* config);
int cprif_1588_timestamp_capture_config_get(int unit, int port, cprimod_direction_t direction, cprimod_1588_capture_config_t* config);

/* Get timestemp */
int cprif_1588_captured_timestamp_get(int unit, int port, cprimod_direction_t direction, uint8 fifo0_sw1, uint8 mx_cnt, uint8* count, uint64* captured_time);

/* set/get time stamp config */
int cprif_1588_timestamp_adjust_set(int unit, int port, cprimod_direction_t direction, const cprimod_1588_time_t* adjust_time);
int cprif_1588_timestamp_adjust_get(int unit, int port, cprimod_direction_t direction, cprimod_1588_time_t* adjust_time);

/* set/get time stamp modulo for fifo */
int cprif_1588_timestamp_fifo_config_set(int unit, int port, cprimod_direction_t direction, uint16 modulo);
int cprif_1588_timestamp_fifo_config_get(int unit, int port, cprimod_direction_t direction, uint16* modulo);

/* set/get time stamp modulo for cmic */
int cprif_1588_timestamp_cmic_config_set(int unit, int port, cprimod_direction_t direction, uint16 modulo);
int cprif_1588_timestamp_cmic_config_get(int unit, int port, cprimod_direction_t direction, uint16* modulo);

/* Get Basic frame information,  frame length and control word length. */
int cprif_cpri_basic_frame_info_get(int unit, int port, cprimod_direction_t dir, uint32* frame_len_in_bits, uint32* control_word_len_in_bits);

/* setup basic frame parser Rx  and assembler Tx table. */
int cprif_cpri_agnostic_mode_basic_frame_config_set(int unit, int port, cprimod_direction_t dir, int enable);

/* Get the interface bus width, 10bit or 40bit. */
int cprif_cpri_interface_bus_width_get(int unit, int port, int* is_10bit_mode);

/* setup basic frame parser Rx  and assembler Tx table. */
int cprif_cpri_tunnel_mode_basic_frame_config_set(int unit, int port, cprimod_direction_t dir, int enable, int restore_rsvd4);

/* setup basic frame parser Rx  and assembler Tx table. */
int cprif_rsvd4_agnostic_mode_basic_frame_config_set(int unit, int port, cprimod_direction_t dir, int enable);

/* Set/Get encap presentation enable. */
int cprif_encap_presentation_time_enable_set(int unit, int port, int enable);
int cprif_encap_presentation_time_enable_get(int unit, int port, int* enable);

/* Set/Get encap presentation time config. */
int cprif_encap_presentation_time_config_set(int unit, int port, const cprimod_encap_presentation_time_config_t* config);
int cprif_encap_presentation_time_config_get(int unit, int port, cprimod_encap_presentation_time_config_t* config);

/* Set/Get encap presentation time adjustment. */
int cprif_encap_presentation_time_adjust_set(int unit, int port, uint32 time);
int cprif_encap_presentation_time_adjust_get(int unit, int port, uint32* time);

/* Set/Get encap presentation time approximate increment. */
int cprif_encap_presentation_time_approximate_increment_set(int unit, int port, uint32 time);
int cprif_encap_presentation_time_approximate_increment_get(int unit, int port, uint32* time);

/* Set/Get Decap Agnostic Mode enable. */
int cprif_decap_agnostic_mode_enable_set(int unit, int port, int enable, cprimod_cpri_roe_ordering_info_option_t mode);
int cprif_decap_agnostic_mode_enable_get(int unit, int port, int* enable, cprimod_cpri_roe_ordering_info_option_t* mode);

/* Set/Get Decap Agnostic Mode Config. */
int cprif_decap_agnostic_mode_config_set(int unit, int port, const cprimod_decap_agnostic_mode_config_t* config);
int cprif_decap_agnostic_mode_config_get(int unit, int port, cprimod_decap_agnostic_mode_config_t* config);

/* Set/Get decap presentation time configuration. */
int cprif_decap_presentation_time_config_set(int unit, int port, uint32 mod_offset, uint32 mod_count);
int cprif_decap_presentation_time_config_get(int unit, int port, uint32* mod_offset, uint32* mod_count);

/* Set/Get Compression Lookup Table. */
int cprif_compression_lookup_table_set(int unit, int port, int table_depth, const uint32* table);
int cprif_compression_lookup_table_get(int unit, int port, int max_depth, int* table_depth, uint32* table);

/* Set/Get DeCompression Lookup Table. */
int cprif_decompression_lookup_table_set(int unit, int port, int table_depth, const uint32* table);
int cprif_decompression_lookup_table_get(int unit, int port, int max_depth, int* table_depth, uint32* table);

/* Set/Get control queue flow control. */
int cprif_cpri_port_decap_queue_flow_control_set(int unit, int port, uint32 queue_num, int enable, uint32_t xon_threshold, uint32_t xoff_threshold);
int cprif_cpri_port_decap_queue_flow_control_get(int unit, int port, uint32 queue_num, int* enable, uint32_t* xon_threshold, uint32_t* xoff_threshold);

/* Set/Get FEC enable. */
int cprif_cpri_port_fec_enable_set(int unit, int port, cprimod_direction_t dir, int enable);
int cprif_cpri_port_fec_enable_get(int unit, int port, cprimod_direction_t dir, int* enable);

/* Set/Get Fec timestamp config. */
int cprif_cpri_port_fec_timestamp_config_set(int unit, int port, cprimod_direction_t dir, const cprimod_fec_timestamp_config_t* config);
int cprif_cpri_port_fec_timestamp_config_get(int unit, int port, cprimod_direction_t dir, const cprimod_fec_timestamp_config_t* config);

/* Set/Get Fec Auxiliry config. */
int cprif_cpri_port_fec_aux_config_set(int unit, int port, cprimod_fec_aux_config_para_t parameter_id, uint32 value);
int cprif_cpri_port_fec_aux_config_get(int unit, int port, cprimod_fec_aux_config_para_t parameter_id, const uint32* value);

/*  GET FEC Statistics. */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_port_fec_stat_get(int unit, int port, cprimod_cpri_fec_stat_type_t stat_type, uint32* value);
#endif /* CPRIMOD_SUPPORT */

/* Enable/Disable ECC interrupts. */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_port_ecc_interrupt_enable_set(int unit, int port, int enable);
#endif /* CPRIMOD_SUPPORT */

/* ECC interrupt status and information get. */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_port_ecc_interrupt_status_get(int unit, int port, const cprimod_cpri_ecc_intr_info_t* ecc_err_info);
#endif /* CPRIMOD_SUPPORT */

/* ECC interrupt tests. */
#ifdef CPRIMOD_SUPPORT_ECC_INJECT
int cprif_cpri_port_ecc_interrupt_test(int unit, int port);
#endif /* CPRIMOD_SUPPORT_ECC_INJECT */

/* Set/Get Fec timestamp config. */
int cprif_cpri_pll_status_get(int unit, int port, const phymod_phy_access_t* phy, int* pll_sel, int* pll_lock);

/* Set/Get Reset port value active 1. */
int cprif_cpri_port_reset_set(int unit, int port, int rst);
int cprif_cpri_port_reset_get(int unit, int port, int* rst);

/* Reset cpri port */
int cprif_cpri_init(int unit, int port);

/* Get Rx GCW word */
int cprif_cpri_port_rx_gcw_word_get(int unit, int port, int group_index, uint16* gcw_word);

/* Get Tx GCW word */
int cprif_cpri_port_tx_gcw_word_set(int unit, int port, int group_index, uint16 gcw_word);

/* CPRI MAC Drain Start  */
int cprif_cpri_mac_drain_start(int unit, int port);

/* CPRI MAC Drain Stop  */
int cprif_cpri_mac_drain_stop(int unit, int port);

/* Set/Get Reset CPRI MAC EP credit . */
int cprif_cpri_mac_credit_reset_set(int unit, int port, int rst);
int cprif_cpri_mac_credit_reset_get(int unit, int port, int* rst);

/* Port link UP event */
int cprif_cpri_port_link_up_event(int unit, int port);

/* Port link down event */
int cprif_cpri_port_link_down_event(int unit, int port);

/* Set/Get Port Rx Tunnel Mode Config. */
int cprif_cpri_port_rx_tunnel_mode_set(int unit, int port, int enable, uint32 payload_size, int restore_rsvd4, cprimod_port_speed_t restore_speed);
int cprif_cpri_port_rx_tunnel_mode_get(int unit, int port, int* enable, uint32* payload_size);

/* Set/Get Port Tx Agnostic Mode Config. */
int cprif_cpri_port_tx_agnostic_mode_set(int unit, int port, int enable, cprimod_agnostic_mode_type_t mode, uint32 payload_size, int restore_rsvd4, cprimod_port_speed_t restore_speed);
int cprif_cpri_port_tx_agnostic_mode_get(int unit, int port, int* enable, cprimod_agnostic_mode_type_t* mode, uint32* payload_size);

/* Get Port Rx Framer Agnostic  Mode Config. */
int cprif_cpri_port_rx_agnostic_mode_get(int unit, int port, int* enable, cprimod_agnostic_mode_type_t* mode);

/* Get PMD Port Status.  */
int cprif_port_pmd_status_get(int unit, int port, cprimod_pmd_port_status_t status, uint32* value);

/* Get CPRI Port Link Status.  */
int cprif_cpri_port_link_get(int unit, int port, int* link);

/*  Set/Get encap header field mapping.  */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_encap_header_field_mapping_set(int unit, int port, const cprimod_cpri_encap_header_field_mapping_t* mapping);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_encap_header_field_mapping_get(int unit, int port, cprimod_cpri_encap_header_field_mapping_t* mapping);
#endif /* CPRIMOD_SUPPORT */

/*  Set/Get decap headeir field mapping.  */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_decap_header_field_mapping_set(int unit, int port, const cprimod_cpri_decap_header_field_mapping_t* mapping);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_decap_header_field_mapping_get(int unit, int port, cprimod_cpri_decap_header_field_mapping_t* mapping);
#endif /* CPRIMOD_SUPPORT */

/*  Set/Get decap headeir field mapping.  */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_header_field_adjustment_config_set(int unit, int port, cprimod_direction_t dir, int ext_hdr_enable, int len_field_adj);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_header_field_adjustment_config_get(int unit, int port, cprimod_direction_t dir, int* ext_hdr_enable, int* len_field_adj);
#endif /* CPRIMOD_SUPPORT */

/*  Set/Get decap headeir field mapping.  */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_decap_header_field_mask_set(int unit, int port, cprimod_cpri_roe_header_field_t field_id, uint32 mask);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_decap_header_field_mask_get(int unit, int port, cprimod_cpri_roe_header_field_t field_id, uint32* mask);
#endif /* CPRIMOD_SUPPORT */

/* Setting the compression saturation threshold. */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_port_compression_saturation_config_set(int unit, int port, uint32 threshold_value);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_port_compression_saturation_config_get(int unit, int port, uint32* threshold_value);
#endif /* CPRIMOD_SUPPORT */

/* Setting the decompression saturation value. */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_port_decompression_saturation_config_set(int unit, int port, uint32 sat_value);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_port_decompression_saturation_config_get(int unit, int port, uint32* sat_value);
#endif /* CPRIMOD_SUPPORT */

/* Set/Get RSVD4 padding size. */
#ifdef CPRIMOD_SUPPORT
int cprif_rsvd4_tx_padding_size_set(int unit, int port, uint32 padding_size);
#endif /* CPRIMOD_SUPPORT */
#ifdef CPRIMOD_SUPPORT
int cprif_rsvd4_tx_padding_size_get(int unit, int port, uint32* padding_size);
#endif /* CPRIMOD_SUPPORT */

/* Reset the Rx Datapath. */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_rx_datapath_reset(int unit, int port);
#endif /* CPRIMOD_SUPPORT */

/* Reset the Tx Datapath. */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_tx_datapath_reset(int unit, int port);
#endif /* CPRIMOD_SUPPORT */

/* Clean up the Rx Framer and Encap Pipeline. */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_port_rx_pipeline_clear(int unit, int port);
#endif /* CPRIMOD_SUPPORT */

/* Clean up the Tx Framer and Decap Pipeline. */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_port_tx_pipeline_clear(int unit, int port);
#endif /* CPRIMOD_SUPPORT */

/* Setting the Port Speed. */
#ifdef CPRIMOD_SUPPORT
int cprif_cpri_port_speed_set(int unit, int port, const phymod_phy_access_t* phy, const cprimod_port_init_config_t* port_config);
#endif /* CPRIMOD_SUPPORT */

/* CPRI Tx Framer TGEN tick configuration.  */
int cprif_cpri_tx_framer_tgen_tick_config_set(int unit, int port, cprimod_port_speed_t speed);

/* RSVD4 Tx Framer TGEN tick configuration.  */
int cprif_rsvd4_tx_framer_tgen_tick_config_set(int unit, int port, cprimod_port_rsvd4_speed_mult_t speed);

/*Set/Get CPRI debug attribute.*/
int cprif_cpri_port_debug_set(int unit, int port, cprimod_cpri_debug_attr_t type, int index, int buffer_size, const uint32* data);
int cprif_cpri_port_debug_get(int unit, int port, cprimod_cpri_debug_attr_t type, int index, int buffer_size, uint32* data);

/*Clear  CPRI debug attribute.*/
int cprif_cpri_port_debug_clear(int unit, int port, cprimod_cpri_debug_attr_t type, int index);

#endif /*_CPRIF_H_*/
