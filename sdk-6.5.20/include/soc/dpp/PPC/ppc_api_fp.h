/* 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 * $
*/

#ifndef __SOC_PPC_API_FP_INCLUDED__

#define __SOC_PPC_API_FP_INCLUDED__




#include <soc/dpp/SAND/Utils/sand_header.h>

#include <soc/dpp/SAND/Management/sand_general_macros.h>
#include <soc/dpp/SAND/Management/sand_error_code.h>

#include <soc/dpp/PPC/ppc_api_general.h>

#include <soc/dpp/TMC/tmc_api_header_parsing_utils.h>
#include <soc/dpp/TMC/tmc_pmf_pgm_mgmt.h>
#include <soc/dpp/TMC/tmc_api_tcam.h>

#include <soc/dpp/dpp_config_defs.h>

#include <bcm/field.h>





#ifndef SOC_PPC_FP_NOF_QUALS_PER_DB_MAX

#define  SOC_PPC_FP_NOF_QUALS_PER_DB_MAX (32)
#endif 


#define  SOC_PPC_FP_NOF_QUALS_PER_PFG_MAX (SOC_PPC_FP_NOF_QUALS_PER_DB_MAX)

#ifndef SOC_PPC_FP_NOF_ACTIONS_PER_DB_MAX

#define  SOC_PPC_FP_NOF_ACTIONS_PER_DB_MAX (16)
#endif 


#define  SOC_PPC_FP_DIR_EXTR_MAX_NOF_FIELDS (16)


#define  SOC_PPC_FP_NOF_CONTROL_VALS (8)

#define  SOC_PPC_FP_NOF_DBS (128)


#define  SOC_PPC_FP_NOF_CYCLES (2)


#define  SOC_PPC_FP_TCAM_NOF_BANKS (4)

#define SOC_DPP_DEFS_GET_TCAM_NOF_BANKS(unit)   (SOC_DPP_DEFS_GET(unit, nof_tcam_big_banks) + SOC_DPP_DEFS_GET(unit, nof_tcam_small_banks))
#define SOC_DPP_DEFS_MAX_TCAM_NOF_BANKS         (SOC_DPP_DEFS_MAX(NOF_TCAM_BIG_BANKS) + SOC_DPP_DEFS_MAX(NOF_TCAM_SMALL_BANKS))


#define SOC_PPC_FP_NOF_PROGS_MAX              32


#define SOC_PPC_FP_NOF_FEM_PROGS_MAX           4


#define SOC_PPC_FP_NOF_CES                     32


#define SOC_PPC_FP_NOF_KEYS                    4


#define SOC_PPC_TCAM_NOF_LINES_ARAD_SMALL 128


#define  SOC_PPC_FP_NOF_MACROS (8)


#define  SOC_PPC_FP_NOF_MACRO_SIMPLES (16)


#define SOC_DPP_DEFS_GET_NOF_ENTRY_IDS(unit)                        (SOC_DPP_DEFS_GET_TCAM_NOF_BANKS(unit) * SOC_DPP_DEFS_GET(unit, nof_tcam_big_bank_lines) * 2)
#define SOC_DPP_DEFS_MAX_NOF_ENTRY_IDS                              (SOC_DPP_DEFS_MAX_TCAM_NOF_BANKS * SOC_DPP_DEFS_MAX(NOF_TCAM_BIG_BANK_LINES) * 2)

#define SOC_DPP_DEFS_GET_TCAM_DT_MAX_KEY                            SOC_DPP_DEFS_MAX(TCAM_BIG_BANK_KEY_NOF_BITS)


#define  SOC_PPC_FP_NOF_EGRESS_ACTIONS (8)


#define  SOC_PPC_FP_NOF_INGRESS_FLP_ACTIONS ((SOC_PPC_FP_ACTION_TYPE_FLP_END - SOC_PPC_FP_ACTION_TYPE_FLP_START) + 1)
#define  SOC_PPC_FP_NOF_ELK_ACTIONS           ((SOC_PPC_FP_ACTION_TYPE_FLP_ACTION_7 - SOC_PPC_FP_ACTION_TYPE_FLP_ACTION_0) + 1)


#define  SOC_PPC_FP_NOF_INGRESS_SLB_ACTIONS (2)


#define SOC_PPC_FP_NOF_DBS_IN_LONGS			4


#define SOC_PPC_FP_NOF_PS_LINES_IN_LONGS    2


#define SOC_PPC_FP_MAX_NOF_DBS_PER_BANK     16


#define SOC_PPC_FP_NOF_PS_LINES             48


#define SOC_PPC_FP_NOF_PFGS_ARAD            128


#define SOC_PPC_FP_NOF_PFGS_IN_LONGS_ARAD             4


#define SOC_PPC_FP_KEY_NOF_KEYS_PER_DB_MAX 	2


#define  SOC_PPC_FP_NOF_CES_PER_DB_MAX (32)


#define  SOC_PPC_FP_IRE_TRAFFIC_BUFFER_SIZE                    (50)


#define SOC_PPC_FP_RESOURCE_DIAG_NOF_PARAMS 					10


#define SOC_PPC_FP_RESOURCE_DIAG_NOF_ERROR_VALUES 		20


#define SOC_PPC_FP_CONTROL_TYPE_HDR_USER_DEF_FLAG_NEGATIVE      (1 << 31)


#define SOC_PPC_FP_DATABASE_INFO_FLAGS_USE_SMALL_BANKS (1 << 0)
#define SOC_PPC_FP_DATABASE_INFO_FLAGS_NO_INSERTION_PRIORITY_ORDER (1 << 1)
#define SOC_PPC_FP_DATABASE_INFO_FLAGS_SPARSE_PRIORITIES     (1 << 2)
#define SOC_PPC_FP_DATABASE_INFO_FLAGS_IS_EQUAL_LSB          (1 << 3)
#define SOC_PPC_FP_DATABASE_INFO_FLAGS_IS_EQUAL_MSB          (1 << 4)

#define SOC_PPC_FP_DATABASE_INFO_FLAGS_USE_DBAL              (1 << 5)
#define SOC_PPC_FP_DATABASE_INFO_FLAGS_HANDLE_ENTRIES_BY_KEY (1 << 6)
#define SOC_PPC_FP_DATABASE_INFO_FLAGS_HEADER_SELECTION      (1 << 7)
#define SOC_PPC_FP_DATABASE_INFO_FLAGS_USE_SINGLE_BANK       (1 << 8)


#define SOC_PPC_FP_DATABASE_INFO_FLAGS_EXTENDED_DATABASES    (1 << 9) 

#define SOC_PPC_FP_DATABASE_INFO_FLAGS_ALLOCATE_FES     (1 << 11) 

#define SOC_PPC_FP_DATABASE_INFO_FLAGS_USE_KAPS         (1 << 12) 

#define SOC_PPC_FP_DATABASE_INFO_FLAGS_WITH_CYCLE       (1 << 13) 

#define SOC_PPC_FP_DATABASE_INFO_FLAGS_ELK_RANGE        (1 << 14) 

#define SOC_PPC_FP_DATABASE_INFO_FLAGS_WITH_CE_ID       (1 << 15) 

#define BCM_FIELD_ENTRY_INVALID                         (-1)

#define SOC_PPC_FP_MAX_SELECT_LINE                      (0x30)   



#define SOC_PPC_BIT_TO_U32(nof_bits) (((nof_bits)+31)/32)


#define SOC_PPC_FP_IS_QUAL_TYPE_USER_DEFINED(qual_type) \
   (((qual_type >= SOC_PPC_FP_QUAL_HDR_USER_DEF_0) && (qual_type <= SOC_PPC_FP_QUAL_HDR_USER_DEF_LAST))? 0x1: 0x0)






typedef SOC_TMC_HPU_FTMH                                        SOC_PPC_FP_FTMH;
typedef SOC_TMC_PORT_PP_PORT_INFO                               SOC_PPC_FP_DIAG_PP_PORT_INFO;
typedef SOC_TMC_TCAM_BANK_ENTRY_SIZE                            SOC_PPC_FP_TCAM_KEY_SIZE;

#define SOC_PPC_FP_PKT_HDR_TYPE_RAW                          SOC_TMC_FP_PKT_HDR_TYPE_RAW
#define SOC_PPC_FP_PKT_HDR_TYPE_FTMH                         SOC_TMC_FP_PKT_HDR_TYPE_FTMH
#define SOC_PPC_FP_PKT_HDR_TYPE_TM                           SOC_TMC_FP_PKT_HDR_TYPE_TM
#define SOC_PPC_FP_PKT_HDR_TYPE_TM_IS                        SOC_TMC_FP_PKT_HDR_TYPE_TM_IS
#define SOC_PPC_FP_PKT_HDR_TYPE_TM_PPH                       SOC_TMC_FP_PKT_HDR_TYPE_TM_PPH
#define SOC_PPC_FP_PKT_HDR_TYPE_TM_IS_PPH                    SOC_TMC_FP_PKT_HDR_TYPE_TM_IS_PPH
#define SOC_PPC_FP_PKT_HDR_TYPE_ETH                          SOC_TMC_FP_PKT_HDR_TYPE_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_ETH_ETH                      SOC_TMC_FP_PKT_HDR_TYPE_ETH_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_IPV4_ETH                     SOC_TMC_FP_PKT_HDR_TYPE_IPV4_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_IPV6_ETH                     SOC_TMC_FP_PKT_HDR_TYPE_IPV6_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_MPLS1_ETH                    SOC_TMC_FP_PKT_HDR_TYPE_MPLS1_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_MPLS2_ETH                    SOC_TMC_FP_PKT_HDR_TYPE_MPLS2_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_MPLS3_ETH                    SOC_TMC_FP_PKT_HDR_TYPE_MPLS3_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_ETH_MPLS1_ETH                SOC_TMC_FP_PKT_HDR_TYPE_ETH_MPLS1_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_ETH_MPLS2_ETH                SOC_TMC_FP_PKT_HDR_TYPE_ETH_MPLS2_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_ETH_MPLS3_ETH                SOC_TMC_FP_PKT_HDR_TYPE_ETH_MPLS3_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_IPV4_MPLS1_ETH               SOC_TMC_FP_PKT_HDR_TYPE_IPV4_MPLS1_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_IPV4_MPLS2_ETH               SOC_TMC_FP_PKT_HDR_TYPE_IPV4_MPLS2_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_IPV4_MPLS3_ETH               SOC_TMC_FP_PKT_HDR_TYPE_IPV4_MPLS3_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_IPV6_MPLS1_ETH               SOC_TMC_FP_PKT_HDR_TYPE_IPV6_MPLS1_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_IPV6_MPLS2_ETH               SOC_TMC_FP_PKT_HDR_TYPE_IPV6_MPLS2_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_IPV6_MPLS3_ETH               SOC_TMC_FP_PKT_HDR_TYPE_IPV6_MPLS3_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_IPV4_IPV4_ETH                SOC_TMC_FP_PKT_HDR_TYPE_IPV4_IPV4_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_IPV6_IPV4_ETH                SOC_TMC_FP_PKT_HDR_TYPE_IPV6_IPV4_ETH
#define SOC_PPC_FP_PKT_HDR_TYPE_ETH_TRILL_ETH                SOC_TMC_FP_PKT_HDR_TYPE_ETH_TRILL_ETH
#define SOC_PPC_PP_NOF_FP_PKT_HDR_TYPES                      SOC_TMC_NOF_FP_PKT_HDR_TYPES
typedef SOC_TMC_FP_PKT_HDR_TYPE                              SOC_PPC_FP_PKT_HDR_TYPE;




typedef enum
{
  
  SOC_PPC_FP_QUAL_HDR_FWD_VLAN_TAG = 0,
  
  SOC_PPC_FP_QUAL_HDR_FWD_SA = 1,
  
  SOC_PPC_FP_QUAL_HDR_FWD_DA = 2,
  
  SOC_PPC_FP_QUAL_HDR_FWD_ETHERTYPE = 3,
  
  SOC_PPC_FP_QUAL_HDR_FWD_2ND_VLAN_TAG = 4,
  
  SOC_PPC_FP_QUAL_HDR_INNER_VLAN_TAG = 5,
  
  SOC_PPC_FP_QUAL_HDR_INNER_SA = 6,
  
  SOC_PPC_FP_QUAL_HDR_INNER_DA = 7,
  
  SOC_PPC_FP_QUAL_HDR_INNER_ETHERTYPE = 8,
  
  SOC_PPC_FP_QUAL_HDR_INNER_2ND_VLAN_TAG = 9,
  
  SOC_PPC_FP_QUAL_HDR_VLAN_FORMAT = 10,
  
  SOC_PPC_FP_QUAL_HDR_VLAN_TAG = 11,
  
  SOC_PPC_FP_QUAL_HDR_SA = 12,
  
  SOC_PPC_FP_QUAL_HDR_DA = 13,
  
  SOC_PPC_FP_QUAL_HDR_ETHERTYPE = 14,
  
  SOC_PPC_FP_QUAL_HDR_2ND_VLAN_TAG = 15,
  
  SOC_PPC_FP_QUAL_HDR_FWD_IPV4_NEXT_PRTCL = 16,
  
  SOC_PPC_FP_QUAL_HDR_FWD_IPV4_DF = 17,
  
  SOC_PPC_FP_QUAL_HDR_FWD_IPV4_MF = 18,
  
  SOC_PPC_FP_QUAL_HDR_FWD_IPV4_SIP = 19,
  
  SOC_PPC_FP_QUAL_HDR_FWD_IPV4_DIP = 20,
  
  SOC_PPC_FP_QUAL_HDR_FWD_IPV4_SRC_PORT = 21,
  
  SOC_PPC_FP_QUAL_HDR_FWD_IPV4_DEST_PORT = 22,
  
  SOC_PPC_FP_QUAL_HDR_FWD_IPV4_TOS = 23,
  
  SOC_PPC_FP_QUAL_HDR_FWD_IPV4_TCP_CTL = 24,
  
  SOC_PPC_FP_QUAL_HDR_FWD_IPV4_IN_VID = 25,
  
  SOC_PPC_FP_QUAL_HDR_INNER_IPV4_NEXT_PRTCL = 26,
  
  SOC_PPC_FP_QUAL_HDR_INNER_IPV4_DF = 27,
  
  SOC_PPC_FP_QUAL_HDR_INNER_IPV4_MF = 28,
  
  SOC_PPC_FP_QUAL_HDR_INNER_IPV4_SIP = 29,
  
  SOC_PPC_FP_QUAL_HDR_INNER_IPV4_DIP = 30,
  
  SOC_PPC_FP_QUAL_HDR_INNER_IPV4_SRC_PORT = 31,
  
  SOC_PPC_FP_QUAL_HDR_INNER_IPV4_DEST_PORT = 32,
  
  SOC_PPC_FP_QUAL_HDR_INNER_IPV4_TOS = 33,
  
  SOC_PPC_FP_QUAL_HDR_INNER_IPV4_TCP_CTL = 34,
  
  SOC_PPC_FP_QUAL_HDR_IPV4_NEXT_PRTCL = 36,
  
  SOC_PPC_FP_QUAL_HDR_IPV4_DF = 37,
  
  SOC_PPC_FP_QUAL_HDR_IPV4_MF = 38,
  
  SOC_PPC_FP_QUAL_HDR_IPV4_SIP = 39,
  
  SOC_PPC_FP_QUAL_HDR_IPV4_DIP = 40,
  
  SOC_PPC_FP_QUAL_HDR_IPV4_SRC_PORT,
  
  SOC_PPC_FP_QUAL_HDR_IPV4_DEST_PORT,
  
  SOC_PPC_FP_QUAL_HDR_ELK_RANGE_IPV4_SRC_PORT,
  
  SOC_PPC_FP_QUAL_HDR_ELK_RANGE_IPV4_DEST_PORT,
  

  SOC_PPC_FP_QUAL_HDR_IPV4_SRC_DEST_PORT,
  
  SOC_PPC_FP_QUAL_HDR_IPV4_TOS,
  
  SOC_PPC_FP_QUAL_HDR_IPV4_TCP_CTL,  
  
  SOC_PPC_FP_QUAL_HDR_AFTER_FWD_IPV4_SIP,
  
  SOC_PPC_FP_QUAL_HDR_AFTER_FWD_IPV4_DIP,
  
  SOC_PPC_FP_QUAL_HDR_IPV4_L4OPS_HI,
  
  SOC_PPC_FP_QUAL_HDR_IPV4_L4OPS_LOW,
  
  SOC_PPC_FP_QUAL_HDR_IPV6_SIP_HIGH, 
  
  SOC_PPC_FP_QUAL_HDR_IPV6_SIP_LOW,
  
  SOC_PPC_FP_QUAL_HDR_IPV6_DIP_HIGH,
  
  SOC_PPC_FP_QUAL_HDR_IPV6_DIP_LOW,
  
  SOC_PPC_FP_QUAL_HDR_IPV6_NEXT_PRTCL,
  
  SOC_PPC_FP_QUAL_HDR_IPV6_TCP_CTL,
  
  SOC_PPC_FP_QUAL_HDR_IPV6_L4OPS,
  
  SOC_PPC_FP_QUAL_HDR_IPV6_TC,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_LABEL_FWD,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_EXP_FWD,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_TTL_FWD,         
  
  SOC_PPC_FP_QUAL_HDR_MPLS_BOS_FWD,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_LABEL1,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_EXP1,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_TTL1,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_BOS1,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_LABEL2,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_EXP2,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_TTL2,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_BOS2,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_LABEL3,   
  
  SOC_PPC_FP_QUAL_HDR_MPLS_EXP3,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_TTL3,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_BOS3,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_LABEL4,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_EXP4,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_TTL4,
  
  SOC_PPC_FP_QUAL_HDR_MPLS_BOS4,
  
   SOC_PPC_FP_QUAL_HDR_MPLS_LABEL5,
   
   SOC_PPC_FP_QUAL_HDR_MPLS_EXP5,
   
   SOC_PPC_FP_QUAL_HDR_MPLS_TTL5,
   
   SOC_PPC_FP_QUAL_HDR_MPLS_BOS5,
  
  SOC_PPC_FP_QUAL_IRPP_SRC_TM_PORT,
  
  SOC_PPC_FP_QUAL_IRPP_SRC_SYST_PORT,
  
  SOC_PPC_FP_QUAL_IRPP_SRC_PP_PORT,   
  
  
  SOC_PPC_FP_QUAL_IRPP_PARSER_LEAF_CONTEXT,   
  
  SOC_PPC_FP_QUAL_IRPP_PKT_HDR_TYPE,
  
  SOC_PPC_FP_QUAL_IRPP_ETH_TAG_FORMAT,
  
  SOC_PPC_FP_QUAL_IRPP_FWD_DEC_DEST,
  
  SOC_PPC_FP_QUAL_IRPP_FWD_DEC_TC,   
  
  SOC_PPC_FP_QUAL_IRPP_FWD_DEC_DP,
  
  SOC_PPC_FP_QUAL_IRPP_FWD_DEC_CPU_TRAP_CODE,
  
  SOC_PPC_FP_QUAL_IRPP_FWD_DEC_CPU_TRAP_QUAL,
  
  SOC_PPC_FP_QUAL_IRPP_UP,
  
  SOC_PPC_FP_QUAL_IRPP_SNOOP_CODE,   
  
  SOC_PPC_FP_QUAL_IRPP_LEARN_DECISION_DEST,
  
  SOC_PPC_FP_QUAL_IRPP_LEARN_ADD_INFO,
  
  SOC_PPC_FP_QUAL_IRPP_IN_LIF,
  
  SOC_PPC_FP_QUAL_IRPP_LL_MIRROR_CMD,
  
  SOC_PPC_FP_QUAL_IRPP_SYSTEM_VSI,
  
  SOC_PPC_FP_QUAL_IRPP_ORIENTATION_IS_HUB,
  
  SOC_PPC_FP_QUAL_IRPP_VLAN_ID,
  
  SOC_PPC_FP_QUAL_IRPP_VLAN_PCP,
  
  SOC_PPC_FP_QUAL_IRPP_VLAN_DEI,
  
  SOC_PPC_FP_QUAL_IRPP_STP_STATE,   
  
  SOC_PPC_FP_QUAL_IRPP_FWD_TYPE,
  
  SOC_PPC_FP_QUAL_IRPP_SUB_HEADER_NDX,
  
   SOC_PPC_FP_QUAL_IRPP_KEY_CHANGED,
  
  SOC_PPC_FP_QUAL_IRPP_IN_RIF,
  
  SOC_PPC_FP_QUAL_IRPP_VRF,    
  
  SOC_PPC_FP_QUAL_IRPP_PCKT_IS_COMP_MC,
  
  SOC_PPC_FP_QUAL_IRPP_MY_BMAC,
  
  SOC_PPC_FP_QUAL_IRPP_IN_TTL,
  
  SOC_PPC_FP_QUAL_IRPP_IN_DSCP_EXP,
  
  SOC_PPC_FP_QUAL_IRPP_PACKET_SIZE_RANGE,   
  
  SOC_PPC_FP_QUAL_IRPP_TERM_TYPE,
  
  SOC_PPC_FP_QUAL_ERPP_PP_PORT_DATA,
  
  SOC_PPC_FP_QUAL_ERPP_IPV4_NEXT_PROTOCOL,
  
  SOC_PPC_FP_QUAL_ERPP_FTMH,
  
  SOC_PPC_FP_QUAL_ERPP_PAYLOAD,   
  
  SOC_PPC_FP_QUAL_HDR_USER_DEF_0,
  
  SOC_PPC_FP_QUAL_HDR_USER_DEF_1,
  
  SOC_PPC_FP_QUAL_HDR_USER_DEF_2,
  
  SOC_PPC_FP_QUAL_HDR_USER_DEF_3,
  
  SOC_PPC_FP_QUAL_HDR_USER_DEF_4,   
  
  SOC_PPC_FP_QUAL_HDR_USER_DEF_5,
  
  SOC_PPC_FP_QUAL_HDR_USER_DEF_6,
  
  SOC_PPC_FP_QUAL_HDR_USER_DEF_7,
  
  SOC_PPC_FP_QUAL_HDR_USER_DEF_8,
  
  SOC_PPC_FP_QUAL_HDR_USER_DEF_9,
 
  SOC_PPC_FP_QUAL_HDR_USER_DEF_LAST = SOC_PPC_FP_QUAL_HDR_USER_DEF_0 + 255,  
    
    SOC_PPC_FP_QUAL_HDR_FWD_IPV6_SIP_HIGH,
    
    SOC_PPC_FP_QUAL_HDR_FWD_IPV6_SIP_LOW,
        
    SOC_PPC_FP_QUAL_HDR_FWD_IPV6_DIP_HIGH,
       
    SOC_PPC_FP_QUAL_HDR_FWD_IPV6_DIP_LOW,
    
    SOC_PPC_FP_QUAL_HDR_IPV4_TTL,
    
    SOC_PPC_FP_QUAL_HDR_INNER_IPV4_TTL,
    
    SOC_PPC_FP_QUAL_HDR_IPV4_FLAGS,    

  
  SOC_PPC_FP_QUAL_HDR_IPV6_FLOW_LABEL,
  
  SOC_PPC_FP_QUAL_HDR_IPV6_HOP_LIMIT,

  
  SOC_PPC_FP_QUAL_IRPP_LEM_2ND_LKUP_ASD,

    
    SOC_PPC_FP_QUAL_HDR_MPLS_LABEL_ID_FWD,  
    SOC_PPC_FP_QUAL_HDR_MPLS_LABEL1_ID,
    SOC_PPC_FP_QUAL_HDR_MPLS_LABEL2_ID,
    SOC_PPC_FP_QUAL_HDR_MPLS_LABEL3_ID,
    SOC_PPC_FP_QUAL_HDR_MPLS_LABEL4_ID,

  
  SOC_PPC_FP_QUAL_OUT_LIF,         

  
  
  SOC_PPC_FP_QUAL_IRPP_INVALID,

    
    SOC_PPC_FP_QUAL_IRPP_IN_PORT_BITMAP,

  
  SOC_PPC_FP_QUAL_IRPP_IN_PORT_KEY_GEN_VAR,
  SOC_PPC_FP_QUAL_IRPP_IN_PORT_KEY_GEN_VAR_PS, 

  
  SOC_PPC_FP_QUAL_IRPP_PTC_KEY_GEN_VAR, 

  
  SOC_PPC_FP_QUAL_IRPP_PMF_PGM_KEY_GEN_VAR,

  
  SOC_PPC_FP_QUAL_HDR_ITMH,

  
  SOC_PPC_FP_QUAL_HDR_ITMH_EXT,

  
  SOC_PPC_FP_QUAL_HDR_ITMH_DEST_FWD,

  
    
  SOC_PPC_FP_QUAL_HDR_ITMH_PMF_HDR_EXT,

  SOC_PPC_FP_QUAL_HDR_PTCH2_OPAQUE,
  SOC_PPC_FP_QUAL_HDR_ITMH_PPH_TYPE,

  SOC_PPC_FP_QUAL_HDR_OAM_ETHERTYPE,
  SOC_PPC_FP_QUAL_HDR_OAM_2ND_ETHERTYPE,
  SOC_PPC_FP_QUAL_HDR_BFD_PPH_FWD_CODE, 
  SOC_PPC_FP_QUAL_HDR_BFD_1ST_NIBBLE_AFTER_LABEL,

  SOC_PPC_FP_QUAL_HDR_FTMH,

  
  SOC_PPC_FP_QUAL_HDR_FTMH_LB_KEY_EXT_AFTER_FTMH,
    SOC_PPC_FP_QUAL_HDR_FTMH_LB_KEY_START_OF_PACKET,

  
  SOC_PPC_FP_QUAL_HDR_DSP_EXTENSION_AFTER_FTMH,

  
    SOC_PPC_FP_QUAL_HDR_STACKING_EXT_AFTER_DSP_EXT,
  SOC_PPC_FP_QUAL_HDR_STACKING_EXT_AFTER_DSP_EXT_PETRA,

    
    SOC_PPC_FP_QUAL_HDR_VLAN_TAG_TPID,
    SOC_PPC_FP_QUAL_HDR_VLAN_TAG_ID,
    SOC_PPC_FP_QUAL_HDR_VLAN_TAG_CFI, 
    SOC_PPC_FP_QUAL_HDR_VLAN_TAG_PRI,
    SOC_PPC_FP_QUAL_HDR_VLAN_TAG_PRI_CFI,
    
    SOC_PPC_FP_QUAL_HDR_2ND_VLAN_TAG_TPID,
    SOC_PPC_FP_QUAL_HDR_2ND_VLAN_TAG_ID,
    SOC_PPC_FP_QUAL_HDR_2ND_VLAN_TAG_CFI,
    SOC_PPC_FP_QUAL_HDR_2ND_VLAN_TAG_PRI,

    SOC_PPC_FP_QUAL_HDR_INNER_VLAN_TAG_ID,
    SOC_PPC_FP_QUAL_HDR_INNER_VLAN_TAG_CFI,
    SOC_PPC_FP_QUAL_HDR_INNER_VLAN_TAG_PRI,

    SOC_PPC_FP_QUAL_HDR_INNER_2ND_VLAN_TAG_ID, 
    SOC_PPC_FP_QUAL_HDR_INNER_2ND_VLAN_TAG_CFI,
    SOC_PPC_FP_QUAL_HDR_INNER_2ND_VLAN_TAG_PRI,

    SOC_PPC_FP_QUAL_OUTER_VLAN_ACTION_RANGE,
    SOC_PPC_FP_QUAL_INNER_VLAN_ACTION_RANGE,

    
    SOC_PPC_FP_QUAL_IRPP_ALL_ZEROES,

    
    SOC_PPC_FP_QUAL_IRPP_ALL_ONES,

    
    SOC_PPC_FP_QUAL_IRPP_PEM_GENERAL_DATA,

    SOC_PPC_FP_QUAL_IRPP_PROG_VAR,

    
    SOC_PPC_FP_QUAL_PACKET_HEADER_SIZE,
    SOC_PPC_FP_QUAL_HEADER_OFFSET0,   
    SOC_PPC_FP_QUAL_HEADER_OFFSET1,
    SOC_PPC_FP_QUAL_HEADER_OFFSET2,
    SOC_PPC_FP_QUAL_HEADER_OFFSET3,
    SOC_PPC_FP_QUAL_HEADER_OFFSET4,
    SOC_PPC_FP_QUAL_HEADER_OFFSET5,
    SOC_PPC_FP_QUAL_HEADER_OFFSET_0_UNTIL_5,
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER0,
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER1,
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER1_NEXT_PROTOCOL,
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER1_ENCAPSULATION, 
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER1_OUTER_TAG,
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER1_PRIORITY,
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER1_INNER_TAG,
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER2,
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER2_BOS,
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER2_IP_FRAGMENTED,
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER2_GRE_PARSED, 
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER2_IP_HAS_OPTIONS,
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER2_NEXT_PROTOCOL,
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER3, 
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER3_IP_FRAGMENTED,
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER4,
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER5,
    SOC_PPC_FP_QUAL_FORWARDING_ACTION_STRENGTH,
    SOC_PPC_FP_QUAL_FORWARDING_ACTION_METER_TRAFFIC_CLASS,
    SOC_PPC_FP_QUAL_SNOOP_STRENGTH,
    SOC_PPC_FP_QUAL_VSI_PROFILE,
    SOC_PPC_FP_QUAL_FID,
    SOC_PPC_FP_QUAL_VLAN_EDIT_CMD_COMMAND,
    SOC_PPC_FP_QUAL_VLAN_EDIT_CMD_VID2, 
    SOC_PPC_FP_QUAL_VLAN_EDIT_CMD_VID1,
    SOC_PPC_FP_QUAL_FORWARDING_OFFSET_EXTENSION,
    SOC_PPC_FP_QUAL_FORWARDING_HEADER_ENCAPSULATION,
    SOC_PPC_FP_QUAL_IGNORE_CP,
    SOC_PPC_FP_QUAL_SEQUENCE_NUMBER_TAG,
    SOC_PPC_FP_QUAL_EEI,
    SOC_PPC_FP_QUAL_RPF_DESTINATION,
    SOC_PPC_FP_QUAL_RPF_DESTINATION_VALID,
    SOC_PPC_FP_QUAL_INGRESS_LEARN_ENABLE,
    SOC_PPC_FP_QUAL_EGRESS_LEARN_ENABLE, 
    SOC_PPC_FP_QUAL_LEARN_KEY,
    SOC_PPC_FP_QUAL_LEARN_KEY_MAC,
    SOC_PPC_FP_QUAL_LEARN_KEY_VLAN,
    SOC_PPC_FP_QUAL_IN_LIF_PROFILE,
    SOC_PPC_FP_QUAL_IN_LIF_PROFILE_SAME_IF,
    SOC_PPC_FP_QUAL_LEARN_OR_TRANSPLANT,
    SOC_PPC_FP_QUAL_PACKET_IS_BOOTP_DHCP,
    SOC_PPC_FP_QUAL_UNKNOWN_ADDR,
    SOC_PPC_FP_QUAL_FWD_PRCESSING_PROFILE,
    SOC_PPC_FP_QUAL_ELK_ERROR,
    SOC_PPC_FP_QUAL_ELK_LKP_PAYLOAD,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_FOUND_0,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_FOUND_1,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_FOUND_2,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_FOUND_3,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_FOUND_4,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_FOUND_5,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_FOUND_6,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_FOUND_7,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_RESULT_0,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_RESULT_1,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_RESULT_2, 
    SOC_PPC_FP_QUAL_ELK_LOOKUP_RESULT_3,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_RESULT_4,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_RESULT_5,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_RESULT_6,
    SOC_PPC_FP_QUAL_ELK_LOOKUP_RESULT_7,
    SOC_PPC_FP_QUAL_LEM_1ST_LOOKUP_FOUND,
    SOC_PPC_FP_QUAL_LEM_1ST_LOOKUP_RESULT,
    SOC_PPC_FP_QUAL_COUNTER_UPDATE_A,
    SOC_PPC_FP_QUAL_COUNTER_POINTER_A,
    SOC_PPC_FP_QUAL_COUNTER_UPDATE_B,
    SOC_PPC_FP_QUAL_COUNTER_POINTER_B,
    SOC_PPC_FP_QUAL_PROGRAM_INDEX,
    SOC_PPC_FP_QUAL_LEARN_DATA,
    SOC_PPC_FP_QUAL_LEM_2ND_LOOKUP_FOUND,
    SOC_PPC_FP_QUAL_LEM_2ND_LOOKUP_RESULT,
    SOC_PPC_FP_QUAL_LPM_1ST_LOOKUP_FOUND,
    SOC_PPC_FP_QUAL_LPM_1ST_LOOKUP_RESULT,
    SOC_PPC_FP_QUAL_LPM_2ND_LOOKUP_FOUND,
    SOC_PPC_FP_QUAL_LPM_2ND_LOOKUP_RESULT,
    SOC_PPC_FP_QUAL_TCAM_MATCH,
    SOC_PPC_FP_QUAL_TCAM_RESULT,
    SOC_PPC_FP_QUAL_TCAM_TRAPS0_MATCH,
    SOC_PPC_FP_QUAL_TCAM_TRAPS0_RESULT,
    SOC_PPC_FP_QUAL_TCAM_TRAPS1_MATCH,
    SOC_PPC_FP_QUAL_TCAM_TRAPS1_RESULT,
    SOC_PPC_FP_QUAL_TT_PROCESSING_PROFILE,
    SOC_PPC_FP_QUAL_TT_LOOKUP0_FOUND,
    SOC_PPC_FP_QUAL_TT_LOOKUP0_PAYLOAD,
    SOC_PPC_FP_QUAL_TT_LOOKUP1_FOUND,
    SOC_PPC_FP_QUAL_TT_LOOKUP1_PAYLOAD,
    SOC_PPC_FP_QUAL_VT_PROCESSING_PROFILE,
    SOC_PPC_FP_QUAL_VT_LOOKUP0_FOUND, 
    SOC_PPC_FP_QUAL_VT_LOOKUP0_PAYLOAD,
    SOC_PPC_FP_QUAL_VT_LOOKUP1_FOUND,
    SOC_PPC_FP_QUAL_VT_LOOKUP1_PAYLOAD,
    SOC_PPC_FP_QUAL_CPU_TRAP_CODE_PROFILE,
    SOC_PPC_FP_QUAL_VID_VALID,
    SOC_PPC_FP_QUAL_DA_IS_BPDU,
    SOC_PPC_FP_QUAL_PACKET_IS_IEEE1588,
    SOC_PPC_FP_QUAL_IEEE1588_ENCAPSULATION,
    SOC_PPC_FP_QUAL_IEEE1588_COMPENSATE_TIME_STAMP,
    SOC_PPC_FP_QUAL_IEEE1588_COMMAND,
    SOC_PPC_FP_QUAL_IEEE1588_HEADER_OFFSET,
    SOC_PPC_FP_QUAL_OAM_UP_MEP,
    SOC_PPC_FP_QUAL_OAM_SUB_TYPE,
    SOC_PPC_FP_QUAL_OAM_OFFSET,
    SOC_PPC_FP_QUAL_OAM_STAMP_OFFSET,
    SOC_PPC_FP_QUAL_OAM_METER_DISABLE,
    SOC_PPC_FP_QUAL_OAM_ID,
    SOC_PPC_FP_QUAL_TUNNEL_ID,
    SOC_PPC_FP_QUAL_ARP_SENDER_IP4,
    SOC_PPC_FP_QUAL_ARP_TARGET_IP4, 
    SOC_PPC_FP_QUAL_ARP_OPCODE_IP4,

  
  SOC_PPC_FP_QUAL_HDR_HIGIG_FRC,

  
  SOC_PPC_FP_QUAL_HDR_HIGIG_PPD,

  
  SOC_PPC_FP_QUAL_HDR_HIGIG_PPD_EXT,

  SOC_PPC_FP_QUAL_HDR_MH_FLOW,
  SOC_PPC_FP_QUAL_HDR_MH_TC2,
  SOC_PPC_FP_QUAL_HDR_MH_DP0,
  SOC_PPC_FP_QUAL_HDR_MH_CAST,
  SOC_PPC_FP_QUAL_HDR_MH_DP1,
  SOC_PPC_FP_QUAL_HDR_MH_TC10, 



		
		SOC_PPC_FP_QUAL_HDR_INPHEADER_UC,
		SOC_PPC_FP_QUAL_HDR_INPHEADER_TB,
		SOC_PPC_FP_QUAL_HDR_INPHEADER_UC_TC,
		SOC_PPC_FP_QUAL_HDR_INPHEADER_MC_TC,
		SOC_PPC_FP_QUAL_HDR_INPHEADER_DP,


    
    SOC_PPC_FP_QUAL_HDR_PTCH_RESERVE_LSB,

  
  SOC_PPC_FP_QUAL_ERPP_ONES,
  SOC_PPC_FP_QUAL_ERPP_ZEROES,
  SOC_PPC_FP_QUAL_ERPP_OAM_TS,
  SOC_PPC_FP_QUAL_ERPP_LEARN_EXT, 
  SOC_PPC_FP_QUAL_ERPP_LEARN_EXT_SRC_PORT,
  SOC_PPC_FP_QUAL_ERPP_LEARN_EXT_IN_VPORT,
  SOC_PPC_FP_QUAL_ERPP_FHEI,
    SOC_PPC_FP_QUAL_ERPP_FHEI_EXP,
    SOC_PPC_FP_QUAL_ERPP_FHEI_DSCP,
  SOC_PPC_FP_QUAL_ERPP_FHEI_IPV4_TTL,
  SOC_PPC_FP_QUAL_ERPP_OUT_TM_PORT_PMF_DATA,
    SOC_PPC_FP_QUAL_ERPP_OUT_PP_PORT_PMF_DATA_PS, 
  SOC_PPC_FP_QUAL_ERPP_OUT_PP_PORT_PMF_DATA,
  SOC_PPC_FP_QUAL_ERPP_EEI,
  SOC_PPC_FP_QUAL_ERPP_EXT_IN_LIF,
  SOC_PPC_FP_QUAL_ERPP_EXT_OUT_LIF,
  SOC_PPC_FP_QUAL_ERPP_STACKING_ROUTE_HISTORY_BITMAP,
  SOC_PPC_FP_QUAL_ERPP_DSP_EXT,
  SOC_PPC_FP_QUAL_ERPP_PACKET_SIZE,
  SOC_PPC_FP_QUAL_ERPP_DST_SYSTEM_PORT,
  SOC_PPC_FP_QUAL_ERPP_SRC_SYSTEM_PORT,
  SOC_PPC_FP_QUAL_ERPP_VSI_OR_VRF,
  SOC_PPC_FP_QUAL_ERPP_VSI_OR_VRF_ORIG,
  SOC_PPC_FP_QUAL_ERPP_FWD_OFFSET,
  SOC_PPC_FP_QUAL_ERPP_ETH_TAG_FORMAT,
  SOC_PPC_FP_QUAL_ERPP_SYS_VALUE1,
  SOC_PPC_FP_QUAL_ERPP_SYS_VALUE2,
  SOC_PPC_FP_QUAL_ERPP_DSP_PTR_ORIG,
  SOC_PPC_FP_QUAL_ERPP_DSP_PTR,
  SOC_PPC_FP_QUAL_ERPP_OUT_TM_PORT,
  SOC_PPC_FP_QUAL_ERPP_OUT_PP_PORT,
  SOC_PPC_FP_QUAL_ERPP_LB_KEY,
  SOC_PPC_FP_QUAL_ERPP_TC,
  SOC_PPC_FP_QUAL_ERPP_FORMAT_CODE, 
  SOC_PPC_FP_QUAL_ERPP_FWD_CODE,
  SOC_PPC_FP_QUAL_ERPP_FWD_CODE_ORIG,
  SOC_PPC_FP_QUAL_ERPP_ACTION_PROFILE,
  SOC_PPC_FP_QUAL_ERPP_HEADER_CODE,
  SOC_PPC_FP_QUAL_ERPP_ETH_TYPE_CODE,
  SOC_PPC_FP_QUAL_ERPP_IN_LIF_ORIENTATION,
  SOC_PPC_FP_QUAL_ERPP_SNOOP_CPU_CODE,
  SOC_PPC_FP_QUAL_ERPP_FTMH_RESERVED,
  SOC_PPC_FP_QUAL_ERPP_ECN_CAPABLE,
  SOC_PPC_FP_QUAL_ERPP_PPH_TYPE,
  SOC_PPC_FP_QUAL_ERPP_TM_ACTION_TYPE,
  SOC_PPC_FP_QUAL_ERPP_DP,
  SOC_PPC_FP_QUAL_ERPP_FHEI_CODE,
  SOC_PPC_FP_QUAL_ERPP_LEARN_ALLOWED,
  SOC_PPC_FP_QUAL_ERPP_UNKNOWN_ADDR,
  SOC_PPC_FP_QUAL_ERPP_LEARN_EXT_VALID,
  SOC_PPC_FP_QUAL_ERPP_BYPASS_FILTERING,
  SOC_PPC_FP_QUAL_ERPP_EEI_VALID,
  SOC_PPC_FP_QUAL_ERPP_CNI,
  SOC_PPC_FP_QUAL_ERPP_DSP_EXT_VALID,
  SOC_PPC_FP_QUAL_ERPP_SYSTEM_MC,
  SOC_PPC_FP_QUAL_ERPP_OUT_MIRROR_DISABLE,
  SOC_PPC_FP_QUAL_ERPP_EXCLUDE_SRC,
  SOC_PPC_FP_QUAL_ERPP_DISCARD,
  SOC_PPC_FP_QUAL_ERPP_FABRIC_OR_EGRESS_MC,
  SOC_PPC_FP_QUAL_ERPP_RESEVED,
  SOC_PPC_FP_QUAL_ERPP_FIRST_COPY,
  SOC_PPC_FP_QUAL_ERPP_LAST_COPY,
  SOC_PPC_FP_QUAL_ERPP_START_BUFFER,
  SOC_PPC_FP_QUAL_ERPP_CONTEXT,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_DA,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_SA,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_DATA,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_ADDITIONAL_DATA,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_CPID0,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_CPID1,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_CPID2,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_OUTER_TPID,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_INNER_TPID,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_OUTER_TAG_ID, 
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_OUTER_TAG_CFI,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_OUTER_TAG_PRI,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_OUTER_TAG_PRI_CFI,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_OUTER_TAG,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_INNER_TAG,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_INNER_TAG_ID,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_INNER_TAG_CFI,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_ETH_INNER_TAG_PRI,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_FHEI_ETH_OUTER_TAG_ID,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_FHEI_ETH_OUTER_TAG_CFI,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_FHEI_ETH_OUTER_TAG_PRI,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_FHEI_ETH_OUTER_TAG,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_FHEI_ETH_INNER_TAG,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_FHEI_ETH_INNER_TAG_ID,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_FHEI_ETH_INNER_TAG_CFI,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_FHEI_ETH_INNER_TAG_PRI,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_BRIDGED_FORWARDING_DATA_MSB,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_BRIDGED_FORWARDING_DATA_LSB,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_BRIDGED_ACL_DATA_HIGH,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_BRIDGED_ACL_DATA_LOW,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV4_OPTIONS_PRESENT,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV4_TOTAL_LEN_ERROR,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV4_HEADER_LEN_ERROR,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV4_CHECKSUM_ERROR,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV4_VERSION_ERROR,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV4_TOS,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV4_SIP,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV4_DIP,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV4_PROTOCOL,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV4_L4_SRC_PORT,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV4_L4_DEST_PORT,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_MSBS_TC,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_MSBS_HOP_LIMIT,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_MSBS_FLOW_LABEL,
    SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_MSBS_NEXT_PROTOCOL,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_MC_DST,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_IPV4_MAPPED_DST,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_IPV4_CMP_DST,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_SITE_LOCAL_SRC,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_LINK_LOCAL_SRC,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_SITE_LOCAL_DST,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_LINK_LOCAL_DST,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_NEXT_HEADER_IS_ZERO,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_LOOPBACK_SRC_OR_DST, 
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_SIP_IS_ALL_ZEROES,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_DIP_IS_ALL_ZEROES,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_SIP_IS_MC,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_IPV6_VERSION_ERROR,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_MPLS_EXTRA_DATA,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_MPLS_HDR,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_TRILL_EXTRA_DATA,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_TRILL_HDR,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_TRILL_VERSION,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_TRILL_MULTI_DESTINATION, 
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_TRILL_OP_LENGTH,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_TRILL_HOP_COUNT,
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_TRILL_EGRESS_RBRIDGE, 
  SOC_PPC_FP_QUAL_ERPP_NWK_RCRD_TRILL_INGRESS_RBRIDGE, 

    
  SOC_PPC_FP_QUAL_STAMP_NATIVE_VSI,
  SOC_PPC_FP_QUAL_NATIVE_VSI,
  SOC_PPC_FP_QUAL_IS_EQUAL,
  SOC_PPC_FP_QUAL_EXTENSION_HEADER_TYPE,

    
    SOC_PPC_FP_QUAL_CPU2FLP_C_INTERNAL_FIELDS_DATA,
    SOC_PPC_FP_QUAL_SERVICE_TYPE,                
    SOC_PPC_FP_QUAL_VSI_UNKNOWN_DA_DESTINATION,
    SOC_PPC_FP_QUAL_I_SID,
    SOC_PPC_FP_QUAL_TT_LEARN_ENABLE,
    SOC_PPC_FP_QUAL_TT_LEARN_DATA,
    SOC_PPC_FP_QUAL_IN_LIF_UNKNOWN_DA_PROFILE,
    SOC_PPC_FP_QUAL_IN_RIF_UC_RPF_ENABLE,
    SOC_PPC_FP_QUAL_L3VPN_DEFAULT_ROUTING,
    SOC_PPC_FP_QUAL_TERMINATED_TTL_VALID,
    SOC_PPC_FP_QUAL_TERMINATED_TTL,
    SOC_PPC_FP_QUAL_TERMINATED_DSCP_EXP,
    SOC_PPC_FP_QUAL_IPR2DSP_6EQ7_ESADI,
    SOC_PPC_FP_QUAL_IPR2DSP_6EQ7_MPLS_EXP,
    SOC_PPC_FP_QUAL_TERMINATED_PROTOCOL,
    SOC_PPC_FP_QUAL_COS_PROFILE,
    SOC_PPC_FP_QUAL_VTT_OAM_LIF_VALID,
    SOC_PPC_FP_QUAL_VTT_OAM_LIF,
    SOC_PPC_FP_QUAL_LL_LEM_1ST_LOOKUP_FOUND,
    SOC_PPC_FP_QUAL_LL_LEM_1ST_LOOKUP_RESULT,
    SOC_PPC_FP_QUAL_VT_ISA_KEY,

    
    SOC_PPC_FP_QUAL_KEY_AFTER_HASHING, 
    SOC_PPC_FP_QUAL_IS_FEC_DEST_14_0,

    
    SOC_PPC_FP_QUAL_IRPP_ELK_LKP_PAYLOAD_LSB,
    SOC_PPC_FP_QUAL_IRPP_IN_RIF_PROFILE,
    SOC_PPC_FP_QUAL_IRPP_TCAM0_MATCH,
    SOC_PPC_FP_QUAL_IRPP_TCAM0_RESULT,
    SOC_PPC_FP_QUAL_IRPP_TCAM1_MATCH,
    SOC_PPC_FP_QUAL_IRPP_TCAM1_RESULT,
    SOC_PPC_FP_QUAL_IRPP_IN_LIF_DATA,
    SOC_PPC_FP_QUAL_IRPP_RPF_STAMP_NATIVE_VSI,
    SOC_PPC_FP_QUAL_IRPP_RPF_NATIVE_VSI,  
    SOC_PPC_FP_QUAL_IRPP_IN_PORT_MAPPED_PP_PORT,
    SOC_PPC_FP_QUAL_IRPP_IN_LIF_DATA_INDEX,
    SOC_PPC_FP_QUAL_IRPP_LOCAL_IN_LIF,
    SOC_PPC_FP_QUAL_IRPP_CONSISTENT_HASHING_PGM_KEY_GEN_VAR,
    SOC_PPC_FP_QUAL_IRPP_PACKET_FORMAT_CODE_ACL,

    
    SOC_PPC_FP_QUAL_ETH_OAM_HEADER_BITS_0_31,
    SOC_PPC_FP_QUAL_ETH_OAM_HEADER_BITS_32_63,
    SOC_PPC_FP_QUAL_MPLS_OAM_HEADER_BITS_0_31,
    SOC_PPC_FP_QUAL_MPLS_OAM_HEADER_BITS_32_63,
    SOC_PPC_FP_QUAL_MPLS_OAM_ACH  ,       
    SOC_PPC_FP_QUAL_OAM_HEADER_BITS_0_31,
    SOC_PPC_FP_QUAL_OAM_HEADER_BITS_32_63,
    SOC_PPC_FP_QUAL_OAM_OPCODE,
  	SOC_PPC_FP_QUAL_OAM_MD_LEVEL_UNTAGGED,
  	SOC_PPC_FP_QUAL_OAM_MD_LEVEL_SINGLE_TAG,
  	SOC_PPC_FP_QUAL_OAM_MD_LEVEL_DOUBLE_TAG,
    SOC_PPC_FP_QUAL_OAM_MD_LEVEL,
  	SOC_PPC_FP_QUAL_TM_OUTER_TAG,
  	SOC_PPC_FP_QUAL_TM_INNER_TAG,
  	SOC_PPC_FP_QUAL_MY_DISCR_IPV4,   
  	SOC_PPC_FP_QUAL_MY_DISCR_MPLS,
  	SOC_PPC_FP_QUAL_MY_DISCR_PWE,
    SOC_PPC_FP_QUAL_TRAP_QUALIFIER_FHEI,
    SOC_PPC_FP_QUAL_EID,

    
    SOC_PPC_FP_QUAL_TRILL_INGRESS_NICK,
    SOC_PPC_FP_QUAL_TRILL_EGRESS_NICK,
    SOC_PPC_FP_QUAL_TRILL_NATIVE_VLAN_VSI,
    SOC_PPC_FP_QUAL_TRILL_NATIVE_ETH_INNER_TPID,
    SOC_PPC_FP_QUAL_TRILL_NATIVE_INNER_VLAN_VSI,

    
    SOC_PPC_FP_QUAL_GRE_CRKS,
    SOC_PPC_FP_QUAL_GRE_KEY,
    SOC_PPC_FP_QUAL_GRE_PROTOCOL_TYPE,
    SOC_PPC_FP_QUAL_NATIVE_VLAN_VSI,

    
    SOC_PPC_FP_QUAL_ETH_HEADER_ISID,

    SOC_PPC_FP_QUAL_VXLAN_VNI,

    SOC_PPC_FP_QUAL_UNTAG_HDR_ETHERTYPE,
    SOC_PPC_FP_QUAL_ONE_TAG_HDR_ETHERTYPE,
    SOC_PPC_FP_QUAL_DOUBLE_TAG_HDR_ETHERTYPE,

      
    SOC_PPC_FP_QUAL_IRPP_PTC_KEY_GEN_VAR_PS,  

    
    SOC_PPC_FP_QUAL_VLAN_DOMAIN                           ,   
    SOC_PPC_FP_QUAL_INITIAL_VID                           ,
    SOC_PPC_FP_QUAL_MPLS_KEY3                             ,
    SOC_PPC_FP_QUAL_MPLS_KEY2                             ,
    SOC_PPC_FP_QUAL_MPLS_KEY1                             ,
    SOC_PPC_FP_QUAL_MPLS_KEY0                             ,
    SOC_PPC_FP_QUAL_CMPRSD_INNER_VID                      ,
    SOC_PPC_FP_QUAL_CMPRSD_OUTER_VID                      ,
    SOC_PPC_FP_QUAL_MPLS_LABEL_RANGE_BASE_LIF2            ,
    SOC_PPC_FP_QUAL_MPLS_LABEL_RANGE_BASE_LIF1            ,
    SOC_PPC_FP_QUAL_MPLS_LABEL_RANGE_BASE_LIF0            ,
    SOC_PPC_FP_QUAL_LABEL3_IDX                            ,
    SOC_PPC_FP_QUAL_LABEL2_IDX                            ,
    SOC_PPC_FP_QUAL_LABEL1_IDX                            ,
    SOC_PPC_FP_QUAL_LEM_1ST_LOOKUP_FOUND_LEM_DOMAIN       ,
    SOC_PPC_FP_QUAL_LEM_1ST_LOOKUP_FOUND_LEM_SA_DROP      ,
    SOC_PPC_FP_QUAL_LEM_1ST_LOOKUP_FOUND_LEM_IS_LEARN_LIF ,
    SOC_PPC_FP_QUAL_LEM_DYNAMIC_LEM_1ST_LOOKUP_FOUND_LEM  ,
    SOC_PPC_FP_QUAL_LEM_1ST_LOOKUP_FOUND_DESTINATION      ,
    SOC_PPC_FP_QUAL_ISB_FOUND_IN_LIF_IDX                  ,
    SOC_PPC_FP_QUAL_ISB_FOUND                             ,
    SOC_PPC_FP_QUAL_ISB_IN_LIF_IDX                        ,
    SOC_PPC_FP_QUAL_ISA_FOUND_IN_LIF_IDX                  ,
    SOC_PPC_FP_QUAL_ISA_FOUND                             ,
    SOC_PPC_FP_QUAL_ISA_IN_LIF_IDX                        ,
    SOC_PPC_FP_QUAL_VT_TCAM_MATCH_IN_LIF_IDX              ,
    SOC_PPC_FP_QUAL_VT_TCAM_MATCH                         ,
    SOC_PPC_FP_QUAL_VT_TCAM_IN_LIF_IDX                    ,
    SOC_PPC_FP_QUAL_INITIAL_VSI                           ,
    SOC_PPC_FP_QUAL_IN_RIF_VALID_VRF                      ,
    SOC_PPC_FP_QUAL_IN_RIF_VALID_RIF_PROFILE              ,
    SOC_PPC_FP_QUAL_IN_RIF_VALID_IN_RIF                   ,
    SOC_PPC_FP_QUAL_IN_RIF_VALID                          ,
    SOC_PPC_FP_QUAL_VT_LEM_1ST_LOOKUP_FOUND               ,
    SOC_PPC_FP_QUAL_VT_LEM_1ST_LOOKUP_NOT_FOUND           ,
    SOC_PPC_FP_QUAL_MACT_DOMAIN                           ,
    SOC_PPC_FP_QUAL_MACT_SA_DROP                          ,
    SOC_PPC_FP_QUAL_MACT_IS_LEARN                         ,
    SOC_PPC_FP_QUAL_MACT_DYNAMIC                          ,
    SOC_PPC_FP_QUAL_MACT_DESTINATION                      ,
    SOC_PPC_FP_QUAL_KEY3                                  ,
    SOC_PPC_FP_QUAL_KEY3_16_INST0                         ,
    SOC_PPC_FP_QUAL_KEY3_16_INST1                         ,
    SOC_PPC_FP_QUAL_KEY3_16_INST2                         ,
    SOC_PPC_FP_QUAL_KEY3_32_INST0                         ,
    SOC_PPC_FP_QUAL_KEY3_32_INST1                         ,
    SOC_PPC_FP_QUAL_KEY3_LABEL                            ,
    SOC_PPC_FP_QUAL_KEY3_OUTER_VID_VALID                  ,
    SOC_PPC_FP_QUAL_KEY3_OUTER_VID                        ,
    SOC_PPC_FP_QUAL_KEY3_INNER_VID_VALID                  ,
    SOC_PPC_FP_QUAL_KEY3_INNER_VID                        ,  
    SOC_PPC_FP_QUAL_KEY2                                  ,
    SOC_PPC_FP_QUAL_KEY2_16_INST0                         ,
    SOC_PPC_FP_QUAL_KEY2_16_INST1                         ,
    SOC_PPC_FP_QUAL_KEY2_16_INST2                         ,
    SOC_PPC_FP_QUAL_KEY2_32_INST0                         ,
    SOC_PPC_FP_QUAL_KEY2_32_INST1                         ,
    SOC_PPC_FP_QUAL_KEY2_LABEL                            ,
    SOC_PPC_FP_QUAL_KEY2_OUTER_VID_VALID                  ,
    SOC_PPC_FP_QUAL_KEY2_OUTER_VID                        ,
    SOC_PPC_FP_QUAL_KEY2_INNER_VID_VALID                  ,
    SOC_PPC_FP_QUAL_KEY2_INNER_VID                        ,
    SOC_PPC_FP_QUAL_KEY1                                  ,
    SOC_PPC_FP_QUAL_KEY1_16_INST0                         ,
    SOC_PPC_FP_QUAL_KEY1_16_INST1                         ,
    SOC_PPC_FP_QUAL_KEY1_16_INST2                         ,
    SOC_PPC_FP_QUAL_KEY1_32_INST0                         ,
    SOC_PPC_FP_QUAL_KEY1_32_INST1                         ,
    SOC_PPC_FP_QUAL_KEY1_LABEL                            ,
    SOC_PPC_FP_QUAL_KEY1_OUTER_VID_VALID                  ,
    SOC_PPC_FP_QUAL_KEY1_OUTER_VID                        ,
    SOC_PPC_FP_QUAL_KEY1_INNER_VID_VALID                  ,
    SOC_PPC_FP_QUAL_KEY1_INNER_VID                        ,
    SOC_PPC_FP_QUAL_KEY0                                  ,
    SOC_PPC_FP_QUAL_KEY0_16_INST0                         ,
    SOC_PPC_FP_QUAL_KEY0_16_INST1                         ,
    SOC_PPC_FP_QUAL_KEY0_16_INST2                         ,
    SOC_PPC_FP_QUAL_KEY0_32_INST0                         ,
    SOC_PPC_FP_QUAL_KEY0_32_INST1                         ,
    SOC_PPC_FP_QUAL_KEY0_LABEL                            ,
    SOC_PPC_FP_QUAL_KEY0_OUTER_VID_VALID                  , 
    SOC_PPC_FP_QUAL_KEY0_OUTER_VID                        ,
    SOC_PPC_FP_QUAL_KEY0_INNER_VID_VALID                  ,
    SOC_PPC_FP_QUAL_KEY0_INNER_VID                        ,


    
    SOC_PPC_FP_QUAL_PORT_EXTENDER_ETAG                    ,
    SOC_PPC_FP_QUAL_PORT_EXTENDER_ECID                    ,

   

   
    SOC_PPC_FP_QUAL_HDR_FWD_VLAN_TAG_ID,

   
    SOC_PPC_FP_QUAL_HDR_FWD_VLAN_2ND_TAG_ID,

   
    SOC_PPC_FP_QUAL_HDR_FWD_INNERMOST_VLAN_TAG_ID,


  
    SOC_PPC_FP_QUAL_KEY0_EVPN_BOS_EXPECTED,
    SOC_PPC_FP_QUAL_KEY1_EVPN_BOS_EXPECTED,
    SOC_PPC_FP_QUAL_KEY2_EVPN_BOS_EXPECTED,
    SOC_PPC_FP_QUAL_KEY3_EVPN_BOS_EXPECTED,
      
      
  
    SOC_PPC_FP_QUAL_CUSTOM_PP_HEADER_OUTPUT_FP,
    SOC_PPC_FP_QUAL_CUSTOM_PP_HEADER_OUTPUT_LSP_ECMP_FP,

   
     SOC_PPC_FP_QUAL_FC_WITH_VFT_D_ID,
     SOC_PPC_FP_QUAL_FC_D_ID,
     SOC_PPC_FP_QUAL_FC_WITH_VFT_VFT_ID,

    
    SOC_PPC_FP_QUAL_IRPP_PRESEL_ID,
    SOC_PPC_FP_QUAL_IRPP_PRESEL_PROFILE0,
    SOC_PPC_FP_QUAL_IRPP_PRESEL_PROFILE1,
    SOC_PPC_FP_QUAL_IRPP_PRESEL_PROFILE2,    
    SOC_PPC_FP_QUAL_IRPP_PRESEL_PROFILE3,
    SOC_PPC_FP_QUAL_IRPP_PRESEL_PROFILE_KAPS,


    
    SOC_PPC_FP_QUAL_IRPP_TCAM_0_RESULT,
    SOC_PPC_FP_QUAL_IRPP_TCAM_1_RESULT,
    SOC_PPC_FP_QUAL_IRPP_TCAM_2_RESULT,
    SOC_PPC_FP_QUAL_IRPP_TCAM_3_RESULT,
    SOC_PPC_FP_QUAL_IRPP_KAPS_PASS1_PAYLOAD,
    
    SOC_PPC_FP_QUAL_OUT_LIF_RANGE,             
    
    SOC_PPC_FP_QUAL_HDR_PPPOE_SESSION_ID,
    
    SOC_PPC_FP_QUAL_L2TP_TUNNEL_SESSION,
    SOC_PPC_FP_QUAL_L2TP_TUNNEL,
    SOC_PPC_FP_QUAL_L2TP_SESSION,
    
    SOC_PPC_FP_QUAL_PACKET_FORMAT_QUALIFIER_NEXT_PROTOCOL_PLUS_ONE,
    
    SOC_PPC_FP_QUAL_IPV6_COMPRESSED_SIP,
    
    SOC_PPC_NOF_FP_QUAL_TYPES
} SOC_PPC_FP_QUAL_TYPE;

typedef enum
{
  
  SOC_PPC_FP_FWD_TYPE_BRIDGED = 0,
  
  SOC_PPC_FP_FWD_TYPE_IPV4_UC = 1,
  
  SOC_PPC_FP_FWD_TYPE_IPV4_MC = 2,
  
  SOC_PPC_FP_FWD_TYPE_IPV6_UC = 3,
  
  SOC_PPC_FP_FWD_TYPE_IPV6_MC = 4,
  
  SOC_PPC_FP_FWD_TYPE_MPLS = 5,
  
  SOC_PPC_FP_FWD_TYPE_TRILL = 6,
  
  SOC_PPC_FP_FWD_TYPE_BRIDGED_AFTER_TERM = 7,
  
  SOC_PPC_FP_FWD_TYPE_CPU_TRAP = 8,
  
  SOC_PPC_FP_FWD_TYPE_TM = 9,
  
  SOC_PPC_NOF_FP_FWD_TYPES = 10

    


}SOC_PPC_FP_FWD_TYPE;

typedef enum
{
  SOC_PPC_FP_PARSED_ETHERTYPE_NO_MATCH = 0,
  SOC_PPC_FP_PARSED_ETHERTYPE_USER_DEFINED_FIRST = 1,
  SOC_PPC_FP_PARSED_ETHERTYPE_USER_DEFINED_LAST = 7,
  SOC_PPC_FP_PARSED_ETHERTYPE_TRILL = 8,
  SOC_PPC_FP_PARSED_ETHERTYPE_MAC_IN_MAC = 9,
  SOC_PPC_FP_PARSED_ETHERTYPE_ARP = 10,
  SOC_PPC_FP_PARSED_ETHERTYPE_CFM = 11,
  SOC_PPC_FP_PARSED_ETHERTYPE_FC_E = 12,
  SOC_PPC_FP_PARSED_ETHERTYPE_IPV4 = 13,
  SOC_PPC_FP_PARSED_ETHERTYPE_IPV6 = 14,
  SOC_PPC_FP_PARSED_ETHERTYPE_MPLS = 15,
  
  SOC_PPC_NOF_FP_PARSED_ETHERTYPES
}SOC_PPC_FP_PARSED_ETHERTYPE;

typedef enum
{
  SOC_PPC_FP_PARSED_ETHERTYPE_EGRESS_NO_MATCH = 0,
  SOC_PPC_FP_PARSED_ETHERTYPE_EGRESS_USER_DEFINED_FIRST = 8,
  SOC_PPC_FP_PARSED_ETHERTYPE_EGRESS_USER_DEFINED_LAST = 15,
  SOC_PPC_FP_PARSED_ETHERTYPE_EGRESS_TRILL = 6,
  SOC_PPC_FP_PARSED_ETHERTYPE_EGRESS_MAC_IN_MAC = 1,
  SOC_PPC_FP_PARSED_ETHERTYPE_EGRESS_ARP = 4,
  SOC_PPC_FP_PARSED_ETHERTYPE_EGRESS_CFM = 5,
  SOC_PPC_FP_PARSED_ETHERTYPE_EGRESS_IPV4 = 2,
  SOC_PPC_FP_PARSED_ETHERTYPE_EGRESS_IPV6 = 3,
  SOC_PPC_FP_PARSED_ETHERTYPE_EGRESS_MPLS = 7,
  
  SOC_PPC_NOF_FP_PARSED_ETHERTYPE_EGRESSS
}SOC_PPC_FP_PARSED_ETHERTYPE_EGRESS;

typedef enum
{
  SOC_PPC_FP_ETH_ENCAPSULATION_ETH_II = 0,
  SOC_PPC_FP_ETH_ENCAPSULATION_LLC = 1,
  SOC_PPC_FP_ETH_ENCAPSULATION_LLC_SNAP = 2,
  SOC_PPC_FP_ETH_ENCAPSULATION_UNDEF = 3,
  
  SOC_PPC_NOF_FP_ETH_ENCAPSULATIONS
}SOC_PPC_FP_ETH_ENCAPSULATION;


typedef enum
{
  SOC_PPC_FP_PARSED_IP_NEXT_PROTOCOL_NO_MATCH = 0,
  SOC_PPC_FP_PARSED_IP_NEXT_PROTOCOL_USER_DEFINED_FIRST = 1,
  SOC_PPC_FP_PARSED_IP_NEXT_PROTOCOL_USER_DEFINED_LAST = 7,
  SOC_PPC_FP_PARSED_IP_NEXT_PROTOCOL_TCP = 8,
  SOC_PPC_FP_PARSED_IP_NEXT_PROTOCOL_UDP = 9,
  SOC_PPC_FP_PARSED_IP_NEXT_PROTOCOL_IGMP = 10,
  SOC_PPC_FP_PARSED_IP_NEXT_PROTOCOL_ICMP= 11,
  SOC_PPC_FP_PARSED_IP_NEXT_PROTOCOL_ICMP_V6 = 12,
  SOC_PPC_FP_PARSED_IP_NEXT_PROTOCOL_IPV4 = 13,
  SOC_PPC_FP_PARSED_IP_NEXT_PROTOCOL_IPV6 = 14,
  SOC_PPC_FP_PARSED_IP_NEXT_PROTOCOL_MPLS = 15,
  
  SOC_PPC_NOF_FP_PARSED_IP_NEXT_PROTOCOLS
}SOC_PPC_FP_PARSED_IP_NEXT_PROTOCOL;

typedef enum
{
  
  SOC_PPC_FP_PROCESSING_TYPE_RAW = 0,
  
  SOC_PPC_FP_PROCESSING_TYPE_ETH = 1,
  
  SOC_PPC_FP_PROCESSING_TYPE_TM = 2,
  
  SOC_PPC_FP_PROCESSING_TYPE_FTMH = 3,
  
  SOC_PPC_NOF_FP_PROCESSING_TYPES = 4
}SOC_PPC_FP_PROCESSING_TYPE;

typedef enum
{
  
  SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_0 = 0,
  
  SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_1 = 1,
  
  SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_2 = 2,
  
  SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_3 = 3,
  
  SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_4 = 4,
  
  SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_5 = 5,
  
  SOC_PPC_FP_BASE_HEADER_TYPE_FWD = 6,
  
  SOC_PPC_FP_BASE_HEADER_TYPE_FWD_POST = 7,
  
  SOC_PPC_NOF_FP_BASE_HEADER_TYPES = 8
}SOC_PPC_FP_BASE_HEADER_TYPE;

typedef enum
{
  
  SOC_PPC_FP_ACTION_TYPE_DEST = 0,
  
  SOC_PPC_FP_ACTION_TYPE_DP = 1,
  
  SOC_PPC_FP_ACTION_TYPE_TC = 2,
  
  SOC_PPC_FP_ACTION_TYPE_TRAP = 3,
  
  SOC_PPC_FP_ACTION_TYPE_SNP = 4,
  
  SOC_PPC_FP_ACTION_TYPE_MIRROR = 5,
  
  SOC_PPC_FP_ACTION_TYPE_MIR_DIS = 6,
  
  SOC_PPC_FP_ACTION_TYPE_EXC_SRC = 7,
  
  SOC_PPC_FP_ACTION_TYPE_IS = 8,
  
  SOC_PPC_FP_ACTION_TYPE_METER = 9,
  
  SOC_PPC_FP_ACTION_TYPE_COUNTER = 10,
  
  SOC_PPC_FP_ACTION_TYPE_STAT = 11,
  
  SOC_PPC_FP_ACTION_TYPE_OUTLIF = 12,
  
  SOC_PPC_FP_ACTION_TYPE_LAG_LB = 13,
  
  SOC_PPC_FP_ACTION_TYPE_ECMP_LB = 14,
  
  SOC_PPC_FP_ACTION_TYPE_STACK_RT_HIST = 15,
  
  SOC_PPC_FP_ACTION_TYPE_VSQ_PTR = 16,
  
   SOC_PPC_FP_ACTION_TYPE_CHANGE_KEY = 17,
  
  SOC_PPC_FP_ACTION_TYPE_NOP = 18,
  
  SOC_PPC_FP_ACTION_TYPE_EGR_TRAP = 19,
  
  SOC_PPC_FP_ACTION_TYPE_EGR_OFP = 20,
  
  SOC_PPC_FP_ACTION_TYPE_EGR_TC_DP = 21,
  
  SOC_PPC_FP_ACTION_TYPE_EGR_OUTLIF = 22,
  
    SOC_PPC_NOF_FP_ACTION_TYPES_PB,

    SOC_PPC_FP_ACTION_TYPE_INVALID = SOC_PPC_NOF_FP_ACTION_TYPES_PB,
	
	
	SOC_PPC_FP_ACTION_TYPE_EEI,
	
	SOC_PPC_FP_ACTION_TYPE_IN_PORT,
	
	SOC_PPC_FP_ACTION_TYPE_USER_PRIORITY,
	
	SOC_PPC_FP_ACTION_TYPE_METER_A = SOC_PPC_FP_ACTION_TYPE_METER,
	
	SOC_PPC_FP_ACTION_TYPE_METER_B = SOC_PPC_FP_ACTION_TYPE_USER_PRIORITY+1,
	
	SOC_PPC_FP_ACTION_TYPE_COUNTER_A = SOC_PPC_FP_ACTION_TYPE_COUNTER,
	
	SOC_PPC_FP_ACTION_TYPE_COUNTER_B = SOC_PPC_FP_ACTION_TYPE_METER_B+1,
	
	SOC_PPC_FP_ACTION_TYPE_DP_METER_COMMAND,
	
	SOC_PPC_FP_ACTION_TYPE_SRC_SYST_PORT,     
	
	SOC_PPC_FP_ACTION_TYPE_FWD_CODE,
	
	SOC_PPC_FP_ACTION_TYPE_FWD_OFFSET,
	
	SOC_PPC_FP_ACTION_TYPE_BYTES_TO_REMOVE,
	
	SOC_PPC_FP_ACTION_TYPE_SYSTEM_HEADER_PROFILE_ID,
	
	SOC_PPC_FP_ACTION_TYPE_VSI,
	
	SOC_PPC_FP_ACTION_TYPE_ORIENTATION_IS_HUB,
	
	SOC_PPC_FP_ACTION_TYPE_VLAN_EDIT_COMMAND,
	
	SOC_PPC_FP_ACTION_TYPE_VLAN_EDIT_VID_1,
	
	SOC_PPC_FP_ACTION_TYPE_VLAN_EDIT_VID_2,
	
	SOC_PPC_FP_ACTION_TYPE_VLAN_EDIT_PCP_DEI,     
	
	SOC_PPC_FP_ACTION_TYPE_IN_RIF,
	
	SOC_PPC_FP_ACTION_TYPE_VRF,
	
	SOC_PPC_FP_ACTION_TYPE_IN_TTL,
	
	SOC_PPC_FP_ACTION_TYPE_IN_DSCP_EXP,
	
	SOC_PPC_FP_ACTION_TYPE_RPF_DESTINATION_VALID,
	
	SOC_PPC_FP_ACTION_TYPE_RPF_DESTINATION,
	
	SOC_PPC_FP_ACTION_TYPE_INGRESS_LEARN_ENABLE,
	
	SOC_PPC_FP_ACTION_TYPE_EGRESS_LEARN_ENABLE,
	
	SOC_PPC_FP_ACTION_TYPE_LEARN_FID,
	
	SOC_PPC_FP_ACTION_TYPE_LEARN_SA_0_TO_15,      
	
	SOC_PPC_FP_ACTION_TYPE_LEARN_SA_16_TO_47,
	
	SOC_PPC_FP_ACTION_TYPE_LEARN_DATA_0_TO_15,
	
	SOC_PPC_FP_ACTION_TYPE_LEARN_DATA_16_TO_39,
	
	SOC_PPC_FP_ACTION_TYPE_LEARN_OR_TRANSPLANT,
	
	SOC_PPC_FP_ACTION_TYPE_IN_LIF,
	
	SOC_PPC_FP_ACTION_TYPE_SEQUENCE_NUMBER_TAG,
	
	SOC_PPC_FP_ACTION_TYPE_IGNORE_CP,
	
	SOC_PPC_FP_ACTION_TYPE_PPH_TYPE,
	
	SOC_PPC_FP_ACTION_TYPE_PACKET_IS_BOOTP_DHCP,
	
	SOC_PPC_FP_ACTION_TYPE_UNKNOWN_ADDR,          
	
	SOC_PPC_FP_ACTION_TYPE_FWD_HDR_ENCAPSULATION,
	
	SOC_PPC_FP_ACTION_TYPE_IEEE_1588,
	
	SOC_PPC_FP_ACTION_TYPE_OAM,
	
	SOC_PPC_FP_ACTION_TYPE_USER_HEADER_1,
	
	SOC_PPC_FP_ACTION_TYPE_USER_HEADER_2,
	
	SOC_PPC_FP_ACTION_TYPE_INVALID_NEXT,
    
    SOC_PPC_FP_ACTION_TYPE_COS_PROFILE,
    
    SOC_PPC_FP_ACTION_TYPE_COUNTER_PROFILE,
    
    SOC_PPC_FP_ACTION_TYPE_ACE_POINTER,

    
    SOC_PPC_FP_ACTION_TYPE_NATIVE_VSI,                
    SOC_PPC_FP_ACTION_TYPE_IN_LIF_PROFILE,

    

    
    SOC_PPC_FP_ACTION_TYPE_COUNTER_AND_METER,
    SOC_PPC_FP_ACTION_TYPE_SNOOP_AND_TRAP,

    
    SOC_PPC_FP_ACTION_TYPE_FLP_START,
    SOC_PPC_FP_ACTION_TYPE_FLP_ACTION_0 = SOC_PPC_FP_ACTION_TYPE_FLP_START,
    SOC_PPC_FP_ACTION_TYPE_FLP_ACTION_1,
    SOC_PPC_FP_ACTION_TYPE_FLP_ACTION_2,
    SOC_PPC_FP_ACTION_TYPE_FLP_ACTION_3,
    SOC_PPC_FP_ACTION_TYPE_FLP_ACTION_4,
    SOC_PPC_FP_ACTION_TYPE_FLP_ACTION_5,
    SOC_PPC_FP_ACTION_TYPE_FLP_ACTION_6,
    SOC_PPC_FP_ACTION_TYPE_FLP_ACTION_7,
    SOC_PPC_FP_ACTION_TYPE_FLP_LEM_1ST_RESULT_0, 
    SOC_PPC_FP_ACTION_TYPE_FLP_LEM_1ST_RESULT_1,
    SOC_PPC_FP_ACTION_TYPE_FLP_LEM_2ND_RESULT_0,
    SOC_PPC_FP_ACTION_TYPE_FLP_LEM_2ND_RESULT_1,
    SOC_PPC_FP_ACTION_TYPE_FLP_END = SOC_PPC_FP_ACTION_TYPE_FLP_LEM_2ND_RESULT_1,

    
    SOC_PPC_FP_ACTION_TYPE_SLB_HASH_VALUE,            

    
    SOC_PPC_FP_ACTION_TYPE_IN_RIF_PROFILE,
    SOC_PPC_FP_ACTION_TYPE_ACE_TYPE,

    
    SOC_PPC_FP_ACTION_TYPE_TRAP_REDUCED,             

    
    SOC_PPC_FP_ACTION_TYPE_DEST_DROP,                



    
    SOC_PPC_FP_ACTION_TYPE_USER_HEADER_3,        
    SOC_PPC_FP_ACTION_TYPE_USER_HEADER_4,            
    SOC_PPC_FP_ACTION_TYPE_USER_HEADER_1_TYPE,
    SOC_PPC_FP_ACTION_TYPE_USER_HEADER_2_TYPE,       
    SOC_PPC_FP_ACTION_TYPE_USER_HEADER_3_TYPE,       
    SOC_PPC_FP_ACTION_TYPE_USER_HEADER_4_TYPE,       
    SOC_PPC_FP_ACTION_TYPE_ITPP_DELTA,               
    SOC_PPC_FP_ACTION_TYPE_STATISTICS_POINTER_0,     
    SOC_PPC_FP_ACTION_TYPE_STATISTICS_POINTER_1,     
    SOC_PPC_FP_ACTION_TYPE_ADMIT_PROFILE,            
    SOC_PPC_FP_ACTION_TYPE_LATENCY_FLOW_ID,          
    SOC_PPC_FP_ACTION_TYPE_PPH_RESERVE_VALUE,        
    SOC_PPC_FP_ACTION_TYPE_PEM_CONTEXT,              
    SOC_PPC_FP_ACTION_TYPE_PEM_GENERAL_DATA_0,       
    SOC_PPC_FP_ACTION_TYPE_PEM_GENERAL_DATA_1,
    SOC_PPC_FP_ACTION_TYPE_STAGGERED_PRESEL_RESULT_0,  
    SOC_PPC_FP_ACTION_TYPE_STAGGERED_PRESEL_RESULT_1,
    SOC_PPC_FP_ACTION_TYPE_STAGGERED_PRESEL_RESULT_2,
    SOC_PPC_FP_ACTION_TYPE_STAGGERED_PRESEL_RESULT_3,
    SOC_PPC_FP_ACTION_TYPE_STAGGERED_PRESEL_RESULT_KAPS,     

    
    SOC_PPC_NOF_FP_ACTION_TYPES,
    SOC_PPC_NOF_FP_ACTION_TYPES_ARAD = SOC_PPC_NOF_FP_ACTION_TYPES

}SOC_PPC_FP_ACTION_TYPE;

typedef enum
{
  FIRST_SOC_PPC_FP_ACE_TYPE_VALUES,
    
  ACE_TYPE_VALUE_NULL = FIRST_SOC_PPC_FP_ACE_TYPE_VALUES,
    
  ACE_TYPE_VALUE_OVERRIDES_CUD,
    
  ACE_TYPE_VALUE_COUNTER_ONLY,
  NUM_SOC_PPC_FP_ACE_TYPE_VALUES
} SOC_PPC_FP_ACE_TYPE_VALUES ;

typedef enum
{
  
  SOC_PPC_FP_DB_TYPE_TCAM = 0,
  
  SOC_PPC_FP_DB_TYPE_DIRECT_TABLE = 1,
  
  SOC_PPC_FP_DB_TYPE_DIRECT_EXTRACTION = 2,
  
  SOC_PPC_FP_DB_TYPE_EGRESS = 3,
  SOC_PPC_NOF_FP_DATABASE_TYPES_PETRA_B = 4,
  
  SOC_PPC_FP_DB_TYPE_FLP = SOC_PPC_NOF_FP_DATABASE_TYPES_PETRA_B,
  
  SOC_PPC_FP_DB_TYPE_SLB,
  SOC_PPC_FP_DB_TYPE_VT,
  SOC_PPC_FP_DB_TYPE_TT,
  
  SOC_PPC_NOF_FP_DATABASE_TYPES
}SOC_PPC_FP_DATABASE_TYPE ;

typedef enum
{
  
  SOC_PPC_FP_DATABASE_STAGE_INGRESS_PMF,
    
  SOC_PPC_FP_DATABASE_STAGE_EGRESS,
    
  SOC_PPC_FP_DATABASE_STAGE_INGRESS_FLP,
    
  SOC_PPC_FP_DATABASE_STAGE_INGRESS_SLB,
    
  SOC_PPC_NOF_FP_DATABASE_STAGES_ARAD,
     
  SOC_PPC_FP_DATABASE_STAGE_INGRESS_VT = SOC_PPC_NOF_FP_DATABASE_STAGES_ARAD,
  
  SOC_PPC_FP_DATABASE_STAGE_INGRESS_TT,
  
  SOC_PPC_NOF_FP_DATABASE_STAGES
}SOC_PPC_FP_DATABASE_STAGE;

typedef enum
{
  
  SOC_PPC_FP_PREDEFINED_ACL_KEY_L2 = 0,
  
  SOC_PPC_FP_PREDEFINED_ACL_KEY_IPV4 = 1,
  
  SOC_PPC_FP_PREDEFINED_ACL_KEY_IPV6 = 2,
  
  SOC_PPC_FP_PREDEFINED_ACL_KEY_EGR_ETH = 3,
  
  SOC_PPC_FP_PREDEFINED_ACL_KEY_EGR_IPV4 = 4,
  
  SOC_PPC_FP_PREDEFINED_ACL_KEY_EGR_TM = 5,
  
  SOC_PPC_FP_PREDEFINED_ACL_KEY_EGR_MPLS = 6,
  
  SOC_PPC_NOF_FP_PREDEFINED_ACL_KEYS = 7
}SOC_PPC_FP_PREDEFINED_ACL_KEY ;

typedef enum
{
  
  SOC_PPC_FP_CONTROL_TYPE_L4OPS_RANGE = 0,
  
  SOC_PPC_FP_CONTROL_TYPE_PACKET_SIZE_RANGE = 1,
  
  SOC_PPC_FP_CONTROL_TYPE_ETHERTYPE = 2,
  
  SOC_PPC_FP_CONTROL_TYPE_NEXT_PROTOCOL_IP = 3,
  
  SOC_PPC_FP_CONTROL_TYPE_EGR_PP_PORT_DATA = 4,
  
  SOC_PPC_FP_CONTROL_TYPE_EGR_L2_ETHERTYPES = 5,
  
  SOC_PPC_FP_CONTROL_TYPE_EGR_IPV4_NEXT_PROTOCOL = 6,
  
  SOC_PPC_FP_CONTROL_TYPE_PP_PORT_PROFILE = 7,
  
  SOC_PPC_FP_CONTROL_TYPE_L2_L3_KEY_IN_LIF_ENABLE = 8,
  
  SOC_PPC_FP_CONTROL_TYPE_L3_IPV6_TCP_CTL_ENABLE = 9,
  
  SOC_PPC_FP_CONTROL_TYPE_HDR_USER_DEF = 10,
  
  SOC_PPC_FP_CONTROL_TYPE_EGRESS_DP = 11,
  
   SOC_PPC_FP_CONTROL_TYPE_INNER_ETH_NOF_VLAN_TAGS = 12,
  
   SOC_PPC_FP_CONTROL_TYPE_KEY_CHANGE_SIZE = 13,
  
  SOC_PPC_FP_CONTROL_TYPE_EGR_TM_PORT_DATA,
  SOC_PPC_FP_CONTROL_TYPE_FLP_PP_PORT_DATA,
    SOC_PPC_FP_CONTROL_TYPE_ING_PP_PORT_DATA,
    SOC_PPC_FP_CONTROL_TYPE_ING_TM_PORT_DATA,
  
  SOC_PPC_FP_CONTROL_TYPE_OUT_LIF_RANGE,
    
    SOC_PPC_FP_CONTROL_TYPE_ACE_POINTER_PP_PORT,
    
    SOC_PPC_FP_CONTROL_TYPE_ACE_POINTER_ONLY,
    
    SOC_PPC_FP_CONTROL_TYPE_ACE_POINTER_OUT_LIF,
  
  SOC_PPC_FP_CONTROL_TYPE_IN_PORT_PROFILE,

  
  SOC_PPC_FP_CONTROL_TYPE_OUT_PORT_PROFILE,

  
  SOC_PPC_FP_CONTROL_TYPE_FLP_PGM_PROFILE,

  SOC_PPC_FP_CONTROL_TYPE_IN_TM_PORT_PROFILE,

#if defined(INCLUDE_KBP)
  
  SOC_PPC_FP_CONTROL_TYPE_KBP_CACHE,

  
  SOC_PPC_FP_CONTROL_TYPE_KBP_COMMIT,
#endif 

  
  SOC_PPC_NOF_FP_CONTROL_TYPES
}SOC_PPC_FP_CONTROL_TYPE;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_SAND_PP_VLAN_TAG_TYPE tag_outer;
  
  SOC_SAND_PP_VLAN_TAG_TYPE tag_inner;
  
  uint8 is_priority;

} SOC_PPC_FP_ETH_TAG_FORMAT;


typedef enum
{
  
  SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_TYPE_FWD_DECISION = 0,
  
  SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_TYPE_MAC_ADDRESS = 1,
  
  SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_TYPE_IPV4_SUBNET = 2,
  
  SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_TYPE_IPV6_SUBNET = 3,
  
  SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_TYPE_ETH_TAG_FORMAT = 4,
  
  SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_TYPE_FTMH = 5,
  
  SOC_PPC_NOF_FP_QUAL_VAL_ENCODE_INFO_TYPES = 6
}SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_TYPE ;


typedef struct
{
  SOC_PPC_FRWRD_DECISION_INFO fwd_dec;
  uint32 dest_nof_bits;
} SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_VAL_FWD_DECISION;

typedef struct
{
  SOC_SAND_PP_MAC_ADDRESS  mac;
  SOC_SAND_PP_MAC_ADDRESS  is_valid;
} SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_VAL_MAC;

typedef struct
{
  SOC_PPC_FP_ETH_TAG_FORMAT tag_format;
} SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_VAL_ETF;


typedef struct
{
  SOC_SAND_PP_IPV4_ADDRESS ip;
  uint32 subnet_length;
} SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_VAL_IPV4;

typedef struct
{
  SOC_SAND_PP_IPV6_ADDRESS ip;
  uint32 subnet_length;
  uint8 is_low;
} SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_VAL_IPV6;

typedef struct
{
  SOC_PPC_FP_FTMH ftmh;
} SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_VAL_FTMH;

typedef union
{
  SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_VAL_FWD_DECISION fd;
  SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_VAL_MAC mac;
  SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_VAL_IPV4 ipv4;
  SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_VAL_IPV6 ipv6;
  SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_VAL_ETF etf;
  SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_VAL_FTMH ftmh;

} SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_VAL;


typedef struct
{
  
  SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_TYPE type;
  
  SOC_PPC_FP_QUAL_VAL_ENCODE_INFO_VAL val;

} SOC_PPC_FP_QUAL_VAL_ENCODE_INFO;


typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FP_QUAL_TYPE type;
  
  SOC_SAND_U64 val;
  
  SOC_SAND_U64 is_valid;

} SOC_PPC_FP_QUAL_VAL;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 first_pass_presel_id; 
  
  uint32 second_pass_presel_id; 
  
  uint32 presel_res_0_key;
    
  uint32 presel_res_1_key;
    
  uint32 presel_res_2_key;
    
  uint32 presel_res_3_key;
   
  uint32 presel_kaps_key;

  uint8 valid;

}SOC_PPC_FP_DATABASE_STAGGERED_INFO;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FP_DATABASE_TYPE db_type;
  
  uint32 supported_pfgs;

  
  uint32 supported_pfgs_arad[SOC_PPC_FP_NOF_PFGS_IN_LONGS_ARAD];
  
  SOC_PPC_FP_QUAL_TYPE qual_types[SOC_PPC_FP_NOF_QUALS_PER_DB_MAX];

  
  SOC_PPC_FP_ACTION_TYPE action_types[SOC_PPC_FP_NOF_ACTIONS_PER_DB_MAX];
  
  uint32                 action_widths[SOC_PPC_FP_NOF_ACTIONS_PER_DB_MAX];
  
  uint32 strength;

  
  uint32 cascaded_coupled_db_id;

  
  uint32 flags;


    
  uint32 min_priority;

  
  uint32 internal_table_id; 

  uint32 handle_by_key_entry_id; 

  uint32 physicalDB; 

  SOC_PPC_FP_DATABASE_STAGGERED_INFO db_staggered_info[SOC_DPP_NOF_INGRESS_PMF_PROGRAM_SELECTION_LINES_ARAD];

  
  uint32 sw_db_id;
  
  uint32 cycle;
  
  uint32 share_id;

  uint32 pgm_bmp; 
} SOC_PPC_FP_DATABASE_INFO;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FP_ACTION_TYPE type;
  
  uint32 val;

} SOC_PPC_FP_ACTION_VAL;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FP_QUAL_VAL qual_vals[SOC_PPC_FP_NOF_QUALS_PER_DB_MAX];
  
  SOC_PPC_FP_ACTION_VAL actions[SOC_PPC_FP_NOF_ACTIONS_PER_DB_MAX];
  
  uint32 priority;

  
  uint8 is_invalid;
  
  uint8 is_for_update;
  
  uint8 is_inserted_top;
  
  uint8 is_keep_location;

  
  uint32 large_direct_lookup_key;

  
  uint32 large_direct_lookup_mask;
} SOC_PPC_FP_ENTRY_INFO;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FP_QUAL_TYPE type;
  
  uint32 fld_lsb;
  
  uint32 cst_val;
  
  uint32 nof_bits;

} SOC_PPC_FP_DIR_EXTR_ACTION_LOC;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FP_ACTION_TYPE type;
  
  SOC_PPC_FP_DIR_EXTR_ACTION_LOC fld_ext[SOC_PPC_FP_DIR_EXTR_MAX_NOF_FIELDS];
  
  uint32 nof_fields;
  
  uint32 base_val;

} SOC_PPC_FP_DIR_EXTR_ACTION_VAL;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FP_QUAL_VAL qual_vals[SOC_PPC_FP_NOF_QUALS_PER_DB_MAX];
  
  SOC_PPC_FP_DIR_EXTR_ACTION_VAL actions[SOC_PPC_FP_NOF_ACTIONS_PER_DB_MAX];
  
  uint32 priority;

} SOC_PPC_FP_DIR_EXTR_ENTRY_INFO;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 db_id;
  
  SOC_PPC_FP_CONTROL_TYPE type;
  
  uint32 val_ndx;
  
  uint8 clear_val;

} SOC_PPC_FP_CONTROL_INDEX;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 val[SOC_PPC_FP_NOF_CONTROL_VALS];

} SOC_PPC_FP_CONTROL_INFO;


typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 tm_port;
  
  uint32 pp_port;
  
  SOC_TMC_PORT_HEADER_TYPE header_type;
  
  int pfc_hw;
  
  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT vlan_tag_structure;

} SOC_PPC_FP_PACKET_DIAG_PARSER;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FP_DIAG_PP_PORT_INFO pp_port_info;
  
  uint32 pfg_id[SOC_PPC_NOF_FP_DATABASE_STAGES];
  
  uint32 pgm_id[SOC_PPC_NOF_FP_DATABASE_STAGES];

} SOC_PPC_FP_PACKET_DIAG_PGM;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FP_QUAL_TYPE type;
  
  uint32 val[2];

} SOC_PPC_FP_PACKET_DIAG_QUAL;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 db_id;
  
  SOC_PPC_FP_DATABASE_STAGE stage;
  
  SOC_PPC_FP_PACKET_DIAG_QUAL qual[SOC_PPC_FP_NOF_QUALS_PER_DB_MAX];

} SOC_PPC_FP_PACKET_DIAG_DB_QUAL;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FP_PACKET_DIAG_DB_QUAL db_id_quals[SOC_PPC_FP_NOF_DBS];

} SOC_PPC_FP_PACKET_DIAG_KEY;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint8 is_match;
  
  uint32 db_id;
  
  SOC_PPC_FP_ACTION_VAL actions[SOC_PPC_FP_NOF_ACTIONS_PER_DB_MAX];

} SOC_PPC_FP_PACKET_DIAG_TCAM_DT;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 db_id;
  
  uint32 entry_id;
  
  SOC_PPC_FP_ACTION_VAL input_actions[SOC_PPC_FP_NOF_ACTIONS_PER_DB_MAX];
  
  SOC_PPC_FP_PACKET_DIAG_QUAL qual_mask;
  
  SOC_PPC_FP_ACTION_VAL action;

} SOC_PPC_FP_PACKET_DIAG_MACRO;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 db_id;
  
  SOC_PPC_FP_ACTION_VAL action;

} SOC_PPC_FP_PACKET_DIAG_MACRO_SIMPLE;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 hit;
  
  SOC_PPC_FP_ACTION_VAL action;

} SOC_PPC_FP_PACKET_DIAG_ACTION_ELK;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FP_PACKET_DIAG_PARSER parser;
  
  SOC_PPC_FP_PACKET_DIAG_PGM pgm;
  
  SOC_PPC_FP_PACKET_DIAG_KEY key;
  
  SOC_PPC_FP_PACKET_DIAG_TCAM_DT tcam[SOC_PPC_FP_NOF_CYCLES][SOC_PPC_FP_TCAM_NOF_BANKS];
  
  SOC_PPC_FP_PACKET_DIAG_TCAM_DT dt[SOC_PPC_FP_NOF_CYCLES];
  
  SOC_PPC_FP_PACKET_DIAG_MACRO macro[SOC_PPC_FP_NOF_CYCLES][SOC_PPC_FP_NOF_MACROS];
  
  SOC_PPC_FP_PACKET_DIAG_MACRO_SIMPLE macro_simple[SOC_PPC_FP_NOF_CYCLES][SOC_PPC_FP_NOF_MACRO_SIMPLES];
  
  SOC_PPC_FP_ACTION_VAL egress_action[SOC_DPP_DEFS_MAX(NOF_EGRESS_PMF_ACTIONS)];
  
  SOC_PPC_FP_PACKET_DIAG_ACTION_ELK elk_action[SOC_PPC_FP_NOF_ELK_ACTIONS];

  
  uint8 valid_stage[SOC_PPC_NOF_FP_DATABASE_STAGES];

} SOC_PPC_FP_PACKET_DIAG_INFO;

typedef enum
{
  
  SOC_PPC_FP_RESOURCE_MODE_USAGE  = 0,

  
  SOC_PPC_FP_RESOURCE_MODE_WITH_AVAILABLE_RESOURCES    = 1,

  
  SOC_PPC_FP_RESOURCE_MODE_DIAG   = 2,

  
  SOC_PPC_FP_RESOURCE_MODE_ALL    = 3
  
} SOC_PPC_FP_RESOURCE_DIAG_MODE;


typedef enum {
  
  SOC_PPC_FP_KEY_BIT_TYPE_LSB = 0,

  
  SOC_PPC_FP_KEY_BIT_TYPE_MSB,

  
  SOC_PPC_FP_NOF_KEY_BIT_TYPES

} SOC_PPC_FP_KEY_BIT_TYPE_LSB_MSB;

typedef struct
{
   
  uint32 lsb;

  
  uint32 msb;

} SOC_PPC_FP_RESOURCE_KEY_LSB_MSB;

typedef struct
{
  
  uint8 valid;

  
  SOC_PPC_FP_QUAL_TYPE qual_type;

  
  uint8 is_second_key;

  
  uint8 is_msb;

  
  SOC_PPC_FP_RESOURCE_KEY_LSB_MSB qual_loc;

  
  SOC_PPC_FP_RESOURCE_KEY_LSB_MSB key_loc;

} SOC_PPC_FP_RESOURCE_KEY;

typedef struct
{
  
  uint8 valid;

  
  uint32 entries_used;

  
  uint32 entries_free;

  
  uint32 action_tbl_bmp;

} SOC_PPC_FP_RESOURCE_DB_BANK;

typedef struct
{
  
  uint8 valid;

  
  SOC_PPC_FP_ACTION_TYPE action_type;

  
  SOC_PPC_FP_RESOURCE_KEY_LSB_MSB action_loc;

} SOC_PPC_FP_RESOURCE_ACTION;

typedef struct
{
  
  uint32 prefix_val;

  
  uint32 prefix_len;

  uint32 access_profile_id[SOC_PPC_FP_KEY_NOF_KEYS_PER_DB_MAX];

  
  uint32 nof_keys_per_db;

  
  SOC_PPC_FP_RESOURCE_DB_BANK bank[SOC_DPP_DEFS_MAX_TCAM_NOF_BANKS];

  
  SOC_PPC_FP_RESOURCE_ACTION action[SOC_PPC_FP_NOF_ACTIONS_PER_DB_MAX];

  
  uint32 nof_actions;

} SOC_PPC_FP_RESOURCE_DB_TCAM;

typedef struct
{
  
  uint8 valid[SOC_PPC_FP_NOF_FEM_PROGS_MAX][SOC_PPC_FP_NOF_CYCLES][SOC_PPC_FP_NOF_MACROS];

  
  uint32 fem_entry_id[SOC_PPC_FP_NOF_FEM_PROGS_MAX][SOC_PPC_FP_NOF_CYCLES][SOC_PPC_FP_NOF_MACROS];

  
  SOC_PPC_FP_DIR_EXTR_ENTRY_INFO de_entry[SOC_PPC_FP_NOF_FEM_PROGS_MAX][SOC_PPC_FP_NOF_CYCLES][SOC_PPC_FP_NOF_MACROS];

  
  uint32 de_entry_id[SOC_PPC_FP_NOF_FEM_PROGS_MAX][SOC_PPC_FP_NOF_CYCLES][SOC_PPC_FP_NOF_MACROS];

} SOC_PPC_FP_RESOURCE_DB_DE;

typedef struct
{
  
  uint8 valid;

  
  SOC_PPC_FP_DATABASE_TYPE type;

  
  SOC_PPC_FP_DATABASE_STAGE stage;

  
  uint32 db_priority;

  
  uint32 key_size;

  
  SOC_PPC_FP_RESOURCE_KEY key_qual[SOC_PPC_FP_NOF_CES_PER_DB_MAX];

  
  uint32 nof_ces;

  
  SOC_PPC_FP_RESOURCE_DB_TCAM db_tcam;

  
  SOC_PPC_FP_RESOURCE_DB_DE db_de;

} SOC_PPC_FP_RESOURCE_DB;

typedef struct
{
  
  uint32 db_id;

  
  uint32 nof_entries;

  
  SOC_TMC_TCAM_DB_PREFIX prefix;

} SOC_PPC_FP_RESOURCE_BANK_DB;

typedef struct
{
 
  uint8 is_used;

  
  SOC_TMC_TCAM_BANK_ENTRY_SIZE entry_size;

  
  SOC_TMC_TCAM_BANK_OWNER owner;

  
  SOC_PPC_FP_RESOURCE_BANK_DB db[SOC_PPC_FP_MAX_NOF_DBS_PER_BANK];

  
  uint32 nof_dbs;

  
  uint32 entries_free;

} SOC_PPC_FP_RESOURCE_BANK;

typedef struct
{
  
  uint8 is_valid;

  
  
  uint32 presel_bmp[SOC_PPC_FP_NOF_PS_LINES_IN_LONGS]; 

  
  uint32 pmf_pgm;

  
  uint32 db_bmp[SOC_PPC_FP_NOF_DBS_IN_LONGS];

} SOC_PPC_FP_RESOURCE_PRESEL;

typedef enum
{
  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_BANK_VALID = 0, 
    
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_BANK_ENTRY_SIZE = 1, 
    
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_BANK_ENTRY_VALID = 2, 
    
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_BANK_NOF_ENTRIES = 3, 
    
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_BANK_DBS = 4, 
    
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_BANK_PREFIX_DB = 5, 
    
  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_TCAM_DB_UNIQUE_PROFILE = 0,
  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_TCAM_DB_PREFIX = 1,
  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_TCAM_DB_ENTRY_SIZE = 2,
  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_TCAM_DB_BANKS = 3,
  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_TCAM_DB_ACTION_BITMAP = 4,
  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_TCAM_DB_PRIORITY = 5,
  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_TCAM_DB_ENTRY_VALID = 6,

  	
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_KEY_COHERENCY = 0,
    
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_KEY_SW_HW = 1,
  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_KEY_CE_USED = 2,

  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_KEY_CE_BITMAP = 3, 

  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_KEY_KEY_BITMAP = 4,

  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_ACTION_FEM = 0,
  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_ACTION_FES = 1,
  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_ACTION_FEM_BASE = 2,
  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_ACTION_PRIORITY = 3,

  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_ACTION_FES_BITMAP = 4,

  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_PRESEL_LINE_VALID = 0,
  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_PRESEL_PGM_VALID = 1,
  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_PRESEL_DB_BMP = 2,

  
  SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE_PRESEL_PROG_BITMAP = 3


} SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE;

typedef enum
{
  
  

  
  SOC_PPC_FP_RESOURCE_DIAG_ERROR_TYPE_TCAM_BANK ,

  
  SOC_PPC_FP_RESOURCE_DIAG_ERROR_TYPE_TCAM_DB, 

  
  SOC_PPC_FP_RESOURCE_DIAG_ERROR_TYPE_KEY, 

  
  SOC_PPC_FP_RESOURCE_DIAG_ERROR_TYPE_ACTION, 

  
  SOC_PPC_FP_RESOURCE_DIAG_ERROR_TYPE_PRESEL,

  
  SOC_PPC_FP_RESOURCE_DIAG_ERROR_NOF_TYPE_LAST

} SOC_PPC_FP_RESOURCE_DIAG_ERROR_TYPE;

typedef struct 
{
  
  uint8 is_error;

   
  uint32 value[SOC_PPC_FP_RESOURCE_DIAG_NOF_ERROR_VALUES];

} SOC_PPC_FP_RESOURCE_DIAG_ERROR_PARAM;

typedef struct 
{
   
	SOC_PPC_FP_RESOURCE_DIAG_ERROR_PARAM params[SOC_PPC_FP_RESOURCE_DIAG_NOF_PARAMS];
	
} SOC_PPC_FP_RESOURCE_DIAG;

typedef struct
{
  
  uint8 is_used;

 
  uint8 lsb;
 
  uint8 msb;

  
  uint8 is_msb;

  
  uint8 is_second_key;

  uint8 qual_lsb;
  
  SOC_PPC_FP_QUAL_TYPE                qual_type;
  
  uint32 key_id;
} SOC_PPC_FP_RESOURCE_PMF_CE;

typedef struct{
  
  uint8 is_used;
  
  uint32 lsb_16b;
  
  uint32 lsb_32b;
  
  uint32 msb_16b;
  
  uint32 msb_32b;
}SOC_PPC_FP_RESOURCE_FREE_INSTRUCTIONS;

typedef struct{
  
  uint8 is_used;
  
  uint8 is_lsb_db;
  
  uint8 is_msb_db;
}SOC_PPC_FP_RESOURCE_KEY_DB_DATA;

typedef struct{
  
  uint8 is_used;
  
  SOC_PPC_FP_ACTION_TYPE action_type;
  
  uint8 is_key_src;
  
  uint8 use_kaps;
  
  uint32 key_tcam_id;
  
  uint32 key_tcam_lsb;
  
  uint32 action_size;
  
  uint32 valid_bits;
  
  uint8 is_action_always_valid;
}SOC_PPC_FP_RESOURCE_PMF_FES;

typedef struct{
  
  uint8 is_used;
  
  uint32 fes_free;
}SOC_PPC_FP_RESOURCE_PMF_FES_FREE;

typedef struct
{
  
  uint8 is_used;
  
  uint8 is_for_entry;
  
  uint32 db_strength;
  
  uint32 entry_strength;
  
  uint32 entry_id;
  
  SOC_PPC_FP_ACTION_TYPE action_type;
} SOC_PPC_FP_RESOURCE_PMF_FEM_ENTRY;

typedef struct{
  
  uint8 is_used;
  
  SOC_PPC_FP_RESOURCE_PMF_CE pgm_ce[SOC_PPC_NOF_FP_DATABASE_STAGES][SOC_PPC_FP_NOF_PROGS_MAX][SOC_PPC_FP_NOF_DBS][SOC_PPC_FP_NOF_CYCLES][SOC_PPC_FP_NOF_CES];
  
  SOC_PPC_FP_RESOURCE_FREE_INSTRUCTIONS free_instructions[SOC_PPC_NOF_FP_DATABASE_STAGES][SOC_PPC_FP_NOF_PROGS_MAX][SOC_PPC_FP_NOF_CYCLES];
  
  SOC_PPC_FP_RESOURCE_KEY_DB_DATA key[SOC_PPC_NOF_FP_DATABASE_STAGES][SOC_PPC_FP_NOF_PROGS_MAX][SOC_PPC_FP_NOF_CYCLES][SOC_PPC_FP_NOF_KEYS];
  
  SOC_PPC_FP_RESOURCE_PMF_FES fes[SOC_PPC_FP_NOF_PROGS_MAX][SOC_PPC_FP_NOF_CYCLES][SOC_PPC_FP_NOF_DBS][SOC_PPC_FP_NOF_CES];
  
  SOC_PPC_FP_RESOURCE_PMF_FES_FREE fes_free[SOC_PPC_FP_NOF_PROGS_MAX][SOC_PPC_FP_NOF_CYCLES];
  
  SOC_PPC_FP_RESOURCE_PMF_FEM_ENTRY fem[SOC_PPC_FP_NOF_FEM_PROGS_MAX][SOC_PPC_FP_NOF_CYCLES][SOC_PPC_FP_NOF_DBS][SOC_PPC_FP_NOF_MACROS];
  
  uint32 pfgs[SOC_PPC_NOF_FP_DATABASE_STAGES][SOC_PPC_FP_NOF_PS_LINES][SOC_PPC_FP_NOF_PROGS_MAX][SOC_PPC_BIT_TO_U32(SOC_PPC_FP_NOF_PFGS_ARAD)];
  
  uint32 quals[SOC_PPC_NOF_FP_DATABASE_STAGES][SOC_PPC_FP_NOF_PS_LINES][SOC_PPC_FP_NOF_PROGS_MAX][SOC_PPC_BIT_TO_U32(SOC_PPC_NOF_FP_QUAL_TYPES)];
  
  uint32 pfgs_db_pmb[SOC_PPC_NOF_FP_DATABASE_STAGES][SOC_PPC_FP_NOF_PFGS_ARAD][SOC_PPC_BIT_TO_U32(SOC_PPC_FP_NOF_DBS)];
  
  SOC_PPC_FP_QUAL_VAL pfgs_qualifiers[SOC_PPC_NOF_FP_DATABASE_STAGES][SOC_PPC_FP_NOF_PFGS_ARAD][SOC_PPC_FP_NOF_QUALS_PER_PFG_MAX];
}SOC_PPC_FP_RESOURCE_AVAILABLE;

typedef struct
{
  
  SOC_PPC_FP_RESOURCE_DB db[SOC_PPC_FP_NOF_DBS];

  
  SOC_PPC_FP_RESOURCE_BANK bank[SOC_DPP_DEFS_MAX_TCAM_NOF_BANKS];

  
  SOC_PPC_FP_RESOURCE_PRESEL presel[SOC_PPC_NOF_FP_DATABASE_STAGES][SOC_PPC_FP_NOF_PS_LINES];
  
  
  SOC_PPC_FP_RESOURCE_DIAG diag[SOC_PPC_FP_RESOURCE_DIAG_ERROR_NOF_TYPE_LAST];

  
  SOC_PPC_FP_RESOURCE_AVAILABLE available;
} SOC_PPC_FP_RESOURCE_DIAG_INFO;



typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 hdr_format_bmp;
  
  uint32 vlan_tag_structure_bmp;
  
  SOC_SAND_U64 pp_ports_bmp;

  
  
  uint8 is_array_qualifier;

  
  SOC_PPC_FP_QUAL_VAL qual_vals[SOC_PPC_FP_NOF_QUALS_PER_PFG_MAX];

  
  SOC_PPC_FP_DATABASE_STAGE stage;

    
  uint8 is_for_hw_commit;

    
  uint8 is_staggered;

  uint8 program_id;


  uint8 is_psl_with_program;

} SOC_PPC_PMF_PFG_INFO;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 local_port_src; 
  
  uint8 size_bytes;
  
  uint32 buffer[SOC_PPC_FP_IRE_TRAFFIC_BUFFER_SIZE];
}SOC_PPC_FP_PACKET;

typedef struct {
    int        core_id;
    SHR_BITDCL line[_SHR_BITDCLSIZE(SOC_PPC_FP_MAX_SELECT_LINE)];
} SOC_PPC_FP_SELECT_LINE_INFO;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint8 pgm_id;

  
  uint32 key;

  
  SOC_PPC_FP_ACTION_VAL action;
} SOC_PPC_FP_LAST_FEM_INOUT_INFO;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 shift;

  
  SOC_PPC_FP_ACTION_TYPE in_action_type;

  
  uint8 type;

  
  uint32 polarity;

  
  uint32 key;

  
  SOC_PPC_FP_ACTION_VAL action;
} SOC_PPC_FP_LAST_FES_INOUT_INFO;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 sub_header;

  
  int32 offset;
} SOC_PPC_FP_CE_PACKET_HEADER_INFO;


typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
 
  uint8                      is_header;

  
  uint8                      qual_found;

  
  uint8                      is_32b_ce;

  
  uint32                     keys_valid;

  
  uint32                     nof_bits;

  
  uint32                     qual_lsb;

  
  SOC_PPC_FP_QUAL_TYPE       qual_type;

  
  uint32 qual_nof_bits;

  
  uint32 ce_offset;

  
  uint32 base;
} SOC_PPC_FP_CE_INFO;









void
  SOC_PPC_PMF_PFG_INFO_clear(
    SOC_SAND_OUT SOC_PPC_PMF_PFG_INFO *info
  );

void
  SOC_PPC_FP_PACKET_clear(
    SOC_SAND_OUT SOC_PPC_FP_PACKET *info
  );

void
  SOC_PPC_FP_QUAL_VAL_clear(
    SOC_SAND_OUT SOC_PPC_FP_QUAL_VAL *info
  );

void
  SOC_PPC_FP_ETH_TAG_FORMAT_clear(
    SOC_SAND_OUT SOC_PPC_FP_ETH_TAG_FORMAT *info
  );

void
  SOC_PPC_FP_DATABASE_INFO_clear(
    SOC_SAND_OUT SOC_PPC_FP_DATABASE_INFO *info
  );

void
  SOC_PPC_FP_ACTION_VAL_clear(
    SOC_SAND_OUT SOC_PPC_FP_ACTION_VAL *info
  );

void
  SOC_PPC_FP_ENTRY_INFO_clear(
    SOC_SAND_OUT SOC_PPC_FP_ENTRY_INFO *info
  );

void
  SOC_PPC_FP_DIR_EXTR_ACTION_LOC_clear(
    SOC_SAND_OUT SOC_PPC_FP_DIR_EXTR_ACTION_LOC *info
  );

void
  SOC_PPC_FP_DIR_EXTR_ACTION_VAL_clear(
    SOC_SAND_OUT SOC_PPC_FP_DIR_EXTR_ACTION_VAL *info
  );

void
  SOC_PPC_FP_DIR_EXTR_ENTRY_INFO_clear(
    SOC_SAND_OUT SOC_PPC_FP_DIR_EXTR_ENTRY_INFO *info
  );

void
  SOC_PPC_FP_CONTROL_INDEX_clear(
    SOC_SAND_OUT SOC_PPC_FP_CONTROL_INDEX *info
  );

void
  SOC_PPC_FP_CONTROL_INFO_clear(
    SOC_SAND_OUT SOC_PPC_FP_CONTROL_INFO *info
  );

void
  SOC_PPC_FP_DIAG_PP_PORT_INFO_clear(
    SOC_SAND_OUT SOC_PPC_FP_DIAG_PP_PORT_INFO *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_PARSER_clear(
    SOC_SAND_OUT SOC_PPC_FP_PACKET_DIAG_PARSER *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_PGM_clear(
    SOC_SAND_OUT SOC_PPC_FP_PACKET_DIAG_PGM *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_QUAL_clear(
    SOC_SAND_OUT SOC_PPC_FP_PACKET_DIAG_QUAL *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_DB_QUAL_clear(
    SOC_SAND_OUT SOC_PPC_FP_PACKET_DIAG_DB_QUAL *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_KEY_clear(
    SOC_SAND_OUT SOC_PPC_FP_PACKET_DIAG_KEY *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_TCAM_DT_clear(
    SOC_SAND_OUT SOC_PPC_FP_PACKET_DIAG_TCAM_DT *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_MACRO_clear(
    SOC_SAND_OUT SOC_PPC_FP_PACKET_DIAG_MACRO *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_MACRO_SIMPLE_clear(
    SOC_SAND_OUT SOC_PPC_FP_PACKET_DIAG_MACRO_SIMPLE *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_ACTION_ELK_clear(
    SOC_SAND_OUT SOC_PPC_FP_PACKET_DIAG_ACTION_ELK *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_INFO_clear(
    SOC_SAND_OUT SOC_PPC_FP_PACKET_DIAG_INFO *info
  );

void
  SOC_PPC_FP_RESOURCE_KEY_LSB_MSB_clear(
	  SOC_SAND_OUT SOC_PPC_FP_RESOURCE_KEY_LSB_MSB *info
	);
void
  SOC_PPC_FP_RESOURCE_KEY_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_KEY *info
  );
void
  SOC_PPC_FP_RESOURCE_DB_BANK_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_DB_BANK *info
  );
void
  SOC_PPC_FP_RESOURCE_ACTION_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_ACTION *info
  );
void
  SOC_PPC_FP_RESOURCE_DB_TCAM_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_DB_TCAM *info
  );
void
  SOC_PPC_FP_RESOURCE_DB_DE_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_DB_DE *info
  );
void
  SOC_PPC_FP_RESOURCE_DB_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_DB *info
  );
void
  SOC_PPC_FP_RESOURCE_BANK_DB_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_BANK_DB *info
  );
void
  SOC_PPC_FP_RESOURCE_BANK_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_BANK *info
  );
void
  SOC_PPC_FP_RESOURCE_PRESEL_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_PRESEL *info
  );
void
  SOC_PPC_FP_RESOURCE_DIAG_ERROR_PARAM_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_DIAG_ERROR_PARAM *info
  );
void
  SOC_PPC_FP_RESOURCE_DIAG_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_DIAG *info
  );
void
  SOC_PPC_FP_RESOURCE_PMF_CE_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_PMF_CE *info
  );
void
  SOC_PPC_FP_RESOURCE_FREE_INSTRUCTIONS_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_FREE_INSTRUCTIONS *info
  );
void
  SOC_PPC_FP_RESOURCE_KEY_DB_DATA_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_KEY_DB_DATA *info
  );
void
  SOC_PPC_FP_RESOURCE_PMF_FES_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_PMF_FES *info
  );
void
  SOC_PPC_FP_RESOURCE_PMF_FES_FREE_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_PMF_FES_FREE *info
  );
void
  SOC_PPC_FP_RESOURCE_PMF_FEM_ENTRY_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_PMF_FEM_ENTRY *info
  );
void
  SOC_PPC_FP_RESOURCE_AVAILABLE_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_AVAILABLE *info
  );  
void
  SOC_PPC_FP_RESOURCE_DIAG_INFO_clear(
    SOC_SAND_OUT SOC_PPC_FP_RESOURCE_DIAG_INFO *info
  );
void
  SOC_PPC_FP_LAST_FEM_INFO_clear(
    SOC_SAND_OUT SOC_PPC_FP_LAST_FEM_INOUT_INFO  *info);
void
  SOC_PPC_FP_LAST_FES_INFO_clear(
    SOC_SAND_OUT SOC_PPC_FP_LAST_FES_INOUT_INFO  *info);
void
  SOC_PPC_FP_CE_INFO_CLEAR(
    SOC_SAND_OUT SOC_PPC_FP_CE_INFO *info);

#if SOC_PPC_DEBUG_IS_LVL1

const char*
  SOC_PPC_FP_QUAL_TYPE_to_string(
    SOC_SAND_IN  SOC_PPC_FP_QUAL_TYPE enum_val
  );

const char*
  SOC_PPC_FP_FWD_TYPE_to_string(
    SOC_SAND_IN  SOC_PPC_FP_FWD_TYPE enum_val
  );

const char*
  SOC_PPC_FP_PROCESSING_TYPE_to_string(
    SOC_SAND_IN  SOC_PPC_FP_PROCESSING_TYPE enum_val
  );

const char*
  SOC_PPC_FP_BASE_HEADER_TYPE_to_string(
    SOC_SAND_IN  SOC_PPC_FP_BASE_HEADER_TYPE enum_val
  );

const char*
  SOC_PPC_FP_ACTION_TYPE_to_string(
    SOC_SAND_IN  SOC_PPC_FP_ACTION_TYPE enum_val
  );

const char*
  SOC_PPC_FP_DATABASE_TYPE_to_string(
    SOC_SAND_IN  SOC_PPC_FP_DATABASE_TYPE enum_val
  );

const char*
  SOC_PPC_FP_DATABASE_STAGE_to_string(
    SOC_SAND_IN  SOC_PPC_FP_DATABASE_STAGE enum_val
  );

const char*
  SOC_PPC_FP_PREDEFINED_ACL_KEY_to_string(
    SOC_SAND_IN  SOC_PPC_FP_PREDEFINED_ACL_KEY  enum_val
  );

const char*
  SOC_PPC_FP_CONTROL_TYPE_to_string(
    SOC_SAND_IN  SOC_PPC_FP_CONTROL_TYPE enum_val
  );

void
  SOC_PPC_FP_PACKET_print(
    SOC_SAND_IN  SOC_PPC_FP_PACKET *info
  );

void
  SOC_PPC_PMF_PFG_INFO_print(
    SOC_SAND_IN  SOC_PPC_PMF_PFG_INFO *info
  );

void
  SOC_PPC_FP_QUAL_VAL_print(
    SOC_SAND_IN  SOC_PPC_FP_QUAL_VAL *info
  );

void
  SOC_PPC_FP_DATABASE_INFO_print(
    SOC_SAND_IN  SOC_PPC_FP_DATABASE_INFO *info
  );

void
  SOC_PPC_FP_ACTION_VAL_print(
    SOC_SAND_IN  SOC_PPC_FP_ACTION_VAL *info
  );

void
  SOC_PPC_FP_ENTRY_INFO_print(
    SOC_SAND_IN  SOC_PPC_FP_ENTRY_INFO *info
  );

void
  SOC_PPC_FP_DIR_EXTR_ACTION_LOC_print(
    SOC_SAND_IN  SOC_PPC_FP_DIR_EXTR_ACTION_LOC *info
  );

void
  SOC_PPC_FP_DIR_EXTR_ACTION_VAL_print(
    SOC_SAND_IN  SOC_PPC_FP_DIR_EXTR_ACTION_VAL *info
  );

void
  SOC_PPC_FP_DIR_EXTR_ENTRY_INFO_print(
    SOC_SAND_IN  SOC_PPC_FP_DIR_EXTR_ENTRY_INFO *info
  );

void
  SOC_PPC_FP_CONTROL_INDEX_print(
    SOC_SAND_IN  SOC_PPC_FP_CONTROL_INDEX *info
  );

void
  SOC_PPC_FP_CONTROL_INFO_print(
    SOC_SAND_IN  SOC_PPC_FP_CONTROL_INFO *info
  );

void
  SOC_PPC_FP_DIAG_PP_PORT_INFO_print(
    SOC_SAND_IN  SOC_PPC_FP_DIAG_PP_PORT_INFO *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_PARSER_print(
    int unit,
    SOC_SAND_IN  SOC_PPC_FP_PACKET_DIAG_PARSER *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_PGM_print(
    SOC_SAND_IN  SOC_PPC_FP_PACKET_DIAG_PGM *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_QUAL_print(
    SOC_SAND_IN  SOC_PPC_FP_PACKET_DIAG_QUAL *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_DB_QUAL_print(
    SOC_SAND_IN  uint32                  ind,
    SOC_SAND_IN  SOC_PPC_FP_PACKET_DIAG_DB_QUAL *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_KEY_print(
    SOC_SAND_IN  SOC_PPC_FP_PACKET_DIAG_KEY *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_TCAM_DT_print(
    SOC_SAND_IN  SOC_PPC_FP_PACKET_DIAG_TCAM_DT *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_MACRO_print(
    SOC_SAND_IN  SOC_PPC_FP_PACKET_DIAG_MACRO *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_MACRO_SIMPLE_print(
    SOC_SAND_IN  SOC_PPC_FP_PACKET_DIAG_MACRO_SIMPLE *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_ACTION_ELK_print(
    SOC_SAND_IN  SOC_PPC_FP_PACKET_DIAG_ACTION_ELK *info
  );

void
  SOC_PPC_FP_PACKET_DIAG_INFO_print(
    SOC_SAND_IN int                     unit,
    SOC_SAND_IN  SOC_PPC_FP_PACKET_DIAG_INFO *info
  );

void
  SOC_PPC_FP_RESOURCE_KEY_LSB_MSB_print(
	SOC_SAND_IN SOC_PPC_FP_RESOURCE_KEY_LSB_MSB *info
  );
void
  SOC_PPC_FP_RESOURCE_KEY_print(
    SOC_SAND_IN int                     unit,
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_KEY *info
  );
void
  SOC_PPC_FP_RESOURCE_DB_BANK_print(
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_DB_BANK *info
  );
void
  SOC_PPC_FP_RESOURCE_ACTION_print(
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_ACTION *info
  );
void
  SOC_PPC_FP_RESOURCE_DB_TCAM_print(
    SOC_SAND_IN int                         unit,
    SOC_PPC_FP_DATABASE_TYPE                type,
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_DB_TCAM *info
  );
void
  SOC_PPC_FP_RESOURCE_QUAL_VAL_print(
    SOC_SAND_IN SOC_PPC_FP_QUAL_VAL *info
  );
void
  SOC_PPC_FP_RESOURCE_ACTION_VAL_print(
    SOC_SAND_IN SOC_PPC_FP_DIR_EXTR_ACTION_VAL *info
  );
void
  SOC_PPC_FP_RESOURCE_DIR_EXTR_ENTRY_INFO_print(
    SOC_SAND_IN SOC_PPC_FP_DIR_EXTR_ENTRY_INFO *info
  );
void
  SOC_PPC_FP_RESOURCE_DB_DE_print(
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_DB_DE *info
  );
void
  SOC_PPC_FP_RESOURCE_DB_print(
    SOC_SAND_IN int                    unit,
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_DB *info
  );
void
  SOC_PPC_FP_DB_PREFIX_print(
    SOC_SAND_IN SOC_TMC_TCAM_DB_PREFIX *info
  );
void
  SOC_PPC_FP_RESOURCE_BANK_DB_print(
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_BANK_DB *info
  );
void
  SOC_PPC_FP_RESOURCE_BANK_ALL_DBS_print(
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_BANK *info
  );
void
  SOC_PPC_FP_RESOURCE_BANK_print(
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_BANK *info
  );
void
  SOC_PPC_FP_RESOURCE_PRESEL_print(
    SOC_SAND_IN int                        unit,
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_PRESEL *info
  );
void
  SOC_PPC_FP_RESOURCE_DIAG_ERROR_PARAM_print(
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_DIAG_ERROR_TYPE err_type,
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_DIAG_PARAM_TYPE param_type,
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_DIAG_ERROR_PARAM *info
  );
void
  SOC_PPC_FP_RESOURCE_PMF_CE_print(
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_PMF_CE *info
  );
void
  SOC_PPC_FP_RESOURCE_FREE_INSTRUCTIONS_print(
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_FREE_INSTRUCTIONS *info
  );
void
  SOC_PPC_FP_RESOURCE_KEY_DB_DATA_print(
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_KEY_DB_DATA *info
  );
void
  SOC_PPC_FP_RESOURCE_PMF_FES_print(
    SOC_SAND_IN int unit,
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_PMF_FES *info
  );
void
  SOC_PPC_FP_RESOURCE_PMF_FES_FREE_print(
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_PMF_FES_FREE *info
  );
void
  SOC_PPC_FP_RESOURCE_PMF_FEM_ENTRY_print(
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_PMF_FEM_ENTRY *info
  );
void
  SOC_PPC_FP_RESOURCE_AVAILABLE_print(
    SOC_SAND_IN int unit,
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_AVAILABLE *info
  );  
void
  SOC_PPC_FP_RESOURCE_DIAG_INFO_print(
    SOC_SAND_IN  int                           unit,
    SOC_SAND_IN SOC_PPC_FP_RESOURCE_DIAG_INFO *info
  );

#endif 



#include <soc/dpp/SAND/Utils/sand_footer.h>


#endif

