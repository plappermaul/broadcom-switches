/* 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
*/


#ifndef __SOC_PPC_API_FRWRD_MACT_INCLUDED__

#define __SOC_PPC_API_FRWRD_MACT_INCLUDED__




#include <soc/dpp/SAND/Utils/sand_header.h>

#include <soc/dpp/SAND/Management/sand_general_macros.h>
#include <soc/dpp/SAND/Management/sand_error_code.h>

#include <soc/dpp/PPC/ppc_api_general.h>






#define  SOC_PPC_FRWRD_MACT_ITER_END (0xFFFFFFFF)









typedef enum
{
  SOC_PPC_FRWRD_MACT_TABLE_SW_ONLY,
  SOC_PPC_FRWRD_MACT_TABLE_SW_HW,
 
  
  SOC_PPC_FRWRD_MACT_TABLE_TYPE_LAST
} SOC_PPC_FRWRD_MACT_TABLE_TYPE;

typedef enum
{
  
  SOC_PPC_FRWRD_MACT_PREFIX_APP_ID_OMAC = 0,
  
  SOC_PPC_FRWRD_MACT_PREFIX_APP_ID_OMAC_2_VMAC,
  
  SOC_PPC_FRWRD_MACT_PREFIX_APP_ID_VMAC,
  
  SOC_PPC_FRWRD_MACT_PREFIX_APP_ID_VMAC_2_OMAC,
  
  SOC_PPC_NOF_FRWRD_MACT_PREFIX_APP_IDS
}SOC_PPC_FRWRD_MACT_APP_ID;


typedef enum
{
  
  SOC_PPC_FRWRD_MACT_KEY_TYPE_MAC_ADDR = 0,
  
  SOC_PPC_FRWRD_MACT_KEY_TYPE_IPV4_MC = 1,

  
  SOC_PPC_FRWRD_MACT_KEY_TYPE_IPV4_MC_SSM = 2,
  SOC_PPC_FRWRD_MACT_KEY_TYPE_IPV6_MC_SSM_EUI = 3,

#ifdef BCM_88660_A0
  
  SOC_PPC_FRWRD_MACT_KEY_TYPE_SLB = 4,

  
  SOC_PPC_NOF_FRWRD_MACT_KEY_TYPES = 5
#else 
  SOC_PPC_NOF_FRWRD_MACT_KEY_TYPES = 4
#endif 


}SOC_PPC_FRWRD_MACT_KEY_TYPE;

typedef enum
{
  
  SOC_PPC_FRWRD_MACT_ADD_TYPE_INSERT = 0,
  
  SOC_PPC_FRWRD_MACT_ADD_TYPE_LEARN = 1,
  
  SOC_PPC_FRWRD_MACT_ADD_TYPE_REFRESH = 2,
  
  SOC_PPC_FRWRD_MACT_ADD_TYPE_TRANSPLANT = 3,
  
  SOC_PPC_NOF_FRWRD_MACT_ADD_TYPES = 4
}SOC_PPC_FRWRD_MACT_ADD_TYPE;

typedef enum
{
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_NONE = 0,
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_REMOVE = 1,
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_UPDATE = 2,
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_COUNT = 3,
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_RETRIEVE = 4,
  
  SOC_PPC_NOF_FRWRD_MACT_TRAVERSE_ACTION_TYPES = 5
}SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE;

typedef enum
{
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_NONE = 0,
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_DEST_TYPE = (1 << 1),
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_DEST_VAL = (1 << 2),
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_ADDITIONAL_INFO = (1 << 3),
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_IS_DYNAMIC = (1 << 4),
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_DROP_SA = (1 << 5),
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_ALL = (int)0xFFFFFFFF,
  
  SOC_PPC_NOF_FRWRD_MACT_TRAVERSE_MATCH_SELECTS_PB = 7,
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_ACCESSED = (1 << 6),
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_GROUP = (1 << 7),
#ifdef BCM_88660_A0
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_COMPARE_SLB = (1 << 8),
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_REPLACE_SLB = (1 << 9),
#endif 

  
 SOC_PPC_NOF_FRWRD_MACT_TRAVERSE_MATCH_SELECTS_ARAD

}SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT;

typedef enum
{
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_STATE_NORMAL = 0,
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_STATE_AGGREGATE = 1,
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_STATE_RUN = 2,
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_STATE_RESET = 3,
  
 SOC_PPC_NOF_FRWRD_MACT_TRAVERSE_STATES

}SOC_PPC_FRWRD_MACT_TRAVERSE_STATE;


typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_SAND_PP_MAC_ADDRESS mac;
  
  SOC_PPC_FID fid;

} SOC_PPC_FRWRD_MACT_ENTRY_KEY_MAC_ADDR;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 dip;
  
  uint32 sip;
  
  SOC_PPC_FID fid;

} SOC_PPC_FRWRD_MACT_ENTRY_KEY_IPV4_MC;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 is_destination_fec;
  
  uint32 destination;
  
  uint32 flow_label[2];
} SOC_PPC_FRWRD_MACT_ENTRY_KEY_SLB;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_MAC_ADDR mac;
  
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_IPV4_MC ipv4_mc;
#ifdef BCM_88660_A0
  
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_SLB slb;
#endif 

} SOC_PPC_FRWRD_MACT_ENTRY_KEY_VAL;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FRWRD_MACT_KEY_TYPE key_type;
  
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_VAL key_val;

} SOC_PPC_FRWRD_MACT_ENTRY_KEY;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint8 is_dynamic;
  
  uint8 age_status;

} SOC_PPC_FRWRD_MACT_ENTRY_AGING_INFO;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FRWRD_DECISION_INFO forward_decision;
  
  uint8 drop_when_sa_is_known;

} SOC_PPC_FRWRD_MACT_ENTRY_FRWRD_INFO;

typedef struct {
  SOC_SAND_MAGIC_NUM_VAR
  
   
  uint8 match_lag_entries;
  uint8 match_fec_entries;

  
  uint32 lag_group_and_member;

  
  uint32 fec;

} SOC_PPC_FRWRD_MACT_ENTRY_VALUE_SLB;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FRWRD_MACT_ENTRY_FRWRD_INFO frwrd_info;
  
  SOC_PPC_FRWRD_MACT_ENTRY_AGING_INFO aging_info;
  
  uint8 accessed;
  
  uint32 group;
#ifdef BCM_88660_A0
  SOC_PPC_FRWRD_MACT_ENTRY_VALUE_SLB slb_info;
#endif 
} SOC_PPC_FRWRD_MACT_ENTRY_VALUE;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 sec;
  
  uint32 mili_sec;

} SOC_PPC_FRWRD_MACT_TIME;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FID fid;
  
  SOC_PPC_FID fid_mask;
  
  SOC_SAND_PP_MAC_ADDRESS mac;
  
  SOC_SAND_PP_MAC_ADDRESS mac_mask;

} SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_MAC;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 dip;
  
  uint32 dip_mask;
  
  SOC_PPC_FID fid;
  
  SOC_PPC_FID fid_mask;

} SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_IPV4_MC;

typedef struct {
  SOC_SAND_MAGIC_NUM_VAR

  
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_SLB value;
  
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_SLB mask;
} SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_SLB;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_MAC mac;
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_IPV4_MC ipv4_mc;
#ifdef BCM_88660_A0
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_SLB slb;
#endif 
} SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FRWRD_MACT_ENTRY_VALUE val;
  
  SOC_PPC_FRWRD_MACT_ENTRY_VALUE val_mask;
  
  uint32 compare_mask;

} SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_VALUE_RULE;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FRWRD_MACT_KEY_TYPE key_type;
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE key_rule;
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_VALUE_RULE value_rule;

} SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_RULE;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE type;
  
  SOC_PPC_FRWRD_MACT_ENTRY_VALUE updated_val;
  
  SOC_PPC_FRWRD_MACT_ENTRY_VALUE updated_val_mask;
  
  uint32 update_mask;

} SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_RULE rule;
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION action;
  
  SOC_PPC_FRWRD_MACT_TIME time_to_finish;
  
  uint32 nof_matched_entries;

} SOC_PPC_FRWRD_MACT_TRAVERSE_STATUS_INFO;



typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_PPC_FRWRD_MACT_TRAVERSE_STATE state;
  
  uint32 nof_available_rules;
} SOC_PPC_FRWRD_MACT_TRAVERSE_MODE_INFO;










void
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_MAC_ADDR_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_ENTRY_KEY_MAC_ADDR *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_IPV4_MC_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_ENTRY_KEY_IPV4_MC *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_VAL_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_ENTRY_KEY_VAL *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_ENTRY_KEY *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_AGING_INFO_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_ENTRY_AGING_INFO *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_FRWRD_INFO_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_ENTRY_FRWRD_INFO *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_VALUE_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_ENTRY_VALUE *info
  );

void
  SOC_PPC_FRWRD_MACT_TIME_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_TIME *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_MAC_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_MAC *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_IPV4_MC_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_IPV4_MC *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_VALUE_RULE_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_VALUE_RULE *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_RULE_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_RULE *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_STATUS_INFO_clear(
    SOC_SAND_OUT SOC_PPC_FRWRD_MACT_TRAVERSE_STATUS_INFO *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_SLB_clear(
    SOC_SAND_OUT  SOC_PPC_FRWRD_MACT_ENTRY_KEY_SLB *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_VALUE_SLB_clear(
    SOC_SAND_OUT  SOC_PPC_FRWRD_MACT_ENTRY_VALUE_SLB *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_SLB_clear(
    SOC_SAND_OUT  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_SLB *info
  );

#if SOC_PPC_DEBUG_IS_LVL1

const char*
  SOC_PPC_FRWRD_MACT_KEY_TYPE_to_string(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_KEY_TYPE enum_val
  );

const char*
  SOC_PPC_FRWRD_MACT_ADD_TYPE_to_string(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_ADD_TYPE enum_val
  );

const char*
  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_to_string(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE enum_val
  );

const char*
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_to_string(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT enum_val
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_MAC_ADDR_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_ENTRY_KEY_MAC_ADDR *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_IPV4_MC_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_ENTRY_KEY_IPV4_MC *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_VAL_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_ENTRY_KEY_VAL *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_ENTRY_KEY *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_AGING_INFO_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_ENTRY_AGING_INFO *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_FRWRD_INFO_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_ENTRY_FRWRD_INFO *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_VALUE_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_ENTRY_VALUE *info
  );

void
  SOC_PPC_FRWRD_MACT_TIME_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_TIME *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_MAC_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_MAC *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_IPV4_MC_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_IPV4_MC *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_VALUE_RULE_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_VALUE_RULE *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_RULE_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_RULE *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_STATUS_INFO_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_TRAVERSE_STATUS_INFO *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_KEY_SLB_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_ENTRY_KEY_SLB *info
  );

void
  SOC_PPC_FRWRD_MACT_ENTRY_VALUE_SLB_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_ENTRY_VALUE_SLB *info
  );

void
  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_SLB_print(
    SOC_SAND_IN  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_KEY_RULE_SLB *info
  );

#endif 



#include <soc/dpp/SAND/Utils/sand_footer.h>


#endif

