/* 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 * $
*/

#ifndef __ARAD_EGR_PROG_EDITOR_INCLUDED__

#define __ARAD_EGR_PROG_EDITOR_INCLUDED__




#include <soc/dpp/SAND/Utils/sand_header.h>

#include <soc/dpp/SAND/Management/sand_general_macros.h>
#include <soc/dpp/SAND/Management/sand_error_code.h>

#include <soc/dpp/ARAD/arad_api_framework.h>
#include <soc/dpp/ARAD/arad_framework.h>
#include <soc/dpp/TMC/tmc_api_stack.h>

#include <soc/dpp/ARAD/ARAD_PP/arad_pp_occupation_mgmt.h>





#define ARAD_EGR_PROG_EDITOR_CE_TBL_SIZE   (16)

#define ARAD_EGR_PROG_EDITOR_PRGE_MEMORY_NOF_DATA_ENTRIES  (256)

 
#define ARAD_EGR_PROG_EDITOR_PORT_EXTENDER_HEADER_SIZE  (0x1)


#define ARAD_PRGE_DATA_ENTRY_LSBS_ERSPAN           (2)
#define ARAD_PRGE_DATA_ENTRY_LSBS_RSPAN            (1)
#define ARAD_PRGE_DATA_ENTRY_LSBS_MPLS_SWAP        (2)
#define ARAD_PRGE_DATA_ENTRY_LSBS_IPV6_TUNNEL      (3)
#define ARAD_PRGE_DATA_ENTRY_LSBS_ROO_VXLAN        (2) 
#define ARAD_PRGE_DATA_ENTRY_LSBS_PON_DSCP_RE      (2)
#define ARAD_PRGE_DATA_ENTRY_LSBS_LI               (2)
#define ARAD_PRGE_DATA_ENTRY_LSBS_L2_SRC_ENCAP     (1)


#define ARAD_PRGE_EPNI_ETPP_SCND_ENC_TYPE_NONE                     (0)
#define ARAD_PRGE_EPNI_ETPP_SCND_ENC_TYPE_IP                       (1)
#define ARAD_PRGE_EPNI_ETPP_SCND_ENC_TYPE_TRILL                    (2)
#define ARAD_PRGE_EPNI_ETPP_SCND_ENC_TYPE_MPLS                     (3)


#define ARAD_PRGE_DATA_MEMORY_ENTRY_L2_REMOTE_CPU           (0xff)



#define ARAD_EGR_PROG_EDITOR_NOF_INSTRUCTION_ENTRIES  (32) 

#define ARAD_PRGE_PP_SELECT_VALUE_1_VMAC_DOWN_ADD    (1)
#define ARAD_PRGE_PP_SELECT_VALUE_1_VMAC_UP_ADD      (2)


#define ARAD_EGR_PRGE_MAX_NOF_LFEMS   (SOC_DPP_DEFS_MAX(EGR_PRGE_NOF_LFEMS))


#define ARAD_EGR_PRGE_MAX_NOF_LFEM_TABLES   (SOC_DPP_DEFS_MAX(EGR_PRGE_NOF_LFEM_TABLES))


#define ARAD_EGR_PRGE_MAX_NOF_PROG_INSTRUCTIONS     (SOC_DPP_DEFS_MAX(EGR_PRGE_NOF_PROGRAM_INSTRUCTIONS))


#define ARAD_PRGE_ECN_DM_NTP_LOWER_BIT     (13)
#define ARAD_PRGE_ECN_DM_NTP_UPPER_BIT     (28)
#define ARAD_PRGE_ECN_DM_NTP_BASIC_SHIFT   (2)
#define ARAD_PRGE_ECN_DM_NTP_MAJOR_SHIFT   (ARAD_PRGE_ECN_DM_NTP_LOWER_BIT - ARAD_PRGE_ECN_DM_NTP_BASIC_SHIFT)
#define ARAD_PRGE_ECN_DM_NTP_LOWER_BOUND   ((uint32)(1 << ((ARAD_PRGE_ECN_DM_NTP_LOWER_BIT) - (ARAD_PRGE_ECN_DM_NTP_BASIC_SHIFT))))
#define ARAD_PRGE_ECN_DM_NTP_UPPER_BOUND   ((uint32)(((1 << ((ARAD_PRGE_ECN_DM_NTP_UPPER_BIT) - (ARAD_PRGE_ECN_DM_NTP_BASIC_SHIFT))) - 1)&(~(ARAD_PRGE_ECN_DM_NTP_LOWER_BOUND-1))))
#define ARAD_PRGE_ECN_DM_NTP_MAX_RANGE     ((1 << ((ARAD_PRGE_ECN_DM_NTP_UPPER_BIT) - (ARAD_PRGE_ECN_DM_NTP_LOWER_BIT))) - 1)

#define ARAD_PP_EG_PROG_NOF_FEM(_unit)   (SOC_DPP_DEFS_GET((_unit),egr_prge_nof_lfems))
#define ARAD_PP_EG_PROG_NOF_LFEM_TABLES(_unit) (SOC_DPP_DEFS_GET((_unit),egr_prge_nof_lfem_tables))
#define ARAD_PP_EG_PROG_NOF_INSTR(_unit) (SOC_DPP_DEFS_GET((_unit),egr_prge_nof_program_instructions))
#define ARAD_PP_EG_PROG_NOF_INSTR_MEMS(_unit) (SOC_DPP_DEFS_GET((_unit),egr_prge_nof_instruction_mems))


#define ARAD_EGR_PROG_MAX_OUTLIF_PROFILE_INDEX 6

#define ARAD_EGR_PROG_OUTLIF_PROFILE_INDEX_ALL 0xFFFFFFFF






#define ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_DEST_CUD(is_src, is_dest, cud_type) \
  (ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_NO_CUD_NEV + (cud_type) + ((is_dest) * 3) + ((is_src) * 6))

#define ARAD_EGR_PROG_TM_PORT_PROFILE_TM_CUD_PRESENT_GET(tm_port_profile, is_tm_cud_to_add)                                                                                     \
    if ((tm_port_profile - ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_NO_CUD_NEV) % ARAD_PORTS_FTMH_NOF_EXT_OUTLIFS == 0)          \
    {                                                                                                                               \
                                                                                                                 \
      is_tm_cud_to_add = FALSE;                                                                                                     \
    }                                                                                                                               \
    else if ((tm_port_profile - ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_NO_CUD_NEV) % ARAD_PORTS_FTMH_NOF_EXT_OUTLIFS == 1)     \
    {                                                                                                                               \
                                                                                                          \
      is_tm_cud_to_add = system_mc;                                                                                                 \
    }                                                                                                                               \
    else                                                                                                                            \
    {                                                                                                                               \
      is_tm_cud_to_add = TRUE;                                                                                                      \
    }

#define ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_GET(tm_port_profile, is_src)  \
  is_src = SOC_SAND_NUM2BOOL(((tm_port_profile - ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_NO_CUD_NEV) / 6) % 2)

#define ARAD_EGR_PROG_TM_PORT_PROFILE_TM_DEST_GET(tm_port_profile, is_dest)  \
  is_dest = SOC_SAND_NUM2BOOL(((tm_port_profile - ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_NO_CUD_NEV) / 3) % 2)


#define ARAD_EGR_PROG_EDITOR_PTR_TO_BRANCH_ADDR(_branch_pointer, _is_entry_odd) \
  (((_branch_pointer)<<5) + ((_is_entry_odd) ? 1 : 0))


#define ARAD_PRGE_ECN_DM_PROGRAM_VAR_SET(arg) \
    if (arg < ARAD_PRGE_ECN_DM_NTP_LOWER_BOUND) \
    { \
        LOG_WARN(BSL_LS_BCM_OTHER, (BSL_META_U(unit, \
             "warning: In current time resolution lowest threshold is %d nano. Given argument is smaller. Will be truncated to 0.\n"),ARAD_PRGE_ECN_DM_NTP_LOWER_BOUND)); \
        arg = 0;  \
    } else if (arg > ARAD_PRGE_ECN_DM_NTP_UPPER_BOUND) \
    { \
        LOG_WARN(BSL_LS_BCM_OTHER, (BSL_META_U(unit, \
             "warning: In current time resolution upper threshold is %d nano. Given argument is bigger . Will be truncated to upper bound.\n"),ARAD_PRGE_ECN_DM_NTP_UPPER_BOUND));  \
        arg = ARAD_PRGE_ECN_DM_NTP_MAX_RANGE; \
    } else \
    {   \
        arg = ((arg >> (ARAD_PRGE_ECN_DM_NTP_MAJOR_SHIFT)) & (ARAD_PRGE_ECN_DM_NTP_MAX_RANGE));  \
    }


#define ARAD_PRGE_ECN_DM_PROGRAM_VAR_GET(arg) \
    if ((arg != 0) && (arg != ARAD_PRGE_ECN_DM_NTP_MAX_RANGE)) \
    { \
        arg <<= (ARAD_PRGE_ECN_DM_NTP_MAJOR_SHIFT);  \
    } 
    

#define _ARAD_EGR_PROG_EDITOR_PTR_TO_BRANCH_ENTRY_EVEN(_pointer)    ((_pointer)<<1)


#define _ARAD_EGR_PROG_EDITOR_PTR_TO_BRANCH_ENTRY_ODD(_pointer)     (((_pointer)<<1)+1)


#define INSTR_OLD_WITH_FEM(prog_name,src,off_base,off_src,s_base,s_src,fem_name,op1_sel,op_val,op2_sel,alu,op3_sel,cmp,dst) \
do { \
    mem   = (entry == entry_odd) ? (mem + 1) : mem; \
    entry = (entry == entry_even) ? entry_odd : entry_even; \
    prge_instruction_tbl_data.src_select  = ARAD_PP_PRGE_SRC_##src; \
    prge_instruction_tbl_data.offset_base = off_base; \
    prge_instruction_tbl_data.offset_src  = ARAD_PP_PRGE_ENG_OFFSET_##off_src; \
    prge_instruction_tbl_data.size_base   = s_base; \
    prge_instruction_tbl_data.size_src    = ARAD_PP_PRGE_ENG_SIZE_##s_src; \
    res = arad_egr_prog_editor_supply_lfem_idx(unit, ARAD_EGR_PROG_EDITOR_LFEM_##fem_name, mem, ARAD_EGR_PROG_EDITOR_PROG_##prog_name, &(prge_instruction_tbl_data.fem_select)); \
    SOC_SAND_CHECK_FUNC_RESULT(res,370, exit); \
    prge_instruction_tbl_data.op_1_field_select = ARAD_PP_PRGE_ENG_OP1_##op1_sel; \
    prge_instruction_tbl_data.op_value    = op_val; \
    prge_instruction_tbl_data.op_2_field_select = ARAD_PP_PRGE_ENG_OP2_##op2_sel; \
    prge_instruction_tbl_data.alu_action  = ARAD_PP_EG_PROG_ALU_##alu; \
    prge_instruction_tbl_data.op_3_field_select = ARAD_PP_PRGE_ENG_OP3_##op3_sel; \
    prge_instruction_tbl_data.cmp_action  = cmp; \
    prge_instruction_tbl_data.dst_select  = ARAD_PP_PRGE_ENG_DST_##dst; \
    res = arad_pp_epni_prge_instruction_tbl_set_unsafe(unit, mem, entry, &prge_instruction_tbl_data); \
    SOC_SAND_CHECK_FUNC_RESULT(res, 370, exit); \
} while (0)



#define INSTR_OLD_NO_FEM(prog_name,src,off_base,off_src,s_base,s_src,op1_sel,op_val,op2_sel,alu,op3_sel,cmp,dst) \
do { \
    mem   = (entry == entry_odd) ? (mem + 1) : mem; \
    entry = (entry == entry_even) ? entry_odd : entry_even; \
    prge_instruction_tbl_data.src_select  = ARAD_PP_PRGE_SRC_##src; \
    prge_instruction_tbl_data.offset_base = off_base; \
    prge_instruction_tbl_data.offset_src  = ARAD_PP_PRGE_ENG_OFFSET_##off_src; \
    prge_instruction_tbl_data.size_base   = s_base; \
    prge_instruction_tbl_data.size_src    = ARAD_PP_PRGE_ENG_SIZE_##s_src; \
    prge_instruction_tbl_data.fem_select  = ARAD_PP_EG_PROG_NOF_FEM(unit); \
    prge_instruction_tbl_data.op_1_field_select = ARAD_PP_PRGE_ENG_OP1_##op1_sel; \
    prge_instruction_tbl_data.op_value    = op_val; \
    prge_instruction_tbl_data.op_2_field_select = ARAD_PP_PRGE_ENG_OP2_##op2_sel; \
    prge_instruction_tbl_data.alu_action  = ARAD_PP_EG_PROG_ALU_##alu; \
    prge_instruction_tbl_data.op_3_field_select = ARAD_PP_PRGE_ENG_OP3_##op3_sel; \
    prge_instruction_tbl_data.cmp_action  = cmp; \
    prge_instruction_tbl_data.dst_select  = ARAD_PP_PRGE_ENG_DST_##dst; \
    res = arad_pp_epni_prge_instruction_tbl_set_unsafe(unit, mem, entry, &prge_instruction_tbl_data); \
    SOC_SAND_CHECK_FUNC_RESULT(res, 370, exit); \
} while (0)

#define INSTR_OLD_WITH_FEM_ALU_NOP(prog_name,src,off_base,off_src,s_base,s_src,fem_name) \
do { \
    INSTR_OLD_WITH_FEM(prog_name,src,off_base,off_src,s_base,s_src,fem_name,REG_R0,0,REG_R0,SUB,REG_R0,0,REG_R0); \
} while (0)

#define INSTR_OLD_NO_FEM_ALU_NOP(prog_name,src,off_base,off_src,s_base,s_src) \
do { \
    INSTR_OLD_NO_FEM(prog_name,src,off_base,off_src,s_base,s_src,REG_R0,0,REG_R0,SUB,REG_R0,0,REG_R0); \
} while (0)

#define INSTR_OLD_CE_NOP(prog_name,op1_sel,op_val,op2_sel,alu,op3_sel,cmp,dst) \
do { \
    INSTR_OLD_NO_FEM(prog_name,ORIGINAL,0,REG_R0,0,CONSTANT,op1_sel,op_val,op2_sel,alu,op3_sel,cmp,dst); \
} while (0)

#define INSTR_OLD_NOP(prog_name) \
do { \
    mem   = (entry == entry_odd) ? (mem + 1) : mem; \
    entry = (entry == entry_even) ? entry_odd : entry_even; \
    prge_instruction_tbl_data.src_select      = 0; \
    prge_instruction_tbl_data.offset_base     = 0; \
    prge_instruction_tbl_data.offset_src      = 0; \
    prge_instruction_tbl_data.size_base       = 0; \
    prge_instruction_tbl_data.size_src        = ARAD_PP_PRGE_ENG_SIZE_CONST; \
    prge_instruction_tbl_data.fem_select      = ARAD_PP_EG_PROG_NOF_FEM(unit); \
    prge_instruction_tbl_data.op_1_field_select = 0; \
    prge_instruction_tbl_data.op_value        = 0; \
    prge_instruction_tbl_data.op_2_field_select = 0; \
    prge_instruction_tbl_data.alu_action      = ARAD_PP_EG_PROG_ALU_SUB; \
    prge_instruction_tbl_data.op_3_field_select = 0; \
    prge_instruction_tbl_data.cmp_action      = 0; \
    prge_instruction_tbl_data.dst_select      = 0; \
    res = arad_pp_epni_prge_instruction_tbl_set_unsafe(unit, mem, entry, &prge_instruction_tbl_data); \
    SOC_SAND_CHECK_FUNC_RESULT(res, 370, exit); \
} while (0)

#define CONN_TO_NP_DEBUG_INSTRUCTIONS() \
do { \
    INSTR( CE_COPY(RES, C_OFST(187), C_SIZE(8)), ALU_NOP, "[Inst-0]: Copy R0-R1-R2-R3 to Original header"); \
    INSTR( CE_COPY(RES, C_OFST(45),  C_SIZE(8)), ALU_NOP, "[Inst-1]: Copy TM-Port-Var and PP-Port-Var"); \
    INSTR( CE_COPY(RES, C_OFST(163), C_SIZE(2)), ALU_NOP, "[Inst-2]: Copy Nwk header size and System header size"); \
    INSTR( CE_COPY(RES, C_OFST(145), C_SIZE(7)), ALU_NOP, "[Inst-3]: Copy EES-Data-2"); \
    INSTR( CE_COPY(RES, C_OFST(159), C_SIZE(7)), ALU_NOP, "[Inst-4]: Copy EES-Data-1"); \
    INSTR( CE_COPY(RES, C_OFST(210), C_SIZE(8)), ALU_NOP, "[Inst-5]: Copy EES-Data-3"); \
} while (0)


#define CONN_TO_NP_PROG_TBL_SET(_prog_name) \
do { \
    if (customer_conn_to_np_debug) { \
        prge_program_tbl_data.register_src         = 0; \
        prge_program_tbl_data.remove_system_header  = 0; \
        prge_program_tbl_data.remove_network_header = 0; \
        prge_program_tbl_data.bytes_to_remove       = 0; \
    } else { \
        prge_program_tbl_data.register_src         = 0; \
        prge_program_tbl_data.remove_system_header  = 1; \
        prge_program_tbl_data.remove_network_header = 0; \
        if ((_prog_name == ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_VPN_BRIDGE) \
            || (_prog_name == ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_L3VPN_LAG) \
            || (_prog_name == ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_L3VPN)) { \
            prge_program_tbl_data.bytes_to_remove = user_header_size + 12; \
        } else { \
            prge_program_tbl_data.bytes_to_remove = user_header_size; \
        } \
    } \
} while (0)


#define CONN_TO_NP_PROG_ATTRIBUTE_SET(_prog_name, _select_prog) \
do { \
    res = sw_state_access[unit].dpp.soc.arad.tm.egr_prog_editor.programs.prog_used.get(unit, _prog_name, &prog_used); \
    SOC_SAND_SOC_CHECK_FUNC_RESULT(res, 10, exit); \
    if (prog_used != -1) { \
        sal_memset(&prge_program_tbl_data, 0, sizeof(ARAD_PP_EPNI_PRGE_PROGRAM_TBL_DATA)); \
        res = sw_state_access[unit].dpp.soc.arad.tm.egr_prog_editor.programs.program_pointer.get(unit, _select_prog, &prge_program_tbl_data.program_pointer); \
        SOC_SAND_SOC_CHECK_FUNC_RESULT(res, 10, exit); \
        CONN_TO_NP_PROG_TBL_SET(_prog_name); \
        res = arad_pp_epni_prge_program_tbl_set_unsafe(unit, prog_used, &prge_program_tbl_data); \
        SOC_SAND_CHECK_FUNC_RESULT(res, 230, exit); \
    } \
} while (0)


#define CONN_TO_NP_DEBUG_PROG(_prog_name) \
do { \
    res = sw_state_access[unit].dpp.soc.arad.tm.egr_prog_editor.programs.prog_used.get(unit, _prog_name, &prog_used); \
    SOC_SAND_SOC_CHECK_FUNC_RESULT(res, 10, exit); \
    if (prog_used != -1) { \
        res = arad_egr_prge_mgmt_build_program_start(unit, _prog_name); \
        SOC_SAND_CHECK_FUNC_RESULT(res, 370, exit); \
        CONN_TO_NP_DEBUG_INSTRUCTIONS(); \
        res = arad_egr_prge_mgmt_build_program_end(unit); \
        SOC_SAND_CHECK_FUNC_RESULT(res, 370, exit); \
    } \
} while (0)






typedef enum
{
    ARAD_EGR_PROG_EDITOR_PROG_VXLAN, 
    
    ARAD_EGR_PROG_EDITOR_PROG_ERSPAN,                   
    ARAD_EGR_PROG_EDITOR_PROG_ERSPAN_WA,                
    ARAD_EGR_PROG_EDITOR_PROG_ERSPAN_XGS_PE_FROM_FTMH,  
    ARAD_EGR_PROG_EDITOR_PROG_ERSPAN_XGS_NO_WA,         
    ARAD_EGR_PROG_EDITOR_PROG_RSPAN, 
    ARAD_EGR_PROG_EDITOR_PROG_RSPAN_XGS,
    ARAD_EGR_PROG_EDITOR_PROG_XGS_FROM_FRC_LITE, 
    ARAD_EGR_PROG_EDITOR_PROG_XGS_FROM_FTMH, 
    ARAD_EGR_PROG_EDITOR_PROG_XGS_FROM_FTMH_TM, 
    ARAD_EGR_PROG_EDITOR_PROG_XGS_FROM_FTMH_ARP, 
    ARAD_EGR_PROG_EDITOR_PROG_XGS_ADD, 
    ARAD_EGR_PROG_EDITOR_PROG_ETH_WITH_LLID_TAG, 
    ARAD_EGR_PROG_EDITOR_PROG_IPV6_TUNNEL, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_LOOPBACK, 
    
    
    ARAD_EGR_PROG_EDITOR_PROG_OAM_DM_DOWN_TRAP, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_DM_DOWN_TRAP_NTP, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_DM_DOWN_TRAP_2CPU, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_DM_DOWN_TRAP_NTP_2CPU, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_DM_UP_RX_TRAP_NTP, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_DM_UP_RX_TRAP, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_LM_UP_TRAP, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_CCM, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_EGRESS_SNOOP_WITH_OUTLIF_INFO, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_DROP_1ST_ENC, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_EGR_INJECTION_WA, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_EGR_INJECTION_OPCODE, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_UPMEP_LOOPBACK_SAT,
    ARAD_EGR_PROG_EDITOR_PROG_OAM_OAMP_SLR, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_OAMP_REMOVE_UDH, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_OAMP_REMOVE_UDH_BFD_ECHO, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_1711_MPLS_TP, 
    ARAD_EGR_PROG_EDITOR_PROG_OAM_1711_PWE,
    ARAD_EGR_PROG_EDITOR_PROG_PP_COPY_HEADER, 
    ARAD_EGR_PROG_EDITOR_PROG_PP_COE_ITMH_COPY_HEADER, 
    ARAD_EGR_PROG_EDITOR_PROG_PP_COE_TRAP_COPY_HEADER,
    ARAD_EGR_PROG_EDITOR_PROG_PP_COE_ITMH_COPY_HEADER_TDM_COE, 
    ARAD_EGR_PROG_EDITOR_PROG_PP_FULL_MYMAC_L3_COPY_HEADER, 
    ARAD_EGR_PROG_EDITOR_PROG_PP_COPY_ARP_EXT, 
    ARAD_EGR_PROG_EDITOR_PROG_PP_COPY_TM_TRAFFIC_REMOVE_USER_HEADER, 
    ARAD_EGR_PROG_EDITOR_PROG_OTMH,
    ARAD_EGR_PROG_EDITOR_PROG_OTMH_CUD, 
    ARAD_EGR_PROG_EDITOR_PROG_REMOVE_SYSTEM_HEADER, 
    ARAD_EGR_PROG_EDITOR_PROG_RM_SYS_HDR_TDM_COE,   
    ARAD_EGR_PROG_EDITOR_PROG_REMOVE_TDM_FTMH, 
    ARAD_EGR_PROG_EDITOR_PROG_TDM_PMM, 
    ARAD_EGR_PROG_EDITOR_PROG_TDM_STAMP_CUD, 
    ARAD_EGR_PROG_EDITOR_PROG_TDM_STAMP_CUD_OVER_OUTER_FTMH,
    ARAD_EGR_PROG_EDITOR_PROG_STACKING, 
    ARAD_EGR_PROG_EDITOR_PROG_STACKING_UC, 
    ARAD_EGR_PROG_EDITOR_PROG_2_HOP_SCHEDULING,
    ARAD_EGR_PROG_EDITOR_PROG_PP_COPY_HEADER_WITH_USER_HEADER, 
    ARAD_EGR_PROG_EDITOR_PROG_PP_ITMH_COPY_HEADER_WITH_USER_HEADER,
    ARAD_EGR_PROG_EDITOR_PROG_L2_REMOTE_CPU,
    ARAD_EGR_PROG_EDITOR_PROG_MIM_PTCH2,
    ARAD_EGR_PROG_EDITOR_PROG_VMAC_DOWNSTREAM,
    ARAD_EGR_PROG_EDITOR_PROG_VMAC_UPSTREAM,
    ARAD_EGR_PROG_EDITOR_PROG_OLP_PETRA_A_RESET_IS_KEY_BIT,
    ARAD_EGR_PROG_EDITOR_PROG_ADD_PACKET_SIZE_HEADER,
    ARAD_EGR_PROG_EDITOR_PROG_OTMH_KEEP_PPH,
	ARAD_EGR_PROG_EDITOR_PROG_DC_OVERLAY_VXLAN,
    ARAD_EGR_PROG_EDITOR_PROG_JER_ROUTING_OVER_OVERLAY, 
	ARAD_EGR_PROG_EDITOR_PROG_REFLECTOR_IP_AND_ETH, 
	ARAD_EGR_PROG_EDITOR_PROG_REFLECTOR_ETH, 
    ARAD_EGR_PROG_EDITOR_PROG_REFLECTOR_ETH_PROGRAMMABLE, 
	ARAD_EGR_PROG_EDITOR_PROG_TM_MODE_HW_PROCESSING, 
	ARAD_EGR_PROG_EDITOR_PROG_PP_MODE_HW_PROCESSING,
	ARAD_EGR_PROG_EDITOR_PROG_4_LABEL_PUSH, 
    ARAD_EGR_PROG_EDITOR_PROG_IP_TUNNEL_PRESERVE_DSCP, 
    ARAD_EGR_PROG_EDITOR_PROG_PON_DSCP_REMARKING_IPV4,
    ARAD_EGR_PROG_EDITOR_PROG_PON_DSCP_REMARKING_IPV6,
    ARAD_EGR_PROG_EDITOR_PROG_ADD_48_BYTES_SYS_HDRS, 
    ARAD_EGR_PROG_EDITOR_PROG_MIM_TO_IPOETH,     
    ARAD_EGR_PROG_EDITOR_PROG_USER_MODE_PTAGGED,     
    ARAD_EGR_PROG_EDITOR_PROG_SERVICE_MODE_PTAGGED,  
    ARAD_EGR_PROG_EDITOR_PROG_USER_MODE_NOT_PTAGGED, 
    ARAD_EGR_PROG_EDITOR_PROG_USER_MODE_PTAGGED_MPLS_RAW,       
    ARAD_EGR_PROG_EDITOR_PROG_SERVICE_MODE_PTAGGED_MPLS_RAW,    
    ARAD_EGR_PROG_EDITOR_PROG_USER_MODE_NOT_PTAGGED_MPLS_RAW,       
    ARAD_EGR_PROG_EDITOR_PROG_LSR_MANIPULATION,      
    ARAD_EGR_PROG_EDITOR_PROG_BFD_ECHO,        
    ARAD_EGR_PROG_EDITOR_PROG_SBFD_REFLECTOR,   
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_RAW,
	ARAD_EGR_PROG_EDITOR_PROG_END_TLV,
    ARAD_EGR_PROG_EDITOR_PROG_END_TLV_MAID_INT,
    ARAD_EGR_PROG_EDITOR_PROG_DELAY_BASED_ECN2,
    ARAD_EGR_PROG_EDITOR_PROG_L2_ENCAP_EXTERNAL_CPU,
    ARAD_EGR_PROG_EDITOR_PROG_DSA_RX,
    ARAD_EGR_PROG_EDITOR_PROG_DSA_TX,
	ARAD_EGR_PROG_EDITOR_PROG_TEST1,
	ARAD_EGR_PROG_EDITOR_PROG_TEST1_ENCAPSULATION,
    ARAD_EGR_PROG_EDITOR_PROG_TEST2,
    ARAD_EGR_PROG_EDITOR_PROG_TEST2_BRIDGE,
    ARAD_EGR_PROG_EDITOR_PROG_EVPN_BRIDGE_ESI,
    ARAD_EGR_PROG_EDITOR_PROG_EVPN_BRIDGE_ESI_FRR,
    ARAD_EGR_PROG_EDITOR_PROG_EVPN_ROO_FRR,
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_FRR,
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_ELI_JER,
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_NON_BOS_ELI_AT_ENC1_JER,  
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_NON_BOS_ELI_AT_ENC2_JER,  
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_EXTENDED_JER, 
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_EXTENDED_JER_SR, 

    ARAD_EGR_PROG_EDITOR_PROG_MPLS_EXTENDED_JER_PLUS_MPLS, 
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_EXTENDED_JER_PLUS_FRR, 
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_EXTENDED_JER_PLUS_MPLS_FRR, 
    
    ARAD_EGR_PROG_EDITOR_PROG_FCOE_NP_PORT,
    ARAD_EGR_PROG_EDITOR_PROG_FCOE_N_PORT,
    ARAD_EGR_PROG_EDITOR_PROG_BFD_ACC_WA,
    ARAD_EGR_PROG_EDITOR_PROG_PRESERVING_DSCP,
    ARAD_EGR_PROG_EDITOR_PROG_PRESERVING_DSCP_OAMTS,
    ARAD_EGR_PROG_EDITOR_PROG_PRESERVING_DSCP_IPV6,
    ARAD_EGR_PROG_EDITOR_PROG_MIM_SPB_BRIDGE_TO_OVERLAY,
    ARAD_EGR_PROG_EDITOR_PROG_MIM_SPB_UC_ROUTE_TO_OVERLAY,
    ARAD_EGR_PROG_EDITOR_PROG_MIM_SPB_MC_ROUTE_TO_OVERLAY,
    ARAD_EGR_PROG_EDITOR_PROG_TIMESTAMP_AND_SSP,
    
    ARAD_EGR_PROG_EDITOR_PROG_IPSEC_ENC_DEC,
    ARAD_EGR_PROG_EDITOR_PROG_IPSEC_ENC_DEC_OTSH_REMOVE,
    
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_VPWS,
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_VPWS_LAG,
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_VPWS_1PLUS1,
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_VPLS,
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_VPLS_LAG,
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_VPLS_1PLUS1,
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_VPLS_MC,
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_MPLS,
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_MPLS_1PLUS1,
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_L3VPN,
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_L3VPN_LAG,
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_VPN_BRIDGE,
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_L3MC, 
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_LSP_P2MP, 
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_CONN_TO_NP_LSP_P2MP_LOCAL, 
    ARAD_EGR_PROG_EDITOR_PROG_CUSTOMER_NPH_MC_RCY,
    
    ARAD_EGR_PROG_EDITOR_PROG_PRESERVING_DSCP_EXT_LABEL_JER,
    ARAD_EGR_PROG_EDITOR_PROG_PRESERVING_DSCP_EXT_LABEL_JER_OAMTS,
    ARAD_EGR_PROG_EDITOR_PROG_PRESERVING_DSCP_EXT_LABEL_IPV6_JER,
    
    ARAD_EGR_PROG_EDITOR_PROG_PRESERVING_DSCP_JER,
    ARAD_EGR_PROG_EDITOR_PROG_PRESERVING_DSCP_JER_OAMTS,
    ARAD_EGR_PROG_EDITOR_PROG_PRESERVING_DSCP_IPV6_JER,
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_OVER_UDP,
    ARAD_EGR_PROG_EDITOR_PROG_IPV4_OVER_UDP,
    ARAD_EGR_PROG_EDITOR_PROG_IPV6_OVER_UDP,
    ARAD_EGR_PROG_EDITOR_PROG_LI,
    ARAD_EGR_PROG_EDITOR_PROG_LI_IPV6,


    
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_FOUR_ENCAP_BASIC,  
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_FOUR_ENCAP_DATA_TUNNEL_BOS,
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_FOUR_ENCAP_DATA_TUNNEL_NONBOS,
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_FOUR_ENCAP_DATA_TUNNEL_ACT_SWAP,
    ARAD_EGR_PROG_EDITOR_PROG_MPLS_FOUR_ENCAP_DATA_TUNNEL_ACT_NOP,

    ARAD_EGR_PROG_EDITOR_PROG_EGRESS_ACL_TWO_PASS_EDITING,
    ARAD_EGR_PROG_EDITOR_PROG_L2_SRC_ENCAP,

    ARAD_EGR_PROG_EDITOR_PROG_IPV4_UPDATE_TOS,
    ARAD_EGR_PROG_EDITOR_PROG_IPV4_UPDATE_TOS_RECOVER,
    ARAD_EGR_PROG_EDITOR_PROG_IPV4_TUNNEL_TOR, 
    
    ARAD_EGR_PROG_EDITOR_PROG_PPPOE_OVER_IP,
	
	ARAD_EGR_PROG_EDITOR_PROG_L2TP,
    ARAD_EGR_PROG_EDITOR_PROG_GENERALIZED_RCY_HEADER_0,
    ARAD_EGR_PROG_EDITOR_PROG_GENERALIZED_RCY_HEADER_1,
    
    ARAD_EGR_PROG_EDITOR_PROG_CH_CONN_TO_NP,
    
    ARAD_EGR_PROG_EDITOR_PROG_CH_CONN_TO_NP_REFLECTOR,
    
    ARAD_EGR_PROG_EDITOR_PROG_CH_CONN_TO_NP_RSPAN,
    ARAD_EGR_PROG_EDITOR_PROG_VXLAN_ROO_COPY_DSCP, 
    ARAD_EGR_PROG_EDITOR_PROG_VXLAN_ROO_COPY_DSCP_IPV6, 
    
    ARAD_EGR_PROG_EDITOR_PROG_20BYTE_PREFIX_HEADER,
    
    ARAD_EGR_PROG_EDITOR_PROG_IOAM_MPLS,

    ARAD_EGR_PROG_EDITOR_PROG_MIXED_QOS_MODEL,
    
    ARAD_EGR_PROG_EDITOR_PROG_COPY_DSCP_MIXED_QOS_MODEL,

    
    ARAD_EGR_PROG_EDITOR_PROG_NOF_PROGS
} ARAD_EGR_PROG_EDITOR_PROGRAMS;

typedef enum
{
    ARAD_PRGE_TM_SELECT_NONE = 0,
    ARAD_PRGE_TM_SELECT_PP_COPY_HEADER,
    ARAD_PRGE_TM_SELECT_TTL_DECREMENT,
    ARAD_PRGE_TM_SELECT_INTO_BACKCONE_WITH_TTL_PORT,
    ARAD_PRGE_TM_SELECT_ETH_OAM_LOOPBACK,
    ARAD_PRGE_TM_SELECT_EoE_PROGRAM,
    ARAD_PRGE_TM_SELECT_XGS_PE_FROM_FRC_LITE,
    ARAD_PRGE_TM_SELECT_XGS_PE_FROM_FTMH,
    ARAD_PRGE_TM_SELECT_REMOVE_SYSTEM_HEADER,
    ARAD_PRGE_TM_SELECT_OTMH_BASE,
    ARAD_PRGE_TM_SELECT_OTMH_WITH_CUD_EXT,
    ARAD_PRGE_TM_SELECT_REMOVE_TDM_OPT_FTMH,
    ARAD_PRGE_TM_SELECT_TDM_PMM_HEADER,
    ARAD_PRGE_TM_SELECT_RAW_MPLS,
    ARAD_PRGE_TM_SELECT_TDM_STAMP_CUD,
    ARAD_PRGE_TM_SELECT_FCOE_N_PORT,
    ARAD_PRGE_TM_SELECT_STACKING,
    ARAD_PRGE_TM_SELECT_PP_RCY_PORT,
    ARAD_PRGE_TM_SELECT_L2_REMOTE_CPU,
    ARAD_PRGE_TM_SELECT_ADD_PACKET_SIZE_HEADER,
    ARAD_PRGE_TM_SELECT_ETH_WITH_LLID_TAG, 
    ARAD_PRGE_TM_SELECT_ETH_REMOVE_SYSTEM_HEADERS,
    ARAD_PRGE_TM_SELECT_REFLECTOR_IP_AND_ETH,
    ARAD_PRGE_TM_SELECT_REFLECTOR_ETH,
    ARAD_PRGE_TM_SELECT_TM_MODE_HW_PROCESSING,
    ARAD_PRGE_TM_SELECT_PP_MODE_HW_PROCESSING,
    ARAD_PRGE_TM_SELECT_L2_ENCAP_EXTERNAL_CPU,
    ARAD_PRGE_TM_SELECT_DSA_RX,
    ARAD_PRGE_TM_SELECT_DSA_TX, 
    ARAD_PRGE_TM_SELECT_TDM_STAMP_CUD_OVER_OUTER_FTMH,
    ARAD_PRGE_TM_SELECT_CUSTOMER_CONN_TO_NP,
    ARAD_PRGE_TM_SELECT_TIMESTAMP_AND_SSP,
    ARAD_PRGE_TM_SELECT_EGRESS_ACL_TWO_PASS_EDITING,
    ARAD_PRGE_TM_SELECT_GENERALIZED_RCY_HEADER_0,
    ARAD_PRGE_TM_SELECT_GENERALIZED_RCY_HEADER_1,

    ARAD_PRGE_TM_SELECT_NOF_PROFILES
} e_tm_program_select;

typedef enum
{
    ARAD_PRGE_PP_SELECT_NONE = 0, 
    ARAD_PRGE_PP_SELECT_PP_OAM_PORT = 1, 
    
    ARAD_PRGE_PP_SELECT_PP_COPY_HEADER      = 2, 
    ARAD_PRGE_PP_SELECT_PP_COPY_HEADER_SPAN = 2,
    ARAD_PRGE_PP_SELECT_PP_COPY_HEADER_ERSPAN = 3,
    ARAD_PRGE_PP_SELECT_INTO_BACKCONE_WITH_TTL_PORT = 4,
    ARAD_PRGE_PP_SELECT_PP_EXT_FPGA_PORT = 5,
    ARAD_PRGE_PP_SELECT_TDM_COE_INTER_CONN = 5, 
    ARAD_PRGE_PP_SELECT_ETH_OAM_LOOPBACK = 6,
    ARAD_PRGE_PP_SELECT_EoE_PROGRAM = 7,
    ARAD_PRGE_PP_SELECT_PRESERVING_DSCP = 7, 
    ARAD_PRGE_PP_SELECT_XGS_PE_FROM_FRC_LITE = 8,
    ARAD_PRGE_PP_SELECT_SBFD_REFLECTOR = 8, 
    ARAD_PRGE_PP_SELECT_MIM_SPB = 9,
    ARAD_PRGE_PP_SELECT_ETH_OAM_LOOPBACK_UP = 9,  
    
    ARAD_PRGE_PP_SELECT_XGS_PE_FROM_FTMH      = 10, 
    ARAD_PRGE_PP_SELECT_XGS_PE_FROM_FTMH_SPAN = 10,
    ARAD_PRGE_PP_SELECT_XGS_PE_FROM_FTMH_ERSPAN = 11,
    ARAD_PRGE_PP_SELECT_CUSTOMER_CONN_TO_NP = 11,
    ARAD_PRGE_PP_SELECT_MIXED_QOS_MODEL = 11,
    ARAD_PRGE_PP_SELECT_CH_CONN_TO_FPGA = 11,
    ARAD_PRGE_PP_SELECT_RCY_OVERLAY = 12,
    ARAD_PRGE_PP_SELECT_PP_OLP_PORT = 13,
    ARAD_PRGE_PP_SELECT_OTMH_BASE_KEEP_PPH = 14,
    ARAD_PRGE_PP_SELECT_IPSEC_ENC_DEC = 14,
    ARAD_PRGE_PP_SELECT_REMOVE_SYSTEM_HEADER = 0,
    ARAD_PRGE_PP_SELECT_OTMH_BASE = 0,
    ARAD_PRGE_PP_SELECT_OTMH_WITH_SRC_EXT = 0,
    ARAD_PRGE_PP_SELECT_OTMH_WITH_CUD_EXT = 0,
    ARAD_PRGE_PP_SELECT_OTMH_WITH_MC_ID_EXT = 0,
    ARAD_PRGE_PP_SELECT_OTMH_WITH_SRC_AND_CUD_EXT = 0,
    ARAD_PRGE_PP_SELECT_OTMH_WITH_SRC_AND_MC_ID_EXT = 0,
    ARAD_PRGE_PP_SELECT_REMOVE_TDM_OPT_FTMH = 0,
    ARAD_PRGE_PP_SELECT_TDM_PMM_HEADER = 0,
    ARAD_PRGE_PP_SELECT_TDM_STAMP_CUD = 0,
    ARAD_PRGE_PP_SELECT_L2_REMOTE_CPU = 0,
    ARAD_PRGE_PP_SELECT_L2_ENCAP_EXTERNAL_CPU = 0,
    ARAD_PRGE_PP_SELECT_PP_COPY_HEADER_WITH_USER_HEADERS = 15
} e_pp_program_select;

typedef enum
{
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_CPU,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_RAW,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_STACK1,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_FAP20,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TDM1,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TDM2,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_ETH,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_CPU_CUD,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_NO_CUD_NEV,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_NO_CUD_MC,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_NO_CUD_ALW,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_CUD_NEV,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_CUD_MC,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_CUD_ALW,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_DEST_NO_CUD_NEV,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_DEST_NO_CUD_MC,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_DEST_NO_CUD_ALW,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_DEST_CUD_NEV,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_DEST_CUD_MC,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_DEST_CUD_ALW,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_NO_CUD_NEV_WITH_PPH,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_NO_CUD_MC_WITH_PPH,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_NO_CUD_ALW_WITH_PPH,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_CUD_NEV_WITH_PPH,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_CUD_MC_WITH_PPH,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_NO_DEST_CUD_ALW_WITH_PPH,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_DEST_NO_CUD_NEV_WITH_PPH,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_DEST_NO_CUD_MC_WITH_PPH,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_DEST_NO_CUD_ALW_WITH_PPH,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_DEST_CUD_NEV_WITH_PPH,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_DEST_CUD_MC_WITH_PPH,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TM_SRC_DEST_CUD_ALW_WITH_PPH,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_STACK2,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_INJECTED,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_DSA_RX,
  ARAD_EGR_PROG_TM_PORT_PROFILE_DSA_TX,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_TIMESTAMP_AND_SSP,
  
  ARAD_EGR_PROG_TM_PORT_PROFILE_GENERALIZED_RCY_HEADER_0,
  ARAD_EGR_PROG_TM_PORT_PROFILE_GENERALIZED_RCY_HEADER_1,
  
  ARAD_EGR_NOF_PROG_TM_PORT_PROFILES
} ARAD_EGR_PROG_TM_PORT_PROFILE;



typedef enum
{
    
    ARAD_EGR_PROG_EDITOR_LFEM_2_LSBS,
    ARAD_EGR_PROG_EDITOR_LFEM_3_LSBS, 
    ARAD_EGR_PROG_EDITOR_LFEM_4_LSBS,  
    ARAD_EGR_PROG_EDITOR_LFEM_5_LSBS, 
    ARAD_EGR_PROG_EDITOR_LFEM_6_LSBS,  
    ARAD_EGR_PROG_EDITOR_LFEM_7_LSBS, 
    ARAD_EGR_PROG_EDITOR_LFEM_8_LSBS,   
    ARAD_EGR_PROG_EDITOR_LFEM_12_LSBS,
    ARAD_EGR_PROG_EDITOR_LFEM_13_LSBS, 
    ARAD_EGR_PROG_EDITOR_LFEM_14_LSBS, 

    ARAD_EGR_PROG_EDITOR_LFEM_2_LSBS_SWAPPED, 

    ARAD_EGR_PROG_EDITOR_LFEM_8_MSBS, 
    ARAD_EGR_PROG_EDITOR_LFEM_12_MSBS, 

    
    ARAD_EGR_PROG_EDITOR_LFEM_BIT_0, 
    ARAD_EGR_PROG_EDITOR_LFEM_BIT_1,
    ARAD_EGR_PROG_EDITOR_LFEM_BIT_2,
    ARAD_EGR_PROG_EDITOR_LFEM_BIT_3, 
    ARAD_EGR_PROG_EDITOR_LFEM_BIT_8,

    
    ARAD_EGR_PROG_EDITOR_LFEM_ZERO_BIT0_TO_BIT1,  
    ARAD_EGR_PROG_EDITOR_LFEM_ZERO_BIT8_TO_BIT10, 
    ARAD_EGR_PROG_EDITOR_LFEM_ONE_BIT9_TO_BIT10,  
    ARAD_EGR_PROG_EDITOR_LFEM_MASK_HEX_81, 
    ARAD_EGR_PROG_EDITOR_LFEM_ZERO_BIT1, 
    ARAD_EGR_PROG_EDITOR_LFEM_ZERO_BIT2, 
    ARAD_EGR_PROG_EDITOR_LFEM_ZERO_BIT3, 
    ARAD_EGR_PROG_EDITOR_LFEM_ZERO_BIT8, 
    ARAD_EGR_PROG_EDITOR_LFEM_ZERO_BIT12_TO_BIT13, 
    ARAD_EGR_PROG_EDITOR_LFEM_8_LSBS_OR_3, 
    ARAD_EGR_PROG_EDITOR_LFEM_8_CENTRAL_BITS, 
    ARAD_EGR_PROG_EDITOR_LFEM_8_PERIPHERAL_BITS, 
    ARAD_EGR_PROG_EDITOR_LFEM_BIT1_CLR_BIT0, 
     
    
    ARAD_EGR_PROG_EDITOR_LFEM_BITS_2_3_M, 
    ARAD_EGR_PROG_EDITOR_LFEM_BITS_1_0_M, 
    ARAD_EGR_PROG_EDITOR_LFEM_BITS_0_M, 

    
    ARAD_EGR_PROG_EDITOR_LFEM_LSHIFT_1, 
    ARAD_EGR_PROG_EDITOR_LFEM_LSHIFT_2,
    ARAD_EGR_PROG_EDITOR_LFEM_LSHIFT_4, 
    ARAD_EGR_PROG_EDITOR_LFEM_LSHIFT_12,
    ARAD_EGR_PROG_EDITOR_LFEM_RSHIFT_2,
    ARAD_EGR_PROG_EDITOR_LFEM_RSHIFT_1_FIRST_BIT_ONLY, 
    ARAD_EGR_PROG_EDITOR_LFEM_LSHIFT_4_BITOR_RSHIFT_4, 

    
    ARAD_EGR_PROG_EDITOR_LFEM_TTL_EXP,        
    ARAD_EGR_PROG_EDITOR_LFEM_TTL_EXP_COMP,   

    
    ARAD_EGR_PROG_EDITOR_LFEM_TDM_PMM_PB, 
    ARAD_EGR_PROG_EDITOR_LFEM_OTMH_BASE_EXTRACT_TC_PB, 
    ARAD_EGR_PROG_EDITOR_LFEM_OTMH_BASE_EXTRACT_DP_PB, 
    ARAD_EGR_PROG_EDITOR_LFEM_TDM_CUD_EXTRACT_FTMH_PB, 
    ARAD_EGR_PROG_EDITOR_LFEM_OTMH_EXTRACT_FTMH_PB, 
    ARAD_EGR_PROG_EDITOR_LFEM_STAMP_EXCLUDE_SRC_FOR_OAM_TS_PRESENT_PB, 
    
    
    ARAD_EGR_PROG_EDITOR_LFEM_OTMH_BASE_EXTRACT_TC, 
    ARAD_EGR_PROG_EDITOR_LFEM_OTMH_BASE_EXTRACT_DP, 
    ARAD_EGR_PROG_EDITOR_LFEM_XGS_FRC_LITE_EXTRACT_DSP, 
    ARAD_EGR_PROG_EDITOR_LFEM_XGS_FRC_LITE_EXTRACT_MC, 
    ARAD_EGR_PROG_EDITOR_LFEM_OAM_TS_CCM_LOOPBACK_EXTRACT_FHEI, 
    ARAD_EGR_PROG_EDITOR_LFEM_OAM_LOOPBACK_EXTRACT_TC, 
    ARAD_EGR_PROG_EDITOR_LFEM_OAM_LOOPBACK_EXTRACT_TC_JER, 
    ARAD_EGR_PROG_EDITOR_LFEM_OAM_CCM_EXTRACT_PPH_OFFSET, 
    ARAD_EGR_PROG_EDITOR_LFEM_OAM_TS_CCM_FHEI, 
    ARAD_EGR_PROG_EDITOR_LFEM_OAM_TS_STAMP_PPH, 
    ARAD_EGR_PROG_EDITOR_LFEM_OAM_CCM_PPH_FWD_CODE, 
    ARAD_EGR_PROG_EDITOR_LFEM_STACKING_8, 
    ARAD_EGR_PROG_EDITOR_LFEM_STACKING_10, 
    ARAD_EGR_PROG_EDITOR_LFEM_2_HOP_SCHEDULING, 
    ARAD_EGR_PROG_EDITOR_LFEM_2_HOP_SCHEDULING_EXTRACT_FLOW_ID, 
    ARAD_EGR_PROG_EDITOR_LFEM_2_HOP_SCHEDULING_EXTRACT_TC,
    ARAD_EGR_PROG_EDITOR_LFEM_PP_MIM_32K_IVEC_CMD, 
    ARAD_EGR_PROG_EDITOR_LFEM_OLP_PETRA_A,
    ARAD_EGR_PROG_EDITOR_LFEM_EXTRACT_FTMH_SIZE,
    ARAD_EGR_PROG_EDITOR_LFEM_FTMH_2_LSBYTES, 
    ARAD_EGR_PROG_EDITOR_LFEM_FTMH_2_BYTES, 
    ARAD_EGR_PROG_EDITOR_LFEM_FTMH_2_BYTES_2, 
    ARAD_EGR_PROG_EDITOR_LFEM_EXTRACT_FTMH_TM_ACTION_IS_MC,  
    ARAD_EGR_PROG_EDITOR_LFEM_OUT_PP_PORT,  
    ARAD_EGR_PROG_EDITOR_LFEM_FTMH_DP,  
    ARAD_EGR_PROG_EDITOR_LFEM_OTMH_MC_CUD_EXTRACT_MC_CUD, 
    ARAD_EGR_PROG_EDITOR_LFEM_XGS_FRC_LITE_FRC_FROM_FTMH_EXTRACT_TC, 
    ARAD_EGR_PROG_EDITOR_LFEM_XGS_FRC_FROM_FTMH_EXTRACT_DP, 
    ARAD_EGR_PROG_EDITOR_LFEM_TDM_CUD_STACKING_EXTRACT_CUD, 
    ARAD_EGR_PROG_EDITOR_LFEM_IPV6_EXTRACT_FTMH, 
    ARAD_EGR_PROG_EDITOR_LFEM_OAM_TS_EXTRACT_TOD, 
    ARAD_EGR_PROG_EDITOR_LFEM_OAM_TS_EXTRACT_TOD_APLUS, 
    ARAD_EGR_PROG_EDITOR_LFEM_OAM_TS_EXTRACT_TOD_NTP, 
    ARAD_EGR_PROG_EDITOR_LFEM_OAM_TS, 
    ARAD_EGR_PROG_EDITOR_LFEM_OAM_TS_EXCLUDE_TOD,
    ARAD_EGR_PROG_EDITOR_LFEM_OAM_EGR_INJ_OPCODE,
    ARAD_EGR_PROG_EDITOR_LFEM_DA_COPY, 
    ARAD_EGR_PROG_EDITOR_LFEM_FTMH_TC, 
    ARAD_EGR_PROG_EDITOR_LFEM_SP_5_0, 
	ARAD_EGR_PROG_EDITOR_LFEM_LSB_MPLS, 
	ARAD_EGR_PROG_EDITOR_LFEM_MSB_MPLS, 
	ARAD_EGR_PROG_EDITOR_LFEM_BITS_1_2,
    ARAD_EGR_PROG_EDITOR_LFEM_SET_BITS_7_8,
    ARAD_EGR_PROG_EDITOR_LFEM_SVID, 
    ARAD_EGR_PROG_EDITOR_LFEM_EID,
    ARAD_EGR_PROG_EDITOR_LFEM_FAP_ID, 
    ARAD_EGR_PROG_EDITOR_LFEM_SA_FAP,
    ARAD_EGR_PROG_EDITOR_LFEM_SA_LAG, 
    ARAD_EGR_PROG_EDITOR_LFEM_IS_LAG,
    ARAD_EGR_PROG_EDITOR_LFEM_4_MSB_AND_LSB,
    ARAD_EGR_PROG_EDITOR_LFEM_TOS,
    ARAD_EGR_PROG_EDITOR_LFEM_MASK_BIT_2_3,
    ARAD_EGR_PROG_EDITOR_LFEM_FTMH_TC_AS_MSB, 
    ARAD_EGR_PROG_EDITOR_LFEM_IN_DSCP_TO_EXP, 
    ARAD_EGR_PROG_EDITOR_LFEM_MPLS_CLEAR_EXP, 

    
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_SLOT_OUT,
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_PPH_VSI,
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_TAG_NUM,
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_PS_OUTFP_MSB,
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_DEL_LEN,
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_VLAN_STATUS,
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_SLOT_IN,
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_COS_COLOR,
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_MAIN_TYPE,
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_MAIN_TYPE_LAG,
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_DS_MODE,
    ARAD_EGR_PROG_EDITOR_LFEM_XTMH_DP,
    ARAD_EGR_PROG_EDITOR_LFEM_XTMH_DP_MC,
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_DS_MODE_MC,
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_MAIN_TYPE_MC,
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_PS_FROM_CUD,
    ARAD_EGR_PROG_EDITOR_LFEM_NPH_H_S,
    
    ARAD_EGR_PROG_EDITOR_LFEM_FRR_EXP_S, 
    ARAD_EGR_PROG_EDITOR_LFEM_FRR_EXP_S_TTL, 
    ARAD_EGR_PROG_EDITOR_LFEM_ESI_LSB, 
    ARAD_EGR_PROG_EDITOR_LFEM_MPLS_EXP_TTL, 
    ARAD_EGR_PROG_EDITOR_LFEM_MPLS_EXP_BOS_TTL, 

    ARAD_EGR_PROG_EDITOR_LFEM_FIRST_FIFTH_NIBBLES, 


    ARAD_EGR_PROG_EDITOR_LFEM_FTMH_EXTRACT_SHIFT_DSP_EXT, 
    ARAD_EGR_PROG_EDITOR_LFEM_FTMH_2_BYTES_PPH_TYPE_2,
    ARAD_EGR_PROG_EDITOR_LFEM_SPB_STAMP_LEFT_NIBBLE_8, 
    ARAD_EGR_PROG_EDITOR_LFEM_SPB_READ_BITS_FROM_BTAG_FIELD,
    ARAD_EGR_PROG_EDITOR_LFEM_SPB_READ_BDA_WITHOUT_ORIENTATION,
 
    ARAD_EGR_PROG_EDITOR_LFEM_DW0_TAGGED,
    ARAD_EGR_PROG_EDITOR_LFEM_DW0_TAG,
    ARAD_EGR_PROG_EDITOR_LFEM_DSA_TPID,
    ARAD_EGR_PROG_EDITOR_LFEM_DSA_PCP_VID,
    ARAD_EGR_PROG_EDITOR_LFEM_DSA_CFI,
    ARAD_EGR_PROG_EDITOR_LFEM_DSA_SRC_4_0,
    ARAD_EGR_PROG_EDITOR_LFEM_DSA_SRC_5,

    ARAD_EGR_PROG_EDITOR_LFEM_GPON_CHAN,
    ARAD_EGR_PROG_EDITOR_LFEM_GPON_CHAN_JER,
    ARAD_EGR_PROG_EDITOR_LFEM_GPON_STAG_PCP,
    ARAD_EGR_PROG_EDITOR_LFEM_GPON_GEM_ID,

    ARAD_EGR_PROG_EDITOR_LFEM_IPV6_VXLAN_NH_HL, 
    ARAD_EGR_PROG_EDITOR_LFEM_IPV6_VXLAN_FL, 

    ARAD_EGR_PROG_EDITOR_LFEM_BIT_0_M_3, 
    ARAD_EGR_PROG_EDITOR_LFEM_BIT_1_M_5, 
    ARAD_EGR_PROG_EDITOR_LFEM_COE_TAG_TC_DP,
    ARAD_EGR_PROG_EDITOR_LFEM_COE_TAG_TC,    
    ARAD_EGR_PROG_EDITOR_LFEM_BIT_2_M_6, 
    ARAD_EGR_PROG_EDITOR_LFEM_BITS_2_17_RSHIFT_2, 
    ARAD_EGR_PROG_EDITOR_LFEM_BIT_0_M_6, 
    ARAD_EGR_PROG_EDITOR_LFEM_CH_PPH_TYPE,
    ARAD_EGR_PROG_EDITOR_LFEM_CH_OTSH_TYPE,
    ARAD_EGR_PROG_EDITOR_LFEM_SBFD_STA_AND_D_CLEAR,
    ARAD_EGR_PROG_EDITOR_LFEM_SBFD_STA_UP,
    ARAD_EGR_PROG_EDITOR_LFEM_SBFD_UDH_0_15_LSB,
    ARAD_EGR_PROG_EDITOR_LFEM_SBFD_UDH_16_BIT,
    ARAD_EGR_PROG_EDITOR_LFEM_OUT_LIF_MSB,
    ARAD_EGR_PROG_EDITOR_LFEM_SHIFT_BIT4_TO_BIT1,
    ARAD_EGR_PROG_EDITOR_LFEM_BIT_0_M_4, 
    ARAD_EGR_PROG_EDITOR_LFEM_NOF_LFEMS,

    
    ARAD_EGR_PROG_EDITOR_LFEM_NULL

} ARAD_EGR_PROG_EDITOR_LFEM;

typedef ARAD_EGR_PROG_EDITOR_LFEM lfem_maps_shadow_t[ARAD_EGR_PRGE_MAX_NOF_LFEM_TABLES][ARAD_EGR_PRGE_MAX_NOF_LFEMS];

typedef enum
{

    
    ARAD_EGR_PROG_EDITOR_BRANCH_DROP_PACKET, 

    
    ARAD_EGR_PROG_EDITOR_BRANCH_BASE_OTMH_CUD_AND_SOURCE_PORT,
    ARAD_EGR_PROG_EDITOR_BRANCH_BASE_OTMH_CUD_MC,
    ARAD_EGR_PROG_EDITOR_BRANCH_BFD_ECHO,
    ARAD_EGR_PROG_EDITOR_BRANCH_UDH_BFD_ECHO,
    ARAD_EGR_PROG_EDITOR_BRANCH_PP_COPY_HEADER,
    ARAD_EGR_PROG_EDITOR_BRANCH_2_HOP_SCHEDULING,
    ARAD_EGR_PROG_EDITOR_BRANCH_STACKING,
    ARAD_EGR_PROG_EDITOR_BRANCH_DELAY_BASE_ECN2,
    ARAD_EGR_PROG_EDITOR_BRANCH_OAM_STRING_MAID,
    ARAD_EGR_PROG_EDITOR_BRANCH_DSA_RX_TAGGED,
    ARAD_EGR_PROG_EDITOR_BRANCH_DSA_TX_TAGGED,
    ARAD_EGR_PROG_EDITOR_BRANCH_PP_FULL_MYMAC_L3_COPY_HEADER,
    ARAD_EGR_PROG_EDITOR_BRANCH_OAM_LB_UP,
    ARAD_EGR_PROG_EDITOR_BRANCH_IP_OVER_UDP,
    ARAD_EGR_PROG_EDITOR_BRANCH_PRESERVING_DSCP_BRIDGE,
    ARAD_EGR_PROG_EDITOR_BRANCH_OAM_DROP_1ST_ENC,
    ARAD_EGR_PROG_EDITOR_BRANCH_MPLS_RAW,
    ARAD_EGR_PROG_EDITOR_BRANCH_EVPN_BRIDGE_ESI,
    ARAD_EGR_PROG_EDITOR_BRANCH_EVPN_BRIDGE_ESI_FRR,
    
    ARAD_EGR_PROG_EDITOR_BRANCH_IDS_NOF

} ARAD_EGR_PROG_EDITOR_BRANCH;



typedef enum
{

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_EVC_FILTER,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_OTMH_SPLIT1,
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_OTMH_SPLIT2,
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_OTMH_JUMP_BACK,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_BFD_ECHO,
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_UDH_BFD_ECHO,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_PP_COPY_HEADER,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_2_HOP_SCHEDULING,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_STACKING,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_DELAY_BASE_ECN2,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_OAM_MAID_INT,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_OAM_LB_UP,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_IP_OVER_UDP,
        
    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_PRESERVING_DSCP_BRIDGE,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_DSA_RX_TAGGED,
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_DSA_TX_TAGGED,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_OAM_DROP_1ST_ENC,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_MPLS_RAW,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_EVPN_BRIDGE_ESI,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_EVPN_BRIDGE_ESI_FRR,

    
    ARAD_EGR_PROG_EDITOR_JUMP_POINT_IDS_NOF

} ARAD_EGR_PROG_EDITOR_JUMP_POINT;

typedef enum
{
    ARAD_EGR_PROG_EDITOR_OUTLIF_TYPE_0,
    ARAD_EGR_PROG_EDITOR_OUTLIF_TYPE_1,
    ARAD_EGR_PROG_EDITOR_OUTLIF_TYPE_2,
    ARAD_EGR_PROG_EDITOR_OUTLIF_TYPE_3,
    ARAD_EGR_PROG_EDITOR_OUTLIF_TYPE_4,
    ARAD_EGR_PROG_EDITOR_OUTLIF_TYPE_NOF
} ARAD_EGR_PROG_EDITOR_TYPES_PTAGGED; 

typedef struct
{
  uint32 lfem_program;
  uint32 bitcount;
  uint32 niblle_field_offset;
  uint32 header_offset_select;
  uint32 source_select;
  uint32 valid;
} ARAD_EGR_PROG_EDITOR_CE_INSTRUCTION;

typedef struct
{
  int prog_used; 
  ARAD_EGR_PROG_EDITOR_LFEM lfem_bk[ARAD_EGR_PRGE_MAX_NOF_LFEM_TABLES][ARAD_EGR_PRGE_MAX_NOF_LFEMS]; 
  uint32 program_pointer; 
  uint32 tm_profile;
  uint8 num_value_1_offset_profiles; 
  uint8 value_1_offset_first_profile; 
} ARAD_EGR_PROG_EDITOR_PROGRAM_INFO;

typedef struct
{
  uint8 otmh_base;
  uint8 vxlan;
  uint8 erspan;
  uint8 rspan;
  uint8 xgs_tm; 
  uint8 xgs_pp; 
  uint8 epon;
  uint8 ipv6_tunnel;
  uint8 oam_loopback; 
  uint8 oam_ts_ccm; 
  uint8 oam_dm_down; 
  uint8 egr_inj_wa; 
  uint8 egr_inj_opcode; 
  uint8 oam_dm_up_rx; 
  uint8 oam_lm_upmep; 
  uint8 oam_upmep; 
  uint8 oam_dm_ntp; 
  uint8 oam_1711;   
  uint8 tdm; 
  uint8 tdm_stamp_cud; 
  uint8 tdm_pmm; 
  uint8 stacking;
  uint8 two_hop_scheduling; 
  uint8 l2_remote_cpu; 
  uint8 otmh_cud; 
  uint8 trill;
  uint8 vmac_enable;
  uint8 olp_petra;
  uint8 size_header;
  uint8 user_header_always_remove; 
  uint8 bfd_echo;
  uint8 sbfd_reflector;
  uint8 bfd_clear_flags;
  uint8 bfd_chan_override;
  uint8 mpls_raw;
  uint8 delay_based_ecn2;
  uint8 l2_encap_external_cpu;
  uint8 dsa_rx;
  uint8 dsa_tx;
  uint8 npv_without_my_mac;
  uint8 evpn;
  uint8 evpn_frr;
  uint8 mpls_eli;
  uint8 mpls_extended;
  uint8 mim_spb;
  
  uint8 customer_conn_to_np_enable;
  uint8 ipsec;
  uint8 recycle_with_ptch2;
  uint8 ipv4_tunnel_tor;
  uint8 generalized_rcy_header_0;
  uint8 generalized_rcy_header_1;
  
  uint8 ch_enable;
  uint8 prefix_20byte;
  uint8 ioam_mpls;
  uint8 ioam_copy_dscp;
} ARAD_EGR_PROG_EDITOR_PROGRAMS_USAGE_INFO;

typedef struct{
    
    int tm_profiles[ARAD_PRGE_TM_SELECT_NOF_PROFILES];

    
    ARAD_EGR_PROG_EDITOR_PROGRAM_INFO programs[ARAD_EGR_PROG_EDITOR_PROG_NOF_PROGS];

} ARAD_EGR_PROG_EDITOR_INFO;






extern  ARAD_EGR_PROG_EDITOR_PROGRAMS_USAGE_INFO programs_usage[SOC_MAX_NUM_DEVICES];
extern  int branch_entries[SOC_MAX_NUM_DEVICES][ARAD_EGR_PROG_EDITOR_BRANCH_IDS_NOF];


extern  lfem_maps_shadow_t lfem_maps_shadow[SOC_MAX_NUM_DEVICES];







int
  arad_egr_prog_editor_profile_get(
    SOC_SAND_IN  int                        unit,
    SOC_SAND_IN  uint32                     eg_tm_profile,
    SOC_SAND_OUT uint32                     *internal_profile
  );

uint32
  arad_egr_prog_editor_tm_profile_enum_get(
    SOC_SAND_IN  int                        unit,
    SOC_SAND_IN  uint32                        internal_profile,
    SOC_SAND_OUT uint32                        *eg_tm_profile
  );

uint32
  arad_egr_prog_editor_unsafe(
    SOC_SAND_IN  int                                 unit
  );

uint32
  arad_egr_prog_editor_config_dut_by_queue_database(
    SOC_SAND_IN int unit
  );


uint32
  arad_egr_prog_editor_stacking_lfems_set(
    SOC_SAND_IN int unit,
    SOC_SAND_IN SOC_TMC_STACK_EGR_PROG_TM_PORT_PROFILE_STACK tm_port_profile_stack,
    SOC_SAND_IN uint32 bitmap);


uint32
 arad_egr_prog_l2_encap_external_cpu_program_info_set(
   SOC_SAND_IN int unit,
   SOC_SAND_IN uint32 pp_port_var,
   SOC_SAND_IN uint64 prge_var
   
 );


uint32
arad_egr_prog_l2_encap_external_cpu_program_info_get(
   SOC_SAND_IN int unit,
   SOC_SAND_OUT uint32 *pp_port_var,
   SOC_SAND_OUT uint64 *prge_var
);


uint32
arad_egr_prog_vxlan_program_info_set(
   SOC_SAND_IN int unit,
   SOC_SAND_IN uint16 udp_dest_port
 );

int
  arad_egr_prog_editor_program_pointer_get(
    SOC_SAND_IN   int                                 unit,
    SOC_SAND_IN   ARAD_EGR_PROG_EDITOR_PROGRAMS       program_id,
    SOC_SAND_OUT  uint32                              *program_pointer
  );

uint32
  arad_egr_prog_editor_pp_pct_var_set(
    SOC_SAND_IN uint32 unit,
    SOC_SAND_IN uint32 port,
    SOC_SAND_IN uint32 value
  );

uint32
  arad_egr_prog_editor_pp_pct_var_get(
    SOC_SAND_IN uint32 unit,
    SOC_SAND_IN uint32 port,
    SOC_SAND_OUT uint32 *value
  );

int
  arad_egr_prog_editor_profile_set(
    SOC_SAND_IN  int                        unit,
    SOC_SAND_IN  int                        core,
    SOC_SAND_IN  uint32                     q_pair,
    SOC_SAND_IN  uint32                     prog_editor_profile
  );

int
  arad_egr_prog_editor_pp_profile_set(
    SOC_SAND_IN  int                        unit,
    SOC_SAND_IN  int                        port,
    SOC_SAND_IN  uint32                     prog_editor_profile
  );



uint32
  arad_egr_prog_editor_branch_pointer_allocate(
     SOC_SAND_IN    int                             unit,
     SOC_SAND_IN    ARAD_EGR_PROG_EDITOR_BRANCH     branch_id,
     SOC_SAND_OUT   uint32                         *entry
  );


int
  arad_pp_prge_program_var_set(
     SOC_SAND_IN    int                             unit,
     SOC_SAND_IN    ARAD_EGR_PROG_EDITOR_PROGRAMS   program,
     SOC_SAND_IN    uint64                          var
  );


uint32
  arad_egr_prog_editor_sbfd_reflector_status_update(
    SOC_SAND_IN int unit,
    SOC_SAND_IN int status
  );


int
  arad_pp_prge_program_var_get(
     SOC_SAND_IN    int                             unit,
     SOC_SAND_IN    ARAD_EGR_PROG_EDITOR_PROGRAMS   program,
     SOC_SAND_OUT   uint64                          *var
  );


uint32 arad_egr_prog_editor_prog_sel_value1_set(int unit, ARAD_EGR_PROG_EDITOR_PROGRAMS program, uint32 value1);



void
  arad_egr_prog_editor_print_lfem_duplicates(int unit);






uint32
  arad_egr_prog_editor_supply_lfem_idx(
     SOC_SAND_IN    int                             unit,
     SOC_SAND_IN    ARAD_EGR_PROG_EDITOR_LFEM       lfem,
     SOC_SAND_IN    int                             mem,
     SOC_SAND_IN    ARAD_EGR_PROG_EDITOR_PROGRAMS   prog,
     SOC_SAND_OUT   uint32                         *index
  );
 

    
uint32
  arad_egr_prog_editor_invalidate_program_by_id(
    SOC_SAND_IN  uint32                          unit ,
    SOC_SAND_IN  ARAD_EGR_PROG_EDITOR_PROGRAMS      prog ,
    SOC_SAND_IN  int                             prog_selection_valid
  );

uint32
  arad_egr_prog_editor_cat_nops(
    SOC_SAND_IN int unit,
    SOC_SAND_IN int first_mem,
    SOC_SAND_IN int first_entry,
    SOC_SAND_IN int entry_even,
    SOC_SAND_IN int entry_odd
  );



uint32
  arad_egr_prog_editor_null_prog_init(
    SOC_SAND_IN int unit,
    SOC_SAND_IN int entry_even,
    SOC_SAND_IN int entry_odd
  );


uint32
  arad_egr_prog_editor_prog_sel_inlif_profile_set(int unit,
                                                   SOC_OCC_MGMT_INLIF_APP inlif_app,
                                                   ARAD_EGR_PROG_EDITOR_PROGRAMS program,
                                                   uint32 selection_value);


uint32
  arad_egr_prog_editor_prog_sel_outlif_profile_set(int unit,
                                                   SOC_OCC_MGMT_OUTLIF_APP outlif_app,
                                                   ARAD_EGR_PROG_EDITOR_PROGRAMS program,
                                                   uint32 selection_value,
                                                   uint32 outlif_profile_index);


uint32
  arad_egr_prog_editor_prog_sel_outlif_profile_single_entry_set(int unit,
                                                                SOC_OCC_MGMT_OUTLIF_APP outlif_app,
                                                                ARAD_EGR_PROG_EDITOR_PROGRAMS program,
                                                                uint32 selection_entry,
                                                                uint32 selection_value,
                                                                uint32 outlif_profile_index);




void
  arad_egr_prog_editor_prog_name_get_by_id(
     uint32 program_id,
     char** prog_name
  );


void
  arad_egr_prog_editor_branch_name_get_by_id(
     uint32 branch_id,
     char** branch_name
  );


uint32
  arad_egr_prog_editor_program_by_name_find(
    SOC_SAND_IN  int                            unit,
    SOC_SAND_IN  char                          *prog_name,
    SOC_SAND_OUT ARAD_EGR_PROG_EDITOR_PROGRAMS *prog
  );

uint32 arad_egr_prog_editor_set_tcam_sel(
            SOC_SAND_IN int unit,
            SOC_SAND_IN int prog,
            SOC_SAND_IN int same_prog_tcam_idx,
            SOC_SAND_INOUT int *tcam_line);

uint32 arad_egr_prog_editor_set_prog_attr(
            SOC_SAND_IN int unit,
            SOC_SAND_IN int prog,
            SOC_SAND_IN uint32 register_src,
            SOC_SAND_IN uint32 remove_system_header,
            SOC_SAND_IN uint32 remove_network_header,
            SOC_SAND_IN uint32 bytes_to_remove,
            SOC_SAND_IN uint32 prgeVarHigh,
            SOC_SAND_IN uint32 prgeVarLow);

uint32
  arad_egr_prog_editor_prog_sel_mirror_command_set (
    SOC_SAND_IN int unit, 
    ARAD_EGR_PROG_EDITOR_PROGRAMS program, 
    uint32 selection_value
  );


int
  arad_egr_prog_editor_print_all_programs_data(int unit);

int
  arad_egr_prog_editor_print_chosen_program(int unit, uint32 first_instruction, uint8 raw_output, char **prog_name, uint8 print_to_xml);


#if ARAD_DEBUG_IS_LVL1

#endif 



#include <soc/dpp/SAND/Utils/sand_footer.h>


#endif



