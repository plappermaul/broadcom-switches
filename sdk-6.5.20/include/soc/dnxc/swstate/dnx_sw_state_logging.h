/*
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#ifndef _DNX_SW_STATE_LOGGING_H
#define _DNX_SW_STATE_LOGGING_H

#if defined(DNX_SW_STATE_LOGGING)
#include <bcm/types.h>
#include <soc/types.h>
#include <soc/dnxc/swstate/auto_generated/types/dnxc_module_ids_types.h>
#include <soc/dnxc/dnxc_verify.h>
#endif

typedef enum dnx_sw_state_func_type_logging
{
    DNX_SW_STATE_INVALID_LOGGING = -1,
    DNX_SW_STATE_INIT_LOGGING = 0,
    DNX_SW_STATE_DEINIT_LOGGING,
    DNX_SW_STATE_IS_INIT_LOGGING,
    DNX_SW_STATE_GET_LOGGING,
    DNX_SW_STATE_SET_LOGGING,
    DNX_SW_STATE_ALLOC_LOGGING,
    DNX_SW_STATE_FREE_LOGGING,
    DNX_SW_STATE_IS_ALLOC_LOGGING,
    DNX_SW_STATE_PTR_ALLOC_LOGGING,
    DNX_SW_STATE_PTR_FREE_LOGGING,
    DNX_SW_STATE_ALLOC_BITMAP_LOGGING,
    DNX_SW_STATE_MUTEX_CREATE_LOGGING,
    DNX_SW_STATE_MUTEX_IS_CREATED_LOGGING,
    DNX_SW_STATE_MUTEX_DESTROY_LOGGING,
    DNX_SW_STATE_MUTEX_TAKE_LOGGING,
    DNX_SW_STATE_MUTEX_GIVE_LOGGING,
    DNX_SW_STATE_SEM_CREATE_LOGGING,
    DNX_SW_STATE_SEM_IS_CREATED_LOGGING,
    DNX_SW_STATE_SEM_DESTROY_LOGGING,
    DNX_SW_STATE_SEM_TAKE_LOGGING,
    DNX_SW_STATE_SEM_GIVE_LOGGING,
    DNX_SW_STATE_PBMP_NEQ_LOGGING,
    DNX_SW_STATE_PBMP_EQ_LOGGING,
    DNX_SW_STATE_PBMP_MEMBER_LOGGING,
    DNX_SW_STATE_PBMP_NOT_NULL_LOGGING,
    DNX_SW_STATE_PBMP_IS_NULL_LOGGING,
    DNX_SW_STATE_PBMP_COUNT_LOGGING,
    DNX_SW_STATE_PBMP_XOR_LOGGING,
    DNX_SW_STATE_PBMP_REMOVE_LOGGING,
    DNX_SW_STATE_PBMP_ASSIGN_LOGGING,
    DNX_SW_STATE_PBMP_GET_LOGGING,
    DNX_SW_STATE_PBMP_AND_LOGGING,
    DNX_SW_STATE_PBMP_NEGATE_LOGGING,
    DNX_SW_STATE_PBMP_OR_LOGGING,
    DNX_SW_STATE_PBMP_CLEAR_LOGGING,
    DNX_SW_STATE_PBMP_PORT_ADD_LOGGING,
    DNX_SW_STATE_PBMP_PORT_FLIP_LOGGING,
    DNX_SW_STATE_PBMP_PORT_REMOVE_LOGGING,
    DNX_SW_STATE_PBMP_PORT_SET_LOGGING,
    DNX_SW_STATE_PBMP_PORTS_RANGE_ADD_LOGGING,
    DNX_SW_STATE_PBMP_FMT_LOGGING,
    DNX_SW_STATE_MEMREAD_LOGGING,
    DNX_SW_STATE_MEMWRITE_LOGGING,
    DNX_SW_STATE_MEMCMP_LOGGING,
    DNX_SW_STATE_MEMSET_LOGGING,
    DNX_SW_STATE_RANGE_READ_LOGGING,
    DNX_SW_STATE_RANGE_WRITE_LOGGING,
    DNX_SW_STATE_RANGE_FILL_LOGGING,
    DNX_SW_STATE_OCC_BM_ALLOC_NEXT_LOGGING,
    DNX_SW_STATE_OCC_BM_CLEAR_LOGGING,
    DNX_SW_STATE_OCC_BM_CREATE_LOGGING,
    DNX_SW_STATE_OCC_BM_DESTROY_LOGGING,
    DNX_SW_STATE_OCC_BM_GET_NEXT_IN_RANGE_LOGGING,
    DNX_SW_STATE_OCC_BM_GET_NEXT_LOGGING,
    DNX_SW_STATE_OCC_BM_IS_OCCUPIED_LOGGING,
    DNX_SW_STATE_OCC_BM_STATUS_SET_LOGGING,
    DNX_SW_STATE_OCC_BM_PRINT_LOGGING,
    DNX_SW_STATE_HTB_CREATE_LOGGING,
    DNX_SW_STATE_HTB_DESTROY_LOGGING,
    DNX_SW_STATE_HTB_INSERT_LOGGING,
    DNX_SW_STATE_HTB_FIND_LOGGING,
    DNX_SW_STATE_HTB_GET_NEXT_LOGGING,
    DNX_SW_STATE_HTB_CLEAR_LOGGING,
    DNX_SW_STATE_HTB_DELETE_LOGGING,
    DNX_SW_STATE_HTB_DELETE_ALL_LOGGING,
    DNX_SW_STATE_HTB_INSERT_AT_INDEX_LOGGING,
    DNX_SW_STATE_HTB_DELETE_BY_INDEX_LOGGING,
    DNX_SW_STATE_HTB_GET_BY_INDEX_LOGGING,
    DNX_SW_STATE_HTB_PRINT_LOGGING,
    DNX_SW_STATE_DEFRAGMENTED_CHUNK_CREATE_LOGGING,
    DNX_SW_STATE_DEFRAGMENTED_CHUNK_DESTROY_LOGGING,
    DNX_SW_STATE_DEFRAGMENTED_CHUNK_PIECE_ALLOC_LOGGING,
    DNX_SW_STATE_DEFRAGMENTED_CHUNK_PIECE_FREE_LOGGING,
    DNX_SW_STATE_DEFRAGMENTED_CHUNK_PRINT_LOGGING,
    DNX_SW_STATE_LL_CREATE_EMPTY_LOGGING,
    DNX_SW_STATE_LL_DESTROY_LOGGING,
    DNX_SW_STATE_LL_NOF_ELEMENTS_LOGGING,
    DNX_SW_STATE_LL_NODE_KEY_LOGGING,
    DNX_SW_STATE_LL_NODE_VALUE_LOGGING,
    DNX_SW_STATE_LL_NODE_UPDATE_LOGGING,
    DNX_SW_STATE_LL_NEXT_NODE_LOGGING,
    DNX_SW_STATE_LL_PREVIOUS_NODE_LOGGING,
    DNX_SW_STATE_LL_ADD_LOGGING,
    DNX_SW_STATE_LL_ADD_FIRST_LOGGING,
    DNX_SW_STATE_LL_ADD_LAST_LOGGING,
    DNX_SW_STATE_LL_ADD_BEFORE_LOGGING,
    DNX_SW_STATE_LL_ADD_AFTER_LOGGING,
    DNX_SW_STATE_LL_REMOVE_NODE_LOGGING,
    DNX_SW_STATE_LL_GET_LAST_LOGGING,
    DNX_SW_STATE_LL_GET_FIRST_LOGGING,
    DNX_SW_STATE_LL_FIND_LOGGING,
    DNX_SW_STATE_LL_PRINT_LOGGING,
    DNX_SW_STATE_BT_CREATE_EMPTY_LOGGING,
    DNX_SW_STATE_BT_DESTROY_LOGGING,
    DNX_SW_STATE_BT_NOF_ELEMENTS_LOGGING,
    DNX_SW_STATE_BT_NODE_VALUE_LOGGING,
    DNX_SW_STATE_BT_NODE_UPDATE_LOGGING,
    DNX_SW_STATE_BT_NODE_FREE_LOGGING,
    DNX_SW_STATE_BT_GET_ROOT_LOGGING,
    DNX_SW_STATE_BT_GET_PARENT_LOGGING,
    DNX_SW_STATE_BT_GET_LEFT_CHILD_LOGGING,
    DNX_SW_STATE_BT_GET_RIGHT_CHILD_LOGGING,
    DNX_SW_STATE_BT_ADD_ROOT_LOGGING,
    DNX_SW_STATE_BT_ADD_LEFT_CHILD_LOGGING,
    DNX_SW_STATE_BT_ADD_RIGHT_CHILD_LOGGING,
    DNX_SW_STATE_BT_SET_PARENT_LOGGING,
    DNX_SW_STATE_BT_SET_LEFT_CHILD_LOGGING,
    DNX_SW_STATE_BT_SET_RIGHT_CHILD_LOGGING,
    DNX_SW_STATE_BT_PRINT_LOGGING,
    DNX_SW_STATE_BIT_SET_LOGGING,
    DNX_SW_STATE_BIT_CLEAR_LOGGING,
    DNX_SW_STATE_BIT_GET_LOGGING,
    DNX_SW_STATE_BIT_RANGE_READ_LOGGING,
    DNX_SW_STATE_BIT_RANGE_WRITE_LOGGING,
    DNX_SW_STATE_BIT_RANGE_AND_LOGGING,
    DNX_SW_STATE_BIT_RANGE_OR_LOGGING,
    DNX_SW_STATE_BIT_RANGE_XOR_LOGGING,
    DNX_SW_STATE_BIT_RANGE_REMOVE_LOGGING,
    DNX_SW_STATE_BIT_RANGE_NEGATE_LOGGING,
    DNX_SW_STATE_BIT_RANGE_CLEAR_LOGGING,
    DNX_SW_STATE_BIT_RANGE_SET_LOGGING,
    DNX_SW_STATE_BIT_RANGE_NULL_LOGGING,
    DNX_SW_STATE_BIT_RANGE_TEST_LOGGING,
    DNX_SW_STATE_BIT_RANGE_EQ_LOGGING,
    DNX_SW_STATE_CB_DB_GET_CB_LOGGING,
    DNX_SW_STATE_CB_DB_REGISTER_CB_LOGGING,
    DNX_SW_STATE_CB_DB_UNREGISTER_CB_LOGGING,
    DNX_SW_STATE_RES_MNGR_CREATE_LOGGING,
    DNX_SW_STATE_RES_MNGR_DESTROY_LOGGING,
    DNX_SW_STATE_RES_MNGR_ALLOCATE_SINGLE_LOGGING,
    DNX_SW_STATE_RES_MNGR_ALLOCATE_SEVERAL_LOGGING,
    DNX_SW_STATE_RES_MNGR_FREE_SINGLE_LOGGING,
    DNX_SW_STATE_RES_MNGR_FREE_SEVERAL_LOGGING,
    DNX_SW_STATE_RES_MNGR_IS_ALLOCATED_LOGGING,
    DNX_SW_STATE_RES_MNGR_CLEAR_LOGGING,
    DNX_SW_STATE_RES_MNGR_NOF_FREE_ELEMENTS_GET_LOGGING,
    DNX_SW_STATE_RES_MNGR_GET_NEXT_LOGGING,
    DNX_SW_STATE_RES_MNGR_DUMP_INFO_GET_LOGGING,
    DNX_SW_STATE_RES_MNGR_NOF_ALLOCATED_ELEMENTS_IN_RANGE_GET_LOGGING,
    DNX_SW_STATE_RES_MNGR_ADVANCED_ALGORITHM_INFO_GET_LOGGING,
    DNX_SW_STATE_RES_MNGR_ADVANCED_ALGORITHM_INFO_SET_LOGGING,
    DNX_SW_STATE_TEMP_MNGR_CREATE_LOGGING,
    DNX_SW_STATE_TEMP_MNGR_DESTROY_LOGGING,
    DNX_SW_STATE_TEMP_MNGR_ALLOCATE_SINGLE_LOGGING,
    DNX_SW_STATE_TEMP_MNGR_FREE_SINGLE_LOGGING,
    DNX_SW_STATE_TEMP_MNGR_EXCHANGE_LOGGING,
    DNX_SW_STATE_TEMP_MNGR_REPLACE_DATA_LOGGING,
    DNX_SW_STATE_TEMP_MNGR_PROFILE_DATA_GET_LOGGING,
    DNX_SW_STATE_TEMP_MNGR_PROFILE_GET_LOGGING,
    DNX_SW_STATE_TEMP_MNGR_CLEAR_LOGGING,
    DNX_SW_STATE_TEMP_MNGR_FREE_ALL_LOGGING,
    DNX_SW_STATE_TEMP_MNGR_GET_NEXT_LOGGING,
    DNX_SW_STATE_TEMP_MNGR_DUMP_INFO_GET_LOGGING,
    DNX_SW_STATE_STRING_STRINGLEN_LOGGING,
    DNX_SW_STATE_STRING_STRINGNCAT_LOGGING,
    DNX_SW_STATE_STRING_STRINGNCMP_LOGGING,
    DNX_SW_STATE_STRING_STRINGNCPY_LOGGING,
    DNX_SW_STATE_STRING_STRINGGET_LOGGING,
    DNX_SW_STATE_TEMP_MNGR_ADVANCED_ALGORITHM_INFO_SET_LOGGING,
    DNX_SW_STATE_TEMP_MNGR_ADVANCED_ALGORITHM_INFO_GET_LOGGING,
    DNX_SW_STATE_BIT_RANGE_COUNT_LOGGING,

    DNX_SW_STATE_COUNT_LOGGING
} dnx_sw_state_func_type_logging_e;

void dnx_sw_state_log_stamp_journal_entries(
    int unit,
    dnx_sw_state_func_type_logging_e func_type,
    char *format,
    ...);

#if defined(DNX_SW_STATE_LOGGING)
#define DNX_SW_STATE_LOG(unit, func_type, bsl_ls, module, value_addr, format, ...) \
     do { \
        if (DNXC_VERIFY_ALLOWED_GET(unit)) {\
            dnx_sw_state_log(unit, module, func_type, bsl_ls, #func_type, (void*)value_addr, sizeof(*value_addr), format, __VA_ARGS__); \
            dnx_sw_state_log_stamp_journal_entries(unit, func_type, format, __VA_ARGS__); \
        }\
     } while(0)

typedef enum dnx_sw_state_supported_threads_logging
{
    DNX_SW_STATE_NONE_THREAD,
    DNX_SW_STATE_MAIN_THREAD,
    DNX_SW_STATE_BG_THREAD,

    DNX_SW_STATE_ALL_THREADS
} dnx_sw_state_supported_threads_logging_e;

void dnx_sw_state_log(
    int unit,
    uint32 module_id,
    dnx_sw_state_func_type_logging_e func_type,
    uint32 bsl_ls,
    char *func_name,
    void *value_addr,
    uint32 size,
    char *format,
    ...);

void dnx_sw_state_print_mem_to_string(
    void const *vp,
    uint32 n,
    char **str);

void dnx_sw_state_log_by_module_id_enable(
    int unit,
    uint32 module_id);

void dnx_sw_state_log_by_module_id_disable(
    int unit,
    uint32 module_id);

void dnx_sw_state_log_init(
    int unit);

void dnx_sw_state_log_deinit(
    int unit);

void dnx_sw_state_log_by_func_type_enable(
    int unit,
    uint32 f_type);

void dnx_sw_state_log_by_func_type_disable(
    int unit,
    uint32 f_type);

char *dnxc_fuction_type_e_get_name(
    dnx_sw_state_func_type_logging_e value);

void dnx_sw_state_log_by_thread_enable(
    int unit,
    uint32 thread);

void dnx_sw_state_log_by_thread_disable(
    int unit,
    uint32 thread);

uint8 sh_dnxc_swstate_logging_by_module_id_get(
    int unit,
    uint32 module_id);

uint8 sh_dnxc_swstate_logging_by_function_get(
    int unit,
    uint32 f_type);

uint8 sh_dnxc_swstate_logging_by_thread_get(
    int unit,
    uint32 thread);

char *dnx_sw_state_supported_threads_logging_e_get_name(
    dnx_sw_state_supported_threads_logging_e value);

#else

#define DNX_SW_STATE_LOG(unit, func_type, bsl_ls, module, value_addr, format, ...)\
do { \
   dnx_sw_state_log_stamp_journal_entries(unit, func_type, format, __VA_ARGS__); \
} while(0)

#endif
#endif
