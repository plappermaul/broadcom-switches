/*
 *
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *
 * File:	async.h
 * Purpose:	Asynchronous BCM API routines
 * Generator:	mkdispatch 1.54
 */

#ifndef	_BCM_ASYNC_H
#define	_BCM_ASYNC_H

#include <bcm/types.h>
#include <bcm/auth.h>
#include <bcm/bcmi2c.h>
#include <bcm/bfd.h>
#include <bcm/bregex.h>
#include <bcm/collector.h>
#include <bcm/cosq.h>
#include <bcm/cpri.h>
#include <bcm/custom.h>
#include <bcm/eav.h>
#include <bcm/ecn.h>
#include <bcm/error.h>
#include <bcm/extender.h>
#include <bcm/fabric.h>
#include <bcm/failover.h>
#include <bcm/fcmap.h>
#include <bcm/fcoe.h>
#include <bcm/field.h>
#include <bcm/flexctr.h>
#include <bcm/flexdigest.h>
#include <bcm/flexstate.h>
#include <bcm/flow.h>
#include <bcm/flowtracker.h>
#include <bcm/gdpll.h>
#include <bcm/hash.h>
#include <bcm/ifa.h>
#include <bcm/init.h>
#include <bcm/instru.h>
#include <bcm/int.h>
#include <bcm/ipfix.h>
#include <bcm/ipmc.h>
#include <bcm/ipsec.h>
#include <bcm/knet.h>
#include <bcm/knetsync.h>
#include <bcm/l2.h>
#include <bcm/l2gre.h>
#include <bcm/l3.h>
#include <bcm/latency_monitor.h>
#include <bcm/lb.h>
#include <bcm/link.h>
#include <bcm/macsec.h>
#include <bcm/mcast.h>
#include <bcm/mim.h>
#include <bcm/mirror.h>
#include <bcm/module.h>
#include <bcm/mpls.h>
#include <bcm/multicast.h>
#include <bcm/nat.h>
#include <bcm/niv.h>
#include <bcm/oam.h>
#include <bcm/oob.h>
#include <bcm/pkt.h>
#include <bcm/pktio.h>
#include <bcm/pktio_defs.h>
#include <bcm/policer.h>
#include <bcm/port.h>
#include <bcm/ppp.h>
#include <bcm/proxy.h>
#include <bcm/pstats.h>
#include <bcm/ptp.h>
#include <bcm/qos.h>
#include <bcm/range.h>
#include <bcm/rate.h>
#include <bcm/rx.h>
#include <bcm/sat.h>
#include <bcm/srv6.h>
#include <bcm/stack.h>
#include <bcm/stat.h>
#include <bcm/stg.h>
#include <bcm/subport.h>
#include <bcm/sum.h>
#include <bcm/switch.h>
#include <bcm/tdm.h>
#include <bcm/telemetry.h>
#include <bcm/time.h>
#include <bcm/topo.h>
#include <bcm/trill.h>
#include <bcm/trunk.h>
#include <bcm/tsn.h>
#include <bcm/tunnel.h>
#include <bcm/tx.h>
#include <bcm/txbeacon.h>
#include <bcm/udf.h>
#include <bcm/vlan.h>
#include <bcm/vswitch.h>
#include <bcm/vxlan.h>
#include <bcm/wlan.h>
#include <bcm/xflow_macsec.h>

#ifdef	BCM_ASYNC_SUPPORT

typedef void (*bcm_async_cb_t)(void *cookie, int retval);

void	_bcm_shutdown_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_attach_async(int unit, char * type, char * subtype, int remunit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_attach_check_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_attach_early_txrx_async(int unit, char * type, char * subtype, int remunit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_attach_max_async(int * max_units, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_attach_register_async(int unit, bcm_attach_cb_t cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_attach_unregister_async(int unit, bcm_attach_cb_t cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_egress_get_async(int unit, int port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_egress_set_async(int unit, int port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mac_add_async(int unit, int port, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mac_control_get_async(int unit, bcm_auth_mac_control_t type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mac_control_set_async(int unit, bcm_auth_mac_control_t type, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mac_delete_async(int unit, int port, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mac_delete_all_async(int unit, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mode_get_async(int unit, int port, uint32 * modep, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mode_set_async(int unit, int port, uint32 mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_unauth_callback_async(int unit, bcm_auth_cb_t func, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_BFD
void	bcm_bfd_auth_sha1_get_async(int unit, int index, bcm_bfd_auth_sha1_t * sha1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_auth_sha1_set_async(int unit, int index, bcm_bfd_auth_sha1_t * sha1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_auth_simple_password_get_async(int unit, int index, bcm_bfd_auth_simple_password_t * sp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_auth_simple_password_set_async(int unit, int index, bcm_bfd_auth_simple_password_t * sp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_discard_stat_get_async(int unit, bcm_bfd_discard_stat_t * discarded_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_discard_stat_set_async(int unit, bcm_bfd_discard_stat_t * discarded_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_endpoint_create_async(int unit, bcm_bfd_endpoint_info_t * endpoint_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_endpoint_destroy_async(int unit, bcm_bfd_endpoint_t endpoint, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_endpoint_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_endpoint_get_async(int unit, bcm_bfd_endpoint_t endpoint, bcm_bfd_endpoint_info_t * endpoint_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_endpoint_poll_async(int unit, bcm_bfd_endpoint_t endpoint, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_endpoint_stat_get_async(int unit, bcm_bfd_endpoint_t endpoint, bcm_bfd_endpoint_stat_t * ctr_info, uint32 options, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_event_register_async(int unit, bcm_bfd_event_types_t event_types, bcm_bfd_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_event_unregister_async(int unit, bcm_bfd_event_types_t event_types, bcm_bfd_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_status_multi_get_async(int unit, int max_endpoints, bcm_bfd_status_t * status_arr, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_tx_start_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_tx_stop_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_BFD */
void	bcm_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_collector_create_async(int unit, uint32 options, bcm_collector_t * collector_id, bcm_collector_info_t * collector_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_collector_destroy_async(int unit, bcm_collector_t id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_collector_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_collector_export_profile_create_async(int unit, uint32 options, int * export_profile_id, bcm_collector_export_profile_t * export_profile_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_collector_export_profile_destroy_async(int unit, int export_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_collector_export_profile_get_async(int unit, int export_profile_id, bcm_collector_export_profile_t * export_profile_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_collector_export_profile_ids_get_all_async(int unit, int max_size, int * export_profile_ids_list, int * list_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_collector_export_record_register_async(int unit, bcm_collector_t collector_id, bcm_collector_callback_options_t callback_options, bcm_collector_export_record_cb_f callback_fn, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_collector_export_record_unregister_async(int unit, bcm_collector_t collector_id, bcm_collector_callback_options_t callback_options, bcm_collector_export_record_cb_f callback_fn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_collector_get_async(int unit, bcm_collector_t id, bcm_collector_info_t * collector_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_collector_get_all_async(int unit, int max_size, bcm_collector_t * collector_list, int * list_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_collector_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bandwidth_fabric_adjust_get_async(int unit, uint32 flags, bcm_cosq_bandwidth_fabric_adjust_key_t * key, uint32 * bandwidth, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bandwidth_fabric_adjust_set_async(int unit, uint32 flags, bcm_cosq_bandwidth_fabric_adjust_key_t * key, uint32 bandwidth, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_multi_profile_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_bst_stat_id_t bid, int array_size, bcm_cosq_bst_profile_t * profile_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_multi_profile_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_bst_stat_id_t bid, int array_size, bcm_cosq_bst_profile_t * profile_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_profile_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_bst_stat_id_t bid, bcm_cosq_bst_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_profile_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_bst_stat_id_t bid, bcm_cosq_bst_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_clear_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_bst_stat_id_t bid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_extended_clear_async(int unit, bcm_cosq_object_id_t * id, bcm_bst_stat_id_t bid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_extended_get_async(int unit, bcm_cosq_object_id_t * id, bcm_bst_stat_id_t bid, uint32 options, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_extended_get32_async(int unit, bcm_cosq_object_id_t * id, bcm_bst_stat_id_t bid, uint32 options, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_bst_stat_id_t bid, uint32 options, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_get32_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_bst_stat_id_t bid, uint32 options, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_multi_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 options, int max_values, bcm_bst_stat_id_t * id_list, uint64 * values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_multi_get32_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 options, int max_values, bcm_bst_stat_id_t * id_list, uint32 * values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_sync_async(int unit, bcm_bst_stat_id_t bid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_buffer_id_multi_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_dir_t direction, int array_max, bcm_cosq_buffer_id_t * buf_id_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_burst_monitor_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_burst_monitor_dma_config_get_async(int unit, uint32 * host_mem_size, uint32 ** host_mem_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_burst_monitor_dma_config_set_async(int unit, uint32 host_mem_size, uint32 ** host_mem_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_burst_monitor_flow_view_config_get_async(int unit, bcm_cosq_burst_monitor_flow_view_info_t * flow_view_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_burst_monitor_flow_view_config_set_async(int unit, uint32 options, bcm_cosq_burst_monitor_flow_view_info_t * flow_view_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_burst_monitor_flow_view_data_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_burst_monitor_flow_view_data_get_async(int unit, uint32 usr_mem_size, uint8 * usr_mem_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_burst_monitor_flow_view_stats_get_async(int unit, uint32 mem_size, uint8 * mem_addr, int max_num_flows, int view_id, uint32 flags, int * num_flows, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_burst_monitor_get_async(int unit, int max_gports, bcm_gport_t * gport_list, int * num_gports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_burst_monitor_get_current_time_async(int unit, uint64 * time_usecs, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_burst_monitor_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_burst_monitor_set_async(int unit, int num_gports, bcm_gport_t * gport_list, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_burst_monitor_view_summary_get_async(int unit, uint32 mem_size, uint8 * mem_addr, int max_num_views, int * num_views, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_create_async(int unit, bcm_cosq_classifier_t * classifier, int * classifier_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_destroy_async(int unit, int classifier_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_get_async(int unit, int classifier_id, bcm_cosq_classifier_t * classifier, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_id_get_async(int unit, bcm_cosq_classifier_t * classifier, int array_count, bcm_cos_t * priority_array, bcm_cos_queue_t * cosq_array, int * classifier_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_mapping_clear_async(int unit, bcm_gport_t port, int classifier_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_mapping_get_async(int unit, bcm_gport_t port, int classifier_id, bcm_gport_t * queue_group, bcm_cos_t priority, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_mapping_multi_get_async(int unit, bcm_gport_t port, int classifier_id, bcm_gport_t * queue_group, int array_max, bcm_cos_t * priority_array, bcm_cos_queue_t * cosq_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_mapping_multi_set_async(int unit, bcm_gport_t port, int classifier_id, bcm_gport_t queue_group, int array_count, bcm_cos_t * priority_array, bcm_cos_queue_t * cosq_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_mapping_set_async(int unit, bcm_gport_t port, int classifier_id, bcm_gport_t queue_group, bcm_cos_t priority, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_config_get_async(int unit, int * numq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_config_set_async(int unit, int numq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_congestion_mapping_get_async(int unit, int fabric_modid, bcm_cosq_congestion_mapping_info_t * mapping_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_congestion_mapping_set_async(int unit, int fabric_modid, bcm_cosq_congestion_mapping_info_t * mapping_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_control_dynamic_get_async(int unit, bcm_cosq_control_t type, bcm_cosq_dynamic_setting_type_t * dynamic, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_control_extended_get_async(int unit, bcm_cosq_object_id_t * id, bcm_cosq_control_data_t * control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_control_extended_set_async(int unit, bcm_cosq_object_id_t * id, bcm_cosq_control_data_t * control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_control_get_async(int unit, bcm_gport_t port, bcm_cos_queue_t cosq, bcm_cosq_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_control_range_get_async(int unit, bcm_gport_t port, uint32 flags, bcm_cosq_control_range_type_t type, bcm_cosq_range_t * range, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_control_range_set_async(int unit, bcm_gport_t port, uint32 flags, bcm_cosq_control_range_type_t type, bcm_cosq_range_t * range, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_control_set_async(int unit, bcm_gport_t port, bcm_cos_queue_t cosq, bcm_cosq_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_cpu_cosq_enable_get_async(int unit, bcm_cos_queue_t cosq, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_cpu_cosq_enable_set_async(int unit, bcm_cos_queue_t cosq, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_debug_stat_match_get_async(int unit, bcm_port_t port, bcm_cosq_stat_t stat, bcm_cosq_debug_stat_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_debug_stat_match_set_async(int unit, bcm_port_t port, bcm_cosq_stat_t stat, bcm_cosq_debug_stat_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_delay_tolerance_level_get_async(int unit, int delay_tolerance_level, bcm_cosq_delay_tolerance_t * delay_tolerance, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_delay_tolerance_level_set_async(int unit, int delay_tolerance_level, bcm_cosq_delay_tolerance_t * delay_tolerance, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_delay_tolerance_preset_get_async(int unit, bcm_cosq_delay_tolerance_preset_attr_t * preset_attr, bcm_cosq_delay_tolerance_t * delay_tolerance, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_dest_credit_size_get_async(int unit, bcm_module_t dest_modid, uint32 * credit_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_dest_credit_size_set_async(int unit, bcm_module_t dest_modid, uint32 credit_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_get_async(int unit, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_port_get_async(int unit, bcm_port_t port, bcm_cos_queue_t cosq, uint32 color, int * drop_start, int * drop_slope, int * average_time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_port_set_async(int unit, bcm_port_t port, bcm_cos_queue_t cosq, uint32 color, int drop_start, int drop_slope, int average_time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_profile_create_async(int unit, int * profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_profile_destroy_async(int unit, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_profile_get_async(int unit, int profile_id, int max, bcm_cosq_discard_rule_t * rule_array, int * rule_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_profile_update_async(int unit, int profile_id, bcm_cosq_discard_rule_t * rule, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_set_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ebst_control_get_async(int unit, bcm_cosq_ebst_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ebst_control_set_async(int unit, bcm_cosq_ebst_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ebst_data_get_async(int unit, bcm_cosq_object_id_t * object_id, bcm_bst_stat_id_t bid, int array_size, bcm_cosq_ebst_data_entry_t * entry_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ebst_data_stat_info_get_async(int unit, bcm_cosq_object_id_t * object_id, bcm_cosq_ebst_data_stat_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ebst_enable_get_async(int unit, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ebst_enable_set_async(int unit, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ebst_monitor_get_async(int unit, bcm_cosq_object_id_t * object_id, bcm_bst_stat_id_t bid, bcm_cosq_ebst_monitor_t * monitor, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ebst_monitor_set_async(int unit, bcm_cosq_object_id_t * object_id, bcm_bst_stat_id_t bid, bcm_cosq_ebst_monitor_t * monitor, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ebst_threshold_profile_get_async(int unit, bcm_cosq_object_id_t * object_id, bcm_bst_stat_id_t bid, bcm_cosq_ebst_threshold_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ebst_threshold_profile_set_async(int unit, bcm_cosq_object_id_t * object_id, bcm_bst_stat_id_t bid, bcm_cosq_ebst_threshold_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_event_register_async(int unit, bcm_cosq_event_types_t event_types, bcm_gport_t port, bcm_cos_queue_t cosq, bcm_cosq_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_event_unregister_async(int unit, bcm_cosq_event_types_t event_types, bcm_gport_t port, bcm_cos_queue_t cosq, bcm_cosq_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_fc_path_add_async(int unit, bcm_cosq_fc_direction_type_t fc_direction, bcm_cosq_fc_endpoint_t * source, bcm_cosq_fc_endpoint_t * target, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_fc_path_delete_async(int unit, bcm_cosq_fc_direction_type_t fc_direction, bcm_cosq_fc_endpoint_t * source, bcm_cosq_fc_endpoint_t * target, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_fc_path_get_async(int unit, bcm_cosq_fc_direction_type_t fc_direction, bcm_cosq_fc_endpoint_t * source, int target_max, bcm_cosq_fc_endpoint_t * target, int * target_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_generic_control_get_async(int unit, uint32 flags, bcm_gport_t gport, uint32 key, bcm_cosq_generic_control_t type, uint32 * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_generic_control_set_async(int unit, uint32 flags, bcm_gport_t gport, uint32 key, bcm_cosq_generic_control_t type, uint32 arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_add_async(int unit, bcm_gport_t port, int numq, uint32 flags, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_attach_async(int unit, bcm_gport_t sched_port, bcm_gport_t input_port, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_attach_get_async(int unit, bcm_gport_t sched_port, bcm_gport_t * input_port, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_bandwidth_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 * kbits_sec_min, uint32 * kbits_sec_max, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_bandwidth_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 kbits_sec_min, uint32 kbits_sec_max, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_child_get_async(int unit, bcm_gport_t in_gport, bcm_cos_queue_t cosq, bcm_gport_t * out_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_color_size_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_color_t color, uint32 flags, bcm_cosq_gport_size_t * gport_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_color_size_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_color_t color, uint32 flags, bcm_cosq_gport_size_t * gport_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_congestion_config_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_congestion_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_congestion_config_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_congestion_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_connection_get_async(int unit, bcm_cosq_gport_connection_t * gport_connect, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_connection_set_async(int unit, bcm_cosq_gport_connection_t * gport_connect, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_delete_async(int unit, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_destmod_attach_async(int unit, bcm_gport_t gport, bcm_port_t ingress_port, bcm_module_t dest_modid, int fabric_egress_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_destmod_detach_async(int unit, bcm_gport_t gport, bcm_port_t ingress_port, bcm_module_t dest_modid, int fabric_egress_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_detach_async(int unit, bcm_gport_t sched_port, bcm_gport_t input_port, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_discard_extended_get_async(int unit, bcm_cosq_object_id_t * id, bcm_cosq_gport_discard_t * discard, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_discard_extended_set_async(int unit, bcm_cosq_object_id_t * id, bcm_cosq_gport_discard_t * discard, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_discard_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_gport_discard_t * discard, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_discard_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_gport_discard_t * discard, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_dynamic_sched_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_dynamic_state_t state, int * weight, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_dynamic_sched_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_dynamic_state_t state, int weight, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_egress_map_get_async(int unit, bcm_gport_t gport, bcm_cos_t ingress_pri, bcm_color_t ingress_dp, bcm_cos_queue_t * offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_egress_map_set_async(int unit, bcm_gport_t gport, bcm_cos_t ingress_pri, bcm_color_t ingress_dp, bcm_cos_queue_t offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_egress_mapping_get_async(int unit, bcm_gport_t gport, bcm_cos_t * int_pri, bcm_cos_t * cos, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_egress_mapping_set_async(int unit, bcm_gport_t gport, bcm_cos_t int_pri, bcm_cos_t cos, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_egress_multicast_config_get_async(int unit, bcm_gport_t gport, bcm_cos_t ingress_pri, bcm_color_t ingress_dp, uint32 flags, bcm_cosq_egress_multicast_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_egress_multicast_config_set_async(int unit, bcm_gport_t gport, bcm_cos_t ingress_pri, bcm_color_t ingress_dp, uint32 flags, bcm_cosq_egress_multicast_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_enable_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_enable_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_fadt_threshold_get_async(int unit, uint32 flags, bcm_cosq_fadt_info_t * fadt_info, bcm_cosq_fadt_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_fadt_threshold_set_async(int unit, uint32 flags, bcm_cosq_fadt_info_t * fadt_info, bcm_cosq_fadt_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_flow_control_get_async(int unit, bcm_gport_t port, bcm_cos_t int_pri, uint32 * flow_control_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_flow_control_set_async(int unit, bcm_gport_t port, bcm_cos_t int_pri, uint32 flow_control_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_get_async(int unit, bcm_gport_t gport, bcm_gport_t * physical_port, int * num_cos_levels, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_handle_core_get_async(int unit, bcm_core_t core, bcm_cosq_gport_info_core_t * gport_info, bcm_gport_t * out_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_handle_get_async(int unit, bcm_cosq_gport_type_t gport_type, bcm_cosq_gport_info_t * gport_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_info_get_async(int unit, bcm_gport_t gport, bcm_cosq_gport_level_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_mapping_get_async(int unit, bcm_port_t ing_port, bcm_cos_t int_pri, uint32 flags, bcm_gport_t * gport, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_mapping_set_async(int unit, bcm_port_t ing_port, bcm_cos_t int_pri, uint32 flags, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_multipath_add_async(int unit, bcm_gport_t multipath_gport, bcm_gport_t member_gport, bcm_cos_queue_t member_gport_cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_multipath_delete_async(int unit, bcm_gport_t multipath_gport, bcm_gport_t member_gport, bcm_cos_queue_t member_gport_cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_multipath_get_async(int unit, bcm_gport_t multipath_gport, int member_gport_max, bcm_gport_t * member_gport_array, bcm_cos_queue_t * member_gport_cosq_array, int * member_gport_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_parent_get_async(int unit, bcm_gport_t child_port, bcm_cos_queue_t cos, bcm_gport_t * parent_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_pkt_size_adjust_get_async(int unit, bcm_cosq_pkt_size_adjust_info_t * adjust_info, int * delta, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_pkt_size_adjust_set_async(int unit, bcm_cosq_pkt_size_adjust_info_t * adjust_info, int delta, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_pon_link_sla_get_async(int unit, bcm_gport_t gport, bcm_cos_pon_link_sla_t * link_sla, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_pon_link_sla_set_async(int unit, bcm_gport_t gport, bcm_cos_pon_link_sla_t * link_sla, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_queue_attach_async(int unit, uint32 flags, bcm_gport_t ingress_queue, bcm_cos_t ingress_int_pri, bcm_gport_t egress_queue, bcm_cos_t egress_int_pri, int * attach_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_queue_attach_get_async(int unit, bcm_gport_t ingress_queue, bcm_cos_t ingress_int_pri, bcm_gport_t * egress_queue, bcm_cos_t * egress_int_pri, int attach_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_queue_detach_async(int unit, bcm_gport_t ingress_queue, bcm_cos_t ingress_int_pri, int attach_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_queue_offset_mapping_get_async(int unit, uint32 flags, bcm_gport_t gport, int count, bcm_cosq_queue_offset_mapping_key_t * key_array, bcm_cosq_queue_offset_t * offset_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_queue_offset_mapping_set_async(int unit, uint32 flags, bcm_gport_t gport, int count, bcm_cosq_queue_offset_mapping_key_t * key_array, bcm_cosq_queue_offset_t * offset_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_rate_class_create_async(int unit, bcm_gport_t gport, uint32 flags, bcm_cosq_rate_class_create_info_t * create_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_reattach_async(int unit, bcm_gport_t sched_port, bcm_gport_t input_port, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_report_threshold_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_report_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_report_threshold_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_report_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_sched_config_get_async(int unit, bcm_gport_t gport, int sched_mode, int int_pri, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_sched_config_set_async(int unit, bcm_gport_t gport, int sched_mode, int int_pri, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_sched_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, int * mode, int * weight, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_sched_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, int mode, int weight, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_size_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 * bytes_min, uint32 * bytes_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_size_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 bytes_min, uint32 bytes_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_enable_get_async(int unit, bcm_gport_t gport, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_enable_set_async(int unit, bcm_gport_t gport, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_gport_stats_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_gport_stats_t stat, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_sync_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_gport_stats_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_static_threshold_get_async(int unit, uint32 flags, bcm_cosq_static_threshold_info_t * thresh_info, bcm_cosq_static_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_static_threshold_set_async(int unit, uint32 flags, bcm_cosq_static_threshold_info_t * thresh_info, bcm_cosq_static_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_statistic_multi_get_async(int unit, bcm_gport_t gport, bcm_gport_t lgl_gport, bcm_cos_queue_t cosq, int stat_count, bcm_cosq_gport_stats_t * stats_array, int value_count, uint64 * value_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_statistic_multi_set_async(int unit, bcm_gport_t gport, bcm_gport_t lgl_gport, bcm_cos_queue_t cosq, int stat_count, bcm_cosq_gport_stats_t * stats_array, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_threshold_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_threshold_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_traverse_async(int unit, bcm_cosq_gport_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_traverse_by_port_async(int unit, bcm_gport_t port, bcm_cosq_gport_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_vsq_add_async(int unit, bcm_gport_t vsq, bcm_gport_t queue, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_vsq_create_async(int unit, bcm_cosq_vsq_info_t * vsq_info, bcm_gport_t * vsq_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_vsq_delete_async(int unit, bcm_gport_t vsq, bcm_gport_t queue, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_vsq_delete_all_async(int unit, bcm_gport_t vsq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_vsq_destroy_async(int unit, bcm_gport_t vsq_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_vsq_get_async(int unit, bcm_gport_t vsq, int queue_max, bcm_gport_t * queue_array, bcm_cos_queue_t * cosq_array, int * queue_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_hdrm_pool_limit_set_async(int unit, int hdrm_pool, int num_lossless_class, int arr_size, bcm_cosq_pkt_size_dist_t * pkt_dist_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_icgm_resource_stat_get_async(int unit, bcm_cosq_icgm_resource_stat_key_t * stat_key, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_control_frame_get_async(int unit, bcm_port_t port, uint32 flags, uint32 control_frame_index, bcm_cosq_ingress_drop_control_frame_config_t * control_frame_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_control_frame_set_async(int unit, bcm_port_t port, uint32 flags, uint32 control_frame_index, bcm_cosq_ingress_drop_control_frame_config_t * control_frame_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_custom_ether_type_get_async(int unit, bcm_port_t port, uint32 flags, uint32 ether_type_code, uint32 * ether_type_val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_custom_ether_type_set_async(int unit, bcm_port_t port, uint32 flags, uint32 ether_type_code, uint32 ether_type_val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_default_priority_get_async(int unit, bcm_port_t port, uint32 flags, uint32 * default_priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_default_priority_set_async(int unit, bcm_port_t port, uint32 flags, uint32 default_priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_enable_get_async(int unit, bcm_port_t port, uint32 flags, int * enable_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_enable_set_async(int unit, bcm_port_t port, uint32 flags, int enable_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_flex_key_construct_get_async(int unit, bcm_cosq_ingress_drop_flex_key_construct_id_t * key_id, uint32 flags, bcm_cosq_ingress_drop_flex_key_construct_t * flex_key_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_flex_key_construct_set_async(int unit, bcm_cosq_ingress_drop_flex_key_construct_id_t * key_id, uint32 flags, bcm_cosq_ingress_drop_flex_key_construct_t * flex_key_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_flex_key_entry_get_async(int unit, bcm_port_t port, uint32 flags, uint32 key_index, bcm_cosq_ingress_drop_flex_key_entry_t * flex_key_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_flex_key_entry_set_async(int unit, bcm_port_t port, uint32 flags, uint32 key_index, bcm_cosq_ingress_drop_flex_key_entry_t * flex_key_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_map_get_async(int unit, bcm_port_t port, uint32 flags, bcm_cosq_ingress_port_drop_map_t map, uint32 key, int * priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_map_set_async(int unit, bcm_port_t port, uint32 flags, bcm_cosq_ingress_port_drop_map_t map, uint32 key, int priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_mpls_special_label_get_async(int unit, bcm_port_t port, uint32 flags, uint32 label_index, bcm_cosq_ingress_port_drop_mpls_special_label_config_t * label_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_mpls_special_label_set_async(int unit, bcm_port_t port, uint32 flags, uint32 label_index, bcm_cosq_ingress_port_drop_mpls_special_label_config_t * label_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_threshold_get_async(int unit, bcm_port_t port, uint32 flags, int priority, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_port_drop_threshold_set_async(int unit, bcm_port_t port, uint32 flags, int priority, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_ingress_queue_bundle_gport_add_async(int unit, bcm_cosq_ingress_queue_bundle_gport_config_t * config, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_inst_congestion_info_get_async(int unit, uint32 flags, bcm_cosq_inst_congestion_info_key_t * key, bcm_cosq_inst_congestion_info_data_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_latency_profile_create_async(int unit, int flags, bcm_gport_t * profile_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_latency_profile_destroy_async(int unit, int flags, bcm_gport_t profile_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mapping_get_async(int unit, bcm_cos_t priority, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mapping_set_async(int unit, bcm_cos_t priority, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_max_latency_pkts_get_async(int unit, bcm_gport_t gport, uint32 flags, int max_count, bcm_cosq_max_latency_pkts_t * max_latency_pkts, int * actual_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mirror_on_drop_group_get_async(int unit, uint32 flags, int group_id, bcm_cosq_mirror_on_drop_group_info_t * group_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mirror_on_drop_group_set_async(int unit, uint32 flags, int group_id, bcm_cosq_mirror_on_drop_group_info_t * group_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mod_control_get_async(int unit, bcm_cosq_mod_control_t * control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mod_control_set_async(int unit, bcm_cosq_mod_control_t * control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mod_profile_create_async(int unit, uint32 options, int * profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mod_profile_destroy_async(int unit, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mod_profile_get_async(int unit, int profile_id, bcm_cosq_mod_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mod_profile_set_async(int unit, int profile_id, bcm_cosq_mod_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mod_stat_get_async(int unit, bcm_cosq_object_id_t * id, bcm_cosq_mod_stat_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mod_stat_set_async(int unit, bcm_cosq_object_id_t * id, bcm_cosq_mod_stat_t stat, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_class_config_profile_get_async(int unit, int profile_id, int max_count, bcm_cosq_pfc_class_map_config_t * config_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_class_config_profile_set_async(int unit, int profile_id, int count, bcm_cosq_pfc_class_map_config_t * config_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_class_mapping_get_async(int unit, bcm_gport_t port, int array_max, bcm_cosq_pfc_class_mapping_t * mapping_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_class_mapping_set_async(int unit, bcm_gport_t port, int array_count, bcm_cosq_pfc_class_mapping_t * mapping_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_config_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 flags, bcm_cosq_pfc_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_config_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 flags, bcm_cosq_pfc_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_dd_recovery_mode_get_async(int unit, bcm_port_t port, bcm_cosq_pfc_dd_recovery_mode_t * recovery_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_dd_recovery_mode_set_async(int unit, bcm_port_t port, bcm_cosq_pfc_dd_recovery_mode_t recovery_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_deadlock_config_get_async(int unit, int priority, bcm_cosq_pfc_deadlock_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_deadlock_config_set_async(int unit, int priority, bcm_cosq_pfc_deadlock_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_deadlock_control_get_async(int unit, bcm_port_t port, int pfc_priority, bcm_cosq_pfc_deadlock_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_deadlock_control_set_async(int unit, bcm_port_t port, int pfc_priority, bcm_cosq_pfc_deadlock_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_deadlock_info_get_async(int unit, int priority, bcm_cosq_pfc_deadlock_info_t * pfc_deadlock_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_deadlock_queue_config_get_async(int unit, bcm_gport_t gport, bcm_cosq_pfc_deadlock_queue_config_t * q_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_deadlock_queue_config_set_async(int unit, bcm_gport_t gport, bcm_cosq_pfc_deadlock_queue_config_t * q_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_deadlock_queue_status_get_async(int unit, bcm_gport_t gport, uint8 * deadlock_status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_deadlock_recovery_event_register_async(int unit, bcm_cosq_pfc_deadlock_recovery_event_cb_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_deadlock_recovery_event_unregister_async(int unit, bcm_cosq_pfc_deadlock_recovery_event_cb_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_deadlock_recovery_exit_async(int unit, bcm_port_t port, bcm_cos_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_deadlock_recovery_start_async(int unit, bcm_port_t port, bcm_cos_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pkt_size_adjust_delta_map_get_async(int unit, int delta, int * final_delta, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pkt_size_adjust_delta_map_set_async(int unit, int delta, int final_delta, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_bandwidth_get_async(int unit, bcm_port_t port, bcm_cos_queue_t cosq, uint32 * kbits_sec_min, uint32 * kbits_sec_max, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_bandwidth_set_async(int unit, bcm_port_t port, bcm_cos_queue_t cosq, uint32 kbits_sec_min, uint32 kbits_sec_max, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_mapping_get_async(int unit, bcm_port_t port, bcm_cos_t priority, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_mapping_multi_get_async(int unit, bcm_port_t port, int count, bcm_cos_t * priority_array, bcm_cos_queue_t * cosq_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_mapping_multi_set_async(int unit, bcm_port_t port, int count, bcm_cos_t * priority_array, bcm_cos_queue_t * cosq_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_mapping_set_async(int unit, bcm_port_t port, bcm_cos_t priority, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_optimized_pfc_group_num_get_async(int unit, bcm_port_t port, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_prigrp_hdrm_set_async(int unit, bcm_port_t port, uint32 pri_bmp, int cable_len, int arr_size, bcm_cosq_pkt_size_dist_t * pkt_dist_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_priority_group_property_get_async(int unit, bcm_port_t port, int priority_group_id, bcm_cosq_port_prigroup_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_priority_group_property_set_async(int unit, bcm_port_t port, int priority_group_id, bcm_cosq_port_prigroup_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_profile_get_async(int unit, bcm_port_t port, bcm_cosq_profile_type_t profile_type, int * profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_profile_set_async(int unit, bcm_port_t port, bcm_cosq_profile_type_t profile_type, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_sched_config_get_async(int unit, bcm_pbmp_t pbm, int weight_arr_size, int * weights, int * weight_arr_count, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_sched_config_set_async(int unit, bcm_pbmp_t pbm, int mode, int weight_arr_size, int * weights, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_sched_get_async(int unit, bcm_pbmp_t pbm, int * mode, int weights[BCM_COS_COUNT], int * delay, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_sched_set_async(int unit, bcm_pbmp_t pbm, int mode, const int weights[BCM_COS_COUNT], int delay, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_priority_get_async(int unit, int start_queue, int end_queue, int * pri_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_priority_group_mapping_profile_get_async(int unit, int profile_index, bcm_cosq_priority_group_mapping_profile_type_t type, int array_max, int * arg, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_priority_group_mapping_profile_set_async(int unit, int profile_index, bcm_cosq_priority_group_mapping_profile_type_t type, int array_count, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_priority_group_pfc_priority_mapping_profile_get_async(int unit, int profile_id, int array_max, int * pg_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_priority_group_pfc_priority_mapping_profile_set_async(int unit, int profile_id, int array_count, int * pg_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_priority_mapping_get_all_async(int unit, bcm_gport_t gport, int index, bcm_cosq_priority_mapping_t type, int pri_max, int * pri_array, int * pri_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_priority_profile_get_async(int unit, int pri_profile_id, int * count, bcm_cosq_gport_priority_profile_t * pri_profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_priority_profile_set_async(int unit, int pri_profile_id, int count, bcm_cosq_gport_priority_profile_t * pri_profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_priority_set_async(int unit, int start_queue, int end_queue, int pri_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_profile_info_inuse_get_async(int unit, bcm_cosq_profile_type_t profile_type, int profile_id, int * in_use, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_profile_info_portlist_get_async(int unit, bcm_cosq_profile_type_t profile_type, int profile_id, int max_port_count, bcm_port_t * port_list, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_profile_mapping_get_async(int unit, bcm_gport_t gport_to_map, bcm_cos_queue_t cosq, uint32 flags, bcm_switch_profile_mapping_t * profile_mapping, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_profile_mapping_set_async(int unit, bcm_gport_t gport_to_map, bcm_cos_queue_t cosq, uint32 flags, bcm_switch_profile_mapping_t * profile_mapping, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_profile_property_dynamic_get_async(int unit, bcm_cosq_profile_type_t profile_type, bcm_cosq_dynamic_setting_type_t * dynamic, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_qcn_config_get_async(int unit, bcm_gport_t port, bcm_cos_queue_t cosq, uint32 flags, bcm_cosq_qcn_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_qcn_config_set_async(int unit, bcm_gport_t port, bcm_cos_queue_t cosq, uint32 flags, bcm_cosq_qcn_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_resource_allocation_get_async(int unit, uint32 flags, bcm_cosq_resource_t resource, bcm_cosq_allocation_entity_t * target, bcm_cosq_resource_amounts_t * amounts, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_resource_allocation_set_async(int unit, uint32 flags, bcm_cosq_resource_t resource, bcm_cosq_allocation_entity_t * target, bcm_cosq_resource_amounts_t * amounts, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_safc_class_mapping_get_async(int unit, bcm_gport_t port, int array_max, bcm_cosq_safc_class_mapping_t * mapping_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_safc_class_mapping_set_async(int unit, bcm_gport_t port, int array_count, bcm_cosq_safc_class_mapping_t * mapping_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_sched_config_get_async(int unit, int weight_arr_size, int * weights, int * weight_arr_count, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_sched_config_set_async(int unit, int mode, int weight_arr_size, int * weights, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_sched_get_async(int unit, int * mode, int weights[BCM_COS_COUNT], int * delay, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_sched_set_async(int unit, int mode, const int weights[BCM_COS_COUNT], int delay, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_sched_weight_max_get_async(int unit, int mode, int * weight_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_schedq_mapping_get_async(int unit, int profile_index, int array_max, bcm_cosq_mapping_t * cosq_mapping_arr, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_schedq_mapping_set_async(int unit, int profile_index, int size, bcm_cosq_mapping_t * cosq_mapping_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_scheduler_gport_add_async(int unit, uint32 flags, bcm_cosq_scheduler_gport_params_t * params, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_scheduler_gport_get_async(int unit, uint32 flags, bcm_gport_t gport, bcm_cosq_scheduler_gport_params_t * params, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_service_pool_get_async(int unit, bcm_service_pool_id_t id, bcm_cosq_service_pool_t * cosq_service_pool, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_service_pool_override_get_async(int unit, bcm_cosq_service_pool_override_type_t type, bcm_service_pool_id_t * service_pool, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_service_pool_override_set_async(int unit, bcm_cosq_service_pool_override_type_t type, bcm_service_pool_id_t service_pool, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_service_pool_set_async(int unit, bcm_service_pool_id_t id, bcm_cosq_service_pool_t cosq_service_pool, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_slow_profile_get_async(int unit, bcm_cosq_slow_level_t * slow_level, bcm_cosq_slow_profile_attributes_t * attr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_slow_profile_set_async(int unit, bcm_cosq_slow_level_t * slow_level, bcm_cosq_slow_profile_attributes_t * attr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_src_vsqs_gport_add_async(int unit, bcm_gport_t port, bcm_cosq_src_vsqs_gport_config_t * config, bcm_gport_t * src_port_vsq_gport, bcm_gport_t * pg_base_vsq_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_src_vsqs_gport_get_async(int unit, bcm_gport_t port, bcm_cosq_src_vsqs_gport_config_t * config, bcm_gport_t * src_port_vsq_gport, bcm_gport_t * pg_base_vsq_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_config_get_async(int unit, int stat_count, bcm_cosq_stat_t * stat_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_config_set_async(int unit, int stat_count, bcm_cosq_stat_t * stat_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_get32_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_info_get_async(int unit, int flags, bcm_cosq_stat_info_key_t * key, bcm_cosq_stat_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_info_set_async(int unit, int flags, bcm_cosq_stat_info_key_t * key, bcm_cosq_stat_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_obj_map_get_async(int unit, int flags, bcm_cosq_obj_map_key_t * key, uint32 * object_stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_obj_map_set_async(int unit, int flags, bcm_cosq_obj_map_key_t * key, uint32 object_stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_set32_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_sync_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_sync_get32_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_sync_multi_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, int nstat, bcm_cosq_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_sync_multi_get32_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, int nstat, bcm_cosq_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subport_congestion_config_get_async(int unit, bcm_gport_t gport, bcm_cosq_subport_congestion_type_t congestion_type, bcm_cosq_subport_congestion_config_t * congestion_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subport_congestion_config_set_async(int unit, bcm_gport_t gport, bcm_cosq_subport_congestion_type_t congestion_type, bcm_cosq_subport_congestion_config_t * congestion_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subport_flow_control_get_async(int unit, bcm_gport_t subport, bcm_gport_t * sched_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subport_flow_control_set_async(int unit, bcm_gport_t subport, bcm_gport_t sched_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subport_pfc_class_mapping_get_async(int unit, bcm_gport_t gport, bcm_subport_cos_to_pfc_pri_map_t * cos_to_pfc_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subport_pfc_class_mapping_set_async(int unit, bcm_gport_t subport_gport, bcm_subport_cos_to_pfc_pri_map_t * cos_to_pfc_map, int * cos_to_pfc_map_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subscriber_map_add_async(int unit, bcm_cosq_subscriber_map_t * map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subscriber_map_delete_async(int unit, bcm_cosq_subscriber_map_t * map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subscriber_map_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subscriber_map_get_async(int unit, bcm_cosq_subscriber_map_t * map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subscriber_traverse_async(int unit, bcm_cosq_subscriber_map_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_sysport_ingress_queue_map_get_async(int unit, uint32 flags, bcm_gport_t sysport, bcm_gport_t * ingress_queue, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_sysport_ingress_queue_map_set_async(int unit, uint32 flags, bcm_gport_t sysport, bcm_gport_t ingress_queue, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tas_control_get_async(int unit, bcm_gport_t port, bcm_cosq_tas_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tas_control_set_async(int unit, bcm_gport_t port, bcm_cosq_tas_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tas_profile_commit_async(int unit, bcm_gport_t port, bcm_cosq_tas_profile_id_t pid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tas_profile_create_async(int unit, bcm_gport_t port, bcm_cosq_tas_profile_t * profile, bcm_cosq_tas_profile_id_t * pid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tas_profile_destroy_async(int unit, bcm_gport_t port, bcm_cosq_tas_profile_id_t pid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tas_profile_destroy_all_async(int unit, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tas_profile_get_async(int unit, bcm_gport_t port, bcm_cosq_tas_profile_id_t pid, bcm_cosq_tas_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tas_profile_set_async(int unit, bcm_gport_t port, bcm_cosq_tas_profile_id_t pid, bcm_cosq_tas_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tas_profile_status_get_async(int unit, bcm_gport_t port, bcm_cosq_tas_profile_id_t pid, bcm_cosq_tas_profile_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tas_profile_traverse_async(int unit, bcm_gport_t port, bcm_cosq_tas_profile_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tas_status_get_async(int unit, bcm_gport_t port, bcm_cosq_tas_status_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_TCB
void	bcm_cosq_tcb_buffer_multi_get_async(int unit, bcm_cosq_buffer_id_t buffer_id, int array_max, bcm_cosq_tcb_buffer_t * buffer_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tcb_cb_register_async(int unit, bcm_cosq_tcb_callback_t fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tcb_cb_unregister_async(int unit, bcm_cosq_tcb_callback_t fn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tcb_config_get_async(int unit, bcm_cosq_buffer_id_t buffer_id, bcm_cosq_tcb_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tcb_config_set_async(int unit, bcm_cosq_buffer_id_t buffer_id, bcm_cosq_tcb_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tcb_control_get_async(int unit, int buffer_id, bcm_cosq_tcb_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tcb_control_set_async(int unit, bcm_cosq_buffer_id_t buffer_id, bcm_cosq_tcb_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tcb_event_multi_get_async(int unit, bcm_cosq_buffer_id_t buffer_id, int array_max, bcm_cosq_tcb_event_t * event_array, int * array_count, int * overflow_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tcb_gport_threshold_mapping_get_async(int unit, bcm_cosq_object_id_t * id, int * profile_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tcb_gport_threshold_mapping_set_async(int unit, bcm_cosq_object_id_t * id, int profile_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tcb_threshold_profile_create_async(int unit, int flags, bcm_cosq_buffer_id_t buffer_id, bcm_cosq_tcb_threshold_profile_t * threshold, int * profile_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tcb_threshold_profile_destroy_async(int unit, bcm_cosq_buffer_id_t buffer_id, int profile_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_tcb_threshold_profile_get_async(int unit, bcm_cosq_buffer_id_t buffer_id, int profile_index, bcm_cosq_tcb_threshold_profile_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_TCB */
void	bcm_cosq_voq_connector_gport_add_async(int unit, bcm_cosq_voq_connector_gport_t * config, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_voq_connector_gport_get_async(int unit, bcm_gport_t gport, bcm_cosq_voq_connector_gport_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_decap_presentation_time_config_get_async(int unit, bcm_port_t port, bcm_cpri_decap_presentation_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_decap_presentation_time_config_set_async(int unit, bcm_port_t port, bcm_cpri_decap_presentation_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_encap_control_queue_tag_to_flow_id_map_set_async(int unit, int port, uint32 tag_id, uint32 flow_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_encap_presentation_time_config_get_async(int unit, bcm_port_t port, bcm_cpri_presentation_ts_attribute_t attribute, bcm_cpri_presentation_time_t * time_offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_encap_presentation_time_config_set_async(int unit, bcm_port_t port, bcm_cpri_presentation_ts_attribute_t attribute, bcm_cpri_presentation_time_t * time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_1588_timestamp_capture_config_get_async(int unit, bcm_port_t port, bcm_cpri_dir_t direction, bcm_cpri_1588_capture_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_1588_timestamp_capture_config_set_async(int unit, bcm_port_t port, bcm_cpri_dir_t direction, bcm_cpri_1588_capture_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_1588_timestamp_config_get_async(int unit, bcm_port_t port, bcm_cpri_dir_t direction, bcm_cpri_1588_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_1588_timestamp_config_set_async(int unit, bcm_port_t port, bcm_cpri_dir_t direction, bcm_cpri_1588_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_1588_timestamp_get_async(int unit, bcm_port_t port, bcm_cpri_dir_t direction, bcm_cpri_1588_ts_type_t type, int max_count, int * count, bcm_cpri_1588_timestamp_t * ts_list, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_1588_timestamp_ts_config_get_async(int unit, bcm_port_t port, bcm_cpri_dir_t direction, bcm_cpri_1588_ts_type_t type, bcm_cpri_1588_timestamp_ts_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_1588_timestamp_ts_config_set_async(int unit, bcm_port_t port, bcm_cpri_dir_t direction, bcm_cpri_1588_ts_type_t type, bcm_cpri_1588_timestamp_ts_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_agnostic_config_get_async(int unit, bcm_port_t port, bcm_cpri_dir_t dir, int * enable, bcm_cpri_port_agnostic_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_agnostic_config_set_async(int unit, bcm_port_t port, bcm_cpri_dir_t dir, int enable, bcm_cpri_port_agnostic_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_compression_lookup_table_get_async(int unit, bcm_gport_t port, int max_depth, int * table_depth, uint32 * comp_table, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_compression_lookup_table_set_async(int unit, bcm_gport_t port, int table_depth, uint32 * comp_table, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_compression_saturation_config_get_async(int unit, bcm_port_t port, uint32 * threshold_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_compression_saturation_config_set_async(int unit, bcm_port_t port, uint32 threshold_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_cw_fast_eth_config_get_async(int unit, int port, bcm_cpri_fast_eth_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_cw_fast_eth_config_set_async(int unit, int port, bcm_cpri_fast_eth_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_cw_slow_hdlc_config_get_async(int unit, int port, bcm_cpri_slow_hdlc_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_cw_slow_hdlc_config_set_async(int unit, int port, bcm_cpri_slow_hdlc_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_debug_clear_async(int unit, bcm_gport_t port, bcm_cpri_debug_attr_t type, int index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_debug_get_async(int unit, bcm_gport_t port, bcm_cpri_debug_attr_t type, int index, int buffer_size, uint32 * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_debug_set_async(int unit, bcm_gport_t port, bcm_cpri_debug_attr_t type, int index, int buffer_size, uint32 * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_ethertype_get_async(int unit, bcm_gport_t port, bcm_cpri_ethertype_t type, uint16 * tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_ethertype_set_async(int unit, bcm_gport_t port, bcm_cpri_ethertype_t type, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_flow_config_clear_async(int unit, bcm_gport_t port, uint8 roe_subtype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_flow_config_get_async(int unit, bcm_gport_t port, uint8 roe_subtype, bcm_cpri_decap_flow_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_flow_config_set_async(int unit, bcm_gport_t port, uint8 roe_subtype, bcm_cpri_decap_flow_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_flow_to_queue_mapping_clear_async(int unit, bcm_gport_t port, uint32 flow_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_flow_to_queue_mapping_get_async(int unit, bcm_gport_t port, uint32 flow_id, uint32 * queue_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_flow_to_queue_mapping_set_async(int unit, bcm_gport_t port, uint32 flow_id, uint32 queue_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_queue_flow_control_get_async(int unit, bcm_gport_t port, uint32 queue_num, uint32 * xon_threshold, uint32 * xoff_threshold, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_queue_flow_control_set_async(int unit, bcm_gport_t port, uint32 queue_num, uint32 xon_threshold, uint32 xoff_threshold, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_queue_to_ordering_info_index_get_async(int unit, bcm_gport_t port, uint32 queue_num, uint32 * ordering_info_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_queue_to_ordering_info_index_set_async(int unit, bcm_gport_t port, uint32 queue_num, uint32 ordering_info_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_roe_ordering_info_get_async(int unit, bcm_gport_t port, int index, bcm_cpri_decap_roe_oi_t * ordering_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_roe_ordering_info_set_async(int unit, bcm_gport_t port, int index, bcm_cpri_decap_roe_oi_t * ordering_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_roe_ordering_sequence_offset_get_async(int unit, bcm_gport_t port, int queue, bcm_cpri_roe_oi_seq_offset_t * seq_offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_roe_ordering_sequence_offset_set_async(int unit, bcm_gport_t port, int queue, bcm_cpri_roe_oi_seq_offset_t * seq_offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_secondary_key_to_queue_mapping_get_async(int unit, bcm_port_t port, uint32 secondary_key, uint32 * queue_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decap_secondary_key_to_queue_mapping_set_async(int unit, bcm_port_t port, uint32 secondary_key, uint32 queue_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decompression_lookup_table_get_async(int unit, bcm_gport_t port, int max_depth, int * table_depth, uint32 * comp_table, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decompression_lookup_table_set_async(int unit, bcm_gport_t port, int table_depth, uint32 * comp_table, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decompression_saturation_config_get_async(int unit, bcm_port_t port, uint32 * sat_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_decompression_saturation_config_set_async(int unit, bcm_port_t port, uint32 sat_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_encap_get_async(int unit, bcm_gport_t port, int queue_num, bcm_cpri_encap_info_t * encap_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_encap_roe_entry_macda_get_async(int unit, bcm_gport_t port, int index, bcm_mac_t * macaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_encap_roe_entry_macda_set_async(int unit, bcm_gport_t port, int index, bcm_mac_t macaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_encap_roe_entry_macsa_get_async(int unit, bcm_gport_t port, int index, bcm_mac_t * macaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_encap_roe_entry_macsa_set_async(int unit, bcm_gport_t port, int index, bcm_mac_t macaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_encap_roe_entry_vlan_get_async(int unit, bcm_gport_t port, uint32 flags, uint32 index, bcm_vlan_t * vlan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_encap_roe_entry_vlan_set_async(int unit, bcm_gport_t port, uint32 flags, uint32 index, bcm_vlan_t vlan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_encap_roe_ordering_info_get_async(int unit, bcm_gport_t port, int index, bcm_cpri_encap_roe_oi_t * ordering_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_encap_roe_ordering_info_set_async(int unit, bcm_gport_t port, int index, bcm_cpri_encap_roe_oi_t * ordering_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_encap_roe_ordering_sequence_offset_get_async(int unit, bcm_gport_t port, int queue, int control, bcm_cpri_roe_oi_seq_offset_t * seq_offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_encap_roe_ordering_sequence_offset_set_async(int unit, bcm_gport_t port, int queue, int control, bcm_cpri_roe_oi_seq_offset_t * seq_offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_encap_set_async(int unit, bcm_gport_t port, int queue_num, bcm_cpri_encap_info_t * encap_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_encap_vlan_config_get_async(int unit, bcm_gport_t port, bcm_cpri_encap_vlan_config_t * vlan_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_encap_vlan_config_set_async(int unit, bcm_gport_t port, bcm_cpri_encap_vlan_config_t * vlan_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_fec_aux_config_get_async(int unit, bcm_gport_t port, bcm_cpri_fec_aux_config_t param_id, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_fec_aux_config_set_async(int unit, bcm_gport_t port, bcm_cpri_fec_aux_config_t param_id, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_fec_enable_get_async(int unit, bcm_gport_t port, bcm_cpri_dir_t dir, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_fec_enable_set_async(int unit, bcm_gport_t port, bcm_cpri_dir_t dir, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_fec_stat_get_async(int unit, bcm_gport_t port, bcm_cpri_fec_stat_type_t type, uint32 * counter_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_fec_timestamp_config_get_async(int unit, bcm_gport_t port, bcm_cpri_dir_t dir, bcm_cpri_fec_timestamp_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_fec_timestamp_config_set_async(int unit, bcm_gport_t port, bcm_cpri_dir_t dir, bcm_cpri_fec_timestamp_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_frame_config_set_async(int unit, bcm_port_t port, bcm_cpri_port_frame_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_interrupt_callback_register_async(int unit, bcm_cpri_interrupt_type_t cpri_intr_type, bcm_cpri_port_interrupt_callback_t callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_interrupt_callback_unregister_async(int unit, bcm_cpri_interrupt_type_t cpri_intr_type, bcm_cpri_port_interrupt_callback_t callback, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_interrupt_enable_get_async(int unit, bcm_port_t port, bcm_cpri_interrupt_type_t cpri_intr_type, int data, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_interrupt_enable_set_async(int unit, bcm_port_t port, bcm_cpri_interrupt_type_t cpri_intr_type, int data, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_agnostic_mode_config_get_async(int unit, bcm_port_t port, bcm_cpri_dir_t direction, int * enable, bcm_cpri_port_rsvd4_agnostic_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_agnostic_mode_config_set_async(int unit, bcm_port_t port, bcm_cpri_dir_t direction, int enable, bcm_cpri_port_rsvd4_agnostic_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_cm_fast_eth_config_set_async(int unit, int port, int control_flow_id, bcm_rsvd4_fast_eth_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_dbm_entry_clear_async(int unit, bcm_gport_t port, int index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_dbm_entry_get_async(int unit, bcm_gport_t port, int index, bcm_rsvd4_dbm_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_dbm_entry_set_async(int unit, bcm_gport_t port, int index, bcm_rsvd4_dbm_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_rx_bfn_sync_config_set_async(int unit, bcm_gport_t port, uint16 master_frame_count, uint64 master_frame_start, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_rx_control_flow_add_async(int unit, int port, int control_flow_id, bcm_rsvd4_control_flow_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_rx_control_flow_delete_async(int unit, int port, int control_flow_id, bcm_rsvd4_control_flow_config_t * control_flow_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_rx_current_frame_sync_info_get_async(int unit, bcm_gport_t port, bcm_rsvd4_frame_sync_info_t * frame_sync_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_rx_flow_add_async(int unit, bcm_gport_t port, int flow_id, bcm_rsvd4_rx_flow_info_t * flow_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_rx_flow_delete_async(int unit, bcm_gport_t port, int flow_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_rx_frame_config_debug_set_async(int unit, bcm_gport_t port, bcm_rsvd4_rx_config_t config_type, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_rx_frame_config_get_async(int unit, bcm_gport_t port, bcm_rsvd4_rx_frame_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_rx_frame_config_set_async(int unit, bcm_gport_t port, bcm_rsvd4_rx_frame_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_rx_fsm_control_get_async(int unit, bcm_gport_t port, bcm_rsvd4_rx_fsm_control_t control_type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_rx_fsm_control_set_async(int unit, bcm_gport_t port, bcm_rsvd4_rx_fsm_control_t control_type, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_rx_fsm_state_set_async(int unit, bcm_gport_t port, bcm_rsvd4_rx_fsm_state_t state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_rx_override_set_async(int unit, bcm_gport_t port, bcm_rsvd4_rx_params_t parameter, int enable, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_secondary_dbm_entry_clear_async(int unit, bcm_gport_t port, int index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_secondary_dbm_entry_get_async(int unit, bcm_gport_t port, int index, bcm_rsvd4_secondary_dbm_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_secondary_dbm_entry_set_async(int unit, bcm_gport_t port, int index, bcm_rsvd4_secondary_dbm_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_sync_profile_entry_get_async(int unit, int port, int index, bcm_rsvd4_sync_profile_entry_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_sync_profile_entry_set_async(int unit, int port, int index, bcm_rsvd4_sync_profile_entry_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_cm_eth_config_set_async(int unit, int port, bcm_rsvd4_tx_cm_eth_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_cm_hdr_config_entry_set_async(int unit, int port, int index, bcm_rsvd4_tx_cm_hdr_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_cm_hdr_lkup_entry_set_async(int unit, int port, int flow_id, int header_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_cm_raw_config_set_async(int unit, int port, bcm_rsvd4_tx_cm_raw_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_cm_tunnel_crc_config_set_async(int unit, int port, bcm_rsvd4_cm_tunnel_crc_option_t crc_option, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_control_flow_add_async(int unit, int port, int control_flow_id, bcm_rsvd4_tx_control_flow_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_control_flow_group_member_add_async(int unit, int port, bcm_rsvd4_control_group_id_t group_num, bcm_rsvd4_tx_control_flow_group_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_control_flow_group_member_delete_async(int unit, int port, bcm_rsvd4_control_group_id_t group_num, bcm_rsvd4_priority_t priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_current_frame_sync_info_get_async(int unit, bcm_gport_t port, bcm_rsvd4_frame_sync_info_t * frame_sync_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_flow_add_async(int unit, bcm_gport_t port, int flow_id, bcm_rsvd4_tx_flow_info_t * flow_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_flow_delete_async(int unit, bcm_gport_t port, int flow_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_frame_config_debug_set_async(int unit, bcm_gport_t port, bcm_rsvd4_tx_config_t config_type, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_frame_config_get_async(int unit, bcm_gport_t port, bcm_rsvd4_tx_frame_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_frame_config_set_async(int unit, bcm_gport_t port, bcm_rsvd4_tx_frame_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_fsm_control_get_async(int unit, bcm_gport_t port, bcm_rsvd4_tx_fsm_control_t control_type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_fsm_control_set_async(int unit, bcm_gport_t port, bcm_rsvd4_tx_fsm_control_t control_type, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_fsm_state_set_async(int unit, bcm_gport_t port, bcm_rsvd4_tx_fsm_state_t state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_modulo_rule_entry_get_async(int unit, bcm_gport_t port, uint32 modulo_rule_num, bcm_cpri_tx_rule_type_t modulo_rule_type, bcm_cpri_modulo_rule_entry_t * modulo_rule, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_modulo_rule_entry_set_async(int unit, bcm_gport_t port, uint32 modulo_rule_num, bcm_cpri_tx_rule_type_t modulo_rule_type, bcm_cpri_modulo_rule_entry_t * modulo_rule, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_override_set_async(int unit, bcm_gport_t port, bcm_rsvd4_tx_params_t parameter, int enable, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_position_entry_get_async(int unit, bcm_gport_t port, uint32 pos_index, bcm_cpri_dbm_position_entry_t * pos_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rsvd4_tx_position_entry_set_async(int unit, bcm_gport_t port, uint32 pos_index, bcm_cpri_dbm_position_entry_t * pos_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_axc_frame_add_async(int unit, bcm_gport_t port, int axc_id, bcm_cpri_axc_frame_info_t * axc_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_axc_frame_delete_async(int unit, bcm_gport_t port, int axc_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_axc_frame_get_async(int unit, bcm_gport_t port, int axc_id, bcm_cpri_axc_frame_info_t * axc_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_axc_frame_get_all_async(int unit, bcm_gport_t port, int max_count, bcm_cpri_axc_frame_info_t * axc_info_list, int * axc_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_gcw_config_get_async(int unit, int port, uint8 index, bcm_cpri_rx_gcw_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_gcw_config_set_async(int unit, int port, uint8 index, bcm_cpri_rx_gcw_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_gcw_word_get_async(int unit, bcm_port_t port, int group_index, uint16 * gcw_word, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_l1_inband_info_get_async(int unit, int port, bcm_cpri_cw_l1_inband_info_t * l1_inband_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_l1_signal_protection_get_async(int unit, int port, uint32 signal_map, uint32 * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_l1_signal_protection_set_async(int unit, int port, uint32 signal_map, uint32 enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_rsvd5_config_get_async(int unit, int port, bcm_cpri_rx_rsvd5_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_rsvd5_config_set_async(int unit, int port, bcm_cpri_rx_rsvd5_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_sync_info_get_async(int unit, int port, uint32 * hyper_frame_num, uint32 * radio_frame_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_vsd_config_get_async(int unit, int port, bcm_cpri_rx_vsd_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_vsd_config_set_async(int unit, int port, bcm_cpri_rx_vsd_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_vsd_ctrl_flow_add_async(int unit, int port, uint16 group_id, bcm_cpri_rx_vsd_flow_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_vsd_ctrl_flow_delete_async(int unit, int port, uint16 group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_vsd_ctrl_flow_get_async(int unit, int port, uint16 group_id, bcm_cpri_rx_vsd_flow_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_vsd_raw_config_get_async(int unit, int port, uint8 vsd_raw_id, bcm_cpri_rx_vsd_raw_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_cw_vsd_raw_config_set_async(int unit, int port, uint8 vsd_raw_id, bcm_cpri_rx_vsd_raw_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_pipeline_clear_async(int unit, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_speed_get_async(int unit, bcm_gport_t port, bcm_cpri_port_type_t * port_type, bcm_cpri_port_speed_t * speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_speed_set_async(int unit, bcm_gport_t port, bcm_cpri_port_type_t port_type, bcm_cpri_port_speed_t speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_tag_config_set_async(int unit, int port, bcm_cpri_control_tag_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_tag_entry_add_async(int unit, int port, bcm_cpri_tag_gen_entry_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_rx_tag_entry_delete_async(int unit, int port, bcm_cpri_tag_gen_entry_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_stat_get_async(int unit, bcm_gport_t port, bcm_cpri_stat_type_t type, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tunnel_mode_config_get_async(int unit, bcm_port_t port, bcm_cpri_dir_t direction, int * enable, bcm_cpri_port_tunnel_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tunnel_mode_config_set_async(int unit, bcm_port_t port, bcm_cpri_dir_t direction, int enable, bcm_cpri_port_tunnel_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_axc_frame_add_async(int unit, bcm_gport_t port, int axc_id, bcm_cpri_axc_frame_info_t * axc_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_axc_frame_delete_async(int unit, bcm_gport_t port, int axc_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_axc_frame_get_async(int unit, bcm_gport_t port, int axc_id, bcm_cpri_axc_frame_info_t * axc_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_axc_frame_get_all_async(int unit, bcm_gport_t port, int max_count, bcm_cpri_axc_frame_info_t * axc_info_list, int * axc_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_gcw_config_get_async(int unit, int port, uint8 index, bcm_cpri_tx_gcw_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_gcw_config_set_async(int unit, int port, uint8 index, bcm_cpri_tx_gcw_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_gcw_filter_get_async(int unit, int port, bcm_cpri_tx_gcw_tx_filter_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_gcw_filter_set_async(int unit, int port, bcm_cpri_tx_gcw_tx_filter_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_gcw_word_set_async(int unit, bcm_port_t port, int group_index, uint16 gcw_word, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_l1_inband_info_get_async(int unit, int port, bcm_cpri_cw_l1_inband_info_t * inband_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_l1_inband_info_set_async(int unit, int port, bcm_cpri_cw_l1_inband_info_t * inband_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_rsvd5_config_get_async(int unit, int port, bcm_cpri_tx_cw_rsvd5_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_rsvd5_config_set_async(int unit, int port, bcm_cpri_tx_cw_rsvd5_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_sync_info_get_async(int unit, int port, bcm_cpri_cw_sync_info_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_sync_info_set_async(int unit, int port, bcm_cpri_cw_sync_info_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_vsd_config_get_async(int unit, int port, bcm_cpri_tx_vsd_config_info_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_vsd_config_set_async(int unit, int port, bcm_cpri_tx_vsd_config_info_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_vsd_ctrl_flow_add_async(int unit, int port, uint16 group_id, bcm_cpri_tx_vsd_flow_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_vsd_ctrl_flow_delete_async(int unit, int port, uint16 group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_vsd_ctrl_flow_get_async(int unit, int port, uint16 group_id, bcm_cpri_tx_vsd_flow_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_vsd_raw_filter_get_async(int unit, int port, bcm_cpri_tx_cw_vsd_raw_filter_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_vsd_raw_filter_set_async(int unit, int port, bcm_cpri_tx_cw_vsd_raw_filter_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_vsd_raw_flow_config_get_async(int unit, int port, uint8 index, bcm_cpri_tx_vsd_raw_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_cw_vsd_raw_flow_config_set_async(int unit, int port, uint8 index, bcm_cpri_tx_vsd_raw_config_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_enable_get_async(int unit, bcm_gport_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_enable_set_async(int unit, bcm_gport_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_frame_tgen_config_set_async(int unit, bcm_gport_t port, int enable, bcm_cpri_tx_frame_tgen_config_t * tgen_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_pipeline_clear_async(int unit, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_speed_get_async(int unit, bcm_gport_t port, bcm_cpri_port_type_t * port_type, bcm_cpri_port_speed_t * speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_port_tx_speed_set_async(int unit, bcm_gport_t port, bcm_cpri_port_type_t port_type, bcm_cpri_port_speed_t speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_rsvd1_msg_get_async(int unit, bcm_cpri_rsvd1_msg_t * rsvd1_msg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_speed_scan_callback_register_async(int unit, bcm_cpri_speed_scan_handler_t callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_speed_scan_callback_unregister_async(int unit, bcm_cpri_speed_scan_handler_t callback, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_speed_scan_config_get_async(int unit, int * interval_in_us, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_speed_scan_config_set_async(int unit, int interval_in_us, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_speed_scan_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_speed_scan_port_config_add_async(int unit, bcm_port_t port, bcm_cpri_port_speed_t * speed_list, int num_speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_speed_scan_port_config_delete_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cpri_speed_scan_port_config_get_async(int unit, bcm_port_t port, bcm_cpri_port_speed_t * speed_list, int num_element, int * num_speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_custom_port_get_async(int unit, bcm_port_t port, int type, int max_len, uint32 * args, int * actual_len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_custom_port_set_async(int unit, bcm_port_t port, int type, int len, uint32 * args, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_custom_register_async(int unit, bcm_custom_cb_t func, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_custom_unregister_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_detach_late_txrx_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_detach_retry_get_async(int unit, bcm_detach_retry_t * retry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_detach_retry_set_async(int unit, bcm_detach_retry_t * retry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_device_member_get_async(int unit, uint32 flags, bcm_device_member_t member_type, int * is_member, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_bandwidth_get_async(int unit, bcm_port_t port, bcm_eav_stream_class_t type, uint32 * bytes_sec, uint32 * bytes_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_bandwidth_set_async(int unit, bcm_port_t port, bcm_eav_stream_class_t type, uint32 bytes_sec, uint32 bytes_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_control_get_async(int unit, bcm_eav_control_t type, uint32 * arg, uint32 * arg2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_control_set_async(int unit, bcm_eav_control_t type, uint32 arg, uint32 arg2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_link_status_get_async(int unit, bcm_port_t port, int * link, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_link_status_set_async(int unit, bcm_port_t port, int link, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_pcp_mapping_get_async(int unit, bcm_eav_stream_class_t type, int * pcp, int * remapped_pcp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_pcp_mapping_set_async(int unit, bcm_eav_stream_class_t type, int pcp, int remapped_pcp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_port_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_port_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_srp_mac_ethertype_get_async(int unit, bcm_mac_t mac, bcm_port_ethertype_t * ethertype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_srp_mac_ethertype_set_async(int unit, bcm_mac_t mac, bcm_port_ethertype_t ethertype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_timestamp_get_async(int unit, bcm_port_t port, uint32 * timestamp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_timesync_mac_get_async(int unit, bcm_mac_t eav_mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_timesync_mac_set_async(int unit, bcm_mac_t eav_mac, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_ecn_map_create_async(int unit, uint32 flags, int * ecn_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_map_destroy_async(int unit, int ecn_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_map_get_async(int unit, int ecn_map_id, bcm_ecn_map_t * ecn_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_map_mode_get_async(int unit, bcm_ecn_map_mode_t * ecn_map_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_map_mode_set_async(int unit, bcm_ecn_map_mode_t * ecn_map_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_map_set_async(int unit, uint32 options, int ecn_map_id, bcm_ecn_map_t * ecn_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_port_map_get_async(int unit, bcm_gport_t port, bcm_ecn_port_map_t * ecn_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_port_map_set_async(int unit, bcm_gport_t port, bcm_ecn_port_map_t * ecn_map, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_ecn_responsive_protocol_get_async(int unit, uint8 ip_proto, int * responsive, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_responsive_protocol_set_async(int unit, uint8 ip_proto, int responsive, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_traffic_action_config_get_async(int unit, bcm_ecn_traffic_action_config_t * ecn_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_traffic_action_config_set_async(int unit, bcm_ecn_traffic_action_config_t * ecn_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_traffic_map_get_async(int unit, bcm_ecn_traffic_map_info_t * map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_traffic_map_set_async(int unit, bcm_ecn_traffic_map_info_t * map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_type_map_get_async(int unit, uint32 flags, bcm_ecn_type_map_t * map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_type_map_set_async(int unit, uint32 flags, bcm_ecn_type_map_t * map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_type_map_traverse_async(int unit, uint32 flags, bcm_ecn_type_map_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_PTP
void	bcm_esmc_QL_SSM_map_async(int unit, bcm_esmc_network_option_t opt, bcm_esmc_quality_level_t ql, uint8 * ssm_code, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_SSM_QL_map_async(int unit, bcm_esmc_network_option_t opt, uint8 ssm_code, bcm_esmc_quality_level_t * ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_g781_option_get_async(int unit, int stack_id, bcm_esmc_network_option_t * g781_option, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_g781_option_set_async(int unit, int stack_id, bcm_esmc_network_option_t g781_option, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_rx_callback_register_async(int unit, int stack_id, bcm_esmc_rx_cb rx_cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_rx_callback_unregister_async(int unit, int stack_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_tunnel_get_async(int unit, int stack_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_tunnel_set_async(int unit, int stack_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_tx_async(int unit, int stack_id, bcm_pbmp_t pbmp, bcm_esmc_pdu_data_t * esmc_pdu_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_PTP */
#ifdef	INCLUDE_L3
void	bcm_extender_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_egress_add_async(int unit, bcm_gport_t extender_port, bcm_extender_egress_t * extender_egress, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_egress_delete_async(int unit, bcm_gport_t extender_port, bcm_extender_egress_t * extender_egress, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_egress_delete_all_async(int unit, bcm_gport_t extender_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_egress_get_async(int unit, bcm_gport_t extender_port, bcm_extender_egress_t * extender_egress, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_egress_get_all_async(int unit, bcm_gport_t extender_port, int array_size, bcm_extender_egress_t * extender_egress_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_egress_set_async(int unit, bcm_gport_t extender_port, int array_size, bcm_extender_egress_t * extender_egress_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_encap_create_async(int unit, bcm_extender_encap_t * extender_encap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_encap_destroy_async(int unit, bcm_gport_t * extender_encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_encap_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_encap_get_async(int unit, bcm_extender_encap_t * extender_encap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_encap_traverse_async(int unit, bcm_extender_encap_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_forward_add_async(int unit, bcm_extender_forward_t * extender_forward_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_forward_delete_async(int unit, bcm_extender_forward_t * extender_forward_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_forward_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_forward_get_async(int unit, bcm_extender_forward_t * extender_forward_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_forward_traverse_async(int unit, bcm_extender_forward_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_port_add_async(int unit, bcm_extender_port_t * extender_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_port_delete_async(int unit, bcm_gport_t extender_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_port_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_port_get_async(int unit, bcm_extender_port_t * extender_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_port_traverse_async(int unit, bcm_extender_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_fabric_action_create_async(int unit, bcm_fabric_action_info_t * action_info, bcm_fabric_action_t * action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_action_destroy_async(int unit, bcm_fabric_action_t action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_action_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_action_get_async(int unit, bcm_fabric_action_t action_id, bcm_fabric_action_info_t * action_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_action_traverse_async(int unit, bcm_fabric_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_bandwidth_core_profile_get_async(int unit, int core, uint32 flags, int profile_count, bcm_fabric_bandwidth_profile_t * profile_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_bandwidth_core_profile_set_async(int unit, int core, uint32 flags, int profile_count, bcm_fabric_bandwidth_profile_t * profile_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_bandwidth_profile_get_async(int unit, int profile_count, bcm_fabric_bandwidth_profile_t * profile_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_bandwidth_profile_set_async(int unit, int profile_count, bcm_fabric_bandwidth_profile_t * profile_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_cgm_control_get_async(int unit, uint32 flags, bcm_fabric_cgm_control_type_t control_type, bcm_fabric_cgm_control_id_t control_id, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_cgm_control_set_async(int unit, uint32 flags, bcm_fabric_cgm_control_type_t control_type, bcm_fabric_cgm_control_id_t control_id, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_config_discard_get_async(int unit, bcm_fabric_config_discard_t * discard, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_config_discard_set_async(int unit, bcm_fabric_config_discard_t * discard, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_control_get_async(int unit, bcm_fabric_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_control_set_async(int unit, bcm_fabric_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_destination_link_min_get_async(int unit, uint32 flags, bcm_module_t module_id, int * num_of_links, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_destination_link_min_set_async(int unit, uint32 flags, bcm_module_t module_id, int num_of_links, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_connectivity_status_get_async(int unit, int link_partner_max, bcm_fabric_link_connectivity_t * link_partner_array, int * link_partner_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_connectivity_status_single_get_async(int unit, bcm_port_t link_id, bcm_fabric_link_connectivity_t * link_partner_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_control_get_async(int unit, bcm_port_t link, bcm_fabric_link_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_control_set_async(int unit, bcm_port_t link, bcm_fabric_link_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_profile_get_async(int unit, int profile_id, uint32 flags, uint32 links_count_max, uint32 * links_count, bcm_port_t * links, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_profile_set_async(int unit, int profile_id, uint32 flags, uint32 links_count, bcm_port_t * links, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_remote_pipe_mapping_get_async(int unit, bcm_port_t port, bcm_fabric_link_remote_pipe_mapping_t * mapping_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_remote_pipe_mapping_set_async(int unit, bcm_port_t port, bcm_fabric_link_remote_pipe_mapping_t * mapping_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_status_get_async(int unit, bcm_port_t link_id, uint32 * link_status, uint32 * errored_token_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_threshold_add_async(int unit, uint32 flags, int * fifo_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_threshold_delete_async(int unit, int fifo_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_thresholds_attach_async(int unit, int fifo_type, uint32 links_count, bcm_port_t * links, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_thresholds_get_async(int unit, int fifo_type, uint32 count, bcm_fabric_link_threshold_type_t * type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_thresholds_pipe_get_async(int unit, int fifo_type, bcm_fabric_pipe_t pipe, uint32 flags, uint32 count, bcm_fabric_link_threshold_type_t * type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_thresholds_pipe_set_async(int unit, int fifo_type, bcm_fabric_pipe_t pipe, uint32 flags, uint32 count, bcm_fabric_link_threshold_type_t * type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_thresholds_retrieve_async(int unit, int fifo_type, uint32 links_count_max, bcm_port_t * links, uint32 * links_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_thresholds_set_async(int unit, int fifo_type, uint32 count, bcm_fabric_link_threshold_type_t * type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_topology_config_get_async(int unit, uint32 flags, bcm_module_t destination, bcm_fabric_topology_type_t type, int links_count_max, int * links_count, bcm_port_t * links_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_topology_config_set_async(int unit, uint32 flags, bcm_module_t destination, bcm_fabric_topology_type_t type, int links_count, bcm_port_t * links_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_topology_get_async(int unit, bcm_module_t destination, int max_links_count, int * links_count, bcm_port_t * links_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_topology_set_async(int unit, bcm_module_t destination, int links_count, bcm_port_t * links_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_modid_group_find_async(int unit, bcm_module_t modid, bcm_module_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_modid_group_get_async(int unit, bcm_module_t group, int modid_max_count, bcm_module_t * modid_array, int * modid_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_modid_group_set_async(int unit, bcm_module_t group, int modid_count, bcm_module_t * modid_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_modid_local_mapping_get_async(int unit, bcm_module_t local_modid, bcm_module_t * modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_modid_local_mapping_set_async(int unit, bcm_module_t local_modid, bcm_module_t modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_module_control_get_async(int unit, uint32 flags, bcm_module_t modid, bcm_fabric_module_control_t control, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_module_control_set_async(int unit, uint32 flags, bcm_module_t modid, bcm_fabric_module_control_t control, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_multicast_get_async(int unit, bcm_multicast_t group, uint32 flags, int destid_count_max, int * destid_count, bcm_module_t * destid_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_multicast_local_route_get_async(int unit, uint32 flags, uint32 nof_groups, bcm_multicast_t * groups, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_multicast_local_route_set_async(int unit, uint32 flags, uint32 nof_groups, bcm_multicast_t * groups, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_multicast_multi_get_async(int unit, uint32 flags, uint32 ngroups, bcm_multicast_t * groups, bcm_fabric_module_vector_t * dest_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_multicast_multi_set_async(int unit, uint32 flags, uint32 ngroups, bcm_multicast_t * groups, bcm_fabric_module_vector_t * dest_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_multicast_set_async(int unit, bcm_multicast_t group, uint32 flags, uint32 destid_count, bcm_module_t * destid_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_pcp_dest_mode_config_get_async(int unit, uint32 flags, bcm_module_t modid, bcm_fabric_pcp_mode_config_t * pcp_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_pcp_dest_mode_config_set_async(int unit, uint32 flags, bcm_module_t modid, bcm_fabric_pcp_mode_config_t * pcp_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_port_create_async(int unit, bcm_gport_t parent_port, int offset, uint32 flags, bcm_gport_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_port_destroy_async(int unit, bcm_gport_t parent_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_port_get_async(int unit, bcm_gport_t child_port, uint32 flags, bcm_gport_t * parent_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_action_create_async(int unit, bcm_fabric_predicate_action_info_t * predicate_action, bcm_fabric_predicate_action_t * predicate_action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_action_destroy_async(int unit, bcm_fabric_predicate_action_t predicate_action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_action_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_action_get_async(int unit, bcm_fabric_predicate_action_t predicate_action_id, bcm_fabric_predicate_action_info_t * predicate_action_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_action_traverse_async(int unit, bcm_fabric_predicate_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_create_async(int unit, bcm_fabric_predicate_info_t * pred_info, bcm_fabric_predicate_t * pred_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_destroy_async(int unit, bcm_fabric_predicate_t pred_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_get_async(int unit, bcm_fabric_predicate_t pred_id, bcm_fabric_predicate_info_t * pred_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_traverse_async(int unit, bcm_fabric_predicate_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_priority_get_async(int unit, uint32 flags, bcm_cos_t ingress_pri, bcm_color_t color, int * fabric_priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_priority_set_async(int unit, uint32 flags, bcm_cos_t ingress_pri, bcm_color_t color, int fabric_priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_profile_threshold_get_async(int unit, int profile_id, bcm_fabric_threshold_id_t threshold_id, bcm_fabric_threshold_type_t threshold_type, uint32 flags, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_profile_threshold_set_async(int unit, int profile_id, bcm_fabric_threshold_id_t threshold_id, bcm_fabric_threshold_type_t threshold_type, uint32 flags, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_create_async(int unit, uint32 flags, int base, int count, bcm_fabric_qsel_t * qsel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_destroy_async(int unit, bcm_fabric_qsel_t qsel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_entry_get_async(int unit, bcm_fabric_qsel_t qsel_id, int offset, bcm_gport_t * queue, bcm_fabric_qsel_offset_t * qsel_offset_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_entry_multi_get_async(int unit, bcm_fabric_qsel_t qsel_id, int offset, int count, bcm_gport_t * queue, bcm_fabric_qsel_offset_t * qsel_offset_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_entry_multi_set_async(int unit, bcm_fabric_qsel_t qsel_id, int offset, int count, bcm_gport_t * queue, bcm_fabric_qsel_offset_t * qsel_offset_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_entry_set_async(int unit, bcm_fabric_qsel_t qsel_id, int offset, bcm_gport_t queue, bcm_fabric_qsel_offset_t qsel_offset_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_entry_traverse_async(int unit, bcm_fabric_qsel_t qsel_id, bcm_fabric_qsel_entry_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_get_async(int unit, bcm_fabric_qsel_t qsel_id, uint32 * flags, int * base, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_offset_create_async(int unit, uint32 flags, bcm_fabric_qsel_offset_t * qsel_offset_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_offset_destroy_async(int unit, bcm_fabric_qsel_offset_t qsel_offset_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_offset_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_offset_entry_get_async(int unit, bcm_fabric_qsel_offset_t qsel_offset_id, bcm_cos_t int_pri, int * offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_offset_entry_set_async(int unit, bcm_fabric_qsel_offset_t qsel_offset_id, bcm_cos_t int_pri, int offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_offset_entry_traverse_async(int unit, bcm_fabric_qsel_offset_t qsel_offset_id, bcm_fabric_qsel_offset_entry_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_offset_traverse_async(int unit, bcm_fabric_qsel_offset_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_traverse_async(int unit, bcm_fabric_qsel_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_rci_biasing_probability_get_async(int unit, uint32 flags, bcm_fabric_rci_biasing_probability_info_t * probability_info, int probability[BCM_FABRIC_NUM_OF_RCI_LEVELS], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_rci_biasing_probability_set_async(int unit, uint32 flags, bcm_fabric_rci_biasing_probability_info_t * probability_info, int probability[BCM_FABRIC_NUM_OF_RCI_LEVELS], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_rci_config_get_async(int unit, bcm_fabric_rci_config_t * rci_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_rci_config_set_async(int unit, bcm_fabric_rci_config_t rci_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_rci_resolution_get_async(int unit, uint32 flags, bcm_fabric_rci_resolution_key_t * key, bcm_fabric_rci_resolution_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_rci_resolution_set_async(int unit, uint32 flags, bcm_fabric_rci_resolution_key_t * key, bcm_fabric_rci_resolution_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_reachability_status_get_async(int unit, int moduleid, int links_max, uint32 * links_array, int * links_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_route_rx_async(int unit, uint32 flags, uint32 data_out_max_size, uint32 * data_out, uint32 * data_out_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_route_tx_async(int unit, uint32 flags, bcm_fabric_route_t * route, uint32 data_in_size, uint32 * data_in, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_stat_get_async(int unit, uint32 flags, bcm_fabric_stat_index_t index, bcm_fabric_stat_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_static_replication_set_async(int unit, bcm_port_t port, uint32 flags, uint32 destid_count, bcm_module_t * destid_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_tdm_direct_routing_get_async(int unit, bcm_gport_t gport, bcm_fabric_tdm_direct_routing_t * routing_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_tdm_direct_routing_set_async(int unit, bcm_gport_t gport, bcm_fabric_tdm_direct_routing_t * routing_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_tdm_editing_get_async(int unit, bcm_gport_t gport, bcm_fabric_tdm_editing_t * editing, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_tdm_editing_set_async(int unit, bcm_gport_t gport, bcm_fabric_tdm_editing_t * editing, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_failover_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_create_async(int unit, uint32 flags, bcm_failover_t * failover_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_destroy_async(int unit, bcm_failover_t failover_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_egress_clear_async(int unit, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_egress_get_async(int unit, bcm_if_t intf, bcm_l3_egress_t * failover_egr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_egress_protection_get_async(int unit, bcm_if_t intf, bcm_if_t * prot_intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_egress_set_async(int unit, bcm_if_t intf, bcm_l3_egress_t * failover_egr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_egress_status_get_async(int unit, bcm_if_t intf, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_egress_status_set_async(int unit, bcm_if_t intf, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_get_async(int unit, bcm_failover_t failover_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_multi_level_attach_async(int unit, bcm_failover_multi_level_t multi_level_failover, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_failover_ring_config_get_async(int unit, bcm_failover_ring_t * failover_ring, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_ring_config_set_async(int unit, bcm_failover_ring_t * failover_ring, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_failover_set_async(int unit, bcm_failover_t failover_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_status_get_async(int unit, bcm_failover_element_t * failover, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_status_set_async(int unit, bcm_failover_element_t * failover, int enable, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
#ifdef	INCLUDE_FCMAP
void	bcm_fcmap_diag_get_async(int unit, bcm_port_t port, bcm_fcmap_diag_code_t * diag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_event_enable_get_async(int unit, bcm_fcmap_event_t t, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_event_enable_set_async(int unit, bcm_fcmap_event_t t, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_event_register_async(int unit, bcm_fcmap_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_event_unregister_async(int unit, bcm_fcmap_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_linkfault_trigger_rc_get_async(int unit, bcm_port_t port, bcm_fcmap_lf_tr_t * trigger, bcm_fcmap_lf_rc_t * rc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_ability_advert_get_async(int unit, bcm_port_t port, bcm_fcmap_port_ability_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_ability_advert_set_async(int unit, bcm_port_t port, bcm_fcmap_port_ability_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_config_get_async(int unit, bcm_port_t port, bcm_fcmap_port_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_config_selective_get_async(int unit, bcm_port_t port, bcm_fcmap_port_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_config_selective_set_async(int unit, bcm_port_t port, bcm_fcmap_port_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_config_set_async(int unit, bcm_port_t port, bcm_fcmap_port_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_enable_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_link_reset_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_shutdown_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_speed_set_async(int unit, bcm_port_t port, bcm_fcmap_port_speed_t speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_traverse_async(int unit, bcm_fcmap_port_traverse_cb callbk, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_stat_clear_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_stat_get_async(int unit, bcm_port_t port, bcm_fcmap_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_stat_get32_async(int unit, bcm_port_t port, bcm_fcmap_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_vlan_map_add_async(int unit, bcm_port_t port, bcm_fcmap_vlan_vsan_map_t * vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_vlan_map_delete_async(int unit, bcm_port_t port, bcm_fcmap_vlan_vsan_map_t * vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_vlan_map_get_async(int unit, bcm_port_t port, bcm_fcmap_vlan_vsan_map_t * vlan, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_FCMAP */
void	bcm_fcoe_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_control_vsan_get_async(int unit, bcm_fcoe_vsan_id_t vsan_id, bcm_fcoe_vsan_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_control_vsan_set_async(int unit, bcm_fcoe_vsan_id_t vsan_id, bcm_fcoe_vsan_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_enable_set_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_fc_header_type_get_async(int unit, uint32 flags, uint8 r_ctl, bcm_fcoe_fc_header_type_t * hdr_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_fc_header_type_set_async(int unit, uint32 flags, uint8 r_ctl, bcm_fcoe_fc_header_type_t hdr_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_intf_config_get_async(int unit, uint32 flags, bcm_if_t intf, bcm_fcoe_intf_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_intf_config_set_async(int unit, uint32 flags, bcm_if_t intf, bcm_fcoe_intf_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_add_async(int unit, bcm_fcoe_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_delete_async(int unit, bcm_fcoe_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_delete_by_interface_async(int unit, bcm_fcoe_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_delete_by_prefix_async(int unit, bcm_fcoe_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_find_async(int unit, bcm_fcoe_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_stat_attach_async(int unit, bcm_fcoe_route_t * route, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_stat_counter_get_async(int unit, bcm_fcoe_route_t * route, bcm_fcoe_route_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_stat_counter_set_async(int unit, bcm_fcoe_route_t * route, bcm_fcoe_route_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_stat_counter_sync_get_async(int unit, bcm_fcoe_route_t * route, bcm_fcoe_route_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_stat_detach_async(int unit, bcm_fcoe_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_stat_id_get_async(int unit, bcm_fcoe_route_t * route, bcm_fcoe_route_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_traverse_async(int unit, uint32 flags, bcm_fcoe_route_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_create_async(int unit, uint32 options, bcm_fcoe_vsan_t * vsan, bcm_fcoe_vsan_id_t * vsan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_destroy_async(int unit, bcm_fcoe_vsan_id_t vsan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_get_async(int unit, bcm_fcoe_vsan_id_t vsan_id, bcm_fcoe_vsan_t * vsan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_set_async(int unit, bcm_fcoe_vsan_id_t vsan_id, bcm_fcoe_vsan_t * vsan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_stat_attach_async(int unit, bcm_fcoe_vsan_id_t vsan, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_stat_counter_get_async(int unit, bcm_fcoe_vsan_id_t vsan, bcm_fcoe_vsan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_stat_counter_set_async(int unit, bcm_fcoe_vsan_id_t vsan, bcm_fcoe_vsan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_stat_counter_sync_get_async(int unit, bcm_fcoe_vsan_id_t vsan, bcm_fcoe_vsan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_stat_detach_async(int unit, bcm_fcoe_vsan_id_t vsan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_stat_id_get_async(int unit, bcm_fcoe_vsan_id_t vsan, bcm_fcoe_vsan_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_translate_action_add_async(int unit, bcm_fcoe_vsan_translate_key_config_t * key, bcm_fcoe_vsan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_translate_action_delete_async(int unit, bcm_fcoe_vsan_translate_key_config_t * key, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_traverse_async(int unit, uint32 flags, bcm_fcoe_vsan_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_add_async(int unit, bcm_fcoe_zone_entry_t * zone, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_delete_async(int unit, bcm_fcoe_zone_entry_t * zone, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_delete_by_did_async(int unit, bcm_fcoe_zone_entry_t * zone, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_delete_by_sid_async(int unit, bcm_fcoe_zone_entry_t * zone, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_delete_by_vsan_async(int unit, bcm_fcoe_zone_entry_t * zone, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_get_async(int unit, bcm_fcoe_zone_entry_t * zone, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_traverse_async(int unit, uint32 flags, bcm_fcoe_zone_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_ace_entry_add_async(int unit, uint32 flags, bcm_field_ace_format_t ace_format_id, bcm_field_ace_entry_info_t * entry_info, uint32 * entry_handle, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_ace_entry_delete_async(int unit, uint32 entry_handle, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_ace_entry_info_get_async(int unit, uint32 entry_handle, bcm_field_ace_entry_info_t * entry_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_ace_format_add_async(int unit, uint32 flags, bcm_field_ace_format_info_t * ace_format_info, bcm_field_ace_format_t * ace_format_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_ace_format_delete_async(int unit, bcm_field_ace_format_t ace_format_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_ace_format_info_get_async(int unit, bcm_field_ace_format_t ace_format_id, bcm_field_ace_format_info_t * ace_format_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_add_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, uint32 param0, uint32 param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_class_add_async(int unit, bcm_field_entry_t entry, bcm_field_class_info_t * class_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_class_get_async(int unit, bcm_field_entry_t entry, bcm_field_class_info_t * class_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_config_add_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, int core_config_arr_len, bcm_field_action_core_config_t * core_config_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_config_get_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, int core_config_arr_len, bcm_field_action_core_config_t * core_config_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_config_info_add_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_field_action_params_t * params, bcm_field_action_match_config_t * match_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_config_info_get_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_field_action_params_t * params, bcm_field_action_match_config_t * match_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_cont_info_get_async(int unit, bcm_field_stage_t stage, bcm_field_action_t action, uint8 max_ct, uint16 * cont_id_arr, uint16 * cont_sz_arr, uint8 * actual_ct, uint8 * action_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_copytocpu_config_get_async(int unit, bcm_field_entry_t entry, bcm_field_CopyToCpu_config_t * CopyToCpu_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_copytocpu_config_set_async(int unit, bcm_field_entry_t entry, bcm_field_CopyToCpu_config_t CopyToCpu_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_create_async(int unit, uint32 flags, bcm_field_action_info_t * action_info, bcm_field_action_t * action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_delete_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, uint32 param0, uint32 param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_destroy_async(int unit, bcm_field_action_t action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_get_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, uint32 * param0, uint32 * param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_info_get_async(int unit, bcm_field_action_t action_id, bcm_field_stage_t stage, bcm_field_action_info_t * action_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_mac_add_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_mac_get_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_mac_t * mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_ports_add_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_ports_get_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_redirect_config_get_async(int unit, bcm_field_entry_t entry, bcm_field_redirect_config_t * redirect_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_redirect_config_set_async(int unit, bcm_field_entry_t entry, bcm_field_redirect_config_t redirect_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_remove_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_remove_all_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_value_map_async(int unit, bcm_field_stage_t stage, bcm_field_action_t bcm_action, uint32 bcm_value[BCM_FIELD_ACTION_WIDTH_IN_WORDS], uint32 hw_value[BCM_FIELD_ACTION_WIDTH_IN_WORDS], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_vlan_actions_add_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_vlan_action_set_t * vlan_action_set, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_vlan_actions_get_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_vlan_action_set_t * vlan_action_set, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_width_get_async(int unit, uint32 flags, int internal_action, uint32 * width_p, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_width_set_async(int unit, uint32 flags, int internal_action, uint32 width, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_class_map_get_async(int unit, bcm_field_stage_t stage, bcm_field_qualify_t qual, uint32 num_entries, uint32 * orig_values_array, uint32 * map_values_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_class_map_set_async(int unit, bcm_field_stage_t stage, bcm_field_qualify_t qual, uint32 num_entries, uint32 * orig_values_array, uint32 * map_values_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_class_size_get_async(int unit, bcm_field_qualify_t qual, uint16 * class_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_compare_operand_offset_get_async(int unit, int pair_id, bcm_field_compare_operand_t compare_operand, int * offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_compression_direct_mapped_get_async(int unit, bcm_field_compression_map_type_t type, bcm_pbmp_t ports, uint16 entry_cnt, uint16 * val_arr, uint16 * map_val_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_compression_direct_mapped_set_async(int unit, bcm_field_compression_map_type_t type, bcm_pbmp_t ports, uint16 entry_cnt, uint16 * val_arr, uint16 * map_val_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_compression_index_mapped_get_async(int unit, bcm_field_compression_map_type_t type, uint16 index, bcm_pbmp_t ports, uint16 * val, uint16 * map_val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_compression_index_mapped_set_async(int unit, bcm_field_compression_map_type_t type, uint16 index, bcm_pbmp_t ports, uint16 val, uint16 map_val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_context_compare_create_async(int unit, uint32 flags, bcm_field_stage_t stage, bcm_field_context_t context_id, uint32 pair_id, bcm_field_context_compare_info_t * cmp_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_context_compare_destroy_async(int unit, bcm_field_stage_t stage, bcm_field_context_t context_id, uint32 pair_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_context_compare_info_get_async(int unit, bcm_field_stage_t stage, bcm_field_context_t context_id, uint32 pair_id, bcm_field_context_compare_info_t * cmp_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_context_create_async(int unit, uint32 flags, bcm_field_stage_t stage, bcm_field_context_info_t * context_info, bcm_field_context_t * context_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_context_destroy_async(int unit, bcm_field_stage_t stage, bcm_field_context_t context_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_context_hash_create_async(int unit, uint32 flags, bcm_field_stage_t stage, bcm_field_context_t context_id, bcm_field_context_hash_info_t * hash_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_context_hash_destroy_async(int unit, bcm_field_stage_t stage, bcm_field_context_t context_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_context_hash_info_get_async(int unit, bcm_field_stage_t stage, bcm_field_context_t context_id, bcm_field_context_hash_info_t * hash_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_context_info_get_async(int unit, bcm_field_stage_t stage, bcm_field_context_t context_id, bcm_field_context_info_t * context_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_context_param_set_async(int unit, uint32 flags, bcm_field_stage_t stage, bcm_field_context_t context_id, bcm_field_context_param_info_t * context_params, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_control_get_async(int unit, bcm_field_control_t control, uint32 * state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_control_set_async(int unit, bcm_field_control_t control, uint32 state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_create_async(int unit, bcm_field_data_qualifier_t * data_qualifier, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_destroy_async(int unit, int qual_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_ethertype_add_async(int unit, int qual_id, bcm_field_data_ethertype_t * etype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_ethertype_delete_async(int unit, int qual_id, bcm_field_data_ethertype_t * etype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_get_async(int unit, int qual_id, bcm_field_data_qualifier_t * qual, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_ip_protocol_add_async(int unit, int qual_id, bcm_field_data_ip_protocol_t * ip_protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_ip_protocol_delete_async(int unit, int qual_id, bcm_field_data_ip_protocol_t * ip_protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_multi_get_async(int unit, int qual_size, int * qual_array, int * qual_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_packet_format_add_async(int unit, int qual_id, bcm_field_data_packet_format_t * packet_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_packet_format_delete_async(int unit, int qual_id, bcm_field_data_packet_format_t * packet_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_destination_entry_add_async(int unit, uint32 options, bcm_field_destination_match_t * match, bcm_field_destination_action_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_destination_entry_delete_async(int unit, bcm_field_destination_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_destination_entry_get_async(int unit, bcm_field_destination_match_t * match, bcm_field_destination_action_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_destination_entry_traverse_async(int unit, bcm_field_destination_entry_traverse_cb callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_destination_flexctr_object_get_async(int unit, bcm_field_destination_match_t * match, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_destination_flexctr_object_set_async(int unit, bcm_field_destination_match_t * match, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_destination_stat_attach_async(int unit, bcm_field_destination_match_t * match, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_destination_stat_detach_async(int unit, bcm_field_destination_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_destination_stat_id_get_async(int unit, bcm_field_destination_match_t * match, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_direct_extraction_action_add_async(int unit, bcm_field_entry_t entry, bcm_field_extraction_action_t action, int count, bcm_field_extraction_field_t * extractions, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_direct_extraction_action_get_async(int unit, bcm_field_entry_t entry, bcm_field_extraction_action_t * action, int max_count, bcm_field_extraction_field_t * extractions, int * actual_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_efes_action_add_async(int unit, uint32 flags, bcm_field_group_t fg_id, bcm_field_context_t context_id, bcm_field_action_priority_t * encoded_position, bcm_field_efes_action_info_t * efes_action_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_efes_action_delete_async(int unit, bcm_field_group_t fg_id, bcm_field_context_t context_id, bcm_field_action_priority_t bcm_field_action_priority_t, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_efes_action_info_get_async(int unit, bcm_field_group_t fg_id, bcm_field_context_t context_id, bcm_field_action_priority_t encoded_position, bcm_field_efes_action_info_t * efes_action_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_add_async(int unit, uint32 flags, bcm_field_group_t fg_id, bcm_field_entry_info_t * entry_info, bcm_field_entry_t * entry_handle, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_config_copy_async(int unit, bcm_field_entry_t src_entry, bcm_field_entry_t * dst_entry, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_config_create_async(int unit, bcm_field_entry_config_t * entry_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_config_get_async(int unit, bcm_field_entry_config_t * entry_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_copy_async(int unit, bcm_field_entry_t src_entry, bcm_field_entry_t * dst_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_copy_id_async(int unit, bcm_field_entry_t src_entry, bcm_field_entry_t dst_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_create_async(int unit, bcm_field_group_t group, bcm_field_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_create_id_async(int unit, bcm_field_group_t group, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_delete_async(int unit, bcm_field_group_t fg_id, bcm_field_entry_qual_t entry_qual_info[BCM_FIELD_NUMBER_OF_QUALS_PER_GROUP], bcm_field_entry_t entry_handle, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_destroy_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_field_entry_dump_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_field_entry_enable_get_async(int unit, bcm_field_entry_t entry, int * enable_flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_enable_set_async(int unit, bcm_field_entry_t entry, int enable_flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_flexctr_attach_async(int unit, bcm_field_entry_t entry, bcm_field_flexctr_config_t * flexctr_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_flexctr_detach_async(int unit, bcm_field_entry_t entry, bcm_field_flexctr_config_t * flexctr_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_hit_flush_async(int unit, uint32 flags, bcm_field_entry_t entry_handle, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_hit_get_async(int unit, uint32 flags, bcm_field_entry_t entry_handle, uint8 * entry_hit_core_bmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_info_get_async(int unit, bcm_field_group_t fg_id, bcm_field_entry_t entry_handle, bcm_field_entry_info_t * entry_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_install_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_install_and_handler_update_async(int unit, bcm_field_entry_t entry, bcm_field_entry_t * large_dt_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_multi_get_async(int unit, bcm_field_group_t group, int entry_size, bcm_field_entry_t * entry_array, int * entry_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_operation_async(int unit, bcm_field_entry_oper_t * entry_oper, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_policer_attach_async(int unit, bcm_field_entry_t entry_id, int level, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_policer_detach_async(int unit, bcm_field_entry_t entry_id, int level, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_policer_detach_all_async(int unit, bcm_field_entry_t entry_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_policer_get_async(int unit, bcm_field_entry_t entry_id, int level, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_prio_get_async(int unit, bcm_field_entry_t entry, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_prio_set_async(int unit, bcm_field_entry_t entry, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_reinstall_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_remove_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_stat_attach_async(int unit, bcm_field_entry_t entry, int stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_stat_detach_async(int unit, bcm_field_entry_t entry, int stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_stat_extended_attach_async(int unit, bcm_field_entry_t entry, int stat_id, bcm_field_stat_action_t stat_action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_stat_extended_get_async(int unit, bcm_field_entry_t entry, int * stat_id, bcm_field_stat_action_t * stat_action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_stat_get_async(int unit, bcm_field_entry_t entry, int * stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_fem_action_add_async(int unit, uint32 flags, bcm_field_group_t fg_id, bcm_field_action_priority_t encoded_position, bcm_field_fem_action_info_t * fem_action_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_fem_action_delete_async(int unit, bcm_field_group_t fg_id, bcm_field_action_priority_t bcm_field_action_priority_t, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_fem_action_info_get_async(int unit, bcm_field_group_t fg_id, bcm_field_action_priority_t encoded_position, bcm_field_fem_action_info_t * fem_action_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_flush_entry_add_async(int unit, uint32 flags, bcm_field_group_t fg_id, int entry_id, bcm_field_flush_entry_info_t * flush_entry_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_flush_entry_delete_async(int unit, uint32 flags, bcm_field_group_t fg_id, int entry_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_flush_entry_get_async(int unit, uint32 flags, bcm_field_group_t fg_id, int entry_id, bcm_field_flush_entry_info_t * flush_entry_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_flush_profile_attach_async(int unit, uint32 flags, bcm_field_group_t fg_id, uint32 flush_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_flush_profile_create_async(int unit, uint32 flags, bcm_field_flush_profile_info_t * flush_profile_info, uint32 * flush_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_flush_profile_destroy_async(int unit, uint32 flags, uint32 flush_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_flush_profile_get_async(int unit, uint32 flags, uint32 flush_profile_id, bcm_field_flush_profile_info_t * flush_profile_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_action_get_async(int unit, bcm_field_group_t group, bcm_field_aset_t * aset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_action_offset_get_async(int unit, uint32 flags, bcm_field_group_t fg_id, bcm_field_action_t action, int * offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_action_set_async(int unit, bcm_field_group_t group, bcm_field_aset_t aset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_add_async(int unit, uint32 flags, bcm_field_group_info_t * fg_info, bcm_field_group_t * fg_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_compress_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_config_create_async(int unit, bcm_field_group_config_t * group_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_config_extension_create_async(int unit, bcm_field_group_config_extension_t * group_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_config_validate_async(int unit, bcm_field_group_config_t * group_config, bcm_field_group_mode_t * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_context_attach_async(int unit, uint32 flags, bcm_field_group_t fg_id, bcm_field_context_t context_id, bcm_field_group_attach_info_t * attach_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_context_detach_async(int unit, bcm_field_group_t fg_id, bcm_field_context_t context_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_context_info_get_async(int unit, bcm_field_group_t fg_id, bcm_field_context_t context_id, bcm_field_group_attach_info_t * attach_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_create_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_create_id_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_create_mode_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_create_mode_id_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_default_entry_get_async(int unit, bcm_field_group_t group, bcm_field_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_default_entry_set_async(int unit, bcm_field_group_t group, bcm_field_entry_t entry, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_delete_async(int unit, bcm_field_group_t fg_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_destroy_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_field_group_dump_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_field_group_enable_get_async(int unit, bcm_field_group_t group, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_enable_set_async(int unit, bcm_field_group_t group, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_expansion_enable_get_async(int unit, bcm_field_group_t group, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_expansion_enable_set_async(int unit, bcm_field_group_t group, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_flush_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_get_async(int unit, bcm_field_group_t group, bcm_field_qset_t * qset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_info_get_async(int unit, bcm_field_group_t fg_id, bcm_field_group_info_t * fg_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_install_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_mode_get_async(int unit, bcm_field_group_t group, bcm_field_group_mode_t * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_mode_qset_get_async(int unit, bcm_field_group_mode_type_t mode_type, bcm_field_group_packet_type_t packet_type, bcm_field_qset_t * qset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_oper_mode_get_async(int unit, bcm_field_qualify_t stage, bcm_field_group_oper_mode_t * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_oper_mode_set_async(int unit, bcm_field_qualify_t stage, bcm_field_group_oper_mode_t mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_port_create_mode_async(int unit, bcm_port_t port, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_port_create_mode_id_async(int unit, bcm_port_t port, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_ports_add_async(int unit, bcm_field_group_t group, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_ports_create_mode_async(int unit, bcm_pbmp_t pbmp, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_ports_create_mode_id_async(int unit, bcm_pbmp_t pbmp, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_ports_get_async(int unit, bcm_field_group_t group, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_ports_remove_async(int unit, bcm_field_group_t group, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_presel_get_async(int unit, bcm_field_group_t group, bcm_field_presel_set_t * presel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_presel_set_async(int unit, bcm_field_group_t group, bcm_field_presel_set_t * presel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_priority_get_async(int unit, bcm_field_group_t group, int * priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_priority_set_async(int unit, bcm_field_group_t group, int priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_qualifier_offset_get_async(int unit, uint32 flags, bcm_field_group_t fg_id, bcm_field_qualify_t qualifier, int * offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_remove_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_set_async(int unit, bcm_field_group_t group, bcm_field_qset_t qset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_status_get_async(int unit, bcm_field_group_t group, bcm_field_group_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_traverse_async(int unit, bcm_field_group_traverse_cb callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_wlan_create_mode_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_wlan_create_mode_id_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_hints_add_async(int unit, bcm_field_hintid_t hint_id, bcm_field_hint_t * hint, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_hints_create_async(int unit, bcm_field_hintid_t * hint_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_hints_delete_async(int unit, bcm_field_hintid_t hint_id, bcm_field_hint_t * hint, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_hints_delete_all_async(int unit, bcm_field_hintid_t hint_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_hints_destroy_async(int unit, bcm_field_hintid_t hint_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_hints_get_async(int unit, bcm_field_hintid_t hint_id, bcm_field_hint_t * hint, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_internal_to_bcm_action_map_async(int unit, uint32 flags, int internal_action, uint32 bcm_action_size, bcm_field_internal_to_bcm_map_t * bcm_action_stage, uint32 * bcm_action_size_actual, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_macsec_DstMacRange_get_async(int unit, bcm_mac_t * lower_limit, bcm_mac_t * upper_limit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_macsec_DstMacRange_set_async(int unit, bcm_mac_t lower_limit, bcm_mac_t upper_limit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_name_to_id_async(int unit, uint32 flags, bcm_field_name_to_id_info_t * name_to_id_info, int * nof_ids, uint32 * ids, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_oam_stat_action_add_async(int unit, bcm_field_entry_t entry, bcm_field_oam_stat_action_t * oam_stat_action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_oam_stat_action_delete_async(int unit, bcm_field_entry_t entry, bcm_field_oam_stat_action_t * oam_stat_action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_oam_stat_action_delete_all_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_oam_stat_action_get_async(int unit, bcm_field_entry_t entry, bcm_field_oam_stat_action_t * oam_stat_action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_oam_stat_action_get_all_async(int unit, bcm_field_entry_t entry, int oam_stat_max, bcm_field_oam_stat_action_t * oam_stat_action, int * oam_stat_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_config_create_async(int unit, bcm_field_presel_config_t * presel_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_config_get_async(int unit, bcm_field_presel_t presel_id, bcm_field_presel_config_t * presel_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_config_set_async(int unit, bcm_field_presel_t presel_id, bcm_field_presel_config_t * presel_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_create_async(int unit, bcm_field_presel_t * presel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_create_id_async(int unit, bcm_field_presel_t presel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_create_stage_id_async(int unit, bcm_field_stage_t stage, bcm_field_presel_t presel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_destroy_async(int unit, bcm_field_presel_t presel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_get_async(int unit, uint32 flags, bcm_field_presel_entry_id_t * entry_id, bcm_field_presel_entry_data_t * entry_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_group_config_create_async(int unit, bcm_field_presel_group_config_t * group_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_group_config_get_async(int unit, bcm_field_presel_group_config_t * group_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_group_destroy_async(int unit, bcm_field_presel_group_t presel_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_set_async(int unit, uint32 flags, bcm_field_presel_entry_id_t * entry_id, bcm_field_presel_entry_data_t * entry_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qset_data_qualifier_add_async(int unit, bcm_field_qset_t * qset, int qual_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qset_data_qualifier_delete_async(int unit, bcm_field_qset_t * qset, int qual_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qset_data_qualifier_get_async(int unit, bcm_field_qset_t qset, int qual_max, int * qual_arr, int * qual_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qset_id_multi_delete_async(int unit, bcm_field_qualify_t qualifier, int num_objects, int * object_list, bcm_field_qset_t * qset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qset_id_multi_get_async(int unit, bcm_field_qset_t qset, bcm_field_qualify_t qualifier, int max_objects, int * object_list, int * count_objects, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qset_id_multi_set_async(int unit, bcm_field_qualify_t qualifier, int num_objects, int * object_list, bcm_field_qset_t * qset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualifier_create_async(int unit, uint32 flags, bcm_field_qualifier_info_create_t * qual_info, bcm_field_qualify_t * qual_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualifier_delete_async(int unit, bcm_field_entry_t entry, bcm_field_qualify_t qual_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualifier_destroy_async(int unit, bcm_field_qualify_t qual_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualifier_info_get_async(int unit, bcm_field_qualify_t qual_id, bcm_field_stage_t stage, bcm_field_qualifier_info_get_t * qual_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualifier_value_map_async(int unit, bcm_field_stage_t stage, bcm_field_qualify_t bcm_qual, uint32 bcm_value[BCM_FIELD_QUAL_WIDTH_IN_WORDS], uint32 hw_value[BCM_FIELD_QUAL_WIDTH_IN_WORDS], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_AppType_async(int unit, bcm_field_entry_t entry, bcm_field_AppType_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_AppType_get_async(int unit, bcm_field_entry_t entry, bcm_field_AppType_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ApplSignatureId_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ApplSignatureId_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpDstMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpDstMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpOpcode_async(int unit, bcm_field_entry_t entry, bcm_field_ArpOpcode_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpOpcode_get_async(int unit, bcm_field_entry_t entry, bcm_field_ArpOpcode_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpSenderIp4_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpSenderIp4_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpSrcMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpSrcMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpTargetIp4_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpTargetIp4_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BfdGoodPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BfdGoodPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BfdMultiplierLen_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BfdMultiplierLen_get_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BfdPktVersionOne_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BfdPktVersionOne_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BfdPktWithDstIpLoopbackAddr_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BfdPktWithDstIpLoopbackAddr_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BfdVerFlags_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BfdVerFlags_get_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BfdYourDiscriminator_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BfdYourDiscriminator_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BypassFilter_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BypassFilter32_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BypassFilter32_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BypassFilter_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BypassSrcMacFilter_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BypassSrcMacFilter_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapHdrRid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapHdrRid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapHdrType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapHdrType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadDip_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadDip6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadDip6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadDip_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadDstMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadDstMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadEtherType_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadEtherType_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadInnerVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadInnerVlanCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadInnerVlanCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadInnerVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadInnerVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadInnerVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadInnerVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadInnerVlan_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadIpProtocol_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadIpProtocol_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadL3HdrParseable_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadL3HdrParseable_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadL4DstPort_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadL4DstPort_get_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadL4HdrParseable_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadL4HdrParseable_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadL4SrcPort_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadL4SrcPort_get_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadOuterVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadOuterVlanCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadOuterVlanCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadOuterVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadOuterVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadOuterVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadOuterVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadOuterVlan_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadSOF_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadSOF_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadSip_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadSip6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadSip6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadSip_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadSrcMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadSrcMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadTos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadTos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadVlanFormat_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CapwapPayloadVlanFormat_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CascadedKeyValue_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CascadedKeyValue_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ClassId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ClassId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CnTag_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CnTagPresent_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CnTagPresent_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CnTag_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Color_async(int unit, bcm_field_entry_t entry, uint8 color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Color_get_async(int unit, bcm_field_entry_t entry, uint8 * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CompressionDstHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CompressionDstHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CompressionSrcHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CompressionSrcHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CongestionExperienced_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CongestionExperienced_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CongestionMarked_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CongestionMarked_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Container_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Container_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CopyToCpu_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CopyToCpuReasonHigh_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CopyToCpuReasonHigh_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CopyToCpuReasonLow_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CopyToCpuReasonLow_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CopyToCpuTruncate_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CopyToCpuTruncate_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CopyToCpu_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CosMapSelect_async(int unit, bcm_field_entry_t entry, bcm_field_cos_map_select_t cos_map_select, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CosMapSelect_get_async(int unit, bcm_field_entry_t entry, bcm_field_cos_map_select_t * cos_map_select, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CosQueueId_async(int unit, bcm_field_entry_t entry, bcm_gport_t queue_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CosQueueId_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * queue_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CosQueueNum_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CosQueueNum_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CpuQueue_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CpuQueue_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CpuVisibilityPacket_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CpuVisibilityPacket_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CustomHeaderData_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CustomHeaderData_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CustomHeaderPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CustomHeaderPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DSCP_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DSCP_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Decap_async(int unit, bcm_field_entry_t entry, bcm_field_decap_t decap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Decap_get_async(int unit, bcm_field_entry_t entry, bcm_field_decap_t * decap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DestVirtualPortValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DestVirtualPortValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DevicePortBitmap_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t data, bcm_pbmp_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DevicePortBitmap_get_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t * data, bcm_pbmp_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DevicePortOpaqueCommand_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DevicePortOpaqueCommand_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Dhcp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Dhcp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DoNotModify_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DoNotModify_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DosAttack_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DosAttackEvents_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DosAttackEvents_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DosAttack_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DownMepSatTerminated_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DownMepSatTerminated_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Drop_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DropReason_async(int unit, bcm_field_entry_t entry, bcm_field_drop_reason_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DropReason_get_async(int unit, bcm_field_entry_t entry, bcm_field_drop_reason_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Drop_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassField_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassField_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassL2_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassL2_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassL3_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassL3_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstCompressionClassId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstCompressionClassId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_gport_t port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_gport_t * port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstHiGig_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstHiGig_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6Class_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6ClassLower_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6ClassLower_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6ClassMsbNibble_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6ClassMsbNibble_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6ClassUpper_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6ClassUpper_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6Class_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6High_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6High_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6Low_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6Low_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIpClass_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIpClassLower_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIpClassLower_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIpClassMsbNibble_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIpClassMsbNibble_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIpClassUpper_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIpClassUpper_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIpClass_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIpLocal_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIpLocal_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL2MulticastGroup_async(int unit, bcm_field_entry_t entry, bcm_multicast_t group, bcm_multicast_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL2MulticastGroup_get_async(int unit, bcm_field_entry_t entry, bcm_multicast_t * group, bcm_multicast_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL3Egress_async(int unit, bcm_field_entry_t entry, bcm_if_t if_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL3EgressNextHops_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL3EgressNextHopsUnderlay_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL3EgressNextHopsUnderlay_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL3EgressNextHops_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL3EgressUnderlay_async(int unit, bcm_field_entry_t entry, bcm_if_t if_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL3EgressUnderlay_get_async(int unit, bcm_field_entry_t entry, bcm_if_t * if_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL3Egress_get_async(int unit, bcm_field_entry_t entry, bcm_if_t * if_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL3MulticastGroup_async(int unit, bcm_field_entry_t entry, bcm_multicast_t group, bcm_multicast_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL3MulticastGroup_get_async(int unit, bcm_field_entry_t entry, bcm_multicast_t * group, bcm_multicast_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMimGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t mim_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMimGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * mim_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMimGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t mim_port_id, bcm_gport_t mim_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMimGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * mim_port_id, bcm_gport_t * mim_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMplsGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t mpls_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMplsGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * mpls_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMplsGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t mpls_port_id, bcm_gport_t mpls_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMplsGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * mpls_port_id, bcm_gport_t * mpls_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMulticastGroup_async(int unit, bcm_field_entry_t entry, bcm_multicast_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMulticastGroup_get_async(int unit, bcm_field_entry_t entry, bcm_multicast_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMulticastGroups_async(int unit, bcm_field_entry_t entry, bcm_multicast_t group, bcm_multicast_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMulticastGroups_get_async(int unit, bcm_field_entry_t entry, bcm_multicast_t * group, bcm_multicast_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMultipath_async(int unit, bcm_field_entry_t entry, bcm_if_t mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMultipathLevel1_async(int unit, bcm_field_entry_t entry, bcm_if_t data, bcm_if_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMultipathLevel1_get_async(int unit, bcm_field_entry_t entry, bcm_if_t * data, bcm_if_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMultipathLevel2_async(int unit, bcm_field_entry_t entry, bcm_if_t data, bcm_if_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMultipathLevel2_get_async(int unit, bcm_field_entry_t entry, bcm_if_t * data, bcm_if_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMultipathOverlay_async(int unit, bcm_field_entry_t entry, bcm_if_t data, bcm_if_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMultipathOverlay_get_async(int unit, bcm_field_entry_t entry, bcm_if_t * data, bcm_if_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMultipathUnderlay_async(int unit, bcm_field_entry_t entry, bcm_if_t data, bcm_if_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMultipathUnderlay_get_async(int unit, bcm_field_entry_t entry, bcm_if_t * data, bcm_if_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMultipath_get_async(int unit, bcm_field_entry_t entry, bcm_if_t * mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstNivGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t niv_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstNivGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * niv_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstNivGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t niv_port_id, bcm_gport_t niv_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstNivGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * niv_port_id, bcm_gport_t * niv_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPort_async(int unit, bcm_field_entry_t entry, bcm_module_t data_modid, bcm_module_t mask_modid, bcm_port_t data_port, bcm_port_t mask_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPortSRLanId_async(int unit, bcm_field_entry_t entry, uint8 lan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPortSRLanId_get_async(int unit, bcm_field_entry_t entry, uint8 * lan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPortSRMode_async(int unit, bcm_field_entry_t entry, bcm_field_sr_port_mode_t type, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPortSRMode_get_async(int unit, bcm_field_entry_t entry, bcm_field_sr_port_mode_t * type, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPortSRNetId_async(int unit, bcm_field_entry_t entry, uint8 net_id, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPortSRNetId_get_async(int unit, bcm_field_entry_t entry, uint8 * net_id, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPortSRRoleInterlink_async(int unit, bcm_field_entry_t entry, uint8 data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPortSRRoleInterlink_get_async(int unit, bcm_field_entry_t entry, uint8 * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPortSRType_async(int unit, bcm_field_entry_t entry, bcm_field_port_sr_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPortSRType_get_async(int unit, bcm_field_entry_t entry, bcm_field_port_sr_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPort_get_async(int unit, bcm_field_entry_t entry, bcm_module_t * data_modid, bcm_module_t * mask_modid, bcm_port_t * data_port, bcm_port_t * mask_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstRpfGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstRpfGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstSysPortExt_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstSysPortExt_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstTrunk_async(int unit, bcm_field_entry_t entry, bcm_trunk_t data, bcm_trunk_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstTrunk_get_async(int unit, bcm_field_entry_t entry, bcm_trunk_t * data, bcm_trunk_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstType_async(int unit, bcm_field_entry_t entry, bcm_field_DstType_t dst_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstType_get_async(int unit, bcm_field_entry_t entry, bcm_field_DstType_t * dst_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstVlanGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t vlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstVlanGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * vlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstVlanGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t vlan_port_id, bcm_gport_t vlan_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstVlanGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * vlan_port_id, bcm_gport_t * vlan_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstVxlanGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t vxlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstVxlanGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * vxlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstVxlanGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t vxlan_port_id, bcm_gport_t vxlan_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstVxlanGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * vxlan_port_id, bcm_gport_t * vxlan_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstWlanGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t wlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstWlanGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * wlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstWlanGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t wlan_port_id, bcm_gport_t wlan_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstWlanGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * wlan_port_id, bcm_gport_t * wlan_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ECid_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ECid_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ETag_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ETag_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EcnValue_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EcnValue_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EffectiveTtl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EffectiveTtl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClass_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassL2Gre_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassL2Gre_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassL3Interface_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassL3InterfaceTunnel_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassL3InterfaceTunnel_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassL3Interface_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassPort_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassPort_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassTrill_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassTrill_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassTunnel_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassTunnel_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassVxlan_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassVxlan_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassWlan_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassWlan_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClass_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressDOPTrigger_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressDOPTrigger_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressForwardingClassId_async(int unit, bcm_field_entry_t entry, int data, int mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressForwardingClassId_get_async(int unit, bcm_field_entry_t entry, int * data, int * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressL3TunnelGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t tunnel_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressL3TunnelGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * tunnel_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressMcastPktReason_async(int unit, bcm_field_entry_t entry, bcm_field_mcast_pkt_reason_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressMcastPktReason_get_async(int unit, bcm_field_entry_t entry, bcm_field_mcast_pkt_reason_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressPktQueueNotification_async(int unit, bcm_field_entry_t entry, bcm_field_pkt_queue_notif_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressPktQueueNotification_get_async(int unit, bcm_field_entry_t entry, bcm_field_pkt_queue_notif_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressPortCtrlType_async(int unit, bcm_field_entry_t entry, bcm_field_egress_port_ctrl_t ctrl_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressPortCtrlType_get_async(int unit, bcm_field_entry_t entry, bcm_field_egress_port_ctrl_t * ctrl_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressPortQueue_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressPortQueue_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressTunnelIpHeaderDscp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressTunnelIpHeaderDscp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressTunnelIpHeaderEcn_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressTunnelIpHeaderEcn_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressTunnelIpHeaderFlowLabel_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressTunnelIpHeaderFlowLabel_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EtherType_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EtherTypeClass_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EtherTypeClass_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EtherType_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamClassVlanTranslateKeyFirst_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamClassVlanTranslateKeyFirst_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamClassVlanTranslateKeySecond_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamClassVlanTranslateKeySecond_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamClassVpn_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamClassVpn_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamDstClassL2_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamDstClassL2_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamHeaderBits0_31_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamHeaderBits0_31_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamHeaderBits32_63_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamHeaderBits32_63_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamInterfaceClassMim_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamInterfaceClassMim_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamInterfaceClassMpls_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamInterfaceClassMpls_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamInterfaceClassNiv_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamInterfaceClassNiv_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamInterfaceClassPort_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamInterfaceClassPort_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamInterfaceClassVlan_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamInterfaceClassVlan_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamInterfaceClassVxlan_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamInterfaceClassVxlan_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamTxPktUPMEP_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EthernetOamTxPktUPMEP_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExactMatchActionClassId_async(int unit, bcm_field_entry_t entry, int group_pri, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExactMatchActionClassId_get_async(int unit, bcm_field_entry_t entry, int group_pri, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExactMatchGroupClassId_async(int unit, bcm_field_entry_t entry, int group_pri, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExactMatchGroupClassId_get_async(int unit, bcm_field_entry_t entry, int group_pri, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExactMatchHitStatus_async(int unit, bcm_field_entry_t entry, int group_pri, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExactMatchHitStatus_get_async(int unit, bcm_field_entry_t entry, int group_pri, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExactMatchOpaqueObject0_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExactMatchOpaqueObject0_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExtensionHeader2Type_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExtensionHeader2Type_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExtensionHeaderSubCode_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExtensionHeaderSubCode_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExtensionHeaderType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExtensionHeaderType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit0_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit0_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit1_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit1_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit2_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit2_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit3_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit3_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit4_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit4_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit5_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit5_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit6_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit6_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit7_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit7_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue0_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue0_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue1_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue1_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue2_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue2_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue3_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue3_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue4_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue4_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue5_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue5_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue6_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue6_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue7_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue7_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FabricQueueTag_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FabricQueueTag_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeOxID_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeOxIDClass_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeOxIDClass_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeOxID_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeRxID_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeRxIDClass_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeRxIDClass_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeRxID_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeSOF_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeSOF_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeVersionIsZero_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeVersionIsZero_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Fhei_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FheiSize_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FheiSize_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Fhei_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanCSCtl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanCSCtl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDFCtl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDFCtl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDstId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDstIdClass_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDstIdClassLower_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDstIdClassLower_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDstIdClassMsbNibble_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDstIdClassMsbNibble_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDstIdClassUpper_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDstIdClassUpper_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDstIdClass_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDstId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanFCtl_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanFCtl_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanInner_async(int unit, bcm_field_entry_t entry, bcm_field_FibreChan_t fibre_chan_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanInner_get_async(int unit, bcm_field_entry_t entry, bcm_field_FibreChan_t * fibre_chan_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanOuter_async(int unit, bcm_field_entry_t entry, bcm_field_FibreChan_t fibre_chan_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanOuter_get_async(int unit, bcm_field_entry_t entry, bcm_field_FibreChan_t * fibre_chan_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanRCtl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanRCtl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcBindCheck_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcBindCheck_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcFpmaCheck_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcFpmaCheck_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcIdClass_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcIdClassLower_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcIdClassLower_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcIdClassMsbNibble_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcIdClassMsbNibble_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcIdClassUpper_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcIdClassUpper_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcIdClass_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTFabricId_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTFabricId_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTHopCount_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTHopCount_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTVersion_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTVersion_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTVsanId_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTVsanId_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTVsanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTVsanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanZoneCheck_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanZoneCheck_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FirstDropReason_async(int unit, bcm_field_entry_t entry, bcm_field_drop_reason_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FirstDropReason_get_async(int unit, bcm_field_entry_t entry, bcm_field_drop_reason_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlexStateResultA0_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlexStateResultA0_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlexStateResultA1_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlexStateResultA1_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowControlType_async(int unit, bcm_field_entry_t entry, bcm_field_flow_control_pkt_type_t fc_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowControlType_get_async(int unit, bcm_field_entry_t entry, bcm_field_flow_control_pkt_type_t * fc_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowId_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowId_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerAggregateClass_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerAggregateClass_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerCheck_async(int unit, bcm_field_entry_t entry, bcm_flowtracker_group_t flow_group_id, uint32 num_checks, bcm_field_flowtrackercheck_t * list_of_check_ids, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerCheck_get_async(int unit, bcm_field_entry_t entry, bcm_flowtracker_group_t flow_group_id, uint32 num_checks, bcm_field_flowtrackercheck_t * list_of_check_ids, uint32 * actual_num_checks, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerClassId_async(int unit, bcm_field_entry_t entry, int data, int mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerClassIdSource1_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerClassIdSource1_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerClassIdSource2_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerClassIdSource2_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerClassId_get_async(int unit, bcm_field_entry_t entry, int * data, int * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerCollectorCopy_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerCollectorCopy_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerDisabled_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerDisabled_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerExportQueueFull_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerExportQueueFull_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerFlowTableFull_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerFlowTableFull_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerGroupFlowExceeded_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerGroupFlowExceeded_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerGroupId_async(int unit, bcm_field_entry_t entry, int data, int mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerGroupId_get_async(int unit, bcm_field_entry_t entry, int * data, int * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerGroupValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerGroupValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerLearn_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerLearn_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerMeteringExceeded_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowtrackerMeteringExceeded_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardCode_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardCode_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardCopy_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardCopy_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardHdrDstMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardHdrDstMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardHdrSrcMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardHdrSrcMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardHdrVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardHdrVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingEligible_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingEligible_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingHeaderOffset_async(int unit, bcm_field_entry_t entry, bcm_field_data_offset_base_t base_header, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingHeaderOffset_get_async(int unit, bcm_field_entry_t entry, bcm_field_data_offset_base_t * base_header, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingOuterTpid_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingOuterTpid_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingOuterVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingOuterVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingPacketRes_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingPacketRes_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingStatus_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingStatus_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingType_async(int unit, bcm_field_entry_t entry, bcm_field_ForwardingType_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingType_get_async(int unit, bcm_field_entry_t entry, bcm_field_ForwardingType_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingVlanValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingVlanValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FromMacSecPort_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FromMacSecPort_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FrontPanelPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FrontPanelPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GbpDstId_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GbpDstId_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GbpPresent_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GbpPresent_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GbpSrcId_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GbpSrcId_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GeneratedTtl_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GeneratedTtl_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GenericAssociatedChannelLabelValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GenericAssociatedChannelLabelValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GenevePktVersionZero_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GenevePktVersionZero_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GenevePktWithOam_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GenevePktWithOam_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GpeFlags_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GpeFlags_get_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GpeNetworkId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GpeNetworkId_get_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GpePktVersionZero_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GpePktVersionZero_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GpePktWithOam_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GpePktWithOam_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GpeProtocol_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GpeProtocol_get_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GpeReserved0_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GpeReserved0_get_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GpeReserved1_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GpeReserved1_get_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GroupClass_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GroupClass_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HeaderFormat_async(int unit, bcm_field_entry_t entry, bcm_field_header_format_t header_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HeaderFormatExtension_async(int unit, bcm_field_entry_t entry, bcm_field_header_format_extension_t header_format_extension, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HeaderFormatExtension_get_async(int unit, bcm_field_entry_t entry, bcm_field_header_format_extension_t * header_format_extension, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HeaderFormatSet_async(int unit, bcm_field_entry_t entry, bcm_field_header_format_set_t header_format_set, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HeaderFormatSet_get_async(int unit, bcm_field_entry_t entry, bcm_field_header_format_set_t * header_format_set, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HeaderFormat_get_async(int unit, bcm_field_entry_t entry, bcm_field_header_format_t * header_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGig_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGig3Class_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGig3Class_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGig3Flags_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGig3Flags_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGig3Pkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGig3Pkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigColor_async(int unit, bcm_field_entry_t entry, uint8 color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigColor_get_async(int unit, bcm_field_entry_t entry, uint8 * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDoNotFlags_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDoNotFlags_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_gport_t port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_gport_t * port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstModPortGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_gport_t port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstModPortGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_gport_t * port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstModuleGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_gport_t port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstModuleGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_gport_t * port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstMulticast_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstMulticastGroupId_async(int unit, bcm_field_entry_t entry, bcm_multicast_t group, bcm_multicast_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstMulticastGroupId_get_async(int unit, bcm_field_entry_t entry, bcm_multicast_t * group, bcm_multicast_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstMulticast_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstPortGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_gport_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstPortGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_gport_t * port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstTrunk_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstTrunkId_async(int unit, bcm_field_entry_t entry, bcm_trunk_t data, bcm_trunk_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstTrunkId_get_async(int unit, bcm_field_entry_t entry, bcm_trunk_t * data, bcm_trunk_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstTrunk_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigDstType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigEgressMcast_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigEgressMcast_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigExtendedHeaderPresent_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigExtendedHeaderPresent_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigForwardingType_async(int unit, bcm_field_entry_t entry, bcm_field_HiGigForwardingType_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigForwardingType_get_async(int unit, bcm_field_entry_t entry, bcm_field_HiGigForwardingType_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigGbpPresent_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigGbpPresent_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigGbpSrcId_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigGbpSrcId_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigIngressClassificationTag_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigIngressClassificationTag_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigIngressL3SwitchPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigIngressL3SwitchPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigIngressTagged_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigIngressTagged_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigIntCongestionNotification_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigIntCongestionNotification_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigLabel_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigLabelType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigLabelType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigLabel_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigLoadBalanceID_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigLoadBalanceID_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigMirrorOrSwitchPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigMirrorOrSwitchPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigMirrorToVp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigMirrorToVp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigMplsPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigMplsPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigMulticastIndex_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigMulticastIndex_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEngineClassificationTag_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEngineClassificationTag_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEngineDeferredFlags_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEngineDeferredFlags_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEngineDscpNew_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEngineDscpNew_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEnginePktPriNew_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEnginePktPriNew_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEnginePreserveDot1p_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEnginePreserveDot1p_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEnginePreserveDscp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEnginePreserveDscp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEngineSrcType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEngineSrcType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEngineVxltStatus_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigOffloadEngineVxltStatus_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigPortFilteringMode_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigPortFilteringMode_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigPreserveFlags_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigPreserveFlags_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigProtectionSwitchingStatus_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigProtectionSwitchingStatus_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigProxy_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigProxyTunnelType_async(int unit, bcm_field_entry_t entry, bcm_field_higig_proxy_tunnel_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigProxyTunnelType_get_async(int unit, bcm_field_entry_t entry, bcm_field_higig_proxy_tunnel_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigProxy_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigReplicationId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigReplicationId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigSrcGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_gport_t port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigSrcGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_gport_t * port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigSrcModPortGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_gport_t port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigSrcModPortGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_gport_t * port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigSrcModuleGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_gport_t port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigSrcModuleGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_gport_t * port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigSrcPortGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_gport_t port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigSrcPortGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_gport_t * port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigSrcTrunk_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigSrcTrunk_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigSrcType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigSrcType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigTrafficClass_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigTrafficClass_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigVlan_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigVlan_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigVni_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigVni_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigVpLagFailoverPacket_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigVpLagFailoverPacket_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigVpPreserveFlags_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigVpPreserveFlags_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigVpReplicationId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigVpReplicationId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGig_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IEEE1588Command_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IEEE1588Command_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IEEE1588CompensateTimeStamp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IEEE1588CompensateTimeStamp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IEEE1588Encapsulation_async(int unit, bcm_field_entry_t entry, bcm_field_IEEE1588Encap_t encap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IEEE1588Encapsulation_get_async(int unit, bcm_field_entry_t entry, bcm_field_IEEE1588Encap_t * encap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IEEE1588HeaderOffset_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IEEE1588HeaderOffset_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_INTProbeMarker1_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_INTProbeMarker1_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_INTProbeMarker2_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_INTProbeMarker2_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_INTReserved4Bytes_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_INTReserved4Bytes_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IOAMNameSpaceIdMatch_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IOAMNameSpaceIdMatch_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IOAMPktOverflowed_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IOAMPktOverflowed_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IOAMRemainingLenValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IOAMRemainingLenValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ISid_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ISid_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ITag_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ITag_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IcmpError_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IcmpError_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IcmpType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IcmpTypeCode_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IcmpTypeCode_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IcmpType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaActionVector_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaActionVector_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaAttrOpaqData_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaAttrOpaqData_get_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaCurrentLength_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaCurrentLengthEqualToZero_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaCurrentLengthEqualToZero_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaCurrentLength_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaFlags_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaFlags_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaGlobalNameSpace_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaGlobalNameSpace_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaHopCount_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaHopCount_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaHopLimit_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaHopLimitEqualToZero_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaHopLimitEqualToZero_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaHopLimit_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaLocalNameSpace_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaLocalNameSpace_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaMaxLength_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaMaxLength_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaNextHdr_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaNextHdr_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaRequestVector_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaRequestVector_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaVersion_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaVersion2_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaVersion2_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IfaVersion_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IgmpMaxRespTime_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IgmpMaxRespTime_get_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IgmpType_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IgmpType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InDscpExp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InDscpExp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InPort_async(int unit, bcm_field_entry_t entry, bcm_port_t data, bcm_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InPort_get_async(int unit, bcm_field_entry_t entry, bcm_port_t * data, bcm_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InPorts_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t data, bcm_pbmp_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InPorts_get_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t * data, bcm_pbmp_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InVPort_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InVPort32_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InVPort32_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InVPortWide_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InVPortWide_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InVPort_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InVportDataIndex_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InVportDataIndex_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IncomingIpIfClass_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IncomingIpIfClass_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IncomingOuterVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IncomingOuterVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IncomingVlanFormat_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IncomingVlanFormat_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressClassField_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressClassField_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressDropEthernetOamControl_async(int unit, bcm_field_entry_t entry, bcm_field_oam_drop_mep_type_t mep_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressDropEthernetOamControl_get_async(int unit, bcm_field_entry_t entry, bcm_field_oam_drop_mep_type_t * mep_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressDropEthernetOamData_async(int unit, bcm_field_entry_t entry, bcm_field_oam_drop_mep_type_t mep_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressDropEthernetOamData_get_async(int unit, bcm_field_entry_t entry, bcm_field_oam_drop_mep_type_t * mep_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressDropMplsOamControl_async(int unit, bcm_field_entry_t entry, bcm_field_oam_drop_mep_type_t mep_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressDropMplsOamControl_get_async(int unit, bcm_field_entry_t entry, bcm_field_oam_drop_mep_type_t * mep_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressDropMplsOamData_async(int unit, bcm_field_entry_t entry, bcm_field_oam_drop_mep_type_t mep_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressDropMplsOamData_get_async(int unit, bcm_field_entry_t entry, bcm_field_oam_drop_mep_type_t * mep_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressECid_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressECid_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressInterfaceClass_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressInterfaceClassPort_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressInterfaceClassPort_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressInterfaceClassVPort_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressInterfaceClassVPort_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressInterfaceClass_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressL2InterfaceFlexDigestCtrlIdA_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressL2InterfaceFlexDigestCtrlIdA_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressL2InterfaceFlexDigestCtrlIdB_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressL2InterfaceFlexDigestCtrlIdB_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressL2InterfaceOpaqueCtrlId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressL2InterfaceOpaqueCtrlId1_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressL2InterfaceOpaqueCtrlId1_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressL2InterfaceOpaqueCtrlId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressL3InterfaceOpaqueCtrlId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressL3InterfaceOpaqueCtrlId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressStpState_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressStpState_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressVPortBridgeDisable_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressVPortBridgeDisable_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerApplSignatureId_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerApplSignatureId_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerBfdPktVersionOne_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerBfdPktVersionOne_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDSCP_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDSCP_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDosAttack_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDosAttackEvents_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDosAttackEvents_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDosAttack_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp6High_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp6High_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerEtherType_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerEtherType_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6FlowLabel_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6FlowLabel_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6HopLimit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6HopLimit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6NextHeader_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6NextHeader_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6PktHopLimit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6PktHopLimit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6PktNextHeader_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6PktNextHeader_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6PktTrafficClass_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6PktTrafficClass_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpFrag_async(int unit, bcm_field_entry_t entry, bcm_field_IpFrag_t frag_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpFrag_get_async(int unit, bcm_field_entry_t entry, bcm_field_IpFrag_t * frag_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpInfo_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpInfo_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpProtocol_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpProtocolCommon_async(int unit, bcm_field_entry_t entry, bcm_field_IpProtocolCommon_t protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpProtocolCommon_get_async(int unit, bcm_field_entry_t entry, bcm_field_IpProtocolCommon_t * protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpProtocol_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpType_async(int unit, bcm_field_entry_t entry, bcm_field_IpType_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpType_get_async(int unit, bcm_field_entry_t entry, bcm_field_IpType_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerL2MacInfo_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerL2MacInfo_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerL4DstPort_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerL4DstPort_get_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerL4Info_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerL4Info_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerL4Ports_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerL4Ports_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerL4SrcPort_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerL4SrcPort_get_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerPriTaggedPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerPriTaggedPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp6High_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp6High_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTcpControl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTcpControl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTpid_async(int unit, bcm_field_entry_t entry, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTpid_get_async(int unit, bcm_field_entry_t entry, uint16 * tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTtl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTtl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanActionRange_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanActionRange_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanRangeMatch_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanRangeMatch_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanTagPreserve_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanTagPreserve_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlan_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntCongestionNotification_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntCongestionNotification_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntCtrl_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntCtrl_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntFlags_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntFlags_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntHdrPresent_async(int unit, bcm_field_entry_t entry, bcm_field_IntHdr_Location_t int_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntHdrPresent_get_async(int unit, bcm_field_entry_t entry, bcm_field_IntHdr_Location_t * int_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntHdrType_async(int unit, bcm_field_entry_t entry, bcm_field_IntHdr_Type_t int_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntHdrType_get_async(int unit, bcm_field_entry_t entry, bcm_field_IntHdr_Type_t * int_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntMetadataHdrType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntMetadataHdrType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntPktFinalHop_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntPktFinalHop_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntPktLengthValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntPktLengthValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntPktOverflowed_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntPktOverflowed_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntPktType_async(int unit, bcm_field_entry_t entry, bcm_field_int_pkt_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntPktType_get_async(int unit, bcm_field_entry_t entry, bcm_field_int_pkt_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntPktVersionOne_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntPktVersionOne_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntPriority_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntPriority_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntUdpChecksumEqualsZero_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntUdpChecksumEqualsZero_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassL2_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassL2Type_async(int unit, bcm_field_entry_t entry, bcm_field_interface_class_l2_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassL2Type_get_async(int unit, bcm_field_entry_t entry, bcm_field_interface_class_l2_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassL2_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassL3_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassL3Tunnel_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassL3Tunnel_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassL3_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassMpls_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassMplsLookup1_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassMplsLookup1_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassMplsLookup2_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassMplsLookup2_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassMplsLookup3_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassMplsLookup3_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassMpls_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassPort_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassPort_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassProcessingPort_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassProcessingPort_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassVPort_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassVPort_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceInPorts_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t data, bcm_pbmp_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceInPorts_get_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t * data, bcm_pbmp_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceIngressKeySelectClassPort_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceIngressKeySelectClassPort_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceLookupClassPort_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceLookupClassPort_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip4Length_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip4Length_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip4Tos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip4Tos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6FlowLabel_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6FlowLabel_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6HopLimit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6HopLimit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6Length_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6Length_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6NextHeader_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6NextHeader_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6PktHopLimit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6PktHopLimit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6PktNextHeader_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6PktNextHeader_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6PktTrafficClass_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6PktTrafficClass_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6TrafficClass_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6TrafficClass_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpAddrsNormalized_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpAddrsNormalized_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpChecksumOkPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpChecksumOkPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpExtHdr2Protocol_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpExtHdr2Protocol_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpExtensionHdrNum_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpExtensionHdrNum_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFlags_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFlags_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFrag_async(int unit, bcm_field_entry_t entry, bcm_field_IpFrag_t frag_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFragInfo_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFragInfo_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFragNonOrFirst_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFragNonOrFirst_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFragPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFragPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFrag_get_async(int unit, bcm_field_entry_t entry, bcm_field_IpFrag_t * frag_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFwdPlusOneNextProtocol_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFwdPlusOneNextProtocol_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpIdentifier_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpIdentifier_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpInIpPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpInIpPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpInfo_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpInfo_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpMulticastCompatible_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpMulticastCompatible_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpOptionHdrType_async(int unit, bcm_field_entry_t entry, bcm_field_ip_option_hdr_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpOptionHdrType_get_async(int unit, bcm_field_entry_t entry, bcm_field_ip_option_hdr_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpProtocol_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpProtocolClass_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpProtocolClass_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpProtocolCommon_async(int unit, bcm_field_entry_t entry, bcm_field_IpProtocolCommon_t protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpProtocolCommon_get_async(int unit, bcm_field_entry_t entry, bcm_field_IpProtocolCommon_t * protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpProtocol_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpTtlZeroPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpTtlZeroPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpTunnelHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpTunnelHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpTunnelTtl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpTunnelTtlClassZero_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpTunnelTtlClassZero_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpTunnelTtl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpTunnelValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpTunnelValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpType_async(int unit, bcm_field_entry_t entry, bcm_field_IpType_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpType_get_async(int unit, bcm_field_entry_t entry, bcm_field_IpType_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcStarGroupHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcStarGroupHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcStarGroupValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcStarGroupValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcV4Pkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcV4Pkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcV6Pkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcV6Pkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ipv4OptionHdrType_async(int unit, bcm_field_entry_t entry, bcm_field_ip_option_hdr_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ipv4OptionHdrType_get_async(int unit, bcm_field_entry_t entry, bcm_field_ip_option_hdr_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ipv6ExtensionHdrType_async(int unit, bcm_field_entry_t entry, bcm_field_ip_option_hdr_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ipv6ExtensionHdrType_get_async(int unit, bcm_field_entry_t entry, bcm_field_ip_option_hdr_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IsEqualValue_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IsEqualValue_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IsUcastCosQueue_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IsUcastCosQueue_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_KeyGenVar_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2CacheHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2CacheHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DestHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DestHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DestSRNodeType_async(int unit, bcm_field_entry_t entry, bcm_field_sr_node_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DestSRNodeType_get_async(int unit, bcm_field_entry_t entry, bcm_field_sr_node_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DestValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DestValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DstMiscClassId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DstMiscClassId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DstMulticastHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DstMulticastHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2EgrIntfEfpCtrlId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2EgrIntfEfpCtrlId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2EgressInterface_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2EgressInterface_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2Format_async(int unit, bcm_field_entry_t entry, bcm_field_L2Format_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2Format_get_async(int unit, bcm_field_entry_t entry, bcm_field_L2Format_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreFlowId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreFlowId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreProtocolType_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreProtocolType_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreSrcIpHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreSrcIpHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreVfiHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreVfiHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreVsid_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreVsid_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2IngressInterface_async(int unit, bcm_field_entry_t entry, uint32 intf_id, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2IngressInterface_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2InterfaceMatch_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2InterfaceMatch_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2Learn_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2LearnCommands_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2LearnCommands_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2Learn_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2MacInfo_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2MacInfo_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2PayLoad_async(int unit, bcm_field_entry_t entry, uint32 length, const uint8 * data, const uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2PayLoad_get_async(int unit, bcm_field_entry_t entry, uint32 length, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2PayloadFirstEightBytes_async(int unit, bcm_field_entry_t entry, uint32 data1, uint32 data2, uint32 mask1, uint32 mask2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2PayloadFirstEightBytes_get_async(int unit, bcm_field_entry_t entry, uint32 * data1, uint32 * data2, uint32 * mask1, uint32 * mask2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2PktType_async(int unit, bcm_field_entry_t entry, bcm_field_l2_pkt_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2PktType_get_async(int unit, bcm_field_entry_t entry, bcm_field_l2_pkt_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcDiscard_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcDiscard_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcMiscClassId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcMiscClassId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcMulticastHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcMulticastHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcStatic_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcStatic_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2StationMove_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2StationMove_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3Check_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3Check_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestHostHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestHostHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestRouteHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestRouteHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestRouteValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestRouteValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DstMiscClassId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DstMiscClassId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3EgressIntf_async(int unit, bcm_field_entry_t entry, uint32 intf_id, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3EgressIntf_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3Ingress_async(int unit, bcm_field_entry_t entry, uint32 intf_id, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3Ingress_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3Routable_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3Routable_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcBind_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcBind_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcHostHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcHostHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcMiscClassId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcMiscClassId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcRouteHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcRouteHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcRouteValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcRouteValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4DstPort_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4DstPortClass_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4DstPortClass_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4DstPort_get_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4Info_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4Info_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4PortRangeCheck_async(int unit, bcm_field_entry_t entry, bcm_field_range_t range, int invert, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4PortRangeCheck_get_async(int unit, bcm_field_entry_t entry, int max_count, bcm_field_range_t * range, int * invert, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4Ports_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4Ports_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4SrcPort_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4SrcPortClass_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4SrcPortClass_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4SrcPort_get_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte1_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte1_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte2_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte2_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte3_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte3_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte4_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte4_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte5_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte5_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte6_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte6_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte7_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte7_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte8_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L5PayloadByte8_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LastIpProtocol_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LastIpProtocol_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnExtension_async(int unit, bcm_field_entry_t entry, uint8 data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnExtension_get_async(int unit, bcm_field_entry_t entry, uint8 * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnInVPort_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnInVPort_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnSrcMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnSrcMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnSrcPort_async(int unit, bcm_field_entry_t entry, bcm_gport_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnSrcPort_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnVlan_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Llc_async(int unit, bcm_field_entry_t entry, bcm_field_llc_header_t data, bcm_field_llc_header_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Llc_get_async(int unit, bcm_field_entry_t entry, bcm_field_llc_header_t * data, bcm_field_llc_header_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LlidValue_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LlidValue_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LookupClassField_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LookupClassField_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopBackColor_async(int unit, bcm_field_entry_t entry, uint8 color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopBackColor_get_async(int unit, bcm_field_entry_t entry, uint8 * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopBackCpuMasqueradePktProfile_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopBackCpuMasqueradePktProfile_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopBackPacketProcessingPort_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_gport_t port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopBackPacketProcessingPort_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_gport_t * port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopBackQueue_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopBackQueue_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopBackSrcGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_gport_t port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopBackSrcGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_gport_t * port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopBackTrafficClass_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopBackTrafficClass_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Loopback_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackHdrDstType_async(int unit, bcm_field_entry_t entry, bcm_field_DstType_t lb_hdr_dst_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackHdrDstType_get_async(int unit, bcm_field_entry_t entry, bcm_field_DstType_t * lb_hdr_dst_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackHdrFlags_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackHdrFlags_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackHiGig3Flags_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackHiGig3Flags_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackIfaSwitchCopyDrop_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackIfaSwitchCopyDrop_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackLagFailoverPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackLagFailoverPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackSubtype_async(int unit, bcm_field_entry_t entry, bcm_field_loopback_subtype_t lb_subtype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackSubtype_get_async(int unit, bcm_field_entry_t entry, bcm_field_loopback_subtype_t * lb_subtype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackType_async(int unit, bcm_field_entry_t entry, bcm_field_LoopbackType_t loopback_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackType_get_async(int unit, bcm_field_entry_t entry, bcm_field_LoopbackType_t * loopback_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Loopback_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MHOpcode_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MHOpcode_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MHPriority_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MHPriority_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacAddrsNormalized_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacAddrsNormalized_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecControlPkt_async(int unit, bcm_field_entry_t entry, bcm_field_macsec_encrypt_decrypt_pkt_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecControlPkt_get_async(int unit, bcm_field_entry_t entry, bcm_field_macsec_encrypt_decrypt_pkt_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecDstMacRangeHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecDstMacRangeHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecFlow_async(int unit, bcm_field_entry_t entry, bcm_field_macsec_flow_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecFlow_get_async(int unit, bcm_field_entry_t entry, bcm_field_macsec_flow_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecOpaque_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecOpaque_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecSecTagCbit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecSecTagCbit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecSecTagEbit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecSecTagEbit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecTag_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecTagPresent_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecTagPresent_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacSecTag_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_McastPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_McastPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimSrcGportHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimSrcGportHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimVfiHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimVfiHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimVlanCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimVlanCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlDstMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlDstMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlInnerTag_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlInnerTag_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlSrcMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlSrcMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlVlanCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlVlanCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimlVlan_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorCopy_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorCopy_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorDest_async(int unit, bcm_field_entry_t entry, bcm_gport_t mirror_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorDest_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * mirror_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorEgressDisabled_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorEgressDisabled_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorOnDrop_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorOnDropReason_async(int unit, bcm_field_entry_t entry, bcm_field_mirror_on_drop_reason_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorOnDropReason_get_async(int unit, bcm_field_entry_t entry, bcm_field_mirror_on_drop_reason_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorOnDrop_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorPktType_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorPktType_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MixedSrcClassId_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t pbmp, bcm_field_src_class_t data, bcm_field_src_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MixedSrcClassId_get_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t pbmp, bcm_field_src_class_t * data, bcm_field_src_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsBos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsBos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsControlPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsControlPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsControlWord_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsControlWordValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsControlWordValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsControlWord_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsCtrlPktType_async(int unit, bcm_field_entry_t entry, bcm_field_mpls_ctrl_pkt_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsCtrlPktType_get_async(int unit, bcm_field_entry_t entry, bcm_field_mpls_ctrl_pkt_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsCwPresent_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsCwPresent_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingControlWord_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingControlWord_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabel_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelAction_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelAction32_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelAction32_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelAction_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelBos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelBos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelExp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelExp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelPayload_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelPayload_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelTtl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelTtl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabel_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Bos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Bos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Exp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Exp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Hit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Hit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Id_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Id_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Ttl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Ttl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Bos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Bos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Exp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Exp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Hit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Hit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Id_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Id_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Ttl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Ttl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Bos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Bos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Exp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Exp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Id_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Id_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Ttl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Ttl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel4_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel4Bos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel4Bos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel4Exp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel4Exp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel4Id_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel4Id_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel4Ttl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel4Ttl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel4_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel5_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel5Bos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel5Bos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel5Exp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel5Exp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel5Id_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel5Id_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel5Ttl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel5Ttl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel5_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel6_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel6Bos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel6Bos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel6Exp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel6Exp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel6Id_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel6Id_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel6Ttl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel6Ttl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel6_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel7_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel7Bos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel7Bos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel7Exp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel7Exp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel7Id_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel7Id_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel7Ttl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel7Ttl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel7_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsMcastEthertypePresent_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsMcastEthertypePresent_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamACH_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamACH_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamClassMplsSwitchLabel_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamClassMplsSwitchLabel_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamControlPktType_async(int unit, bcm_field_entry_t entry, bcm_field_MplsOam_Control_pktType_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamControlPktType_get_async(int unit, bcm_field_entry_t entry, bcm_field_MplsOam_Control_pktType_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamGALExposed_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamGALExposed_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamGALLabelOnly_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamGALLabelOnly_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamHeaderBits0_31_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamHeaderBits0_31_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamHeaderBits32_63_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamHeaderBits32_63_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamUpperLabelDataDrop_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOamUpperLabelDataDrop_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOuterLabelPop_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOuterLabelPop_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsStationHitTunnelUnterminated_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsStationHitTunnelUnterminated_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTerminated_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTerminatedHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTerminatedHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTerminatedValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTerminatedValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTerminated_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTopHeader_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTopHeader_get_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsVcLabelHeader_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsVcLabelHeader_get_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MyStation2Hit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MyStation2Hit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MyStationHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MyStationHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NatDstRealmId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NatDstRealmId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NatNeeded_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NatNeeded_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NatSrcRealmId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NatSrcRealmId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NativeVSwitch_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NativeVSwitchValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NativeVSwitchValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NativeVSwitch_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NetworkTagMulticastPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NetworkTagMulticastPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NetworkTagType_async(int unit, bcm_field_entry_t entry, bcm_field_network_tag_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NetworkTagType_get_async(int unit, bcm_field_entry_t entry, bcm_field_network_tag_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NshServiceIndex_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NshServiceIndex_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NshServicePathId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NshServicePathId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamDownMEPLoopbackPacket_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamDownMEPLoopbackPacket_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressClass2Vxlt_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressClass2Vxlt_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressClassPort_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressClassPort_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressClassSrcMac_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressClassSrcMac_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressClassVxlt_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressClassVxlt_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressEtherType_async(int unit, bcm_field_entry_t entry, uint16 data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressEtherType_get_async(int unit, bcm_field_entry_t entry, uint16 * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressMulticastMacHit_async(int unit, bcm_field_entry_t entry, uint8 data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressMulticastMacHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressPortUnicastDstMacHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressPortUnicastDstMacHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressVxltFirstHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressVxltFirstHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressVxltSecondHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamEgressVxltSecondHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamHeaderBits0_31_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamHeaderBits0_31_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamHeaderBits32_63_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamHeaderBits32_63_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamHeaderOffset_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamHeaderOffset_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamInLifId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamInLifIdValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamInLifIdValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamInLifId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamMdl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamMdl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamMepId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamMepId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamMeterDisable_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamMeterDisable_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamStampOffset_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamStampOffset_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamSubtype_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamSubtype_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamTsSystemHeader_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamTsSystemHeader_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamType_async(int unit, bcm_field_entry_t entry, bcm_field_oam_type_t oam_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamType_get_async(int unit, bcm_field_entry_t entry, bcm_field_oam_type_t * oam_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamUpMep_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamUpMep_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OpaqueObject1_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OpaqueObject1_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OpaqueObject2_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OpaqueObject2_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OpaqueObject3_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OpaqueObject3_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OpaqueObject4_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OpaqueObject4_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OpaqueTagHigh_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OpaqueTagHigh_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OpaqueTagLow_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OpaqueTagLow_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OpaqueTagType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OpaqueTagType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutPort_async(int unit, bcm_field_entry_t entry, bcm_port_t data, bcm_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutPort_get_async(int unit, bcm_field_entry_t entry, bcm_port_t * data, bcm_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutPorts_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t data, bcm_pbmp_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutPorts_get_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t * data, bcm_pbmp_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutVPort_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutVPort32_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutVPort32_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutVPort_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterIpInfo_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterIpInfo_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL2MacInfo_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL2MacInfo_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL4Info_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL4Info_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte1_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte1_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte2_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte2_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte3_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte3_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte4_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte4_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte5_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte5_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte6_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte6_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte7_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte7_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte8_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterL5PayloadByte8_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterPriTaggedPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterPriTaggedPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterTpid_async(int unit, bcm_field_entry_t entry, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterTpid_get_async(int unit, bcm_field_entry_t entry, uint16 * tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanActionRange_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanActionRange_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanPriCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanPriCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanRangeMatch_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanRangeMatch_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanTagPreserve_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanTagPreserve_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlan_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayEgressClass_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayEgressClass_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayIpOptionHdrType_async(int unit, bcm_field_entry_t entry, bcm_field_ip_option_hdr_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayIpOptionHdrType_get_async(int unit, bcm_field_entry_t entry, bcm_field_ip_option_hdr_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayIpv4OptionHdrType_async(int unit, bcm_field_entry_t entry, bcm_field_ip_option_hdr_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayIpv4OptionHdrType_get_async(int unit, bcm_field_entry_t entry, bcm_field_ip_option_hdr_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayIpv6ExtensionHdrType_async(int unit, bcm_field_entry_t entry, bcm_field_ip_option_hdr_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayIpv6ExtensionHdrType_get_async(int unit, bcm_field_entry_t entry, bcm_field_ip_option_hdr_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayL2PktType_async(int unit, bcm_field_entry_t entry, bcm_field_l2_pkt_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayL2PktType_get_async(int unit, bcm_field_entry_t entry, bcm_field_l2_pkt_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayNetworkTagType_async(int unit, bcm_field_entry_t entry, bcm_field_network_tag_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayNetworkTagType_get_async(int unit, bcm_field_entry_t entry, bcm_field_network_tag_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayPktType_async(int unit, bcm_field_entry_t entry, bcm_field_pkt_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayPktType_get_async(int unit, bcm_field_entry_t entry, bcm_field_pkt_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayVlanFormat_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OverlayVlanFormat_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketIsIEEE1588_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketIsIEEE1588_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketLength_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketLengthRangeCheck_async(int unit, bcm_field_entry_t entry, bcm_field_range_t range, int invert, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketLengthRangeCheck_get_async(int unit, bcm_field_entry_t entry, int max_count, bcm_field_range_t * range, int * invert, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketLength_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketRes_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketRes_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketSize_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketSize_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketStatus_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketStatus_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketTerminatedBytes_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketTerminatedBytes_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PdelayReq_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PdelayReq_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PimBidirDfStatus_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PimBidirDfStatus_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PktDstAddrType_async(int unit, bcm_field_entry_t entry, uint32 dst_addr_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PktDstAddrType_get_async(int unit, bcm_field_entry_t entry, uint32 * dst_addr_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PktFlowType_async(int unit, bcm_field_entry_t entry, bcm_field_pkt_flow_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PktFlowType_get_async(int unit, bcm_field_entry_t entry, bcm_field_pkt_flow_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PktFwdType_async(int unit, bcm_field_entry_t entry, bcm_field_PktFwdType_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PktFwdType_get_async(int unit, bcm_field_entry_t entry, bcm_field_PktFwdType_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PktInnerDstAddrType_async(int unit, bcm_field_entry_t entry, uint32 dst_addr_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PktInnerDstAddrType_get_async(int unit, bcm_field_entry_t entry, uint32 * dst_addr_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PktIsVisible_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PktIsVisible_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PktMiscCtrl_async(int unit, bcm_field_entry_t entry, bcm_field_pkt_misc_ctrl_t pkt_misc_ctrl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PktMiscCtrl_get_async(int unit, bcm_field_entry_t entry, bcm_field_pkt_misc_ctrl_t * pkt_misc_ctrl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PktType_async(int unit, bcm_field_entry_t entry, bcm_field_pkt_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PktType_get_async(int unit, bcm_field_entry_t entry, bcm_field_pkt_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PolicerIntPrio_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PolicerIntPrio_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PortOrientation_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PortOrientation_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PphType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PphType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PreemptablePacket_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PreemptablePacket_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PreselId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PreselId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ProtocolPktOpaqueCtrlId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ProtocolPktOpaqueCtrlId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ptch_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ptch_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PtpMsgType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PtpMsgType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PtpPktCtrl_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PtpPktCtrl_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PtpReserved1_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PtpReserved1_get_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PtpTransportSpec_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PtpTransportSpec_get_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PtpVersion_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PtpVersion_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RangeCheck_async(int unit, bcm_field_entry_t entry, bcm_field_range_t range, int invert, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RangeCheckGroup_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RangeCheckGroup_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RangeCheck_get_async(int unit, bcm_field_entry_t entry, int max_count, bcm_field_range_t * range, int * invert, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RawResidenceTime_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RawResidenceTime_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RecircleHdrCode_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RecircleHdrCode_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RecircleHdrDropReason_async(int unit, bcm_field_entry_t entry, bcm_field_drop_reason_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RecircleHdrDropReason_get_async(int unit, bcm_field_entry_t entry, bcm_field_drop_reason_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RecircleHdrFirstDropReason_async(int unit, bcm_field_entry_t entry, bcm_field_drop_reason_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RecircleHdrFirstDropReason_get_async(int unit, bcm_field_entry_t entry, bcm_field_drop_reason_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RecircleHdrOpaqueCtrlIdC_async(int unit, bcm_field_entry_t entry, int data, int mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RecircleHdrOpaqueCtrlIdC_get_async(int unit, bcm_field_entry_t entry, int * data, int * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RecoverableDrop_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RecoverableDrop_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RepCopy_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RepCopy_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ReplicantAny_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ReplicantAny_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ReplicantFirst_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ReplicantFirst_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RoceBthDstQueuePair_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RoceBthDstQueuePair_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RoceBthFlags_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RoceBthFlags_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RoceBthOpcode_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RoceBthOpcode_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RoceBthPartitionKey_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RoceBthPartitionKey_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RoceVer1Pkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RoceVer1Pkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RoceVer2Pkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RoceVer2Pkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RoeFrameType_async(int unit, bcm_field_entry_t entry, bcm_field_roe_frame_type_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RoeFrameType_get_async(int unit, bcm_field_entry_t entry, bcm_field_roe_frame_type_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RouterAlertLabelValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RouterAlertLabelValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7AHashLower_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7AHashLower_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7AHashUpper_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7AHashUpper_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7BHashLower_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7BHashLower_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7BHashUpper_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7BHashUpper_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7CHashLower_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7CHashLower_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7CHashUpper_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7CHashUpper_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxPortType_async(int unit, bcm_field_entry_t entry, bcm_field_PortType_t port_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxPortType_get_async(int unit, bcm_field_entry_t entry, bcm_field_PortType_t * port_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapCode_async(int unit, bcm_field_entry_t entry, bcm_rx_trap_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapCode32_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapCode32_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapCodeForSnoop_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapCodeForSnoop_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapCode_get_async(int unit, bcm_field_entry_t entry, bcm_rx_trap_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapData_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapData_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapStrength_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapStrength_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRDuplicate_async(int unit, bcm_field_entry_t entry, uint8 data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRDuplicate_get_async(int unit, bcm_field_entry_t entry, uint8 * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRError_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRError_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRFlowId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRFlowId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRLanId_async(int unit, bcm_field_entry_t entry, int lan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRLanId_get_async(int unit, bcm_field_entry_t entry, int * lan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRNetId_async(int unit, bcm_field_entry_t entry, int net_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRNetIdMatched_async(int unit, bcm_field_entry_t entry, uint8 data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRNetIdMatched_get_async(int unit, bcm_field_entry_t entry, uint8 * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRNetId_get_async(int unit, bcm_field_entry_t entry, int * net_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRSrcNodeIsSan_async(int unit, bcm_field_entry_t entry, uint8 data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRSrcNodeIsSan_get_async(int unit, bcm_field_entry_t entry, uint8 * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRSupervisionType_async(int unit, bcm_field_entry_t entry, bcm_field_sr_supervision_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRSupervisionType_get_async(int unit, bcm_field_entry_t entry, bcm_field_sr_supervision_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRTagType_async(int unit, bcm_field_entry_t entry, bcm_field_sr_tag_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SRTagType_get_async(int unit, bcm_field_entry_t entry, bcm_field_sr_tag_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SampledPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SampledPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Snap_async(int unit, bcm_field_entry_t entry, bcm_field_snap_header_t data, bcm_field_snap_header_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Snap_get_async(int unit, bcm_field_entry_t entry, bcm_field_snap_header_t * data, bcm_field_snap_header_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SnoopCopy_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SnoopCopy_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SourceGportBitmap_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t data, bcm_pbmp_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SourceGportBitmap_get_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t * data, bcm_pbmp_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassField_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassField_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassL2_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassL2_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassL3_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassL3_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcCompressionClassId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcCompressionClassId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_gport_t port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_gport_t * port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6Class_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6ClassLower_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6ClassLower_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6ClassMsbNibble_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6ClassMsbNibble_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6ClassUpper_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6ClassUpper_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6Class_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6High_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6High_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6Low_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6Low_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6SrhValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6SrhValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIpClass_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIpClassLower_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIpClassLower_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIpClassMsbNibble_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIpClassMsbNibble_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIpClassUpper_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIpClassUpper_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIpClass_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMimGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t mim_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMimGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * mim_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMimGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t mim_port_id, bcm_gport_t mim_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMimGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * mim_port_id, bcm_gport_t * mim_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcModPortGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcModPortGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcModPortGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_gport_t port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcModPortGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_gport_t * port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcModuleGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcModuleGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMplsGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t mpls_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMplsGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * mpls_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMplsGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t mpls_port_id, bcm_gport_t mpls_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMplsGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * mpls_port_id, bcm_gport_t * mpls_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcNivGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t niv_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcNivGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * niv_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcNivGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t niv_port_id, bcm_gport_t niv_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcNivGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * niv_port_id, bcm_gport_t * niv_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPort_async(int unit, bcm_field_entry_t entry, bcm_module_t data_modid, bcm_module_t mask_modid, bcm_port_t data_port, bcm_port_t mask_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPortSRLanId_async(int unit, bcm_field_entry_t entry, uint8 lan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPortSRLanId_get_async(int unit, bcm_field_entry_t entry, uint8 * lan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPortSRMode_async(int unit, bcm_field_entry_t entry, bcm_field_sr_port_mode_t type, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPortSRMode_get_async(int unit, bcm_field_entry_t entry, bcm_field_sr_port_mode_t * type, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPortSRNetId_async(int unit, bcm_field_entry_t entry, uint8 net_id, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPortSRNetId_get_async(int unit, bcm_field_entry_t entry, uint8 * net_id, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPortSRRoleInterlink_async(int unit, bcm_field_entry_t entry, uint8 data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPortSRRoleInterlink_get_async(int unit, bcm_field_entry_t entry, uint8 * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPortSRType_async(int unit, bcm_field_entry_t entry, bcm_field_port_sr_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPortSRType_get_async(int unit, bcm_field_entry_t entry, bcm_field_port_sr_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPort_get_async(int unit, bcm_field_entry_t entry, bcm_module_t * data_modid, bcm_module_t * mask_modid, bcm_port_t * data_port, bcm_port_t * mask_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcTMPort_async(int unit, bcm_field_entry_t entry, bcm_port_t data_port, bcm_port_t mask_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcTMPort_get_async(int unit, bcm_field_entry_t entry, bcm_port_t * data_port, bcm_port_t * mask_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcTrunk_async(int unit, bcm_field_entry_t entry, bcm_trunk_t data, bcm_trunk_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcTrunkMemberGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcTrunkMemberGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcTrunk_get_async(int unit, bcm_field_entry_t entry, bcm_trunk_t * data, bcm_trunk_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcVirtualPortValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcVirtualPortValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcVlanGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t vlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcVlanGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * vlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcVlanGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t vlan_port_id, bcm_gport_t vlan_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcVlanGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * vlan_port_id, bcm_gport_t * vlan_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcVxlanGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t vxlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcVxlanGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * vxlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcVxlanGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t vxlan_port_id, bcm_gport_t vxlan_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcVxlanGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * vxlan_port_id, bcm_gport_t * vxlan_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcWlanGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t wlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcWlanGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * wlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcWlanGports_async(int unit, bcm_field_entry_t entry, bcm_gport_t wlan_port_id, bcm_gport_t wlan_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcWlanGports_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * wlan_port_id, bcm_gport_t * wlan_port_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StackingRoute_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StackingRoute_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Stage_async(int unit, bcm_field_entry_t entry, bcm_field_stage_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Stage_get_async(int unit, bcm_field_entry_t entry, bcm_field_stage_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredDirectValue_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredDirectValue_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredPreselProfile0_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredPreselProfile0_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredPreselProfile1_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredPreselProfile1_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredPreselProfile2_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredPreselProfile2_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredPreselProfile3_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredPreselProfile3_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredPreselProfileDirect_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredPreselProfileDirect_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredValue0_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredValue0_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredValue1_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredValue1_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredValue2_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredValue2_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredValue3_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StaggeredValue3_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Stg_async(int unit, bcm_field_entry_t entry, bcm_stg_t data, bcm_stg_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Stg_get_async(int unit, bcm_field_entry_t entry, bcm_stg_t * data, bcm_stg_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StpState_async(int unit, bcm_field_entry_t entry, uint8 data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_StpState_get_async(int unit, bcm_field_entry_t entry, uint8 * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SubportGroupIds_async(int unit, bcm_field_entry_t entry, uint32 num_groups, bcm_subport_port_group_t * subport_group_id_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SubportGroupIds_get_async(int unit, bcm_field_entry_t entry, uint32 num_groups, bcm_subport_port_group_t * subport_group_id_arr, uint32 * actual_groups, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SubportPktTag_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SubportPktTag_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SubportTagPresent_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SubportTagPresent_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SvpOpaqueCtrlId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SvpOpaqueCtrlId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Svtag_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Svtag_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SysHdrLocalDstport_async(int unit, bcm_field_entry_t entry, bcm_port_t data, bcm_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SysHdrLocalDstport_get_async(int unit, bcm_field_entry_t entry, bcm_port_t * data, bcm_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SysHdrType_async(int unit, bcm_field_entry_t entry, bcm_field_sys_hdr_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SysHdrType_get_async(int unit, bcm_field_entry_t entry, bcm_field_sys_hdr_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SystemPortBitmap_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t data, bcm_pbmp_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SystemPortBitmap_get_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t * data, bcm_pbmp_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TafCosProfile_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TafCosProfile_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TafEnable_async(int unit, bcm_field_entry_t entry, uint8 enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TafEnable_get_async(int unit, bcm_field_entry_t entry, uint8 * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TafGateId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TafGateId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TafGateState_async(int unit, bcm_field_entry_t entry, uint8 state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TafGateState_get_async(int unit, bcm_field_entry_t entry, uint8 * state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpAckNum_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpAckNum_get_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpClassOne_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpClassOne_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpClassZero_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpClassZero_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpControl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpControl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpHeaderSize_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpHeaderSize_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpSequenceNum_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpSequenceNum_get_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpSequenceZero_async(int unit, bcm_field_entry_t entry, uint32 flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpSequenceZero_get_async(int unit, bcm_field_entry_t entry, uint32 * flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TimeStampTxPktType_async(int unit, bcm_field_entry_t entry, bcm_field_timestamp_transmit_pkt_type_t ts_pkt_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TimeStampTxPktType_get_async(int unit, bcm_field_entry_t entry, bcm_field_timestamp_transmit_pkt_type_t * ts_pkt_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Tos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TosClassOne_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TosClassOne_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TosClassZero_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TosClassZero_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TosLower4Bits_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TosLower4Bits_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Tos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlanCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlanCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlan_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlanCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlanCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlan_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedVlanFormat_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedVlanFormat_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillEgressRbridge_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillEgressRbridgeHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillEgressRbridgeHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillEgressRbridge_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillHopCount_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillHopCount_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillIVersion_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillIVersion_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillIngressRbridge_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillIngressRbridgeHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillIngressRbridgeHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillIngressRbridge_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillMultiDestination_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillMultiDestination_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillOpLength_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillOpLength_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillPayload_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillPayload_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrunkHashResult_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrunkHashResult_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrunkMemberSourceModuleId_async(int unit, bcm_field_entry_t entry, int data, int mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrunkMemberSourceModuleId_get_async(int unit, bcm_field_entry_t entry, int * data, int * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TsnFlowId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TsnFlowId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ttl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TtlClassOne_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TtlClassOne_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TtlClassZero_async(int unit, bcm_field_entry_t entry, bcm_class_t data, bcm_class_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TtlClassZero_get_async(int unit, bcm_field_entry_t entry, bcm_class_t * data, bcm_class_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ttl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltDstIp_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltDstIp6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltDstIp6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltDstIp_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltEtherType_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltEtherType_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltIpProtocol_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltIpProtocol_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltL4DstPort_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltL4DstPort_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltL4SrcPort_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltL4SrcPort_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltSrcIp_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltSrcIp6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltSrcIp6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelAltSrcIp_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelHeaderDip_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelHeaderDip6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelHeaderDip6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelHeaderDip_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelHeaderDstMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelHeaderDstMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelHeaderIpProtocol_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelHeaderIpProtocol_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelHeaderSip_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelHeaderSip6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelHeaderSip6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelHeaderSip_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelHeaderSrcMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelHeaderSrcMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadDip_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadDip6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadDip6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadDip_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadDstMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadDstMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadEtherType_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadEtherType_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadIp4Length_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadIp4Length_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadIp6Length_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadIp6Length_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadIpProtocol_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadIpProtocol_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadL4DstPort_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadL4DstPort_get_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadL4SrcPort_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadL4SrcPort_get_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadOuterVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadOuterVlanCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadOuterVlanCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadOuterVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadOuterVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadOuterVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadOuterVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadOuterVlan_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadSip_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadSip6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadSip6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadSip_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadSrcMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelPayloadSrcMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelSubType_async(int unit, bcm_field_entry_t entry, bcm_field_TunnelSubType_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelSubType_get_async(int unit, bcm_field_entry_t entry, bcm_field_TunnelSubType_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTermStatus_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTermStatus_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminated_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminatedHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminatedHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminatedValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminatedValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminated_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminationProcessingProfile_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminationProcessingProfile_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelType_async(int unit, bcm_field_entry_t entry, bcm_field_TunnelType_t tunnel_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelType_get_async(int unit, bcm_field_entry_t entry, bcm_field_TunnelType_t * tunnel_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TxPortType_async(int unit, bcm_field_entry_t entry, bcm_field_PortType_t port_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TxPortType_get_async(int unit, bcm_field_entry_t entry, bcm_field_PortType_t * port_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_UdfClass_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_UdfClass_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_UdpLength_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_UdpLength_get_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_UntagPkt_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_UntagPkt_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VPortRangeCheck_async(int unit, bcm_field_entry_t entry, bcm_field_range_t range, int invert, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VPortRangeCheck_get_async(int unit, bcm_field_entry_t entry, int max_count, bcm_field_range_t * range, int * invert, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanAction_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanAction_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanFormat_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanFormat_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanMembershipCheck_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanMembershipCheck_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanSREnable_async(int unit, bcm_field_entry_t entry, uint8 data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanSREnable_get_async(int unit, bcm_field_entry_t entry, uint8 * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanSRLanId_async(int unit, bcm_field_entry_t entry, uint8 lan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanSRLanId_get_async(int unit, bcm_field_entry_t entry, uint8 * lan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanTranslateClassId_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanTranslateClassId_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanTranslationHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanTranslationHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanTranslationValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanTranslationValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VnTag_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VnTag_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Vpn_async(int unit, bcm_field_entry_t entry, bcm_vpn_t data, bcm_vpn_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VpnOpaqueCtrlId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VpnOpaqueCtrlId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VpnUnknownDstMacDstPort_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VpnUnknownDstMacDstPort_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Vpn_get_async(int unit, bcm_field_entry_t entry, bcm_vpn_t * data, bcm_vpn_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Vrf_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Vrf_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanClassValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanClassValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanFlags_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanFlags_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanGbpPresent_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanGbpPresent_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanHeaderBits56_63_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanHeaderBits56_63_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanHeaderBits8_31_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanHeaderBits8_31_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanNetworkId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanNetworkId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanPacket_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanPacket_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanPayloadVlanFormat_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanPayloadVlanFormat_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanVnidVlanTranslateHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanVnidVlanTranslateHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_clear_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_data_async(int unit, bcm_field_entry_t eid, int qual_id, uint8 * data, uint8 * mask, uint16 length, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_data_get_async(int unit, bcm_field_entry_t eid, int qual_id, uint16 length_max, uint8 * data, uint8 * mask, uint16 * length, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_udf_async(int unit, bcm_field_entry_t eid, bcm_udf_id_t udf_id, int length, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_udf_get_async(int unit, bcm_field_entry_t eid, bcm_udf_id_t udf_id, int max_length, uint8 * data, uint8 * mask, int * actual_length, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_create_async(int unit, bcm_field_range_t * range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_create_id_async(int unit, bcm_field_range_t range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_destroy_async(int unit, bcm_field_range_t range, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_get_async(int unit, bcm_field_range_t range, uint32 * flags, bcm_l4_port_t * min, bcm_l4_port_t * max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_group_create_async(int unit, bcm_field_range_t * range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcm_if_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_group_create_id_async(int unit, bcm_field_range_t range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcm_if_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_info_get_async(int unit, bcm_field_stage_t stage, bcm_field_range_t * range_id, bcm_field_range_info_t * range_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_multi_create_async(int unit, bcm_field_range_t * range_id, uint32 create_flags, int count, uint32 * range_flags, uint32 * min_value, uint32 * max_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_multi_get_async(int unit, bcm_field_range_t range_id, int max_count, uint32 * range_flags, uint32 * minimum_value, uint32 * maxamum_value, int * actual_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_set_async(int unit, uint32 flags, bcm_field_stage_t stage, bcm_field_range_t range_id, bcm_field_range_info_t * range_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_type_config_get_async(int unit, uint32 flags, bcm_field_stage_t stage, bcm_field_context_t context_id, uint32 configurable_range_index, bcm_field_range_qual_info_t * range_qualifier_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_type_config_set_async(int unit, uint32 flags, bcm_field_stage_t stage, bcm_field_context_t context_id, uint32 configurable_range_index, bcm_field_range_qual_info_t * range_qualifier_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_resync_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_sat_macsa_add_async(int unit, bcm_mac_t mac, uint32 class_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_sat_macsa_delete_async(int unit, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_sat_macsa_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_sat_macsa_get_async(int unit, bcm_mac_t mac, uint32 * class_id, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_field_show_async(int unit, const char * pfx, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_field_source_class_mode_get_async(int unit, bcm_field_stage_t stage, bcm_pbmp_t pbmp, bcm_field_src_class_mode_t * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_source_class_mode_set_async(int unit, bcm_field_stage_t stage, bcm_pbmp_t pbmp, bcm_field_src_class_mode_t mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stage_aset_get_async(int unit, bcm_field_stage_t stage, bcm_field_aset_t * aset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stage_info_get_async(int unit, bcm_field_stage_t stage, bcm_field_stage_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stage_qset_get_async(int unit, bcm_field_stage_t stage, uint8 presel, bcm_field_qset_t * qset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stage_slice_count_get_async(int unit, bcm_field_stage_t stage_id, int * slice_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stage_slice_info_get_async(int unit, bcm_field_stage_t stage_id, bcm_pbmp_t pbmp, int slice_no, bcm_field_stage_slice_info_t * slice_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_all_set_async(int unit, int stat_id, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_all_set32_async(int unit, int stat_id, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_attach_async(int unit, bcm_field_group_t group, uint32 stat_counter_id, uint32 * stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_config_get_async(int unit, int stat_id, int nstat, bcm_field_stat_t * stat_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_counter_get_async(int unit, uint32 stat_id, bcm_field_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_counter_set_async(int unit, uint32 stat_id, bcm_field_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_counter_sync_get_async(int unit, uint32 stat_id, bcm_field_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_create_async(int unit, bcm_field_group_t group, int nstat, bcm_field_stat_t * stat_arr, int * stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_create_id_async(int unit, bcm_field_group_t group, int nstat, bcm_field_stat_t * stat_arr, int stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_destroy_async(int unit, int stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_detach_async(int unit, uint32 stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_get_async(int unit, int stat_id, bcm_field_stat_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_get32_async(int unit, int stat_id, bcm_field_stat_t stat, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_id_get_async(int unit, bcm_field_group_t group, uint32 stat_id, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_multi_get_async(int unit, int stat_id, int nstat, bcm_field_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_multi_get32_async(int unit, int stat_id, int nstat, bcm_field_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_set_async(int unit, int stat_id, bcm_field_stat_t stat, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_set32_async(int unit, int stat_id, bcm_field_stat_t stat, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_size_async(int unit, int stat_id, int * stat_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_sync_get_async(int unit, int stat_id, bcm_field_stat_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_sync_get32_async(int unit, int stat_id, bcm_field_stat_t stat, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_tcam_bank_add_async(int unit, uint32 flags, bcm_field_tcam_bank_info_t * add_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_tcam_bank_evacuate_async(int unit, uint32 flags, bcm_field_tcam_bank_info_t * evac_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_find_async(char * type, char * subtype, int remunit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_action_create_async(int unit, int options, bcm_flexctr_action_t * action, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_action_destroy_async(int unit, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_action_get_async(int unit, uint32 stat_counter_id, bcm_flexctr_action_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_action_traverse_async(int unit, bcm_flexctr_action_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_group_action_create_async(int unit, int options, bcm_flexctr_group_action_t * group_action, uint32 * group_stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_group_action_destroy_async(int unit, uint32 group_stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_group_action_get_async(int unit, uint32 group_stat_counter_id, bcm_flexctr_group_action_t * group_action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_group_action_traverse_async(int unit, bcm_flexctr_group_action_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_object_overlay_multi_get_async(int unit, bcm_flexctr_object_t object, int array_size, bcm_flexctr_object_t * overlay_object_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_packet_attribute_map_add_async(int unit, int profile_id, bcm_flexctr_packet_attribute_map_t * attr_map, uint32 offset_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_packet_attribute_map_delete_async(int unit, int profile_id, bcm_flexctr_packet_attribute_map_t * attr_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_packet_attribute_map_delete_all_async(int unit, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_packet_attribute_map_get_async(int unit, int profile_id, bcm_flexctr_packet_attribute_map_t * attr_map, uint32 * offset_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_packet_attribute_map_traverse_async(int unit, int profile_id, bcm_flexctr_packet_attribute_map_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_packet_attribute_profile_create_async(int unit, int options, bcm_flexctr_packet_attribute_profile_t * attr_profile, int * profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_packet_attribute_profile_destroy_async(int unit, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_packet_attribute_profile_get_async(int unit, int profile_id, bcm_flexctr_packet_attribute_profile_t * attr_profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_packet_attribute_profile_traverse_async(int unit, bcm_flexctr_packet_attribute_profile_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_quantization_create_async(int unit, int options, bcm_flexctr_quantization_t * quantization, uint32 * quant_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_quantization_destroy_async(int unit, uint32 quant_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_quantization_get_async(int unit, uint32 quant_id, bcm_flexctr_quantization_t * quantization, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_quantization_traverse_async(int unit, bcm_flexctr_quantization_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_stat_get_async(int unit, uint32 stat_counter_id, uint32 num_entries, uint32 * counter_indexes, bcm_flexctr_counter_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_stat_set_async(int unit, uint32 stat_counter_id, uint32 num_entries, uint32 * counter_indexes, bcm_flexctr_counter_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_stat_sync_get_async(int unit, uint32 stat_counter_id, uint32 num_entries, uint32 * counter_indexes, bcm_flexctr_counter_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_trigger_enable_get_async(int unit, uint32 stat_counter_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexctr_trigger_enable_set_async(int unit, uint32 stat_counter_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_action_add_async(int unit, bcm_flexdigest_entry_t entry, bcm_flexdigest_action_t action, uint16 param0, uint16 param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_action_delete_async(int unit, bcm_flexdigest_entry_t entry, bcm_flexdigest_action_t action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_action_delete_all_async(int unit, bcm_flexdigest_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_action_get_async(int unit, bcm_flexdigest_entry_t entry, bcm_flexdigest_action_t action, uint16 * param0, uint16 * param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_control_get_async(int unit, bcm_flexdigest_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_control_set_async(int unit, bcm_flexdigest_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_entry_create_async(int unit, bcm_flexdigest_group_t group, bcm_flexdigest_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_entry_create_id_async(int unit, bcm_flexdigest_group_t group, bcm_flexdigest_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_entry_destroy_async(int unit, bcm_flexdigest_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_entry_destroy_all_async(int unit, bcm_flexdigest_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_flexdigest_entry_dump_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_flexdigest_entry_install_async(int unit, bcm_flexdigest_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_entry_priority_get_async(int unit, bcm_flexdigest_entry_t entry, int * pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_entry_priority_set_async(int unit, bcm_flexdigest_entry_t entry, int pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_entry_reinstall_async(int unit, bcm_flexdigest_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_entry_remove_async(int unit, bcm_flexdigest_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_group_create_async(int unit, bcm_flexdigest_qset_t qset, int pri, bcm_flexdigest_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_group_create_id_async(int unit, bcm_flexdigest_qset_t qset, int pri, bcm_flexdigest_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_group_destroy_async(int unit, bcm_flexdigest_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_group_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_flexdigest_group_dump_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_flexdigest_group_get_async(int unit, bcm_flexdigest_group_t group, bcm_flexdigest_qset_t * qset, int * pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_hash_profile_create_async(int unit, uint32 options, int * hash_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_hash_profile_destroy_async(int unit, int hash_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_hash_profile_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_hash_profile_get_async(int unit, int hash_profile_id, bcm_flexdigest_hash_profile_control_t type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_hash_profile_set_async(int unit, int hash_profile_id, bcm_flexdigest_hash_profile_control_t type, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_hash_salt_get_async(int unit, bcm_flexdigest_hash_bin_set_t bin_set, int array_size, uint16 * salt_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_hash_salt_set_async(int unit, bcm_flexdigest_hash_bin_set_t bin_set, int array_size, uint16 * salt_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_match_add_async(int unit, bcm_flexdigest_match_id_t match_id, bcm_flexdigest_match_t match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_match_delete_async(int unit, bcm_flexdigest_match_id_t match_id, bcm_flexdigest_match_t match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_match_delete_all_async(int unit, bcm_flexdigest_match_id_t match_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_match_get_async(int unit, bcm_flexdigest_match_id_t match_id, int array_size, bcm_flexdigest_match_t * match_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_match_id_create_async(int unit, bcm_flexdigest_match_id_t * match_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_match_id_destroy_async(int unit, bcm_flexdigest_match_id_t match_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_match_id_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_norm_profile_create_async(int unit, uint32 options, int * norm_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_norm_profile_destroy_async(int unit, int norm_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_norm_profile_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_norm_profile_get_async(int unit, int norm_profile_id, bcm_flexdigest_norm_profile_control_t type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_norm_profile_set_async(int unit, int norm_profile_id, bcm_flexdigest_norm_profile_control_t type, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_norm_seed_profile_create_async(int unit, uint32 options, int * seed_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_norm_seed_profile_destroy_async(int unit, int seed_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_norm_seed_profile_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_norm_seed_profile_get_async(int unit, int seed_profile_id, bcm_flexdigest_norm_seed_control_t type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_norm_seed_profile_set_async(int unit, int seed_profile_id, bcm_flexdigest_norm_seed_control_t type, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualifier_delete_async(int unit, bcm_flexdigest_entry_t entry, bcm_flexdigest_qualify_t qual_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualifier_delete_all_async(int unit, bcm_flexdigest_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_FixedHve1ResultSet0_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_FixedHve1ResultSet0_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_FixedHve2ResultSet0_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_FixedHve2ResultSet0_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_FlexHve1ResultSet1_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_FlexHve1ResultSet1_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_FlexHve2ResultSet1_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_FlexHve2ResultSet1_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_L2IifFlexDigestCtrlIdA_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_L2IifFlexDigestCtrlIdA_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_L2IifFlexDigestCtrlIdB_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_L2IifFlexDigestCtrlIdB_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_L2IifOpaqueCtrlId_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_L2IifOpaqueCtrlId_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_L3IifOpaqueCtrlId_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_L3IifOpaqueCtrlId_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_L4Valid_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_L4Valid_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_MatchId_async(int unit, bcm_flexdigest_entry_t entry, bcm_flexdigest_match_id_t match_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_MatchId_get_async(int unit, bcm_flexdigest_entry_t entry, bcm_flexdigest_match_id_t * match_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_MyStation1Hit_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_MyStation1Hit_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_ProtocolPktOpaqueCtrlId_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_ProtocolPktOpaqueCtrlId_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_SvpOpaqueCtrlId_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_SvpOpaqueCtrlId_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_TunnelProcessingResults1_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_TunnelProcessingResults1_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_TunnelProcessingResultsRaw_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_TunnelProcessingResultsRaw_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_VfiOpaqueCtrlId_async(int unit, bcm_flexdigest_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexdigest_qualify_VfiOpaqueCtrlId_get_async(int unit, bcm_flexdigest_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_flexdigest_show_async(int unit, const char * pfx, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_flexstate_action_create_async(int unit, int options, bcm_flexstate_action_t * action, uint32 * action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_action_destroy_async(int unit, uint32 action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_action_get_async(int unit, uint32 action_id, bcm_flexstate_action_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_action_traverse_async(int unit, bcm_flexstate_action_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_group_action_create_async(int unit, int options, bcm_flexstate_group_action_t * group_action, uint32 * group_stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_group_action_destroy_async(int unit, uint32 group_stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_group_action_get_async(int unit, uint32 group_stat_counter_id, bcm_flexstate_group_action_t * group_action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_group_action_traverse_async(int unit, bcm_flexstate_group_action_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_quantization_create_async(int unit, int options, bcm_flexstate_quantization_t * quantization, uint32 * quant_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_quantization_destroy_async(int unit, uint32 quant_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_quantization_get_async(int unit, uint32 quant_id, bcm_flexstate_quantization_t * quantization, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_quantization_traverse_async(int unit, bcm_flexstate_quantization_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_stat_get_async(int unit, uint32 action_id, uint32 num_entries, uint32 * counter_indexes, bcm_flexstate_counter_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_stat_set_async(int unit, uint32 action_id, uint32 num_entries, uint32 * counter_indexes, bcm_flexstate_counter_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_stat_sync_get_async(int unit, uint32 action_id, uint32 num_entries, uint32 * counter_indexes, bcm_flexstate_counter_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_trigger_enable_get_async(int unit, uint32 action_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flexstate_trigger_enable_set_async(int unit, uint32 action_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_flow_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_encap_add_async(int unit, bcm_flow_encap_config_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_encap_delete_async(int unit, bcm_flow_encap_config_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_encap_flexctr_object_get_async(int unit, bcm_flow_encap_config_t * info, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_encap_flexctr_object_set_async(int unit, bcm_flow_encap_config_t * info, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_encap_get_async(int unit, bcm_flow_encap_config_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_encap_stat_attach_async(int unit, bcm_flow_encap_config_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_encap_stat_detach_async(int unit, bcm_flow_encap_config_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_encap_stat_id_get_async(int unit, bcm_flow_encap_config_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_encap_traverse_async(int unit, bcm_flow_encap_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_es_filter_flexctr_object_get_async(int unit, bcm_gport_t flow_port_id, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_es_filter_flexctr_object_set_async(int unit, bcm_gport_t flow_port_id, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_es_filter_get_async(int unit, bcm_gport_t flow_port_id, uint32 es_id, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_es_filter_set_async(int unit, bcm_gport_t flow_port_id, uint32 es_id, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_es_filter_stat_attach_async(int unit, bcm_gport_t flow_port_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_es_filter_stat_detach_async(int unit, bcm_gport_t flow_port_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_es_filter_stat_id_get_async(int unit, bcm_gport_t flow_port_id, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_handle_get_async(int unit, const char * flow_name, bcm_flow_handle_t * handle, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_initiator_info_create_async(int unit, bcm_flow_handle_info_t * flow_handle_info, bcm_flow_initiator_info_t * initiator_info, bcm_flow_special_fields_t * special_fields, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_initiator_info_destroy_async(int unit, bcm_flow_handle_info_t * flow_handle_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_initiator_info_get_async(int unit, bcm_flow_handle_info_t * flow_handle_info, bcm_flow_initiator_info_t * initiator_info, bcm_flow_special_fields_t * special_fields, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_initiator_info_traverse_async(int unit, bcm_flow_handle_info_t * flow_handle_info, bcm_flow_initiator_info_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_logical_field_id_get_async(int unit, bcm_flow_handle_t flow_handle, const char * field_name, bcm_flow_field_id_t * field_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_match_add_async(int unit, bcm_flow_match_config_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_match_delete_async(int unit, bcm_flow_match_config_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_match_flexctr_object_get_async(int unit, bcm_flow_match_config_t * info, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_match_flexctr_object_set_async(int unit, bcm_flow_match_config_t * info, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_match_get_async(int unit, bcm_flow_match_config_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_match_info_add_async(int unit, bcm_flow_handle_info_t * flow_handle_info, bcm_flow_special_fields_t * key_special_fields, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_match_info_delete_async(int unit, bcm_flow_handle_info_t * flow_handle_info, bcm_flow_special_fields_t * key_special_fields, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_match_info_get_async(int unit, bcm_flow_handle_info_t * flow_handle_info, bcm_flow_special_fields_t * key_special_fields, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_match_info_traverse_async(int unit, bcm_flow_handle_info_t * flow_handle_info, bcm_flow_match_info_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_match_stat_attach_async(int unit, bcm_flow_match_config_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_match_stat_detach_async(int unit, bcm_flow_match_config_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_match_stat_id_get_async(int unit, bcm_flow_match_config_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_match_traverse_async(int unit, bcm_flow_match_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_option_id_get_async(int unit, bcm_flow_handle_t flow_handle, const char * flow_option_name, bcm_flow_option_id_t * option_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_port_create_async(int unit, bcm_vpn_t vpn, bcm_flow_port_t * flow_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_port_destroy_async(int unit, bcm_vpn_t vpn, bcm_gport_t flow_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_port_encap_get_async(int unit, bcm_flow_port_encap_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_port_encap_set_async(int unit, bcm_flow_port_encap_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_port_get_async(int unit, bcm_vpn_t vpn, bcm_flow_port_t * flow_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_port_get_all_async(int unit, bcm_vpn_t vpn, int port_max, bcm_flow_port_t * flow_port, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_port_stat_attach_async(int unit, bcm_gport_t flow_port_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_port_stat_detach_async(int unit, bcm_gport_t flow_port_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_port_stat_id_get_async(int unit, bcm_gport_t flow_port_id, bcm_flexctr_direction_t direction, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_stat_attach_async(int unit, bcm_flow_stat_info_t * flow_stat_info, uint32 num_of_fields, bcm_flow_logical_field_t * field, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_stat_detach_async(int unit, bcm_flow_stat_info_t * flow_stat_info, uint32 num_of_fields, bcm_flow_logical_field_t * field, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_stat_id_get_async(int unit, bcm_flow_stat_info_t * flow_stat_info, uint32 num_of_fields, bcm_flow_logical_field_t * field, bcm_stat_object_t stat_object, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_stat_object_get_async(int unit, bcm_flow_handle_t flow_handle, bcm_flow_option_id_t flow_option_id, bcm_flow_function_type_t function_type, bcm_stat_object_t * stat_object, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_terminator_info_create_async(int unit, bcm_flow_handle_info_t * flow_handle_info, bcm_flow_terminator_info_t * terminator_info, bcm_flow_special_fields_t * special_fields, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_terminator_info_destroy_async(int unit, bcm_flow_handle_info_t * flow_handle_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_terminator_info_get_async(int unit, bcm_flow_handle_info_t * flow_handle_info, bcm_flow_terminator_info_t * terminator_info, bcm_flow_special_fields_t * special_fields, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_terminator_info_traverse_async(int unit, bcm_flow_handle_info_t * flow_handle_info, bcm_flow_terminator_info_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_initiator_create_async(int unit, bcm_flow_tunnel_initiator_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_initiator_destroy_async(int unit, bcm_gport_t flow_tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_initiator_get_async(int unit, bcm_flow_tunnel_initiator_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_initiator_stat_attach_async(int unit, bcm_gport_t tunnel_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_initiator_stat_detach_async(int unit, bcm_gport_t tunnel_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_initiator_stat_id_get_async(int unit, bcm_gport_t tunnel_id, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_initiator_traverse_async(int unit, bcm_flow_tunnel_initiator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_terminator_create_async(int unit, bcm_flow_tunnel_terminator_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_terminator_destroy_async(int unit, bcm_flow_tunnel_terminator_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_terminator_flexctr_object_get_async(int unit, bcm_flow_tunnel_terminator_t * info, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_terminator_flexctr_object_set_async(int unit, bcm_flow_tunnel_terminator_t * info, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_terminator_get_async(int unit, bcm_flow_tunnel_terminator_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_terminator_stat_attach_async(int unit, bcm_flow_tunnel_terminator_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_terminator_stat_detach_async(int unit, bcm_flow_tunnel_terminator_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_terminator_stat_id_get_async(int unit, bcm_flow_tunnel_terminator_t * info, uint32 num_of_fields, bcm_flow_logical_field_t * field, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_tunnel_terminator_traverse_async(int unit, bcm_flow_tunnel_terminator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_vpn_create_async(int unit, bcm_vpn_t * vpn, bcm_flow_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_vpn_destroy_async(int unit, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_vpn_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_vpn_get_async(int unit, bcm_vpn_t vpn, bcm_flow_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_vpn_stat_attach_async(int unit, bcm_vpn_t vpn, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_vpn_stat_detach_async(int unit, bcm_vpn_t vpn, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_vpn_stat_id_get_async(int unit, bcm_vpn_t vpn, bcm_flexctr_direction_t direction, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flow_vpn_traverse_async(int unit, bcm_flow_vpn_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_flowtracker_aggregate_class_create_async(int unit, uint32 options, bcm_flowtracker_group_type_t group_type, bcm_flowtracker_aggregate_class_info_t * aggregate_class_info, uint32 * aggregate_class, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_aggregate_class_destroy_async(int unit, uint32 aggregate_class, bcm_flowtracker_group_type_t group_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_aggregate_class_get_async(int unit, uint32 aggregate_class, bcm_flowtracker_group_type_t group_type, bcm_flowtracker_aggregate_class_info_t * aggregate_class_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_aggregate_class_get_all_async(int unit, bcm_flowtracker_group_type_t group_type, int size, uint32 * aggregate_class_array, int * actual_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_check_action_info_get_async(int unit, bcm_flowtracker_check_t check_id, bcm_flowtracker_check_action_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_check_action_info_set_async(int unit, bcm_flowtracker_check_t check_id, bcm_flowtracker_check_action_info_t info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_check_create_async(int unit, uint32 options, bcm_flowtracker_check_info_t check_info, bcm_flowtracker_check_t * check_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_check_delay_info_get_async(int unit, bcm_flowtracker_check_t check_id, bcm_flowtracker_check_delay_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_check_delay_info_set_async(int unit, bcm_flowtracker_check_t check_id, bcm_flowtracker_check_delay_info_t info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_check_destroy_async(int unit, bcm_flowtracker_check_t check_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_check_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_check_export_info_get_async(int unit, bcm_flowtracker_check_t check_id, bcm_flowtracker_check_export_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_check_export_info_set_async(int unit, bcm_flowtracker_check_t check_id, bcm_flowtracker_check_export_info_t info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_check_get_async(int unit, bcm_flowtracker_check_t check_id, bcm_flowtracker_check_info_t * check_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_check_traverse_async(int unit, bcm_flowtracker_check_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_chip_debug_info_get_async(int unit, int max_debug_info_size, bcm_flowtracker_chip_debug_info_t * list_of_debug_info, int * actual_debug_info_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_chip_debug_info_set_async(int unit, int num_debug_info, bcm_flowtracker_chip_debug_info_t * list_of_debug_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_collector_create_async(int unit, uint32 options, bcm_flowtracker_collector_t * collector_id, bcm_flowtracker_collector_info_t * collector_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_collector_destroy_async(int unit, bcm_flowtracker_collector_t id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_collector_get_async(int unit, bcm_flowtracker_collector_t id, bcm_flowtracker_collector_info_t * collector_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_collector_get_all_async(int unit, int max_size, bcm_flowtracker_collector_t * collector_list, int * list_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_control_get_async(int unit, bcm_flowtracker_control_type_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_control_set_async(int unit, bcm_flowtracker_control_type_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_drop_reason_group_create_async(int unit, uint32 flags, bcm_flowtracker_drop_reasons_t drop_reasons, bcm_flowtracker_drop_reason_group_t * id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_drop_reason_group_delete_async(int unit, bcm_flowtracker_drop_reason_group_t id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_drop_reason_group_get_async(int unit, bcm_flowtracker_drop_reason_group_t id, bcm_flowtracker_drop_reasons_t * drop_reasons, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_egress_class_source_get_async(int unit, uint32 options, bcm_flowtracker_class_source_type_t * source_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_egress_class_source_set_async(int unit, uint32 options, bcm_flowtracker_class_source_type_t source_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_action_match_get_async(int unit, bcm_flowtracker_elephant_match_action_t action, uint32 * match_types, bcm_flowtracker_elephant_match_data_t * match_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_action_match_set_async(int unit, bcm_flowtracker_elephant_match_action_t action, uint32 match_types, bcm_flowtracker_elephant_match_data_t * match_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_control_get_async(int unit, bcm_flowtracker_elephant_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_control_set_async(int unit, bcm_flowtracker_elephant_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_hash_config_get_async(int unit, bcm_flowtracker_elephant_hash_table_t hash_table, int instance_num, int bank_num, bcm_flowtracker_elephant_hash_type_t * hash_type, int * right_rotate_bits, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_hash_config_set_async(int unit, bcm_flowtracker_elephant_hash_table_t hash_table, int instance_num, int bank_num, bcm_flowtracker_elephant_hash_type_t hash_type, int right_rotate_bits, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_int_pri_remap_get_async(int unit, bcm_cos_t int_pri, bcm_cos_t * new_int_pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_int_pri_remap_set_async(int unit, bcm_cos_t int_pri, bcm_cos_t new_int_pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_profile_create_async(int unit, uint32 options, bcm_flowtracker_elephant_profile_info_t * profile, bcm_flowtracker_elephant_profile_t * profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_profile_destroy_async(int unit, bcm_flowtracker_elephant_profile_t profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_profile_get_async(int unit, bcm_flowtracker_elephant_profile_t profile_id, bcm_flowtracker_elephant_profile_info_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_profile_get_all_async(int unit, int max, bcm_flowtracker_elephant_profile_t * profile_list, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_stats_get_async(int unit, bcm_flowtracker_elephant_stats_t * stats, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_stats_set_async(int unit, bcm_flowtracker_elephant_stats_t * stats, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_elephant_stats_sync_get_async(int unit, bcm_flowtracker_elephant_stats_t * stats, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_export_record_data_info_get_async(int unit, bcm_flowtracker_export_record_t * record, int max_elements, bcm_flowtracker_export_element_info_t * export_element_info, bcm_flowtracker_export_record_data_info_t * data_info, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_export_record_register_async(int unit, bcm_flowtracker_collector_t collector_id, bcm_flowtracker_collector_callback_options_t callback_options, bcm_flowtracker_export_record_cb_f callback_fn, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_export_record_unregister_async(int unit, bcm_flowtracker_collector_t collector_id, bcm_flowtracker_collector_callback_options_t callback_options, bcm_flowtracker_export_record_cb_f callback_fn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_export_template_create_async(int unit, uint32 options, bcm_flowtracker_export_template_t * id, uint16 set_id, int num_export_elements, bcm_flowtracker_export_element_info_t * list_of_export_elements, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_export_template_destroy_async(int unit, bcm_flowtracker_export_template_t id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_export_template_get_async(int unit, bcm_flowtracker_export_template_t id, uint16 * set_id, int max_size, bcm_flowtracker_export_element_info_t * list_of_export_elements, int * list_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_export_template_validate_async(int unit, bcm_flowtracker_group_t flow_group_id, int max_in_export_elements, bcm_flowtracker_export_element_info_t * in_export_elements, int max_out_export_elements, bcm_flowtracker_export_element_info_t * out_export_elements, int * actual_out_export_elements, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_actions_get_async(int unit, bcm_flowtracker_group_t flow_group_id, uint32 flags, int max_actions, bcm_flowtracker_group_action_info_t * action_list, int * num_actions, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_actions_set_async(int unit, bcm_flowtracker_group_t flow_group_id, uint32 flags, int num_actions, bcm_flowtracker_group_action_info_t * action_list, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_age_timer_get_async(int unit, bcm_flowtracker_group_t id, uint32 * aging_interval_ms, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_age_timer_set_async(int unit, bcm_flowtracker_group_t id, uint32 aging_interval_ms, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_check_add_async(int unit, bcm_flowtracker_group_t group_id, bcm_flowtracker_check_t check_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_check_delete_async(int unit, bcm_flowtracker_group_t group_id, bcm_flowtracker_check_t check_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_check_get_all_async(int unit, bcm_flowtracker_group_t group_id, int max_checks, bcm_flowtracker_check_t * list_of_check_ids, int * num_checks, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_clear_async(int unit, bcm_flowtracker_group_t id, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_collector_add_async(int unit, bcm_flowtracker_group_t flow_group_id, bcm_flowtracker_collector_t collector_id, bcm_flowtracker_export_template_t template_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_collector_attach_async(int unit, bcm_flowtracker_group_t flow_group_id, bcm_collector_t collector_id, int export_profile_id, bcm_flowtracker_export_template_t template_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_collector_attach_get_all_async(int unit, bcm_flowtracker_group_t flow_group_id, int max_list_size, bcm_collector_t * list_of_collectors, bcm_flowtracker_export_template_t * list_of_templates, int * export_profile_id_list, int * list_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_collector_copy_info_get_async(int unit, bcm_flowtracker_group_t group_id, bcm_flowtracker_collector_copy_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_collector_copy_info_set_async(int unit, bcm_flowtracker_group_t group_id, bcm_flowtracker_collector_copy_info_t info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_collector_delete_async(int unit, bcm_flowtracker_group_t flow_group_id, bcm_flowtracker_collector_t collector_id, bcm_flowtracker_export_template_t template_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_collector_detach_async(int unit, bcm_flowtracker_group_t flow_group_id, bcm_collector_t collector_id, int export_profile_id, bcm_flowtracker_export_template_t template_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_collector_get_all_async(int unit, bcm_flowtracker_group_t flow_group_id, int max_list_size, bcm_flowtracker_collector_t * list_of_collectors, bcm_flowtracker_export_template_t * list_of_templates, int * list_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_control_get_async(int unit, bcm_flowtracker_group_t group_id, bcm_flowtracker_group_control_type_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_control_set_async(int unit, bcm_flowtracker_group_t group_id, bcm_flowtracker_group_control_type_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_create_async(int unit, uint32 options, bcm_flowtracker_group_t * flow_group_id, bcm_flowtracker_group_info_t * flow_group_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_data_get_async(int unit, bcm_flowtracker_group_t flow_group_id, bcm_flowtracker_flow_key_t * flow_key, bcm_flowtracker_flow_data_t * flow_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_destroy_async(int unit, bcm_flowtracker_group_t id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_elephant_profile_attach_async(int unit, bcm_flowtracker_group_t flow_group_id, bcm_flowtracker_elephant_profile_t profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_elephant_profile_attach_get_async(int unit, bcm_flowtracker_group_t flow_group_id, bcm_flowtracker_elephant_profile_t * profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_elephant_profile_detach_async(int unit, bcm_flowtracker_group_t flow_group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_export_trigger_get_async(int unit, bcm_flowtracker_group_t id, bcm_flowtracker_export_trigger_info_t * export_trigger_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_export_trigger_set_async(int unit, bcm_flowtracker_group_t id, bcm_flowtracker_export_trigger_info_t * export_trigger_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_flow_action_update_async(int unit, bcm_flowtracker_group_t id, bcm_flowtracker_group_flow_action_info_t * action_info, int num_actions, bcm_flowtracker_group_action_info_t * action_list, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_flow_count_get_async(int unit, bcm_flowtracker_group_t id, uint32 * flow_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_flow_delete_async(int unit, bcm_flowtracker_group_t id, bcm_flowtracker_group_flow_action_info_t * action_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_flow_limit_get_async(int unit, bcm_flowtracker_group_t id, uint32 * flow_limit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_flow_limit_set_async(int unit, bcm_flowtracker_group_t id, uint32 flow_limit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_get_async(int unit, bcm_flowtracker_group_t id, bcm_flowtracker_group_info_t * flow_group_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_get_all_async(int unit, int max_size, bcm_flowtracker_group_t * flow_group_list, int * list_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_meter_info_get_async(int unit, bcm_flowtracker_group_t group_id, bcm_flowtracker_meter_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_meter_info_set_async(int unit, bcm_flowtracker_group_t group_id, bcm_flowtracker_meter_info_t info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_multi_clear_async(int unit, uint32 flags, int num_groups, bcm_flowtracker_group_t * list_of_group_ids, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_record_traverse_async(int unit, bcm_flowtracker_group_t group_id, bcm_flowtracker_group_record_type_t type, bcm_flowtracker_group_record_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_stat_get_async(int unit, bcm_flowtracker_group_t group_id, bcm_flowtracker_group_stat_t * group_stats, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_stat_modeid_get_async(int unit, bcm_flowtracker_group_t id, uint32 * stat_modeid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_stat_modeid_set_async(int unit, bcm_flowtracker_group_t id, uint32 stat_modeid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_stat_set_async(int unit, bcm_flowtracker_group_t group_id, bcm_flowtracker_group_stat_t * group_stats, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_tracking_params_get_async(int unit, bcm_flowtracker_group_t id, int max_size, bcm_flowtracker_tracking_param_info_t * list_of_tracking_params, int * list_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_group_tracking_params_set_async(int unit, bcm_flowtracker_group_t id, int num_tracking_params, bcm_flowtracker_tracking_param_info_t * list_of_tracking_params, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_periodic_export_config_get_async(int unit, uint32 ft_type_flags, bcm_flowtracker_periodic_export_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_periodic_export_config_set_async(int unit, uint32 ft_type_flags, bcm_flowtracker_periodic_export_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_static_flow_add_async(int unit, bcm_flowtracker_group_t flow_group_id, bcm_flowtracker_flow_key_t * flow_key, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_static_flow_delete_async(int unit, bcm_flowtracker_group_t flow_group_id, bcm_flowtracker_flow_key_t * flow_key, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_static_flow_delete_all_async(int unit, bcm_flowtracker_group_t flow_group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_static_flow_get_all_async(int unit, bcm_flowtracker_group_t flow_group_id, int max_size, bcm_flowtracker_flow_key_t * flow_key_arr, int * list_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_template_transmit_config_get_async(int unit, bcm_flowtracker_export_template_t template_id, bcm_collector_t collector_id, bcm_flowtracker_template_transmit_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_template_transmit_config_set_async(int unit, bcm_flowtracker_export_template_t template_id, bcm_collector_t collector_id, bcm_flowtracker_template_transmit_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_udf_tracking_param_get_async(int unit, uint32 flags, bcm_flowtracker_tracking_param_type_t param, uint16 custom_id, bcm_flowtracker_udf_info_t * udf_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_udf_tracking_param_set_async(int unit, uint32 flags, bcm_flowtracker_tracking_param_type_t param, uint16 custom_id, bcm_flowtracker_udf_info_t * udf_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_user_entry_add_async(int unit, bcm_flowtracker_group_t flow_group_id, uint32 options, int num_user_entry_params, bcm_flowtracker_tracking_param_info_t * user_entry_param_list, bcm_flowtracker_user_entry_handle_t * entry_handle, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_user_entry_delete_async(int unit, bcm_flowtracker_group_t flow_group_id, bcm_flowtracker_user_entry_handle_t * entry_handle, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_user_entry_delete_all_async(int unit, bcm_flowtracker_group_t flow_group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_user_entry_get_async(int unit, bcm_flowtracker_user_entry_handle_t * entry_handle, int num_user_entry_params, bcm_flowtracker_tracking_param_info_t * user_entry_param_list, int * actual_user_entry_params, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_flowtracker_user_entry_get_all_async(int unit, bcm_flowtracker_group_t flow_group_id, int num_user_entry_handles, bcm_flowtracker_user_entry_handle_t * user_entry_handle_list, int * actual_user_entry_handles, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_GDPLL
void	bcm_gdpll_cb_register_async(int unit, bcm_gdpll_cb_reg_t cb_type, bcm_gdpll_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_gdpll_cb_unregister_async(int unit, bcm_gdpll_cb_reg_t cb_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_gdpll_chan_create_async(int unit, uint32 flags, bcm_gdpll_chan_t * gdpll_chan, int * pChan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_gdpll_chan_debug_enable_async(int unit, int chan, bcm_gdpll_debug_mode_t debug_mode, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_gdpll_chan_destroy_async(int unit, int chan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_gdpll_chan_enable_async(int unit, int chan, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_gdpll_chan_get_async(int unit, int chan, bcm_gdpll_chan_t * gdpll_chan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_gdpll_chan_state_get_async(int unit, int chan, uint32 * dpllState, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_gdpll_debug_async(int unit, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_gdpll_debug_cb_register_async(int unit, bcm_gdpll_debug_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_gdpll_flush_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_gdpll_input_event_poll_async(int unit, bcm_gdpll_input_event_t input_event, uint32 timeout, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_gdpll_offset_get_async(int unit, int chan, uint64 * dpllOffset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_gdpll_offset_set_async(int unit, int chan, uint64 offset, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_GDPLL */
void	bcm_gport_stat_get_async(int unit, bcm_gport_t gport, bcm_core_t core_id, bcm_stat_counter_interface_type_t engine_source, bcm_stat_pp_info_t * stat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_gport_stat_set_async(int unit, bcm_gport_t gport, bcm_core_t core_id, bcm_stat_counter_interface_type_t engine_source, bcm_stat_pp_info_t stat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_hash_flex_bin_add_async(int unit, bcm_hash_flex_bin_config_t * cfg, int num_bins, bcm_hash_flex_bin_cmd_t * bin_cmd, int num_fields, bcm_hash_flex_field_t * flex_field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_hash_flex_bin_delete_async(int unit, int entry_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_hash_flex_bin_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_hash_flex_bin_get_async(int unit, bcm_hash_flex_bin_config_t * cfg, int num_bins, bcm_hash_flex_bin_cmd_t * bin_cmd, int num_fields, bcm_hash_flex_field_t * flex_field, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_hash_flex_bin_traverse_async(int unit, uint32 option, bcm_hash_flex_bin_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_hash_flex_field_id_get_async(int unit, bcm_hash_flex_object_t object, const char * field_name, uint32 * field_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_hash_flex_field_name_get_async(int unit, uint32 field_id, bcm_hash_flex_object_t * object, int size, char * field_name, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_hash_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_I2C
void	bcm_i2c_ioctl_async(int unit, int fd, int opcode, void * data, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_i2c_open_async(int unit, char * devname, uint32 flags, int speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_i2c_read_async(int unit, int fd, uint32 addr, uint8 * data, uint32 * nbytes, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_i2c_write_async(int unit, int fd, uint32 addr, uint8 * data, uint32 nbytes, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_I2C */
void	bcm_ifa_cc_config_get_async(int unit, bcm_ifa_cc_config_t * config_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_cc_config_set_async(int unit, bcm_ifa_cc_config_t * config_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_collector_attach_async(int unit, bcm_collector_t collector_id, int export_profile_id, bcm_ifa_export_template_t template_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_collector_attach_get_async(int unit, bcm_collector_t * collector_id, int * export_profile_id, bcm_ifa_export_template_t * template_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_collector_detach_async(int unit, bcm_collector_t collector_id, int export_profile_id, bcm_ifa_export_template_t template_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_collector_get_async(int unit, bcm_ifa_collector_info_t * collector_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_collector_set_async(int unit, uint32 options, bcm_ifa_collector_info_t * collector_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_config_info_get_async(int unit, bcm_ifa_config_info_t * config_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_config_info_set_async(int unit, uint32 options, bcm_ifa_config_info_t * config_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_export_template_create_async(int unit, uint32 options, bcm_ifa_export_template_t * id, uint16 set_id, int num_export_elements, bcm_ifa_export_element_info_t * list_of_export_elements, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_export_template_destroy_async(int unit, bcm_ifa_export_template_t id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_export_template_get_async(int unit, bcm_ifa_export_template_t id, uint16 * set_id, int max_size, bcm_ifa_export_element_info_t * list_of_export_elements, int * list_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_header_create_async(int unit, uint32 options, int * header_id, bcm_ifa_header_t * header, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_header_destroy_async(int unit, int header_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_header_get_async(int unit, int header_id, bcm_ifa_header_t * header, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_header_traverse_async(int unit, bcm_ifa_header_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_stat_info_get_async(int unit, bcm_ifa_stat_info_t * stat_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_stat_info_set_async(int unit, bcm_ifa_stat_info_t * stat_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_template_transmit_config_get_async(int unit, bcm_ifa_export_template_t template_id, bcm_collector_t collector_id, bcm_ifa_template_transmit_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ifa_template_transmit_config_set_async(int unit, bcm_ifa_export_template_t template_id, bcm_collector_t collector_id, bcm_ifa_template_transmit_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_info_get_async(int unit, bcm_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_init_advanced_async(int unit, bcm_init_advanced_info_t * init_advanced_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_init_check_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_init_selective_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_control_get_async(int unit, uint32 flags, bcm_instru_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_control_set_async(int unit, uint32 flags, bcm_instru_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_eventor_active_get_async(int unit, uint32 flags, int * out_active, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_eventor_active_set_async(int unit, uint32 flags, int active, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_eventor_builder_get_async(int unit, uint32 flags, bcm_eventor_builder_id_t builder, bcm_instru_eventor_builder_conf_t * out_conf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_eventor_builder_set_async(int unit, uint32 flags, bcm_eventor_builder_id_t builder, bcm_instru_eventor_builder_conf_t * conf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_eventor_context_get_async(int unit, uint32 flags, bcm_eventor_context_id_t context, bcm_eventor_context_type_t context_type, bcm_instru_eventor_context_conf_t * out_conf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_eventor_context_set_async(int unit, uint32 flags, bcm_eventor_context_id_t context, bcm_eventor_context_type_t context_type, bcm_instru_eventor_context_conf_t * conf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_eventor_event_generate_async(int unit, uint32 flags, bcm_eventor_event_id_t event_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_eventor_event_id_config_get_async(int unit, uint32 flags, bcm_eventor_event_id_t event_id, bcm_instru_eventor_event_id_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_eventor_event_id_config_set_async(int unit, uint32 flags, bcm_eventor_event_id_t event_id, bcm_instru_eventor_event_id_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_get_memory_access_info_async(int unit, uint32 flags, int mem, uint32 copyno, uint32 index, uint32 array_index, bcm_instru_access_info_t * access_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_get_register_access_info_async(int unit, uint32 flags, int reg, uint32 instance, uint32 array_index, bcm_instru_access_info_t * access_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_gport_control_get_async(int unit, bcm_gport_t gport, uint32 flags, bcm_instru_gport_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_gport_control_set_async(int unit, bcm_gport_t gport, uint32 flags, bcm_instru_gport_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_ifa_encap_create_async(int unit, bcm_instru_ifa_info_t * ifa_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_ifa_encap_delete_async(int unit, bcm_instru_ifa_info_t * ifa_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_ifa_encap_get_async(int unit, bcm_instru_ifa_info_t * ifa_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_ifa_encap_traverse_async(int unit, bcm_instru_ifa_encap_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_ipt_profile_get_async(int unit, uint32 flags, int ipt_profile, bcm_instru_ipt_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_ipt_profile_set_async(int unit, uint32 flags, int ipt_profile, bcm_instru_ipt_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_encap_create_async(int unit, bcm_instru_sflow_encap_info_t * sflow_encap_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_encap_delete_async(int unit, bcm_instru_sflow_encap_info_t * sflow_encap_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_encap_extended_dst_create_async(int unit, bcm_instru_sflow_encap_extended_dst_info_t * sflow_encap_ext_dst_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_encap_extended_dst_delete_async(int unit, bcm_instru_sflow_encap_extended_dst_info_t * sflow_encap_ext_dst_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_encap_extended_dst_get_async(int unit, bcm_instru_sflow_encap_extended_dst_info_t * sflow_encap_ext_dst_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_encap_extended_dst_traverse_async(int unit, bcm_instru_sflow_encap_extended_dst_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_encap_extended_src_create_async(int unit, bcm_instru_sflow_encap_extended_src_info_t * sflow_encap_ext_src_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_encap_extended_src_delete_async(int unit, bcm_instru_sflow_encap_extended_src_info_t * sflow_encap_ext_src_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_encap_extended_src_get_async(int unit, bcm_instru_sflow_encap_extended_src_info_t * sflow_encap_ext_src_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_encap_extended_src_traverse_async(int unit, bcm_instru_sflow_encap_extended_src_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_encap_get_async(int unit, bcm_instru_sflow_encap_info_t * sflow_encap_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_encap_traverse_async(int unit, bcm_instru_sflow_encap_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_sample_interface_add_async(int unit, bcm_instru_sflow_sample_interface_info_t * sample_interface_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_sample_interface_get_async(int unit, bcm_instru_sflow_sample_interface_info_t * sample_interface_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_sample_interface_remove_async(int unit, bcm_instru_sflow_sample_interface_info_t * sample_interface_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_sflow_sample_interface_traverse_async(int unit, bcm_instru_sflow_sample_interface_traverse_info_t * sample_interface_traverse_info, bcm_instru_sflow_sample_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_synced_counters_config_get_async(int unit, uint32 flags, bcm_instru_synced_counters_source_type_t source_type, bcm_instru_synced_counters_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_synced_counters_config_set_async(int unit, uint32 flags, bcm_instru_synced_counters_source_type_t source_type, bcm_instru_synced_counters_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_synced_counters_records_get_async(int unit, uint32 flags, bcm_instru_synced_counters_records_key_t * key, bcm_instru_synced_counters_data_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_synced_counters_trigger_enable_get_async(int unit, uint32 flags, uint32 nof_sources, bcm_instru_synced_counters_source_type_t * sources, uint32 * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_synced_counters_trigger_enable_set_async(int unit, uint32 flags, uint32 nof_sources, bcm_instru_synced_counters_source_type_t * sources, uint32 * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_vis_resume_async(int unit, bcm_core_t core_id, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_instru_vis_signal_get_async(int unit, bcm_core_t core_id, uint32 flags, int nof_signals, bcm_instru_vis_signal_key_t * signal_key, bcm_instru_vis_signal_result_t * signal_result, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_INT
void	bcm_int_cosq_stat_config_get_async(int unit, bcm_int_cosq_stat_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_cosq_stat_config_set_async(int unit, bcm_int_cosq_stat_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_dp_action_profile_create_async(int unit, uint32 options, int * profile_id, bcm_int_dp_action_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_dp_action_profile_destroy_async(int unit, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_dp_action_profile_get_async(int unit, int profile_id, bcm_int_dp_action_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_dp_action_profile_traverse_async(int unit, bcm_int_dp_action_profile_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_dp_vector_match_add_async(int unit, uint32 options, bcm_int_dp_vector_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_dp_vector_match_delete_async(int unit, bcm_int_dp_vector_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_dp_vector_match_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_dp_vector_match_get_async(int unit, bcm_int_dp_vector_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_dp_vector_match_traverse_async(int unit, bcm_int_dp_vector_match_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ifa_action_profile_create_async(int unit, uint32 options, int * profile_id, bcm_int_ifa_action_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ifa_action_profile_destroy_async(int unit, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ifa_action_profile_get_async(int unit, int profile_id, bcm_int_ifa_action_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ifa_action_profile_traverse_async(int unit, bcm_int_ifa_action_profile_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ifa_vector_match_add_async(int unit, uint32 options, bcm_int_ifa_vector_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ifa_vector_match_delete_async(int unit, bcm_int_ifa_vector_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ifa_vector_match_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ifa_vector_match_get_async(int unit, bcm_int_ifa_vector_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ifa_vector_match_traverse_async(int unit, bcm_int_ifa_vector_match_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ioam_action_profile_create_async(int unit, uint32 options, int * profile_id, bcm_int_ioam_action_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ioam_action_profile_destroy_async(int unit, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ioam_action_profile_get_async(int unit, int profile_id, bcm_int_ioam_action_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ioam_action_profile_traverse_async(int unit, bcm_int_ioam_action_profile_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ioam_vector_match_add_async(int unit, uint32 options, bcm_int_ioam_vector_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ioam_vector_match_delete_async(int unit, bcm_int_ioam_vector_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ioam_vector_match_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ioam_vector_match_get_async(int unit, bcm_int_ioam_vector_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_ioam_vector_match_traverse_async(int unit, bcm_int_ioam_vector_match_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_metadata_field_add_async(int unit, int profile_id, bcm_int_metadata_field_entry_t * field_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_metadata_field_delete_async(int unit, int profile_id, bcm_int_metadata_field_entry_t * field_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_metadata_field_delete_all_async(int unit, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_metadata_field_select_info_get_async(int unit, bcm_int_metadata_field_t field, bcm_int_metadata_field_select_info_t * field_select_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_metadata_profile_create_async(int unit, uint32 options, int * profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_metadata_profile_destroy_async(int unit, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_metadata_profile_get_async(int unit, int profile_id, int array_size, bcm_int_metadata_field_entry_t * entry_array, int * field_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_metadata_profile_traverse_async(int unit, bcm_int_metadata_profile_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_opaque_data_profile_create_async(int unit, uint32 options, int * profile_id, bcm_int_opaque_data_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_opaque_data_profile_destroy_async(int unit, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_opaque_data_profile_get_async(int unit, int profile_id, bcm_int_opaque_data_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_opaque_data_profile_traverse_async(int unit, bcm_int_opaque_data_profile_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_turnaround_config_get_async(int unit, bcm_int_turnaround_config_t * config_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_turnaround_config_set_async(int unit, bcm_int_turnaround_config_t * config_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_int_turnaround_stat_get_async(int unit, bcm_int_turnaround_stat_t * stat_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_INT */
void	bcm_ip6_mask_create_async(bcm_ip6_t ip6, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ip6_mask_length_async(bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
/* bcm_ip_mask_create has a non int return type */
void	bcm_ip_mask_length_async(bcm_ip_t ip, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_config_get_async(int unit, bcm_ipfix_stage_t stage, bcm_port_t port, bcm_ipfix_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_config_set_async(int unit, bcm_ipfix_stage_t stage, bcm_port_t port, bcm_ipfix_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_mirror_config_get_async(int unit, bcm_ipfix_stage_t stage, bcm_gport_t port, bcm_ipfix_mirror_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_mirror_config_set_async(int unit, bcm_ipfix_stage_t stage, bcm_gport_t port, bcm_ipfix_mirror_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_mirror_port_dest_add_async(int unit, bcm_ipfix_stage_t stage, bcm_gport_t port, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_mirror_port_dest_delete_async(int unit, bcm_ipfix_stage_t stage, bcm_gport_t port, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_mirror_port_dest_delete_all_async(int unit, bcm_ipfix_stage_t stage, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_mirror_port_dest_get_async(int unit, bcm_ipfix_stage_t stage, bcm_gport_t port, int mirror_dest_size, bcm_gport_t * mirror_dest_id, int * mirror_dest_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_create_async(int unit, bcm_ipfix_rate_t * rate_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_destroy_async(int unit, bcm_ipfix_rate_id_t rate_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_get_async(int unit, bcm_ipfix_rate_t * rate_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_mirror_add_async(int unit, bcm_ipfix_rate_id_t rate_id, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_mirror_delete_async(int unit, bcm_ipfix_rate_id_t rate_id, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_mirror_delete_all_async(int unit, bcm_ipfix_rate_id_t rate_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_mirror_get_async(int unit, bcm_ipfix_rate_id_t rate_id, int mirror_dest_size, bcm_gport_t * mirror_dest_id, int * mirror_dest_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_traverse_async(int unit, bcm_ipfix_rate_traverse_cb cb, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_register_async(int unit, bcm_ipfix_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_unregister_async(int unit, bcm_ipfix_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_ipmc_add_async(int unit, bcm_ipmc_addr_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_age_async(int unit, uint32 flags, bcm_ipmc_traverse_cb age_cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_bitmap_del_async(int unit, int ipmc_idx, bcm_port_t port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_bitmap_get_async(int unit, int ipmc_idx, bcm_port_t port, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_bitmap_max_get_async(int unit, int * max_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_bitmap_set_async(int unit, int ipmc_idx, bcm_port_t port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_config_add_async(int unit, bcm_ipmc_addr_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_config_find_async(int unit, bcm_ipmc_addr_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_config_remove_async(int unit, bcm_ipmc_addr_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_config_traverse_async(int unit, uint32 flags, bcm_ipmc_config_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_counters_get_async(int unit, bcm_port_t port, bcm_ipmc_counters_t * counters, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_egress_port_get_async(int unit, bcm_port_t port, bcm_mac_t mac, int * untag, bcm_vlan_t * vid, int * ttl_threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_egress_port_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_egress_port_set_async(int unit, bcm_port_t port, const bcm_mac_t mac, int untag, bcm_vlan_t vid, int ttl_threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_enable_async(int unit, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_find_async(int unit, bcm_ipmc_addr_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_flexctr_object_get_async(int unit, bcm_ipmc_addr_t * info, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_flexctr_object_set_async(int unit, bcm_ipmc_addr_t * info, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_range_add_async(int unit, int * range_id, bcm_ipmc_range_t * range, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_range_delete_async(int unit, int range_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_range_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_range_get_async(int unit, int range_id, bcm_ipmc_range_t * range, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_range_size_get_async(int unit, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_remove_async(int unit, bcm_ipmc_addr_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_remove_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_rp_add_async(int unit, int rp_id, bcm_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_rp_create_async(int unit, uint32 flags, int * rp_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_rp_delete_async(int unit, int rp_id, bcm_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_rp_delete_all_async(int unit, int rp_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_rp_destroy_async(int unit, int rp_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_rp_get_async(int unit, int rp_id, int intf_max, bcm_if_t * intf_array, int * intf_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_rp_set_async(int unit, int rp_id, int intf_count, bcm_if_t * intf_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_attach_async(int unit, bcm_ipmc_addr_t * info, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_counter_get_async(int unit, bcm_ipmc_addr_t * info, bcm_ipmc_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_counter_set_async(int unit, bcm_ipmc_addr_t * info, bcm_ipmc_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_counter_sync_get_async(int unit, bcm_ipmc_addr_t * info, bcm_ipmc_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_detach_async(int unit, bcm_ipmc_addr_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_id_get_async(int unit, bcm_ipmc_addr_t * info, bcm_ipmc_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_multi_get_async(int unit, bcm_ipmc_addr_t * info, int nstat, bcm_ipmc_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_multi_get32_async(int unit, bcm_ipmc_addr_t * info, int nstat, bcm_ipmc_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_multi_set_async(int unit, bcm_ipmc_addr_t * info, int nstat, bcm_ipmc_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_multi_set32_async(int unit, bcm_ipmc_addr_t * info, int nstat, bcm_ipmc_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_traverse_async(int unit, uint32 flags, bcm_ipmc_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_ipsec_config_set_async(int unit, bcm_ipsec_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipsec_sa_create_async(int unit, uint32 flags, uint32 * sa_id, bcm_ipsec_sa_info_t * sa, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipsec_sa_delete_async(int unit, uint32 flags, uint32 sa_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipsec_sa_key_update_async(int unit, uint32 flags, uint32 sa_id, bcm_ipsec_sa_keys_t * sa_keys, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipsec_sa_to_tunnel_map_get_async(int unit, uint32 sa_id, uint32 * tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipsec_sa_to_tunnel_map_set_async(int unit, uint32 tunnel_id, uint32 sa_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipsec_tunnel_create_async(int unit, uint32 flags, uint32 * tunnel_id, bcm_ipsec_tunnel_info_t * tunnel_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipsec_tunnel_delete_async(int unit, uint32 flags, uint32 tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_filter_create_async(int unit, bcm_knet_filter_t * filter, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_filter_destroy_async(int unit, int filter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_filter_get_async(int unit, int filter_id, bcm_knet_filter_t * filter, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_filter_traverse_async(int unit, bcm_knet_filter_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_netif_create_async(int unit, bcm_knet_netif_t * netif, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_netif_destroy_async(int unit, int netif_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_netif_get_async(int unit, int netif_id, bcm_knet_netif_t * netif, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_netif_traverse_async(int unit, bcm_knet_netif_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knetsync_deinit_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knetsync_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_add_async(int unit, bcm_l2_addr_t * l2addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_by_struct_delete_async(int unit, bcm_l2_addr_t * l2addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_by_struct_get_async(int unit, bcm_l2_addr_t * l2addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_async(int unit, bcm_mac_t mac, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_mac_async(int unit, bcm_mac_t mac, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_mac_port_async(int unit, bcm_mac_t mac, bcm_module_t mod, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_port_async(int unit, bcm_module_t mod, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_trunk_async(int unit, bcm_trunk_t tid, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_vlan_async(int unit, bcm_vlan_t vid, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_vlan_gport_multi_async(int unit, uint32 flags, int num_pairs, bcm_vlan_t * vlan, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_vlan_port_async(int unit, bcm_vlan_t vid, bcm_module_t mod, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_vlan_trunk_async(int unit, bcm_vlan_t vid, bcm_trunk_t tid, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_freeze_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_get_async(int unit, bcm_mac_t mac_addr, bcm_vlan_t vid, bcm_l2_addr_t * l2addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_msg_distribute_get_async(int unit, bcm_l2_addr_distribute_t * distribution, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_msg_distribute_set_async(int unit, bcm_l2_addr_distribute_t * distribution, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_multi_add_async(int unit, bcm_l2_addr_t * l2addr, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_multi_delete_async(int unit, bcm_l2_addr_t * l2addr, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_register_async(int unit, bcm_l2_addr_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_thaw_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_unregister_async(int unit, bcm_l2_addr_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_age_timer_get_async(int unit, int * age_seconds, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_age_timer_meta_cycle_get_async(int unit, int * meta_cycle_time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_age_timer_meta_cycle_set_async(int unit, int meta_cycle_time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_age_timer_set_async(int unit, int age_seconds, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_auth_add_async(int unit, bcm_l2_auth_addr_t * addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_auth_delete_async(int unit, bcm_l2_auth_addr_t * addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_auth_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_auth_get_async(int unit, bcm_l2_auth_addr_t * addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_auth_traverse_async(int unit, bcm_l2_auth_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_delete_async(int unit, int index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_get_async(int unit, int index, bcm_l2_cache_addr_t * addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_profile_get_async(int unit, int trap_type, uint32 profile_idx, uint32 flags, bcm_l2cp_profile_info_t * l2cp_profile_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_profile_set_async(int unit, int trap_type, uint32 profile_idx, uint32 flags, bcm_l2cp_profile_info_t * l2cp_profile_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_set_async(int unit, int index, bcm_l2_cache_addr_t * addr, int * index_used, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_size_get_async(int unit, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_vpn_to_profile_map_get_async(int unit, uint32 vsi, uint32 * profile_idx, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_vpn_to_profile_map_set_async(int unit, uint32 vsi, uint32 profile_idx, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_l2_change_fields_add_async(int unit, bcm_l2_change_fields_t * l2_fields_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_change_fields_delete_async(int unit, bcm_l2_change_fields_t * l2_fields_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_change_fields_get_async(int unit, bcm_l2_change_fields_t * l2_fields_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_change_fields_traverse_async(int unit, bcm_l2_change_fields_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_l2_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_conflict_get_async(int unit, bcm_l2_addr_t * addr, bcm_l2_addr_t * cf_array, int cf_max, int * cf_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_create_async(int unit, bcm_l2_egress_t * egr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_destroy_async(int unit, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_find_async(int unit, bcm_l2_egress_t * egr, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_get_async(int unit, bcm_if_t encap_id, bcm_l2_egress_t * egr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_traverse_async(int unit, bcm_l2_egress_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_gport_control_info_get_async(int unit, bcm_l2_gport_control_info_t * control_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_gport_control_info_set_async(int unit, bcm_l2_gport_control_info_t * control_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_gport_forward_info_get_async(int unit, int gport_id, bcm_l2_gport_forward_info_t * forward_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_key_dump_async(int unit, char * pfx, bcm_l2_addr_t * entry, char * sfx, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_class_get_async(int unit, int lclass, int * lclass_prio, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_class_set_async(int unit, int lclass, int lclass_prio, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_limit_disable_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_limit_enable_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_limit_get_async(int unit, bcm_l2_learn_limit_t * limit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_limit_set_async(int unit, bcm_l2_learn_limit_t * limit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_msgs_config_get_async(int unit, bcm_l2_learn_msgs_config_t * learn_msg_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_msgs_config_set_async(int unit, bcm_l2_learn_msgs_config_t * learn_msg_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_port_class_get_async(int unit, bcm_gport_t port, int * lclass, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_port_class_set_async(int unit, bcm_gport_t port, int lclass, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_stat_get_async(int unit, bcm_l2_learn_stat_t * learn_stat, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_stat_set_async(int unit, bcm_l2_learn_stat_t * learn_stat, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_mac_port_create_async(int unit, bcm_l2_mac_port_t * mac_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_mac_port_destroy_async(int unit, bcm_gport_t mac_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_mac_port_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_mac_port_get_async(int unit, bcm_l2_mac_port_t * mac_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_mac_port_traverse_async(int unit, bcm_l2_mac_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_match_masked_traverse_async(int unit, uint32 flags, bcm_l2_addr_t * match_addr, bcm_l2_addr_t * mask_addr, bcm_l2_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_matched_traverse_async(int unit, uint32 flags, bcm_l2_addr_t * match_addr, bcm_l2_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_port_native_async(int unit, int modid, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_replace_async(int unit, uint32 flags, bcm_l2_addr_t * match_addr, bcm_module_t new_module, bcm_port_t new_port, bcm_trunk_t new_trunk, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_replace_match_async(int unit, uint32 flags, bcm_l2_addr_t * match_addr, bcm_l2_addr_t * mask_addr, bcm_l2_addr_t * replace_addr, bcm_l2_addr_t * replace_mask_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_ring_replace_async(int unit, bcm_l2_ring_t * l2_ring, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_enable_set_async(int unit, bcm_l2_addr_t * l2_addr, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_get_async(int unit, bcm_l2_addr_t * l2_addr, bcm_l2_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_get32_async(int unit, bcm_l2_addr_t * l2_addr, bcm_l2_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_set_async(int unit, bcm_l2_addr_t * l2_addr, bcm_l2_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_set32_async(int unit, bcm_l2_addr_t * l2_addr, bcm_l2_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_station_add_async(int unit, int * station_id, bcm_l2_station_t * station, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_station_delete_async(int unit, int station_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_station_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_station_get_async(int unit, int station_id, bcm_l2_station_t * station, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_station_size_get_async(int unit, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_station_traverse_async(int unit, bcm_l2_station_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_traverse_async(int unit, bcm_l2_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_tunnel_add_async(int unit, bcm_mac_t mac, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_tunnel_delete_async(int unit, bcm_mac_t mac, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_tunnel_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_l2gre_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_port_add_async(int unit, bcm_vpn_t l2vpn, bcm_l2gre_port_t * l2gre_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_port_delete_async(int unit, bcm_vpn_t l2vpn, bcm_gport_t l2gre_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_port_delete_all_async(int unit, bcm_vpn_t l2vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_port_get_async(int unit, bcm_vpn_t l2vpn, bcm_l2gre_port_t * l2gre_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_port_get_all_async(int unit, bcm_vpn_t l2vpn, int port_max, bcm_l2gre_port_t * port_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_attach_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_counter_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_l2gre_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_counter_set_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_l2gre_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_counter_sync_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_l2gre_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_detach_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_id_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_l2gre_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_multi_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_l2gre_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_multi_get32_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_l2gre_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_multi_set_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_l2gre_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_multi_set32_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_l2gre_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_initiator_create_async(int unit, bcm_tunnel_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_initiator_destroy_async(int unit, bcm_gport_t l2gre_tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_initiator_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_initiator_get_async(int unit, bcm_tunnel_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_initiator_traverse_async(int unit, bcm_tunnel_initiator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_terminator_create_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_terminator_destroy_async(int unit, bcm_gport_t l2gre_tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_terminator_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_terminator_get_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_terminator_traverse_async(int unit, bcm_tunnel_terminator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_terminator_update_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_vpn_create_async(int unit, bcm_l2gre_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_vpn_destroy_async(int unit, bcm_vpn_t l2vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_vpn_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_vpn_get_async(int unit, bcm_vpn_t l2vpn, bcm_l2gre_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_vpn_traverse_async(int unit, bcm_l2gre_vpn_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_aacl_add_async(int unit, uint32 options, bcm_l3_aacl_t * aacl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_aacl_delete_async(int unit, bcm_l3_aacl_t * aacl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_aacl_delete_all_async(int unit, bcm_l3_aacl_t * aacl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_aacl_find_async(int unit, bcm_l3_aacl_t * aacl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_aacl_matched_traverse_async(int unit, uint32 flags, bcm_l3_aacl_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_aacl_traverse_async(int unit, bcm_l3_aacl_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_alpm_resource_get_async(int unit, bcm_l3_route_group_t grp, bcm_l3_alpm_resource_t * resource, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_alpm_sanity_check_async(int unit, int chk_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_alpm_trace_cb_register_async(int unit, bcm_l3_alpm_trace_cb_f write_cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_alpm_trace_cb_unregister_async(int unit, bcm_l3_alpm_trace_cb_f write_cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_agm_attach_async(int unit, bcm_if_t l3_ecmp_id, bcm_switch_agm_id_t agm_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_agm_attach_get_async(int unit, bcm_if_t l3_ecmp_id, bcm_switch_agm_id_t * agm_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_agm_detach_async(int unit, bcm_if_t l3_ecmp_id, bcm_switch_agm_id_t agm_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_create_async(int unit, uint32 options, bcm_l3_egress_ecmp_t * ecmp_info, int ecmp_member_count, bcm_l3_ecmp_member_t * ecmp_member_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_destroy_async(int unit, bcm_if_t ecmp_group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_dlb_mon_config_get_async(int unit, bcm_if_t intf, bcm_l3_ecmp_dlb_mon_cfg_t * dlb_mon_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_dlb_mon_config_set_async(int unit, bcm_if_t ecmp_intf, bcm_l3_ecmp_dlb_mon_cfg_t * dlb_mon_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_dlb_port_quality_attr_get_async(int unit, bcm_port_t port, bcm_l3_ecmp_dlb_port_quality_attr_t * quality_attr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_dlb_port_quality_attr_set_async(int unit, bcm_port_t port, bcm_l3_ecmp_dlb_port_quality_attr_t * quality_attr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_dlb_stat_get_async(int unit, bcm_if_t ecmp_intf, bcm_l3_ecmp_dlb_stat_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_dlb_stat_set_async(int unit, bcm_if_t ecmp_intf, bcm_l3_ecmp_dlb_stat_t type, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_dlb_stat_sync_get_async(int unit, bcm_if_t ecmp_intf, bcm_l3_ecmp_dlb_stat_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_find_async(int unit, int ecmp_member_count, bcm_l3_ecmp_member_t * ecmp_member_array, bcm_l3_egress_ecmp_t * ecmp_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_flexctr_object_get_async(int unit, bcm_if_t intf_id, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_flexctr_object_set_async(int unit, bcm_if_t intf_id, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_get_async(int unit, bcm_l3_egress_ecmp_t * ecmp_info, int ecmp_member_size, bcm_l3_ecmp_member_t * ecmp_member_array, int * ecmp_member_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_group_info_get_async(int unit, bcm_l3_ecmp_group_info_t * l3_ecmp_group_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_member_add_async(int unit, bcm_if_t ecmp_group_id, bcm_l3_ecmp_member_t * ecmp_member, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_member_delete_async(int unit, bcm_if_t ecmp_group_id, bcm_l3_ecmp_member_t * ecmp_member, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_member_delete_all_async(int unit, bcm_if_t ecmp_group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_stat_attach_async(int unit, bcm_if_t intf_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_stat_detach_async(int unit, bcm_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_stat_id_get_async(int unit, bcm_if_t intf_id, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_traverse_async(int unit, bcm_l3_ecmp_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_tunnel_priority_map_create_async(int unit, bcm_l3_ecmp_tunnel_priority_map_info_t * map_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_tunnel_priority_map_destroy_async(int unit, bcm_l3_ecmp_tunnel_priority_map_info_t * map_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_tunnel_priority_map_get_async(int unit, bcm_l3_ecmp_tunnel_priority_map_info_t * map_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ecmp_tunnel_priority_map_set_async(int unit, bcm_l3_ecmp_tunnel_priority_map_info_t * map_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_allocation_get_async(int unit, uint32 flags, bcm_l3_egress_t * egr, uint32 nof_members, bcm_if_t * if_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_arp_traverse_async(int unit, bcm_l3_egress_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_create_async(int unit, uint32 flags, bcm_l3_egress_t * egr, bcm_if_t * if_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_destroy_async(int unit, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_add_async(int unit, bcm_l3_egress_ecmp_t * ecmp, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_create_async(int unit, bcm_l3_egress_ecmp_t * ecmp, int intf_count, bcm_if_t * intf_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_delete_async(int unit, bcm_l3_egress_ecmp_t * ecmp, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_destroy_async(int unit, bcm_l3_egress_ecmp_t * ecmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_ethertype_get_async(int unit, uint32 * flags, int ethertype_max, int * ethertype_array, int * ethertype_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_ethertype_set_async(int unit, uint32 flags, int ethertype_count, int * ethertype_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_find_async(int unit, int intf_count, bcm_if_t * intf_array, bcm_l3_egress_ecmp_t * ecmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_get_async(int unit, bcm_l3_egress_ecmp_t * ecmp, int intf_size, bcm_if_t * intf_array, int * intf_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_member_status_get_async(int unit, bcm_if_t intf, int * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_member_status_set_async(int unit, bcm_if_t intf, int status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_resilient_add_async(int unit, uint32 flags, bcm_l3_egress_ecmp_resilient_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_resilient_delete_async(int unit, uint32 flags, bcm_l3_egress_ecmp_resilient_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_resilient_replace_async(int unit, uint32 flags, bcm_l3_egress_ecmp_resilient_entry_t * match_entry, int * num_entries, bcm_l3_egress_ecmp_resilient_entry_t * replace_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_resilient_traverse_async(int unit, uint32 flags, bcm_l3_egress_ecmp_resilient_entry_t * match_entry, bcm_l3_egress_ecmp_resilient_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_traverse_async(int unit, bcm_l3_egress_ecmp_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_tunnel_priority_set_async(int unit, bcm_l3_egress_ecmp_t * ecmp, int intf_count, bcm_if_t * intf_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_find_async(int unit, bcm_l3_egress_t * egr, bcm_if_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_flexctr_object_get_async(int unit, bcm_if_t intf_id, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_flexctr_object_set_async(int unit, bcm_if_t intf_id, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_get_async(int unit, bcm_if_t intf, bcm_l3_egress_t * egr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multi_alloc_async(int unit, bcm_l3_egress_multi_info_t egress_multi_info, bcm_if_t * base_egress_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multi_free_async(int unit, bcm_if_t base_egress_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_add_async(int unit, bcm_if_t mpintf, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_create_async(int unit, uint32 flags, int intf_count, bcm_if_t * intf_array, bcm_if_t * mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_delete_async(int unit, bcm_if_t mpintf, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_destroy_async(int unit, bcm_if_t mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_find_async(int unit, int intf_count, bcm_if_t * intf_array, bcm_if_t * mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_get_async(int unit, bcm_if_t mpintf, int intf_size, bcm_if_t * intf_array, int * intf_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_max_create_async(int unit, uint32 flags, int max_paths, int intf_count, bcm_if_t * intf_array, bcm_if_t * mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_traverse_async(int unit, bcm_l3_egress_multipath_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_attach_async(int unit, bcm_if_t intf_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_counter_get_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_counter_set_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_counter_sync_get_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_detach_async(int unit, bcm_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_id_get_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_traverse_async(int unit, bcm_l3_egress_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_enable_set_async(int unit, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_add_async(int unit, bcm_l3_host_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_age_async(int unit, uint32 flags, bcm_l3_host_traverse_cb age_cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_conflict_get_async(int unit, bcm_l3_key_t * ipkey, bcm_l3_key_t * cf_array, int cf_max, int * cf_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_delete_async(int unit, bcm_l3_host_t * ip_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_delete_all_async(int unit, bcm_l3_host_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_delete_by_interface_async(int unit, bcm_l3_host_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_delete_by_network_async(int unit, bcm_l3_route_t * ip_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_find_async(int unit, bcm_l3_host_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_invalidate_entry_async(int unit, bcm_ip_t info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_attach_async(int unit, bcm_l3_host_t * info, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_counter_get_async(int unit, bcm_l3_host_t * info, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_counter_set_async(int unit, bcm_l3_host_t * info, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_counter_sync_get_async(int unit, bcm_l3_host_t * info, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_detach_async(int unit, bcm_l3_host_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_id_get_async(int unit, bcm_l3_host_t * info, bcm_l3_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_traverse_async(int unit, uint32 flags, uint32 start, uint32 end, bcm_l3_host_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_validate_entry_async(int unit, bcm_ip_t info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_info_async(int unit, bcm_l3_info_t * l3info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_create_async(int unit, bcm_l3_ingress_t * ing_intf, bcm_if_t * intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_destroy_async(int unit, bcm_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_find_async(int unit, bcm_l3_ingress_t * ing_intf, bcm_if_t * intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_get_async(int unit, bcm_if_t intf, bcm_l3_ingress_t * ing_intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_stat_attach_async(int unit, bcm_if_t intf_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_stat_counter_get_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_stat_counter_set_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_stat_counter_sync_get_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_stat_detach_async(int unit, bcm_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_stat_id_get_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_traverse_async(int unit, bcm_l3_ingress_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_create_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_delete_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_find_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_find_vlan_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_get_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_stat_attach_async(int unit, bcm_if_t intf_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_stat_detach_async(int unit, bcm_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_stat_id_get_async(int unit, bcm_if_t intf_id, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_vpn_get_async(int unit, bcm_if_t l3_intf_id, uint32 * flags, bcm_vpn_t * vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_vpn_set_async(int unit, bcm_if_t l3_intf_id, uint32 flags, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip4_options_action_get_async(int unit, int ip4_options_profile_id, int ip4_option, bcm_l3_ip4_options_action_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip4_options_action_set_async(int unit, int ip4_options_profile_id, int ip4_option, bcm_l3_ip4_options_action_t action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip4_options_profile_create_async(int unit, uint32 flags, bcm_l3_ip4_options_action_t default_action, int * ip4_options_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip4_options_profile_destroy_async(int unit, int ip4_options_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip6_prefix_map_add_async(int unit, bcm_ip6_t ip6_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip6_prefix_map_delete_async(int unit, bcm_ip6_t ip6_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip6_prefix_map_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip6_prefix_map_get_async(int unit, int map_size, bcm_ip6_t * ip6_array, int * ip6_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_large_nat_egress_add_async(int unit, bcm_l3_large_nat_egress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_large_nat_egress_delete_async(int unit, bcm_l3_large_nat_egress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_large_nat_egress_get_async(int unit, bcm_l3_large_nat_egress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_large_nat_egress_traverse_async(int unit, bcm_l3_large_nat_egress_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_add_async(int unit, bcm_l3_nat_egress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_delete_async(int unit, bcm_l3_nat_id_t nat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_destroy_async(int unit, bcm_l3_nat_egress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_get_async(int unit, bcm_l3_nat_egress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_attach_async(int unit, bcm_l3_nat_egress_t * info, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_counter_get_async(int unit, bcm_l3_nat_egress_t * info, bcm_l3_nat_egress_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_counter_set_async(int unit, bcm_l3_nat_egress_t * info, bcm_l3_nat_egress_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_counter_sync_get_async(int unit, bcm_l3_nat_egress_t * info, bcm_l3_nat_egress_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_detach_async(int unit, bcm_l3_nat_egress_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_id_get_async(int unit, bcm_l3_nat_egress_t * info, bcm_l3_nat_egress_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_multi_get_async(int unit, bcm_l3_nat_egress_t * info, int nstat, bcm_l3_nat_egress_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_multi_get32_async(int unit, bcm_l3_nat_egress_t * info, int nstat, bcm_l3_nat_egress_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_multi_set_async(int unit, bcm_l3_nat_egress_t * info, int nstat, bcm_l3_nat_egress_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_multi_set32_async(int unit, bcm_l3_nat_egress_t * info, int nstat, bcm_l3_nat_egress_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_traverse_async(int unit, uint32 flags, uint32 start, uint32 end, bcm_l3_nat_egress_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_ingress_add_async(int unit, bcm_l3_nat_ingress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_ingress_age_async(int unit, uint32 flags, bcm_l3_nat_ingress_traverse_cb age_cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_ingress_delete_async(int unit, bcm_l3_nat_ingress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_ingress_delete_all_async(int unit, bcm_l3_nat_ingress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_ingress_find_async(int unit, bcm_l3_nat_ingress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_ingress_traverse_async(int unit, uint32 flags, uint32 start, uint32 end, bcm_l3_nat_ingress_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_add_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_age_async(int unit, uint32 flags, bcm_l3_route_traverse_cb age_out, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_delete_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_delete_all_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_delete_by_interface_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_find_async(int unit, bcm_l3_host_t * host, bcm_l3_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_flexctr_object_get_async(int unit, bcm_l3_route_t * info, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_flexctr_object_set_async(int unit, bcm_l3_route_t * info, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_get_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_max_ecmp_get_async(int unit, int * max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_max_ecmp_set_async(int unit, int max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_multipath_get_async(int unit, bcm_l3_route_t * the_route, bcm_l3_route_t * path_array, int max_path, int * path_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_attach_async(int unit, bcm_l3_route_t * info, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_counter_get_async(int unit, bcm_l3_route_t * info, bcm_l3_route_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_counter_set_async(int unit, bcm_l3_route_t * info, bcm_l3_route_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_counter_sync_get_async(int unit, bcm_l3_route_t * info, bcm_l3_route_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_detach_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_enable_set_async(int unit, bcm_l3_route_t * route, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_get_async(int unit, bcm_l3_route_t * route, bcm_l3_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_get32_async(int unit, bcm_l3_route_t * route, bcm_l3_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_id_get_async(int unit, bcm_l3_route_t * info, bcm_l3_route_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_multi_get_async(int unit, bcm_l3_route_t * info, int nstat, bcm_l3_route_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_multi_get32_async(int unit, bcm_l3_route_t * info, int nstat, bcm_l3_route_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_multi_set_async(int unit, bcm_l3_route_t * info, int nstat, bcm_l3_route_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_multi_set32_async(int unit, bcm_l3_route_t * info, int nstat, bcm_l3_route_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_set_async(int unit, bcm_l3_route_t * route, bcm_l3_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_set32_async(int unit, bcm_l3_route_t * route, bcm_l3_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_traverse_async(int unit, uint32 flags, uint32 start, uint32 end, bcm_l3_route_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_source_bind_add_async(int unit, bcm_l3_source_bind_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_source_bind_delete_async(int unit, bcm_l3_source_bind_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_source_bind_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_source_bind_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_source_bind_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_source_bind_get_async(int unit, bcm_l3_source_bind_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_source_bind_traverse_async(int unit, bcm_l3_source_bind_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_subnet_route_find_async(int unit, bcm_l3_route_t * input, bcm_l3_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_tunnel_term_global_cfg_get_async(int unit, bcm_l3_tunnel_term_extn_t * extn_attribute, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_tunnel_term_global_cfg_set_async(int unit, bcm_l3_tunnel_term_extn_t * extn_attribute, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vpbr_entry_add_async(int unit, bcm_l3_vpbr_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vpbr_entry_delete_async(int unit, bcm_l3_vpbr_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vpbr_entry_delete_all_async(int unit, bcm_l3_vpbr_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vpbr_entry_get_async(int unit, bcm_l3_vpbr_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vpbr_traverse_async(int unit, uint32 flags, bcm_l3_vpbr_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_route_data_mode_get_async(int unit, bcm_vrf_t vrf, uint32 flags, bcm_l3_vrf_route_data_mode_t * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_route_data_mode_set_async(int unit, bcm_vrf_t vrf, uint32 flags, bcm_l3_vrf_route_data_mode_t mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_attach_async(int unit, bcm_vrf_t vrf, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_counter_get_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_counter_set_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_counter_sync_get_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_detach_async(int unit, bcm_vrf_t vrf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_enable_set_async(int unit, bcm_vrf_t vrf, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_get_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_get32_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_id_get_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_multi_get_async(int unit, bcm_vrf_t vrf, int nstat, bcm_l3_vrf_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_multi_get32_async(int unit, bcm_vrf_t vrf, int nstat, bcm_l3_vrf_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_multi_set_async(int unit, bcm_vrf_t vrf, int nstat, bcm_l3_vrf_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_multi_set32_async(int unit, bcm_vrf_t vrf, int nstat, bcm_l3_vrf_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_set_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_set32_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_sync_get_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_sync_get32_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_add_async(int unit, bcm_vlan_t vlan, uint32 vrid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_config_add_async(int unit, uint32 flags, bcm_vlan_t vlan, uint32 vrid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_config_delete_async(int unit, uint32 flags, bcm_vlan_t vlan, uint32 vrid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_config_delete_all_async(int unit, uint32 flags, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_config_get_async(int unit, uint32 flags, bcm_vlan_t vlan, uint32 alloc_size, uint32 * vrid_array, uint32 * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_delete_async(int unit, bcm_vlan_t vlan, uint32 vrid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_delete_all_async(int unit, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_get_async(int unit, bcm_vlan_t vlan, int alloc_size, int * vrid_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_latency_monitor_config_get_async(int unit, uint8 monitor_id, bcm_latency_monitor_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_config_set_async(int unit, uint8 monitor_id, bcm_latency_monitor_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_cosq_config_get_async(int unit, uint8 monitor_id, uint8 cosq, bcm_latency_monitor_cosq_info_t * cosq_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_cosq_config_set_async(int unit, uint8 monitor_id, uint8 cosq, bcm_latency_monitor_cosq_info_t cosq_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_destroy_async(int unit, uint8 monitor_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_enable_async(int unit, uint8 monitor_id, uint8 enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_histogram_get_async(int unit, uint8 monitor_id, uint8 cosq, uint8 byte_counter_flag, bcm_latency_monitor_histogram_t * histogram, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_info_get_async(int unit, uint8 monitor_id, bcm_latency_monitor_info_t * monitor_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_latency_limit_table_get_async(int unit, uint8 table_size, uint32 * latency_limit_table, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_latency_limit_table_set_async(int unit, uint8 table_size, uint32 * latency_limit_table, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_register_async(int unit, int monitor_id, bcm_latency_monitor_callback_fn fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_stat_attach_async(int unit, uint8 monitor_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_stat_detach_async(int unit, uint8 monitor_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_stat_id_get_async(int unit, uint8 monitor_id, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_latency_monitor_unregister_async(int unit, int monitor_id, bcm_latency_monitor_callback_fn fn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_control_get_async(int unit, bcm_lbg_t lbg_id, bcm_lb_direction_type_t direction, uint32 flags, bcm_lb_control_t lb_control, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_control_set_async(int unit, bcm_lbg_t lbg_id, bcm_lb_direction_type_t direction, uint32 flags, bcm_lb_control_t lb_control, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_enable_get_async(int unit, bcm_lbg_t lbg_id, uint32 flags, uint32 * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_enable_set_async(int unit, bcm_lbg_t lbg_id, uint32 flags, uint32 enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_flush_configure_get_async(int unit, bcm_lbg_t lbg_id, uint32 flags, bcm_lb_flush_type_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_flush_configure_set_async(int unit, bcm_lbg_t lbg_id, uint32 flags, bcm_lb_flush_type_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_modem_control_get_async(int unit, bcm_modem_t modem_id, bcm_lb_direction_type_t direction, uint32 flags, bcm_lb_modem_control_t modem_control, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_modem_control_set_async(int unit, bcm_modem_t modem_id, bcm_lb_direction_type_t direction, uint32 flags, bcm_lb_modem_control_t modem_control, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_modem_packet_config_get_async(int unit, bcm_modem_t modem_id, uint32 flags, bcm_lb_modem_packet_config_t * packet_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_modem_packet_config_set_async(int unit, bcm_modem_t modem_id, uint32 flags, bcm_lb_modem_packet_config_t * packet_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_modem_shaper_get_async(int unit, bcm_modem_t modem_id, uint32 flags, bcm_lb_modem_shaper_config_t * shaper, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_modem_shaper_set_async(int unit, bcm_modem_t modem_id, uint32 flags, bcm_lb_modem_shaper_config_t * shaper, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_modem_stat_get_async(int unit, bcm_modem_t modem_id, bcm_lb_direction_type_t direction, uint32 flags, bcm_lb_modem_stat_val_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_modem_status_get_async(int unit, bcm_modem_t modem_id, bcm_lb_direction_type_t direction, uint32 flags, bcm_lb_modem_status_type_t status_type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_modem_to_lbg_map_get_async(int unit, bcm_modem_t modem_id, bcm_lb_direction_type_t direction, uint32 flags, bcm_lbg_t * lbg_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_modem_to_lbg_map_set_async(int unit, bcm_modem_t modem_id, bcm_lb_direction_type_t direction, uint32 flags, bcm_lbg_t lbg_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_modem_to_port_map_get_async(int unit, bcm_modem_t modem_id, uint32 flags, bcm_gport_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_modem_to_port_map_set_async(int unit, bcm_modem_t modem_id, uint32 flags, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_packet_config_get_async(int unit, uint32 flags, bcm_lb_packet_config_t * packet_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_packet_config_set_async(int unit, uint32 flags, bcm_lb_packet_config_t * packet_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_rx_modem_map_get_async(int unit, bcm_lb_rx_modem_map_index_t * map_index, uint32 flags, bcm_lb_rx_modem_map_config_t * map_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_rx_modem_map_set_async(int unit, bcm_lb_rx_modem_map_index_t * map_index, uint32 flags, bcm_lb_rx_modem_map_config_t * map_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_sequence_number_width_get_async(int unit, bcm_lbg_t lbg_id, bcm_lb_direction_type_t direction, uint32 flags, int * number_width, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_sequence_number_width_set_async(int unit, bcm_lbg_t lbg_id, bcm_lb_direction_type_t direction, uint32 flags, int number_width, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_stat_get_async(int unit, bcm_lbg_t lbg_id, bcm_lb_direction_type_t direction, uint32 flags, bcm_lb_stat_val_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_status_get_async(int unit, bcm_lbg_t lbg_id, bcm_lb_direction_type_t direction, uint32 flags, bcm_lb_status_type_t status_type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_tc_dp_to_priority_config_get_async(int unit, uint32 flags, bcm_lb_tc_dp_t * tc_dp, bcm_lb_pkt_pri_t * pkt_pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_tc_dp_to_priority_config_set_async(int unit, uint32 flags, bcm_lb_tc_dp_t * tc_dp, bcm_lb_pkt_pri_t * pkt_pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_tx_sched_get_async(int unit, uint32 flags, int max_lbg_count, bcm_lb_lbg_weight_t * lbg_weights, int * lbg_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_lb_tx_sched_set_async(int unit, uint32 flags, int lbg_count, bcm_lb_lbg_weight_t * lbg_weights, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_link_change_async(int unit, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_link_wait_async(int unit, bcm_pbmp_t * pbm, int us, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_linkscan_dump_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_linkscan_enable_get_async(int unit, int * us, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_enable_port_get_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_enable_set_async(int unit, int us, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_mode_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_mode_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_mode_set_pbm_async(int unit, bcm_pbmp_t pbm, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_override_link_state_get_async(int unit, bcm_port_t port, int * link, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_override_link_state_set_async(int unit, bcm_port_t port, int link, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_port_register_async(int unit, bcm_port_t port, bcm_linkscan_port_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_port_unregister_async(int unit, bcm_port_t port, bcm_linkscan_port_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_register_async(int unit, bcm_linkscan_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_trigger_event_get_async(int unit, bcm_port_t port, uint32 flags, bcm_linkscan_trigger_event_t trigger_event, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_trigger_event_set_async(int unit, bcm_port_t port, uint32 flags, bcm_linkscan_trigger_event_t trigger_event, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_unregister_async(int unit, bcm_linkscan_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_update_async(int unit, bcm_pbmp_t pbm, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_MACSEC
void	bcm_macsec_event_enable_get_async(int unit, bcm_macsec_event_t t, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_event_enable_set_async(int unit, bcm_macsec_event_t t, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_event_register_async(int unit, bcm_macsec_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_event_unregister_async(int unit, bcm_macsec_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_flow_create_async(int unit, bcm_port_t port, uint32 flags, bcm_macsec_flow_match_t * flow, bcm_macsec_flow_action_t * action, int * flowId, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_flow_destroy_async(int unit, bcm_port_t port, int flowId, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_flow_get_async(int unit, bcm_port_t port, int flowId, bcm_macsec_flow_match_t * flow, bcm_macsec_flow_action_t * a, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_flow_traverse_async(int unit, bcm_port_t port, bcm_macsec_flow_traverse_cb callbk, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_port_capability_get_async(int unit, bcm_port_t port, bcm_macsec_port_capability_t * cap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_port_config_get_async(int unit, bcm_port_t port, bcm_macsec_port_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_port_config_set_async(int unit, bcm_port_t port, bcm_macsec_port_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_port_traverse_async(int unit, bcm_macsec_port_traverse_cb callbk, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_assoc_create_async(int unit, bcm_port_t port, uint32 flags, int chanId, bcm_macsec_secure_assoc_t * assoc, int * assocId, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_assoc_destroy_async(int unit, bcm_port_t port, int assocId, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_assoc_get_async(int unit, bcm_port_t port, int assocId, bcm_macsec_secure_assoc_t * assoc, int * chanId, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_assoc_traverse_async(int unit, bcm_port_t port, int chanId, bcm_macsec_secure_assoc_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_chan_create_async(int unit, bcm_port_t port, uint32 flags, bcm_macsec_secure_chan_t * chan, int * chanId, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_chan_destroy_async(int unit, bcm_port_t port, int chanId, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_chan_get_async(int unit, bcm_port_t port, int chanId, bcm_macsec_secure_chan_t * chan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_chan_traverse_async(int unit, bcm_port_t port, bcm_macsec_chan_traverse_cb calback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_stat_clear_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_stat_get_async(int unit, bcm_port_t port, bcm_macsec_stat_t stat, int chanId, int assocId, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_stat_get32_async(int unit, bcm_port_t port, bcm_macsec_stat_t stat, int chanId, int assocId, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_stat_set_async(int unit, bcm_port_t port, bcm_macsec_stat_t stat, int chanId, int assocId, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_stat_set32_async(int unit, bcm_port_t port, bcm_macsec_stat_t stat, int chanId, int assocId, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_MACSEC */
void	bcm_mcast_addr_add_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_addr_add_w_l2mcindex_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_addr_remove_async(int unit, bcm_mac_t mac, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_addr_remove_w_l2mcindex_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_bitmap_del_async(int unit, int mc_idx, bcm_port_t in_port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_bitmap_get_async(int unit, int mc_idx, bcm_port_t in_port, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_bitmap_max_get_async(int unit, int * max_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_bitmap_set_async(int unit, int mc_idx, bcm_port_t in_port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_join_async(int unit, bcm_mac_t mcMacAddr, bcm_vlan_t vlanId, int srcPort, bcm_mcast_addr_t * mcaddr, bcm_pbmp_t * allRouterBmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_leave_async(int unit, bcm_mac_t mcMacAddr, bcm_vlan_t vlanId, int srcPort, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_port_add_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_port_get_async(int unit, bcm_mac_t mac, bcm_vlan_t vid, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_port_remove_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_mim_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_lookup_id_stat_attach_async(int unit, int lookup_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_lookup_id_stat_counter_get_async(int unit, int lookup_id, bcm_mim_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_lookup_id_stat_counter_set_async(int unit, int lookup_id, bcm_mim_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_lookup_id_stat_counter_sync_get_async(int unit, int lookup_id, bcm_mim_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_lookup_id_stat_detach_async(int unit, int lookup_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_lookup_id_stat_id_get_async(int unit, int lookup_id, bcm_mim_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_add_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_port_t * mim_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_delete_async(int unit, bcm_mim_vpn_t vpn, bcm_gport_t mim_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_delete_all_async(int unit, bcm_mim_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_get_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_port_t * mim_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_get_all_async(int unit, bcm_mim_vpn_t vpn, int port_max, bcm_mim_port_t * port_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_create_async(int unit, bcm_mim_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_destroy_async(int unit, bcm_mim_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_get_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_stat_attach_async(int unit, bcm_mim_vpn_t vpn, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_stat_counter_get_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_stat_counter_set_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_stat_counter_sync_get_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_stat_detach_async(int unit, bcm_mim_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_stat_id_get_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_traverse_async(int unit, bcm_mim_vpn_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_mirror_destination_count_command_get_async(int unit, bcm_core_t core_id, bcm_gport_t mirror_dest_id, int counter_cmd_id, uint32 flags, bcm_mirror_profile_cmd_count_t * mirror_count_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_destination_count_command_set_async(int unit, bcm_core_t core_id, bcm_gport_t mirror_dest_id, int counter_cmd_id, uint32 flags, bcm_mirror_profile_cmd_count_t * mirror_count_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_destination_create_async(int unit, bcm_mirror_destination_t * mirror_dest, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_destination_destroy_async(int unit, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_destination_get_async(int unit, bcm_gport_t mirror_dest_id, bcm_mirror_destination_t * mirror_dest, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_destination_traverse_async(int unit, bcm_mirror_destination_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_egress_get_async(int unit, bcm_port_t port, int * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_egress_set_async(int unit, bcm_port_t port, int val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_global_truncate_get_async(int unit, bcm_mirror_global_truncate_t * global_truncate, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_global_truncate_set_async(int unit, bcm_mirror_global_truncate_t * global_truncate, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_header_info_get_async(int unit, bcm_gport_t mirror_dest_id, uint32 * flags, bcm_mirror_header_info_t * mirror_header_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_header_info_set_async(int unit, uint32 flags, bcm_gport_t mirror_dest_id, bcm_mirror_header_info_t * mirror_header_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_get_async(int unit, bcm_port_t port, int * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_mod_event_group_create_async(int unit, bcm_mirror_ingress_mod_event_t * event_array, int num_events, bcm_mirror_ingress_mod_event_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_mod_event_group_destroy_async(int unit, bcm_mirror_ingress_mod_event_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_mod_event_group_get_async(int unit, bcm_mirror_ingress_mod_event_group_t group, bcm_mirror_ingress_mod_event_t * event_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_mod_event_group_get_all_async(int unit, bcm_mirror_ingress_mod_event_group_t * group_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_mod_event_profile_create_async(int unit, bcm_mirror_ingress_mod_event_profile_t * profile, int * profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_mod_event_profile_destroy_async(int unit, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_mod_event_profile_get_async(int unit, int profile_id, bcm_mirror_ingress_mod_event_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_mod_event_profile_get_all_async(int unit, int * profile_id_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_mod_event_profile_group_add_async(int unit, int profile_id, bcm_mirror_ingress_mod_event_group_t group, int hit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_mod_event_profile_group_delete_async(int unit, int profile_id, bcm_mirror_ingress_mod_event_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_mod_event_profile_group_get_async(int unit, int profile_id, bcm_mirror_ingress_mod_event_group_t group, int * hit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_mod_event_profile_group_get_all_async(int unit, int profile_id, bcm_mirror_ingress_mod_event_group_t * group_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_set_async(int unit, bcm_port_t port, int val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_mode_get_async(int unit, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_mode_set_async(int unit, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_multi_dip_group_ipv4_create_async(int unit, bcm_mirror_multi_dip_entry_num_t num_entries, bcm_ip_t * ipv4_addr_array, bcm_mirror_multi_dip_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_multi_dip_group_ipv4_destroy_async(int unit, bcm_mirror_multi_dip_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_multi_dip_group_ipv4_get_async(int unit, bcm_mirror_multi_dip_group_t group, bcm_ip_t * ipv4_addr_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_multi_dip_group_ipv4_get_all_async(int unit, bcm_mirror_multi_dip_group_t * ipv4_group_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_multi_dip_group_ipv6_create_async(int unit, bcm_mirror_multi_dip_entry_num_t num_entries, bcm_ip6_t * ipv6_addr_array, bcm_mirror_multi_dip_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_multi_dip_group_ipv6_destroy_async(int unit, bcm_mirror_multi_dip_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_multi_dip_group_ipv6_get_async(int unit, bcm_mirror_multi_dip_group_t group, bcm_ip6_t * ipv6_addr_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_multi_dip_group_ipv6_get_all_async(int unit, bcm_mirror_multi_dip_group_t * ipv6_group_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_payload_zero_control_multi_get_async(int unit, bcm_mirror_payload_zero_info_t * payload_zero_config_array, int num_configs, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_payload_zero_control_multi_set_async(int unit, bcm_mirror_payload_zero_info_t * payload_zero_config_array, int num_configs, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_payload_zero_profile_create_async(int unit, bcm_mirror_payload_zero_offsets_t * mirror_payload_offset_info, uint32 flags, uint32 * profile_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_payload_zero_profile_destroy_async(int unit, uint32 flags, uint32 profile_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_dest_add_async(int unit, bcm_port_t port, uint32 flags, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_dest_delete_async(int unit, bcm_port_t port, uint32 flags, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_dest_delete_all_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_dest_get_async(int unit, bcm_port_t port, uint32 flags, int mirror_dest_size, bcm_gport_t * mirror_dest, int * mirror_dest_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_destination_add_async(int unit, bcm_port_t port, uint32 flags, bcm_gport_t mirror_dest, bcm_mirror_options_t options, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_destination_get_async(int unit, bcm_port_t port, uint32 flags, int mirror_dest_size, bcm_gport_t * mirror_dest, int * mirror_dest_count, bcm_mirror_options_t * options, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_get_async(int unit, bcm_port_t port, bcm_module_t * dest_mod, bcm_port_t * dest_port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_info_get_async(int unit, bcm_port_t port, uint32 flags, bcm_mirror_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_info_set_async(int unit, bcm_port_t port, uint32 flags, bcm_mirror_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_set_async(int unit, bcm_port_t port, bcm_module_t dest_mod, bcm_port_t dest_port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_to_rcy_port_map_get_async(int unit, uint32 flags, bcm_port_t forward_port, bcm_mirror_port_to_rcy_map_info_t * rcy_map_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_to_rcy_port_map_set_async(int unit, uint32 flags, bcm_port_t forward_port, bcm_mirror_port_to_rcy_map_info_t * rcy_map_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_dest_add_async(int unit, bcm_port_t port, bcm_vlan_t vlan, uint32 flags, bcm_gport_t destid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_dest_delete_async(int unit, bcm_port_t port, bcm_vlan_t vlan, uint32 flags, bcm_gport_t destid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_dest_delete_all_async(int unit, bcm_port_t port, bcm_vlan_t vlan, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_dest_get_async(int unit, bcm_port_t port, bcm_vlan_t vlan, uint32 flags, uint32 mirror_dest_size, bcm_gport_t * destid, uint32 * destcount, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_destination_add_async(int unit, bcm_port_t port, bcm_vlan_t vlan, uint32 flags, bcm_gport_t destid, bcm_mirror_options_t options, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_destination_get_async(int unit, bcm_port_t port, bcm_vlan_t vlan, uint32 flags, uint32 mirror_dest_size, bcm_gport_t * destid, uint32 * destcount, bcm_mirror_options_t * options, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_get_async(int unit, bcm_port_t port, bcm_vlan_t vlan, bcm_gport_t * dest_port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_set_async(int unit, bcm_port_t port, bcm_vlan_t vlan, bcm_gport_t destport, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_sample_profile_create_async(int unit, uint32 options, bcm_mirror_sample_type_t type, int * profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_sample_profile_destroy_async(int unit, bcm_mirror_sample_type_t type, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_sample_profile_get_async(int unit, bcm_mirror_sample_type_t type, int profile_id, bcm_mirror_sample_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_sample_profile_set_async(int unit, bcm_mirror_sample_type_t type, int profile_id, bcm_mirror_sample_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_sample_stat_attach_async(int unit, bcm_mirror_sample_type_t type, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_sample_stat_detach_async(int unit, bcm_mirror_sample_type_t type, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_source_dest_add_async(int unit, bcm_mirror_source_t * source, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_source_dest_delete_async(int unit, bcm_mirror_source_t * source, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_source_dest_delete_all_async(int unit, bcm_mirror_source_t * source, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_source_dest_get_all_async(int unit, bcm_mirror_source_t * source, int array_size, bcm_gport_t * mirror_dest, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_stat_get_async(int unit, bcm_mirror_stat_object_t * object, bcm_mirror_stat_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_stat_set_async(int unit, bcm_mirror_stat_object_t * object, bcm_mirror_stat_t type, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_stat_sync_get_async(int unit, bcm_mirror_stat_object_t * object, bcm_mirror_stat_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_to_get_async(int unit, bcm_port_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_to_pbmp_get_async(int unit, bcm_port_t port, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_to_pbmp_set_async(int unit, bcm_port_t port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_to_set_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_truncate_length_profile_create_async(int unit, uint32 options, int * profile_id, bcm_mirror_truncate_length_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_truncate_length_profile_destroy_async(int unit, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_truncate_length_profile_get_async(int unit, int profile_id, bcm_mirror_truncate_length_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_vlan_get_async(int unit, bcm_port_t port, uint16 * tpid, uint16 * vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_vlan_set_async(int unit, bcm_port_t port, uint16 tpid, uint16 vlan, bcm_async_cb_t async_callback, void *async_cookie);
/* bcm_module_name has a non int return type */
#ifdef	INCLUDE_L3
void	bcm_mpls_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_control_pkt_add_async(int unit, uint32 options, bcm_mpls_control_pkt_match_t * match, bcm_mpls_control_pkt_action_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_control_pkt_delete_async(int unit, bcm_mpls_control_pkt_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_control_pkt_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_control_pkt_get_async(int unit, bcm_mpls_control_pkt_match_t * match, bcm_mpls_control_pkt_action_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_control_pkt_traverse_async(int unit, bcm_mpls_control_pkt_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_entropy_identifier_add_async(int unit, uint32 options, bcm_mpls_entropy_identifier_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_entropy_identifier_delete_async(int unit, bcm_mpls_entropy_identifier_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_entropy_identifier_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_entropy_identifier_get_async(int unit, bcm_mpls_entropy_identifier_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_entropy_identifier_traverse_async(int unit, bcm_mpls_entropy_identifier_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_esi_encap_add_async(int unit, bcm_mpls_esi_info_t * esi_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_esi_encap_delete_async(int unit, bcm_mpls_esi_info_t * esi_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_esi_encap_get_async(int unit, bcm_mpls_esi_info_t * esi_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_esi_encap_traverse_async(int unit, bcm_mpls_esi_encap_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_exp_map_create_async(int unit, uint32 flags, int * exp_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_exp_map_destroy_async(int unit, int exp_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_exp_map_get_async(int unit, int exp_map_id, bcm_mpls_exp_map_t * exp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_exp_map_set_async(int unit, int exp_map_id, bcm_mpls_exp_map_t * exp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_flexctr_object_get_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_flexctr_object_set_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_attach_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_clear_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_counter_get_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_counter_set_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_counter_sync_get_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_detach_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_enable_set_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_get_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_get32_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_id_get_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_sync_get_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_sync_get32_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_add_async(int unit, bcm_vpn_t vpn, bcm_mpls_port_t * mpls_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_delete_async(int unit, bcm_vpn_t vpn, bcm_gport_t mpls_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_delete_all_async(int unit, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_get_async(int unit, bcm_vpn_t vpn, bcm_mpls_port_t * mpls_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_get_all_async(int unit, bcm_vpn_t vpn, int port_max, bcm_mpls_port_t * port_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_attach_async(int unit, bcm_vpn_t vpn, bcm_gport_t port, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_counter_get_async(int unit, bcm_vpn_t vpn, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_counter_set_async(int unit, bcm_vpn_t vpn, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_counter_sync_get_async(int unit, bcm_vpn_t vpn, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_detach_async(int unit, bcm_vpn_t vpn, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_enable_set_async(int unit, bcm_gport_t mpls_port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_get_async(int unit, bcm_gport_t mpls_port, bcm_cos_t cos, bcm_mpls_port_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_get32_async(int unit, bcm_gport_t mpls_port, bcm_cos_t cos, bcm_mpls_port_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_id_get_async(int unit, bcm_vpn_t vpn, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_set_async(int unit, bcm_gport_t mpls_port, bcm_cos_t cos, bcm_mpls_port_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_set32_async(int unit, bcm_gport_t mpls_port, bcm_cos_t cos, bcm_mpls_port_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_traverse_async(int unit, bcm_mpls_port_traverse_info_t additional_info, bcm_mpls_port_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_range_action_add_async(int unit, bcm_mpls_label_t label_low, bcm_mpls_label_t label_high, bcm_mpls_range_action_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_range_action_get_async(int unit, bcm_mpls_label_t label_low, bcm_mpls_label_t label_high, bcm_mpls_range_action_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_range_action_remove_async(int unit, bcm_mpls_label_t label_low, bcm_mpls_label_t label_high, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_special_label_egress_add_async(int unit, bcm_mpls_special_label_type_t label_type, bcm_mpls_special_label_t label_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_special_label_egress_delete_async(int unit, bcm_mpls_special_label_type_t label_type, bcm_mpls_special_label_t label_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_special_label_egress_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_special_label_egress_get_async(int unit, bcm_mpls_special_label_type_t label_type, bcm_mpls_special_label_t * label_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_special_label_egress_traverse_async(int unit, bcm_mpls_special_label_egress_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_special_label_identifier_add_async(int unit, bcm_mpls_special_label_type_t label_type, bcm_mpls_special_label_t label_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_special_label_identifier_delete_async(int unit, bcm_mpls_special_label_type_t label_type, bcm_mpls_special_label_t label_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_special_label_identifier_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_special_label_identifier_get_async(int unit, bcm_mpls_special_label_type_t label_type, bcm_mpls_special_label_t * label_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_special_label_identifier_traverse_async(int unit, bcm_mpls_special_label_identifier_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_special_label_push_action_get_async(int unit, bcm_mpls_special_label_push_element_t * element, int * push_action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_special_label_push_action_set_async(int unit, bcm_mpls_special_label_push_element_t * element, int push_action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_encap_create_async(int unit, uint32 options, bcm_mpls_tunnel_encap_t * tunnel_encap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_encap_destroy_async(int unit, bcm_gport_t tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_encap_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_encap_get_async(int unit, bcm_mpls_tunnel_encap_t * tunnel_encap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_clear_async(int unit, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_clear_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_create_async(int unit, bcm_if_t intf, int num_labels, bcm_mpls_egress_label_t * label_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_get_async(int unit, bcm_if_t intf, int label_max, bcm_mpls_egress_label_t * label_array, int * label_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_set_async(int unit, bcm_if_t intf, int num_labels, bcm_mpls_egress_label_t * label_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_traverse_async(int unit, bcm_mpls_tunnel_initiator_traverse_info_t * additional_info, bcm_mpls_tunnel_initiator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_label_counter_id_detach_async(int unit, bcm_if_t intf_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_label_counter_id_num_get_async(int unit, bcm_if_t intf_id, int * num_counters, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_label_counter_id_stat_get_async(int unit, bcm_if_t intf_id, uint32 stat_counter_id, bcm_mpls_stat_info_t * stat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_label_counter_id_stat_set_async(int unit, bcm_if_t intf_id, uint32 stat_counter_id, bcm_mpls_stat_info_t * stat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_label_counter_id_stat_sync_get_async(int unit, bcm_if_t intf_id, uint32 stat_counter_id, bcm_mpls_stat_info_t * stat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_stat_attach_async(int unit, bcm_if_t intf_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_stat_counter_get_async(int unit, bcm_if_t intf_id, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_stat_counter_set_async(int unit, bcm_if_t intf_id, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_stat_counter_sync_get_async(int unit, bcm_if_t intf_id, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_stat_detach_async(int unit, bcm_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_stat_id_get_async(int unit, bcm_if_t intf_id, bcm_mpls_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_add_async(int unit, bcm_mpls_tunnel_switch_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_create_async(int unit, bcm_mpls_tunnel_switch_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_delete_async(int unit, bcm_mpls_tunnel_switch_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_get_async(int unit, bcm_mpls_tunnel_switch_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_traverse_async(int unit, bcm_mpls_tunnel_switch_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_id_create_async(int unit, bcm_mpls_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_id_destroy_async(int unit, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_id_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_id_get_async(int unit, bcm_vpn_t vpn, bcm_mpls_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_traverse_async(int unit, bcm_mpls_vpn_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_multicast_add_async(int unit, bcm_multicast_t group, uint32 flags, int nof_replications, bcm_multicast_replication_t * rep_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_control_get_async(int unit, bcm_multicast_t group, bcm_multicast_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_control_set_async(int unit, bcm_multicast_t group, bcm_multicast_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_create_async(int unit, uint32 flags, bcm_multicast_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_delete_async(int unit, bcm_multicast_t group, uint32 flags, int nof_replications, bcm_multicast_replication_t * rep_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_destroy_async(int unit, bcm_multicast_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_add_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_delete_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_delete_all_async(int unit, bcm_multicast_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_get_async(int unit, bcm_multicast_t group, int port_max, bcm_gport_t * port_array, bcm_if_t * encap_id_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_object_encap_get_async(int unit, bcm_multicast_t group, bcm_if_t intf, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_set_async(int unit, bcm_multicast_t group, int port_count, bcm_gport_t * port_array, bcm_if_t * encap_id_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_subscriber_add_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcm_gport_t subscriber_queue, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_subscriber_delete_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcm_gport_t subscriber_queue, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_subscriber_get_async(int unit, bcm_multicast_t group, int port_max, bcm_gport_t * port_array, bcm_if_t * encap_id_array, bcm_gport_t * subscriber_queue_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_subscriber_qos_map_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t subscriber_queue, int * qos_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_subscriber_qos_map_set_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t subscriber_queue, int qos_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_subscriber_set_async(int unit, bcm_multicast_t group, int port_count, bcm_gport_t * port_array, bcm_if_t * encap_id_array, bcm_gport_t * subscriber_queue_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_encap_create_async(int unit, bcm_multicast_encap_t * mc_encap, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_encap_destroy_async(int unit, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_encap_extension_create_async(int unit, uint32 flags, bcm_if_t * multicast_replication_index, int encap_extension_count, bcm_if_t * encap_extension_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_encap_extension_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_encap_extension_destroy_async(int unit, uint32 flags, bcm_if_t multicast_replication_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_encap_extension_get_async(int unit, uint32 flags, bcm_if_t multicast_replication_index, int encap_max, bcm_if_t * encap_extension_array, int * encap_extension_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_encap_extension_traverse_async(int unit, bcm_multicast_encap_extension_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_encap_get_async(int unit, bcm_if_t encap_id, bcm_multicast_encap_t * mc_encap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_extender_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t extender_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_fabric_distribution_get_async(int unit, bcm_multicast_t group, bcm_fabric_distribution_t * ds_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_fabric_distribution_set_async(int unit, bcm_multicast_t group, bcm_fabric_distribution_t ds_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_get_async(int unit, bcm_multicast_t group, uint32 flags, int replication_max, bcm_multicast_replication_t * out_rep_array, int * rep_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_group_destroy_async(int unit, uint32 flags, bcm_multicast_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_group_free_range_get_async(int unit, uint32 type_flag, bcm_multicast_t * group_min, bcm_multicast_t * group_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_group_get_async(int unit, bcm_multicast_t group, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_group_is_free_async(int unit, bcm_multicast_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_group_traverse_async(int unit, bcm_multicast_group_traverse_cb_t trav_fn, uint32 flags, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_ingress_add_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_ingress_delete_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_ingress_delete_all_async(int unit, bcm_multicast_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_ingress_get_async(int unit, bcm_multicast_t group, int port_max, bcm_gport_t * port_array, bcm_if_t * encap_id_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_ingress_set_async(int unit, bcm_multicast_t group, int port_count, bcm_gport_t * port_array, bcm_if_t * encap_id_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_l2_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_vlan_t vlan, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_l2gre_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t l2gre_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_l3_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t intf, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_mac_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t mac_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_mim_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t mim_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_multi_alloc_async(int unit, bcm_multicast_multi_info_t mc_multi_info, bcm_multicast_t * base_mc_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_multi_free_async(int unit, bcm_multicast_t base_mc_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_niv_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t niv_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_repl_get_async(int unit, int index, bcm_port_t port, bcm_vlan_vector_t vlan_vec, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_repl_set_async(int unit, int mc_index, bcm_port_t port, bcm_vlan_vector_t vlan_vec, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_set_async(int unit, bcm_multicast_t group, uint32 flags, int nof_replications, bcm_multicast_replication_t * rep_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_stat_control_get_async(int unit, bcm_core_t core_id, uint32 flags, int command_id, bcm_multicast_stat_control_type_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_stat_control_set_async(int unit, bcm_core_t core_id, uint32 flags, int command_id, bcm_multicast_stat_control_type_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_subport_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t subport, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_trill_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t intf, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_vlan_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t vlan_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_vpls_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t mpls_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_vxlan_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t vxlan_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_wlan_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t wlan_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_niv_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_egress_add_async(int unit, bcm_gport_t niv_port, bcm_niv_egress_t * niv_egress, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_egress_delete_async(int unit, bcm_gport_t niv_port, bcm_niv_egress_t * niv_egress, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_egress_delete_all_async(int unit, bcm_gport_t niv_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_egress_get_async(int unit, bcm_gport_t niv_port, int array_size, bcm_niv_egress_t * niv_egress_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_egress_set_async(int unit, bcm_gport_t niv_port, int array_size, bcm_niv_egress_t * niv_egress_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_forward_add_async(int unit, bcm_niv_forward_t * iv_fwd_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_forward_delete_async(int unit, bcm_niv_forward_t * iv_fwd_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_forward_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_forward_get_async(int unit, bcm_niv_forward_t * iv_fwd_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_forward_traverse_async(int unit, bcm_niv_forward_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_port_add_async(int unit, bcm_niv_port_t * niv_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_port_delete_async(int unit, bcm_gport_t niv_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_port_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_port_get_async(int unit, bcm_niv_port_t * niv_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_port_traverse_async(int unit, bcm_niv_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_oam_ais_add_async(int unit, bcm_oam_ais_t * ais_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_ais_delete_async(int unit, bcm_oam_ais_t * ais_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_ais_get_async(int unit, bcm_oam_ais_t * ais_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_control_get_async(int unit, bcm_oam_control_type_t type, uint64 * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_control_indexed_get_async(int unit, bcm_oam_control_key_t key, uint64 * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_control_indexed_set_async(int unit, bcm_oam_control_key_t key, uint64 arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_control_set_async(int unit, bcm_oam_control_type_t type, uint64 arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_csf_add_async(int unit, bcm_oam_csf_t * csf_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_csf_delete_async(int unit, bcm_oam_csf_t * csf_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_csf_get_async(int unit, bcm_oam_csf_t * csf_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_delay_add_async(int unit, bcm_oam_delay_t * delay_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_delay_delete_async(int unit, bcm_oam_delay_t * delay_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_delay_get_async(int unit, bcm_oam_delay_t * delay_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_action_set_async(int unit, bcm_oam_endpoint_t id, bcm_oam_endpoint_action_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_create_async(int unit, bcm_oam_endpoint_info_t * endpoint_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_destroy_async(int unit, bcm_oam_endpoint_t endpoint, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_destroy_all_async(int unit, bcm_oam_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_egress_intf_egress_attach_async(int unit, bcm_oam_endpoint_t endpoint_id, bcm_if_t egress_intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_egress_intf_egress_attach_get_async(int unit, bcm_oam_endpoint_t endpoint_id, int max_count, bcm_if_t * egress_intf, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_egress_intf_egress_detach_async(int unit, bcm_oam_endpoint_t endpoint_id, bcm_if_t egress_intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_faults_multi_get_async(int unit, uint32 flags, bcm_oam_protocol_type_t endpoint_protocol, uint32 max_endpoints, bcm_oam_endpoint_fault_t * faults, uint32 * endpoint_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_get_async(int unit, bcm_oam_endpoint_t endpoint, bcm_oam_endpoint_info_t * endpoint_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_gport_egress_attach_async(int unit, bcm_oam_endpoint_t endpoint, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_gport_egress_attach_get_async(int unit, bcm_oam_endpoint_t endpoint, int max_count, bcm_gport_t * gport, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_gport_egress_detach_async(int unit, bcm_oam_endpoint_t endpoint, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_traverse_async(int unit, bcm_oam_group_t group, bcm_oam_endpoint_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_event_register_async(int unit, bcm_oam_event_types_t event_types, bcm_oam_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_event_unregister_async(int unit, bcm_oam_event_types_t event_types, bcm_oam_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_group_create_async(int unit, bcm_oam_group_info_t * group_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_group_destroy_async(int unit, bcm_oam_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_group_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_group_get_async(int unit, bcm_oam_group_t group, bcm_oam_group_info_t * group_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_group_traverse_async(int unit, bcm_oam_group_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_lif_profile_get_async(int unit, uint32 flags, bcm_gport_t gport, bcm_oam_profile_t * ingress_oam_profile, bcm_oam_profile_t * egress_oam_profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_lif_profile_set_async(int unit, uint32 flags, bcm_gport_t gport, bcm_oam_profile_t ingress_oam_profile, bcm_oam_profile_t egress_oam_profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_lookup_enable_get_async(int unit, bcm_oam_lookup_type_t type, bcm_oam_conditions_t * condition, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_lookup_enable_multi_set_async(int unit, bcm_oam_lookup_types_t types, bcm_oam_conditions_t conditions, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_lookup_enable_set_async(int unit, bcm_oam_lookup_type_t type, bcm_oam_condition_t condition, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_loopback_add_async(int unit, bcm_oam_loopback_t * loopback_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_loopback_delete_async(int unit, bcm_oam_loopback_t * loopback_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_loopback_get_async(int unit, bcm_oam_loopback_t * loopback_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_loss_add_async(int unit, bcm_oam_loss_t * loss_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_loss_delete_async(int unit, bcm_oam_loss_t * loss_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_loss_get_async(int unit, bcm_oam_loss_t * loss_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_mpls_tp_channel_type_rx_delete_async(int unit, bcm_oam_mpls_tp_channel_type_t channel_type, int num_values, int * list_of_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_mpls_tp_channel_type_rx_get_async(int unit, bcm_oam_mpls_tp_channel_type_t channel_type, int num_values, int * list_of_values, int * value_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_mpls_tp_channel_type_rx_set_async(int unit, bcm_oam_mpls_tp_channel_type_t channel_type, int num_values, int * list_of_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_mpls_tp_channel_type_tx_delete_async(int unit, bcm_oam_mpls_tp_channel_type_t channel_type, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_mpls_tp_channel_type_tx_get_async(int unit, bcm_oam_mpls_tp_channel_type_t channel_type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_mpls_tp_channel_type_tx_set_async(int unit, bcm_oam_mpls_tp_channel_type_t channel_type, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_opcode_group_get_async(int unit, bcm_oam_protocol_type_t protocol, bcm_oam_opcode_t opcode, uint8 * opcode_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_opcode_group_set_async(int unit, bcm_oam_protocol_type_t protocol, bcm_oam_opcodes_t opcodes, uint8 opcode_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_opcode_map_get_async(int unit, int opcode, int * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_opcode_map_set_async(int unit, int opcode, int profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_opcodes_count_profile_create_async(int unit, uint8 * lm_count_profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_opcodes_count_profile_delete_async(int unit, uint8 lm_count_profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_opcodes_count_profile_get_async(int unit, uint8 lm_count_profile, uint8 count_enable, bcm_oam_opcodes_t * opcodes_bitmap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_opcodes_count_profile_set_async(int unit, uint8 lm_count_profile, uint8 count_enable, bcm_oam_opcodes_t * opcodes_bitmap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_performance_event_register_async(int unit, bcm_oam_event_types_t event_types, bcm_oam_performance_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_performance_event_unregister_async(int unit, bcm_oam_event_types_t event_types, bcm_oam_performance_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pm_event_register_async(int unit, bcm_oam_event_types_t event_types, bcm_oam_pm_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pm_event_unregister_async(int unit, bcm_oam_event_types_t event_types, bcm_oam_pm_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pm_profile_attach_async(int unit, bcm_oam_endpoint_t endpoint_id, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pm_profile_attach_get_async(int unit, bcm_oam_endpoint_t endpoint_id, int * profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pm_profile_create_async(int unit, bcm_oam_pm_profile_info_t * profile_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pm_profile_delete_async(int unit, bcm_oam_pm_profile_t profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pm_profile_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pm_profile_detach_async(int unit, bcm_oam_endpoint_t endpoint_id, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pm_profile_get_async(int unit, bcm_oam_pm_profile_info_t * profile_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pm_profile_traverse_async(int unit, bcm_oam_pm_profile_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pm_raw_data_read_done_async(int unit, bcm_oam_event_types_t event_types, uint32 read_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pm_stats_get_async(int unit, bcm_oam_endpoint_t endpoint_id, bcm_oam_pm_stats_t * stats_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_profile_action_get_async(int unit, uint32 flags, bcm_oam_profile_t profile_id, bcm_oam_action_key_t * oam_action_key, bcm_oam_action_result_t * oam_action_result, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_profile_action_set_async(int unit, uint32 flags, bcm_oam_profile_t profile_id, bcm_oam_action_key_t * oam_action_key, bcm_oam_action_result_t * oam_action_result, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_profile_create_async(int unit, uint32 flags, bcm_oam_profile_type_t oam_profile_type, bcm_oam_profile_t * profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_profile_delete_async(int unit, uint32 flags, bcm_oam_profile_t profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_profile_id_get_by_type_async(int unit, uint8 profile_id, bcm_oam_profile_type_t oam_profile_type, uint32 * flags, bcm_oam_profile_t * enc_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_protection_packet_header_get_async(int unit, bcm_pkt_blk_t * packet_header, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_protection_packet_header_set_async(int unit, bcm_pkt_blk_t * packet_header, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_psc_add_async(int unit, bcm_oam_psc_t * psc_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_psc_delete_async(int unit, bcm_oam_psc_t * psc_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_psc_get_async(int unit, bcm_oam_psc_t * psc_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pw_status_add_async(int unit, bcm_oam_pw_status_t * pw_status_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pw_status_delete_async(int unit, bcm_oam_pw_status_t * pw_status_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pw_status_get_async(int unit, bcm_oam_pw_status_t * pw_status_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_reflector_encap_create_async(int unit, uint32 flags, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_reflector_encap_destroy_async(int unit, uint32 flags, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_sd_sf_detection_add_async(int unit, bcm_oam_sd_sf_detection_t * sd_sf_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_sd_sf_detection_delete_async(int unit, bcm_oam_sd_sf_detection_t * sd_sf_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_sd_sf_detection_get_async(int unit, bcm_oam_sd_sf_detection_t * sd_sf_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_tod_leap_control_get_async(int unit, bcm_oam_timestamp_format_t ts_format, bcm_oam_tod_leap_control_t * leap_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_tod_leap_control_set_async(int unit, bcm_oam_timestamp_format_t ts_format, bcm_oam_tod_leap_control_t leap_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_trunk_ports_add_async(int unit, bcm_gport_t trunk_gport, int max_ports, bcm_gport_t * port_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_trunk_ports_delete_async(int unit, bcm_gport_t trunk_gport, int max_ports, bcm_gport_t * port_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_trunk_ports_get_async(int unit, bcm_gport_t trunk_gport, int max_ports, bcm_gport_t * port_arr, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_tst_rx_add_async(int unit, bcm_oam_tst_rx_t * tst_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_tst_rx_delete_async(int unit, bcm_oam_tst_rx_t * tst_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_tst_rx_get_async(int unit, bcm_oam_tst_rx_t * tst_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_tst_tx_add_async(int unit, bcm_oam_tst_tx_t * tst_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_tst_tx_delete_async(int unit, bcm_oam_tst_tx_t * tst_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_tst_tx_get_async(int unit, bcm_oam_tst_tx_t * tst_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_upmep_cosq_get_async(int unit, bcm_oam_upmep_pdu_type_t upmep_pdu_type, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_upmep_cosq_set_async(int unit, bcm_oam_upmep_pdu_type_t upmep_pdu_type, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_y_1711_alarm_add_async(int unit, bcm_oam_y_1711_alarm_t * alarm_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_y_1711_alarm_delete_async(int unit, bcm_oam_y_1711_alarm_t * alarm_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_y_1711_alarm_get_async(int unit, bcm_oam_y_1711_alarm_t * alarm_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_obm_cb_register_async(int unit, bcm_obm_callback_fn fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_obm_cb_unregister_async(int unit, bcm_obm_callback_fn fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_obm_port_max_usage_mode_get_async(int unit, bcm_port_t port, bcm_obm_max_watermark_mode_t * obm_wm_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_obm_port_max_usage_mode_set_async(int unit, bcm_port_t port, bcm_obm_max_watermark_mode_t obm_wm_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_obm_port_pri_traffic_class_mapping_get_async(int unit, bcm_port_t port, bcm_obm_lookup_priority_type_t piority_type, int priority, bcm_obm_traffic_class_t * obm_tc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_obm_port_pri_traffic_class_mapping_set_async(int unit, bcm_port_t port, bcm_obm_lookup_priority_type_t piority_type, int priority, bcm_obm_traffic_class_t obm_tc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_obm_traffic_class_pfc_priority_mapping_get_async(int unit, bcm_port_t port, bcm_obm_traffic_class_t obm_traffic_class, int max_pri_count, int * priority_list, int * pri_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_obm_traffic_class_pfc_priority_mapping_set_async(int unit, bcm_port_t port, bcm_obm_traffic_class_t obm_traffic_class, int max_pri_count, int * priority_list, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_fc_rx_config_get_async(int unit, bcm_oob_fc_rx_intf_id_t intf_id, bcm_oob_fc_rx_config_t * config, int array_max, bcm_gport_t * gport_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_fc_rx_config_set_async(int unit, bcm_oob_fc_rx_intf_id_t intf_id, bcm_oob_fc_rx_config_t * config, int array_count, bcm_gport_t * gport_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_fc_rx_port_offset_get_async(int unit, bcm_oob_fc_rx_intf_id_t intf_id, bcm_gport_t gport, uint32 * offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_fc_rx_port_tc_mapping_get_async(int unit, bcm_oob_fc_rx_intf_id_t intf_id, bcm_gport_t gport, uint32 tc, uint32 * pri_bmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_fc_rx_port_tc_mapping_multi_get_async(int unit, bcm_oob_fc_rx_intf_id_t intf_id, bcm_gport_t gport, int array_max, uint32 * tc, uint32 * pri_bmp, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_fc_rx_port_tc_mapping_multi_set_async(int unit, bcm_oob_fc_rx_intf_id_t intf_id, bcm_gport_t gport, int array_count, uint32 * tc, uint32 * pri_bmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_fc_rx_port_tc_mapping_set_async(int unit, bcm_oob_fc_rx_intf_id_t intf_id, bcm_gport_t gport, uint32 tc, uint32 pri_bmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_fc_tx_config_get_async(int unit, bcm_oob_fc_tx_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_fc_tx_config_set_async(int unit, bcm_oob_fc_tx_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_fc_tx_info_get_async(int unit, bcm_oob_fc_tx_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_fc_tx_port_mapping_get_async(int unit, int max_count, int * port_array, int * oob_port_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_fc_tx_port_mapping_set_async(int unit, int count, int * port_array, int * oob_port_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_fc_tx_queue_profile_get_async(int unit, int profile_id, int max_count, bcm_oob_fc_tx_queue_config_t * config, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_fc_tx_queue_profile_set_async(int unit, int profile_id, int count, bcm_oob_fc_tx_queue_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_stats_config_get_async(int unit, bcm_oob_stats_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_stats_config_set_async(int unit, bcm_oob_stats_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_stats_pool_mapping_get_async(int unit, int offset, uint8 * dir, bcm_service_pool_id_t * pool, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_stats_pool_mapping_multi_get_async(int unit, int array_max, int * offset_array, uint8 * dir_array, bcm_service_pool_id_t * pool_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_stats_pool_mapping_multi_set_async(int unit, int array_count, int * offset_array, uint8 * dir_array, bcm_service_pool_id_t * pool_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_stats_pool_mapping_set_async(int unit, int offset, uint8 dir, bcm_service_pool_id_t pool, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_stats_queue_mapping_get_async(int unit, int offset, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_stats_queue_mapping_multi_get_async(int unit, int array_max, int * offset_array, bcm_gport_t * gport_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_stats_queue_mapping_multi_set_async(int unit, int array_count, int * offset_array, bcm_gport_t * gport_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oob_stats_queue_mapping_set_async(int unit, int offset, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_alloc_async(int unit, int size, uint32 flags, bcm_pkt_t ** pkt_buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_blk_alloc_async(int unit, int count, int size, uint32 flags, bcm_pkt_t *** packet_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_blk_free_async(int unit, bcm_pkt_t ** pkt, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_byte_index_async(bcm_pkt_t * pkt, int n, int * len, int * blk_idx, uint8 ** location, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_clear_async(int unit, bcm_pkt_t * pkt, bcm_pkt_blk_t * blks, int blk_count, uint32 flags, bcm_pkt_t ** pkt_buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_ecmp_grp_set_async(int unit, bcm_pkt_t * pkt, bcm_if_t ecmp_group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_ecmp_member_set_async(int unit, bcm_pkt_t * pkt, bcm_if_t ecmp_group_id, bcm_if_t ecmp_member_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_flags_init_async(int unit, bcm_pkt_t * pkt, uint32 init_flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_flags_len_setup_async(int unit, bcm_pkt_t * pkt, int alloc_bytes, int payload_len, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_free_async(int unit, bcm_pkt_t * pkt, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_memcpy_async(bcm_pkt_t * pkt, int dest_byte, uint8 * src, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_nexthop_set_async(int unit, bcm_pkt_t * pkt, bcm_if_t nexthop_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_rx_alloc_async(int unit, int len, bcm_pkt_t ** pkt_buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_rx_free_async(int unit, bcm_pkt_t * pkt, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_alloc_async(int unit, uint32 max_size, uint32 flags, bcm_pktio_pkt_t ** packet, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_claim_async(int unit, bcm_pktio_pkt_t * pkt, bcm_pktio_pkt_t ** new_pkt, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_filter_create_async(int unit, bcm_pktio_filter_t * filter, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_filter_destroy_async(int unit, int filter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_filter_get_async(int unit, int filter_id, bcm_pktio_filter_t * filter, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_filter_traverse_async(int unit, bcm_pktio_filter_traverse_cb_f cb_func, void * cb_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_free_async(int unit, bcm_pktio_pkt_t * packet, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_netif_create_async(int unit, bcm_pktio_netif_t * netif, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_netif_destroy_async(int unit, int netif_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_netif_get_async(int unit, int netif_id, bcm_pktio_netif_t * netif, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_netif_link_status_set_async(int unit, int netif_id, int status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_netif_traverse_async(int unit, bcm_pktio_netif_traverse_cb_f cb_func, void * cb_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_pkt_data_get_async(int unit, bcm_pktio_pkt_t * packet, void ** data, uint32 * length, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_pmd_fid_support_get_async(int unit, bcm_pktio_fid_support_t * support, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_pmd_field_get_async(int unit, bcm_pktio_pkt_t * packet, bcm_pktio_pmd_type_t type, int fid, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_pmd_field_set_async(int unit, bcm_pktio_pkt_t * packet, bcm_pktio_pmd_type_t type, int fid, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_pmd_pkt_format_get_async(int unit, int array_size, uint32 * match_id_array, int * count, bcm_pktio_bitmap_t * pkt_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_pmd_reasons_get_async(int unit, bcm_pktio_pkt_t * packet, bcm_pktio_reasons_t * reasons, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_pmd_set_async(int unit, bcm_pktio_pkt_t * packet, bcm_pktio_txpmd_t * txpmd, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_pull_async(int unit, bcm_pktio_pkt_t * packet, uint32 len, void ** data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_push_async(int unit, bcm_pktio_pkt_t * packet, uint32 len, void ** data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_put_async(int unit, bcm_pktio_pkt_t * packet, uint32 len, void ** data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_raw_pmd_fid_support_get_async(int unit, bcm_pktio_pmd_t * pmd, bcm_pktio_fid_support_t * support, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_raw_pmd_field_get_async(int unit, bcm_pktio_pmd_t * pmd, bcm_pktio_pmd_type_t type, int fid, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_raw_pmd_field_set_async(int unit, bcm_pktio_pmd_t * pmd, bcm_pktio_pmd_type_t type, int fid, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_raw_pmd_reasons_get_async(int unit, bcm_pktio_pmd_t * pmd, bcm_pktio_reasons_t * reasons, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_raw_pmd_reasons_set_async(int unit, bcm_pktio_pmd_t * pmd, bcm_pktio_reasons_t * reasons, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_reserve_async(int unit, bcm_pktio_pkt_t * packet, uint32 len, void ** data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_rx_register_async(int unit, const char * name, bcm_pktio_rx_cb_f callback, uint8 priority, void * cookie, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_rx_unregister_async(int unit, bcm_pktio_rx_cb_f callback, uint8 priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_trace_counter_get_async(int unit, bcm_pktio_trace_data_t * trace_data, bcm_pktio_bitmap_t * bitmap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_trace_data_collect_async(int unit, bcm_pktio_trace_pkt_t * trace_pkt, bcm_pktio_trace_data_t * trace_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_trace_dop_data_collect_async(int unit, bcm_port_t port, uint32 dop_id, bcm_pktio_trace_data_t * trace_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_trace_drop_reasons_get_async(int unit, bcm_pktio_trace_data_t * trace_data, bcm_pktio_bitmap_t * bitmap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_trace_field_get_async(int unit, bcm_pktio_trace_data_t * trace_data, int fid, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_trace_tx_async(int unit, bcm_pktio_trace_pkt_t * trace_pkt, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_trim_async(int unit, bcm_pktio_pkt_t * packet, uint32 len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pktio_tx_async(int unit, bcm_pktio_pkt_t * packet, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_action_add_async(int unit, uint32 action_id, bcm_policer_action_t action, uint32 param0, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_action_attach_async(int unit, bcm_policer_t policer_id, uint32 action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_action_attach_get_async(int unit, bcm_policer_t policer_id, uint32 * action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_action_create_async(int unit, uint32 * action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_action_destroy_async(int unit, uint32 action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_action_detach_async(int unit, bcm_policer_t policer_id, uint32 action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_action_get_async(int unit, uint32 action_id, bcm_policer_action_t action, uint32 * param0, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_aggregate_group_create_async(int unit, bcm_policer_aggregate_group_info_t * info, bcm_policer_t * policer_id, int * npolicers, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_color_decision_get_async(int unit, bcm_policer_color_decision_t * policer_color_decision, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_color_decision_set_async(int unit, bcm_policer_color_decision_t * policer_color_decision, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_color_resolution_get_async(int unit, bcm_policer_color_resolution_t * policer_color_resolution, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_color_resolution_set_async(int unit, bcm_policer_color_resolution_t * policer_color_resolution, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_control_get_async(int unit, int flags, int policer_database_handle, bcm_policer_control_type_t type, uint32 * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_control_set_async(int unit, int flags, int policer_database_handle, bcm_policer_control_type_t type, uint32 arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_create_async(int unit, bcm_policer_config_t * pol_cfg, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_custom_group_create_async(int unit, uint32 flags, uint32 mode_id, bcm_policer_t macro_flow_policer_id, bcm_policer_t * policer_id, uint32 * npolicers, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_custom_group_id_copy_async(int unit, bcm_policer_group_info_t * old_policer_group_info, bcm_policer_group_info_t * new_policer_group_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_custom_group_id_create_async(int unit, uint32 flags, uint32 mode_id, bcm_policer_t macro_flow_policer_id, bcm_policer_group_info_t * policer_group_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_database_create_async(int unit, int flags, int policer_database_handle, bcm_policer_database_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_database_destroy_async(int unit, int flags, int policer_database_handle, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_database_enable_get_async(int unit, int flags, int policer_database_handle, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_database_enable_set_async(int unit, int flags, int policer_database_handle, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_destroy_async(int unit, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_engine_database_attach_async(int unit, int flags, bcm_policer_engine_t * engine, bcm_policer_database_attach_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_engine_database_detach_async(int unit, int flags, bcm_policer_engine_t * engine, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_engine_database_get_async(int unit, int flags, bcm_policer_engine_t * engine, bcm_policer_database_attach_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_envelop_create_async(int unit, uint32 flag, bcm_policer_t macro_flow_policer_id, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_envelop_group_create_async(int unit, uint32 flag, bcm_policer_group_mode_t mode, bcm_policer_t macro_flow_policer_id, bcm_policer_t * policer_id, int * npolicers, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_expansion_groups_get_async(int unit, int flags, bcm_core_t core_id, bcm_policer_expansion_group_t * expansion_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_expansion_groups_set_async(int unit, int flags, bcm_core_t core_id, bcm_policer_expansion_group_t * expansion_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_get_async(int unit, bcm_policer_t policer_id, bcm_policer_config_t * pol_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_global_meter_config_get_async(int unit, bcm_policer_global_meter_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_global_meter_config_set_async(int unit, bcm_policer_global_meter_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_group_create_async(int unit, bcm_policer_group_mode_t mode, bcm_policer_t * policer_id, int * npolicers, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_group_create_with_map_async(int unit, bcm_policer_group_mode_t mode, bcm_policer_map_t * offset_map, bcm_policer_t * policer_id, int * num_policers, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_group_get_async(int unit, bcm_policer_t base_policer_id, int member_max, bcm_policer_t * member_array, int * member_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_group_mode_id_create_async(int unit, uint32 flags, bcm_policer_group_mode_type_t type, uint32 total_policers, uint32 num_selectors, bcm_policer_group_mode_attr_selector_t * attr_selectors, uint32 * mode_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_group_mode_id_destroy_async(int unit, uint32 mode_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_group_mode_id_get_async(int unit, uint32 mode_id, uint32 num_selectors, uint32 * flags, bcm_policer_group_mode_type_t * type, uint32 * total_policers, bcm_policer_group_mode_attr_selector_t * attr_selectors, uint32 * actual_num_selectors, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_packet_counter_get32_async(int unit, bcm_policer_t policer_id, uint32 * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_packet_reset_counter_get32_async(int unit, bcm_policer_t policer_id, uint32 * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_primary_color_resolution_get_async(int unit, int flags, bcm_policer_primary_color_resolution_key_t * key, bcm_policer_primary_color_resolution_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_primary_color_resolution_set_async(int unit, int flags, bcm_policer_primary_color_resolution_key_t * key, bcm_policer_primary_color_resolution_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_set_async(int unit, bcm_policer_t policer_id, bcm_policer_config_t * pol_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_enable_get_async(int unit, bcm_policer_t policer_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_enable_set_async(int unit, bcm_policer_t policer_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_get_async(int unit, bcm_policer_t policer_id, bcm_cos_t int_pri, bcm_policer_stat_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_get32_async(int unit, bcm_policer_t policer_id, bcm_cos_t int_pri, bcm_policer_stat_t stat, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_set_async(int unit, bcm_policer_t policer_id, bcm_cos_t int_pri, bcm_policer_stat_t stat, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_set32_async(int unit, bcm_policer_t policer_id, bcm_cos_t int_pri, bcm_policer_stat_t stat, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_traverse_async(int unit, bcm_policer_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_advert_get_async(int unit, bcm_port_t port, bcm_port_ability_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_advert_set_async(int unit, bcm_port_t port, bcm_port_ability_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_get_async(int unit, bcm_port_t port, bcm_port_abil_t * local_ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_local_get_async(int unit, bcm_port_t port, bcm_port_ability_t * local_ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_remote_get_async(int unit, bcm_port_t port, bcm_port_ability_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_add_async(int unit, bcm_port_t port, uint32 flags, bcm_port_interface_info_t * interface_info, bcm_port_mapping_info_t * mapping_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_advert_get_async(int unit, bcm_port_t port, bcm_port_abil_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_advert_remote_get_async(int unit, bcm_port_t port, bcm_port_abil_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_advert_set_async(int unit, bcm_port_t port, bcm_port_abil_t ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_autoneg_ability_advert_get_async(int unit, bcm_port_t port, int max_num_ability, bcm_port_speed_ability_t * abilities_array, int * actual_num_ability, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_autoneg_ability_advert_set_async(int unit, bcm_port_t port, int num_ability, bcm_port_speed_ability_t * abilities_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_autoneg_ability_remote_get_async(int unit, bcm_port_t port, int max_num_ability, bcm_port_speed_ability_t * abilities_array, int * actual_num_ability, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_autoneg_get_async(int unit, bcm_port_t port, int * autoneg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_autoneg_set_async(int unit, bcm_port_t port, int autoneg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_bpdu_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_bpdu_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_buffer_pbmp_get_async(int unit, int buffer_id, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_cable_diag_async(int unit, bcm_port_t port, bcm_port_cable_diag_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_cfi_color_get_async(int unit, bcm_port_t port, int cfi, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_cfi_color_set_async(int unit, bcm_port_t port, int cfi, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_class_get_async(int unit, bcm_port_t port, bcm_port_class_t pclass, uint32 * class_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_class_set_async(int unit, bcm_port_t port, bcm_port_class_t pclass, uint32 class_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_config_get_async(int unit, bcm_port_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_config_phy_oam_get_async(int unit, bcm_port_t port, bcm_port_config_phy_oam_t * conf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_config_phy_oam_set_async(int unit, bcm_port_t port, bcm_port_config_phy_oam_t * conf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_congestion_config_get_async(int unit, bcm_gport_t port, bcm_port_congestion_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_congestion_config_set_async(int unit, bcm_gport_t port, bcm_port_congestion_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_congestion_get_async(int unit, bcm_gport_t congestion_port, bcm_gport_t port, uint32 flags, int * channel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_congestion_set_async(int unit, bcm_gport_t congestion_port, bcm_gport_t port, uint32 flags, int channel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_control_get_async(int unit, bcm_port_t port, bcm_port_control_t type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_control_phy_oam_get_async(int unit, bcm_port_t port, bcm_port_control_phy_oam_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_control_phy_oam_set_async(int unit, bcm_port_t port, bcm_port_control_phy_oam_t type, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_control_phy_timesync_get_async(int unit, bcm_port_t port, bcm_port_control_phy_timesync_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_control_phy_timesync_set_async(int unit, bcm_port_t port, bcm_port_control_phy_timesync_t type, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_control_set_async(int unit, bcm_port_t port, bcm_port_control_t type, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_detach_async(int unit, bcm_pbmp_t pbmp, bcm_pbmp_t * detached, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_discard_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_discard_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_map_get_async(int unit, bcm_port_t port, int srccp, int * mapcp, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_map_mode_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_map_mode_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_map_set_async(int unit, bcm_port_t port, int srccp, int mapcp, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_unmap_get_async(int unit, bcm_port_t port, int internal_pri, bcm_color_t color, int * pkt_dscp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_unmap_set_async(int unit, bcm_port_t port, int internal_pri, bcm_color_t color, int pkt_dscp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dtag_mode_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dtag_mode_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_duplex_get_async(int unit, bcm_port_t port, int * duplex, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_duplex_set_async(int unit, bcm_port_t port, int duplex, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_e2efc_remote_module_enable_get_async(int unit, bcm_module_t remote_module, bcm_port_e2efc_mode_t mode, int * enable, bcm_port_e2efc_remote_module_config_t * e2efc_rmod_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_e2efc_remote_module_enable_set_async(int unit, bcm_module_t remote_module, bcm_port_e2efc_mode_t mode, int enable, bcm_port_e2efc_remote_module_config_t * e2efc_rmod_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_e2efc_remote_module_traverse_async(int unit, bcm_port_e2efc_remote_module_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_e2efc_remote_port_add_async(int unit, bcm_port_e2efc_remote_port_config_t * e2efc_rport_cfg, int * rport_handle_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_e2efc_remote_port_delete_async(int unit, int rport_handle_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_e2efc_remote_port_get_async(int unit, int rport_handle_id, bcm_port_e2efc_remote_port_config_t * e2efc_rport_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_e2efc_remote_port_set_async(int unit, int rport_handle_id, bcm_port_e2efc_remote_port_config_t * e2efc_rport_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_e2efc_remote_port_traverse_async(int unit, bcm_port_e2efc_remote_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_egress_get_async(int unit, bcm_port_t port, int modid, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_egress_set_async(int unit, bcm_port_t port, int modid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_config_get_async(int unit, bcm_gport_t gport, bcm_port_encap_config_t * encap_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_config_set_async(int unit, bcm_gport_t gport, bcm_port_encap_config_t * encap_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_local_get_async(int unit, bcm_gport_t gport, uint32 flags, int * encap_local_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_map_get_async(int unit, uint32 flags, bcm_if_t encap_id, bcm_gport_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_map_set_async(int unit, uint32 flags, bcm_if_t encap_id, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_extender_mapping_info_get_async(int unit, uint32 flags, bcm_port_extender_mapping_type_t type, bcm_port_extender_mapping_info_t * mapping_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_extender_mapping_info_set_async(int unit, uint32 flags, bcm_port_extender_mapping_type_t type, bcm_port_extender_mapping_info_t * mapping_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_fast_reboot_traffic_enable_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_fault_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_fdr_callback_register_async(int unit, bcm_port_fdr_handler_t f, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_fdr_callback_unregister_async(int unit, bcm_port_fdr_handler_t f, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_fdr_config_get_async(int unit, bcm_port_t port, bcm_port_fdr_config_t * fdr_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_fdr_config_set_async(int unit, bcm_port_t port, bcm_port_fdr_config_t * fdr_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_fdr_stats_get_async(int unit, bcm_port_t port, bcm_port_fdr_stats_t * fdr_stats, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_flow_clear_async(int unit, bcm_port_t src_port, int channel, bcm_port_t dest_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_flow_set_async(int unit, uint32 flags, bcm_port_t src_port, int channel, bcm_port_t dest_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_group_cal_active_get_async(int unit, bcm_gport_t gport, uint32 flags, bcm_port_flexe_group_cal_t * active_cal, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_group_cal_active_set_async(int unit, bcm_gport_t gport, uint32 flags, bcm_port_flexe_group_cal_t active_cal, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_group_cal_slots_get_async(int unit, bcm_gport_t gport, uint32 flags, bcm_port_flexe_group_cal_t calendar_id, int max_nof_slots, int * calendar_slots, int * actual_nof_slots, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_group_cal_slots_set_async(int unit, bcm_gport_t gport, uint32 flags, bcm_port_flexe_group_cal_t calendar_id, int nof_slots, int * calendar_slots, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_group_create_async(int unit, bcm_gport_t gport, uint32 flags, int nof_pcs, bcm_port_flexe_group_phy_info_t * phy_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_group_destroy_async(int unit, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_group_get_async(int unit, bcm_gport_t gport, uint32 flags, int max_nof_pcs, bcm_port_flexe_group_phy_info_t * phy_info, int * actual_nof_pcs, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_group_phy_add_async(int unit, bcm_gport_t gport, uint32 flags, bcm_port_flexe_group_phy_info_t * phy_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_group_phy_remove_async(int unit, bcm_gport_t gport, uint32 flags, bcm_port_flexe_group_phy_info_t * phy_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_oam_alarm_get_async(int unit, bcm_port_t port, uint32 flags, bcm_port_flexe_oam_alarm_t * alarms, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_oam_control_get_async(int unit, bcm_port_t port, uint32 flags, bcm_port_flexe_oam_control_type_t type, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_oam_control_set_async(int unit, bcm_port_t port, uint32 flags, bcm_port_flexe_oam_control_type_t type, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_oam_stat_get_async(int unit, bcm_port_t port, uint32 flags, bcm_port_flexe_oam_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_oh_alarm_get_async(int unit, bcm_gport_t gport, uint32 flags, bcm_port_flexe_oh_alarm_t * alarms, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_oh_get_async(int unit, bcm_gport_t gport, uint32 flags, bcm_port_flexe_oh_type_t type, int * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexe_oh_set_async(int unit, bcm_gport_t gport, uint32 flags, bcm_port_flexe_oh_type_t type, int val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexstate_attach_async(int unit, bcm_gport_t port, uint32 action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flexstate_detach_with_id_async(int unit, bcm_gport_t port, uint32 action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flood_block_get_async(int unit, bcm_port_t ingress_port, bcm_port_t egress_port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flood_block_set_async(int unit, bcm_port_t ingress_port, bcm_port_t egress_port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flood_group_get_async(int unit, bcm_gport_t port, uint32 flags, bcm_port_flood_group_t * flood_groups, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flood_group_set_async(int unit, bcm_gport_t port, uint32 flags, bcm_port_flood_group_t * flood_groups, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_dest_get_async(int unit, bcm_gport_t gport, bcm_port_dest_info_t * dest_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_dest_set_async(int unit, bcm_gport_t gport, bcm_port_dest_info_t * dest_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_forward_get_async(int unit, bcm_port_t port, bcm_port_t * egr_port, int * enabled, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_forward_mode_get_async(int unit, bcm_port_t port, bcm_port_t * egr_port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_forward_mode_set_async(int unit, bcm_port_t port, bcm_port_t egr_port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_forward_set_async(int unit, bcm_port_t port, bcm_port_t egr_port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_vlan_get_async(int unit, bcm_port_t port, bcm_vlan_t * vlan, int * pkt_prio, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_vlan_set_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int pkt_prio, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_frame_max_get_async(int unit, bcm_port_t port, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_frame_max_set_async(int unit, bcm_port_t port, int size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_port_interface_info_t * interface_info, bcm_port_mapping_info_t * mapping_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_gport_add_async(int unit, bcm_port_t local_port, bcm_gport_t modport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_gport_delete_async(int unit, bcm_port_t local_port, bcm_gport_t modport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_gport_delete_all_async(int unit, bcm_port_t local_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_gport_free_range_get_async(int unit, uint32 gport_type, bcm_gport_t * gport_min, bcm_gport_t * gport_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_gport_get_async(int unit, bcm_port_t port, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_gport_get_all_async(int unit, bcm_port_t local_port, int size, bcm_gport_t * gport_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_gport_is_free_async(int unit, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_group_range_get_async(int unit, bcm_port_group_type_t type, bcm_port_group_range_t * range, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ifg_get_async(int unit, bcm_port_t port, int speed, bcm_port_duplex_t duplex, int * bit_times, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ifg_set_async(int unit, bcm_port_t port, int speed, bcm_port_duplex_t duplex, int bit_times, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ifilter_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ifilter_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ilkn_lane_map_get_async(int unit, int flags, bcm_port_t port, int num_of_lanes, int * lanes, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ilkn_lane_map_set_async(int unit, int flags, bcm_port_t port, int num_of_lanes, int * lanes, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_info_get_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_info_restore_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_info_save_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_info_set_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ingress_tdm_failover_get_async(int unit, int flag, bcm_pbmp_t * tdm_enable_pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ingress_tdm_failover_set_async(int unit, int flag, bcm_pbmp_t tdm_enable_pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_inner_tpid_get_async(int unit, bcm_port_t port, uint16 * tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_inner_tpid_set_async(int unit, bcm_port_t port, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_interface_config_get_async(int unit, bcm_port_t port, bcm_port_interface_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_interface_config_set_async(int unit, bcm_port_t port, bcm_port_interface_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_interface_get_async(int unit, bcm_port_t port, bcm_port_if_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_interface_set_async(int unit, bcm_port_t port, bcm_port_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_internal_get_async(int unit, uint32 flags, int internal_ports_max, bcm_gport_t * internal_gport, int * internal_ports_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ipmc_modify_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ipmc_modify_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_jam_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_jam_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l2_interface_gport_get_async(int unit, int interface_id, bcm_gport_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l2_interface_id_get_async(int unit, bcm_gport_t port, int * interface_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l2_tunnel_payload_tpid_add_async(int unit, bcm_port_t port, uint16 tpid, int color_select, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l2_tunnel_payload_tpid_delete_async(int unit, bcm_port_t port, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l2_tunnel_payload_tpid_delete_all_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l2_tunnel_payload_tpid_get_async(int unit, bcm_port_t port, uint16 * tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l2_tunnel_payload_tpid_get_all_async(int unit, bcm_port_t port, int size, uint16 * tpid_array, int * color_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l2_tunnel_payload_tpid_set_async(int unit, bcm_port_t port, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_encapsulated_mtu_get_async(int unit, bcm_port_t port, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_encapsulated_mtu_set_async(int unit, bcm_port_t port, int size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_modify_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_modify_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_mtu_get_async(int unit, bcm_port_t port, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_mtu_set_async(int unit, bcm_port_t port, int size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_lane_to_serdes_map_get_async(int unit, int flags, int map_size, bcm_port_lane_to_serdes_map_t * serdes_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_lane_to_serdes_map_set_async(int unit, int flags, int map_size, bcm_port_lane_to_serdes_map_t * serdes_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_learn_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_learn_modify_async(int unit, bcm_port_t port, uint32 add, uint32 remove, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_learn_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_link_failed_clear_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_link_state_get_async(int unit, bcm_port_t port, uint32 flags, bcm_port_link_state_t * state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_link_status_get_async(int unit, bcm_port_t port, int * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_linkscan_get_async(int unit, bcm_port_t port, int * linkscan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_linkscan_set_async(int unit, bcm_port_t port, int linkscan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_local_get_async(int unit, bcm_gport_t gport, bcm_port_t * local_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_loopback_get_async(int unit, bcm_port_t port, int * loopback, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_loopback_set_async(int unit, bcm_port_t port, int loopback, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_management_packet_config_get_async(int unit, bcm_port_t port, bcm_port_management_packet_config_t * config_array, int max_config, int * config_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_management_packet_config_set_async(int unit, bcm_port_t port, bcm_port_management_packet_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_master_get_async(int unit, bcm_port_t port, int * ms, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_master_set_async(int unit, bcm_port_t port, int ms, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_match_add_async(int unit, bcm_gport_t port, bcm_port_match_info_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_match_delete_async(int unit, bcm_gport_t port, bcm_port_match_info_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_match_delete_all_async(int unit, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_match_multi_get_async(int unit, bcm_gport_t port, int size, bcm_port_match_info_t * match_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_match_replace_async(int unit, bcm_gport_t port, bcm_port_match_info_t * old_match, bcm_port_match_info_t * new_match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_match_set_async(int unit, bcm_gport_t port, int size, bcm_port_match_info_t * match_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_mdix_get_async(int unit, bcm_port_t port, bcm_port_mdix_t * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_mdix_set_async(int unit, bcm_port_t port, bcm_port_mdix_t mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_mdix_status_get_async(int unit, bcm_port_t port, bcm_port_mdix_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_config_get_async(int unit, bcm_port_t port, bcm_port_medium_t medium, bcm_phy_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_config_set_async(int unit, bcm_port_t port, bcm_port_medium_t medium, bcm_phy_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_get_async(int unit, bcm_port_t port, bcm_port_medium_t * medium, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_status_register_async(int unit, bcm_port_t port, bcm_port_medium_status_cb_t callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_status_unregister_async(int unit, bcm_port_t port, bcm_port_medium_status_cb_t callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_modid_egress_get_async(int unit, bcm_port_t port, bcm_module_t modid, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_modid_egress_set_async(int unit, bcm_port_t port, bcm_module_t modid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_modid_enable_get_async(int unit, bcm_port_t port, int modid, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_modid_enable_set_async(int unit, bcm_port_t port, int modid, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_nif_priority_get_async(int unit, bcm_gport_t local_port, uint32 flags, bcm_port_nif_prio_t * priority, bcm_pbmp_t * affected_ports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_nif_priority_set_async(int unit, bcm_gport_t local_port, uint32 flags, bcm_port_nif_prio_t * priority, bcm_pbmp_t * affected_ports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_addr_get_async(int unit, bcm_port_t port, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_addr_set_async(int unit, bcm_port_t port, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_get_async(int unit, bcm_port_t port, int * pause_tx, int * pause_rx, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_set_async(int unit, bcm_port_t port, int pause_tx, int pause_rx, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_sym_get_async(int unit, bcm_port_t port, int * pause, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_sym_set_async(int unit, bcm_port_t port, int pause, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pcs_lane_map_set_async(int unit, bcm_port_t port, uint32 flags, int num_map, bcm_port_lane_to_serdes_map_t * serdes_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pfm_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pfm_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_control_get_async(int unit, bcm_port_t port, bcm_port_phy_control_t type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_control_set_async(int unit, bcm_port_t port, bcm_port_phy_control_t type, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_drv_name_get_async(int unit, bcm_port_t port, char * name, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_fec_error_inject_get_async(int unit, bcm_port_t port, uint16 * error_control_map, bcm_port_phy_fec_error_mask_t * bit_error_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_fec_error_inject_set_async(int unit, bcm_port_t port, uint16 error_control_map, bcm_port_phy_fec_error_mask_t bit_error_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_firmware_set_async(int unit, bcm_port_t port, uint32 flags, int offset, uint8 * array, int length, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_get_async(int unit, bcm_port_t port, uint32 flags, uint32 phy_reg_addr, uint32 * phy_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_modify_async(int unit, bcm_port_t port, uint32 flags, uint32 phy_reg_addr, uint32 phy_data, uint32 phy_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_multi_get_async(int unit, bcm_port_t port, uint32 flags, uint32 dev_addr, uint32 offset, int max_size, uint8 * data, int * actual_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_reset_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_reset_register_async(int unit, bcm_port_t port, bcm_port_phy_reset_cb_t callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_reset_unregister_async(int unit, bcm_port_t port, bcm_port_phy_reset_cb_t callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_set_async(int unit, bcm_port_t port, uint32 flags, uint32 phy_reg_addr, uint32 phy_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_timesync_config_get_async(int unit, bcm_port_t port, bcm_port_phy_timesync_config_t * conf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_timesync_config_set_async(int unit, bcm_port_t port, bcm_port_phy_timesync_config_t * conf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_timesync_enhanced_capture_get_async(int unit, bcm_port_t port, bcm_port_phy_timesync_enhanced_capture_t * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_tx_get_async(int unit, bcm_port_t port, bcm_port_phy_tx_t * tx, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_tx_set_async(int unit, bcm_port_t port, bcm_port_phy_tx_t * tx, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pipe_pbmp_get_async(int unit, int pipe, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_policer_get_async(int unit, bcm_port_t port, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_policer_set_async(int unit, bcm_port_t port, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pon_info_get_async(int unit, bcm_port_t pon_port, bcm_port_pon_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pon_info_set_async(int unit, bcm_port_t pon_port, bcm_port_pon_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pon_tunnel_add_async(int unit, bcm_gport_t pon_port, uint32 flags, bcm_gport_t * tunnel_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pon_tunnel_map_get_async(int unit, bcm_gport_t pon_port, bcm_tunnel_id_t tunnel_id, bcm_gport_t * tunnel_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pon_tunnel_map_set_async(int unit, bcm_gport_t pon_port, bcm_tunnel_id_t tunnel_id, bcm_gport_t tunnel_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pon_tunnel_remove_async(int unit, bcm_gport_t tunnel_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_post_ber_proj_get_async(int unit, bcm_port_t port, bcm_port_ber_proj_params_t * ber_proj, int max_errcnt, bcm_port_ber_proj_analyzer_errcnt_t * errcnt_array, int * actual_errcnt, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_preemption_control_get_async(int unit, bcm_gport_t gport, bcm_port_preempt_control_t type, uint32 * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_preemption_control_set_async(int unit, bcm_gport_t gport, bcm_port_preempt_control_t type, uint32 arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_preemption_status_get_async(int unit, bcm_gport_t gport, bcm_port_preempt_status_t type, uint32 * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_priority_color_get_async(int unit, bcm_port_t port, int prio, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_priority_color_set_async(int unit, bcm_port_t port, int prio, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_priority_config_get_async(int unit, bcm_port_t port, bcm_port_prio_config_t * priority_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_priority_config_set_async(int unit, bcm_port_t port, bcm_port_prio_config_t * port_priority_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_priority_group_config_get_async(int unit, bcm_gport_t gport, int priority_group, bcm_port_priority_group_config_t * prigrp_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_priority_group_config_set_async(int unit, bcm_gport_t gport, int priority_group, bcm_port_priority_group_config_t * prigrp_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_priority_group_mapping_get_async(int unit, bcm_gport_t gport, int prio, int * priority_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_priority_group_mapping_set_async(int unit, bcm_gport_t gport, int prio, int priority_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_probe_async(int unit, bcm_pbmp_t pbmp, bcm_pbmp_t * okay_pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_protocol_vlan_add_async(int unit, bcm_port_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_protocol_vlan_delete_async(int unit, bcm_port_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_protocol_vlan_delete_all_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_queued_count_get_async(int unit, bcm_port_t port, uint32 * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_egress_get_async(int unit, bcm_port_t port, uint32 * kbits_sec, uint32 * kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_egress_pps_get_async(int unit, bcm_port_t port, uint32 * pps, uint32 * burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_egress_pps_set_async(int unit, bcm_port_t port, uint32 pps, uint32 burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_egress_set_async(int unit, bcm_port_t port, uint32 kbits_sec, uint32 kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_ingress_get_async(int unit, bcm_port_t port, uint32 * kbits_sec, uint32 * kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_ingress_set_async(int unit, bcm_port_t port, uint32 kbits_sec, uint32 kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_pause_get_async(int unit, bcm_port_t port, uint32 * kbits_pause, uint32 * kbits_resume, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_pause_set_async(int unit, bcm_port_t port, uint32 kbits_pause, uint32 kbits_resume, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_redirect_config_get_async(int unit, bcm_gport_t gport, bcm_port_redirect_config_t * redirect_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_redirect_config_set_async(int unit, bcm_gport_t port, bcm_port_redirect_config_t * redirect_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_remove_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_resource_default_get_async(int unit, bcm_gport_t port, uint32 flags, bcm_port_resource_t * resource, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_resource_get_async(int unit, bcm_gport_t port, bcm_port_resource_t * resource, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_resource_multi_set_async(int unit, int nport, bcm_port_resource_t * resource, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_resource_set_async(int unit, bcm_gport_t port, bcm_port_resource_t * resource, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_resource_speed_config_validate_async(int unit, bcm_port_resource_t * resource, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_resource_speed_get_async(int unit, bcm_gport_t port, bcm_port_resource_t * resource, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_resource_speed_multi_set_async(int unit, int nport, bcm_port_resource_t * resource, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_resource_speed_set_async(int unit, bcm_gport_t port, bcm_port_resource_t * resource, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_resource_traverse_async(int unit, bcm_port_resource_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rlm_config_get_async(int unit, bcm_port_t port, bcm_port_rlm_config_t * rlm_config, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rlm_config_set_async(int unit, bcm_port_t port, bcm_port_rlm_config_t * rlm_config, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rlm_status_get_async(int unit, bcm_port_t port, bcm_port_rlm_status_t * rlm_status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_sample_rate_get_async(int unit, bcm_port_t port, int * ingress_rate, int * egress_rate, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_sample_rate_set_async(int unit, bcm_port_t port, int ingress_rate, int egress_rate, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_selective_get_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_selective_set_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_speed_ability_local_get_async(int unit, bcm_port_t port, int max_num_ability, bcm_port_speed_ability_t * abilities_array, int * actual_num_ability, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_speed_get_async(int unit, bcm_port_t port, int * speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_speed_max_async(int unit, bcm_port_t port, int * speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_speed_set_async(int unit, bcm_port_t port, int speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_attach_async(int unit, bcm_gport_t port, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_counter_get_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_counter_set_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_counter_sync_get_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_detach_async(int unit, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_detach_with_id_async(int unit, bcm_gport_t port, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_enable_set_async(int unit, bcm_gport_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_get_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_get32_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_id_get_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_multi_get_async(int unit, bcm_gport_t port, int nstat, bcm_port_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_multi_get32_async(int unit, bcm_gport_t port, int nstat, bcm_port_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_multi_set_async(int unit, bcm_gport_t port, int nstat, bcm_port_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_multi_set32_async(int unit, bcm_gport_t port, int nstat, bcm_port_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_set_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_set32_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_sync_get_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_sync_get32_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stp_get_async(int unit, bcm_port_t port, int * state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stp_set_async(int unit, bcm_port_t port, int state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_subsidiary_ports_get_async(int unit, bcm_port_t port, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tgid_get_async(int unit, bcm_port_t port, int * tgid, int * psc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tgid_set_async(int unit, bcm_port_t port, int tgid, int psc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_timestamp_adjust_get_async(int unit, bcm_port_t port, bcm_port_timestamp_adjust_t * ts_adjust, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_timestamp_adjust_set_async(int unit, bcm_port_t port, bcm_port_timestamp_adjust_t * ts_adjust, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_timesync_config_get_async(int unit, bcm_port_t port, int array_size, bcm_port_timesync_config_t * config_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_timesync_config_set_async(int unit, bcm_port_t port, int config_count, bcm_port_timesync_config_t * config_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_timesync_tx_info_get_async(int unit, bcm_port_t port, bcm_port_timesync_tx_info_t * tx_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_add_async(int unit, bcm_port_t port, uint16 tpid, int color_select, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_class_create_async(int unit, uint32 flags, bcm_port_tag_struct_type_t tag_struct_type, bcm_port_tag_format_class_t * tag_format_class_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_class_destroy_async(int unit, uint32 flags, bcm_port_tag_format_class_t tag_format_class_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_class_get_async(int unit, bcm_port_tpid_class_t * tpid_class, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_class_set_async(int unit, bcm_port_tpid_class_t * tpid_class, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_delete_async(int unit, bcm_port_t port, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_delete_all_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_get_async(int unit, bcm_port_t port, uint16 * tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_get_all_async(int unit, bcm_port_t port, int size, uint16 * tpid_array, int * color_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_set_async(int unit, bcm_port_t port, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_trunk_index_get_async(int unit, bcm_port_t port, int * port_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_trunk_index_set_async(int unit, bcm_port_t port, int port_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_txpi_rxcdr_clk_get_async(int unit, bcm_port_t port, uint32 * txpi_clk, uint32 * rxcdr_clk, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_untagged_priority_get_async(int unit, bcm_port_t port, int * priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_untagged_priority_set_async(int unit, bcm_port_t port, int priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_untagged_vlan_get_async(int unit, bcm_port_t port, bcm_vlan_t * vid_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_untagged_vlan_set_async(int unit, bcm_port_t port, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_update_async(int unit, bcm_port_t port, int link, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_dscp_map_get_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int dscp, int * internal_pri, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_dscp_map_set_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int dscp, int internal_pri, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_inner_tag_get_async(int unit, bcm_port_t port, uint16 * inner_tag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_inner_tag_set_async(int unit, bcm_port_t port, uint16 inner_tag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_member_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_member_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_pri_map_get_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int pkt_pri, int cfi, int * internal_pri, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_pri_map_set_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int pkt_pri, int cfi, int internal_pri, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_map_get_async(int unit, bcm_port_t port, int pkt_pri, int cfi, int * internal_pri, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_map_set_async(int unit, bcm_port_t port, int pkt_pri, int cfi, int internal_pri, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_mapping_get_async(int unit, bcm_port_t port, bcm_vlan_t vid, int pkt_pri, int cfi, bcm_priority_mapping_t * pri_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_mapping_set_async(int unit, bcm_port_t port, bcm_vlan_t vid, int pkt_pri, int cfi, bcm_priority_mapping_t * pri_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_unmap_get_async(int unit, bcm_port_t port, int internal_pri, bcm_color_t color, int * pkt_pri, int * cfi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_unmap_set_async(int unit, bcm_port_t port, int internal_pri, bcm_color_t color, int pkt_pri, int cfi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_vector_get_async(int unit, bcm_gport_t port_id, bcm_vlan_vector_t vlan_vec, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_vector_set_async(int unit, bcm_gport_t port_id, bcm_vlan_vector_t vlan_vec, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_wide_data_get_async(int unit, bcm_gport_t gport, uint32 flags, uint64 * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_wide_data_set_async(int unit, bcm_gport_t gport, uint32 flags, uint64 data, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_ppp_initiator_create_async(int unit, bcm_ppp_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ppp_initiator_delete_async(int unit, bcm_ppp_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ppp_initiator_get_async(int unit, bcm_ppp_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ppp_initiator_traverse_async(int unit, bcm_ppp_initiator_additional_info_t * additional_info, bcm_ppp_initiator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ppp_term_spoofing_check_add_async(int unit, bcm_ppp_term_spoofing_check_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ppp_term_spoofing_check_delete_async(int unit, bcm_ppp_term_spoofing_check_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ppp_term_spoofing_check_traverse_async(int unit, bcm_ppp_term_spoofing_check_additional_info_t * additional_info, bcm_ppp_term_spoofing_check_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ppp_terminator_create_async(int unit, bcm_ppp_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ppp_terminator_delete_async(int unit, bcm_ppp_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ppp_terminator_get_async(int unit, bcm_ppp_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ppp_terminator_traverse_async(int unit, bcm_ppp_terminator_additional_info_t * additional_info, bcm_ppp_terminator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_client_set_async(int unit, bcm_port_t client_port, bcm_proxy_proto_type_t proto_type, bcm_module_t server_modid, bcm_port_t server_port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_egress_create_async(int unit, uint32 flags, bcm_proxy_egress_t * proxy_egress, bcm_if_t * proxy_if_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_egress_destroy_async(int unit, bcm_if_t proxy_if_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_egress_get_async(int unit, bcm_if_t proxy_if_id, bcm_proxy_egress_t * proxy_egress, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_egress_traverse_async(int unit, bcm_proxy_egress_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_server_get_async(int unit, bcm_port_t server_port, bcm_proxy_mode_t mode, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_server_port_get_async(int unit, bcm_gport_t local_ingress_port, bcm_proxy_server_t * proxy_server, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_server_port_set_async(int unit, bcm_gport_t local_ingress_port, bcm_proxy_server_t * proxy_server, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_server_set_async(int unit, bcm_port_t server_port, bcm_proxy_mode_t mode, int enable, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
#ifdef	INCLUDE_PSTATS
void	bcm_pstats_data_sync_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pstats_session_create_async(int unit, int options, int array_count, bcm_pstats_session_element_t * element_array, bcm_pstats_session_id_t * session_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pstats_session_data_clear_async(int unit, bcm_pstats_session_id_t session_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pstats_session_data_get_async(int unit, bcm_pstats_session_id_t session_id, bcm_pstats_timestamp_t * timestamp, int array_max, bcm_pstats_data_t * data_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pstats_session_data_sync_get_async(int unit, bcm_pstats_session_id_t session_id, bcm_pstats_timestamp_t * timestamp, int array_max, bcm_pstats_data_t * data_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pstats_session_destroy_async(int unit, bcm_pstats_session_id_t session_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pstats_session_get_async(int unit, bcm_pstats_session_id_t session_id, int array_max, bcm_pstats_session_element_t * element_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pstats_session_traverse_async(int unit, bcm_pstats_session_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_PSTATS */
#ifdef	INCLUDE_PTP
void	bcm_ptp_acceptable_master_add_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int priority1_alt_value, bcm_ptp_clock_peer_address_t * master_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_acceptable_master_enabled_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint8 * enabled, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_acceptable_master_enabled_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint8 enabled, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_acceptable_master_list_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int max_num_masters, int * num_masters, bcm_ptp_clock_peer_address_t * master_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_acceptable_master_remove_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_peer_address_t * master_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_acceptable_master_table_clear_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_acceptable_master_table_size_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int * max_table_entries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_bs_time_info_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_bs_time_info_t * time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_cb_register_async(int unit, bcm_ptp_cb_types_t cb_types, bcm_ptp_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_cb_unregister_async(int unit, bcm_ptp_cb_types_t cb_types, bcm_ptp_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_accuracy_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_clock_accuracy_t * accuracy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_accuracy_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_clock_accuracy_t * accuracy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_apts_enable_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_apts_enable_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_apts_gps_offset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * offset_nsec, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_apts_gps_offset_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int offset_nsec, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_apts_mode_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_clock_apts_mode_t * current_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_apts_source_enable_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_clock_apts_source_t source, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_apts_source_enable_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_clock_apts_source_t source, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_apts_source_prio_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * num_sources, bcm_ptp_clock_apts_source_t * priority_list, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_apts_source_prio_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int num_sources, bcm_ptp_clock_apts_source_t * priority_list, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_bmca_override_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 * flags, uint32 * enable_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_bmca_override_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 flags, uint32 enable_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_create_async(int unit, bcm_ptp_stack_id_t ptp_id, bcm_ptp_clock_info_t * clock_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_current_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_current_dataset_t * dataset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_default_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_default_dataset_t * dataset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_domain_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 * domain, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_domain_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 domain, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_clock_info_t * clock_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_local_priority_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint8 * local_priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_local_priority_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint8 local_priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_max_steps_removed_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint8 * max_steps_removed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_max_steps_removed_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint8 max_steps_removed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_parent_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_parent_dataset_t * dataset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_peer_age_timer_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint8 * aging_time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_peer_age_timer_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint8 aging_time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_announce_receipt_timeout_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, uint32 * timeout, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_announce_receipt_timeout_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, uint32 timeout, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_configure_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_ptp_clock_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_ptp_port_dataset_t * dataset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_delay_mechanism_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, uint32 * delay_mechanism, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_delay_mechanism_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, uint32 delay_mechanism, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_disable_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_drop_counters_enable_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_drop_counters_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_ptp_clock_port_packet_drop_counters_t * per_port_packet_drop_counters, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_enable_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_identity_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_ptp_port_identity_t * identity, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_info_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_ptp_clock_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_latency_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, uint32 latency_in, uint32 latency_out, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_announce_interval_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int * interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_announce_interval_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_min_delay_req_interval_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int * interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_min_delay_req_interval_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_min_pdelay_req_interval_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int * interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_min_pdelay_req_interval_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_sync_interval_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int * interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_sync_interval_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_mac_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_mac_t * mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_protocol_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_ptp_protocol_t * protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_tlv_config_add_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_index, uint32 clock_port, bcm_ptp_tlv_type_t tlv_type, uint16 data_len, uint8 * data, bcm_ptp_tlv_action_t action, int config_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_tlv_config_delete_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_index, uint32 clock_port, int config_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_tlv_config_delete_all_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_index, uint32 clock_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_type_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_ptp_port_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_version_number_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, uint32 * version, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_priority1_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 * priority1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_priority1_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 priority1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_priority2_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 * priority2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_priority2_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 priority2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_quality_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_clock_quality_t * clock_quality, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_quality_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_clock_quality_t clock_quality, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_slaveonly_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 * slaveonly, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_slaveonly_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 slaveonly, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_time_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_timestamp_t * time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_time_properties_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_time_properties_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_time_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_timestamp_t * time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_timescale_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_timescale_t * timescale, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_timescale_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_timescale_t * timescale, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_tlv_enable_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_index, uint32 clock_port, int config_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_tlv_enable_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_index, uint32 clock_port, int config_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_traceability_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_trace_t * trace, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_traceability_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_trace_t * trace, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_user_description_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint8 * desc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_utc_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_utc_t * utc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_utc_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_utc_t * utc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_alarm_callback_register_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_ctdev_alarm_cb alarm_cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_alarm_callback_unregister_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_alpha_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint16 * alpha_numerator, uint16 * alpha_denominator, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_alpha_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint16 alpha_numerator, uint16 alpha_denominator, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_enable_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * enable, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_enable_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int enable, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_verbose_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * verbose, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_verbose_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int verbose, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_external_phy_synchronize_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_external_phy_config_t * extphy_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_foreign_master_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_foreign_master_dataset_t * data_set, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_g8275p1_traceability_info_clock_class_map_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_g8275p1_clock_traceability_info_t traceability_info, uint8 * clock_class, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_input_channel_precedence_mode_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int channel_select_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_input_channel_switching_mode_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int channel_switching_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_input_channels_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * num_channels, bcm_ptp_channel_t * channels, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_input_channels_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int num_channels, bcm_ptp_channel_t * channels, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_enable_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * enable, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_enable_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int enable, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_phyts_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * phyts, int * framesync_pin, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_phyts_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int phyts, int framesync_pin, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_portbitmap_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_portbitmap_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_verbose_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * verbose, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_verbose_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int verbose, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_packet_counters_clear_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint32 counter_bitmap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_packet_counters_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_packet_counters_t * counters, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_peer_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int max_num_peers, bcm_ptp_peer_entry_t * peers, int * num_peers, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_phase_offset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_phase_offset_t * offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_phase_offset_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, const bcm_ptp_phase_offset_t * offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_pkt_flags_override_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 * override_flag, uint32 * override_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_pkt_flags_override_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 override_flag, uint32 override_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_primary_domain_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * primary_domain, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_primary_domain_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int primary_domain, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_servo_configuration_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_servo_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_servo_configuration_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_servo_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_servo_status_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_servo_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_servo_threshold_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_servo_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_servo_threshold_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_servo_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signal_output_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * signal_output_count, bcm_ptp_signal_output_t * signal_output_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signal_output_remove_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int signal_output_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signal_output_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * signal_output_id, bcm_ptp_signal_output_t * output_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signaled_unicast_master_add_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_unicast_master_t * master_info, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signaled_unicast_master_remove_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_peer_address_t * master_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signaled_unicast_slave_list_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int max_num_slaves, int * num_slaves, bcm_ptp_clock_peer_t * slave_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signaled_unicast_slave_table_clear_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int callstack, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signaling_arbiter_register_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_signaling_arbiter_t arb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signaling_arbiter_unregister_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_stack_create_async(int unit, bcm_ptp_stack_info_t * ptp_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_stack_destroy_async(int unit, bcm_ptp_stack_id_t ptp_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_stack_get_async(int unit, bcm_ptp_stack_id_t ptp_id, bcm_ptp_stack_info_t * ptp_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_stack_get_all_async(int unit, int max_size, bcm_ptp_stack_info_t * ptp_info, int * no_of_stacks, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_master_add_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_unicast_master_t * master_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_master_list_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int max_num_masters, int * num_masters, bcm_ptp_clock_peer_address_t * master_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_master_remove_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_peer_address_t * master_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_master_table_clear_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_master_table_size_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int * max_table_entries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_slave_add_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_peer_t * slave_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_slave_list_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int max_num_slaves, int * num_slaves, bcm_ptp_clock_peer_t * slave_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_slave_remove_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_peer_t * slave_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_slave_table_clear_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_sync_phy_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_sync_phy_input_t sync_input, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_init_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_network_option_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_telecom_g8265_network_option_t * network_option, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_network_option_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_telecom_g8265_network_option_t network_option, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_add_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_port_address_t * address, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_best_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_telecom_g8265_pktmaster_t * pktmaster, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_clock_port_address_t * address, bcm_ptp_telecom_g8265_pktmaster_t * pktmaster, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_list_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int max_master_count, int * num_masters, int * best_master, bcm_ptp_telecom_g8265_pktmaster_t * pktmaster, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_lockout_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint8 lockout, bcm_ptp_clock_port_address_t * address, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_non_reversion_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint8 nonres, bcm_ptp_clock_port_address_t * address, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_priority_override_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint8 override, bcm_ptp_clock_port_address_t * address, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_priority_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint16 priority, bcm_ptp_clock_port_address_t * address, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_remove_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_port_address_t * address, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_wait_duration_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint64 wait_sec, bcm_ptp_clock_port_address_t * address, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_pktstats_thresholds_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_telecom_g8265_pktstats_t * thresholds, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_pktstats_thresholds_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_telecom_g8265_pktstats_t thresholds, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_quality_level_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_telecom_g8265_quality_level_t ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_receipt_timeout_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_message_type_t message_type, uint32 * receipt_timeout, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_receipt_timeout_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_message_type_t message_type, uint32 receipt_timeout, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_shutdown_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_time_format_set_async(int unit, bcm_ptp_stack_id_t ptp_id, bcm_ptp_time_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_timesource_input_status_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_timesource_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_tod_input_sources_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * num_tod_sources, bcm_ptp_tod_input_t * tod_sources, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_tod_input_sources_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int num_tod_sources, bcm_ptp_tod_input_t * tod_sources, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_tod_output_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * tod_output_count, bcm_ptp_tod_output_t * tod_output, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_tod_output_remove_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int tod_output_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_tod_output_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * tod_output_id, bcm_ptp_tod_output_t * output_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_transparent_clock_default_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_transparent_clock_default_dataset_t * data_set, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_transparent_clock_port_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint16 clock_port, bcm_ptp_transparent_clock_port_dataset_t * data_set, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_unicast_request_duration_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint32 * duration, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_unicast_request_duration_max_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint32 * duration_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_unicast_request_duration_max_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint32 duration_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_unicast_request_duration_min_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint32 * duration_min, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_unicast_request_duration_min_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint32 duration_min, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_unicast_request_duration_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint32 duration, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_PTP */
void	bcm_qos_control_get_async(int unit, uint32 flags, bcm_qos_control_type_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_control_set_async(int unit, uint32 flags, bcm_qos_control_type_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_map_add_async(int unit, uint32 flags, bcm_qos_map_t * map, int map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_map_control_get_async(int unit, uint32 map_id, uint32 flags, bcm_qos_map_control_type_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_map_control_set_async(int unit, uint32 map_id, uint32 flags, bcm_qos_map_control_type_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_map_create_async(int unit, uint32 flags, int * map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_map_delete_async(int unit, uint32 flags, bcm_qos_map_t * map, int map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_map_destroy_async(int unit, int map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_map_id_get_by_profile_async(int unit, uint32 flags, int profile, int * map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_map_multi_get_async(int unit, uint32 flags, int map_id, int array_size, bcm_qos_map_t * array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_multi_get_async(int unit, int array_size, int * map_ids_array, int * flags_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_port_map_get_async(int unit, bcm_gport_t port, int * ing_map, int * egr_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_port_map_set_async(int unit, bcm_gport_t port, int ing_map, int egr_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_port_map_type_get_async(int unit, bcm_gport_t port, uint32 flags, int * map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_port_vlan_map_get_async(int unit, bcm_port_t port, bcm_vlan_t vid, int * ing_map, int * egr_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_port_vlan_map_set_async(int unit, bcm_port_t port, bcm_vlan_t vid, int ing_map, int egr_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_vpn_map_set_async(int unit, bcm_vpn_t vpn, int ing_map, int egr_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_vpn_map_type_get_async(int unit, bcm_vpn_t vpn, uint32 flags, int * map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_range_create_async(int unit, int flags, bcm_range_config_t * range_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_range_destroy_async(int unit, bcm_range_t rid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_range_get_async(int unit, bcm_range_config_t * range_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_range_group_create_async(int unit, bcm_range_group_config_t * range_group_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_range_group_delete_async(int unit, bcm_range_group_config_t * range_group_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_range_group_get_async(int unit, bcm_range_group_config_t * range_group_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_range_group_update_async(int unit, bcm_range_group_config_t * range_group_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_range_oper_mode_get_async(int unit, bcm_range_oper_mode_t * oper_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_range_oper_mode_set_async(int unit, bcm_range_oper_mode_t oper_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_range_traverse_async(int unit, bcm_range_traverse_cb callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_bandwidth_get_async(int unit, bcm_port_t port, int flags, uint32 * kbits_sec, uint32 * kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_bandwidth_set_async(int unit, bcm_port_t port, int flags, uint32 kbits_sec, uint32 kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_bcast_get_async(int unit, int * pps, int * flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_bcast_set_async(int unit, int pps, int flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_dlfbc_get_async(int unit, int * pps, int * flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_dlfbc_set_async(int unit, int pps, int flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_get_async(int unit, int * pps, int * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_mcast_get_async(int unit, int * pps, int * flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_mcast_set_async(int unit, int pps, int flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_packet_get_async(int unit, bcm_port_t port, bcm_rate_packet_t * pkt_rate, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_packet_set_async(int unit, bcm_port_t port, bcm_rate_packet_t * pkt_rate, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_set_async(int unit, int pps, int flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_type_get_async(int unit, bcm_rate_limit_t * rl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_type_set_async(int unit, bcm_rate_limit_t * rl, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_REGEX
void	bcm_regex_config_get_async(int unit, bcm_regex_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_config_set_async(int unit, bcm_regex_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_engine_create_async(int unit, bcm_regex_engine_config_t * config, bcm_regex_engine_t * engid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_engine_destroy_async(int unit, bcm_regex_engine_t engid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_engine_get_async(int unit, bcm_regex_engine_t engid, bcm_regex_engine_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_engine_info_get_async(int unit, int engine_id, bcm_regex_engine_info_t * regex_engine_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_engine_traverse_async(int unit, bcm_regex_engine_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_exclude_add_async(int unit, uint8 protocol, uint16 l4_start, uint16 l4_end, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_exclude_delete_async(int unit, uint8 protocol, uint16 l4_start, uint16 l4_end, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_exclude_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_exclude_get_async(int unit, int array_size, uint8 * protocol, uint16 * l4low, uint16 * l4high, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_get_match_id_async(int unit, int signature_id, int * match_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_get_sig_id_async(int unit, int match_id, int * signature_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_info_get_async(int unit, bcm_regex_info_t * regex_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_match_check_async(int unit, bcm_regex_match_t * matches, int count, int * metric, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_match_set_async(int unit, bcm_regex_engine_t engid, bcm_regex_match_t * matches, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_add_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, uint32 param0, uint32 param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_delete_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, uint32 param0, uint32 param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_get_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, uint32 * param0, uint32 * param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_mac_add_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_mac_get_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, bcm_mac_t * mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_ports_add_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_ports_get_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_remove_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_remove_all_async(int unit, bcm_regex_policy_t policy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_create_async(int unit, int flags, bcm_regex_policy_t * policy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_destroy_async(int unit, bcm_regex_policy_t policy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_install_async(int unit, bcm_regex_policy_t policy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_policer_attach_async(int unit, bcm_regex_policy_t policy, int level, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_policer_detach_async(int unit, bcm_regex_policy_t policy, int level, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_policer_detach_all_async(int unit, bcm_regex_policy_t policy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_policer_get_async(int unit, bcm_regex_policy_t policy, int level, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_remove_async(int unit, bcm_regex_policy_t policy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_stat_attach_async(int unit, bcm_regex_policy_t policy, int stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_stat_detach_async(int unit, bcm_regex_policy_t policy, int stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_stat_get_async(int unit, bcm_regex_policy_t policy, int * stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_report_register_async(int unit, uint32 reports, bcm_regex_report_cb callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_report_unregister_async(int unit, uint32 reports, bcm_regex_report_cb callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_session_add_async(int unit, int flags, bcm_regex_session_key_t * key, bcm_regex_session_t * session, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_session_delete_async(int unit, bcm_regex_session_key_t * key, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_session_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_session_get_async(int unit, int flags, bcm_regex_session_key_t * key, bcm_regex_session_t * session, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_session_policy_update_async(int unit, int flags, int flow_index, bcm_regex_policy_t policy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_session_traverse_async(int unit, int flags, bcm_regex_session_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_stat_create_async(int unit, int flags, int nstat, bcm_field_stat_t * stat_arr, int * stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_stat_destroy_async(int unit, int stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_stat_get_async(int unit, bcm_regex_stat_t type, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_stat_set_async(int unit, bcm_regex_stat_t type, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_REGEX */
void	bcm_rx_CopyToCpu_config_add_async(int unit, uint32 options, bcm_rx_CopyToCpu_config_t * copyToCpu_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_CopyToCpu_config_delete_async(int unit, int index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_CopyToCpu_config_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_CopyToCpu_config_get_async(int unit, int index, bcm_rx_CopyToCpu_config_t * copyToCpu_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_CopyToCpu_config_get_all_async(int unit, int entries_max, bcm_rx_CopyToCpu_config_t * copyToCpu_config, int * entries_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_active_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_alloc_async(int unit, int pkt_size, uint32 flags, void ** buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_burst_get_async(int unit, int * burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_burst_set_async(int unit, int burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cfg_get_async(int unit, bcm_rx_cfg_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cfg_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_channels_running_async(int unit, uint32 * channels, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_control_get_async(int unit, bcm_rx_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_control_set_async(int unit, bcm_rx_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_burst_get_async(int unit, int cos, int * burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_burst_set_async(int unit, int cos, int burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_max_len_get_async(int unit, int cos, int * max_q_len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_max_len_set_async(int unit, int cos, int max_q_len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_rate_get_async(int unit, int cos, int * pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_rate_set_async(int unit, int cos, int pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_delete_async(int unit, int index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_extended_add_async(int unit, uint32 options, bcm_rx_cosq_mapping_t * rx_cosq_mapping, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_extended_delete_async(int unit, bcm_rx_cosq_mapping_t * rx_cosq_mapping, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_extended_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_extended_get_async(int unit, bcm_rx_cosq_mapping_t * rx_cosq_mapping, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_extended_set_async(int unit, uint32 options, bcm_rx_cosq_mapping_t * rx_cosq_mapping, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_get_async(int unit, int index, bcm_rx_reasons_t * reasons, bcm_rx_reasons_t * reasons_mask, uint8 * int_prio, uint8 * int_prio_mask, uint32 * packet_type, uint32 * packet_type_mask, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_reasons_get_async(int unit, bcm_rx_reasons_t * reasons, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_set_async(int unit, int index, bcm_rx_reasons_t reasons, bcm_rx_reasons_t reasons_mask, uint8 int_prio, uint8 int_prio_mask, uint32 packet_type, uint32 packet_type_mask, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_size_get_async(int unit, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cpu_rate_get_async(int unit, int * pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cpu_rate_set_async(int unit, int pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_free_async(int unit, void * pkt_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_free_enqueue_async(int unit, void * pkt_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_mtu_get_async(int unit, bcm_rx_mtu_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_mtu_profile_get_async(int unit, uint32 flags, bcm_rx_mtu_profile_key_t * mtu_key, bcm_rx_mtu_profile_value_t * mtu_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_mtu_profile_set_async(int unit, uint32 flags, bcm_rx_mtu_profile_key_t * mtu_key, bcm_rx_mtu_profile_value_t * mtu_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_mtu_set_async(int unit, bcm_rx_mtu_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_alloc_async(int unit, int size, uint32 flags, void ** pool, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_cleanup_async(bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_free_async(int unit, void * buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_setup_async(int pkt_count, int bytes_per_pkt, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_setup_done_async(bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_channel_get_async(int unit, bcm_cos_queue_t queue_id, bcm_rx_chan_t * chan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_channel_set_async(int unit, bcm_cos_queue_t queue_id, bcm_rx_chan_t chan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_max_get_async(int unit, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_packet_count_get_async(int unit, bcm_cos_queue_t cosq, int * packet_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_rate_limit_status_get_async(int unit, bcm_cos_queue_t cosq, int * packet_tokens, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_register_async(int unit, const char * name, bcm_cos_queue_t cosq, bcm_rx_cb_f callback, uint8 priority, void * cookie, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_unregister_async(int unit, bcm_cos_queue_t cosq, bcm_rx_cb_f callback, uint8 priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_rate_get_async(int unit, int * pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_rate_set_async(int unit, int pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_reasons_get_async(int unit, bcm_rx_reasons_t * reasons, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_reasons_policer_set_async(int unit, bcm_rx_reasons_t rx_reasons, bcm_policer_t polid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_redirect_reasons_get_async(int unit, bcm_rx_redirect_t mode, bcm_rx_reasons_t * reasons, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_redirect_reasons_set_async(int unit, bcm_rx_redirect_t mode, bcm_rx_reasons_t reasons, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_register_async(int unit, const char * name, bcm_rx_cb_f callback, uint8 priority, void * cookie, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BCM_RPC_SUPPORT
void	bcm_rx_remote_pkt_alloc_async(int len, bcm_pkt_t ** pkt, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BCM_RPC_SUPPORT */
void	bcm_rx_remote_pkt_enqueue_async(int unit, bcm_pkt_t * pkt, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BCM_RPC_SUPPORT
void	bcm_rx_remote_pkt_free_async(bcm_pkt_t * pkt, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BCM_RPC_SUPPORT */
void	bcm_rx_sched_register_async(int unit, bcm_rx_sched_cb sched_cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_sched_unregister_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_rx_show_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_rx_snoop_create_async(int unit, int flags, int * snoop_cmnd, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_snoop_destroy_async(int unit, int flags, int snoop_cmnd, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_snoop_get_async(int unit, int snoop_cmnd, bcm_rx_snoop_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_snoop_set_async(int unit, int snoop_cmnd, bcm_rx_snoop_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_start_async(int unit, bcm_rx_cfg_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_stop_async(int unit, bcm_rx_cfg_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_action_profile_clear_async(int unit, bcm_rx_trap_t trap_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_action_profile_get_async(int unit, bcm_rx_trap_t trap_type, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_action_profile_set_async(int unit, uint32 flags, bcm_rx_trap_t trap_type, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_get_async(int unit, int trap_id, bcm_rx_trap_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_lif_get_async(int unit, bcm_rx_trap_lif_config_t * lif_config_p, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_lif_set_async(int unit, uint32 flags, bcm_rx_trap_lif_config_t * lif_config_p, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_prog_get_async(int unit, uint8 prog_index, bcm_rx_trap_prog_config_t * prog_config_p, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_prog_set_async(int unit, uint32 flags, uint8 prog_index, bcm_rx_trap_prog_config_t * prog_config_p, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_protocol_clear_async(int unit, bcm_rx_trap_protocol_key_t * key_p, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_protocol_get_async(int unit, bcm_rx_trap_protocol_key_t * key_p, bcm_gport_t * trap_gport_p, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_protocol_interface_profiles_get_async(int unit, bcm_if_t intf, bcm_rx_trap_protocol_profiles_t * protocol_profiles_p, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_protocol_interface_profiles_set_async(int unit, bcm_if_t intf, bcm_rx_trap_protocol_profiles_t * protocol_profiles_p, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_protocol_profiles_get_async(int unit, bcm_gport_t port, bcm_rx_trap_protocol_profiles_t * protocol_profiles_p, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_protocol_profiles_set_async(int unit, bcm_gport_t port, bcm_rx_trap_protocol_profiles_t * protocol_profiles_p, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_protocol_set_async(int unit, bcm_rx_trap_protocol_key_t * key_p, bcm_gport_t trap_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_set_async(int unit, int trap_id, bcm_rx_trap_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_svtag_get_async(int unit, bcm_rx_trap_svtag_key_t * svtag_trap_key, bcm_gport_t * action_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_svtag_set_async(int unit, bcm_rx_trap_svtag_key_t * svtag_trap_key, bcm_gport_t action_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_sw_to_hw_id_map_get_async(int unit, uint32 flags, int sw_trap_id, int * hw_trap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_type_create_async(int unit, int flags, bcm_rx_trap_t type, int * trap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_type_destroy_async(int unit, int trap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_type_from_id_get_async(int unit, int flags, int trap_id, bcm_rx_trap_t * trap_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_type_get_async(int unit, int flags, bcm_rx_trap_t type, int * trap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_unit_next_get_async(int unit, int * next_unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_unregister_async(int unit, bcm_rx_cb_f callback, uint8 priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_config_get_async(int unit, bcm_sat_config_t * conf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_config_set_async(int unit, bcm_sat_config_t * conf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_availability_config_set_async(int unit, bcm_sat_ctf_t ctf_id, bcm_sat_ctf_availability_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_bin_limit_get_async(int unit, int max_bins_count, bcm_sat_ctf_bin_limit_t * bins, int * bins_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_bin_limit_set_async(int unit, int bins_count, bcm_sat_ctf_bin_limit_t * bins, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_create_async(int unit, uint32 flags, bcm_sat_ctf_t * ctf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_destroy_async(int unit, bcm_sat_ctf_t ctf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_identifier_map_async(int unit, bcm_sat_ctf_identifier_t * identifier, bcm_sat_ctf_t ctf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_identifier_unmap_async(int unit, bcm_sat_ctf_identifier_t * identifier, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_packet_config_async(int unit, bcm_sat_ctf_t ctf_id, bcm_sat_ctf_packet_info_t * packet_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_reports_config_set_async(int unit, bcm_sat_ctf_t ctf_id, bcm_sat_ctf_report_config_t * reports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_stat_config_set_async(int unit, bcm_sat_ctf_t ctf_id, bcm_sat_ctf_stat_config_t * stat, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_stat_get_async(int unit, bcm_sat_ctf_t ctf_id, uint32 flags, bcm_sat_ctf_stat_t * stat, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_trap_add_async(int unit, uint32 trap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_trap_data_to_session_map_async(int unit, uint32 trap_data, uint32 trap_data_mask, uint32 session_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_trap_data_to_session_unmap_async(int unit, uint32 trap_data, uint32 trap_data_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_trap_remove_async(int unit, uint32 trap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_trap_remove_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_ctf_traverse_async(int unit, bcm_sat_ctf_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_endpoint_create_async(int unit, bcm_sat_endpoint_info_t * endpoint_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_endpoint_destroy_async(int unit, bcm_sat_endpoint_t endpoint, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_endpoint_destroy_all_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_endpoint_get_async(int unit, bcm_sat_endpoint_t endpoint, uint32 flags, bcm_sat_endpoint_info_t * endpoint_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_endpoint_traverse_async(int unit, uint32 flags, bcm_sat_endpoint_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_event_register_async(int unit, bcm_sat_event_type_t event_type, bcm_sat_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_event_unregister_async(int unit, bcm_sat_event_type_t event_type, bcm_sat_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_bandwidth_get_async(int unit, bcm_sat_gtf_t gtf_id, int priority, bcm_sat_gtf_bandwidth_t * bw, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_bandwidth_set_async(int unit, bcm_sat_gtf_t gtf_id, int priority, bcm_sat_gtf_bandwidth_t * bw, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_create_async(int unit, uint32 flags, bcm_sat_gtf_t * gtf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_destroy_async(int unit, bcm_sat_gtf_t gtf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_packet_config_async(int unit, bcm_sat_gtf_t gtf_id, bcm_sat_gtf_packet_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_packet_config_get_async(int unit, bcm_sat_gtf_t gtf_id, bcm_sat_gtf_packet_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_packet_config_set_async(int unit, bcm_sat_gtf_t gtf_id, bcm_sat_gtf_packet_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_packet_start_async(int unit, bcm_sat_gtf_t gtf_id, bcm_sat_gtf_pri_t priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_packet_stop_async(int unit, bcm_sat_gtf_t gtf_id, bcm_sat_gtf_pri_t priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_rate_pattern_get_async(int unit, bcm_sat_gtf_t gtf_id, int priority, bcm_sat_gtf_rate_pattern_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_rate_pattern_set_async(int unit, bcm_sat_gtf_t gtf_id, int priority, bcm_sat_gtf_rate_pattern_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_stat_get_async(int unit, bcm_sat_gtf_t gtf_id, int priority, uint32 flags, bcm_sat_gtf_stat_counter_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_stat_multi_get_async(int unit, bcm_sat_gtf_t gtf_id, bcm_sat_gtf_stat_multi_t * stat, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_gtf_traverse_async(int unit, bcm_sat_gtf_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_srv6_extension_terminator_add_async(int unit, bcm_srv6_extension_terminator_mapping_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_srv6_extension_terminator_delete_async(int unit, bcm_srv6_extension_terminator_mapping_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_srv6_extension_terminator_get_async(int unit, bcm_srv6_extension_terminator_mapping_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_srv6_extension_terminator_traverse_async(int unit, bcm_srv6_extension_terminator_traverse_info_t additional_info, bcm_srv6_extension_terminator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_srv6_sid_initiator_create_async(int unit, bcm_srv6_sid_initiator_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_srv6_sid_initiator_delete_async(int unit, bcm_srv6_sid_initiator_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_srv6_sid_initiator_get_async(int unit, bcm_srv6_sid_initiator_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_srv6_sid_initiator_traverse_async(int unit, bcm_srv6_sid_initiator_traverse_info_t additional_info, bcm_srv6_sid_initiator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_srv6_srh_base_initiator_create_async(int unit, bcm_srv6_srh_base_initiator_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_srv6_srh_base_initiator_delete_async(int unit, bcm_srv6_srh_base_initiator_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_srv6_srh_base_initiator_get_async(int unit, bcm_srv6_srh_base_initiator_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_srv6_srh_base_initiator_traverse_async(int unit, bcm_srv6_srh_base_initiator_traverse_info_t additional_info, bcm_srv6_srh_base_initiator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_clear_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_clear_single_async(int unit, bcm_port_t port, bcm_stat_val_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_control_get_async(int unit, int flags, bcm_stat_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_control_set_async(int unit, int flags, bcm_stat_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_config_get_async(int unit, bcm_stat_counter_engine_t * engine, bcm_stat_counter_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_config_set_async(int unit, bcm_stat_counter_engine_t * engine, bcm_stat_counter_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_database_control_get_async(int unit, uint32 flags, bcm_stat_counter_database_t * database, bcm_stat_counter_database_control_t control, uint32 * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_database_control_set_async(int unit, uint32 flags, bcm_stat_counter_database_t * database, bcm_stat_counter_database_control_t control, uint32 arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_database_create_async(int unit, uint32 flags, bcm_core_t core_id, int * database_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_database_destroy_async(int unit, uint32 flags, bcm_stat_counter_database_t * database, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_database_enable_get_async(int unit, uint32 flags, bcm_stat_counter_database_t * database, bcm_stat_counter_enable_t * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_database_enable_set_async(int unit, uint32 flags, bcm_stat_counter_database_t * database, bcm_stat_counter_enable_t * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_engine_attach_async(int unit, uint32 flags, bcm_stat_counter_database_t * database, int engine_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_engine_control_get_async(int unit, uint32 flags, bcm_stat_engine_t * engine, bcm_stat_counter_engine_control_t control, uint32 * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_engine_control_set_async(int unit, uint32 flags, bcm_stat_engine_t * engine, bcm_stat_counter_engine_control_t control, uint32 arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_engine_detach_async(int unit, uint32 flags, bcm_stat_counter_database_t * database, int engine_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_eviction_get_async(int unit, uint32 flags, bcm_stat_engine_t * engine, bcm_stat_eviction_t * eviction, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_eviction_set_async(int unit, uint32 flags, bcm_stat_engine_t * engine, bcm_stat_eviction_t * eviction, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_expansion_select_get_async(int unit, uint32 flags, bcm_stat_counter_interface_key_t * interface, bcm_stat_expansion_select_t * expansion_select, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_expansion_select_set_async(int unit, uint32 flags, bcm_stat_counter_interface_key_t * interface, bcm_stat_expansion_select_t * expansion_select, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_explicit_get_async(int unit, uint32 flags, bcm_stat_counter_explicit_input_data_t * stat_counter_input_data, bcm_stat_counter_output_data_t * stat_counter_output_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_filter_get_async(int unit, bcm_stat_counter_source_t source, int filter_max_count, bcm_stat_counter_filter_t * filter_array, int * filter_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_filter_group_get_async(int unit, uint32 flags, bcm_stat_counter_command_id_key_t * key, bcm_stat_counter_group_filter_t filter, int * is_active, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_filter_group_set_async(int unit, uint32 flags, bcm_stat_counter_command_id_key_t * key, bcm_stat_counter_group_filter_t filter, int is_active, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_filter_is_active_get_async(int unit, bcm_stat_counter_source_t source, bcm_stat_counter_filter_t filter, int * is_active, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_filter_set_async(int unit, bcm_stat_counter_source_t source, bcm_stat_counter_filter_t * filter_array, int filter_count, int is_active, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_get_async(int unit, uint32 flags, bcm_stat_counter_input_data_t * stat_counter_input_data, bcm_stat_counter_output_data_t * stat_counter_output_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_interface_get_async(int unit, uint32 flags, bcm_stat_counter_database_t * database, bcm_stat_counter_interface_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_interface_set_async(int unit, uint32 flags, bcm_stat_counter_database_t * database, bcm_stat_counter_interface_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_lif_counting_get_async(int unit, uint32 flags, bcm_stat_counter_source_t * source, bcm_stat_counter_lif_mask_t * counting_mask, bcm_stat_counter_lif_stack_id_t * lif_stack_id_to_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_lif_counting_range_get_async(int unit, uint32 flags, bcm_stat_counter_source_type_t source, bcm_stat_counter_lif_range_id_t range_id, bcm_stat_counter_lif_counting_range_t * lif_range, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_lif_counting_range_set_async(int unit, uint32 flags, bcm_stat_counter_source_type_t source, bcm_stat_counter_lif_range_id_t range_id, bcm_stat_counter_lif_counting_range_t * lif_range, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_lif_counting_set_async(int unit, uint32 flags, bcm_stat_counter_source_t * source, bcm_stat_counter_lif_mask_t * counting_mask, bcm_stat_counter_lif_stack_id_t lif_stack_id_to_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_set_mapping_get_async(int unit, uint32 flags, bcm_stat_counter_database_t * database, bcm_stat_counter_set_map_t * counter_set_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_counter_set_mapping_set_async(int unit, uint32 flags, bcm_stat_counter_database_t * database, bcm_stat_counter_set_map_t * counter_set_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_add_async(int unit, bcm_port_t port, bcm_stat_val_t type, bcm_custom_stat_trigger_t trigger, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_check_async(int unit, bcm_port_t port, bcm_stat_val_t type, bcm_custom_stat_trigger_t trigger, int * result, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_counter_id_move_async(int unit, bcm_stat_custom_base_index_action_t idx_action, bcm_stat_custom_counter_info_t counter_info_old, bcm_stat_custom_counter_info_t * counter_info_new, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_delete_async(int unit, bcm_port_t port, bcm_stat_val_t type, bcm_custom_stat_trigger_t trigger, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_delete_all_async(int unit, bcm_port_t port, bcm_stat_val_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_get_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_group_create_async(int unit, uint32 mode_id, bcm_stat_object_t object, uint32 * stat_counter_id, uint32 * num_entries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_group_id_create_async(int unit, uint32 mode_id, bcm_stat_object_t object, uint32 pool_id, uint32 base_idx, bcm_stat_custom_counter_info_t * counter_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_set_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_database_eviction_boundaries_get_async(int unit, uint32 flags, bcm_stat_counter_database_t * database, int type_id, bcm_stat_eviction_boundaries_t * boundaries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_database_eviction_boundaries_set_async(int unit, uint32 flags, bcm_stat_counter_database_t * database, int type_id, bcm_stat_eviction_boundaries_t * boundaries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_direct_get_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_direct_multi_get_async(int unit, bcm_port_t port, int nstat, bcm_stat_val_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_drop_event_counter_get_async(int unit, bcm_pkt_drop_event_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_drop_event_counter_set_async(int unit, bcm_pkt_drop_event_t type, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_drop_event_counter_sync_get_async(int unit, bcm_pkt_drop_event_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_egress_receive_tm_pointer_format_get_async(int unit, int flags, bcm_stat_egress_receive_tm_pointer_format_t * pointer_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_egress_receive_tm_pointer_format_set_async(int unit, int flags, bcm_stat_egress_receive_tm_pointer_format_t * pointer_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_eviction_boundaries_get_async(int unit, uint32 flags, bcm_stat_engine_t * engine, bcm_stat_eviction_boundaries_t * boundaries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_eviction_boundaries_set_async(int unit, uint32 flags, bcm_stat_engine_t * engine, bcm_stat_eviction_boundaries_t * boundaries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_flex_counter_get_async(int unit, uint32 stat_counter_id, bcm_stat_flex_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_flex_counter_set_async(int unit, uint32 stat_counter_id, bcm_stat_flex_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_flex_counter_sync_get_async(int unit, uint32 stat_counter_id, bcm_stat_flex_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_flex_pool_info_multi_get_async(int unit, bcm_stat_flex_direction_t direction, uint32 num_pools, bcm_stat_flex_pool_stat_info_t * flex_pool_stat, uint32 * actual_num_pools, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_get_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_get32_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_create_async(int unit, bcm_stat_object_t object, bcm_stat_group_mode_t group_mode, uint32 * stat_counter_id, uint32 * num_entries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_destroy_async(int unit, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_drop_reasons_get_async(int unit, uint32 flags, bcm_stat_counter_group_filter_t group, int max_drop_reason_count, bcm_cosq_drop_reason_t * drop_reasons_array, int * drop_reasons_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_drop_reasons_set_async(int unit, uint32 flags, bcm_stat_counter_group_filter_t group, bcm_cosq_drop_reason_t * drop_reasons_array, int drop_reasons_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_dump_async(int unit, bcm_stat_object_t object, bcm_stat_group_mode_t group_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_dump_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_mode_attr_class_id_create_async(int unit, bcm_stat_group_mode_attr_t attr, uint32 num_of_attr_values, uint32 * attr_values, bcm_stat_group_mode_attr_class_id_t * attr_class_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_mode_attr_class_id_destroy_async(int unit, bcm_stat_group_mode_attr_class_id_t attr_class_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_mode_id_config_create_async(int unit, uint32 options, bcm_stat_group_mode_id_config_t * stat_config, uint32 num_selectors, bcm_stat_group_mode_attr_selector_t * attr_sel, uint32 * mode_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_mode_id_config_get_async(int unit, uint32 mode_id, bcm_stat_group_mode_id_config_t * config, uint32 num_selectors, bcm_stat_group_mode_attr_selector_t * attr_sel, uint32 * actual_num_selectors, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_mode_id_create_async(int unit, uint32 flags, uint32 total_counters, uint32 num_selectors, bcm_stat_group_mode_attr_selector_t * attr_selectors, uint32 * mode_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_mode_id_destroy_async(int unit, uint32 mode_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_mode_id_get_async(int unit, uint32 mode_id, uint32 * flags, uint32 * total_counters, uint32 num_selectors, bcm_stat_group_mode_attr_selector_t * attr_selectors, uint32 * actual_num_selectors, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_id_get_all_async(int unit, bcm_stat_object_t object, int stat_max, uint32 * stat_array, int * stat_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_latency_port_stat_id_get_async(int unit, int flags, bcm_stat_latency_port_stat_id_key_t * key, int * stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_lif_counting_profile_get_async(int unit, uint32 flags, int lif_counting_profile, bcm_stat_lif_counting_t * lif_counting, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_lif_counting_profile_set_async(int unit, uint32 flags, int lif_counting_profile, bcm_stat_lif_counting_t * lif_counting, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_lif_counting_stack_level_priority_get_async(int unit, uint32 flags, bcm_stat_lif_counting_source_t * source, bcm_stat_counter_lif_stack_id_t lif_stack_level, int * priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_lif_counting_stack_level_priority_set_async(int unit, uint32 flags, bcm_stat_lif_counting_source_t * source, bcm_stat_counter_lif_stack_id_t lif_stack_level, int priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_multi_get_async(int unit, bcm_port_t port, int nstat, bcm_stat_val_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_multi_get32_async(int unit, bcm_port_t port, int nstat, bcm_stat_val_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_pkt_size_adjust_select_get_async(int unit, int flags, bcm_stat_counter_command_id_key_t * key, bcm_stat_pkt_size_adjust_select_type_t select_type, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_pkt_size_adjust_select_set_async(int unit, int flags, bcm_stat_counter_command_id_key_t * key, bcm_stat_pkt_size_adjust_select_type_t select_type, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_port_group_create_async(int unit, uint32 num_gports, bcm_gport_t * gport, uint32 * group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_port_group_destroy_async(int unit, uint32 group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_pp_metadata_get_async(int unit, bcm_stat_pp_metadata_info_t * metadata_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_pp_metadata_set_async(int unit, bcm_stat_pp_metadata_info_t * metadata_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_pp_profile_create_async(int unit, int flags, bcm_stat_counter_interface_type_t engine_source, int * stat_pp_profile, bcm_stat_pp_profile_info_t * stat_pp_profile_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_pp_profile_delete_async(int unit, int stat_pp_profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_pp_profile_get_async(int unit, int stat_pp_profile, bcm_stat_pp_profile_info_t * stat_pp_profile_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_stif_record_format_get_async(int unit, int flags, int max_nof_elements, bcm_stat_stif_record_format_element_t * elements_array, int * nof_elements, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_stif_record_format_set_async(int unit, int flags, int nof_elements, bcm_stat_stif_record_format_element_t * record_format_elements, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_stif_source_mapping_get_async(int unit, int flags, bcm_stat_stif_source_t source, bcm_port_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_stif_source_mapping_set_async(int unit, int flags, bcm_stat_stif_source_t source, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_sync_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_sync_get_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_sync_get32_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_sync_multi_get_async(int unit, bcm_port_t port, int nstat, bcm_stat_val_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_sync_multi_get32_async(int unit, bcm_port_t port, int nstat, bcm_stat_val_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_threshold_get_async(int unit, bcm_port_t port, bcm_stat_val_t stat, bcm_stat_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_threshold_set_async(int unit, bcm_port_t port, bcm_stat_val_t stat, bcm_stat_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_trace_event_counter_get_async(int unit, bcm_pkt_trace_event_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_trace_event_counter_set_async(int unit, bcm_pkt_trace_event_t type, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_trace_event_counter_sync_get_async(int unit, bcm_pkt_trace_event_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_count_get_async(int unit, int * max_stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_create_async(int unit, bcm_stg_t * stg_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_create_id_async(int unit, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_default_get_async(int unit, bcm_stg_t * stg_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_default_set_async(int unit, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_destroy_async(int unit, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_list_async(int unit, bcm_stg_t ** list, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_list_destroy_async(int unit, bcm_stg_t * list, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_stp_get_async(int unit, bcm_stg_t stg, bcm_port_t port, int * stp_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_stp_set_async(int unit, bcm_stg_t stg, bcm_port_t port, int stp_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_add_async(int unit, bcm_stg_t stg, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_list_async(int unit, bcm_stg_t stg, bcm_vlan_t ** list, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_list_destroy_async(int unit, bcm_vlan_t * list, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_remove_async(int unit, bcm_stg_t stg, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_remove_all_async(int unit, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_domain_stk_trunk_add_async(int unit, int tm_domain, bcm_trunk_t stk_trunk, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_domain_stk_trunk_delete_async(int unit, int tm_domain, bcm_trunk_t stk_trunk, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_domain_stk_trunk_get_async(int unit, bcm_trunk_t stk_trunk, int domain_max, int * domain_array, int * domain_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fmod_lmod_mapping_get_async(int unit, bcm_port_t port, bcm_module_t * fmod, bcm_module_t * lmod, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fmod_lmod_mapping_set_async(int unit, bcm_port_t port, bcm_module_t fmod, bcm_module_t lmod, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fmod_smod_mapping_get_async(int unit, bcm_port_t port, bcm_module_t fmod, bcm_module_t * smod, bcm_port_t * sport, uint32 * nports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fmod_smod_mapping_set_async(int unit, bcm_port_t port, bcm_module_t fmod, bcm_module_t smod, bcm_port_t sport, uint32 nports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_gport_sysport_get_async(int unit, bcm_gport_t gport, bcm_gport_t * sysport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_mode_get_async(int unit, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_mode_set_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_config_add_async(int unit, bcm_stk_modid_config_t * modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_config_delete_async(int unit, bcm_stk_modid_config_t * modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_config_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_config_get_async(int unit, bcm_stk_modid_config_t * modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_config_get_all_async(int unit, int modid_max, bcm_stk_modid_config_t * modid_array, int * modid_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_config_set_async(int unit, bcm_stk_modid_config_t * modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_count_async(int unit, int * num_modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_domain_add_async(int unit, int modid, int tm_domain, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_domain_delete_async(int unit, int modid, int tm_domain, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_domain_get_async(int unit, int tm_domain, int mod_max, int * mod_array, int * mod_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_get_async(int unit, int * modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_set_async(int unit, int modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_map_async(int unit, int setget, bcm_module_t mod_in, bcm_port_t port_in, bcm_module_t * mod_out, bcm_port_t * port_out, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_register_async(int unit, bcm_stk_modmap_cb_t func, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_unregister_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_add_async(int unit, int modid, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_clear_async(int unit, int modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_clear_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_delete_async(int unit, int modid, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_get_async(int unit, int modid, int * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_get_all_async(int unit, int modid, int port_max, int * port_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_remote_map_get_async(int unit, bcm_gport_t port, uint32 flags, int * remote_modid, bcm_port_t * remote_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_remote_map_set_async(int unit, bcm_gport_t port, uint32 flags, int remote_modid, bcm_port_t remote_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_set_async(int unit, int modid, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_control_get_async(int unit, uint32 flags, bcm_module_t module, bcm_stk_module_control_t control, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_control_set_async(int unit, uint32 flags, bcm_module_t module, bcm_stk_module_control_t control, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_enable_async(int unit, bcm_module_t modid, int nports, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_max_get_async(int unit, uint32 flags, bcm_module_t * max_module, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_max_set_async(int unit, uint32 flags, bcm_module_t max_module, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_remote_port_enable_get_async(int unit, int modid, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_remote_port_enable_set_async(int unit, int modid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_my_modid_get_async(int unit, int * my_modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_my_modid_set_async(int unit, int my_modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_pbmp_get_async(int unit, bcm_pbmp_t * cur_pbm, bcm_pbmp_t * inactive_pbm, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modmap_group_get_async(int unit, bcm_port_t port, int * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modmap_group_max_get_async(int unit, int * max_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modmap_group_set_async(int unit, bcm_port_t port, int group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modport_add_async(int unit, bcm_port_t ing_port, bcm_module_t dest_modid, bcm_port_t dest_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modport_clear_async(int unit, bcm_port_t ing_port, bcm_module_t dest_modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modport_clear_all_async(int unit, bcm_port_t ing_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modport_delete_async(int unit, bcm_port_t ing_port, bcm_module_t dest_modid, bcm_port_t dest_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modport_get_async(int unit, bcm_port_t ing_port, bcm_module_t dest_modid, bcm_port_t * dest_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modport_get_all_async(int unit, bcm_port_t ing_port, bcm_module_t dest_modid, int dest_port_max, bcm_port_t * dest_port_array, int * dest_port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modport_set_async(int unit, bcm_port_t ing_port, bcm_module_t dest_modid, bcm_port_t dest_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_sysport_gport_get_async(int unit, bcm_gport_t sysport, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_sysport_gport_set_async(int unit, bcm_gport_t sysport, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_system_gport_map_create_async(int unit, bcm_stk_system_gport_map_t * sys_gport_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_system_gport_map_destroy_async(int unit, bcm_gport_t system_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_system_gport_map_get_async(int unit, bcm_stk_system_gport_map_t * sys_gport_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_ucbitmap_del_async(int unit, bcm_port_t port, int modid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_ucbitmap_get_async(int unit, int port, int modid, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_ucbitmap_set_async(int unit, int port, int modid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_update_callback_register_async(int unit, bcm_stk_cb_f cb, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_update_callback_unregister_async(int unit, bcm_stk_cb_f cb, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_gport_modport_get_async(int unit, bcm_gport_t subport_gport, bcm_module_t * module, bcm_port_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_create_async(int unit, bcm_subport_group_config_t * config, bcm_gport_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_destroy_async(int unit, bcm_gport_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_get_async(int unit, bcm_gport_t group, bcm_subport_group_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_linkphy_config_get_async(int unit, bcm_gport_t port, bcm_subport_group_linkphy_config_t * linkphy_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_linkphy_config_set_async(int unit, bcm_gport_t port, bcm_subport_group_linkphy_config_t * linkphy_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_traverse_async(int unit, bcm_gport_t subport_group, bcm_subport_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_linkphy_rx_error_register_async(int unit, bcm_subport_linkphy_rx_errors_t errors, bcm_subport_linkphy_rx_error_reg_info_t * reg_info, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_linkphy_rx_error_unregister_async(int unit, bcm_subport_linkphy_rx_errors_t errors, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_add_async(int unit, bcm_subport_config_t * config, bcm_gport_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_delete_async(int unit, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_get_async(int unit, bcm_gport_t port, bcm_subport_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_group_id_create_async(int unit, uint32 options, bcm_subport_port_group_t * port_group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_group_id_destroy_async(int unit, bcm_subport_port_group_t port_group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_group_id_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_group_id_get_async(int unit, bcm_subport_port_group_t port_group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_group_id_get_all_async(int unit, int max_size, bcm_subport_port_group_t * port_group_id_array, int * array_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_group_subport_multi_get_async(int unit, bcm_subport_port_group_t port_group_id, int max_subports, bcm_gport_t * subport_gports, int * num_subports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_group_subport_multi_set_async(int unit, bcm_subport_port_group_t port_group_id, int num_subports, bcm_gport_t * subport_gports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_stat_get_async(int unit, bcm_gport_t port, int stream_id, bcm_subport_stat_t stat_type, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_stat_set_async(int unit, bcm_gport_t port, int stream_id, bcm_subport_stat_t stat_type, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_traverse_async(int unit, bcm_subport_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_tunnel_pbmp_profile_create_async(int unit, int num_subports, bcm_gport_t * subport_gport, int * subport_pbmp_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_tunnel_pbmp_profile_destroy_async(int unit, int subport_pbmp_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_tunnel_pbmp_profile_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_tunnel_pbmp_profile_get_async(int unit, int num_subports, bcm_gport_t * subport_gport, int * subport_pbmp_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sum_config_get_async(int unit, bcm_sum_config_t * config_data, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sum_config_set_async(int unit, bcm_sum_config_t * config_data, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sum_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sum_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sum_stat_get_async(int unit, uint32 max_samples, bcm_sum_stat_info_t * stats_data, uint32 * num_samples, bcm_sum_stat_type_t stat_type, uint32 usec_sample_period, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_agm_create_async(int unit, uint32 options, bcm_switch_agm_info_t * agm_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_agm_destroy_async(int unit, bcm_switch_agm_id_t agm_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_agm_enable_get_async(int unit, bcm_switch_agm_id_t agm_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_agm_enable_set_async(int unit, bcm_switch_agm_id_t agm_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_agm_get_async(int unit, bcm_switch_agm_info_t * agm_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_agm_l3_ecmp_attach_get_async(int unit, bcm_switch_agm_id_t agm_id, bcm_if_t * l3_ecmp_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_agm_stat_clear_async(int unit, bcm_switch_agm_id_t agm_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_agm_stat_get_async(int unit, bcm_switch_agm_id_t agm_id, int nstat, bcm_switch_agm_stat_t * stat_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_agm_traverse_async(int unit, int flags, bcm_switch_agm_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_agm_trunk_attach_get_async(int unit, bcm_switch_agm_id_t agm_id, bcm_trunk_t * trunk_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_appl_signature_create_async(int unit, uint32 options, bcm_switch_appl_signature_info_t * appl_signature_info, bcm_switch_appl_signature_t * appl_signature, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_appl_signature_destroy_async(int unit, uint32 options, bcm_switch_appl_signature_t appl_signature, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_appl_signature_get_async(int unit, uint32 options, bcm_switch_appl_signature_t appl_signature, bcm_switch_appl_signature_info_t * appl_signature_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_appl_signature_get_all_async(int unit, uint32 options, int size, bcm_switch_appl_signature_t * appl_signature_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_appl_signature_prio_set_async(int unit, uint32 options, bcm_switch_appl_signature_t appl_signature, uint32 priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_chip_info_get_async(int unit, bcm_switch_chip_info_t info_type, int max_size, void * data_buf, int * actual_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_get_async(int unit, bcm_switch_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_indexed_get_async(int unit, bcm_switch_control_key_t key, bcm_switch_control_info_t * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_indexed_port_get_async(int unit, bcm_port_t port, bcm_switch_control_key_t key, bcm_switch_control_info_t * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_indexed_port_set_async(int unit, bcm_port_t port, bcm_switch_control_key_t key, bcm_switch_control_info_t value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_indexed_set_async(int unit, bcm_switch_control_key_t key, bcm_switch_control_info_t value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_port_get_async(int unit, bcm_port_t port, bcm_switch_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_port_set_async(int unit, bcm_port_t port, bcm_switch_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_set_async(int unit, bcm_switch_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_dosattack_event_get_async(int unit, uint32 flags, bcm_switch_dosattack_event_t event, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_dosattack_event_set_async(int unit, uint32 flags, bcm_switch_dosattack_event_t event, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_dram_init_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_dram_power_down_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_dram_power_down_cb_register_async(int unit, uint32 flags, bcm_switch_dram_power_down_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_dram_power_down_cb_unregister_async(int unit, bcm_switch_dram_power_down_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_dram_traffic_enable_set_async(int unit, uint32 flags, uint32 enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_dram_vendor_info_get_async(int unit, bcm_switch_dram_vendor_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_drop_event_mon_get_async(int unit, bcm_switch_drop_event_mon_t * monitor, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_drop_event_mon_set_async(int unit, bcm_switch_drop_event_mon_t * monitor, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_encap_create_async(int unit, bcm_switch_encap_info_t * encap_info, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_encap_dest_map_add_async(int unit, bcm_switch_encap_dest_t * encap_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_encap_dest_map_delete_async(int unit, bcm_switch_encap_dest_t * encap_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_encap_dest_map_get_async(int unit, bcm_switch_encap_dest_t * encap_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_encap_dest_map_traverse_async(int unit, bcm_switch_encap_dest_map_traverse_cb cb_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_encap_destroy_async(int unit, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_encap_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_encap_get_async(int unit, bcm_if_t encap_id, bcm_switch_encap_info_t * encap_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_encap_set_async(int unit, bcm_if_t encap_id, bcm_switch_encap_info_t * encap_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_encap_traverse_async(int unit, bcm_switch_encap_traverse_cb cb_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ep_recirc_drop_event_control_get_async(int unit, bcm_switch_ep_recirc_drop_event_control_t * drop_event_ctrl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ep_recirc_drop_event_control_set_async(int unit, bcm_switch_ep_recirc_drop_event_control_t * drop_event_ctrl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ep_recirc_profile_create_async(int unit, bcm_switch_ep_recirc_profile_t * recirc_profile, int * recirc_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ep_recirc_profile_destroy_async(int unit, int recirc_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ep_recirc_profile_get_async(int unit, int recirc_profile_id, bcm_switch_ep_recirc_profile_t * recirc_profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ep_recirc_profile_get_all_async(int unit, int * recirc_profile_id_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ep_recirc_trace_event_control_get_async(int unit, bcm_switch_ep_recirc_trace_event_control_t * trace_event_ctrl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ep_recirc_trace_event_control_set_async(int unit, bcm_switch_ep_recirc_trace_event_control_t * trace_event_ctrl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ep_recirc_trace_event_enable_get_async(int unit, bcm_pkt_trace_event_t trace_event, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ep_recirc_trace_event_enable_get_all_async(int unit, bcm_pkt_trace_event_t * trace_event_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ep_recirc_trace_event_enable_set_async(int unit, bcm_pkt_trace_event_t trace_event, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_event_control_get_async(int unit, bcm_switch_event_t event, bcm_switch_event_control_t type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_event_control_set_async(int unit, bcm_switch_event_t event, bcm_switch_event_control_t type, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_event_register_async(int unit, bcm_switch_event_cb_t cb, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_event_unregister_async(int unit, bcm_switch_event_cb_t cb, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_fec_property_get_async(int unit, bcm_switch_fec_property_config_t * fec_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hard_reset_cb_register_async(int unit, uint32 flags, bcm_switch_hard_reset_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hard_reset_cb_unregister_async(int unit, bcm_switch_hard_reset_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_bank_control_get_async(int unit, bcm_switch_hash_bank_control_t * bank_control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_bank_control_set_async(int unit, bcm_switch_hash_bank_control_t * bank_control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_bank_info_get_async(int unit, bcm_switch_hash_bank_info_t * bank_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_bank_multi_get_async(int unit, bcm_switch_hash_table_t hash_table, int array_size, bcm_switch_hash_bank_t * bank_array, int * num_banks, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_banks_config_get_async(int unit, bcm_switch_hash_table_t hash_table, uint32 bank_num, int * hash_type, uint32 * hash_offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_banks_config_set_async(int unit, bcm_switch_hash_table_t hash_table, uint32 bank_num, int hash_type, uint32 hash_offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_banks_max_get_async(int unit, bcm_switch_hash_table_t hash_table, uint32 * bank_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_create_async(int unit, bcm_field_group_t group, bcm_hash_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_create_qset_async(int unit, bcm_field_qset_t qset, bcm_hash_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_destroy_async(int unit, bcm_hash_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_get_async(int unit, bcm_hash_entry_t entry, bcm_switch_hash_entry_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_install_async(int unit, bcm_hash_entry_t entry, uint32 offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_reinstall_async(int unit, bcm_hash_entry_t entry, uint32 offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_remove_async(int unit, bcm_hash_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_set_async(int unit, bcm_hash_entry_t entry, bcm_switch_hash_entry_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_traverse_async(int unit, int flags, bcm_switch_hash_entry_traverse_cb cb_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_qualify_data_async(int unit, bcm_hash_entry_t entry, int qual_id, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_qualify_udf_async(int unit, bcm_hash_entry_t entry, bcm_udf_id_t udf_id, int length, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_qualify_udf_get_async(int unit, bcm_hash_entry_t entry, bcm_udf_id_t udf_id, int max_length, uint8 * data, uint8 * mask, int * actual_length, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_table_multi_get_async(int unit, bcm_switch_hash_bank_t bank_num, int array_size, bcm_switch_hash_table_t * table_array, int * num_tables, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ipv6_reserved_multicast_addr_get_async(int unit, bcm_ip6_t * ip6_addr, bcm_ip6_t * ip6_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ipv6_reserved_multicast_addr_multi_get_async(int unit, int inner, int num, bcm_ip6_t * ip6_addr, bcm_ip6_t * ip6_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ipv6_reserved_multicast_addr_multi_set_async(int unit, int inner, int num, bcm_ip6_t * ip6_addr, bcm_ip6_t * ip6_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ipv6_reserved_multicast_addr_set_async(int unit, bcm_ip6_t ip6_addr, bcm_ip6_t ip6_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_kbp_apptype_info_get_async(int unit, bcm_core_t core, bcm_field_AppType_t apptype, bcm_switch_kbp_apptype_info_t * apptype_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_kbp_info_get_async(int unit, bcm_core_t core, bcm_switch_kbp_info_t * kbp_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_l3_protocol_group_get_async(int unit, uint32 * group_members, bcm_l3_protocol_group_id_t * group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_l3_protocol_group_set_async(int unit, uint32 group_members, bcm_l3_protocol_group_id_t group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_led_control_data_read_async(int unit, int led_uc, int offset, uint8 * data, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_led_control_data_write_async(int unit, int led_uc, int offset, const uint8 * data, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_led_fw_load_async(int unit, int led_uc, const uint8 * data, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_led_fw_start_get_async(int unit, int led_uc, int * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_led_fw_start_set_async(int unit, int led_uc, int data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_led_port_to_uc_port_get_async(int unit, int port, int * led_uc, int * led_uc_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_led_port_to_uc_port_set_async(int unit, int port, int led_uc, int led_uc_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_led_uc_num_get_async(int unit, int * led_uc_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_lif_hit_get_async(int unit, bcm_switch_lif_hit_t * lif_hit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_lif_property_get_async(int unit, bcm_switch_lif_property_t lif_property, bcm_switch_lif_property_config_t * lif_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_lif_property_set_async(int unit, bcm_switch_lif_property_t lif_property, bcm_switch_lif_property_config_t * lif_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_match_config_add_async(int unit, bcm_switch_match_service_t match_service, bcm_switch_match_config_info_t * config_info, int * match_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_match_config_delete_async(int unit, bcm_switch_match_service_t match_service, int match_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_match_config_delete_all_async(int unit, bcm_switch_match_service_t match_service, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_match_config_get_async(int unit, bcm_switch_match_service_t match_service, int match_id, bcm_switch_match_config_info_t * config_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_match_config_set_async(int unit, bcm_switch_match_service_t match_service, int match_id, bcm_switch_match_config_info_t * config_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_match_config_traverse_async(int unit, bcm_switch_match_service_t match_service, bcm_switch_match_config_traverse_cb cb_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_match_control_get_async(int unit, bcm_switch_match_service_t match_service, bcm_switch_match_control_type_t control_type, bcm_gport_t gport, bcm_switch_match_control_info_t * control_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_match_control_set_async(int unit, bcm_switch_match_service_t match_service, bcm_switch_match_control_type_t control_type, bcm_gport_t gport, bcm_switch_match_control_info_t * control_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_match_control_traverse_async(int unit, bcm_switch_match_service_t match_service, bcm_switch_match_control_traverse_cb cb_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_network_group_config_get_async(int unit, bcm_switch_network_group_t source_network_group_id, bcm_switch_network_group_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_network_group_config_set_async(int unit, bcm_switch_network_group_t source_network_group_id, bcm_switch_network_group_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_object_count_get_async(int unit, bcm_switch_object_t object, int * entries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_object_count_multi_get_async(int unit, int object_size, bcm_switch_object_t * object_array, int * entries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_obm_classifier_mapping_get_async(int unit, bcm_gport_t gport, bcm_switch_obm_classifier_type_t switch_obm_classifier_type, bcm_switch_obm_classifier_t * switch_obm_classifier, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_obm_classifier_mapping_multi_get_async(int unit, bcm_gport_t port, bcm_switch_obm_classifier_type_t switch_obm_classifier_type, int array_max, bcm_switch_obm_classifier_t * switch_obm_classifier, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_obm_classifier_mapping_multi_set_async(int unit, bcm_gport_t gport, bcm_switch_obm_classifier_type_t switch_obm_classifier_type, int array_count, bcm_switch_obm_classifier_t * switch_obm_classifier, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_obm_classifier_mapping_set_async(int unit, bcm_gport_t gport, bcm_switch_obm_classifier_type_t switch_obm_classifier_type, bcm_switch_obm_classifier_t * switch_obm_classifier, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_olp_l2_addr_add_async(int unit, uint32 options, bcm_switch_olp_l2_addr_t * l2_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_olp_l2_addr_delete_async(int unit, bcm_switch_olp_l2_addr_t * l2_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_olp_l2_addr_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_olp_l2_addr_get_async(int unit, bcm_switch_olp_l2_addr_t * l2_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_olp_l2_addr_traverse_async(int unit, bcm_switch_olp_l2_addr_traverse_cb cb_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_opaque_tag_config_get_async(int unit, int index, bcm_switch_opaque_tag_params_t * opaque_tag_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_opaque_tag_config_set_async(int unit, int index, bcm_switch_opaque_tag_params_t * opaque_tag_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_payload_opaque_tag_config_get_async(int unit, int index, bcm_switch_opaque_tag_params_t * opaque_tag_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_payload_opaque_tag_config_set_async(int unit, int index, bcm_switch_opaque_tag_params_t * opaque_tag_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_pkt_info_hash_get_async(int unit, bcm_switch_pkt_info_t * pkt_info, bcm_gport_t * dst_gport, bcm_if_t * dst_intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_pkt_integrity_check_add_async(int unit, uint32 options, bcm_switch_pkt_integrity_match_t * match, bcm_switch_pkt_control_action_t * action, int priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_pkt_integrity_check_delete_async(int unit, bcm_switch_pkt_integrity_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_pkt_integrity_check_get_async(int unit, bcm_switch_pkt_integrity_match_t * match, bcm_switch_pkt_control_action_t * action, int * priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_pkt_protocol_control_add_async(int unit, uint32 options, bcm_switch_pkt_protocol_match_t * match, bcm_switch_pkt_control_action_t * action, int priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_pkt_protocol_control_delete_async(int unit, bcm_switch_pkt_protocol_match_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_pkt_protocol_control_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_pkt_protocol_control_get_async(int unit, bcm_switch_pkt_protocol_match_t * match, bcm_switch_pkt_control_action_t * action, int * priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_pkt_protocol_control_traverse_async(int unit, bcm_switch_pkt_protocol_control_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_pkt_trace_info_clear_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_pkt_trace_info_get_async(int unit, uint32 options, uint8 port, int len, uint8 * data, bcm_switch_pkt_trace_info_t * pkt_trace_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_pkt_trace_raw_data_get_async(int unit, uint32 options, uint8 port, int len, uint8 * data, uint32 raw_data_buf_size, uint8 * raw_data, uint32 * raw_data_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_rcpu_decap_priority_map_get_async(int unit, int decap_pri, int * internal_cpu_pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_rcpu_decap_priority_map_set_async(int unit, int decap_pri, int internal_cpu_pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_rcpu_encap_priority_map_get_async(int unit, uint32 flags, int internal_cpu_pri, int * encap_pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_rcpu_encap_priority_map_set_async(int unit, uint32 flags, int internal_cpu_pri, int encap_pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_reflector_create_async(int unit, uint32 flags, bcm_if_t * encap_id, bcm_switch_reflector_data_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_reflector_destroy_async(int unit, uint32 flags, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_reflector_get_async(int unit, uint32 flags, bcm_if_t encap_id, bcm_switch_reflector_data_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_reflector_traverse_async(int unit, uint32 flags, bcm_switch_reflector_traverse_cb traverse_cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_resource_utilization_get_async(int unit, bcm_switch_resource_utilization_query_t * resource, bcm_switch_resource_utilization_t * utilization, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_rov_get_async(int unit, uint32 flags, uint32 * rov, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ser_error_stat_clear_async(int unit, bcm_switch_ser_error_stat_type_t stat_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ser_error_stat_get_async(int unit, bcm_switch_ser_error_stat_type_t stat_type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ser_log_info_get_async(int unit, int id, bcm_switch_ser_log_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_service_get_async(int unit, bcm_switch_service_t service, bcm_switch_service_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_service_set_async(int unit, bcm_switch_service_t service, bcm_switch_service_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_stable_register_async(int unit, bcm_switch_read_func_t rf, bcm_switch_write_func_t wf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_svtag_egress_entry_add_async(int unit, uint32 flags, bcm_gport_t gport, bcm_switch_svtag_egress_info_t * svtag_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_svtag_egress_entry_delete_async(int unit, uint32 flags, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_svtag_egress_entry_get_async(int unit, uint32 flags, bcm_gport_t gport, bcm_switch_svtag_egress_info_t * svtag_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_svtag_egress_entry_traverse_async(int unit, uint32 flags, bcm_switch_svtag_egress_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_temperature_monitor_get_async(int unit, int temperature_max, bcm_switch_temperature_monitor_t * temperature_array, int * temperature_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_thermo_sensor_read_async(int unit, bcm_switch_thermo_sensor_type_t sensor_type, int interface_id, bcm_switch_thermo_sensor_t * sensor_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_tpid_add_async(int unit, uint32 options, bcm_switch_tpid_info_t * tpid_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_tpid_class_get_async(int unit, bcm_switch_tpid_class_t * tpid_class, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_tpid_delete_async(int unit, bcm_switch_tpid_info_t * tpid_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_tpid_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_tpid_get_async(int unit, bcm_switch_tpid_info_t * tpid_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_tpid_get_all_async(int unit, int size, bcm_switch_tpid_info_t * tpid_info_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_trace_event_mon_get_async(int unit, bcm_switch_trace_event_mon_t * monitor, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_trace_event_mon_set_async(int unit, bcm_switch_trace_event_mon_t * monitor, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_user_buffer_read_async(int unit, uint32 flags, bcm_switch_user_buffer_type_t buff_type, uint8 * buf, int offset, int nbytes, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_user_buffer_write_async(int unit, uint32 flags, bcm_switch_user_buffer_type_t buff_type, uint8 * buf, int offset, int nbytes, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_wide_data_extension_add_async(int unit, uint32 flags, bcm_switch_wide_data_extension_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_wide_data_extension_delete_async(int unit, uint32 flags, bcm_switch_wide_data_extension_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_wide_data_extension_get_async(int unit, uint32 flags, bcm_switch_wide_data_extension_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_wide_data_extension_traverse_async(int unit, bcm_switch_wide_data_extension_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdm_control_get_async(int unit, bcm_tdm_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdm_control_set_async(int unit, bcm_tdm_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdm_egress_editing_get_async(int unit, uint32 flags, bcm_gport_t gport, bcm_tdm_egress_editing_t * editing, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdm_egress_editing_set_async(int unit, uint32 flags, bcm_gport_t gport, bcm_tdm_egress_editing_t * editing, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdm_ingress_context_create_async(int unit, uint32 flags, int * ingress_context_id, bcm_tdm_ingress_context_t * editing, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdm_ingress_context_destroy_async(int unit, uint32 flags, int ingress_context_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdm_ingress_context_failover_get_async(int unit, uint32 flags, int nof_contexts, int * context_ids, int * context_en, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdm_ingress_context_failover_set_async(int unit, uint32 flags, int nof_contexts, int * context_ids, int * context_en, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdm_ingress_context_get_async(int unit, uint32 flags, int ingress_context_id, bcm_tdm_ingress_context_t * editing, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdm_interface_config_get_async(int unit, uint32 flags, bcm_gport_t gport, bcm_tdm_interface_config_t * interface_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdm_interface_config_set_async(int unit, uint32 flags, bcm_gport_t gport, bcm_tdm_interface_config_t * interface_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdm_stream_ingress_context_get_async(int unit, uint32 flags, int stream_id, int * ingress_context_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdm_stream_ingress_context_set_async(int unit, uint32 flags, bcm_gport_t gport, int ingress_context_id, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_PTP
void	bcm_tdpll_dpll_bandwidth_get_async(int unit, int stack_id, int dpll_index, bcm_tdpll_dpll_bandwidth_t * bandwidth, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_dpll_bandwidth_set_async(int unit, int stack_id, int dpll_index, bcm_tdpll_dpll_bandwidth_t * bandwidth, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_dpll_bindings_get_async(int unit, int stack_id, int dpll_index, bcm_tdpll_dpll_bindings_t * bindings, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_dpll_bindings_set_async(int unit, int stack_id, int dpll_index, bcm_tdpll_dpll_bindings_t * bindings, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_dpll_phase_control_get_async(int unit, int stack_id, int dpll_index, bcm_tdpll_dpll_phase_control_t * phase_control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_dpll_phase_control_set_async(int unit, int stack_id, int dpll_index, bcm_tdpll_dpll_phase_control_t * phase_control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_dpll_reference_get_async(int unit, int stack_id, int max_num_dpll, int * dpll_ref, int * num_dpll, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_essm_code_get_async(int unit, int stack_id, int dpll_index, bcm_esmc_essm_code_t * essm_code, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_essm_code_set_async(int unit, int stack_id, int dpll_index, bcm_esmc_essm_code_t essm_code, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_holdover_ql_get_async(int unit, int stack_id, int dpll_index, bcm_esmc_quality_level_t * ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_holdover_ql_set_async(int unit, int stack_id, int dpll_index, bcm_esmc_quality_level_t ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_mac_get_async(int unit, int stack_id, int dpll_index, bcm_mac_t * mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_mac_set_async(int unit, int stack_id, int dpll_index, bcm_mac_t * mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_ql_get_async(int unit, int stack_id, int dpll_index, bcm_esmc_quality_level_t * ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_ql_set_async(int unit, int stack_id, int dpll_index, bcm_esmc_quality_level_t ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_rx_enable_get_async(int unit, int stack_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_rx_enable_set_async(int unit, int stack_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_rx_portbitmap_get_async(int unit, int stack_id, int dpll_index, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_rx_portbitmap_set_async(int unit, int stack_id, int dpll_index, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_rx_state_machine_async(int unit, int stack_id, int ingress_port, bcm_esmc_pdu_data_t * esmc_pdu_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_tx_enable_get_async(int unit, int stack_id, int dpll_index, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_tx_enable_set_async(int unit, int stack_id, int dpll_index, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_tx_portbitmap_get_async(int unit, int stack_id, int dpll_index, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_tx_portbitmap_set_async(int unit, int stack_id, int dpll_index, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_event_callback_register_async(int unit, int stack_id, bcm_tdpll_event_cb_f event_cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_event_callback_unregister_async(int unit, int stack_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_best_get_async(int unit, int stack_id, int dpll_index, int * best_clock, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_callback_register_async(int unit, int stack_id, bcm_tdpll_callback_type_t type, bcm_tdpll_input_clock_cb callback, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_callback_unregister_async(int unit, int stack_id, bcm_tdpll_callback_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_control_async(int unit, int stack_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_enable_get_async(int unit, int stack_id, int clock_index, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_enable_set_async(int unit, int stack_id, int clock_index, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_frequency_error_get_async(int unit, int stack_id, int clock_index, int * freq_error_ppb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_frequency_get_async(int unit, int stack_id, int clock_index, uint32 * clock_frequency, uint32 * tsevent_frequency, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_frequency_set_async(int unit, int stack_id, int clock_index, uint32 clock_frequency, uint32 tsevent_frequency, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_l1mux_get_async(int unit, int stack_id, int clock_index, bcm_tdpll_input_clock_l1mux_t * l1mux, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_l1mux_set_async(int unit, int stack_id, int clock_index, bcm_tdpll_input_clock_l1mux_t * l1mux, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_lockout_get_async(int unit, int stack_id, int clock_index, int * lockout, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_lockout_set_async(int unit, int stack_id, int clock_index, int lockout, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_mac_get_async(int unit, int stack_id, int clock_index, bcm_mac_t * mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_mac_set_async(int unit, int stack_id, int clock_index, bcm_mac_t * mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_monitor_callback_register_async(int unit, int stack_id, bcm_tdpll_input_clock_monitor_cb monitor_cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_monitor_callback_unregister_async(int unit, int stack_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_monitor_interval_get_async(int unit, int stack_id, uint32 * monitor_interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_monitor_interval_set_async(int unit, int stack_id, uint32 monitor_interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_monitor_threshold_get_async(int unit, int stack_id, bcm_tdpll_input_clock_monitor_type_t threshold_type, uint32 * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_monitor_threshold_set_async(int unit, int stack_id, bcm_tdpll_input_clock_monitor_type_t threshold_type, uint32 threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_priority_get_async(int unit, int stack_id, int clock_index, int * priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_priority_set_async(int unit, int stack_id, int clock_index, int priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_ql_change_callback_register_async(int unit, int stack_id, bcm_tdpll_input_clock_ql_change_cb ql_change_cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_ql_change_callback_unregister_async(int unit, int stack_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_ql_enabled_get_async(int unit, int stack_id, int dpll_index, int * ql_enabled, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_ql_enabled_set_async(int unit, int stack_id, int dpll_index, int ql_enabled, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_ql_get_async(int unit, int stack_id, int clock_index, bcm_esmc_quality_level_t * ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_ql_set_async(int unit, int stack_id, int clock_index, bcm_esmc_quality_level_t ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_revertive_get_async(int unit, int stack_id, int dpll_index, int * revertive, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_revertive_set_async(int unit, int stack_id, int dpll_index, int revertive, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_selector_callback_register_async(int unit, int stack_id, bcm_tdpll_input_clock_selector_cb selector_cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_selector_callback_unregister_async(int unit, int stack_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_threshold_state_get_async(int unit, int stack_id, int clock_index, bcm_tdpll_input_clock_monitor_type_t threshold_type, int * threshold_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_valid_get_async(int unit, int stack_id, int clock_index, int * valid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_valid_set_async(int unit, int stack_id, int clock_index, int valid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_create_async(int unit, int stack_id, int clock_index, bcm_pbmp_t pbmp, bcm_tdpll_dpll_bandwidth_t * bandwidth, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_deriv_frequency_get_async(int unit, int stack_id, int clock_index, uint32 * deriv_frequency, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_deriv_frequency_set_async(int unit, int stack_id, int clock_index, uint32 deriv_frequency, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_enable_get_async(int unit, int stack_id, int clock_index, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_enable_set_async(int unit, int stack_id, int clock_index, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_holdover_data_get_async(int unit, int stack_id, int clock_index, bcm_tdpll_holdover_data_t * hdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_holdover_frequency_set_async(int unit, int stack_id, int clock_index, bcm_tdpll_frequency_correction_t hfreq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_holdover_mode_get_async(int unit, int stack_id, int clock_index, bcm_tdpll_holdover_mode_t * hmode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_holdover_mode_set_async(int unit, int stack_id, int clock_index, bcm_tdpll_holdover_mode_t hmode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_holdover_reset_async(int unit, int stack_id, int clock_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_synth_frequency_get_async(int unit, int stack_id, int clock_index, uint32 * synth_frequency, uint32 * tsevent_frequency, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_synth_frequency_set_async(int unit, int stack_id, int clock_index, uint32 synth_frequency, uint32 tsevent_frequency, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_PTP */
void	bcm_telemetry_config_get_async(int unit, int telemetry_instance, int core, int max_count, bcm_telemetry_config_t * telemetry_config_list, int * config_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_telemetry_config_set_async(int unit, int telemetry_instance, int core, int config_count, bcm_telemetry_config_t * telemetry_config_list, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_telemetry_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_telemetry_export_config_delete_async(int unit, int telemetry_instance, bcm_collector_t collector_id, int export_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_telemetry_export_config_get_async(int unit, int telemetry_instance, bcm_collector_t * collector_id, int * export_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_telemetry_export_config_set_async(int unit, int telemetry_instance, bcm_collector_t collector_id, int export_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_telemetry_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_telemetry_instance_export_stats_get_async(int unit, int telemetry_instance, bcm_collector_t collector_id, bcm_telemetry_instance_export_stats_t * stats, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_telemetry_instance_export_stats_set_async(int unit, int telemetry_instance, bcm_collector_t collector_id, bcm_telemetry_instance_export_stats_t * stats, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_telemetry_system_id_get_async(int unit, int max_system_id_len, int * system_id_len, uint8 * system_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_telemetry_system_id_set_async(int unit, int system_id_len, uint8 * system_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_bs_log_configure_get_async(int unit, bcm_time_bs_log_cfg_t * bs_log_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_bs_log_configure_set_async(int unit, bcm_time_bs_log_cfg_t bs_log_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_bs_time_get_async(int unit, bcm_time_spec_t * bs_time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_capture_cb_register_async(int unit, bcm_time_if_t id, bcm_time_capture_cb_type_t cb_type, bcm_time_capture_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_capture_cb_unregister_async(int unit, bcm_time_if_t id, bcm_time_capture_cb_type_t cb_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_capture_enable_set_async(int unit, bcm_time_if_t id, bcm_time_capture_t * time_capture, int enable, int * capture_handle, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_capture_get_async(int unit, bcm_time_if_t intf_id, bcm_time_capture_t * time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_deinit_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_heartbeat_enable_get_async(int unit, bcm_time_if_t id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_heartbeat_enable_set_async(int unit, bcm_time_if_t id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_heartbeat_register_async(int unit, bcm_time_if_t id, bcm_time_heartbeat_cb f, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_heartbeat_unregister_async(int unit, bcm_time_if_t id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_interface_add_async(int unit, bcm_time_interface_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_interface_delete_async(int unit, bcm_time_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_interface_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_interface_get_async(int unit, bcm_time_interface_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_interface_traverse_async(int unit, bcm_time_interface_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_synce_clock_get_async(int unit, bcm_time_synce_clock_src_type_t clk_src, bcm_time_synce_divisor_setting_t * divisor_setting, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_synce_clock_set_async(int unit, bcm_time_synce_clock_src_type_t clk_src, bcm_time_synce_divisor_setting_t * divisor_setting, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_synce_clock_source_control_get_async(int unit, bcm_time_synce_clock_source_config_t * clk_src_config, bcm_time_synce_clock_source_control_t control, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_synce_clock_source_control_set_async(int unit, bcm_time_synce_clock_source_config_t * clk_src_config, bcm_time_synce_clock_source_control_t control, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_tod_get_async(int unit, uint32 stages, bcm_time_tod_t * tod, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_tod_set_async(int unit, uint32 stages, bcm_time_tod_t * tod, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_trigger_enable_get_async(int unit, bcm_time_if_t id, uint32 * mode_flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_trigger_enable_set_async(int unit, bcm_time_if_t id, uint32 mode_flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_ts_counter_get_async(int unit, bcm_time_ts_counter_t * counter, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_ts_counter_set_async(int unit, bcm_time_ts_counter_t * counter, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_ts_counter_time_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_ts_offset_set_async(int unit, int64 ts_offset, uint64 ts_update_intv, int ts_counter, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_ts_time_convert_async(int unit, uint32 ts_val, bcm_time_spec_t * time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_ts_time_update_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_topo_port_get_async(int unit, int dest_modid, bcm_port_t * exit_port, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_trill_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_adjacency_add_async(int unit, bcm_trill_multicast_adjacency_t * trill_multicast_adjacency, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_adjacency_delete_async(int unit, bcm_trill_multicast_adjacency_t * trill_multicast_adjacency, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_adjacency_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_adjacency_traverse_async(int unit, bcm_trill_multicast_adjacency_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_delete_all_async(int unit, bcm_trill_name_t root_name, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_entry_add_async(int unit, bcm_trill_multicast_entry_t * trill_mc_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_entry_delete_async(int unit, bcm_trill_multicast_entry_t * trill_mc_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_entry_get_async(int unit, bcm_trill_multicast_entry_t * trill_mc_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_entry_traverse_async(int unit, bcm_trill_multicast_entry_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_source_add_async(int unit, bcm_trill_name_t root_name, bcm_trill_name_t source_rbridge_name, bcm_gport_t port, bcm_if_t encap_intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_source_delete_async(int unit, bcm_trill_name_t root_name, bcm_trill_name_t source_rbridge_name, bcm_gport_t port, bcm_if_t encap_intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_source_get_async(int unit, bcm_trill_name_t root_name, bcm_trill_name_t source_rbridge_name, bcm_gport_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_source_traverse_async(int unit, bcm_trill_multicast_source_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_port_add_async(int unit, bcm_trill_port_t * trill_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_port_delete_async(int unit, bcm_gport_t trill_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_port_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_port_get_async(int unit, bcm_trill_port_t * trill_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_port_get_all_async(int unit, int port_max, bcm_trill_port_t * port_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_rbridge_entry_add_async(int unit, bcm_trill_rbridge_t * trill_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_rbridge_entry_delete_async(int unit, bcm_trill_rbridge_t * trill_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_rbridge_entry_get_async(int unit, bcm_trill_rbridge_t * trill_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_stat_clear_async(int unit, bcm_port_t port, bcm_trill_stat_t stat, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_stat_get_async(int unit, bcm_port_t port, bcm_trill_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_stat_get32_async(int unit, bcm_port_t port, bcm_trill_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_vpn_create_async(int unit, bcm_trill_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_vpn_destroy_async(int unit, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_vpn_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_vpn_get_async(int unit, bcm_vpn_t vpn, bcm_trill_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_vpn_traverse_async(int unit, bcm_trill_vpn_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_trunk_agm_attach_async(int unit, bcm_trunk_t trunk_id, bcm_switch_agm_id_t agm_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_agm_attach_get_async(int unit, bcm_trunk_t trunk_id, bcm_switch_agm_id_t * agm_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_agm_detach_async(int unit, bcm_trunk_t trunk_id, bcm_switch_agm_id_t agm_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_bitmap_expand_async(int unit, bcm_pbmp_t * pbmp_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_chip_info_get_async(int unit, bcm_trunk_chip_info_t * ta_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_create_async(int unit, uint32 flags, bcm_trunk_t * tid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_destroy_async(int unit, bcm_trunk_t tid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_dlb_mon_config_get_async(int unit, bcm_trunk_t tid, bcm_trunk_dlb_mon_cfg_t * dlb_mon_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_dlb_mon_config_set_async(int unit, bcm_trunk_t tid, bcm_trunk_dlb_mon_cfg_t * dlb_mon_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_dlb_stat_get_async(int unit, bcm_trunk_t tid, bcm_trunk_dlb_stat_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_dlb_stat_set_async(int unit, bcm_trunk_t tid, bcm_trunk_dlb_stat_t type, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_dlb_stat_sync_get_async(int unit, bcm_trunk_t tid, bcm_trunk_dlb_stat_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_egress_get_async(int unit, bcm_trunk_t tid, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_egress_set_async(int unit, bcm_trunk_t tid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_ethertype_get_async(int unit, uint32 * flags, int ethertype_max, int * ethertype_array, int * ethertype_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_ethertype_set_async(int unit, uint32 flags, int ethertype_count, int * ethertype_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_failover_get_async(int unit, bcm_trunk_t tid, bcm_gport_t failport, int * psc, uint32 * flags, int array_size, bcm_gport_t * fail_to_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_failover_set_async(int unit, bcm_trunk_t tid, bcm_gport_t failport, int psc, uint32 flags, int count, bcm_gport_t * fail_to_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_find_async(int unit, bcm_module_t modid, bcm_gport_t gport, bcm_trunk_t * tid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_flexctr_object_get_async(int unit, bcm_trunk_t tid, uint16 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_flexctr_object_set_async(int unit, bcm_trunk_t tid, uint16 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_get_async(int unit, bcm_trunk_t tid, bcm_trunk_info_t * t_data, int member_max, bcm_trunk_member_t * member_array, int * member_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_gport_add_async(int unit, bcm_trunk_t tid, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_gport_delete_async(int unit, bcm_trunk_t tid, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_gport_delete_all_async(int unit, bcm_trunk_t tid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_gport_get_all_async(int unit, bcm_trunk_t tid, int gport_size, bcm_gport_t * gport_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_mcast_join_async(int unit, bcm_trunk_t tid, bcm_vlan_t vid, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_member_add_async(int unit, bcm_trunk_t tid, bcm_trunk_member_t * member, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_member_delete_async(int unit, bcm_trunk_t tid, bcm_trunk_member_t * member, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_member_delete_all_async(int unit, bcm_trunk_t tid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_member_status_get_async(int unit, bcm_gport_t member, int * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_member_status_set_async(int unit, bcm_gport_t member, int status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_ipmc_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, int idx, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_ipmc_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, int idx, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_mcast_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, int idx, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_mcast_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, int idx, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_non_ucast_get_async(int unit, bcm_trunk_t tid, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_non_ucast_set_async(int unit, bcm_trunk_t tid, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_ucast_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, int modid, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_ucast_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, int modid, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_vlan_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, bcm_vlan_t vid, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_vlan_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, bcm_vlan_t vid, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_pool_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, int * size, int weights[BCM_TRUNK_MAX_PORTCNT], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_pool_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, int size, const int weights[BCM_TRUNK_MAX_PORTCNT], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_pp_port_allocation_get_async(int unit, bcm_trunk_t trunk_id, uint32 flags, bcm_trunk_pp_port_allocation_info_t * allocation_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_pp_port_allocation_set_async(int unit, bcm_trunk_t trunk_id, uint32 flags, bcm_trunk_pp_port_allocation_info_t * allocation_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_psc_get_async(int unit, bcm_trunk_t tid, int * psc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_psc_set_async(int unit, bcm_trunk_t tid, int psc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_resilient_replace_async(int unit, uint32 flags, bcm_trunk_resilient_entry_t * match_entry, int * num_entries, bcm_trunk_resilient_entry_t * replace_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_resilient_traverse_async(int unit, uint32 flags, bcm_trunk_resilient_entry_t * match_entry, bcm_trunk_resilient_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_set_async(int unit, bcm_trunk_t tid, bcm_trunk_info_t * trunk_info, int member_count, bcm_trunk_member_t * member_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_spa_to_system_phys_port_map_get_async(int unit, uint32 flags, uint32 system_port_aggregate, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_stat_attach_async(int unit, bcm_trunk_t tid, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_stat_detach_async(int unit, bcm_trunk_t tid, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_stat_id_get_async(int unit, bcm_trunk_t tid, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_vplag_get_async(int unit, bcm_trunk_t tid, bcm_gport_t * vplag_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_with_vplag_create_async(int unit, uint32 flags, bcm_trunk_t * tid, bcm_gport_t * vplag_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_control_get_async(int unit, bcm_tsn_control_t type, uint32 * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_control_set_async(int unit, bcm_tsn_control_t type, uint32 arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_event_notification_traverse_async(int unit, bcm_tsn_event_notification_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_event_register_async(int unit, bcm_tsn_event_type_t event, bcm_tsn_event_source_t * src, bcm_tsn_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_event_unregister_async(int unit, bcm_tsn_event_type_t event, bcm_tsn_event_source_t * src, bcm_tsn_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_flow_config_get_async(int unit, bcm_tsn_flow_t flow_id, bcm_tsn_flow_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_flow_config_set_async(int unit, bcm_tsn_flow_t flow_id, bcm_tsn_flow_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_flowset_config_get_async(int unit, bcm_tsn_flowset_t flowset, bcm_tsn_pri_map_t * pri_map, bcm_tsn_flow_config_t * default_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_flowset_create_async(int unit, bcm_tsn_pri_map_t pri_map, bcm_tsn_flow_config_t * default_config, bcm_tsn_flowset_t * flowset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_flowset_destroy_async(int unit, bcm_tsn_flowset_t flowset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_flowset_flow_get_async(int unit, bcm_tsn_flowset_t flowset, int index, bcm_tsn_flow_t * flow_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_flowset_status_get_async(int unit, bcm_tsn_flowset_t flowset, bcm_tsn_flowset_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_flowset_traverse_async(int unit, bcm_tsn_flowset_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_ingress_mtu_config_get_async(int unit, bcm_tsn_ingress_mtu_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_ingress_mtu_config_set_async(int unit, bcm_tsn_ingress_mtu_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_ingress_stu_config_get_async(int unit, bcm_tsn_ingress_stu_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_ingress_stu_config_set_async(int unit, bcm_tsn_ingress_stu_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_mtu_profile_create_async(int unit, bcm_tsn_mtu_profile_type_t type, bcm_tsn_mtu_config_t * config, int * mtu_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_mtu_profile_destroy_async(int unit, int mtu_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_mtu_profile_get_async(int unit, int mtu_profile_id, bcm_tsn_mtu_profile_type_t * type, bcm_tsn_mtu_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_mtu_profile_set_async(int unit, int mtu_profile_id, bcm_tsn_mtu_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_mtu_profile_traverse_async(int unit, bcm_tsn_mtu_profile_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_port_control_get_async(int unit, bcm_gport_t port, bcm_tsn_control_t type, uint32 * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_port_control_set_async(int unit, bcm_gport_t port, bcm_tsn_control_t type, uint32 arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_port_stat_get_async(int unit, bcm_gport_t port, bcm_tsn_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_port_stat_get32_async(int unit, bcm_gport_t port, bcm_tsn_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_port_stat_multi_get_async(int unit, bcm_gport_t port, int nstat, bcm_tsn_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_port_stat_multi_get32_async(int unit, bcm_gport_t port, int nstat, bcm_tsn_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_port_stat_multi_set_async(int unit, bcm_gport_t port, int nstat, bcm_tsn_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_port_stat_multi_set32_async(int unit, bcm_gport_t port, int nstat, bcm_tsn_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_port_stat_set_async(int unit, bcm_gport_t port, bcm_tsn_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_port_stat_set32_async(int unit, bcm_gport_t port, bcm_tsn_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_port_stat_sync_get_async(int unit, bcm_gport_t port, bcm_tsn_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_port_stat_sync_get32_async(int unit, bcm_gport_t port, bcm_tsn_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_port_stat_sync_multi_get_async(int unit, bcm_gport_t port, int nstat, bcm_tsn_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_port_stat_sync_multi_get32_async(int unit, bcm_gport_t port, int nstat, bcm_tsn_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_pri_map_create_async(int unit, bcm_tsn_pri_map_config_t * config, bcm_tsn_pri_map_t * map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_pri_map_destroy_async(int unit, bcm_tsn_pri_map_t map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_pri_map_get_async(int unit, bcm_tsn_pri_map_t map_id, bcm_tsn_pri_map_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_pri_map_set_async(int unit, bcm_tsn_pri_map_t map_id, bcm_tsn_pri_map_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_pri_map_traverse_async(int unit, bcm_tsn_pri_map_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_auto_learn_enable_async(int unit, int enable, bcm_tsn_sr_auto_learn_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_auto_learn_enable_get_async(int unit, int * enabled, bcm_tsn_sr_auto_learn_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_auto_learn_group_create_async(int unit, bcm_tsn_sr_auto_learn_group_config_t * config, int * group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_auto_learn_group_destroy_async(int unit, int group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_auto_learn_group_get_async(int unit, int group_id, bcm_tsn_sr_auto_learn_group_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_auto_learn_group_set_async(int unit, int group_id, bcm_tsn_sr_auto_learn_group_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_auto_learn_group_traverse_async(int unit, bcm_tsn_sr_auto_learn_group_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flow_stat_get_async(int unit, bcm_tsn_sr_flow_t flow, bcm_tsn_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flow_stat_get32_async(int unit, bcm_tsn_sr_flow_t flow, bcm_tsn_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flow_stat_group_get_async(int unit, bcm_tsn_sr_flow_t flow, bcm_tsn_stat_group_type_t group_type, bcm_tsn_stat_group_t * stat_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flow_stat_group_set_async(int unit, bcm_tsn_sr_flow_t flow, bcm_tsn_stat_group_type_t group_type, bcm_tsn_stat_group_t stat_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flow_stat_multi_get_async(int unit, bcm_tsn_sr_flow_t flow, int nstat, bcm_tsn_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flow_stat_multi_get32_async(int unit, bcm_tsn_sr_flow_t flow, int nstat, bcm_tsn_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flow_stat_multi_set_async(int unit, bcm_tsn_sr_flow_t flow, int nstat, bcm_tsn_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flow_stat_multi_set32_async(int unit, bcm_tsn_sr_flow_t flow, int nstat, bcm_tsn_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flow_stat_set_async(int unit, bcm_tsn_sr_flow_t flow, bcm_tsn_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flow_stat_set32_async(int unit, bcm_tsn_sr_flow_t flow, bcm_tsn_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flow_stat_sync_get_async(int unit, bcm_tsn_sr_flow_t flow, bcm_tsn_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flow_stat_sync_get32_async(int unit, bcm_tsn_sr_flow_t flow, bcm_tsn_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flow_stat_sync_multi_get_async(int unit, bcm_tsn_sr_flow_t flow, int nstat, bcm_tsn_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flow_stat_sync_multi_get32_async(int unit, bcm_tsn_sr_flow_t flow, int nstat, bcm_tsn_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flowset_destroy_async(int unit, bcm_tsn_sr_flowset_t flowset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flowset_flow_get_async(int unit, bcm_tsn_sr_flowset_t flowset, int index, bcm_tsn_sr_flow_t * flow_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flowset_status_get_async(int unit, bcm_tsn_sr_flowset_t flowset, bcm_tsn_sr_flowset_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_flowset_traverse_async(int unit, int is_rx, bcm_tsn_sr_flowset_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_port_config_get_async(int unit, bcm_gport_t port, bcm_tsn_sr_port_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_port_config_set_async(int unit, bcm_gport_t port, bcm_tsn_sr_port_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_rx_flow_config_get_async(int unit, bcm_tsn_sr_flow_t flow_id, bcm_tsn_sr_rx_flow_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_rx_flow_config_set_async(int unit, bcm_tsn_sr_flow_t flow_id, bcm_tsn_sr_rx_flow_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_rx_flow_reset_async(int unit, uint32 flags, bcm_tsn_sr_flow_t flow_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_rx_flow_seqnum_history_get_async(int unit, bcm_tsn_sr_flow_t flow_id, int offset_in_bits, int max_size_in_bits, uint8 * history_bits, int * actual_size_in_bits, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_rx_flow_seqnum_history_set_async(int unit, bcm_tsn_sr_flow_t flow_id, int offset_in_bits, int size_in_bits, uint8 * history_bits, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_rx_flow_status_get_async(int unit, bcm_tsn_sr_flow_t flow_id, bcm_tsn_sr_rx_flow_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_rx_flowset_config_get_async(int unit, bcm_tsn_sr_flowset_t flowset, bcm_tsn_pri_map_t * pri_map, bcm_tsn_sr_rx_flow_config_t * default_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_rx_flowset_create_async(int unit, bcm_tsn_pri_map_t pri_map, bcm_tsn_sr_rx_flow_config_t * default_config, bcm_tsn_sr_flowset_t * flowset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_tx_flow_config_get_async(int unit, bcm_tsn_sr_flow_t flow_id, bcm_tsn_sr_tx_flow_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_tx_flow_config_set_async(int unit, bcm_tsn_sr_flow_t flow_id, bcm_tsn_sr_tx_flow_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_tx_flow_status_get_async(int unit, bcm_tsn_sr_flow_t flow_id, bcm_tsn_sr_tx_flow_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_tx_flowset_config_get_async(int unit, bcm_tsn_sr_flowset_t flowset, bcm_tsn_pri_map_t * pri_map, bcm_tsn_sr_tx_flow_config_t * default_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_sr_tx_flowset_create_async(int unit, bcm_tsn_pri_map_t pri_map, bcm_tsn_sr_tx_flow_config_t * default_config, bcm_tsn_sr_flowset_t * flowset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_stat_group_create_async(int unit, bcm_tsn_stat_group_type_t group_type, int count, bcm_tsn_stat_t * stat_arr, bcm_tsn_stat_group_t * id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_stat_group_destroy_async(int unit, bcm_tsn_stat_group_t id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_stat_group_get_async(int unit, bcm_tsn_stat_group_t id, bcm_tsn_stat_group_type_t * group_type, int max, bcm_tsn_stat_t * stat_arr, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_stat_group_set_async(int unit, bcm_tsn_stat_group_t id, int count, bcm_tsn_stat_t * stat_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_stat_group_traverse_async(int unit, bcm_tsn_stat_group_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_stat_threshold_get_async(int unit, bcm_tsn_stat_threshold_source_t source, bcm_tsn_stat_t stat, bcm_tsn_stat_threshold_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_stat_threshold_set_async(int unit, bcm_tsn_stat_threshold_source_t source, bcm_tsn_stat_t stat, bcm_tsn_stat_threshold_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_stu_profile_create_async(int unit, bcm_tsn_stu_profile_type_t type, bcm_tsn_stu_config_t * config, int * stu_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_stu_profile_destroy_async(int unit, int stu_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_stu_profile_get_async(int unit, int stu_profile_id, bcm_tsn_stu_profile_type_t * type, bcm_tsn_stu_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_stu_profile_set_async(int unit, int stu_profile_id, bcm_tsn_stu_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_stu_profile_traverse_async(int unit, bcm_tsn_stu_profile_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_control_get_async(int unit, int taf_gate, bcm_tsn_taf_control_t type, uint32 * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_control_set_async(int unit, int taf_gate, bcm_tsn_taf_control_t type, uint32 arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_cosq_mapping_profile_create_async(int unit, int * cosq_profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_cosq_mapping_profile_destroy_async(int unit, int cosq_profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_cosq_mapping_profile_get_async(int unit, int cosq_profile, bcm_cos_t priority, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_cosq_mapping_profile_set_async(int unit, int cosq_profile, bcm_cos_t priority, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_cosq_mapping_profile_traverse_async(int unit, bcm_tsn_taf_cosq_mapping_profile_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_event_register_async(int unit, bcm_tsn_taf_event_types_t event_types, int taf_gate, bcm_tsn_taf_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_event_unregister_async(int unit, bcm_tsn_taf_event_types_t event_types, int taf_gate, bcm_tsn_taf_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_create_async(int unit, int flags, int * taf_gate_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_destroy_async(int unit, int taf_gate_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_max_bytes_profile_create_async(int unit, int taf_gate_id, uint64 max_bytes, int * profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_max_bytes_profile_destroy_async(int unit, int taf_gate_id, int profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_max_bytes_profile_get_async(int unit, int taf_gate_id, int profile_id, uint64 * max_bytes, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_max_bytes_profile_set_async(int unit, int taf_gate_id, int profile_id, uint64 max_bytes, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_max_bytes_profile_traverse_async(int unit, int taf_gate_id, bcm_tsn_taf_gate_max_bytes_profile_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_stat_get_async(int unit, int taf_gate_id, bcm_tsn_taf_gate_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_stat_get32_async(int unit, int taf_gate_id, bcm_tsn_taf_gate_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_stat_multi_get_async(int unit, int taf_gate_id, int nstat, bcm_tsn_taf_gate_stat_t * stat_arr, uint64 * val_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_stat_multi_get32_async(int unit, int taf_gate_id, int nstat, bcm_tsn_taf_gate_stat_t * stat_arr, uint32 * val_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_stat_multi_set_async(int unit, int taf_gate_id, int nstat, bcm_tsn_taf_gate_stat_t * stat_arr, uint64 * val_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_stat_multi_set32_async(int unit, int taf_gate_id, int nstat, bcm_tsn_taf_gate_stat_t * stat_arr, uint32 * val_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_stat_set_async(int unit, int taf_gate_id, bcm_tsn_taf_gate_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_stat_set32_async(int unit, int taf_gate_id, bcm_tsn_taf_gate_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_stat_sync_get_async(int unit, int taf_gate_id, bcm_tsn_taf_gate_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_stat_sync_get32_async(int unit, int taf_gate_id, bcm_tsn_taf_gate_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_stat_sync_multi_get_async(int unit, int taf_gate_id, int nstat, bcm_tsn_taf_gate_stat_t * stat_arr, uint64 * val_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_stat_sync_multi_get32_async(int unit, int taf_gate_id, int nstat, bcm_tsn_taf_gate_stat_t * stat_arr, uint32 * val_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_gate_traverse_async(int unit, bcm_tsn_taf_gate_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_profile_commit_async(int unit, int taf_gate, bcm_tsn_taf_profile_id_t pid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_profile_create_async(int unit, int taf_gate, bcm_tsn_taf_profile_t * profile, bcm_tsn_taf_profile_id_t * pid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_profile_destroy_async(int unit, int taf_gate, bcm_tsn_taf_profile_id_t pid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_profile_destroy_all_async(int unit, int taf_gate, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_profile_get_async(int unit, int taf_gate, bcm_tsn_taf_profile_id_t pid, bcm_tsn_taf_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_profile_set_async(int unit, int taf_gate, bcm_tsn_taf_profile_id_t pid, bcm_tsn_taf_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_profile_status_get_async(int unit, int taf_gate, bcm_tsn_taf_profile_id_t pid, bcm_tsn_taf_profile_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_profile_traverse_async(int unit, int taf_gate, bcm_tsn_taf_profile_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tsn_taf_status_get_async(int unit, int taf_gate, bcm_tsn_taf_status_t type, uint32 * arg, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_tunnel_config_get_async(int unit, bcm_tunnel_config_t * tconfig, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_config_set_async(int unit, bcm_tunnel_config_t * tconfig, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_create_async(int unit, uint32 flags, int * dscp_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_destroy_async(int unit, int dscp_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_get_async(int unit, int dscp_map_id, bcm_tunnel_dscp_map_t * dscp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_port_get_async(int unit, bcm_port_t port, bcm_tunnel_dscp_map_t * dscp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_port_set_async(int unit, bcm_port_t port, bcm_tunnel_dscp_map_t * dscp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_set_async(int unit, int dscp_map_id, bcm_tunnel_dscp_map_t * dscp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_initiator_clear_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_initiator_create_async(int unit, bcm_l3_intf_t * intf, bcm_tunnel_initiator_t * tunnel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_initiator_destroy_async(int unit, bcm_gport_t tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_initiator_get_async(int unit, bcm_l3_intf_t * intf, bcm_tunnel_initiator_t * tunnel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_initiator_set_async(int unit, bcm_l3_intf_t * intf, bcm_tunnel_initiator_t * tunnel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_initiator_traverse_async(int unit, bcm_tunnel_initiator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_add_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_config_add_async(int unit, uint32 flags, bcm_tunnel_terminator_config_key_t * config_key, bcm_tunnel_terminator_config_action_t * config_action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_config_delete_async(int unit, bcm_tunnel_terminator_config_key_t * config_key, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_config_get_async(int unit, bcm_tunnel_terminator_config_key_t * config_key, bcm_tunnel_terminator_config_action_t * config_action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_config_traverse_async(int unit, bcm_tunnel_terminator_config_traverse_info_t additional_info, bcm_tunnel_terminator_config_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_create_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_delete_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_flexctr_object_get_async(int unit, bcm_tunnel_terminator_t * terminator, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_flexctr_object_set_async(int unit, bcm_tunnel_terminator_t * terminator, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_get_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_stat_attach_async(int unit, bcm_tunnel_terminator_t * terminator, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_stat_detach_async(int unit, bcm_tunnel_terminator_t * terminator, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_stat_id_get_async(int unit, bcm_tunnel_terminator_t * terminator, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_traverse_async(int unit, bcm_tunnel_terminator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_update_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_vlan_get_async(int unit, bcm_gport_t tunnel, bcm_vlan_vector_t * vlan_vec, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_vlan_set_async(int unit, bcm_gport_t tunnel, bcm_vlan_vector_t vlan_vec, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_tx_async(int unit, bcm_pkt_t * tx_pkt, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_array_async(int unit, bcm_pkt_t ** pkt, int count, bcm_pkt_cb_f all_done_cb, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BCM_RPC_SUPPORT
void	bcm_tx_cpu_tunnel_async(bcm_pkt_t * pkt, int dest_unit, int remote_port, uint32 flags, bcm_cpu_tunnel_mode_t mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_cpu_tunnel_get_async(bcm_tx_cpu_tunnel_f * f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_cpu_tunnel_set_async(bcm_tx_cpu_tunnel_f f, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BCM_RPC_SUPPORT */
#ifdef	BROADCOM_DEBUG
void	bcm_tx_dv_dump_async(int unit, void * dv_p, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_tx_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_list_async(int unit, bcm_pkt_t * pkt, bcm_pkt_cb_f all_done_cb, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_pkt_l2_map_async(int unit, bcm_pkt_t * pkt, bcm_mac_t dest_mac, int vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_pkt_setup_async(int unit, bcm_pkt_t * tx_pkt, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_tx_show_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_txbeacon_destroy_async(int unit, bcm_txbeacon_pkt_id_t pkt_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_txbeacon_init_async(int unit, int uC, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_txbeacon_pkt_get_async(int unit, bcm_txbeacon_t * txbeacon, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_txbeacon_pkt_setup_async(int unit, bcm_txbeacon_t * txbeacon, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_txbeacon_start_async(int unit, bcm_txbeacon_pkt_id_t pkt_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_txbeacon_stop_async(int unit, bcm_txbeacon_pkt_id_t pkt_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_txbeacon_traverse_async(int unit, bcm_txbeacon_traverse_cb_t trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_abstract_pkt_format_info_get_async(int unit, bcm_udf_abstract_pkt_format_t abstract_pkt_format, bcm_udf_abstract_pkt_format_info_t * pkt_format_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_abstract_pkt_format_object_list_get_async(int unit, bcm_udf_abstract_pkt_format_t abstract_pkt_format, int max, bcm_udf_id_t * udf_id_list, int * actual, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_abstract_pkt_format_supported_list_get_async(int unit, int max, bcm_udf_abstract_pkt_format_t * abstr_pkt_fmt_list, int * actual, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_chunk_create_async(int unit, bcm_udf_alloc_hints_t * hints, bcm_udf_chunk_info_t * udf_chunk_info, bcm_udf_id_t * udf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_chunk_info_get_async(int unit, bcm_udf_id_t udf_id, bcm_udf_chunk_info_t * udf_chunk_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_create_async(int unit, bcm_udf_alloc_hints_t * hints, bcm_udf_t * udf_info, bcm_udf_id_t * udf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_destroy_async(int unit, bcm_udf_id_t udf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_flow_based_chunk_arrange_get_async(int unit, bcm_udf_tunnel_term_flow_type_t flow_type, uint32 * chunk_bmap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_flow_based_chunk_arrange_set_async(int unit, bcm_udf_tunnel_term_flow_type_t flow_type, uint32 chunk_bmap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_get_async(int unit, bcm_udf_id_t udf_id, bcm_udf_t * udf_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_get_all_async(int unit, int max, bcm_udf_id_t * udf_id_list, int * actual, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_hash_config_add_async(int unit, uint32 options, bcm_udf_hash_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_hash_config_delete_async(int unit, bcm_udf_hash_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_hash_config_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_hash_config_get_async(int unit, bcm_udf_hash_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_hash_config_get_all_async(int unit, int max, bcm_udf_hash_config_t * config_list, int * actual, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_multi_abstract_pkt_format_info_get_async(int unit, bcm_udf_abstract_pkt_format_t abstr_pkt_fmt, bcm_udf_multi_abstract_pkt_format_info_t * pkt_fmt_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_multi_chunk_create_async(int unit, bcm_udf_alloc_hints_t * hints, bcm_udf_multi_chunk_info_t * info, bcm_udf_id_t * udf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_multi_chunk_info_get_async(int unit, bcm_udf_id_t udf_id, bcm_udf_multi_chunk_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_oper_mode_get_async(int unit, bcm_udf_oper_mode_t * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_oper_mode_set_async(int unit, bcm_udf_oper_mode_t mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_action_get_async(int unit, bcm_udf_pkt_format_id_t pkt_format_id, bcm_udf_pkt_format_action_t action, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_action_set_async(int unit, bcm_udf_pkt_format_id_t pkt_format_id, bcm_udf_pkt_format_action_t action, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_add_async(int unit, bcm_udf_id_t udf_id, bcm_udf_pkt_format_id_t pkt_format_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_create_async(int unit, bcm_udf_pkt_format_options_t options, bcm_udf_pkt_format_info_t * pkt_format, bcm_udf_pkt_format_id_t * pkt_format_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_delete_async(int unit, bcm_udf_id_t udf_id, bcm_udf_pkt_format_id_t pkt_format_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_delete_all_async(int unit, bcm_udf_id_t udf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_destroy_async(int unit, bcm_udf_pkt_format_id_t pkt_format_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_get_async(int unit, bcm_udf_pkt_format_id_t pkt_format_id, int max, bcm_udf_id_t * udf_id_list, int * actual, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_get_all_async(int unit, bcm_udf_id_t udf_id, int max, bcm_udf_pkt_format_id_t * pkt_format_id_list, int * actual, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_info_get_async(int unit, bcm_udf_pkt_format_id_t pkt_format_id, bcm_udf_pkt_format_info_t * pkt_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_range_checker_chunk_info_get_async(int unit, uint8 * num_chunks, uint32 * chunk_bmap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_block_get_async(int unit, bcm_vlan_t vlan, bcm_vlan_block_t * vlan_block, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_block_set_async(int unit, bcm_vlan_t vlan, bcm_vlan_block_t * vlan_block, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_get_async(int unit, bcm_vlan_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_port_get_async(int unit, int port, bcm_vlan_control_port_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_port_set_async(int unit, int port, bcm_vlan_control_port_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_set_async(int unit, bcm_vlan_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_vlan_get_async(int unit, bcm_vlan_t vlan, bcm_vlan_control_vlan_t * control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_vlan_selective_get_async(int unit, bcm_vlan_t vlan, uint32 valid_fields, bcm_vlan_control_vlan_t * control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_vlan_selective_set_async(int unit, bcm_vlan_t vlan, uint32 valid_fields, bcm_vlan_control_vlan_t * control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_vlan_set_async(int unit, bcm_vlan_t vlan, bcm_vlan_control_vlan_t control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_create_async(int unit, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_cross_connect_add_async(int unit, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_gport_t port_1, bcm_gport_t port_2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_cross_connect_delete_async(int unit, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_cross_connect_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_cross_connect_traverse_async(int unit, bcm_vlan_cross_connect_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_default_get_async(int unit, bcm_vlan_t * vid_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_default_set_async(int unit, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_destroy_async(int unit, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_add_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t new_vid, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_delete_async(int unit, int port, bcm_vlan_t old_vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_get_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t * new_vid, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_add_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t new_vid, int int_prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_delete_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_get_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t * new_vid, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_traverse_async(int unit, bcm_vlan_dtag_range_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_traverse_async(int unit, bcm_vlan_dtag_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_gport_add_async(int unit, bcm_vlan_t vlan, bcm_gport_t port, int flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_gport_delete_async(int unit, bcm_vlan_t vlan, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_gport_delete_all_async(int unit, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_gport_extended_delete_async(int unit, bcm_vlan_t vlan, bcm_gport_t port, int flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_gport_get_async(int unit, bcm_vlan_t vlan, bcm_gport_t port, int * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_gport_get_all_async(int unit, bcm_vlan_t vlan, int array_max, bcm_gport_t * gport_array, int * flags_array, int * array_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_gport_info_get_async(int unit, bcm_vlan_gport_info_t * vlan_gport_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_action_add_async(int unit, bcm_vlan_ip_t * vlan_ip, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_action_delete_async(int unit, bcm_vlan_ip_t * vlan_ip, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_action_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_action_get_async(int unit, bcm_vlan_ip_t * vlan_ip, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_action_traverse_async(int unit, bcm_vlan_ip_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_add_async(int unit, bcm_vlan_ip_t * vlan_ip, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_delete_async(int unit, bcm_vlan_ip_t * vlan_ip, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_list_async(int unit, bcm_vlan_data_t ** listp, int * countp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_list_by_pbmp_async(int unit, bcm_pbmp_t ports, bcm_vlan_data_t ** listp, int * countp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_list_destroy_async(int unit, bcm_vlan_data_t * list, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_action_add_async(int unit, bcm_mac_t mac, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_action_delete_async(int unit, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_action_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_action_get_async(int unit, bcm_mac_t mac, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_action_traverse_async(int unit, bcm_vlan_mac_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_add_async(int unit, bcm_mac_t mac, bcm_vlan_t vid, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_delete_async(int unit, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_match_action_add_async(int unit, uint32 options, bcm_vlan_match_info_t * match_info, bcm_vlan_action_set_t * action_set, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_match_action_delete_async(int unit, bcm_vlan_match_info_t * match_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_match_action_delete_all_async(int unit, bcm_vlan_match_t match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_match_action_get_async(int unit, bcm_vlan_match_info_t * match_info, bcm_vlan_action_set_t * action_set, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_match_action_multi_get_async(int unit, bcm_vlan_match_t match, int size, bcm_vlan_match_info_t * match_info_array, bcm_vlan_action_set_t * action_set_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mcast_flood_get_async(int unit, bcm_vlan_t vlan, bcm_vlan_mcast_flood_t * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mcast_flood_set_async(int unit, bcm_vlan_t vlan, bcm_vlan_mcast_flood_t mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_policer_get_async(int unit, bcm_vlan_t vlan, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_policer_set_async(int unit, bcm_vlan_t vlan, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_add_async(int unit, bcm_vlan_t vid, bcm_pbmp_t pbmp, bcm_pbmp_t ubmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_create_async(int unit, bcm_vlan_port_t * vlan_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_default_action_delete_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_default_action_get_async(int unit, bcm_port_t port, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_default_action_set_async(int unit, bcm_port_t port, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_destroy_async(int unit, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_egress_default_action_delete_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_egress_default_action_get_async(int unit, bcm_port_t port, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_egress_default_action_set_async(int unit, bcm_port_t port, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_find_async(int unit, bcm_vlan_port_t * vlan_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_get_async(int unit, bcm_vlan_t vid, bcm_pbmp_t * pbmp, bcm_pbmp_t * ubmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_protocol_action_add_async(int unit, bcm_port_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_protocol_action_delete_async(int unit, bcm_port_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_protocol_action_delete_all_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_protocol_action_get_async(int unit, bcm_port_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_protocol_action_traverse_async(int unit, bcm_vlan_port_protocol_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_remove_async(int unit, bcm_vlan_t vid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_stat_multi_get_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_stat_multi_get32_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_stat_multi_set_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_stat_multi_set32_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_translation_get_async(int unit, bcm_vlan_port_translation_t * vlan_port_translation, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_translation_set_async(int unit, bcm_vlan_port_translation_t * vlan_port_translation, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_traverse_async(int unit, bcm_vlan_port_traverse_info_t * additional_info, bcm_vlan_port_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_attach_async(int unit, bcm_vlan_t vlan, int qmid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_attach_get_async(int unit, bcm_vlan_t vlan, int * qmid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_create_async(int unit, uint32 flags, int * qmid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_destroy_async(int unit, int qmid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_detach_async(int unit, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_detach_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_get_async(int unit, int qmid, int pkt_pri, int cfi, int * queue, int * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_set_async(int unit, int qmid, int pkt_pri, int cfi, int queue, int color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_attach_async(int unit, bcm_vlan_t vlan, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_counter_get_async(int unit, bcm_vlan_t vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_counter_set_async(int unit, bcm_vlan_t vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_counter_sync_get_async(int unit, bcm_vlan_t vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_detach_async(int unit, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_detach_with_id_async(int unit, bcm_vlan_t vlan, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_enable_set_async(int unit, bcm_vlan_t vlan, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_get_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_get32_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_id_get_async(int unit, bcm_vlan_t vlan, bcm_vlan_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_multi_get_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_multi_get32_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_multi_set_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_multi_set32_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_set_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_set32_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_sync_get_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_sync_get32_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stg_get_async(int unit, bcm_vlan_t vid, bcm_stg_t * stg_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stg_set_async(int unit, bcm_vlan_t vid, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stp_get_async(int unit, bcm_vlan_t vid, bcm_port_t port, int * stp_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stp_set_async(int unit, bcm_vlan_t vid, bcm_port_t port, int stp_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_add_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_class_get_async(int unit, bcm_vlan_translate_action_class_t * action_class, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_class_set_async(int unit, bcm_vlan_translate_action_class_t * action_class, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_create_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_delete_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_id_create_async(int unit, uint32 flags, int * action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_id_destroy_async(int unit, uint32 flags, int action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_id_destroy_all_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_id_get_async(int unit, uint32 flags, int action_id, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_id_set_async(int unit, uint32 flags, int action_id, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_add_async(int unit, bcm_gport_t port, bcm_vlan_t outer_vlan_low, bcm_vlan_t outer_vlan_high, bcm_vlan_t inner_vlan_low, bcm_vlan_t inner_vlan_high, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_delete_async(int unit, bcm_gport_t port, bcm_vlan_t outer_vlan_low, bcm_vlan_t outer_vlan_high, bcm_vlan_t inner_vlan_low, bcm_vlan_t inner_vlan_high, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_get_async(int unit, bcm_gport_t port, bcm_vlan_t outer_vlan_low, bcm_vlan_t outer_vlan_high, bcm_vlan_t inner_vlan_low, bcm_vlan_t inner_vlan_high, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_traverse_async(int unit, bcm_vlan_translate_action_range_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_traverse_async(int unit, bcm_vlan_translate_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_add_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t new_vid, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_delete_async(int unit, int port, bcm_vlan_t old_vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_add_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_delete_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_extended_add_async(int unit, bcm_vlan_translate_egress_key_config_t * key_config, bcm_vlan_translate_egress_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_extended_delete_async(int unit, bcm_vlan_translate_egress_key_config_t * key_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_extended_get_async(int unit, bcm_vlan_translate_egress_key_config_t * key_config, bcm_vlan_translate_egress_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_extended_traverse_async(int unit, bcm_vlan_translate_egress_action_extended_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_traverse_async(int unit, bcm_vlan_translate_egress_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_add_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t new_vid, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_delete_async(int unit, int port, bcm_vlan_t old_vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_flexctr_attach_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_flexctr_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_flexctr_detach_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_flexctr_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_flexctr_detach_all_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_flexctr_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int array_size, bcm_vlan_flexctr_config_t * config_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_get_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t * new_vid, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_gport_action_add_async(int unit, bcm_gport_t port, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_gport_action_delete_async(int unit, bcm_gport_t port, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_gport_action_get_async(int unit, bcm_gport_t port, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_attach_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_counter_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_counter_set_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_counter_sync_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_detach_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_enable_set_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_get32_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_id_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_multi_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_multi_get32_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_multi_set_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_multi_set32_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_set_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_set32_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_sync_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_sync_get32_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_traverse_async(int unit, bcm_vlan_translate_egress_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_flexctr_attach_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_flexctr_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_flexctr_detach_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_flexctr_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_flexctr_detach_all_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_flexctr_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int array_size, bcm_vlan_flexctr_config_t * config_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_get_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t * new_vid, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_add_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t new_vid, int int_prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_delete_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_get_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t * new_vid, int * int_prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_traverse_async(int unit, bcm_vlan_translate_range_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_attach_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_counter_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_counter_set_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_counter_sync_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_detach_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_enable_set_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_get32_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_id_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_multi_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_multi_get32_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_multi_set_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_multi_set32_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_set_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_set32_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_sync_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_sync_get32_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_traverse_async(int unit, bcm_vlan_translate_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_vector_flags_set_async(int unit, bcm_vlan_vector_t vlan_vector, uint32 flags_mask, uint32 flags_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_vector_stp_set_async(int unit, bcm_vlan_vector_t vlan_vector, bcm_port_t port, int stp_state, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_vlan_vpn_create_async(int unit, bcm_vlan_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_vpn_destroy_async(int unit, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_vpn_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_vpn_get_async(int unit, bcm_vpn_t vpn, bcm_vlan_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_vpn_traverse_async(int unit, bcm_vlan_vpn_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_vswitch_create_async(int unit, bcm_vlan_t * vsi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_create_with_id_async(int unit, bcm_vlan_t vsi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_cross_connect_add_async(int unit, bcm_vswitch_cross_connect_t * gports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_cross_connect_delete_async(int unit, bcm_vswitch_cross_connect_t * gports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_cross_connect_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_cross_connect_get_async(int unit, bcm_vswitch_cross_connect_t * gports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_cross_connect_traverse_async(int unit, bcm_vswitch_cross_connect_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_destroy_async(int unit, bcm_vlan_t vsi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_flexible_connect_add_async(int unit, uint32 flags, bcm_vswitch_flexible_connect_match_t * port_match, bcm_vswitch_flexible_connect_fwd_t * port_fwd, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_flexible_connect_delete_async(int unit, bcm_vswitch_flexible_connect_match_t * port_match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_flexible_connect_get_async(int unit, uint32 flags, bcm_vswitch_flexible_connect_match_t * port_match, bcm_vswitch_flexible_connect_fwd_t * port_fwd, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_port_add_async(int unit, bcm_vlan_t vsi, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_port_delete_async(int unit, bcm_vlan_t vsi, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_port_delete_all_async(int unit, bcm_vlan_t vsi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_port_get_async(int unit, bcm_gport_t port, bcm_vlan_t * vsi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_port_traverse_async(int unit, bcm_vlan_t vsi, bcm_vswitch_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_vxlan_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_attach_async(int unit, bcm_ip_t vxlan_dip, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_counter_get_async(int unit, bcm_ip_t vxlan_dip, bcm_vxlan_dip_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_counter_set_async(int unit, bcm_ip_t vxlan_dip, bcm_vxlan_dip_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_detach_async(int unit, bcm_ip_t vxlan_dip, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_id_get_async(int unit, bcm_ip_t vxlan_dip, bcm_vxlan_dip_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_multi_get_async(int unit, bcm_ip_t vxlan_dip, int nstat, bcm_vxlan_dip_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_multi_get32_async(int unit, bcm_ip_t vxlan_dip, int nstat, bcm_vxlan_dip_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_multi_set_async(int unit, bcm_ip_t vxlan_dip, int nstat, bcm_vxlan_dip_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_multi_set32_async(int unit, bcm_ip_t vxlan_dip, int nstat, bcm_vxlan_dip_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_network_domain_config_add_async(int unit, bcm_vxlan_network_domain_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_network_domain_config_get_async(int unit, bcm_vxlan_network_domain_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_network_domain_config_remove_async(int unit, bcm_vxlan_network_domain_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_network_domain_config_traverse_async(int unit, bcm_vxlan_network_domain_config_additional_info_t * additional_info, bcm_vxlan_network_domain_config_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_port_add_async(int unit, bcm_vpn_t l2vpn, bcm_vxlan_port_t * vxlan_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_port_delete_async(int unit, bcm_vpn_t l2vpn, bcm_gport_t vxlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_port_delete_all_async(int unit, bcm_vpn_t l2vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_port_get_async(int unit, bcm_vpn_t l2vpn, bcm_vxlan_port_t * vxlan_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_port_get_all_async(int unit, bcm_vpn_t l2vpn, int port_max, bcm_vxlan_port_t * port_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_port_traverse_async(int unit, bcm_vxlan_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_attach_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_counter_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_vxlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_counter_set_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_vxlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_counter_sync_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_vxlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_detach_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_enable_set_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_id_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_vxlan_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_multi_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_vxlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_multi_get32_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_vxlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_multi_set_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_vxlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_multi_set32_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_vxlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_initiator_create_async(int unit, bcm_tunnel_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_initiator_destroy_async(int unit, bcm_gport_t vxlan_tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_initiator_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_initiator_get_async(int unit, bcm_tunnel_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_initiator_traverse_async(int unit, bcm_tunnel_initiator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_terminator_create_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_terminator_destroy_async(int unit, bcm_gport_t vxlan_tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_terminator_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_terminator_get_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_terminator_traverse_async(int unit, bcm_tunnel_terminator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_terminator_update_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_vpn_create_async(int unit, bcm_vxlan_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_vpn_destroy_async(int unit, bcm_vpn_t l2vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_vpn_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_vpn_get_async(int unit, bcm_vpn_t l2vpn, bcm_vxlan_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_vpn_traverse_async(int unit, bcm_vxlan_vpn_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_warmboot_get_async(int unit, int * warmboot, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_warmboot_set_async(int unit, int warmboot, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_wlan_client_add_async(int unit, bcm_wlan_client_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_client_delete_async(int unit, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_client_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_client_get_async(int unit, bcm_mac_t mac, bcm_wlan_client_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_client_traverse_async(int unit, bcm_wlan_client_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_port_add_async(int unit, bcm_wlan_port_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_port_delete_async(int unit, bcm_gport_t wlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_port_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_port_get_async(int unit, bcm_gport_t wlan_port_id, bcm_wlan_port_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_port_traverse_async(int unit, bcm_wlan_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_tunnel_initiator_create_async(int unit, bcm_tunnel_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_tunnel_initiator_destroy_async(int unit, bcm_gport_t wlan_tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_tunnel_initiator_get_async(int unit, bcm_tunnel_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
#ifdef	INCLUDE_XFLOW_MACSEC
void	bcm_xflow_macsec_control_get_async(int unit, uint32 flags, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_control_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_control_set_async(int unit, uint32 flags, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_control_t type, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_flow_create_async(int unit, uint32 flags, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_decrypt_flow_info_t * flow_info, int priority, bcm_xflow_macsec_flow_id_t * flow_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_flow_default_policy_get_async(int unit, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_policy_id_t * policy_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_flow_destroy_async(int unit, bcm_xflow_macsec_flow_id_t flow_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_flow_enable_get_async(int unit, bcm_xflow_macsec_flow_id_t flow_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_flow_enable_set_async(int unit, bcm_xflow_macsec_flow_id_t flow_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_flow_get_async(int unit, bcm_xflow_macsec_flow_id_t flow_id, bcm_xflow_macsec_decrypt_flow_info_t * flow_info, int * priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_flow_set_async(int unit, bcm_xflow_macsec_flow_id_t flow_id, bcm_xflow_macsec_decrypt_flow_info_t * flow_info, int priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_policy_create_async(int unit, uint32 flags, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_decrypt_policy_info_t * policy_info, bcm_xflow_macsec_policy_id_t * policy_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_policy_destroy_async(int unit, bcm_xflow_macsec_policy_id_t policy_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_policy_get_async(int unit, bcm_xflow_macsec_policy_id_t policy_id, bcm_xflow_macsec_decrypt_policy_info_t * policy_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_policy_set_async(int unit, bcm_xflow_macsec_policy_id_t policy_id, bcm_xflow_macsec_decrypt_policy_info_t * policy_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_svtag_cpu_flex_map_enable_get_async(int unit, bcm_xflow_macsec_instance_id_t instance_id, int index, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_svtag_cpu_flex_map_enable_set_async(int unit, bcm_xflow_macsec_instance_id_t instance_id, int index, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_svtag_cpu_flex_map_get_async(int unit, bcm_xflow_macsec_instance_id_t instance_id, int index, bcm_xflow_macsec_svtag_cpu_flex_map_info_t * svtag_cpu_flex_map_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_decrypt_svtag_cpu_flex_map_set_async(int unit, bcm_xflow_macsec_instance_id_t instance_id, int index, bcm_xflow_macsec_svtag_cpu_flex_map_info_t * svtag_cpu_flex_map_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_event_deregister_async(int unit, bcm_xflow_macsec_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_event_register_async(int unit, bcm_xflow_macsec_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_handle_create_async(int unit, bcm_xflow_macsec_handle_info_t * handle_info, bcm_xflow_macsec_id_t * id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_handle_info_get_async(int unit, bcm_xflow_macsec_id_t id, bcm_xflow_macsec_handle_info_t * handle_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_instance_pbmp_map_get_async(int unit, int instance_max, bcm_xflow_macsec_instance_pbmp_t * instance_pbmp_map, int * instance_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_ipsec_secure_assoc_create_async(int unit, uint32 flags, bcm_xflow_macsec_secure_chan_id_t chan_id, bcm_xflow_macsec_ipsec_secure_assoc_info_t * assoc_info, bcm_xflow_macsec_secure_assoc_id_t * assoc_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_ipsec_secure_assoc_destroy_async(int unit, bcm_xflow_macsec_secure_assoc_id_t assoc_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_ipsec_secure_assoc_get_async(int unit, bcm_xflow_macsec_secure_assoc_id_t assoc_id, bcm_xflow_macsec_ipsec_secure_assoc_info_t * assoc_info, bcm_xflow_macsec_secure_chan_id_t * chan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_ipsec_secure_assoc_set_async(int unit, bcm_xflow_macsec_secure_assoc_id_t assoc_id, bcm_xflow_macsec_ipsec_secure_assoc_info_t * assoc_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_ipsec_secure_assoc_traverse_async(int unit, bcm_xflow_macsec_secure_chan_id_t chan_id, bcm_xflow_macsec_ipsec_secure_assoc_traverse_cb callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_ipsec_secure_chan_create_async(int unit, uint32 flags, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_ipsec_secure_chan_info_t * chan_info, bcm_xflow_macsec_secure_chan_id_t * chan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_ipsec_secure_chan_destroy_async(int unit, bcm_xflow_macsec_secure_chan_id_t chan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_ipsec_secure_chan_get_async(int unit, bcm_xflow_macsec_secure_chan_id_t chan_id, bcm_xflow_macsec_ipsec_secure_chan_info_t * chan_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_ipsec_secure_chan_info_traverse_async(int unit, uint32 flags, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_ipsec_chan_traverse_cb callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_ipsec_secure_chan_set_async(int unit, uint32 flags, bcm_xflow_macsec_secure_chan_id_t chan_id, bcm_xflow_macsec_ipsec_secure_chan_info_t * chan_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_mac_addr_control_get_async(int unit, uint32 flags, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_mac_addr_control_t control_type, bcm_xflow_macsec_mac_addr_info_t * control_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_mac_addr_control_set_async(int unit, uint32 flags, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_mac_addr_control_t control_type, bcm_xflow_macsec_mac_addr_info_t * control_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_mtu_get_async(int unit, int flags, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_mtu_t mtu_sel, uint32 * mtu, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_mtu_set_async(int unit, int flags, bcm_xflow_macsec_instance_id_t instance_id, uint32 mtu, bcm_xflow_macsec_mtu_t * mtu_sel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_port_control_get_async(int unit, uint32 flags, bcm_gport_t gport, bcm_xflow_macsec_port_control_t control_type, bcm_xflow_macsec_port_info_t * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_port_control_set_async(int unit, uint32 flags, bcm_gport_t gport, bcm_xflow_macsec_port_control_t control_type, bcm_xflow_macsec_port_info_t * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_port_info_get_async(int unit, bcm_port_t port, bcm_xflow_macsec_port_info_t * port_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_port_info_set_async(int unit, bcm_port_t port, bcm_xflow_macsec_port_info_t * port_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_port_map_info_get_async(int unit, uint32 flags, bcm_gport_t gport, bcm_xflow_macsec_port_map_info_t * port_map_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_port_rsvd_secure_chan_get_async(int unit, uint32 flags, bcm_gport_t port, bcm_xflow_macsec_secure_chan_id_t * chan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_sectag_etype_get_async(int unit, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_sectag_ethertype_t sectag_etype_sel, uint32 * sectag_etype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_sectag_etype_set_async(int unit, int flags, bcm_xflow_macsec_instance_id_t instance_id, uint32 sectag_etype, bcm_xflow_macsec_sectag_ethertype_t * sectag_etype_sel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_secure_assoc_create_async(int unit, uint32 flags, bcm_xflow_macsec_secure_chan_id_t chan_id, bcm_xflow_macsec_secure_assoc_info_t * assoc_info, bcm_xflow_macsec_secure_assoc_id_t * assoc_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_secure_assoc_destroy_async(int unit, bcm_xflow_macsec_secure_assoc_id_t assoc_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_secure_assoc_get_async(int unit, bcm_xflow_macsec_secure_assoc_id_t assoc_id, bcm_xflow_macsec_secure_assoc_info_t * assoc_info, bcm_xflow_macsec_secure_chan_id_t * chan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_secure_assoc_set_async(int unit, bcm_xflow_macsec_secure_assoc_id_t assoc_id, bcm_xflow_macsec_secure_assoc_info_t * assoc_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_secure_assoc_traverse_async(int unit, bcm_xflow_macsec_secure_chan_id_t chan_id, bcm_xflow_macsec_secure_assoc_traverse_cb callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_secure_chan_create_async(int unit, uint32 flags, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_secure_chan_info_t * chan_info, int priority, bcm_xflow_macsec_secure_chan_id_t * chan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_secure_chan_destroy_async(int unit, bcm_xflow_macsec_secure_chan_id_t chan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_secure_chan_enable_get_async(int unit, bcm_xflow_macsec_secure_chan_id_t chan_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_secure_chan_enable_set_async(int unit, bcm_xflow_macsec_secure_chan_id_t chan_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_secure_chan_get_async(int unit, bcm_xflow_macsec_secure_chan_id_t chan_id, bcm_xflow_macsec_secure_chan_info_t * chan_info, int * priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_secure_chan_info_traverse_async(int unit, uint32 flags, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_chan_traverse_cb callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_secure_chan_set_async(int unit, uint32 flags, bcm_xflow_macsec_secure_chan_id_t chan_id, bcm_xflow_macsec_secure_chan_info_t * chan_info, int priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_stat_get_async(int unit, uint32 flags, bcm_xflow_macsec_id_t id, bcm_xflow_macsec_stat_type_t stat_type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_stat_multi_get_async(int unit, uint32 flags, bcm_xflow_macsec_id_t id, uint32 num_stats, bcm_xflow_macsec_stat_type_t * stat_type_array, uint64 * value_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_stat_multi_set_async(int unit, uint32 flags, bcm_xflow_macsec_id_t id, uint32 num_stats, bcm_xflow_macsec_stat_type_t * stat_type_array, uint64 * value_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_stat_set_async(int unit, uint32 flags, bcm_xflow_macsec_id_t id, bcm_xflow_macsec_stat_type_t stat_type, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_subport_id_get_async(int unit, bcm_xflow_macsec_id_t id, bcm_xflow_macsec_subport_id_t * macsec_subport_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_vlan_tpid_array_get_async(int unit, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_vlan_tpid_t * vlan_tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_vlan_tpid_array_index_get_async(int unit, bcm_xflow_macsec_instance_id_t instance_id, uint32 vlan_tpid, uint8 * tpid_index_sel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_xflow_macsec_vlan_tpid_array_set_async(int unit, bcm_xflow_macsec_instance_id_t instance_id, bcm_xflow_macsec_vlan_tpid_t * vlan_tpid, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_XFLOW_MACSEC */

#endif	/* BCM_ASYNC_SUPPORT */
#endif	/* !_BCM_ASYNC_H */
