# $Id: Makefile.linux-gts,v 0.1 2017/06/01 00:00:00 spaulraj Exp $
# This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
# 
# Copyright 2007-2020 Broadcom Inc. All rights reserved.

#
# x86_64 build for Fedora 28 - system make file.
#
#


#############################################################################
# this segment is custom and not sourced from any existing makefile         #
# (base thanks to http:<slash><slash>confluence.broadcom.com/display/NTSWSW/X86+System) #
#############################################################################

# set up a basic feature list. tcl, etc. #
#ifeq (,$(FEATURE_LIST))
#FEATURE_LIST = TCL BFD PTP CINT L3 I2C MEM_SCAN EDITLINE BCM_SAL_PROFILE CUSTOMER TEST CHASSIS MSTP RCPU
#endif

# some basic path variables for tools and kernel source, etc #
export GCCVER := 8.1.0
export BINUTILSVER := 2.27
# For GCC versions >= 4.7
USE_GCC_TOOLS := 1
#enables executables > 2GB
#CFLAGS += -mcmodel=medium

TOOLCHAIN_DIR = /tools/oss/packages/x86_64-rhel6/gcc/$(GCCVER)
BINUTILS_DIR = /tools/oss/packages/x86_64-rhel6/binutils/$(BINUTILSVER)/bin
#KERNDIR       ?= /projects/NTSW_SW_USRS_2/gili/FedoraKernel
KERNDIR       ?= /projects/NTSW_SW_USRS_4/tools/FedoraKernel

# set up cross compile prefix, tools dir variables. #
#export CROSS_COMPILE := x86_64-fedora-linux-gnu-
export TOOLS_DIR     := $(TOOLCHAIN_DIR)/bin

# architecture. #
ARCH                = x86_64
#TARGET_ARCHITECTURE = x86_64-fedora-linux-gnu
TARGET_ARCHITECTURE := x86_64-pc-linux-gnu

ifeq (,$(BUILD_32BITS_EXEC))
TOOLCHAIN_LIB_DIR:= $(TOOLCHAIN_DIR)/lib64
else
TOOLCHAIN_LIB_DIR:= $(TOOLCHAIN_DIR)/lib
endif
# set up paths. #
#export LIBRARY_PATH := $(TOOLCHAIN_LIB_DIR):$(LIBRARY_PATH)
export PATH         := $(TOOLS_DIR):$(BINUTILS_DIR):$(KERNDIR):$(PATH)

# set up SYSINC path #
export SYSINC := $(TOOLCHAIN_DIR)/lib/gcc/$(TARGET_ARCHITECTURE)/$(GCCVER)/include

# CFLAGS/CFGFLAGS #
ifdef SAND_CHIPS
CFLAGS += -D__DUNE_GTS_BCM_CPU__
endif
CFLAGS += -DUSE_LINUX_BDE_MMAP=1
#CFLAGS += -DBDE_LINUX_USE_MSI_INTERRUPT
#
#Flags to prevent gcc 8.1.0 new warnings to appear as errors.
#(All these flags have been removed so as to activate the maximal types of
#warning)
#
#CFLAGS += -Wno-error=unused-value
#CFLAGS += -Wno-error=unused-but-set-variable
#CFLAGS += -Wno-error=maybe-uninitialized
#CFLAGS += -Wno-error=aggressive-loop-optimizations
#CFLAGS += -Wno-error=array-bounds

# set up KFLAGS appropriately. #
# -fno-builtin needed for using kernel's version of memcpy instead of the gcc inline version
ifeq (,$(KFLAGS))
KFLAGS := -I$(KERNDIR) -lc -nostdinc -isystem $(SYSINC) -Iinclude -I$(KERNDIR)/arch/x86/include -I$(KERNDIR)/include -I$(KERNDIR)/include/generated -I$(KERNDIR)/arch/x86/include/generated -I$(KERNDIR)/usr/include -I$(KERNDIR)/arch/x86/include/uapi -I$(KERNDIR)/include/uapi -include $(KERNDIR)/include/generated/autoconf.h -D__KERNEL__ -DNDEBUG -Wundef -Wno-error=unused-value -Wno-error=maybe-uninitialized -Wno-error=cpp -Wstrict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -Wno-format-security -fno-delete-null-pointer-checks -O2 -m64 -mtune=generic -mno-red-zone -mcmodel=kernel -funit-at-a-time -maccumulate-outgoing-args -fstack-protector -DCONFIG_AS_CFI=1 -DCONFIG_AS_CFI_SIGNAL_FRAME=1 -pipe -Wno-sign-compare -fno-asynchronous-unwind-tables -Wframe-larger-than=1024 -fno-omit-frame-pointer -Wdeclaration-after-statement -Wno-pointer-sign -fno-strict-overflow -fno-dwarf2-cfi-asm -fconserve-stack -fno-builtin -mpreferred-stack-boundary=3
endif


######################################################################
# this segment comes from make/Makefile.linux-x86-smp_generic_64-2_6 #
######################################################################
CFGFLAGS += -DSAL_SPL_LOCK_ON_IRQ

ifeq (,$(BUILD_32BITS_EXEC))
CFLAGS += -DPTRS_ARE_64BITS -DLONGS_ARE_64BITS
else
CFLAGS += -m32
CFGFLAGS += -DSAL_BDE_32BIT_USER_64BIT_KERNEL
endif
CFLAGS += -DPHYS_ADDRS_ARE_64BITS


###########################################################################################
# This segment comes from make/Makefile.linux-x86-generic-common-2_6 (with modifications) #
###########################################################################################

# Default architecture
ifeq (,$(ARCH))
ARCH = x86_64
endif

# Noisy kernel build
KBUILD_VERBOSE = 1

export ARCH KBUILD_VERBOSE KERNDIR

# Default Linux include directory
ifeq (,$(LINUX_INCLUDE))
LINUX_INCLUDE := $(KERNDIR)/include
endif

# autoconf.h was moved in later kernels
AUTOCONF = $(KERNDIR)/include/generated/autoconf.h
ifeq (,$(shell ls $(AUTOCONF) 2>/dev/null))
AUTOCONF = $(KERNDIR)/include/linux/autoconf.h
endif

# gcc system include path
#SYSINC = $(shell gcc -print-search-dirs | grep install | cut -c 10-)include


##############################################################
# This segment comes from make/Makefile.linux-x86-common-2_6 #
##############################################################
CFGFLAGS += -DSYS_BE_PIO=0 -DSYS_BE_PACKET=0 -DSYS_BE_OTHER=0
ENDIAN = LE_HOST=1
CFGFLAGS += -D$(ENDIAN)
CFGFLAGS += -DBCM_PLATFORM_STRING=\"X86\"
CFGFLAGS += -DSAL_BDE_DMA_MEM_DEFAULT=32

# Extra variables.
EXTRA_CFLAGS = -D"KBUILD_STR(s)=\#s" $(basename_flags) $(modname_flags)

comma = ,
basetarget = $(basename $(notdir $@))
modname = $(basetarget)

name-fix = $(subst $(comma),_,$(subst -,_,$1))
basename_flags = -D"KBUILD_BASENAME=KBUILD_STR($(call name-fix,$(basetarget)))"
modname_flags  = $(if $(filter 1,$(words $(modname))),\
-D"KBUILD_MODNAME=KBUILD_STR($(call name-fix,$(modname)))")

ifneq ($(targetplat),user)
# By default we exclude -Werror from x86 kernel builds
BCM_CFLAGS   = -Wall
include ${SDK}/make/Makefile.linux-kernel-4_18
endif
