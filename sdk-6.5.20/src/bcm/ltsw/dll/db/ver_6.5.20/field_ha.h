/**************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated by HA parser from YAML formated file.
 * Edits to this file will be lost when it is regenerated.
 * Tool: bcmha/scripts/ha_yml_parser.py
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#ifndef FIELD_HA_H
#define FIELD_HA_H

#include <shr/shr_ha.h>

#define BCMI_FP_GROUP_ID_MAX (0x00000FFF)
#define BCMI_FP_ENTRY_ID_MAX (0x000FFFFF)
#define BCMI_FP_PRESEL_ID_MAX (0x0000FFFF)
#define BCMI_FP_PRESEL_GID_MAX (0x00000003)
#define BCMI_FP_BITWID 32
#define BCMI_FIELD_HA_BLK_ID_ARRAY_SIZE 8
#define BCMI_FIELD_HA_GID_BMP_SIZE (((BCMI_FP_GROUP_ID_MAX) + BCMI_FP_BITWID - 1) / BCMI_FP_BITWID)
#define BCMI_FIELD_HA_EID_BMP_SIZE (((BCMI_FP_ENTRY_ID_MAX) + BCMI_FP_BITWID - 1) / BCMI_FP_BITWID)
#define BCMI_FIELD_HA_PID_BMP_SIZE (((BCMI_FP_PRESEL_ID_MAX) + BCMI_FP_BITWID - 1) / BCMI_FP_BITWID)
#define BCMI_FIELD_HA_PGID_BMP_SIZE (((BCMI_FP_PRESEL_GID_MAX) + BCMI_FP_BITWID - 1) / BCMI_FP_BITWID)
#define BCMI_FIELD_HA_QSET_MAX 100
#define BCMI_FIELD_HA_ASET_MAX 50
#define BCMI_FIELD_HA_PRESEL_MAX 10
#define BCMI_FIELD_HA_ENT_ACTIONS_MAX 50
#define BCMI_FIELD_HA_HINT_ID_BASE 1
#define BCMI_FIELD_HA_HINT_ID_MAX 256
#define BCMI_FIELD_HA_MAX_HINTS_PER_HINTID 40

typedef enum {
   BCMI_FIELD_HA_BLK_TYPE_ROOT = 1,
   BCMI_FIELD_HA_BLK_TYPE_IFP_PRESEL_INFO = 2,
   BCMI_FIELD_HA_BLK_TYPE_IFP_PRESEL_HASH = 3,
   BCMI_FIELD_HA_BLK_TYPE_IFP_PRESEL_OPER = 4,
   BCMI_FIELD_HA_BLK_TYPE_IFP_GROUP_INFO = 5,
   BCMI_FIELD_HA_BLK_TYPE_IFP_GROUP_HASH = 6,
   BCMI_FIELD_HA_BLK_TYPE_IFP_GROUP_OPER = 7,
   BCMI_FIELD_HA_BLK_TYPE_IFP_ENTRY_INFO = 8,
   BCMI_FIELD_HA_BLK_TYPE_IFP_ENTRY_HASH = 9,
   BCMI_FIELD_HA_BLK_TYPE_IFP_ENTRY_OPER = 10,
   BCMI_FIELD_HA_BLK_TYPE_IFP_SBR_OPER = 11,
   BCMI_FIELD_HA_BLK_TYPE_VFP_PRESEL_INFO = 12,
   BCMI_FIELD_HA_BLK_TYPE_VFP_PRESEL_HASH = 13,
   BCMI_FIELD_HA_BLK_TYPE_VFP_PRESEL_OPER = 14,
   BCMI_FIELD_HA_BLK_TYPE_VFP_GROUP_INFO = 15,
   BCMI_FIELD_HA_BLK_TYPE_VFP_GROUP_HASH = 16,
   BCMI_FIELD_HA_BLK_TYPE_VFP_GROUP_OPER = 17,
   BCMI_FIELD_HA_BLK_TYPE_VFP_ENTRY_INFO = 18,
   BCMI_FIELD_HA_BLK_TYPE_VFP_ENTRY_HASH = 19,
   BCMI_FIELD_HA_BLK_TYPE_VFP_ENTRY_OPER = 20,
   BCMI_FIELD_HA_BLK_TYPE_VFP_SBR_OPER = 21,
   BCMI_FIELD_HA_BLK_TYPE_EFP_PRESEL_INFO = 22,
   BCMI_FIELD_HA_BLK_TYPE_EFP_PRESEL_HASH = 23,
   BCMI_FIELD_HA_BLK_TYPE_EFP_PRESEL_OPER = 24,
   BCMI_FIELD_HA_BLK_TYPE_EFP_GROUP_INFO = 25,
   BCMI_FIELD_HA_BLK_TYPE_EFP_GROUP_HASH = 26,
   BCMI_FIELD_HA_BLK_TYPE_EFP_GROUP_OPER = 27,
   BCMI_FIELD_HA_BLK_TYPE_EFP_ENTRY_INFO = 28,
   BCMI_FIELD_HA_BLK_TYPE_EFP_ENTRY_HASH = 29,
   BCMI_FIELD_HA_BLK_TYPE_EFP_ENTRY_OPER = 30,
   BCMI_FIELD_HA_BLK_TYPE_EFP_SBR_OPER = 31,
   BCMI_FIELD_HA_BLK_TYPE_EMFP_PRESEL_INFO = 32,
   BCMI_FIELD_HA_BLK_TYPE_EMFP_PRESEL_HASH = 33,
   BCMI_FIELD_HA_BLK_TYPE_EMFP_PRESEL_OPER = 34,
   BCMI_FIELD_HA_BLK_TYPE_EMFP_GROUP_INFO = 35,
   BCMI_FIELD_HA_BLK_TYPE_EMFP_GROUP_HASH = 36,
   BCMI_FIELD_HA_BLK_TYPE_EMFP_GROUP_OPER = 37,
   BCMI_FIELD_HA_BLK_TYPE_EMFP_ENTRY_INFO = 38,
   BCMI_FIELD_HA_BLK_TYPE_EMFP_ENTRY_HASH = 39,
   BCMI_FIELD_HA_BLK_TYPE_EMFP_ENTRY_OPER = 40,
   BCMI_FIELD_HA_BLK_TYPE_EMFP_SBR_OPER = 41,
   BCMI_FIELD_HA_BLK_TYPE_IFP_COLOR_TBL_INFO = 42,
   BCMI_FIELD_HA_BLK_TYPE_IFP_COLOR_TBL_PDD_INFO = 43,
   BCMI_FIELD_HA_BLK_TYPE_IFP_COLOR_TBL_SBR_INFO = 44,
   BCMI_FIELD_HA_BLK_TYPE_EFP_COLOR_TBL_INFO = 45,
   BCMI_FIELD_HA_BLK_TYPE_EFP_COLOR_TBL_PDD_INFO = 46,
   BCMI_FIELD_HA_BLK_TYPE_EFP_COLOR_TBL_SBR_INFO = 47,
   BCMI_FIELD_HA_BLK_TYPE_EMFT_PRESEL_INFO = 48,
   BCMI_FIELD_HA_BLK_TYPE_EMFT_PRESEL_HASH = 49,
   BCMI_FIELD_HA_BLK_TYPE_EMFT_PRESEL_OPER = 50,
   BCMI_FIELD_HA_BLK_TYPE_EMFT_GROUP_INFO = 51,
   BCMI_FIELD_HA_BLK_TYPE_EMFT_GROUP_HASH = 52,
   BCMI_FIELD_HA_BLK_TYPE_EMFT_GROUP_OPER = 53,
   BCMI_FIELD_HA_BLK_TYPE_EMFT_ENTRY_INFO = 54,
   BCMI_FIELD_HA_BLK_TYPE_EMFT_ENTRY_HASH = 55,
   BCMI_FIELD_HA_BLK_TYPE_EMFT_ENTRY_OPER = 56,
   BCMI_FIELD_HA_BLK_TYPE_EMFT_SBR_OPER = 57,
   BCMI_FIELD_HA_BLK_TYPE_HINT_LIST = 58,
   BCMI_FIELD_HA_BLK_TYPE_HINT_ENTRY = 59,
   BCMI_FIELD_HA_BLK_TYPE_LAST_COUNT = 60
} bcmi_field_ha_blk_type_t;

typedef struct {
   /*! HA Blk ID bitmap array. */
   uint32_t w[BCMI_FIELD_HA_BLK_ID_ARRAY_SIZE];
} bcmi_field_ha_blk_id_bmp_t;

#define BCMI_FIELD_HA_BLK_ID_BMP_T_ID 0xaa21237865972d43

typedef struct {
   /*! Minimum HA block id allowed. */
   uint8_t min_ha_blk_id;
   /*! Maximum HA block id allowed. */
   uint8_t max_ha_blk_id;
   /*! HA - used blk ID bitmap. */
   bcmi_field_ha_blk_id_bmp_t in_use_ha_blk_id_bmp;
} bcmi_field_ha_root_blk_t;

#define BCMI_FIELD_HA_ROOT_BLK_T_ID 0x6900d988f8824b92

typedef struct {
   /*! HA block size */
   uint32_t blk_size;
   /*! Back up block ID. */
   uint8_t backup_blk_id;
   /*! Free HA element in this HA block. This is used to maintain list of free HA elements in this HA block. */
   uint32_t free_blk_offset;
   /*! Number of free HA elements. */
   uint32_t free_ha_element_count;
   /*! Signature. */
   uint32_t signature;
   /*! Block type */
   bcmi_field_ha_blk_type_t blk_type;
} bcmi_field_ha_blk_hdr_t;

#define BCMI_FIELD_HA_BLK_HDR_T_ID 0x1ef07b08fe548718

typedef struct {
   /*! Unique Id assigned to HA block created by BCMFP. This will be same as sub component id used while creating the HA block using bcmi_field_ha_mem_alloc API. */
   uint16_t blk_id;
   /*! Block info will be derived for a certain s/w state during run time. This block offset is the offset in the HA block of "blk_id". This is multiples of size of bcmi_field_ha_element_t. */
   uint32_t blk_offset;
} bcmi_field_ha_blk_info_t;

#define BCMI_FIELD_HA_BLK_INFO_T_ID 0x7eda6b8d36056461

typedef struct {
   /*! Group ID bitmap array. */
   uint32_t w[BCMI_FIELD_HA_GID_BMP_SIZE];
} bcmi_field_grpid_bmp_t;

#define BCMI_FIELD_GRPID_BMP_T_ID 0x7d693ef5e1c4d172

typedef struct {
   /*! Bitmap of created field group IDs */
   bcmi_field_grpid_bmp_t grpid_bmp;
   /*! Value of last allocated group ID */
   int last_allocated_gid;
   /*! Value of last allocated priority */
   int last_allocated_prio;
   /*! Max Group ID */
   int gid_max;
   /*! Group Hash ID */
   int hash_size;
} bcmi_field_ha_group_info_t;

#define BCMI_FIELD_HA_GROUP_INFO_T_ID 0x804b23efdf8f2da7

typedef struct {
   /*! hint ID */
   uint32_t hintid;
   /*! group ID */
   int group_id;
   /*! Group flags BCMINT_FIELD_GROUP_xx */
   uint32_t group_flags;
   /*! group Priority */
   int priority;
   /*! Group mode. To disable all entries in group, set the group_mode to None for that group. To enable all entries in group, set the group_mode to the required correct mode. Save this group mode information to enable/disable all entries in the group. */
   char group_mode[50];
   /*! Presel group ID */
   int presel_group;
   /*! Number of qualifiers in the qset_arr */
   uint16_t qual_cnt;
   /*! Group's qualifiers set Array */
   uint16_t qset_arr[BCMI_FIELD_HA_QSET_MAX];
   /*! Number of actions in the aset_arr */
   uint16_t action_cnt;
   /*! Group's Action set Array */
   uint16_t aset_arr[BCMI_FIELD_HA_ASET_MAX];
   /*! Number of actions in the default entry aset_arr */
   uint16_t def_action_cnt;
   /*! Group's default Action set Array */
   uint16_t def_aset_arr[BCMI_FIELD_HA_ASET_MAX];
   /*! Number of presel indices in the presel_arr */
   uint16_t presel_cnt;
   /*! Group's Presel set Array */
   uint16_t presel_arr[BCMI_FIELD_HA_PRESEL_MAX];
   /*! Action based strength profile Index */
   int strength_prof_id;
   /*! Color table PDD profile index. */
   int color_pdd_id;
   /*! Color table SBR profile index. */
   int color_sbr_id;
   /*! Policer pool used by this group. */
   int policer_pool_id;
   /*! Reference to next operational entry */
   bcmi_field_ha_blk_info_t next;
} bcmi_field_ha_group_oper_t;

#define BCMI_FIELD_HA_GROUP_OPER_T_ID 0x5dffea59115f9ee5

typedef struct {
   /*! Entry ID bitmap array. */
   uint32_t w[BCMI_FIELD_HA_EID_BMP_SIZE];
} bcmi_field_eid_bmp_t;

#define BCMI_FIELD_EID_BMP_T_ID 0xb827b95955394319

typedef struct {
   /*! Bitmap of created field entry IDs */
   bcmi_field_eid_bmp_t eid_bmp;
   /*! Value of last allocated entry ID */
   int last_allocated_eid;
   /*! Max Entry ID */
   int eid_max;
   /*! Entry Hash Size */
   int hash_size;
} bcmi_field_ha_entry_info_t;

#define BCMI_FIELD_HA_ENTRY_INFO_T_ID 0x7d1989ff5252f0e1

typedef struct {
   /*! Number of entries using this profile entry. */
   uint32_t ref_count;
} bcmi_field_ha_profile_info_t;

#define BCMI_FIELD_HA_PROFILE_INFO_T_ID 0x183bdd5e7c4ad95d

typedef struct {
   /*! Entry ID */
   int entry_id;
   /*! Entry flags BCMINT_FIELD_ENTRY_xx */
   uint32_t entry_flags;
   /*! Entry flags BCMINT_FIELD_ENTRY_ACTION_xx */
   uint32_t action_flags;
   /*! group ID */
   int group_id;
   /*! entry Priority */
   int priority;
   /*! Flex counter Action ID */
   int flexctr_action_id;
   /*! Flex counter counter Index */
   int counter_idx;
   /*! Flex counter green counter Index */
   int g_counter_idx;
   /*! Flex counter yellow counter Index */
   int y_counter_idx;
   /*! Flex counter red counter Index */
   int r_counter_idx;
   /*! Color based counters attached to the entry. */
   int counter_color;
   /*! Color action table index used by this entry. */
   int color_action_id;
   /*! Policer ID used by this entry. */
   int policer_id;
   /*! type of qos map for action dcspmapnew. */
   uint8_t qos_type;
   /*! Entry based strength profile Index for non-color actions. */
   int strength_idx;
   /*! Entry based strength profile Index for color actions. */
   int color_strength_idx;
   /*! Number of actions in the action_arr */
   uint8_t num_actions;
   /*! Group's Action set Array */
   uint16_t action_arr[BCMI_FIELD_HA_ENT_ACTIONS_MAX];
   /*! Reference to next operational entry */
   bcmi_field_ha_blk_info_t next;
} bcmi_field_ha_entry_oper_t;

#define BCMI_FIELD_HA_ENTRY_OPER_T_ID 0xc66dd2a195240186

typedef struct {
   /*! Presel Group ID bitmap array. */
   uint32_t w[BCMI_FIELD_HA_PGID_BMP_SIZE];
} bcmi_field_pgid_bmp_t;

#define BCMI_FIELD_PGID_BMP_T_ID 0xe0d7ef85ab0f1e6f

typedef struct {
   /*! Presel ID bitmap array. */
   uint32_t w[BCMI_FIELD_HA_PID_BMP_SIZE];
} bcmi_field_pid_bmp_t;

#define BCMI_FIELD_PID_BMP_T_ID 0xc4aa4068324fb7a3

typedef struct {
   /*! Bitmap of created field presel GIDs */
   bcmi_field_pgid_bmp_t pgid_bmp;
   /*! Bitmap of created field presel IDs */
   bcmi_field_pid_bmp_t pid_bmp;
   /*! Max Presel ID */
   int pid_max;
   /*! Presel Entry Hash Size */
   int hash_size;
   /*! Max Presel Group ID */
   int gid_max;
   /*! Value of last allocated presel ID */
   int last_allocated_pid;
   /*! Value of last allocated presel Group ID */
   int last_allocated_pgid;
} bcmi_field_ha_presel_info_t;

#define BCMI_FIELD_HA_PRESEL_INFO_T_ID 0x9f999cbaa04387ff

typedef struct {
   /*! Presel Entry ID */
   int presel_entry_id;
   /*! group ID */
   int group_id;
   /*! Presel Entry Priority */
   int priority;
   /*! Reference to next operational entry */
   bcmi_field_ha_blk_info_t next;
} bcmi_field_ha_presel_oper_t;

#define BCMI_FIELD_HA_PRESEL_OPER_T_ID 0x84ef4c705e7c819b

typedef struct {
   /*! Type of field hint */
   uint16_t hint_type;
   /*! Field qualifier bcmFieldQualifyXXX */
   uint16_t qual;
   /*! Width of the compression output. */
   uint32_t max_values;
   /*! Start bit of a mask for the qualifier. */
   uint32_t start_bit;
   /*! End bit of a mask for the qualifier. */
   uint32_t end_bit;
   /*! Flags */
   uint32_t flags;
   /*! Max size of the group */
   uint32_t max_group_size;
   /*! UDF ID */
   int udf_id;
   /*! Value to be set for hint type. */
   int value;
   /*! Reference to next operational entry */
   bcmi_field_ha_blk_info_t next;
} bcmi_field_ha_hint_entry_t;

#define BCMI_FIELD_HA_HINT_ENTRY_T_ID 0xb282e16300faf609

typedef struct {
   /*! Hint ID */
   uint32_t hintid;
   /*! List of hints linked to hintid */
   bcmi_field_ha_blk_info_t hints;
   /*! Count of groups linked to a hintid */
   uint16_t grp_ref_count;
   /*! Count of hints linked to a hintid */
   uint16_t hint_count;
} bcmi_field_ha_hints_t;

#define BCMI_FIELD_HA_HINTS_T_ID 0x9a1bc0ababce6e09

#endif /* FIELD_HA_H */
