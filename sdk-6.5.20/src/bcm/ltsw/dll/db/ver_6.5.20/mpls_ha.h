/**************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated by HA parser from YAML formated file.
 * Edits to this file will be lost when it is regenerated.
 * Tool: bcmha/scripts/ha_yml_parser.py
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#ifndef MPLS_HA_H
#define MPLS_HA_H

#include <shr/shr_ha.h>

/*!
 * VPWS vpn member state. STATE_INVALID        = 0,  Invalid state. STATE_INIT          
 * = 1,  Init. STATE_ACC            = 2,  Only the access port is created.
 * STATE_ACC_ACC        = 3,  Two access ports are created. STATE_PRIMARY       
 * = 4,  Only the primary port is created. STATE_ACC_PRIMARY    = 5,  Access and
 * primary port are created. STATE_PRIMARY_BACKUP = 6,  Primary and backup port
 * are created. STATE_ALL            = 7   All three ports are created.
 */
typedef enum {
   STATE_INVALID = 0,
   STATE_INIT = 1,
   STATE_ACC = 2,
   STATE_ACC_ACC = 3,
   STATE_PRIMARY = 4,
   STATE_ACC_PRIMARY = 5,
   STATE_PRIMARY_BACKUP = 6,
   STATE_ALL = 7
} vpws_vpn_member_state_t;

/*!
 * VPWS vpn information.
 */
typedef struct {
   /*! Access port ID. */
   int acc_id;
   /*! Access port ID 2. */
   int acc_id2;
   /*! Primary port ID. */
   int primary_id;
   /*! Backup port ID. */
   int backup_id;
   /*! Member state. */
   vpws_vpn_member_state_t state;
} vpws_vpn_member_info_t;

#define VPWS_VPN_MEMBER_INFO_T_ID 0x6a4c6c0ebcc9d051

/*!
 * XFS mpls vp information.
 */
typedef struct {
   /*! Match criteria. */
   int criteria;
   /*! Access port ID 2. */
   uint32_t label;
   /*! Match outer VLAN. */
   uint16_t outer_vlan;
   /*! Match inner VLAN. */
   uint16_t inner_vlan;
   /*! Port/trunk. */
   int port;
   /*! Port group. */
   int port_group;
   /*! Port of the second port in VPLESS case. flags/criteria and label must be same as primary. */
   int vpless_port;
   /*! Port group of the second port in VPLESS case. */
   int vpless_port_group;
   /*! Vp has a vpless vp. */
   int vpless;
   /*! Failover vp. */
   int failover_vp;
   /*! Egress object if associated with the vpless vp. */
   int vpless_egress_if;
   /*! Match count. */
   int match_count;
   /*! VPN ID. */
   int vpn;
} xfs_mpls_vp_info_t;

#define XFS_MPLS_VP_INFO_T_ID 0xd4df2f2b5260a195

/*!
 * XFS mpls special label control.
 */
typedef struct {
   /*! MPLS header. */
   uint32_t mpls_hdr;
   /*! Mask of MPLS header. */
   uint32_t mpls_hdr_mask;
   /*! Used status. */
   int used;
} xfs_mpls_special_label_control_t;

#define XFS_MPLS_SPECIAL_LABEL_CONTROL_T_ID 0x7c15e7e20c47ad1c

#endif /* MPLS_HA_H */
