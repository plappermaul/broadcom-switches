/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *
 * File:        allformats_desc.i
 * Purpose:     Format descriptions.
 */

    /* ACK_BUS_CP                */ "Ack Bus for CB.",
    /* ACK_BUS_EXT_AD            */ "ESMIF Ack.",
    /* ACK_BUS_MAC_LIMIT         */ "Mac Limit Result for SOPs.",
    /* ACK_BUS_MAC_LIMIT_CP      */ "Requst Bus for Mac Limit Resource Block.",
    /* ACK_BUS_MOD_FIFO_CP       */ "Requst Bus for Mac Limit Resource Block.",
    /* ACK_BUS_PIPE_TBL0         */ "Key Search Ack Bus for TBL0 (Ivxlt VLAN_XLATE request).",
    /* ACK_BUS_PIPE_TBL1         */ "Key Search Ack Bus for TBL1 (Il2lu request).",
    /* ACK_BUS_PIPE_TBL2         */ "Key Search Ack Bus for TBL2 (Il3lu request).",
    /* ACK_BUS_PIPE_TBL3         */ "Key Search Ack Bus for TBL3 (Evxlt request).",
    /* ACK_BUS_PIPE_TBL4         */ "Key Search Ack Bus for TBL4 (Ivxlt MPLS_ENTRY request).",
    /* ACK_DATA_EXT_AD_CP        */ "ETU Control Plane Ack. This is a 35-bit bus (ack_data_ext_ad_cp), multi-clock pulse ack_ext_ad_cp controls number of beats. Bits 34:0 are sent first, followed by bits 69:35, etc.  If ack is due to WRITE, ack_ext_ad_cp is pulsed for one clock with nothing returned in RDATA.",
    /* ACK_DATA_EXT_L2           */ "ETU External L2 Interface. This is a 35-bit bus (ack_data_ext_l2), multi-clock pulse ack_ext_l2 controls number of beats. Bits 34:0 are sent first, followed by bits 69:35, etc.",
    /* ACTION_TABLE              */ "Remapping table (key+1).",
    /* ACTION_TABLE_ECC          */ "Remapping table (key+1).",
    /* ADM_TO_CLINKE_INFO        */ "Position and description of bits",
    /* ADM_TO_ENQ                */ "adm to enq interface definition",
    /* ADM_TO_ENQ_INFO           */ "Position and description of bits in ADM->ENQ Accept/Drop interface",
    /* ADM_TO_IPCTR_D_RESOURCE   */ "ADM to IPCTR D_RESOURCE",
    /* ADM_TO_THDI_QEN_PURGE_INFO */ "Position and description of bits",
    /* ADM_TO_TOQ_EOPE           */ "Position and description of bits",
    /* AGING_CTR_S_RF            */ "aging ctr memory s_rf width",
    /* AGING_CTR_S_RF_0          */ "aging ctr memory s_rf width",
    /* AGING_CTR_S_RF_1          */ "aging ctr memory s_rf width",
    /* AGING_CTR_S_RF_2          */ "aging ctr memory s_rf width",
    /* AGING_CTR_S_RF_3          */ "aging ctr memory s_rf width",
    /* AGING_EXP_S_RF            */ "aging exp memory s_rf width",
    /* AGING_EXP_S_RF_0          */ "aging exp memory s_rf width",
    /* AGING_EXP_S_RF_1          */ "aging exp memory s_rf width",
    /* AGING_EXP_S_RF_2          */ "aging exp memory s_rf width",
    /* AGING_EXP_S_RF_3          */ "aging exp memory s_rf width",
    /* ALPM1_DATA                */ "Associated Data Full Format.",
    /* ALPM2_DATA                */ "Associated Data Full Format.",
    /* ALPM_KEY_MUX_FORMAT       */ "L3 Defip ALPM Route Associated Data FMT7. 12 bytes, 5 entries per bank.",
    /* ARP_HDR                   */ "ARP header specification",
    /* ASSIGNED_VNTAG_ETAG_DOP   */ "ASSIGNED_VNTAG_ETAG_DOP DOP description.",
    /* ASSOC_DATA_FULL           */ "Associated Data Full Format.",
    /* ASSOC_DATA_REDUCED        */ "Associated Data Full Format.",
    /* AUX_HDR_BITMAP_DOP        */ "AUX_HDR_BITMAP_DOP DOP description.",
    /* AXP_CH_INBUF_CW           */ "Control word information for Input Buffer Entries",
    /* AXP_CH_OUTBUF_CW          */ "Control word information for Input Buffer Entries",
    /* AXP_IP_CTL                */ "Control signals from AXP to NLF",
    /* AXP_IP_DATA               */ "Data transfers from AXP to IP",
    /* AXP_META_DATA_COMMON      */ "Control word information for Input Buffer Entries",
    /* AXP_META_DATA_SM_NLF      */ "Meta-data headaer for SM NLF",
    /* AXP_META_DATA_WRX_NLF     */ "Meta-data header for WLAN decap(receive) NLF",
    /* AXP_META_DATA_WTX_NLF     */ "Meta-data headaer for WLAN encap (transmit) NLF",
    /* AXP_NLF_CTL               */ "Format of the control signal bus from AXP to NLF for incoming data.",
    /* AXP_NLF_DATA              */ "Format of the data bus from AXP to NLF.",
    /* AXP_NLF_INFO              */ "Exchange of credits or other info",
    /* AXP_NLF_SYSTEM_IN         */ "System-level control signals from AXP to NLF",
    /* AXP_SHAPE                 */ "Description of fields on the AXP_SHAPE Bus from AXP to MMU (These values are sent back with orignal values from the PBE).",
    /* AXP_SM_EGRESS_LOOPBACK_HEADER */ "***NETWORK ORDER*** Loopback header sent with each packet.",
    /* AXP_SM_INGRESS_METADATA_HEADER */ "Metadata header received with each packet.",
    /* AXP_TO_IP_MDH             */ "Header carrying meta data from AXP to IP",
    /* AXP_WRX_EGRESS_LOOPBACK_HEADER */ "Loopback header prepended to each packet to AXP/IP.",
    /* AXP_WTX_DP                */ "Datapath format for WLAN TX NLF",
    /* AXP_WTX_WCTL              */ "Control information associated with data word",
    /* BANK_BASE_VALID           */ "Format used to align a raw key to base_0_key, base_1_key, base_2_key and base_3_key.",
    /* BANK_HITREQ_BUS_IN        */ "Search Stage Hit Request Bus.",
    /* BANK_HITREQ_BUS_IN_C_MODEL */ "Search Stage Hit Request Bus.",
    /* BANK_HITRST_BUS_OUT       */ "Search Stage Hit Result Bus.",
    /* BANK_HITRST_BUS_OUT_C_MODEL */ "Search Stage Hit Result Bus.",
    /* BANK_REQ_BUS_IN           */ "Search Stage Request Bus.",
    /* BANK_REQ_BUS_IN_C_MODEL   */ "Search Stage Request Bus.",
    /* BANK_RST_BUS_IN           */ "Search Stage Result Bus.",
    /* BANK_RST_BUS_IN_C_MODEL   */ "Search Stage Result Bus.",
    /* BANK_RST_BUS_OUT          */ "Search Stage Result Bus.",
    /* BANK_RST_BUS_OUT_C_MODEL  */ "Search Stage Result Bus.",
    /* BANK_WR_INTF              */ "This is the WR interface for BANK's PORT B .",
    /* BASE_VALID_FORMAT         */ "Format used to align a raw key to base_0_key, base_1_key, base_2_key and base_3_key.",
    /* BFD                       */ "",
    /* BOD_TO_IP_CONTROL_WORD    */ "BOD to IP Control Word",
    /* BROADSCAN_KEYGEN_IN_BUS   */ "Broadscan Keygen Input Bus.",
    /* BROADSCAN_KEYGEN_OUT_BUS  */ "Broadscan Keygen Output Bus.",
    /* BSC_AEFT_TO_DT_INPUT_BUS_EOP */ "Bit Definitions of the AEFT Data Table Controls coming from DT on EOP cell",
    /* BSC_AGG_BANK_REQ_BUS      */ "RA to banks return export data request bus",
    /* BSC_AGG_IPFIX_STATS_CTRL  */ "control field decoding",
    /* BSC_AG_AGE_CONTROL_FLOW_METER_REFRESH_BUS */ "Bit Definitions of the Age control to Flow Meter Refresh Bus",
    /* BSC_AG_AGE_CONTROL_INSTRUCTION_OUT_BUS */ "Bit Definitions of the Age control block instruction out Bus",
    /* BSC_AG_AGGR_PERIODIC_EXPORT_BUS */ "Bit Definitions of the Age control aggregate periodic export bus",
    /* BSC_AIFT_TO_DT_INPUT_BUS_EOP */ "Bit Definitions of the AIFT Data Table Controls coming from DT on EOP cell",
    /* BSC_AIFT_TO_DT_INPUT_BUS_SOP */ "Bit Definitions of the AIFT Data Table Controls coming from DT on SOP cell",
    /* BSC_AMFT_TO_DT_INPUT_BUS_EOP */ "Bit Definitions of the AMFT Data Table Controls coming from DT on EOP cell",
    /* BSC_DG_AGG_GROUP_ALU32_PROFILE_BUS */ "Bit Definitions of the Group Glue In Bus",
    /* BSC_DG_GROUP_ALU16_PROFILE_BUS */ "Bit Definitions of the Group Glue In Bus",
    /* BSC_DG_GROUP_ALU32_PROFILE_BUS */ "Bit Definitions of the Group Glue In Bus",
    /* BSC_DT_AFT_SESSION_DATA   */ "Format of Aggregate Session Data's Opaque fields",
    /* BSC_DT_ALU_OPERATION      */ "Bit Definitions of the Group Glue In Bus",
    /* BSC_DT_CHECK_OPERATION_BIT_SELECT_BUS */ "Bit Definitions of the 16b bus from which we select 4 x 1b to be fed to Flex switch logic",
    /* BSC_DT_FLEX_OPERATION     */ "Bit Definitions of the Group Glue In Bus",
    /* BSC_DT_FLEX_STATE_TRANSITION_IN_BUS */ "Input bus to Flex State Transition Table.It is only valid for SOP cell.",
    /* BSC_DT_FT_CONTROL_INPUT_BUS */ "Bit Definitions of the Data Table Controls coming from within Broadscan",
    /* BSC_DT_FT_CONTROL_INPUT_BUS_EARLY */ "4 clock Early control signals needed from MFT/EFT for Packet FCC check",
    /* BSC_DT_FT_MASTER          */ "Flow Change Count and other per-flow parameters' Master Buffer Format",
    /* BSC_DT_FT_SLAVE           */ "Flow Change Count Slave Buffer Format",
    /* BSC_DT_INPUT_DATA_BUS     */ "Bit Definitions of the Data Table Input Data Bus",
    /* BSC_DT_KMAP_3_FLOW_DIRECTION_IN_BUS */ "Bit Definitions of the 8b bus from which we select 4 x 1b to be fed to Flex switch logic to generate FLOW_DIRECTION",
    /* BSC_DT_METER_EOP_IN_BUS   */ "BSC METER EOP IN BUS FORMAT",
    /* BSC_DT_METER_EOP_OUT_BUS  */ "BSC DT METER EOP OUT BUS FORMAT",
    /* BSC_DT_METER_MASTER_REFRESH_IN_BUS */ "BSC METER MASTER IN BUS FORMAT",
    /* BSC_DT_METER_PIPELINE_IN_BUS */ "BSC METER PIPELINE IN BUS FORMAT",
    /* BSC_DT_METER_PIPELINE_OUT_BUS */ "BSC METER PIPELINE OUT BUS FORMAT",
    /* BSC_DT_METER_PIPE_CTRL_BUS */ "BSC METER PIPE CTRL BUS FORMAT",
    /* BSC_DT_METER_PIPE_DATA_BUS */ "BSC METER PIPE DATA BUS FORMAT",
    /* BSC_DT_METER_SOP_IN_BUS   */ "BSC METER SOP IN BUS FORMAT",
    /* BSC_DT_METER_SOP_OUT_BUS  */ "BSC METER SOP OUT BUS FORMAT",
    /* BSC_DT_PIPELINE_CONTROL_INPUT_BUS */ "Bit Definitions of the Data Table Controls coming from Pipeline",
    /* BSC_DT_TIMESTAMPS_INPUT_BUS */ "Bit Definitions of the Live Timestamps coming to Data Table.",
    /* BSC_DT_TO_AGG_DT_BUS      */ "Bus carrying Fields from uFlow DataTable to Aggregate DataTable",
    /* BSC_EX_EXPORT_FLAGS       */ "Export Flags",
    /* BSC_EX_EXPORT_REASON      */ "Bit Definitions of the Group Glue Out Bus",
    /* BSC_EX_EXPORT_RECORD      */ "Export Record",
    /* BSC_EX_SET_HEADER         */ "Set Header",
    /* BSC_FT_MASTER_BUS         */ "bsc ft master bus",
    /* BSC_IO_EVENT_VECTOR       */ "Bit Definitions of the Event Vector",
    /* BSC_IO_OUT_CONTROL_BUS    */ "Bit Definitions of the Broadscan Core Output Control Bus (that goes to IFP)",
    /* BSC_IPFIX_STATS_CNTR_TRIG_BUS */ "Bit Definitions of the Bus containing data for IPFIX STATS counters",
    /* BSC_KMAP_CONTROL          */ "Bit Definitions of the Kmap Control bus",
    /* BSC_RA_EXPORT_CTRL        */ "FT to RA export control fields",
    /* BSC_RA_EXPORT_RECORD_DATA */ "FT to RA export control fields",
    /* BSC_RA_FT_NEW_REQ_BUS     */ "RA to banks return export data request bus",
    /* BSC_RA_IPFIX_STATS_CTRL   */ "control field decoding",
    /* BSC_RA_RETURN_BUS         */ "DATAtable bank to RA return bus",
    /* BSC_RA_RETURN_REQ_BUS     */ "RA to banks return export data request bus",
    /* BSC_RA_RETURN_REQ_FIFO_DATA */ "DATAtable bank to RA return bus",
    /* BSC_RA_TO_IPFIX_SER_BUS   */ "ra to ipfix ser error bus to merge with ipfix maiin ser bus",
    /* BSC_SOURCE_TO_FT_AFT_DATATABLE_BUS */ "(I/M/E)FT & A(I/M/E)FT, Micro and Aggregate, connection to datatable bus format. Used by broadscan EFT/MFT Highspeed Logic that provides interface between Bscan/Data_table and MMU/EFPMOD",
    /* BSC_SOURCE_TO_FT_DATATABLE_BUS */ "IFT, EFT, MFT connection to datatable bus format",
    /* BSC_TL_DG_TO_DT_ALU16_CONTROL_BUS */ "Bit Definitions of the ALU16 Control Bus",
    /* BSC_TL_DG_TO_DT_ALU16_SPECIFIC_CONTROL_BUS */ "Bit Definitions of the ALU16 Specific Control Bus",
    /* BSC_TL_DG_TO_DT_ALU32_CONTROL_BUS */ "Bit Definitions of the ALU32 Control Bus",
    /* BSC_TL_DG_TO_DT_ALU32_SPECIFIC_CONTROL_BUS */ "Bit Definitions of the ALU32 Specific Control Bus",
    /* BSC_TL_DG_TO_DT_ALU_BASE_CONTROL_BUS */ "Bit Definitions of the ALU Base Control Bus",
    /* BSC_TL_DG_TO_DT_COPY_TO_COLLECTOR_CONTROL_BUS */ "Bit Definitions of the Group Glue Out Bus",
    /* BSC_TL_DG_TO_DT_LOAD16_CONTROL_BUS */ "Bit Definitions of the Group Glue In Bus",
    /* BSC_TL_DG_TO_DT_LOAD8_CONTROL_BUS */ "Bit Definitions of the Group Glue In Bus",
    /* BSC_TL_DG_TO_DT_METER_CONTROL_BUS */ "Bit Definitions of the Group Glue In Bus",
    /* BSC_TL_DG_TO_DT_TIMESTAMP_CONTROL_BUS */ "Bit Definitions of the Timestamp Engines input bus",
    /* BSC_TL_DT_TO_DG_DEBUG_CNTR_TRIG_IN_BUS */ "Bit Definitions of the Data Table Debug Counters Trigger Bus",
    /* BSC_TL_DT_TO_DG_TRIG_IN_BUS */ "Bit Definitions of the Group Glue In Bus",
    /* BSC_TL_KF_TO_DT_DATA_BUS  */ "Bit Definitions of the ALU Data Bus",
    /* BSC_TL_KG_TO_KT_AGE_CONTROL_BUS */ "Bit Definitions of the Group Glue In Bus",
    /* BSC_TL_KG_TO_KT_LIMITS_CONTROL_BUS */ "Bit Definitions of the Group Glue In Bus",
    /* BSC_TL_KG_TO_KT_TRIG_CONTROL_OUT_BUS */ "Bit Definitions of the Group Glue Out Bus",
    /* BSC_TL_KT_TO_DT_CONTROL_BUS */ "Description of fields on the BST_KEY_TO_DATA_BUS Bus from Broadscan Key Table to Broadscan Data Table.",
    /* BSC_TL_KT_TO_KG_DEBUG_CNTR_TRIG_IN_BUS */ "Bit Definitions of the Bus containing inputs for Group Limit Count",
    /* BSC_TL_KT_TO_KG_TRIG_IN_BUS */ "Bit Definitions of the Bus containing inputs for Group Limit Count",
    /* BSD_AGG_DATA_BANK         */ "Broadscan2.0 Data Bank Contents Format, the way it is stored in HW",
    /* BSD_AGG_EOP_DATA_BUFFER   */ "Broadscan EOP Data Bypass Buffer Format",
    /* BSD_DATA_BANK             */ "Broadscan2.0 Data Bank Contents Format, the way it is stored in HW",
    /* BSD_EOP_CONTEXT_BUFFER    */ "Broadscan Data Table- EOP Context Buffer",
    /* BSD_EOP_DATA_BUFFER       */ "Broadscan EOP Data Bypass Buffer Format",
    /* BSD_EXPORT_VECTOR         */ "Export Vector Format. Given out from Data Table",
    /* BSD_FLEX_ALU16_TRACKING_PARAM_0 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU16_TRACKING_PARAM_1 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU16_TRACKING_PARAM_2 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU16_TRACKING_PARAM_3 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU16_TRACKING_PARAM_4 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU16_TRACKING_PARAM_5 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU16_TRACKING_PARAM_6 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU16_TRACKING_PARAM_7 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU32_TRACKING_PARAM_0 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU32_TRACKING_PARAM_1 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU32_TRACKING_PARAM_2 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU32_TRACKING_PARAM_3 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU32_TRACKING_PARAM_4 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU32_TRACKING_PARAM_5 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU32_TRACKING_PARAM_6 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU32_TRACKING_PARAM_7 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU32_TRACKING_PARAM_8 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU32_TRACKING_PARAM_9 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU32_TRACKING_PARAM_10 */ "PDD Output Bus generic format",
    /* BSD_FLEX_ALU32_TRACKING_PARAM_11 */ "PDD Output Bus generic format",
    /* BSD_FLEX_FLOW_COUNT_TO_CPU */ "PDD Output Bus generic format",
    /* BSD_FLEX_FLOW_METER       */ "PDD Output Bus generic format",
    /* BSD_FLEX_FLOW_STATE       */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_0 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_1 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_2 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_3 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_4 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_5 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_6 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_7 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_8 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_9 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_10 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_11 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_12 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_13 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_14 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD16_TRACKING_PARAM_15 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD8_TRACKING_PARAM_0 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD8_TRACKING_PARAM_1 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD8_TRACKING_PARAM_2 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD8_TRACKING_PARAM_3 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD8_TRACKING_PARAM_4 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD8_TRACKING_PARAM_5 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD8_TRACKING_PARAM_6 */ "PDD Output Bus generic format",
    /* BSD_FLEX_LOAD8_TRACKING_PARAM_7 */ "PDD Output Bus generic format",
    /* BSD_FLEX_TIMESTAMP_0      */ "PDD Output Bus generic format",
    /* BSD_FLEX_TIMESTAMP_1      */ "PDD Output Bus generic format",
    /* BSD_FLEX_TIMESTAMP_2      */ "PDD Output Bus generic format",
    /* BSD_FLEX_TIMESTAMP_3      */ "PDD Output Bus generic format",
    /* BSD_PKT_HDR_BUFFER        */ "Broadscan Data Table- Pakcet Header Buffer - Used to store ALU_DATA + SESSION_DATA till EOP of packet",
    /* BSD_POLICY_PDD_OUT_BUS    */ "PDD Output Bus generic format",
    /* BSD_SOP_TO_SOP_DATA_BUFFER */ "Broadscan SOP to SOP Data Bypass Buffer Format",
    /* BSKRC_BUS                 */ "Broadscan Resource Control Bus.",
    /* BSK_AEFP_POLICY           */ "",
    /* BSK_AEFP_TCAM             */ "",
    /* BSK_AMFP_POLICY           */ "",
    /* BSK_AMFP_TCAM             */ "",
    /* BSK_BASE_VALID_FORMAT     */ "Format used to align a raw key to base_0_key, base_1_key, base_2_key and base_3_key.",
    /* BSK_CTRL_BUS              */ "Control bus to connect between wrappers",
    /* BSK_DATA_BUS              */ "Data bus to connect between wrappers",
    /* BSK_DT_KMAP_4_TIMESTAMP_TRIGGER_IN_BUS */ "Bit Definitions of the 8b bus from which we select 4 x 1b to be fed to Flex switch logic to generate TIMESTAMP_TRIGGER",
    /* BSK_EXPORT_RECORD_CONTROL */ "Export Record",
    /* BSK_FTFP_POLICY           */ "",
    /* BSK_FTFP_TCAM             */ "",
    /* BSK_IN_CONTROL_BUS        */ "Ingress Broadscan Flex key gen control bus. It is only valid for SOP cell.",
    /* BSK_IN_CTRL_BUS           */ "Input Control bus to connect to broadscan_top",
    /* BSK_IN_DATA_BUS           */ "Ingress Broadscan Flex key gen fields bus. It is only valid for SOP cell.",
    /* BSK_IN_DATA_BUS0          */ "Data bus0 to connect input side of broadscan top",
    /* BSK_IN_DATA_BUS1          */ "Data bus0 to connect input side of broadscan top",
    /* BSK_IN_HVE_BUS            */ "Broadscan HVE Input Bus format.",
    /* BSK_IN_OBJECT_BUS         */ "Broadscan object bus portion of broadscan_key_gen_in_bus. It is only valid for SOP cell.",
    /* BSK_IPFIX_TO_KEY_TABLE_RESERVATION_ACK */ "Export Fifo rreservation interface",
    /* BSK_KEY_TABLE_TO_IPFIX_RESERVATION_REQ */ "Export Fifo rreservation interface",
    /* BSK_KMAP_0_KEY_SWAPPED_IN_BUS */ "Bit Definitions of the 8b bus from which we select 4 x 1b to be fed to Flex switch logic to generate KEY_SWAPPED",
    /* BSK_KMAP_1_KEY_DIRECTION_IN_BUS */ "Bit Definitions of the 8b bus from which we select 4 x 1b to be fed to Flex switch logic to generate KEY_DIRECTION",
    /* BSK_KMAP_2_LEARN_DISABLE_IN_BUS */ "Bit Definitions of the 8b bus from which we select 4 x 1b to be fed to Flex switch logic to generate LEARN_DISABLE",
    /* BSK_LTS_POLICY            */ "",
    /* BSK_LTS_TCAM              */ "",
    /* BSK_NORMALIZE_COMMAND_FORMAT */ "Normalize Command Format",
    /* BSK_OUT_DATA_BUS          */ "Out Data bus to connect input side of broadscan top",
    /* BS_BANK_WR_INTF           */ "Format used to resolve the insert decision between SS0,SS1 stages for Broadscan.",
    /* BS_BASE_VALID_OUT_BUS     */ "Format used to resolve the insert decision between SS0,SS1 stages for Broadscan.",
    /* BS_ECC_ERR_ENTRY_BUS      */ "Format used to resolve the insert decision between SS0,SS1 stages for Broadscan.",
    /* BS_LOGICAL_BKT_IDX_OUT_BUS */ "Format used to resolve the insert decision between SS0,SS1 stages for Broadscan.",
    /* BS_REQ_IN_KEY_BUS         */ "Format used to resolve the insert decision between SS0,SS1 stages for Broadscan.",
    /* CAM_BIST_CONFIG_64_FORMAT */ "TCAM BIST CONFIG_64 Format.",
    /* CAPWAP_RADIOMAC_HDR       */ "Capwap wireless specific header.",
    /* CAPWAP_SHIM_BASE_HDR      */ "Capwap shim base specification",
    /* CAPWAP_WIRELESS_SPECIFIC_HDR */ "Capwap wireless specific header.",
    /* CBP2M_COSQ                */ "Define TOQ/DEQ Non CPU Port CoS queue range for CBP = 2M",
    /* CBP2M_COSQ_CPU_PORT       */ "Define TOQ/DEQ CPU Port CoS queue range for CBP = 2M",
    /* CBP2M_EPORTS_S0           */ "Define TOQ/DEQ non-cpu ports range in slice 0 for CBP = 2M",
    /* CBP2M_MEM                 */ "Define TOQ/DEQ memory range for CBP = 2M",
    /* CBP2M_PORTS               */ "Define TOQ/DEQ ports range for CBP = 2M",
    /* CBP2M_PORTS_REL_S1        */ "Define TOQ/DEQ base 0 relative ports range in slice 1 for CBP = 2M",
    /* CBP2M_PORTS_S0            */ "Define TOQ/DEQ ports range in slice 0 for CBP = 2M",
    /* CBP2M_PORTS_S1            */ "Define TOQ/DEQ ports range in slice 1 for CBP = 2M",
    /* CBP2M_Q                   */ "Define TOQ/DEQ Non CPU Port queue range for CBP = 2M",
    /* CBP2M_Q_CPU_PORT          */ "Define TOQ/DEQ CPU Port queue range for CBP = 2M",
    /* CBP2M_SAVED_SOP_INFO_S0   */ "Define DEQ 0 saved SoP cell queue info, range for CBP = 2M",
    /* CBP2M_SAVED_SOP_INFO_S1   */ "Define DEQ 1 saved SoP cell queue info, range for CBP = 2M",
    /* CCBE                      */ "Position and description of bits in Cell Contol Bus From MMU to Egress pipeline.",
    /* CCBI                      */ "Position and description of bits in Cell Control Bus From Ingress pipeline to MMU",
    /* CCBI_A                    */ "Position and description of bits in Cell Control Bus A From Ingress pipeline to MMU",
    /* CCBI_B                    */ "Position and description of bits in Cell Control Bus B From Ingress pipeline to MMU",
    /* CCBI_BS                   */ "Position and description of bits in CCBI_BS",
    /* CCBI_C                    */ "Cell Control Bus C From Ingress pipeline to MMU. This is required to go along with packet data (CBI)",
    /* CCP_RESEQ                 */ "Position and description of bits in the CCP Re-sequence",
    /* CCP_S_RF                  */ "ccp memory s_rf width",
    /* CCP_TO_ENQ_INFO_BUS       */ "ccp enq interface for per dst port pkt count",
    /* CCP_TO_RQE_INFO           */ "Position and description of bits",
    /* CCP_TO_THD0_INFO_BUS      */ "Position and description of bits in the CCP to THD 0 INFO bus",
    /* CCP_TO_THD1_INFO_BUS      */ "Position and description of bits in the CCP to THD 1 INFO bus",
    /* CCP_TO_THDI_INFO_BUS      */ "Position and description of bits in the CCP to THDI INFO bus",
    /* CCP_TO_THDM               */ "CCP to THDM interface definition.",
    /* CCP_TO_THDO_INFO_BUS      */ "Position and description of bits in the CCP to THDO INFO bus",
    /* CCP_TO_THD_INFO_BUS       */ "Position and description of bits in the CCP to THD INFO bus",
    /* CCP_UPDATE_META_DATA      */ "Position and description of control bits in the CCP update module",
    /* CELLCHK_S_RF              */ "cellchk memory s_rf width",
    /* CELLDATA_S_RF             */ "celldata memory s_rf width",
    /* CELLHDR_S_RF              */ "cellhdr memory s_rf width",
    /* CELLLINK_S_RF             */ "celllink memory s_rf width",
    /* CEV_CHAIN_ID              */ "format of the counter eviction message",
    /* CFAP_S_RF                 */ "cfap memory s_rf width",
    /* CFG_EOP_BUFFER            */ "ICFG EOP BUFFER, Per port register. Not visible to SW",
    /* CFG_TO_CTR_REG_INFO       */ "Position and description of bits",
    /* CFG_TO_ENQ_REG_INFO       */ "Position and description of bits",
    /* CHIP_CONFIG_OTP           */ "Chip config otp ROM image",
    /* CHIP_FUNCTIONAL_INTR      */ "Mapping for Chip functional interrupts to PCI",
    /* CHIP_LP_INTR              */ "Format of chip low priority interrupts hookup going from P&R blocks to iproc_top",
    /* CHIP_PARITY_INTR          */ "Mapping for Chip parity interrupts to PCI",
    /* CMICD_TO_GIC_INTERUPTS    */ "Embedded Higig header sent between EP and port modules",
    /* CMIC_CMC_IRQ_STAT3        */ "Format of chip interrupt hookup going from P&R blocks to CMIC",
    /* CMIC_CMC_IRQ_STAT4        */ "Format of chip interrupt hookup going from P&R blocks to CMIC",
    /* CMIC_CMC_IRQ_STAT5        */ "Format of chip interrupt hookup going from P&R blocks to CMIC",
    /* CMIC_CMC_IRQ_STAT6        */ "Format of chip interrupt hookup going from P&R blocks to CMIC",
    /* CMIC_CORE_PLL0_CTRL_STATUS_REGISTER_0 */ "CMIC CORE PLL0_CTRL_STATUS0 FORMAT",
    /* CMIC_CORE_PLL0_CTRL_STATUS_REGISTER_1 */ "CMIC CORE PLL0_CTRL_STATUS1 FORMAT",
    /* CMIC_CORE_PLL0_CTRL_STATUS_REGISTER_2 */ "CMIC CORE PLL0_CTRL_STATUS2 FORMAT",
    /* CMIC_CORE_PLL0_CTRL_STATUS_REGISTER_3 */ "CMIC CORE PLL0_CTRL_STATUS3 FORMAT",
    /* CMIC_CORE_PLL0_CTRL_STATUS_REGISTER_4 */ "CMIC_CORE_PLL0_CTRL_STATUS_REGISTER_4",
    /* CMIC_CORE_PLL1_CTRL_STATUS_REGISTER_0 */ "CMIC_CORE_PLL1_CTRL_STATUS_REGISTER_0",
    /* CMIC_CORE_PLL1_CTRL_STATUS_REGISTER_1 */ "CMIC_CORE_PLL1_CTRL_STATUS_REGISTER_1",
    /* CMIC_CORE_PLL1_CTRL_STATUS_REGISTER_2 */ "CMIC_CORE_PLL1_CTRL_STATUS_REGISTER_2",
    /* CMIC_CORE_PLL3_CTRL_STATUS_REGISTER_2 */ "ring OSC Control Register",
    /* CMIC_CORE_PLL3_CTRL_STATUS_REGISTER_3 */ "Temperature Monitor Control Register",
    /* CMIC_FASTRD_TO_RQE_INFO   */ "CMIC backdoor read info to RQE",
    /* CMIC_FUNC_INTR_STATUS     */ "Format of functional interrupt hookup going from functional blocks to CMIC",
    /* CMIC_INTERUPTS            */ "128 bit interrupt status bus output from CMIC",
    /* CMIC_INTR_STATUS          */ "Format of parity interrupt hookup going from P&R blocks to CMIC",
    /* CMIC_IRQ_STAT_1           */ "Format of functional interrupt hookup going from functional blocks to CMIC",
    /* CMIC_MISC_CONTROL         */ "Mapping for CMIC_MISC_CONTROL register in Scorpion",
    /* CMIC_MISC_STATUS          */ "Mapping for CMIC_MISC_STATUS register in Scorpion",
    /* CMIC_PARITY_INTR_STATUS   */ "Format of parity interrupt hookup going from P&R blocks to CMIC",
    /* CMIC_SOFT_RESET_REG       */ "CMIC SOFT RESET FORMAT",
    /* CMIC_SOFT_RESET_REG_2     */ "CMIC Soft Reset register 2",
    /* CMIC_THERMAL_MON_CTRL     */ "Temperature Monitor Control Register",
    /* CMIC_XGXS0_PLL_CONTROL_1  */ "CMIC XGXS PLL 0 Control register 1",
    /* CMIC_XGXS0_PLL_CONTROL_2  */ "CMIC XGXS PLL 0 Control register 2",
    /* CMIC_XGXS0_PLL_CONTROL_3  */ "CMIC XGXS PLL 0 Control register 3",
    /* CMIC_XGXS0_PLL_CONTROL_4  */ "CMIC XGXS PLL 0 Control register 3",
    /* CMIC_XGXS1_PLL_CONTROL_1  */ "CMIC XGXS PLL 0 Control register 1",
    /* CMIC_XGXS1_PLL_CONTROL_2  */ "CMIC XGXS PLL 0 Control register 2",
    /* CMIC_XGXS1_PLL_CONTROL_3  */ "CMIC XGXS PLL 0 Control register 3",
    /* CMIC_XGXS1_PLL_CONTROL_4  */ "CMIC XGXS PLL 0 Control register 3",
    /* CMIC_XGXS2_PLL_CONTROL_1  */ "CMIC XGXS PLL 0 Control register 1",
    /* CMIC_XGXS2_PLL_CONTROL_2  */ "CMIC XGXS PLL 0 Control register 2",
    /* CMIC_XGXS2_PLL_CONTROL_3  */ "CMIC XGXS PLL 0 Control register 3",
    /* CMIC_XGXS2_PLL_CONTROL_4  */ "CMIC XGXS PLL 0 Control register 3",
    /* CMIC_XGXS3_PLL_CONTROL_1  */ "CMIC XGXS PLL 0 Control register 1",
    /* CMIC_XGXS3_PLL_CONTROL_2  */ "CMIC XGXS PLL 0 Control register 2",
    /* CMIC_XGXS3_PLL_CONTROL_3  */ "CMIC XGXS PLL 0 Control register 3",
    /* CMIC_XGXS3_PLL_CONTROL_4  */ "CMIC XGXS PLL 0 Control register 3",
    /* CML_OFFSET                */ "CML bit vector",
    /* CNTAG_ACTION_SET          */ "PDD Output Bus generic format",
    /* CNTAG_HDR                 */ "CNTAG header specification",
    /* COMMON_HEADER_TYPES       */ "",
    /* COPYTO_CPU                */ "Bit Definitions of the copy to cpu vector",
    /* COUNTER_UPDATE_CODE       */ "Bit Definitions of the counter update code.",
    /* COUNTER_UPDATE_VECTOR_DOP */ "COUNTER_UPDATE_VECTOR_DOP DOP description.",
    /* CPUQ_QDB                  */ "Position and description of bits in CPUQ QDB register",
    /* CPU_COS_MAP_DATA_FORMAT   */ "format for CPU_COS_MAP data",
    /* CPU_COS_MAP_KEY           */ "CPU_COS_MAP Key",
    /* CPU_COS_MAP_KEY0_PROBES_DOP */ "CPU_COS_MAP_KEY0_PROBES_DOP DOP description.",
    /* CPU_COS_MAP_TCAM_FORMAT   */ "format for CPU_COS_MAP TCAM",
    /* CPU_COS_MAP_VAL_PROBES_DOP */ "CPU_COS_MAP_VAL_PROBES_DOP DOP description.",
    /* CPU_OPCODES               */ "Bit Definitions of the CPU Opcodes",
    /* CPU_OPCODES_OVERLAY_TYPE_0 */ "Bit Definitions of the CPU Opcodes",
    /* CPU_OPCODES_OVERLAY_TYPE_1 */ "Bit Definitions of the CPU Opcodes",
    /* CPU_OPCODES_OVERLAY_TYPE_3 */ "Bit Definitions of the CPU Opcodes",
    /* CPU_OPCODE_VAL_PROBES_DOP */ "CPU_OPCODE_VAL_PROBES_DOP DOP description.",
    /* CPU_PROTOCOL              */ "Copy-to-CPU protocol Types",
    /* CPU_XQHDR_S_RF            */ "CPU XQ Header memory s_rf width",
    /* CP_REQ_BUS                */ "Control plane to tx datapath request bus",
    /* CTR_EVICTION_MESSAGE      */ "format of the counter eviction message",
    /* CUR_L3_INTF               */ "Current L3 intf .",
    /* CUR_NEXT_HOP              */ "Current Next Hop.",
    /* DELETE_TAG_ACTION_SET     */ "PDD Output Bus generic format",
    /* DEQ0_TO_CCP_INFO_BUS      */ "Position and description of bits in the DEQ 0 to CCP INFO bus",
    /* DEQ0_TO_CTR_INFO          */ "Position and description of bits in the DEQ Slice 0 to CTR INFO bus",
    /* DEQ1_TO_CCP_INFO_BUS      */ "Position and description of bits in the DEQ 1 to CCP INFO bus",
    /* DEQ1_TO_CTR_INFO          */ "Position and description of bits in the DEQ Slice 1 to CTR INFO bus",
    /* DEQ_DEF                   */ "enq specific defines",
    /* DEQ_NON_CCBE_CONTROL_INFO */ "Non CCBE Data used for Cell updates passed from DEQ Rd Ctrl subblock thro' DEQ",
    /* DEQ_RDTBL_TO_CDU_FT_INFO  */ "Position and description of bits inside DEQ from read_tbl module to cdu module signaling signature matching  bus",
    /* DEQ_TO_CCPE_INFO          */ "Position and description of bits",
    /* DEQ_TO_CCPI_INFO          */ "Position and description of bits in the MMU0 to MMU 1 DEQ to CCPI interface",
    /* DEQ_TO_CCP_INFO_BUS       */ "Position and description of bits in the DEQ to CCP INFO bus",
    /* DEQ_TO_CTR_DEQ_INFO       */ "Format TCACHE Location manager Allocation Structure",
    /* DEQ_TO_CTR_INFO           */ "Position and description of bits in the DEQ to CTR INFO bus",
    /* DEQ_TO_EMC_RD_REQ_INFO    */ "Position and description of bits in the DEQ to EMC Rd Req INFO bus",
    /* DEQ_TO_LLS_SHAPE_BUS_INFO */ "Position and description of bits",
    /* DEQ_TO_RDE_CELL_INFO      */ "DEQ to RDE CCP information for a tx cell to EP",
    /* DEQ_TO_RDE_HDR_RD_INFO    */ "DEQ to RDE Redirect Header Read Request bus",
    /* DEQ_TO_RDE_INFO           */ "Position and description of bits in the DEQ to RDE bus",
    /* DEQ_TO_RDE_INFO_BUS0      */ "Position and description of bits in the DEQ to RDE INFO bus 0",
    /* DEQ_TO_RDE_INFO_BUS1      */ "Position and description of bits in the DEQ to RDE INFO bus 1",
    /* DEQ_TO_RDE_PQE_CELL_INFO  */ "DEQ to RDE CCP information for a tx cell to EP",
    /* DEQ_TO_RDE_REDIR_INFO     */ "DEQ to RDE Redirect bus - originally coming from EP, retimed and sent by DEQ",
    /* DEQ_TO_SQS_INFO           */ "Position and description of bits in the DEQ to SQS INFO",
    /* DEQ_TO_TOQ_CREDIT_VECTOR_INFO */ "Position and description of bits",
    /* DEQ_TO_TOQ_INFO           */ "Position and description of bits in the DEQ to TOQ INFO",
    /* DEQ_TO_TOQ_REG_INFO       */ "Position and description of bits in the DEQ to TOQ REG INFO bus",
    /* DEQ_TO_WRED_INFO          */ "Position and description of bits",
    /* DESCRIPTOR_RX_00          */ "Packet DMA RX Descriptor, Word 0 (Control)",
    /* DESCRIPTOR_RX_01          */ "Packet DMA RX Descriptor, Word 1 (Control)",
    /* DESCRIPTOR_RX_02          */ "Packet DMA RX Descriptor, Word 2 (Module Header)",
    /* DESCRIPTOR_RX_03          */ "Packet DMA RX Descriptor, Word 3 (Module Header)",
    /* DESCRIPTOR_RX_04          */ "Packet DMA RX Descriptor, Word 4 (Module Header)",
    /* DESCRIPTOR_RX_05          */ "Packet DMA RX Descriptor, Word 5 (Packet Status Fields)",
    /* DESCRIPTOR_RX_06          */ "Packet DMA RX Descriptor, Word 6 (Packet Status Fields)",
    /* DESCRIPTOR_RX_07          */ "Packet DMA RX Descriptor, Word 7 (Packet Status Fields)",
    /* DESCRIPTOR_RX_08          */ "Packet DMA RX Descriptor, Word 8 (Packet Status Fields)",
    /* DESCRIPTOR_RX_09          */ "Packet DMA RX Descriptor, Word 9 (Packet Status Fields)",
    /* DESCRIPTOR_RX_10          */ "Packet DMA RX Descriptor, Word 10 (Status)",
    /* DESCRIPTOR_RX_11          */ "Packet DMA RX Descriptor, Word 11 (Packet Status Fields)",
    /* DESCRIPTOR_RX_12          */ "Packet DMA RX Descriptor, Word 12 (Packet Status Fields)",
    /* DESCRIPTOR_RX_13          */ "Packet DMA RX Descriptor, Word 13 (Packet Status Fields)",
    /* DESCRIPTOR_RX_14          */ "Packet DMA RX Descriptor, Word 14 (Packet Status Fields)",
    /* DESCRIPTOR_RX_15          */ "Packet DMA RX Descriptor, Word 15 (Status)",
    /* DESCRIPTOR_TX_00          */ "Packet DMA TX Descriptor, Word 0 (Control)",
    /* DESCRIPTOR_TX_01          */ "Packet DMA TX Descriptor, Word 1 (Control)",
    /* DESCRIPTOR_TX_02          */ "Packet DMA TX Descriptor, Word 2 (Module Header)",
    /* DESCRIPTOR_TX_03          */ "Packet DMA TX Descriptor, Word 3 (Module Header)",
    /* DESCRIPTOR_TX_04          */ "Packet DMA TX Descriptor, Word 4 (Module Header)",
    /* DESCRIPTOR_TX_05          */ "Packet DMA TX Descriptor, Word 5 (Unused)",
    /* DESCRIPTOR_TX_06          */ "Packet DMA TX Descriptor, Word 6 (Unused)",
    /* DESCRIPTOR_TX_07          */ "Packet DMA TX Descriptor, Word 7 (Unused)",
    /* DESCRIPTOR_TX_08          */ "Packet DMA TX Descriptor, Word 8 (Unused)",
    /* DESCRIPTOR_TX_09          */ "Packet DMA TX Descriptor, Word 9 (Unused)",
    /* DESCRIPTOR_TX_10          */ "Packet DMA TX Descriptor, Word 10 (Status)",
    /* DESCRIPTOR_TX_11          */ "Packet DMA TX Descriptor, Word 11 (Unused)",
    /* DESCRIPTOR_TX_12          */ "Packet DMA TX Descriptor, Word 12 (Unused)",
    /* DESCRIPTOR_TX_13          */ "Packet DMA TX Descriptor, Word 13 (Unused)",
    /* DESCRIPTOR_TX_14          */ "Packet DMA TX Descriptor, Word 14 (Unused)",
    /* DESCRIPTOR_TX_15          */ "Packet DMA TX Descriptor, Word 15 (Status)",
    /* DESTINATION_FORMAT        */ "Bit definition for DESTINATION field in various tabel.",
    /* DESTINATION_MY_STATION    */ "Bit Definitions of L2_ENTRY.DESTINATION field if it is considered as a MY_STATION hit.",
    /* DISCARD_PROC_DROP_VECTOR  */ "Bit Definitions of the DISC drop vector.",
    /* DLB_ECMP_FLOWSET_COV_DEFS */ "defines for DLB ECMP Flowset coverage analysis",
    /* DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_COV_DEFS */ "defines for DLB ECMP Flowset timestamp page coverage analysis",
    /* DLB_HGT_FLOWSET_COV_DEFS  */ "defines for DLB HGT Flowset coverage analysis",
    /* DLB_HGT_FLOWSET_TIMESTAMP_PAGE_COV_DEFS */ "defines for DLB HGT Flowset timestamp page coverage analysis",
    /* DLB_HGT_PORT_LOADING_BUS  */ "Description of fields on the DLB_HGT_PORT_LOADING_BUS Bus from EP to IP.",
    /* DLB_HGT_PORT_QSIZE_BUS    */ "Description of fields on the DLB_HGT_PORT_QSIZE_BUS Bus from MMU to IP.",
    /* DLB_IP_LOADING_BUS        */ "Description of fields on the DLB_IP_LOADING_BUS Bus from ip_ep_common to IP.",
    /* DLB_ITM_PORT_QSIZE_BUS    */ "Description of fields on the DLB_ITM_PORT_QSIZE_BUS Bus from MMU to ip_ep_common.",
    /* DLB_LAG_FLOWSET_COV_DEFS  */ "defines for DLB LAG Flowset coverage analysis",
    /* DLB_LAG_FLOWSET_TIMESTAMP_PAGE_COV_DEFS */ "defines for DLB LAG Flowset timestamp page coverage analysis",
    /* DLB_PORT_LOADING_BUS      */ "Description of fields on the DLB_PORT_LOADING_BUS Bus from EP to IP.",
    /* DLB_VIRTUAL_ACCOUNTING_LOADING_BUS */ "Description of fields on the DLB_VIRTUAL_ACCOUNTING_LOADING_BUS Bus from IP.",
    /* DLB_XPE_PORT_QSIZE_BUS    */ "Description of fields on the DLB_XPE_PORT_QSIZE_BUS Bus from MMU to IP.",
    /* DM_TIMESTAMP              */ "Position and description of bits in DM_TIMESTAMP Bus From Iarb to Isw2.",
    /* DOP_BUS                   */ "DOP Command/Data bus flowing in the pipe",
    /* DOP_COLLECTION_RESP_WORD  */ "The collecction response word prepended to data by DOP",
    /* DOP_DATA_BUS              */ "DOP Data bus flowing in the pipe",
    /* DQS_TO_DQX_CELL_INFO      */ "Position and description of bits in the DQS to DQX Cell INFO.",
    /* DQS_TO_DQX_REP_INFO       */ "Position and description of bits in the DQS to DQX Rep INFO.",
    /* DQS_TO_RIL_INFO           */ "Position and description of bits in the DQS to RIL INFO",
    /* DQS_TO_TOQ_INFO           */ "Position and description of bits in the DQS to TOQ INFO",
    /* DQX_TO_CCP_INFO_BUS       */ "Position and description of bits in the DQX to CCP INFO bus.",
    /* DQX_TO_CTR_INFO           */ "Position and description of bits in the DQX to CTR INFO bus.",
    /* DROP_VECTOR_1_DOP         */ "DROP_VECTOR_1_DOP DOP description.",
    /* DVP_SWITCHING_CTRLS_ACTION_SET */ "PDD Output Bus generic format",
    /* E2EFC_TO_CFG_INFO         */ "E2EFC to CFG interface format",
    /* E2EFC_TO_ENQ_INFO_BUS     */ "Position and description of bits in the E2EFC to ENQ INFO bus",
    /* E2E_HOL_STATUS_COV_DEFS   */ "defines for E2E_HOL_STATUS coverage analysis",
    /* EARB_TO_EPOST_CTRL_BUS    */ "Bit Definitions of the interface from Earb to Epost.",
    /* EARB_TO_EPOST_DATA_BUS    */ "Data Bus from EP to EDB.",
    /* ECMP_DLB_ACTION_SET       */ "PDD Output Bus generic format",
    /* ECMP_RH_ACTION_SET        */ "PDD Output Bus generic format",
    /* ECN_ACTION_SET            */ "PDD Output Bus generic format",
    /* EDATABUF_ALGN_TO_BUFFER_CTRL */ "Position and description of bits in Aligner-2-Buffer control-signals",
    /* EDATABUF_BUFFER_TO_CMPORT_CTRL */ "Position and description of bits in CMport Buffer-2-Port control-signals",
    /* EDATABUF_BUFFER_TO_GPORT_CTRL */ "Position and description of bits in Gport Buffer-2-Port control-signals",
    /* EDATABUF_BUFFER_TO_XQPORT_CTRL */ "Position and description of bits in XQport Buffer-2-Port control-signals",
    /* EDB_TO_IDB_BYTE_COUNT     */ "Data bus from EDB to IDB",
    /* EDB_TO_IDB_DATA           */ "Data bus from EDB to IDB",
    /* EDB_TO_MMU_CREDIT_REQ     */ "Credit request from EDB to MMU",
    /* EDB_TO_PM_1588_PT_BUS     */ "Passthrough signals from EP to PM through EDB.",
    /* EDB_TO_PM_BYTE_COUNT      */ "Byte Count from EDB to PM.",
    /* EDB_TO_PM_DATA_BUS        */ "Data Bus from EDB to PM.",
    /* EDB_TO_PM_PORT_NUM        */ "Port Number from EDB to PM.",
    /* EDITOR_CONTROL_BLOCK_IN_BUS */ "Format for EGR_EVLAN's EDITOR_CONTROL_BLOCK_IN_BUS.",
    /* EDITOR_DROP_VECTOR_DOP    */ "EDITOR_DROP_VECTOR_DOP DOP description.",
    /* EDITOR_ENGINE_ID_ENCODING_FORMAT */ "EGR_ZONE_*_EDITOR_CONTROL_TCAM_DATA_ONLY/EGR_ZONE_1/3_L2_TAG_CONTROL_PROFILE_INS/RW.ENGINE_ID* encoding format.",
    /* EDIT_CTRL_ID_ACTION_SET   */ "PDD Output Bus generic format",
    /* EDIT_CTRL_ID_SEL_ENCODING_FORMAT */ "EGR_PKT_FLOW_SELECT_TCAM_DATA_ONLY.ZONE_*_EDIT_CTRL_ID_SEL_A/B/C/D encoding format.",
    /* EFPMOD_PARITY_STATUS_BUS  */ "Position and description of parity-error sigs flowing from EFPMOD->EDATABUF",
    /* EFPMOD_PKT_ATTR           */ "Efpmod pkt mod actions format.",
    /* EFPMOD_PKT_HDRS           */ "Efpmod pkt hdrs format.",
    /* EFPMOD_PKT_MOD_ACTIONS    */ "Efpmod pkt mod actions format.",
    /* EFPMOD_TO_EPOST_CTRL_BUS  */ "Arch shell signals from Efpmod to Epost",
    /* EFPMOD_TO_EPOST_DATA_BUS  */ "Data Bus from Efpmod to Epost.",
    /* EFPPARS_PARITY_STATUS_BUS */ "Position and description of parity-error sigs flowing from EFPPARS->EDATABUF",
    /* EFP_CLASSID_B_SELECTOR_SLICE_FORMAT */ "EFP CLASSID_B SELECTOR per SLICE format.",
    /* EFP_COUNTER_TABLE_COV_DEFS */ "defines for ep pw init counter coverage analysis",
    /* EFP_EVEN_METER_COV_DEFS   */ "defines for efp even meter coverage analysis",
    /* EFP_KEY1                  */ "Position and description of bits in EFP_KEY1 FIELDS",
    /* EFP_KEY2                  */ "Position and description of bits in EFP_KEY2 fields",
    /* EFP_KEY3                  */ "Position and description of bits in EFP_KEY3 fields",
    /* EFP_KEY4                  */ "Position and description of bits in EFP_KEY4 fields",
    /* EFP_KEY5                  */ "Position and description of bits in EFP_KEY5 fields",
    /* EFP_KEY6                  */ "Position and description of bits in EFP_KEY6 fields",
    /* EFP_KEY7                  */ "Position and description of bits in EFP_KEY7 fields",
    /* EFP_KEY8                  */ "Position and description of bits in EFP_KEY8 fields",
    /* EFP_ODD_METER_COV_DEFS    */ "defines for efp odd meter coverage analysis",
    /* EFP_PARITY_STATUS_BUS     */ "Position and description of parity-error sigs flowing from EFP->EDATABUF",
    /* EFP_REDIRECTION_BUS       */ "EFP Redirection Bus",
    /* EFT_FWD_DOMAIN_ATTR       */ "eft dt mmu_cos & ce fields",
    /* EFT_MMU_COS_CE            */ "eft dt mmu_cos & ce fields",
    /* EFT_MMU_COS_CM            */ "eft dt mmu_cos & ce fields",
    /* EFT_QOS_ATTR              */ "eft dt qos fields",
    /* EFT_SESSION_DATA_BUS      */ "eft session data bus",
    /* EGRESS_ASSP_HEADER        */ "FPGA-ASSP Egress Inter-chip Header",
    /* EGRESS_COMPUTED_FIELD_BUS */ "Egress computed fields for seqence, TTL, TOS. It is only valid for SOP cell.",
    /* EGRESS_DOP_TOP_FORMAT     */ "Top level DOP",
    /* EGRESS_FIELD_BUS          */ "Egress Object Bus flow from MPB to rest of egress pipeline for various process. It is only valid for SOP cell.",
    /* EGRESS_L2_TAG_BUS         */ "Egress L2 Tag Bus for various TAGs. It is only valid for SOP cell.",
    /* EGRESS_OBJECT_BUS         */ "Egress Object Bus flow from MPB to rest of egress pipeline for various process. It is only valid for SOP cell.",
    /* EGR_ADAPT_1_FIXED_KEY_TABLE_ATTRS_INDEX */ "Egress EGR_ADAPT_1_FIXED_KEY_TABLE_ATTRS index",
    /* EGR_ADAPT_1_FLEX_KEY_GEN_IN_CONTROL_BUS */ "FlexKeyGen Input Control Bus for EVXLT tables",
    /* EGR_ADAPT_1_FLEX_KEY_GEN_OUT_BUS */ "FlexKeyGen Output bus EGR_VXLT_1",
    /* EGR_ADAPT_1_PDD_OUT_BUS   */ "PDD Output Bus generic format",
    /* EGR_ADAPT_2_FLEX_KEY_GEN_IN_CONTROL_BUS */ "FlexKeyGen Input Control Bus for EVXLT tables",
    /* EGR_ADAPT_2_FLEX_KEY_GEN_OUT_BUS */ "FlexKeyGen Output bus EGR_VXLT_2",
    /* EGR_ADAPT_2_PDD_OUT_BUS   */ "PDD Output Bus generic format",
    /* EGR_ADAPT_FLEX_KEY_GEN_IN_BUS */ "Egress Flex Keygen Input Bus. It is only valid for SOP cell.",
    /* EGR_ADAPT_KEYGEN_OBJECT_BUS */ "Egress object portion of  Flex Keygen Input Bus. It is only valid for SOP cell.",
    /* EGR_ADAPT_ZONE_L2_TAGS_STATUS */ "Common Zone l2 tag presence format.",
    /* EGR_ADAPT_ZONE_L2_TAGS_VALUES */ "Common Zone l2 tags values bus.",
    /* EGR_DELETE_CONTROL_INDEX  */ "Egress Delete Control index",
    /* EGR_DROP_STATUS_VECTOR    */ "EGR counter format for TDBGC vector.",
    /* EGR_DVP_ATTRIBUTE_EARLY_PDD_OUT_BUS */ "PDD Output Bus generic format",
    /* EGR_DVP_ATTRIBUTE_PDD_OUT_BUS */ "PDD Output Bus generic format, The following fields are not used:\n         FIELD_66 /EGR_FLEX_CTR_1_ACTION_SET: No need for the second counter update action.\n         FIELD_4 / HIGIG_CONTROLS_ACTION_SET: It would be good to fix. We have to rely on HG header selection from Next Hop\n         FIELD_32 / FLEX_CONTAINER_UPDATE_ACTION_SET:\n         ALU is controlled by EGR_PKT_FLOW_SELECT tcam only.\n         Enhancing ALU profile selection to egress object table require\n         a. 0 vs 1 alu operatio ...",
    /* EGR_EDB_PRE_BUS           */ "The bus that carries pre-signals from EFP->EDATABUF.It arrives 2-cycles early w.r.t packet into EDB.",
    /* EGR_EFPMOD_MCPE_CNTXT_BUFFER */ "EFPMOD MCPE Context Buffer",
    /* EGR_EFPMOD_MCPE_EDIT_REQ  */ "EFPMOD MCPE EDIT_REQUEST",
    /* EGR_EFPMOD_MCPE_IN_BUS    */ "EFPMOD MCPE IN_BUS format",
    /* EGR_EL3_MPLS_LABEL_SRC_FORMAT */ "Format for EGR_EL3 MPLS label source.",
    /* EGR_EL3_TBL_ID            */ "Format for EGR_EL3 TBL_ID.",
    /* EGR_EPMOD_EMOP_BUFFER     */ "Bit Definitions of EGR_EPMOD_EMOP_BUFFER.",
    /* EGR_EVLAN_DEST_ATTR       */ "Format for EGR_EVLAN DEST_ATTR.",
    /* EGR_EVLAN_FCOE_ATTR       */ "Format for EGR_EVLAN FCOE_ATTR.",
    /* EGR_EVLAN_FWD_DOMAIN_ATTR */ "Format for EGR_EVLAN FWD_DOMAIN_ATTR.",
    /* EGR_EVLAN_QOS_ATTR        */ "Format for EGR_EVLAN QOS_ATTR.",
    /* EGR_EVLAN_SRC_ATTR        */ "Format for EGR_EVLAN SRC_ATTR.",
    /* EGR_EVLAN_STAGE_ATTR      */ "Format for EGR_EVLAN STAGE_ATTR.",
    /* EGR_EVLAN_TBL_ID          */ "Format for EGR_EVLAN TBL_ID.",
    /* EGR_FCOE_DELIMITER_ERROR_FRAMES_TABLE_COV_DEFS */ "",
    /* EGR_FCOE_FRAMES_COUNTER_COV_DEFS */ "Got 2 counters: FCOE_DELIMITER_ERROR_FRAMES and FCOE_INVALID_CRC_FRAMES",
    /* EGR_FCOE_INVALID_CRC_FRAMES_TABLE_COV_DEFS */ "",
    /* EGR_FIELD_EXTRACTION_PROFILE_CONTROL_IDX */ "Format for EGR_FIELD_EXTRACTION_PROFILE_CONTROL index.",
    /* EGR_FLEX_CONTAINER_UPDATE_PROFILE_INDEX */ "Egress EGR_FLEX_CONTAINER_UPDATE_PROFILE index",
    /* EGR_FLEX_CTR_ACTION_SET   */ "PDD Output Bus generic format",
    /* EGR_FLEX_CTR_ADDR_DEFINE  */ "flex counters memory and register offset",
    /* EGR_FLEX_CTR_BUS          */ "flex counters bus define",
    /* EGR_FLEX_CTR_BUS_POOL     */ "flex counters bus define for a pool",
    /* EGR_FLEX_CTR_COMPRESSED_PKT_ATTR */ "compressed packet attribute",
    /* EGR_FLEX_CTR_PKT_ATTR     */ "packet attribute",
    /* EGR_FLEX_CTR_PKT_RES_MAP_INDEX */ "Egress FLEX_CTR_PKT_RES_MAP index",
    /* EGR_FLEX_CTR_UDF          */ "flex counters udf fields definition",
    /* EGR_FLEX_PREEMPT_LOOKUP   */ "flex preempt Lookup. Port IF View",
    /* EGR_FLEX_PREEMPT_XFR_COUNT */ "Egress EDB Flex XFR COUNT Lookup.On ePkt arrival, provides guidance to ongoing preempt traffic on how many XFR cycles it could use before preemption",
    /* EGR_FPMOD_EMOP_BUFFER     */ "Bit Definitions of EGR_FPMOD_EMOP_BUFFER.",
    /* EGR_FRAGMENT_ID_TABLE_COV_DEFS */ "defines for ep pw init counter coverage analysis",
    /* EGR_HW_CTRL_Q_BUS         */ "Bit Definitions of EGR_HW_CTRL_Q_BUS.",
    /* EGR_INT_CN_TO_PKT_ECN_MAPPING_INDEX */ "Egress INT_CN_TO_PKT_ECN Mapping index",
    /* EGR_INT_CN_UPDATE_INDEX   */ "Egress INT_CN_UPDATE index",
    /* EGR_IP_TUNNEL_MPLS_ENTRY_0_3 */ "Position and description of bits in EGR_IP_TUNNEL for each or the 4 MPLS entries at each table location",
    /* EGR_IP_TUNNEL_MPLS_ENTRY_0_7 */ "Position and description of bits in EGR_IP_TUNNEL for each of the 8 MPLS entries at each table location.",
    /* EGR_IP_TUNNEL_MPLS_ENTRY_FORMAT */ "Position and description of bits in EGR_IP_TUNNEL for each or the 4/8 MPLS entries at each table location.",
    /* EGR_IP_TUNNEL_PDD_OUT_BUS */ "PDD Output Bus generic format",
    /* EGR_ISID_DOT1P_ATTRIBUTES */ "Format for ISID_DOT1P_ATTRIBUTES.",
    /* EGR_L2_TAG_CONTROL_PROFILE_DEL_INDEX */ "Egress L2 Tag control profile delete index",
    /* EGR_L2_TAG_CONTROL_PROFILE_INS_INDEX */ "Egress L2 Tag control profile insert index",
    /* EGR_L2_TAG_CONTROL_PROFILE_RW_INDEX */ "Egress L2 Tag control profile rewrite index",
    /* EGR_L3_INTF_EARLY_PDD_OUT_BUS */ "PDD Output Bus generic format",
    /* EGR_L3_INTF_PDD_OUT_BUS   */ "PDD Output Bus generic format",
    /* EGR_L3_NEXT_HOP_COMMON_COV_DEFS */ "defines for egr l3 next hop table coverage analysis",
    /* EGR_L3_NEXT_HOP_EARLY_PDD_OUT_BUS */ "PDD Output Bus generic format",
    /* EGR_L3_NEXT_HOP_PDD_OUT_BUS */ "PDD Output Bus generic format",
    /* EGR_MPLS_PRI_MAPPING_INDEX */ "Egress EGR_MPLS_PRI_MAPPING index",
    /* EGR_NAT_PACKET_EDIT_ACTION_PROFILE_FORMAT */ "EGR_NAT_PACKET_EDIT_ACTION_PROFILE format.",
    /* EGR_NAT_PACKET_EDIT_INFO_FORMAT */ "EGR_NAT_PACKET_EDIT_INFO format.",
    /* EGR_NAT_PACKET_EDIT_PDD_OUT_BUS */ "PDD Output Bus generic format",
    /* EGR_PERQ_XMT_COUNTERS_COV_DEFS */ "defines for ep pw init counter coverage analysis",
    /* EGR_PIPE_PKTINFO          */ "Bit Definitions of EGR_PIPE_PKTINFO",
    /* EGR_PKT_ECN_TO_EXP_MAPPING_INDEX */ "Egress PKT_ECN_TO_EXP_MAPPING index",
    /* EGR_PKT_FLOW_SELECT_TCAM_DOP_DOP */ "EGR_PKT_FLOW_SELECT_TCAM_DOP_DOP DOP description.",
    /* EGR_PKT_FLOW_SELECT_TCAM_INDEX_DOP_DOP */ "EGR_PKT_FLOW_SELECT_TCAM_INDEX_DOP_DOP DOP description.",
    /* EGR_PKT_FLOW_ZONE_SELECT_FORMAT */ "Bit Definitions of Packet Flow Select TCAM Zone selects.",
    /* EGR_PREEMPT_PKT_LEN_MEM   */ "Preempt Pkt Length Memory",
    /* EGR_QOS_CTRL_TCAM_DOP_DOP */ "EGR_QOS_CTRL_TCAM_DOP_DOP DOP description.",
    /* EGR_SEQUENCE_NUMBER_TABLE_COV_DEFS */ "defines for ep egr_sequence_number_table coverage analysis",
    /* EGR_SHAPE                 */ "Position and description of bits in EP_TO_MMU_SHAPE_Bus",
    /* EGR_SHAPE_INFO            */ "Egress Shape INFO format",
    /* EGR_SPECIAL_PKT_HANDLING_PROFILE_ID */ "Format for EGR_SPECIAL_PKT_HANDLING_PROFILE index.",
    /* EGR_STATS_FORMAT          */ "EGR_CNTR format for part of TDBGC vector.",
    /* EGR_TAG_STATUS            */ "Tag status.",
    /* EGR_TAP                   */ "Format for EGR_EVLAN TAP_TAG_ACTION.",
    /* EGR_TUNNEL_ECN_ENCAP_TABLE_INDEX */ "Egress Tunnel ECN Encap Table index",
    /* EGR_VC_AND_SWAP_EARLY_PDD_OUT_BUS */ "PDD Output Bus generic format",
    /* EGR_VC_AND_SWAP_PDD_OUT_BUS */ "PDD Output Bus generic format. The following fields are reserved: FIELD_1/TUNNEL_PTR_ACTION_SET, FIELD_2/SWITCHING_CTRLS_ACTION_SET, FIELD_4/HIGIG_CONTROLS_ACITON_SET, FIELD_10 /L2_MEMBERSHIP, FIELD_11/ VPLAG_CONTROLS, FIELD_12/MTU_CHECKS, FIELD_66/FLEX_CTR_1_ACTION_SET. The following 2 fields are reserved in TD3 but should be enable in the future: FIELD_32/FLEX_CONTAINER_UPDATE action set, FIELD_6/CLASS_ID_ACTION_SET.",
    /* EGR_VFT_PRI_MAP_INDEX     */ "Egress EGR_VFT_PRI_MAP index",
    /* EGR_VLAN_ACTION_MASK_PROFILE_FORMAT */ "Format for EGR_VLAN_ACTION_MASK_PROFILE.",
    /* EGR_VLAN_XLATE_TUNNEL_DATA */ "Define data fields for EGR_VLAN_XLATE when used to derive fields for MiM/L2GRE/VXLAN tunnel encap",
    /* EGR_VLAN_XLATE_TUNNEL_DATA_DOUBLE */ "Define data fields for EGR_VLAN_XLATE when used to derive fields for MiM/L2GRE/VXLAN tunnel encap",
    /* EGR_VLAN_XLATE_XLATE_DATA */ "Define data fields for EGR_VLAN_XLATE when used as traditional vlan translation",
    /* EGR_VLAN_XLATE_XLATE_DATA_DOUBLE */ "Define data fields for EGR_VLAN_XLATE when used as traditional vlan translation",
    /* EGR_ZONE_DOT1P_MAPPING_TABLE_INDEX */ "Egress EGR_ZONE_1/3_DOT1P_MAPPING_TABLE_* index",
    /* EGR_ZONE_QOS_MAPPING_TABLE_INDEX */ "Egress EGR_ZONE_1/2/3/4_QOS_MAPPING_TABLE index",
    /* EHG_HEADER                */ "Embedded Higig header sent between EP and port modules",
    /* EH_SEG_SEL_ENCODING       */ "Bit Definitions of the EH_SEG_SEL encoding",
    /* EH_TYPE_0_FORMAT          */ "EH_TYPE_0 fromat",
    /* EH_TYPE_1_FORMAT          */ "EH_TYPE_1 fromat",
    /* EH_TYPE_2_FORMAT          */ "EH_TYPE_2 fromat",
    /* EL3_0_DOP                 */ "EL3_0_DOP DOP description.",
    /* EL3_1_DOP                 */ "EL3_1_DOP DOP description.",
    /* EL3_2_DOP                 */ "EL3_2_DOP DOP description.",
    /* EL3_3_DOP                 */ "EL3_3_DOP DOP description.",
    /* EL3_4_DOP                 */ "EL3_4_DOP DOP description.",
    /* EL3_5_DOP                 */ "EL3_5_DOP DOP description.",
    /* EL3_DOP                   */ "Position and description of bits in EL3_DOP DOP chain",
    /* EL3_EMOP_BUFFER           */ "Format for EL3 EMOP buffer.",
    /* EL3_FC                    */ "Format for FCOE EOF.",
    /* EL3_OBJECT_BUS            */ "El3 internal Object Bus .",
    /* EL3_TIMESTAMP_ACTION_SET  */ "El3 Timestamp action set .",
    /* EMC_TO_DEQ_RD_REQ_COMPLETE_INFO */ "EMC to DEQ Cell read complete",
    /* EMC_TO_DEQ_RD_REQ_INFO    */ "EMC to CI Read Request Info",
    /* EMC_TO_ITE_WR_REQ_PKT_COMPLETE_INFO */ "EMC to ITE packet write complete",
    /* EMC_TO_LLS_INFO           */ "Position and description of bits",
    /* ENGINE_CTRL_DOP_DOP       */ "ENGINE_CTRL_DOP_DOP DOP description.",
    /* ENQS_CT_BYP               */ "Position and description of bits in the Cut-through bypass",
    /* ENQS_PIPE                 */ "Position and description of bits in the ENQS pipeline",
    /* ENQS_TO_DEQ_ASF_INFO      */ "ENQS to DEQ ASF cell info",
    /* ENQS_TO_ENQX_INFO         */ "Position and description of bits sent from ENQS to ENQX.",
    /* ENQS_TO_TOQ_CELLLINK_WDATA */ "Position and description of bits",
    /* ENQX_TO_CTR_TX_PKT_INFO   */ "ENQX to CTR TX packet info",
    /* ENQX_TO_PQE_INFO          */ "ENQX to PQE info",
    /* ENQX_TO_TCB_DROP_TYPE     */ "",
    /* ENQX_TO_TCB_MPB_INFO      */ "",
    /* ENQX_TO_TOQ_CELLLINK_WDATA */ "Position and description of bits",
    /* ENQX_TO_TOQ_SRCPORT_INFO  */ "Position and description of bits",
    /* ENQ_CT_DATA_DELAY_INFO    */ "ENQ CT logic data delay info",
    /* ENQ_DEF                   */ "enq specific defines",
    /* ENQ_DELAY_HOLD_INFO       */ "Position and description of bits in the ENQ Delay for Fragm purge INFO bus",
    /* ENQ_EXT_PTR               */ "Internal packet pointer",
    /* ENQ_INT_PTR               */ "Internal packet pointer",
    /* ENQ_PBI_SOP_INFO          */ "Position and description of bits when storing SOP info from PBI.",
    /* ENQ_PIPE                  */ "internal defines for cell data passed through enq pipe this is specific to enq block",
    /* ENQ_POST_PAC_SAE_SRCPORT_CTXT_FIFO */ "Store the EOP wr-data from MMU_ENQ_SRC_PORT_STATE_0/1/2 and read on SAE slot in post-pac stage",
    /* ENQ_PREV_CELL_INFO        */ "enq specific defines for previous cell information",
    /* ENQ_SOP_CELLHDR           */ "enq specific defines for previous cell information",
    /* ENQ_SOP_INFO              */ "enq specific defines for previous cell information",
    /* ENQ_SRC_CTXT_FIFO         */ "",
    /* ENQ_ST7_TO_ENQOUT         */ "ENQ to PQE info",
    /* ENQ_TOP_PIPE_TO_CT_INFO   */ "Position and description of bits internal of ENQ per pipe info to CT logic.",
    /* ENQ_TO_ADM_INFO           */ "ENQ to ADM per cell bus",
    /* ENQ_TO_ADM_PIPE           */ "internal defines for cell data passed through ENQ_TO_ADM_PIPE pipe this is specific to enq block",
    /* ENQ_TO_AGING_PKT_PTR      */ "ENQ to AGING pointer info",
    /* ENQ_TO_CLINKE_INFO        */ "Position and description of bits",
    /* ENQ_TO_CLINKI_INFO        */ "Position and description of bits",
    /* ENQ_TO_CTR_INFO           */ "Position and description of bits",
    /* ENQ_TO_CTR_TX_PKT_INFO    */ "ENQ to CTR TX packet info",
    /* ENQ_TO_DEQ_ASF_INFO       */ "ENQ to DEQ ASF cell info",
    /* ENQ_TO_E2EFC_INFO_BUS     */ "Position and description of bits in the ENQ to E2EFC INFO bus",
    /* ENQ_TO_E2EFC_QEN_PURGE_INFO */ "Position and description of bits",
    /* ENQ_TO_INTFI_INFO         */ "Position and description of bits",
    /* ENQ_TO_ITE_CTRL_INFO      */ "Position and description of bits",
    /* ENQ_TO_ITE_EMA_INFO       */ "Position and description of bits",
    /* ENQ_TO_MTRI_INC_INFO      */ "Position and description of bits",
    /* ENQ_TO_PQE_INFO           */ "ENQ to PQE info",
    /* ENQ_TO_QCN_INFO           */ "ENQ to QCN packet info",
    /* ENQ_TO_RQE_INFO           */ "ENQ_TO_RQE_INFO",
    /* ENQ_TO_RQE_INT_INFO       */ "Position and description of bits",
    /* ENQ_TO_RQE_RDDATA_INFO    */ "Position and description of bits",
    /* ENQ_TO_RQE_UC_INFO        */ "Position and description of bits",
    /* ENQ_TO_THDI_EMA_INFO      */ "Position and description of bits",
    /* ENQ_TO_THDI_EXT_INFO      */ "Position and description of bits",
    /* ENQ_TO_THDI_INT_INFO      */ "Position and description of bits",
    /* ENQ_TO_THDI_QEN_INFO      */ "Position and description of bits",
    /* ENQ_TO_THDI_QEN_PURGE_INFO */ "Position and description of bits",
    /* ENQ_TO_THDI_RQE_INFO      */ "Position and description of bits",
    /* ENQ_TO_THDO_EMA_INFO      */ "Position and description of bits",
    /* ENQ_TO_THDO_RQEE_INFO     */ "Position and description of bits",
    /* ENQ_TO_THDO_RQEI_INFO     */ "Position and description of bits",
    /* ENQ_TO_THDO_RQEQ_INFO     */ "Position and description of bits",
    /* ENQ_TO_TOQ_CELLLINK_WDATA */ "Position and description of bits in the ENQ to TOQ SOURCE PORT INFO bus",
    /* ENQ_TO_TOQ_SRCPORT_INFO   */ "Position and description of bits in the ENQ to TOQ SOURCE PORT INFO bus",
    /* ENQ_TO_TOQ_WCI_INFO       */ "Position and description of bits",
    /* ENQ_TO_TOQ_XQ_WR_INFO     */ "Position and description of bits in the ENQ to TOQ XQ WR INFO bus",
    /* ENQ_TO_WAMU_INFO          */ "Position and description of bits in the ENQ to WAMU INFO bus",
    /* EOP_BUFFER                */ "Bit Definitions of the EOP_BUFFER",
    /* EOP_BUFFER_B_COV_DEFS     */ "defines for EOP_BUFFER_B coverage analysis",
    /* EOP_BUFFER_MTU            */ "Bit Definitions of EOP_BUFFER_MTU.",
    /* EP2CXLP_IF                */ "define for single XLPORT interface",
    /* EPFS_0_DOP                */ "EPFS_0_DOP DOP description.",
    /* EPFS_1_DOP                */ "EPFS_1_DOP DOP description.",
    /* EPFS_DOP                  */ "Position and description of bits in EPFS_DOP DOP chain",
    /* EPFS_EMOP_BUFFER          */ "Format for EPFS EMOP buffer.",
    /* EPMOD_0_DOP               */ "EPMOD_0_DOP DOP description.",
    /* EPMOD_1_DOP               */ "EPMOD_1_DOP DOP description.",
    /* EPMOD_DOP                 */ "Position and description of bits in EPMOD_DOP DOP chain",
    /* EPMOD_PARITY_STATUS_BUS   */ "Position and description of parity-error sigs flowing from EPMOD->EDATABUF",
    /* EPOST_EMOP_BUFFER         */ "Epost eop buffer format",
    /* EPRG_FIELDS               */ "Position and description of bits in EPRG register file",
    /* EP_CPU_OP                 */ "EP CPU OP Bus Format.",
    /* EP_CPU_OPCODES            */ "Bit Definitions of the CPU Opcodes",
    /* EP_EFPPARS_CONTAINER_BASE */ "Base format for efppars container command",
    /* EP_EGRESS_STATS_COUNTER_COV_DEFS */ "defines for ep pw init counter coverage analysis",
    /* EP_EGR_COUNTER_VECTOR     */ "Bit Definitions of the Egress counter vector.",
    /* EP_EGR_DROP_VECTOR        */ "Bit Definitions of the Egr drop vector.",
    /* EP_EVXLT_KEY_TYPE         */ "Egress-VLAN Xlate table Key-Types",
    /* EP_HW_CTRL                */ "EP HW Ctrl Bus Format.",
    /* EP_PARSER0_HFE_CMD_POLICY_DATA */ "",
    /* EP_PARSER0_HFE_CONSTANTS  */ "This defines constants for HFE",
    /* EP_PARSER0_HFE_CONTROLS   */ "",
    /* EP_PARSER0_HFE_CONT_PROFILE */ "",
    /* EP_PARSER0_HFE_IN_BUS     */ "",
    /* EP_PARSER0_HFE_MUX_CONTROLS */ "",
    /* EP_PARSER0_HFE_MUX_IN_BUS */ "",
    /* EP_PARSER0_HFE_MUX_OUT_BUS */ "",
    /* EP_PARSER0_HFE_OUT_BUS    */ "",
    /* EP_PARSER0_HFE_POLICY_COMMAND_A */ "",
    /* EP_PARSER0_HFE_POLICY_COMMAND_B */ "",
    /* EP_PARSER0_HFE_POLICY_COMMAND_C */ "",
    /* EP_PARSER0_HFE_POLICY_COMMAND_D */ "",
    /* EP_PARSER0_HFE_POLICY_TABLE_DATA */ "",
    /* EP_PARSER0_HVE_TRIGGERS   */ "EP Parser0 HVE Triggers.",
    /* EP_PARSER1_HFE_CMD_POLICY_DATA */ "",
    /* EP_PARSER1_HFE_CONSTANTS  */ "This defines constants for HFE",
    /* EP_PARSER1_HFE_CONTROLS   */ "",
    /* EP_PARSER1_HFE_CONT_PROFILE */ "",
    /* EP_PARSER1_HFE_IN_BUS     */ "",
    /* EP_PARSER1_HFE_MUX_CONTROLS */ "",
    /* EP_PARSER1_HFE_MUX_IN_BUS */ "",
    /* EP_PARSER1_HFE_MUX_OUT_BUS */ "",
    /* EP_PARSER1_HFE_OUT_BUS    */ "",
    /* EP_PARSER1_HFE_POLICY_COMMAND_A */ "",
    /* EP_PARSER1_HFE_POLICY_COMMAND_B */ "",
    /* EP_PARSER1_HFE_POLICY_COMMAND_C */ "",
    /* EP_PARSER1_HFE_POLICY_COMMAND_D */ "",
    /* EP_PARSER1_HFE_POLICY_TABLE_DATA */ "",
    /* EP_PARSER1_HVE_TRIGGERS   */ "EP Parser0 HVE Triggers.",
    /* EP_PARSER2_HFE_CMD_POLICY_DATA */ "",
    /* EP_PARSER2_HFE_CONSTANTS  */ "This defines constants for HFE",
    /* EP_PARSER2_HFE_CONT_PROFILE */ "",
    /* EP_PARSER2_HFE_MUX_CONTROLS */ "",
    /* EP_PARSER2_HFE_MUX_IN_BUS */ "",
    /* EP_PARSER2_HFE_MUX_OUT_BUS */ "",
    /* EP_PARSER2_HFE_POLICY_COMMAND_A */ "",
    /* EP_PARSER2_HFE_POLICY_COMMAND_B */ "",
    /* EP_PARSER2_HFE_POLICY_COMMAND_C */ "",
    /* EP_PARSER2_HFE_POLICY_COMMAND_D */ "",
    /* EP_PARSER2_HFE_POLICY_TABLE_DATA */ "",
    /* EP_PW_INIT_COUNTER_COV_DEFS */ "defines for ep pw init counter coverage analysis",
    /* EP_REG                    */ "EP REG format",
    /* EP_TO_CLP_IF_BUS          */ "flex counters input format",
    /* EP_TO_CM_CPU_DMA_BUS      */ "EP to CMICx for the CPU DMA header fields",
    /* EP_TO_CPU_COMPOSITES_BUS  */ "Egress Pipeline to CMIC/CPU HDR format",
    /* EP_TO_CPU_HDR             */ "Egress Pipeline to CMIC HDR format",
    /* EP_TO_EDB_CTRL_BUS        */ "Ctrl Bus from EP to EDB.",
    /* EP_TO_EDB_DATA_BUS        */ "Data Bus from EP to EDB.",
    /* EP_TO_EDB_EARLY_CTRL_BUS  */ "Early Ctrl Bus from EP to EDB. These signals are sent 4 cycles ahead of the packet cell data",
    /* EP_TO_GPORT_CTRL_BUS      */ "Position and description of bits in ep_to_gp0/1/2_pkt_ctrl",
    /* EP_TO_MMU_REDIRECTION_BUS */ "EP to MMU Redirection Bus",
    /* EP_TO_PORT_1588_CTRL_BUS  */ "Position and description of bits in ep_to_xgp0/1/2/3_pkt_ctrl",
    /* EP_TO_QGPORT_CTRL_BUS     */ "Position and description of bits in EP_TO_QGPORT_CTRL_BUS",
    /* EP_TO_SPORT_CTRL_BUS      */ "Position and description of bits in ep_to_sp_pkt_ctrl",
    /* EP_TO_XGPORT_CTRL_BUS     */ "Position and description of bits in ep_to_xgp0/1/2/3_pkt_ctrl",
    /* EP_TO_XPORT_CTRL_BUS      */ "Position and description of bits in EP_TO_XPORT_CTRL_BUS",
    /* EP_TO_XQPORT_CTRL_BUS     */ "Position and description of bits in ep_to_xp0/1/2/3_pkt_ctrl",
    /* EP_VLAN_XLATE_1_DATA      */ "Format for EP_VLAN_XLATE_1 DATA.",
    /* EP_VLAN_XLATE_KEY         */ "Format for EP_VLAN_XLATE KEY.",
    /* ESMIF_COUNTER             */ "Bit Definitions of the ESMIF counter vector",
    /* ESMIF_DROP                */ "Bit Definitions of the ESMIF drop vector",
    /* ESM_ADM_CTRL_FIFO         */ "IESMIF Admission Control FIFO Format.",
    /* ESM_AUX1_FIFO             */ "IESMIF Aux1 FIFO Format.",
    /* ESM_COUNTER_SET           */ "Position and description of bits in the esm flex counter set",
    /* ESM_FP_CNTR_REQ           */ "Position and description of bits in Update ext_fp_cntr req to ESM",
    /* ESM_FULL_IPV6_ACL_KEY     */ "FGH424 Full IPV6 ACL Key description",
    /* ESM_IPV4_ACL144_KEY       */ "IPV4_ACL144 Key description",
    /* ESM_IPV4_ACL_7K_KEY       */ "Y288 IPV4 ACL Key description",
    /* ESM_IPV4_ACL_KEY          */ "B288 IPV4 ACL Key description",
    /* ESM_IPV6_ACL144_KEY       */ "IPV6_ACL144 Key description",
    /* ESM_KEYGEN_F10_MUX_SEL    */ "Mux Select encodings for ESM Key Generation Field F10. Width of F10 is 128 bits. If the encoding is programmed other than the listed below, logic will behave as if FIELD_NOT_PRESENT is set.",
    /* ESM_KEYGEN_F11_MUX_SEL    */ "Mux Select encodings for ESM Key Generation Field F11. Width of F11 is 128 bits. If the encoding is programmed other than the listed below, logic will behave as if FIELD_NOT_PRESENT is set.",
    /* ESM_KEYGEN_F1_MUX_SEL     */ "Mux Select encodings for ESM Key Generation Field F1. Width of F1 is 128 bits. If the encoding is programmed other than the listed below, logic will behave as if FIELD_NOT_PRESENT is set.",
    /* ESM_KEYGEN_F3_MUX_SEL     */ "Mux Select encodings for ESM Key Generation Field F3. Width of F3 is 16 bits. If the encoding is programmed other than the listed below, logic will behave as if FIELD_NOT_PRESENT is set.",
    /* ESM_KEYGEN_F4_MUX_SEL     */ "Mux Select encodings for ESM Key Generation Field F4. Width of F4 is 16 bits. If the encoding is programmed other than the listed below, logic will behave as if FIELD_NOT_PRESENT is set.",
    /* ESM_KEYGEN_F5_MUX_SEL     */ "Mux Select encodings for ESM Key Generation Field F5. Width of F5 is 16 bits. If the encoding is programmed other than the listed below, logic will behave as if FIELD_NOT_PRESENT is set.",
    /* ESM_KEYGEN_F6_MUX_SEL     */ "Mux Select encodings for ESM Key Generation Field F6. Width of F6 is 32 bits. If the encoding is programmed other than the listed below, logic will behave as if FIELD_NOT_PRESENT is set.",
    /* ESM_KEYGEN_F7_MUX_SEL     */ "Mux Select encodings for ESM Key Generation Field F7. Width of F7 is 32 bits. If the encoding is programmed other than the listed below, logic will behave as if FIELD_NOT_PRESENT is set.",
    /* ESM_KEYGEN_F8_MUX_SEL     */ "Mux Select encodings for ESM Key Generation Field F8. Width of F8 is 64 bits. If the encoding is programmed other than the listed below, logic will behave as if FIELD_NOT_PRESENT is set.",
    /* ESM_KEYGEN_F9_MUX_SEL     */ "Mux Select encodings for ESM Key Generation Field F9. Width of F9 is 128 bits. If the encoding is programmed other than the listed below, logic will behave as if FIELD_NOT_PRESENT is set.",
    /* ESM_KEYGEN_FLAGS_MUX_SEL  */ "Bit Selects in FLAGS Field. Selectable width of FLAGS is 16 bits.",
    /* ESM_L2_ACL144_KEY         */ "L2_ACL144 Key description",
    /* ESM_L2_ACL_7K_KEY         */ "X274 L2 ACL Key description",
    /* ESM_L2_ACL_KEY            */ "A274 L2 ACL Key description",
    /* ESM_L2_IPV4_ACL_KEY       */ "M408 L2+IPV4 ACL Key description",
    /* ESM_L2_IPV6_ACL_KEY       */ "L432 L2+IPV6 ACL Key description",
    /* ESM_RSP_WORD_0_ERR_INFO   */ "Description of bits in ERR_INFO field of RSP_WORD_0 driven by ESM",
    /* ESM_SEARCH_REQUEST        */ "Position and description of bits in Search Request to ESM",
    /* ESM_SEARCH_RESULTS        */ "Position and description of bits in Search Results from ESM",
    /* ESM_SHORT_IPV6_ACL_KEY    */ "CDE360 Short IPV6 ACL Key description",
    /* ESM_SVC_SET               */ "Position and description of bits in the esm svc action set",
    /* ES_TO_DEQ_PORT_DEMAND_ST  */ "Position and description of bits in the ES TO DEQ Port Demand State bus",
    /* ES_TO_MTRO_EGR_SHAPE      */ "Egress shape info bus from VBS to MTRO for L0 nodes",
    /* ETAG_COMPOSITES           */ "Zone l2 tag presence format.",
    /* ETAG_HDR                  */ "4BYTES OF ETAG HEADER AFTER ETHERTYPE.",
    /* ETHERTYPE                 */ "EtherType is a two-octet field in an Ethernet  frame.  It is used to indicate which protocol is encapsulated in the payload of an Ethernet Frame.",
    /* ETH_II_DOUBLE_TAGGED_HDR  */ "Ethernet 2 single tagged header specification",
    /* ETH_II_SINGLE_TAGGED_HDR  */ "Ethernet 2 single tagged header specification",
    /* ETH_II_UNTAGGED_HDR       */ "Ethernet 2 untagged specification",
    /* ETRAP_FILTER_0_COV_DEFS   */ "Elephant trap bloom filter counter",
    /* ETRAP_FILTER_1_COV_DEFS   */ "Elephant trap bloom filter counter",
    /* ETRAP_FILTER_2_COV_DEFS   */ "Elephant trap bloom filter counter",
    /* ETRAP_FILTER_3_COV_DEFS   */ "Elephant trap bloom filter counter",
    /* ETRAP_FLOW_CNTRL_LEFT_COV_DEFS */ "Elephant trap flow control and state",
    /* ETRAP_FLOW_CNTRL_RIGHT_COV_DEFS */ "Elephant trap flow control and state",
    /* ETRAP_FLOW_COUNT          */ "Bit Definitions of ETRAP_FLOW_COUNT format.",
    /* ETRAP_FLOW_COUNT_LEFT_COV_DEFS */ "Elephant trap flow count",
    /* ETRAP_FLOW_COUNT_RIGHT_COV_DEFS */ "Elephant trap flow count",
    /* ETRAP_FLOW_CTRL           */ "Bit Definitions of ETRAP_FLOW_CTRL format.",
    /* ETRAP_FLOW_HASH           */ "Bit Definitions of ETRAP_FLOW_HASH format.",
    /* ETRAP_FLOW_HASH_L0_COV_DEFS */ "Elephant trap flow table (hash portion).",
    /* ETRAP_FLOW_HASH_L1_COV_DEFS */ "Elephant trap flow table (hash portion).",
    /* ETRAP_FLOW_HASH_L2_COV_DEFS */ "Elephant trap flow table (hash portion).",
    /* ETRAP_FLOW_HASH_L3_COV_DEFS */ "Elephant trap flow table (hash portion).",
    /* ETRAP_FLOW_HASH_L4_COV_DEFS */ "Elephant trap flow table (hash portion).",
    /* ETRAP_FLOW_HASH_R0_COV_DEFS */ "Elephant trap flow table (hash portion).",
    /* ETRAP_FLOW_HASH_R1_COV_DEFS */ "Elephant trap flow table (hash portion).",
    /* ETRAP_FLOW_HASH_R2_COV_DEFS */ "Elephant trap flow table (hash portion).",
    /* ETRAP_FLOW_HASH_R3_COV_DEFS */ "Elephant trap flow table (hash portion).",
    /* ETRAP_FLOW_HASH_R4_COV_DEFS */ "Elephant trap flow table (hash portion).",
    /* ETRAP_HASH_SAVE           */ "Bit Definitions of ETRAP_HASH_SAVE memory. Saves SOP signals for use on EOP internally.",
    /* ETRAP_IN                  */ "Bit Definitions of Etrap Input Signals.",
    /* ETRAP_OUT                 */ "Results for Etrap processed packets.",
    /* ETU_CP_MEM_ACC_REQ        */ "table read/write request bus",
    /* ETU_CP_XLAT_RESULT        */ "control plane translation result format",
    /* ETU_TX_PIPE_CTL_FIFO      */ "format for etu_tx_pipe_ctl_fifo input",
    /* EVLAN_DOP                 */ "Position and description of bits in EVLAN_DOP DOP chain",
    /* EXACT_MATCH_2_DATA        */ "Format for EXACT_MATCH_2 DATA.",
    /* EXACT_MATCH_4_DATA        */ "Format for EXACT_MATCH_4 DATA.",
    /* EXACT_MATCH_CTRL          */ "Exact Match signals carried from IFWD to IRSEL1",
    /* EXACT_MATCH_DATA          */ "Exact Match signals carried from the Exact Match Results to the IFP",
    /* EXACT_MATCH_DOP           */ "EXACT_MATCH_DOP DOP description.",
    /* EXACT_MATCH_KEY           */ "Format for EXACT_MATCH_2 and EXACT_MATCH_4 KEYs.",
    /* EXACT_MATCH_KEY_DOP       */ "EXACT_MATCH_KEY_DOP DOP description.",
    /* EXACT_MATCH_KEY_SPECIAL   */ "Special format for ism_lp_ctl.v module.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_FORMAT */ "format for EXACT_MATCH_LOGICAL_TABLE_SELECT data",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_FORMAT */ "format for EXACT_MATCH_LOGICAL_TABLE_SELECT TCAM",
    /* EXACT_MATCH_LOOKUP_STATUS */ "Exact Match Lookup STatus  as defined the spec",
    /* EXACT_MATCH_LTS_DOP       */ "EXACT_MATCH_LTS_DOP DOP description.",
    /* EXACT_MATCH_PDD_OUT_BUS   */ "PDD Output Bus generic format",
    /* EXACT_MATCH_POLICY        */ "Exact Match Policy",
    /* EXACT_MATCH_POLICY_MODE128 */ "Exact Match Policy",
    /* EXACT_MATCH_POLICY_MODE160 */ "Exact Match Policy",
    /* EXACT_MATCH_POLICY_MODE320 */ "Exact Match Policy",
    /* EXACT_MATCH_REDIRECT_SET  */ "Bit Definitions of the Redirection Field in IFP Policy Table",
    /* EXACT_MATCH_RESULT_BUS    */ "Exact Match signals carried from IFWD to IRSEL1",
    /* EXACT_MATCH_TO_FP_KEY_SEL_BUS */ "Exact Match signals carried from Exact Match to FP Lookup",
    /* EXPORT_FIFO_DATA          */ "details of one entry of export fifo",
    /* EXPORT_TIMER_BUS          */ "Export timer bus from AGE block",
    /* EXTENDED_VIEW_L3_OIF_ACTION_SET */ "PDD Output Bus generic format",
    /* EXTENDED_VIEW_MACDA_ACTION_SET */ "PDD Output Bus generic format",
    /* EXTRACTION_CTRL_ID_ACTION_SET */ "PDD Output Bus generic format",
    /* EXT_AD_1X                 */ "format for ext_assoc_data - 35b",
    /* EXT_AD_2X                 */ "format for ext_assoc_data - 70b",
    /* EXT_AD_3X                 */ "format for ext_assoc_data - 105b",
    /* EXT_AD_4X                 */ "format for ext_assoc_data - 140b",
    /* EXT_AD_6X                 */ "format for ext_assoc_data - 210b",
    /* EXT_AD_REQ_ADDR           */ "ESMIF ADDR Format.",
    /* EXT_HBIT_CMD              */ "format for ext_hbit_cmd_wdata",
    /* EXT_TCAM_REQ_WDATA        */ "Request External TCAM",
    /* EXT_TCAM_RSP_WDATA        */ "TCAM RESPONSE FORMAT",
    /* FCOE_ACTION_SET           */ "PDD Output Bus generic format",
    /* FCOE_HDR                  */ "FCOE header specification",
    /* FCOE_SOF_HDR              */ "FCOE SOF header specification",
    /* FCOE_STANDARD_HDR         */ "FCOE header specification",
    /* FCOE_VFT_HDR              */ "FCOE VTF header specification",
    /* FIELD_BUS_MERGE_PROFILE_0_INDEX */ "FIELD_BUS_MERGE_PROFILE  index",
    /* FIELD_BUS_MERGE_PROFILE_INDEX */ "FIELD_BUS_MERGE_PROFILE  index",
    /* FIFO_RD_DMA_ERROR_VEC     */ "Error_vec indication in CMIC FIFO RD DMA operation",
    /* FIXED_ACTION_SET          */ "PDD Output Bus generic format",
    /* FIXED_DATA                */ "Fixed Data Format.",
    /* FLEXKEY_MEMSEL            */ "Packet Fields Bus",
    /* FLEX_ASSIGNMENT_CTRL_FORMAT */ "Flex Flow ASSIGNMENT_CTRL Format.",
    /* FLEX_BIN_HASH_PROFILE_FORMAT */ "Flex RTAG7 hash bin profile Format.",
    /* FLEX_CONTAINER_UPDATE_ACTION_SET */ "PDD Output Bus generic format",
    /* FLEX_CTR_ACTION_BUS_POOL  */ "flex counters action bus defines for a pool",
    /* FLEX_CTR_ACTION_SET       */ "PDD Output Bus generic format",
    /* FLEX_CTR_COV_DEFS         */ "defines for coverage analysis",
    /* FLEX_CTR_DEFINES          */ "Misc Defines for flex counter",
    /* FLEX_CTR_FT_READ_DATA     */ "flex counters bus define for a pool",
    /* FLEX_CTR_IN_BUS           */ "flex counters input format",
    /* FLEX_CTR_OPCODE_BUS_POOL  */ "flex counters opcode bus defines for a pool",
    /* FLEX_CTR_OUTBUS           */ "flex counters output format",
    /* FLEX_CTR_SIDE_OUTBUS      */ "flex counters input format",
    /* FLEX_EDITOR_COMPOSITES_BUS */ "Field bus used for flex editor hdr construction/rewrite",
    /* FLEX_EDITOR_COMPUTED_FIELD_BUS */ "Egress computed fields for seqence, TTL, TOS. It is only valid for SOP cell.",
    /* FLEX_EDITOR_DELETE_COMMAND_BASE */ "",
    /* FLEX_EDITOR_EDIT_ACTION_IN_BUS */ "Complete Input bus used for edit action block within flex editor",
    /* FLEX_EDITOR_EDIT_ACTION_OUT_BUS */ "Complete Output bus used for edit action block within flex editor",
    /* FLEX_EDITOR_EDIT_HDR_GEN_IN_BUS */ "Complete Input bus used for edit header generation block within flex editor",
    /* FLEX_EDITOR_EDIT_HDR_GEN_OUT_BUS */ "Complete Output bus used for edit header generation block within flex editor",
    /* FLEX_EDITOR_EDIT_ID_DEL_SET_BASE */ "",
    /* FLEX_EDITOR_EDIT_ID_DEL_TABLE */ "",
    /* FLEX_EDITOR_EDIT_ID_INS_1_TABLE */ "",
    /* FLEX_EDITOR_EDIT_ID_INS_2_TABLE */ "",
    /* FLEX_EDITOR_EDIT_ID_INS_SET_BASE */ "",
    /* FLEX_EDITOR_EDIT_ID_RW_SET_BASE */ "",
    /* FLEX_EDITOR_EDIT_ID_RW_TABLE */ "",
    /* FLEX_EDITOR_EDIT_PKT_MOD_IN_BUS */ "Complete Input bus used for edit packet modification block within flex editor",
    /* FLEX_EDITOR_EDIT_PKT_MOD_OUT_BUS */ "Complete Output bus used for edit packet modification block within flex editor",
    /* FLEX_EDITOR_EH_TYPE_0_FORMAT */ "EH_TYPE_0 fromat",
    /* FLEX_EDITOR_EH_TYPE_1_FORMAT */ "EH_TYPE_1 fromat",
    /* FLEX_EDITOR_EH_TYPE_2_FORMAT */ "EH_TYPE_2 fromat",
    /* FLEX_EDITOR_ENGINE_VALID  */ "",
    /* FLEX_EDITOR_ERROR_VECTOR_FORMAT */ "Error conditions in Flex editor",
    /* FLEX_EDITOR_EXTRACTED_PKT_SET_BASE */ "",
    /* FLEX_EDITOR_FIELD_16BIT_COMMAND_BASE */ "",
    /* FLEX_EDITOR_FIELD_32BIT_COMMAND_BASE */ "",
    /* FLEX_EDITOR_FIELD_BUS     */ "Egress Object Bus flow from MPB to rest of egress pipeline for various process. It is only valid for SOP cell.",
    /* FLEX_EDITOR_FIXED_HDR_L2_PROFILE_PTR_SET_BASE */ "",
    /* FLEX_EDITOR_FIXED_HDR_L2_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_FIXED_HDR_L3_PROFILE_PTR_SET_BASE */ "",
    /* FLEX_EDITOR_FIXED_HDR_L3_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_FIXED_HDR_LOOPBACK_PROFILE_PTR_SET_BASE */ "",
    /* FLEX_EDITOR_FIXED_HDR_LOOPBACK_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_FIXED_HDR_NEXT_PROTO_ID_SET_BASE */ "",
    /* FLEX_EDITOR_FIXED_HDR_NEXT_PROTO_TABLE */ "",
    /* FLEX_EDITOR_FIXED_HDR_PROFILE_PTR_SET_BASE */ "",
    /* FLEX_EDITOR_FIXED_HDR_SYS_PROFILE_PTR_SET_BASE */ "",
    /* FLEX_EDITOR_FIXED_HDR_SYS_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_FIXED_HDR_TUNNEL_PROFILE_PTR_SET_BASE */ "",
    /* FLEX_EDITOR_FIXED_HDR_TUNNEL_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_FIXED_L2_HEADER_SET_BASE */ "",
    /* FLEX_EDITOR_FIXED_L3_HEADER_SET_BASE */ "",
    /* FLEX_EDITOR_FIXED_SYS_HEADER_SET_BASE */ "",
    /* FLEX_EDITOR_FIXED_TUNNEL_HEADER_SET_BASE */ "",
    /* FLEX_EDITOR_FLEX_HDR_16BIT_FS_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_FLEX_HDR_32BIT_FS_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_FLEX_HDR_ALU_COMMAND_BASE */ "",
    /* FLEX_EDITOR_FLEX_HDR_ALU_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_FLEX_HDR_FIELD_BUS */ "Flex header field bus after extraction in Edit Action block to Flex Header Engine.",
    /* FLEX_EDITOR_FLEX_HDR_FIELD_SELECT_COMMAND_BASE */ "",
    /* FLEX_EDITOR_FLEX_HDR_HC_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_FLEX_HDR_NEXT_PROTO_ID_SET_BASE */ "",
    /* FLEX_EDITOR_FLEX_HDR_NEXT_PROTO_TABLE */ "",
    /* FLEX_EDITOR_FLEX_HDR_OW_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_FLEX_HDR_PROFILE_PTR_SET_BASE */ "",
    /* FLEX_EDITOR_FLEX_HDR_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_FLEX_HDR_USER_FIELD_FORMAT */ "Register formats for C code",
    /* FLEX_EDITOR_FLEX_HEADER_SET_BASE */ "",
    /* FLEX_EDITOR_HDR_EGR_START_SET_BASE */ "",
    /* FLEX_EDITOR_HDR_ID_LIST_COMMAND_BASE */ "",
    /* FLEX_EDITOR_HDR_ID_SET_BASE */ "",
    /* FLEX_EDITOR_HDR_LIST_ARRAY_BASE */ "",
    /* FLEX_EDITOR_HDR_SIZE_SET_BASE */ "",
    /* FLEX_EDITOR_HG2_UNUSED_FIELDS */ "Unused hg2 header fields for transit. Used in fixed sys header construction",
    /* FLEX_EDITOR_HG_EH_CONTROL_FORMAT */ "Register formats for C code",
    /* FLEX_EDITOR_HIGIG_HEADER_CONFIG_FORMAT */ "Register formats for C code",
    /* FLEX_EDITOR_INSERT_COMMAND_BASE */ "",
    /* FLEX_EDITOR_IN_BUS        */ "Complete Input bus used for flex editor block",
    /* FLEX_EDITOR_L2_FIELD_BUS  */ "L2 field bus after extraction in Edit Action block to L2 Fixed Engine",
    /* FLEX_EDITOR_L2_TAG_BUS    */ "Egress L2 Tag Bus for various TAGs. It is only valid for SOP cell.",
    /* FLEX_EDITOR_L3_FIELD_BUS  */ "L3 field bus after extraction in Edit Action block to L3 Fixed Engine",
    /* FLEX_EDITOR_MATCH_ID_COMMAND_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_MATCH_ID_SET_BASE */ "",
    /* FLEX_EDITOR_MATCH_ID_TABLE */ "",
    /* FLEX_EDITOR_MHC_CHECKSUM_COMMAND_BASE */ "",
    /* FLEX_EDITOR_MHC_CHECKSUM_FLEX_HDR_SUM_SET_BASE */ "",
    /* FLEX_EDITOR_MHC_CHECKSUM_MASK_BITMAP_64_FORMAT */ "Register formats for C code",
    /* FLEX_EDITOR_MHC_CHECKSUM_POSITION_SET_BASE */ "",
    /* FLEX_EDITOR_MHC_CHECKSUM_PROFILE_PTR_SET_BASE */ "",
    /* FLEX_EDITOR_MHC_CHECKSUM_PROFILE_SET_BASE */ "",
    /* FLEX_EDITOR_MHC_CHECKSUM_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_MHC_CHECKSUM_RW_DELTA_SET_BASE */ "",
    /* FLEX_EDITOR_MHC_CRC_COMMAND_BASE */ "",
    /* FLEX_EDITOR_MHC_CRC_PROFILE_PTR_SET_BASE */ "",
    /* FLEX_EDITOR_MHC_CRC_PROFILE_SET_BASE */ "",
    /* FLEX_EDITOR_MHC_CRC_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_MIRROR_ENCAP_CHECKSUM_COMMAND_BASE */ "",
    /* FLEX_EDITOR_MIRROR_ENCAP_HEADER_SET_BASE */ "",
    /* FLEX_EDITOR_MIRROR_ENCAP_PKT_LEN_COMMAND_BASE */ "",
    /* FLEX_EDITOR_MIRROR_ENCAP_PROFILE_1_TABLE */ "",
    /* FLEX_EDITOR_MIRROR_ENCAP_PROFILE_2_TABLE */ "",
    /* FLEX_EDITOR_MIRROR_ENCAP_PROFILE_3_TABLE */ "",
    /* FLEX_EDITOR_MIRROR_FIELD_BUS */ "Mirror field bus after extraction in Edit Action block to Mirror Engine",
    /* FLEX_EDITOR_MIRROR_PROFILE_PTR_SET_BASE */ "",
    /* FLEX_EDITOR_MMU_PKT_LENGTH_ADJUST_FORMAT */ "Register formats for C code",
    /* FLEX_EDITOR_OBJECT_BUS    */ "Egress Object Bus flow from MPB to rest of egress pipeline for various process. It is only valid for SOP cell.",
    /* FLEX_EDITOR_OUT_BUS       */ "Complete Output bus used for flex editor block",
    /* FLEX_EDITOR_OW_FIELD_SELECT_COMMAND_BASE */ "",
    /* FLEX_EDITOR_PKT_LENGTH_SET_BASE */ "",
    /* FLEX_EDITOR_PKT_LEN_ATTRIBUTE_SET_BASE */ "",
    /* FLEX_EDITOR_PKT_LEN_COMMAND_BASE */ "",
    /* FLEX_EDITOR_REWRITE_ALU_COMMAND_BASE */ "",
    /* FLEX_EDITOR_REWRITE_COMMAND_BASE */ "",
    /* FLEX_EDITOR_REWRITE_FIELD_SELECT_COMMAND_BASE */ "",
    /* FLEX_EDITOR_RW_ALU_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_RW_FIELD_BUS  */ "Rewrite field bus after extraction in Edit Action block to rewrite Engine.",
    /* FLEX_EDITOR_RW_FS_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_RW_HC_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_RW_HEADER_SET_BASE */ "",
    /* FLEX_EDITOR_RW_NEXT_PROTO_ID_SET_BASE */ "",
    /* FLEX_EDITOR_RW_NEXT_PROTO_TABLE */ "",
    /* FLEX_EDITOR_RW_PROFILE_PTR_SET_BASE */ "",
    /* FLEX_EDITOR_RW_PROFILE_TABLE */ "",
    /* FLEX_EDITOR_RW_USER_FIELD_FORMAT */ "Register formats for C code",
    /* FLEX_EDITOR_SYS_FIELD_BUS */ "System field bus after extraction in Edit Action block to System Fixed Engine.",
    /* FLEX_EDITOR_TIMESTAMP_SET_BASE */ "",
    /* FLEX_EDITOR_TUNNEL_FIELD_BUS */ "Tunnel field bus after extraction in Edit Action block to Tunnel Fixed Engine.",
    /* FLEX_EDITOR_TUNNEL_PIMDR1_CFG0_FORMAT */ "Register formats for C code",
    /* FLEX_EDITOR_TUNNEL_PIMDR1_CFG1_FORMAT */ "Register formats for C code",
    /* FLEX_EDITOR_TUNNEL_PIMDR2_CFG0_FORMAT */ "Register formats for C code",
    /* FLEX_EDITOR_TUNNEL_PIMDR2_CFG1_FORMAT */ "Register formats for C code",
    /* FLEX_EDITOR_USER_FIELD_32BIT_COMMAND_BASE */ "",
    /* FLEX_EDITOR_VHLEN_SET_BASE */ "",
    /* FLEX_EDITOR_VXLAN_CONTROL_64_FORMAT */ "Register formats for C code",
    /* FLEX_EDITOR_ZONE_SIZE_SET_BASE */ "",
    /* FLEX_HVE_TRIGGERS_FORMAT  */ "HVE (header verfication engine) profile format.",
    /* FLEX_IFP_KEY_SIGNALS      */ "FLEX_IFP_KEY_SIGNALS",
    /* FLEX_KEY_CAM_BIST_CONFIG_64 */ "",
    /* FLEX_KEY_CAM_BIST_STATUS  */ "",
    /* FLEX_KEY_GEN_EXTRACT_COMMAND_BASE */ "",
    /* FLEX_KEY_GEN_EXTRACT_COMMAND_TYPE_A_BASE */ "",
    /* FLEX_KEY_GEN_EXTRACT_COMMAND_TYPE_B_BASE */ "",
    /* FLEX_KEY_GEN_EXTRACT_COMMAND_TYPE_C_BASE */ "",
    /* FLEX_KEY_GEN_MUX_CTRL     */ "",
    /* FLEX_KEY_GEN_MUX_CTRL_PLUS_MASK_TYPE_B */ "",
    /* FLEX_KEY_GEN_MUX_CTRL_PLUS_MASK_TYPE_C */ "",
    /* FLEX_KEY_GEN_MUX_CTRL_TYPE_A */ "",
    /* FLEX_KEY_LOOKUP_CONTROL_SRAM */ "",
    /* FLEX_KEY_MASK             */ "",
    /* FLEX_KEY_SER_CONTROL      */ "",
    /* FLEX_KEY_TCAM             */ "",
    /* FLEX_KEY_TCAM1            */ "",
    /* FLEX_KEY_TM_CONTROL_64    */ "",
    /* FLEX_KEY_TM_CONTROL_TYPE_B */ "",
    /* FLEX_PREEMPT              */ "flex preempt",
    /* FLEX_PREEMPT_START        */ "flex preempt start",
    /* FLEX_PREEMPT_TERMINATE    */ "flex preempt terminate",
    /* FLEX_RTAG7_HASH_OBJECT_BUS_FORMAT */ "Flex RTAG7 hash object bus Format.",
    /* FLOWSET_COV_DEFS          */ "defines for flowset coverage analysis",
    /* FLOWSET_MEMBER_COV_DEFS   */ "defines for flowset_member coverage analysis",
    /* FLOWSET_TIMESTAMP_PAGE_COV_DEFS */ "defines for flowset_timestamp_page coverage analysis",
    /* FMT_ALPM_ASSOC_DATA       */ "ALPM associated data format from shared memory",
    /* FMT_ALPM_ENTRY_DATA       */ "ALPM associated data format from shared memory",
    /* FMT_SAMPLE                */ "Sample format specification",
    /* FORWARDING_1_FLEX_KEY_GEN_IN_CONTROL_BUS */ "FlexKeyGen Input Control Bus for forwarding tables. Same format for L3_ENTRY, L2_ENTRY, and L3_DEFIP(LPM)",
    /* FORWARDING_1_FLEX_KEY_GEN_OUT_BUS */ "FlexKeyGen Output bus L2 ENTRY",
    /* FORWARDING_1_KEYS_DOP     */ "FORWARDING_1_KEYS_DOP DOP description.",
    /* FORWARDING_1_LKUP_DOP     */ "FORWARDING_1_LKUP_DOP DOP description.",
    /* FORWARDING_1_MISC_ATTRIBUTES_ACTION_SET */ "PDD Output Bus generic format",
    /* FORWARDING_1_PDD_OUT_BUS  */ "PDD Output Bus generic format",
    /* FORWARDING_1_QOS_ACTION_SET */ "PDD Output Bus generic format",
    /* FORWARDING_2_FLEX_KEY_GEN_IN_CONTROL_BUS */ "FlexKeyGen Input Control Bus for forwarding tables. Same format for L3_ENTRY, L2_ENTRY, and L3_DEFIP(LPM)",
    /* FORWARDING_2_FLEX_KEY_GEN_OUT_BUS */ "FlexKeyGen Output bus L3 ENTRY",
    /* FORWARDING_2_KEY_1_DOP    */ "FORWARDING_2_KEY_1_DOP DOP description.",
    /* FORWARDING_2_KEY_2_DOP    */ "FORWARDING_2_KEY_2_DOP DOP description.",
    /* FORWARDING_2_LKUP_DOP     */ "FORWARDING_2_LKUP_DOP DOP description.",
    /* FORWARDING_2_MISC_ATTRIBUTES_ACTION_SET */ "PDD Output Bus generic format",
    /* FORWARDING_2_PDD_OUT_BUS  */ "PDD Output Bus generic format",
    /* FORWARDING_3_FLEX_KEY_GEN_IN_CONTROL_BUS */ "FlexKeyGen Input Control Bus for forwarding tables. Same format for L3_ENTRY, L2_ENTRY, and L3_DEFIP(LPM)",
    /* FORWARDING_3_FLEX_KEY_GEN_OUT_BUS */ "FlexKeyGen Output bus LPM(L3_DEFIP)",
    /* FORWARDING_3_KEY_0_DOP    */ "FORWARDING_3_KEY_0_DOP DOP description.",
    /* FORWARDING_3_KEY_1_DOP    */ "FORWARDING_3_KEY_1_DOP DOP description.",
    /* FORWARDING_3_KEY_2_DOP    */ "FORWARDING_3_KEY_2_DOP DOP description.",
    /* FORWARDING_3_KEY_3_DOP    */ "FORWARDING_3_KEY_3_DOP DOP description.",
    /* FORWARDING_3_LKUP_DOP     */ "FORWARDING_3_LKUP_DOP DOP description.",
    /* FORWARDING_3_MISC_ATTRIBUTES_ACTION_SET */ "PDD Output Bus generic format",
    /* FORWARDING_3_PDD_OUT_BUS  */ "PDD Output Bus generic format",
    /* FORWARDING_FLEX_KEY_GEN_IN_BUS */ "Ingress Forwarding Flex key gen input bus. It is only valid for SOP cell.",
    /* FORWARDING_KEYGEN_OBJECT_BUS */ "Tunnel adapt object bus portion of tunnel_adapt_flex_key_gen_in_bus. It is only valid for SOP cell.",
    /* FP                        */ "Position and description of bits in FP FIELDS",
    /* FP_COPY_TO_CPU_SET        */ "Position and description of bits in the copy to cpu set",
    /* FP_COUNTER_SET            */ "Position and description of bits in the counter set",
    /* FP_CPU_COS_SET            */ "Position and description of bits in the cpu cos set",
    /* FP_DW                     */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* FP_GOA_SET                */ "Position and description of bits in the goa redirect set",
    /* FP_HGPRXY_AUX_HDR_BITMAP  */ "FP_HGPRXY AUX_HDR_BITMAP.",
    /* FP_L3SW_L2_FIELDS_SET     */ "Position and description of bits in the l3sw_l2_fields set",
    /* FP_LOOKUP                 */ "Bit Definitions of the FP lookup vector",
    /* FP_LOOKUP_STATUS_VECTOR   */ "Bit Definitions of the FP lookup status vector.",
    /* FP_METER_SET              */ "Position and description of bits in the meter set",
    /* FP_MIRROR_SET             */ "Position and description of bits in the mirror set",
    /* FP_MISC_1_SET             */ "Position and description of bits in the misc_1 set",
    /* FP_MISC_2_SET             */ "Position and description of bits in the misc_2 set",
    /* FP_MPLS_LABEL             */ "",
    /* FP_OAM_SET                */ "Position and description of bits in the oam set",
    /* FP_PORT_FIELD_SEL_SLICE_ENTRY_0_11 */ "IFP slice key control",
    /* FP_PORT_FIELD_SEL_SLICE_ENTRY_0_15 */ "IFP slice key control",
    /* FP_PROFILE_SET            */ "Position and description of bits in the profile action set",
    /* FP_REDIRECT_SET           */ "Position and description of bits in the redirect set",
    /* FP_RESOLUTION             */ "FP resolution packet field values",
    /* FP_SHARED_METER_SET       */ "Position and description of bits in the shared meter set",
    /* FTP_FIRST_VEC_FORMAT_L2   */ "Position and description of bits in the MB to DQX HDRMISC INFO bus.",
    /* FTP_FIRST_VEC_FORMAT_L3   */ "Position and description of bits in the MB to DQX HDRMISC INFO bus.",
    /* FT_CMICM_TO_IP0_EP2_X     */ "Feedthrough bus from cmimc to ip0_ep2_x, through mby, mbx, ep1",
    /* FT_CMICM_TO_IP45_SHARED   */ "Feedthrough bus from cmicm to ip45_shared",
    /* FT_CMICM_TO_MMU1          */ "Feedthrough bus from cmicm to mmu1",
    /* FT_CMICM_TO_PGW_X         */ "Feedthrough bus from cmicm to pgw_cl_x",
    /* FT_CMICM_TO_PGW_Y         */ "Feedthrough bus from cmicm to pgw_cl_y",
    /* FT_FIXED_ASSOCIATED_DATA  */ "EXACT_MATCH Hash Table Flow Tracker Fixed Associated Data Fields",
    /* FT_IN_BUS                 */ "Input bus to flow tracker core module",
    /* FT_IP0_EP2_TO_CMICM       */ "Feedthrough bus from ip0_ep2_x to cmicm via mbx mby",
    /* FT_IP0_EP2_TO_IP5         */ "Feedthrough bus from ip0_ep2 to ip5",
    /* FT_IP0_EP2_TO_IP1_EP0     */ "Feedthrough bus from ip0_ep2_x/y to ip1_ep0_x/y",
    /* FT_IP0_EP2_TO_IP45_SHARED */ "Feedthrough bus from ip0_ep2_x/y to ip45_shared",
    /* FT_IP0_EP2_TO_MMU0        */ "Feedthrough bus from ip0_ep2 to mmu0",
    /* FT_IP0_EP2_X_TO_IP0_EP2_Y */ "Feedthrough bus from ip0_ep2_x to ip0_ep2_y",
    /* FT_IP0_EP2_X_TO_MMU1      */ "Feedthrough bus from ip0_ep2_x to mmu1",
    /* FT_IP0_EP2_Y_TO_IP0_EP2_X */ "Feedthrough bus from ip0_ep2_y to ip0_ep2_x",
    /* FT_IP0_EP2_Y_TO_MMU1      */ "Feedthrough bus from ip0_ep2_y to mmu1",
    /* FT_IP0_X_TO_EP1_IP5       */ "Feedthrough bus from ip0_x to ep1_x, ip5_x, ip5_y, ep1_y",
    /* FT_IP1_EP0_X_TO_MMU1      */ "Feedthrough bus from ip1_ep0_x to mmu1",
    /* FT_IP1_EP0_Y_TO_MMU1      */ "Feedthrough bus from ip1_ep0_y to mmu1",
    /* FT_IP2_TO_IP0_EP2         */ "Feedthrough bus from ip2_x/y to ip0_ep2_x/y",
    /* FT_IP2_X_TO_CMICM         */ "Feedthrough bus from ip2_x to cmicm",
    /* FT_IP2_X_TO_IP0_EP2_X     */ "Feedthrough bus from ip2_x to ip0_ep2_x",
    /* FT_IP2_Y_TO_CMICM         */ "Feedthrough bus from ip2_y to cmicm",
    /* FT_IP2_Y_TO_IP0_EP2_X     */ "Feedthrough bus from ip2_y to ip0_ep2_x",
    /* FT_IP45_SHARED_TO_CMICM   */ "Feedthrough bus from ip45_shared to cmicm",
    /* FT_IP45_SHARED_TO_IP0_EP2 */ "Feedthrough bus from ip45_shared to ip0_ep2",
    /* FT_IP45_SHARED_TO_IP1_EP0 */ "Feedthrough bus from ip45_shared to ip1_ep0",
    /* FT_IP5_X_TO_MMU0          */ "Feedthrough bus from ip5_x to mmu0",
    /* FT_IP5_Y_TO_MMU0          */ "Feedthrough bus from ip5_y to mmu0",
    /* FT_LEARN_DATA             */ "Ingress Pipeline Learn Bus.",
    /* FT_LEARN_FIFO_REQ         */ "Per pipeline L2 bus from ISW1[0-3] to L2_MGMT. Both Learn_bus and L2_LOOKUP / L2_MEMRD data is returned on this shared bus.",
    /* FT_MMU2_TO_CMICM          */ "Feedthrough bus from mmu2 to cmicm",
    /* FT_MMU2_TO_IP45_SHARED    */ "Feedthrough bus from mmu2 to ip45_shared",
    /* FT_MMU2_TO_PGW_CL         */ "Feedthrough bus from mmu2 to pgw_cl_x/y",
    /* FT_OUT_BUS                */ "Output bus flow tracker core module",
    /* FT_PGW_CL_TO_MMU2         */ "Feedthrough bus from pgw_cl_x/y to mmu2",
    /* FT_PGW_X_TO_CMICM         */ "Feedthrough bus from pgw_cl_x to cmicm",
    /* FT_PGW_Y_TO_CMICM         */ "Feedthrough bus from pgw_cl_y to cmicm",
    /* FT_SER_CONTROL            */ "Flow Tracker ECC and SER control",
    /* FT_SESSION_COV_DEFS       */ "defines for flow tracker session coverage analysis",
    /* FT_SM_HDR_ALL             */ "Flow tracker to signature matching header",
    /* FT_SM_HDR_IP              */ "Flow tracker to signature matching header",
    /* FT_TOP_REGS_TO_EP1        */ "Feedthrough bus from top_regs_otpc to ep1_x, ep1_y",
    /* FWD1_0_DOP                */ "FWD1_0_DOP DOP description.",
    /* FWD1_1_DOP                */ "FWD1_1_DOP DOP description.",
    /* FWD1_DROPS_DOP            */ "FWD1_DROPS_DOP DOP description.",
    /* FWD1_FWD_OBJ_DOP          */ "FWD1_FWD_OBJ_DOP DOP description.",
    /* FWD2_0_DOP                */ "FWD2_0_DOP DOP description.",
    /* FWD2_ITAG_ISID_OR_VPNID_OR_VN_ID_DOP */ "FWD2_ITAG_ISID_OR_VPNID_OR_VN_ID_DOP DOP description.",
    /* FWD2_MAPPING_COMPRESSION_RESULTS_DOP */ "FWD2_MAPPING_COMPRESSION_RESULTS_DOP DOP description.",
    /* FWD_ATTRIBUTES_ACTION_SET */ "PDD Output Bus generic format",
    /* FWD_DOMAIN_ACTION_SET     */ "PDD Output Bus generic format",
    /* FWD_DROP_VECTOR           */ "Bit Definitions of the VXLT drop vector.",
    /* GIH                       */ "Bit Definitions of the Global Internal Header.",
    /* GIH_EP_COPY_TO_CPU        */ "EP_COPY_TO_CPU specific fields in GIH header",
    /* GIH_FROM_CPU              */ "FROM_CPU specific fields in GIH header",
    /* GIH_OAM_TX                */ "OAM_TX specific fields in GIH header",
    /* GPORT_XQHDR_S_RF          */ "GPORT XQ Header memory s_rf width",
    /* GRE_FLAGS_HDR             */ "GRE header flags specification",
    /* GROUP_STATS_COV_DEFS      */ "defines for group_stats coverage analysis",
    /* GROUP_STATS_ECMP_COV_DEFS */ "defines for group_stats_ecmp coverage analysis",
    /* HASH_CONTROL_FULL_SET     */ "Hash Control.",
    /* HDR_UPDATE_CTRL           */ "control field decoding",
    /* HG2_EH_CLASSID_TYPE       */ "EH header ClassID source.",
    /* HG2_UNUSED_FIELDS         */ "Unused hg2 header fields for transit",
    /* HGT_LAG_DLB_ACTION_SET    */ "PDD Output Bus generic format",
    /* HGT_RH_ACTION_SET         */ "PDD Output Bus generic format",
    /* HG_COUNTER                */ "Higig counter code values",
    /* HG_TRUNK_DOP              */ "HG_TRUNK_DOP DOP description.",
    /* HG_TRUNK_GROUP_RRLB_CNT_COV_DEFS */ "defines for ifp odd meter coverage analysis",
    /* HIGIG2                    */ "Bit Definitions of the Higig2 Module Header",
    /* HIGIG_AUX_HDR_BITMAP      */ "HIGIG AUX_HDR_BITMAP.",
    /* HIGIG_CHANGE_DEST_ACTION_SET */ "PDD Output Bus generic format",
    /* HIGIG_CONTROLS_ACTION_SET */ "PDD Output Bus generic format",
    /* HIQ_FIRST_VEC_FORMAT_L1   */ "Position and description of bits in the MB to DQX HDRMISC INFO bus.",
    /* HIQ_FIRST_VEC_FORMAT_L2   */ "Position and description of bits in the MB to DQX HDRMISC INFO bus.",
    /* HIQ_FIRST_VEC_FORMAT_L3   */ "Position and description of bits in the MB to DQX HDRMISC INFO bus.",
    /* HITREQ_BUS                */ "Search Stage Hit Request Bus.",
    /* HITREQ_BUS_C_MODEL        */ "Search Stage Hit Request Bus.",
    /* HITRST_BUS                */ "Search Stage Hit Result Bus.",
    /* HITRST_BUS_C_MODEL        */ "Search Stage Hit Result Bus.",
    /* HLA_GENERIC_OUT           */ "Format of HLA generic output override for broadscan otp options",
    /* HVE0_BUS                  */ "HVE0 Bus Format",
    /* HVE0_IN_BUS               */ "HVE (header verfication engine) trigger format.",
    /* HVE_DOS_ATTACK_RESULTS_FORMAT */ "HVE result bus format.",
    /* HVE_IN_BUS                */ "HVE (header verfication engine) trigger format.",
    /* HVE_RESULTS_FORMAT        */ "HVE result bus format.",
    /* HVE_RESULT_BUS_1_DOP      */ "HVE_RESULT_BUS_1_DOP DOP description.",
    /* IARB_EOP_BUS              */ "IDB EOP BUS format",
    /* IARB_EOP_EVENT_QUEUE      */ "format",
    /* IARB_EVENT_FIFO           */ "format",
    /* IARB_TO_L2_MGMT_ACK       */ "Ack Bus from IARB[0-3] to L2_MGMT.",
    /* ICFG_DOP                  */ "Position and description of bits in ICFG_DOP DOP chain",
    /* ICFG_TO_ISW2_BUS          */ "Bit Definitions of ICFG_TO_ISW2_BUS.",
    /* ICFG_TO_ISW3_BUS          */ "Bit Definitions of ICFG_TO_ISW3_BUS.",
    /* ICMP_TYPE                 */ "Specifies the format of the ICMP message.",
    /* IDB_CA0_CTRL              */ "CA Buffer control memory format",
    /* IDB_CA_Q_TO_OBM_BUS       */ "CA Q TO OBM status bus data format",
    /* IDB_CA_Q_TO_REGS_BUS      */ "CA Q TO REGS status bus data format",
    /* IDB_CA_TO_IP_CTRL         */ "CA to IP control format",
    /* IDB_CA_TO_OBM_BUS         */ "CA TO OBM status bus data format",
    /* IDB_CA_TO_REGS_BUS        */ "CA TO REGS status bus data format",
    /* IDB_CTRL_BUS              */ "format",
    /* IDB_EOP_BUS               */ "IDB EOP BUS format",
    /* IDB_EOP_EVENT_QUEUE       */ "format",
    /* IDB_OBM0_48_DATA          */ "OBM Buffer data format",
    /* IDB_OBM0_CTRL             */ "OBM Buffer control memory format",
    /* IDB_OBM0_DATA             */ "OBM Buffer data format",
    /* IDB_OBM0_Q_DATA           */ "OBM Buffer data format",
    /* IDB_OBM0_RESIDUE_CTRL     */ "Active Residue (in Prebuffer) control format",
    /* IDB_OBM_Q_TO_CA_BUS       */ "OBM Q to CA bus format",
    /* IDB_OBM_TO_CA_BUS         */ "OBM to CA bus format",
    /* IDB_OBM_TO_CA_CTRL        */ "OBM to CA control format",
    /* IDB_REGS_Q_TO_CA_BUS      */ "REGS to CA bus format",
    /* IDB_REGS_TO_CA_BUS        */ "REGS to CA bus format",
    /* IDB_SOP_EVENT_FIFO        */ "format",
    /* IDB_TO_IPOST_BUS          */ "Bit Definitions of IDB_TO_IPOST_BUS.",
    /* IDB_TO_ISW4_BUS           */ "Bit Definitions of IDB_TO_ISW4_BUS.",
    /* IDISC_DROP                */ "Bit Definitions of the VLAN drop vector.",
    /* IFP_0_DOP                 */ "IFP_0_DOP DOP description.",
    /* IFP_BFD_BUS_FORMAT        */ "BFD fields format",
    /* IFP_CHANGE_COS_OR_INT_PRI_SET */ "PDD Output Bus generic format",
    /* IFP_CHANGE_CPU_COS_SET    */ "Position and description of bits in the copy to cpu set",
    /* IFP_CHANGE_DROP_PRECEDENCE_SET */ "PDD Output Bus generic format",
    /* IFP_CHANGE_DSCP_TOS_SET   */ "PDD Output Bus generic format",
    /* IFP_CHANGE_ECN_SET        */ "PDD Output Bus generic format",
    /* IFP_CHANGE_INPUT_PRIORITY_SET */ "PDD Output Bus generic format",
    /* IFP_CHANGE_INT_CN_SET     */ "PDD Output Bus generic format",
    /* IFP_CHANGE_PKT_PRI_SET    */ "PDD Output Bus generic format",
    /* IFP_COPY_TO_CPU_SET       */ "Position and description of bits in the cpu cos set",
    /* IFP_COUNTER_MUX_DATA_STAGING */ "Position and description of bits in the counter mux data staging table added for area optimization of meter muxing logic",
    /* IFP_COUNTER_SET           */ "Position and description of bits in the profile action set",
    /* IFP_COUNTER_TABLE_COV_DEFS */ "defines for ifp counter coverage analysis",
    /* IFP_CUT_THRU_OVERRIDE_SET */ "Position and description of bits in the profile action set",
    /* IFP_DELAYED_DROP_SET      */ "IFP DELAYED_DROP_SET profile action set",
    /* IFP_DELAYED_REDIRECT_SET  */ "IFP DELAYED_REDIRECT_SET profile action set",
    /* IFP_DLB_ALTERNATE_PATH_CONTROL_SET */ "Position and description of bits in the profile action set",
    /* IFP_DLB_ECMP_MONITOR_SET  */ "IFP DLB_ECMP_MONITOR profile action set",
    /* IFP_DLB_ECMP_SET          */ "Position and description of bits in the profile action set",
    /* IFP_DLB_HGT_LAG_SET       */ "Position and description of bits in the profile action set",
    /* IFP_DOP                   */ "Position and description of bits in IFP_DOP DOP chain",
    /* IFP_DOUBLE_WIDE_F0        */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F1        */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F3        */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F1_0      */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F1_1      */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F1_2      */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F2_0      */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F2_1      */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F2_2      */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F2_3      */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F2_4      */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F2_5      */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F2_6      */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F2_7      */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F4_0      */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_F4_1      */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DOUBLE_WIDE_IPBM_F0   */ "Position and description of bits in FP DOUBLE WIDE FIELDS",
    /* IFP_DROP_SET              */ "Position and description of bits in the profile action set",
    /* IFP_DUAL_COUNTER_TABLE_COV_DEFS */ "defines for ifp dual tcam slice counter coverage analysis",
    /* IFP_EDIT_CTRL_ID_ACTION_SET */ "PDD Output Bus generic format",
    /* IFP_ELEPHANT_TRAP_SET     */ "IFP ELEPHANT_TRAP_SET profile action set",
    /* IFP_EVEN_METER_COV_DEFS   */ "defines for ifp even meter coverage analysis",
    /* IFP_FCOE_VSAN_SET         */ "PDD Output Bus generic format",
    /* IFP_GREEN_TO_PID_SET      */ "Position and description of bits in the profile action set",
    /* IFP_IGNORE_FCOE_ZONE_CHECK_SET */ "PDD Output Bus generic format",
    /* IFP_INBAND_TELEMETRY_SET  */ "IFP INBAND_TELEMETRY profile action set",
    /* IFP_INSTRUMENTATION_SET   */ "Position and description of bits in the profile action set",
    /* IFP_KEY_320B              */ "320B Key Format",
    /* IFP_KEY_480B              */ "480B Key Format",
    /* IFP_KEY_POST_MUX          */ "Final Key to the IFP TCAM",
    /* IFP_KEY_SEL_LOGICAL_TABLE_ID_AND_CLASS_ID */ "IFP_KEY_SEL_LOGICAL_TABLE_ID_AND_CLASS_ID format",
    /* IFP_L0_BUS                */ "Packet Fields Bus",
    /* IFP_L0_BUS_SECTION_16BIT  */ "Key extractor input bus 16bit section",
    /* IFP_L0_BUS_SECTION_2BIT   */ "Key extractor input bus 2bit section",
    /* IFP_L0_BUS_SECTION_32BIT  */ "Key extractor input bus 32bit section",
    /* IFP_L0_BUS_SECTION_4BIT   */ "Key extractor input bus 4bit section",
    /* IFP_L0_BUS_SECTION_8BIT   */ "Key extractor input bus 8bit section",
    /* IFP_L1_BUS                */ "Output of the first stage of field extraction.",
    /* IFP_L1_BUS_SECTION_A      */ "IFP_L1_BUS_SECTION_A bit ordering",
    /* IFP_L1_BUS_SECTION_B      */ "IFP_L1_BUS_SECTION_B bit ordering",
    /* IFP_L1_BUS_SECTION_C      */ "IFP_L1_BUS_SECTION_C bit ordering",
    /* IFP_L2_BUS                */ "Output of the second stage of field extraction.",
    /* IFP_L3SW_CHANGE_L2_SET    */ "Position and description of bits in the profile action set",
    /* IFP_L3_BUS                */ "Output of the third stage of field extraction.",
    /* IFP_LB_CONTROLS_SET       */ "Position and description of bits in the profile action set",
    /* IFP_LOGICAL_TABLE_SELECT_DATA_FORMAT */ "format for IFP_LOGICAL_TABLE_SELECT data",
    /* IFP_LOGICAL_TABLE_SELECT_TCAM_FORMAT */ "format for IFP_LOGICAL_TABLE_SELECT TCAM",
    /* IFP_LOGICAL_TBL_DOP       */ "IFP_LOGICAL_TBL_DOP DOP description.",
    /* IFP_LOOKUP_STATUS_VECTOR  */ "Bit Definitions of the FP lookup status vector.",
    /* IFP_LOOKUP_STATUS_VECTOR_DOP */ "IFP_LOOKUP_STATUS_VECTOR_DOP DOP description.",
    /* IFP_LOOKUP_STATUS_VECTOR_POST */ "IFP LOOKUP STATUS VECTOR POST",
    /* IFP_METER_MUX_DATA_STAGING */ "Position and description of bits in the meter mux data staging table added for area optimization of meter muxing logic",
    /* IFP_METER_MUX_FORMAT      */ "Ifp lookup control signals",
    /* IFP_METER_SET             */ "Position and description of bits in the profile action set",
    /* IFP_MIRROR_OVERRIDE_SET   */ "Position and description of bits in the profile action set",
    /* IFP_MIRROR_SET            */ "Position and description of bits in the profile action set",
    /* IFP_MPLS_FORWARDING_LABEL_ACTION */ "MPLS Forwarding Label Action as needed by the IFP key.",
    /* IFP_NAT_OVERRIDE_SET      */ "Position and description of bits in the profile action set",
    /* IFP_NAT_SET               */ "Position and description of bits in the profile action set",
    /* IFP_ODD_METER_COV_DEFS    */ "defines for ifp odd meter coverage analysis",
    /* IFP_PAIRING_F1            */ "Position and description of bits in FP PAIRING FIELDS",
    /* IFP_PAIRING_FIXED         */ "Position and description of bits in FP PAIRING FIELDS",
    /* IFP_PAIRING_IPBM_F0       */ "Position and description of bits in FP PAIRING FIELDS",
    /* IFP_POLICY_PDD_OUT_BUS    */ "PDD Output Bus generic format",
    /* IFP_POST_MUX_CONTROLS     */ "Control signals for post multiplexing signals that were not available for the IFP key generation block.",
    /* IFP_PROFILE_SET_1         */ "Position and description of bits in the profile action set",
    /* IFP_PROFILE_SET_2         */ "Position and description of bits in the profile action set",
    /* IFP_PROFILE_SET_1_DATA_FORMAT */ "Position and description of bits in the profile action set data",
    /* IFP_PROFILE_SET_2_DATA_FORMAT */ "Position and description of bits in the profile action set data",
    /* IFP_PROTECTION_SWITCHING_DROP_OVERIDE_SET */ "PDD Output Bus generic format",
    /* IFP_PROTECTION_SWITCHING_SET */ "Position and description of bits in the profile action set",
    /* IFP_REDIRECT_SET          */ "Bit Definitions of the Redirection Field in IFP Policy Table",
    /* IFP_RESOLUTION            */ "FP resolution packet field values.",
    /* IFP_SECURITY_STATUS       */ "Position and description of bits in FP SECURITY STATUS FIELDS",
    /* IFP_SFLOW_SET             */ "Position and description of bits in the profile action set",
    /* IFP_SHARED_TO_IFP_CTR_BUS */ "control bus for ifp_shared logic to ifp, contains cmic and refresh signals",
    /* IFP_SHARED_TO_IFP_DATA_BUS */ "data bus for ifp_shared logic to ifp, contains normal function signals",
    /* IFP_SINGLE_COUNTER_TABLE_COV_DEFS */ "defines for ifp single tcam slice counter coverage analysis",
    /* IFP_SINGLE_WIDE_F4        */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_0      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_1      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_2      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_3      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_4      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_5      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_6      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_7      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_8      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_9      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_10     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_11     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_12     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_13     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_14     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_15     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F1_16     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_0      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_1      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_2      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_3      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_4      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_5      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_6      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_7      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_8      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_9      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_10     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_11     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_12     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_13     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_14     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_15     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_16     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_17     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F2_18     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_0      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_1      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_2      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_3      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_4      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_5      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_6      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_7      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_8      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_9      */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_10     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_11     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_12     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_13     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_14     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_15     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_F3_16     */ "Position and description of bits in FP FIELDS",
    /* IFP_SINGLE_WIDE_FIXED     */ "Position and description of bits in FP FIELDS",
    /* IFP_SLICE_CONTROL_BUS     */ "Ifp lookup control signals",
    /* IFP_SLICE_KEY_CONTROL_BUS */ "Ifp lookup control signals",
    /* IFP_SOURCE_CLASS_FORMAT_0 */ "Source Class Format as defined the spec",
    /* IFP_SOURCE_CLASS_FORMAT_1 */ "Source Class Format as defined the spec",
    /* IFP_SOURCE_CLASS_FORMAT_2 */ "Source Class Format as defined the spec",
    /* IFP_SOURCE_CLASS_FORMAT_3 */ "Source Class Format as defined the spec",
    /* IFP_STORM_METER_COV_DEFS  */ "defines for ifp storm meter coverage analysis",
    /* IFP_TCAM_DOP_DOP          */ "IFP_TCAM_DOP_DOP DOP description.",
    /* IFP_TCAM_KEY_0_DOP        */ "IFP_TCAM_KEY_0_DOP DOP description.",
    /* IFP_TCAM_KEY_10_DOP       */ "IFP_TCAM_KEY_10_DOP DOP description.",
    /* IFP_TCAM_KEY_11_DOP       */ "IFP_TCAM_KEY_11_DOP DOP description.",
    /* IFP_TCAM_KEY_12_DOP       */ "IFP_TCAM_KEY_12_DOP DOP description.",
    /* IFP_TCAM_KEY_13_DOP       */ "IFP_TCAM_KEY_13_DOP DOP description.",
    /* IFP_TCAM_KEY_14_DOP       */ "IFP_TCAM_KEY_14_DOP DOP description.",
    /* IFP_TCAM_KEY_15_DOP       */ "IFP_TCAM_KEY_15_DOP DOP description.",
    /* IFP_TCAM_KEY_16_DOP       */ "IFP_TCAM_KEY_16_DOP DOP description.",
    /* IFP_TCAM_KEY_17_DOP       */ "IFP_TCAM_KEY_17_DOP DOP description.",
    /* IFP_TCAM_KEY_1_DOP        */ "IFP_TCAM_KEY_1_DOP DOP description.",
    /* IFP_TCAM_KEY_2_DOP        */ "IFP_TCAM_KEY_2_DOP DOP description.",
    /* IFP_TCAM_KEY_3_DOP        */ "IFP_TCAM_KEY_3_DOP DOP description.",
    /* IFP_TCAM_KEY_4_DOP        */ "IFP_TCAM_KEY_4_DOP DOP description.",
    /* IFP_TCAM_KEY_5_DOP        */ "IFP_TCAM_KEY_5_DOP DOP description.",
    /* IFP_TCAM_KEY_6_DOP        */ "IFP_TCAM_KEY_6_DOP DOP description.",
    /* IFP_TCAM_KEY_7_DOP        */ "IFP_TCAM_KEY_7_DOP DOP description.",
    /* IFP_TCAM_KEY_8_DOP        */ "IFP_TCAM_KEY_8_DOP DOP description.",
    /* IFP_TCAM_KEY_9_DOP        */ "IFP_TCAM_KEY_9_DOP DOP description.",
    /* IFP_TIMESTAMP_INSERTION_SET */ "PDD Output Bus generic format",
    /* IFP_TIMESTAMP_SET         */ "Position and description of bits in the profile action set",
    /* IFP_TO_IFP_SHARED_CTR_BUS */ "control bus for ifp to ifp_shared logic, contains cmic and refresh signals",
    /* IFP_TO_IFP_SHARED_DATA_BUS */ "control bus for ifp_shared logic to ifp, contains normal function signals",
    /* IFP_TS0_SOURCE_SET        */ "TS0 Source type",
    /* IFP_TS0_TYPE_SET          */ "TS0 TYPE field",
    /* IFP_TS1_TYPE_SET          */ "TS1 TYPE field",
    /* IFP_TTL_OVERRIDE_SET      */ "Position and description of bits in the profile action set",
    /* IFP_URPF_OVERRIDE_SET     */ "Position and description of bits in the profile action set",
    /* IFP_USE_IFP_MODID_BASE_SET */ "Use IFP_MODID_BASE type",
    /* IFT_CONTROL_DATA          */ "Position and description of bits in IFT_CONTROL_DATA,these signals are used to create CCBI broadscan header.",
    /* IFWD1_DOP                 */ "Position and description of bits in IFWD1_DOP DOP chain",
    /* IFWD2_DOP                 */ "Position and description of bits in IFWD2_DOP DOP chain",
    /* IL2LU_DATA                */ "Ingress Pipeline Learn Bus.",
    /* IL2LU_TO_L2_MGMT_STATUS   */ "Per pipeline Status bus from IL2LU[0-3] to L2_MGMT.",
    /* INGRESS_ASSP_HEADER       */ "FPGA-ASSP Egress Inter-chip Header",
    /* INGRESS_COUNTER_UPDATE_VECTOR */ "Bit Definitions of the Ingress counter update vector.",
    /* INGRESS_DOP_TOP_FORMAT    */ "Top level DOP",
    /* INGRESS_FIELD_BUS         */ "Ingress Field Bus flow from Parser to rest of ingress pipelien for various process. It is only valid for SOP cell.",
    /* INGRESS_FIELD_BUS_1_L2_FIELDS_DOP */ "INGRESS_FIELD_BUS_1_L2_FIELDS_DOP DOP description.",
    /* INGRESS_FIELD_BUS_1_L3_FIELDS_DOP */ "INGRESS_FIELD_BUS_1_L3_FIELDS_DOP DOP description.",
    /* INGRESS_FIELD_BUS_1_L4_FIELDS_DOP */ "INGRESS_FIELD_BUS_1_L4_FIELDS_DOP DOP description.",
    /* INGRESS_FIELD_BUS_2_L2_FIELDS_DOP */ "INGRESS_FIELD_BUS_2_L2_FIELDS_DOP DOP description.",
    /* INGRESS_FIELD_BUS_2_L3_FIELDS_DOP */ "INGRESS_FIELD_BUS_2_L3_FIELDS_DOP DOP description.",
    /* INGRESS_FIELD_BUS_2_L4_FIELDS_DOP */ "INGRESS_FIELD_BUS_2_L4_FIELDS_DOP DOP description.",
    /* INGRESS_OBJECT_BUS        */ "Ingress Object Bus flow from Parser to rest of ingress pipelien for various process. It is only valid for SOP cell.",
    /* ING_DISTR_MONITOR_BUS_POOL */ "Distribution monitor define for a pool",
    /* ING_ECN_COUNTER_COV_DEFS  */ "defines for num_qcn_cnm_received coverage analysis",
    /* ING_ETAG_PCP_MAPPING_INDEX */ "ING_ETAG_PCP_MAPPING index",
    /* ING_EXP_TO_ECN_MAPPING_INDEX */ "ING_EXP_TO_ECN_MAPPING index format.",
    /* ING_FLEX_CTR_ADDR_DEFINE  */ "flex counters memory and register offset",
    /* ING_FLEX_CTR_BUS          */ "flex counters bus define",
    /* ING_FLEX_CTR_BUS_POOL     */ "flex counters bus define for a pool",
    /* ING_FLEX_CTR_COMPRESSED_PKT_ATTR */ "compressed packet attribute",
    /* ING_FLEX_CTR_PKT_ATTR     */ "packet attribute",
    /* ING_FLEX_CTR_UDF          */ "flex counters udf fields definition",
    /* ING_FLEX_CTR_UDF_PKT_ATTR */ "flex counters bus define for a pool",
    /* ING_NIV_RX_FRAMES_ERROR_DROP_COV_DEFS */ "defines for num_qcn_cnm_received coverage analysis",
    /* ING_NIV_RX_FRAMES_FORWARDING_DROP_COV_DEFS */ "defines for num_qcn_cnm_received coverage analysis",
    /* ING_NIV_RX_FRAMES_VLAN_TAGGED_COV_DEFS */ "defines for num_qcn_cnm_received coverage analysis",
    /* ING_PW_TERM_SEQ_NUM_COV_DEFS */ "defines for pw_term_seq_num coverage analysis",
    /* ING_Q_BUS                 */ "Bit Definitions of ING_Q_BUS.",
    /* ING_SVM_UDF_PKT_ATTR      */ "svm udf define",
    /* ING_TRILL_RX_ACCESS_PORT_TRILL_PKTS_DISCARDED_COV_DEFS */ "defines for num_qcn_cnm_received coverage analysis",
    /* ING_TRILL_RX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_COV_DEFS */ "defines for num_qcn_cnm_received coverage analysis",
    /* ING_TRILL_RX_PKTS_COV_DEFS */ "defines for num_qcn_cnm_received coverage analysis",
    /* ING_TUNNEL_ADAPT_1_DOP    */ "ING_TUNNEL_ADAPT_1_DOP DOP description.",
    /* ING_TUNNEL_ADAPT_1_KEY_0_DOP */ "ING_TUNNEL_ADAPT_1_KEY_0_DOP DOP description.",
    /* ING_TUNNEL_ADAPT_1_KEY_1_DOP */ "ING_TUNNEL_ADAPT_1_KEY_1_DOP DOP description.",
    /* ING_TUNNEL_ADAPT_2_DOP    */ "ING_TUNNEL_ADAPT_2_DOP DOP description.",
    /* ING_TUNNEL_ADAPT_2_KEY_0_DOP */ "ING_TUNNEL_ADAPT_2_KEY_0_DOP DOP description.",
    /* ING_TUNNEL_ADAPT_2_KEY_1_DOP */ "ING_TUNNEL_ADAPT_2_KEY_1_DOP DOP description.",
    /* ING_TUNNEL_ADAPT_3_LKUP_DOP */ "ING_TUNNEL_ADAPT_3_LKUP_DOP DOP description.",
    /* ING_TUNNEL_ADAPT_4_DOP    */ "ING_TUNNEL_ADAPT_4_DOP DOP description.",
    /* ING_TUNNEL_ADAPT_4_KEY_0_DOP */ "ING_TUNNEL_ADAPT_4_KEY_0_DOP DOP description.",
    /* ING_TUNNEL_ADAPT_4_KEY_1_DOP */ "ING_TUNNEL_ADAPT_4_KEY_1_DOP DOP description.",
    /* ING_TUNNEL_ECN_DECAP_INDEX */ "ING_TUNNEL_ECN_DECAP index",
    /* INLINE_FF_KEY             */ "This is the INLINE_LEARN Flop memory storage format.",
    /* INLINE_FF_KEY_INDEX       */ "This is the INLINE_LEARN Flop memory storage format.",
    /* INLINE_LEARN_CONTEXT_BUFFER */ "This is the context buffer used to relay on EOP .",
    /* INLINE_LEARN_CONTEXT_BUFFER_WO_KEY */ "This is the context buffer used to relay on EOP .",
    /* INLINE_LEARN_SW_INSTRUTION */ "This is the context buffer used to relay on EOP .",
    /* INSTR_BUFFER_IADAPT_DW0   */ "DW0 of Instrumentation Result Buffer IADAPT.",
    /* INSTR_BUFFER_IFWD_DW0     */ "DW0 of Instrumentation Result Buffer IFWD.",
    /* INSTR_BUFFER_IFWD_DW1     */ "DW1 of Instrumentation Result Buffer IFWD.",
    /* INSTR_BUFFER_IFWD_DW2     */ "DW2 of Instrumentation Result Buffer IFWD.",
    /* INSTR_BUFFER_IFWD_DW3     */ "DW3 of Instrumentation Result Buffer IFWD.",
    /* INSTR_BUFFER_IPARS_DW0    */ "DW0 of Instrumentation Result Buffer IPARS.",
    /* INSTR_BUFFER_ISW1_DW0     */ "DW0 of Instrumentation Result Buffer ISW1.",
    /* INSTR_BUFFER_ISW1_DW1     */ "DW1 of Instrumentation Result Buffer ISW1.",
    /* INSTR_BUFFER_ISW1_DW2     */ "DW2 of Instrumentation Result Buffer ISW1.",
    /* INSTR_BUFFER_ISW1_DW3     */ "DW3 of Instrumentation Result Buffer ISW1.",
    /* INSTR_BUFFER_ISW2_DW0     */ "DW0 of Instrumentation Result Buffer ISW2.",
    /* INSTR_BUFFER_ISW2_DW1     */ "DW1 of Instrumentation Result Buffer ISW2.",
    /* INSTR_BUFFER_ISW2_DW2     */ "DW2 of Instrumentation Result Buffer ISW2.",
    /* INSTR_BUFFER_ISW2_DW3     */ "DW3 of Instrumentation Result Buffer ISW2.",
    /* INSTR_BUFFER_ISW2_DW4     */ "DW4 of Instrumentation Result Buffer ISW2.",
    /* INSTR_BUFFER_ISW2_DW5     */ "DW5 of Instrumentation Result Buffer ISW2.",
    /* INSTR_BUFFER_ISW2_DW6     */ "DW6 of Instrumentation Result Buffer ISW2.",
    /* INSTR_BUFFER_ISW2_DW7     */ "DW7 of Instrumentation Result Buffer ISW2.",
    /* INSTR_BUFFER_ISW_DW0      */ "DW0 of Instrumentation Result Buffer ISW.",
    /* INSTR_BUFFER_ISW_DW1      */ "DW1 of Instrumentation Result Buffer ISW.",
    /* INSTR_BUFFER_ISW_DW2      */ "DW2 of Instrumentation Result Buffer ISW.",
    /* INSTR_BUFFER_ISW_DW3      */ "DW3 of Instrumentation Result Buffer ISW.",
    /* INSTR_BUFFER_ISW_DW4      */ "DW4 of Instrumentation Result Buffer ISW.",
    /* INSTR_BUFFER_ISW_DW5      */ "DW5 of Instrumentation Result Buffer ISW.",
    /* INSTR_BUFFER_ISW_DW6      */ "DW6 of Instrumentation Result Buffer ISW.",
    /* INSTR_BUFFER_IVP_DW0      */ "DW0 of Instrumentation Result Buffer IVP.",
    /* INSTR_BUFFER_IVP_DW1      */ "DW1 of Instrumentation Result Buffer IVP.",
    /* INTFI_E2ECC_PKT           */ "INTFI E2ECC packet format .",
    /* INTFI_OOB_HCFC_PKT        */ "INTFI Out of Band HCFC packet format .",
    /* INTFI_TO_ES               */ "INTFI to VBS Flow control busformat. This interface can carry flow contrl states of upto 8 L0 nodes.",
    /* INTFI_TO_ES_S1            */ "INTFI to ES S1 LLFC format .",
    /* INTFI_TO_LLS_INFO         */ "INTFI to LLS interface format",
    /* INTFI_TO_VBS              */ "INTFI to VBS FC format.",
    /* INTF_ACTION_SET           */ "PDD Output Bus generic format",
    /* IPAD_BUS                  */ "Ingress Pipeline Arbiter Data Bus",
    /* IPARS1_DOP                */ "Position and description of bits in IPARS1_DOP DOP chain",
    /* IPARS2_0_DOP              */ "IPARS2_0_DOP DOP description.",
    /* IPARS2_DOP                */ "Position and description of bits in IPARS2_DOP DOP chain",
    /* IPARS_EOP_BUFFER          */ "Bit Definitions of IPARS_EOP_BUFFER",
    /* IPARS_TO_IMPLS_FCOE_FIELDS_BUS */ "Bit Definitions of the VLAN drop vector.",
    /* IPARS_TO_IMPLS_IP_FIELDS_BUS */ "Bit Definitions of the VLAN drop vector.",
    /* IPARS_TO_IMPLS_L3_FIELDS_BUS */ "Bit Definitions of the VLAN drop vector.",
    /* IPARS_TO_IMPLS_OAM_FIELDS_BUS */ "Bit Definitions of the VLAN drop vector.",
    /* IPARS_TO_IMPLS_RTAG7_FIELDS_BUS */ "Bit Definitions of the RTAG7 fields bus from Ipars to Impls.",
    /* IPARS_TO_ISW2_BUS         */ "Bit Definitions of IPARS_TO_ISW2_BUS.",
    /* IPFIX_DATA_INFO           */ "Position and description of bits in Session table and Export FIFO DATA_INFO section",
    /* IPFIX_FLOW_COV_DEFS       */ "defines for flow tracker session coverage analysis",
    /* IPFIX_IPV4_KEY            */ "Position and description of bits in L2 Type KEY for IPFIX",
    /* IPFIX_IPV6_LOWER_KEY      */ "Position and description of bits in IPV6 LOWER KEY for IPFIX",
    /* IPFIX_IPV6_UPPER_KEY      */ "Position and description of bits in IPV6 UPPER KEY for IPFIX",
    /* IPFIX_L2_KEY              */ "Position and description of bits in L2 Type KEY for IPFIX",
    /* IPFIX_SESSION_COV_DEFS    */ "defines for flow tracker session coverage analysis",
    /* IPFIX_SESSION_INFO_ALL    */ "Position and description of bits in SESSION_INFO sestion fo the IPFIX Session Table",
    /* IPFIX_SESSION_INFO_FIFO   */ "Position and description of bits in SESSION_INFO section fo the IPFIX FIFO Table",
    /* IPIPE_LATE_STAGE_DATA     */ "Position and description of bits in IPIPE_LATE_STAGE_DATA.These signals are used to create CCBI broadscan header.",
    /* IPMC_GRP_8_S_RF           */ "ipmc group table s_rf width",
    /* IPMC_GRP_S_RF             */ "ipmc group table s_rf width",
    /* IPMC_VLAN_S_RF            */ "ipmc vlan table s_rf width",
    /* IPOST_CELL_QUEUES_DATA    */ "Data to be stored in the per port cell queues in Ipost. Some of them (SOP/MOP/EOPs) are also used for controls.",
    /* IPOST_SLOT_PIPELINE_DATA  */ "Ipost slot pipeline data",
    /* IPRC_BUS                  */ "Ingress Pipeline Resource Control Bus",
    /* IPRC_LEARN_BUS            */ "IPRC Bus Format for L2 learning",
    /* IPROC_HIGH_PRIORITY_INTERRUPTS */ "Format of chip high priority interrupt hookup going from P&R blocks to iProc",
    /* IPROC_INTERRUPTS          */ "iProc interrups",
    /* IPV4_HDR                  */ "IPv4 header specification",
    /* IPV6_HDR                  */ "IPv6 header specification",
    /* IP_AXP_INFO               */ "Credit or other info from IP to AXP",
    /* IP_IN_IP_TUNNEL_ACTION_SET */ "PDD Output Bus generic format",
    /* IP_OPTION_CONTROL_PROFILE_TABLE_INDEX */ "IP_OPTION_CONTROL_PROFILE_TABLE index",
    /* IP_PARSER0_FLEX_HVE_CONTROLS */ "",
    /* IP_PARSER0_FLEX_HVE_IN_BUS */ "",
    /* IP_PARSER0_FLEX_HVE_OUT_BUS */ "",
    /* IP_PARSER0_FLEX_HVE_OUT_CHECK */ "",
    /* IP_PARSER0_HFE_CMD_POLICY_DATA */ "",
    /* IP_PARSER0_HFE_CONSTANTS  */ "This defines constants for HFE",
    /* IP_PARSER0_HFE_CONTROLS   */ "",
    /* IP_PARSER0_HFE_CONT_PROFILE */ "",
    /* IP_PARSER0_HFE_IN_BUS     */ "",
    /* IP_PARSER0_HFE_MUX_CONTROLS */ "",
    /* IP_PARSER0_HFE_MUX_IN_BUS */ "",
    /* IP_PARSER0_HFE_MUX_OUT_BUS */ "",
    /* IP_PARSER0_HFE_OUT_BUS    */ "",
    /* IP_PARSER0_HFE_POLICY_COMMAND_A */ "",
    /* IP_PARSER0_HFE_POLICY_COMMAND_B */ "",
    /* IP_PARSER0_HFE_POLICY_COMMAND_C */ "",
    /* IP_PARSER0_HFE_POLICY_COMMAND_D */ "",
    /* IP_PARSER0_HFE_POLICY_TABLE_DATA */ "",
    /* IP_PARSER0_HME_CONSTANTS  */ "This defines constants for HFE",
    /* IP_PARSER0_HME_IN_BUS     */ "",
    /* IP_PARSER0_HME_LATENCY_CONTROLS */ "This is contains various configuration control which impact latency of HME and hence driven from outside of parser.",
    /* IP_PARSER0_HME_OUT_BUS    */ "",
    /* IP_PARSER0_HME_PASSTHROUGH_BUS */ "This is group of signals which are needed by HFE or MICE but are not part used by HME",
    /* IP_PARSER0_HME_POLICY_ACTION */ "",
    /* IP_PARSER0_HME_STAGE_COMMON_BUS */ "",
    /* IP_PARSER0_HME_STAGE_IN_BUS */ "",
    /* IP_PARSER0_HME_STAGE_KEY_VALID_BYTES_CHECK_DATA */ "Data for HME_STAGE_KEY_VALID_BYTES_CHECK_TABLE",
    /* IP_PARSER0_HME_STAGE_OUT_BUS */ "",
    /* IP_PARSER0_HME_STAGE_OUT_ONLY_BUS */ "",
    /* IP_PARSER0_HME_STAGE_PIPE_BUS */ "",
    /* IP_PARSER0_HME_STAGE_TCAM_DATA */ "",
    /* IP_PARSER0_HME_STAGE_TCAM_KEY */ "",
    /* IP_PARSER0_HME_STAGE_TCAM_KEY_NARROW */ "Data should always be kept at MSB. This will avoid mux in key generation.",
    /* IP_PARSER0_HVE_CONTROLS   */ "",
    /* IP_PARSER0_HVE_IN_BUS     */ "",
    /* IP_PARSER0_HVE_OUT_BUS    */ "",
    /* IP_PARSER0_HVE_RC_PROFILE */ "",
    /* IP_PARSER0_HVE_SCC_PROFILE */ "",
    /* IP_PARSER0_HVE_SCF_PROFILE */ "",
    /* IP_PARSER0_IN_BUS         */ "",
    /* IP_PARSER0_MICE_IN_BUS    */ "",
    /* IP_PARSER0_MICE_OUT_BUS   */ "",
    /* IP_PARSER0_OUT_BUS        */ "",
    /* IP_PARSER0_TOP_HME_OUT_BUS */ "This is group of signals which go directly out of HME goes directly out of parser",
    /* IP_PARSER1_FLEX_HVE_CONTROLS */ "",
    /* IP_PARSER1_FLEX_HVE_IN_BUS */ "",
    /* IP_PARSER1_FLEX_HVE_OUT_BUS */ "",
    /* IP_PARSER1_FLEX_HVE_OUT_CHECK */ "",
    /* IP_PARSER1_HFE_CMD_POLICY_DATA */ "",
    /* IP_PARSER1_HFE_CONSTANTS  */ "This defines constants for HFE",
    /* IP_PARSER1_HFE_CONTROLS   */ "",
    /* IP_PARSER1_HFE_CONT_PROFILE */ "",
    /* IP_PARSER1_HFE_IN_BUS     */ "",
    /* IP_PARSER1_HFE_MUX_CONTROLS */ "",
    /* IP_PARSER1_HFE_MUX_IN_BUS */ "",
    /* IP_PARSER1_HFE_MUX_OUT_BUS */ "",
    /* IP_PARSER1_HFE_OUT_BUS    */ "",
    /* IP_PARSER1_HFE_POLICY_COMMAND_A */ "",
    /* IP_PARSER1_HFE_POLICY_COMMAND_B */ "",
    /* IP_PARSER1_HFE_POLICY_COMMAND_C */ "",
    /* IP_PARSER1_HFE_POLICY_COMMAND_D */ "",
    /* IP_PARSER1_HFE_POLICY_TABLE_DATA */ "",
    /* IP_PARSER1_HME_CONSTANTS  */ "This defines constants for HFE",
    /* IP_PARSER1_HME_IN_BUS     */ "",
    /* IP_PARSER1_HME_LATENCY_CONTROLS */ "This is contains various configuration control which impact latency of HME and hence driven from outside of parser.",
    /* IP_PARSER1_HME_OUT_BUS    */ "",
    /* IP_PARSER1_HME_PASSTHROUGH_BUS */ "This is group of signals which are needed by HFE or MICE but are not part used by HME",
    /* IP_PARSER1_HME_POLICY_ACTION */ "",
    /* IP_PARSER1_HME_STAGE_COMMON_BUS */ "",
    /* IP_PARSER1_HME_STAGE_IN_BUS */ "",
    /* IP_PARSER1_HME_STAGE_KEY_VALID_BYTES_CHECK_DATA */ "Data for HME_STAGE_KEY_VALID_BYTES_CHECK_TABLE",
    /* IP_PARSER1_HME_STAGE_OUT_BUS */ "",
    /* IP_PARSER1_HME_STAGE_OUT_ONLY_BUS */ "",
    /* IP_PARSER1_HME_STAGE_PIPE_BUS */ "",
    /* IP_PARSER1_HME_STAGE_TCAM_DATA */ "",
    /* IP_PARSER1_HME_STAGE_TCAM_KEY */ "",
    /* IP_PARSER1_HME_STAGE_TCAM_KEY_NARROW */ "Data should always be kept at MSB. This will avoid mux in key generation.",
    /* IP_PARSER1_HVE_CONTROLS   */ "",
    /* IP_PARSER1_HVE_IN_BUS     */ "",
    /* IP_PARSER1_HVE_OUT_BUS    */ "",
    /* IP_PARSER1_HVE_RC_PROFILE */ "",
    /* IP_PARSER1_HVE_SCC_PROFILE */ "",
    /* IP_PARSER1_HVE_SCF_PROFILE */ "",
    /* IP_PARSER1_IN_BUS         */ "",
    /* IP_PARSER1_MICE_IN_BUS    */ "",
    /* IP_PARSER1_MICE_OUT_BUS   */ "",
    /* IP_PARSER1_MICE_TCAM_DATA */ "",
    /* IP_PARSER1_MICE_TCAM_KEY  */ "",
    /* IP_PARSER1_OUT_BUS        */ "",
    /* IP_PARSER1_TOP_HME_OUT_BUS */ "This is group of signals which go directly out of HME goes directly out of parser",
    /* IP_PARSER2_FLEX_HVE_CONTROLS */ "",
    /* IP_PARSER2_FLEX_HVE_IN_BUS */ "",
    /* IP_PARSER2_FLEX_HVE_OUT_BUS */ "",
    /* IP_PARSER2_FLEX_HVE_OUT_CHECK */ "",
    /* IP_PARSER2_HFE_CMD_POLICY_DATA */ "",
    /* IP_PARSER2_HFE_CONSTANTS  */ "This defines constants for HFE",
    /* IP_PARSER2_HFE_CONTROLS   */ "",
    /* IP_PARSER2_HFE_CONT_PROFILE */ "",
    /* IP_PARSER2_HFE_IN_BUS     */ "",
    /* IP_PARSER2_HFE_MUX_CONTROLS */ "",
    /* IP_PARSER2_HFE_MUX_IN_BUS */ "",
    /* IP_PARSER2_HFE_MUX_OUT_BUS */ "",
    /* IP_PARSER2_HFE_OUT_BUS    */ "",
    /* IP_PARSER2_HFE_POLICY_COMMAND_A */ "",
    /* IP_PARSER2_HFE_POLICY_COMMAND_B */ "",
    /* IP_PARSER2_HFE_POLICY_COMMAND_C */ "",
    /* IP_PARSER2_HFE_POLICY_COMMAND_D */ "",
    /* IP_PARSER2_HFE_POLICY_TABLE_DATA */ "",
    /* IP_PARSER2_HME_CONSTANTS  */ "This defines constants for HFE",
    /* IP_PARSER2_HME_IN_BUS     */ "",
    /* IP_PARSER2_HME_LATENCY_CONTROLS */ "This is contains various configuration control which impact latency of HME and hence driven from outside of parser.",
    /* IP_PARSER2_HME_OUT_BUS    */ "",
    /* IP_PARSER2_HME_PASSTHROUGH_BUS */ "This is group of signals which are needed by HFE or MICE but are not part used by HME",
    /* IP_PARSER2_HME_POLICY_ACTION */ "",
    /* IP_PARSER2_HME_STAGE_COMMON_BUS */ "",
    /* IP_PARSER2_HME_STAGE_IN_BUS */ "",
    /* IP_PARSER2_HME_STAGE_KEY_VALID_BYTES_CHECK_DATA */ "Data for HME_STAGE_KEY_VALID_BYTES_CHECK_TABLE",
    /* IP_PARSER2_HME_STAGE_OUT_BUS */ "",
    /* IP_PARSER2_HME_STAGE_OUT_ONLY_BUS */ "",
    /* IP_PARSER2_HME_STAGE_PIPE_BUS */ "",
    /* IP_PARSER2_HME_STAGE_TCAM_DATA */ "",
    /* IP_PARSER2_HME_STAGE_TCAM_KEY */ "",
    /* IP_PARSER2_HME_STAGE_TCAM_KEY_NARROW */ "Data should always be kept at MSB. This will avoid mux in key generation.",
    /* IP_PARSER2_HVE_CONTROLS   */ "",
    /* IP_PARSER2_HVE_IN_BUS     */ "",
    /* IP_PARSER2_HVE_OUT_BUS    */ "",
    /* IP_PARSER2_HVE_RC_PROFILE */ "",
    /* IP_PARSER2_HVE_SCC_PROFILE */ "",
    /* IP_PARSER2_HVE_SCF_PROFILE */ "",
    /* IP_PARSER2_IN_BUS         */ "",
    /* IP_PARSER2_MICE_IN_BUS    */ "",
    /* IP_PARSER2_MICE_OUT_BUS   */ "",
    /* IP_PARSER2_MICE_TCAM_DATA */ "",
    /* IP_PARSER2_MICE_TCAM_KEY  */ "",
    /* IP_PARSER2_OUT_BUS        */ "",
    /* IP_PARSER2_TOP_HME_OUT_BUS */ "This is group of signals which go directly out of HME goes directly out of parser",
    /* IP_PARSER_0_HME_STAGE_TCAM_DOP */ "IP_PARSER_0_HME_STAGE_TCAM_DOP DOP description.",
    /* IP_PROTOCOL               */ "In the Internet Protocol version 4 (IPv4) (RFC791) there is a field called Protocol to identify the next level protocol.  This is an 8 bit field.  In Internet Protocol version 6 (IPv6) (RFC1883), this field is called the Next Header field.",
    /* IP_SBUS_META_DATA         */ "ip sbus meta data is the input of ip sbus master.",
    /* IQ_BUS                    */ "Ingress Pipeline Q-Bus format - spare bits",
    /* IRSEL1_DOP                */ "Position and description of bits in IRSEL1_DOP DOP chain",
    /* IRSEL1_TO_L2_MGMT_L2_BUS  */ "Per pipeline L2 bus from IRSEL1[0-3] to L2_MGMT. Both Learn_bus and L2_LOOKUP / L2_MEMRD data is returned on this shared bus.",
    /* IRSEL2_DOP                */ "Position and description of bits in IRSEL2_DOP DOP chain",
    /* IRSEL2_NHOP_COMMON_COV_DEFS */ "defines for Irsel2 nhop common coverage analysis",
    /* ISC_HG_STATS_COV_DEFS     */ "defines for num_qcn_cnm_received coverage analysis",
    /* ISC_IP_STATS_COV_DEFS     */ "defines for num_qcn_cnm_received coverage analysis",
    /* ISC_STATS_INST0_COV_DEFS  */ "defines for num_qcn_cnm_received coverage analysis",
    /* ISC_STATS_INST1_COV_DEFS  */ "defines for num_qcn_cnm_received coverage analysis",
    /* ISC_STATS_INST2_COV_DEFS  */ "defines for num_qcn_cnm_received coverage analysis",
    /* ISC_STATS_INST3_COV_DEFS  */ "defines for num_qcn_cnm_received coverage analysis",
    /* ISC_STATS_INST4_COV_DEFS  */ "defines for num_qcn_cnm_received coverage analysis",
    /* ISEC_SP_TCAM_UDF          */ "Ingress SP TCAM UDF",
    /* ISM_ENTRY_16KBY420_2P_COV_DEFS */ "defines for l3_ecmp round-robin count coverage analysis",
    /* ISM_ENTRY_1BASE_2P_COV_DEFS */ "defines for Hash Table IP Search Bank rams",
    /* ISM_ENTRY_1BASE_4P_COV_DEFS */ "defines for Hash Table IP Search Bank rams",
    /* ISM_ENTRY_2BASE_2P_COV_DEFS */ "defines for Hash Table IP Search Bank rams",
    /* ISM_ENTRY_2BASE_4P_COV_DEFS */ "defines for Hash Table IP Search Bank rams",
    /* ISM_ENTRY_4BASE_2P_COV_DEFS */ "defines for Hash Table IP Search Bank rams",
    /* ISM_ENTRY_4BASE_4P_COV_DEFS */ "defines for Hash Table IP Search Bank rams",
    /* ISM_ENTRY_8KBY105_2P_COV_DEFS */ "defines for l3_ecmp round-robin count coverage analysis",
    /* ISM_ENTRY_8KBY140_2P_COV_DEFS */ "defines for l3_ecmp round-robin count coverage analysis",
    /* ISM_LEARN_BUS             */ "ISM Learn Bus.",
    /* ISM_RSP_WORD              */ "ALWAYS sent as 32 lsbs for sbus_req: INSERT, DELETE, LOOKUP.",
    /* ISW1_DROP                 */ "Bit Definitions of the ISW1 drop vector",
    /* ISW1_PROTOCOL_PKT         */ "Ingress Pipeline Sw1 Protocol Pkt",
    /* ISW1_TO_L2_MGMT_L2_BUS    */ "Per pipeline L2 bus from ISW1[0-3] to L2_MGMT. Both Learn_bus and L2_LOOKUP / L2_MEMRD data is returned on this shared bus.",
    /* ISW2_DOP                  */ "Position and description of bits in ISW2_DOP DOP chain",
    /* ISW2_TO_ICFG_BUS          */ "Bit Definitions of ISW2_TO_ICFG_BUS.",
    /* ISW2_TO_IPARS_BUS         */ "Bit Definitions of ISW2_TO_IPARS_BUS.",
    /* ISW3_DOP                  */ "Position and description of bits in ISW3_DOP DOP chain",
    /* ISW3_DROP                 */ "Bit Definitions of the ISW3 drop vector.",
    /* ISW3_TO_IPARS_BUS         */ "Bit Definitions of ISW3_TO_IPARS_BUS.",
    /* ISW3_TO_ISW4_BUS          */ "Position and description of bits in Isw3(DPP) to Isw4 bus. Equivalently, this is the content of DPP output event fifo",
    /* ISW4_CELL_QUEUES_DATA     */ "Data to be stored in the per port cell queues in Isw4. Some of them (SOP/MOP/EOPs) are also used for controls.",
    /* ISW4_SLOT_PIPELINE_DATA   */ "Isw4 slot pipeline data",
    /* ISW_TO_IPOST_BUS          */ "Position and description of bits in Isw3(DPP) to Isw4 bus. Equivalently, this is the content of DPP output event fifo",
    /* ITAG_ACTION_SET           */ "PDD Output Bus generic format",
    /* ITAG_HDR                  */ "4BYTES OF ETAG HEADER AFTER ETHERTYPE.",
    /* ITE_TO_EMC_WR_INFO        */ "ITE to EMC cell write",
    /* ITE_TO_RQE_EXT_INFO       */ "Position and description of bits",
    /* ITE_TO_TOQ_WCE_INFO       */ "Position and description of bits",
    /* ITE_WORK_QUEUE_MEM        */ "ITE_WORK_QUEUE Memory contents",
    /* IVLAN_ACTION_SET          */ "PDD Output Bus generic format",
    /* IVP_DOP                   */ "Position and description of bits in IVP_DOP DOP chain",
    /* IVXLT1_DOP                */ "Position and description of bits in IVXLT1_DOP DOP chain",
    /* IVXLT2_DOP                */ "Position and description of bits in IVXLT2_DOP DOP chain",
    /* JTAG_OTP_CNTRL_FORMAT     */ "JTAG_OTP_CONTROL_REG BIT ASSIGNMENT",
    /* JTAG_OTP_STATUS_FORMAT    */ "JTAG_OTP_CONTROL_REG BIT ASSIGNMENT",
    /* KEY_ATTRIBUTES            */ "KEY_ATTRIBUTES Table Format.",
    /* KT_FCC_MASTER_IN_BUS      */ "This is the input control bus from the key table top required for kt_fcc_master functionality.",
    /* L0_FIRST_VEC_FORMAT_L0    */ "Position and description of bits in the MB to DQX HDRMISC INFO bus.",
    /* L0_FIRST_VEC_FORMAT_L1    */ "Position and description of bits in the MB to DQX HDRMISC INFO bus.",
    /* L0_FIRST_VEC_FORMAT_L2    */ "Position and description of bits in the MB to DQX HDRMISC INFO bus.",
    /* L2_BITMAP_DOP             */ "L2_BITMAP_DOP DOP description.",
    /* L2_EDIT_CONTROLS_ACTION_SET */ "PDD Output Bus generic format",
    /* L2_ENTRY_1_DATA           */ "Format for L2_ENTRY_1 DATA.",
    /* L2_ENTRY_2_DATA           */ "Format for L2_ENTRY_2 DATA.",
    /* L2_ENTRY_KEY              */ "Format for L2_ENTRY_1, L2_ENTRY_2 KEY.",
    /* L2_ENTRY_KEY_TYPE         */ "L2_ENTRY Key Types",
    /* L2_FWD_TABLE_ATTRIBUTES   */ "Bit definition for L2 Fordwarding attributes.",
    /* L2_GRE_HDR                */ "GRE header specification",
    /* L2_MEMBERSHIP_CONTROLS_ACTION_SET */ "PDD Output Bus generic format",
    /* L2_MGMT_TO_IARB_REQ       */ "Requst Bus from L2_MGMT to IARB[0-3].",
    /* L2_TAG_INHERIT_ACTION_FORMAT */ "L2_TAG_INHERIT_ACTION format.",
    /* L2_USER_ENTRY_DATA_FORMAT */ "format for L2_USER_ENTRY data",
    /* L2_USER_ENTRY_DOP         */ "L2_USER_ENTRY_DOP DOP description.",
    /* L2_USER_ENTRY_KEY_TYPE    */ "L2_USER_ENTRY Key Types",
    /* L2_USER_ENTRY_TCAM_FORMAT */ "format for L2_USER_ENTRY TCAM",
    /* L3MC_MAC_DA_UPDATE_ACTION_SET */ "PDD Output Bus generic format",
    /* L3_BITMAP_DOP             */ "L3_BITMAP_DOP DOP description.",
    /* L3_DEFIP_ALPM_HIT_ONLY_COV_DEFS */ "defines for l3 defip alpm entry hit only coverage analysis",
    /* L3_DEFIP_ALPM_PIVOT_FMT1  */ "L3 Defip ALPM Pivot Associated Data FMT1. 10 bytes, 6 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT2  */ "L3 Defip ALPM Pivot Associated Data FMT2. 12 bytes, 5 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT3  */ "L3 Defip ALPM Pivot Associated Data FMT3. 15 bytes, 4 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT4  */ "L3 Defip ALPM Pivot Associated Data FMT4. 20 bytes, 3 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT5  */ "L3 Defip ALPM Pivot Associated Data FMT5. 26 bytes, 2 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT6  */ "L3 Defip ALPM Pivot Associated Data FMT6. 15 bytes, 4 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT7  */ "L3 Defip ALPM Pivot Associated Data FMT7. 20 bytes, 3 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT8  */ "L3 Defip ALPM Pivot Associated Data FMT8. 29 bytes, 2 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT1_FULL */ "L3 Defip ALPM Pivot Associated Data FMT1. 10 bytes, 6 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT2_FULL */ "L3 Defip ALPM Pivot Associated Data FMT2. 12 bytes, 5 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT3_FULL */ "L3 Defip ALPM Pivot Associated Data FMT3. 15 bytes, 4 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT4_FULL */ "L3 Defip ALPM Pivot Associated Data FMT4. 20 bytes, 3 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT5_FULL */ "L3 Defip ALPM Pivot Associated Data FMT5. 28 bytes, 2 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT6_FULL */ "L3 Defip ALPM Pivot Associated Data FMT6. 15 bytes, 4 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT7_FULL */ "L3 Defip ALPM Pivot Associated Data FMT7. 20 bytes, 3 entries per bank.",
    /* L3_DEFIP_ALPM_PIVOT_FMT8_FULL */ "L3 Defip ALPM Pivot Associated Data FMT8. 29 bytes, 2 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT1  */ "L3 Defip ALPM Route Associated Data FMT1. 9 bytes, 6 entries per bank. (L3_DEFIP_ALPM_V4)",
    /* L3_DEFIP_ALPM_ROUTE_FMT2  */ "L3 Defip ALPM Route Associated Data FMT1. 14 bytes, 4 entries per bank. (L3_DEFIP_ALPM_V6_64)",
    /* L3_DEFIP_ALPM_ROUTE_FMT3  */ "L3 Defip ALPM Route Associated Data FMT1. 27 bytes, 2 entries per bank. (L3_DEFIP_ALPM_V6_128)",
    /* L3_DEFIP_ALPM_ROUTE_FMT4  */ "L3 Defip ALPM Route Associated Data FMT1. 14 bytes, 4 entries per bank. (L3_DEFIP_ALPM_V4_1)",
    /* L3_DEFIP_ALPM_ROUTE_FMT5  */ "L3 Defip ALPM Route Associated Data FMT1. 18 bytes, 3 entries per bank. (L3_DEFIP_ALPM_V6_64_1)",
    /* L3_DEFIP_ALPM_ROUTE_FMT6  */ "L3 Defip ALPM Route Associated Data FMT6. 10 bytes, 6 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT7  */ "L3 Defip ALPM Route Associated Data FMT7. 12 bytes, 5 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT8  */ "L3 Defip ALPM Route Associated Data FMT8. 15 bytes, 4 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT9  */ "L3 Defip ALPM Route Associated Data FMT9. 19 bytes, 3 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT10 */ "L3 Defip ALPM Route Associated Data FMT10. 10 bytes, 6 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT11 */ "L3 Defip ALPM Route Associated Data FMT11. 15 bytes, 4 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT12 */ "L3 Defip ALPM Route Associated Data FMT12. 22 bytes, 2 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT13 */ "L3 Defip ALPM Route Associated Data FMT1. 3 bytes, 20 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT10_FULL */ "L3 Defip ALPM Route Associated Data FMT10. 10 bytes, 6 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT11_FULL */ "L3 Defip ALPM Route Associated Data FMT11. 15 bytes, 4 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT12_FULL */ "L3 Defip ALPM Route Associated Data FMT12. 22 bytes, 2 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT13_FULL */ "L3 Defip ALPM Route Associated Data FMT1. 3 bytes, 20 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT1_FULL */ "L3 Defip ALPM Route Associated Data FMT1. 9 bytes, 6 entries per bank. (L3_DEFIP_ALPM_V4)",
    /* L3_DEFIP_ALPM_ROUTE_FMT2_FULL */ "L3 Defip ALPM Route Associated Data FMT1. 14 bytes, 4 entries per bank. (L3_DEFIP_ALPM_V6_64)",
    /* L3_DEFIP_ALPM_ROUTE_FMT3_FULL */ "L3 Defip ALPM Route Associated Data FMT1. 27 bytes, 2 entries per bank. (L3_DEFIP_ALPM_V6_128)",
    /* L3_DEFIP_ALPM_ROUTE_FMT4_FULL */ "L3 Defip ALPM Route Associated Data FMT1. 14 bytes, 4 entries per bank. (L3_DEFIP_ALPM_V4_1)",
    /* L3_DEFIP_ALPM_ROUTE_FMT5_FULL */ "L3 Defip ALPM Route Associated Data FMT1. 18 bytes, 3 entries per bank. (L3_DEFIP_ALPM_V6_64_1)",
    /* L3_DEFIP_ALPM_ROUTE_FMT6_FULL */ "L3 Defip ALPM Route Associated Data FMT6. 10 bytes, 6 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT7_FULL */ "L3 Defip ALPM Route Associated Data FMT7. 12 bytes, 5 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT8_FULL */ "L3 Defip ALPM Route Associated Data FMT8. 15 bytes, 4 entries per bank.",
    /* L3_DEFIP_ALPM_ROUTE_FMT9_FULL */ "L3 Defip ALPM Route Associated Data FMT9. 19 bytes, 3 entries per bank.",
    /* L3_DEFIP_DATA_0_COV_DEFS  */ "defines for l3_defip_data ram 0 coverage analysis, rtl bypass covers a write on Port B colliding at the same addr as a read on Port A",
    /* L3_DEFIP_DATA_1_COV_DEFS  */ "defines for l3_defip_data ram 0 coverage analysis, rtl bypass covers a write on Port B colliding at the same addr as a read on Port A",
    /* L3_DEFIP_DATA_2_COV_DEFS  */ "defines for l3_defip_data ram 0 coverage analysis, rtl bypass covers a write on Port B colliding at the same addr as a read on Port A",
    /* L3_DEFIP_DATA_3_COV_DEFS  */ "defines for l3_defip_data ram 0 coverage analysis, rtl bypass covers a write on Port B colliding at the same addr as a read on Port A",
    /* L3_DEFIP_DATA_4_COV_DEFS  */ "defines for l3_defip_data ram 0 coverage analysis, rtl bypass covers a write on Port B colliding at the same addr as a read on Port A",
    /* L3_DEFIP_DATA_5_COV_DEFS  */ "defines for l3_defip_data ram 0 coverage analysis, rtl bypass covers a write on Port B colliding at the same addr as a read on Port A",
    /* L3_DEFIP_DATA_6_COV_DEFS  */ "defines for l3_defip_data ram 0 coverage analysis, rtl bypass covers a write on Port B colliding at the same addr as a read on Port A",
    /* L3_DEFIP_DATA_7_COV_DEFS  */ "defines for l3_defip_data ram 0 coverage analysis, rtl bypass covers a write on Port B colliding at the same addr as a read on Port A",
    /* L3_DEFIP_HIT_ONLY_COV_DEFS */ "defines for l3 defip entry hit only coverage analysis",
    /* L3_DEFIP_TCAM_KEY         */ "L3_DEFIP_TCAM_LEVEL1 Key Format.",
    /* L3_ECMP_GROUP_A_RRLB_CNT_COV_DEFS */ "defines for l3_ecmp round-robin count coverage analysis",
    /* L3_ECMP_GROUP_B_RRLB_CNT_COV_DEFS */ "defines for l3_ecmp round-robin count coverage analysis",
    /* L3_ECMP_GROUP_RRLB_CNT_0_COV_DEFS */ "defines for l3_ecmp round-robin count coverage analysis",
    /* L3_ECMP_GROUP_RRLB_CNT_1_COV_DEFS */ "defines for l3_ecmp round-robin count coverage analysis",
    /* L3_ECMP_GROUP_RRLB_CNT_2_COV_DEFS */ "defines for l3_ecmp round-robin count coverage analysis",
    /* L3_ECMP_GROUP_RRLB_CNT_3_COV_DEFS */ "defines for l3_ecmp round-robin count coverage analysis",
    /* L3_ECMP_GROUP_RRLB_CNT_4_COV_DEFS */ "defines for l3_ecmp round-robin count coverage analysis",
    /* L3_ECMP_GROUP_RRLB_CNT_5_COV_DEFS */ "defines for l3_ecmp round-robin count coverage analysis",
    /* L3_ECMP_GROUP_RRLB_CNT_6_COV_DEFS */ "defines for l3_ecmp round-robin count coverage analysis",
    /* L3_ECMP_GROUP_RRLB_CNT_7_COV_DEFS */ "defines for l3_ecmp round-robin count coverage analysis",
    /* L3_ENTRY_1_DATA           */ "Format for L3_ENTRY_1 DATA.",
    /* L3_ENTRY_2_DATA           */ "Format for L3_ENTRY_2 DATA.",
    /* L3_ENTRY_4_DATA           */ "Format for L3_ENTRY_4 DATA.",
    /* L3_ENTRY_HIT_ONLY_COV_DEFS */ "defines for l3 entry hit only coverage analysis",
    /* L3_ENTRY_KEY              */ "Format for L3_ENTRY_1 KEY (keys unique to L3_ENTRY_1).",
    /* L3_FWD_TABLE_ATTRIBUTES   */ "Bit definition for L3 Fordwarding attributes.",
    /* L3_GRE_HDR                */ "L3 GRE header specification",
    /* L3_IIF_SOURCE             */ "Denote the source where L3_IIF is from.",
    /* L3_TUNNEL_DEFAULT_VLAN_ACTION_SET */ "PDD Output Bus generic format",
    /* L3_TYPE                   */ "Description of encodings of L3_TYPE.",
    /* L4_PORT                   */ "The well known ports are assigned by IANA in the range of 0 to 1023.",
    /* LAG_RH_ACTION_SET         */ "PDD Output Bus generic format",
    /* LB_MH_BASE                */ "Common fields in all loopback headers",
    /* LB_MH_EP_REDIRECT         */ "Bit Definitions of the EP Redirect Module Header",
    /* LB_MH_MIM                 */ "Bit Definitions of the MAC-in-MAC Module Header",
    /* LB_MH_WLAN                */ "Bit Definitions of the WLAN Module Header",
    /* LEARN_BUS                 */ "Ingress Pipeline Learn Bus",
    /* LEARN_DATA                */ "Ingress Pipeline Learn Bus.",
    /* LEVEL1_DATA_REQ_BUS       */ "Level1 DATA Req Bus.",
    /* LEVEL1_DATA_RST_BUS       */ "Level1 DATA Result Bus.",
    /* LEVEL1_REQ_BUS            */ "Level1 Req Bus.",
    /* LEVEL1_RST_BUS            */ "Level1 Result Bus.",
    /* LEVEL1_TCAM_REQ_BUS       */ "Level1 TCAM Req Bus.",
    /* LEVEL1_TCAM_RST_BUS       */ "Level1 TCAM Result Bus.",
    /* LLC_HDR                   */ "LLC header specification",
    /* LMFC_COMMON_BUS           */ "Signals that are common to all interfaces",
    /* LMFC_COUNTER_POOL_BUS     */ "Fields required to update each counter pool.",
    /* LMFC_EOP_BUFFER           */ "EOP Context buffer.",
    /* LMFC_INT_CNTR_BUS         */ "Bus from Interface Resolution Block to individual counter pools.",
    /* LMFC_IN_BUS               */ "Input bus to module.",
    /* LMFC_OUT_BUS              */ "Module output Bus.",
    /* LMFC_PARITY_STATUS_BUS    */ "Parity Status Bus.",
    /* LMFC_SAMPLE_DATA          */ "Bus format for read data from each pool.",
    /* LMFC_SRC_INTF_BUS         */ "Interface bus for various sources: TX/IFP based MEPs/Native MEPs",
    /* LMFC_SRC_INTF_COMMON_BUS  */ "Fields in this bus are applicable to all counter pools.",
    /* LOOPBACK_MH               */ "Bit Definitions of the Loopback Module Header",
    /* LPM_IN_BUS                */ "LPM core input bus format.",
    /* LPM_IN_BUS_2              */ "LPM core input bus format.",
    /* LPM_IP_BUS_L1L2_TO_L3     */ "L3 Defip ALPM Route Associated Data FMT7. 12 bytes, 5 entries per bank.",
    /* LPM_IP_CONTROL_FULL_SET   */ "LPM IP CONTROL Full Set.",
    /* LPM_OUT_BUS               */ "LPM core output bus format.",
    /* LP_HEADER_ETH_MODE        */ "",
    /* LP_HEADER_TCI_LENGTH_MODE */ "",
    /* MACSEC_ESEC_SVTAG         */ "Custom header processor for Macsec",
    /* MACSEC_ESEC_TIMESTAMP     */ "ISEC OCF bank format",
    /* MACSEC_ISEC_SVTAG         */ "SVTAG for Macsec Ingress output packet",
    /* MAC_BLOCK_ACTION_SET      */ "PDD Output Bus generic format",
    /* MAC_HDR                   */ "Ethernet MAC specification",
    /* MAC_IP_BIND_ACTION_SET    */ "PDD Output Bus generic format",
    /* MAC_RRSV                  */ "Recieved runt packet status vector",
    /* MAC_RSV                   */ "Recieved packet status vector",
    /* MAC_RSV_PFC               */ "Recieved packet PFC status vector",
    /* MAC_TSV                   */ "Transmit packet status vector",
    /* MATCH_ID_DOP              */ "MATCH_ID_DOP DOP description.",
    /* MATCH_ID_DOP_DOP          */ "MATCH_ID_DOP_DOP DOP description.",
    /* MA_STATE_COV_DEFS         */ "defines for flex_ctr coverage analysis",
    /* MB0_TO_INTFI_FC_BUS       */ "Flow control bus format from MB0 to INTFI",
    /* MB_TCB_TO_DEQ_ECC_INFO    */ "Position and description of bits",
    /* MB_TO_DQX_HDRMISC_INFO    */ "Position and description of bits in the MB to DQX HDRMISC INFO bus.",
    /* MCQ_QDB                   */ "Position and description of bits in the MCQ QDB register",
    /* MC_INDICES_DOP            */ "MC_INDICES_DOP DOP description.",
    /* MEMADDR                   */ "Memory Address Format.",
    /* MEMADR_EGR_FLEX_PREEMPT_LOOKUP */ "Address to physical memory EGR_FLEX_PREEMPT_LOOKUP",
    /* MEMADR_EGR_FLEX_PREEMPT_XFR_COUNT */ "",
    /* MFT_SESSION_DATA_BUS      */ "mft session data bus",
    /* MIB_MEMORY_ROW0           */ "Row 0 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW1           */ "Row 1 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW2           */ "Row 2 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW3           */ "Row 3 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW4           */ "Row 4 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW5           */ "Row 5 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW6           */ "Row 6 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW7           */ "Row 7 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW8           */ "Row 8 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW9           */ "Row 9 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW10          */ "Row 10 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW11          */ "Row 11 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW12          */ "Row 12 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW13          */ "Row 13 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW14          */ "Row 14 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIB_MEMORY_ROW15          */ "Row 15 of PM8x50 MIB memory. All 8 ports have the same MIB format",
    /* MIM_TUNNEL_TERM_ACTION_SET */ "PDD Output Bus generic format",
    /* MIRROR_DOP                */ "MIRROR_DOP DOP description.",
    /* MMU_CBPPACKETHEADER       */ "Position and description of bits in CBP Packet Header",
    /* MMU_CCPHEADER             */ "Position and description of bits in CCP Entry",
    /* MMU_CCP_TO_CFAP_CELL_INFO */ "Info bus for the cell pointers returns sent by CCP to CFAP.",
    /* MMU_CELLHDR_2_CRRU        */ "Position and description of bits in bus between crru and cbp rd ctrl",
    /* MMU_CFAP_MSBUS            */ "Position and description of bits in the 96-bit MS-Bus",
    /* MMU_CFAP_TO_CRB_ENQ_INFO  */ "Cell pointer for the enqueue cell. There are 4 instances of this interface, one for each enqueue pipe",
    /* MMU_CFAP_TO_MB_CELL_INFO  */ "Cell pointer for the enqueue cell. There are 4 instances of this interface, one for each enqueue pipe",
    /* MMU_CFAP_TO_THDI_REL_INFO */ "Cell release information needed by the THDI to return resource allocation databasse.\nUp to 12 cells per transfer, This format is instantiated 12 times",
    /* MMU_CFAP_TO_THDO_DEQCHK_INFO */ "CQE dequeue interface from CFAP to THDO, 6 instances of this interface",
    /* MMU_CLSCH_TO_PKSCH_PICK_INFO */ "Port pick and related cell information from the prefetch",
    /* MMU_CLSCH_TO_SHP_DEQ_INFO */ "Port pick and related cell information.",
    /* MMU_CMICXQHEADER          */ "Position and description of bits in XQ write Header",
    /* MMU_COEFC_INDEX           */ "Position and description of bits in the ENQ_TO_INTFI COE-FC index bus",
    /* MMU_CPATH_TO_DPATH        */ "Position and description of bits in CBP Packet Header",
    /* MMU_CPUCRRUHEADER         */ "Position and description of bits in CPU CRRU Entry",
    /* MMU_CPUHGCRRUHEADER       */ "Position and description of bits in CPU HG CRRUDEST_PORT Entry",
    /* MMU_CPUHGPPPHEADER        */ "Position and description of bits in CPU HG PPP Entry",
    /* MMU_CPUHGXQHEADER         */ "Position and description of bits in CPU HG XQ Entry",
    /* MMU_CPUPPPHEADER          */ "Position and description of bits in CPU PPP Entry",
    /* MMU_CPUXQHEADER           */ "Position and description of bits in CPU XQ Entry",
    /* MMU_CRB_TO_CFAP_ENQ_INFO  */ "Interface from CRB to CFAP for enqueue cells received from IP that need cell pointer.\nCRB has 4 instances of this interface. One for every input pipe",
    /* MMU_CRB_TO_EBCTM_ENQ_CT_REQ_INFO */ "CRB to EBCTM Enqueue cell info for CT Request",
    /* MMU_CRB_TO_EBCTM_RQE_CT_REQ_INFO */ "CRB to EBCTM dummy CT request for cells received from RQE",
    /* MMU_CRB_TO_RL_ENQ_CT_CELL_INFO */ "CRB to RL CT Cell info used by RL to dequeue a CT cell from MB",
    /* MMU_CRB_TO_RL_MULTI_COPY_INFO */ "CRB to RL multi copy info used by RL to send to the CCP.",
    /* MMU_CRB_TO_RQE_PKTHDR_INFO */ "Multicast packet header information from IP via CRB to the RQE.\nRQE uses this information to lookup the ICC value and returns this back to the CRB so that it can be stored\nwith SAF packets out to the SCB.  RQE stores this information in the RQE info table. The RQE returns the table index to the CRB.\nIf THDR drops the packet, the RQE will return the index to the RQE free pool.\nThis information is valid only on SOP and EOP cells of a packet.\nCRB has 4 instances of this interface. One for every inp ...",
    /* MMU_CRB_TO_SCB_IP_INFO    */ "CRB to SCB unicast interface",
    /* MMU_CRB_TO_SCB_RQE_CELL_INFO */ "Interface from CRB to SCB capturing the cell infromation from RQE after replication.\nThere are 4 instances of this interface as RQE can transfer maximum of 4 cells per cycle.",
    /* MMU_CRB_TO_SCB_RQE_PKT_INFO */ "Interface from CRB to SCB capturing the packet infromation from RQE after replication.\nThere is 1 instance of this interface.",
    /* MMU_CRB_TO_THDI_ENQ_INFO  */ "CRB to THDI enqueue cell information received from IP",
    /* MMU_CRB_TO_THDR_ENQ_CELL_INFO */ "Interface from CRB to THDR used by THDR to make a drop/accept decision. The interface is valid only if the cell is a Multicast/Mirror/Copy-to-CPU.\nCRB has 4 instances of this interface. One for every input pipe",
    /* MMU_CRRUHEADER            */ "Position and description of bits in CRRU Entry",
    /* MMU_CTR_TO_RQE_DATA       */ "MMU_CTR_TO_RQE_DATA",
    /* MMU_DPATH_TO_CPATH        */ "Position and description of bits in CBP Packet Header",
    /* MMU_EBCFP_TO_EBCR_CELL_INFO */ "Supplies cell pointer and control information with valid signal to EBCR",
    /* MMU_EBCFP_TO_EBMB_CELL_INFO */ "Supplies cell pointer, cell size encoding and CCBE with valid signal to EBMB",
    /* MMU_EBCFP_TO_EBMB_DEQ_CELL_INFO */ "Supplies deque cell pointer, device/MMU port number, encoded cell size, port in/out-of-profile status with valid signal to EBMB",
    /* MMU_EBCR_TO_EBTOQ_ENQ_CELL_INFO */ "Position and description of the bits in the EBCR to EBTOQ enq interface",
    /* MMU_EBCTM_STG1_BUS_FORMAT */ "Position and description of bits in the EBCTM stage 1 to stage 2 bus.",
    /* MMU_EBCTM_STG2_BUS_FORMAT */ "Position and description of bits in the EBCTM stage 2 to stage 3 bus.",
    /* MMU_EBCTM_STG5_BUS_FORMAT */ "Position and description of bits in the EBCTM stage 5 to stage 6 bus.",
    /* MMU_EBCTM_STG6_BUS_FORMAT */ "Position and description of bits in the EBCTM stage 6 to stage 7 bus.",
    /* MMU_EBCTM_TO_CRB_ENQ_CT_DECISION_INFO */ "Position and description of bits in the EBCTM to CRB CT decision for unicast CT requests. This is a per IP interface. EBCTM has 8 sets of the given interface.",
    /* MMU_EBCTM_TO_CRB_RQE_CT_DECISION_INFO */ "Position and description of bits in the EBCTM to CRB cell tag information for multicast CT requests. This is a per RQE interface. EBCTM has 2 sets of the given interface.",
    /* MMU_EBCTM_TO_EBPCC_CT_FSM_STATE */ "Position and description of bits in the EBCTM to EBPCC CT FSM state. This is a per front panel port. EBCTM has 18 sets of the given interface.",
    /* MMU_EBCTM_TO_EBQS_CT_FSM_STATE_INFO */ "EBCTM to EBQS CT FSM state information. This is a per port interface. EBCTM has 18 sets of the given interface.",
    /* MMU_EBCTM_TO_PTSCH_PRETCT_INFO */ "Position and description of bits in the EBCTM to PTSCH PreTCT info bus. EBCTM has 1 set of the given interface.",
    /* MMU_EBCTM_TO_RL_ENQ_CT_DECISION_INFO */ "Position and description of bits in the EBCTM to RL CT decision for unicast CT requests. This is a per IP interface. EBCTM has 8 sets of the given interface.",
    /* MMU_EBMB_TO_EBPTS_DEQ_INFO */ "Dequeue info for EBPTS shaper",
    /* MMU_EBMB_TO_EP_CELL_DATA  */ "EBMB to EP cell data format",
    /* MMU_EBPCC_TO_EBCTM_TCT_INFO */ "EBPCC to EBCTM information bus",
    /* MMU_EBPCC_TO_PTSCH_DEQ_INC_INFO */ "Credit increment information for EB dequeue",
    /* MMU_EBPCC_TO_PTSCH_PFC_CREDIT_INFO */ "Position and description of the credit increment decrement related information for a port that gets PFC XOFF/XON. 1 set of this interface.",
    /* MMU_EBPCC_TO_PTSCH_PFC_ENQ_INC_INFO */ "Credit increment information for cases where the PTSCH continues to send the cells for queues that is in XOFF",
    /* MMU_EBPCC_TO_QSCH_QUEUE_XOFF_INFO */ "XOFF information per Scheduler Queue. The port cycles through in a TDM manner.",
    /* MMU_EBPR_TO_EBCFP_CELL_INFO */ "Position and description of the bits in the EBPR to EBCFP cell info interface",
    /* MMU_EBPTS_TO_EBQS_PICK_INFO */ "Port pick and related cell information from the prefetch",
    /* MMU_EBPTS_TO_EBQS_PORT_CREDITS_AVLBL */ "Port pick and related cell information from the prefetch",
    /* MMU_EBP_TO_EBMB_CELL_DATA */ "EBP to EBMB cell data format",
    /* MMU_EBP_TO_EBMB_SLICE_DATA */ "EBP to EBMB cell data interface format, per slice",
    /* MMU_EBQS_ADV_PICK_INFO    */ "EBQS advance pick info.",
    /* MMU_EBQS_ENQ_TO_PORT_INFO */ "EBQS enqueue module to per port module info bus.",
    /* MMU_EBQS_TO_EBPCC_PFC_XOFF_STATE_PORT */ "Per EBQueue PFC XOFF state information from EBQS to EBPCC.",
    /* MMU_EBQS_TO_EBPTS_PREFETCH_INFO */ "Per port cell prefetch info from EBQS to EBPortSCH.",
    /* MMU_EBQS_TO_EBTOQ_DEQ_CELL_INFO */ "Dequeue cell info from EBQS to EBTOQ.",
    /* MMU_EBTOQ_TO_EBCFP_DEQ_CELL_INFO */ "EBTOQ to EBCFP interface for dequeue",
    /* MMU_EBTOQ_TO_EBCTM_DEQ_CELL_INFO */ "EBTOQ to EBCTM cell info for enqueue and dequeue in EBTOQ. There are 3 instances of this interface - 2 for Enqueue, 1 for dequeue.",
    /* MMU_EBTOQ_TO_EBCTM_ENQ_CELL_INFO */ "EBTOQ to EBCTM cell info for enqueue and dequeue in EBTOQ. There are 3 instances of this interface - 2 for Enqueue, 1 for dequeue.",
    /* MMU_EBTOQ_TO_EBPCC_DEQ_CELL_INFO */ "Enqueue, dequeue indication from EBTOQ to EBPCC. There are 3 instances of this interface - 2 for enqueue, 1 for dequeue",
    /* MMU_EBTOQ_TO_EBPCC_ENQ_CELL_INFO */ "Enqueue, dequeue indication from EBTOQ to EBPCC. There are 3 instances of this interface - 2 for enqueue, 1 for dequeue",
    /* MMU_EBTOQ_TO_EBQS_DEQ_CELL_INFO */ "Indicates if 10th cell in the virtual EBQueue is an EOP.",
    /* MMU_EBTOQ_TO_EBQS_ENQ_CELL_INFO */ "Enqueue cell info from EBTOQ to EBQS. There are 2 such interfaces to support 2 Enqueues per cycle",
    /* MMU_EB_MIN_DEQUEUE_DELAY  */ "The minimum dequeue delay in EB. Used to determine the number of additional dequeue staging\n    flops to be added in EBCFP to prevent dequeue request to EBMB before cell enqueue.",
    /* MMU_ENQ_RQE_DATA          */ "Position and description of bits in the DQS to TOQ INFO",
    /* MMU_ENQ_SOP_STORE_0       */ "Internal packet pointer",
    /* MMU_ENQ_SOP_STORE_1       */ "Internal packet pointer",
    /* MMU_ENQ_SOP_STORE_2       */ "Internal packet pointer",
    /* MMU_ENQ_TO_RQE_DATA       */ "MMU_ENQ_TO_RQE_DATA",
    /* MMU_ES_TO_RQE_DATA        */ "MMU_ES_TO_RQE_DATA",
    /* MMU_EXT_MC_QUEUE_LIST     */ "MMU_EXT_MC_QUEUE_LIST0,1,4 memory format",
    /* MMU_HGCRRUHEADER_EXT      */ "Position and description of bits in HG CRRUDEST_PORT Entry",
    /* MMU_HGPPPHEADER           */ "Position and description of bits in HG PPP Entry",
    /* MMU_HGPPPHEADER_EXT       */ "Position and description of bits in HG PPP Entry",
    /* MMU_HGXQHEADER            */ "Position and description of bits in HG XQ Entry",
    /* MMU_HGXQHEADER_EXT        */ "Position and description of bits in HG XQ Entry",
    /* MMU_IDMHEADER             */ "Position and description of bits in IDM Header",
    /* MMU_INTFI_TO_EBCFP_QUEUES_PURGE_INFO */ "Per-port - 12 MMU Queues' purge bitmap + 9 EB Groups'/Queues' purge bitmap",
    /* MMU_INTFI_TO_EBCTM_PORT_FC_INFO */ "Per-port XOFF status",
    /* MMU_INTFI_TO_EBPCC_QUEUES_FC_INFO */ "Per-port - 12 MMU Queues' XOFF status bitmap + 9 EB Groups'/Queues' XOFF status bitmap",
    /* MMU_INTFI_TO_EBQS_EB_QUEUES_FC_INFO */ "Per-port 9 EB PFC Queues'/Groups' XOFF status bitmap.",
    /* MMU_IPMCGROUPTABLE        */ "Position and description of bits in IPMC Group Table",
    /* MMU_IPMCHEADER            */ "Position and description of bits in IPMC Header Entry",
    /* MMU_IPMCVLANTABLE         */ "Position and description of bits in IPMC VLAN Table",
    /* MMU_IPMC_GRP_TBL_ALL      */ "Aggregate IPMC group table",
    /* MMU_ITE_CTRL_0            */ "ITE_WORK_QUEUE Memory contents",
    /* MMU_ITE_WORK_QUEUE        */ "ITE_WORK_QUEUE Memory contents",
    /* MMU_MB_BANK_ADDR          */ "Position and description of bits",
    /* MMU_MB_REMOTE_IF          */ "Internal MB interface (remote_if)",
    /* MMU_MB_TO_EBP_EB_INFO     */ "EB number sent from MB to EBP ahead of the data",
    /* MMU_MB_TO_EBP_SLICE_DATA  */ "Payload slice data sent from MB to EBP",
    /* MMU_MEM_ADDR              */ "Position and description of bits",
    /* MMU_MFT_DROP_CODE         */ "MMU to MFT drop bitmap.",
    /* MMU_MFT_DROP_VECTOR       */ "MMU to MFT drop vector, including IPIPE late stage drop and MMU drop codes",
    /* MMU_MFT_PERC_FILL_LEVEL   */ "MMU to MFT percentage fill-level for various resources controlling congestion.",
    /* MMU_MFT_PKT_FLAG          */ "MMU to MFT packet flags.",
    /* MMU_MTRO_TO_QSCH_EP_SHAPE_BUS_INFO */ "Translated EP shape bus info",
    /* MMU_MTRO_TO_QSCH_L0_PROFILING_UPDATE_INFO */ "MIN and MAX profiling status change information for COS, from MTRO to QSCH. Three parallel buses to convey up to three profiling changes per cycle due to the three update events: TOQ dequeuing response, EP-Shape-Bus return, and bucket refreshing.",
    /* MMU_MTRO_TO_QSCH_L1_PROFILING_UPDATE_INFO */ "MIN and MAX profiling status change information for QUEUE, from MTRO to QSCH. Three parallel buses to convey up to three profiling changes per cycle due to the three update events: TOQ dequeuing response, EP-Shape-Bus return, and bucket refreshing.",
    /* MMU_MTRO_TO_QSCH_PORT_PROFILING_UPDATE_INFO */ "Port MAX profiling status changes information from MTRO to QSCH. Three parallel buses to convey up to three profiling changes per cycle due to the three update events: TOQ dequeuing response, EP-Shape-Bus return, and bucket refreshing.",
    /* MMU_NCPHEADER             */ "Position and description of bits in NCP Entry",
    /* MMU_OQS_TO_TOQ_CELL_INFO  */ "Cell information from OQS to TOQ. There are 6 instances of this interface.",
    /* MMU_PKTHEADER1_ALL        */ "Aggregate Packet Header 1 table",
    /* MMU_PPPHEADER             */ "Position and description of bits in PPP to CDU bus",
    /* MMU_PPSCH_TO_PTSCH_PICK_INFO */ "Pipe scheduler pick feedback to port scheduler",
    /* MMU_PPSCH_TO_QSCH_PICK_INFO */ "Pipe scheduler pick feedback to queue scheduler",
    /* MMU_PPSCH_TO_QSCH_Q_MAP_INFO */ "Interface for updating Scheduler Q num to MMU Q num mapping table",
    /* MMU_PPSCH_TO_TOQ_DEQ_INFO */ "Dequeue pick information from pipe scheduler to TOQ",
    /* MMU_PTSCH_TO_PPSCH_PICK_INFO */ "Port pick for the pipe plus VOQ picks and info, including the primary and secondary picks for that Port as indicated by the Queue Scheduler",
    /* MMU_QSCH_TO_PTSCH_PORT_DEQ_STATE */ "indcate to PTSCH a port dequeuing states which include: one is that the port is ready to be dequeued, and one is that the port has at least two more dequeues available at this time",
    /* MMU_QSCH_TO_PTSCH_QUEUE_PICK_INFO */ "per port VOQ picks and info, including the primary and secondary picks",
    /* MMU_QSCH_TO_THDO_VOQ_FAIRNESS_INFO */ "QSCH will periodically request the average arrival rate count of each VOQ from THDO by sending to it the MMU queue number. The MMU queue number is sent one per cycle and is in the form of {pipe number, port number, and MMU queue number local to the port}",
    /* MMU_QSTRUCT_EOP_BLOCK     */ "EOP_BLOCK DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT   */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QENTRY        */ "QENTRY DATABASE",
    /* MMU_REG_ADDR              */ "Position and description of bits",
    /* MMU_RL_TO_CCP_CELL_INFO   */ "normal read requests notifications from RL to CCP",
    /* MMU_RL_TO_CCP_RQE_INFO    */ "RQE copy count updates sent through RL to CCP",
    /* MMU_RL_TO_CFAP_CELL_INFO  */ "RL to CFAP",
    /* MMU_RL_TO_EBCFP_CTRL_DELAY */ "RL to EBCFP control delay.",
    /* MMU_RL_TO_EBMB_DATA_DELAY */ "RL to EBMB data path delay.",
    /* MMU_RL_TO_EBPR_CCBE_INFO  */ "CCBE + other params passed to EBP",
    /* MMU_RL_TO_MB_CELL_INFO    */ "CCBE + other params passed to EBP",
    /* MMU_RL_TO_PPSCH_CREDIT_RTN_INFO */ "Credit return from RL to Pipe Sch (2 lines per EB)",
    /* MMU_RL_TO_RQE_CREDIT_RTN_INFO */ "Credit return from RL to RQE",
    /* MMU_RQE_CELLQ_FIELD       */ "RQE Cell Queue Memory Fields for each of the 8 cells",
    /* MMU_RQE_INFOTBL_FP_INIT_STATE */ "RQE info table free pool init state encodings",
    /* MMU_RQE_META_DATA_IN      */ "META_DATA_IN Format",
    /* MMU_RQE_META_DATA_OUT     */ "META_DATA_OUT Format",
    /* MMU_RQE_NEW_BM            */ "MMU_RQE_BMP_FMT",
    /* MMU_RQE_PIPE_OUT_DATA     */ "Position and description of bits in the DQS to PIPE_OUT INFO",
    /* MMU_RQE_PKTQ_FIELD        */ "RQE Packet Queue Memory Fields for each of the 8 cells",
    /* MMU_RQE_REPENG_DATA       */ "Data-Bus format for input to metadata_gen",
    /* MMU_RQE_TOQ_DATA          */ "Position and description of bits in the DQS to TOQ INFO",
    /* MMU_RQE_TO_CRB_CELL_INFO  */ "Cell information on replicated packet out to CRB from RQE. There are 4 instances of this interface.\nUp to 4 cells per transfer and max 1 packet per transfer from the RQE to the CRB.\nRQE can be flow controlled by a cell credit mechanism. For every cell transfer, the RQE decrements a credit count and\nget return credits back from the SCB.  Credit count is configurable upon initialization in the RQE\nSent for every cell of packet, at SOP sent at same time as MMU_RQE_TO_CRB_PKT_INFO",
    /* MMU_RQE_TO_CRB_ICC_INFO   */ "When CRB sends MMU_CRB_TO_RQE_PKTHDR_INFO, RQE needs to return an index to where this information\ngot stored in the RQE Info table, CRB sends this index to the downstream pipeline to THDR and SCB\nRQE Initial Copy Count value to be sent with each packet on the CRB to the SCB\n(CT path does not need this). This interface is instantiated 4 times for each input pipe\nThe CRB always sends information to the RQE for SOP and EOP of the packet. RQE sees SOP and source port\ninformation from the CRB for thi ...",
    /* MMU_RQE_TO_CRB_PKT_INFO   */ "Packet information on replicated packet out to CRB from RQE. There is 1 instances of this interface.\nUp to 4 cells per transfer and max 1 packet per transfer from the RQE to the CRB.\nRQE can be flow controlled by a cell credit mechanism. For every cell transfer, the RQE decrements a credit count and\nget return credits back from the SCB.  Credit count is configurable upon initialization in the RQE\nOnly sent once per packet, SOP if multiples",
    /* MMU_RQE_TO_CTR_DATA       */ "MMU_RQE_TO_CTR_DATA",
    /* MMU_RQE_TO_ENQ_DATA       */ "MMU_RQE_TO_ENQ_DATA",
    /* MMU_RQE_TO_EPRG_DATA      */ "MMU_RQE_TO_EPRG_DATA",
    /* MMU_RQE_TO_PORTCNT_DATA   */ "MMU_RQE_TO_PORTCNT_DATA",
    /* MMU_RQE_TO_RL_COPYCNT_INFO */ "Info bus for the copy count information transfers from RQE to RL for each cell.\nThere are 4 instances of this interface.\nUp to 4 cells per transfer and max 1 packet per transfer from the RQE to the RL.\nRQE can be flow controlled by a cell credit mechanism. For every cell transfer, the RQE decrements a cell credit count and\nget return cell credits back from the RL.  Credit count is configurable upon initialization",
    /* MMU_RQE_TO_THDO_ENQCHK_PKT_INFO */ "Packet copy information for output queue threshold check from RQE to THDO",
    /* MMU_RQE_TO_THDR_DATA      */ "MMU_RQE_TO_THDR_DATA",
    /* MMU_RQE_TO_THDR_QUE_RELEASE */ "RQE queue release information from RQE to THDR, only done once per packet and not every cell",
    /* MMU_RQE_WF_DATA           */ "Position and description of bits in the DQS to TOQ INFO",
    /* MMU_SBUS_SB_INFO          */ "Position and description of bits in the sbus input to a module.",
    /* MMU_SCB_SOPSS_DATA        */ "SOP Supplemental Storage Data Format",
    /* MMU_SCB_TO_CRB_CREDIT_RET */ "Cell credit return from SCB to CRB.\nUp to 6 cell credit returns from the SCB to the CRB per clock.",
    /* MMU_SCB_TO_OQS_CELL_INFO  */ "Cell information from SCB to OQS. There are 6 instances of this interface.",
    /* MMU_SCB_TO_RQE_CELL_CREDIT_RTN */ "Cell credit return from SCB to RQE.\nUp to 4 cells per transfer from RQE and max 1 packet per transfer from the RQE to the SCB.\nRQE can be flow controlled by a cell credit mechanism. For every cell transfer, the RQE decrements a credit count and\nget return credits back from the SCB.  Credit count is configurable upon initialization in the RQE\nAll values are valid for every cell even if it is a packet property",
    /* MMU_SCB_TO_RQE_CELL_INFO  */ "Cell information from TOQ/SCB to RQE. There are 6 instances of this interface on TOQ/SCB to RQE.\nWith these 2 interfaces, RQE can receive 12 cells per cycle and up to 12 packets per cycle for SEOP packets.\nRQE can not flow control these interfaces",
    /* MMU_SER_STATUS_BUS        */ "Position and description of bits in the MMU memory SER status bus",
    /* MMU_SHAPE_PASSTHRU_INFO   */ "Fields that MMU needs on SHAPE bus that are passthru in EP",
    /* MMU_THDI_PACKET_TYPE      */ "Packet Type Encodings from THDI.",
    /* MMU_THDI_SPAP             */ "THDI SPAP Encodings.",
    /* MMU_THDI_TO_CRB_ENQ_INFO  */ "Position and description of bits sent from THDI to CRB.",
    /* MMU_THDI_TO_INTFO_OOBFC_INFO */ "Position and description of bits sent from THDI to INTFO for OOBFC.",
    /* MMU_THDI_TO_INTFO_PFC_INFO */ "Position and description of bits sent from THDI to INTFO for PFC.",
    /* MMU_THDI_TO_THDO_LOSSLESS_SP_INFO */ "Position and description of bits sent from THDI to THDO.",
    /* MMU_THDI_TYPE             */ "THDI Type Encodings.",
    /* MMU_THDO_TO_EBCTM_INFO    */ "Position and description of bits in THDO to EBCTM interface",
    /* MMU_THDO_TO_INTFO_FC_INFO */ "Position and description of bits in THDO to INTFO_FC interface",
    /* MMU_THDO_TO_IP_DLB_INFO   */ "Position and description of bits in THDO to IP_DLB interface.",
    /* MMU_THDO_TO_QSCH_VOQ_FAIRNESS_INFO */ "THDO responds to a VOQ fairness request by sending back to QSCH the average arrival rate count, accompanying with the {pipe number, port number, and MMU queue number local to the port} of the queue for reference",
    /* MMU_THDO_TO_RQE_ENQCHK_PKT_INFO */ "Position and description of bits in THDO to RQE ENQCHK_PKT interface",
    /* MMU_THDO_TO_TOQ_ENQCHK_INFO */ "Position and description of bits in THDO to TOQ ENQCHK interface",
    /* MMU_THDO_TO_WRED_ENQ_ACCEPT_INFO */ "Position and description of bits in THDO to WRED_ENQ_ACCEPT interface",
    /* MMU_THDO_TO_WRED_PORTSP_LEN_STATUS_INFO */ "Position and description of bits in THDO_TO_WRED_PORTSP_LEN_STATUS_INFO interface",
    /* MMU_THDO_TO_WRED_QLEN_STATUS_INFO */ "Position and description of bits in THDO_TO_WRED_QLEN_STATUS_INFO interface",
    /* MMU_THDO_TO_WRED_Q_MIN_STATE_INFO */ "Position and description of bits in MMU_THDO_TO_WRED_Q_MIN_STATE_INFO interface",
    /* MMU_THDO_TO_WRED_SP_LEN_STATUS_INFO */ "Position and description of bits in THDO_TO_WRED_PORTSP_LEN_STATUS_INFO interface",
    /* MMU_THDR_TO_CRB_ACCEPT_INFO */ "Multicast packet thresholding checking result from THDR to CRB, for every EOP of SAF packet and every CT cell.\nTHDR has 4 instances of this interface, one for every input pipe.",
    /* MMU_THDR_TO_INTFO_DROP_STATUS */ "RQE Replication Fifo service pool congestion status, this is used for OOBFC message generation",
    /* MMU_THDR_TO_RQE_ACCEPT_INFO */ "Multicast packet thresholding checking result from THDR to RQE, for every EOP of SAF packet and every SOP of CT packet.\nTHDR also needs to stage RQE INFO Index received from CRB and send it to RQE with an accept decision.\nTHDR has 4 instances of this interface, one for every input pipe.",
    /* MMU_THDR_TO_THDI_ACCEPT_INFO */ "Multicast packet thresholding checking result from THDR to THDI, for every EOP of SAF packet and every CT cell.\nTHDR has 4 instances of this interface, one for every input pipe.",
    /* MMU_TOQ_CQE               */ "CQE info Details",
    /* MMU_TOQ_EOPE_TBL          */ "TOQ EOPE Database, overlayed on MEM0 : Holds EOPE state for external buffer usage tracking. CPU read only",
    /* MMU_TOQ_TO_CFAP_ENQRETURN_INFO */ "Bus information TOQ2CFAP",
    /* MMU_TOQ_TO_MTRO_DEQ_RESP_INFO */ "TOQ dequeue information to QSCH and MTRO, two dequeues per cycles",
    /* MMU_TOQ_TO_QSCH_DEQ_RESP_INFO */ "TOQ dequeue information to QSCH and MTRO, two dequeues per cycles",
    /* MMU_TOQ_TO_QSCH_UPDATE_INFO */ "TOQ to QSCH enqueue or dequeue update information for a queue",
    /* MMU_TOQ_TO_RL_INFO        */ "",
    /* MMU_TOQ_TO_RQE_CELL_INFO  */ "Cell information from TOQ/SCB to RQE. There are 6 instances of this interface on TOQ/SCB to RQE.\nWith these 2 interfaces, RQE can receive 12 cells per cycle and up to 12 packets per cycle for SEOP packets.\nRQE can not flow control these interfaces",
    /* MMU_TOQ_TO_THDO_DEQ_INFO  */ "",
    /* MMU_TOQ_TO_THDO_ENQCHK_INFO */ "",
    /* MMU_TOQ_TO_WRED_DEQ_INFO  */ "",
    /* MMU_TO_IP_HOL_COS         */ "MMU-INTF to IP HOL status COS",
    /* MMU_TO_IP_HOL_STATUS      */ "MMU-INTF to IP HOL status report",
    /* MMU_TO_IP_HOL_STATUS_EXT8 */ "MMU-INTF to IP HOL extended status report for COS_8 to COS_15",
    /* MMU_TO_IP_HOL_STATUS_EXT16 */ "MMU-INTF to IP HOL extended status report for COS_16 to COS_23",
    /* MMU_TO_IP_IBP_PRI         */ "MMU-INTF to IP IBP status priority",
    /* MMU_TO_IP_IBP_STATUS      */ "MMU-INTF to IP IBP status report",
    /* MMU_TO_IP_OAM_LM_BUS      */ "Description of fields on the MMU_TO_IP_OAM_LM_BUS Bus from MMU to IP.",
    /* MMU_TO_MFT_INFO           */ "MMU to MFT bus format.",
    /* MMU_TO_XGP_BKP            */ "MMU-INTF to XGP back-pressure (BKP) status",
    /* MMU_TO_XGP_E2E_BUS        */ "MMU-INTF to XGP E2E data bus",
    /* MMU_TO_XP_E2E_BUS         */ "MMU-INTF to XP E2E data bus",
    /* MMU_TO_XQP_E2E_BUS        */ "MMU-INTF to XQP E2E data bus",
    /* MMU_WRED_TO_THDO_ENQ_ACCEPT_INFO */ "Position and description of bits in THDO to INTFO_FC interface",
    /* MMU_WRED_TO_TOQ_DEQ_FEEDBACK */ "Position and description of bits in WRED to TOQ DEQ FEEDBACK interface",
    /* MMU_XQHEADER              */ "Position and description of bits in XQ Entry",
    /* MMU_XQ_HDR_ONLY_CPU       */ "Position and description of bits in XQ write Header",
    /* MMU_XQ_HDR_ONLY_GPORT     */ "Position and description of bits in XQ write Header",
    /* MMU_XQ_HDR_ONLY_XPORT     */ "Position and description of bits in XQ write Header",
    /* MODULE_HEADER             */ "Bit Definitions of the Internal Module Header",
    /* MODULE_HEADER_SHIFT       */ "HG+ format shifted by 32",
    /* MPB                       */ "Position and description of bits in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_BASE_FORWARD_FORMAT   */ "Base Forwarding Format in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_BROADSCAN_HDR_FORMAT  */ "Position and description of bits in MPB_BROADSCAN_HDR_FORMAT",
    /* MPB_CLASSID_FORMAT        */ "CLASSID FORMAT in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_COPY_TO_CPU_FORMAT    */ "COPY_TO_CPU FORMAT in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_ENTROPY_FORMAT        */ "ENTROPY FORMAT in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_FORWARD_EXT_FORMAT    */ "Forwarding Extension Format in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_FP_HGPRXY_DATA_DECODER_OUT_BUS */ "Data Decoder Output Bus generic format",
    /* MPB_HG2_EXT_FORMAT        */ "Reserved, HG2_EXT FORMAT in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_HIGIG_DATA_DECODER_OUT_BUS */ "Data Decoder Output Bus generic format",
    /* MPB_ING_EDIT_EXTRACT_CTRL_ID_FORMAT */ "INGRESS_EDIT_CONTROL_ID and EXTRACTION_CTRL_ID FORMAT in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_L2_ETAG_FORMAT        */ "Flexible Action Bitmap in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_L2_EXT_FORMAT         */ "Flexible Action Bitmap in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_L2_ITAG_FORMAT        */ "Flexible Action Bitmap in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_L2_SVP_FORMAT         */ "SVP FORMAT in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_L2_VFI_FORMAT         */ "VFI FORMAT in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_L3_IIF_FORMAT         */ "L3_IIF FORMAT in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_L3_VRF_FORMAT         */ "VRF FORMAT in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_MIRROR_FORMAT         */ "MIRROR_FORMAT in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_NAT_FORMAT            */ "NAT FORMAT in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_NEXT_HOP_DATA_FORMAT  */ "NEXT_HOP_DATA format in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_OPAQUE_OBJECT_FORMAT  */ "OPAQUE_OBJECT FORMAT for 1 object in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_QOS_FORMAT            */ "QOS FORMAT in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_QUEUE_TAG_FORMAT      */ "QUEUE_TAG FORMAT in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPB_TIMESTAMP_FORMAT      */ "TIMESTAMP FORMAT in MMU Passthru Bus (carried from Ip to EP thru MMU).",
    /* MPLS_ACTION               */ "PDD Output Bus generic format",
    /* MPLS_ACTION_SET           */ "PDD Output Bus generic format",
    /* MPLS_CONTROL_SIGNALS_DOP  */ "MPLS_CONTROL_SIGNALS_DOP DOP description.",
    /* MPLS_CW_ACTION_SET        */ "PDD Output Bus generic format",
    /* MPLS_DROP                 */ "Bit Definitions of the MPLS drop vector",
    /* MPLS_ENTRY_1_DATA         */ "Format for MPLS_ENTRY_1 DATA.",
    /* MPLS_ENTRY_2_DATA         */ "Format for MPLS_ENTRY_2 DATA.",
    /* MPLS_ENTRY_ACTION_SET     */ "PDD Output Bus generic format",
    /* MPLS_ENTRY_COV_DEFS       */ "defines for MPLS_ENTRY coverage analysis. Port A is packet read access only. Port B is used for both packet read access and sbus read/write",
    /* MPLS_ENTRY_KEY            */ "Format for MPLS_ENTRY_1, MPLS_ENTRY_2 KEY.",
    /* MPLS_HDR                  */ "MPLS header specification",
    /* MPLS_PW_TERM_CTR_ACTION_SET */ "PDD Output Bus generic format",
    /* MPLS_RESERVED_LABEL       */ "Reserved MPLS labels.",
    /* MS8_IS_OCF_BANK           */ "ISEC OCF bank format",
    /* MS8_RCHK_SA_TBL           */ "Replay Check Duplicate SA table copy",
    /* MSBUS_32                  */ "Position and description of bits in the 32-bit MS-Bus",
    /* MSBUS_96                  */ "Position and description of bits in the 96-bit MS-Bus",
    /* MSBUS_128                 */ "Position and description of bits in the 128-bit MS-Bus",
    /* MSBUS_160                 */ "Position and description of bits in the 160-bit MS-Bus",
    /* MSBUS_192                 */ "Position and description of bits in the 192-bit MS-Bus",
    /* MSBUS_256                 */ "Position and description of bits in the 256-bit MS-Bus",
    /* MSBUS_288                 */ "Position and description of bits in the 256-bit MS-Bus",
    /* MSBUS_448                 */ "Position and description of bits in the 448-bit MS-Bus",
    /* MSBUS_508                 */ "Position and description of bits in the 448-bit MS-Bus",
    /* MSBUS_96_REDUCED          */ "Position and description of bits in the 36-bit MS-Bus, used by THDI",
    /* MS_TO_IARB_IF             */ "ISEC to IARB with Overlay Fields Specified",
    /* MS_TO_PE_IF               */ "MACSEC to PREENQUEUE PIPELINE Control Word Format",
    /* MTRO_BUCKET_RF_FIELDS     */ "Position and description of bits in the MTRO register file",
    /* MTRO_CONFIG_RF_FIELDS     */ "Position and description of bits in the MTRO register file",
    /* MTRO_CPU_METER_RF_FIELDS  */ "Position and description of bits in MTRO Packet Meter register file",
    /* MTRO_PD_FIELDS            */ "Position and description of bits in MTRO register file",
    /* MTRO_PKT_METER_RF_FIELDS  */ "Position and description of bits in MTRO Packet Meter register file",
    /* MTRO_RF_FIELDS            */ "Position and description of bits in the MTRO register file",
    /* MTU_CONTROLS_ACTION_SET   */ "PDD Output Bus generic format",
    /* MXE_TABLE_KEY             */ "",
    /* MY_STATION_DATA_FORMAT    */ "format for MY_STATION data",
    /* MY_STATION_TCAM_FORMAT    */ "format for MY_STATION TCAM",
    /* MY_STATION_TCAM_VAL_DOP   */ "MY_STATION_TCAM_VAL_DOP DOP description.",
    /* NAT_ACTION_SET            */ "PDD Output Bus generic format",
    /* NAT_CPU_OPCODE_ENCODING   */ "Bit Definitions of the NAT CPU Opcode encoding",
    /* NETWORK_HVE_OUTPUT_BUS    */ "NETWORK HVE (header verfication engine) output bus format.",
    /* NETWORK_HVE_TRIGGERS_FORMAT */ "NETWORK HVE (header verfication engine) trigger format for HVE1/2.",
    /* NEXT_PTR_ACTION_SET       */ "PDD Output Bus generic format",
    /* NIV_CPU_OPCODE_ENCODING   */ "Bit Definitions of the NIV CPU Opcode encoding",
    /* NLF_CPU_OPCODES           */ "Bit Definitions of the CPU Opcodes",
    /* NUM_QCN_CNM_RECEIVED_COV_DEFS */ "defines for num_qcn_cnm_received coverage analysis",
    /* NVOQFC_DATA               */ "Width of one NVOQFC data.",
    /* OAM_LM_COUNTERS_COV_DEFS  */ "defines for pw_term_seq_num coverage analysis",
    /* OAM_LPR_CNTR_ACTION_BUS   */ "",
    /* OAM_LPR_INTF_CONTROL_INFO */ "",
    /* OAM_LPR_INTF_LOOKUP_CNTR_DATA */ "",
    /* OAM_LPR_INTF_LOOKUP_DATA  */ "Lookup result of MP group table",
    /* OAM_LPR_IN_BUS            */ "Input bus to module containing all packet attributes.",
    /* OAM_LPR_KEY               */ "key: .Matching Key = {SVID[11:0], CVID[11:0], GLP[15:0], KEY_TYPE[3:0]}\nHashing Key  = {SVID[11:0], CVID[11:0], GLP[15:0], KEY_TYPE[3:0]}\nWhen scope of MPLS Label is per-platform, then a fixed SGLP (ex. 0xFFFF) should be used instead of actual SGLP for lookup Key.",
    /* OAM_LPR_KEY_TYPE          */ "OAM KEY Type",
    /* OAM_LPR_KEY_TYPE_SRC      */ "key_types and valid from various source tables",
    /* OAM_LPR_KEY_TYPE_SRC_ATR  */ "Encoding for KEY_TYPE_SRC_ATR",
    /* OAM_LPR_KEY_TYPE_SRC_BUS  */ "key_types and valid from various source tables",
    /* OAM_LPR_OAM_ACTION        */ "bus is used between different process_intf_lookup_results module",
    /* OAM_LPR_OAM_DROP_VECTOR   */ "OAM_DROP_VECTOR connection for Ingress and Egress(defined as overlay)",
    /* OAM_LPR_OAM_PKT_INFO_BUS  */ "",
    /* OAM_LPR_OUT_BUS           */ "All packet related output signals",
    /* OAM_LPR_PAR_ERR_INTR      */ "bus is used for parity error interrupts generated in OAM LPR block",
    /* OAM_LPR_PKT_AND_CTRL_BUS  */ "Various packet and control fields",
    /* OAM_LPR_PKT_INFO          */ "used to pass packet's relevant information to process_intf_lookup_results module",
    /* OAM_LPR_S_INTF_PASSIVE_DROP_VECTOR */ "S_INTF_PASSIVE_DROP_VECTOR connection for Ingress and Egress(defined as overlay)",
    /* OAM_OPCODE                */ "OpCodes indicate the OAM message type, Continuity Check, Loopback, etc.  OpCodes 0 - 31 are assigned by IEEE 802.1. Continuity Check, Loopback, and Link Trace use OpCodes in this range, and the OpCode assignments are the same for Y.1711 and 802.1ag",
    /* OAM_TLV_DATA              */ "TLVs are type, length, and value, encoded parameters that are included in the OAM message body. For each TLV, there is a one octet type field, followed by a two octet length field and an N octet value field. The End TLV has a Type field equal to 0 and the Length and Value fields are not used.",
    /* OAM_TLV_TYPE              */ "TLVs are type, length, and value, encoded parameters that are included in the OAM message body. For each TLV, there is a one octet type field, followed by a two octet length field and an N octet value field. The End TLV has a Type field equal to 0 and the Length and Value fields are not used.",
    /* OLP_RX_HEADER             */ "Bit Definitions of OLP_RX_HEADER. This header is constructed when a OAM/BHH/BFD pdu is transmitted TO the OLP.",
    /* OLP_TX_HEADER             */ "Bit Definitions of OLP_TX_HEADER. This header is always constructed by OLP device when an OAM/BHH/BFD PDU is transmitted to the KT2.",
    /* OPAQUE_FIELDS_DOP         */ "OPAQUE_FIELDS_DOP DOP description.",
    /* OPAQUE_OBJECT_ID_AND_VALUE_FORMAT */ "OPAQUE OBJECT ID and VALUE.",
    /* OQS_EXEC_CTRL_INFO        */ "",
    /* OQS_TRANSFER_CTRL_INFO    */ "",
    /* OTAG_ACTION_SET           */ "PDD Output Bus generic format",
    /* OTP_FORMAT                */ "OTP Field format",
    /* OVLAN_ACTION_SET          */ "PDD Output Bus generic format",
    /* OVQ_TO_TOQ_INFO           */ "Position and description of bits in the OVQ to TOQ to INFO bus",
    /* PACKED_SOBMH              */ "This is the packed SOBMH usd internally after the overlay bus is not needed anymore.",
    /* PBE                       */ "Position and description of bits in PBI Bus From Ingress pipeline to MMU",
    /* PBE_POINTERS              */ "PBE Pointers.",
    /* PBI                       */ "Position and description of bits in PBI Bus From Ingress pipeline to MMU",
    /* PDD_IN_BUS                */ "PDD Input Bus generic format",
    /* PDD_OUT_BUS               */ "PDD Output Bus generic format",
    /* PD_TO_MS_IF               */ "Position and description of bits in EP_TO_MS_CONTROL_WORD",
    /* PD_TO_PORT_IF             */ "PD to PORT Interface",
    /* PE_DROP                   */ "Bit Definitions of the pre-enqueue pipeline drop vector",
    /* PFAP_S_RF                 */ "pfap memory s_rf width",
    /* PGW_OBM_DATA              */ "OBM Buffer data format",
    /* PG_TO_IP_CONTROL_WORD     */ "Port Group to IP Control Word",
    /* PHB2_COS_MAP_INDEX        */ "PHB2_COS_MAP index",
    /* PHB_MAPPING_TBL_INDEX     */ "PHB_MAPPING_TBL index",
    /* PIM_BIDIR_ACTION_SET      */ "PDD Output Bus generic format",
    /* PIM_SM_ACTION_SET         */ "PDD Output Bus generic format",
    /* PIPE_DATA_OUT_INFO        */ "PIPE_DATA_OUT_INFO",
    /* PKTHDR0_MEM0_S_RF         */ "pkthdr0 memory s_rf width",
    /* PKTHDR0_MEM1_S_RF         */ "pkthdr0 memory s_rf width",
    /* PKTHDR0_MEM2_S_RF         */ "pkthdr0 memory s_rf width",
    /* PKTHDR0_MEM3_S_RF         */ "pkthdr0 memory s_rf width",
    /* PKTHDR0_S_RF              */ "pkthdr0 memory s_rf width",
    /* PKTHDR1_S_RF              */ "pkthdr1 memory s_rf width",
    /* PKTHDR2_S_RF              */ "pkthdr2 memory s_rf width",
    /* PKTHDR_CPU0_S_RF          */ "pkthdr_cpu memory s_rf width",
    /* PKTHDR_CPU1_S_RF          */ "pkthdr_cpu memory s_rf width",
    /* PKTHDR_CPU_S_RF           */ "pkthdr_cpu memory s_rf width",
    /* PKTHDR_EXT_S_RF           */ "pkthdr ext memory s_rf width",
    /* PKTLENGTH_S_RF            */ "packet length memory s_rf width",
    /* PKTLINK54_S_RF            */ "pktlink 54 memory s_rf width",
    /* PKTLINK_S_RF              */ "pktlink memory s_rf width",
    /* PKT_ECN_TO_INT_CN_MAPPING_INDEX */ "PACKET_ECN_TO_INT_CN_MAPPING index",
    /* PKT_FLOW_ID_0_FORMAT      */ "Packet Flow ID 0 Format.",
    /* PKT_FLOW_ID_1_FORMAT      */ "Packet Flow ID 1 Format.",
    /* PKT_FLOW_ID_2_FORMAT      */ "Packet Flow ID 2 Format.",
    /* PKT_FLOW_SELECT_CTRL_ID_1_FORMAT */ "Packet Flow Select Control ID 1 Format.",
    /* PKT_FLOW_SELECT_TCAM_0_DOP */ "PKT_FLOW_SELECT_TCAM_0_DOP DOP description.",
    /* PKT_FLOW_SELECT_TCAM_1_DOP_DOP */ "PKT_FLOW_SELECT_TCAM_1_DOP_DOP DOP description.",
    /* PKT_FLOW_SELECT_TCAM_1_MY_STATION_2_DOP */ "PKT_FLOW_SELECT_TCAM_1_MY_STATION_2_DOP DOP description.",
    /* PKT_FORWARDING_TYPE       */ "Forwarding Type of Packet",
    /* PKT_PROC_DROP_VECTOR      */ "Ifp Drop Vector",
    /* PM_TO_EDB_TO_PM_PORT_MODE */ "Port Mode from PM to EDB.",
    /* PORT_AVG_QUALITY_MEASURE_COV_DEFS */ "defines for port_avg_quality_measure coverage analysis",
    /* PORT_DEMAND_STATE         */ "Port demand state serial bus from MMU/TDM to EP/EDB",
    /* PORT_FC_BEAT_1            */ "E2E Message Control Word Beat 1",
    /* PORT_FC_BEAT_2            */ "E2E Message Control Word Beat 2",
    /* PORT_FC_MSGTYPE           */ "E2E Message Control Word Message Type",
    /* PORT_META_DATA_IN_INFO    */ "PORT_META_DATA_IN_INFO",
    /* PORT_META_DATA_OUT_INFO   */ "PORT_META_DATA_IN_INFO",
    /* PORT_TO_IP_CONTROL_WORD   */ "GPORT/XPORT to IP Control Word Format",
    /* PORT_TO_PE_IF             */ "PORT to PE Interface",
    /* PORT_WRED_CELL_THD_0_FIELDS */ "Position and description of bits in PORT WRED CELL Threshold Green & Yellow\nMemory",
    /* PORT_WRED_CELL_THD_1_FIELDS */ "Position and description of bits in PORT WRED CELL Threshold Red & non-tcp\nMemory",
    /* PORT_WRED_CFG_CELL_FIELDS */ "Position and description of bits in Port WRED Average QSize and Config\nRegisters for Cell\nWhen do register read/write test to this register,\nplease DO reset\n    MISCCONFIG.REFRESH_EN = 0\n    MISCCONFIG.PARITY_GEN_EN = 0\n    MISCCONFIG.PARITY_CHK_EN = 0\nThis is to prevent data being overwrite by internal refresh\nprocess.",
    /* PORT_WRED_CFG_PACKET_FIELDS */ "Position and description of bits in Port WRED Average QSize and Config\nRegisters for Packet\nWhen do register read/write test to this register,\nplease DO reset\n    MISCCONFIG.REFRESH_EN = 0\n    MISCCONFIG.PARITY_GEN_EN = 0\n    MISCCONFIG.PARITY_CHK_EN = 0\nThis is to prevent data being overwrite by internal refresh\nprocess.",
    /* PORT_WRED_PACKET_THD_0_FIELDS */ "Position and description of bits in PORT WRED PACKET Threshold Green & Yellow\nMemory",
    /* PORT_WRED_PACKET_THD_1_FIELDS */ "Position and description of bits in PORT_WRED PACKET Threshold Red & non-tcp\nMemory",
    /* PPD3_DATA_CONTAINER       */ "PPD3 data container",
    /* PQE_REG_DATA              */ "purge queue register data width",
    /* PQE_S_RF                  */ "purge queue memory s_rf width",
    /* PQE_TO_E2EFC_INFO_BUS     */ "Position and description of bits in the PQE to E2EFC INFO bus",
    /* PQE_TO_THDI_INFO          */ "Position and description of bits in the PQE to THDO INFO bus",
    /* PQE_TO_THDO4_INFO         */ "Position and description of bits in the PQE to THDO INFO bus",
    /* PQE_TO_THDO_INFO          */ "Position and description of bits in the PQE to THDO INFO bus",
    /* PRE_COUNTER_UPDATE_VECTOR */ "Bit Definitions of the Pre counter update vector.",
    /* PROTECTION_ACTION_SET     */ "PDD Output Bus generic format",
    /* PROTECTION_GROUP_ACTION_SET */ "PDD Output Bus generic format",
    /* PROTECTION_NHI_ACTION_SET */ "PDD Output Bus generic format",
    /* PTP_1588_SIGNALS_TO_PM    */ "Passthrough signals from EP to PM through EDB.",
    /* PTP_HDR                   */ "1588 PTP header first 16B field define",
    /* PWCW_HDR                  */ "Pseudowire Control Word and ACH header specification",
    /* QCN_DESCP_INFO            */ "Position and description of bits in the QCN Descriptor",
    /* QCN_TO_TOQ_INFO           */ "Position and description of bits in the TOQ to QCN INFO bus",
    /* QGPORT_TO_IP_CONTROL_WORD */ "GPORT/XPORT to IP Control Word Format",
    /* QID_ENQ_RQE_STORE_INFO    */ "Position and description of bits",
    /* QOS_ACTION_SET            */ "PDD Output Bus generic format",
    /* QOS_A_ACTION_SET          */ "PDD Output Bus generic format",
    /* QOS_B_ACTION_SET          */ "PDD Output Bus generic format",
    /* QTAG_ACTION_SET           */ "PDD Output Bus generic format",
    /* RDBGC_TRIGGERS            */ "Bit Definitions of the counter vector (used by RDBGC[0-8]_SELECT registers)",
    /* RDEHDR_S_RF               */ "rdeheader memory s_rf width",
    /* RDE_ADM_TO_TXQ_INFO       */ "",
    /* RDE_COSPCP_S_RF           */ "rde cospcp table memory s_rf width",
    /* RDE_DESCP_S_RF            */ "rde descp memory s_rf width",
    /* RDE_FIFO_TO_ADM_REAL_PIPE_INFO */ "Send DEQ_REAL_CELL_FIFO and EP_TO_MMU_REDIRECTION_BUS (non-paasthru) data",
    /* RDE_FIFO_TO_ADM_REL_PIPE_INFO */ "",
    /* RDE_FLST_S_RF             */ "rde free list memory s_rf width",
    /* RDE_HEADER_INFO           */ "Position and description of bits in the REDIRECT HEADER",
    /* RDE_PLNK_S_RF             */ "rde pkt link memory s_rf width",
    /* RDE_PRCP_S_RF             */ "rde prcp memory s_rf width",
    /* RDE_TO_CCP_INFO           */ "RDE to DEQ  info bus",
    /* RDE_TO_DEQ_INFO           */ "RDE to DEQ  info bus",
    /* RDE_TO_THDO_RDEE_INFO     */ "RDE to THDO RDEE Enqueue Bus",
    /* RDE_TO_THDO_RDEE_REL_INFO */ "RDE to THDO RDEE Enqueue Bus",
    /* RDE_TO_THDO_RDEI_INFO     */ "RDE to THDO RDEI Enqueue Bus",
    /* RDE_TO_THDO_RDEI_REL_INFO */ "RDE to THDO RDEI Enqueue Bus",
    /* RDE_TO_THDO_RDEQ_DEQ_INFO */ "RDE to THDO RDEQ Dequeue  Bus",
    /* RDE_TO_THDO_RDEQ_INFO     */ "RDE to THDO RDEQ Enqueue Bus",
    /* RDE_TO_TOQ_FIFO_MEM       */ "RDE to TOQ 2 ENQ to 1 ENQ conversion FIFO.",
    /* RDE_TO_TOQ_INFO           */ "Position and description of bits in the REDIRECT to TOQ bus",
    /* RDE_TXQ_WR_FIFO_INFO      */ "RQE QMGR WR_FIFO data format",
    /* REDIRECT_TO_CCP_INFO      */ "Position and description of bits in the REDIRECT to CCP INFO bus",
    /* REDIRECT_TO_THDI_INFO     */ "Position and description of bits in the REDIRECT to THDI INFO bus",
    /* REDIRECT_TO_THDO3_INFO    */ "Position and description of bits in the REDIRECT to THDO INFO bus",
    /* REDIRECT_TO_THDO_INFO     */ "Position and description of bits in the REDIRECT to THDO INFO bus",
    /* REFRESH_BITMAP            */ "Ingress Pipeline Resource Control Bus.",
    /* REGADDR                   */ "Register Address Format.",
    /* REMAP_TABLE               */ "Remapping table (key+1).",
    /* REMAP_TABLE_ECC           */ "Remapping table (key+1).",
    /* REQ_BUS_CP                */ "Requst Bus for CB.",
    /* REQ_BUS_EXT_AD            */ "ESMIF Request.",
    /* REQ_BUS_HITBIT            */ "HITBIT Update Request Interface.",
    /* REQ_BUS_MAC_LIMIT         */ "Mac Limit Request for SOPs.",
    /* REQ_BUS_MAC_LIMIT_CP      */ "Requst Bus for Mac Limit Resource Block.",
    /* REQ_BUS_MOD_FIFO_CP       */ "Requst Bus for Mac Limit Resource Block.",
    /* REQ_BUS_PIPE_TBL0         */ "Key Search Requst Bus for TBL0 (Ivxlt VLAN_XLATE request).",
    /* REQ_BUS_PIPE_TBL1         */ "Key Search Requst Bus for TBL1 (Il2lu request).",
    /* REQ_BUS_PIPE_TBL2         */ "Key Search Requst Bus for TBL2 (Il3lu request).",
    /* REQ_BUS_PIPE_TBL3         */ "Key Search Requst Bus for TBL3 (Evxlt request).",
    /* REQ_BUS_PIPE_TBL4         */ "Key Search Requst Bus for TBL4 (Ivxlt MPLS_ENTRY request).",
    /* REQ_BUS_PIPE_TBL2_LOGICAL */ "Key Search Requst Bus for TBL2 (Il3lu request), logical view for Arch. RTL does not use this format.",
    /* REQ_DATA_EXT_AD_CP        */ "ETU Control Plane Request. This is a 35-bit bus (req_data_ext_ad_cp), multi-clock pulse req_ext_ad_cp controls number of beats. Bits 34:0 are sent first, followed by bits 69:35, etc.",
    /* REQ_DATA_EXT_L2           */ "ETU External L2 Interface. This is a 35-bit bus (req_data_ext_l2), multi-clock pulse req_ext_l2 controls number of beats. Bits 34:0 are sent first, followed by bits 69:35, etc.",
    /* RESPONSIVE_PROTOCOL_MATCH_INDEX */ "RESPONSIVE_PROTOCOL_MATCH index",
    /* RIL_TO_DQS_INFO           */ "Position and description of bits in the RIL to DQS INFO",
    /* RMEP_COV_DEFS             */ "defines for flex_ctr coverage analysis",
    /* RQE_QCON_FIFO_INFO        */ "RQE QCON FIFO",
    /* RQE_QID_TO_QCONFLICT_PKT_INFO_LANE */ "Packet details from QID to QCONFLICT in RQE",
    /* RQE_QID_TO_QCONFLICT_PKT_INFO_SHARED */ "Packet details from QID to QCONFLICT in RQE",
    /* RQE_QMGR_TO_QID_PKT_INFO  */ "Packet details from QMGR to QID in RQE",
    /* RQE_QMGR_WR_FIFO_INFO     */ "RQE QMGR WR_FIFO data format",
    /* RQE_TO_E2EFC_QEN_INFO     */ "RQE to E2EFC.QENTRY interface format",
    /* RQE_TO_E2EFC_RQE_INFO     */ "RQE to E2EFC.RQE interface format",
    /* RQE_TO_THDIQEN_INFO       */ "RQE to THDI.QENTRY interface format",
    /* RQE_TO_THDIRQE_INFO       */ "RQE to THDI.RQE interface format",
    /* RQE_TO_THDM               */ "RQE to THDM interface definition.",
    /* RQE_TO_THDO_DEQ_INFO      */ "Cell dequeue info from RQE to THDO",
    /* RQE_TO_THDO_INFO          */ "RQE to THDO interface format",
    /* RQE_TO_THDO_LANE_INFO     */ "RQE to THDO per lane signals",
    /* RQE_TO_THDO_RDEE_INFO     */ "RQE to THDO RDEE Dequeue  Bus",
    /* RQE_TO_THDO_RDEI_INFO     */ "RQE to THDO RDEI Dequeue  Bus",
    /* RQE_TO_THDO_REPL_INFO     */ "MC packet info from RQE to THDO",
    /* RQE_TO_THDO_RQEE_DEQ_INFO */ "Cell dequeue info from RQE to THDO RQEE",
    /* RQE_TO_THDO_RQEE_INFO     */ "Cell dequeue info from RQE to THDO RQEE",
    /* RQE_TO_THDO_RQEI_DEQ_INFO */ "Cell dequeue info from RQE to THDO RQEI",
    /* RQE_TO_THDO_RQEI_INFO     */ "Cell dequeue info from RQE to THDO RQEI",
    /* RQE_TO_THDO_RQEQ_INFO     */ "Cell dequeue info from RQE to THDO RQEI",
    /* RQE_TO_THDO_UC_ENQ_INFO   */ "Unicast ENQ signals from RQE to THDO",
    /* RQE_TO_TOQ_PKT_INFO       */ "Packet details from RQE to TOQ",
    /* RQE_TO_WRED_LANE_INFO     */ "RQE to WRED ENQ info",
    /* RQE_WF_ENTRY_INFO         */ "RQE_WF_ENTRY_INFO",
    /* RSEL1_0_DOP               */ "RSEL1_0_DOP DOP description.",
    /* RSEL1_1_DOP               */ "RSEL1_1_DOP DOP description.",
    /* RSEL1_2_DOP               */ "RSEL1_2_DOP DOP description.",
    /* RSEL1_3_DOP               */ "RSEL1_3_DOP DOP description.",
    /* RSEL1_FIRST_DVP_NHI_DOP   */ "RSEL1_FIRST_DVP_NHI_DOP DOP description.",
    /* RSEL1_FIRST_ECMP_DOP      */ "RSEL1_FIRST_ECMP_DOP DOP description.",
    /* RSEL1_SECOND_DVP_NHI_DOP  */ "RSEL1_SECOND_DVP_NHI_DOP DOP description.",
    /* RSEL1_SECOND_ECMP_DOP     */ "RSEL1_SECOND_ECMP_DOP DOP description.",
    /* RSEL2_0_DOP               */ "RSEL2_0_DOP DOP description.",
    /* RSEL2_1_DOP               */ "RSEL2_1_DOP DOP description.",
    /* RSEL2_2_DOP               */ "RSEL2_2_DOP DOP description.",
    /* RSEL2_3_DOP               */ "RSEL2_3_DOP DOP description.",
    /* RSEL2_DROP_VECTOR         */ "Bit Definitions of the RSEL2 drop vector.",
    /* RSEL2_FIRST_DVP_NHI_DOP   */ "RSEL2_FIRST_DVP_NHI_DOP DOP description.",
    /* RSEL2_FIRST_ECMP_DOP      */ "RSEL2_FIRST_ECMP_DOP DOP description.",
    /* RSEL2_SECOND_DVP_NHI_DOP  */ "RSEL2_SECOND_DVP_NHI_DOP DOP description.",
    /* RSEL2_SECOND_ECMP_DOP     */ "RSEL2_SECOND_ECMP_DOP DOP description.",
    /* RSEL_DROP_VECTOR          */ "Bit Definitions of the RSEL drop vector.",
    /* RSP_WORD                  */ "ALWAYS sent as 32 lsbs for sbus_req: INSERT, DELETE, LOOKUP.",
    /* RSP_WORD_0                */ "ALWAYS sent as 32 lsbs for all entries in EXT_L2_MOD_FIFO and\n for sbus_req: INSERT, DELETE, LOOKUP.\n Sent for READ, WRITE sbus_req ONLY for off-chip tables",
    /* RSP_WORD_1                */ "Response word 1, additional information about failures is encoded here",
    /* RSP_WORD_2                */ "Response word 2, additional information about failures is encoded here",
    /* RTAG7_HASH_VALUES_DOP     */ "RTAG7_HASH_VALUES_DOP DOP description.",
    /* RTS_INTERRUPTS            */ "iProc interrups",
    /* RXDP_ASM                  */ "IL-LA MAC RX LBUS interface",
    /* RXDP_LBUS                 */ "IL-LA MAC RX LBUS interface",
    /* RXDP_RSP_CW_FMT           */ "Control signals for ILA-MAC RX LBUS",
    /* RXLP_DEBUG_TRIGGERS       */ "Events counted on per-stream basis",
    /* S0                        */ "Phase 0 of S-bus message",
    /* SBUSDMA_ERROR_VEC         */ "Error_vec indication in CMIC SBUSDMA operation",
    /* SBUS_TCAM_LOOKUP_RSP_WORD */ "SBUS TCAM LOOKUP Response word",
    /* SD_TAG_ACTION_SET         */ "PDD Output Bus generic format",
    /* SD_TAG_DATA_FORMAT        */ "Define data fields for SD_TAG",
    /* SD_TAG_DATA_FORMAT_DOUBLE */ "Define data fields for SD_TAG",
    /* SEQUENCE_NUMBER_ACTION_SET */ "PDD Output Bus generic format",
    /* SER_STATUS_BUS            */ "SER Status Bus Format.",
    /* SFLOW_ING_DATA_SOURCE_COV_DEFS */ "defines for sflow_ing_data_source coverage analysis",
    /* SFLOW_ING_FLEX_DATA_SOURCE_COV_DEFS */ "defines for sflow_ing_flex_data_source coverage analysis",
    /* SGLP_ACTION_SET           */ "PDD Output Bus generic format",
    /* SGPP_SUBPORT_ID_SGPP_MAP_DOP */ "SGPP_SUBPORT_ID_SGPP_MAP_DOP DOP description.",
    /* SHARED_BANKS_CONTROL      */ "UFT or UAT Banks Hash Control.",
    /* SM_RES_HDR                */ "Signature match engine results header",
    /* SNAP_HDR                  */ "8B SNAP-LLC header specification",
    /* SNAT_NAT_INDICES_DOP      */ "SNAT_NAT_INDICES_DOP DOP description.",
    /* SOBMH                     */ "Bit Definitions of the Internal Stream of Bytes Module Header",
    /* SOP_CONTROL               */ "SOP_CONTROL, formed by ENQ from MPB fields and written with payload to CBP",
    /* SOP_CONTROL_1             */ "SOP_CONTROL_1, formed by ENQ from MPB fields and written with payload to CBP",
    /* SPECIAL_LABEL_PUSH_TYPE_FORMAT */ "MPLS special label format",
    /* SS_BANK_WR_INTF           */ "This is the WR interface for BANK's PORT B .",
    /* SS_BASE_VALID_OUT         */ "Format used to align a raw key to base_0_key, base_1_key, base_2_key and base_3_key.",
    /* SS_ECC_ENTRY_BUS          */ "Format used to align a raw key to base_0_key, base_1_key, base_2_key and base_3_key.",
    /* SS_LOGICAL_BKT_IDX_BUS    */ "Format used to align a raw key to base_0_key, base_1_key, base_2_key and base_3_key.",
    /* SS_REQ_BUS                */ "Search Stage Request Bus.",
    /* SS_REQ_BUS0               */ "Search Stage Request Bus (VLAN_XLATE).",
    /* SS_REQ_BUS1               */ "Search Stage Request Bus (L2_ENTRY).",
    /* SS_REQ_BUS2               */ "Search Stage Request Bus (L3_ENTRY).",
    /* SS_REQ_BUS3               */ "Search Stage Request Bus (EP_VLAN_XLATE).",
    /* SS_REQ_BUS4               */ "Search Stage Request Bus (ISM).",
    /* SS_REQ_BUS5               */ "Search Stage Request Bus (ISM).",
    /* SS_REQ_BUS6               */ "Search Stage Request Bus (MPLS_ENTRY).",
    /* SS_REQ_BUS0_C_MODEL       */ "Search Stage Request Bus (VLAN_XLATE).",
    /* SS_REQ_BUS1_C_MODEL       */ "Search Stage Request Bus (L2_ENTRY).",
    /* SS_REQ_BUS2_C_MODEL       */ "Search Stage Request Bus (L3_ENTRY).",
    /* SS_REQ_BUS3_C_MODEL       */ "Search Stage Request Bus (EP_VLAN_XLATE).",
    /* SS_REQ_BUS4_C_MODEL       */ "Search Stage Request Bus (ISM).",
    /* SS_REQ_BUS5_C_MODEL       */ "Search Stage Request Bus (ISM).",
    /* SS_REQ_BUS6_C_MODEL       */ "Search Stage Request Bus (MPLS_ENTRY).",
    /* SS_REQ_BUS_C_MODEL        */ "Search Stage Request Bus.",
    /* SS_REQ_BUS_FPEM           */ "Search Stage Request Bus (FPEM).",
    /* SS_REQ_BUS_IL2LU          */ "Search Stage Request Bus (IL2LU).",
    /* SS_REQ_BUS_IL3LU          */ "Search Stage Request Bus (IL3LU).",
    /* SS_REQ_BUS_ILPM           */ "Search Stage Request Bus (ILPM).",
    /* SS_REQ_BUS_IVLAN          */ "Search Stage Request Bus (IVLAN).",
    /* SS_REQ_BUS_LPM            */ "Search Stage Request Bus.",
    /* SS_RST_BUS                */ "Search Stage Result Bus.",
    /* SS_RST_BUS0               */ "Search Stage Result Bus (VLAN_XLATE).",
    /* SS_RST_BUS1               */ "Search Stage Result Bus (L2_ENTRY).",
    /* SS_RST_BUS2               */ "Search Stage Result Bus (L3_ENTRY).",
    /* SS_RST_BUS3               */ "Search Stage Result Bus (EP_VLAN_XLATE).",
    /* SS_RST_BUS4               */ "Search Stage Result Bus (ISM).",
    /* SS_RST_BUS5               */ "Search Stage Result Bus (ISM).",
    /* SS_RST_BUS6               */ "Search Stage Result Bus (MPLS_ENTRY).",
    /* SS_RST_BUS0_C_MODEL       */ "Search Stage Result Bus (VLAN_XLATE).",
    /* SS_RST_BUS1_C_MODEL       */ "Search Stage Result Bus (L2_ENTRY).",
    /* SS_RST_BUS2_C_MODEL       */ "Search Stage Result Bus (L3_ENTRY).",
    /* SS_RST_BUS3_C_MODEL       */ "Search Stage Result Bus (EP_VLAN_XLATE).",
    /* SS_RST_BUS4_C_MODEL       */ "Search Stage Result Bus (ISM).",
    /* SS_RST_BUS5_C_MODEL       */ "Search Stage Result Bus (ISM).",
    /* SS_RST_BUS6_C_MODEL       */ "Search Stage Result Bus (MPLS_ENTRY).",
    /* SS_RST_BUS_C_MODEL        */ "Search Stage Result Bus.",
    /* SS_RST_BUS_IN             */ "Search Stage Result Bus.",
    /* SS_RST_BUS_IN_DATA_FPEM   */ "Search Stage Result Bus (FPEM).",
    /* SS_RST_BUS_IN_DATA_IL2LU  */ "Search Stage Result Bus (IL2LU).",
    /* SS_RST_BUS_IN_DATA_IL3LU  */ "Search Stage Result Bus (IL3LU).",
    /* SS_RST_BUS_IN_DATA_ILPM   */ "Search Stage Result Bus (ILPM).",
    /* SS_RST_BUS_IN_DATA_IVLAN  */ "Search Stage Result Bus (IVLAN).",
    /* SS_RST_BUS_IN_FPEM        */ "Search Stage Result Bus (FPEM).",
    /* SS_RST_BUS_IN_IL2LU       */ "Search Stage Result Bus (IL2LU).",
    /* SS_RST_BUS_IN_IL3LU       */ "Search Stage Result Bus (IL3LU).",
    /* SS_RST_BUS_IN_ILPM        */ "Search Stage Result Bus (ILPM).",
    /* SS_RST_BUS_IN_IVLAN       */ "Search Stage Result Bus (IVLAN).",
    /* SS_RST_BUS_OUT            */ "Search Stage Result Bus.",
    /* SS_RST_BUS_OUT_FPEM       */ "Search Stage Result Bus (FPEM).",
    /* SS_RST_BUS_OUT_IL2LU      */ "Search Stage Result Bus (IL2LU).",
    /* SS_RST_BUS_OUT_IL3LU      */ "Search Stage Result Bus (IL3LU).",
    /* SS_RST_BUS_OUT_ILPM       */ "Search Stage Result Bus (ILPM).",
    /* SS_RST_BUS_OUT_IVLAN      */ "Search Stage Result Bus (IVLAN).",
    /* SS_RST_BUS_OUT_LPM        */ "Search Stage Result Bus, LPM optimized.",
    /* SS_RST_BUS_OUT_SEARCH_FPEM */ "Search Stage Result Bus (FPEM), optimized for key search only lanes.",
    /* SS_RST_BUS_OUT_SEARCH_IL2LU */ "Search Stage Result Bus (IL2LU), optimized for key search only lanes.",
    /* SS_RST_BUS_OUT_SEARCH_IL3LU */ "Search Stage Result Bus (IL3LU), optimized for key search only lanes.",
    /* SS_RST_BUS_OUT_SEARCH_ILPM */ "Search Stage Result Bus (ILPM), optimized for key search only lanes.",
    /* SS_RST_BUS_OUT_SEARCH_IVLAN */ "Search Stage Result Bus (IVLAN), optimized for key search only lanes.",
    /* STUB_TO_SWITCH_SCH        */ "Data portion of Switch to Stub SCH header",
    /* SUBNET_PROTOCOL_DOP       */ "SUBNET_PROTOCOL_DOP DOP description.",
    /* SVM_ACTIONS               */ "SVM action format",
    /* SVM_COMPRESSED_PKT_ATTR   */ "compressed packet attribute",
    /* SVM_CTR_UDF               */ "SVM udf fields definition",
    /* SVM_IN_BUS                */ "SVM input format",
    /* SVM_METER_INDEX_EOP_BUFFER */ "Input bus for meter index generator",
    /* SVM_METER_INFO_FROM_SOURCE */ "Meter info from source table",
    /* SVM_METER_TABLE_COV_DEFS  */ "defines for svm coverage analysis",
    /* SVM_MTR_PIPE_CTRL_BUS     */ "Bus for carrying meter parameters across the meter pipeline",
    /* SVM_MTR_PIPE_DATA_BUS     */ "Bus for carrying meter data across the meter pipeline",
    /* SVM_OUT_BUS               */ "SVM output format",
    /* SVM_PKT_ATTR              */ "packet attribute",
    /* SVM_UPDATE_BITMAP_EOP_BUFFER */ "EOP buffer to store update bitmaps and other info",
    /* SVP_ACTION_SET            */ "PDD Output Bus generic format",
    /* SVP_SOURCE                */ "Denote the source where SVP is from.",
    /* SW2_0_DOP                 */ "SW2_0_DOP DOP description.",
    /* SW2_1_DOP                 */ "SW2_1_DOP DOP description.",
    /* SW2_EOP_BUFFER            */ "Bit Definitions of SW2_EOP_BUFFER",
    /* SW2_EOP_BUFFER_A          */ "Bit Definitions of SW2_EOP_BUFFER_A",
    /* SW2_EOP_BUFFER_B          */ "Bit Definitions of SW2_EOP_BUFFER_B",
    /* SW2_EOP_BUFFER_C          */ "Bit Definitions of SW2_EOP_BUFFER_C",
    /* SW3_0_DOP                 */ "SW3_0_DOP DOP description.",
    /* SW3_EOP_BUFFER_A          */ "Bit Definitions of SW3_EOP_BUFFER_A.",
    /* SW3_EOP_BUFFER_B          */ "Bit Definitions of SW3_EOP_BUFFER_B.",
    /* SWITCHING_CTRLS_ACTION_SET */ "PDD Output Bus generic format",
    /* SWITCH_TO_STUB_SCH        */ "Data portion of Switch to Stub SCH header",
    /* SW_COUNTER_UPDATE_VECTOR  */ "Bit Definitions of the sw counter update vector.",
    /* SW_EOP_BUFFER_B           */ "Bit Definitions of SW_EOP_BUFFER_B.",
    /* SYSTEM_HVE_OUTPUT_BUS     */ "SYSTEM HVE (header verfication engine) output bus format.",
    /* SYSTEM_HVE_TRIGGERS_FORMAT */ "SYSTEM HVE (header verfication engine) trigger format for HVE0.",
    /* TABLE_MANAGEMENT_ACTION_SET */ "PDD Output Bus generic format",
    /* TAF_GATE_STATUS           */ "8-bits interface from TAF Gate Control Generator maps to Isw1 Qci parameters.",
    /* TAG_ACTION                */ "TAG Action Encoding.",
    /* TAG_ACTION_PROFILE_ACTION_SET */ "PDD Output Bus generic format",
    /* TAG_ACTION_SET            */ "PDD Output Bus generic format",
    /* TAP_CNTRL_MOTP            */ "tap control interface for motp",
    /* TAP_STATUS_MOTP           */ "tap control status for motp",
    /* TCACHE_LMGR_STATE         */ "Format TCACHE Location manager Allocation Structure",
    /* TCAM_RSP_CTB_WR_CMP       */ "DW0 and DW1 of TCAM context buffer write and compare 1 & 2 response format",
    /* TCP_ACK                   */ "Tcp ACK flag",
    /* TCP_FIN                   */ "Tcp FIN flag",
    /* TCP_FLAGS                 */ "Tcp header flags",
    /* TCP_HDR                   */ "TCP header specification",
    /* TCP_PSH                   */ "Tcp PSH flag",
    /* TCP_RST                   */ "Tcp RST flag",
    /* TCP_SYN                   */ "Tcp SYN flag",
    /* TCP_UDP_SCTP              */ "TCP, UDP, SCTP common field define",
    /* TCP_URG                   */ "Tcp URG flag",
    /* TDBGC_TRIGGERS            */ "Bit Definitions of the counter vector (used by TDBGC[0-11]_SELECT registers)",
    /* THDIEMA_THDI_PORT_PG_BST  */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par: Even parity across the row\n* Ing_PG_BST_Stat_Shared: Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Threshold_Profile_Shared: Which ...",
    /* THDIEMA_THDI_PORT_SP_BST  */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..62] * 4 + sp[0..3].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* Ing_Port_SP_BST_Threshold_Profile: Which of the eight compare profiles should be used to force a trigger.",
    /* THDIEXT_THDI_PORT_PG_BST  */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par: Even parity across the row\n* Ing_PG_BST_Stat_Shared: Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Threshold_Profile_Shared: Which ...",
    /* THDIEXT_THDI_PORT_SP_BST  */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..62] * 4 + sp[0..3].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* Ing_Port_SP_BST_Threshold_Profile: Which of the eight compare profiles should be used to force a trigger.",
    /* THDIQEN_THDI_PORT_PG_BST  */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par: Even parity across the row\n* Ing_PG_BST_Stat_Shared: Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Threshold_Profile_Shared: Which ...",
    /* THDIQEN_THDI_PORT_SP_BST  */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..62] * 4 + sp[0..3].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* Ing_Port_SP_BST_Threshold_Profile: Which of the eight compare profiles should be used to force a trigger.",
    /* THDIRQE_THDI_PORT_PG_BST  */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par: Even parity across the row\n* Ing_PG_BST_Stat_Shared: Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Threshold_Profile_Shared: Which ...",
    /* THDIRQE_THDI_PORT_SP_BST  */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..62] * 4 + sp[0..3].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* Ing_Port_SP_BST_Threshold_Profile: Which of the eight compare profiles should be used to force a trigger.",
    /* THDI_PORT_PG_BST          */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par: Even parity across the row\n* Ing_PG_BST_Stat_Shared: Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Threshold_Profile_Shared: Which ...",
    /* THDI_PORT_SP_BST          */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..62] * 4 + sp[0..3].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* Ing_Port_SP_BST_Threshold_Profile: Which of the eight compare profiles should be used to force a trigger.",
    /* THDI_TO_CFG_INFO          */ "THDI to CFG interface format",
    /* THDI_TO_ENQ_BS_BUS        */ "THDI to ENQ broadscan bus. This conveys THDI fill levels & drop states per cell.",
    /* THDI_TO_OOBFC_INFO        */ "Position and description of bits in the THDI to OOBFC bus",
    /* THDI_TO_REDIRECT_INFO     */ "Position and description of bits in the THDI to REDIRECT INFO bus",
    /* THDI_TO_WAMU              */ "Position and description of bits in the THDI to WAMU  bus",
    /* THDM_STAGE_SIG            */ "THDM DB stage sig definition.",
    /* THDM_THDU_PIPE_SIG        */ "Internal pipeline signals for THDU updates, merge enq and deq events.",
    /* THDM_THDU_SP_PIPE_SIG     */ "Internal pipeline signals for THDU updates for SP, merge enq and deq events.",
    /* THDM_TO_RQE               */ "THDM_TO_RQE interface definition.",
    /* THDO_MIRROR_INFO          */ "Position and description of bits in the per-source-port mirror information stored in THDO",
    /* THDO_OPN_INFL_CNT_INFO    */ "THDO in-flight counter format",
    /* THDO_QUEUE_INFL_CNT_INFO  */ "THDO in-flight counter format",
    /* THDO_TO_CTR_ENQ_INFO      */ "Format TCACHE Location manager Allocation Structure",
    /* THDO_TO_INTFO_OOBFC       */ "Position and description of bits in the per-source-port mirror information stored in THDO",
    /* THDO_TO_REDIRECT_INFO     */ "Position and description of bits in the THDO to REDIRECT INFO bus",
    /* THDO_TO_RQE_INFO          */ "THDO to RQE interface format",
    /* THDO_TO_WAMU              */ "Position and description of bits in the THDO to WAMU  bus",
    /* THDR_DB_TO_ENQ_BS_BUS     */ "THDR_DB to ENQ broadscan bus. This bus has different fill levels & drop level details.",
    /* THDR_QE_TO_ENQ_BS_BUS     */ "THDR_QE to ENQ broadscan bus. This bus has different fill levels & drop level details.",
    /* THDR_TO_THDM_BS_BUS       */ "THDR to THDM broadscan bus.",
    /* THDU_TO_ENQ_BS_BUS        */ "THDU to ENQ broadscan bus. This bus has different fill levels & drop level details.",
    /* THDU_TO_THDM_DEQ          */ "Position and description from THDO UC and THDO MC for dequeue event.",
    /* THDU_TO_THDM_ENQ          */ "Position and description from THDO UC and THDO MC for enqueue event.",
    /* TIMESTAMP_RECORD          */ "Metadata record format for inserting at the tail\n            of data packets",
    /* TOQ_CELL_DESCRIPTOR_INFO  */ "",
    /* TOQ_CFG_CONFIG            */ "Position and description of bits in the TOQ PORT COSQ INFO bus, selected by es_to_toq_queue.",
    /* TOQ_COMMON_DEQ_CTRL       */ "",
    /* TOQ_COS_Q_INFO            */ "Position and description of bits in the TOQ COS Q INFO bus",
    /* TOQ_CPU_PORT_COSQ_INFO    */ "Position and description of bits in the TOQ CPU PORT COSQ INFO bus",
    /* TOQ_CPU_PORT_COSQ_PKT_RD_PTR */ "Position and description of bits in the TOQ PORT COSQ PKT RD_PTR bus",
    /* TOQ_CPU_PORT_COSQ_STATE   */ "Position and description of bits in the TOQ PORT COSQ STATE bus",
    /* TOQ_CQEBN_CACHE_ENTRY     */ "",
    /* TOQ_DATA_OUT_INFO         */ "TOQ_DATA_OUT_INFO",
    /* TOQ_EXEC_DEQ_CTRL         */ "",
    /* TOQ_EXEC_ENQ_CTRL         */ "",
    /* TOQ_MCFIFO_CHANNEL        */ "Format of the data entering TOQ pipeline Stage 0",
    /* TOQ_MCFIFO_ENTRY          */ "Format of the data entering TOQ pipeline Stage 0",
    /* TOQ_NEW_1CELL_INFO        */ "Position and description of bits in the TOQ NEW 1CELL INFO bus",
    /* TOQ_NEW_CELL_INFO         */ "Position and description of bits in the TOQ NEW CELL INFO bus",
    /* TOQ_NEW_PGQ_INFO          */ "Position and description of bits in the TOQ NEW TOQ INFO bus",
    /* TOQ_NEW_PKTHDR1_INFO      */ "Position and description of bits in the TOQ NEW PKTHDR1 INFO bus",
    /* TOQ_NEW_SAVED_INFO        */ "Position and description of bits in the TOQ NEW SAVED INFO bus",
    /* TOQ_NEW_TOQ2_INFO         */ "Position and description of bits in the TOQ NEW TOQ 2 INFO bus",
    /* TOQ_NEW_TOQ_INFO          */ "Position and description of bits in the TOQ NEW TOQ INFO bus",
    /* TOQ_PKTHDR1_INFO          */ "Position and description of bits in the TOQ NEW CELL INFO bus",
    /* TOQ_PORT_COSQ_INFO        */ "Position and description of bits in the TOQ PORT COSQ INFO bus",
    /* TOQ_PORT_COSQ_PKT_RD_PTR  */ "Position and description of bits in the TOQ PORT COSQ PKT RD PTR bus",
    /* TOQ_PORT_COSQ_STATE       */ "Position and description of bits in the TOQ PORT COSQ STATE bus",
    /* TOQ_PORT_SEL_COSQ_INFO    */ "Position and description of bits in the TOQ PORT COSQ INFO bus, selected by es_to_toq_queue.",
    /* TOQ_PSTAGE0_INFO          */ "Format of the data entering TOQ pipeline Stage 0",
    /* TOQ_PSTAGE1_DEQ_INFO      */ "Format of the data entering TOQ pipeline Stage 1, pipeline 1 that can be either DEQ or ENQ operation",
    /* TOQ_PSTAGE1_ENQ_INFO      */ "Format of the data entering TOQ pipeline Stage 1 for ENQ operations",
    /* TOQ_PURGE_Q_INFO          */ "Position and description of bits in the TOQ PURGE Q INFO bus",
    /* TOQ_REPPKT_INFO           */ "Position and description of bits in the TOQ REPLICATE PACKET INFO bus",
    /* TOQ_RQE_CHANNEL_INFO      */ "Individual channel ENQ format for RQE_FIFO",
    /* TOQ_RQE_FIFO              */ "Definition of RQE_FIFO data bus, carrying 8 x ENQ info channels",
    /* TOQ_RQE_FIFO_MEM_DATA     */ "FORMAT OF THE DATA TO BE STORED IN EACH OF 4 RQE FIFOs",
    /* TOQ_SHARE_Q_INFO          */ "Position and description of bits in the TOQ SHARED Q INFO bus",
    /* TOQ_SV2_PKTHDR1           */ "Position and description of bits in the TOQ NEW TOQ 2 INFO bus",
    /* TOQ_TCACHE_STATUS_INFO_0  */ "Format of the TCACHE INFO_0 Status Bus",
    /* TOQ_TCT_EB_STATE          */ "",
    /* TOQ_TO_DEQ_CELL_INFO      */ "Position and description of bits in the TOQ to DEQ CELL INFO bus",
    /* TOQ_TO_DEQ_RDE_INFO       */ "Position and description of bits in the TOQ RDE Q INFO bus",
    /* TOQ_TO_DEQ_REP_INFO       */ "Position and description of bits in the TOQ to DEQ REP INFO bus",
    /* TOQ_TO_DEQ_WLP_INFO       */ "Position and description of bits in the TOQ WLP Q INFO bus",
    /* TOQ_TO_DQS_CELL_INFO      */ "Position and description of bits in the TOQ to DEQ CELL INFO bus",
    /* TOQ_TO_DQS_REP_INFO       */ "Position and description of bits in the TOQ to DEQ REP INFO bus",
    /* TOQ_TO_RDE                */ "Position and description of bits in the TOQ to RDE  bus",
    /* TOQ_TO_THDM               */ "RQE to THDM interface definition.",
    /* TOQ_WLP_SAVED_INFO        */ "Position and description of bits in the TOQ NEW SAVED INFO bus",
    /* TRILL                     */ "",
    /* TRILL_CPU_OPCODE_ENCODING */ "Bit Definitions of the TRILL CPU Opcode encoding",
    /* TRILL_HDR                 */ "TRILL header specification",
    /* TRUNK_GROUP_RRLB_CNT_COV_DEFS */ "defines for trunk_group_rrlb_cnt coverage analysis",
    /* TSDELTA_TS_INPUT_BUS      */ "Bit Definitions of the Timestamps bus input to TS Delta module. All fields are 64b aligned",
    /* TTL_B                     */ "TTL .",
    /* TTL_B_ACTION_SET          */ "PDD Output Bus generic format",
    /* TUNNEL_ADAPT_1_FIXED_KEY_TABLE_ATTRS_INDEX */ "TUNNEL_ADAPT_1_FIXED_KEY_TABLE_ATTRS index",
    /* TUNNEL_ADAPT_1_FLEX_KEY_GEN_IN_CONTROL_BUS */ "FlexKeyGen Input Control Bus1 for VXLT_1",
    /* TUNNEL_ADAPT_1_FLEX_KEY_GEN_OUT_BUS */ "FlexKeyGen Output bus VXLT_1",
    /* TUNNEL_ADAPT_1_PDD_OUT_BUS */ "PDD Output Bus generic format",
    /* TUNNEL_ADAPT_2_FIXED_KEY_TABLE_ATTRS_INDEX */ "TUNNEL_ADAPT_2_FIXED_KEY_TABLE_ATTRS index",
    /* TUNNEL_ADAPT_2_FLEX_KEY_GEN_IN_CONTROL_BUS */ "FlexKeyGen Input Control Bus2  for  MPLS_ENTRY",
    /* TUNNEL_ADAPT_2_FLEX_KEY_GEN_OUT_BUS */ "FlexKeyGen Output bus MPLS_ENTRY",
    /* TUNNEL_ADAPT_2_PDD_OUT_BUS */ "PDD Output Bus generic format",
    /* TUNNEL_ADAPT_3_FIXED_KEY_TABLE_ATTRS_INDEX */ "TUNNEL_ADAPT_3_FIXED_KEY_TABLE_ATTRS index",
    /* TUNNEL_ADAPT_3_FLEX_KEY_GEN_IN_CONTROL_BUS */ "FlexKeyGen Input Control Bus2  for L3_TUNNEL",
    /* TUNNEL_ADAPT_3_FLEX_KEY_GEN_OUT_BUS */ "FlexKeyGen Output bus L3 TUNNEL",
    /* TUNNEL_ADAPT_3_PDD_OUT_BUS */ "PDD Output Bus generic format",
    /* TUNNEL_ADAPT_4_FLEX_KEY_GEN_IN_CONTROL_BUS */ "FlexKeyGen Input Control Bus for VXLT_2 keygen TCAM lookups",
    /* TUNNEL_ADAPT_4_FLEX_KEY_GEN_OUT_BUS */ "FlexKeyGen Output bus VXLT_2",
    /* TUNNEL_ADAPT_4_PDD_OUT_BUS */ "PDD Output Bus generic format",
    /* TUNNEL_ADAPT_ATTRIBUTES_ACTION_SET */ "PDD Output Bus generic format",
    /* TUNNEL_ADAPT_FLEX_KEY_GEN_IN_BUS */ "Ingress Flex key gen input bus. It is only valid for SOP cell.",
    /* TUNNEL_ADAPT_KEYGEN_OBJECT_BUS */ "Tunnel adapt object bus portion of tunnel_adapt_flex_key_gen_in_bus. It is only valid for SOP cell.",
    /* TUNNEL_ADAPT_MISC_ACTION_SET */ "PDD Output Bus generic format",
    /* TUNNEL_ADAPT_PHB_CTRL_ID_FORMAT */ "TUNNEL_ADAPT_PHB_CTRL_ID format",
    /* TUNNEL_PROC_DROP_VECTOR   */ "Bit Definitions of the VXLAN / MPLS drop vector.",
    /* TUNNEL_PTR_ACTION_SET     */ "PDD Output Bus generic format",
    /* TUNNEL_TERM_ACTION_SET    */ "PDD Output Bus generic format",
    /* TUNNEL_TYPE_LOOPBACK_TYPE */ "Description of encodings of TUNNEL_TYPE_LOOPBACK_TYPE.",
    /* TXDP_S0_BUS               */ "Request External TCAM",
    /* TXDP_S2_BUS               */ "Combined view of Request External TCAM",
    /* TXDP_S2_CW_FMT            */ "TXDP stage 2 CW format",
    /* TXDP_S3_BUS               */ "Tx datapath Stage 3 data bus format",
    /* TXDP_S3_CW_BUS            */ "Tx datapath Stage 3 control bus format",
    /* TXDP_S3_CW_FMT            */ "Tx datapath Stage 3 control bus format",
    /* TXDP_S3_DW_BUS            */ "Tx datapath Stage 3 data bus format",
    /* TXDP_S4_BUS               */ "Tx datapath Stage 4 data bus format",
    /* TXLP_ALGN_TO_BUFFER_CTRL  */ "Position and description of bits in Aligner-2-Buffer control-signals",
    /* TXLP_ALGN_TO_BUFFER_PASSTHRU_CTRL */ "Position and description of bits in Aligner-2-Buffer Passthru control-signals",
    /* TXLP_BUFFER_TO_PORT_CTRL  */ "Position and description of bits in Buffer-2-Port control-signals",
    /* TXLP_TO_EDB_BUS           */ "The signals needed to be sent to EDATABUF for SHAPEing related updates.",
    /* TXLP_TO_PORT_CTRL_BUS     */ "Position and description of bits in txlp_to_port_ctrl",
    /* TXLP_TRIGGERS             */ "The Triggers/Events in the TXLP pipeline that can be counted.",
    /* UDF_BASE_OFFSET_ENCODING  */ "UDF Base Offset Encoding",
    /* UDF_TCAM_KEY              */ "Bit Definitions of UDF_TCAM_KEY.",
    /* UDP_HDR                   */ "IPv4 header specification",
    /* UTT_GEN_REQ_BUS           */ "Generic SBUS UTT Request bus",
    /* UTT_LOOKUP_BUS_0          */ "Stage 0 to UTT Request bus",
    /* UTT_LOOKUP_BUS_1          */ "Stage 1 to UTT Request bus",
    /* UTT_RESP_BUS_0            */ "UTT to Stage 0 Response bus",
    /* UTT_RESP_BUS_1            */ "UTT to Stage 1 response bus",
    /* UTT_SINGLE_LOOKUP_BUS     */ "Structure of a single lookup bus",
    /* UTT_SINGLE_TCAM_SBUS_ACCESS_BUS */ "Generic SBUS UTT Request bus",
    /* VFI_SOURCE                */ "Denote the source where VFI is from.",
    /* VFP_DOUBLE_WIDE_F1        */ "Position and description of bits in VFP DOUBLE WIDE F1 FIELDS",
    /* VFP_DOUBLE_WIDE_F3        */ "Position and description of bits in VFP DOUBLE WIDE F3 FIELDS",
    /* VFP_DOUBLE_WIDE_F2_0      */ "Position and description of bits in VFP DOUBLE WIDE F2_0 FIELDS",
    /* VFP_DOUBLE_WIDE_F2_1      */ "Position and description of bits in VFP DOUBLE WIDE F2_1 FIELDS",
    /* VFP_DOUBLE_WIDE_F2_2      */ "Position and description of bits in VFP DOUBLE WIDE F2_2 FIELDS",
    /* VFP_DOUBLE_WIDE_F2_3      */ "Position and description of bits in VFP DOUBLE WIDE F2_3 FIELDS",
    /* VFP_F1                    */ "Position and description of bits in VFP F1 FIELDS",
    /* VFP_F2_0                  */ "Position and description of bits in VFP F2 0 FIELDS",
    /* VFP_F2_1                  */ "Position and description of bits in VFP F2 1 FIELDS",
    /* VFP_F2_2                  */ "Position and description of bits in VFP F2 2 FIELDS",
    /* VFP_F2_3                  */ "Position and description of bits in VFP F2 3 FIELDS",
    /* VFP_F2_4                  */ "Position and description of bits in VFP F2 4 FIELDS",
    /* VFP_F2_5                  */ "Position and description of bits in VFP F2 5 FIELDS",
    /* VFP_F2_6                  */ "Position and description of bits in VFP F2 6 FIELDS",
    /* VFP_F2_7                  */ "Position and description of bits in VFP F2 7 FIELDS",
    /* VFP_F2_8                  */ "Position and description of bits in VFP F2 8 FIELDS",
    /* VFP_F2_9                  */ "Position and description of bits in VFP F2 8 FIELDS",
    /* VFP_F2_10                 */ "Position and description of bits in VFP F2 10 FIELDS",
    /* VFP_F3_0                  */ "Position and description of bits in VFP F3 0 FIELDS",
    /* VFP_F3_1                  */ "Position and description of bits in VFP F3 1 FIELDS",
    /* VFP_F3_2                  */ "Position and description of bits in VFP F3 2 FIELDS",
    /* VFP_F3_3                  */ "Position and description of bits in VFP F3 3 FIELDS",
    /* VFP_F3_4                  */ "Position and description of bits in VFP F3 4 FIELDS",
    /* VFP_F3_5                  */ "Position and description of bits in VFP F3 5 FIELDS",
    /* VFP_F3_6                  */ "Position and description of bits in VFP F3 6 FIELDS",
    /* VFP_KEY_0_DOP             */ "VFP_KEY_0_DOP DOP description.",
    /* VFP_KEY_1_DOP             */ "VFP_KEY_1_DOP DOP description.",
    /* VFP_KEY_2_DOP             */ "VFP_KEY_2_DOP DOP description.",
    /* VFP_KEY_3_DOP             */ "VFP_KEY_3_DOP DOP description.",
    /* VFP_KEY_4_DOP             */ "VFP_KEY_4_DOP DOP description.",
    /* VFP_KEY_5_DOP             */ "VFP_KEY_5_DOP DOP description.",
    /* VFP_KEY_6_DOP             */ "VFP_KEY_6_DOP DOP description.",
    /* VFP_KEY_7_DOP             */ "VFP_KEY_7_DOP DOP description.",
    /* VFP_TCAM_DOP              */ "VFP_TCAM_DOP DOP description.",
    /* VLAN_0                    */ "vlan_0 table",
    /* VLAN_1                    */ "vlan_1 table",
    /* VLAN_DROP                 */ "Bit Definitions of the VLAN drop vector",
    /* VLAN_DROP_VECTOR          */ "Bit Definitions of the VLAN drop vector.",
    /* VLAN_HDR                  */ "inner/outer vlan shim specification",
    /* VLAN_TAG_COMPOSITES       */ "Zone l2 tag presence format.",
    /* VLAN_TAG_HDR              */ "2BYTES OF VLAN TAG HEADER EXCLUDING ETHERTYPE.",
    /* VLAN_XLATE_1_DATA         */ "Format for VLAN_XLATE_1 DATA.",
    /* VLAN_XLATE_2_DATA         */ "Format for VLAN_XLATE_2 DATA.",
    /* VLAN_XLATE_KEY            */ "Format for VLAN_XLATE_1, VLAN_XLATE_2 KEY.",
    /* VNTAG_ETAG_ACTION_SET     */ "PDD Output Bus generic format",
    /* VNTAG_ETAG_ASSIGN_ACTION_SET */ "PDD Output Bus generic format",
    /* VNTAG_HDR                 */ "4BYTES OF VNTAG HEADER AFTER ETHERTYPE.",
    /* VPLAG_CONTROLS_ACTION_SET */ "PDD Output Bus generic format",
    /* VSAN_ACTION_SET           */ "PDD Output Bus generic format",
    /* VXLAN_HDR                 */ "VXLAN header specification",
    /* VXLT2_ASSIGNED_TAGS_L3_TYPE_DOP */ "VXLT2_ASSIGNED_TAGS_L3_TYPE_DOP DOP description.",
    /* VXLT_ACTION_SET           */ "PDD Output Bus generic format",
    /* VXLT_CTRL_ID_SEL_ENCODING_FORMAT */ "EGR_PKT_FLOW_SELECT_TCAM_DATA_ONLY.ADAPTATION_*_VXLT_CTRL_ID_SEL_A/B encoding format.",
    /* VXLT_DROP_VECTOR          */ "Bit Definitions of the VXLT drop vector.",
    /* WAMU_CNTX_TB              */ "Position and description of bits in the WAMU Context Table and Table parameter",
    /* WAMU_PURGE                */ "wamu context table purge fifo foramt",
    /* WAMU_S_RF                 */ "wamu context table memory s_rf width",
    /* WAMU_TO_TOQ_INFO          */ "Position and description of bits in the WAMU to TOQ INFO bus",
    /* WESP_HDR                  */ "Wrapped ESP header specification",
    /* WRED_CELL_THD_0_FIELDS    */ "Position and description of bits in WRED CELL Threshold Green & Yellow\nMemory",
    /* WRED_CELL_THD_1_FIELDS    */ "Position and description of bits in WRED CELL Threshold Red & non-tcp\nMemory",
    /* WRED_CFG_CELL_FIELDS      */ "Position and description of bits in WRED Average QSize and Config\nRegisters for Cell\nWhen do register read/write test to this register,\nplease DO reset\n    MISCCONFIG.REFRESH_EN = 0\n    MISCCONFIG.PARITY_GEN_EN = 0\n    MISCCONFIG.PARITY_CHK_EN = 0\nThis is to prevent data being overwrite by internal refresh\nprocess.",
    /* WRED_CFG_PACKET_FIELDS    */ "Position and description of bits in WRED Average QSize and Config\nRegisters for Packet\nWhen do register read/write test to this register,\nplease DO reset\n    MISCCONFIG.REFRESH_EN = 0\n    MISCCONFIG.PARITY_GEN_EN = 0\n    MISCCONFIG.PARITY_CHK_EN = 0\nThis is to prevent data being overwrite by internal refresh\nprocess.",
    /* WRED_CFG_S_RF             */ "WRED CFG memory s_rf width",
    /* WRED_PACKET_THD_0_FIELDS  */ "Position and description of bits in WRED PACKET Threshold Green & Yellow\nMemory",
    /* WRED_PACKET_THD_1_FIELDS  */ "Position and description of bits in WRED PACKET Threshold Red & non-tcp\nMemory",
    /* WRED_S_RF                 */ "wred memory s_rf width",
    /* WRED_THD_S_RF             */ "WRED CFG memory s_rf width",
    /* WRED_TO_DEQ_STATUS_INFO   */ "WRED to DEQ interface format",
    /* WRED_TO_ENQ_BS_BUS        */ "WRED to ENQ broadscan bus. This conveys WRED drop states per cell.",
    /* XGPORT_TO_EP_PORT_MODE_BUS */ "Bus from XGPORT to EP specifying the mode of operation of XGPORT",
    /* XGPORT_TO_IP_CONTROL_WORD */ "GPORT/XPORT to IP Control Word Format",
    /* XGPORT_TO_IP_CTRL_BUS     */ "Position and description of bits in xgp_to_ip_pkt_ctrl",
    /* XPE_ENQ_TO_PQE_INFO       */ "PQE format of ENQ to PQE info",
    /* XPORT_XQHDR_S_RF          */ "XPORT XQ Header memory s_rf width",
    /* XPPORT_TO_IP_CONTROL_WORD */ "GPORT/XPORT to IP Control Word Format",
    /* XQFREE_S_RF               */ "XQ free pointer memory s_rf width",
    /* XQNEXT_S_RF               */ "XQ next pointer memory s_rf width",
    /* XQPORT_TO_EP_PORT_MODE_BUS */ "Bus from XQPORT to EP specifying the mode of operation of XQPORT",
    /* ZONE_ID_DOP_DOP           */ "ZONE_ID_DOP_DOP DOP description.",
    /* ZONE_L2_TAGS_ACTIONS      */ "Zone l2 tag modification actions format.",
    /* ZONE_L2_TAGS_BUS          */ "Zone l2 tags.",
    /* ZONE_L2_TAGS_STATUS       */ "Zone l2 tag presence format.",
    /* ZONE_L2_TAGS_VALUES       */ "Zone l2 tags values bus.",
    /* ZONE_OBJECTS              */ "Zone objects bus format.",
    /* ZONE_PRUNING_OBJECTS      */ "Zone pruning objects bus format.",
