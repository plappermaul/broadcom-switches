/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2021 Broadcom Inc. All rights reserved.
 *
 * File:        dnx_instru_dispatch.h
 * Purpose:     dnx instru driver BCM API dispatch table
 * Generator:   modules_dispatch.py
 */

#ifndef _BCM_INT_DNX_INSTRU_DISPATCH_H
#define _BCM_INT_DNX_INSTRU_DISPATCH_H

#include <bcm/types.h>
#include <bcm_int/dispatch.h>

#ifdef BCM_DNX_SUPPORT

extern int bcm_dnx_instru_sflow_sample_interface_remove(int,bcm_instru_sflow_sample_interface_info_t *);
extern int bcm_dnx_instru_ipfix_encap_delete(int,bcm_instru_ipfix_encap_info_t *);
extern int bcm_dnx_instru_ifa_encap_create(int,bcm_instru_ifa_info_t *);
extern int bcm_dnx_instru_ipfix_interface_traverse(int,bcm_instru_ipfix_interface_traverse_info_t *,bcm_instru_ipfix_interface_traverse_cb,void *);
extern int bcm_dnx_instru_eventor_event_id_config_set(int,uint32,bcm_eventor_event_id_t,bcm_instru_eventor_event_id_config_t *);
extern int bcm_dnx_instru_synced_triggers_enable_set(int,uint32,uint32,bcm_instru_synced_trigger_source_type_t *,uint32 *);
extern int bcm_dnx_instru_vis_resume(int,bcm_core_t,uint32);
extern int bcm_dnx_instru_eventor_context_set(int,uint32,bcm_eventor_context_id_t,bcm_eventor_context_type_t,bcm_instru_eventor_context_conf_t *);
extern int bcm_dnx_instru_sflow_encap_traverse(int,bcm_instru_sflow_encap_traverse_cb,void *);
extern int bcm_dnx_instru_sflow_encap_extended_dst_delete(int,bcm_instru_sflow_encap_extended_dst_info_t *);
extern int bcm_dnx_instru_synced_trigger_time_of_day_get(int,uint32,uint64 *);
extern int bcm_dnx_instru_get_register_access_info(int,uint32,int,uint32,uint32,bcm_instru_access_info_t *);
extern int bcm_dnx_instru_control_set(int,uint32,bcm_instru_control_t,int);
extern int bcm_dnx_instru_gport_control_set(int,bcm_gport_t,uint32,bcm_instru_gport_control_t,int);
extern int bcm_dnx_instru_synced_counters_config_set(int,uint32,bcm_instru_synced_counters_source_type_t,bcm_instru_synced_counters_config_t *);
extern int bcm_dnx_instru_ifit_encap_get(int,bcm_instru_ifit_encap_info_t *);
extern int bcm_dnx_instru_sflow_sample_interface_traverse(int,bcm_instru_sflow_sample_interface_traverse_info_t *,bcm_instru_sflow_sample_traverse_cb,void *);
extern int bcm_dnx_instru_ifit_encap_create(int,bcm_instru_ifit_encap_info_t *);
extern int bcm_dnx_instru_synced_triggers_enable_get(int,uint32,uint32,bcm_instru_synced_trigger_source_type_t *,uint32 *);
extern int bcm_dnx_instru_ipfix_encap_create(int,bcm_instru_ipfix_encap_info_t *);
extern int bcm_dnx_instru_ifit_encap_traverse(int,bcm_instru_ifit_encap_traverse_cb,void *);
extern int bcm_dnx_instru_eventor_builder_get(int,uint32,bcm_eventor_builder_id_t,bcm_instru_eventor_builder_conf_t *);
extern int bcm_dnx_instru_eventor_event_id_config_get(int,uint32,bcm_eventor_event_id_t,bcm_instru_eventor_event_id_config_t *);
extern int bcm_dnx_instru_sflow_encap_get(int,bcm_instru_sflow_encap_info_t *);
extern int bcm_dnx_instru_vis_signal_get(int,bcm_core_t,uint32,int,bcm_instru_vis_signal_key_t *,bcm_instru_vis_signal_result_t *);
extern int bcm_dnx_instru_ifa_encap_delete(int,bcm_instru_ifa_info_t *);
extern int bcm_dnx_instru_eventor_active_set(int,uint32,int);
extern int bcm_dnx_instru_ipfix_interface_get(int,bcm_instru_ipfix_interface_info_t *);
extern int bcm_dnx_instru_sflow_encap_extended_dst_traverse(int,bcm_instru_sflow_encap_extended_dst_cb,void *);
extern int bcm_dnx_instru_ipfix_interface_add(int,bcm_instru_ipfix_interface_info_t *);
extern int bcm_dnx_instru_sflow_encap_extended_dst_create(int,bcm_instru_sflow_encap_extended_dst_info_t *);
extern int bcm_dnx_instru_eventor_event_generate(int,uint32,bcm_eventor_event_id_t);
extern int bcm_dnx_instru_synced_counters_records_get(int,uint32,bcm_instru_synced_counters_records_key_t *,bcm_instru_synced_counters_data_t *);
extern int bcm_dnx_instru_sflow_encap_extended_src_get(int,bcm_instru_sflow_encap_extended_src_info_t *);
extern int bcm_dnx_instru_sflow_encap_extended_dst_get(int,bcm_instru_sflow_encap_extended_dst_info_t *);
extern int bcm_dnx_instru_sflow_sample_interface_get(int,bcm_instru_sflow_sample_interface_info_t *);
extern int bcm_dnx_instru_synced_counters_config_get(int,uint32,bcm_instru_synced_counters_source_type_t,bcm_instru_synced_counters_config_t *);
extern int bcm_dnx_instru_synced_trigger_config_get(int,uint32,bcm_instru_synced_trigger_source_type_t,bcm_instru_synced_trigger_config_t *);
extern int bcm_dnx_instru_sflow_encap_extended_src_traverse(int,bcm_instru_sflow_encap_extended_src_cb,void *);
extern int bcm_dnx_instru_sflow_encap_create(int,bcm_instru_sflow_encap_info_t *);
extern int bcm_dnx_instru_gport_control_get(int,bcm_gport_t,uint32,bcm_instru_gport_control_t,int *);
extern int bcm_dnx_instru_ipfix_interface_remove(int,bcm_instru_ipfix_interface_info_t *);
extern int bcm_dnx_instru_sflow_encap_delete(int,bcm_instru_sflow_encap_info_t *);
extern int bcm_dnx_instru_eventor_context_get(int,uint32,bcm_eventor_context_id_t,bcm_eventor_context_type_t,bcm_instru_eventor_context_conf_t *);
extern int bcm_dnx_instru_get_memory_access_info(int,uint32,int,uint32,uint32,uint32,bcm_instru_access_info_t *);
extern int bcm_dnx_instru_ifa_encap_get(int,bcm_instru_ifa_info_t *);
extern int bcm_dnx_instru_ipfix_encap_get(int,bcm_instru_ipfix_encap_info_t *);
extern int bcm_dnx_instru_ifit_encap_delete(int,bcm_instru_ifit_encap_info_t *);
extern int bcm_dnx_instru_sflow_encap_extended_src_create(int,bcm_instru_sflow_encap_extended_src_info_t *);
extern int bcm_dnx_instru_eventor_generate_periodic_get(int,uint32,bcm_instru_eventor_periodic_source_t *,bcm_instru_eventor_periodic_config_t *);
extern int bcm_dnx_instru_control_get(int,uint32,bcm_instru_control_t,int *);
extern int bcm_dnx_instru_ifa_encap_traverse(int,bcm_instru_ifa_encap_traverse_cb,void *);
extern int bcm_dnx_instru_synced_trigger_config_set(int,uint32,bcm_instru_synced_trigger_source_type_t,bcm_instru_synced_trigger_config_t *);
extern int bcm_dnx_instru_ipt_profile_set(int,uint32,int,bcm_instru_ipt_t *);
extern int bcm_dnx_instru_eventor_builder_set(int,uint32,bcm_eventor_builder_id_t,bcm_instru_eventor_builder_conf_t *);
extern int bcm_dnx_instru_eventor_active_get(int,uint32,int *);
extern int bcm_dnx_instru_sflow_encap_extended_src_delete(int,bcm_instru_sflow_encap_extended_src_info_t *);
extern int bcm_dnx_instru_eventor_generate_periodic_set(int,uint32,bcm_instru_eventor_periodic_source_t *,bcm_instru_eventor_periodic_config_t *);
extern int bcm_dnx_instru_sflow_sample_interface_add(int,bcm_instru_sflow_sample_interface_info_t *);
extern int bcm_dnx_instru_ipfix_encap_traverse(int,bcm_instru_ipfix_encap_traverse_cb,void *);
extern int bcm_dnx_instru_ipt_profile_get(int,uint32,int,bcm_instru_ipt_t *);

#endif /* BCM_DNX_SUPPORT */
#endif /* !_BCM_INT_DNX_INSTRU_DISPATCH_H */
