/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 *
 * File:        dnx_oam_dispatch.h
 * Purpose:     dnx oam driver BCM API dispatch table
 * Generator:   modules_dispatch.py
 */

#ifndef _BCM_INT_DNX_OAM_DISPATCH_H
#define _BCM_INT_DNX_OAM_DISPATCH_H

#include <bcm/types.h>
#include <bcm_int/dispatch.h>

#ifdef BCM_DNX_SUPPORT

extern int bcm_dnx_oam_ais_add(int,bcm_oam_ais_t *);
extern int bcm_dnx_oam_ais_delete(int,bcm_oam_ais_t *);
extern int bcm_dnx_oam_ais_get(int,bcm_oam_ais_t *);
extern int bcm_dnx_oam_control_get(int,bcm_oam_control_type_t,uint64 *);
extern int bcm_dnx_oam_control_indexed_get(int,bcm_oam_control_key_t,uint64 *);
extern int bcm_dnx_oam_control_indexed_set(int,bcm_oam_control_key_t,uint64);
extern int bcm_dnx_oam_control_set(int,bcm_oam_control_type_t,uint64);
extern int bcm_dnx_oam_delay_add(int,bcm_oam_delay_t *);
extern int bcm_dnx_oam_delay_delete(int,bcm_oam_delay_t *);
extern int bcm_dnx_oam_delay_get(int,bcm_oam_delay_t *);
extern int bcm_dnx_oam_endpoint_action_set(int,bcm_oam_endpoint_t,bcm_oam_endpoint_action_t *);
extern int bcm_dnx_oam_endpoint_create(int,bcm_oam_endpoint_info_t *);
extern int bcm_dnx_oam_endpoint_destroy(int,bcm_oam_endpoint_t);
extern int bcm_dnx_oam_endpoint_destroy_all(int,bcm_oam_group_t);
extern int bcm_dnx_oam_endpoint_get(int,bcm_oam_endpoint_t,bcm_oam_endpoint_info_t *);
extern int bcm_dnx_oam_endpoint_traverse(int,bcm_oam_group_t,bcm_oam_endpoint_traverse_cb,void *);
extern int bcm_dnx_oam_event_register(int,bcm_oam_event_types_t,bcm_oam_event_cb,void *);
extern int bcm_dnx_oam_event_unregister(int,bcm_oam_event_types_t,bcm_oam_event_cb);
extern int bcm_dnx_oam_group_create(int,bcm_oam_group_info_t *);
extern int bcm_dnx_oam_group_destroy(int,bcm_oam_group_t);
extern int bcm_dnx_oam_group_destroy_all(int);
extern int bcm_dnx_oam_group_get(int,bcm_oam_group_t,bcm_oam_group_info_t *);
extern int bcm_dnx_oam_group_traverse(int,bcm_oam_group_traverse_cb,void *);
extern int bcm_dnx_oam_init(int);
extern int bcm_dnx_oam_lif_profile_get(int,uint32,bcm_gport_t,bcm_oam_profile_t *,bcm_oam_profile_t *);
extern int bcm_dnx_oam_lif_profile_set(int,uint32,bcm_gport_t,bcm_oam_profile_t,bcm_oam_profile_t);
extern int bcm_dnx_oam_loopback_add(int,bcm_oam_loopback_t *);
extern int bcm_dnx_oam_loopback_delete(int,bcm_oam_loopback_t *);
extern int bcm_dnx_oam_loopback_get(int,bcm_oam_loopback_t *);
extern int bcm_dnx_oam_loss_add(int,bcm_oam_loss_t *);
extern int bcm_dnx_oam_loss_delete(int,bcm_oam_loss_t *);
extern int bcm_dnx_oam_loss_get(int,bcm_oam_loss_t *);
extern int bcm_dnx_oam_mpls_tp_channel_type_rx_delete(int,bcm_oam_mpls_tp_channel_type_t,int,int *);
extern int bcm_dnx_oam_mpls_tp_channel_type_rx_get(int,bcm_oam_mpls_tp_channel_type_t,int,int *,int *);
extern int bcm_dnx_oam_mpls_tp_channel_type_rx_set(int,bcm_oam_mpls_tp_channel_type_t,int,int *);
extern int bcm_dnx_oam_mpls_tp_channel_type_tx_delete(int,bcm_oam_mpls_tp_channel_type_t,int);
extern int bcm_dnx_oam_mpls_tp_channel_type_tx_get(int,bcm_oam_mpls_tp_channel_type_t,int *);
extern int bcm_dnx_oam_mpls_tp_channel_type_tx_set(int,bcm_oam_mpls_tp_channel_type_t,int);
extern int bcm_dnx_oam_opcode_map_get(int,int,int *);
extern int bcm_dnx_oam_opcode_map_set(int,int,int);
extern int bcm_dnx_oam_performance_event_register(int,bcm_oam_event_types_t,bcm_oam_performance_event_cb,void *);
extern int bcm_dnx_oam_performance_event_unregister(int,bcm_oam_event_types_t,bcm_oam_performance_event_cb);
extern int bcm_dnx_oam_profile_action_get(int,uint32,bcm_oam_profile_t,bcm_oam_action_key_t *,bcm_oam_action_result_t *);
extern int bcm_dnx_oam_profile_action_set(int,uint32,bcm_oam_profile_t,bcm_oam_action_key_t *,bcm_oam_action_result_t *);
extern int bcm_dnx_oam_profile_create(int,uint32,bcm_oam_profile_type_t,bcm_oam_profile_t *);
extern int bcm_dnx_oam_profile_delete(int,uint32,bcm_oam_profile_t);
extern int bcm_dnx_oam_profile_id_get_by_type(int,uint8,bcm_oam_profile_type_t,uint32 *,bcm_oam_profile_t *);
extern int bcm_dnx_oam_protection_packet_header_set(int,bcm_pkt_blk_t *);
extern int bcm_dnx_oam_reflector_encap_create(int,uint32,bcm_if_t *);
extern int bcm_dnx_oam_reflector_encap_destroy(int,uint32,bcm_if_t);
extern int bcm_dnx_oam_sd_sf_detection_add(int,bcm_oam_sd_sf_detection_t *);
extern int bcm_dnx_oam_sd_sf_detection_delete(int,bcm_oam_sd_sf_detection_t *);
extern int bcm_dnx_oam_sd_sf_detection_get(int,bcm_oam_sd_sf_detection_t *);
extern int bcm_dnx_oam_tst_rx_add(int,bcm_oam_tst_rx_t *);
extern int bcm_dnx_oam_tst_rx_delete(int,bcm_oam_tst_rx_t *);
extern int bcm_dnx_oam_tst_rx_get(int,bcm_oam_tst_rx_t *);
extern int bcm_dnx_oam_tst_tx_add(int,bcm_oam_tst_tx_t *);
extern int bcm_dnx_oam_tst_tx_delete(int,bcm_oam_tst_tx_t *);
extern int bcm_dnx_oam_tst_tx_get(int,bcm_oam_tst_tx_t *);
extern int bcm_dnx_oam_y_1711_alarm_add(int,bcm_oam_y_1711_alarm_t *);
extern int bcm_dnx_oam_y_1711_alarm_delete(int,bcm_oam_y_1711_alarm_t *);
extern int bcm_dnx_oam_y_1711_alarm_get(int,bcm_oam_y_1711_alarm_t *);

#endif /* BCM_DNX_SUPPORT */
#endif /* !_BCM_INT_DNX_OAM_DISPATCH_H */
