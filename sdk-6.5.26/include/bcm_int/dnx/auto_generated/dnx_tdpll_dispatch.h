/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 *
 * File:        dnx_tdpll_dispatch.h
 * Purpose:     dnx tdpll driver BCM API dispatch table
 * Generator:   modules_dispatch.py
 */

#ifndef _BCM_INT_DNX_TDPLL_DISPATCH_H
#define _BCM_INT_DNX_TDPLL_DISPATCH_H

#include <bcm/types.h>
#include <bcm_int/dispatch.h>

#ifdef BCM_DNX_SUPPORT

extern int bcm_dnx_tdpll_dpll_bandwidth_get(int,int,int,bcm_tdpll_dpll_bandwidth_t *);
extern int bcm_dnx_tdpll_dpll_bandwidth_set(int,int,int,bcm_tdpll_dpll_bandwidth_t *);
extern int bcm_dnx_tdpll_dpll_bindings_get(int,int,int,bcm_tdpll_dpll_bindings_t *);
extern int bcm_dnx_tdpll_dpll_bindings_set(int,int,int,bcm_tdpll_dpll_bindings_t *);
extern int bcm_dnx_tdpll_dpll_phase_control_get(int,int,int,bcm_tdpll_dpll_phase_control_t *);
extern int bcm_dnx_tdpll_dpll_phase_control_set(int,int,int,bcm_tdpll_dpll_phase_control_t *);
extern int bcm_dnx_tdpll_dpll_reference_get(int,int,int,int *,int *);
extern int bcm_dnx_tdpll_esmc_essm_code_get(int,int,int,bcm_esmc_essm_code_t *);
extern int bcm_dnx_tdpll_esmc_essm_code_set(int,int,int,bcm_esmc_essm_code_t);
extern int bcm_dnx_tdpll_esmc_holdover_ql_get(int,int,int,bcm_esmc_quality_level_t *);
extern int bcm_dnx_tdpll_esmc_holdover_ql_set(int,int,int,bcm_esmc_quality_level_t);
extern int bcm_dnx_tdpll_esmc_mac_get(int,int,int,bcm_mac_t *);
extern int bcm_dnx_tdpll_esmc_mac_set(int,int,int,bcm_mac_t *);
extern int bcm_dnx_tdpll_esmc_ql_get(int,int,int,bcm_esmc_quality_level_t *);
extern int bcm_dnx_tdpll_esmc_ql_set(int,int,int,bcm_esmc_quality_level_t);
extern int bcm_dnx_tdpll_esmc_rx_enable_get(int,int,int *);
extern int bcm_dnx_tdpll_esmc_rx_enable_set(int,int,int);
extern int bcm_dnx_tdpll_esmc_rx_portbitmap_get(int,int,int,bcm_pbmp_t *);
extern int bcm_dnx_tdpll_esmc_rx_portbitmap_set(int,int,int,bcm_pbmp_t);
extern int bcm_dnx_tdpll_esmc_rx_state_machine(int,int,int,bcm_esmc_pdu_data_t *);
extern int bcm_dnx_tdpll_esmc_tx_enable_get(int,int,int,int *);
extern int bcm_dnx_tdpll_esmc_tx_enable_set(int,int,int,int);
extern int bcm_dnx_tdpll_esmc_tx_portbitmap_get(int,int,int,bcm_pbmp_t *);
extern int bcm_dnx_tdpll_esmc_tx_portbitmap_set(int,int,int,bcm_pbmp_t);
extern int bcm_dnx_tdpll_event_callback_register(int,int,bcm_tdpll_event_cb_f);
extern int bcm_dnx_tdpll_event_callback_unregister(int,int);
extern int bcm_dnx_tdpll_input_clock_best_get(int,int,int,int *);
extern int bcm_dnx_tdpll_input_clock_callback_register(int,int,bcm_tdpll_callback_type_t,bcm_tdpll_input_clock_cb);
extern int bcm_dnx_tdpll_input_clock_callback_unregister(int,int,bcm_tdpll_callback_type_t);
extern int bcm_dnx_tdpll_input_clock_control(int,int,int);
extern int bcm_dnx_tdpll_input_clock_enable_get(int,int,int,int *);
extern int bcm_dnx_tdpll_input_clock_enable_set(int,int,int,int);
extern int bcm_dnx_tdpll_input_clock_frequency_error_get(int,int,int,int *);
extern int bcm_dnx_tdpll_input_clock_frequency_get(int,int,int,uint32 *,uint32 *);
extern int bcm_dnx_tdpll_input_clock_frequency_set(int,int,int,uint32,uint32);
extern int bcm_dnx_tdpll_input_clock_l1mux_get(int,int,int,bcm_tdpll_input_clock_l1mux_t *);
extern int bcm_dnx_tdpll_input_clock_l1mux_set(int,int,int,bcm_tdpll_input_clock_l1mux_t *);
extern int bcm_dnx_tdpll_input_clock_lockout_get(int,int,int,int *);
extern int bcm_dnx_tdpll_input_clock_lockout_set(int,int,int,int);
extern int bcm_dnx_tdpll_input_clock_mac_get(int,int,int,bcm_mac_t *);
extern int bcm_dnx_tdpll_input_clock_mac_set(int,int,int,bcm_mac_t *);
extern int bcm_dnx_tdpll_input_clock_monitor_callback_register(int,int,bcm_tdpll_input_clock_monitor_cb);
extern int bcm_dnx_tdpll_input_clock_monitor_callback_unregister(int,int);
extern int bcm_dnx_tdpll_input_clock_monitor_interval_get(int,int,uint32 *);
extern int bcm_dnx_tdpll_input_clock_monitor_interval_set(int,int,uint32);
extern int bcm_dnx_tdpll_input_clock_monitor_threshold_get(int,int,bcm_tdpll_input_clock_monitor_type_t,uint32 *);
extern int bcm_dnx_tdpll_input_clock_monitor_threshold_set(int,int,bcm_tdpll_input_clock_monitor_type_t,uint32);
extern int bcm_dnx_tdpll_input_clock_priority_get(int,int,int,int *);
extern int bcm_dnx_tdpll_input_clock_priority_set(int,int,int,int);
extern int bcm_dnx_tdpll_input_clock_ql_change_callback_register(int,int,bcm_tdpll_input_clock_ql_change_cb);
extern int bcm_dnx_tdpll_input_clock_ql_change_callback_unregister(int,int);
extern int bcm_dnx_tdpll_input_clock_ql_enabled_get(int,int,int,int *);
extern int bcm_dnx_tdpll_input_clock_ql_enabled_set(int,int,int,int);
extern int bcm_dnx_tdpll_input_clock_ql_get(int,int,int,bcm_esmc_quality_level_t *);
extern int bcm_dnx_tdpll_input_clock_ql_set(int,int,int,bcm_esmc_quality_level_t);
extern int bcm_dnx_tdpll_input_clock_revertive_get(int,int,int,int *);
extern int bcm_dnx_tdpll_input_clock_revertive_set(int,int,int,int);
extern int bcm_dnx_tdpll_input_clock_selector_callback_register(int,int,bcm_tdpll_input_clock_selector_cb);
extern int bcm_dnx_tdpll_input_clock_selector_callback_unregister(int,int);
extern int bcm_dnx_tdpll_input_clock_threshold_state_get(int,int,int,bcm_tdpll_input_clock_monitor_type_t,int *);
extern int bcm_dnx_tdpll_input_clock_valid_get(int,int,int,int *);
extern int bcm_dnx_tdpll_input_clock_valid_set(int,int,int,int);
extern int bcm_dnx_tdpll_output_clock_create(int,int,int,bcm_pbmp_t,bcm_tdpll_dpll_bandwidth_t *);
extern int bcm_dnx_tdpll_output_clock_deriv_frequency_get(int,int,int,uint32 *);
extern int bcm_dnx_tdpll_output_clock_deriv_frequency_set(int,int,int,uint32);
extern int bcm_dnx_tdpll_output_clock_enable_get(int,int,int,int *);
extern int bcm_dnx_tdpll_output_clock_enable_set(int,int,int,int);
extern int bcm_dnx_tdpll_output_clock_holdover_data_get(int,int,int,bcm_tdpll_holdover_data_t *);
extern int bcm_dnx_tdpll_output_clock_holdover_frequency_set(int,int,int,bcm_tdpll_frequency_correction_t);
extern int bcm_dnx_tdpll_output_clock_holdover_mode_get(int,int,int,bcm_tdpll_holdover_mode_t *);
extern int bcm_dnx_tdpll_output_clock_holdover_mode_set(int,int,int,bcm_tdpll_holdover_mode_t);
extern int bcm_dnx_tdpll_output_clock_holdover_reset(int,int,int);
extern int bcm_dnx_tdpll_output_clock_synth_frequency_get(int,int,int,uint32 *,uint32 *);
extern int bcm_dnx_tdpll_output_clock_synth_frequency_set(int,int,int,uint32,uint32);

#endif /* BCM_DNX_SUPPORT */
#endif /* !_BCM_INT_DNX_TDPLL_DISPATCH_H */
