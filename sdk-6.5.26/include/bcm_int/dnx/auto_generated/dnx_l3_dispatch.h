/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 *
 * File:        dnx_l3_dispatch.h
 * Purpose:     dnx l3 driver BCM API dispatch table
 * Generator:   modules_dispatch.py
 */

#ifndef _BCM_INT_DNX_L3_DISPATCH_H
#define _BCM_INT_DNX_L3_DISPATCH_H

#include <bcm/types.h>
#include <bcm_int/dispatch.h>

#ifdef BCM_DNX_SUPPORT

extern int bcm_dnx_l3_ecmp_create(int,uint32,bcm_l3_egress_ecmp_t *,int,bcm_l3_ecmp_member_t *);
extern int bcm_dnx_l3_ecmp_destroy(int,bcm_if_t);
extern int bcm_dnx_l3_ecmp_tunnel_priority_map_create(int,bcm_l3_ecmp_tunnel_priority_map_info_t *);
extern int bcm_dnx_l3_ecmp_tunnel_priority_map_destroy(int,bcm_l3_ecmp_tunnel_priority_map_info_t *);
extern int bcm_dnx_l3_ecmp_tunnel_priority_map_get(int,bcm_l3_ecmp_tunnel_priority_map_info_t *);
extern int bcm_dnx_l3_ecmp_tunnel_priority_map_set(int,bcm_l3_ecmp_tunnel_priority_map_info_t *);
extern int bcm_dnx_l3_egress_allocation_get(int,uint32,bcm_l3_egress_t *,uint32,bcm_if_t *);
extern int bcm_dnx_l3_egress_arp_traverse(int,bcm_l3_egress_traverse_cb,void *);
extern int bcm_dnx_l3_egress_create(int,uint32,bcm_l3_egress_t *,bcm_if_t *);
extern int bcm_dnx_l3_egress_destroy(int,bcm_if_t);
extern int bcm_dnx_l3_egress_ecmp_add(int,bcm_l3_egress_ecmp_t *,bcm_if_t);
extern int bcm_dnx_l3_egress_ecmp_create(int,bcm_l3_egress_ecmp_t *,int,bcm_if_t *);
extern int bcm_dnx_l3_egress_ecmp_delete(int,bcm_l3_egress_ecmp_t *,bcm_if_t);
extern int bcm_dnx_l3_egress_ecmp_destroy(int,bcm_l3_egress_ecmp_t *);
extern int bcm_dnx_l3_egress_ecmp_find(int,int,bcm_if_t *,bcm_l3_egress_ecmp_t *);
extern int bcm_dnx_l3_egress_ecmp_get(int,bcm_l3_egress_ecmp_t *,int,bcm_if_t *,int *);
extern int bcm_dnx_l3_egress_ecmp_resilient_add(int,uint32,bcm_l3_egress_ecmp_resilient_entry_t *);
extern int bcm_dnx_l3_egress_ecmp_resilient_delete(int,uint32,bcm_l3_egress_ecmp_resilient_entry_t *);
extern int bcm_dnx_l3_egress_ecmp_resilient_replace(int,uint32,bcm_l3_egress_ecmp_resilient_entry_t *,int *,bcm_l3_egress_ecmp_resilient_entry_t *);
extern int bcm_dnx_l3_egress_ecmp_resilient_traverse(int,uint32,bcm_l3_egress_ecmp_resilient_entry_t *,bcm_l3_egress_ecmp_resilient_traverse_cb,void *);
extern int bcm_dnx_l3_egress_ecmp_traverse(int,bcm_l3_egress_ecmp_traverse_cb,void *);
extern int bcm_dnx_l3_egress_ecmp_tunnel_priority_set(int,bcm_l3_egress_ecmp_t *,int,bcm_if_t *);
extern int bcm_dnx_l3_egress_ecmp_user_profile_create(int,bcm_l3_egress_ecmp_t *,int,bcm_if_t *);
extern int bcm_dnx_l3_egress_ecmp_user_profile_destroy(int,bcm_l3_egress_ecmp_t *);
extern int bcm_dnx_l3_egress_ecmp_user_profile_get(int,bcm_l3_egress_ecmp_t *,int,bcm_if_t *,int *);
extern int bcm_dnx_l3_egress_find(int,bcm_l3_egress_t *,bcm_if_t *);
extern int bcm_dnx_l3_egress_get(int,bcm_if_t,bcm_l3_egress_t *);
extern int bcm_dnx_l3_egress_multi_alloc(int,bcm_l3_egress_multi_info_t,bcm_if_t *);
extern int bcm_dnx_l3_egress_multi_free(int,bcm_if_t);
extern int bcm_dnx_l3_egress_multipath_add(int,bcm_if_t,bcm_if_t);
extern int bcm_dnx_l3_egress_multipath_create(int,uint32,int,bcm_if_t *,bcm_if_t *);
extern int bcm_dnx_l3_egress_multipath_delete(int,bcm_if_t,bcm_if_t);
extern int bcm_dnx_l3_egress_multipath_destroy(int,bcm_if_t);
extern int bcm_dnx_l3_egress_multipath_find(int,int,bcm_if_t *,bcm_if_t *);
extern int bcm_dnx_l3_egress_multipath_get(int,bcm_if_t,int,bcm_if_t *,int *);
extern int bcm_dnx_l3_egress_multipath_max_create(int,uint32,int,int,bcm_if_t *,bcm_if_t *);
extern int bcm_dnx_l3_egress_multipath_traverse(int,bcm_l3_egress_multipath_traverse_cb,void *);
extern int bcm_dnx_l3_egress_traverse(int,bcm_l3_egress_traverse_cb,void *);
extern int bcm_dnx_l3_enable_set(int,int);
extern int bcm_dnx_l3_host_add(int,bcm_l3_host_t *);
extern int bcm_dnx_l3_host_age(int,uint32,bcm_l3_host_traverse_cb,void *);
extern int bcm_dnx_l3_host_conflict_get(int,bcm_l3_key_t *,bcm_l3_key_t *,int,int *);
extern int bcm_dnx_l3_host_delete(int,bcm_l3_host_t *);
extern int bcm_dnx_l3_host_delete_all(int,bcm_l3_host_t *);
extern int bcm_dnx_l3_host_delete_by_network(int,bcm_l3_route_t *);
extern int bcm_dnx_l3_host_find(int,bcm_l3_host_t *);
extern int bcm_dnx_l3_host_invalidate_entry(int,bcm_ip_t);
extern int bcm_dnx_l3_host_traverse(int,uint32,uint32,uint32,bcm_l3_host_traverse_cb,void *);
extern int bcm_dnx_l3_host_validate_entry(int,bcm_ip_t);
extern int bcm_dnx_l3_ingress_create(int,bcm_l3_ingress_t *,bcm_if_t *);
extern int bcm_dnx_l3_ingress_destroy(int,bcm_if_t);
extern int bcm_dnx_l3_ingress_find(int,bcm_l3_ingress_t *,bcm_if_t *);
extern int bcm_dnx_l3_ingress_get(int,bcm_if_t,bcm_l3_ingress_t *);
extern int bcm_dnx_l3_ingress_traverse(int,bcm_l3_ingress_traverse_cb,void *);
extern int bcm_dnx_l3_intf_create(int,bcm_l3_intf_t *);
extern int bcm_dnx_l3_intf_delete(int,bcm_l3_intf_t *);
extern int bcm_dnx_l3_intf_delete_all(int);
extern int bcm_dnx_l3_intf_find(int,bcm_l3_intf_t *);
extern int bcm_dnx_l3_intf_find_vlan(int,bcm_l3_intf_t *);
extern int bcm_dnx_l3_intf_get(int,bcm_l3_intf_t *);
extern int bcm_dnx_l3_intf_vpn_get(int,bcm_if_t,uint32 *,bcm_vpn_t *);
extern int bcm_dnx_l3_intf_vpn_set(int,bcm_if_t,uint32,bcm_vpn_t);
extern int bcm_dnx_l3_route_add(int,bcm_l3_route_t *);
extern int bcm_dnx_l3_route_age(int,uint32,bcm_l3_route_traverse_cb,void *);
extern int bcm_dnx_l3_route_delete(int,bcm_l3_route_t *);
extern int bcm_dnx_l3_route_delete_all(int,bcm_l3_route_t *);
extern int bcm_dnx_l3_route_get(int,bcm_l3_route_t *);
extern int bcm_dnx_l3_route_max_ecmp_get(int,int *);
extern int bcm_dnx_l3_route_max_ecmp_set(int,int);
extern int bcm_dnx_l3_route_multipath_get(int,bcm_l3_route_t *,bcm_l3_route_t *,int,int *);
extern int bcm_dnx_l3_route_traverse(int,uint32,uint32,uint32,bcm_l3_route_traverse_cb,void *);
extern int bcm_dnx_l3_source_bind_add(int,bcm_l3_source_bind_t *);
extern int bcm_dnx_l3_source_bind_delete(int,bcm_l3_source_bind_t *);
extern int bcm_dnx_l3_source_bind_delete_all(int);
extern int bcm_dnx_l3_source_bind_enable_get(int,bcm_port_t,int *);
extern int bcm_dnx_l3_source_bind_enable_set(int,bcm_port_t,int);
extern int bcm_dnx_l3_source_bind_get(int,bcm_l3_source_bind_t *);
extern int bcm_dnx_l3_source_bind_traverse(int,bcm_l3_source_bind_traverse_cb,void *);
extern int bcm_dnx_l3_vpbr_entry_add(int,bcm_l3_vpbr_entry_t *);
extern int bcm_dnx_l3_vpbr_entry_delete(int,bcm_l3_vpbr_entry_t *);
extern int bcm_dnx_l3_vpbr_entry_delete_all(int,bcm_l3_vpbr_entry_t *);
extern int bcm_dnx_l3_vpbr_entry_get(int,bcm_l3_vpbr_entry_t *);
extern int bcm_dnx_l3_vpbr_traverse(int,uint32,bcm_l3_vpbr_traverse_cb,void *);
extern int bcm_dnx_l3_vrrp_add(int,bcm_vlan_t,uint32);
extern int bcm_dnx_l3_vrrp_config_add(int,uint32,bcm_vlan_t,uint32);
extern int bcm_dnx_l3_vrrp_config_delete(int,uint32,bcm_vlan_t,uint32);
extern int bcm_dnx_l3_vrrp_config_delete_all(int,uint32,bcm_vlan_t);
extern int bcm_dnx_l3_vrrp_config_get(int,uint32,bcm_vlan_t,uint32,uint32 *,uint32 *);
extern int bcm_dnx_l3_vrrp_delete(int,bcm_vlan_t,uint32);
extern int bcm_dnx_l3_vrrp_delete_all(int,bcm_vlan_t);
extern int bcm_dnx_l3_vrrp_get(int,bcm_vlan_t,int,int *,int *);

#endif /* BCM_DNX_SUPPORT */
#endif /* !_BCM_INT_DNX_L3_DISPATCH_H */
