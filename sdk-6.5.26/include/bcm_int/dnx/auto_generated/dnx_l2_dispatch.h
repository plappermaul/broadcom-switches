/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 *
 * File:        dnx_l2_dispatch.h
 * Purpose:     dnx l2 driver BCM API dispatch table
 * Generator:   modules_dispatch.py
 */

#ifndef _BCM_INT_DNX_L2_DISPATCH_H
#define _BCM_INT_DNX_L2_DISPATCH_H

#include <bcm/types.h>
#include <bcm_int/dispatch.h>

#ifdef BCM_DNX_SUPPORT

extern int bcm_dnx_l2_addr_add(int,bcm_l2_addr_t *);
extern int bcm_dnx_l2_addr_by_struct_delete(int,bcm_l2_addr_t *);
extern int bcm_dnx_l2_addr_by_struct_get(int,bcm_l2_addr_t *);
extern int bcm_dnx_l2_addr_delete(int,bcm_mac_t,bcm_vlan_t);
extern int bcm_dnx_l2_addr_delete_by_mac(int,bcm_mac_t,uint32);
extern int bcm_dnx_l2_addr_delete_by_mac_port(int,bcm_mac_t,bcm_module_t,bcm_port_t,uint32);
extern int bcm_dnx_l2_addr_delete_by_port(int,bcm_module_t,bcm_port_t,uint32);
extern int bcm_dnx_l2_addr_delete_by_trunk(int,bcm_trunk_t,uint32);
extern int bcm_dnx_l2_addr_delete_by_vlan(int,bcm_vlan_t,uint32);
extern int bcm_dnx_l2_addr_delete_by_vlan_gport_multi(int,uint32,int,bcm_vlan_t *,bcm_gport_t *);
extern int bcm_dnx_l2_addr_delete_by_vlan_port(int,bcm_vlan_t,bcm_module_t,bcm_port_t,uint32);
extern int bcm_dnx_l2_addr_delete_by_vlan_trunk(int,bcm_vlan_t,bcm_trunk_t,uint32);
extern int bcm_dnx_l2_addr_get(int,bcm_mac_t,bcm_vlan_t,bcm_l2_addr_t *);
extern int bcm_dnx_l2_addr_msg_distribute_get(int,bcm_l2_addr_distribute_t *);
extern int bcm_dnx_l2_addr_msg_distribute_set(int,bcm_l2_addr_distribute_t *);
extern int bcm_dnx_l2_addr_register(int,bcm_l2_addr_callback_t,void *);
extern int bcm_dnx_l2_addr_unregister(int,bcm_l2_addr_callback_t,void *);
extern int bcm_dnx_l2_age_timer_get(int,int *);
extern int bcm_dnx_l2_age_timer_meta_cycle_get(int,int *);
extern int bcm_dnx_l2_age_timer_meta_cycle_set(int,int);
extern int bcm_dnx_l2_age_timer_set(int,int);
extern int bcm_dnx_l2_cache_delete(int,int);
extern int bcm_dnx_l2_cache_delete_all(int);
extern int bcm_dnx_l2_cache_get(int,int,bcm_l2_cache_addr_t *);
extern int bcm_dnx_l2_cache_profile_get(int,int,uint32,uint32,bcm_l2cp_profile_info_t *);
extern int bcm_dnx_l2_cache_profile_set(int,int,uint32,uint32,bcm_l2cp_profile_info_t *);
extern int bcm_dnx_l2_cache_set(int,int,bcm_l2_cache_addr_t *,int *);
extern int bcm_dnx_l2_cache_size_get(int,int *);
extern int bcm_dnx_l2_cache_vpn_to_profile_map_get(int,uint32,uint32 *);
extern int bcm_dnx_l2_cache_vpn_to_profile_map_set(int,uint32,uint32);
extern int bcm_dnx_l2_clear(int);
extern int bcm_dnx_l2_egress_create(int,bcm_l2_egress_t *);
extern int bcm_dnx_l2_egress_destroy(int,bcm_if_t);
extern int bcm_dnx_l2_egress_find(int,bcm_l2_egress_t *,bcm_if_t *);
extern int bcm_dnx_l2_egress_get(int,bcm_if_t,bcm_l2_egress_t *);
extern int bcm_dnx_l2_egress_traverse(int,bcm_l2_egress_traverse_cb,void *);
extern int bcm_dnx_l2_gport_control_info_get(int,bcm_l2_gport_control_info_t *);
extern int bcm_dnx_l2_gport_control_info_set(int,bcm_l2_gport_control_info_t *);
extern int bcm_dnx_l2_gport_forward_info_get(int,int,bcm_l2_gport_forward_info_t *);
extern int bcm_dnx_l2_key_dump(int,char *,bcm_l2_addr_t *,char *);
extern int bcm_dnx_l2_learn_action_resolution_get(int,bcm_l2_learn_action_resolution_t *);
extern int bcm_dnx_l2_learn_action_resolution_set(int,bcm_l2_learn_action_resolution_t *);
extern int bcm_dnx_l2_learn_limit_get(int,bcm_l2_learn_limit_t *);
extern int bcm_dnx_l2_learn_limit_set(int,bcm_l2_learn_limit_t *);
extern int bcm_dnx_l2_learn_msgs_config_get(int,bcm_l2_learn_msgs_config_t *);
extern int bcm_dnx_l2_learn_msgs_config_set(int,bcm_l2_learn_msgs_config_t *);
extern int bcm_dnx_l2_match_masked_traverse(int,uint32,bcm_l2_addr_t *,bcm_l2_addr_t *,bcm_l2_traverse_cb,void *);
extern int bcm_dnx_l2_matched_traverse(int,uint32,bcm_l2_addr_t *,bcm_l2_traverse_cb,void *);
extern int bcm_dnx_l2_replace(int,uint32,bcm_l2_addr_t *,bcm_module_t,bcm_port_t,bcm_trunk_t);
extern int bcm_dnx_l2_replace_match(int,uint32,bcm_l2_addr_t *,bcm_l2_addr_t *,bcm_l2_addr_t *,bcm_l2_addr_t *);
extern int bcm_dnx_l2_station_add(int,int *,bcm_l2_station_t *);
extern int bcm_dnx_l2_station_delete(int,int);
extern int bcm_dnx_l2_station_get(int,int,bcm_l2_station_t *);
extern int bcm_dnx_l2_traverse(int,bcm_l2_traverse_cb,void *);
extern int bcm_dnx_l2_tunnel_add(int,bcm_mac_t,bcm_vlan_t);
extern int bcm_dnx_l2_tunnel_delete(int,bcm_mac_t,bcm_vlan_t);
extern int bcm_dnx_l2_tunnel_delete_all(int);

#endif /* BCM_DNX_SUPPORT */
#endif /* !_BCM_INT_DNX_L2_DISPATCH_H */
