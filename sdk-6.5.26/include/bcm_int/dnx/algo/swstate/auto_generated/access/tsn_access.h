/** \file algo/swstate/auto_generated/access/tsn_access.h
 *
 * sw state functions declarations
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 */

#ifndef __TSN_ACCESS_H__
#define __TSN_ACCESS_H__

#include <bcm_int/dnx/algo/swstate/auto_generated/types/tsn_types.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <include/bcm/cosq.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_device.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_tsn.h>
/*
 * TYPEDEFs
 */

/**
 * implemented by: tsn_is_init
 */
typedef int (*tsn_is_init_cb)(
    int unit, uint8 *is_init);

/**
 * implemented by: tsn_init
 */
typedef int (*tsn_init_cb)(
    int unit);

/**
 * implemented by: tsn_tas_db_gate_alloc_set
 */
typedef int (*tsn_tas_db_gate_alloc_set_cb)(
    int unit, uint32 gate_alloc_idx_0, dnx_algo_res_t gate_alloc);

/**
 * implemented by: tsn_tas_db_gate_alloc_get
 */
typedef int (*tsn_tas_db_gate_alloc_get_cb)(
    int unit, uint32 gate_alloc_idx_0, dnx_algo_res_t *gate_alloc);

/**
 * implemented by: tsn_tas_db_gate_alloc_alloc
 */
typedef int (*tsn_tas_db_gate_alloc_alloc_cb)(
    int unit);

/**
 * implemented by: tsn_tas_db_gate_alloc_create
 */
typedef int (*tsn_tas_db_gate_alloc_create_cb)(
    int unit, uint32 gate_alloc_idx_0, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: tsn_tas_db_gate_alloc_allocate_single
 */
typedef int (*tsn_tas_db_gate_alloc_allocate_single_cb)(
    int unit, uint32 gate_alloc_idx_0, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: tsn_tas_db_gate_alloc_free_single
 */
typedef int (*tsn_tas_db_gate_alloc_free_single_cb)(
    int unit, uint32 gate_alloc_idx_0, int element, void *extra_arguments);

/**
 * implemented by: tsn_tas_db_gate_alloc_is_allocated
 */
typedef int (*tsn_tas_db_gate_alloc_is_allocated_cb)(
    int unit, uint32 gate_alloc_idx_0, int element, uint8 *is_allocated);

/**
 * implemented by: tsn_tas_db_gate_alloc_nof_free_elements_get
 */
typedef int (*tsn_tas_db_gate_alloc_nof_free_elements_get_cb)(
    int unit, uint32 gate_alloc_idx_0, int *nof_free_elements);

/**
 * implemented by: tsn_tas_db_pid_alloc_set
 */
typedef int (*tsn_tas_db_pid_alloc_set_cb)(
    int unit, uint32 pid_alloc_idx_0, dnx_algo_res_t pid_alloc);

/**
 * implemented by: tsn_tas_db_pid_alloc_get
 */
typedef int (*tsn_tas_db_pid_alloc_get_cb)(
    int unit, uint32 pid_alloc_idx_0, dnx_algo_res_t *pid_alloc);

/**
 * implemented by: tsn_tas_db_pid_alloc_alloc
 */
typedef int (*tsn_tas_db_pid_alloc_alloc_cb)(
    int unit);

/**
 * implemented by: tsn_tas_db_pid_alloc_create
 */
typedef int (*tsn_tas_db_pid_alloc_create_cb)(
    int unit, uint32 pid_alloc_idx_0, dnx_algo_res_create_data_t * data, void *extra_arguments);

/**
 * implemented by: tsn_tas_db_pid_alloc_allocate_single
 */
typedef int (*tsn_tas_db_pid_alloc_allocate_single_cb)(
    int unit, uint32 pid_alloc_idx_0, uint32 flags, void *extra_arguments, int *element);

/**
 * implemented by: tsn_tas_db_pid_alloc_free_single
 */
typedef int (*tsn_tas_db_pid_alloc_free_single_cb)(
    int unit, uint32 pid_alloc_idx_0, int element, void *extra_arguments);

/**
 * implemented by: tsn_tas_db_pid_alloc_is_allocated
 */
typedef int (*tsn_tas_db_pid_alloc_is_allocated_cb)(
    int unit, uint32 pid_alloc_idx_0, int element, uint8 *is_allocated);

/**
 * implemented by: tsn_tas_db_pid_alloc_nof_free_elements_get
 */
typedef int (*tsn_tas_db_pid_alloc_nof_free_elements_get_cb)(
    int unit, uint32 pid_alloc_idx_0, int *nof_free_elements);

/**
 * implemented by: tsn_tas_db_pid_alloc_nof_allocated_elements_in_range_get
 */
typedef int (*tsn_tas_db_pid_alloc_nof_allocated_elements_in_range_get_cb)(
    int unit, uint32 pid_alloc_idx_0, int range_start, int nof_elements_in_range, int *nof_allocated_elements);

/**
 * implemented by: tsn_tas_db_egq_if_to_gate_mapping_set
 */
typedef int (*tsn_tas_db_egq_if_to_gate_mapping_set_cb)(
    int unit, uint32 egq_if_to_gate_mapping_idx_0, uint32 egq_if_to_gate_mapping_idx_1, int egq_if_to_gate_mapping);

/**
 * implemented by: tsn_tas_db_egq_if_to_gate_mapping_get
 */
typedef int (*tsn_tas_db_egq_if_to_gate_mapping_get_cb)(
    int unit, uint32 egq_if_to_gate_mapping_idx_0, uint32 egq_if_to_gate_mapping_idx_1, int *egq_if_to_gate_mapping);

/**
 * implemented by: tsn_tas_db_egq_if_to_gate_mapping_alloc
 */
typedef int (*tsn_tas_db_egq_if_to_gate_mapping_alloc_cb)(
    int unit);

/**
 * implemented by: tsn_tas_db_tas_profiles_data_alloc
 */
typedef int (*tsn_tas_db_tas_profiles_data_alloc_cb)(
    int unit);

/**
 * implemented by: tsn_tas_db_tas_profiles_data_profile_state_set
 */
typedef int (*tsn_tas_db_tas_profiles_data_profile_state_set_cb)(
    int unit, uint32 tas_profiles_data_idx_0, uint32 tas_profiles_data_idx_1, bcm_cosq_tas_profile_state_t profile_state);

/**
 * implemented by: tsn_tas_db_tas_profiles_data_profile_state_get
 */
typedef int (*tsn_tas_db_tas_profiles_data_profile_state_get_cb)(
    int unit, uint32 tas_profiles_data_idx_0, uint32 tas_profiles_data_idx_1, bcm_cosq_tas_profile_state_t *profile_state);

/**
 * implemented by: tsn_tas_db_tas_profiles_data_profile_data_set
 */
typedef int (*tsn_tas_db_tas_profiles_data_profile_data_set_cb)(
    int unit, uint32 tas_profiles_data_idx_0, uint32 tas_profiles_data_idx_1, CONST bcm_cosq_tas_profile_t *profile_data);

/**
 * implemented by: tsn_tas_db_tas_profiles_data_profile_data_get
 */
typedef int (*tsn_tas_db_tas_profiles_data_profile_data_get_cb)(
    int unit, uint32 tas_profiles_data_idx_0, uint32 tas_profiles_data_idx_1, CONST bcm_cosq_tas_profile_t **profile_data);

/**
 * implemented by: tsn_tas_db_tas_profiles_data_accual_change_time_set
 */
typedef int (*tsn_tas_db_tas_profiles_data_accual_change_time_set_cb)(
    int unit, uint32 tas_profiles_data_idx_0, uint32 tas_profiles_data_idx_1, bcm_ptp_timestamp_t accual_change_time);

/**
 * implemented by: tsn_tas_db_tas_profiles_data_accual_change_time_get
 */
typedef int (*tsn_tas_db_tas_profiles_data_accual_change_time_get_cb)(
    int unit, uint32 tas_profiles_data_idx_0, uint32 tas_profiles_data_idx_1, bcm_ptp_timestamp_t *accual_change_time);

/**
 * implemented by: tsn_tas_db_tas_profiles_data_port_set
 */
typedef int (*tsn_tas_db_tas_profiles_data_port_set_cb)(
    int unit, uint32 tas_profiles_data_idx_0, uint32 tas_profiles_data_idx_1, bcm_port_t port);

/**
 * implemented by: tsn_tas_db_tas_profiles_data_port_get
 */
typedef int (*tsn_tas_db_tas_profiles_data_port_get_cb)(
    int unit, uint32 tas_profiles_data_idx_0, uint32 tas_profiles_data_idx_1, bcm_port_t *port);

/*
 * STRUCTs
 */

/**
 * This structure holds the access functions for the variable gate_alloc
 */
typedef struct {
    tsn_tas_db_gate_alloc_set_cb set;
    tsn_tas_db_gate_alloc_get_cb get;
    tsn_tas_db_gate_alloc_alloc_cb alloc;
    tsn_tas_db_gate_alloc_create_cb create;
    tsn_tas_db_gate_alloc_allocate_single_cb allocate_single;
    tsn_tas_db_gate_alloc_free_single_cb free_single;
    tsn_tas_db_gate_alloc_is_allocated_cb is_allocated;
    tsn_tas_db_gate_alloc_nof_free_elements_get_cb nof_free_elements_get;
} tsn_tas_db_gate_alloc_cbs;

/**
 * This structure holds the access functions for the variable pid_alloc
 */
typedef struct {
    tsn_tas_db_pid_alloc_set_cb set;
    tsn_tas_db_pid_alloc_get_cb get;
    tsn_tas_db_pid_alloc_alloc_cb alloc;
    tsn_tas_db_pid_alloc_create_cb create;
    tsn_tas_db_pid_alloc_allocate_single_cb allocate_single;
    tsn_tas_db_pid_alloc_free_single_cb free_single;
    tsn_tas_db_pid_alloc_is_allocated_cb is_allocated;
    tsn_tas_db_pid_alloc_nof_free_elements_get_cb nof_free_elements_get;
    tsn_tas_db_pid_alloc_nof_allocated_elements_in_range_get_cb nof_allocated_elements_in_range_get;
} tsn_tas_db_pid_alloc_cbs;

/**
 * This structure holds the access functions for the variable egq_if_to_gate_mapping
 */
typedef struct {
    tsn_tas_db_egq_if_to_gate_mapping_set_cb set;
    tsn_tas_db_egq_if_to_gate_mapping_get_cb get;
    tsn_tas_db_egq_if_to_gate_mapping_alloc_cb alloc;
} tsn_tas_db_egq_if_to_gate_mapping_cbs;

/**
 * This structure holds the access functions for the variable profile_state
 */
typedef struct {
    tsn_tas_db_tas_profiles_data_profile_state_set_cb set;
    tsn_tas_db_tas_profiles_data_profile_state_get_cb get;
} tsn_tas_db_tas_profiles_data_profile_state_cbs;

/**
 * This structure holds the access functions for the variable profile_data
 */
typedef struct {
    tsn_tas_db_tas_profiles_data_profile_data_set_cb set;
    tsn_tas_db_tas_profiles_data_profile_data_get_cb get;
} tsn_tas_db_tas_profiles_data_profile_data_cbs;

/**
 * This structure holds the access functions for the variable accual_change_time
 */
typedef struct {
    tsn_tas_db_tas_profiles_data_accual_change_time_set_cb set;
    tsn_tas_db_tas_profiles_data_accual_change_time_get_cb get;
} tsn_tas_db_tas_profiles_data_accual_change_time_cbs;

/**
 * This structure holds the access functions for the variable port
 */
typedef struct {
    tsn_tas_db_tas_profiles_data_port_set_cb set;
    tsn_tas_db_tas_profiles_data_port_get_cb get;
} tsn_tas_db_tas_profiles_data_port_cbs;

/**
 * This structure holds the access functions for the variable dnx_tas_profile_data_t
 */
typedef struct {
    tsn_tas_db_tas_profiles_data_alloc_cb alloc;
    /**
     * Access struct for profile_state
     */
    tsn_tas_db_tas_profiles_data_profile_state_cbs profile_state;
    /**
     * Access struct for profile_data
     */
    tsn_tas_db_tas_profiles_data_profile_data_cbs profile_data;
    /**
     * Access struct for accual_change_time
     */
    tsn_tas_db_tas_profiles_data_accual_change_time_cbs accual_change_time;
    /**
     * Access struct for port
     */
    tsn_tas_db_tas_profiles_data_port_cbs port;
} tsn_tas_db_tas_profiles_data_cbs;

/**
 * This structure holds the access functions for the variable dnx_tas_db_t
 */
typedef struct {
    /**
     * Access struct for gate_alloc
     */
    tsn_tas_db_gate_alloc_cbs gate_alloc;
    /**
     * Access struct for pid_alloc
     */
    tsn_tas_db_pid_alloc_cbs pid_alloc;
    /**
     * Access struct for egq_if_to_gate_mapping
     */
    tsn_tas_db_egq_if_to_gate_mapping_cbs egq_if_to_gate_mapping;
    /**
     * Access struct for tas_profiles_data
     */
    tsn_tas_db_tas_profiles_data_cbs tas_profiles_data;
} tsn_tas_db_cbs;

/**
 * This structure holds the access functions for the variable dnx_tsn_db_t
 */
typedef struct {
    tsn_is_init_cb is_init;
    tsn_init_cb init;
    /**
     * Access struct for tas_db
     */
    tsn_tas_db_cbs tas_db;
} tsn_cbs;

/*
 * Global Variables
 */

/*
 * Global Variables
 */

extern tsn_cbs tsn;

#endif /* __TSN_ACCESS_H__ */
