/*
 * 
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef _SOC_DNXC_FABRIC_H
#define _SOC_DNXC_FABRIC_H

#if !defined(BCM_DNX_SUPPORT) && !defined(BCM_DNXF_SUPPORT)
#error "This file is for use by DNX and DNXF family only!"
#endif

#include <soc/error.h>
#include <soc/dnxc/dnxc_defs.h>
#include <shared/fabric.h>
#include <soc/sand/shrextend/shrextend_error.h>

#define SOC_DNXC_FABRIC_MESH_TOPOLOGY_LIST_MAX          (224)
#define SOC_DNXC_FABRIC_MAX_NOF_PIPES                   (3)

#define DNXC_FABRIC_LINK_NO_CONNECTIVITY          _SHR_FABRIC_LINK_NO_CONNECTIVITY
#define DNXC_FABRIC_LINK_STATUS_CRC_ERROR         _SHR_FABRIC_LINK_STATUS_CRC_ERROR
#define DNXC_FABRIC_LINK_STATUS_SIZE_ERROR        _SHR_FABRIC_LINK_STATUS_SIZE_ERROR
#define DNXC_FABRIC_LINK_STATUS_CODE_GROUP_ERROR  _SHR_FABRIC_LINK_STATUS_CODE_GROUP_ERROR
#define DNXC_FABRIC_LINK_STATUS_MISALIGN          _SHR_FABRIC_LINK_STATUS_MISALIGN
#define DNXC_FABRIC_LINK_STATUS_NO_SIG_LOCK       _SHR_FABRIC_LINK_STATUS_NO_SIG_LOCK
#define DNXC_FABRIC_LINK_STATUS_NO_SIG_ACCEP      _SHR_FABRIC_LINK_STATUS_NO_SIG_ACCEP
#define DNXC_FABRIC_LINK_STATUS_ERRORED_TOKENS    _SHR_FABRIC_LINK_STATUS_ERRORED_TOKENS
#define DNXC_FABRIC_LINK_STATUS_LOCAL_FAULT       _SHR_FABRIC_LINK_STATUS_LOCAL_FAULT
#define DNXC_FABRIC_LINK_STATUS_REMOTE_FAULT      _SHR_FABRIC_LINK_STATUS_REMOTE_FAULT

#define DNXC_FABRIC_LINK_UNCORRECTABLE_ERROR_INDICATION_BIT  (16)

typedef enum soc_dnxc_fabric_direction_e
{
    soc_dnxc_fabric_direction_rx = 0,
    soc_dnxc_fabric_direction_tx = 1,
    soc_dnxc_fabric_direction_middle = 2,
    soc_dnxc_fabric_direction_middle_local_switch_low = 3,
    soc_dnxc_fabric_direction_middle_local_switch_high = 4
} soc_dnxc_fabric_direction_t;

typedef uint32 soc_dnxc_fabric_pipe_t;

#define SOC_DNXC_FABRIC_PIPE_INIT(fabric_pipe) (fabric_pipe=0)
#define SOC_DNXC_FABRIC_PIPE_SET(fabric_pipe,pipe_num) SHR_BITSET(fabric_pipe,pipe_num)
#define SOC_DNXC_FABRIC_PIPE_CLEAR(fabric_pipe,pipe_num) SHR_BITCLR(fabric_pipe,pipe_num)
#define SOC_DNXC_FABRIC_PIPE_ALL_PIPES_SET(fabric_pipe,nof_pipes) SHR_BITSET_RANGE(fabric_pipe,0,nof_pipes)
#define SOC_DNXC_FABRIC_PIPE_IS_SET(fabric_pipe,pipe_num) (SHR_BITGET(fabric_pipe,pipe_num) ? 1 : 0)
#define SOC_DNXC_FABRIC_PIPE_IS_CLEAR(fabric_pipe,pipe_num) (!(SOC_DNXC_FABRIC_PIPE_IS_SET(fabric_pipe,pipe_num)))
#define SOC_DNXC_FABRIC_PIPE_ALL_PIPES_IS_CLEAR(fabric_pipe) SOC_DNXC_FABRIC_PIPE_IS_INIT(fabric_pipe)
#define SOC_DNXC_FABRIC_PIPE_IS_INIT(fabric_pipe) (fabric_pipe==0)
#define SOC_DNXC_FABRIC_PIPE_MAX_NUM_OF_PRIORITIES (4)
#define SOC_DNXC_FABRIC_PIPE_NUM_OF_FABRIC_PIPE_VALID_CONFIGURATIONS (6)
#define SOC_DNXC_FABRIC_PIPE_MAX_LEN_NAME_PRIORITY_CONFIG (30)

#define SOC_DNXC_FABRIC_PIPE_ALL_PIPES_IS_SET(fabric_pipe,mask_pipes) (fabric_pipe==mask_pipes)
#define SOC_DNXC_FABRIC_PIPE_ALL_PIPES_GET(fabric_pipe,mask) (fabric_pipe&mask)

typedef enum soc_dnxc_fabric_pipe_map_type_e
{
    soc_dnxc_fabric_pipe_map_dual_lr_uc_nlr,
    soc_dnxc_fabric_pipe_map_triple_uc_mc_tdm,
    soc_dnxc_fabric_pipe_map_triple_uc_hp_mc_lp_mc,
    soc_dnxc_fabric_pipe_map_dual_tdm_non_tdm,
    soc_dnxc_fabric_pipe_map_dual_uc_mc,
    soc_dnxc_fabric_pipe_map_triple_custom,
    soc_dnxc_fabric_pipe_map_dual_custom,
    soc_dnxc_fabric_pipe_map_single,
    soc_dnxc_fabric_pipe_map_nof_options
} soc_dnxc_fabric_pipe_map_type_t;

typedef struct soc_dnxc_fabric_pipe_map_s
{
    int nof_pipes;
    int config_uc[SOC_DNXC_FABRIC_PIPE_MAX_NUM_OF_PRIORITIES];
    int config_mc[SOC_DNXC_FABRIC_PIPE_MAX_NUM_OF_PRIORITIES];
    char name[SOC_DNXC_FABRIC_PIPE_MAX_LEN_NAME_PRIORITY_CONFIG];
    soc_dnxc_fabric_pipe_map_type_t mapping_type;
} soc_dnxc_fabric_pipe_map_t;

typedef struct soc_dnxc_fabric_mesh_topology_diag_s
{

    uint32 indication_1;
    uint32 indication_2;
    uint32 indication_3;
    uint32 indication_4;

    int type2_list[SOC_DNXC_FABRIC_MESH_TOPOLOGY_LIST_MAX];
    uint32 link_list_count;

    uint32 rx_control_cells_type1;
    uint32 rx_control_cells_type2;
    uint32 control_cells_type3;

    uint32 status_1;
    uint32 status_1_id1;
    uint32 status_1_id2;

    uint32 status_2;
    uint32 status_2_id1;
    uint32 status_2_id2;

} soc_dnxc_fabric_mesh_topology_diag_t;

typedef struct soc_dnxc_fabric_mesh_topology_info_s
{
    soc_dnxc_fabric_mesh_topology_diag_t mesh_topology_diag[SOC_DNXC_MAX_NOF_MESH_TOPOLOGY];
    int nof_diag;
} soc_dnxc_fabric_mesh_topology_info_t;

shr_error_e soc_dnxc_fabric_mesh_topology_diag_get(
    int unit,
    soc_dnxc_fabric_mesh_topology_info_t * mesh_topology_info);

shr_error_e soc_dnxc_fabric_cable_swap_real_tx_get(
    int unit,
    int lane_id,
    int *srd_tx_real);

shr_error_e soc_dnxc_fabric_fmac_block_enable_get(
    int unit,
    int fmac_block,
    int *enable);

shr_error_e soc_dnxc_fabric_fsrd_block_enable_get(
    int unit,
    int fsrd_block,
    int *enable);

shr_error_e soc_dnxc_fabric_supported_lanes_get(
    int unit,
    bcm_pbmp_t * supported_lanes);

shr_error_e soc_dnxc_fabric_lane_to_logical_port_get(
    int unit,
    int lane,
    int *port);

#endif
