/*
 *         
 * 
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 *     
 * DO NOT EDIT THIS FILE!
 *
 */

#ifndef _TSCBH_SUB10G_H__H_
#define _TSCBH_SUB10G_H__H_

#include <phymod/phymod_definitions.h>
/*Initialize phymod module*/
int tscbh_sub10g_core_identify(const phymod_core_access_t* core, uint32_t core_id, uint32_t* is_identified);

/*Retrive core information*/
int tscbh_sub10g_core_info_get(const phymod_core_access_t* core, phymod_core_info_t* info);

/*Set\get lane mapping*/
int tscbh_sub10g_core_lane_map_set(const phymod_core_access_t* core, const phymod_lane_map_t* lane_map);
int tscbh_sub10g_core_lane_map_get(const phymod_core_access_t* core, phymod_lane_map_t* lane_map);

/*Reset Core*/
int tscbh_sub10g_core_reset_set(const phymod_core_access_t* core, phymod_reset_mode_t reset_mode, phymod_reset_direction_t direction);
int tscbh_sub10g_core_reset_get(const phymod_core_access_t* core, phymod_reset_mode_t reset_mode, phymod_reset_direction_t* direction);

/*Set\get firmware operation mode*/
int tscbh_sub10g_phy_firmware_lane_config_set(const phymod_phy_access_t* phy, phymod_firmware_lane_config_t fw_lane_config);
int tscbh_sub10g_phy_firmware_lane_config_get(const phymod_phy_access_t* phy, phymod_firmware_lane_config_t* fw_lane_config);

/* re-tune rx path*/
int tscbh_sub10g_phy_rx_restart(const phymod_phy_access_t* phy);

/*Set phy polarity*/
int tscbh_sub10g_phy_polarity_set(const phymod_phy_access_t* phy, const phymod_polarity_t* polarity);
int tscbh_sub10g_phy_polarity_get(const phymod_phy_access_t* phy, phymod_polarity_t* polarity);

/*Set\Get TX Parameters*/
int tscbh_sub10g_phy_tx_set(const phymod_phy_access_t* phy, const phymod_tx_t* tx);
int tscbh_sub10g_phy_tx_get(const phymod_phy_access_t* phy, phymod_tx_t* tx);

/*Request for default TX parameters configuration per media type*/
int tscbh_sub10g_phy_media_type_tx_get(const phymod_phy_access_t* phy, phymod_media_typed_t media, phymod_tx_t* tx);

/*Reset phy*/
int tscbh_sub10g_phy_reset_set(const phymod_phy_access_t* phy, const phymod_phy_reset_t* reset);
int tscbh_sub10g_phy_reset_get(const phymod_phy_access_t* phy, phymod_phy_reset_t* reset);

/*Control phy power*/
int tscbh_sub10g_phy_power_set(const phymod_phy_access_t* phy, const phymod_phy_power_t* power);
int tscbh_sub10g_phy_power_get(const phymod_phy_access_t* phy, phymod_phy_power_t* power);

/*Control phy hg2 codec*/
int tscbh_sub10g_phy_hg2_codec_control_set(const phymod_phy_access_t* phy, phymod_phy_hg2_codec_t hg2_codec);
int tscbh_sub10g_phy_hg2_codec_control_get(const phymod_phy_access_t* phy, phymod_phy_hg2_codec_t* hg2_codec);

/*TX transmission control*/
int tscbh_sub10g_phy_tx_lane_control_set(const phymod_phy_access_t* phy, phymod_phy_tx_lane_control_t tx_control);
int tscbh_sub10g_phy_tx_lane_control_get(const phymod_phy_access_t* phy, phymod_phy_tx_lane_control_t* tx_control);

/*Rx control*/
int tscbh_sub10g_phy_rx_lane_control_set(const phymod_phy_access_t* phy, phymod_phy_rx_lane_control_t rx_control);
int tscbh_sub10g_phy_rx_lane_control_get(const phymod_phy_access_t* phy, phymod_phy_rx_lane_control_t* rx_control);

/*forced speed FEC control*/
int tscbh_sub10g_phy_fec_enable_set(const phymod_phy_access_t* phy, uint32_t enable);
int tscbh_sub10g_phy_fec_enable_get(const phymod_phy_access_t* phy, uint32_t* enable);

/*Change OUI to consortium OUI*/
int tscbh_sub10g_phy_autoneg_oui_set(const phymod_phy_access_t* phy, phymod_autoneg_oui_t an_oui);
int tscbh_sub10g_phy_autoneg_oui_get(const phymod_phy_access_t* phy, phymod_autoneg_oui_t* an_oui);

/*energy efficient control*/
int tscbh_sub10g_phy_eee_set(const phymod_phy_access_t* phy, uint32_t enable);
int tscbh_sub10g_phy_eee_get(const phymod_phy_access_t* phy, uint32_t* enable);

/*Set the interface mode, speed and other configuration related to interface.*/
int tscbh_sub10g_phy_interface_config_set(const phymod_phy_access_t* phy, uint32_t flags, const phymod_phy_inf_config_t* config);
int tscbh_sub10g_phy_interface_config_get(const phymod_phy_access_t* phy, uint32_t flags, phymod_ref_clk_t ref_clock, phymod_phy_inf_config_t* config);

/*Set\Get CL72*/
int tscbh_sub10g_phy_cl72_set(const phymod_phy_access_t* phy, uint32_t cl72_en);
int tscbh_sub10g_phy_cl72_get(const phymod_phy_access_t* phy, uint32_t* cl72_en);

/*Get CL72 status*/
int tscbh_sub10g_phy_cl72_status_get(const phymod_phy_access_t* phy, phymod_cl72_status_t* status);

/*Set\Get autoneg*/
int tscbh_sub10g_phy_autoneg_ability_set(const phymod_phy_access_t* phy, const phymod_autoneg_ability_t* an_ability_set_type);
int tscbh_sub10g_phy_autoneg_ability_get(const phymod_phy_access_t* phy, phymod_autoneg_ability_t* an_ability_get_type);

/*Get  remote link autoneg*/
int tscbh_sub10g_phy_autoneg_remote_ability_get(const phymod_phy_access_t* phy, phymod_autoneg_ability_t* an_ability_get_type);

/*Set\Get autoneg*/
int tscbh_sub10g_phy_autoneg_set(const phymod_phy_access_t* phy, const phymod_autoneg_control_t* an);
int tscbh_sub10g_phy_autoneg_get(const phymod_phy_access_t* phy, phymod_autoneg_control_t* an, uint32_t* an_done);

/*Set\Get autoneg restart*/
int tscbh_sub10g_phy_autoneg_restart_set(const phymod_phy_access_t* phy, const phymod_autoneg_control_t* an);

/*Get Autoneg status*/
int tscbh_sub10g_phy_autoneg_status_get(const phymod_phy_access_t* phy, phymod_autoneg_status_t* status);

/*Core Initialization*/
int tscbh_sub10g_core_init(const phymod_core_access_t* core, const phymod_core_init_config_t* init_config, const phymod_core_status_t* core_status);

/*Core vco freq get function*/
int tscbh_sub10g_phy_pll_multiplier_get(const phymod_phy_access_t* phy, uint32_t* core_vco_pll_multiplier);

/*Phy Initialization*/
int tscbh_sub10g_phy_init(const phymod_phy_access_t* phy, const phymod_phy_init_config_t* init_config);

/*Set\get loopback mode*/
int tscbh_sub10g_phy_loopback_set(const phymod_phy_access_t* phy, phymod_loopback_mode_t loopback, uint32_t enable);
int tscbh_sub10g_phy_loopback_get(const phymod_phy_access_t* phy, phymod_loopback_mode_t loopback, uint32_t* enable);

/*Get rx pmd locked indication. This API will clear the pmd_lock_change indication.*/
int tscbh_sub10g_phy_rx_pmd_locked_get(const phymod_phy_access_t* phy, uint32_t* rx_pmd_locked);

/*Get rx signal detect indication*/
int tscbh_sub10g_phy_rx_signal_detect_get(const phymod_phy_access_t* phy, uint32_t* rx_signal_detect);

/*Get link up status indication*/
int tscbh_sub10g_phy_link_status_get(const phymod_phy_access_t* phy, uint32_t* link_status);

/*Read phymod register*/
int tscbh_sub10g_phy_reg_read(const phymod_phy_access_t* phy, uint32_t reg_addr, uint32_t* val);

/*Write phymod register*/
int tscbh_sub10g_phy_reg_write(const phymod_phy_access_t* phy, uint32_t reg_addr, uint32_t val);

/*Set/Get timesync enable*/
int tscbh_sub10g_timesync_enable_set(const phymod_phy_access_t* phy, uint32_t flags, uint32_t enable);
int tscbh_sub10g_timesync_enable_get(const phymod_phy_access_t* phy, uint32_t flags, uint32_t* enable);

/*Set/Get timesync ts_offset*/
int tscbh_sub10g_timesync_offset_set(const phymod_core_access_t* core, uint32_t ts_offset);
int tscbh_sub10g_timesync_offset_get(const phymod_core_access_t* core, uint32_t* ts_offset);

/*Set timesync adjust*/
int tscbh_sub10g_timesync_adjust_set(const phymod_phy_access_t* phy, uint32_t flags, const phymod_timesync_adjust_config_info_t* config_info);

/* get default tx taps*/
int tscbh_sub10g_phy_tx_taps_default_get(const phymod_phy_access_t* phy, phymod_phy_signalling_method_t mode, phymod_tx_t* tx);

/* get default tx taps*/
int tscbh_sub10g_phy_lane_config_default_get(const phymod_phy_access_t* phy, phymod_phy_signalling_method_t mode, phymod_firmware_lane_config_t* lane_config);

/* get PMD micro code and length*/
int tscbh_sub10g_phy_firmware_load_info_get(const phymod_phy_access_t* phy, phymod_firmware_load_info_t* info);

/* reconfig pll on a specific serdes core*/
int tscbh_sub10g_phy_pll_reconfig(const phymod_phy_access_t* phy, uint8_t pll_index, uint32_t pll_div, phymod_ref_clk_t ref_clk);

/* Set/Get synce clock config*/
int tscbh_sub10g_phy_synce_clk_ctrl_set(const phymod_phy_access_t* phy, phymod_synce_clk_ctrl_t cfg);
int tscbh_sub10g_phy_synce_clk_ctrl_get(const phymod_phy_access_t* phy, phymod_synce_clk_ctrl_t* cfg);

/*Get rx ppm*/
int tscbh_sub10g_phy_rx_ppm_get(const phymod_phy_access_t* phy, int16_t* rx_ppm);

/*Get timestamp tx info*/
int tscbh_sub10g_timesync_tx_info_get(const phymod_phy_access_t* phy, phymod_ts_fifo_status_t* ts_tx_info);

/*Get PLL power down*/
int tscbh_sub10g_phy_pll_powerdown_get(const phymod_phy_access_t* phy, uint32_t pll_index, uint32_t* powerdown);

/* Power on/down on core, lane or both */
int tscbh_sub10g_phy_serdes_power_set(const phymod_phy_access_t* phy, phymod_power_option_t power_option, phymod_power_mode_t power_mode);

#endif /*_TSCBH_SUB10G_H_*/
