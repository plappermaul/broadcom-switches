/***********************************************************************************
 *                                                                                 *
 * Copyright: (c) 2021 Broadcom.                                                   *
 * Broadcom Proprietary and Confidential. All rights reserved.                     *
 *                                                                                 *
 ***********************************************************************************/

/*****************************************************************************************
 *****************************************************************************************
 *                                                                                       *
 *  Revision      :   *
 *                                                                                       *
 *  Description   :  Functions used internally and available in debug shell only         *
 *                                                                                       *
 *****************************************************************************************
 *****************************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

#ifndef MERLIN7_PCIEG3_DEBUG_FUNCTIONS_H
#define MERLIN7_PCIEG3_DEBUG_FUNCTIONS_H

#include "merlin7_pcieg3_ipconfig.h"
#include "common/srds_api_enum.h"
#include "common/srds_api_err_code.h"
#include "common/srds_api_uc_common.h"
#include "merlin7_pcieg3_dependencies.h"
#include "merlin7_pcieg3_types.h"
#include "merlin7_pcieg3_usr_includes.h"


/*! @file
 *  @brief Functions used internally and available in debug shell only
 */

/*! @addtogroup APITag
 * @{
 */

/*! @defgroup SerdesAPIDebugFunctionsTag Debug APIs
 * Serdes API functions used for debugging. This includes
 * APIs which collect triange information, perform register dumps,
 * enable/disable loopback modes, and can get/set event logs.
 */

/*! @addtogroup SerdesAPIDebugFunctionsTag
 * @{
 */


#define SRDS_DUMP_BUF_SIZE      (250)

/** Print triage info
 * One function to collect all the triage info in case of errors.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] err_code error code ex. ERR_CODE_POLLING_TIMEOUT.
 * @param[in] print_header A flag to control header print.
 * @param[in] print_data A flag to control data print.
 * @param[in] line __LINE__.
 */
void merlin7_pcieg3_INTERNAL_print_triage_info(srds_access_t *sa__, err_code_t err_code, uint8_t print_header, uint8_t print_data, uint16_t line);

/** Isolate Control pins.
 * Can be used for debug to avoid any interference from inputs coming through pins.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Isolate pins enable (1 = Isolate pins; 0 = Pins not isolated).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_isolate_ctrl_pins(srds_access_t *sa__, uint8_t enable);

/** Isolate Lane Control pins.
 * Can be used for debug to avoid any interference from inputs coming through pins.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Isolate pins enable (1 = Isolate pins; 0 = Pins not isolated).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_isolate_lane_ctrl_pins(srds_access_t *sa__, uint8_t enable);

/** Isolate Lane Control TX pins.
 * Can be used for debug to avoid any interference from inputs coming through pins.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Isolate pins enable (1 = Isolate pins; 0 = Pins not isolated).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_isolate_lane_ctrl_tx_pins(srds_access_t *sa__, uint8_t enable);

/** Isolate Lane Control RX pins.
 * Can be used for debug to avoid any interference from inputs coming through pins.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Isolate pins enable (1 = Isolate pins; 0 = Pins not isolated).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_isolate_lane_ctrl_rx_pins(srds_access_t *sa__, uint8_t enable);

/** Isolate Core Control pins.
 * Can be used for debug to avoid any interference from inputs coming through pins.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Isolate pins enable (1 = Isolate pins; 0 = Pins not isolated).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_isolate_core_ctrl_pins(srds_access_t *sa__, uint8_t enable);

/*-----------------------*/
/*  Stop/Resume uC Lane  */
/*-----------------------*/
/** Stop/Resume Micro operations on a Lane (Graceful Stop).
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Enable micro lane stop (1 = Stop Micro opetarions on lane; 0 = Resume Micro operations on lane).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_stop_uc_lane(srds_access_t *sa__, uint8_t enable);

/** Status of whether Micro is stopped on a lane.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] uc_lane_stopped Micro lane stopped status returned by API.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_stop_uc_lane_status(srds_access_t *sa__, uint8_t *uc_lane_stopped);


/*-------------------------------------------*/
/*  Registers and Core uC RAM Variable Dump  */
/*-------------------------------------------*/
/** Display values of both Core level and (currently selected) Lane level Registers.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] core is current core number.
 * @param[in] lane is the current lane number.
 * @param[out] reg_buffer is a buffer passed through to device access functions. If buffer is NULL,
 *             register dump contents are printed instead of copied to buffer.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_reg_dump(srds_access_t *sa__, uint8_t core, uint8_t lane, char reg_buffer[][SRDS_DUMP_BUF_SIZE]);

#define SRDS_CORE_REG_ONLY      (0x1)
#define SRDS_LANE_REG_ONLY      (0x2)
#define SRDS_LANE_AND_CORE_REG  (SRDS_CORE_REG_ONLY | SRDS_LANE_REG_ONLY)

/** Display values of selected Core level and Lane level Registers.
 * @param[in]  sa__ is an opaque state vector passed through to device access functions.
 * @param[in]  reg_dump_control control for type of register(s) to dump
               (SRDS_LANE_AND_CORE_REG  = dump all registers;
                SRDS_CORE_REG_ONLY      = only dump core registers;
                SRDS_LANE_REG_ONLY      = only dump lane registers).
 * @param[out] reg_buffer is a buffer passed through to device access functions. If buffer is NULL,
 *             register dump contents are printed instead of copied to buffer.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_reg_select_dump(srds_access_t *sa__, uint8_t reg_dump_control, char reg_buffer[][SRDS_DUMP_BUF_SIZE]);

/** Display values of all Core uC RAM Variables (Core RAM Variable Dump).
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] core is current core number.
 * @param[in] data_buff_size is size of user allocated output buffer.
 * @param[out] data_buffer is pointer to a user allocated buffer passed through to device access functions. If buffer is NULL,
 *             core uC RAM dump contents are printed instead of copied to buffer.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_uc_core_var_blk_dump(srds_access_t *sa__,uint8_t core, uint16_t data_buff_size, uint8_t *data_buffer);

/*-------------------------------------------*/
/*  Micro uC RAM Variable Dump               */
/*-------------------------------------------*/

/*-----------------------------*/
/*  uC RAM Lane Variable Dump  */
/*-----------------------------*/

/** Display values of all Lane uC RAM Variables (Lane RAM Variable Dump).
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] core is current core number.
 * @param[in] lane is the current lane number.
 * @param[in] data_buff_size of o/p data buffer-should be equal of srds_info_ptr->lane_var_ram_size
 * @param[out] data_buffer is a pointer to mem allocated buffer passed through to device access functions. If buffer is NULL,
 *             lane uC RAM dump contents are printed instead of copied to buffer.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_uc_lane_var_blk_dump(srds_access_t *sa__, uint8_t core, uint8_t lane, uint32_t data_buff_size,uint8_t *data_buffer);

/*--------------------------*/
/*  TX_PI Jitter Generation */
/*--------------------------*/

/** Generate TX_PI Sinusoidal or Spread-Spectrum (SSC) jitter.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Enable/Disable jitter generation (1 = Enable; 0 = Disable).
 * @param[in] freq_override_val Fixed Frequency Override value (-8192 to + 8192).
 * @param[in] jit_type Jitter generation mode.
 * @param[in] tx_pi_jit_freq_idx Jitter generation frequency index (0 to 63) [see spec for more details].
 * @param[in] tx_pi_jit_amp Jitter generation amplification factor (0 to 63) [max value of this register depends on tx_pi_jit_freq_idx and freq_override values].
 * @return Error Code generated by invalid TX_PI settings (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_tx_pi_jitt_gen(srds_access_t *sa__, uint8_t enable, int16_t freq_override_val, enum srds_tx_pi_freq_jit_gen_enum jit_type, uint8_t tx_pi_jit_freq_idx, uint8_t tx_pi_jit_amp);


/*-------------*/
/*  Event Log  */
/*-------------*/

/** Get Event Log from uC.
 * Dump uC events from core memory.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_read_event_log(srds_access_t *sa__);

/** Write to usr_ctrl_lane_event_log_level uC RAM variable.
 *  Note: This function should be used only during configuration under dp_reset.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] lane_event_log_level Value to be written into usr_ctrl_lane_event_log_level RAM variable.
 * @return Error Code, if generated (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_set_usr_ctrl_lane_event_log_level(srds_access_t *sa__, uint8_t lane_event_log_level);

/** Read value of usr_ctrl_lane_event_log_level uC RAM variable.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] lane_event_log_level Value read from usr_ctrl_lane_event_log_level RAM variable.
 * @return Error Code, if generated (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_get_usr_ctrl_lane_event_log_level(srds_access_t *sa__, uint8_t *lane_event_log_level);

/** Write to usr_ctrl_core_event_log_level uC RAM variable.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] core_event_log_level Value to be written into the usr_ctrl_core_event_log_level RAM variable.
 * @return Error Code, if generated (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_set_usr_ctrl_core_event_log_level(srds_access_t *sa__, uint8_t core_event_log_level);

/** Read value of usr_ctrl_core_event_log_level uC RAM variable.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] core_event_log_level Value read from usr_ctrl_lane_event_log_level RAM variable.
 * @return Error Code, if generated (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_get_usr_ctrl_core_event_log_level(srds_access_t *sa__, uint8_t *core_event_log_level);




/*------------------------------*/
/*  Digital Loopback Functions  */
/*------------------------------*/

/** Enable/Disable Digital Loopback.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Enable Digital Loopback (1 = Enable dig_lpbk; 0 = Disable dig_lpbk).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_dig_lpbk(srds_access_t *sa__, uint8_t enable);





/*! @} SerdesAPIDebugFunctionsTag */
/*! @} APITag */
#endif
#ifdef __cplusplus
}
#endif
