/***********************************************************************************
 *                                                                                 *
 * Copyright: (c) 2021 Broadcom.                                                   *
 * Broadcom Proprietary and Confidential. All rights reserved.                     *
 *                                                                                 *
 ***********************************************************************************/

/**********************************************************************************
 **********************************************************************************
 *                                                                                *
 *  Revision    :   *
 *                                                                                *
 *  Description :  Internal API functions                                         *
 *                                                                                *
 **********************************************************************************
 **********************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif


#ifndef MERLIN7_PCIEG3_API_INTERNAL_H
#define MERLIN7_PCIEG3_API_INTERNAL_H

#include "merlin7_pcieg3_ipconfig.h"
#include "merlin7_pcieg3_select_defns.h"
#include "common/srds_api_err_code.h"
#include "common/srds_api_uc_common.h"
#include "common/srds_api_types.h"
#include "merlin7_pcieg3_enum.h"
#include "merlin7_pcieg3_types.h"
#include "merlin7_pcieg3_usr_includes.h"
#include "merlin7_pcieg3_prbs.h"

/*! @file
 *  @brief Internal API functions
 */

/*! @addtogroup APITag
 * @{
 */

/*! @defgroup SerdesAPIInternalTag Internal Functions
 * Internal Serdes API functions which get called by other modules and
 * should not be called directly.
 */


/*! @addtogroup SerdesAPIInternalTag
 * @{
 */

/*---------------------------------------*/
/** Conversion for DFE tap 5-14 encoding */
/*---------------------------------------*/
/** DFE TAP 5-14 Signed-Gray-Binary to Signed-Gray encoding
 * @param[in] sgb is Signed-Gray-Binary value.
 * @return Signed-Gray value.
  */
int8_t merlin7_pcieg3_INTERNAL_dfe_tap_sgb2sg(int8_t sgb);

/*----------------------------------------------------------*/
/** Calculate second order polynomial fitting coefficients. */
/*----------------------------------------------------------*/
/** y = a[2]*(x^2) + a[1]*x + a[0]
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] n number of samples used to do calculation.
 * @param[in] x pointer to data on x axis.
 * @param[in] y pointer to data on y axis.
 * @param[out] a pointer to coefficients.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_fit_second_order(srds_access_t *sa__, uint8_t n, USR_DOUBLE *x, USR_DOUBLE *y, USR_DOUBLE *a);


/*------------------------------*/
/** Serdes Lane State Structure */
/*------------------------------*/
typedef struct merlin7_pcieg3_lane_state_st{
  /** Currently Selected Lane index */
  uint32_t laneid;
  /** Baud Rate Phase Detector enable */
  uint8_t CDR;
  /** uC lane configuration */
  uint16_t UC_CFG;
  /** uC lane status */
  uint8_t  UC_STS;
  /** lane_reset_state **/
  uint8_t rx_rst;
  /** uC stopped state **/
  uint8_t stop_state;
 /** Signal Detect */
  uint8_t sig_det;
  /** Signal Detect Change */
  uint8_t sig_det_chg;
  /** PMD RX Lock */
  uint8_t pmd_lock;
  /** PMD RX Lock Change */
  uint8_t pmd_lock_chg;
  /** Frequency offset of local reference clock with respect to RX data in ppm */
  int16_t ppm;
   /** Delay of zero crossing slicer, m1, wrt to data in PI codes */
  int8_t clk90;
  /** Variable Gain Amplifier setting */
  int8_t VGA;
  /** DC offset DAC control value */
  int8_t DCO;
  /** Vertical threshold voltage of p1 slicer (mV) */
  int16_t P1mV;
  /** Vertical threshold voltage of m1 slicer (mV) [Used to read out 'channel loss hint' in PAM4 mode] */
  int16_t TP0;
 /** DFE tap 1 value */
  int8_t DFE1;
  /** DFE tap 2 value */
  int8_t DFE2;
  /** DFE tap 3 value */
  int8_t DFE3;
  /** DFE tap 4 value */
  int8_t DFE4;
  /** DFE tap 5 value */
  int8_t DFE5;
  /** Frequency offset of local reference clock with respect to TX data in ppm */
  int16_t tx_ppm;
  /** Horizontal left eye margin @ 1e-5 as seen by internal diagnostic slicer in mUI and mV */
  uint16_t heye_left;
  /** Horizontal right eye margin @ 1e-5 as seen by internal diagnostic slicer in mUI and mV */
  uint16_t heye_right;
  /** Vertical upper eye margin @ 1e-5 as seen by internal diagnostic slicer in mUI and mV */
  uint16_t veye_upper;
  /** Vertical lower eye margin @ 1e-5 as seen by internal diagnostic slicer in mUI and mV */
  uint16_t veye_lower;
  /** Link time in milliseconds */
  uint32_t link_time;
  /** BER String */
  char BER[SRDS_MAX_BER_STR_LEN];
  /** OSR Mode */
  merlin7_pcieg3_osr_mode_st osr_mode;
  /** Delay of diagnostic/lms slicer, p1, wrt to data in PI codes */
  int8_t clkp1;
  /** Peaking Filter Main Settings */
  int8_t pf_main;
  /** Peaking Filter Hiz mode enable */
  uint8_t pf_hiz;
  /** Low Frequency Peaking filter control */
  int8_t pf2_ctrl;
  /** P1 eyediag status */
  int8_t p1_lvl_ctrl;
  /** DFE tap 6 value */
  int8_t dfe6;
  /** DFE tap 1 Duty Cycle Distortion */
  int8_t dfe1_dcd;
  /** DFE tap 2 Duty Cycle Distortion */
  int8_t dfe2_dcd;
  /** Slicer calibration control codes (p1 even) */
  int8_t pe;
  /** Slicer calibration control codes (data even) */
  int8_t ze;
  /** Slicer calibration control codes (m1 even) */
  int8_t me;
  /** Slicer calibration control codes (p1 odd) */
  int8_t po;
  /** Slicer calibration control codes (data odd) */
  int8_t zo;
  /** Slicer calibration control codes (m1 odd) */
  int8_t mo;
  /** TX equalization FIR pre tap weight */
  int8_t txfir_pre;
  /** TX equalization FIR main tap weight */
  int8_t txfir_main;
  /** TX equalization FIR post1 tap weight */
  int8_t txfir_post1;
  /** TX equalization FIR post2 tap weight */
  int8_t txfir_post2;
  /** Sigdet offset correction - positive **/
  uint8_t soc_pos;
  /** Sigdet offset correction - negative **/
  uint8_t soc_neg;
  /** Rate select */
  uint8_t rate_select;
  /** First read of dsc_one_hot_0 */
  uint16_t dsc_one_hot_0_0;
  /** Second read of dsc_one_hot_0 */
  uint16_t dsc_one_hot_0_1;
  /** Is tx pmd dp inverted? */
  uint8_t tx_pmd_dp_invert;
  /* Is rx pmd dp inverted? */
  uint8_t rx_pmd_dp_invert;
  /** Is remote loopback enabled? */
  uint8_t rmt_lpbk_en;
  /** Is digital loopback enabled? */
  uint8_t dig_lpbk_en;
  /** Is Tx PI enabled? */
  uint8_t tx_pi_en;
} merlin7_pcieg3_lane_state_st_t;
/*------------------------------*/
/** Serdes Core State Structure */
/*------------------------------*/
typedef struct {
  /** Core DP Reset State */
  uint8_t  core_reset;
  /**  PLL Powerdown enable */
  uint8_t  pll_pwrdn;
  /** Micro active enable */
  uint8_t  uc_active;
  /** Comclk Frequency in Mhz */
  uint16_t comclk_mhz;
  /** uCode Major Version number */
  uint16_t ucode_version;
  /** uCode Minor Version number */
  uint8_t  ucode_minor_version;
  /** API Version number*/
  uint32_t api_version;
  /** AFE Hardware version */
  uint8_t  afe_hardware_version;
  /** uC Die Temperature Index */
  uint8_t  temp_idx;
  /** Average Die Temperature (13-bit format) */
  int16_t  avg_tmon;
  /** Analog Resistor Calibration value */
  uint8_t  rescal;
  /** VCO Rate in MHz */
  uint16_t vco_rate_mhz;
  /**  Analog VCO Range */
  uint8_t  analog_vco_range;
  /** PLL Divider value.  (Same encoding as enum #merlin7_pcieg3_pll_div_enum.) */
  uint32_t pll_div;
  /** PLL Lock */
  uint8_t  pll_lock;
  /** PLL Lock Change*/
  uint8_t  pll_lock_chg;
  /** Live die temperature in Celsius */
  int16_t die_temp;
  /** Core Status Variable */
  uint8_t core_status;
  /** Rate select */
  uint8_t rate_select;
} merlin7_pcieg3_core_state_st;

/** AFE Override Slicer Selection Value **/
typedef enum {
  INVALID_SLICER  = 0
} afe_override_slicer_sel_t;

#define RESCAL_MIN  (3)
#define RESCAL_MAX (13)

#define SRDS_INFO_SIGNATURE (0x50c1ab1e)


#define WRV_USR_DBSTOPPED_TO_0    EFUN(wrv_usr_dbstopped(0))

/** Uses timestamps in uCode to check if heartbeat timer is programmed correctly
 *  for the COMCLK frequency it is running at.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] console_print_options to control/select what is printed to console.
 *            0x00        : No prints to console.
 *            0x01 - 0xFF : prints everything
 * @return Error Code if timestamp check fails (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_test_uc_timestamp_with_print_options(srds_access_t *sa__, uint8_t console_print_options);

/** Retrieve the num_bits_per_ms useful for BER calculations.
 * There is some Error in the calculation because only VCO rate in Mhz is stored.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] select_rx a flag to select rx or tx (1 -> rx, 0 -> tx).
 * @param[out] num_bits_per_ms is pointer to uint64_t which is used to store the num_bits_per_ms.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_num_bits_per_ms(srds_access_t *sa__, uint8_t select_rx, uint32_t *num_bits_per_ms);

/** Check PRBS status and print BER.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] time_ms is the amount of time to delay for BER calculation.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_display_BER(srds_access_t *sa__, uint16_t time_ms);

/** Check PRBS status and print BER.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] time_ms is the amount of time to delay for BER calculation.
 * @param[out] string is a pointer to char array of length >=10 in which to place string.
 * @param[in] string_size is the size of string in bytes.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_BER_string(srds_access_t *sa__, uint16_t time_ms, char *string, uint8_t string_size);

/** Check PRBS status and provide number of errors and number of bits for BER calculation.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] time_ms is the amount of time to delay for BER calculation.
 * @param[out] ber_data is a struct that will get populated with number of errors and number of bits as elements.
 * @param[in] timer_sel allows to measure BER using host computer time instead of using hardware timers.
 * @return Error code, if generated (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_BER_data(srds_access_t *sa__, uint16_t time_ms, struct merlin7_pcieg3_ber_data_st *ber_data, enum merlin7_pcieg3_prbs_chk_timer_selection_enum timer_sel);

/** Check CDR lost lock.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] cdrlcklost is set if CDR loses lock.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_prbs_chk_cdr_lock_lost(srds_access_t *sa__, uint8_t *cdrlcklost);


/** Get Serdes Info pointer.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @return Serdes Info pointer.
 */
srds_info_t *merlin7_pcieg3_INTERNAL_get_merlin7_pcieg3_info_ptr(srds_access_t *sa__);

/** Get Serdes Info pointer and initialize it if signature doesn't match.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @return Serdes Info pointer.
 */
srds_info_t *merlin7_pcieg3_INTERNAL_get_merlin7_pcieg3_info_ptr_with_check(srds_access_t *sa__);

/** Checks to see if the stored ucode_version in merlin7_pcieg3_info is matching with the current thread ucode_version.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] merlin7_pcieg3_info_ptr pointer to Info_table to be verified.
 * @return Error Code generated if ucode_version does not match or uC rdvariable caused issues (else returns ERR_CODE_NONE).
 */
err_code_t merlin7_pcieg3_INTERNAL_match_ucode_from_info(srds_access_t *sa__, srds_info_t const *merlin7_pcieg3_info_ptr);

/** Verify the internal merlin7_pcieg3_info.
 * NOTE: This function is getting deprecated. Instead, please use the functions
 * merlin7_pcieg3_INTERNAL_get_merlin7_pcieg3_info_ptr_with_check and merlin7_pcieg3_INTERNAL_match_ucode_from_info
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] merlin7_pcieg3_info_ptr pointer to Info_table to be verified.
 * @return Error code, if generated (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_verify_merlin7_pcieg3_info(srds_access_t *sa__, srds_info_t const *merlin7_pcieg3_info_ptr);

/** Read AFE HW Version.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] afe_hw_version AFE HW Version used.
 * @return Error Code, if generated (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_afe_hw_version(srds_access_t *sa__, uint8_t *afe_hw_version);

/** Calculate the mode_sel parameter for tx pattern generator.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] mode_sel Mode select to be used for generating required pattern.
 * @param[out] zero_pad_len Length of zero padding to be used for generating required pattern.
 * @param[in] patt_length Desired Pattern length.
 * @return Error Code, if generated (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_calc_patt_gen_mode_sel(srds_access_t *sa__, uint8_t *mode_sel, uint8_t *zero_pad_len, uint8_t patt_length);

/** Check if the micro's operations on that lane are stopped.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @return err_code Error Code "ERR_CODE_UC_NOT_STOPPED" returned if micro NOT stopped.
 */
err_code_t merlin7_pcieg3_INTERNAL_check_uc_lane_stopped(srds_access_t *sa__);



/*-------------------*/
/*  Ladder controls  */
/*-------------------*/
/** Converts a ladder setting to mV, given the range.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] ctrl is the threshold control (-31..31) maps to -RANGE to RANGE in non-uniform steps.
 * @param[in] range_250 determines the range 0 = +/-150mV, 1 = +/-250mV (ignored for OSPREY7 and OSPREYLITE7).
 * @param[in] slicer_sel slicer for which ladder threshold needs to be calculated. (Required for OSPREY7 and OSPREYLITE7, unused (can be zero) for all other IPs).
 * @param[out] nlmv_val updated with claculated ladder threshold voltage(mV).
 * @return Error Code, if generated (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_ladder_setting_to_mV(srds_access_t *sa__, int16_t ctrl, uint8_t range_250, afe_override_slicer_sel_t slicer_sel, int16_t *nlmv_val);

/** Get the P1 slicer vertical level.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] val 8 bit signed value.
 * @return Error Code, if generated (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_p1_threshold(srds_access_t *sa__, int8_t *val);


/*-----------------------*/
/*  TX_PI and ULL Setup  */
/*-----------------------*/


/*-----------------------------------------*/
/*  APIs used in Config Shared TX Pattern  */
/*-----------------------------------------*/

/** Compute Binary string for a Hex value ['0' to 'F'].
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] var Hex value to be converted to Binary (eg: '6', 'A', ...).
 * @param[out] bin Binary string returned by API (eg: '0110', '1010', ...).
 * @param[in] bin_size size of bin
 * @return Error Code generated by invalid hex variable (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_compute_bin(srds_access_t *sa__, char var, char bin[], size_t bin_size);

/** Compute Hex value for a Binary string ['0000' to '1111'].
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] bin Binary string to be coverted (eg: '0110', '1010', ...).
 * @param[out] hex Hex value calculated from the input Binary string.
 * @return Error Code generated by invalid Binary string (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_compute_hex(srds_access_t *sa__, char bin[], uint8_t *hex);

/** Check micro state and request micro to stop. Stop micro only if micro is not stopped currently.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] graceful select the method for stopping (1=graceful stop; 0=Immediate).
 * @param[out] err_code_p pointer to err_code variable which will be returned (returns ERR_CODE_NONE if no errors).
 * @return The previous micro stop status.
  */
uint8_t merlin7_pcieg3_INTERNAL_stop_micro(srds_access_t *sa__, uint8_t graceful, err_code_t *err_code_p);
/*-----------------------------------*/
/*  APIs used in Read Event Logger   */
/*-----------------------------------*/

/*! State variable for dumping event log.
 * This must be initialized with zeros.
 */
typedef struct {
  uint16_t index, line_start_index, zero_cnt;
} merlin7_pcieg3_INTERNAL_event_log_dump_state_t;


/** Callback function for dumping event log, intended to be called by merlin7_pcieg3_INTERNAL_read_event_log_with_callback.
 *  It must also be called once after, with a byte count of 0, to finish printing.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in,out] arg is a merlin7_pcieg3_INTERNAL_event_log_dump_state_t pointer for holding state.
 * @param[in] byte_count is the number of bytes to dump.
 *        -# This function is called repeatedly with a byte count of 2 with U16 values to dump.
 *        -# This function may then be called with a byte count of 1 if the event log has an odd number of bytes.
 *        -# Finally, this function must be called with a byte count of 0 to finish up.
 * @param[in] data is the event log data to dump.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_event_log_dump_callback(srds_access_t *sa__, void *arg, uint8_t byte_count, uint16_t data);



/** Get Event Log from uC, and call callback for every two bytes.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] micro_num is the number of the microcontroller whose event log should be read.
 * @param[in] bypass_micro is 1 if the micro should not be involved (by stopping event log).
 *                     This mode works even when the micro is hung, and it does not consume the event log.
 * @param[in,out] arg is passed as the first argument to callback.
 * @param[in] callback is called with all of the data read, two bytes at a time.
 *                  The last call of callback may have one byte; in that case, the upper byte is undefined.
 *                  The call is in the form:  callback(arg, byte_count, data).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_read_event_log_with_callback(srds_access_t *sa__,
                                                        uint8_t micro_num,
                                                        uint8_t bypass_micro,
                                                        void *arg,
                                                        err_code_t (*callback)(srds_access_t *, void *, uint8_t, uint16_t));

/** Convert float8 to unsigned int32.
 * uint32 = 1.XXX * 2^Y  where float8 bits are XXXYYYYY.
 * @param[in] input Float8 number.
 * @return Unsigned 32bit number.
 */
uint32_t merlin7_pcieg3_INTERNAL_float8_to_uint32(float8_t input);

/** Convert uint8_t to 8-bit gray code.
 * @param[in] input Unsigned 8-bit number.
 * @return 8-bit gray code number.
 */
uint8_t merlin7_pcieg3_INTERNAL_uint8_to_gray(uint8_t input);

/** Convert 8-bit gray code to uint8_t.
 * @param[in] input 8-bit gray code number.
 * @return Unsigned 8-bit number.
 */
uint8_t merlin7_pcieg3_INTERNAL_gray_to_uint8(uint8_t input);


#ifdef TO_FLOATS
/*-----------------------------------*/
/*  APIs used in uC data conversion  */
/*-----------------------------------*/

/** Convert usigned int32 to float8.
 * uint32 = 1.XXX * 2^Y  where float8 bits are XXXYYYYY.
 * @param[in] input Unsigned int.
 * @return Float8 8 bit representations of 32bit number.
 */
float8_t merlin7_pcieg3_INTERNAL_int32_to_float8(uint32_t input);
#endif

/** Convert float12 to usigned int32.
 * uint32 = XXXXXXXX * 2^YYYY  where float12 bits X=byte and Y=multi.
 * @param[in] input Float8 8bit.
 * @param[in] multi 4 bit multipier.
 * @return Usigned 32bit number.
 */
uint32_t merlin7_pcieg3_INTERNAL_float12_to_uint32(uint8_t input, uint8_t multi);

#ifdef TO_FLOATS
/** Convert usigned int32 to float12.
 * uint32 = XXXXXXXX * 2^YYYY  where float12 bits X=byte and Y=multi.
 * @param[in] input Unsigned int32.
 * @param[out] multi Pointer to byte and the multiplier is returned.
 * @return Float12 8 bit representations of 32bit number.
 */
uint8_t merlin7_pcieg3_INTERNAL_uint32_to_float12(srds_access_t *sa__, uint32_t input, uint8_t *multi);
#endif
/** Get tx ppm value
 * Reads  current tx ppm value.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] tx_ppm returns the current tx_ppm value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_tx_ppm(srds_access_t *sa__, int16_t *tx_ppm);

/*-----------------------------*/
/*  Read / Display Core state  */
/*-----------------------------*/
/** Read current merlin7_pcieg3 core status.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] istate Current merlin7_pcieg3 core status read back and populated by the API.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_read_core_state(srds_access_t *sa__, merlin7_pcieg3_core_state_st *istate);

/** Display current core state.
 * Reads and displays all important core state values.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_display_core_state_no_newline(srds_access_t *sa__);

/*-----------------------------*/
/*  Read / Display Lane state  */
/*-----------------------------*/
/** Read current merlin7_pcieg3 lane status.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] istate Current merlin7_pcieg3 lane status read back and populated by the API.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_read_lane_state(srds_access_t *sa__, merlin7_pcieg3_lane_state_st_t *istate);


/*-----------------*/
/*  Get OSR mode   */
/*-----------------*/
/** Read current merlin7_pcieg3 lane status.
 * Note: Returns the hardware status, not the control value.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] mode Returns with the osr mode structure.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_osr_mode(srds_access_t *sa__, merlin7_pcieg3_osr_mode_st *mode);




/*-------------------*/
/*  Get LCK status   */
/*-------------------*/
/** Read current Signal_detect and Signal_detect change status of a lane.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] sig_det Current merlin7_pcieg3 lane signal_detect status read back and populated by the API.
 * @param[out] sig_det_chg Current merlin7_pcieg3 lane signal_detect_change status read back and populated by the API.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_sigdet_status(srds_access_t *sa__, uint8_t *sig_det, uint8_t *sig_det_chg);

/** Serdes Core ClockGate.
 * Along with merlin7_pcieg3_core_clkgate(), all lanes should also be clock gated using merlin7_pcieg3_lane_clkgate() to complete a Core Clockgate.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Enable clockgate (1 = Enable clokgate; 0 = Disable clockgate).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_core_clkgate(srds_access_t *sa__, uint8_t enable);

/** Read current PLL Lock and PLL Lock change status of a core.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] pll_lock Current merlin7_pcieg3 lane pll_lock status read back and populated by the API.
 * @param[out] pll_lock_chg Current merlin7_pcieg3 lane pll_lock_change status read back and populated by the API.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_pll_lock_status(srds_access_t *sa__, uint8_t *pll_lock, uint8_t *pll_lock_chg);

/** Read current PMD Lock and PMD Lock change status of a lane.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] pmd_lock Current merlin7_pcieg3 lane pmd_rx_lock status read back and populated by the API.
 * @param[out] pmd_lock_chg Current merlin7_pcieg3 lane pmd_rx_lock_change status read back and populated by the API.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_pmd_lock_status(srds_access_t *sa__, uint8_t *pmd_lock, uint8_t *pmd_lock_chg);


/** Obtain link time from status variable.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] link_time Link time measured in ms.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_link_time(srds_access_t *sa__, uint32_t *link_time);

/** Display current lane state.
 * Reads and displays all important lane state values.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_display_lane_state_no_newline(srds_access_t *sa__);




/** Serdes Lane ClockGate.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] enable Enable lane clockgate (1 = Enable clockgate; 0 = Disable clockgate).
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_lane_clkgate(srds_access_t *sa__, uint8_t enable);

/*--------------------*/
/*  Get/Set PF status */
/*--------------------*/
/** Set function for PF.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] val PF value to be set.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_set_rx_pf_main(srds_access_t *sa__, uint8_t val);

/** Set function for PF2.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] val PF2 value to be set.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_set_rx_pf2(srds_access_t *sa__, uint8_t val);


/** Get function for PF
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] val PF read value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_rx_pf_main(srds_access_t *sa__, uint8_t *val);

/** Get function for PF2.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] val PF2 read value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_rx_pf2(srds_access_t *sa__, uint8_t *val);



/** Set function for VGA.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] val unsigned input value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_set_rx_vga(srds_access_t *sa__, uint8_t val);


/** Set function for DFE Tap1.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] val signed input value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_set_rx_dfe1(srds_access_t *sa__, int8_t val);

/** Set function for DFE Tap2.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] val signed input value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_set_rx_dfe2(srds_access_t *sa__, int8_t val);

/** Set function for DFE Tap3.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] val signed input value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_set_rx_dfe3(srds_access_t *sa__, int8_t val);

/** Set function for DFE Tap4.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] val signed input value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_set_rx_dfe4(srds_access_t *sa__, int8_t val);

/** Set function for DFE Tap5.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] val signed input value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_set_rx_dfe5(srds_access_t *sa__, int8_t val);


/** Get function for VGA.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] val VGA read value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_rx_vga(srds_access_t *sa__, uint8_t *val);


/** Get function for DFE Tap1.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] val DFE1 read value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_rx_dfe1(srds_access_t *sa__, int8_t *val);

/** Get function for DFE Tap2.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] val DFE2 read value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_rx_dfe2(srds_access_t *sa__, int8_t *val);

/** Get function for DFE Tap3.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] val DFE3 read value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_rx_dfe3(srds_access_t *sa__, int8_t *val);

/** Get function for DFE Tap4.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] val DFE4 read value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_rx_dfe4(srds_access_t *sa__, int8_t *val);

/** Get function for DFE Tap5.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] val DFE5 read value.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_rx_dfe5(srds_access_t *sa__, int8_t *val);

err_code_t merlin7_pcieg3_INTERNAL_get_dfe2_dcd(srds_access_t *sa__, int8_t *dfe2_dcd);


/** Internal Eye Scan setup function.
 *
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] intr_pass_b selects between intrusive (1) or passive (0) eye scan.
 * @param[out] y_max is the starting point on vertical axis for eye scan plot.
 * @param[out] y_step is the step size on vertical axis for eye scan plot.
 * @param[out] usr_diag_status is the diagnostic status information returned by microcode.
 * @return Error Code during data collection (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_eye_scan_setup(srds_access_t *sa__, uint8_t intr_pass_b, int16_t *y_max, int16_t *y_step, uint16_t *usr_diag_status);



/*----------------------*/
/*  Get/Set TXFIR Taps  */
/*----------------------*/


uint8_t merlin7_pcieg3_INTERNAL_rdb_uc_var(srds_access_t *sa__, err_code_t *err_code_p, uint32_t addr);
uint16_t merlin7_pcieg3_INTERNAL_rdw_uc_var(srds_access_t *sa__, err_code_t *err_code_p, uint32_t addr);
err_code_t merlin7_pcieg3_INTERNAL_wrb_uc_var(srds_access_t *sa__, uint32_t addr, uint8_t wr_val);
err_code_t merlin7_pcieg3_INTERNAL_wrw_uc_var(srds_access_t *sa__, uint32_t addr, uint16_t wr_val);

/*--------------------------*/
/*  Register field polling  */
/*--------------------------*/

err_code_t merlin7_pcieg3_INTERNAL_print_uc_dsc_error(srds_access_t *sa__, enum srds_pmd_uc_cmd_enum cmd);

/** Polls lane variable "usr_diag_status" to verify data is available in uC diag buffer.
 * Define macro CUSTOM_REG_POLLING to replace the default implementation provided.
 *
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[out] status returns a status byte. \n
 *    bit 15 - indicates the ey scan is complete. \n
 *    bit 14-0 - reserved for debug.
 *
 * @param[in] timeout_ms Maximum time interval in milliseconds for which the polling is done.
 * @return Error code generated by polling function (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_poll_diag_done(srds_access_t *sa__, uint16_t *status, uint32_t timeout_ms);

/** Polls for register field "uc_dsc_ready_for_cmd" to be 1 within the time interval specified by timeout_ms.
 * Function returns 0 if polling passes, else it returns error code.
 * Define macro CUSTOM_REG_POLLING to replace the default implementation provided.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] timeout_ms Maximum time interval in milliseconds for which the polling is done.
 * @param[in] cmd The command that was issued; this is used for error reporting.
 * @return Error code generated by polling function (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_poll_uc_dsc_ready_for_cmd_equals_1(srds_access_t *sa__, uint32_t timeout_ms, enum srds_pmd_uc_cmd_enum cmd);

/** Polls for register field "dsc_state" to be "DSC_STATE_UC_TUNE".
 * within the time interval specified by timeout_ms.
 * Function returns 0 if polling passes, else it returns error code.
 * Define macro CUSTOM_REG_POLLING to replace the default implementation provided.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] timeout_ms Maximum time interval in milliseconds for which the polling is done.
 * @return Error code generated by polling function (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_poll_dsc_state_equals_uc_tune(srds_access_t *sa__, uint32_t timeout_ms);


/** Polls for register field "micro_ra_initdone" to be 1 within the time interval specified by timeout_ms.
 * Function returns 0 if polling passes, else it returns error code.
 * Define macro CUSTOM_REG_POLLING to replace the default implementation provided.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] timeout_ms Maximum time interval in milliseconds for which the polling is done.
 * @return Error code generated by polling function (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_poll_micro_ra_initdone(srds_access_t *sa__, uint32_t timeout_ms);

/** Utility to figure out if running platform is big endian.
 * @return value of 1 if big endian else 0
 */
uint8_t merlin7_pcieg3_INTERNAL_is_big_endian(void);
/*--------------------------------*/
/*  RAM Block Read with Callback  */
/*--------------------------------*/

/* Utilities to account for endianness when reading from uc RAM */
#define get_endian_offset(addr) (merlin7_pcieg3_INTERNAL_is_big_endian() ? \
                                (\
                                (((USR_UINTPTR)(addr))%4 == 0) ?  3 : \
                                (((USR_UINTPTR)(addr))%4 == 1) ?  1 : \
                                (((USR_UINTPTR)(addr))%4 == 2) ? -1 : \
                                (((USR_UINTPTR)(addr))%4 == 3) ? -3 : \
                                0) \
                                : 0)
/*! Used for passing arg to callback function
 *
 */
typedef struct {
    uint8_t *mem_ptr;
} merlin7_pcieg3_INTERNAL_rdblk_callback_arg_t;

/*! Ram Dump State struct
  *
  */
typedef struct {
    uint16_t index;
    uint16_t line_start_index;
    uint8_t  ram_idx;
    int32_t  count;
}merlin7_pcieg3_INTERNAL_ram_dump_state_t;

/*! Read Block Ram Arg struct
  *
  */
typedef struct {
    char    *ram_buff;
    uint8_t *mem_ptr;
    uint32_t ram_size;
    merlin7_pcieg3_INTERNAL_ram_dump_state_t *dump_state_ptr;
} merlin7_pcieg3_INTERNAL_rdblk_ram_arg_t;

uint32_t _merlin7_pcieg3_INTERNAL_get_addr_from_lane(srds_access_t *sa__, uint16_t addr, uint8_t lane);
uint32_t _merlin7_pcieg3_INTERNAL_get_addr_from_core(srds_access_t *sa__, uint16_t addr);

err_code_t merlin7_pcieg3_INTERNAL_rdblk_ram_read_callback(srds_access_t *sa__,void *arg,uint8_t byte_count,uint16_t data);

err_code_t merlin7_pcieg3_INTERNAL_ram_dump_callback(srds_access_t *sa__, void *arg, uint8_t byte_count, uint16_t data);
/** Callback function for reading uc RAM memory by merlin7_pcieg3_INTERNAL_rdblk_uc_generic_ram().
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in,out] arg is a merlin7_pcieg3_INTERNAL_rdblk_callback_arg_t pointer for holding state.
 * @param[in] byte_count is the number of bytes to store.
 *        -# This function is called repeatedly with a byte count of 2 with U16 values to store.
 *        -# This function may then be called with a byte count of 1 if there are an odd number of bytes.
 * @param[in] data is the RAM data to store.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_rdblk_callback(srds_access_t *sa__, void *arg, uint8_t byte_count, uint16_t data);

/** Callback function for reading uc RAM memory by merlin7_pcieg3_INTERNAL_rdblk_uc_generic_ram() customized for
lane_var,core_var and micro_var functions.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in,out] arg is a merlin7_pcieg3_INTERNAL_rdblk_callback_arg_t pointer for holding state.
 * @param[in] byte_count is the number of bytes to store.
 *        -# This function is called repeatedly with a byte count of 2 with U16 values to store.
 *        -# This function may then be called with a byte count of 1 if there are an odd number of bytes.
 * @param[in] data is the RAM data to store.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_rdblk_ram_callback(srds_access_t *sa__,void *arg,uint8_t byte_count, uint16_t data);

/** Block RAM read through Micro Register Interface, suitable for program RAM or non-program RAM.
 *  This reads a block of RAM, possibly starting midway through it and wrapping back to the beginning.
 *  The order of operations is:
 *      -# RAM will be read from (block_addr+start_offset) to (block_addr+block_size-1),
 *         up to cnt bytes.
 *      -# RAM will be read from block_addr to (block_addr+block_size-1), repeating
 *         indefinitely, until cnt bytes total are read.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] block_addr Address of RAM block to be read.
 *                   For program RAM, the upper 16 bits are 0x0000.  Otherwise, the upper 16 bits are 0x2000.
 * @param[in] block_size Length of RAM block to read.
 * @param[in] start_offset Offset within RAM block to start reading.
 * @param cnt Number of bytes to be read.
 * @param[in,out] arg is passed as the first argument to callback.
 * @param[in] callback is called with all of the data read, two bytes at a time.
 *                  The last call of callback may have one byte; in that case, the upper byte is undefined.
 *                  The call is in the form:  callback(arg, byte_count, data).
 * @return Error Code generated by API or the callback (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_rdblk_uc_generic_ram(srds_access_t *sa__,
                                                uint32_t block_addr,
                                                uint32_t block_size,
                                                uint32_t start_offset,
                                                uint32_t cnt,
                                                void *arg,
                                                err_code_t (*callback)(srds_access_t *, void *, uint8_t, uint16_t));

/** Block RAM read through Micro Register Interface, suitable for program RAM or non-program RAM.
 *  This reads a block of RAM, possibly starting midway through it and wrapping back to the beginning.
 *  The order of operations is:
 *      -# RAM will be read from (block_addr+start_offset) down to block_addr, up to cnt bytes.
 *      -# RAM will be read from (block_addr+block_size-1) down to block_addr, repeating
 *         indefinitely, until cnt bytes total are read.
 *  In other words, this is the same as merlin7_pcieg3_INTERNAL_rdblk_uc_generic_ram(), but reading in descending address order.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param block_addr Address of RAM block to be read.
 *                   For program RAM, the upper 16 bits are 0x0000.  Otherwise, the upper 16 bits are 0x2000.
 * @param[in] block_size Length of RAM block to read.
 * @param[in] start_offset Offset within RAM block to start reading.
 * @param[in] cnt Number of bytes to be read.
 * @param[in,out] arg is passed as the first argument to callback.
 * @param[in] callback is called with all of the data read, two bytes at a time.
 *                  The last call of callback may have one byte; in that case, the upper byte is undefined.
 *                  The call is in the form:  callback(arg, byte_count, data).
 * @return Error Code generated by API or the callback (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_rdblk_uc_generic_ram_descending(srds_access_t *sa__,
                                                           uint32_t block_addr,
                                                           uint32_t block_size,
                                                           uint32_t start_offset,
                                                           uint32_t cnt,
                                                           void *arg,
                                                           err_code_t (*callback)(srds_access_t *, void *, uint8_t, uint16_t));

/** Retrieve micro index based on lane index.
 * @param lane Lane index.
 * @return Micro index.
 */
uint8_t merlin7_pcieg3_INTERNAL_grp_idx_from_lane(uint8_t lane);





/** Print info table.
 * Prints out all info_table struct member values.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_display_info_table(srds_access_t *sa__);
/** Get logical tx lane.
 * Given a physical tx lane, returns the logical tx lane mapped to it.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] physical_tx_lane index of the physical tx lane.
 * @param[out] logical_tx_lane pointer to the logical tx lane that will get populated.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_logical_tx_lane_addr(srds_access_t *sa__, uint8_t physical_tx_lane, uint8_t *logical_tx_lane);

/** Get logical rx lane.
 * Given a physical rx lane, returns the logical rx lane mapped to it.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] physical_rx_lane index of the physical rx lane.
 * @param[out] logical_rx_lane pointer to the logical rx lane that will get populated.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_get_logical_rx_lane_addr(srds_access_t *sa__, uint8_t physical_rx_lane, uint8_t *logical_rx_lane);
/** Enable breakpoint.
 * Enables a breakpoint at the given breakpoint param value.
 * Note: This API should only be used under the direction of engineering.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] breakpoint index of breakpoint to enable.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_en_breakpoint(srds_access_t *sa__, uint8_t breakpoint);

/** Goto Breakpoint.
 * Goes to the breakpoint selected by the given breakpoint param value.
 * Note: This API should only be used under the direction of engineering.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @param[in] breakpoint index of breakpoint to enable.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_goto_breakpoint(srds_access_t *sa__, uint8_t breakpoint);

/** Read breakpoint.
 * Reads and prints status of breakpoint.
 * Note: This API should only be used under the direction of engineering.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_rd_breakpoint(srds_access_t *sa__);

/** Disable all breakpoint.
 * Disables all breakpoints and continues normal execution.
 * Note: This API should only be used under the direction of engineering.
 * @param[in] sa__ is an opaque state vector passed through to device access functions.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors).
 */
err_code_t merlin7_pcieg3_INTERNAL_dis_breakpoint(srds_access_t *sa__);

/** Convert osr_mode to an int
 * Returns the converted osr_mode x1000 for rate calculations
 * @param[in] osr_mode is the osr_mode to convert
 * @return The converted osr_mode number times 1000
 */
uint32_t merlin7_pcieg3_osr_mode_enum_to_int_x1000(uint8_t osr_mode);



/*-------------------*/
/*  Name resolution  */
/*-------------------*/

/* For bitfields that differ for different cores, these macros are defined to resolve the bitfield. */

#   define WR_RX_PF_CTRL  wr_pf_ctrl
#   define RD_RX_PF_CTRL  rd_pf_ctrl
#   define WR_RX_PF2_CTRL wr_pf2_lowp_ctrl
#   define RD_RX_PF2_CTRL rd_pf2_lowp_ctrl

/*! @} SerdesAPIInternalTag */
/*! @} APITag */
#endif /* !SERDES_API_INTERNAL_H */
#ifdef __cplusplus
}
#endif

