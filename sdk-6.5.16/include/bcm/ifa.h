/*
 * 
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_IFA_H__
#define __BCM_IFA_H__

#include <bcm/types.h>

/* IFA configuration information data. */
typedef struct bcm_ifa_config_info_s {
    uint32 probemarker_1;               /* INT header ProbeMarker1 Value. */
    uint32 probemarker_2;               /* INT header ProbeMarker2 Value. */
    uint32 device_id;                   /* Meta Data header Device ID. */
    uint16 max_payload_length;          /* INT header Maximum payload. */
    uint16 module_id;                   /* Meta Data header Module Id used to
                                           identify loopback source port
                                           information. */
    uint8 hop_limit;                    /* INT header Hop Limit condition. */
    uint16 rx_packet_payload_length;    /* Recieved packet payload length that
                                           can be sent to collector. */
    uint16 lb_port_1;                   /* Loopback port for IFA E_APP. */
    uint16 lb_port_2;                   /* Loopback port for IFA E_APP. */
    uint8 optional_headers;             /* Option to send with recieved packet
                                           headers. */
    uint8 true_hop_count;               /* Number of hops in the topology is
                                           greater than Hop limit,  IFA MD stack
                                           contains Hop limit number of MDs in
                                           MD stack. */
} bcm_ifa_config_info_t;

/* IFA statistics information data. */
typedef struct bcm_ifa_stat_info_s {
    uint32 rx_pkt_cnt;                  /* Number of packet recieved in FW. */
    uint32 tx_pkt_cnt;                  /* Number of packet transmitted from FW. */
    uint32 ifa_no_config_drop;          /* Number of pkt dropped due to missing
                                           configuration. */
    uint32 ifa_collector_not_present_drop; /* Number of pkt dropped due to missing
                                           collector configuration. */
    uint32 ifa_hop_cnt_invalid_drop;    /* Number of pkt dropped due to Hop
                                           count and Hop limit are out of order. */
    uint32 ifa_int_hdr_len_invalid_drop; /* Number of pkt dropped due to maximum
                                           length and current length are out of
                                           order. */
    uint32 ifa_pkt_size_invalid_drop;   /* Number of pkt dropped due to invalid
                                           packet size. */
} bcm_ifa_stat_info_t;

/* 
 * Macros for bcm_ifa_collector_eth_header_t.vlan_tag_structure to
 * indicate the tag structure of vlans.
 */
#define BCM_IFA_COLLECTOR_ETH_HDR_UNTAGGED  0x1        
#define BCM_IFA_COLLECTOR_ETH_HDR_SINGLE_TAGGED 0x2        
#define BCM_IFA_COLLECTOR_ETH_HDR_DOUBLE_TAGGED 0x3        

/* 
 * Ethernet header in the encap used to send the IFA packet to the
 * collector.
 */
typedef struct bcm_ifa_collector_eth_header_s {
    bcm_mac_t dst_mac; 
    bcm_mac_t src_mac; 
    uint8 vlan_tag_structure; 
    uint16 outer_tpid; 
    uint16 inner_tpid; 
    bcm_vlan_tag_t outer_vlan_tag; 
    bcm_vlan_tag_t inner_vlan_tag; 
} bcm_ifa_collector_eth_header_t;

/* IPv4 header in the encap used to send the IFA packet to the collector. */
typedef struct bcm_ifa_collector_ipv4_header_s {
    bcm_ip_t src_ip; 
    bcm_ip_t dst_ip; 
    uint8 dscp; 
    uint8 ttl; 
} bcm_ifa_collector_ipv4_header_t;

/* IPv6 header in the encap used to send the IFA packet to the collector. */
typedef struct bcm_ifa_collector_ipv6_header_s {
    bcm_ip6_t src_ip; 
    bcm_ip6_t dst_ip; 
    uint8 traffic_class; 
    uint32 flow_label; 
    uint8 hop_limit; 
} bcm_ifa_collector_ipv6_header_t;

/* UDP header in the encap used to send the IFA packet to the collector. */
typedef struct bcm_ifa_collector_udp_header_s {
    bcm_l4_port_t src_port; 
    bcm_l4_port_t dst_port; 
} bcm_ifa_collector_udp_header_t;

/* Transport types that are supported for the collector */
typedef enum bcm_ifa_collector_transport_type_e {
    bcmIfaCollectorTransportTypeIpv4Udp = 0, /* The encap will be of the format UDP
                                           over IPv4. */
    bcmIfaCollectorTransportTypeIpv6Udp = 1 /* The encap will be of the format UDP
                                           over IPv6. */
} bcm_ifa_collector_transport_type_t;

/* In-band flow analyzer collector information. */
typedef struct bcm_ifa_collector_info_s {
    bcm_ifa_collector_transport_type_t transport_type; /* Transport type used for sending data
                                           to the collector. */
    bcm_ifa_collector_eth_header_t eth; /* Ethernet encapsulation of the packet
                                           sent to collector. */
    bcm_ifa_collector_ipv4_header_t ipv4; /* IPv4 encapsulation of the packet sent
                                           to collector. */
    bcm_ifa_collector_ipv6_header_t ipv6; /* IPv6 encapsulation of the packet sent
                                           to collector. */
    bcm_ifa_collector_udp_header_t udp; /* UDP encapsulation of the packet sent
                                           to collector. */
    uint16 mtu;                         /* The maximum packet length transmitted
                                           by collector. */
} bcm_ifa_collector_info_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize the In-band flow analyzer subsystem. */
extern int bcm_ifa_init(
    int unit);

/* Shut down the In-band flow analyzer subsystem. */
extern int bcm_ifa_detach(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * Options that can be passed via options parameter during configuration
 * set.
 */
#define BCM_IFA_CONFIG_ADD      (1 << 0)   /* Add configuration to transfer ifa
                                              information. */
#define BCM_IFA_CONFIG_MODIFY   (1 << 1)   /* Update a configuration
                                              information. */
#define BCM_IFA_CONFIG_CLEAR    (1 << 2)   /* Clear configuration information. */

/* Options that can be passed via options parameter during collector set. */
#define BCM_IFA_COLLECTOR_ADD       (1 << 0)   /* Add collector to transfer ifa
                                                  information. */
#define BCM_IFA_COLLECTOR_MODIFY    (1 << 1)   /* Update a collector
                                                  information. */
#define BCM_IFA_COLLECTOR_DETACH    (1 << 2)   /* Detach collector. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Create a ifa collector with given collector info. */
extern int bcm_ifa_collector_set(
    int unit, 
    uint32 options, 
    bcm_ifa_collector_info_t *collector_info);

/* Get ifa collector information. */
extern int bcm_ifa_collector_get(
    int unit, 
    bcm_ifa_collector_info_t *collector_info);

/* Set IFA - INT and Meta data header configuration information */
extern int bcm_ifa_config_info_set(
    int unit, 
    uint32 options, 
    bcm_ifa_config_info_t *config_data);

/* Get IFA - INT and Meta data header configuration information */
extern int bcm_ifa_config_info_get(
    int unit, 
    bcm_ifa_config_info_t *config_data);

/* Get IFA - statistics information */
extern int bcm_ifa_stat_info_get(
    int unit, 
    bcm_ifa_stat_info_t *stat_data);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize a ifa configuration information structure. */
extern void bcm_ifa_config_info_t_init(
    bcm_ifa_config_info_t *config_info);

/* Initialize a ifa collector information structure. */
extern void bcm_ifa_collector_info_t_init(
    bcm_ifa_collector_info_t *collector_info);

#ifndef BCM_HIDE_DISPATCHABLE

/* Set IFA - statistics information */
extern int bcm_ifa_stat_info_set(
    int unit, 
    bcm_ifa_stat_info_t *stat_data);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_IFA_H__ */
