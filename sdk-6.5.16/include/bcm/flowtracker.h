/*
 * 
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_FLOWTRACKER_H__
#define __BCM_FLOWTRACKER_H__

#include <bcm/port.h>
#include <bcm/collector.h>
#include <bcm/pkt.h>

/* Flowtracker IPFIX observation domain. */
typedef uint32 bcm_flowtracker_ipfix_observation_domain_t;

/* Flowtracker export trigger types */
typedef enum bcm_flowtracker_export_trigger_e {
    bcmFlowtrackerExportTriggerNone = 0, /* No export trigger. */
    bcmFlowtrackerExportTriggerTimer = 1, /* Flow data will be exported to
                                           collector every
                                           bcm_flowtracker_export_trigger_info_t.interval_usecs. */
    bcmFlowtrackerExportTriggerNewLearn = 2, /* Flow data will be exported to
                                           collector everytime a new flow is
                                           learnt in the group. */
    bcmFlowtrackerExportTriggerAgeOut = 3, /* Flow data will be exported to
                                           collector everytime a flow ages out
                                           in the group. */
    bcmFlowtrackerExportTriggerDrop = 4, /* Drop reason on a flow has changed. */
    bcmFlowtrackerExportTriggerCount = 5 /* Last Value. Not Usable. */
} bcm_flowtracker_export_trigger_t;

/* Flowtracker export trigger information. */
typedef struct bcm_flowtracker_export_trigger_info_s {
    SHR_BITDCL trigger_bmp[_SHR_BITDCLSIZE(bcmFlowtrackerExportTriggerCount)]; /* The bitmap of export triggers which
                                           will result in the export of the
                                           IPFIX packets. */
    uint32 interval_usecs;              /* If one of the export triggers is
                                           bcmFlowtrackerExportTriggerTimer,
                                           this provides the interval for the
                                           timer. */
} bcm_flowtracker_export_trigger_info_t;

/* Manipulate the export trigger bitmap. */
#define BCM_FLOWTRACKER_TRIGGER_SET(_export_info, _trigger)  SHR_BITSET(((_export_info).trigger_bmp), (_trigger)) 
#define BCM_FLOWTRACKER_TRIGGER_GET(_export_info, _trigger)  SHR_BITGET(((_export_info).trigger_bmp), (_trigger)) 
#define BCM_FLOWTRACKER_TRIGGER_CLEAR(_export_info, _trigger)  SHR_BITCLR(((_export_info).trigger_bmp), (_trigger)) 
#define BCM_FLOWTRACKER_TRIGGER_CLEAR_ALL(_export_info)  SHR_BITCLR_RANGE(((_export_info).trigger_bmp), 0, bcmFlowtrackerExportTriggerCount) 

/* 
 * Macros for bcm_flowtracker_collector_eth_header_t.vlan_tag_structure
 * to indicate the tag structure of vlans.
 */
#define BCM_FLOWTRACKER_COLLECTOR_ETH_HDR_UNTAGGED 0x1        
#define BCM_FLOWTRACKER_COLLECTOR_ETH_HDR_SINGLE_TAGGED 0x2        
#define BCM_FLOWTRACKER_COLLECTOR_ETH_HDR_DOUBLE_TAGGED 0x3        

/* 
 * Ethernet header in the encap used to send the IPFIX packet to the
 * collector.
 */
typedef struct bcm_flowtracker_collector_eth_header_s {
    bcm_mac_t dst_mac; 
    bcm_mac_t src_mac; 
    uint8 vlan_tag_structure; 
    uint16 outer_tpid; 
    uint16 inner_tpid; 
    bcm_vlan_tag_t outer_vlan_tag; 
    bcm_vlan_tag_t inner_vlan_tag; 
} bcm_flowtracker_collector_eth_header_t;

/* 
 * IPv4 header in the encap used to send the IPFIX packet to the
 * collector.
 */
typedef struct bcm_flowtracker_collector_ipv4_header_s {
    bcm_ip_t src_ip; 
    bcm_ip_t dst_ip; 
    uint8 dscp; 
    uint8 ttl; 
} bcm_flowtracker_collector_ipv4_header_t;

/* 
 * IPv6 header in the encap used to send the IPFIX packet to the
 * collector.
 */
typedef struct bcm_flowtracker_collector_ipv6_header_s {
    bcm_ip6_t src_ip; 
    bcm_ip6_t dst_ip; 
    uint8 traffic_class; 
    uint32 flow_label; 
    uint8 hop_limit; 
} bcm_flowtracker_collector_ipv6_header_t;

/* 
 * UDP header in the encap used to send the IPFIX packet to the
 * collector.
 */
typedef struct bcm_flowtracker_collector_udp_header_s {
    bcm_l4_port_t src_port; 
    bcm_l4_port_t dst_port; 
} bcm_flowtracker_collector_udp_header_t;

/* Software ID given for a Flowtracker collector configuration. */
typedef int bcm_flowtracker_collector_t;

/* 
 * Transport types that are supported for exporting flow data to the
 * collector
 */
typedef enum bcm_flowtracker_collector_transport_type_e {
    bcmFlowtrackerCollectorTransportTypeIpfixIpv4Udp = 0, /* The encap will be of the format UDP
                                           over IPv4. */
    bcmFlowtrackerCollectorTransportTypeIpfixIpv6Udp = 1, /* The encap will be of the format UDP
                                           over IPv6. */
    bcmFlowtrackerCollectorTransportTypeRaw = 2, /* Indicates no encap. This will be
                                           useful when the raw IPFIX PDUs need
                                           to be transported to the local CPU. */
    bcmFlowtrackerCollectorTransportTypeCount = 3 /* Last Value. Not Usable. */
} bcm_flowtracker_collector_transport_type_t;

/* Flowtracker Collector types. */
typedef enum bcm_flowtracker_collector_type_e {
    bcmFlowtrackerCollectorRemote = 0,  /* The collector is a remote machine
                                           expecting flow information records
                                           using encap scheme defined through
                                           TransportTypeXxx. */
    bcmFlowtrackerCollectorLocal = 1,   /* The collector is local CPU receiving
                                           flow information records usually
                                           without any encap. TransportTypeRaw. */
    bcmFlowtrackerCollectorCount = 2    /* Last Value. Not Usable. */
} bcm_flowtracker_collector_type_t;

/* Flowtracker collector information. */
typedef struct bcm_flowtracker_collector_info_s {
    bcm_flowtracker_collector_type_t collector_type; /* Flowtracker Collector type. Remote vs
                                           Local */
    bcm_flowtracker_collector_transport_type_t transport_type; /* Transport type used for exporting
                                           flow data to the collector. This
                                           identifies the usable fields within
                                           the encap structure member defined
                                           below. */
    bcm_flowtracker_collector_eth_header_t eth; /* Ethernet encapsulation of the packet
                                           sent to collector. */
    bcm_flowtracker_collector_ipv4_header_t ipv4; /* IPv4 encapsulation of the packet sent
                                           to collector. */
    bcm_flowtracker_collector_ipv6_header_t ipv6; /* IPv6 encapsulation of the packet sent
                                           to collector. */
    bcm_flowtracker_collector_udp_header_t udp; /* UDP encapsulation of the packet sent
                                           to collector. */
    uint16 max_packet_length;           /* The maximum packet length of an
                                           export packet that can be sent to
                                           this collector. */
} bcm_flowtracker_collector_info_t;

/* Software ID given for a Flowtracker flow group configuration. */
typedef int bcm_flowtracker_group_t;

/* Flow check object. */
typedef uint32 bcm_flowtracker_check_t;

/* 
 * Flags (bcm_flowtracker_group_info_t.flags) to be used with group
 * during group create.
 */
#define BCM_FLOWTRACKER_GROUP_USER_ENTRIES_ONLY (1 << 0)   /* Group supports user
                                                          added flow entries
                                                          only. */

/* Default Group. */
#define BCM_FLOWTRACKER_GROUP_DEFAULT   (1 << 1)   /* Indicates that this is a
                                                      default group. */

/* Custom key length. */
#define BCM_FLOWTRACKER_CUSTOM_KEY_MAX_LENGTH 16         /* Maximum length of
                                                          custom key */

/* Flowtracker flow group information. */
typedef struct bcm_flowtracker_group_info_s {
    bcm_flowtracker_ipfix_observation_domain_t observation_domain_id; /* IPFIX observation domain to which
                                           this flow group belongs to. */
    int group_class;                    /* Flowtracker flow group Class id. */
    uint32 group_flags;                 /* Flowtracker flow group flags. See
                                           BCM_FLOWTRACKER_GROUP_XXX. */
    bcm_field_group_t field_group[BCM_PIPES_MAX]; /* Field group corresponding to the flow
                                           group. */
} bcm_flowtracker_group_info_t;

/* 
 * Five tuple can be outer/inner SRC IP, DST IP, L4 SRC PORT, L4 DST PORT
 * and IP PROTOCOL that constitutes a flow.
 */
typedef struct bcm_flowtracker_flow_key_s {
    bcm_ip_addr_t src_ip; 
    bcm_ip_addr_t dst_ip; 
    bcm_l4_port_t l4_src_port; 
    bcm_l4_port_t l4_dst_port; 
    uint8 ip_protocol; 
    bcm_ip_addr_t inner_src_ip; 
    bcm_ip_addr_t inner_dst_ip; 
    bcm_l4_port_t inner_l4_src_port; 
    bcm_l4_port_t inner_l4_dst_port; 
    uint8 inner_ip_protocol; 
    uint32 vxlan_network_id; 
    uint8 custom[BCM_FLOWTRACKER_CUSTOM_KEY_MAX_LENGTH]; 
    bcm_port_t in_port; 
} bcm_flowtracker_flow_key_t;

/* Flowtracker flow group flow level data. */
typedef struct bcm_flowtracker_flow_data_s {
    uint64 packet_count; 
    uint64 byte_count; 
    uint64 flow_start_timestamp_msecs; 
    uint64 observation_timestamp_msecs; 
    bcm_rx_reasons_t pkt_drop_reasons; 
} bcm_flowtracker_flow_data_t;

/* Software ID given for a Flowtracker export template configuration. */
typedef int bcm_flowtracker_export_template_t;

/* Flowtracker export element flags. */
#define BCM_FLOWTRACKER_EXPORT_ELEMENT_FLAGS_ENTERPRISE (1 << 0)   /* Indicates that the
                                                          element is an
                                                          enterprise specific
                                                          element */

/* The different export element types that constitute an template. */
typedef enum bcm_flowtracker_export_element_type_e {
    bcmFlowtrackerExportElementTypeSrcIPv4 = 0, 
    bcmFlowtrackerExportElementTypeDstIPv4 = 1, 
    bcmFlowtrackerExportElementTypeSrcIPv6 = 2, 
    bcmFlowtrackerExportElementTypeDstIPv6 = 3, 
    bcmFlowtrackerExportElementTypeL4SrcPort = 4, 
    bcmFlowtrackerExportElementTypeL4DstPort = 5, 
    bcmFlowtrackerExportElementTypeIPProtocol = 6, 
    bcmFlowtrackerExportElementTypePktCount = 7, 
    bcmFlowtrackerExportElementTypeByteCount = 8, 
    bcmFlowtrackerExportElementTypePktDeltaCount = 9, 
    bcmFlowtrackerExportElementTypeByteDeltaCount = 10, 
    bcmFlowtrackerExportElementTypeVRF = 11, 
    bcmFlowtrackerExportElementTypeObservationTimeMsecs = 12, 
    bcmFlowtrackerExportElementTypeFlowStartTimeMsecs = 13, 
    bcmFlowtrackerExportElementTypeFlowtrackerGroup = 14, 
    bcmFlowtrackerExportElementTypeReserved = 15, 
    bcmFlowtrackerExportElementTypeTTL = 16, 
    bcmFlowtrackerExportElementTypeIPLength = 17, 
    bcmFlowtrackerExportElementTypeTcpWindowSize = 18, 
    bcmFlowtrackerExportElementTypeDosAttack = 19, 
    bcmFlowtrackerExportElementTypeVxlanNetworkId = 20, 
    bcmFlowtrackerExportElementTypeNextHeader = 21, 
    bcmFlowtrackerExportElementTypeHopLimit = 22, 
    bcmFlowtrackerExportElementTypeInnerSrcIPv4 = 23, 
    bcmFlowtrackerExportElementTypeInnerDstIPv4 = 24, 
    bcmFlowtrackerExportElementTypeInnerSrcIPv6 = 25, 
    bcmFlowtrackerExportElementTypeInnerDstIPv6 = 26, 
    bcmFlowtrackerExportElementTypeInnerIPProtocol = 27, 
    bcmFlowtrackerExportElementTypeInnerTTL = 28, 
    bcmFlowtrackerExportElementTypeInnerNextHeader = 29, 
    bcmFlowtrackerExportElementTypeInnerHopLimit = 30, 
    bcmFlowtrackerExportElementTypeInnerL4SrcPort = 31, 
    bcmFlowtrackerExportElementTypeInnerL4DstPort = 32, 
    bcmFlowtrackerExportElementTypeExportReasons = 33, 
    bcmFlowtrackerExportElementTypeExportFlags = 34, 
    bcmFlowtrackerExportElementTypeTcpFlags = 35, 
    bcmFlowtrackerExportElementTypeOuterVlanTag = 36, 
    bcmFlowtrackerExportElementTypeIP6Length = 37, 
    bcmFlowtrackerExportElementTypeInnerIPLength = 38, 
    bcmFlowtrackerExportElementTypeInnerIP6Length = 39, 
    bcmFlowtrackerExportElementTypeTimestampNewLearn = 40, 
    bcmFlowtrackerExportElementTypeTimestampFlowStart = 41, 
    bcmFlowtrackerExportElementTypeTimestampFlowEnd = 42, 
    bcmFlowtrackerExportElementTypeTimestampCheckEvent1 = 43, 
    bcmFlowtrackerExportElementTypeTimestampCheckEvent2 = 44, 
    bcmFlowtrackerExportElementTypeInnerDosAttack = 45, 
    bcmFlowtrackerExportElementTypeTunnelClass = 46, 
    bcmFlowtrackerExportElementTypeFlowtrackerCheck = 47, 
    bcmFlowtrackerExportElementTypeCustom = 48, 
    bcmFlowtrackerExportElementTypeCount = 49 
} bcm_flowtracker_export_element_type_t;

/* The different tracking parameters that can be tracked in flowtracker. */
typedef enum bcm_flowtracker_tracking_param_type_e {
    bcmFlowtrackerTrackingParamTypeNone = 0, 
    bcmFlowtrackerTrackingParamTypeSrcIPv4 = 1, 
    bcmFlowtrackerTrackingParamTypeDstIPv4 = 2, 
    bcmFlowtrackerTrackingParamTypeSrcIPv6 = 3, 
    bcmFlowtrackerTrackingParamTypeDstIPv6 = 4, 
    bcmFlowtrackerTrackingParamTypeL4SrcPort = 5, 
    bcmFlowtrackerTrackingParamTypeL4DstPort = 6, 
    bcmFlowtrackerTrackingParamTypeIPProtocol = 7, 
    bcmFlowtrackerTrackingParamTypePktCount = 8, 
    bcmFlowtrackerTrackingParamTypeByteCount = 9, 
    bcmFlowtrackerTrackingParamTypeVRF = 10, 
    bcmFlowtrackerTrackingParamTypeTTL = 11, 
    bcmFlowtrackerTrackingParamTypeIPLength = 12, 
    bcmFlowtrackerTrackingParamTypeTcpWindowSize = 13, 
    bcmFlowtrackerTrackingParamTypeDosAttack = 14, 
    bcmFlowtrackerTrackingParamTypeVxlanNetworkId = 15, 
    bcmFlowtrackerTrackingParamTypeNextHeader = 16, 
    bcmFlowtrackerTrackingParamTypeHopLimit = 17, 
    bcmFlowtrackerTrackingParamTypeInnerSrcIPv4 = 18, 
    bcmFlowtrackerTrackingParamTypeInnerDstIPv4 = 19, 
    bcmFlowtrackerTrackingParamTypeInnerSrcIPv6 = 20, 
    bcmFlowtrackerTrackingParamTypeInnerDstIPv6 = 21, 
    bcmFlowtrackerTrackingParamTypeInnerIPProtocol = 22, 
    bcmFlowtrackerTrackingParamTypeInnerTTL = 23, 
    bcmFlowtrackerTrackingParamTypeInnerNextHeader = 24, 
    bcmFlowtrackerTrackingParamTypeInnerHopLimit = 25, 
    bcmFlowtrackerTrackingParamTypeInnerL4SrcPort = 26, 
    bcmFlowtrackerTrackingParamTypeInnerL4DstPort = 27, 
    bcmFlowtrackerTrackingParamTypeTcpFlags = 28, 
    bcmFlowtrackerTrackingParamTypeOuterVlanTag = 29, 
    bcmFlowtrackerTrackingParamTypeIP6Length = 30, 
    bcmFlowtrackerTrackingParamTypeInnerIPLength = 31, 
    bcmFlowtrackerTrackingParamTypeInnerIP6Length = 32, 
    bcmFlowtrackerTrackingParamTypeTimestampNewLearn = 33, 
    bcmFlowtrackerTrackingParamTypeTimestampFlowStart = 34, 
    bcmFlowtrackerTrackingParamTypeTimestampFlowEnd = 35, 
    bcmFlowtrackerTrackingParamTypeTimestampCheckEvent1 = 36, 
    bcmFlowtrackerTrackingParamTypeTimestampCheckEvent2 = 37, 
    bcmFlowtrackerTrackingParamTypeInnerDosAttack = 38, 
    bcmFlowtrackerTrackingParamTypeTunnelClass = 39, 
    bcmFlowtrackerTrackingParamTypeFlowtrackerCheck = 40, 
    bcmFlowtrackerTrackingParamTypeCustom = 41, 
    bcmFlowtrackerTrackingParamTypeInPort = 42, 
    bcmFlowtrackerTrackingParamTypeCount = 43 
} bcm_flowtracker_tracking_param_type_t;

#define BCM_FT_TRACKING_PARAM_STRINGS \
{ \
    "None", \
    "SrcIPv4", \
    "DstIPv4", \
    "SrcIPv6", \
    "DstIPv6", \
    "L4SrcPort", \
    "L4DstPort", \
    "IPProtocol", \
    "PktCount", \
    "ByteCount", \
    "VRF", \
    "TTL", \
    "IPLength", \
    "TcpWindowSize", \
    "DosAttack", \
    "VxlanNetworkId", \
    "NextHeader", \
    "HopLimit", \
    "InnerSrcIPv4", \
    "InnerDstIPv4", \
    "InnerSrcIPv6", \
    "InnerDstIPv6", \
    "InnerIPProtocol", \
    "InnerTTL", \
    "InnerNextHeader", \
    "InnerHopLimit", \
    "InnerL4SrcPort", \
    "InnerL4DstPort", \
    "TcpFlags", \
    "OuterVlanTag", \
    "IP6Length", \
    "InnerIPLength", \
    "InnerIP6Length", \
    "TimestampNewLearn", \
    "TimestampFlowStart", \
    "TimestampFlowEnd", \
    "TimestampCheckEvent1", \
    "TimestampCheckEvent2", \
    "InnerDosAttack", \
    "TunnelClass", \
    "FlowtrackerCheck", \
    "Custom", \
    "InPort", \
    "Count"  \
}

/* Flowtracker export template elements information. */
typedef struct bcm_flowtracker_export_element_info_s {
    uint32 flags;                       /* See
                                           BCM_FLOWTRACKER_EXPORT_ELEMENT_FLAGS_XXX. */
    bcm_flowtracker_export_element_type_t element; /* Type of export element. */
    uint32 data_size;                   /* Size of information element in the
                                           export record in bytes. If the
                                           data_size is given as 0, then the
                                           default RFC size is used. */
    uint16 info_elem_id;                /* Information element to be used, when
                                           the template set is exported. */
    bcm_flowtracker_check_t check_id;   /* Flowtracker Check Id for exporting
                                           check data. */
} bcm_flowtracker_export_element_info_t;

/* Flowtracker template set transmit configuration. */
typedef struct bcm_flowtracker_template_transmit_config_s {
    int retransmit_interval_secs;   /* Interval in seconds at which the template
                                       set has to be transmitted. */
    int initial_burst;              /* Number of times the template set needs to
                                       be sent before settling to a periodic
                                       export. */
} bcm_flowtracker_template_transmit_config_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize the Flowtracker subsystem. */
extern int bcm_flowtracker_init(
    int unit);

/* Shut down the Flowtracker subsystem. */
extern int bcm_flowtracker_detach(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * Options that can be passed via options parameter during export
 * template creation.
 */
#define BCM_FLOWTRACKER_EXPORT_TEMPLATE_WITH_ID (1 << 0)   /* Create an export
                                                          template with ID. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Validate the template and return the list supported by the device. */
extern int bcm_flowtracker_export_template_validate(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    int max_in_export_elements, 
    bcm_flowtracker_export_element_info_t *in_export_elements, 
    int max_out_export_elements, 
    bcm_flowtracker_export_element_info_t *out_export_elements, 
    int *actual_out_export_elements);

/* Create a flowtracker export template. */
extern int bcm_flowtracker_export_template_create(
    int unit, 
    uint32 options, 
    bcm_flowtracker_export_template_t *id, 
    uint16 set_id, 
    int num_export_elements, 
    bcm_flowtracker_export_element_info_t *list_of_export_elements);

/* Get a flowtracker export template with ID. */
extern int bcm_flowtracker_export_template_get(
    int unit, 
    bcm_flowtracker_export_template_t id, 
    uint16 *set_id, 
    int max_size, 
    bcm_flowtracker_export_element_info_t *list_of_export_elements, 
    int *list_size);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize flowtracker template transmit configuration. */
extern void bcm_flowtracker_template_transmit_config_t_init(
    bcm_flowtracker_template_transmit_config_t *config);

#ifndef BCM_HIDE_DISPATCHABLE

/* Destroy a flowtracker export template with ID. */
extern int bcm_flowtracker_export_template_destroy(
    int unit, 
    bcm_flowtracker_export_template_t id);

/* Set the template transmit configuration. */
extern int bcm_flowtracker_template_transmit_config_set(
    int unit, 
    bcm_flowtracker_export_template_t template_id, 
    bcm_collector_t collector_id, 
    bcm_flowtracker_template_transmit_config_t *config);

/* Get the template transmit configuration. */
extern int bcm_flowtracker_template_transmit_config_get(
    int unit, 
    bcm_flowtracker_export_template_t template_id, 
    bcm_collector_t collector_id, 
    bcm_flowtracker_template_transmit_config_t *config);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize a flowtracker collector information structure. */
extern void bcm_flowtracker_collector_info_t_init(
    bcm_flowtracker_collector_info_t *collector_info);

/* 
 * Options that can be passed via options parameter during collector
 * creation.
 */
#define BCM_FLOWTRACKER_COLLECTOR_WITH_ID   (1 << 0)   /* Create a collector
                                                          with ID. */
#define BCM_FLOWTRACKER_COLLECTOR_REPLACE   (1 << 1)   /* Replace a collector
                                                          with ID. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Create a flowtracker collector with given collector info. */
extern int bcm_flowtracker_collector_create(
    int unit, 
    uint32 options, 
    bcm_flowtracker_collector_t *collector_id, 
    bcm_flowtracker_collector_info_t *collector_info);

/* Get flowtracker collector information with ID. */
extern int bcm_flowtracker_collector_get(
    int unit, 
    bcm_flowtracker_collector_t id, 
    bcm_flowtracker_collector_info_t *collector_info);

/* Get the list of all flowtracker collectors configured. */
extern int bcm_flowtracker_collector_get_all(
    int unit, 
    int max_size, 
    bcm_flowtracker_collector_t *collector_list, 
    int *list_size);

/* Destroy a flowtracker collector with ID. */
extern int bcm_flowtracker_collector_destroy(
    int unit, 
    bcm_flowtracker_collector_t id);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize a flowtracker flow group information structure. */
extern void bcm_flowtracker_group_info_t_init(
    bcm_flowtracker_group_info_t *flow_group_info);

/* 
 * Options that can be passed via options parameter during flow group
 * creation.
 */
#define BCM_FLOWTRACKER_GROUP_WITH_ID   (1 << 0)   /* Create a flow group with
                                                      ID. */
#define BCM_FLOWTRACKER_GROUP_REPLACE   (1 << 1)   /* Replace a flow group with
                                                      ID. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Create a flowtracker flow group with given flow group info. */
extern int bcm_flowtracker_group_create(
    int unit, 
    uint32 options, 
    bcm_flowtracker_group_t *flow_group_id, 
    bcm_flowtracker_group_info_t *flow_group_info);

/* Get flowtracker flow group information with ID. */
extern int bcm_flowtracker_group_get(
    int unit, 
    bcm_flowtracker_group_t id, 
    bcm_flowtracker_group_info_t *flow_group_info);

/* Get the list of all flowtracker flow groups configured. */
extern int bcm_flowtracker_group_get_all(
    int unit, 
    int max_size, 
    bcm_flowtracker_group_t *flow_group_list, 
    int *list_size);

/* Set flow limit on the flow group with ID. */
extern int bcm_flowtracker_group_flow_limit_set(
    int unit, 
    bcm_flowtracker_group_t id, 
    uint32 flow_limit);

/* Get flow limit of the flow group with ID. */
extern int bcm_flowtracker_group_flow_limit_get(
    int unit, 
    bcm_flowtracker_group_t id, 
    uint32 *flow_limit);

/* Set stat modeid on the flow group with ID. */
extern int bcm_flowtracker_group_stat_modeid_set(
    int unit, 
    bcm_flowtracker_group_t id, 
    uint32 stat_modeid);

/* Get flow limit of the flow group with ID. */
extern int bcm_flowtracker_group_stat_modeid_get(
    int unit, 
    bcm_flowtracker_group_t id, 
    uint32 *stat_modeid);

/* 
 * Set aging timer interval in ms on the flow group with ID. The minimum
 * is 100ms. And the value is expected to be multiples of 100ms. Default
 * would be 1 minute
 */
extern int bcm_flowtracker_group_age_timer_set(
    int unit, 
    bcm_flowtracker_group_t id, 
    uint32 aging_interval_ms);

/* Get aging timer interval in ms of the flow group with ID. */
extern int bcm_flowtracker_group_age_timer_get(
    int unit, 
    bcm_flowtracker_group_t id, 
    uint32 *aging_interval_ms);

/* Set export trigger information of the flow group with ID. */
extern int bcm_flowtracker_group_export_trigger_set(
    int unit, 
    bcm_flowtracker_group_t id, 
    bcm_flowtracker_export_trigger_info_t *export_trigger_info);

/* Get export trigger information of the flow group with ID. */
extern int bcm_flowtracker_group_export_trigger_get(
    int unit, 
    bcm_flowtracker_group_t id, 
    bcm_flowtracker_export_trigger_info_t *export_trigger_info);

/* Get the number of flows learnt in the flow group with ID. */
extern int bcm_flowtracker_group_flow_count_get(
    int unit, 
    bcm_flowtracker_group_t id, 
    uint32 *flow_count);

/* Destroy a flowtracker flow group with ID. */
extern int bcm_flowtracker_group_destroy(
    int unit, 
    bcm_flowtracker_group_t id);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * Flags that can be passed via flags parameter during flow group clear
 * operation.
 */
#define BCM_FLOWTRACKER_GROUP_CLEAR_ALL     (1 << 0)   /* Clear entire flow
                                                          group flow entries(key
                                                          and data). */
#define BCM_FLOWTRACKER_GROUP_CLEAR_FLOW_DATA_ONLY (1 << 1)   /* Clear only data of the
                                                          flow group flow
                                                          entries. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Clear a flow group's flow entries. */
extern int bcm_flowtracker_group_clear(
    int unit, 
    bcm_flowtracker_group_t id, 
    uint32 flags);

/* Associate flow group to a collector with an export template. */
extern int bcm_flowtracker_group_collector_add(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    bcm_flowtracker_collector_t collector_id, 
    bcm_flowtracker_export_template_t template_id);

/* Dis-associate flow group from a collector with an export template. */
extern int bcm_flowtracker_group_collector_delete(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    bcm_flowtracker_collector_t collector_id, 
    bcm_flowtracker_export_template_t template_id);

/* 
 * Get the list of collectors and templates associated with the flow
 * group.
 */
extern int bcm_flowtracker_group_collector_get_all(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    int max_list_size, 
    bcm_flowtracker_collector_t *list_of_collectors, 
    bcm_flowtracker_export_template_t *list_of_templates, 
    int *list_size);

/* Associate flow group to a collector with an export template. */
extern int bcm_flowtracker_group_collector_attach(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    bcm_collector_t collector_id, 
    int export_profile_id, 
    bcm_flowtracker_export_template_t template_id);

/* Dis-associate flow group from a collector with an export template. */
extern int bcm_flowtracker_group_collector_detach(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    bcm_collector_t collector_id, 
    int export_profile_id, 
    bcm_flowtracker_export_template_t template_id);

/* 
 * Get the list of collectors and templates associated with the flow
 * group.
 */
extern int bcm_flowtracker_group_collector_attach_get_all(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    int max_list_size, 
    bcm_collector_t *list_of_collectors, 
    bcm_flowtracker_export_template_t *list_of_templates, 
    int *export_profile_id_list, 
    int *list_size);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize flow key. */
extern void bcm_flowtracker_flow_key_t_init(
    bcm_flowtracker_flow_key_t *flow_key);

#ifndef BCM_HIDE_DISPATCHABLE

/* Get flow data for a given flow key within the given flow group. */
extern int bcm_flowtracker_group_data_get(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    bcm_flowtracker_flow_key_t *flow_key, 
    bcm_flowtracker_flow_data_t *flow_data);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Flow check operation types */
typedef enum bcm_flowtracker_check_operation_e {
    bcmFlowtrackerCheckOpNone = 0,      /* No operation for check. */
    bcmFlowtrackerCheckOpEqual = 1,     /* The packet attribute value should be
                                           equal to minimum value. */
    bcmFlowtrackerCheckOpNotEqual = 2,  /* The packet attribute value should not
                                           be equal to minimum value. */
    bcmFlowtrackerCheckOpSmaller = 3,   /* The packet attribute value should be
                                           smaller than the maximum value. */
    bcmFlowtrackerCheckOpSmallerEqual = 4, /* The packet attribute value should be
                                           smaller or equal to the maximum
                                           value. */
    bcmFlowtrackerCheckOpGreater = 5,   /* The packet attribute value should be
                                           greater than minimum value. */
    bcmFlowtrackerCheckOpGreaterEqual = 6, /* The packet attribute value should be
                                           Greater than or equal to minimum
                                           value. */
    bcmFlowtrackerCheckOpPass = 7,      /* The check will always pass. */
    bcmFlowtrackerCheckOpFail = 8,      /* The Check will always fail. */
    bcmFlowtrackerCheckOpInRange = 9,   /* The packet attribute value should be
                                           in Range of minimum and maximum
                                           values. Both values are inclusive */
    bcmFlowtrackerCheckOpOutofRange = 10, /* The packet attribute value should be
                                           out of  Range of minimum and maximum
                                           values. Both values are inclusive */
    bcmFlowtrackerCheckOpCount = 13     /* Last Value. Total number of all
                                           operations. */
} bcm_flowtracker_check_operation_t;

#define BCM_FT_CHECK_OPERATION_STRINGS \
{ \
    "None", \
    "Equal", \
    "NotEqual", \
    "Smaller", \
    "SmallerEqual", \
    "Greater", \
    "GreaterEqual", \
    "Pass", \
    "Fail", \
    "InRange", \
    "OutofRange", \
    "Count"  \
}

/* Flags for flowtracker check creation. */
#define BCM_FLOWTRACKER_CHECK_TIMESTAMP_CHECK_EVENT1 (1 << 0)   /* Enable trigger for
                                                          check's first event. */
#define BCM_FLOWTRACKER_CHECK_TIMESTAMP_CHECK_EVENT2 (1 << 1)   /* Enable trigger for
                                                          check's second event. */
#define BCM_FLOWTRACKER_CHECK_DATA_CLEAR_ON_EXPORT (1 << 2)   /* Clear data associated
                                                          with this check during
                                                          export. */
#define BCM_FLOWTRACKER_CHECK_EXPORT_MODE_THRESHOLD (1 << 3)   /* if set, compare if
                                                          check's updated data
                                                          is greater-equal to
                                                          threshold and old data
                                                          is less than threshold
                                                          for export check else
                                                          compare ALU new data
                                                          to old session data
                                                          and perform export
                                                          check. */

/* Flowtracker check information. */
typedef struct bcm_flowtracker_check_info_s {
    uint32 flags;                       /* Configuration flags for Check
                                           Creation. */
    bcm_flowtracker_tracking_param_type_t param; /* The attribute of flow on which the
                                           check is performed. */
    uint32 min_value;                   /* Element value to do greater than or
                                           equal checks. Minimum value to do
                                           range checks. */
    uint32 max_value;                   /* Element value to do smaller than
                                           checks. Maximum element value to do
                                           Range checks. */
    bcm_flowtracker_check_operation_t operation; /* Operation to be performed for this
                                           check. */
    bcm_flowtracker_check_t primary_check_id; /* primary check id to associate second
                                           check for aggregated checks on same
                                           flow. */
} bcm_flowtracker_check_info_t;

/* Flow check Action types */
typedef enum bcm_flowtracker_check_action_e {
    bcmFlowtrackerCheckActionNone = 0,  /* No action. */
    bcmFlowtrackerCheckActionCounterIncr = 1, /* Increment the Counter stored in
                                           tracking data table by 1. */
    bcmFlowtrackerCheckActionCounterIncrByValue = 2, /* Increment the attribute value stored
                                           in tracking data with the packet's
                                           attribute value. */
    bcmFlowtrackerCheckActionUpdateLowerValue = 3, /* Compare packet's attribute value with
                                           tracking data value and if lower,
                                           replace tracking data value with
                                           packets attribute value. */
    bcmFlowtrackerCheckActionUpdateHigherValue = 4, /* Compare packet's attribute value with
                                           tracking data value and if higher,
                                           replace tracking data value with
                                           packets attribute value. */
    bcmFlowtrackerCheckActionUpdateValue = 5, /* Replace packet's attribute value with
                                           the tracking data value. */
    bcmFlowtrackerCheckActionUpdateAverageValue = 6, /* Update tracking data with the
                                           Avergare of packet's attribute value
                                           and tracking data value */
    bcmFlowtrackerCheckActionCounterIncrByPktBytes = 7, /* Increment the Counter attached to
                                           this tracking data by number of bytes
                                           in the packet. */
    bcmFlowtrackerCheckActionCount = 8  /* Last Value. Count of Flow check
                                           Actions */
} bcm_flowtracker_check_action_t;

#define BCM_FT_CHECK_ACTION_STRINGS \
{ \
    "None", \
    "CounterIncr", \
    "CounterIncrByValue", \
    "UpdateLowerValue", \
    "UpdateHigherValue", \
    "UpdateValue", \
    "UpdateAverageValue", \
    "CounterIncrByPktBytes", \
    "Count"  \
}

/* Initialize a Flow check structure. */
extern void bcm_flowtracker_check_info_t_init(
    bcm_flowtracker_check_info_t *check_info);

/* 
 * Options that can be passed via options parameter during flow check
 * creation.
 */
#define BCM_FLOWTRACKER_CHECK_WITH_ID   (1 << 0)   /* Create a flow check with
                                                      ID. */
#define BCM_FLOWTRACKER_CHECK_SECOND    (1 << 1)   /* Create a secondary check
                                                      on existing check. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Create Flow check and return software ID. */
extern int bcm_flowtracker_check_create(
    int unit, 
    uint32 options, 
    bcm_flowtracker_check_info_t check_info, 
    bcm_flowtracker_check_t *check_id);

/* Destroy flow check corresponding to this software ID. */
extern int bcm_flowtracker_check_destroy(
    int unit, 
    bcm_flowtracker_check_t check_id);

/* Get information of flow check. */
extern int bcm_flowtracker_check_get(
    int unit, 
    bcm_flowtracker_check_t check_id, 
    bcm_flowtracker_check_info_t *check_info);

/* Destroy all the flow checks. */
extern int bcm_flowtracker_check_destroy_all(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

/* User callback for flow check traverse routine. */
typedef int(*bcm_flowtracker_check_traverse_cb)(
    int unit, 
    bcm_flowtracker_check_t check_id, 
    bcm_flowtracker_check_info_t *check_info, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* Traverse through the flow checks and run callback at each valid entry. */
extern int bcm_flowtracker_check_traverse(
    int unit, 
    bcm_flowtracker_check_traverse_cb cb, 
    void *user_data);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Actions related information for Flow check. */
typedef struct bcm_flowtracker_check_action_info_s {
    uint32 flags;                       /* Action flags. */
    bcm_flowtracker_tracking_param_type_t param; /* The attribute of flow on which the
                                           check is performed. */
    bcm_flowtracker_check_action_t action; /* Action to be performed if check
                                           passes. */
} bcm_flowtracker_check_action_info_t;

/* Initialize a flow check action information structure. */
extern void bcm_flowtracker_check_action_info_t_init(
    bcm_flowtracker_check_action_info_t *info);

#ifndef BCM_HIDE_DISPATCHABLE

/* Set action information of flow check. */
extern int bcm_flowtracker_check_action_info_set(
    int unit, 
    bcm_flowtracker_check_t check_id, 
    bcm_flowtracker_check_action_info_t info);

/* Get action information of flow check. */
extern int bcm_flowtracker_check_action_info_get(
    int unit, 
    bcm_flowtracker_check_t check_id, 
    bcm_flowtracker_check_action_info_t *info);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Flow check action flags. */
#define BCM_FLOWTRACKER_FLOWCHECKER_ACTION_IFP 0x00000001 

/* Export related information for Flow check. */
typedef struct bcm_flowtracker_check_export_info_s {
    uint32 export_check_threshold;      /* Threshold at which the export should
                                           be triggered for this check. At each
                                           incoming matching flow's packet the
                                           tracking data is updated and that
                                           value is checked with threshold
                                           value. If the check mentioned by
                                           operation passes between two values
                                           then export is triggered. */
    bcm_flowtracker_check_operation_t operation; /* Operation to be checked with
                                           threshold value for export check. */
} bcm_flowtracker_check_export_info_t;

/* Initialize a flow check export information structure. */
extern void bcm_flowtracker_check_export_info_t_init(
    bcm_flowtracker_check_export_info_t *info);

#ifndef BCM_HIDE_DISPATCHABLE

/* Set export information of flow check. */
extern int bcm_flowtracker_check_export_info_set(
    int unit, 
    bcm_flowtracker_check_t check_id, 
    bcm_flowtracker_check_export_info_t info);

/* Get export information of flow check. */
extern int bcm_flowtracker_check_export_info_get(
    int unit, 
    bcm_flowtracker_check_t check_id, 
    bcm_flowtracker_check_export_info_t *info);

/* Add flow check to this flowtracker group */
extern int bcm_flowtracker_group_check_add(
    int unit, 
    bcm_flowtracker_group_t group_id, 
    bcm_flowtracker_check_t check_id);

/* Delete flow check from this flowtracker group. */
extern int bcm_flowtracker_group_check_delete(
    int unit, 
    bcm_flowtracker_group_t group_id, 
    bcm_flowtracker_check_t check_id);

/* Get all the checks associated with the group. */
extern int bcm_flowtracker_group_check_get_all(
    int unit, 
    bcm_flowtracker_group_t group_id, 
    int max_checks, 
    bcm_flowtracker_check_t *list_of_check_ids, 
    int *num_checks);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Collector Copy Flags. */
#define BCM_FLOWTRACKER_COLLECTOR_COPY_SAMPLE_RANDOM 0x00000001 /* This flag is used to
                                                          select the random
                                                          number out of
                                                          num_pkts_skip_for_next_sample
                                                          for random sampling of
                                                          packet. If this flag
                                                          is not used then
                                                          num_pkts_skip_for_next_sample
                                                          is used as sampling
                                                          interval. */

/* Flowtracker Collector copy info. */
typedef struct bcm_flowtracker_collector_copy_info_s {
    uint32 flags;                       /* Flags for Collector copy information */
    uint32 num_pkts_initial_samples;    /*  Number of initial sample copies to
                                           be sent to collector */
    uint32 num_pkts_skip_for_next_sample; /* Number of packets to skip to send
                                           next sample copy to collector. */
} bcm_flowtracker_collector_copy_info_t;

/* Initialize a flowtracker collector copy information structure. */
extern void bcm_flowtracker_collector_copy_info_t_init(
    bcm_flowtracker_collector_copy_info_t *info);

#ifndef BCM_HIDE_DISPATCHABLE

/* Set collector copy information to the flowtracker group. */
extern int bcm_flowtracker_group_collector_copy_info_set(
    int unit, 
    bcm_flowtracker_group_t group_id, 
    bcm_flowtracker_collector_copy_info_t info);

/* Get collector copy information of this flowtracker group. */
extern int bcm_flowtracker_group_collector_copy_info_get(
    int unit, 
    bcm_flowtracker_group_t group_id, 
    bcm_flowtracker_collector_copy_info_t *info);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Configuration flags for flowtracker groups's meter. */
#define BCM_FLOWTRACKER_METER_MODE_PACKET   (1 << 0)   /* Group metering mode is
                                                          per packet. */

/* Flowtracker meter info. */
typedef struct bcm_flowtracker_meter_info_s {
    uint32 flags;               /* Flags for meter information */
    uint32 ckbits_sec;          /* Committed rate (kbits per sec). */
    uint32 ckbits_burst;        /* Committed burst size (kbits). */
    uint32 actual_ckbits_sec;   /* Granularity adjusted Committed rate (kbits
                                   per sec). */
    uint32 actual_ckbits_burst; /*  Granularity adjusted Committed burst size
                                   (kbits). */
} bcm_flowtracker_meter_info_t;

/* Initialize a flowtracker meter information structure. */
extern void bcm_flowtracker_meter_info_t_init(
    bcm_flowtracker_meter_info_t *meter_info);

#ifndef BCM_HIDE_DISPATCHABLE

/* Set meter information of this flowtracker group. */
extern int bcm_flowtracker_group_meter_info_set(
    int unit, 
    bcm_flowtracker_group_t group_id, 
    bcm_flowtracker_meter_info_t info);

/* Get meter information of this flowtracker group. */
extern int bcm_flowtracker_group_meter_info_get(
    int unit, 
    bcm_flowtracker_group_t group_id, 
    bcm_flowtracker_meter_info_t *info);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Flowtracker Tracking param defines. */
#define BCM_FLOWTRACKER_TRACKING_PARAM_MASK_LEN 16         /* Mask Length for
                                                          highest bit length
                                                          tracking parameter. */

/* bcm_flowtracker_tracking_param_mask_t */
typedef uint8 bcm_flowtracker_tracking_param_mask_t[BCM_FLOWTRACKER_TRACKING_PARAM_MASK_LEN];

/* bcm_flowtracker_param_user_entry_param_data_t */
typedef uint8 bcm_flowtracker_tracking_param_user_data_t[BCM_FLOWTRACKER_TRACKING_PARAM_MASK_LEN];

/* 
 * Options that can be passed via options parameter during export
 * template creation.
 */
#define BCM_FLOWTRACKER_TRACKING_PARAM_TYPE_KEY (1 << 0)   /* Tracking parameter is
                                                          a key. */

/* Flowtracker tracking parameter information. */
typedef struct bcm_flowtracker_tracking_param_info_s {
    uint32 flags;                       /* Flags for tracking parameters. */
    bcm_flowtracker_tracking_param_type_t param; /* Type of tracking parameter. */
    bcm_flowtracker_tracking_param_user_data_t tracking_data; /* Element data for the tracking param
                                           to be used to add a flow. */
    bcm_flowtracker_tracking_param_mask_t mask; /* Mask to select granular information
                                           from tracking parameter. By default,
                                           mask is set to all enabled. */
    bcm_flowtracker_check_t check_id;   /* Flowtracker Check to be used to
                                           tracking flow check data. */
    bcm_udf_id_t udf_id;                /* UDF Id associated with the tracking
                                           param. */
} bcm_flowtracker_tracking_param_info_t;

/* Initialize flowtracker's tracking parameters information structure. */
extern void bcm_flowtracker_tracking_param_info_t_init(
    bcm_flowtracker_tracking_param_info_t *info);

#ifndef BCM_HIDE_DISPATCHABLE

/* Set tracking parameter for this flowtracker group. */
extern int bcm_flowtracker_group_tracking_params_set(
    int unit, 
    bcm_flowtracker_group_t id, 
    int num_tracking_params, 
    bcm_flowtracker_tracking_param_info_t *list_of_tracking_params);

/* Get flowtracker tracking parameters for this group. */
extern int bcm_flowtracker_group_tracking_params_get(
    int unit, 
    bcm_flowtracker_group_t id, 
    int max_size, 
    bcm_flowtracker_tracking_param_info_t *list_of_tracking_params, 
    int *list_size);

/* Clear all the groups mentioned in group list. */
extern int bcm_flowtracker_group_multi_clear(
    int unit, 
    uint32 flags, 
    int num_groups, 
    bcm_flowtracker_group_t *list_of_group_ids);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Flowtracker Flow direction Types. */
typedef enum bcm_flowtracker_direction_e {
    bcmFlowtrackerFlowDirectionNone = 0, /* No Direction. */
    bcmFlowtrackerFlowDirectionForward = 1, /* The flow is tracked in forward
                                           direction only. Flow direciton is
                                           forward from server to client flow. */
    bcmFlowtrackerFlowDirectionReverse = 2, /* The flow is tracked in reverse
                                           direction only. Flow direciton is
                                           reverse from client to server flow. */
    bcmFlowtrackerFlowDirectionBidirectional = 3, /* The flow is tracked in both the
                                           forward and reverse directions. */
    bcmFlowtrackerFlowDirectionCount = 4 /* Last Value. Not Usable. */
} bcm_flowtracker_direction_t;

/* Flowtracker Group Control types */
typedef enum bcm_flowtracker_group_control_type_e {
    bcmFlowtrackerGroupControlNone = 0, /* No Group Control. */
    bcmFlowtrackerGroupControlNewLearnEnable = 1, /* Control to Enable/disable New flow
                                           learn on this group. */
    bcmFlowtrackerGroupControlFlowtrackerEnable = 2, /* Control to Enable/disable flow
                                           tracking on this group */
    bcmFlowtrackerGroupControlFlowDirection = 3, /* Control to set flow direction for
                                           tracking forward/reverse flow. */
    bcmFlowtrackerGroupControlCount = 4 /* Total Count of Group controls. */
} bcm_flowtracker_group_control_type_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Set flowtracker group control. */
extern int bcm_flowtracker_group_control_set(
    int unit, 
    bcm_flowtracker_group_t group_id, 
    bcm_flowtracker_group_control_type_t type, 
    int arg);

/* Get flowtracker group control. */
extern int bcm_flowtracker_group_control_get(
    int unit, 
    bcm_flowtracker_group_t group_id, 
    bcm_flowtracker_group_control_type_t type, 
    int *arg);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Flowtracker Tracking param defines. */
#define BCM_FLOWTRACKER_TRACKING_USER_ENTRY_WIDTH 48         /* Max width of
                                                          flowtracker user entry
                                                          key. */

/* Flowtracker user entry handle information. */
typedef struct bcm_flowtracker_user_entry_handle_s {
    bcm_flowtracker_group_t flow_group_id; /* Flowtracker group Id. */
    int flow_index;                     /* Flow index. */
    int flow_key_mode;                  /* Flow Key mode. */
    int flow_key_type;                  /* Flow Key type. */
    uint8 key_data[BCM_FLOWTRACKER_TRACKING_USER_ENTRY_WIDTH]; /* Flow user entry Key. */
} bcm_flowtracker_user_entry_handle_t;

/* Initialize flowtracker user entry handle information structure. */
extern void bcm_flowtracker_user_entry_handle_t_init(
    bcm_flowtracker_user_entry_handle_t *user_entry_handle);

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Add a user flow entry basis user input key elements. API expects that
 * all tracking parametrs of type = 'KEY' in the group are specified.
 */
extern int bcm_flowtracker_user_entry_add(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    uint32 options, 
    int num_user_entry_params, 
    bcm_flowtracker_tracking_param_info_t *user_entry_param_list, 
    bcm_flowtracker_user_entry_handle_t *entry_handle);

/* Fetch user entry info given the entry handle. */
extern int bcm_flowtracker_user_entry_get(
    int unit, 
    bcm_flowtracker_user_entry_handle_t *entry_handle, 
    int num_user_entry_params, 
    bcm_flowtracker_tracking_param_info_t *user_entry_param_list, 
    int *actual_user_entry_params);

/* Fetch all user entries added in a against a given flow group. */
extern int bcm_flowtracker_user_entry_get_all(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    int num_user_entry_handles, 
    bcm_flowtracker_user_entry_handle_t *user_entry_handle_list, 
    int *actual_user_entry_handles);

/* Delete user flow entry that is added earlier. */
extern int bcm_flowtracker_user_entry_delete(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    bcm_flowtracker_user_entry_handle_t *entry_handle);

/* Delete user flow entry that is added earlier. */
extern int bcm_flowtracker_user_entry_delete_all(
    int unit, 
    bcm_flowtracker_group_t flow_group_id);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Stats of the Flows on the group. */
typedef struct bcm_flowtracker_group_stat_s {
    uint64 flow_exceeded_count;         /* Count of flows not tracked in this
                                           group after maximum number of flows
                                           configured for this group are already
                                           learnt. */
    uint64 flow_missed_count;           /* Count of Aged out flows in the group. */
    uint64 flow_aged_out_count;         /* Count of flows which are Aged out in
                                           the group. */
    uint64 flow_learnt_count;           /* Count of flows learnt on the group. */
    uint64 flow_meter_exceeded_count;   /* Count of flows which exceeded the
                                           metering limits in the group. */
} bcm_flowtracker_group_stat_t;

/* Initialize a flowtracker group statistics structure. */
extern void bcm_flowtracker_group_stat_t_init(
    bcm_flowtracker_group_stat_t *group_stats);

#ifndef BCM_HIDE_DISPATCHABLE

/* Get flowtracker group statistics. */
extern int bcm_flowtracker_group_stat_get(
    int unit, 
    bcm_flowtracker_group_t group_id, 
    bcm_flowtracker_group_stat_t *group_stats);

/* Set flowtracker group statistics. */
extern int bcm_flowtracker_group_stat_set(
    int unit, 
    bcm_flowtracker_group_t group_id, 
    bcm_flowtracker_group_stat_t *group_stats);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Flowtracker CPU Notification types */
typedef enum bcm_flowtracker_cpu_notification_e {
    bcmFlowtrackerCpuNotificationNone = 0, /* No CPU Notification. Initial Value. */
    bcmFlowtrackerCpuNotificationFlowExceeded = 1, /* Notification will be sent to CPU when
                                           number of flows per group is exceeded
                                           from configured Max Limit. */
    bcmbcmFlowtrackerCpuNotificationTableFull = 2, /* Notification will be sent to CPU when
                                           Table is full and no new flow can be
                                           learnt. */
    bcmFlowtrackerCpuNotificationCount = 3 /* Last Value. Count of all CPU
                                           notifications. */
} bcm_flowtracker_cpu_notification_t;

/* Flowtracker CPU notification information. */
typedef struct bcm_flowtracker_cpu_notification_info_s {
    SHR_BITDCL notification_bmp[_SHR_BITDCLSIZE(bcmFlowtrackerCpuNotificationCount)]; /* The bitmap of CPU notifications which
                                           will notify CPU on corresponding
                                           activity. */
} bcm_flowtracker_cpu_notification_info_t;

/* Initialize a flowtracker CPU notification information structure. */
extern void bcm_flowtracker_cpu_notification_info_t_init(
    bcm_flowtracker_cpu_notification_info_t *info);

#define BCM_FLOWTRACKER_CPU_NOTIFICATION_SET(_info, _notification)  SHR_BITSET(((_info).notification_bmp), (_notification)) 

#define BCM_FLOWTRACKER_CPU_NOTIFICATION_GET(_info, _notification)  SHR_BITGET(((_info).notification_bmp), (_notification)) 

#define BCM_FLOWTRACKER_CPU_NOTIFICATION_CLEAR(_info, _notification)  SHR_BITCLR(((_info).notification_bmp), (_notification)) 

#define BCM_FLOWTRACKER_CPU_NOTIFICATION_CLEAR_ALL(_info)  SHR_BITCLR_RANGE(((_info).notification_bmp), 0, bcmFlowtrackerCpuNotificationCount) 

#ifndef BCM_HIDE_DISPATCHABLE

/* Set CPU notification on the flowtracker group. */
extern int bcm_flowtracker_group_cpu_notification_set(
    int unit, 
    bcm_flowtracker_group_t id, 
    bcm_flowtracker_cpu_notification_info_t *info);

/* Get CPU notification of the flowtracker group. */
extern int bcm_flowtracker_group_cpu_notification_get(
    int unit, 
    bcm_flowtracker_group_t id, 
    bcm_flowtracker_cpu_notification_info_t *info);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * Max size of the data record received at the CPU through the FIFO DMA
 * reception.
 */
#define BCM_FLOWTRACKER_EXPORT_RECORD_LENGTH BITS2BYTES(1024) /* Maximum length of a
                                                          data record. 1024
                                                          bits. */

/* 
 * Flowtracker Export record structure. Data record info passed to
 * application software by SDK Software. The unprocessed data record will
 * be presented in network byte order.
 */
typedef struct bcm_flowtracker_export_record_s {
    int size;                           /* Number of valid octets in the
                                           data_record array for the device. */
    uint8 data_record[BCM_FLOWTRACKER_EXPORT_RECORD_LENGTH]; /* Raw data record in network byte
                                           order. */
} bcm_flowtracker_export_record_t;

/* bcm_flowtracker_export_record_t_init */
extern void bcm_flowtracker_export_record_t_init(
    bcm_flowtracker_export_record_t *record);

/* 
 * Defines for priorities of registered handlers for Flowtracker export
 * records. Callback handlers are always called from highest priority to
 * lowest priority until one of the handlers returns record_handled or
 * record_handled_owned.
 * 
 * 
 * When callback handling proecedure starts, a default callback handler
 * is installed at BCM_FLOWTRACKER_EXPORT_CB_PRIO_MIN priority that
 * simply discards the record.
 */
#define BCM_FLOWTRACKER_EXPORT_CB_PRIO_MIN  ((uint8)0) 
#define BCM_FLOWTRACKER_EXPORT_CB_PRIO_MAX  ((uint8)255) 

/* Flowtracker Export callback options */
typedef struct bcm_flowtracker_collector_callback_options_s {
    int callback_prio;  /* Priority of the callback function in the list. */
} bcm_flowtracker_collector_callback_options_t;

/* bcm_flowtracker_collector_callback_options_t_init */
extern void bcm_flowtracker_collector_callback_options_t_init(
    bcm_flowtracker_collector_callback_options_t *callback_options);

/* Return values from Flowtracker export record callout routines. */
typedef enum bcm_flowtracker_export_record_handle_e {
    BCM_FLOWTRACKER_EXPORT_RECORD_INVALID = 0, /* Invalid return value. */
    BCM_FLOWTRACKER_EXPORT_RECORD_NOT_HANDLED = 1, /* Export record not processed. */
    BCM_FLOWTRACKER_EXPORT_RECORD_HANDLED = 2, /* Export record handled, not owned. */
    BCM_FLOWTRACKER_EXPORT_RECORD_HANDLED_OWNED = 3 /* Export record handled and owned. */
} bcm_flowtracker_export_record_handle_t;

/* Callback routine for flowtracker record exported to local collector. */
typedef bcm_flowtracker_export_record_handle_t (*bcm_flowtracker_export_record_cb_f)(
    int unit, 
    bcm_flowtracker_collector_t collector_id, 
    bcm_flowtracker_export_record_t *record, 
    void *userdata);

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Register callback routine for Local collector Flowtracker record
 * export.
 */
extern int bcm_flowtracker_export_record_register(
    int unit, 
    bcm_flowtracker_collector_t collector_id, 
    bcm_flowtracker_collector_callback_options_t callback_options, 
    bcm_flowtracker_export_record_cb_f callback_fn, 
    void *userdata);

/* 
 * Unregister callback routine for Local collector Flowtracker record
 * export.
 */
extern int bcm_flowtracker_export_record_unregister(
    int unit, 
    bcm_flowtracker_collector_t collector_id, 
    bcm_flowtracker_collector_callback_options_t callback_options, 
    bcm_flowtracker_export_record_cb_f callback_fn);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Group actions set flags. */
#define BCM_FLOWTRACKER_GROUP_ACTIONS_SET_FLAGS_ELEPHANT_FLOWS (1 << 0)   /* Actions apply to only
                                                          elephant flows in the
                                                          group. */

/* 
 * Packet Color, need to be specified in param0 when using
 * bcmFlowtrackerGroupActionXXDropPrecedence.
 */
#define BCM_FLOWTRACKER_GROUP_ACTION_PKT_COLOR_GREEN 1          
#define BCM_FLOWTRACKER_GROUP_ACTION_PKT_COLOR_YELLOW 2          
#define BCM_FLOWTRACKER_GROUP_ACTION_PKT_COLOR_RED 3          

/* Flowtracker Group action types */
typedef enum bcm_flowtracker_group_action_e {
    bcmFlowtrackerGroupActionRpDropPrecedence = 0, /* Set Red Priority Drop Precedence;
                                           param0:
                                           BCM_FLOWTRACKER_GROUP_ACTION_PKT_COLOR_XXX.. */
    bcmFlowtrackerGroupActionYpDropPrecedence = 1, /* Set Yellow Priority Drop Precedence;
                                           param0:
                                           BCM_FLOWTRACKER_GROUP_ACTION_PKT_COLOR_XXX.. */
    bcmFlowtrackerGroupActionGpDropPrecedence = 2, /* Set Green Priority Drop Precedence;
                                           param0:
                                           BCM_FLOWTRACKER_GROUP_ACTION_PKT_COLOR_XXX.. */
    bcmFlowtrackerGroupActionUcastCosQNew = 3, /* Change CoS Queue for unicast packets;
                                           param0: New CoS Queue. */
    bcmFlowtrackerGroupActionMcastCosQNew = 4, /* Change CoS Queue for multicast
                                           packets; param0: New CoS Queue. */
    bcmFlowtrackerGroupActionPrioIntNew = 5, /* Change internal priority; param0: New
                                           internal priority */
    bcmFlowtrackerGroupActionFspReinject = 6, /* Re-inject the First Seen Packet to
                                           the specified CosQ */
    bcmFlowtrackerGroupActionDropMonitor = 7, /* Monitor Dropped flows */
    bcmFlowtrackerGroupActionCount = 8  /* Always Last. Not a usable value. */
} bcm_flowtracker_group_action_t;

/* Flowtracker Group action params */
typedef struct bcm_flowtracker_group_action_param_s {
    uint32 param0; 
    uint32 param1; 
} bcm_flowtracker_group_action_param_t;

/* Flowtracker Group action info */
typedef struct bcm_flowtracker_group_action_info_s {
    bcm_flowtracker_group_action_t action; /* Action */
    bcm_flowtracker_group_action_param_t params; /* Action param */
} bcm_flowtracker_group_action_info_t;

/* Initialize a flowtracker group action info structure. */
extern void bcm_flowtracker_group_action_info_t_init(
    bcm_flowtracker_group_action_info_t *action_info);

#ifndef BCM_HIDE_DISPATCHABLE

/* Set list of actions on a flow group. */
extern int bcm_flowtracker_group_actions_set(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    uint32 flags, 
    int num_actions, 
    bcm_flowtracker_group_action_info_t *action_list);

/* Get list of actions applied on a flow group. */
extern int bcm_flowtracker_group_actions_get(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    uint32 flags, 
    int max_actions, 
    bcm_flowtracker_group_action_info_t *action_list, 
    int *num_actions);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Miscellaneous Flowtracker Elephant defines. */
#define BCM_FLOWTRACKER_ELEPHANT_MAX_PROMOTION_FILTERS 2          /* Maximum number of
                                                          promotion filters in
                                                          an elephant profile. */

/* Elephant filter flags. */
#define BCM_FLOWTRACKER_ELEPHANT_FILTER_FLAGS_INCREASING_RATE (1 << 0)   /* Rate must increase on
                                                          every scan */

/* 
 * Options that can be passed via options parameter during elephant
 * profile creation.
 */
#define BCM_FLOWTRACKER_ELEPHANT_PROFILE_WITH_ID (1 << 0)   /* Create an elephant
                                                          profile  with ID. */

/* Mirror on Drop class ID flag. */
#define BCM_FLOWTRACKER_EXACT_MATCH_CLASS_ID_FLOW_DROP 1          /* Exact Match flow drop
                                                          indicator class ID */

/* Flowtracker Elephant profile Id. */
typedef int bcm_flowtracker_elephant_profile_t;

/* Flowtracker Elephant filter config */
typedef struct bcm_flowtracker_elephant_filter_s {
    uint32 flags;                       /* See
                                           BCM_FLOWTRACKER_ELEPHANT_FILTER_FLAGS_XXX
                                           definitions */
    uint32 monitor_interval_usecs;      /* How long should the flow be monitored */
    uint32 rate_low_threshold_kbits_sec; /* Minimum rate the flow must have to
                                           continue monitoring (kbits_sec = 1000
                                           bits/sec) */
    uint32 rate_high_threshold_kbits_sec; /* Rate that must be observed at least
                                           once during monitoring interval for a
                                           flow to pass the monitoring criteria
                                           (kbits_sec = 1000 bits/sec) */
    uint64 size_threshold_bytes;        /* Total size in bytes that must be
                                           observed after the monitoring
                                           interval for a flow to pass the
                                           monitoring criteria */
} bcm_flowtracker_elephant_filter_t;

/* Flowtracker Elephant profile info */
typedef struct bcm_flowtracker_elephant_profile_info_s {
    uint8 num_promotion_filters;        /* Number of promotion filters */
    bcm_flowtracker_elephant_filter_t promotion_filters[BCM_FLOWTRACKER_ELEPHANT_MAX_PROMOTION_FILTERS]; /* Promotion filters */
    bcm_flowtracker_elephant_filter_t demotion_filter; /* Demotion filter */
} bcm_flowtracker_elephant_profile_info_t;

/* Initialize a flowtracker elephant profile info structure. */
extern void bcm_flowtracker_elephant_profile_info_t_init(
    bcm_flowtracker_elephant_profile_info_t *profile);

#ifndef BCM_HIDE_DISPATCHABLE

/* Create flowtracker elephant profile. */
extern int bcm_flowtracker_elephant_profile_create(
    int unit, 
    uint32 options, 
    bcm_flowtracker_elephant_profile_info_t *profile, 
    bcm_flowtracker_elephant_profile_t *profile_id);

/* Destroy a flowtracker elephant profile. */
extern int bcm_flowtracker_elephant_profile_destroy(
    int unit, 
    bcm_flowtracker_elephant_profile_t profile_id);

/* Get flowtracker elephant profile information. */
extern int bcm_flowtracker_elephant_profile_get(
    int unit, 
    bcm_flowtracker_elephant_profile_t profile_id, 
    bcm_flowtracker_elephant_profile_info_t *profile);

/* Get the list of all flowtracker elephant profiles configured. */
extern int bcm_flowtracker_elephant_profile_get_all(
    int unit, 
    int max, 
    bcm_flowtracker_elephant_profile_t *profile_list, 
    int *count);

/* Attach a flow group with an elephant profile. */
extern int bcm_flowtracker_group_elephant_profile_attach(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    bcm_flowtracker_elephant_profile_t profile_id);

/* Get the elephant profile Id attached to a flow group. */
extern int bcm_flowtracker_group_elephant_profile_attach_get(
    int unit, 
    bcm_flowtracker_group_t flow_group_id, 
    bcm_flowtracker_elephant_profile_t *profile_id);

/* Detach a flow group from an elephant profile. */
extern int bcm_flowtracker_group_elephant_profile_detach(
    int unit, 
    bcm_flowtracker_group_t flow_group_id);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Elephant match types */
#define BCM_FLOWTRACKER_ELEPHANT_MATCH_TYPE_PKT_TYPE_BMP (1 << 0)   /* Packet type bitmap. */
#define BCM_FLOWTRACKER_ELEPHANT_MATCH_TYPE_INT_PRI_BMP (1 << 1)   /* Internal priority
                                                          bitmap. */
#define BCM_FLOWTRACKER_ELEPHANT_MATCH_TYPE_INGRESS_PBMP (1 << 2)   /* Ingress port bitmap. */
#define BCM_FLOWTRACKER_ELEPHANT_MATCH_TYPE_EGRESS_PBMP (1 << 3)   /* Egress port bitmap. */

/* Elephant flow packet types */
#define BCM_FLOWTRACKER_ELEPHANT_PKT_TYPE_IPV4_TCP (1 << 0)   /* IPv4 TCP packets. */
#define BCM_FLOWTRACKER_ELEPHANT_PKT_TYPE_IPV4_UDP (1 << 1)   /* IPv4 UDP packets. */
#define BCM_FLOWTRACKER_ELEPHANT_PKT_TYPE_IPV4_OTHER (1 << 2)   /* IPv4 non TCP, UDP
                                                          packets. */
#define BCM_FLOWTRACKER_ELEPHANT_PKT_TYPE_IPV6_TCP (1 << 3)   /* IPv6 TCP packets. */
#define BCM_FLOWTRACKER_ELEPHANT_PKT_TYPE_IPV6_UDP (1 << 4)   /* IPv6 UDP packets. */
#define BCM_FLOWTRACKER_ELEPHANT_PKT_TYPE_IPV6_OTHER (1 << 5)   /* IPv6 non TCP, UDP
                                                          packets. */
#define BCM_FLOWTRACKER_ELEPHANT_PKT_TYPE_MPLS (1 << 6)   /* MPLS packets. */
#define BCM_FLOWTRACKER_ELEPHANT_PKT_TYPE_OTHER (1 << 7)   /* Non IPv4, IPv6, MPLS
                                                          packets. */

/* Elephant match data. */
typedef struct bcm_flowtracker_elephant_match_data_s {
    bcm_pbmp_t ingress_pbmp;    /* Ingress port bitmap */
    bcm_pbmp_t egress_pbmp;     /* Egress port bitmap */
    uint32 pkt_type_bmp;        /* pkt type bitmap, See
                                   BCM_FLOWTRACKER_ELEPHANT_PKT_TYPE_XXX */
    uint32 int_pri_bmp;         /* Internal priority bitmap */
} bcm_flowtracker_elephant_match_data_t;

/* Initialize elephant match data. */
extern void bcm_flowtracker_elephant_match_data_t_init(
    bcm_flowtracker_elephant_match_data_t *match_data);

typedef enum bcm_flowtracker_elephant_match_action_e {
    bcmFlowtrackerElephantMatchActionLookup = 0, /* Enable elephant lookup */
    bcmFlowtrackerElephantMatchActionQueue = 1, /* Enable queue actions */
    bcmFlowtrackerElephantMatchActionColor = 2, /* Enable color actions */
    bcmFlowtrackerElephantMatchActionCount = 3 /* Always Last. Not a usable value. */
} bcm_flowtracker_elephant_match_action_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Set the match criteria for an elephant action. */
extern int bcm_flowtracker_elephant_action_match_set(
    int unit, 
    bcm_flowtracker_elephant_match_action_t action, 
    uint32 match_types, 
    bcm_flowtracker_elephant_match_data_t *match_data);

/* Get the match criteria for an elephant action. */
extern int bcm_flowtracker_elephant_action_match_get(
    int unit, 
    bcm_flowtracker_elephant_match_action_t action, 
    uint32 *match_types, 
    bcm_flowtracker_elephant_match_data_t *match_data);

/* Set the internal priority remap for elephant flows. */
extern int bcm_flowtracker_elephant_int_pri_remap_set(
    int unit, 
    bcm_cos_t int_pri, 
    bcm_cos_t new_int_pri);

/* Get the internal priority remap for elephant flows. */
extern int bcm_flowtracker_elephant_int_pri_remap_get(
    int unit, 
    bcm_cos_t int_pri, 
    bcm_cos_t *new_int_pri);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Elephant controls */
typedef enum bcm_flowtracker_elephant_control_e {
    bcmFlowtrackerElephantControlMonitorIntervalUsecs = 0, /* Elephant monitor interval in
                                           microseconds */
    bcmFlowtrackerElephantControlBloomFilterByteThreshold = 1, /* Bloom filter promotion threshold in
                                           bytes */
    bcmFlowtrackerElephantControlElephantThresholdBytes = 2, /* Elephant promotion threshold in bytes */
    bcmFlowtrackerElephantControlDemotionThresholdBytes = 3, /* Elephant demotion threshold in bytes */
    bcmFlowtrackerElephantControlYellowThreshold = 4, /* Threshold in bytes to mark an
                                           elephant flow as yellow */
    bcmFlowtrackerElephantControlRedThreshold = 5, /* Threshold in bytes to mark an
                                           elephant flow as red */
    bcmFlowtrackerElephantControlPacketRemarkEnable = 6, /* Enable packet remarking */
    bcmFlowtrackerElephantControlSampleRate = 7, /* Set elephant flow sample rate (Every
                                           1 in 'arg' number of packets will be
                                           sampled) */
    bcmFlowtrackerElephantControlSampleSeed = 8, /* Set seed for the random number
                                           generator used for sampling */
    bcmFlowtrackerElephantControlSampleCopyToCpu = 9, /* Copy to Cpu sampled packets */
    bcmFlowtrackerElephantControlCount = 10 /* Last Value. Not Usable. */
} bcm_flowtracker_elephant_control_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Set elephant controls. */
extern int bcm_flowtracker_elephant_control_set(
    int unit, 
    bcm_flowtracker_elephant_control_t  type, 
    int arg);

/* Get elephant controls. */
extern int bcm_flowtracker_elephant_control_get(
    int unit, 
    bcm_flowtracker_elephant_control_t  type, 
    int *arg);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Elephant hash tables */
typedef enum bcm_flowtracker_elephant_hash_table_e {
    bcmFlowtrackerElephantHashTableBloomFilter = 0, /* Bloom filter hash table. */
    bcmFlowtrackerElephantHashTableFlowTable = 1, /* Elephant flow table. */
    bcmFlowtrackerElephantHashTableCount = 2 /* Last Value. Not Usable. */
} bcm_flowtracker_elephant_hash_table_t;

/* Elephant hash types */
typedef enum bcm_flowtracker_elephant_hash_type_e {
    bcmFlowtrackerElephantHashTypeField0Function0 = 0, /* Hash field 0, mode 0 configured using
                                           bcmSwitchHashField0Config */
    bcmFlowtrackerElephantHashTypeField0Function1 = 1, /* Hash field 0, mode 1 configured using
                                           bcmSwitchHashField0Config1. */
    bcmFlowtrackerElephantHashTypeField1Function0 = 2, /* Hash field 1, mode 0 configured using
                                           bcmSwitchHashField1Config. */
    bcmFlowtrackerElephantHashTypeField1Function1 = 3, /* Hash field 1, mode 1 configured using
                                           bcmSwitchHashField1Config1. */
    bcmbcmFlowtrackerElephantHashTypeCount = 4 /* Last Value. Not Usable. */
} bcm_flowtracker_elephant_hash_type_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Set the hashing configuration */
extern int bcm_flowtracker_elephant_hash_config_set(
    int unit, 
    bcm_flowtracker_elephant_hash_table_t hash_table, 
    int instance_num, 
    int bank_num, 
    bcm_flowtracker_elephant_hash_type_t hash_type, 
    int right_rotate_bits);

/* Get the hashing configuration */
extern int bcm_flowtracker_elephant_hash_config_get(
    int unit, 
    bcm_flowtracker_elephant_hash_table_t hash_table, 
    int instance_num, 
    int bank_num, 
    bcm_flowtracker_elephant_hash_type_t *hash_type, 
    int *right_rotate_bits);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Elephant statistics */
typedef struct bcm_flowtracker_elephant_stats_s {
    uint64 num_candidates_detected;     /* Total number of candidate flows that
                                           were detected */
    uint64 num_flow_table_insert_failures; /* Total number of elephant flow table
                                           insertion failures */
    uint64 num_flow_table_insert_success; /* Total number of elephant flow table
                                           insertion success */
    uint64 num_elephants_detected;      /* Total number of elephants that were
                                           detected */
} bcm_flowtracker_elephant_stats_t;

/* Initialize elephant statistics structure. */
extern void bcm_flowtracker_elephant_stats_t_init(
    bcm_flowtracker_elephant_stats_t *stats);

#ifndef BCM_HIDE_DISPATCHABLE

/* Set the elephant statistics */
extern int bcm_flowtracker_elephant_stats_set(
    int unit, 
    bcm_flowtracker_elephant_stats_t *stats);

/* Get the elephant statistics */
extern int bcm_flowtracker_elephant_stats_get(
    int unit, 
    bcm_flowtracker_elephant_stats_t *stats);

/* Get the instantaneous elephant statistics */
extern int bcm_flowtracker_elephant_stats_sync_get(
    int unit, 
    bcm_flowtracker_elephant_stats_t *stats);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Flowtracker Chip Debug configuration. */
typedef struct bcm_flowtracker_chip_debug_info_s {
    bcm_flowtracker_tracking_param_type_t param; /* The attribute of flow on which
                                           debugging is enabled. */
    uint32 count;                       /* Count of the pass events happened for
                                           a particular check. */
} bcm_flowtracker_chip_debug_info_t;

/* Initialize flowtracker Chip Debug information. */
extern void bcm_flowtracker_chip_debug_info_t_init(
    bcm_flowtracker_chip_debug_info_t *info);

#ifndef BCM_HIDE_DISPATCHABLE

/* Set tracking parameters debug information. */
extern int bcm_flowtracker_chip_debug_info_set(
    int unit, 
    int num_debug_info, 
    bcm_flowtracker_chip_debug_info_t *list_of_debug_info);

/* Get flowtracker tracking parameters debug information. */
extern int bcm_flowtracker_chip_debug_info_get(
    int unit, 
    int max_debug_info_size, 
    bcm_flowtracker_chip_debug_info_t *list_of_debug_info, 
    int *actual_debug_info_size);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_FLOWTRACKER_H__ */
