/*
 * $Id: $
 * 
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_TIME_H__
#define __BCM_TIME_H__

#include <bcm/types.h>

/* Time Interface Identifier. */
typedef int bcm_time_if_t;

#define BCM_TIME_ENABLE         0x00000001 /* Enable Time Synchronization
                                              Interface */
#define BCM_TIME_WITH_ID        0x00000002 /* Create/Update interface with valid
                                              identifier in the structure */
#define BCM_TIME_REPLACE        0x00000004 /* Replace current interface settings
                                              according to flags provided */
#define BCM_TIME_INPUT          0x00000008 /* Current interface will recieve a
                                              time sync messages (Act as slave) */
#define BCM_TIME_DRIFT          0x00000020 /* To set/get the drift parameter for
                                              Interface */
#define BCM_TIME_OFFSET         0x00000040 /* To set/get the offset parameter
                                              for Interface */
#define BCM_TIME_ACCURACY       0x00000080 /* To set/get the accuracy parameter
                                              for Interface */
#define BCM_TIME_HEARTBEAT      0x00000100 /* To set the heartbeat frequency for
                                              Interface */
#define BCM_TIME_LOCKED         0x00000200 /* To indicate that interface is
                                              locked on a grand master's clock */
#define BCM_TIME_REF_CLOCK      0x00000400 /* Enable Reference clock */
#define BCM_TIME_SYNC_STAMPER   0x00000800 /* Enable BroadSync timestamper sync
                                              support */
#define BCM_TIME_NTP_OFFSET     0x000001000 /* To set/get the ntp offset
                                              parameter for Interface */

/* BroadSync Time Source Status. */
typedef enum bcm_bs_time_source_e {
    bcmBsTimeSourceNotLocked = 0,       /* No time-code received, Holdover mode
                                           or Not Locked */
    bcmBsTimeSourceAcquiring = 1,       /* Acquiring state */
    bcmBsTimeSourceExcessiveJitter = 2, /* Acquiring state but locked with
                                           excessive jitter */
    bcmBsTimeSourceLocked = 3           /* Locked State */
} bcm_bs_time_source_t;

/* Base time structure. */
typedef struct bcm_time_interface_s {
    uint32 flags;                   /* Flags BCM_TIME_* */
    bcm_time_if_t id;               /* Time Interface Identifier */
    bcm_time_spec_t drift;          /* Drift amount per 1 Sec */
    bcm_time_spec_t offset;         /* Offset */
    bcm_time_spec_t accuracy;       /* Accuracy */
    int heartbeat_hz;               /* HeartBeat Rate */
    int clk_resolution;             /* Reference clock resolution in nsecs */
    int bitclock_hz;                /* BitClock frequency */
    bcm_bs_time_source_t status;    /* BroadSync Time Source Status */
    bcm_time_spec_t ntp_offset;     /* NTP Offset */
} bcm_time_interface_t;

#define BCM_TIME_CAPTURE_LOCKED             0x00000001 /* Captured Time is
                                                          synchronized with
                                                          Grand Master */
#define BCM_TIME_CAPTURE_GPIO_0             0x00000002 /* Capture Time at rising
                                                          edge of GPIO 0 */
#define BCM_TIME_CAPTURE_GPIO_1             0x00000004 /* Capture Time at rising
                                                          edge of GPIO 1 */
#define BCM_TIME_CAPTURE_GPIO_2             0x00000008 /* Capture Time at rising
                                                          edge of GPIO 2 */
#define BCM_TIME_CAPTURE_GPIO_3             0x00000010 /* Capture Time at rising
                                                          edge of GPIO 3 */
#define BCM_TIME_CAPTURE_GPIO_4             0x00000020 /* Capture Time at rising
                                                          edge of GPIO 4 */
#define BCM_TIME_CAPTURE_GPIO_5             0x00000040 /* Capture Time at rising
                                                          edge of GPIO 5 */
#define BCM_TIME_CAPTURE_L1_CLOCK_PRIMARY   0x00000080 /* Capture Time at rising
                                                          edge of primary L1 */
#define BCM_TIME_CAPTURE_L1_CLOCK_SECONDARY 0x00000100 /* Capture Time at rising
                                                          edge of primary L2 */
#define BCM_TIME_CAPTURE_LCPLL              0x00000200 /* Capture Time at rising
                                                          edge of LCPLL */
#define BCM_TIME_CAPTURE_IP_DM_0            0x00000400 /* Capture Time at rising
                                                          edge of DM0 */
#define BCM_TIME_CAPTURE_IP_DM_1            0x00000800 /* Capture Time at rising
                                                          edge of DM1 */
#define BCM_TIME_CAPTURE_IMMEDIATE          0x00001000 /* Capture Immediate */
#define BCM_TIME_CAPTURE_ALL                0x00002000 /* Capture Immediate */

/* Base time capture structure. */
typedef struct bcm_time_capture_s {
    uint32 flags;                       /*  Flags BCM_TIME_CAPTURE_* */
    bcm_time_spec_t free;               /* Free running clock */
    bcm_time_spec_t syntonous;          /* Syntonous clock */
    bcm_time_spec_t synchronous;        /* Synchronous clock */
    bcm_time_spec_t received;           /* Received clock */
    bcm_time_spec_t received_accuracy;  /* Received clock accuracy */
} bcm_time_capture_t;

/* SyncE Clock Source Type. */
typedef enum bcm_time_synce_clock_src_type_e {
    bcmTimeSynceClockSourcePrimary = 0, /* Primary Clock Source */
    bcmTimeSynceClockSourceSecondary = 1 /* Secondary Clock Source */
} bcm_time_synce_clock_src_type_t;

/* SyncE Input Source Type. */
typedef enum bcm_time_synce_input_src_type_e {
    bcmTimeSynceInputSourceTypePort = 0, /* Input Source Port */
    bcmTimeSynceInputSourceTypePLL = 1  /* Input Source PLL */
} bcm_time_synce_input_src_type_t;

/* SyncE Stage0 Mode. */
typedef enum bcm_time_synce_stage0_mode_e {
    bcmTimeSynceModeBypass = 0,     /* Stage0 Mode Bypass */
    bcmTimeSynceModeGap45 = 1,      /* Stage0 Mode GAP 4/5 */
    bcmTimeSynceModeSDMFracDiv = 2  /* Stage0 Mode SDM Frac Div */
} bcm_time_synce_stage0_mode_t;

/* bcm_time_synce_stage1_div_e */
typedef enum bcm_time_synce_stage1_div_e {
    bcmTimeSynceStage1Div1 = 0, /* Stage1 Div1 */
    bcmTimeSynceStage1Div7 = 1, /* Stage1 Div7 */
    bcmTimeSynceStage1Div11 = 2 /* Stage1 Div11 */
} bcm_time_synce_stage1_div_t;

/* Time Synce Divisor setting structure. */
typedef struct bcm_time_synce_divisor_setting_s {
    bcm_time_synce_input_src_type_t input_src; /* Input source type */
    uint32 index;                       /* Logical port number or PLL index */
    bcm_time_synce_stage0_mode_t stage0_mode; /* Stage0 Mode bcmTimeSynceMode* */
    uint32 stage0_sdm_whole;            /* Stage0 SDM whole value */
    uint32 stage0_sdm_frac;             /* Stage0 SDM frac value */
    bcm_time_synce_stage1_div_t stage1_div; /* Stage1 Div bcmTimeSynceStage1Div* */
} bcm_time_synce_divisor_setting_t;

/* BS log configuration structure. */
typedef struct bcm_time_bs_log_cfg_s {
    uint32 debug_mask;      /* mask indicating log level */
    uint64 udp_log_mask;    /* mask indicating UDP log level */
    bcm_mac_t src_mac;      /* Source MAC address */
    bcm_mac_t dest_mac;     /* Destination MAC address */
    uint16 tpid;            /* TPID */
    uint16 vid;             /* VLAN ID */
    uint8 ttl;              /* Time to live */
    bcm_ip_t src_addr;      /* Source IP address */
    bcm_ip_t dest_addr;     /* Destination IP address */
    uint16 udp_port;        /* UDP port number */
} bcm_time_bs_log_cfg_t;

#define BCM_BS_LOG_NONE         0x00000000 /* BS log level None */
#define BCM_BS_LOG_SYS_INFO     0x00000001 /* BS log level info */
#define BCM_BS_LOG_SYS_WARN     0x00000002 /* BS log level warning */
#define BCM_BS_LOG_SYS_ERR      0x00000004 /* BS log level error */
#define BCM_BS_LOG_SYS_CRIT     0x00000008 /* BS log level critical */
#define BCM_BS_LOG_SYS_ALL      0x000000FF /* BS log level all */

#ifndef BCM_HIDE_DISPATCHABLE

/* Configure BS log configuration */
extern int bcm_time_bs_log_configure_set(
    int unit, 
    bcm_time_bs_log_cfg_t bs_log_cfg);

/* Retrieves BS log configuration */
extern int bcm_time_bs_log_configure_get(
    int unit, 
    bcm_time_bs_log_cfg_t *bs_log_cfg);

/*  Initialize time module */
extern int bcm_time_init(
    int unit);

/*  Uninitialize time module */
extern int bcm_time_deinit(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

/*  Initialize bcm_time_spec_t structure */
extern void bcm_time_spec_t_init(
    bcm_time_spec_t *spec);

/*  Initialize bcm_time_interface_t structure */
extern void bcm_time_interface_t_init(
    bcm_time_interface_t *intf);

/*  Initialize bcm_time_capture_t structure */
extern void bcm_time_capture_t_init(
    bcm_time_capture_t *capture);

/*  Initialize bcm_time_divisor_setting_t structure */
extern void bcm_time_synce_divisor_setting_t_init(
    bcm_time_synce_divisor_setting_t *divisor);

#ifndef BCM_HIDE_DISPATCHABLE

/* Add a time sync interfaces on a unit */
extern int bcm_time_interface_add(
    int unit, 
    bcm_time_interface_t *intf);

/* Get a time sync interfaces on a unit */
extern int bcm_time_interface_get(
    int unit, 
    bcm_time_interface_t *intf);

/* Delete a time sync interfaces on a unit */
extern int bcm_time_interface_delete(
    int unit, 
    bcm_time_if_t intf_id);

/* Delete all time sync interfaces on a unit */
extern int bcm_time_interface_delete_all(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

/* bcm_time_interface_traverse_cb */
typedef int (*bcm_time_interface_traverse_cb)(
    int unit, 
    bcm_time_interface_t *intf, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* bcm_time_interface_traverse */
extern int bcm_time_interface_traverse(
    int unit, 
    bcm_time_interface_traverse_cb cb, 
    void *user_data);

/* Gets HW clocks capture */
extern int bcm_time_capture_get(
    int unit, 
    bcm_time_if_t intf_id, 
    bcm_time_capture_t *time);

#endif /* BCM_HIDE_DISPATCHABLE */

/* bcm_time_heartbeat_cb */
typedef int (*bcm_time_heartbeat_cb)(
    int unit, 
    bcm_time_if_t id, 
    bcm_time_capture_t *time, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* Register callback function to be called on heartbeat */
extern int bcm_time_heartbeat_register(
    int unit, 
    bcm_time_if_t id, 
    bcm_time_heartbeat_cb f, 
    void *user_data);

/* Unregister callback function */
extern int bcm_time_heartbeat_unregister(
    int unit, 
    bcm_time_if_t id);

/* bcm_time_heartbeat_enable_set */
extern int bcm_time_heartbeat_enable_set(
    int unit, 
    bcm_time_if_t id, 
    int enable);

/* bcm_time_heartbeat_enable_get */
extern int bcm_time_heartbeat_enable_get(
    int unit, 
    bcm_time_if_t id, 
    int *enable);

/* bcm_time_trigger_enable_set */
extern int bcm_time_trigger_enable_set(
    int unit, 
    bcm_time_if_t id, 
    uint32 mode_flags);

/* bcm_time_trigger_enable_get */
extern int bcm_time_trigger_enable_get(
    int unit, 
    bcm_time_if_t id, 
    uint32 *mode_flags);

/* bcm_time_synce_clock_get */
extern int bcm_time_synce_clock_get(
    int unit, 
    bcm_time_synce_clock_src_type_t clk_src, 
    bcm_time_synce_divisor_setting_t *divisor_setting);

/* bcm_time_synce_clock_set */
extern int bcm_time_synce_clock_set(
    int unit, 
    bcm_time_synce_clock_src_type_t clk_src, 
    bcm_time_synce_divisor_setting_t *divisor_setting);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_TIME_H__ */
