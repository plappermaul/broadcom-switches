/* $Id: dpp_vtt.h, v 1.95 Broadcom SDK $
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 * $
*/

#ifndef __ARAD_PP_VTT_INCLUDED__
#define __ARAD_PP_VTT_INCLUDED__

#include <soc/dpp/SAND/Utils/sand_header.h>

#include <soc/dpp/SAND/Management/sand_general_macros.h>
#include <soc/dpp/SAND/Management/sand_error_code.h>

#include <soc/dpp/ARAD/ARAD_PP/arad_pp_dbal.h>
#include <soc/dpp/ARAD/ARAD_PP/arad_pp_isem_access.h>


/* VTT logical DataBasesprefixes */
#define  ARAD_PP_ISEM_ACCESS_NULL_PREFIX               (0) /* Means that this value is irrelevant the IS is not searched*/
#define  ARAD_PP_ISEM_ACCESS_BRIDGE_PREFIX             (0) /* ISA and ISB DBs includes: VDxInitial-VID, VDxOuter-VID, VDxOuterxInner*/
#define  ARAD_PP_ISEM_ACCESS_OVERLAY_SIP_PREFIX        (1) /* ISA */
#define  ARAD_PP_ISEM_ACCESS_IP_PREFIX                 (1) /* ISB */
#define  ARAD_PP_ISEM_ACCESS_FLEXIBLE_Q_IN_Q_DOUBLE    (2) /* ISA */
#define  ARAD_PP_ISEM_ACCESS_BRIDGE_DT                 (2) /* ISA */
#define  ARAD_PP_ISEM_ACCESS_FLEXIBLE_Q_IN_Q_SINGLE    (2) /* ISB */
#define  ARAD_PP_ISEM_ACCESS_BRIDGE_ST                 (2) /* ISB */
#define  ARAD_PP_ISEM_ACCESS_ISID_DOMAIN_ISID_PREFIX   (3) /* ISA */
#define  ARAD_PP_ISEM_ACCESS_FC_PREFIX                 (3)/* ISB (TRILL_VSI isnt used in this case)  */
#define  ARAD_PP_ISEM_ACCESS_TRILL_VSI_PREFIX          (3) /* ISB (FC_PREFIX isnt used in this case) */
#define  ARAD_PP_ISEM_ACCESS_TRILL_FINE_A_GRAINED_PREFIX (4)/* ISA, ISB (IPV4_SPOOF_PREFIX isnt used in this case) */
#define  ARAD_PP_ISEM_ACCESS_EXTENDER_PE_PREFIX        (4) /* ISA - Port extender PE(VM) */
#define  ARAD_PP_ISEM_ACCESS_VD_OUTER_PCP_PREFIX       (5) /* ISA */
#define  ARAD_PP_ISEM_ACCESS_RPA_ID_PREFIX             (6) /* ISA */
#define  ARAD_PP_ISEM_ACCESS_BFD_STAT_TT_ISB_PREFIX    (6)  /* ISB - BFD*/
#define  ARAD_PP_ISEM_ACCESS_INNER_TPID_PREFIX         (7) /* ISA - TRILL */
#define  ARAD_PP_ISEM_ACCESS_BFD_STAT_VT_PREFIX        (7)  /* ISB - BFD*/
#define  ARAD_PP_ISEM_ACCESS_TRILL_DESIGNATED_VID_PREFIX (8) /* ISB - TRILL Designated-VLAN */
#define  ARAD_PP_ISEM_ACCESS_BFD_STAT_TT_ISA_PREFIX    (8)  /* ISA - BFD*/
#define  ARAD_PP_ISEM_ACCESS_TEST2_VT_ISA_PREFIX        (8) /*ISA*/
#define  ARAD_PP_ISEM_ACCESS_IP_VSI_PREFIX             (9) /* ISB  (PON not supported with overlay) */
#define  ARAD_PP_ISEM_ACCESS_OAM_STAT_VT_PREFIX        (9)  /* ISA - OAm statistics per MEP*/
#define  ARAD_PP_ISEM_ACCESS_OAM_STAT_TT_PREFIX        (10)  /* ISA, ISB OAm statistics per MEP*/
#define  ARAD_PP_ISEM_ACCESS_EXTENDER_UNTAG_CHECK_PREFIX (10) /* ISA - Port extender untag check */
#define  ARAD_PP_ISEM_ACCESS_CUSTOM_PP_PORT_TUNNEL_PREFIX (10) /* ISA - Custom PP port x Tunnel */
#define  ARAD_PP_ISEM_ACCESS_VLAN_DOMAIN_MPLS_L1_PREFIX (10) /* ISB - VLAN Domain * mpls l1 TT */
#define  ARAD_PP_ISEM_ACCESS_MPLS_L1ELI_PREFIX         (11) /* ISA or ISB (PON not supported with Indexed ELI) */
#define  ARAD_PP_ISEM_ACCESS_MPLS_L1L3ELI_PREFIX       (11) /* ISA or ISB (PON not supported with Indexed ELI) */
#define  ARAD_PP_ISEM_ACCESS_MPLS_L1L2ELI_PREFIX       (11) /* ISA or ISB (PON not supported with Indexed ELI) */
#define  ARAD_PP_ISEM_ACCESS_MPLS_ELI_UNINDEXED_PREFIX (12) /* ISA or ISB */
#define  ARAD_PP_ISEM_ACCESS_MPLS_L1_PREFIX            (12) /* ISA or ISB cant exist ARAD_PP_ISEM_ACCESS_MPLS_L1L2_PREFIX*/
#define  ARAD_PP_ISEM_ACCESS_MPLS_L1L2_PREFIX          (12) /* ISA or ISB cant exist ARAD_PP_ISEM_ACCESS_MPLS_L1_PREFIX*/
#define  ARAD_PP_ISEM_ACCESS_MPLS_L2_PREFIX            (13) /* ISA or ISB */
#define  ARAD_PP_ISEM_ACCESS_MPLS_L3_PREFIX            (13) /* ISB or ISA */
#define  ARAD_PP_ISEM_ACCESS_MPLS_L1L3_PREFIX          (13) /* ISB or ISA */
#define  ARAD_PP_ISEM_ACCESS_MPLS_UNINDEXED_PREFIX     (13) /* ISA or ISB */
#define  ARAD_PP_ISEM_ACCESS_MPLS_L2ELI_PREFIX         (14) /* ISB or ISA (PON not supported with Indexed sELI) */
#define  ARAD_PP_ISEM_ACCESS_TRILL_NICK_PREFIX         (15) /* ISA */
#define  ARAD_PP_ISEM_ACCESS_MPLS_PWE_GAL              (15) /* ISB or ISA (Trill and PWE GAL cant exist toghether */
#define  ARAD_PP_ISEM_ACCESS_VTEP_INDEX_SIP_VRF_MY_PREFIX (16) /* ISA - SIP, VRF, my-vtep index. For 6b prefix only: 01xxxx. (from Jericho). Only 2 MSBs are used in entry */

/* prefixes to be used whenever prefix length is 4 bits, should be 01xx format unlike the more common format of 00xxxx 6 bit prefix */
#define  ARAD_PP_ISEM_ACCESS_MPLS_L1_PREFIX_4bit            (4) /* ISA or ISB cant exist ARAD_PP_ISEM_ACCESS_MPLS_L1L2_PREFIX*/
#define  ARAD_PP_ISEM_ACCESS_MPLS_L2_PREFIX_4bit            (5) /* ISA or ISB */
#define  ARAD_PP_ISEM_ACCESS_MPLS_L3_PREFIX_4bit            (5) /* ISB or ISA */
#define  ARAD_PP_ISEM_ACCESS_MPLS_L1L3_PREFIX_4bit          (5) /* ISB or ISA */
#define  ARAD_PP_ISEM_ACCESS_MPLS_L1L2_PREFIX_4bit          (4) /* ISA or ISB cant exist ARAD_PP_ISEM_ACCESS_MPLS_L1_PREFIX*/

#define ARAD_PP_ISEM_ACCESS_QINQ_COMPRESSED_TPID1_PREFIX     (0) /*ISA*/
#define ARAD_PP_ISEM_ACCESS_QINQ_COMPRESSED_TPID2_PREFIX     (1) /*ISA*/
#define ARAD_PP_ISEM_ACCESS_QINANY_TPID1_PREFIX              (2) /*ISB*/
#define ARAD_PP_ISEM_ACCESS_QINANY_TPID2_PREFIX              (3) /*ISB*/
#define ARAD_PP_ISEM_ACCESS_QINANY_PCP_TPID1_PREFIX          (4) /*ISB*/
#define ARAD_PP_ISEM_ACCESS_QINANY_PCP_TPID2_PREFIX          (5) /*ISB*/
#define ARAD_PP_ISEM_ACCESS_1Q_TPID1_PREFIX                  (6) /*ISA*/
#define ARAD_PP_ISEM_ACCESS_1Q_TPID2_PREFIX                  (7) /*ISA*/
#define ARAD_PP_ISEM_ACCESS_1Q_COMPRESSED_TPID1_PREFIX       (8) /*ISB*/
#define ARAD_PP_ISEM_ACCESS_1Q_COMPRESSED_TPID2_PREFIX       (9) /*ISB*/
#define ARAD_PP_ISEM_ACCESS_1Q_COMPRESSED_PCP_TPID1_PREFIX   (10)/*ISA*/
#define ARAD_PP_ISEM_ACCESS_1Q_COMPRESSED_PCP_TPID2_PREFIX   (11)/*ISA*/


/* PON application prefix value  */
#define  ARAD_PP_ISEM_ACCESS_PON_UNTAGGED_PREFIX       (1) /* ISA */
#define  ARAD_PP_ISEM_ACCESS_PON_TLS_PREFIX            (1) /* ISB (Not supported with CUS_PON_TWO_TAGS) */
#define  ARAD_PP_ISEM_ACCESS_PON_ONE_TAG_PREFIX        (2) /* ISA & ISB overwrite TRILL (isnt supported with PON) */
#define  ARAD_PP_ISEM_ACCESS_PON_TWO_TAGS_PREFIX       (4) /* ISA (cover prefixes 4-7) */
#define  ARAD_PP_ISEM_ACCESS_CUS_PON_TWO_TAGS_PREFIX   (4) /* ISB (cover prefixes 4-7) */
#define  ARAD_PP_ISEM_ACCESS_PON_VD_OUTER_PCP_PREFIX   (3) /* ISA */
#define  ARAD_PP_ISEM_ACCESS_IPV4_SPOOF_PREFIX         (8) /* ISB (cover prefixes 8-15) */



/* EVB default S-channel */
#define ARAD_PP_ISEM_ACCESS_EVB_DEFAULT_S_CHANNEL (0x1)

/*
 * VTT TCAM defines }
 */


/*
 * Program selection defines {
 */
#define ARAD_PP_ISEM_PFC_PART_NONE               0x0
#define ARAD_PP_ISEM_PFC_PART_E                  0x1
#define ARAD_PP_ISEM_PFC_PART_IPV4               0x2
#define ARAD_PP_ISEM_PFC_PART_IPV6               0x3
#define ARAD_PP_ISEM_PFC_PART_TRILL              0x4
#define ARAD_PP_ISEM_PFC_PART_MPLS1              0x5
#define ARAD_PP_ISEM_PFC_PART_MPLS2              0x6
#define ARAD_PP_ISEM_PFC_PART_MPLS3              0x7

/* 3 LSBs tells which is above Ethernet (second header), 3 MSBs which is above second header */
#define ARAD_PP_ISEM_PFC_SET(MSB_HEAD,LSB_HEAD) \
  ((MSB_HEAD << 3) | LSB_HEAD)

/* Packet format codes:                                   [5:3]                [2:0] */
#define ARAD_PP_ISEM_PFC_E            (ARAD_PP_ISEM_PFC_SET(ARAD_PP_ISEM_PFC_PART_NONE , ARAD_PP_ISEM_PFC_PART_NONE))
#define ARAD_PP_ISEM_PFC_IPv4oMPLS2oE (ARAD_PP_ISEM_PFC_SET(ARAD_PP_ISEM_PFC_PART_IPV4 , ARAD_PP_ISEM_PFC_PART_MPLS2))
#define ARAD_PP_ISEM_PFC_IPv4oMPLS2oE (ARAD_PP_ISEM_PFC_SET(ARAD_PP_ISEM_PFC_PART_IPV4 , ARAD_PP_ISEM_PFC_PART_MPLS2))
#define ARAD_PP_ISEM_PFC_EoTRILLoE    (ARAD_PP_ISEM_PFC_SET(ARAD_PP_ISEM_PFC_PART_E    , ARAD_PP_ISEM_PFC_PART_TRILL))
/* traped in VTT:*/

/*
 * Qualifier - [10:7] Next Protocol, [6:5] Encapsulation, [4:3] Outer Tag Format, [2] Priority Pkt, [1:0] Inner tag format
 * Tag Formats are: 2b00 None 2b01 TPID1 2b10 TPID2 2b11 TPID3
 */

#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_NULL               (0x00)  /* Untagged Pkts*/
#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_OUTER_TPID1        (0x08)  /* Assuming Next Protocol is Maksed */
#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_OUTER_TPID2        (0x10)  /* Assuming Next Protocol is Maksed*/
#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_INNER_TPID1        (0x01)  /* Assuming Next Protocol is Maksed*/
#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_INNER_TPID2        (0x02)  /* Assuming Next Protocol is Maksed*/
#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_OUTER_PCP          (0x04)  /* Assuming Next Protocol is Maksed*/

#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_MASK_NXT_PROTOCOL  (0x780)
#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_MASK_ENCAP         (0x060)
#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_MASK_OUTER_TPID    (0x018)
#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_MASK_OUTER_PCP     (0x004)
#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_MASK_INNER_TPID    (0x003)

#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_NEXT_PROTOCOL_MPLS (0xF << 7)
#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_NEXT_PROTOCOL_MAC_IN_MAC (9 << 7)
#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_NEXT_PROTOCOL_ARP (10 << 7)
#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_NEXT_PROTOCOL_CFM (11 << 7)
#define ARAD_PP_ISEM_ACCESS_QLFR_ETH_NEXT_PROTOCOL_MISS (0 << 7)

/* Bits 1:2 Range1, 3:4 Range2, 5:6 Range 3 */
#define ARAD_PP_ISEM_ACCESS_QLFR_MPLS_L1                (0x006)  /* 00=Range1 (ELI), 01=Range2(None), 10=Range3(GAL), 11=Not in Range */
#define ARAD_PP_ISEM_ACCESS_QLFR_MPLS_L2ELI             (0x000)
#define ARAD_PP_ISEM_ACCESS_QLFR_MPLS_L3ELI             (0x000)
#define ARAD_PP_ISEM_ACCESS_QLFR_MPLS_L1GAL             (0x010)
#define ARAD_PP_ISEM_ACCESS_QLFR_MPLS_L2GAL             (0x040)
#define ARAD_PP_ISEM_ACCESS_QLFR_MPLS_GAL               (0x004)

#define ARAD_PP_ISEM_ACCESS_QLFR_MPLS_MASK_BOS_NEXT_PROT  (0x781)
#define ARAD_PP_ISEM_ACCESS_QLFR_MPLS_MASK_NEXT_PROT      (0x780)
#define ARAD_PP_ISEM_ACCESS_QLFR_MPLS_MASK_L1             (0x006)
#define ARAD_PP_ISEM_ACCESS_QLFR_MPLS_MASK_L2             (0x018)
#define ARAD_PP_ISEM_ACCESS_QLFR_MPLS_MASK_L3             (0x060)

#define ARAD_PP_ISEM_ACCESS_QLFR_IP_NEXT_PROTOCOL_MPLS    (0xF << 7)

#define ARAD_PP_ISEM_ACCESS_16B_INST_PP_PORT_KEY_VAR_X_LSBS(X) ((SOC_IS_JERICHO(unit) ? 0x4A8 : 0x448) | ((X-1) << 12))

#define ARAD_PP_ISEM_ACCESS_VT_PROFILE_MASK                     (SOC_IS_JERICHO(unit) ? 0x1F:0x7)
#define ARAD_PP_ISEM_ACCESS_VT_PROFILE_MASK_EXCEPT_INITIAL_VID  (SOC_IS_JERICHO(unit) ? 0x1E:0x6)
#define ARAD_PP_ISEM_ACCESS_VT_PROFILE_MASK_INITIAL_VID         (0x1)
#define ARAD_PP_ISEM_ACCESS_VT_PROFILE_MASK_DOUBLE_TAG          (0x2)

typedef enum
{
  ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE_TM                     = 0x0,
  ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE_MIM                    = 0x1,
  ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE_COMPATIBLE_MC          = 0x2,
  ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE_IP                     = 0x3,
  ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE_TRILL                  = 0x4,
  ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE_TRILL_DESIGNATED_VLAN  = 0x5,
  ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE_MPLS                   = 0x6,
  ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE_ARP                    = 0x7,
  ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE_CUSTOM_1               = 0x8,
  ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE_CUSTOM_2               = 0x9,
  ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE_UNKNOWN_L3             = 0xa,
  ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE_BRIDGE                 = 0xb,
  ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE_MY_B_MAC_MC_BRIDGE     = 0xc,
  ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE_NUM                    = 0xD
} ARAD_PP_ISEM_ACCESS_PROCESSING_CODE_TYPE;


/* Initialize VTT */
uint32 arad_pp_vtt_init(int unit);

/* Return DBAL SW DB */
uint32 arad_pp_dbal_vtt_sw_db_get(uint32 unit, ARAD_PP_ISEM_ACCESS_KEY  *isem_key,
                                               uint32                   *nof_tables,
                                               SOC_DPP_DBAL_SW_TABLE_IDS  dbal_tables_id[3],
                                               uint8 *is_duplicate);

/* Update fcoe vsan mode */
uint32 arad_pp_dbal_vtt_fc_vsan_mode_update(uint32 unit, uint32 is_vsan_from_vsi);
uint32 arad_pp_dbal_vtt_fcoe_npv_mode_no_my_mac_set(int unit, int enable);



/*
 * VT and TT Programs
 * Put VT program in VT section and TT program in TT section
 */
typedef enum
{
/* Start of VT Programs */
    ARAD_PP_DBAL_VT_PROG_INVALID = -1,
    /* TM: Used for both 1st and 2nd . No lookups */
    ARAD_PP_DBAL_VT_PROG_TM,
    ARAD_PP_DBAL_VT_PROG_TM_STAT,
    /* Unindex MPLS: ISA: VD x Initial VLAN , ISB: MPLS L1 */
    ARAD_PP_DBAL_VT_PROG_VDxINITIALVID_L1,
    /* Unindex MPLS: ISA:MPLS L1  , ISB: VD x Initial VLAN */
    ARAD_PP_DBAL_VT_PROG_VDxOUTERVID_L1,
    /* Bridge: ISB: VD x Outer x Inner (Double Tagging) */
    ARAD_PP_DBAL_VT_PROG_VDxOUTER_INNER_VID_L1,

    ARAD_PP_DBAL_VT_PROG_VDxOUTER_INNER_VID_OR_OUTER_VID_L1,

    ARAD_PP_DBAL_VT_PROG_VD_INITIALVID_L1FRR,
    ARAD_PP_DBAL_VT_PROG_VD_OUTERVID_L1FRR,
    ARAD_PP_DBAL_VT_PROG_VD_OUTER_OR_VD_OUTER_PCP,
    ARAD_PP_DBAL_VT_PROG_VD_OUTER_INNER_OR_VD_OUTER_INNER_OUTERPCP,
    ARAD_PP_DBAL_VT_PROG_HIGH_VD_OUTER_INNER_OUTERPCP_OR_VD_OUTER_INNER_OR_VD_OUTER,
    ARAD_PP_DBAL_VT_PROG_VD_INITIALVID_OR_VD_INITIALVID,
    ARAD_PP_DBAL_VT_PROG_VD_OUTER_OR_VD_OUTER,
    ARAD_PP_DBAL_VT_PROG_VD_OUTER_INNER_OR_VD_OUTER_INNER,
    ARAD_PP_DBAL_VT_PROG_INDX_VD_INITIALVID_FRR_L1,
    ARAD_PP_DBAL_VT_PROG_INDX_VD_OUTERVID_FRR_L1,

    /* Trill */
    ARAD_PP_DBAL_VT_PROG_VDxINITIALVID_TRILL,
    ARAD_PP_DBAL_VT_PROG_VDxOUTERVID_TRILL,
    ARAD_PP_DBAL_VT_PROG_VDxOUTER_INNER_VID_TRILL,
    ARAD_PP_DBAL_VT_PROG_VD_DESIGNATED_VID_TRILL,

    ARAD_PP_DBAL_VT_PROG_VDxINITIALVID_L1_L2ELI,
    ARAD_PP_DBAL_VT_PROG_VDxOUTERVID_L1_L2ELI,

    ARAD_PP_DBAL_VT_PROG_VDxINITIALVID_L1L2,
    ARAD_PP_DBAL_VT_PROG_VDxOUTERVID_L1L2,

    ARAD_PP_DBAL_VT_PROG_INDEXED_VDxINITIALVID_L1,
    ARAD_PP_DBAL_VT_PROG_INDEXED_VDxOUTERVID_L1,
    ARAD_PP_DBAL_VT_PROG_MPLS_PORT_L1,
    ARAD_PP_DBAL_VT_PROG_INDEXED_VDxINITIALVID_L3,
    ARAD_PP_DBAL_VT_PROG_INDEXED_VDxOUTERVID_L3,

    ARAD_PP_DBAL_VT_PROG_IPV4_VDxINITIALVID,
    ARAD_PP_DBAL_VT_PROG_IPV4_VDxOUTERVID,
    ARAD_PP_DBAL_VT_PROG_IPV4_PORT,
    ARAD_PP_DBAL_VT_PROG_EVB_UN_C_TAG,
    ARAD_PP_DBAL_VT_PROG_EVB_S_TAG,
    ARAD_PP_DBAL_VT_PROG_DOUBLE_TAG_PRIORITY_INITIAL_VID,
    ARAD_PP_DBAL_VT_PROG_IPV4_VDxINITIALVID_AFTER_RCY,
    ARAD_PP_DBAL_VT_PROG_IPV4_VDxOUTERVID_AFTER_RCY,
    ARAD_PP_DBAL_VT_PROG_SINGLE_TAG_5_TUPPLE_QINQ,
    ARAD_PP_DBAL_VT_PROG_DOUBLE_TAG_5_TUPPLE_QINQ,
    ARAD_PP_DBAL_VT_PROG_UNTAGGED_TST1,
    ARAD_PP_DBAL_VT_PROG_ONE_TAG_TST1,
    ARAD_PP_DBAL_VT_PROG_DOUBLE_TAG_TST1,
    ARAD_PP_DBAL_VT_PROG_UNTAGGED_VRRP,
    ARAD_PP_DBAL_VT_PROG_ONE_TAG_VRRP,
    ARAD_PP_DBAL_VT_PROG_DOUBLE_TAG_VRRP,
    ARAD_PP_DBAL_VT_PROG_UNTAGGED_EXP_NULL_TST1,
    ARAD_PP_DBAL_VT_PROG_ONE_TAG_EXP_NULL_TST1,
    ARAD_PP_DBAL_VT_PROG_DOUBLE_TAG_EXP_NULL_TST1,
    ARAD_PP_DBAL_VT_PROG_OUTER_INNER_PCP_1_TST2,
    ARAD_PP_DBAL_VT_PROG_OUTER_INNER_PCP_2_TST2,
    ARAD_PP_DBAL_VT_PROG_OUTER_PCP_1_TST2,
    ARAD_PP_DBAL_VT_PROG_OUTER_PCP_2_TST2,
    ARAD_PP_DBAL_VT_PROG_OUTER_INNER_1_TST2,
    ARAD_PP_DBAL_VT_PROG_OUTER_INNER_2_TST2,
    ARAD_PP_DBAL_VT_PROG_OUTER_1_TST2,
    ARAD_PP_DBAL_VT_PROG_OUTER_2_TST2,
    ARAD_PP_DBAL_VT_PROG_UNTAGGED_TST2,
    ARAD_PP_DBAL_VT_PROG_VT_TEST2,
    ARAD_PP_DBAL_VT_PROG_EXTENDER_PE,
    ARAD_PP_DBAL_VT_PROG_EXTENDER_PE_UT,
    ARAD_PP_DBAL_VT_PROG_VT_CUSTOM_PP_PORT_TUNNEL,

    ARAD_PP_DBAL_VT_PROG_VD_INITIALVID_VLAN_DOMAIN_L1,
    ARAD_PP_DBAL_VT_PROG_PON_UNTAGGED,
    ARAD_PP_DBAL_VT_PROG_PON_ONE_TAG,
    ARAD_PP_DBAL_VT_PROG_PON_TWO_TAGS,
    ARAD_PP_DBAL_VT_PROG_PON_TWO_TAGS_VS_TUNNEL_ID,
    ARAD_PP_DBAL_VT_NOF_PROGRAMS,  /*Have to be last in VT Programs*/



/* START of TT Programs */
    ARAD_PP_DBAL_TT_PROG_INVALID = -1,
    /* TM: Used for both 1st and 2nd . No lookups */
    ARAD_PP_DBAL_TT_PROG_TM,
    ARAD_PP_DBAL_TT_PROG_OAM_STAT,
    ARAD_PP_DBAL_TT_PROG_BFD_STAT,
    ARAD_PP_DBAL_TT_PROG_MLDP_OVERLAY_AFTER_RCY,
    ARAD_PP_DBAL_TT_PROG_MPLS_L2,
    ARAD_PP_DBAL_TT_PROG_MPLS_L3,
    ARAD_PP_DBAL_TT_PROG_MPLS_L2_L3_ELI,
    ARAD_PP_DBAL_TT_PROG_INDEXED_L1_L1,
    ARAD_PP_DBAL_TT_PROG_INDEXED_L1_L1_GAL,
    ARAD_PP_DBAL_TT_PROG_INDEXED_L1_L2,
    ARAD_PP_DBAL_TT_PROG_INDEXED_L1_L2_GAL,
    ARAD_PP_DBAL_TT_PROG_INDEXED_L2_L2,
    ARAD_PP_DBAL_TT_PROG_INDEXED_L2_L3_GAL,
    ARAD_PP_DBAL_TT_PROG_INDEXED_L2_L3_ELI,
    ARAD_PP_DBAL_TT_PROG_INDEXED_L1_L2_INRIF,
    ARAD_PP_DBAL_TT_PROG_INDEXED_L1_L2ELI_INRIF,
    ARAD_PP_DBAL_TT_PROG_INDEXED_L1_L2_L3ELI_INRIF,
    ARAD_PP_DBAL_TT_PROG_INDEXED_L3_L2,
    ARAD_PP_DBAL_TT_PROG_INDEXED_MPLS_PORT_L3_L2,
    ARAD_PP_DBAL_TT_PROG_INDEXED_L3_L4,
    ARAD_PP_DBAL_TT_PROG_ARP,
    ARAD_PP_DBAL_TT_PROG_BRIDGE_STAR,
    ARAD_PP_DBAL_TT_PROG_TT_UNKNOWN_L3,
    ARAD_PP_DBAL_TT_PROG_TRILL_ONE_TAG,
    ARAD_PP_DBAL_TT_PROG_TRILL_TWO_TAGS,
    ARAD_PP_DBAL_TT_PROG_TRILL_TRAP,
    ARAD_PP_DBAL_TT_PROG_FC_WITH_VFT,
    ARAD_PP_DBAL_TT_PROG_FC,
    ARAD_PP_DBAL_TT_PROG_MIM_MC,
    ARAD_PP_DBAL_TT_PROG_MIM_WITH_BTAG,
    ARAD_PP_DBAL_TT_PROG_IPV4_ROUTER,
    ARAD_PP_DBAL_TT_PROG_IPV4_ROUTER_PWE_GRE_DIP_FOUND,
    ARAD_PP_DBAL_TT_PROG_IPV4_ROUTER_DIP_FOUND,
    ARAD_PP_DBAL_TT_PROG_IPV4_ROUTER_L2_GRE_PORT,
    ARAD_PP_DBAL_TT_PROG_IPV4_ROUTER_VXLAN_PORT,
    ARAD_PP_DBAL_TT_PROG_IPV4_ROUTER_UC_DIP_NOT_FOUND,
    ARAD_PP_DBAL_TT_PROG_IPV4_ROUTER_MC_DIP_NOT_FOUND,
    ARAD_PP_DBAL_TT_PROG_IPV4_ROUTER_COMPATIBLE_MC,
    ARAD_PP_DBAL_TT_PROG_IPV6_ROUTER,
    ARAD_PP_DBAL_TT_PROG_DIPV6_COMPRESSED,
    ARAD_PP_DBAL_TT_PROG_EXTENDER_UNTAG_CHECK_IP_MC,
    ARAD_PP_DBAL_TT_PROG_EXTENDER_UNTAG_CHECK_IP_UC,
    ARAD_PP_DBAL_TT_PROG_EXTENDER_UNTAG_CHECK,
    ARAD_PP_DBAL_TT_PROG_IPV4_ROUTER_DIP_SIP_VRF,
    ARAD_PP_DBAL_TT_PROG_IPV4_ROUTER_L3_GRE_PORT,
    ARAD_PP_DBAL_TT_PROG_IPV4_FOR_EXPLICIT_NULL,
    ARAD_PP_DBAL_TT_PROG_TUNNEL_TWO_EXPLICIT_NULL,
    ARAD_PP_DBAL_TT_PROG_TUNNEL_THREE_EXPLICIT_NULL,
    ARAD_PP_DBAL_TT_PROG_EXTENDER_CB_IP_MC,
    ARAD_PP_DBAL_TT_PROG_EXTENDER_CB_IP_UC,
    ARAD_PP_DBAL_TT_PROG_EXTENDER_CB,
    ARAD_PP_DBAL_TT_PROG_INDEXED_L1_GAL_ONLY,
    ARAD_PP_DBAL_TT_PROG_INDEXED_L2_GAL_ONLY,
    ARAD_PP_DBAL_TT_PROG_VLAN_DOMAIN_L1,
    ARAD_PP_DBAL_TT_NOF_PROGRAMS

} ARAD_PP_DBAL_VTT_PROGRAMS;

/*
 * VT and TT Program Selection
 * Put VT program selection in VT section and TT program selection in TT section
 */
typedef enum
{
/* Start of VT Program Selection */
    ARAD_PP_DBAL_VT_PROG_SELECTION_INVALID = -1,
    ARAD_PP_DBAL_VT_PROG_SELECTION_TM,
    ARAD_PP_DBAL_VT_PROG_SELECTION_TM_STAT,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_INITIALVID,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_OUTERVID,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_OUTER_INNER_VID,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_OUTER_INNER_VID_OR_OUTER_VID,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_INITIALVID_L1FRR,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_OUTERVID_L1FRR,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_INITIALVID_L1L2,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_OUTERVID_L1L2,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_OUTER_OR_VD_OUTER_PCP,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_OUTER_INNER_OR_VD_OUTER_INNER_OUTERPCP,
    ARAD_PP_DBAL_VT_PROG_SELECTION_HIGH_VD_OUTER_INNER_OUTERPCP_OR_VD_OUTER_INNER_OR_VD_OUTER,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_INITIALVID_OR_VD_INITIALVID,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_OUTER_OR_VD_OUTER,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_OUTER_INNER_OR_VD_OUTER_INNER,
    ARAD_PP_DBAL_VT_PROG_SELECTION_INDX_VD_INITIALVID_FRR_L1,
    ARAD_PP_DBAL_VT_PROG_SELECTION_INDX_VD_OUTERVID_FRR_L1,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_INITIALVID_TRILL,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_OUTERVID_TRILL,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_OUTER_INNER_VID_TRILL,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_DESIGNATED_VID_TRILL,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_INITIALVID_L1_L2ELI,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_OUTERVID_L1_L2ELI,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_INDEXED_VDxINITIALVID_L1,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_INDEXED_VDxOUTERVID_L1,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_MPLS_PORT_L1,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_INDEXED_VDxINITIALVID_L3,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_INDEXED_VDxOUTERVID_L3,
    ARAD_PP_DBAL_VT_PROG_SELECTION_IPV4_VDxINITIALVID,
    ARAD_PP_DBAL_VT_PROG_SELECTION_IPV4_VDxOUTERVID,
    ARAD_PP_DBAL_VT_PROG_SELECTION_IPV4_PORT_TERMINATION,
    ARAD_PP_DBAL_VT_PROG_SELECTION_EVB_UN_C_TAG,
    ARAD_PP_DBAL_VT_PROG_SELECTION_EVB_S_TAG,
    ARAD_PP_DBAL_VT_PROG_SELECTION_DOUBLE_TAG_PRIORITY_INITIAL_VID,
    ARAD_PP_DBAL_VT_PROG_SELECTION_IPV4_VDxINITIALVID_AFTER_RCY,
    ARAD_PP_DBAL_VT_PROG_SELECTION_IPV4_VDxOUTERVID_AFTER_RCY,
    ARAD_PP_DBAL_VT_PROG_SELECTION_SINGLE_TAG_5_TUPLE_QINQ,
    ARAD_PP_DBAL_VT_PROG_SELECTION_DOUBLE_TAG_5_TUPLE_QINQ,
    ARAD_PP_DBAL_VT_PROG_SELECTION_UNTAGGED_TST1,
    ARAD_PP_DBAL_VT_PROG_SELECTION_ONE_TAG_TST1,
    ARAD_PP_DBAL_VT_PROG_SELECTION_DOUBLE_TAG_TST1,
    ARAD_PP_DBAL_VT_PROG_SELECTION_UNTAGGED_VRRP,
    ARAD_PP_DBAL_VT_PROG_SELECTION_ONE_TAG_VRRP,
    ARAD_PP_DBAL_VT_PROG_SELECTION_DOUBLE_TAG_VRRP,
    ARAD_PP_DBAL_VT_PROG_SELECTION_UNTAGGED_EXP_NULL_TST1,
    ARAD_PP_DBAL_VT_PROG_SELECTION_ONE_TAG_EXP_NULL_TST1,
    ARAD_PP_DBAL_VT_PROG_SELECTION_DOUBLE_TAG_EXP_NULL_TST1,
    ARAD_PP_DBAL_VT_PROG_SELECTION_OUTER_INNER_PCP_1_TST2,
    ARAD_PP_DBAL_VT_PROG_SELECTION_OUTER_INNER_PCP_2_TST2,
    ARAD_PP_DBAL_VT_PROG_SELECTION_OUTER_PCP_1_TST2,
    ARAD_PP_DBAL_VT_PROG_SELECTION_OUTER_PCP_2_TST2,
    ARAD_PP_DBAL_VT_PROG_SELECTION_OUTER_INNER_1_TST2,
    ARAD_PP_DBAL_VT_PROG_SELECTION_OUTER_INNER_2_TST2,
    ARAD_PP_DBAL_VT_PROG_SELECTION_OUTER_1_TST2,
    ARAD_PP_DBAL_VT_PROG_SELECTION_OUTER_2_TST2,
    ARAD_PP_DBAL_VT_PROG_SELECTION_UNTAGGED_TST2,
    ARAD_PP_DBAL_VT_PROG_SELECTION_TEST2,
    ARAD_PP_DBAL_VT_PROG_SELECTION_EXTENDER_PE,
    ARAD_PP_DBAL_VT_PROG_SELECTION_EXTENDER_PE_UT,
    ARAD_PP_DBAL_VT_PROG_SELECTION_CUSTOM_PP_PORT_TUNNEL,
    ARAD_PP_DBAL_VT_PROG_SELECTION_VD_INITIALVID_VLAN_DOMAIN_L1,
    ARAD_PP_DBAL_VT_PROG_SELECTION_PON_UNTAGGED,
    ARAD_PP_DBAL_VT_PROG_SELECTION_PON_PRIORITY_TAG,
    ARAD_PP_DBAL_VT_PROG_SELECTION_PON_ONE_TAG_1,
    ARAD_PP_DBAL_VT_PROG_SELECTION_PON_ONE_TAG_2,
    ARAD_PP_DBAL_VT_PROG_SELECTION_PON_TWO_TAGS,
    ARAD_PP_DBAL_VT_PROG_SELECTION_PON_TWO_TAGS_VS_TUNNEL_ID,
    ARAD_PP_DBAL_VT_PROG_SELECTION_PON_IGNORE_2ND_TAG,
    ARAD_PP_DBAL_VT_NOF_PROGRAM_SELECTION,

/* Start of TT Program Selection */
    ARAD_PP_DBAL_TT_PROG_SELECTION_INVALID = -1,
    ARAD_PP_DBAL_TT_PROG_SELECTION_TM,
    ARAD_PP_DBAL_TT_PROG_SELECTION_OAM_STAT,
    ARAD_PP_DBAL_TT_PROG_SELECTION_BFD_STAT,
    ARAD_PP_DBAL_TT_PROG_SELECTION_MLDP_OVERLAY_AFTER_RCY,
    ARAD_PP_DBAL_TT_PROG_SELECTION_UNINDEXED_MPLS_L2,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_MPLS_L3_L2,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_MPLS_PORT_L3_L2,
    ARAD_PP_DBAL_TT_PROG_SELECTION_UNINDEXED_MPLS_L3,
    ARAD_PP_DBAL_TT_PROG_SELECTION_UNINDEXED_MPLS_L2_L3_ELI,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_L1_L1,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_L1_L1_GAL,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_L1_L2,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_L1_L2_GAL,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_L2_L2,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_L2_L3_GAL,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_L2_L3_ELI,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_L1_L2_INRIF,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_L1_L2ELI_INRIF,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_L1_L2_L3ELI_INRIF,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_MPLS_L3_L4,
    ARAD_PP_DBAL_TT_PROG_SELECTION_ARP,
    ARAD_PP_DBAL_TT_PROG_SELECTION_BRIDGE_STAR,
    ARAD_PP_DBAL_TT_PROG_SELECTION_BRIDGE_STAR_ROUTE_DISABLE,
    ARAD_PP_DBAL_TT_PROG_SELECTION_BRIDGE_OAM,
    ARAD_PP_DBAL_TT_PROG_SELECTION_UNKNOWN_L3,
    ARAD_PP_DBAL_TT_PROG_SELECTION_TRILL_ONE_TAG,
    ARAD_PP_DBAL_TT_PROG_SELECTION_TRILL_TWO_TAGS,
    ARAD_PP_DBAL_TT_PROG_SELECTION_TRILL_TRAP,
    ARAD_PP_DBAL_TT_PROG_SELECTION_FC_WITH_VFT,
    ARAD_PP_DBAL_TT_PROG_SELECTION_FC,
    ARAD_PP_DBAL_TT_PROG_SELECTION_MIM_MC,
    ARAD_PP_DBAL_TT_PROG_SELECTION_MIM_WITH_BTAG,
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV4_ROUTER,    
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV4_ROUTER_PWE_GRE_IPMC_RCY,
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV4_ROUTER_PWE_GRE_DIP_FOUND,
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV4_ROUTER_DIP_FOUND_IPMC_RCY,
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV4_ROUTER_DIP_FOUND,
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV4_ROUTER_L2_GRE_PORT,
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV4_ROUTER_VXLAN_PORT,
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV4_ROUTER_UC_DIP_NOT_FOUND,
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV4_ROUTER_MC_DIP_NOT_FOUND,
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV4_ROUTER_COMPATIBLE_MC,
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV6_ROUTER,
    ARAD_PP_DBAL_TT_PROG_SELECTION_DIPV6_COMPRESSED,
    ARAD_PP_DBAL_TT_PROG_SELECTION_EXTENDER_UNTAG_CHECK_IP_MC,
    ARAD_PP_DBAL_TT_PROG_SELECTION_EXTENDER_UNTAG_CHECK_IP_UC,
    ARAD_PP_DBAL_TT_PROG_SELECTION_EXTENDER_UNTAG_CHECK,
    ARAD_PP_DBAL_TT_PROG_SELECTION_PON_IP_BRIDGE_COMPATIBLE_MC,
    ARAD_PP_DBAL_TT_PROG_SELECTION_PON_IPV4_BRIDGE_UC,
    ARAD_PP_DBAL_TT_PROG_SELECTION_PON_IPV6_BRIDGE_UC,
    ARAD_PP_DBAL_TT_PROG_SELECTION_PON_IPV4_BRIDGE_DIP_FOUND,
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV4_ROUTER_UC_DIP_SIP_VRF,
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV4_ROUTER_L3_GRE_PORT,
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV4_FOR_EXPLICIT_NULL,
    ARAD_PP_DBAL_TT_PROG_SELECTION_TUNNEL_FOR_TWO_EXPLICIT_NULL,
    ARAD_PP_DBAL_TT_PROG_SELECTION_TUNNEL_FOR_THREE_EXPLICIT_NULL,
    ARAD_PP_DBAL_TT_PROG_SELECTION_EXTENDER_CB_IP_MC,
    ARAD_PP_DBAL_TT_PROG_SELECTION_EXTENDER_CB_IP_UC,
    ARAD_PP_DBAL_TT_PROG_SELECTION_EXTENDER_CB,
    ARAD_PP_DBAL_TT_PROG_SELECTION_IPV4_ROUTER_TUNNELS,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_L1_GAL_ONLY,
    ARAD_PP_DBAL_TT_PROG_SELECTION_INDEXED_L2_GAL_ONLY,
    ARAD_PP_DBAL_TT_PROG_SELECTION_VLAN_DOMAIN_L1,
    ARAD_PP_DBAL_TT_NOF_PROGRAM_SELECTION

} ARAD_PP_DBAL_VTT_PROGRAM_SELECTION;


/***************************************************************************************
 *  Additional info for DB Table
 **************************************************************************************/
typedef enum
{
    MPLS_LABEL_0,
    MPLS_LABEL_1,
    MPLS_LABEL_2,
    MPLS_LABEL_3,
    MPLS_DUMMY
}ARAD_PP_DBAL_VTT_TABLE_MPLS_LABELS;

typedef enum
{
    IS_OAM_STAT,
    IS_BFD_STAT,
    OAM_FWD_CODE_0,
    OAM_FWD_CODE_1,
    BFD_FWD_CODE_0,
    BFD_FWD_CODE_1,
    TM_STAT_OFF,
    TM_STAT_ON
}ARAD_PP_DBAL_VTT_TABLE_STAT_INFO;

typedef enum
{
    VSAN_INIT,
    VSAN_FROM_VFT,
    VSAN_FROM_VSI,
    NO_VFT,
    WITH_VFT
}ARAD_PP_DBAL_VTT_TABLE_FC_INFO;

typedef enum
{
    MPLS_LABEL_0_IDX0,
    MPLS_LABEL_0_IDX1,
    MPLS_LABEL_0_IDX2,
    MPLS_LABEL_0_IDX13,
    MPLS_LABEL_0_IDX12,
    MPLS_LABEL_0_ELI_IDX0,   /* ELI_ used in DB with RIF */
    MPLS_LABEL_0_ELI_IDX1,
    MPLS_LABEL_0_ELI_IDX2,
    MPLS_LABEL_0_ELI_IDX13,
    MPLS_LABEL_0_ELI_IDX12,
    MPLS_LABEL_1_IDX0 = MPLS_LABEL_0_ELI_IDX0,
    MPLS_LABEL_1_IDX1,
    MPLS_LABEL_1_IDX2,
    MPLS_LABEL_1_IDX13,
    MPLS_LABEL_1_IDX12,
    MPLS_LABEL_2_IDX0,
    MPLS_LABEL_2_IDX1,
    MPLS_LABEL_2_IDX2,
    MPLS_LABEL_2_IDX13,
    MPLS_LABEL_2_IDX12,
    MPLS_LABEL_3_IDX0,
    MPLS_LABEL_3_IDX1,
    MPLS_LABEL_3_IDX2,
    MPLS_LABEL_3_IDX13,
    MPLS_LABEL_3_IDX12,
    MPLS_LABEL_BOS_START,
    MPLS_LABEL_0_BOS_IDX0 = MPLS_LABEL_BOS_START,
    MPLS_LABEL_0_BOS_IDX1,
    MPLS_LABEL_0_BOS_IDX2,
    MPLS_LABEL_0_BOS_IDX13,
    MPLS_LABEL_0_BOS_IDX12,
    MPLS_LABEL_1_BOS_IDX0,
    MPLS_LABEL_1_BOS_IDX1,
    MPLS_LABEL_1_BOS_IDX2,
    MPLS_LABEL_1_BOS_IDX13,
    MPLS_LABEL_1_BOS_IDX12,
    MPLS_LABEL_2_BOS_IDX0,
    MPLS_LABEL_2_BOS_IDX1,
    MPLS_LABEL_2_BOS_IDX2,
    MPLS_LABEL_2_BOS_IDX13,
    MPLS_LABEL_2_BOS_IDX12,
    MPLS_LABEL_3_BOS_IDX0,
    MPLS_LABEL_3_BOS_IDX1,
    MPLS_LABEL_3_BOS_IDX2,
    MPLS_LABEL_3_BOS_IDX13,
    MPLS_LABEL_3_BOS_IDX12
}ARAD_PP_DBAL_VTT_TABLE_INDEXED_MPLS_LABELS;

typedef enum
{
    NOT_DUMMY_TYPE,
    DUMMY_TYPE
}ARAD_PP_DBAL_VTT_TABLE_TYPE;
typedef enum
{
    INITIAL_VID       = 0,
    OUTER_VID         = 1,
    OUTER_INNER_VID   = 2,
    OUTER_INITIAL_VID = 5,
    NOF_VID_TYPES = 4,  /* Don't change this number */

    TRILL_ONE_TAG        = 1,
    TRILL_TWO_TAG        = 2,
    TRILL_DESIGNATED_VID = 3,

    TST1_VID_UNTAGGED       = 0,
    TST1_VID_ONE_TAG        = 1,
    TST1_VID_INITIAL_TAG    = 1,
    TST1_VID_CMPRSD_ONE_TAG = 2,
    TST1_VID_DOUBLE_TAG     = 3

}ARAD_PP_DBAL_VTT_TABLE_VID;

typedef enum
{
    PON_TUNNEL_SEMA                        = 0,
    PON_TUNNEL_SEMB                        = 1,
    PON_TUNNEL_ETHTYPE                     = 2, /* TCAM - VD, Tunnel-ID, Ethertype */
    PON_TUNNEL_OUTER_VID_SEMA              = 3,
    PON_TUNNEL_OUTER_VID_SEMB              = 4,
    PON_TUNNEL_ETHTYPE_PCP_OUTER_VID       = 5, /* TCAM - VD, Tunnel-ID, Ethertype, PCP, Outer */
    PON_TUNNEL_OUTER_INNER_VID_SEMA        = 6,
    PON_TUNNEL_OUTER_INNER_VID_SEMB        = 7,
    PON_TUNNEL_ETHTYPE_PCP_OUTER_INNER_VID = 8, /* TCAM - VD, Tunnel-ID, Ethertype, PCP, Outer, Inner */
    PON_NOF_TUNNEL_TYPE                    = 7
}ARAD_PP_DBAL_VTT_TABLE_PON_TUNNEL;

typedef enum
{
    VXLAN,
    L2_GRE
}ARAD_PP_DBAL_VTT_TUNNEL_TYPE;

typedef enum
{
    PROG_SEL_PON_UNTAGGED                        = 0,
    PROG_SEL_PON_PRIORITY_TAG                    = 1,
    PROG_SEL_PON_ONE_TAG_1                       = 2,
    PROG_SEL_PON_ONE_TAG_2                       = 3,
    PROG_SEL_PON_TWO_TAGS                        = 4,
    PROG_SEL_PON_TWO_TAGS_VS_TUNNEL_ID           = 5,
    PROG_SEL_PON_IGNORE_2ND_TAG                  = 6,
    PROG_SEL_PON_NOF_TYPES                       = 7
}ARAD_PP_DBAL_VTT_PROG_SEL_PON_TYPE;

typedef enum
{
    BRIDGE_WITHOUT_MYMAC    = 0,
    BRIDGE_ROUTE_DISABLE    = 1,
    BRIDGE_OAM              = 2
}ARAD_PP_DBAL_VTT_TABLE_BRIDGE;

typedef enum
{
    MAC_IN_MAC_MC,
    MAC_IN_MAC_WITH_BTAG
}ARAD_PP_DBAL_VTT_TABLE_MIM_TYPE;
typedef enum
{
    IP_NOT_COMPRESSED,
    IP_COMPRESSED
}ARAD_PP_DBAL_VTT_IP_TYPE;

typedef enum
{
    TPID1,
    TPID2
}ARAD_PP_DBAL_VTT_TPID;

typedef enum
{
    NO_PCP_PORT,
    PCP_PORT
}ARAD_PP_DBAL_VTT_PCP_PORT;

typedef enum
{
    EXTENDER_ETH,       /* Order is important */
    EXTENDER_IP_UC,
    EXTENDER_IP_MC
}ARAD_PP_DBAL_VTT_EXTENDER_TYPE;

/* table info */
typedef struct
{
    uint32 prefix;        /*table prefix */
    uint32 prefix_len;    /*table prefix length*/
    int nof_qulifiers;    /* number of qualifiers */
    SOC_DPP_DBAL_QUAL_INFO   qual_info[SOC_PPC_FP_NOF_QUALS_PER_DB_MAX]; /*qualifiers */
}ARAD_PP_DBAL_VTT_SW_DB_PROPERTY;

typedef struct
{
    uint8    valid_indication[BCM_MAX_NUM_UNITS];  /* Sign if db is valid or not(valid_indication[n] = '1' => db in unit n is valid; valid_indication[n] = '0' => db in unit n is not valid */
    char* name;               /* Name of db */
    SOC_DPP_DBAL_SW_TABLE_IDS dbal_sw_db_id;  /* dbal enum*/
    void   (*vtt_table_property_set) (int unit, ARAD_PP_DBAL_VTT_SW_DB_PROPERTY* sw_db_property, uint32 additional_info); /* pointer to function that initialize db property */
    SOC_DPP_DBAL_PHYSICAL_DB_TYPES mem_type;    /* type of memory where db is resides (SEMA/SEMB/TCAM) */
    uint32 table_additional_info;  /* Depend on table type */
} ARAD_PP_DBAL_VTT_TABLE;

typedef union
{
    uint8  qualifier_to_ce_id[SOC_DPP_DBAL_PROGRAM_NOF_KEYS][SOC_PPC_FP_NOF_QUALS_PER_DB_MAX]; /* copy instruction id's in case of implicit_flag is '1' */
    uint8  use_32_bit_ce     [SOC_DPP_DBAL_PROGRAM_NOF_KEYS][SOC_PPC_FP_NOF_QUALS_PER_DB_MAX];
}ARAD_PP_QUALIFIER_TO_CE_INFO;

typedef struct
{
    uint32 nof_keys;             /* number of keys in program ( could be 1/2/3) */
    uint32 nof_dbs;              /* number of swappable databases */
    uint32 vtt_table_index[3];   /* array of vtt tables that used in program */
    uint32 implicit_flag;        /* sign if we need implicit program to table assotiating */
    ARAD_PP_QUALIFIER_TO_CE_INFO qual_to_ce_info;    
    uint32 tcam_profile;         /* tcam profile  for static allocation use valid access profile for dummy use ARAD_TCAM_ACCESS_PROFILE_INVALID and for dynamic use ARAD_PP_TCAM_DYNAMIC_ACCESS_ID_BASE*/
    uint32 pd_bitmap_0; /* bit per result to enable it in PD (MSB has priority): TCAM, ISA, ISB, TCAM, Key-A 15:0, Key-B 15:0 */
    uint32 pd_bitmap_1; /* bit per result to enable it in PD (MSB has priority): TCAM, ISA, ISB, TCAM, Key-A 15:0, Key-B 15:0 */
    uint32 processing_profile;
    uint32 key_program_variable;

    /* Relevant only for TT stage */
    uint32 isa_key_initial_from_vt;
    uint32 isb_key_initial_from_vt;
    uint32 tcam_key_initial_from_vt;
    uint32 result_to_use_0; /* which lookup result to use: 0: no result, 1: VTT lookup 1 (VT PD1), 2: TT lookup 0 (TT PD 0), 3: TT lookup 1 (TT PD 1) */
    uint32 result_to_use_1; /* which lookup result to use: 0: no result, 1: VTT lookup 1 (VT PD1), 2: TT lookup 0 (TT PD 0), 3: TT lookup 1 (TT PD 1) */
    uint32 result_to_use_2; /* which lookup result to use: 0: no result, 1: VTT lookup 1 (VT PD1), 2: TT lookup 0 (TT PD 0), 3: TT lookup 1 (TT PD 1) */
    uint32 processing_code;
    uint32 second_stage_parsing;

    /* Only for arad_plus and above */
    uint8 is_use_strength;
    uint8 pd_0_tcam_strength;
    uint8 pd_0_isa_strength;
    uint8 pd_0_isb_strength;
    uint8 pd_1_tcam_strength;
    uint8 pd_1_isa_strength;
    uint8 pd_1_isb_strength;
}ARAD_PP_DBAL_VTT_PROGRAM_PROPERTY;

typedef struct
{
    ARAD_PP_DBAL_VTT_PROGRAMS   prog_name;  /* Program Name */
    void   (*vtt_program_property_set)  (int unit, ARAD_PP_DBAL_VTT_PROGRAM_PROPERTY *prog, uint32 additional_info); /* Pointer to function that initialize program property */
    uint32 prog_used[BCM_MAX_NUM_UNITS];   /* actual program used by unit */
    uint32 additional_info;
}ARAD_PP_DBAL_VTT_PROGRAM_INFO;

typedef struct
{
	    ARAD_PP_DBAL_VTT_PROGRAM_SELECTION vtt_prog_selection_name;  /* Program Selection name */
    int32   (*vt_program_selection_set) (int unit, ARAD_PP_IHP_VTT1ST_KEY_PROGRAM_SELECTION_CAM_TBL_DATA   *prog_selection, int next_line, uint32 additional_info); /* Pointer to function that set Program selection(HW) */
    uint32  priority[BCM_MAX_NUM_UNITS];                         /* Line in CAM for first program selection by unit, if = '-1' it means that current program selection not in use*/
    ARAD_PP_DBAL_VTT_PROGRAMS prog_name[BCM_MAX_NUM_UNITS];      /* Program name by unit, if = '-1' it means that current program selection not in use */
    uint32 additional_info;
} ARAD_PP_DBAL_VT_PROGRAM_SELECTION_INFO;

typedef struct
{
    ARAD_PP_DBAL_VTT_PROGRAM_SELECTION vtt_prog_selection_name;  /* Program Selection name */
    int32   (*tt_program_selection_set) (int unit, ARAD_PP_IHP_VTT2ND_KEY_PROGRAM_SELECTION_CAM_TBL_DATA   *prog_selection, int next_line, uint32 additional_info); /* Pointer to function that set Program selection(HW) */
    uint32  priority[BCM_MAX_NUM_UNITS];                         /* Line in CAM for first program selection by unit, if = '-1' it means that current program selection not in use*/
    ARAD_PP_DBAL_VTT_PROGRAMS prog_name[BCM_MAX_NUM_UNITS];      /* Program name by unit, if = '-1' it means that current program selection not in use */
    uint32 additional_info;
} ARAD_PP_DBAL_TT_PROGRAM_SELECTION_INFO;

#include <soc/dpp/SAND/Utils/sand_footer.h>

#endif /* __ARAD_PP_VTT_INCLUDED__*/

