/*
* $Id: pkt.h,v 1.4 Broadcom SDK $
* $Copyright: (c) 2016 Broadcom.
* Broadcom Proprietary and Confidential. All rights reserved.$
*
* This file contains structures and functions declarations for 
* processing Packets.
* 
*/
#ifndef _SOC_DPP_PKT_H
#define _SOC_DPP_PKT_H

#include <soc/error.h>
#include <shared/pkt.h>
#include <soc/types.h>

/* bcm_mac_t */
typedef uint8 soc_mac_t[6];

#ifdef BCM_ARAD_SUPPORT
#endif /* BCM_ARAD_SUPPORT */

/* Itmh destination. */
typedef struct  {
    _shr_pkt_dnx_itmh_dest_type_t dest_type; /* Destination type */
    _shr_pkt_dnx_itmh_dest_type_t dest_extension_type; /* Destination Extension type */
    _shr_gport_t destination;            /* Destination Gport */
    soc_multicast_t multicast_id;       /* Destination multicast */
    _shr_gport_t destination_ext;        /* Destination-Extension Gport */
} soc_pkt_dnx_itmh_dest_t;

/* Itmh */
typedef struct  {
    uint8 inbound_mirror_disable;   /* If set, disable inbound mirroring
                                       (ITMH.IN_MIRR_DISABLE) */
    uint32 snoop_cmnd;              /* snoop command (ITMH.SNOOP_CMD) */
    uint32 prio;                    /* Traffic Class (ITMH.FWD_TRAFFIC_CLASS) */
    _shr_color_t color;              /* Color (aka Drop precedence, ITMH.FWD_DP) */
    soc_pkt_dnx_itmh_dest_t dest;   /* Destination information */
} soc_pkt_dnx_itmh_t;
/* ftmh lb extension. */
typedef struct  {
    uint8 valid;    /* Set if the extension is present */
    uint32 lb_key;  /* Load Balancing Key (FTMH.LB-Key) */
} soc_pkt_dnx_ftmh_lb_extension_t;

/* ftmh dest extension. */
typedef struct  {
    uint8 valid;                /* Set if the extension is present */
    _shr_gport_t dst_sysport;    /* Destination System Port
                                   (FTMH.Destination-Sys-Port)) */
} soc_pkt_dnx_ftmh_dest_extension_t;

/* ftmh stack extension. */
typedef struct  {
    uint8 valid;                    /* Set if the extension is present */
    uint32 stack_route_history_bmp; /* Route bitmap to prevent loops in stacking
                                       system
                                       (FTMH.Stacking-Route-History-Bitmap) */
} soc_pkt_dnx_ftmh_stack_extension_t;    
/* ftmh */
typedef struct  {
    uint32 packet_size;                 /* Packet size in bytes
                                           (FTMH.Packet-Size) */
    uint32 prio;                        /* Traffic class (FTMH.Traffic-Class) */
    _shr_gport_t src_sysport;            /* Source System port
                                           (FTMH.Source-System-Port-Aggr) */
    _shr_gport_t dst_port;               /* Destination local port (FTMH.PP_DSP) */
    _shr_color_t ftmh_dp;                /* Drop precedence (FTMH.DP) */
    _shr_pkt_dnx_ftmh_action_type_t action_type; /* Action type (FTMH.TM-Action-Type) */
    uint8 out_mirror_disable;           /* Disable Outbound mirroring
                                           (FTMH.Out-Mirror-Disable) */
    uint8 is_mc_traffic;                /* Indicate if the traffic is multicast
                                           (FTMH.TM-Action-Is-Multicast) */
    soc_multicast_t multicast_id;       /* Multicast ID (FTMH.Multicast-ID).
                                           Valid only if is_mc_traffic is set */
    _shr_gport_t out_vport;              /* Virtual port (FTMH.Out-LIF). Valid
                                           only if is_mc_traffic is unset */
    uint32 cni;                         /* Congestion indication (FTMH.CNI) */
    soc_pkt_dnx_ftmh_lb_extension_t lb_ext; /* FTMH Load Balancing Key extension */
    soc_pkt_dnx_ftmh_dest_extension_t dest_ext; /* FTMH Destination System Port
                                           Extension */
    soc_pkt_dnx_ftmh_stack_extension_t stack_ext; /* FTMH Stacking extension
                                           (Stacking-Route-History-Bitmap) */
} soc_pkt_dnx_ftmh_t;


/* otsh */
typedef struct  {
    _shr_pkt_dnx_otsh_type_t otsh_type;  /* OAM-TS(Type). */
    _shr_pkt_dnx_otsh_oam_subtype_t oam_sub_type; /* OAM-TS(OAM-Sub-Type). Applies only
                                           when otsh_type is oam. */
    uint32 oam_up_mep;                  /* OAM-TS(MEP-Type). Applies only when
                                           otsh_type is oam. */
    uint32 tp_cmd;                      /* OAM-TS(TP-Cmd). Applies only when
                                           otsh_type is 1588. */
    uint8 ts_encap;                     /* OAM-TS(TS-Encaps). Applies only when
                                           otsh_type is 1588. */
    uint64 oam_ts_data;                 /* OAM-TS(OAM-TS-Data) */
    uint32 latency_flow_ID;             /* Latency flow ID generated by the PMF. */
    uint32 offset;                      /* OAM-TS(offset). Applies only when
                                           otsh_type is oam.. */
} soc_pkt_dnx_otsh_t;
   
typedef struct  {
    uint8 valid;                /* Set if the extension is present */
    _shr_gport_t src_sysport;    /* Source System Port (OTMH.Source-System-Port) */
} _shr_pkt_dnx_otmh_src_sysport_extension_t;

/* otmh vport extension */
typedef struct  {
    uint8 valid;            /* Set if the extension is present */
    _shr_gport_t out_vport;  /* Virtual port (OTMH.Out-LIF/CUD) */
} soc_pkt_dnx_otmh_vport_extension_t;
typedef struct {
    _shr_pkt_dnx_ftmh_action_type_t action_type; /* Action type (OTMH.TM-Action-Type) */
    _shr_color_t ftmh_dp;                /* Drop precedence (OTMH.DP) */
    uint8 is_mc_traffic;                /* AIndicate if the traffic is multicast
                                           (OTMH.System-Multicast) */
    uint32 prio;                        /* Traffic class (OTMH.Traffic-Class) */
    _shr_gport_t dst_port;               /* Destination local port
                                           (OTMH.Destination-Port) */
    _shr_pkt_dnx_otmh_src_sysport_extension_t src_sysport_ext; /* OTMH Source System Port Extension */
    soc_pkt_dnx_otmh_vport_extension_t out_vport_ext; /* OTMH Source System Port Extension */
} soc_pkt_dnx_otmh_t;
 

typedef struct  {
    uint32 trap_qualifier; /* RAW Data */
    uint32 trap_id; /* RAW Data */
} soc_pkt_dnx_internal_t;


/* dnx packet */
typedef struct  soc_pkt_dnx_s {
    _shr_pkt_dnx_type_t type;    /* DNX Header type */
    soc_pkt_dnx_itmh_t itmh;    /* ITMH Header */
    soc_pkt_dnx_ftmh_t ftmh;    /* FTMH Header */
    soc_pkt_dnx_otsh_t otsh;    /* OAM-TS Header (OTSH) */
    soc_pkt_dnx_otmh_t otmh;    /* OTMH Header */
    soc_pkt_dnx_internal_t internal;      /* Internal Header */
} soc_pkt_dnx_t;

typedef struct soc_pkt_s{ /* the structure represents pkt_t */
    soc_pkt_dnx_t dnx_header_stack[_SHR_PKT_NOF_DNX_HEADERS]; /* DNX Header stack */
    uint8 dnx_header_count;             /* Number of DNX headers */
} soc_pkt_t;


#endif  /*_SOC_DPP_PKT_H*/
