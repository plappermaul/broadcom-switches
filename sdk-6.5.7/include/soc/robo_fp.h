/*
 * $Id: $
 * 
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __ROBO_FP_H__
#define __ROBO_FP_H__


/* bcm_policer_t */
typedef int drv_policer_t;

/* bcm_policer_pool_t */
typedef int drv_policer_pool_t;

/* bcm_field_stat_e */
typedef enum drv_field_stat_e {
    drvFieldStatBytes = 0,              /* Byte count of traffic of all colors. */
    drvFieldStatPackets = 1,            /* Packet count of traffic of all
                                           colors. */
    drvFieldStatDefault = drvFieldStatPackets, /* Default stat mode. */
    drvFieldStatGreenBytes = 2,         /* Byte count of green traffic. */
    drvFieldStatGreenPackets = 3,       /* Packet count of green traffic. */
    drvFieldStatYellowBytes = 4,        /* Byte count of yellow traffic. */
    drvFieldStatYellowPackets = 5,      /* Packet count of yellow traffic. */
    drvFieldStatRedBytes = 6,           /* Byte count of red traffic. */
    drvFieldStatRedPackets = 7,         /* Packet count of red traffic. */
    drvFieldStatNotGreenBytes = 8,      /* Byte count of not green traffic. */
    drvFieldStatNotGreenPackets = 9,    /* Packet count of not green traffic. */
    drvFieldStatNotYellowBytes = 10,    /* Byte count of not yellow traffic. */
    drvFieldStatNotYellowPackets = 11,  /* Packet count of not yellow traffic. */
    drvFieldStatNotRedBytes = 12,       /* Byte count of not red traffic. */
    drvFieldStatNotRedPackets = 13,     /* Packet count of not red traffic. */
    drvFieldStatAcceptedBytes = 14,     /* Byte count of accepted traffic of all
                                           colors. */
    drvFieldStatAcceptedPackets = 15,   /* Packet count of accepted traffic of
                                           all colors. */
    drvFieldStatAcceptedGreenBytes = 16, /* Byte count of accepted green traffic. */
    drvFieldStatAcceptedGreenPackets = 17, /* Packet count of accepted green
                                           traffic. */
    drvFieldStatAcceptedYellowBytes = 18, /* Byte count of accepted yellow
                                           traffic. */
    drvFieldStatAcceptedYellowPackets = 19, /* Packet count of accepted yellow
                                           traffic. */
    drvFieldStatAcceptedRedBytes = 20,  /* Byte count of accepted red traffic. */
    drvFieldStatAcceptedRedPackets = 21, /* Packet count of accepted red traffic. */
    drvFieldStatAcceptedNotGreenBytes = 22, /* Byte count of accepted not green
                                           traffic. */
    drvFieldStatAcceptedNotGreenPackets = 23, /* Packet count of accepted not green
                                           traffic. */
    drvFieldStatAcceptedNotYellowBytes = 24, /* Byte count of accepted not yellow
                                           traffic. */
    drvFieldStatAcceptedNotYellowPackets = 25, /* Packet count of accepted not yellow
                                           traffic. */
    drvFieldStatAcceptedNotRedBytes = 26, /* Byte count of accepted not red
                                           traffic. */
    drvFieldStatAcceptedNotRedPackets = 27, /* Packet count of accepted not red
                                           traffic. */
    drvFieldStatDroppedBytes = 28,      /* Byte count of dropped traffic of all
                                           colors. */
    drvFieldStatDroppedPackets = 29,    /* Packet count of dropped traffic of
                                           all colors. */
    drvFieldStatDroppedGreenBytes = 30, /* Byte count of dropped green traffic. */
    drvFieldStatDroppedGreenPackets = 31, /* Packet count of dropped green
                                           traffic. */
    drvFieldStatDroppedYellowBytes = 32, /* Byte count of dropped yellow traffic. */
    drvFieldStatDroppedYellowPackets = 33, /* Packet count of dropped yellow
                                           traffic. */
    drvFieldStatDroppedRedBytes = 34,   /* Byte count of dropped red traffic. */
    drvFieldStatDroppedRedPackets = 35, /* Packet count of dropped red traffic. */
    drvFieldStatDroppedNotGreenBytes = 36, /* Byte count of dropped not green
                                           traffic. */
    drvFieldStatDroppedNotGreenPackets = 37, /* Packet count of dropped not green
                                           traffic. */
    drvFieldStatDroppedNotYellowBytes = 38, /* Byte count of dropped not yellow
                                           traffic. */
    drvFieldStatDroppedNotYellowPackets = 39, /* Packet count of dropped not yellow
                                           traffic. */
    drvFieldStatDroppedNotRedBytes = 40, /* Byte count of dropped not red
                                           traffic. */
    drvFieldStatDroppedNotRedPackets = 41, /* Packet count of dropped not red
                                           traffic. */
    drvFieldStatOffset0Bytes = 42,      /* Byte count at configurable offset 0. */
    drvFieldStatOffset0Packets = 43,    /* Packet count at configurable offset
                                           0. */
    drvFieldStatOffset1Bytes = 44,      /* Byte count at configurable offset 1. */
    drvFieldStatOffset1Packets = 45,    /* Packet count at configurable offset
                                           1. */
    drvFieldStatOffset2Bytes = 46,      /* Byte count at configurable offset 2. */
    drvFieldStatOffset2Packets = 47,    /* Packet count at configurable offset
                                           2. */
    drvFieldStatOffset3Bytes = 48,      /* Byte count at configurable offset 3. */
    drvFieldStatOffset3Packets = 49,    /* Packet count at configurable offset
                                           3. */
    drvFieldStatOffset4Bytes = 50,      /* Byte count at configurable offset 4. */
    drvFieldStatOffset4Packets = 51,    /* Packet count at configurable offset
                                           4. */
    drvFieldStatOffset5Bytes = 52,      /* Byte count at configurable offset 5. */
    drvFieldStatOffset5Packets = 53,    /* Packet count at configurable offset
                                           5. */
    drvFieldStatOffset6Bytes = 54,      /* Byte count at configurable offset 6. */
    drvFieldStatOffset6Packets = 55,    /* Packet count at configurable offset
                                           6. */
    drvFieldStatOffset7Bytes = 56,      /* Byte count at configurable offset 7. */
    drvFieldStatOffset7Packets = 57,    /* Packet count at configurable offset
                                           7. */
    drvFieldStatCount = 58              /* Always Last. Not a usable value. */
} drv_field_stat_t;

/* Packet colors. */
#define DRV_FIELD_COLOR_PRESERVE    0          
#define DRV_FIELD_COLOR_GREEN       1          
#define DRV_FIELD_COLOR_YELLOW      2          
#define DRV_FIELD_COLOR_RED         3          
#define DRV_FIELD_COLOR_BLACK       4          

/* User-defined field maximums. */
#define DRV_FIELD_USER_MAX_UDF_NUM  1          /* UDF0 or UDF1. */
#define DRV_FIELD_USER_MAX_USER_NUM 3          /* Valid range: 0..3 */
#define DRV_FIELD_USER_NUM_UDFS     93         
#define DRV_FIELD_USER_FIELD_SIZE   4          /* Bytes per user_num. */
#define DRV_FIELD_USER_MAX_LENGTH   (1 << 5)   /* Number of bits. */

/* Policy options for bcmFieldActionPrioPktNew param1. */
#define DRV_FIELD_SPCP_MARK_MAPPED          0x01       
#define DRV_FIELD_SPCP_MARK_USE_INNER_PCP   0x02       
#define DRV_FIELD_SPCP_MARK_USE_OUTER_PCP   0x04       
#define DRV_FIELD_SPCP_MARK_USE_PORT_DEFAULT 0x08       
#define DRV_FIELD_SPCP_MARK_MASK            0x0f       
#define DRV_FIELD_CPCP_MARK_MAPPED          0x10       
#define DRV_FIELD_CPCP_MARK_USE_INNER_PCP   0x20       
#define DRV_FIELD_CPCP_MARK_USE_OUTER_PCP   0x40       
#define DRV_FIELD_CPCP_MARK_USE_PORT_DEFAULT 0x80       
#define DRV_FIELD_CPCP_MARK_MASK            0xf0       

/* 
 * Policy options for bcmFieldActionInnerVlanNew and
 * bcmFieldActionOuterVlanNew param1.
 */
#define DRV_FIELD_TAG_AS_RECEIVED   0x01       
#define DRV_FIELD_TAG_AS_NORMALIZED 0x02       
#define DRV_FIELD_TAG_COPY          0x04       
#define DRV_FIELD_TAG_REMOVE        0x08       
#define DRV_FIELD_TAG_REPLACE       0x10       

/* 
 * Counter pair modes for bcmFieldActionUpdateCounter
 * 
 * Specifies increment mode for upper (counter_num=1) and lower
 * (counter_num=0) counter in the pair. For example: GREEN_YELLOW would
 * increment the upper counter for green packets and the lower counter
 * for yellow packets.
 * 
 * BCM_FIELD_COUNTER_MODE_BYTES can be ORd with any of the other values
 * to make the counter count bytes instead of packets.
 */
#define DRV_FIELD_COUNTER_MODE_NO_NO        0x0000     
#define DRV_FIELD_COUNTER_MODE_NO_YES       0x0001     
#define DRV_FIELD_COUNTER_MODE_YES_NO       0x0002     
#define DRV_FIELD_COUNTER_MODE_RED_NOTRED   0x0003     
#define DRV_FIELD_COUNTER_MODE_GREEN_NOTGREEN 0x0004     
#define DRV_FIELD_COUNTER_MODE_GREEN_RED    0x0005     
#define DRV_FIELD_COUNTER_MODE_GREEN_YELLOW 0x0006     
#define DRV_FIELD_COUNTER_MODE_RED_YELLOW   0x0007     
#define DRV_FIELD_COUNTER_MODE_BYTES_PACKETS 0x0008     /* Upper counter is
                                                          bytes; lower counter
                                                          is packets */
#define DRV_FIELD_COUNTER_MODE_GREEN        0x0010     
#define DRV_FIELD_COUNTER_MODE_YELLOW       0x0020     
#define DRV_FIELD_COUNTER_MODE_RED          0x0040     
#define DRV_FIELD_COUNTER_MODE_ALL          0x0070     
#define DRV_FIELD_COUNTER_MODE_PACKETS      0x0000     
#define DRV_FIELD_COUNTER_MODE_BYTES        0x0100     
#define DRV_FIELD_COUNTER_MODE_DEFAULT      BCM_FIELD_COUNTER_MODE_NO_YES 

/* Filter types for bcmFieldActionFilters. */
#define DRV_FIELD_FILTER_LAG            0x1        /* LAG Filter overrides the
                                                      rule */
#define DRV_FIELD_FILTER_TAGGED         0x2        /* Tag Framing Filter
                                                      overrides the rule */
#define DRV_FIELD_FILTER_PORT_MASK      0x4        /* Port Mask Filter overrides
                                                      the rule */
#define DRV_FIELD_FILTER_STP            0x8        /* STP Filter overrides the
                                                      rule */
#define DRV_FIELD_FILTER_EAP            0x10       /* EAP Filter overrides the
                                                      rule */
#define DRV_FIELD_FILTER_INGRESS_VLAN   0x20       /* Ingress Vlan Filter
                                                      overrides the rule */
#define DRV_FIELD_FILTER_EGRESS_VLAN    0x40       /* Egress Vlan Filter
                                                      overrides the rule */
#define DRV_FIELD_FILTER_SA             0x80       /* Source address Filter
                                                      overrides the rule */
#define DRV_FIELD_FILTER_SA_DISABLED    0x100      /* Disable SA filtering */
#define DRV_FIELD_FILTER_BYPASS_ALL     0x200      /* Bypass all filtering */
#define DRV_FIELD_FILTER_ALL            0x3ff      

/* 
 * Field Qualifiers
 * 
 * Field qualifiers are collected into qualifier sets (qsets), which are
 * used to allocate field groups.
 * 
 * Note: These are in order of their bit width. Do not change the order
 * or the field select code algorithm for wide-mode will get slower.
 */
typedef enum drv_field_qualify_e {
    drvFieldQualifySrcIp6 = 0,          /*  Source IPv6 Address. */
    drvFieldQualifyDstIp6 = 1,          /*  Destination IPv6 Address. */
    drvFieldQualifySrcIp6High = 2,      /*  Src. IPv6 Address (High/Upper 64
                                           bits). */
    drvFieldQualifyDstIp6High = 3,      /*  Dest IPv6 Address (High/Upper 64
                                           bits). */
    drvFieldQualifySrcIp6Low = 4,       /*  Src. IPv6 Address (Low/Lower 64
                                           bits). */
    drvFieldQualifyDstIp6Low = 5,       /*  Dest IPv6 Address (Low/Lower 64
                                           bits). */
    drvFieldQualifySrcMac = 6,          /*  Source L2 MAC Address. */
    drvFieldQualifyDstMac = 7,          /*  Destination L2 MAC Address. */
    drvFieldQualifySnap = 8,            /*  40: SNAP Header. */
    drvFieldQualifySrcIp = 9,           /*  Source IPv4 Address. */
    drvFieldQualifyDstIp = 10,          /*  Destination IPv4 Address. */
    drvFieldQualifyLlc = 11,            /*  24: LLC Header. */
    drvFieldQualifyInPort = 12,         /*  Single Input Port. */
    drvFieldQualifyInPorts = 13,        /*  Input Port Bitmap. */
    drvFieldQualifyOutPorts = 14,       /*  Output Port Bitmap. */
    drvFieldQualifyDrop = 15,           /*  Packet is flagged to be dropped . */
    drvFieldQualifyIp6FlowLabel = 16,   /*  IPv6 Flow Label. */
    drvFieldQualifyOuterVlan = 17,      /*  Outer VLAN. */
    drvFieldQualifyOuterVlanId = 18,    /*  Outer VLAN Id. */
    drvFieldQualifyOuterVlanPri = 19,   /*  Outer VLAN priority. */
    drvFieldQualifyOuterVlanCfi = 20,   /*  Outer VLAN Cfi. */
    drvFieldQualifyInnerVlan = 21,      /*  Inner VLAN (double-tagged pkts
                                           only). */
    drvFieldQualifyInnerVlanId = 22,    /*  Inner VLAN Id. */
    drvFieldQualifyInnerVlanPri = 23,   /*  Inner VLAN priority. */
    drvFieldQualifyInnerVlanCfi = 24,   /*  Inner VLAN Cfi. */
    drvFieldQualifyLookupStatus = 25,   /*  DEPRECATED Lookup status
                                           (BCM_FIELD_LOOKUP_xxx). */
    drvFieldQualifyRangeCheck = 26,     /*  TCP/UDP Port Range Check Results. */
    drvFieldQualifyL4PortRangeCheck = drvFieldQualifyRangeCheck, /* TCP/UDP Port Range Check Results */
    drvFieldQualifyL4SrcPort = 27,      /*  TCP/UDP Source Port. */
    drvFieldQualifyL4DstPort = 28,      /*  TCP/UDP Destination Port. */
    drvFieldQualifyEtherType = 29,      /*  Ethernet Type. */
    drvFieldQualifyIpProtocol = 30,     /*  IP Protocol Field. */
    drvFieldQualifyIp6NextHeader = drvFieldQualifyIpProtocol, /*  IPv6 Next Header/IP Protocol. */
    drvFieldQualifyDSCP = 31,           /*  Diffserv Code Point. */
    drvFieldQualifyTos = drvFieldQualifyDSCP, /*  Tos - same as DSCP. */
    drvFieldQualifyIp6TrafficClass = drvFieldQualifyDSCP, /*  IPv6 Traffic Class. */
    drvFieldQualifyTtl = 32,            /*  Time To Live/Hop Limit. */
    drvFieldQualifyIp6HopLimit = drvFieldQualifyTtl, /*  IPv6 Hop Limit. */
    drvFieldQualifySrcModid = 33,       /*  Source Module ID (deprecated). */
    drvFieldQualifySrcPortTgid = 34,    /*  Source Port/Trunk Group ID
                                           (deprecated). */
    drvFieldQualifySrcPort = 35,        /*  Source Module ID and Port . */
    drvFieldQualifySrcTrunk = 36,       /*  Source Trunk Group ID . */
    drvFieldQualifySrcTrunkMemberGport = 37, /*  Source Trunk Member Port . */
    drvFieldQualifyDstModid = 38,       /*  Destination Module ID (deprecated). */
    drvFieldQualifyDstPortTgid = 39,    /*  Dest Port/Trunk Group ID
                                           (deprecated. */
    drvFieldQualifyDstPort = 40,        /*  Destination Module ID and Port . */
    drvFieldQualifyDstTrunk = 41,       /*  Destination Trunk Group ID . */
    drvFieldQualifyTcpControl = 42,     /*  TCP Control Flags. */
    drvFieldQualifyPacketRes = 43,      /*  Pkt resolution
                                           (BCM_FIELD_PKT_RES_xxx). */
    drvFieldQualifyPacketFormat = 44,   /*  DEPRECATED Packet Format
                                           (BCM_FIELD_PKT_FMT_xxx). */
    drvFieldQualifySrcClassL2 = 45,     /*  Source Class based on L2 lookup
                                           result. */
    drvFieldQualifySrcClassL3 = 46,     /*  Source Class based on L3 lookup
                                           result. */
    drvFieldQualifySrcClassField = 47,  /*  Source Class based on
                                           bcmFieldStageLookup result. */
    drvFieldQualifyDstClassL2 = 48,     /*  Destination Class based on L2 lookup
                                           result. */
    drvFieldQualifyDstClassL3 = 49,     /*  Destination Class based on L3 lookup
                                           result. */
    drvFieldQualifyDstClassField = 50,  /*  Destination Class based on
                                           bcmFieldStageLookup result. */
    drvFieldQualifyIpInfo = 51,         /*  IP Information (BCM_FIELD_IP_xxx). */
    drvFieldQualifyIpProtocolCommon = 52, /*  3: Common IP protocols. */
    drvFieldQualifyMHOpcode = 53,       /*  Module Header Opcode. */
    drvFieldQualifyIpFlags = 54,        /*  IPv4 Flags. */
    drvFieldQualifyInnerTpid = 55,      /*  2: Inner VLAN TPID. */
    drvFieldQualifyOuterTpid = 56,      /*  2: Outer VLAN TPID. */
    drvFieldQualifyInnerIpType = 57,    /*  Inner ip header IP Type
                                           (bcmFieldIpTypeXXX). */
    drvFieldQualifyTunnelType = 58,     /*  TunnelType (bcmFieldTunnelXXX). */
    drvFieldQualifyLoopbackType = 59,   /*  LoopbackType
                                           (bcmFieldLoopbackTypeXXX). */
    drvFieldQualifyLoopback = 60,       /*  Packets forwarded through loopback
                                           interface. */
    drvFieldQualifyIpType = 61,         /*  IP Type (bcmFieldIpTypeXXX). */
    drvFieldQualifyForwardingType = 62, /*  Packet forwarding type
                                           (bcmFieldForwardingTypeXXX). */
    drvFieldQualifyDecap = 63,          /*  Decapsulation occurred. */
    drvFieldQualifyHiGig = 64,          /*  HiGig packet. */
    drvFieldQualifyHiGigProxy = 65,     /*  HiGig proxy processing is enabled. */
    drvFieldQualifyDstHiGig = 66,       /*  Packet being forwarded to higig
                                           port. */
    drvFieldQualifyStage = 67,          /*  Field Processor pipeline stage. */
    drvFieldQualifyStageIngress = 68,   /*  Field Processor pipeline ingress
                                           stage. */
    drvFieldQualifyStageIngressSecurity = 69, /*  Field Processor ingress security
                                           stage. */
    drvFieldQualifyStageIngressQoS = 70, /*  Field Processor ingress QOS stage. */
    drvFieldQualifyStageLookup = 71,    /*  Field Processor pipeline lookup
                                           stage. */
    drvFieldQualifyStageEgress = 72,    /*  Field Processor pipeline egress
                                           stage. */
    drvFieldQualifyStageEgressSecurity = 73, /*  Field Processor egress security
                                           stage. */
    drvFieldQualifyStageExternal = 74,  /*  Field Processor Rules in External
                                           slice. */
    drvFieldQualifySrcIpEqualDstIp = 75, /*  Src IP == Dst IP. */
    drvFieldQualifyEqualL4Port = 76,    /*  L4 Src Port == Dst Port. */
    drvFieldQualifyTcpSequenceZero = 77, /*  Sequence number = 0. */
    drvFieldQualifyTcpHeaderSize = 78,  /*  TCP Header Size. */
    drvFieldQualifyInterfaceClassL2 = 79, /*  Vlan Class Id. */
    drvFieldQualifyInterfaceClassL3 = 80, /*  L3 Interface Class Id. */
    drvFieldQualifyInterfaceClassPort = 81, /*  Port Class Id. */
    drvFieldQualifyL3Routable = 82,     /*  L3 routable bit for FB2. */
    drvFieldQualifyIpFrag = 83,         /*  IP Fragment info. */
    drvFieldQualifyVrf = 84,            /*  VRF Id for FB 2. */
    drvFieldQualifyL3Ingress = 85,      /*  L3 ingress interface. */
    drvFieldQualifyOutPort = 86,        /*  Single Output Port. */
    drvFieldQualifyIp4 = 87,            /*  Qualify IpType == IPv4Any. */
    drvFieldQualifyIp6 = 88,            /*  Qualify IpType == Ipv6Any. */
    drvFieldQualifyL2Format = 89,       /*  Qualify on L2 header format. */
    drvFieldQualifyVlanFormat = 90,     /*  Qualify on vlan tag format. */
    drvFieldQualifyTranslatedVlanFormat = 91, /*  Qualify on translated vlan tag
                                           format. */
    drvFieldQualifyExtensionHeaderType = 92, /*  Qualify on  Next Header Field in
                                           First Extension Header. */
    drvFieldQualifyExtensionHeaderSubCode = 93, /*  Qualify on First byte after
                                           extension header length field. */
    drvFieldQualifyExtensionHeader2Type = 94, /*  Qualify on  Next Header Field in
                                           Second Extension Header. */
    drvFieldQualifyL4Ports = 95,        /*  Four bytes after L3 header are
                                           available. */
    drvFieldQualifyMirrorCopy = 96,     /*  Qualify mirrored traffic. */
    drvFieldQualifyTunnelTerminated = 97, /*  Qualify tunnel terminated traffic. */
    drvFieldQualifyMplsTerminated = 98, /*  Qualify mpls terminated traffic. */
    drvFieldQualifyInnerSrcIp = 99,     /*  Inner ip header source IPv6 Address. */
    drvFieldQualifyInnerDstIp = 100,    /*  Inner ip header destination IPv6
                                           Address. */
    drvFieldQualifyInnerSrcIp6 = 101,   /*  Inner ip header source IPv6 Address. */
    drvFieldQualifyInnerDstIp6 = 102,   /*  Inner ip header destination IPv6
                                           Address. */
    drvFieldQualifyInnerSrcIp6High = 103, /*  Inner ip header Src. IPv6 Address
                                           (High/Upper 64 bits). */
    drvFieldQualifyInnerDstIp6High = 104, /*  Inner ip header Dest IPv6 Address
                                           (High/Upper 64 bits). */
    drvFieldQualifyInnerTtl = 105,      /*  Inner ip header time To Live/Hop
                                           Limit. */
    drvFieldQualifyInnerIp6HopLimit = drvFieldQualifyInnerTtl, /*  Inner IPv6 header Hop Limit. */
    drvFieldQualifyInnerTos = 106,      /*  Inner ip header diffserv Code Point. */
    drvFieldQualifyInnerDSCP = drvFieldQualifyInnerTos, /*  Inner DSCP */
    drvFieldQualifyInnerIp6TrafficClass = drvFieldQualifyInnerTos, /*  Inner IPv6 header Traffic Class. */
    drvFieldQualifyInnerIpProtocol = 107, /*  Inner ip header IP Protocol Field. */
    drvFieldQualifyInnerIp6NextHeader = drvFieldQualifyInnerIpProtocol, /*  Inner Ip6 header  Next Header/IP
                                           Protocol. */
    drvFieldQualifyInnerIpFrag = 108,   /*  Inner ip header IP Fragment info. */
    drvFieldQualifyVlanTranslationHit = 109, /*  Vlan Translation table hit. */
    drvFieldQualifyForwardingVlanValid = 110, /*  Forwarding vlan is valid. */
    drvFieldQualifyIngressStpState = 111, /*  Ingress Vlan STG STP state. */
    drvFieldQualifyL2SrcHit = 112,      /*  L2 Source lookup success. */
    drvFieldQualifyL2SrcStatic = 113,   /*  L2 Source is static entry. */
    drvFieldQualifyL2DestHit = 114,     /*  L2 Destination lookup success. */
    drvFieldQualifyL2StationMove = 115, /*  L2 Source port mismatch. */
    drvFieldQualifyL2CacheHit = 116,    /*  L2 Destination cache lookup success. */
    drvFieldQualifyL3SrcHostHit = 117,  /*  L3 Source lookup host table hit. */
    drvFieldQualifyL3DestHostHit = 118, /*  L3 Destination lookup host table
                                           hit. */
    drvFieldQualifyL3DestRouteHit = 119, /*  L3 Destination lookup route table
                                           hit. */
    drvFieldQualifyIpmcStarGroupHit = 120, /*  L3 Multicast lookup (Star,Group)
                                           hit. */
    drvFieldQualifyDosAttack = 121,     /*  Denial of Service attack frame. */
    drvFieldQualifyIpAuth = 122,        /*  IP Authenticated. */
    drvFieldQualifyClassId = 123,       /*  internal use only. */
    drvFieldQualifyBigIcmpCheck = 124,  /*  internal use only. */
    drvFieldQualifyIcmpTypeCode = 125,  /*  internal use only. */
    drvFieldQualifyIgmpTypeMaxRespTime = 126, /*  internal use only. */
    drvFieldQualifyInnerIpProtocolCommon = 127, /*  Inner ip header IP Protocol Common
                                           Field. */
    drvFieldQualifyInnerL4SrcPort = 128, /*  TCP/UDP Source Port. */
    drvFieldQualifyInnerL4DstPort = 129, /*  TCP/UDP Destination Port. */
    drvFieldQualifyInnerIp6FlowLabel = 130, /*  Inner IPv6 header Flow Label. */
    drvFieldQualifyDstL3Egress = 131,   /*  Egress Object id. */
    drvFieldQualifyDstMulticastGroup = 132, /*  Multicast Group id. */
    drvFieldQualifySrcMplsGport = 133,  /*  Source Mpls gport. */
    drvFieldQualifyDstMplsGport = 134,  /*  Destination Mpls gport. */
    drvFieldQualifySrcMimGport = 135,   /*  Source Mim gport. */
    drvFieldQualifyDstMimGport = 136,   /*  Destination Mim gport. */
    drvFieldQualifySrcWlanGport = 137,  /*  Source Wlan gport. */
    drvFieldQualifyDstWlanGport = 138,  /*  Destination Wlan gport. */
    drvFieldQualifySrcModPortGport = 139, /*  Source module/port pair. */
    drvFieldQualifySrcModuleGport = 140, /*  Source module. */
    drvFieldQualifyColor = 141,         /*  Packet color. */
    drvFieldQualifyIntPriority = 142,   /*  Internal priority. */
    drvFieldQualifyForwardingVlanId = 143, /*  Forwarding vlan id. */
    drvFieldQualifyVpn = 144,           /*  Vpn id. */
    drvFieldQualifyFlowId = 145,        /*  Flow id. */
    drvFieldQualifyInVPort = 146,       /*  Ingress virtual port id. */
    drvFieldQualifyOutVPort = 147,      /*  Egress virtual port id. */
    drvFieldQualifyFibreChanOuter = 148, /*  Outer Fibre Channel header type. */
    drvFieldQualifyFibreChanInner = 149, /*  Inner Fibre Channel header type. */
    drvFieldQualifyVnTag = 150,         /*  NIV VN tag. */
    drvFieldQualifyCnTag = 151,         /*  QCN CN tag. */
    drvFieldQualifyFabricQueueTag = 152, /*  Fabric queue tag. */
    drvFieldQualifyMyStationHit = 153,  /*  When RIOT is not enabled or not
                                           supported, qualifies on L2 tunnel
                                           termination lookup or Routing hit
                                           status (default). When RIOT is
                                           supported and enabled, qualifies on
                                           L2 underlay tunnel termination lookup
                                           hit status. */
    drvFieldQualifyDstMultipath = 154,  /*  Destination Multipath ID. */
    drvFieldQualifyL2PayloadFirstEightBytes = 155, /*  First eight bytes of L2 Payload. */
    drvFieldQualifySrcVirtualPortValid = 156, /*  Source Virtual Port is valid. */
    drvFieldQualifyDstL3EgressNextHops = 157, /*  Consecutive L3 Egress Next hops. */
    drvFieldQualifyRecoverableDrop = 158, /*  Recoverable drop indication. */
    drvFieldQualifyRepCopy = 159,       /*  Externally-replicated copy. */
    drvFieldQualifyIpTunnelHit = 160,   /*  IP tunnel lookup hit. */
    drvFieldQualifyMplsLabel1Hit = 161, /*  MPLS label 1 lookup hit. */
    drvFieldQualifyTrillEgressRbridgeHit = 162, /*  TRILL egress Rbridge lookup hit. */
    drvFieldQualifyL2GreSrcIpHit = 163, /*  Layer 2 GRE source IP address lookup
                                           hit. */
    drvFieldQualifyMimSrcGportHit = 164, /*  MiM source port lookup hit. */
    drvFieldQualifyMplsLabel2Hit = 165, /*  MPLS label 2 lookup hit. */
    drvFieldQualifyTrillIngressRbridgeHit = 166, /*  TRILL ingress Rbridge lookup hit. */
    drvFieldQualifyL2GreVfiHit = 167,   /*  Layer 2 GRE VFI lookup hit. */
    drvFieldQualifyMimVfiHit = 168,     /*  MiM VFI lookup hit. */
    drvFieldQualifyGenericAssociatedChannelLabelValid = 169, /*  MPLS GAL valid. */
    drvFieldQualifyRouterAlertLabelValid = 170, /*  MPLS RAL valid. */
    drvFieldQualifyDstIpLocal = 171,    /*  Dest IP is local. */
    drvFieldQualifyNormalizeIpAddrs = 172, /*  Normalize IP addresses. */
    drvFieldQualifyNormalizeMacAddrs = 173, /*  Normalize MAC addresses. */
    drvFieldQualifyIpAddrsNormalized = 174, /*  IP addresses were normalized. */
    drvFieldQualifyMacAddrsNormalized = 175, /*  MAC addresses were normalized. */
    drvFieldQualifyMplsForwardingLabel = 176, /*  MPLS forwarding label. */
    drvFieldQualifyMplsForwardingLabelTtl = 177, /*  TTL field of MPLS forwarding label. */
    drvFieldQualifyMplsForwardingLabelBos = 178, /*  BOS field of MPLS forwarding label. */
    drvFieldQualifyMplsForwardingLabelExp = 179, /*  EXP field of MPLS forwarding label. */
    drvFieldQualifyMplsForwardingLabelId = 180, /*  ID field of MPLS forwarding label. */
    drvFieldQualifyMplsControlWord = 181, /*  MPLS control word. */
    drvFieldQualifyRtag7AHashUpper = 182, /*  Upper half of RTAG7 hash A result. */
    drvFieldQualifyRtag7AHashLower = 183, /*  Lower half of RTAG7 hash A result. */
    drvFieldQualifyRtag7BHashUpper = 184, /*  Upper half of RTAG7 hash B result. */
    drvFieldQualifyRtag7BHashLower = 185, /*  Lower half of RTAG7 hash B result. */
    drvFieldQualifyMplsForwardingLabelAction = 186, /*  MPLS forwarding label action. */
    drvFieldQualifyMplsControlWordValid = 187, /*  MPLS control word valid. */
    drvFieldQualifyEgressClass = 188,   /* Class assigned by next hop */
    drvFieldQualifyEgressClassL3Interface = 189, /* Class assigned by egress interface */
    drvFieldQualifyEgressClassTrill = 190, /* Class assigned by egress TRILL */
    drvFieldQualifyEgressClassWlan = 191, /* Class assigned by egress WLAN */
    drvFieldQualifyEgressClassL2Gre = 192, /* Class assigned by egress L2 GRE */
    drvFieldQualifyLlidValue = 193,     /*  LLID value (2 bytes) in preamble. */
    drvFieldQualifyCpuQueue = 194,      /*  CPU COS Queue value. */
    drvFieldQualifyMpls = 195,          /* Qualify on MPLS packets */
    drvFieldQualifySrcGport = 196,      /*  Source module/port pair or
                                           MPLS/MiM/WLAN/Niv/Vlan port. */
    drvFieldQualifyHeaderFormat = 197,  /* Qualify on header format */
    drvFieldQualifyHeaderFormatSet = 198, /* Qualify on header format set */
    drvFieldQualifyL2Learn = 199,       /* Set if L2 learning is enabled */
    drvFieldQualifyPortOrientation = 200, /* Orientation in a Hub-Spoke topology
                                           (Hub or Spoke) */
    drvFieldQualifyEcnValue = 201,      /* ECN Value */
    drvFieldQualifyRxTrapCode = 202,    /* Rx Trap Id */
    drvFieldQualifyPtch = 203,          /* Opaque attribute field of the
                                           Injected packets. Part of the PTCH
                                           header in 88650 */
    drvFieldQualifyMplsBos = 204,       /* Qualify on packets whose header
                                           parsing reached the MPLS BoS label */
    drvFieldQualifyRxTrapData = 205,    /* Rx Trap Data */
    drvFieldQualifyPolicerIntPrio = 206, /* Internal priority for the policer */
    drvFieldQualifyPacketTerminatedBytes = 207, /* Number of bytes terminated */
    drvFieldQualifyBypassFilter = 208,  /* Qualify packets bypassing any
                                           filtering */
    drvFieldQualifyReplicantAny = 209,  /* Qualify any Multicast packets */
    drvFieldQualifyReplicantFirst = 210, /* First-replication copy of the packet */
    drvFieldQualifyTrillEgressRbridge = 211, /* Egress RBridge Nickname */
    drvFieldQualifyISid = 212,          /* I-SID (MAC-in-MAC lookup-id) */
    drvFieldQualifyInterfaceClassProcessingPort = 213, /* Packet-processing Port Class ID */
    drvFieldQualifyDstRpfGport = 214,   /* RPF destination (gport) for the RPF
                                           Check */
    drvFieldQualifyTrunkHashResult = 215, /* Trunk Hash Result (i.e., the
                                           Load-balancing Key) */
    drvFieldQualifyDhcp = 216,          /* Qualify DHCP packets */
    drvFieldQualifySnoopCopy = 217,     /* Snooped traffic */
    drvFieldQualifyForwardCopy = 218,   /* Forwarded traffic */
    drvFieldQualifyInterfaceClassVPort = 219, /* Virtual Port Interface Class ID */
    drvFieldQualifyVPortRangeCheck = 220, /* Virtual Port Range Check Results */
    drvFieldQualifyPacketLengthRangeCheck = 221, /* Packet length Range Check Results */
    drvFieldQualifyStageIngressVlanTranslation = 222, /* VLAN Translation stage */
    drvFieldQualifyStageIngressTunnelTerminated = 223, /* Tunnel termination stage */
    drvFieldQualifyStageIngressMplsTerminated = 224, /* MPLS Termination stage */
    drvFieldQualifyStageIngressIpTunnel = 225, /* IP tunnel termination stage */
    drvFieldQualifyStageIngressL2Src = 226, /* L2 Source lookup stage */
    drvFieldQualifyStageIngressL2Dest = 227, /* L2 Destination lookup stage */
    drvFieldQualifyStageIngressL3SrcRoute = 228, /* L3 Source Route lookup stage */
    drvFieldQualifyStageIngressL3DestRoute = 229, /* L3 Destination Route lookup stage */
    drvFieldQualifyStageIngressIpmc = 230, /* IP Multicast lookup stage */
    drvFieldQualifyTunnelTerminatedHit = 231, /* Tunnel termination hit */
    drvFieldQualifyMplsTerminatedHit = 232, /* MPLS Termination hit */
    drvFieldQualifyL3SrcRouteHit = 233, /* L3 Source Route lookup hit */
    drvFieldQualifyIpmcHit = 234,       /* IP Multicast lookup hit */
    drvFieldQualifyVlanTranslationValue = 235, /* VLAN Translation lookup value */
    drvFieldQualifyTunnelTerminatedValue = 236, /* Tunnel Termination lookup value */
    drvFieldQualifyMplsTerminatedValue = 237, /* MPLS Termination lookup value */
    drvFieldQualifyIpTunnelValue = 238, /* IP Tunnel Termination lookup value */
    drvFieldQualifyL2SrcValue = 239,    /* L2 Source lookup value */
    drvFieldQualifyL2DestValue = 240,   /* L2 Destination lookup value */
    drvFieldQualifyL3SrcRouteValue = 241, /* L3 Source lookup value */
    drvFieldQualifyL3DestRouteValue = 242, /* L3 Destination lookup value */
    drvFieldQualifyIpmcValue = 243,     /* IP Multicast lookup value */
    drvFieldQualifyLearnSrcMac = 244,   /* MAC Source Address learnt */
    drvFieldQualifyLearnVlan = 245,     /* Vlan learnt */
    drvFieldQualifyLearnSrcPort = 246,  /* Source Port learnt */
    drvFieldQualifyPacketSize = 247,    /* Packet size in Bytes. */
    drvFieldQualifyInnerSrcMac = 248,   /* Inner Source L2 MAC Address. */
    drvFieldQualifyInnerDstMac = 249,   /* Inner Destination L2 MAC Address. */
    drvFieldQualifyInnerEtherType = 250, /* Inner Ethernet Type */
    drvFieldQualifyMplsLabel1 = 251,    /* MPLS Label 1 */
    drvFieldQualifyMplsLabel1Ttl = 252, /* TTL field of the first MPLS Label */
    drvFieldQualifyMplsLabel1Bos = 253, /* BoS field of the first MPLS Label */
    drvFieldQualifyMplsLabel1Exp = 254, /* Exp field of the first MPLS Label */
    drvFieldQualifyMplsLabel1Id = 255,  /* ID field of the first MPLS Label */
    drvFieldQualifyMplsLabel2 = 256,    /* MPLS Label 2 */
    drvFieldQualifyMplsLabel2Ttl = 257, /* TTL field of the second MPLS Label */
    drvFieldQualifyMplsLabel2Bos = 258, /* BoS field of the second MPLS Label */
    drvFieldQualifyMplsLabel2Exp = 259, /* Exp field of the second MPLS Label */
    drvFieldQualifyMplsLabel2Id = 260,  /* ID field of the second MPLS Label */
    drvFieldQualifyMplsLabel3 = 261,    /* MPLS Label 3 */
    drvFieldQualifyMplsLabel3Ttl = 262, /* TTL field of the third MPLS Label */
    drvFieldQualifyMplsLabel3Bos = 263, /* BoS field of the third MPLS Label */
    drvFieldQualifyMplsLabel3Exp = 264, /* Exp field of the third MPLS Label */
    drvFieldQualifyMplsLabel3Id = 265,  /* ID field of the third MPLS Label */
    drvFieldQualifyCascadedKeyValue = 266, /* Value of key cascaded from prior
                                           group in cascade */
    drvFieldQualifyMplsOuterLabelPop = 267, /* Qualifies MPLS Outer Label Popped
                                           Packets */
    drvFieldQualifyMplsStationHitTunnelUnterminated = 268, /* Qualifies Mpls Station Hit Tunnel
                                           Unterminated Packets */
    drvFieldQualifyIngressClassField = 269, /* Class Id assigned for packet by
                                           Ingress Stage */
    drvFieldQualifyIngressInterfaceClassPort = 270, /* Class Id assigned for packet based on
                                           Ingress Port */
    drvFieldQualifyExternalValue0 = 271, /* External lookup 0 value */
    drvFieldQualifyExternalValue1 = 272, /* External lookup 1 value */
    drvFieldQualifyExternalValue2 = 273, /* External lookup 2 value */
    drvFieldQualifyExternalValue3 = 274, /* External lookup 3 value */
    drvFieldQualifyExternalHit0 = 275,  /* External lookup 0 hit */
    drvFieldQualifyExternalHit1 = 276,  /* External lookup 1 hit */
    drvFieldQualifyExternalHit2 = 277,  /* External lookup 2 hit */
    drvFieldQualifyExternalHit3 = 278,  /* External lookup 3 hit */
    drvFieldQualifyVpnUnknownDstMacDstPort = 279, /* Destination for unknown-DA packets.
                                           Set per Vpn. */
    drvFieldQualifyVxlanNetworkId = 280, /* Vxlan Network/Segment Id */
    drvFieldQualifyVxlanFlags = 281,    /* VxLan header Flags */
    drvFieldQualifyNatNeeded = 282,     /* Qualify packets where NAT is needed */
    drvFieldQualifyNatDstRealmId = 283, /* Qualify packets on Dst Realm Id */
    drvFieldQualifyNatSrcRealmId = 284, /* Qualify packets on Src Realm Id */
    drvFieldQualifyIcmpError = 285,     /* Qualifies any packet with ICMP Error */
    drvFieldQualifyTunnelId = 286,      /* Tunnel Id */
    drvFieldQualifyArpSenderIp4 = 287,  /* Sender IPv4 field of ARP header */
    drvFieldQualifyArpTargetIp4 = 288,  /* Target IPv4 field of ARP header */
    drvFieldQualifyArpOpcode = 289,     /* Opcode field of ARP header.Values set
                                           according to bcmFieldArpOpcode */
    drvFieldQualifyTranslatedOuterVlan = 290, /* Translated Outer VLAN ID, Cfi,
                                           Priority */
    drvFieldQualifyTranslatedOuterVlanId = 291, /* Translated Outer VLAN ID */
    drvFieldQualifyTranslatedOuterVlanPri = 292, /* Translated Outer VLAN Priority */
    drvFieldQualifyTranslatedOuterVlanCfi = 293, /* Translated Outer VLAN Cfi */
    drvFieldQualifyTranslatedInnerVlan = 294, /* Translated Inner VLAN ID, Cfi,
                                           Priority */
    drvFieldQualifyTranslatedInnerVlanId = 295, /* Translated Inner VLAN ID */
    drvFieldQualifyTranslatedInnerVlanPri = 296, /* Translated Inner VLAN Priority */
    drvFieldQualifyTranslatedInnerVlanCfi = 297, /* Translated Inner VLAN Cfi */
    drvFieldQualifyConstantZero = 298,  /* Constant zero-value. Useful for
                                           Direct group mode. */
    drvFieldQualifyConstantOne = 299,   /* Constant one-value. Useful for Direct
                                           group mode. */
    drvFieldQualifyFibreChanRCtl = 300, /* Fibre Channel's R_Ctl (Routing
                                           Control) flags. */
    drvFieldQualifyFibreChanFCtl = 301, /* Fibre Channel's F_Ctl (Frame Control)
                                           flags. */
    drvFieldQualifyFibreChanCSCtl = 302, /* Fibre Channel's CS_Ctl (Class
                                           Specified Control) flags. */
    drvFieldQualifyFibreChanDFCtl = 303, /* Fibre Channel's DF_Ctl (Data Field
                                           Control) flags. */
    drvFieldQualifyFibreChanType = 304, /* Match an FP entry based on Fibre
                                           Channel's Type. */
    drvFieldQualifyFibreChanSrcId = 305, /* Fibre Channel's Src Id */
    drvFieldQualifyFibreChanDstId = 306, /* Fibre Channel's Dst Id. */
    drvFieldQualifyFibreChanZoneCheck = 307, /* Fibre Channel's Zone Check Status
                                           (BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_xxx). */
    drvFieldQualifyFibreChanSrcFpmaCheck = 308, /* Fibre Channel's Src FPMA Prefix Check
                                           Status. */
    drvFieldQualifyFibreChanSrcBindCheck = 309, /* Fibre Channel's Src Bind Check
                                           Status. */
    drvFieldQualifyFibreChanVFTVersion = 310, /* Fibre Channel's VFT version. */
    drvFieldQualifyFibreChanVFTPri = 311, /* Fibre Channel's VFT Priority. */
    drvFieldQualifyFibreChanVFTFabricId = 312, /* Fibre Channel's VFT Fabric Id. */
    drvFieldQualifyFibreChanVFTHopCount = 313, /* Fibre Channel's VFT Hop Count. */
    drvFieldQualifyFibreChanVFTVsanId = 314, /* Fibre Channel's VFT Internal VSAN ID. */
    drvFieldQualifyFibreChanVFTVsanPri = 315, /* Fibre Channel's VFT VSAN Priority. */
    drvFieldQualifyFibreChanVFTValid = 316, /* Fibre Channel's VFT header
                                           presence/validity. */
    drvFieldQualifyFcoeSOF = 317,       /* Match an FP entry based on Fcoe SOF. */
    drvFieldQualifyFcoeVersionIsZero = 318, /* FCoE Version Is Zero. */
    drvFieldQualifyForwardingHeaderOffset = 319, /* Distance of the forwarding header
                                           from the start-of-packet. Unit:
                                           bytes. */
    drvFieldQualifyL3SrcBind = 320,     /*  L3 source bind lookup success. */
    drvFieldQualifyECid = 321,          /* E-CID base. Same as ExtenderPortVid. */
    drvFieldQualifyIngressECid = 322,   /* Ingress E-CID base. */
    drvFieldQualifyETag = 323,          /* E-Tag value. */
    drvFieldQualifyIngressVPortBridgeDisable = 324, /* Ingress VPort Bridge same-interface
                                           disabled */
    drvFieldQualifyHashValue = 325,     /* Hash value */
    drvFieldQualifyIsEqualValue = 326,  /* Result value of the is-equal
                                           operation */
    drvFieldQualifyStageHash = 327,     /* Hashing stage */
    drvFieldQualifyUrpfMode = 328,      /* URPF mode according to
                                           bcm_field_urpf_mode_t */
    drvFieldQualifyAppType = 329,       /*  Packet Application type
                                           (bcmFieldAppTypeXXX). */
    drvFieldQualifySubportPktTag = 330, /* Ingress LLTAG. */
    drvFieldQualifySrcVxlanGport = 331, /* Qualify vxlan source gport. */
    drvFieldQualifyDstVxlanGport = 332, /*  Qualify vxlan destination gport. */
    drvFieldQualifyOamMdl = 333,        /*  Qualify OAM Maintenance Domain
                                           Levels. */
    drvFieldQualifyIntCongestionNotification = 334, /*  Qualify internal congestion
                                           notification value. */
    drvFieldQualifySrcNivGport = 335,   /*  Source Niv gport. */
    drvFieldQualifyDstNivGport = 336,   /*  Destination Niv gport. */
    drvFieldQualifyDstGport = 337,      /*  Destination Niv port. */
    drvFieldQualifyMirrorEgressDisabled = 338, /*  Egress Mirroring disabled. */
    drvFieldQualifyBypassSrcMacFilter = 339, /*  Qualify packets bypassing Source MAC
                                           Address filtering. */
    drvFieldQualifyRxTrapCodeForSnoop = 340, /*  Rx Trap code ID used for snoop. */
    drvFieldQualifyIpmcStarGroupValue = 341, /*  L3 Multicast lookup (Star,Group)
                                           Value. */
    drvFieldQualifyNativeVSwitch = 342, /*  Native-VSwitch (for
                                           Routing-over-overlay packets). */
    drvFieldQualifyNativeVSwitchValid = 343, /*  Valid native-VSwitch (for
                                           Routing-over-overlay packets). */
    drvFieldQualifyTrillIVersion = 344, /*  TRILL version field. */
    drvFieldQualifyTrillIngressRbridge = 345, /*  Ingress Rbridge Nickname. */
    drvFieldQualifyTrillMultiDestination = 346, /*  RILL Multi-destination field. */
    drvFieldQualifyTrillOpLength = 347, /*  TRILL Options length field. */
    drvFieldQualifyTrillHopCount = 348, /*  TRILL Hop count field . */
    drvFieldQualifyTrillPayload = 349,  /*  Payload of TRILL header. */
    drvFieldQualifyMplsForwardingLabelPayload = 350, /*  Payload of MPLS forwarding label. */
    drvFieldQualifyIncomingIpIfClass = 351, /*  Incoming IP interface Class ID. */
    drvFieldQualifyL2GreProtocolType = 352, /*  L2GRE Protocol type field . */
    drvFieldQualifyL2GreVsid = 353,     /*  L2GRE Virtual Subnet ID field. */
    drvFieldQualifyL2GreFlowId = 354,   /*  L2GRE Flow ID field. */
    drvFieldQualifyMimVlanPri = 355,    /*  MAC-in-MAC VLAN Priority field. */
    drvFieldQualifyMimVlanCfi = 356,    /*  MAC-in-MAC VLAN Cfi field. */
    drvFieldQualifyFhei = 357,          /*  DNX FHEI header field. */
    drvFieldQualifyFheiSize = 358,      /*  DNX FHEI header size in bytes. */
    drvFieldQualifyEthernetOamHeaderBits0_31 = 359, /*  Ethernet OAM Header First 4 Bytes. */
    drvFieldQualifyEthernetOamHeaderBits32_63 = 360, /*  Ethernet OAM Header Second 4 Bytes. */
    drvFieldQualifyEthernetOamDstClassL2 = 361, /*  Ethernet OAM Destination Class based
                                           on L2 lookup result. */
    drvFieldQualifyEthernetOamTxPktUPMEP = 362, /*  Ethernet OAM UP-MEP Tx Packet. */
    drvFieldQualifyEthernetOamInterfaceClassNiv = 363, /*  Ethernet OAM ClassId from Source VP
                                           Table. */
    drvFieldQualifyEthernetOamInterfaceClassMim = 364, /*  Ethernet OAM ClassId from Source VP
                                           Table. */
    drvFieldQualifyEthernetOamInterfaceClassVxlan = 365, /*  Ethernet OAM ClassId from Source VP
                                           Table. */
    drvFieldQualifyEthernetOamInterfaceClassVlan = 366, /*  Ethernet OAM ClassId from Source VP
                                           Table. */
    drvFieldQualifyEthernetOamInterfaceClassPort = 367, /*  Ethernet OAM Class Id assigned for
                                           packet based on Ingress Port. */
    drvFieldQualifyEthernetOamClassVlanTranslateKeyFirst = 368, /*  Ethernet OAM Class Id assigned for
                                           packet based on 1st Lookup in
                                           Vlan_Xlate table. */
    drvFieldQualifyEthernetOamClassVlanTranslateKeySecond = 369, /*  Ethernet OAM Class Id assigned for
                                           packet based on 2nd Lookup in
                                           Vlan_Xlate table. */
    drvFieldQualifyEthernetOamInterfaceClassMpls = 370, /*  Ethernet OAM Class Id assigned for
                                           packet based on Source VP table. */
    drvFieldQualifyEthernetOamClassVpn = 371, /*  Ethernet OAM Class Id assigned for
                                           packet based on VFI table. */
    drvFieldQualifyMplsOamHeaderBits0_31 = 372, /*  Mpls OAM Header First 4 Bytes. */
    drvFieldQualifyMplsOamHeaderBits32_63 = 373, /*  Mpls OAM Header Second 4 Bytes. */
    drvFieldQualifyMplsOamGALLabelOnly = 374, /*  MPLS OAM packets having GAL Label
                                           Only. */
    drvFieldQualifyMplsOamUpperLabelDataDrop = 375, /* MPLS OAM Labels above the forwarding
                                           label. */
    drvFieldQualifyMplsOamGALExposed = 376, /*  MPLS OAM packets having GAL exposed. */
    drvFieldQualifyMplsOamACH = 377,    /*  MPLS OAM ACH Header. */
    drvFieldQualifyMplsOamControlPktType = 378, /*  MPLS OAM control packets based on
                                           Packet Type. */
    drvFieldQualifyMplsOamClassMplsSwitchLabel = 379, /*  MPLS OAM Class Id assigned for
                                           packet based on MPLS table. */
    drvFieldQualifyOamHeaderBits0_31 = 380, /*  OAM Header First 4 Bytes. */
    drvFieldQualifyOamHeaderBits32_63 = 381, /*  OAM Header Second 4 Bytes. */
    drvFieldQualifyOamEgressClassVxlt = 382, /*  OAM Class Id assigned for packet
                                           based on EGR_VXLT table. */
    drvFieldQualifyOamEgressClassPort = 383, /*  OAM Class Id assigned for packet
                                           based on Port table. */
    drvFieldQualifyUdf = 384,           /* Qualify UDF selected data */
    drvFieldQualifyOuterVlanActionRange = 385, /* compressed outer vlan tag */
    drvFieldQualifyInnerVlanActionRange = 386, /* compressed inner vlan tag */
    drvFieldQualifyIngressInterfaceClassVPort = 387, /* Class Id assigned for packet based on
                                           Ingress GPort */
    drvFieldQualifySrcVlanGport = 388,  /* Qualify Source Vlan Gport */
    drvFieldQualifyDstVlanGport = 389,  /* Qualify Destination Vlan Gport */
    drvFieldQualifyOamType = 390,       /*  Qualify Ethernet/MPLS OAM. */
    drvFieldQualifySrcVlanGports = 391, /* Qualify Source Vlan Gports */
    drvFieldQualifyDstVlanGports = 392, /* Qualify Destination Vlan Gports */
    drvFieldQualifySrcVxlanGports = 393, /* Qualify Source Vxlan Gports */
    drvFieldQualifyDstVxlanGports = 394, /* Qualify Destination Vxlan Gports */
    drvFieldQualifySrcWlanGports = 395, /* Qualify Source Wlan Gports */
    drvFieldQualifyDstWlanGports = 396, /* Qualify Destination Wlan Gports */
    drvFieldQualifySrcMplsGports = 397, /* Qualify Source Mpls Gports */
    drvFieldQualifyDstMplsGports = 398, /* Qualify Destination Mpls Gports */
    drvFieldQualifySrcGports = 399,     /* Qualify Source module/port pair or
                                           MPLS/MiM/WLAN/Niv/Vlan ports */
    drvFieldQualifyDstGports = 400,     /* Qualify Destination Niv Gports */
    drvFieldQualifySrcMimGports = 401,  /* Qualify Source Mim Gports */
    drvFieldQualifyDstMimGports = 402,  /* Qualify Destination Mim Gports */
    drvFieldQualifySrcNivGports = 403,  /* Qualify Source Niv Gports */
    drvFieldQualifyDstNivGports = 404,  /* Qualify Destination Niv Gports */
    drvFieldQualifySrcModPortGports = 405, /* Qualify Source ModPort Gports */
    drvFieldQualifyLearnInVPort = 406,  /* Qualify Learnt Incoming VPort */
    drvFieldQualifyStackingRoute = 407, /* Qualify Stacking Route */
    drvFieldQualifyRxTrapStrength = 408, /* Qualify Rx Trap Strength */
    drvFieldQualifyVxlanHeaderBits8_31 = 409, /* Qualify Reserved_1 field in Vxlan
                                           Header */
    drvFieldQualifyVxlanHeaderBits56_63 = 410, /* Qualify Reserved_2 field in Vxlan
                                           Header */
    drvFieldQualifyOamInLifIdValid = 411, /* Indicates if the LIF that has been
                                           found is an OAM LIF. */
    drvFieldQualifyOamInLifId = 412,    /* Indicates the last OAM LIF that has
                                           been found. This value is valid only
                                           if SOC_PPC_FP_QUAL_VTT_OAM_LIF_VALID
                                           is set. */
    drvFieldQualifyOamUpMep = 413,      /* It indicates if the OAM packet is
                                           UP-MEP (sent to a destination in the
                                           network, as opposed to a specific
                                           port). This term belongs to the OAM
                                           jargon. */
    drvFieldQualifyOamSubtype = 414,    /* In OAM the packet type is specified
                                           in the OAM header and mapped to a
                                           subtype in the hardware. This value
                                           indicates the hardware type that it
                                           is mapped to. */
    drvFieldQualifyOamHeaderOffset = 415, /* This field indicates the offset of
                                           the OAM header relative to the start
                                           of packet (as opposed to start of
                                           header-offset) */
    drvFieldQualifyOamStampOffset = 416, /* This qualifier indicates the offset
                                           to the position, in the OAM header,
                                           where the ToD or counter value should
                                           be stamped
                                                                 relative to the
                                           start of packet (as opposed to start
                                           of header-offset[0]). */
    drvFieldQualifyOamMepId = 417,      /* This qualifier indicates is according
                                           to the following encoding: OAM-ID
                                           (17) = OAM-2-Match ?
                                                                  {4'b0,
                                           OAM-2-ID (13)} : {1'b1, OAM-LIF (16)}
                                           If MEP is handled in OAMP, then the
                                           OAM-ID is the MEP-ID
                                                                      
                                           (equivalent to the index used to
                                           access the MEP DB). */
    drvFieldQualifyOamMeterDisable = 418, /* This qualifier is an attribute that
                                           is passed to the PMF and can also be
                                           configured by the user per MEP.
                                                              It has no meaning
                                           other than being a qualifier in the
                                           PMF. */
    drvFieldQualifyOamTsSystemHeader = 419, /* The entire OAM-TS is passed to the
                                           egress PMF (48 bit) */
    drvFieldQualifyDstMulticastGroups = 420, /* Qualify Multicast Group ids */
    drvFieldQualifyInterfaceInPorts = 421, /* Qualify Interface In Ports */
    drvFieldQualifyDestVirtualPortValid = 422, /* Destination Virtual Port is valid. */
    drvFieldQualifyInVPortWide = 423,   /* Wide attribute of Ingress VPort . */
    drvFieldQualifyStageClass = 424,    /* Pseudo Compression Class Stage. */
    drvFieldQualifyStageClassExactMatch = 425, /* Pseudo Compression Exact Match Class
                                           Stage. */
    drvFieldQualifyFcoeOxID = 426,      /* FCoE Originator Exchange ID. */
    drvFieldQualifyFcoeRxID = 427,      /* FCoE Responder Exchange ID. */
    drvFieldQualifyIpProtocolClass = 428, /* IP Protocol ID Class. */
    drvFieldQualifyEtherTypeClass = 429, /* EtherType Class. */
    drvFieldQualifyL4SrcPortClass = 430, /* L4 Source Port Class. */
    drvFieldQualifyL4DstPortClass = 431, /* L4 Destination Port Class. */
    drvFieldQualifySrcIpClass = 432,    /* IPv4 SIP Class. */
    drvFieldQualifySrcIpClassMsbNibble = 433, /* IPv4 SIP Class 4-bits. */
    drvFieldQualifySrcIpClassLower = 434, /* IPv4 SIP Class Lower 16-bits. */
    drvFieldQualifySrcIpClassUpper = 435, /* IPv4 SIP Class Upper 16-bits. */
    drvFieldQualifySrcIp6Class = 436,   /* IPv6 SIP Class. */
    drvFieldQualifySrcIp6ClassMsbNibble = 437, /* IPv6 SIP Class 4-bits. */
    drvFieldQualifySrcIp6ClassLower = 438, /* Ipv6 SIP Class Lower 16-bits. */
    drvFieldQualifySrcIp6ClassUpper = 439, /* IPv6 SIP Class Upper 16-bits. */
    drvFieldQualifyFcoeOxIDClass = 440, /* FCoE Originator Exchange ID Class. */
    drvFieldQualifyDstIpClass = 441,    /* IPv4 DIP Class. */
    drvFieldQualifyDstIpClassMsbNibble = 442, /* IPv4 DIP Class 4-bits. */
    drvFieldQualifyDstIpClassLower = 443, /* IPv4 DIP Class Lower 16-bits. */
    drvFieldQualifyDstIpClassUpper = 444, /* IPv4 DIP Class Upper 16-bits. */
    drvFieldQualifyDstIp6Class = 445,   /* IPv6 DIP Class. */
    drvFieldQualifyDstIp6ClassMsbNibble = 446, /* Ipv6 DIP Class 4-bits. */
    drvFieldQualifyDstIp6ClassLower = 447, /* IPv6 DIP Class Lower 16-bits. */
    drvFieldQualifyDstIp6ClassUpper = 448, /* IPv6 DIP Class Upper 16-bits. */
    drvFieldQualifyFcoeRxIDClass = 449, /* FCoE Responder Exchange ID Class. */
    drvFieldQualifyFibreChanSrcIdClass = 450, /* Fibre Channel Src Id Class. */
    drvFieldQualifyFibreChanSrcIdClassMsbNibble = 451, /* Fibre Channel Src Id Class 4-bits. */
    drvFieldQualifyFibreChanSrcIdClassLower = 452, /* Fibre Channel Src Id Class Lower
                                           16-bits. */
    drvFieldQualifyFibreChanSrcIdClassUpper = 453, /* Fibre Channel Src Id Class Upper
                                           16-bits. */
    drvFieldQualifyFibreChanDstIdClass = 454, /* Fibre Channel Dst Id Class. */
    drvFieldQualifyFibreChanDstIdClassMsbNibble = 455, /* Fibre Channel Dst Id Class 4-bits. */
    drvFieldQualifyFibreChanDstIdClassLower = 456, /* Fibre Channel Dst Id Class Lower
                                           16-bits. */
    drvFieldQualifyFibreChanDstIdClassUpper = 457, /* Fibre Channel Dst Id Class Upper
                                           16-bits. */
    drvFieldQualifyTcpClassZero = 458,  /* TCP Class from TCP_FN0. */
    drvFieldQualifyTosClassZero = 459,  /* TOS Class from TOS_FN0. */
    drvFieldQualifyTtlClassZero = 460,  /* TTL Class from TTL_FN0. */
    drvFieldQualifyTcpClassOne = 461,   /* TCP Class from TCP_FN1. */
    drvFieldQualifyTosClassOne = 462,   /* TOS Class from TOS_FN1. */
    drvFieldQualifyTtlClassOne = 463,   /* TTL Class from TTL_FN1. */
    drvFieldQualifyOuterVlanPriCfi = 464, /*  Outer VLAN Pri + Cfi (4 bits). */
    drvFieldQualifyForwardHdrSrcMac = 465, /*  FWD Header SA MAC (48 bits). */
    drvFieldQualifyForwardHdrDstMac = 466, /*  FWD Header DA MAC (48 bits). */
    drvFieldQualifyForwardHdrVlanId = 467, /*  FWD Header Vlan Id (12 bits). */
    drvFieldQualifyDstSysPortExt = 468, /*  FTMH Destination System Port (DSP)
                                           Extension (16 bits). */
    drvFieldQualifyStageIngressExactMatch = 469, /*  Field Processor pipeline ingress
                                           exact match stage. */
    drvFieldQualifyLearnExtension = 470, /* Learn Extension Data. */
    drvFieldQualifyIpFragNonOrFirst = 471, /*  Non Fragmented IP Packet or First
                                           Fragment of IP Packet. */
    drvFieldQualifyPacketLength = 472,  /*  Packet Length Excluding L2 Header(+
                                           Vlan Tag for Tagged packets). */
    drvFieldQualifyGroupClass = 473,    /*  Field Group Class Id (Logical Table
                                           Class Id) assigned by pre-selection
                                           entry. */
    drvFieldQualifyUdfClass = 474,      /*  Class ID associated to packet on UDF
                                           match. */
    drvFieldQualifyInterfaceLookupClassPort = 475, /*  VFP Port Class Id that can be
                                           matched in Ingress Filter Processor. */
    drvFieldQualifyHiGigDstMulticast = 476, /* Indicates if the HiGig Destination is
                                           a Multicast or Unicast. */
    drvFieldQualifyHiGigDstMulticastGroupId = 477, /* Destination Multicast Group Id. */
    drvFieldQualifyHiGigTrafficClass = 478, /* QOS provided by Fabric when
                                           forwarding the packet through Fabric. */
    drvFieldQualifyHiGigDstModuleGport = 479, /* Destination Module ID. */
    drvFieldQualifyHiGigDstPortGport = 480, /* Destination Port. */
    drvFieldQualifyHiGigDstModPortGport = 481, /* Destination Module ID and Port. */
    drvFieldQualifyHiGigSrcModuleGport = 482, /* Source Module ID. */
    drvFieldQualifyHiGigSrcPortGport = 483, /* Source Port. */
    drvFieldQualifyHiGigSrcModPortGport = 484, /* Source Module ID and Port. */
    drvFieldQualifyHiGigLoadBalanceID = 485, /* A packet flow hashing index for
                                           distribution of packet flows through
                                           a multipath fabric. */
    drvFieldQualifyHiGigColor = 486,    /* Indicates Traffic rate violation
                                           status of the packet measured by
                                           Ingress Module.This can be
                                           Green/Yellow/Red */
    drvFieldQualifyHiGigIntCongestionNotification = 487, /* Indicates ECN and Transport Protocol
                                           Class Information generated by
                                           Ingress Module. */
    drvFieldQualifyHiGigIngressTagged = 488, /* Tagged packet was ingressed at the
                                           HiGig Port. */
    drvFieldQualifyHiGigDstTrunk = 489, /* Is the Destination port is Trunk
                                           Port? */
    drvFieldQualifyHiGigDstTrunkId = 490, /* Destination HiGig Trunk Group Id. */
    drvFieldQualifyHiGigIngressL3SwitchPkt = 491, /* Packet is L3 switched at the Source
                                           Port */
    drvFieldQualifyHiGigLabel = 492,    /* 20 Bit Label Present in HiGig Header.
                                           Label Type can be QTag/Mirror
                                           Classification Tag/System Ingress
                                           Port. */
    drvFieldQualifyHiGigReplicationId = 493, /* Replication ID used to identify
                                           Packet modifications to be applied
                                           for this replicated copy. */
    drvFieldQualifyHiGigVlan = 494,     /* Vlan tag information in HiGig Header */
    drvFieldQualifyHiGigPortFilteringMode = 495, /* Port Filtering mode used for
                                           Multicast packets. */
    drvFieldQualifyHiGigSrcTrunk = 496, /* Indicates the packet is originally
                                           ingressed on Trunk Port. */
    drvFieldQualifyHiGigIngressClassificationTag = 497, /* Classification Tag assigned to packet
                                           in Ingress Filter Processor(IFP). */
    drvFieldQualifyHiGigEgressMcast = 498, /* Indicates whether the packet is sent
                                           to a single point or a multi-point
                                           tree within the egress chip. */
    drvFieldQualifyHiGigVni = 499,      /* Virtual Network Identifier (ISID)
                                           which identifies the service instance
                                           for this packet. */
    drvFieldQualifyHiGigDstGport = 500, /* The destination VP index for egress
                                           chip packet modification and
                                           encapsulation. */
    drvFieldQualifyHiGigMulticastIndex = 501, /* The destination multicast index for
                                           egress chip packet modification and
                                           encapsulation. */
    drvFieldQualifyHiGigVpReplicationId = 502, /* The destination Replication ID for
                                           egress chip packet modification and
                                           encapsulation. */
    drvFieldQualifyHiGigSrcGport = 503, /* The Source VP index from which the
                                           packet ingressed the system. */
    drvFieldQualifyHiGigProtectionSwitchingStatus = 504, /* This indicates the egress packet
                                           processor to use working / protection
                                           path based on the decision made in
                                           the ingress packet processor. */
    drvFieldQualifyHiGigMirrorToVp = 505, /* Indicates whether the packet is a
                                           mirrored copy or Switched Copy */
    drvFieldQualifyHiGigDstType = 506,  /* Indicates whether the destination is
                                           Virtual or Physical. */
    drvFieldQualifyHiGigSrcType = 507,  /* Indicates whether the source is
                                           Virtual or Physical. */
    drvFieldQualifyHiGigOffloadEngineClassificationTag = 508, /* Opaque field generated by the ACL
                                           rule that triggered the redirect to
                                           the offload engine. */
    drvFieldQualifyHiGigOffloadEnginePktPriNew = 509, /* New 802.1p bits */
    drvFieldQualifyHiGigOffloadEngineDscpNew = 510, /* New DSCP value. */
    drvFieldQualifyLoopBackQueue = 511, /* Loopback Port Queue Number. It is
                                           used in the MMU for buffer account
                                           and flow control of traffic received
                                           on the internal loopback port. */
    drvFieldQualifyLoopBackSrcGport = 512, /* Source field for the packet. It can
                                           be a Virtual/Physical port. */
    drvFieldQualifyPktIsVisible = 513,  /* Triggers capture of intermediate
                                           packet processing results for this
                                           packet. */
    drvFieldQualifyLoopBackCpuMasqueradePktProfile = 514, /* Pointer to indicate disposition of
                                           these packets in the Ingress
                                           Pipeline. */
    drvFieldQualifyLoopBackColor = 515, /* Indicates Traffic rate violation
                                           status of the packet measured by
                                           Ingress Module.This can be
                                           Green/Yellow/Red. */
    drvFieldQualifyLoopBackTrafficClass = 516, /* QOS provided by Fabric when
                                           forwarding the packet through Fabric. */
    drvFieldQualifyLoopBackPacketProcessingPort = 517, /* Device Port Number which is to be
                                           used for processing the packet in the
                                           Ingress Pipeline. This must be a port
                                           that is programmed in the device to
                                           be a front panel (Ethernet) port. */
    drvFieldQualifyMixedSrcClassId = 518, /* Mixed Source ID value used in
                                           Pre-selection. */
    drvFieldQualifyITag = 519,          /* Service Instance Tag in MAC-in-MAC. */
    drvFieldQualifyInterfaceIngressKeySelectClassPort = 520, /* Ingress port class id assigned to
                                           port by port table. */
    drvFieldQualifyBfdYourDiscriminator = 521, /* BFD Your Discriminator. */
    drvFieldQualifyCpuVisibilityPacket = 522, /* CPU visibility packet. */
    drvFieldQualifyDstL2MulticastGroup = 523, /* Destination L2 Multicast Group Id. */
    drvFieldQualifyDstL3MulticastGroup = 524, /* Destination L3 Multicast Group Id. */
    drvFieldQualifyExactMatchHitStatus = 525, /* Exact Match Hit Status. */
    drvFieldQualifyExactMatchActionClassId = 526, /* Exact Match Action Class Identifier. */
    drvFieldQualifyExactMatchGroupClassId = 527, /* Exact Match Group Class Identifier. */
    drvFieldQualifyL2PayLoad = 528,     /* Qualify Bytes after L2 Header */
    drvFieldQualifyCustomHeaderPkt = 529, /* Qualify Custom Header packets. */
    drvFieldQualifyCustomHeaderData = 530, /* Qualify the content of Custom Header
                                           32-bits. */
    drvFieldQualifyMimlPkt = 531,       /* Qualify for MiML or non-MiML packet. */
    drvFieldQualifyMimlSrcMac = 532,    /* Mac-in-Mac Lite(MiML) Source MAC
                                           Address. */
    drvFieldQualifyMimlDstMac = 533,    /* Mac-in-Mac Lite(MiML) Destination MAC
                                           Address. */
    drvFieldQualifyMimlVlan = 534,      /* Mac-in-Mac Lite(MiML) VLAN ID, Cfi,
                                           Priority. */
    drvFieldQualifyMimlVlanId = 535,    /* Mac-in-Mac Lite(MiML) VLAN ID. */
    drvFieldQualifyMimlVlanPri = 536,   /* Mac-in-Mac Lite(MiML) VLAN Priority. */
    drvFieldQualifyMimlVlanCfi = 537,   /* Mac-in-Mac Lite(MiML) VLAN Cfi. */
    drvFieldQualifyMimlInnerTag = 538,  /* Mac-in-Mac Lite(MiML) inner tag
                                           fields {MIML_PKT_TYPE, MIML_IID,
                                           MIML_RSVD, MIML_LENGTH}. */
    drvFieldQualifyCapwapHdrType = 539, /* The TYPE field in CAPWAP header. */
    drvFieldQualifyCapwapHdrRid = 540,  /* The RID field in CAPWAP header. */
    drvFieldQualifyCapwapPayloadSOF = 541, /* It indicates the CAPWAP payload is
                                           non-fragmented or first fragment. */
    drvFieldQualifyCapwapPayloadDstMac = 542, /* destination MAC address in CAPWAP
                                           payload. */
    drvFieldQualifyCapwapPayloadSrcMac = 543, /* source MAC address in CAPWAP payload. */
    drvFieldQualifyCapwapPayloadEtherType = 544, /* Ethernet type in CAPWAP payload. */
    drvFieldQualifyCapwapPayloadOuterVlan = 545, /* Outer VLAN tag in CAPWAP payload. */
    drvFieldQualifyCapwapPayloadOuterVlanId = 546, /* Outer VLAN id in CAPWAP payload. */
    drvFieldQualifyCapwapPayloadOuterVlanPri = 547, /* Outer VLAN priority in CAPWAP
                                           payload. */
    drvFieldQualifyCapwapPayloadOuterVlanCfi = 548, /* Outer VLAN CFI in CAPWAP payload. */
    drvFieldQualifyCapwapPayloadInnerVlan = 549, /* Inner VLAN tag in CAPWAP payload. */
    drvFieldQualifyCapwapPayloadInnerVlanId = 550, /* Inner VLAN id in CAPWAP payload. */
    drvFieldQualifyCapwapPayloadInnerVlanPri = 551, /* Inner VLAN priority in CAPWAP
                                           payload. */
    drvFieldQualifyCapwapPayloadInnerVlanCfi = 552, /* Inner VLAN CFI in CAPWAP payload. */
    drvFieldQualifyCapwapPayloadVlanFormat = 553, /* VLAN tag format in CAPWAP payload. */
    drvFieldQualifyCapwapPayloadSip = 554, /* IPv4 source address in CAPWAP
                                           payload. */
    drvFieldQualifyCapwapPayloadDip = 555, /* IPv4 destination address in CAPWAP
                                           payload. */
    drvFieldQualifyCapwapPayloadSip6 = 556, /* IPv6 source address in CAPWAP
                                           payload. */
    drvFieldQualifyCapwapPayloadDip6 = 557, /* IPv6 destination address in CAPWAP
                                           payload. */
    drvFieldQualifyCapwapPayloadIpProtocol = 558, /* IP Protocol value in CAPWAP payload. */
    drvFieldQualifyCapwapPayloadTos = 559, /* Type-of-Service value in CAPWAP
                                           payload. */
    drvFieldQualifyCapwapPayloadL4DstPort = 560, /* UDP/TCP destination port number in
                                           CAPWAP payload. */
    drvFieldQualifyCapwapPayloadL4SrcPort = 561, /* UDP/TCP source port number in CAPWAP
                                           payload. */
    drvFieldQualifyCapwapPayloadL3HdrParseable = 562, /* It indicates the parser can parse
                                           ipv4/ipv6 header in the wireless
                                           payload. */
    drvFieldQualifyCapwapPayloadL4HdrParseable = 563, /* It indicates the parser can parse
                                           UDP/TCP header in the wireless
                                           payload. */
    drvFieldQualifyVlanAction = 564,    /* Vlan Action Set ID. */
    drvFieldQualifyDownMepSatTerminated = 565, /* Qualify Rx Down Mep SAT terminated
                                           hit status. */
    drvFieldQualifyDstMultipathOverlay = 566, /* Qualify on ECMP groups with overlay
                                           flag */
    drvFieldQualifyDstMultipathUnderlay = 567, /* Qualify on ECMP groups with Underlay
                                           flag */
    drvFieldQualifyStpState = 568,      /* Qualify on VLAN STG STP states. */
    drvFieldQualifyHiGigMirrorOrSwitchPkt = 569, /* Indicates whether the packet has to
                                           be mirrored and switched. */
    drvFieldQualifyHiGigPreserveFlags = 570, /* Indicates the DSCP/DOT1P flags should
                                           not be modified. */
    drvFieldQualifyHiGigMplsPkt = 571,  /* When set, indicates packet contains a
                                           20 bit label. Otherwise packet
                                           contains MPLS information. */
    drvFieldQualifyHiGigDoNotFlags = 572, /* Donot Learn(do not perform MAC
                                           learning) and Donot Modify(Send the
                                           packet to destination unmodified)
                                           Flags. */
    drvFieldQualifyHiGigVpPreserveFlags = 573, /* Indicates the VP not to modify the
                                           DSCP/DOT1P flags. */
    drvFieldQualifyHiGigOffloadEngineVxltStatus = 574, /* Indicates whether the Packet has been
                                           through Vlan Translation. */
    drvFieldQualifyHiGigForwardingType = 575, /* Indicates the forwarding type whether
                                           it is a control/L2/L3/broadcast
                                           packet. */
    drvFieldQualifyHiGigLabelType = 576, /* Indicates contents of Label. It can
                                           be a QTag/ Mirror Classification Tag/
                                           Original System Ingress Port through
                                           which the packet ingressed/ Original
                                           HiGig+ Overlay. */
    drvFieldQualifyHiGigExtendedHeaderPresent = 577, /* Indicates whether extended header is
                                           present in the HiGiG header or not. */
    drvFieldQualifyHiGigVpLagFailoverPacket = 578, /* When set, it indicates that the
                                           packet is redirected by a LAG
                                           failover and the packet must not be
                                           redirected again by LAG failover. */
    drvFieldQualifyHiGigOffloadEnginePreserveDscp = 579, /* Indicates offload engine not to
                                           change the DSCP in the packet. */
    drvFieldQualifyHiGigOffloadEnginePreserveDot1p = 580, /* Indicates offload engine not to
                                           change the DOT1P in the packet. */
    drvFieldQualifyHiGigOffloadEngineDeferredFlags = 581, /* Indicates whether a drop action/DSCP
                                           change/802.1 change was deferred. */
    drvFieldQualifyHiGigOffloadEngineSrcType = 582, /* This applies to packets destined to
                                           Offload Engine and this indicates
                                           whether the packet is ingressed on a
                                           Physical port / Virtual Port. */
    drvFieldQualifySystemPortBitmap = 583, /* To qualify on a port bitmap generated
                                           from SGLP. */
    drvFieldQualifySourceGportBitmap = 584, /* To qualify on a port bitmap generated
                                           from SVP. */
    drvFieldQualifyDevicePortBitmap = 585, /* To qualify on a port bitmap generated
                                           from device ingress port. */
    drvFieldQualifyTosLower4Bits = 586, /* To qualify on Lower 4bits of TOS. */
    drvFieldQualifyOamEgressClass2Vxlt = 587, /* To qualify on OAM Class Id assigned
                                           for packet based on Second Lookup in
                                           EGR_VLAN_XLATE table. */
    drvFieldQualifyOamEgressVxltFirstHit = 588, /* To qualify on First EGR_VXLT lookup
                                           hit status. */
    drvFieldQualifyOamEgressVxltSecondHit = 589, /* To qualify on Second EGR_VXLT lookup
                                           hit status. */
    drvFieldQualifyOamDownMEPLoopbackPacket = 590, /* Indicates Down-MEP Loopback or
                                           Down-SAT Latching Loopback packet. */
    drvFieldQualifyOamEgressPortUnicastDstMacHit = 591, /* To qualify on EGR_PORT MAC DA hit
                                           status. */
    drvFieldQualifyOamSat = 592,        /* Pseudo qualifier for OAM/SAT. */
    drvFieldQualifyIngressDropEthernetOamControl = 593, /* To qualify on Drop reasons for
                                           Ethernet Oam Control Packets based on
                                           MEP type. */
    drvFieldQualifyIngressDropEthernetOamData = 594, /* To qualify on Drop reasons for
                                           Ethernet Oam Data Packets based on
                                           MEP type. */
    drvFieldQualifyIngressDropMplsOamControl = 595, /* To qualify on Drop reasons for Mpls
                                           Oam Control Packets based on MEP
                                           type. */
    drvFieldQualifyIngressDropMplsOamData = 596, /* To qualify on Drop reasons for Mpls
                                           Oam Data Packets based on MEP type. */
    drvFieldQualifyEgressClassVxlan = 597, /* Class assigned by Egress Vxlan */
    drvFieldQualifyOamEgressEtherType = 598, /* To qualify on OAM/SAT Ethernet Type.
                                           Allowed values are 0x8902 and 0x88b7 */
    drvFieldQualifyOamEgressMulticastMacHit = 599, /* To qualify on Multicast OAM Dest Mac
                                           Address Range Hit. Allowed values
                                           BCM_FIELD_OAM_MULTICAST_MAC_XXX */
    drvFieldQualifyTrunkMemberSourceModuleId = 600, /* To qualify on Module ID on a trunk
                                           member port. */
    drvFieldQualifyOamEgressClassSrcMac = 601, /* To qualify on SourceMac Class ID
                                           assigned for packet based on Hit in
                                           EGR_OAM_SAT_MISC_MAC_SA_0.15
                                           registers. */
    drvFieldQualifyMyStation2Hit = 602, /* Applicable only when RIOT is enabled.
                                           To qualify on Overlay L2 termination
                                           lookup hit status for tunnel packets
                                           or Routing hit status for non-tunnel
                                           packets. */
    drvFieldQualifyExternalValue4 = 603, /* External lookup 4 value */
    drvFieldQualifyExternalValue5 = 604, /* External lookup 5 value */
    drvFieldQualifyExternalHit4 = 605,  /* External lookup 4 hit */
    drvFieldQualifyExternalHit5 = 606,  /* External lookup 5 hit */
    drvFieldQualifyGeneratedTtl = 607,  /* Get match criteria for
                                           bcmFieldQualifyGeneratedTtl qualifier
                                           from the field entry. */
    drvFieldQualifyIpMulticastCompatible = 608, /* Packet is compatible for multicast. */
    drvFieldQualifyStaggeredValue0 = 609, /* Value taken from action result 0 in
                                           staggered mode. */
    drvFieldQualifyStaggeredValue1 = 610, /* Value taken from action result 1 in
                                           staggered mode. */
    drvFieldQualifyStaggeredValue2 = 611, /* Value taken from action result 2 in
                                           staggered mode. */
    drvFieldQualifyStaggeredValue3 = 612, /* Value taken from action result 3 in
                                           staggered mode. */
    drvFieldQualifyStaggeredDirectValue = 613, /* Value taken from KAPS payload in
                                           staggered mode. */
    drvFieldQualifyStaggeredPreselProfile0 = 614, /* Program selection profile value taken
                                           from action result 0 in staggered
                                           mode. */
    drvFieldQualifyStaggeredPreselProfile1 = 615, /* Program selection profile value taken
                                           from action result 1 in staggered
                                           mode. */
    drvFieldQualifyStaggeredPreselProfile2 = 616, /* Program selection profile value taken
                                           from action result 2 in staggered
                                           mode. */
    drvFieldQualifyStaggeredPreselProfile3 = 617, /* Program selection profile value taken
                                           from action result 3 in staggered
                                           mode. */
    drvFieldQualifyStaggeredPreselProfileDirect = 618, /* Program selection profile value taken
                                           from KAPS payload 0 in staggered
                                           mode. */
    drvFieldQaulifyPreselId = 619,      /* Program selection value in 2nd Pass
                                           according to the 1st Pass
                                           preselector-id. */
    drvFieldQualifyEthernetData = 620,  /* Egress data qualifier base only.
                                           NWK_RCRDS Ethernet data field,
                                           containing Ethernet tags (if any) and
                                           Ethertype. */
    drvFieldQualifyPreemptablePacket = 621, /* Preemptable Packet */
    drvFieldQualifyVxlanClassValid = 622, /* VXLAN Class is valid or not */
    drvFieldQualifyVxlanPacket = 623,   /* Indicates whether it is a VXLAN
                                           packet */
    drvFieldQualifyVxlanVnidVlanTranslateHit = 624, /* VXLAN Network Identifier (VN_ID)
                                           lookup hit through vlan translation */
    drvFieldQualifyVxlanPayloadVlanFormat = 625, /* VLAN tag format in VXLAN payload */
    drvFieldQualifyTunnelPayloadDstMac = 626, /* Destination MAC address in Tunnel
                                           payload */
    drvFieldQualifyTunnelPayloadSrcMac = 627, /* Source MAC address in Tunnel payload */
    drvFieldQualifyTunnelPayloadEtherType = 628, /* Ethernet type in Tunnel payload */
    drvFieldQualifyTunnelPayloadOuterVlan = 629, /* Outer VLAN tag in Tunnel payload */
    drvFieldQualifyTunnelPayloadOuterVlanId = 630, /* Outer VLAN id in Tunnel payload */
    drvFieldQualifyTunnelPayloadOuterVlanPri = 631, /* Outer VLAN priority in Tunnel payload */
    drvFieldQualifyTunnelPayloadOuterVlanCfi = 632, /* Outer VLAN CFI in Tunnel payload */
    drvFieldQualifyTunnelPayloadSip = 633, /* IPv4 source address in Tunnel payload */
    drvFieldQualifyTunnelPayloadDip = 634, /* IPv4 destination address in Tunnel
                                           payload */
    drvFieldQualifyTunnelPayloadSip6 = 635, /* IPv6 source address in Tunnel payload */
    drvFieldQualifyTunnelPayloadDip6 = 636, /* IPv6 destination address in Tunnel
                                           payload */
    drvFieldQualifyTunnelPayloadIpProtocol = 637, /* IP Protocol value in Tunnel payload */
    drvFieldQualifyTunnelPayloadL4DstPort = 638, /* UDP/TCP destination port number in
                                           Tunnel payload */
    drvFieldQualifyTunnelPayloadL4SrcPort = 639, /* UDP/TCP source port number in Tunnel
                                           payload */
    drvFieldQualifyRoceBthOpcode = 640, /* To qualify on OP code on RoCEv1 /
                                           RoCEv2 Base Transport Header(BTH) */
    drvFieldQualifyRoceBthPartitionKey = 641, /* To qualify on partition key on RoCEv1
                                           / RoCEv2  Base Transport Header (BTH) */
    drvFieldQualifyRoceBthDstQueuePair = 642, /* To qualify on destination queue pair
                                           on RoCEv1 / RoCEv2 Base Transport
                                           Header(BTH) */
    drvFieldQualifyRoceBthFlags = 643,  /* To qualify on flags on RoCEv1 /
                                           RoCEv2 Base Transport Header(BTH) */
    drvFieldQualifyRoceVer1Pkt = 644,   /* Indicate whether it is a RoCEv1
                                           packet */
    drvFieldQualifyRoceVer2Pkt = 645,   /* Indicate whether it is a RoCEv2
                                           packet */
    drvFieldQualifySrcPortSRType = 646, /* SR (Seamless Redundancy) port type
                                           (bcmFieldPortSRTypeXXX) assigned to
                                           the source port */
    drvFieldQualifyDstPortSRType = 647, /* SR (Seamless Redundancy) port type
                                           (bcmFieldPortSRTypeXXX) assigned to
                                           the destination port */
    drvFieldQualifySrcPortSRRoleInterlink = 648, /* Indicates whether the SR role for the
                                           source is an interlink */
    drvFieldQualifyDstPortSRRoleInterlink = 649, /* Indicates whether the SR role for the
                                           destination is an interlink */
    drvFieldQualifySrcPortSRMode = 650, /* The SR port mode
                                           (bcmFieldSRPortModeXXX) assigned to
                                           the source port */
    drvFieldQualifyDstPortSRMode = 651, /* The SR port mode
                                           (bcmFieldSRPortModeXXX) assigned to
                                           the destination port */
    drvFieldQualifySrcPortSRNetId = 652, /* The SR NET ID (0~7) assigned to the
                                           source port */
    drvFieldQualifyDstPortSRNetId = 653, /* The SR NET ID (0~7) assigned to the
                                           destination port */
    drvFieldQualifySrcPortSRLanId = 654, /* The SR LAN ID (0 for LAN A and 1 for
                                           LAN B) assigned to the source port */
    drvFieldQualifyDstPortSRLanId = 655, /* The SR LAN ID (0 for LAN A and 1 for
                                           LAN B) assigned to the destination
                                           port */
    drvFieldQualifySRTagType = 656,     /* The SR (Seamless Redundancy) tag type
                                           (bcmFieldSRTagTypeXXX) identified in
                                           this packet */
    drvFieldQualifySRLanId = 657,       /* The SR LAN ID (0 for LAN A and 1 for
                                           LAN B) in the SR tag. Valid only if
                                           the packet contains an SR tag. */
    drvFieldQualifySRNetId = 658,       /* The SR NET ID (0~7) in the SR tag.
                                           Valid only if the packet contains an
                                           SR tag. */
    drvFieldQualifyVlanSREnable = 659,  /* Indicates whether SR (Seamless
                                           Redundancy) is enabled in this VLAN */
    drvFieldQualifyVlanSRLanId = 660,   /* Indicates the SR LAN ID (0 for LAN A
                                           and 1 for LAN B) for this VLAN. Valid
                                           only if SR is enabled for this VLAN. */
    drvFieldQualifySRFlowId = 661,      /* SR flow ID for the SR flow that the
                                           packet belongs to */
    drvFieldQualifyL2DestSRNodeType = 662, /* SR node type (bcmFieldSRNodeTypeXXX)
                                           for the destination address */
    drvFieldQualifySRNetIdMatched = 663, /* Indicates whether the SR packet's NET
                                           ID matches the configured NET ID on
                                           the destination port */
    drvFieldQualifySRSrcNodeIsSan = 664, /* Indicates whether the source address
                                           belongs to an SR SAN node */
    drvFieldQualifySRSupervisionType = 665, /* The SR supervision type
                                           (bcmFieldSRSupervisionTypeXXX) if
                                           it's an SR supervision packet */
    drvFieldQualifySRError = 666,       /* Indicates SR errors for the packet */
    drvFieldQualifyL2SrcMulticastHit = 667, /* Indicates L2 source address found on
                                           the correct multicast group. */
    drvFieldQualifyL2DstMulticastHit = 668, /* Indicates L2 destination address
                                           found and result is a multicast
                                           group. */
    drvFieldQualifySRDuplicate = 669,   /* SR (Seamless Redundancy): Indicates
                                           whether this packet is a duplicate SR
                                           packet */
    drvFieldQualifyTsnFlowId = 670,     /* TSN (Time-Sensitive Networking) flow
                                           ID for the TSN flow that the packet
                                           belongs to */
    drvFieldQualifyExternalValue6 = 671, /* External lookup 6 value */
    drvFieldQualifyExternalValue7 = 672, /* External lookup 7 value */
    drvFieldQualifyExternalHit6 = 673,  /* External lookup 6 hit */
    drvFieldQualifyExternalHit7 = 674,  /* External lookup 7 hit */
    drvFieldQualifyCount = 675          /* Always Last. Not a usable value. */
} drv_field_qualify_t;

#define DRV_FIELD_QUALIFY_MAX   (drvFieldQualifyCount + DRV_FIELD_USER_NUM_UDFS) /* Must be >= bcmFieldQualifyCount. */

/* Field qset defines the set of fields used for lookup. */
typedef struct drv_field_qset_s {
    SHR_BITDCL w[_SHR_BITDCLSIZE(DRV_FIELD_QUALIFY_MAX)]; 
    SHR_BITDCL udf_map[_SHR_BITDCLSIZE(DRV_FIELD_USER_NUM_UDFS)]; 
} drv_field_qset_t;

/* bcm_field_action_e */
typedef enum drv_field_action_e {
    drvFieldActionCosQNew = 0,          /* Change CoS Queue; param0: New CoS
                                           Queue. */
    drvFieldActionCosQCpuNew = 1,       /* Change CoS Queue when CopyToCpu;
                                           param0: New CoS Queue. */
    drvFieldActionVlanCosQNew = 2,      /* Change VLAN CoS Queue; param0: New
                                           CoS Queue. */
    drvFieldActionUcastCosQNew = 3,     /* Change CoS Queue for unicast packets;
                                           param0: New CoS Queue. */
    drvFieldActionMcastCosQNew = 4,     /* Change CoS Queue for multicast
                                           packets; param0: New CoS Queue. */
    drvFieldActionPrioPktAndIntCopy = 5, /* Pkt & internal priority from inner
                                           tag. */
    drvFieldActionPrioPktAndIntNew = 6, /* Pkt & internal priority from arg;
                                           param0: New priority. */
    drvFieldActionPrioPktAndIntTos = 7, /* Pkt & internal priority from TOS
                                           field. */
    drvFieldActionPrioPktAndIntCancel = 8, /* Override another rule. */
    drvFieldActionPrioPktCopy = 9,      /* Pkt priority from inner tag. */
    drvFieldActionPrioPktNew = 10,      /* Pkt priority from arg; param0: New
                                           priority. */
    drvFieldActionPrioPktTos = 11,      /* Pkt priority from TOS field. */
    drvFieldActionPrioPktCancel = 12,   /* Override another rule. */
    drvFieldActionPrioIntCopy = 13,     /* Internal priority from inner tag. */
    drvFieldActionPrioIntNew = 14,      /* Internal priority from arg; param0:
                                           New priority. */
    drvFieldActionPrioIntTos = 15,      /* Internal priority from TOS field. */
    drvFieldActionPrioIntCancel = 16,   /* Override another rule. */
    drvFieldActionTosNew = 17,          /* Change TOS value in IP header;
                                           param0: New TOS value. */
    drvFieldActionTosCopy = 18,         /* Copy priority from outer tag to IP
                                           hdr. */
    drvFieldActionTosCancel = 19,       /* Override another rule. */
    drvFieldActionDscpNew = 20,         /* Change DSCP value; param0: New DSCP
                                           value. */
    drvFieldActionDscpCancel = 21,      /* Override another rule. */
    drvFieldActionEcnNew = 22,          /* Change ECN value in IP header TOS;
                                           param0: New ECN value. */
    drvFieldActionCopyToCpu = 23,       /* Copy to CPU. */
    drvFieldActionCopyToCpuCancel = 24, /* Override another rule. */
    drvFieldActionSwitchToCpuCancel = 25, /* Override switch logic copy-to-CPU. */
    drvFieldActionSwitchToCpuReinstate = 26, /* Reinstate copy-to-CPU switch logic. */
    drvFieldActionTimeStampToCpu = 27,  /* Send a copy to cpu with timestamp and
                                           drop the packet */
    drvFieldActionTimeStampToCpuCancel = 28, /* Override another action (don't
                                           copy,don't drop) */
    drvFieldActionRedirectPort = 29,    /* Redirect Packet to single port;
                                           param0: Destination modid; param1:
                                           Destination port. */
    drvFieldActionRedirect = drvFieldActionRedirectPort, /* Same as bcmFieldActionRedirectPort. */
    drvFieldActionRedirectTrunk = 30,   /* Redirect Packet to a trunk; param0:
                                           Destination trunk ID. */
    drvFieldActionRedirectCancel = 31,  /* Override another rule. */
    drvFieldActionRedirectPbmp = 32,    /* Replace port bitmap; param0:
                                           Destination port bitmap. */
    drvFieldActionRedirectIpmc = 33,    /* Replace L3 multicast L3 & L2 bitmap;
                                           param0: IP Multicast Index. */
    drvFieldActionRedirectMcast = 34,   /* Replace L2 multicast dest bitmap;
                                           param0: L2 Multicast Index. */
    drvFieldActionRedirectVlan = 35,    /* Redirect to VLAN port bitmap. */
    drvFieldActionRedirectBcastPbmp = 36, /* Replace L2 broadcast dest bitmap;
                                           param0: Destination port bitmap. */
    drvFieldActionEgressMask = 37,      /* Apply egress mask; param0:
                                           Destination port bitmap mask. */
    drvFieldActionEgressPortsAdd = 38,  /* Add additional egress ports; param0:
                                           Destination port bitmap. */
    drvFieldActionDrop = 39,            /* Drop. */
    drvFieldActionDropCancel = 40,      /* Override another rule. */
    drvFieldActionMirrorOverride = 41,  /* Override any mirroring for packet. */
    drvFieldActionMirrorIngress = 42,   /* Ingress mirror; param0: Dest modid;
                                           param1: Dest port/tgid. */
    drvFieldActionMirrorEgress = 43,    /* Egress mirror; param0: Dest modid;
                                           param1: Dest port/tgid. */
    drvFieldActionL3ChangeVlan = 44,    /* Change VLAN on L3-switched packets;
                                           param0: ECMP or next hop info. */
    drvFieldActionL3ChangeVlanCancel = 45, /* Override another rule. */
    drvFieldActionL3ChangeMacDa = 46,   /* Change MAC DA on L3-switched packets;
                                           param0: ECMP or next hop info. */
    drvFieldActionL3ChangeMacDaCancel = 47, /* Override another rule; param0: Next
                                           hop table index. */
    drvFieldActionL3Switch = 48,        /* L3-switch packet; param0: ECMP or
                                           next hop info. */
    drvFieldActionL3SwitchCancel = 49,  /* Override another rule. */
    drvFieldActionAddClassTag = 50,     /* Add Classification Tag. */
    drvFieldActionDropPrecedence = 51,  /* Set Drop Precedence; param0:
                                           BCM_FIELD_COLOR_xxx. */
    drvFieldActionRpDrop = 52,          /* Red Priority Drop. */
    drvFieldActionRpDropCancel = 53,    /* Override another rule. */
    drvFieldActionRpDropPrecedence = 54, /* Set Red Priority Drop Precedence;
                                           param0: BCM_FIELD_COLOR_xxx. */
    drvFieldActionRpCopyToCpu = 55,     /* Red Priority Copy to CPU. */
    drvFieldActionRpCopyToCpuCancel = 56, /* Override another rule. */
    drvFieldActionRpSwitchToCpuCancel = 57, /* Override switch logic copy-to-CPU. */
    drvFieldActionRpSwitchToCpuReinstate = 58, /* Reinstate copy-to-CPU switch logic. */
    drvFieldActionRpTimeStampToCpu = 59, /* Send a copy to cpu with timestamp and
                                           drop the packet */
    drvFieldActionRpTimeStampToCpuCancel = 60, /* Override another action (don't
                                           copy,don't drop) */
    drvFieldActionRpDscpNew = 61,       /* Red packet change DSCP value; param0:
                                           New DSCP value. */
    drvFieldActionRpDscpCancel = 62,    /* Override any changes to DSCP field. */
    drvFieldActionRpEcnNew = 63,        /* Red packet change ECN value; param0:
                                           New ECN value. */
    drvFieldActionRpOuterVlanPrioNew = 64, /* Red packet 802.1p priority from arg;
                                           param0: New priority. */
    drvFieldActionRpInnerVlanPrioNew = 65, /* Red packet 802.1p priority from arg;
                                           param0: New priority. */
    drvFieldActionRpOuterVlanCfiNew = 66, /* Red packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    drvFieldActionRpInnerVlanCfiNew = 67, /* Red packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    drvFieldActionRpPrioPktCopy = 68,   /* Red packet priority from inner tag. */
    drvFieldActionRpPrioPktNew = 69,    /* Red packet priority from argument0;
                                           param0: New priority. */
    drvFieldActionRpPrioPktTos = 70,    /* Red Packet priority from TOS field in
                                           IP header. */
    drvFieldActionRpPrioPktCancel = 71, /* Override another rule. */
    drvFieldActionRpCosQNew = 72,       /* Red packet change CoS Queue; param0:
                                           New CoS Queue. */
    drvFieldActionRpVlanCosQNew = 73,   /* Red packet change VLAN CoSQ; param0:
                                           New CoS Queue. */
    drvFieldActionRpUcastCosQNew = 74,  /* Red unicast packet change CoS Queue;
                                           param0: New CoS Queue. */
    drvFieldActionRpMcastCosQNew = 75,  /* Red multicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    drvFieldActionRpPrioPktAndIntCopy = 76, /* Red packet Packet & Internal priority
                                           from inner tag. */
    drvFieldActionRpPrioPktAndIntNew = 77, /* Red packet Packet & Internal priority
                                           from param0; param0: New priority. */
    drvFieldActionRpPrioPktAndIntTos = 78, /* Red packet Packet & Internal priority
                                           from TOS field. */
    drvFieldActionRpPrioPktAndIntCancel = 79, /* Override any internal priority
                                           changes. */
    drvFieldActionRpPrioIntCopy = 80,   /* Red packet internal priority from
                                           inner VLAN tag. */
    drvFieldActionRpPrioIntNew = 81,    /* Red packet internal priority from an
                                           argument; param0: New priority. */
    drvFieldActionRpPrioIntTos = 82,    /* Red packet internal priority from IP
                                           header  TOS field. */
    drvFieldActionRpPrioIntCancel = 83, /* Red packet override any internal
                                           priority changes. */
    drvFieldActionYpDrop = 84,          /* Yellow Priority Drop. */
    drvFieldActionYpDropCancel = 85,    /* Override another rule. */
    drvFieldActionYpDropPrecedence = 86, /* Set Yellow Priority Drop Precision;
                                           param0: BCM_FIELD_COLOR_xxx. */
    drvFieldActionYpCopyToCpu = 87,     /* Yellow Priority Copy to CPU. */
    drvFieldActionYpCopyToCpuCancel = 88, /* Override another rule. */
    drvFieldActionYpSwitchToCpuCancel = 89, /* Override switch logic copy-to-CPU. */
    drvFieldActionYpSwitchToCpuReinstate = 90, /* Reinstate copy-to-CPU switch logic. */
    drvFieldActionYpTimeStampToCpu = 91, /* Send a copy to cpu with timestamp and
                                           drop the packet */
    drvFieldActionYpTimeStampToCpuCancel = 92, /* Override another action (don't
                                           copy,don't drop) */
    drvFieldActionYpDscpNew = 93,       /* Yellow packet change DSCP value;
                                           param0: New DSCP value. */
    drvFieldActionYpDscpCancel = 94,    /* Override any changes to DSCP field. */
    drvFieldActionYpEcnNew = 95,        /* Yellow packet change ECN value;
                                           param0: New ECN value. */
    drvFieldActionYpOuterVlanPrioNew = 96, /* Yellow packet 802.1p priority from
                                           arg. */
    drvFieldActionYpInnerVlanPrioNew = 97, /* Yellow packet 802.1p priority from
                                           arg; param0: New priority. */
    drvFieldActionYpOuterVlanCfiNew = 98, /* Yellow packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    drvFieldActionYpInnerVlanCfiNew = 99, /* Yellow packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    drvFieldActionYpPrioPktCopy = 100,  /* Yellow packet priority from inner
                                           tag. */
    drvFieldActionYpPrioPktNew = 101,   /* Yellow packet priority from param0;
                                           param0: New priority. */
    drvFieldActionYpPrioPktTos = 102,   /* Yellow packet priority from TOS field
                                           in IP header. */
    drvFieldActionYpPrioPktCancel = 103, /* Override another rule. */
    drvFieldActionYpCosQNew = 104,      /* Yellow packet change CoS Queue;
                                           param0: New CoS Queue. */
    drvFieldActionYpVlanCosQNew = 105,  /* Yellow packet change VLAN CoSQ;
                                           param0: New CoS Queue. */
    drvFieldActionYpUcastCosQNew = 106, /* Yellow unicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    drvFieldActionYpMcastCosQNew = 107, /* Yellow multicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    drvFieldActionYpPrioPktAndIntCopy = 108, /* Yellow packet Packet & Internal
                                           priority from inner tag. */
    drvFieldActionYpPrioPktAndIntNew = 109, /* Yellow packet Packet & Internal
                                           priority from param0; param0: New
                                           priority. */
    drvFieldActionYpPrioPktAndIntTos = 110, /* Yellow packet Packet & Internal
                                           priority from TOS field. */
    drvFieldActionYpPrioPktAndIntCancel = 111, /* Override any int priority changes. */
    drvFieldActionYpPrioIntCopy = 112,  /* Yellow packet internal priority from
                                           inner VLAN tag. */
    drvFieldActionYpPrioIntNew = 113,   /* Yellow packet internal priority from
                                           an argument; param0: New priority. */
    drvFieldActionYpPrioIntTos = 114,   /* Yellow packet internal priority from
                                           IP header TOS field. */
    drvFieldActionYpPrioIntCancel = 115, /* Yellow packet override any internal
                                           priority changes. */
    drvFieldActionUpdateCounter = 116,  /* Update Counter; param0:
                                           BCM_FIELD_COUNTER_MODE_xxx. */
    drvFieldActionMeterConfig = 117,    /* Meter configuration; param0:
                                           BCM_FIELD_METER_MODE_xxx; param1: if
                                           param0 == BCM_FIELD_METER_MODE_FLOW,
                                           this denotes BCM_FIELD_METER_PEAK(1)
                                           or BCM_FIELD_METER_COMMITTED(2). */
    drvFieldActionColorIndependent = 118, /* Make L3SW_CHANGE_MACDA_OR_VLAN
                                           actions color independent. */
    drvFieldActionClassDestSet = 119,   /* Set destination address lookup class
                                           ID. */
    drvFieldActionClassSet = drvFieldActionClassDestSet, /* Same as bcmFieldActionClassDestSet. */
    drvFieldActionClassSourceSet = 120, /* Set source address lookup class ID. */
    drvFieldActionVrfSet = 121,         /* Set VRF ID. */
    drvFieldActionInnerVlanNew = 122,   /* Replace inner VLAN ID; param0: New
                                           inner VLAN ID. */
    drvFieldActionInnerVlanPrioNew = 123, /* Replace inner VLAN tag priority;
                                           param0: New inner VLAN tag priority. */
    drvFieldActionInnerVlanDelete = 124, /* Delete inner VLAN tag. */
    drvFieldActionOuterVlanDelete = 125, /* Delete outer VLAN tag. */
    drvFieldActionOuterVlanDeleteCancel = 126, /* Override previous outer VLAN tag
                                           delete. */
    drvFieldActionInnerVlanAdd = 127,   /* Add a new Inner VLAN tag. */
    drvFieldActionInnerVlanCfiNew = 128, /* Replace packet 802.1p CFI from arg. */
    drvFieldActionOuterVlanNew = 129,   /* Replace outer VLAN ID; param0: New
                                           outer VLAN ID. */
    drvFieldActionVlanNew = drvFieldActionOuterVlanNew, /* Same as bcmFieldActionOuterVlanNew. */
    drvFieldActionOuterVlanAdd = 130,   /* Add a new Outer VLAN tag. */
    drvFieldActionVlanAdd = drvFieldActionOuterVlanAdd, /* Same as bcmFieldActionOuterVlanAdd. */
    drvFieldActionOuterVlanAddCancel = 131, /* Override previous outer VLAN tag add. */
    drvFieldActionOuterVlanLookup = 132, /* Lookup outer VLAN tag. */
    drvFieldActionVlanLookup = drvFieldActionOuterVlanLookup, /* Same as
                                           bcmFieldActionOuterVlanLookup. */
    drvFieldActionOuterVlanPrioNew = 133, /* Replace outer VLAN tag priority;
                                           param0: New outer VLAN tag priority. */
    drvFieldActionOuterVlanCfiNew = 134, /* Replace packet 802.1p CFI from arg;
                                           param0: New CFI bit value; param0:
                                           New CFI bit value. */
    drvFieldActionOuterTpidNew = 135,   /* Replace TPID in outer VLAN tag;
                                           param0: New tpid. */
    drvFieldActionGpDrop = 136,         /* Green Priority Drop. */
    drvFieldActionGpDropCancel = 137,   /* Override another rule. */
    drvFieldActionGpDropPrecedence = 138, /* Set Green Priority Drop Precision;
                                           param0: BCM_FIELD_COLOR_xxx. */
    drvFieldActionGpCopyToCpu = 139,    /* Green Priority Copy to CPU. */
    drvFieldActionGpCopyToCpuCancel = 140, /* Override another rule. */
    drvFieldActionGpSwitchToCpuCancel = 141, /* Override switch logic copy-to-CPU. */
    drvFieldActionGpSwitchToCpuReinstate = 142, /* Reinstate copy-to-CPU switch logic. */
    drvFieldActionGpTimeStampToCpu = 143, /* Send a copy to cpu with timestamp and
                                           drop the packet */
    drvFieldActionGpTimeStampToCpuCancel = 144, /* Override another action (don't
                                           copy,don't drop) */
    drvFieldActionGpDscpNew = 145,      /* Green packet change DSCP value;
                                           param0: New DSCP value. */
    drvFieldActionGpDscpCancel = 146,   /* Override any changes to DSCP field. */
    drvFieldActionGpEcnNew = 147,       /* Green packet change ECN value;
                                           param0: New ECN value. */
    drvFieldActionGpTosPrecedenceNew = 148, /* Green packet change Tos byte
                                           precedence value; param0: New
                                           precedence value. */
    drvFieldActionGpTosPrecedenceCopy = 149, /* Green packet copy Tos byte precedence
                                           from 802.1p priority. */
    drvFieldActionGpOuterVlanPrioNew = 150, /* Green packet 802.1p priority from
                                           arg. */
    drvFieldActionGpInnerVlanPrioNew = 151, /* Green packet 802.1p priority from
                                           arg; param0: New priority. */
    drvFieldActionGpOuterVlanCfiNew = 152, /* Green packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    drvFieldActionGpInnerVlanCfiNew = 153, /* Green packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    drvFieldActionGpPrioPktCopy = 154,  /* Green packet priority from inner tag. */
    drvFieldActionGpPrioPktNew = 155,   /* Green packet priority from param0;
                                           param0: New priority. */
    drvFieldActionGpPrioPktTos = 156,   /* Green packet priority from TOS field
                                           in IP header. */
    drvFieldActionGpPrioPktCancel = 157, /* Override another rule. */
    drvFieldActionGpCosQNew = 158,      /* Green packet change CoS Queue;
                                           param0: New CoS Queue. */
    drvFieldActionGpVlanCosQNew = 159,  /* Green packet change VLAN CoSQ;
                                           param0: New CoS Queue. */
    drvFieldActionGpUcastCosQNew = 160, /* Green unicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    drvFieldActionGpMcastCosQNew = 161, /* Green multicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    drvFieldActionGpPrioPktAndIntCopy = 162, /* Green packet Packet & Internal
                                           priority from inner tag. */
    drvFieldActionGpPrioPktAndIntNew = 163, /* Green packet Packet & Internal
                                           priority from param0; param0: New
                                           priority. */
    drvFieldActionGpPrioPktAndIntTos = 164, /* Green packet Packet & Internal
                                           priority from TOS field. */
    drvFieldActionGpPrioPktAndIntCancel = 165, /* Override any int priority changes. */
    drvFieldActionGpPrioIntCopy = 166,  /* Green packet internal priority from
                                           inner VLAN tag. */
    drvFieldActionGpPrioIntNew = 167,   /* Green packet internal priority from
                                           an argument; param0: New priority. */
    drvFieldActionGpPrioIntTos = 168,   /* Green packet internal priority from
                                           IP header TOS field. */
    drvFieldActionGpPrioIntCancel = 169, /* Green packet override any internal
                                           priority changes. */
    drvFieldActionDoNotChangeTtl = 170, /* Do not decrement TTL. */
    drvFieldActionDoNotCheckUrpf = 171, /* Do not check reverse path for unicast
                                           traffic. */
    drvFieldActionDoNotCheckVlan = 172, /* Do not check VLAN membership and STG
                                           STP state. */
    drvFieldActionDoNotLearn = 173,     /* Disable L2 learning. */
    drvFieldActionIpFix = 174,          /* Record the packet regardless of port
                                           ipfix enable. */
    drvFieldActionIpFixCancel = 175,    /* Record the packet action override. */
    drvFieldActionIncomingMplsPortSet = 176, /* Assign incoming MPLS port. */
    drvFieldActionNewTc = 177,          /* Assign new traffic class. */
    drvFieldActionNewClassId = 178,     /* Assign new classification ID. */
    drvFieldActionLoopback = 179,       /* Forward the packet to the receiving
                                           port. */
    drvFieldActionNewReasonCode = 180,  /* Assign new reasons for packet
                                           forwarded to CPU. */
    drvFieldActionBypassStp = 181,      /* Bypass the STP port state filtering. */
    drvFieldActionBypassEap = 182,      /* Bypass the 802.1x EAP port state
                                           filtering. */
    drvFieldActionBypassVlan = 183,     /* Bypass VLAN checking. */
    drvFieldActionRpRedirectPort = 184, /* Redirect red packet to single port;
                                           param0: Destination modid; param1:
                                           Destination port. */
    drvFieldActionRpMirrorIngress = 185, /* Red packet ingress mirror; param0:
                                           Dest modid; param1: Dest port/tgid. */
    drvFieldActionMultipathHash = 186,  /* ECMP Hash selection for
                                           bcmFieldActionL3Switch action. */
    drvFieldActionIpfixRate = 187,      /* Set IPFIX flow rate meter; param0:
                                           rate id */
    drvFieldActionOffloadRedirect = 188, /* Redirect packet to offload engine. */
    drvFieldActionOffloadClassSet = 189, /* Set Class Id in offload engine
                                           redirected traffic. */
    drvFieldActionOffloadDropIndication = 190, /* Set drop indicator in offload engine
                                           redirected traffic. */
    drvFieldActionOamUpMep = 191,       /* Indicate UP MEP. */
    drvFieldActionOamTx = 192,          /* Indicate TX direction OAM PDU or data
                                           packet. Used as MSB of
                                           FieldActionOamLmBasePtr'. */
    drvFieldActionOamLmepMdl = 193,     /* MDL value for the LMEP. */
    drvFieldActionOamServicePriMappingPtr = 194, /* Concatenated with the internal
                                           priority as index to LM packet
                                           counter. */
    drvFieldActionOamLmBasePtr = 195,   /* Set base pointer to LM packet
                                           counter. */
    drvFieldActionOamDmEnable = 196,    /* Enable OAM Delay Measurement. */
    drvFieldActionOamLmEnable = 197,    /* Enable OAM Loss Measurement. */
    drvFieldActionOamLmepEnable = 198,  /* Enable OAM loss/delay measurement. */
    drvFieldActionOamPbbteLookupEnable = 199, /* Indicate SVP should be used as the
                                           key for LMEP lookup. */
    drvFieldActionSrcMacNew = 200,      /* Replace source mac of the packet. */
    drvFieldActionDstMacNew = 201,      /* Replace destination mac of the
                                           packet. */
    drvFieldActionVnTagNew = 202,       /* Replace NIV VN tag if present, add if
                                           not present; param0: VN tag. */
    drvFieldActionVnTagDelete = 203,    /* Delete NIV VN tag. */
    drvFieldActionGpRedirectPort = 204, /* Redirect green packet to single port;
                                           param0: Destination modid; param1:
                                           Destination port. */
    drvFieldActionGpMirrorIngress = 205, /* Green packet ingress mirror; param0:
                                           Dest modid; param1: Dest port/tgid. */
    drvFieldActionVportNew = 206,       /* Replace/assign virtual port id. */
    drvFieldActionVportSpcpNew = 207,   /* Replace/assign virtual port's spcp. */
    drvFieldActionVportCpcpNew = 208,   /* Replace/assign virtual port's cpcp. */
    drvFieldActionVportTcNew = 209,     /* Replace/assign virtual port's traffic
                                           class. */
    drvFieldActionVportDpNew = 210,     /* Replace/assign virtual port's drop
                                           precedence. */
    drvFieldActionRedirectVportPort = 211, /* Redirect Packet to single VportPort;
                                           param0: Destination vport; param1:
                                           Destination port. */
    drvFieldActionMacDaKnown = 212,     /* Packet is not treated as a DLF type */
    drvFieldActionFilters = 213,        /* Enable Filters to override the rule;
                                           param0: filter
                                           types(BCM_FIELD_FILTER_XXX) */
    drvFieldActionFabricQueue = 214,    /* Enable ext header on hg ports. */
    drvFieldActionCnmCancel = 215,      /* Do not generate QCN congestion
                                           notification message. */
    drvFieldActionQcnUndo = drvFieldActionCnmCancel, /* Do not perform a Congestion test on
                                           this packet (no QCN message can be
                                           generated) */
    drvFieldActionDynamicHgTrunkCancel = 216, /* Disable dynamic HiGig trunking. */
    drvFieldActionEgressMirrorDisable = 217, /* Disable Egress Mirror for matching
                                           packet. */
    drvFieldActionMultipathHashAdditionalInfo = 218, /* Add additional information to
                                           matching packet's LAG/ECMP
                                           load-balancing hash calculation */
    drvFieldActionDoNotModify = 219,    /* No modifications may be made to the
                                           packet. */
    drvFieldActionMirrorEgressDisable = 220, /* Disable egress mirror; param0 = TRUE
                                           to disable, FALSE otherwise */
    drvFieldActionOuterVlanCopyInner = 221, /* Copy the VLAN id from the inner tag
                                           to the outer. */
    drvFieldActionOuterVlanPrioCopyInner = 222, /* Copy the 802.1p priority from the
                                           inner tag to the outer. */
    drvFieldActionOuterVlanCfiCopyInner = 223, /* Copy the CFI bit from the inner tag
                                           to the outer. */
    drvFieldActionInnerVlanCopyOuter = 224, /* Copy the VLAN id from the outer tag
                                           to the inner. */
    drvFieldActionInnerVlanPrioCopyOuter = 225, /* Copy the 802.1p priority from the
                                           outer tag to the inner. */
    drvFieldActionInnerVlanCfiCopyOuter = 226, /* Copy the CFI bit from the outer tag
                                           to the inner. */
    drvFieldActionCompressSrcIp6 = 227, /* Map incoming IPv6 packet Source IP to
                                           ingress field processor IPv4 Source
                                           IP field. */
    drvFieldActionCompressDstIp6 = 228, /* Map incoming IPv6 packet Destination
                                           IP to ingress field processor IPv4
                                           Destination IP field. */
    drvFieldActionServicePoolIdNew = 229, /* Change Service Pool ID; param0: New
                                           Service Pool ID. */
    drvFieldActionUseGlobalMeterColor = 230, /* Use service meters output color
                                           instead of CNG based color as input
                                           packet color */
    drvFieldActionRedirectEgrNextHop = 231, /* Redirect packet to next hop; param0:
                                           ECMP or next hop info. */
    drvFieldActionTrunkLoadBalanceCancel = 232, /* Disable trunk load balancing */
    drvFieldActionEcmpLoadBalanceCancel = 233, /* Disable ECMP group load balancing */
    drvFieldActionDoNotOverride = 234,  /* Do not override actions */
    drvFieldActionEgressClassSelect = 235, /* Select class to pass to EFP */
    drvFieldActionHiGigClassSelect = 236, /* Select class for HiGig */
    drvFieldActionOamDmTimeFormat = 237, /* Select time format for OAM delay
                                           measurement */
    drvFieldActionOamLmDmSampleEnable = 238, /* Indicates if packet should be
                                           processed as an OAMPDU belonging to
                                           this MEP */
    drvFieldActionOamTagStatusCheck = 239, 
    drvFieldActionOamTunnelControl = 240, /* Select whether OAMPDU can either be
                                           in a tunnel that is terminated or not
                                           tunneled */
    drvFieldActionRegex = 241,          /* Perform DPI */
    drvFieldActionNoRegex = 242,        /* Do not perform DPI */
    drvFieldActionStat0 = 243,          /* Update statistics (statId in param0)
                                           on entry hit.  See
                                           bcm_field_entry_stat_attach and
                                           related APIs. */
    drvFieldActionStat = drvFieldActionStat0, /* Alias for bcmFieldActionStat0 */
    drvFieldActionPolicerLevel0 = 244,  /* Apply policer (policerId in param0)
                                           to traffic hitting this entry.  See
                                           bcm_field_entry_policer_attach and
                                           related APIs. */
    drvFieldActionPolicerLevel1 = 245,  /* Apply policer (policerId in param0)
                                           to traffic hitting this entry.  See
                                           bcm_field_entry_policer_attach and
                                           related APIs. */
    drvFieldActionPolicerGroup = 246,   /* Flag in ASETs to indicate group
                                           policer usage with the group */
    drvFieldActionStatGroup = 247,      /* Flag in ASETs to indicate stat group
                                           usage with the group */
    drvFieldActionVSQ = 248,            /* Assign matching packets to specified
                                           VSQ (param0). */
    drvFieldActionIntPriorityAndDropPrecedence = 249, /* Change internal priority and drop
                                           precedence.  param0 = new internal
                                           priority.  param1 = new drop
                                           precedence */
    drvFieldActionISQ = 250,            /* Assign matching packets to specified
                                           ISQ (param0). */
    drvFieldActionTrap = 251,           /* Trap matched packets (treat them
                                           according to the specified trap
                                           profile) */
    drvFieldActionUsePolicerResult = 252, /* Specify/override where policer result
                                           will be used for matched packets. 
                                           See BCM_FIELD_USE_POLICER_RESULT_*
                                           for flags that go in param0. */
    drvFieldActionStat1 = 253,          /* Secondary statistics update for
                                           matched packets (statId in param0) */
    drvFieldActionStatTag = 254,        /* Assign statistics tag (such as for
                                           external statistics engine) to
                                           matched packets */
    drvFieldActionSnoop = 255,          /* Snoop matched packets (treat them
                                           according to the specified snoop
                                           profile) */
    drvFieldActionTtlSet = 256,         /* New TTL */
    drvFieldActionIncomingIpIfSet = 257, /* Assign incoming IP interface */
    drvFieldActionOrientationSet = 258, /* Set the new Orientation */
    drvFieldActionTrunkHashKeySet = 259, /* Set the Trunk Hash Key */
    drvFieldActionDstRpfGportNew = 260, /* Set the RPF Destination */
    drvFieldActionDhcpPkt = 261,        /* Indicate whether the Packet is DHCP */
    drvFieldActionSrcGportNew = 262,    /* Set the Source-Port */
    drvFieldActionForwardingTypeNew = 263, /* Set the new Forwarding type */
    drvFieldActionStartPacketStrip = 264, /* Strip the start-of-packet */
    drvFieldActionSystemHeaderSet = 265, /* Modify a System Header */
    drvFieldActionVSwitchNew = 266,     /* Replace Virtual Switch */
    drvFieldActionLearnSrcMacNew = 267, /* Replace the learnt packet source MAC
                                           address */
    drvFieldActionLearnSrcPortNew = 268, /* Replace the learnt packet source Port */
    drvFieldActionLearnForwardingVlanIdNew = 269, /* Replace the learnt packet Forwarding
                                           Vlan ID */
    drvFieldActionQosMapIdNew = 270,    /* Set the QoS map Id */
    drvFieldActionVlanActionSetNew = 271, /* Modify the VLAN Action Set Id */
    drvFieldActionVlanTranslationValueSet = 272, /* Set VLAN Translation lookup result */
    drvFieldActionTunnelTerminatedValueSet = 273, /* Set Tunnel termination lookup result */
    drvFieldActionMplsTerminatedValueSet = 274, /* Set MPLS termination lookup result */
    drvFieldActionIpTunnelValueSet = 275, /* Set IP Tunnel termination lookup
                                           result */
    drvFieldActionL2SrcValueSet = 276,  /* Set L2 Source lookup result */
    drvFieldActionL2DestValueSet = 277, /* Set L2 Destination lookup result */
    drvFieldActionL3SrcRouteValueSet = 278, /* Set L3 Source lookup result */
    drvFieldActionL3DestRouteValueSet = 279, /* Set L3 Destination lookup result */
    drvFieldActionIpmcValueSet = 280,   /* Set IP Multicast lookup result */
    drvFieldActionCascadedKeyValueSet = 281, /* Set key value to cascade to later
                                           group for a packet */
    drvFieldActionIngressGportSet = 282, /* Set a new ingress Gport
                                           (MPLS/Mim/WLAN) value. */
    drvFieldActionExternalValue0Set = 283, /* Set External lookup 0 result */
    drvFieldActionExternalValue1Set = 284, /* Set External lookup 1 result */
    drvFieldActionExternalValue2Set = 285, /* Set External lookup 2 result */
    drvFieldActionExternalValue3Set = 286, /* Set External lookup 3 result */
    drvFieldActionNatCancel = 287,      /* Do Not perform NAT on this matching
                                           packet */
    drvFieldActionNat = 288,            /* Perform NAT operation on the matching
                                           packet */
    drvFieldActionNatEgressOverride = 289, /* Override NAT Egress information with
                                           the given Egress information for
                                           Translation */
    drvFieldActionRegexActionCancel = 290, /* Suppress action taken by the Regex
                                           module for matching pkt. */
    drvFieldActionPortPrioIntCosQNew = 291, /* Change CoS Queue; param0: Classifier
                                           ID param1: Queue offset or l2 UC
                                           Gport. */
    drvFieldActionRpPortPrioIntCosQNew = 292, /* Red packet change CoS Queue; param0:
                                           Classifier ID param1: Queue offset or
                                           l2 UC Gport. */
    drvFieldActionYpPortPrioIntCosQNew = 293, /*  Yellow packet change CoS Queue;
                                           param0: Classifier ID param1: Queue
                                           offset or l2 UC Gport. */
    drvFieldActionGpPortPrioIntCosQNew = 294, /* Green packet change CoS Queue;
                                           param0: Classifier ID param1: Queue
                                           offset or l2 UC Gport. */
    drvFieldActionYpMirrorIngress = 295, /* Yellow packet ingress mirror; param0:
                                           Dest modid; param1: Dest port/tgid. */
    drvFieldActionYpRedirectPort = 296, /* Redirect yellow packet to single
                                           port; param0: Destination modid;
                                           param1: Destination port. */
    drvFieldActionL2LearnLimitDropCancel = 297, /* Do not perform L2 over-limit-drop
                                           action */
    drvFieldActionFibreChanSrcBindEnable = 298, /* Enable or Disable Source Bind Check
                                           for Fibre Chan packets */
    drvFieldActionFibreChanFpmaPrefixCheckEnable = 299, /* Enable or Disable FPMA prefix check
                                           for Fibre Chan packets */
    drvFieldActionFibreChanZoneCheckEnable = 300, /* Enable or Disable Zone Check for
                                           Fibre Chan packets */
    drvFieldActionFibreChanVsanId = 301, /* VSAN Id generated via VFP. */
    drvFieldActionFibreChanZoneCheckActionCancel = 302, /* To Accept or Ignore previously made
                                           Zone check result */
    drvFieldActionFibreChanIntVsanPri = 303, /* New VSAN Priority. */
    drvFieldActionLearnInVPortNew = 304, /* Replace the learnt packet InVPort. */
    drvFieldActionOamDomain = 305,      /* Set the OAM domains on which the MEP
                                           lookups are done. param0 can be used
                                           to set first domain and param1 for
                                           second domain. */
    drvFieldActionOamOlpHeaderAdd = 306, /* Add OLP  header for this packet -
                                           param0 to be used for passing the
                                           header type. */
    drvFieldActionOamSessionId = 307,   /* OAM session Id to be used in OLP Rx
                                           header - param0 to be used for
                                           passing the session id. */
    drvFieldActionOuterVlanCfiCancel = 308, /* Disable the CFI remarking of the
                                           outer vlan tag CFI bit. */
    drvFieldActionInnerVlanPriCancel = 309, /* Disable the PCP remarking of the
                                           inner vlan tag priority bits. */
    drvFieldActionPrioIntRemark = 310,  /* Assign a new packet internal priority
                                           for PCP or CFI remarking. */
    drvFieldActionUseDefaultWred = 311, /* Use the discard settings from default
                                           WRED configuration */
    drvFieldActionHashValueSet = 312,   /* Set Hash result */
    drvFieldActionL3IngressSet = 313,   /* Assign L3 Ingress Interface value to
                                           packet. */
    drvFieldActionInterfaceClassVPort = 314, /* Set the Virtual Port Interface Class
                                           ID . */
    drvFieldActionIngSampleEnable = 315, /* Set the SFLOW Ingress Sampling. */
    drvFieldActionEgrSampleEnable = 316, /* Set the SFLOW Egress Sampling. */
    drvFieldActionHashSelect0 = 317,    /* Set the hash buckets bitmap for Hash
                                           key A. */
    drvFieldActionHashSelect1 = 318,    /* Set the hash buckets bitmap for Hash
                                           key B. */
    drvFieldActionTrunkResilientHashCancel = 319, /* Cancels the resilient hash on Trunk. */
    drvFieldActionHgTrunkResilientHashCancel = 320, /* Cancels the resilient hash on HiGiG
                                           Trunk. */
    drvFieldActionEcmpResilientHashCancel = 321, /* Cancels the resilient hash on ECMP. */
    drvFieldActionUnmodifiedPacketRedirectPort = 322, /* Redirect Unmodified Packet to single
                                           port; param0: Destination Gport. */
    drvFieldActionEtagNew = 323,        /* Replace Port Extender ETAG if
                                           present, add if not present; param0:
                                           ETAG. */
    drvFieldActionEtagDelete = 324,     /* Delete Port Extender ETAG. */
    drvFieldActionPfcClassNew = 325,    /* Change the PFC class of the packet;
                                           param0 : new PFC class value. */
    drvFieldActionRpIntCongestionNotificationNew = 326, /* Replace the internal congestion
                                           notification value of red packet;
                                           param0: Internal congestion
                                           notification value. */
    drvFieldActionYpIntCongestionNotificationNew = 327, /* Replace the internal congestion
                                           notification value of yellow packet;
                                           param0: Internal congestion
                                           notification value. */
    drvFieldActionGpIntCongestionNotificationNew = 328, /* Replace the internal congestion
                                           notification value of green packet;
                                           param0: Internal congestion
                                           notification value. */
    drvFieldActionRpHGCongestionClassNew = 329, /* Replace the value of CongestionClass
                                           field in Higig header for red packet;
                                           param0: CongestionClass value. */
    drvFieldActionYpHGCongestionClassNew = 330, /* Replace the value of CongestionClass
                                           field in Higig header for yellow
                                           packet; param0: CongestionClass
                                           value. */
    drvFieldActionGpHGCongestionClassNew = 331, /* Replace the value of CongestionClass
                                           field in Higig header for green
                                           packet; param0: CongestionClass
                                           value. */
    drvFieldActionRedirDropPrecedence = 332, /* Set the redirect drop precedence of
                                           packets. param0:BCM_FIELD_COLOR_xxx
                                           param1:n/a. */
    drvFieldActionRpRedirDropPrecedence = 333, /* Set the redirect drop precedence of
                                           Red packets.
                                           param0:BCM_FIELD_COLOR_xxx
                                           param1:n/a. */
    drvFieldActionYpRedirDropPrecedence = 334, /* Set the redirect drop precedence of
                                           Yellow packets.
                                           param0:BCM_FIELD_COLOR_xxx
                                           param1:n/a. */
    drvFieldActionGpRedirDropPrecedence = 335, /* Set the redirect drop precedence of
                                           Green packets.
                                           param0:BCM_FIELD_COLOR_xxx
                                           param1:n/a. */
    drvFieldActionHiGigDstModuleGportNew = 336, /* Replace the value of DST_MODID field
                                           in Higig header ; param0: New
                                           Destination Module Id. */
    drvFieldActionHiGigDstPortGportNew = 337, /* Replace the value of DST_PORT field
                                           in Higig header ; param0: New
                                           Destination Port Id. */
    drvFieldActionHiGigDstGportNew = 338, /* Replace the value of DST_MODID and
                                           DST_PORT fields in Higig header ;
                                           param0: New Destination Gport. */
    drvFieldActionGpHiGigDropPrecedenceNew = 339, /* Replace the value of Drop Precedence
                                           field in Higig header for Green
                                           Packets; param0: BCM_FIELD_COLOR_xxx. */
    drvFieldActionYpHiGigDropPrecedenceNew = 340, /* Replace the value of Drop Precedence
                                           field in Higig header for Yellow
                                           packets; param0: BCM_FIELD_COLOR_xxx. */
    drvFieldActionRpHiGigDropPrecedenceNew = 341, /* Replace the value of Drop Precedence
                                           field in Higig header for Red
                                           packets; param0: BCM_FIELD_COLOR_xxx. */
    drvFieldActionHiGigDropPrecedenceNew = 342, /* Replace the value of Drop Precedence
                                           field in Higig header for
                                           any(Green/Yellow/Red) packets;
                                           param0: BCM_FIELD_COLOR_xxx. */
    drvFieldActionGpHiGigIntPriNew = 343, /* Replace the value of Traffic Class
                                           field in Higig header for Green
                                           packets; param0: New Internal
                                           Priority. */
    drvFieldActionYpHiGigIntPriNew = 344, /* Replace the value of Traffic Class
                                           field in Higig header for Yellow
                                           packets; param0: New Internal
                                           Priority. */
    drvFieldActionRpHiGigIntPriNew = 345, /* Replace the value of Traffic Class
                                           field in Higig header for Red
                                           packets; param0: New Internal
                                           Priority. */
    drvFieldActionHiGigIntPriNew = 346, /* Replace the value of Traffic Class
                                           field in Higig header for
                                           any(green/Yellow/Red) packet; param0:
                                           New Internal Priority. */
    drvFieldActionLoopbackSrcModuleGportNew = 347, /* Replace the value of Source ModId
                                           field in Loopback header ; param0:
                                           New Source Module Id. */
    drvFieldActionLoopbackSrcPortGportNew = 348, /* Replace the value of Source PortId
                                           field in Loopback header ; param0:
                                           New Source Port Id. */
    drvFieldActionLoopbackSrcGportNew = 349, /* Replace the value of Source ModId and
                                           Source PortId fields in Loopback
                                           header ; param0: New Source Gport. */
    drvFieldActionLoopbackCpuMasqueradePktProfileNew = 350, /* Replace the value of Packet Profile
                                           field in Loopback header ; param0:
                                           New Packet Profile. */
    drvFieldActionLoopbackPacketProcessingPortNew = 351, /* Replace the value of Packet
                                           Processing port field in Loopback
                                           header ; param0: New Packet
                                           Processing Port. */
    drvFieldActionLoopBackTypeNew = 352, /* Replace the value of Loopback Type
                                           field in Loopback header ; param0:
                                           Loopback Type
                                           (bcmFieldLoopbackTypeXXX). */
    drvFieldActionRecoverableDropCancel = 353, /* Override drop decision taken by
                                           Protection switching logic */
    drvFieldActionStackingRouteNew = 354, /* Replace the value of the stacking
                                           route */
    drvFieldActionPphPresentSet = 355,  /* If set, a Packet Processing header is
                                           present. */
    drvFieldActionVxlanHeaderBits8_31_Set = 356, /* Set Vxlan Header Reserved_1 Field */
    drvFieldActionVxlanHeaderBits56_63_Set = 357, /* Set Vxlan Header Reserved_2 Field */
    drvFieldActionFabricHeaderSet = 358, /* If set, a Packet Processing header is
                                           present. */
    drvFieldActionOam = 359,            /* It comprises several fields that are
                                           changed at the same time: OAM-Up-Mep,
                                           OAM-Sub-Type, OAM-offset,
                                           OAM-Stamp-Offset */
    drvFieldActionVpnSet = 360,         /* Set a new VPN value; param0: VPN Id. */
    drvFieldActionL3DestRoutePublicValueSet = 361, /* Set L3 Destination public lookup
                                           result. */
    drvFieldActionL3SrcRoutePublicValueSet = 362, /* Set L3 Source public lookup result. */
    drvFieldActionClassZero = 363,      /* Class Action Zero. */
    drvFieldActionClassOne = 364,       /* Class Action One. */
    drvFieldActionTrapReduced = 365,    /* Trap action without qualifier. */
    drvFieldActionGroupClassSet = 366,  /* Assign Class Id value to a Ingress
                                           Field Group. */
    drvFieldActionEgressPbmpNullCopyToCpu = 367, /* Dropped Packets Copy to Cpu */
    drvFieldActionPimBidirFwd = 368,    /* If set, enable PIM-BIDIR forwarding
                                           of IP Multicast packets. */
    drvFieldActionDscpMapNew = 369,     /* Qos Mapping for Incoming packet DSCP */
    drvFieldActionReserved370 = 370,    /* Reserved action. */
    drvFieldActionReserved371 = 371,    /* Reserved action. */
    drvFieldActionReserved372 = 372,    /* Reserved action. */
    drvFieldActionReserved373 = 373,    /* Reserved action. */
    drvFieldActionFabricEHAddOrUpdate = 374, /* To add or update the Higig extended
                                           header(4 bytes) to Higig Packets. */
    drvFieldActionDot1pPreserve = 375,  /* To prohibit changing/rewriting of
                                           packets 802.1p priority. */
    drvFieldActionGpDot1pPreserve = 376, /* To prohibit changing/rewriting of
                                           Green packets 802.1p priority. */
    drvFieldActionYpDot1pPreserve = 377, /* To prohibit changing/rewriting of
                                           yellow packets 802.1p priority. */
    drvFieldActionRpDot1pPreserve = 378, /* To prohibit changing/rewriting of red
                                           packets 802.1p priority. */
    drvFieldActionDscpPreserve = 379,   /* To prohibit changing/rewriting of
                                           packets DSCP. */
    drvFieldActionGpDscpPreserve = 380, /* To prohibit changing/rewriting of
                                           green packets DSCP. */
    drvFieldActionYpDscpPreserve = 381, /* To prohibit changing/rewriting of
                                           yellow packets DSCP. */
    drvFieldActionRpDscpPreserve = 382, /* To prohibit changing/rewriting of red
                                           packets DSCP. */
    drvFieldActionChangeL2FieldsCancel = 383, /* Cancel Changing OuterVlan, SrcMac,
                                           DstMac, VnTag, Etag from lower
                                           priority groups. */
    drvFieldActionBFDSessionIdNew = 384, /* Assign new Session Id to BFD
                                           EndPoint. */
    drvFieldActionCosMapNew = 385,      /* Override the default internal
                                           priority to cosq mapping derived in
                                           ingress pipeline using new IFP Cos
                                           Map. */
    drvFieldActionGpCosMapNew = 386,    /* Override the default internal
                                           priority to cosq mapping derived in
                                           ingress pipeline using new IFP Cos
                                           Map for Green Packets only. */
    drvFieldActionYpCosMapNew = 387,    /* Override the default internal
                                           priority to cosq mapping derived in
                                           ingress pipeline using new IFP Cos
                                           Map for Yellow Packets only. */
    drvFieldActionRpCosMapNew = 388,    /* Override the default internal
                                           priority to cosq mapping derived in
                                           ingress pipeline using new IFP Cos
                                           Map for Red Packets only. */
    drvFieldActionVxlanHeaderFlags = 389, /* Set Vxlan Header Flags Field. */
    drvFieldActionChangeL2Fields = 390, /* Modify L2 fields for the given L3
                                           egress object. */
    drvFieldActionExactMatchClassId = 391, /* Exact Match Action Class Id. */
    drvFieldActionPfcTx = 392,          /* Send out a PFC frame. parma0: local
                                           port number. param1: the enable
                                           vector of the PFC frame */
    drvFieldActionSwitchEncap = 393,    /* To encapsulate MiML or Custom Header
                                           in the customer ethernet packet for
                                           selected packets */
    drvFieldActionStatVportNew = 394,   /* Replace/assign virtual port id
                                           attached to specific statistic */
    drvFieldActionUcastQueueNew = 395,  /* Assign new Unicast Queue Number
                                           param0: l2 UC queue gport. */
    drvFieldActionRpUcastQueueNew = 396, /* Red packet Assign new Unicast Queue
                                           Number param0: l2 UC queue gport. */
    drvFieldActionYpUcastQueueNew = 397, /* Yellow Packet Assign new Unicast
                                           Queue Number param0: l2 UC queue
                                           gport. */
    drvFieldActionGpUcastQueueNew = 398, /* Green Packet Assign new Unicast Queue
                                           Number param0: l2 UC queue gport. */
    drvFieldActionIntCosUcastQueueNew = 399, /* Assign new Unicast Queue Number
                                           param0: l2 UC queue gport. param1:
                                           classifier id */
    drvFieldActionRpIntCosUcastQueueNew = 400, /* Red Packet Assign new Unicast Queue
                                           Number param0: l2 UC queue gport.
                                           param1: classifier id */
    drvFieldActionYpIntCosUcastQueueNew = 401, /* Yellow Packet Assign new Unicast
                                           Queue Number param0: l2 UC queue
                                           gport. param1: classifier id */
    drvFieldActionGpIntCosUcastQueueNew = 402, /* Green Packet Assign new Unicast Queue
                                           Number param0: l2 UC queue gport.
                                           param1: classifier id */
    drvFieldActionHgTrunkRandomRoundRobinHashCancel = 403, /* Cancel Random or Roundrobin hash
                                           configured for Higig Trunks */
    drvFieldActionTrunkRandomRoundRobinHashCancel = 404, /* Cancel Random or Roundrobin hash
                                           configured for Trunks */
    drvFieldActionEcmpRandomRoundRobinHashCancel = 405, /* Cancel Random or Roundrobin hash
                                           configured for Ecmp */
    drvFieldActionPacketTraceEnable = 406, /* trigger storing all instrumentation
                                           triggers for this packet to a buffer.
                                           Other than IFP, same can be done
                                           using packet visibility API */
    drvFieldActionStrength = 407,       /* Strength for CopyToCpu or Redirection
                                           packets */
    drvFieldActionRedirectBufferPriority = 408, /* Buffer priority for CopyToCpu or
                                           Redirection packets */
    drvFieldActionRedirectPrioIntNew = 409, /* Internal priority for Redirected
                                           packets */
    drvFieldActionRpRedirectPrioIntNew = 410, /* Internal priority for Redirected Red
                                           packets */
    drvFieldActionYpRedirectPrioIntNew = 411, /* Internal priority for Redirected
                                           Yellow packets */
    drvFieldActionGpRedirectPrioIntNew = 412, /* Internal priority for Redirected
                                           Green packets */
    drvFieldActionUntaggedPacketPriorityNew = 413, /* set input priority for untagged
                                           packets. (not internal priority,
                                           refer doc) */
    drvFieldActionDoNotCutThrough = 414, /* On configuring this action, the
                                           packet is not eligible for
                                           cut-through mode in MMU. It will take
                                           the default store and forward method. */
    drvFieldActionLoopbackOamResponse = 415, /* Generate OAM Loopback response. */
    drvFieldActionLoopbackSatResponse = 416, /* Generate SAT latching Loopback
                                           response. */
    drvFieldActionOamStatObjectSessionId = 417, /* Adds LM counter index to OLP header
                                           to uniquely identify OAM session. */
    drvFieldActionServicePrioIntCosQNew = 418, /* Change CoS Queue; param0: Classifier
                                           ID param1: Queue offset. */
    drvFieldActionRpServicePrioIntCosQNew = 419, /* Red packet change CoS Queue; param0:
                                           Classifier ID param1: Queue offset. */
    drvFieldActionYpServicePrioIntCosQNew = 420, /*  Yellow packet change CoS Queue;
                                           param0: Classifier ID param1: Queue
                                           offset. */
    drvFieldActionGpServicePrioIntCosQNew = 421, /* Green packet change CoS Queue;
                                           param0: Classifier ID param1: Queue
                                           offset. */
    drvFieldActionProtectionSwitchingDrop = 422, /* Drop the data packets on working or
                                           protected path of PBB in VFP. */
    drvFieldActionServicePoolIdPrecedenceNew = 423, /* Change SPID and SPAP; param0: New
                                           Service Pool ID param1: Service Pool
                                           Precedence (color) */
    drvFieldActionSwapMacDaSa = 424,    /* Swap Destination and Source Mac
                                           addresses */
    drvFieldActionSwapSourceIPDestIP = 425, /* Swap Destination and Source IP
                                           addresses */
    drvFieldActionReplaceTtl = 426,     /* TTL is replaced with the value
                                           programmed by
                                           bcmFieldControlReplacementTtl instead
                                           of decrementing */
    drvFieldActionPacketIsL3SAT = 427,  /* Indicates matched packet is L3SAT
                                           packet and calculates offset to the
                                           start of the L3SAT PDU */
    drvFieldActionReplaceSrcMac = 428,  /* Replace Source Mac */
    drvFieldActionReplaceDstMac = 429,  /* Replace Destination Mac */
    drvFieldActionReplaceInnerVlan = 430, /* Replace Inner Vlan */
    drvFieldActionReplaceOuterVlan = 431, /* Replace Outer Vlan */
    drvFieldActionReplaceInnerVlanPriority = 432, /* Replace Inner Vlan Priority */
    drvFieldActionReplaceOuterVlanPriority = 433, /* ReplaceOuter Vlan Priority */
    drvFieldActionStatAndPolicer = 434, /* Stat and Policer Action */
    drvFieldActionSnoopAndTrap = 435,   /* Snoop and Trap Action */
    drvFieldActionIEEE1588 = 436,       /* Setting varoius parameters for 1588
                                           frames */
    drvFieldActionExternalValue4Set = 437, /* Set External lookup 4 result */
    drvFieldActionExternalValue5Set = 438, /* Set External lookup 5 result */
    drvFieldActionForward = 439,        /* Set Forwarding destination raw value */
    drvFieldActionTrapCodeQualifier = 440, /* Set Trap destination value (trap code
                                           + forward strength+ snoop strength )
                                           in addition to configurable value
                                           that further resolves the cause of
                                           the trap in the context of the
                                           CPU-Trap-Code */
    drvFieldActionPphSnoopCode = 441,   /* Set the PPH Snoop code value */
    drvFieldActionEgressTimeStampInsert = 442, /* Insert EPIPE timestamp. */
    drvFieldActionIngressTimeStampInsert = 443, /* Insert IPIPE timestamp. */
    drvFieldActionIngressTimeStampInsertCancel = 444, /* Do not insert ingress timestamp.
                                           Overrules port config. */
    drvFieldActionEgressTimeStampInsertCancel = 445, /* Do not insert egress timestamp.
                                           Overrules port config. */
    drvFieldActionMplsLabel1ExpNew = 446, /* Change the EXP field in forwarding
                                           label of MPLS packets. */
    drvFieldActionDynamicEcmpEnable = 447, /* Force packets to use DLB when matched
                                           by IFP rules, even though the Group
                                           Table indicates hash-based load
                                           balancing is to be used. */
    drvFieldActionDynamicTrunkEnable = 448, /* Force packets to use DLB when matched
                                           by IFP rules, even though the Group
                                           Table indicates hash-based load
                                           balancing is to be used. */
    drvFieldActionDynamicEcmpCancel = drvFieldActionEcmpLoadBalanceCancel, /* Same as
                                           bcmFieldActionEcmpLoadBalanceCancel. */
    drvFieldActionDynamicTrunkCancel = 449, /* Force packets to use hash-based load
                                           balancing, even though the group is
                                           configured to support DLB. */
    drvFieldActionDgm = 450,            /* Indicate IFP action is valid. It is
                                           mandatory to add this action to for
                                           the following three actions to get
                                           applied. */
    drvFieldActionDgmThreshold = 451,   /* Indicates the IFP action is only
                                           valid when the primary optimal band
                                           is equal to or below this threshold.
                                           If threshold is set to 7, this action
                                           will always be valid. */
    drvFieldActionDgmBias = 452,        /* Indicates the bias in favor of the
                                           alternate path in DGM. */
    drvFieldActionDgmCost = 453,        /* Indicates the cost of switching over
                                           to the alternate path in DGM. */
    drvFieldActionStaggeredValue0Set = 454, /* Value taken from action result 0 in
                                           staggered mode. */
    drvFieldActionStaggeredValue1Set = 455, /* Value taken from action result 1 in
                                           staggered mode. */
    drvFieldActionStaggeredValue2Set = 456, /* Value taken from action result 2 in
                                           staggered mode. */
    drvFieldActionStaggeredValue3Set = 457, /* Value taken from action result 3 in
                                           staggered mode. */
    drvFieldActionStaggeredDirectValueSet = 458, /* Value taken from KAPS payload in
                                           staggered mode. */
    drvFieldActionStaggeredPreselProfile0Set = 459, /* Program selection profile value taken
                                           from action result 0 in staggered
                                           mode. */
    drvFieldActionStaggeredPreselProfile1Set = 460, /* Program selection profile value taken
                                           from action result 1 in staggered
                                           mode. */
    drvFieldActionStaggeredPreselProfile2Set = 461, /* Program selection profile value taken
                                           from action result 2 in staggered
                                           mode. */
    drvFieldActionStaggeredPreselProfile3Set = 462, /* Program selection profile value taken
                                           from action result 3 in staggered
                                           mode. */
    drvFieldActionStaggeredPreselProfileDirectSet = 463, /* Program selection profile value taken
                                           from KAPS payload 0 in staggered
                                           mode. */
    drvFieldActionEnableVlanCheck = 464, /* Check VLAN membership and STG STP
                                           state */
    drvFieldActionAdmitProfile = 465,   /* Return admit profile by
                                           bcmFieldAdmitProfile_t */
    drvFieldActionDynamicHgTrunkEnable = 466, /* Force packets to use DLB when matched
                                           by IFP rules, even though the Group
                                           Table indicates hash-based load
                                           balancing is to be used. */
    drvFieldActionVxlanTerminate = 467, /* De-capsulate VXLAN tunnel header */
    drvFieldActionUseTunnelPayload = 468, /* To use Tunnel payload header fields
                                           for hashing */
    drvFieldActionSRDuplicateDrop = 469, /* SR (Seamless Redundancy): drop the
                                           packet if it's an SR duplicate */
    drvFieldActionSRDuplicateDropCancel = 470, /* SR (Seamless Redundancy): Do not drop
                                           the duplicate packet (override
                                           another rule) */
    drvFieldActionSRNetIdFilter = 471,  /* SR (Seamless Redundancy): NET ID
                                           filtering drop the packet if its NET
                                           ID is the same as destination ports */
    drvFieldActionSRNetIdSource = 472,  /* SR: Indicates the source which NET ID
                                           comes from; param0:
                                           BCM_FIELD_SR_NET_ID_SOURCE_xxx */
    drvFieldActionFilterSrcMacPorts = 473, /* SR: Apply source port filtering based
                                           on source address */
    drvFieldActionSRCopyToCpu = 474,    /* SR: Copy all packets or only
                                           non-duplicate packets to CPU with
                                           specified custom reason code; param0:
                                           BCM_FIELD_SR_COPYTOCPU_xxx; param1:
                                           custom CPU RX reason code (1~63) */
    drvFieldActionSRTagAdd = 475,       /* Insert SR (Seamless Redundancy) tag
                                           in the packet; param0: SR packet type
                                           (BCM_FIELD_SR_TAG_TYPE_xxx) */
    drvFieldActionSRTagDelete = 476,    /* Delete SR (Seamless Redundancy) tag
                                           (if present) in the packet; param0:
                                           SR packet type
                                           (BCM_FIELD_SR_TAG_TYPE_xxx) */
    drvFieldActionSRLanIdNew = 477,     /* Specify SR(Seamless Redundancy) LAN
                                           ID; param0: 0 for LAN A, 1 for LAN B */
    drvFieldActionSRNetIdNew = 478,     /* Specify SR(Seamless Redundancy) NET
                                           ID; param0: NET ID 0~7 */
    drvFieldActionSRFlowIdNew = 479,    /* Specify SR(Seamless Redundancy) flow
                                           ID; param0: SR flow ID */
    drvFieldActionSRFlowPriMapIdNew = 480, /* Specify TSN priority map for
                                           SR(Seamless Redundancy) flow; param0:
                                           TSN priority map ID */
    drvFieldActionMtuSize = 481,        /* Specify MTU size that the packet
                                           should be checked against. It
                                           overrides the MTU size specified from
                                           MTU profile. */
    drvFieldActionStuSize = 482,        /* Specify STU (Shortest Transmission
                                           Unit) size that the packet should be
                                           checked against. It overrides the STU
                                           size specified from MTU profile. */
    drvFieldActionTsnFlowIdNew = 483,   /* Specify TSN (Time-Sensitive
                                           Networking) flow ID; param0: TSN flow
                                           ID. */
    drvFieldActionTsnFlowPriMapIdNew = 484, /* Specify TSN priority map for TSN
                                           flow; param0: TSN priority map ID */
    drvFieldActionMtuProfileIdNew = 485, /* Specify the TSN MTU profile ID;
                                           param0: new MTU profile ID */
    drvFieldActionStuProfileIdNew = 486, /* Specify the TSN STU (Shortest
                                           Transmission Unit) profile ID;
                                           param0: new STU profile ID */
    drvFieldActionExternalValue6Set = 487, /* Set External lookup 6 result */
    drvFieldActionExternalValue7Set = 488, /* Set External lookup 7 result */
    drvFieldActionEsmSearchKeySrcMac = 489, /* This action sets ESM search key to
                                           perform only L2 Source Mac Address
                                           Lookup */
    drvFieldActionCount = 490           /* Always Last. Not a usable value. */
} drv_field_action_t;

/* Policer Modes. */
typedef enum drv_policer_mode_e {
    drvPolicerModeSrTcm = 0,            /* RFC 2697 */
    drvPolicerModeCommitted = 1, 
    drvPolicerModePeak = 2, 
    drvPolicerModeTrTcm = 3,            /* RFC 2698 */
    drvPolicerModeTrTcmDs = 4,          /* RFC 4115, TrTcmModified */
    drvPolicerModeGreen = 5, 
    drvPolicerModePassThrough = 6, 
    drvPolicerModeSrTcmModified = 7, 
    drvPolicerModeCoupledTrTcmDs = 8, 
    drvPolicerModeCascade = 9, 
    drvPolicerModeCoupledCascade = 10, 
    drvPolicerModeSrTcmTsn = 11,        /* IEEE 802.1Qci TSN Modified srTCM */
    drvPolicerModeCount = 12 
} drv_policer_mode_t;

#define DRV_POLICER_WITH_ID                 0x00000001 
#define DRV_POLICER_REPLACE                 0x00000002 
#define DRV_POLICER_COLOR_BLIND             0x00000004 
#define DRV_POLICER_DROP_RED                0x00000008 
#define DRV_POLICER_COLOR_MERGE_MASK        0x00000030 
#define DRV_POLICER_COLOR_MERGE_AND         0x00000000 
#define DRV_POLICER_COLOR_MERGE_OR          0x00000010 
#define DRV_POLICER_COLOR_MERGE_DUAL        0x00000020 
#define DRV_POLICER_MODE_BYTES              0x00000040 
#define DRV_POLICER_MODE_PACKETS            0x00000080 
#define DRV_POLICER_MAX_CKBITS_SEC_VALID    0x00000100 
#define DRV_POLICER_MAX_PKBITS_SEC_VALID    0x00000200 
#define DRV_POLICER_MACRO                   0x00000400 
#define DRV_POLICER_EGRESS                  0x00000800 /* Allocate policer for
                                                          egress usage */
#define DRV_POLICER_REGEX                   0x00001000 /* Allocate policer for
                                                          regex usage */
#define DRV_POLICER_REPLACE_SHARED          0x00002000 /* Replace the profile
                                                          rather than the
                                                          configuration */
#define DRV_POLICER_MIXED_MICRO_MACRO       0x00004000 /* Micro policer not
                                                          under the macro
                                                          envelope */
#define DRV_POLICER_BW_SHARING_GROUP_START  0x00008000 /* Indicates that this
                                                          policer corresponds to
                                                          the start of the
                                                          bandwidth sharing
                                                          group(cascade chain) */
#define DRV_POLICER_BW_SHARING_GROUP_END    0x00010000 /* Indicates that this
                                                          policer corresponds to
                                                          the end of the
                                                          bandwidth sharing
                                                          group(cascade chain) */
#define DRV_POLICER_WITH_POOL_ID            0x00020000 /* Indicates that this
                                                          Policer needs to be
                                                          created with the given
                                                          meter pool id */
#define DRV_POLICER_AS_PACKET_COUNTER       0x00040000 /* Indicates that this
                                                          Policer needs to be
                                                          created as packet
                                                          counter */
#define DRV_POLICER_PKT_ADJ_HEADER_TRUNCATE 0x00080000 /*  Indicates that this
                                                          Policer needs to be
                                                          considerate of header
                                                          truncate adjustment */

typedef struct drv_policer_config_s {
    uint32 flags;                       /* BCM_POLICER_* Flags. */
    drv_policer_mode_t mode;            /* Policer mode. */
    uint32 ckbits_sec;                  /* Committed rate (kbits per sec). */
    uint32 cbits_sec_lower;             /* Committed rate (lower digits; 0~999
                                           bits per sec). */
    uint32 max_ckbits_sec;              /* Maximum Committed rate (kbits per
                                           sec), Applicable only for cascade
                                           mode. */
    uint32 max_cbits_sec_lower;         /* Maximum Committed rate (lower digits;
                                           0~999 bits per sec). */
    uint32 ckbits_burst;                /* Committed burst size (kbits). */
    uint32 cbits_burst_lower;           /* Committed burst size (lower digits;
                                           0~999 bits). */
    uint32 pkbits_sec;                  /* Peak rate (kbits per sec). */
    uint32 pbits_sec_lower;             /* Peak rate (lower digits; 0~999 bits
                                           per sec). */
    uint32 max_pkbits_sec;              /* Maximum Peak rate (kbits per sec),
                                           Applicable only for cascade mode. */
    uint32 max_pbits_sec_lower;         /* Maximum Peak rate (lower digits;
                                           0~999 bits per sec). */
    uint32 pkbits_burst;                /* Peak burst size (kbits). */
    uint32 pbits_burst_lower;           /* Peak burst size (lower digits; 0~999
                                           bits). */
    uint32 kbits_current;               /* Current size (kbits). */
    uint32 bits_current_lower;          /* Current size (lower digits; 0~999
                                           bits). */
    uint32 action_id;                   /* Index of the global meter action
                                           entry */
    uint32 sharing_mode;                /* Meter sharing mode in case of Macro
                                           meter of Envelop */
    uint32 entropy_id;                  /* If set, indicate the configuration
                                           group the policer belongs to */
    drv_policer_pool_t pool_id;         /* Meter Pool Id of the current policer */
    uint32 bucket_width;                /* Bucket width in bits of the current
                                           policer */
    uint32 token_gran;                  /* Token granularity of the current
                                           policer */
    uint32 bucket_init_val;             /* Initial bucket count of the current
                                           policer */
    uint32 bucket_rollover_val;         /* Rollover bucket count of the current
                                           policer */
    int32 core_id;                      /* Device core on which to allocate the
                                           policer */
    drv_policer_t ncoflow_policer_id;   /* Next lower priority committed policer
                                           ID to overflow to. Applicable in
                                           Cascaded  policer modes on MEF 10.3+
                                           compliant devices */
    drv_policer_t npoflow_policer_id;   /* Next lower priority peak policer ID
                                           to overflow to. Applicable in
                                           Cascaded and CoupledCascade policer
                                           modes on MEF 10.3+  compliant devices */
    uint32 actual_ckbits_sec;           /* Granularity adjusted Committed rate
                                           (kbits per sec). */
    uint32 actual_cbits_sec_lower;      /* Granularity adjusted Committed rate
                                           (lower digits; 0~999 bits per sec). */
    uint32 actual_ckbits_burst;         /* Granularity adjusted Committed burst
                                           size (kbits). */
    uint32 actual_cbits_burst_lower;    /* Granularity adjusted Committed burst
                                           size (lower digits; 0~999 bits). */
    uint32 actual_pkbits_sec;           /* Granularity adjusted Peak rate (kbits
                                           per sec). */
    uint32 actual_pbits_sec_lower;      /* Granularity adjusted Peak rate (lower
                                           digits; 0~999 bits per sec). */
    uint32 actual_pkbits_burst;         /* Granularity adjusted Peak burst size
                                           (kbits). */
    uint32 actual_pbits_burst_lower;    /* Granularity adjusted Peak burst size
                                           (lower digits; 0~999 bits). */
    uint32 average_pkt_size;            /* Estimated average Ethernet packet
                                           size (1 to 16383 Bytes) for more
                                           accurate metering. */
    int mark_drop_as_black;             /* For drop decision (no committed or
                                           Excess credits), mark it as black
                                           (otherwise, it will be marked as
                                           red). */
} drv_policer_config_t;

#endif /* __ROBO_FP_H__ */
