/*
 *         
 * $Id:$
 * 
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 *         
 *     
 * DO NOT EDIT THIS FILE!
 *
 */

#ifndef _PMOSILKN_H__H_
#define _PMOSILKN_H__H_

#include <phymod/phymod.h>
#include <phymod/phymod_diagnostics.h>
#include <soc/portmod/portmod_defs.h>
/*Get whether the inerface type is supported by PM */
int pmOsILKN_pm_interface_type_is_supported(int unit, soc_port_if_t interface, int* is_supported);

/*Add new pm.*/
int pmOsILKN_pm_init(int unit, const portmod_pm_create_info_internal_t* pm_add_info, int wb_buffer_index, pm_info_t pm_info);

/*Release PM resources*/
int pmOsILKN_pm_destroy(int unit, pm_info_t pm_info);

/*Add new port*/
int pmOsILKN_port_attach(int unit, int port, pm_info_t pm_info, const portmod_port_add_info_t* add_info);

/*get port cores' phymod access*/
int pmOsILKN_pm_core_info_get(int unit, pm_info_t pm_info, int phyn, portmod_pm_core_info_t* core_info);

/*Port remove in PM level*/
int pmOsILKN_port_detach(int unit, int port, pm_info_t pm_info);

/*Port replace in PM level*/
int pmOsILKN_port_replace(int unit, int port, pm_info_t pm_info, int new_port);

/*Port enable*/
int pmOsILKN_port_enable_set(int unit, int port, pm_info_t pm_info, int flags, int enable);
int pmOsILKN_port_enable_get(int unit, int port, pm_info_t pm_info, int flags, int* enable);

/* set/get the interface, speed and encapsulation for the specified port.
            For the First port within core this function initialize the PM, MAC and PHY before configure the port.*/
int pmOsILKN_port_interface_config_set(int unit, int port, pm_info_t pm_info, const portmod_port_interface_config_t* config, int phy_init_flags);
int pmOsILKN_port_interface_config_get(int unit, int port, pm_info_t pm_info, portmod_port_interface_config_t* config, int phy_init_flags);

/* get the default line-side (outmost) interface type of a port based on its speed, encap, number of lanes, etc, when there is or there is not an ext PHY*/
int pmOsILKN_port_default_interface_get(int unit, int port, pm_info_t pm_info, const portmod_port_interface_config_t* config, soc_port_if_t* interface);

/*Port speed set\get*/
int pmOsILKN_port_loopback_set(int unit, int port, pm_info_t pm_info, portmod_loopback_mode_t loopback_type, int enable);
int pmOsILKN_port_loopback_get(int unit, int port, pm_info_t pm_info, portmod_loopback_mode_t loopback_type, int* enable);

/*Set\Get autoneg*/
int pmOsILKN_port_autoneg_set(int unit, int port, pm_info_t pm_info, uint32 phy_flags, const phymod_autoneg_control_t* an);
int pmOsILKN_port_autoneg_get(int unit, int port, pm_info_t pm_info, uint32 phy_flags, phymod_autoneg_control_t* an);

/*get link status*/
int pmOsILKN_port_link_get(int unit, int port, pm_info_t pm_info, int flags, int* link);

/*Number of lanes get*/
int pmOsILKN_port_nof_lanes_get(int unit, int port, pm_info_t pm_info, int* nof_lanes);

/*ILKN Number of segments set/get*/
int pmOsILKN_port_ilkn_nof_segments_set(int unit, int port, pm_info_t pm_info, uint32 nof_segments);
int pmOsILKN_port_ilkn_nof_segments_get(int unit, int port, pm_info_t pm_info, uint32* nof_segments);

/*Set port PHYs' firmware mode*/
int pmOsILKN_port_firmware_mode_set(int unit, int port, pm_info_t pm_info, phymod_firmware_mode_t fw_mode);
int pmOsILKN_port_firmware_mode_get(int unit, int port, pm_info_t pm_info, phymod_firmware_mode_t* fw_mode);

/*local fault steatus clear*/
int pmOsILKN_port_local_fault_status_clear(int unit, int port, pm_info_t pm_info);

/*remote fault status clear*/
int pmOsILKN_port_remote_fault_status_clear(int unit, int port, pm_info_t pm_info);

/*Routine for MAC\PHY sync.*/
int pmOsILKN_port_update(int unit, int port, pm_info_t pm_info, const portmod_port_update_control_t* update_control);

/*get port cores' phymod access*/
int pmOsILKN_port_core_access_get(int unit, int port, pm_info_t pm_info, int phyn, int max_cores, phymod_core_access_t* core_access_arr, int* nof_cores, int* is_most_ext);

/*Get lane phymod access structure. can be used for per lane operations*/
int pmOsILKN_port_phy_lane_access_get(int unit, int port, pm_info_t pm_info, const portmod_access_get_params_t* params, int max_phys, phymod_phy_access_t* access, int* nof_phys, int* is_most_ext);

/*Port duplex set\get*/
int pmOsILKN_port_duplex_set(int unit, int port, pm_info_t pm_info, int enable);
int pmOsILKN_port_duplex_get(int unit, int port, pm_info_t pm_info, int* enable);

/*Port PHY Control register read*/
int pmOsILKN_port_phy_reg_read(int unit, int port, pm_info_t pm_info, int flags, int reg_addr, uint32* value);

/*Port PHY Control register write*/
int pmOsILKN_port_phy_reg_write(int unit, int port, pm_info_t pm_info, int flags, int reg_addr, uint32 value);

/*Port Reset set\get*/
int pmOsILKN_port_reset_set(int unit, int port, pm_info_t pm_info, int mode, int opcode, int value);
int pmOsILKN_port_reset_get(int unit, int port, pm_info_t pm_info, int mode, int opcode, int* value);

/*Attaches an external phy lane to a specific port macro*/
int pmOsILKN_xphy_lane_attach_to_pm(int unit, pm_info_t pm_info, int iphy, int phyn, const portmod_xphy_lane_connection_t* lane_connection);

/*Attaches an external phy lane to a specific port macro*/
int pmOsILKN_xphy_lane_detach_from_pm(int unit, pm_info_t pm_info, int iphy, int phyn, portmod_xphy_lane_connection_t* lane_connection);

/*Toggle Lag Failover Status.*/
int pmOsILKN_port_lag_failover_status_toggle(int unit, int port, pm_info_t pm_info);

/*set port mode.*/
int pmOsILKN_port_mode_set(int unit, int port, pm_info_t pm_info, const portmod_port_mode_info_t* mode);
int pmOsILKN_port_mode_get(int unit, int port, pm_info_t pm_info, portmod_port_mode_info_t* mode);

/*port diagnostics control.*/
int pmOsILKN_port_diag_ctrl(int unit, int port, pm_info_t pm_info, uint32 inst, int op_type, int op_cmd, const void* arg);

/*Get the reference clock value 156 or 125.*/
int pmOsILKN_port_ref_clk_get(int unit, int port, pm_info_t pm_info, int* ref_clk);

/**/
int pmOsILKN_port_soft_reset_toggle(int unit, int port, pm_info_t pm_info, int idx);

/*"logical lane order"*/
int pmOsILKN_port_logical_lane_order_set(int unit, int port, pm_info_t pm_info, const int* lane_order, int lane_order_size);
int pmOsILKN_port_logical_lane_order_get(int unit, int port, pm_info_t pm_info, int lane_order_max_size, int* lane_order, int* lane_order_actual_size);

#endif /*_PMOSILKN_H_*/
