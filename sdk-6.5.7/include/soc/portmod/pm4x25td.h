/*
 *         
 * $Id:$
 * 
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 *         
 *     
 * DO NOT EDIT THIS FILE!
 *
 */

#ifndef _PM4X25TD_H__H_
#define _PM4X25TD_H__H_

#include <phymod/phymod.h>
#include <phymod/phymod_diagnostics.h>
#include <soc/portmod/portmod_defs.h>
/*set PFC config registers.*/
int pm4x25td_port_pfc_config_set(int unit, int port, pm_info_t pm_info, const portmod_pfc_config_t* pfc_cfg);
int pm4x25td_port_pfc_config_get(int unit, int port, pm_info_t pm_info, portmod_pfc_config_t* pfc_cfg);

/*set modid field.*/
int pm4x25td_port_modid_set(int unit, int port, pm_info_t pm_info, int value);

/*set modid field.*/
int pm4x25td_port_led_chain_config(int unit, int port, pm_info_t pm_info, int value);

/*Attaches an external phy lane to a specific port macro*/
int pm4x25td_xphy_lane_attach_to_pm(int unit, pm_info_t pm_info, int iphy, int phyn, const portmod_xphy_lane_connection_t* lane_connection);

/*Attaches an external phy lane to a specific port macro*/
int pm4x25td_xphy_lane_detach_from_pm(int unit, pm_info_t pm_info, int iphy, int phyn, portmod_xphy_lane_connection_t* lane_connection);

/*Toggle Lag Failover Status.*/
int pm4x25td_port_lag_failover_status_toggle(int unit, int port, pm_info_t pm_info);

/*set port register higig field.*/
int pm4x25td_port_higig_mode_set(int unit, int port, pm_info_t pm_info, int mode);
int pm4x25td_port_higig_mode_get(int unit, int port, pm_info_t pm_info, int* mode);

/*set port register higig field.*/
int pm4x25td_port_higig2_mode_set(int unit, int port, pm_info_t pm_info, int mode);
int pm4x25td_port_higig2_mode_get(int unit, int port, pm_info_t pm_info, int* mode);

/*set port register port type field.*/
int pm4x25td_port_config_port_type_set(int unit, int port, pm_info_t pm_info, int type);
int pm4x25td_port_config_port_type_get(int unit, int port, pm_info_t pm_info, int* type);

/*Disable lag failover.*/
int pm4x25td_port_cntmaxsize_set(int unit, int port, pm_info_t pm_info, int val);
int pm4x25td_port_cntmaxsize_get(int unit, int port, pm_info_t pm_info, int* val);

/**/
int pm4x25td_port_soft_reset_toggle(int unit, int port, pm_info_t pm_info, int idx);

/*reconfig pgw.*/
int pm4x25td_port_pgw_reconfig(int unit, int port, pm_info_t pm_info, const portmod_port_mode_info_t* pmode, int phy_port, int flags);

#endif /*_PM4X25TD_H_*/
