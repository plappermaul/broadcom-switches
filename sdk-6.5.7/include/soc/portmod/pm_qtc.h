/*
 *         
 * $Id:$
 * 
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 *         
 *     
 * DO NOT EDIT THIS FILE!
 *
 */

#ifndef _PM_QTC_H__H_
#define _PM_QTC_H__H_

#include <phymod/phymod.h>
#include <phymod/phymod_diagnostics.h>
#include <soc/portmod/portmod_defs.h>
/*Get whether the inerface type is supported by PM */
int pm_qtc_pm_interface_type_is_supported(int unit, soc_port_if_t interface, int* is_supported);

/*Add new pm.*/
int pm_qtc_pm_init(int unit, const portmod_pm_create_info_internal_t* pm_add_info, int wb_buffer_index, pm_info_t pm_info);

/*Release PM resources*/
int pm_qtc_pm_destroy(int unit, pm_info_t pm_info);

/*Add new port*/
int pm_qtc_port_attach(int unit, int port, pm_info_t pm_info, const portmod_port_add_info_t* add_info);

/*Replace the default bus and FW load method*/
int pm_qtc_default_bus_update(int unit, pm_info_t pm_info, const portmod_bus_update_t* update);

/*Set PM in bypass mode. should be called in the aggregator code.*/
int pm_qtc_pm_bypass_set(int unit, pm_info_t pm_info, int enable);

/*get port cores' phymod access*/
int pm_qtc_pm_core_info_get(int unit, pm_info_t pm_info, int phyn, portmod_pm_core_info_t* core_info);

/*Port remove in PM level*/
int pm_qtc_port_detach(int unit, int port, pm_info_t pm_info);

/*Port enable*/
int pm_qtc_port_enable_set(int unit, int port, pm_info_t pm_info, int flags, int enable);
int pm_qtc_port_enable_get(int unit, int port, pm_info_t pm_info, int flags, int* enable);

/* set/get the interface, speed and encapsulation for the specified port.
            For the First port within core this function initialize the PM, MAC and PHY before configure the port.*/
int pm_qtc_port_interface_config_set(int unit, int port, pm_info_t pm_info, const portmod_port_interface_config_t* config, int phy_init_flags);
int pm_qtc_port_interface_config_get(int unit, int port, pm_info_t pm_info, portmod_port_interface_config_t* config, int phy_init_flags);

/* get the default line-side (outmost) interface type of a port based on its speed, encap, number of lanes, etc, when there is or there is not an ext PHY*/
int pm_qtc_port_default_interface_get(int unit, int port, pm_info_t pm_info, const portmod_port_interface_config_t* config, soc_port_if_t* interface);

/*Port speed set\get*/
int pm_qtc_port_loopback_set(int unit, int port, pm_info_t pm_info, portmod_loopback_mode_t loopback_type, int enable);
int pm_qtc_port_loopback_get(int unit, int port, pm_info_t pm_info, portmod_loopback_mode_t loopback_type, int* enable);

/*Port RX MAC ENABLE set\get*/
int pm_qtc_port_rx_mac_enable_set(int unit, int port, pm_info_t pm_info, int enable);
int pm_qtc_port_rx_mac_enable_get(int unit, int port, pm_info_t pm_info, int* enable);

/*get port auto negotiation local ability*/
int pm_qtc_port_ability_local_get(int unit, int port, pm_info_t pm_info, uint32 phy_flags, portmod_port_ability_t* ability);

/*Set\Get autoneg*/
int pm_qtc_port_autoneg_set(int unit, int port, pm_info_t pm_info, uint32 phy_flags, const phymod_autoneg_control_t* an);
int pm_qtc_port_autoneg_get(int unit, int port, pm_info_t pm_info, uint32 phy_flags, phymod_autoneg_control_t* an);

/*Get autoneg status*/
int pm_qtc_port_autoneg_status_get(int unit, int port, pm_info_t pm_info, phymod_autoneg_status_t* an_status);

/*get link status*/
int pm_qtc_port_link_get(int unit, int port, pm_info_t pm_info, int flags, int* link);

/*PRBS configuration set/get*/
int pm_qtc_port_prbs_config_set(int unit, int port, pm_info_t pm_info, portmod_prbs_mode_t mode, int flags, const phymod_prbs_t* config);
int pm_qtc_port_prbs_config_get(int unit, int port, pm_info_t pm_info, portmod_prbs_mode_t mode, int flags, phymod_prbs_t* config);

/*PRBS enable set/get*/
int pm_qtc_port_prbs_enable_set(int unit, int port, pm_info_t pm_info, portmod_prbs_mode_t mode, int flags, int enable);
int pm_qtc_port_prbs_enable_get(int unit, int port, pm_info_t pm_info, portmod_prbs_mode_t mode, int flags, int* enable);

/*PRBS status get*/
int pm_qtc_port_prbs_status_get(int unit, int port, pm_info_t pm_info, portmod_prbs_mode_t mode, int flags, phymod_prbs_status_t* status);

/*Set port PHYs' firmware mode*/
int pm_qtc_port_firmware_mode_set(int unit, int port, pm_info_t pm_info, phymod_firmware_mode_t fw_mode);
int pm_qtc_port_firmware_mode_get(int unit, int port, pm_info_t pm_info, phymod_firmware_mode_t* fw_mode);

/*Filter packets smaller than the specified threshold*/
int pm_qtc_port_runt_threshold_set(int unit, int port, pm_info_t pm_info, int value);
int pm_qtc_port_runt_threshold_get(int unit, int port, pm_info_t pm_info, int* value);

/*Filter packets bigger than the specified value*/
int pm_qtc_port_max_packet_size_set(int unit, int port, pm_info_t pm_info, int value);
int pm_qtc_port_max_packet_size_get(int unit, int port, pm_info_t pm_info, int* value);

/*TX pad packets to the specified size. values smaller than 17 means pad is disabled.*/
int pm_qtc_port_pad_size_set(int unit, int port, pm_info_t pm_info, int value);
int pm_qtc_port_pad_size_get(int unit, int port, pm_info_t pm_info, int* value);

/*set/get the MAC source address that will be sent in case of Pause/LLFC*/
int pm_qtc_port_tx_mac_sa_set(int unit, int port, pm_info_t pm_info, sal_mac_addr_t mac_sa);
int pm_qtc_port_tx_mac_sa_get(int unit, int port, pm_info_t pm_info, sal_mac_addr_t mac_sa);

/*set/get SA recognized for MAC control packets in addition to the standard 0x0180C2000001*/
int pm_qtc_port_rx_mac_sa_set(int unit, int port, pm_info_t pm_info, sal_mac_addr_t mac_sa);
int pm_qtc_port_rx_mac_sa_get(int unit, int port, pm_info_t pm_info, sal_mac_addr_t mac_sa);

/*set/get Average inter-packet gap*/
int pm_qtc_port_tx_average_ipg_set(int unit, int port, pm_info_t pm_info, int value);
int pm_qtc_port_tx_average_ipg_get(int unit, int port, pm_info_t pm_info, int* value);

/*local fault set/get*/
int pm_qtc_port_local_fault_control_set(int unit, int port, pm_info_t pm_info, const portmod_local_fault_control_t* control);
int pm_qtc_port_local_fault_control_get(int unit, int port, pm_info_t pm_info, portmod_local_fault_control_t* control);

/*remote fault set/get*/
int pm_qtc_port_remote_fault_control_set(int unit, int port, pm_info_t pm_info, const portmod_remote_fault_control_t* control);
int pm_qtc_port_remote_fault_control_get(int unit, int port, pm_info_t pm_info, portmod_remote_fault_control_t* control);

/*local fault steatus get*/
int pm_qtc_port_local_fault_status_get(int unit, int port, pm_info_t pm_info, int* value);

/*remote fault status get*/
int pm_qtc_port_remote_fault_status_get(int unit, int port, pm_info_t pm_info, int* value);

/*set/get Pause FC configuration*/
int pm_qtc_port_pause_control_set(int unit, int port, pm_info_t pm_info, const portmod_pause_control_t* control);
int pm_qtc_port_pause_control_get(int unit, int port, pm_info_t pm_info, portmod_pause_control_t* control);

/*set/get PFC FC configuration*/
int pm_qtc_port_pfc_control_set(int unit, int port, pm_info_t pm_info, const portmod_pfc_control_t* control);
int pm_qtc_port_pfc_control_get(int unit, int port, pm_info_t pm_info, portmod_pfc_control_t* control);

/*set/get LLFC FC configuration*/
int pm_qtc_port_llfc_control_set(int unit, int port, pm_info_t pm_info, const portmod_llfc_control_t* control);
int pm_qtc_port_llfc_control_get(int unit, int port, pm_info_t pm_info, portmod_llfc_control_t* control);

/*Routine for MAC\PHY sync.*/
int pm_qtc_port_update(int unit, int port, pm_info_t pm_info, const portmod_port_update_control_t* update_control);

/*get port cores' phymod access*/
int pm_qtc_port_core_access_get(int unit, int port, pm_info_t pm_info, int phyn, int max_cores, phymod_core_access_t* core_access_arr, int* nof_cores, int* is_most_ext);

/*Get lane phymod access structure. can be used for per lane operations*/
int pm_qtc_port_phy_lane_access_get(int unit, int port, pm_info_t pm_info, const portmod_access_get_params_t* params, int max_phys, phymod_phy_access_t* access, int* nof_phys, int* is_most_ext);

/*Port duplex set\get*/
int pm_qtc_port_duplex_set(int unit, int port, pm_info_t pm_info, int enable);
int pm_qtc_port_duplex_get(int unit, int port, pm_info_t pm_info, int* enable);

/*Port PHY Control register read*/
int pm_qtc_port_phy_reg_read(int unit, int port, pm_info_t pm_info, int flags, int reg_addr, uint32* value);

/*Port PHY Control register write*/
int pm_qtc_port_phy_reg_write(int unit, int port, pm_info_t pm_info, int flags, int reg_addr, uint32 value);

/*Port Reset set\get*/
int pm_qtc_port_reset_set(int unit, int port, pm_info_t pm_info, int mode, int opcode, int value);
int pm_qtc_port_reset_get(int unit, int port, pm_info_t pm_info, int mode, int opcode, int* value);

/*Port remote Adv get*/
int pm_qtc_port_adv_remote_get(int unit, int port, pm_info_t pm_info, int* value);

/*Drv Name Get*/
int pm_qtc_port_drv_name_get(int unit, int port, pm_info_t pm_info, char* name, int len);

/*get port auto negotiation local ability*/
int pm_qtc_port_ability_advert_set(int unit, int port, pm_info_t pm_info, uint32 phy_flags, portmod_port_ability_t* ability);
int pm_qtc_port_ability_advert_get(int unit, int port, pm_info_t pm_info, uint32 phy_flags, portmod_port_ability_t* ability);

/*Port ability remote Adv get*/
int pm_qtc_port_ability_remote_get(int unit, int port, pm_info_t pm_info, uint32 phy_flags, portmod_port_ability_t* ability);

/*Port Mac Control Spacing Stretch*/
int pm_qtc_port_frame_spacing_stretch_set(int unit, int port, pm_info_t pm_info, int spacing);
int pm_qtc_port_frame_spacing_stretch_get(int unit, int port, pm_info_t pm_info, const int* spacing);

/*get port timestamps in fifo*/
int pm_qtc_port_diag_fifo_status_get(int unit, int port, pm_info_t pm_info, const portmod_fifo_status_t* diag_info);

/*set/get pass control frames.*/
int pm_qtc_port_rx_control_set(int unit, int port, pm_info_t pm_info, const portmod_rx_control_t* rx_ctrl);
int pm_qtc_port_rx_control_get(int unit, int port, pm_info_t pm_info, portmod_rx_control_t* rx_ctrl);

/*set PFC config registers.*/
int pm_qtc_port_pfc_config_set(int unit, int port, pm_info_t pm_info, const portmod_pfc_config_t* pfc_cfg);
int pm_qtc_port_pfc_config_get(int unit, int port, pm_info_t pm_info, portmod_pfc_config_t* pfc_cfg);

/*set EEE Config.*/
int pm_qtc_port_eee_set(int unit, int port, pm_info_t pm_info, const portmod_eee_t* eee);
int pm_qtc_port_eee_get(int unit, int port, pm_info_t pm_info, portmod_eee_t* eee);

/*set Vlan Inner/Outer tag.*/
int pm_qtc_port_vlan_tag_set(int unit, int port, pm_info_t pm_info, const portmod_vlan_tag_t* vlan_tag);
int pm_qtc_port_vlan_tag_get(int unit, int port, pm_info_t pm_info, portmod_vlan_tag_t* vlan_tag);

/*set modid field.*/
int pm_qtc_port_modid_set(int unit, int port, pm_info_t pm_info, int value);

/*set modid field.*/
int pm_qtc_port_clear_rx_lss_status_set(int unit, int port, pm_info_t pm_info, int lcl_fault, int rmt_fault);
int pm_qtc_port_clear_rx_lss_status_get(int unit, int port, pm_info_t pm_info, int* lcl_fault, int* rmt_fault);

/*Toggle Lag Failover Status.*/
int pm_qtc_port_lag_failover_status_toggle(int unit, int port, pm_info_t pm_info);

/*Toggle Lag Failover loopback set / get.*/
int pm_qtc_port_lag_failover_loopback_set(int unit, int port, pm_info_t pm_info, int value);
int pm_qtc_port_lag_failover_loopback_get(int unit, int port, pm_info_t pm_info, int* value);

/*set port mode.*/
int pm_qtc_port_mode_set(int unit, int port, pm_info_t pm_info, const portmod_port_mode_info_t* mode);
int pm_qtc_port_mode_get(int unit, int port, pm_info_t pm_info, portmod_port_mode_info_t* mode);

/*set port encap.*/
int pm_qtc_port_encap_set(int unit, int port, pm_info_t pm_info, int flags, portmod_encap_t encap);
int pm_qtc_port_encap_get(int unit, int port, pm_info_t pm_info, int* flags, portmod_encap_t* encap);

/*set port register port type field.*/
int pm_qtc_port_config_port_type_set(int unit, int port, pm_info_t pm_info, int type);
int pm_qtc_port_config_port_type_get(int unit, int port, pm_info_t pm_info, int* type);

/*set/get hwfailover for trident.*/
int pm_qtc_port_trunk_hwfailover_config_set(int unit, int port, pm_info_t pm_info, int hw_count);
int pm_qtc_port_trunk_hwfailover_config_get(int unit, int port, pm_info_t pm_info, int* enable);

/*set/get hwfailover for trident.*/
int pm_qtc_port_trunk_hwfailover_status_get(int unit, int port, pm_info_t pm_info, int* loopback);

/*port diagnostics control.*/
int pm_qtc_port_diag_ctrl(int unit, int port, pm_info_t pm_info, uint32 inst, int op_type, int op_cmd, const void* arg);

/*Get the reference clock value 156 or 125.*/
int pm_qtc_port_ref_clk_get(int unit, int port, pm_info_t pm_info, int* ref_clk);

/*Disable lag failover.*/
int pm_qtc_port_lag_failover_disable(int unit, int port, pm_info_t pm_info);

/*Disable lag failover.*/
int pm_qtc_port_lag_remove_failover_lpbk_set(int unit, int port, pm_info_t pm_info, int val);
int pm_qtc_port_lag_remove_failover_lpbk_get(int unit, int port, pm_info_t pm_info, int* val);

/*Disable lag failover.*/
int pm_qtc_port_cntmaxsize_set(int unit, int port, pm_info_t pm_info, int val);
int pm_qtc_port_cntmaxsize_get(int unit, int port, pm_info_t pm_info, int* val);

/*Get Info needed to restore after drain cells.*/
int pm_qtc_port_drain_cell_get(int unit, int port, pm_info_t pm_info, portmod_drain_cells_t* drain_cells);

/*Restore informaation after drain cells.*/
int pm_qtc_port_drain_cell_stop(int unit, int port, pm_info_t pm_info, const portmod_drain_cells_t* drain_cells);

/*Restore informaation after drain cells.*/
int pm_qtc_port_drain_cell_start(int unit, int port, pm_info_t pm_info);

/**/
int pm_qtc_port_drain_cells_rx_enable(int unit, int port, pm_info_t pm_info, int rx_en);

/**/
int pm_qtc_port_egress_queue_drain_rx_en(int unit, int port, pm_info_t pm_info, int rx_en);

/**/
int pm_qtc_port_mac_ctrl_set(int unit, int port, pm_info_t pm_info, uint64 ctrl);

/**/
int pm_qtc_port_txfifo_cell_cnt_get(int unit, int port, pm_info_t pm_info, uint32* cnt);

/**/
int pm_qtc_port_egress_queue_drain_get(int unit, int port, pm_info_t pm_info, uint64* ctrl, int* rxen);

/**/
int pm_qtc_port_mac_reset_set(int unit, int port, pm_info_t pm_info, int val);

/**/
int pm_qtc_port_soft_reset_toggle(int unit, int port, pm_info_t pm_info, int idx);

/*Check if MAC needs to be reset.*/
int pm_qtc_port_mac_reset_check(int unit, int port, pm_info_t pm_info, int enable, int* reset);

/**/
int pm_qtc_port_core_num_get(int unit, int port, pm_info_t pm_info, int* core_num);

/**/
int pm_qtc_port_e2ecc_hdr_set(int unit, int port, pm_info_t pm_info, const portmod_port_higig_e2ecc_hdr_t* e2ecc_hdr);
int pm_qtc_port_e2ecc_hdr_get(int unit, int port, pm_info_t pm_info, portmod_port_higig_e2ecc_hdr_t* e2ecc_hdr);

/**/
int pm_qtc_port_e2e_enable_set(int unit, int port, pm_info_t pm_info, int enable);
int pm_qtc_port_e2e_enable_get(int unit, int port, pm_info_t pm_info, int* enable);

/**/
int pm_qtc_port_fallback_lane_get(int unit, int port, pm_info_t pm_info, int* fallback_lane);

#endif /*_PM_QTC_H_*/
