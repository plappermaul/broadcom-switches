/** \file dnx_data_module_testing.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * The data is static and won't be changed after device initialization.
 *     
 * Supported data types:
 *     - Define             - a 'uint32' number (a max value for all devices is maintained)
 *     - feature            - 1 bit per each feature (supported/not supported) - support soc properties 
 *     - table              - the data is accessed with keys and/or can maintain multiple values and/or set by soc property
 *     - numeric            - a 'uint32' number that support soc properties
 * 
 * User interface for DNX DATA component can be found in "dnx_data_if.h" and "dnx_data_if_#module#.h"
 * 
 * Adding the data is done via XMLs placed in "tools/autocoder/DeviceData/dnx/.." 
 * "How to" User Guide can be found in confluence. 
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_MODULE_TESTING_H_
/*{*/
#define _DNX_DATA_MODULE_TESTING_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <bcm/fabric.h>
#include <soc/dnx/dnx_data/dnx_data_max_module_testing.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_module_testing
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 * \par INDIRECT INPUT:
 *   * None
 * \par DIRECT OUTPUT:
 *     rv - see 'shr_error_e
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_data_if_module_testing_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - UNSUPPORTED:
 * submodule used to make sure that unsupporrted data will return the expected values
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule unsupported table supported_table
 * Table info:
 * supported table expected to return the required struct
 */
typedef struct
{
    /**
     * generic number
     */
    uint32 num;
} dnx_data_module_testing_unsupported_supported_table_t;

/**
 * \brief Holds values of submodule unsupported table unsupported_table
 * Table info:
 * usupported table expected to return NULL
 */
typedef struct
{
    /**
     * generic number
     */
    uint32 num;
} dnx_data_module_testing_unsupported_unsupported_table_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * supported feature expected to return 1
     */
    dnx_data_module_testing_unsupported_supported_feature,
    /**
     * usupported feature expected to return 0
     */
    dnx_data_module_testing_unsupported_unsupported_feature,

    /**
     * Must be last one!
     */
    dnx_data_module_testing_unsupported_feature_nof
} dnx_data_module_testing_unsupported_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feauture - disabled/enabled
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 *   \param [in] feature - feature to get (see enum defintion for more details
 * \par INDIRECT INPUT:
 *   device data - module global data
 * \par DIRECT OUTPUT:
 *     is_supported - returns 1 iff supported and 0 otherwise
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef int(
    *dnx_data_module_testing_unsupported_feature_get_f) (
    int unit,
    dnx_data_module_testing_unsupported_feature_e feature);

/**
 * \brief returns define data of supported_def
 * Module - 'module_testing', Submodule - 'unsupported', data - 'supported_def'
 * supported define expected to return value
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     supported_def - the required data value
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_unsupported_supported_def_get_f) (
    int unit);

/**
 * \brief returns define data of unsupported_def
 * Module - 'module_testing', Submodule - 'unsupported', data - 'unsupported_def'
 * unsupported feature expected to return NULL
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     unsupported_def - the required data value
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_unsupported_unsupported_def_get_f) (
    int unit);

/**
 * \brief get table supported_table info
 * supported table expected to return the required struct
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     supported_table - returns the relevant entry values grouped in struct - see dnx_data_module_testing_unsupported_supported_table_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_unsupported_supported_table_t *(
    *dnx_data_module_testing_unsupported_supported_table_get_f) (
    int unit);

/**
 * \brief get table unsupported_table info
 * usupported table expected to return NULL
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     unsupported_table - returns the relevant entry values grouped in struct - see dnx_data_module_testing_unsupported_unsupported_table_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_unsupported_unsupported_table_t *(
    *dnx_data_module_testing_unsupported_unsupported_table_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MODULE_TESTING - UNSUPPORTED:
 * {
 */
/**
 * \brief Interface for module_testing unsupported data
 */
typedef struct
{
    /**
     * get submodule feauture - disabled/enabled
     */
    dnx_data_module_testing_unsupported_feature_get_f feature_get;
    /**
     * returns define data of supported_def
     */
    dnx_data_module_testing_unsupported_supported_def_get_f supported_def_get;
    /**
     * returns define data of unsupported_def
     */
    dnx_data_module_testing_unsupported_unsupported_def_get_f unsupported_def_get;
    /**
     * get table supported_table info
     */
    dnx_data_module_testing_unsupported_supported_table_get_f supported_table_get;
    /**
     * get table unsupported_table info
     */
    dnx_data_module_testing_unsupported_unsupported_table_get_f unsupported_table_get;
} dnx_data_if_module_testing_unsupported_t;

/*
 * }
 */

/*
 * SUBMODULE  - TYPES:
 * test different data types
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule types table all
 * Table info:
 * test all supported types
 */
typedef struct
{
    /**
     * test int
     */
    int intval;
    /**
     * test uint8
     */
    uint8 uint8val;
    /**
     * test char
     */
    char charval;
    /**
     * test uint16
     */
    uint16 uint16val;
    /**
     * test enum
     */
    bcm_fabric_device_type_t enumval;
    /**
     * test array
     */
    uint32 arrval[10];
    /**
     * test pbmp
     */
    bcm_pbmp_t pbmpval;
    /**
     * test string
     */
    char *strval;
    /**
     * test buffer
     */
    char bufferval[100];
} dnx_data_module_testing_types_all_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    dnx_data_module_testing_types_feature_nof
} dnx_data_module_testing_types_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feauture - disabled/enabled
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 *   \param [in] feature - feature to get (see enum defintion for more details
 * \par INDIRECT INPUT:
 *   device data - module global data
 * \par DIRECT OUTPUT:
 *     is_supported - returns 1 iff supported and 0 otherwise
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef int(
    *dnx_data_module_testing_types_feature_get_f) (
    int unit,
    dnx_data_module_testing_types_feature_e feature);

/**
 * \brief get table all info
 * test all supported types
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     all - returns the relevant entry values grouped in struct - see dnx_data_module_testing_types_all_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_types_all_t *(
    *dnx_data_module_testing_types_all_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MODULE_TESTING - TYPES:
 * {
 */
/**
 * \brief Interface for module_testing types data
 */
typedef struct
{
    /**
     * get submodule feauture - disabled/enabled
     */
    dnx_data_module_testing_types_feature_get_f feature_get;
    /**
     * get table all info
     */
    dnx_data_module_testing_types_all_get_f all_get;
} dnx_data_if_module_testing_types_t;

/*
 * }
 */

/*
 * SUBMODULE  - PROPERTY_METHODS:
 * test different data types
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule property_methods table enable
 * Table info:
 * test all supported types
 */
typedef struct
{
    /**
     * test enable method
     */
    uint32 val;
} dnx_data_module_testing_property_methods_enable_t;

/**
 * \brief Holds values of submodule property_methods table port_enable
 * Table info:
 * test all supported types
 */
typedef struct
{
    /**
     * test port enable method
     */
    uint32 val;
} dnx_data_module_testing_property_methods_port_enable_t;

/**
 * \brief Holds values of submodule property_methods table suffix_enable
 * Table info:
 * test all supported types
 */
typedef struct
{
    /**
     * test suffix enable method
     */
    uint32 val;
} dnx_data_module_testing_property_methods_suffix_enable_t;

/**
 * \brief Holds values of submodule property_methods table range
 * Table info:
 * test prop range method types
 */
typedef struct
{
    /**
     * see table
     */
    uint32 val;
} dnx_data_module_testing_property_methods_range_t;

/**
 * \brief Holds values of submodule property_methods table port_range
 * Table info:
 * test prop port range method types
 */
typedef struct
{
    /**
     * see table
     */
    uint32 val;
} dnx_data_module_testing_property_methods_port_range_t;

/**
 * \brief Holds values of submodule property_methods table suffix_range
 * Table info:
 * test prop suffix range method types
 */
typedef struct
{
    /**
     * see table
     */
    uint32 val;
} dnx_data_module_testing_property_methods_suffix_range_t;

/**
 * \brief Holds values of submodule property_methods table direct_map
 * Table info:
 * test prop direct map method types
 */
typedef struct
{
    /**
     * see table
     */
    uint32 val;
} dnx_data_module_testing_property_methods_direct_map_t;

/**
 * \brief Holds values of submodule property_methods table port_direct_map
 * Table info:
 * test prop port direct map method types
 */
typedef struct
{
    /**
     * see table
     */
    uint32 val;
} dnx_data_module_testing_property_methods_port_direct_map_t;

/**
 * \brief Holds values of submodule property_methods table suffix_direct_map
 * Table info:
 * test prop suffix direct map method types
 */
typedef struct
{
    /**
     * see table
     */
    uint32 val;
} dnx_data_module_testing_property_methods_suffix_direct_map_t;

/**
 * \brief Holds values of submodule property_methods table custom
 * Table info:
 * test prop custom method types
 */
typedef struct
{
    /**
     * see table
     */
    uint32 val;
} dnx_data_module_testing_property_methods_custom_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * test feature enable method
     */
    dnx_data_module_testing_property_methods_feature_enable,

    /**
     * Must be last one!
     */
    dnx_data_module_testing_property_methods_feature_nof
} dnx_data_module_testing_property_methods_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feauture - disabled/enabled
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 *   \param [in] feature - feature to get (see enum defintion for more details
 * \par INDIRECT INPUT:
 *   device data - module global data
 * \par DIRECT OUTPUT:
 *     is_supported - returns 1 iff supported and 0 otherwise
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef int(
    *dnx_data_module_testing_property_methods_feature_get_f) (
    int unit,
    dnx_data_module_testing_property_methods_feature_e feature);

/**
 * \brief returns numeric data of numeric_range
 * Module - 'module_testing', Submodule - 'property_methods', data - 'numeric_range'
 * test numeric range method
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     numeric_range - the required data value
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_property_methods_numeric_range_get_f) (
    int unit);

/**
 * \brief get table enable info
 * test all supported types
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     enable - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_enable_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_enable_t *(
    *dnx_data_module_testing_property_methods_enable_get_f) (
    int unit);

/**
 * \brief get table port_enable info
 * test all supported types
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 *   \param [in] port - logical port
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     port_enable - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_port_enable_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_port_enable_t *(
    *dnx_data_module_testing_property_methods_port_enable_get_f) (
    int unit,
    int port);

/**
 * \brief get table suffix_enable info
 * test all supported types
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 *   \param [in] link - link id
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     suffix_enable - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_suffix_enable_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_suffix_enable_t *(
    *dnx_data_module_testing_property_methods_suffix_enable_get_f) (
    int unit,
    int link);

/**
 * \brief get table range info
 * test prop range method types
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     range - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_range_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_range_t *(
    *dnx_data_module_testing_property_methods_range_get_f) (
    int unit);

/**
 * \brief get table port_range info
 * test prop port range method types
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 *   \param [in] port - logical port
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     port_range - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_port_range_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_port_range_t *(
    *dnx_data_module_testing_property_methods_port_range_get_f) (
    int unit,
    int port);

/**
 * \brief get table suffix_range info
 * test prop suffix range method types
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 *   \param [in] link - link id
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     suffix_range - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_suffix_range_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_suffix_range_t *(
    *dnx_data_module_testing_property_methods_suffix_range_get_f) (
    int unit,
    int link);

/**
 * \brief get table direct_map info
 * test prop direct map method types
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     direct_map - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_direct_map_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_direct_map_t *(
    *dnx_data_module_testing_property_methods_direct_map_get_f) (
    int unit);

/**
 * \brief get table port_direct_map info
 * test prop port direct map method types
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 *   \param [in] port - logical port
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     port_direct_map - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_port_direct_map_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_port_direct_map_t *(
    *dnx_data_module_testing_property_methods_port_direct_map_get_f) (
    int unit,
    int port);

/**
 * \brief get table suffix_direct_map info
 * test prop suffix direct map method types
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 *   \param [in] link - link id
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     suffix_direct_map - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_suffix_direct_map_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_suffix_direct_map_t *(
    *dnx_data_module_testing_property_methods_suffix_direct_map_get_f) (
    int unit,
    int link);

/**
 * \brief get table custom info
 * test prop custom method types
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 *   \param [in] link - link id
 *   \param [in] pipe - pipe id
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     custom - returns the relevant entry values grouped in struct - see dnx_data_module_testing_property_methods_custom_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_property_methods_custom_t *(
    *dnx_data_module_testing_property_methods_custom_get_f) (
    int unit,
    int link,
    int pipe);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MODULE_TESTING - PROPERTY_METHODS:
 * {
 */
/**
 * \brief Interface for module_testing property_methods data
 */
typedef struct
{
    /**
     * get submodule feauture - disabled/enabled
     */
    dnx_data_module_testing_property_methods_feature_get_f feature_get;
    /**
     * returns numeric data of numeric_range
     */
    dnx_data_module_testing_property_methods_numeric_range_get_f numeric_range_get;
    /**
     * get table enable info
     */
    dnx_data_module_testing_property_methods_enable_get_f enable_get;
    /**
     * get table port_enable info
     */
    dnx_data_module_testing_property_methods_port_enable_get_f port_enable_get;
    /**
     * get table suffix_enable info
     */
    dnx_data_module_testing_property_methods_suffix_enable_get_f suffix_enable_get;
    /**
     * get table range info
     */
    dnx_data_module_testing_property_methods_range_get_f range_get;
    /**
     * get table port_range info
     */
    dnx_data_module_testing_property_methods_port_range_get_f port_range_get;
    /**
     * get table suffix_range info
     */
    dnx_data_module_testing_property_methods_suffix_range_get_f suffix_range_get;
    /**
     * get table direct_map info
     */
    dnx_data_module_testing_property_methods_direct_map_get_f direct_map_get;
    /**
     * get table port_direct_map info
     */
    dnx_data_module_testing_property_methods_port_direct_map_get_f port_direct_map_get;
    /**
     * get table suffix_direct_map info
     */
    dnx_data_module_testing_property_methods_suffix_direct_map_get_f suffix_direct_map_get;
    /**
     * get table custom info
     */
    dnx_data_module_testing_property_methods_custom_get_f custom_get;
} dnx_data_if_module_testing_property_methods_t;

/*
 * }
 */

/*
 * SUBMODULE  - DBAL:
 * test dbal db init procedure
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule dbal table all
 * Table info:
 * test all supported types
 */
typedef struct
{
    /**
     * field in table size test
     */
    uint32 vlan_id_in_ingress;
    /**
     * field in table valid test
     */
    uint32 fid_in_mact;
} dnx_data_module_testing_dbal_all_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    dnx_data_module_testing_dbal_feature_nof
} dnx_data_module_testing_dbal_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feauture - disabled/enabled
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 *   \param [in] feature - feature to get (see enum defintion for more details
 * \par INDIRECT INPUT:
 *   device data - module global data
 * \par DIRECT OUTPUT:
 *     is_supported - returns 1 iff supported and 0 otherwise
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef int(
    *dnx_data_module_testing_dbal_feature_get_f) (
    int unit,
    dnx_data_module_testing_dbal_feature_e feature);

/**
 * \brief returns define data of vrf_field_size
 * Module - 'module_testing', Submodule - 'dbal', data - 'vrf_field_size'
 * field size test
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     vrf_field_size - the required data value
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_module_testing_dbal_vrf_field_size_get_f) (
    int unit);

/**
 * \brief get table all info
 * test all supported types
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     all - returns the relevant entry values grouped in struct - see dnx_data_module_testing_dbal_all_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_module_testing_dbal_all_t *(
    *dnx_data_module_testing_dbal_all_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_MODULE_TESTING - DBAL:
 * {
 */
/**
 * \brief Interface for module_testing dbal data
 */
typedef struct
{
    /**
     * get submodule feauture - disabled/enabled
     */
    dnx_data_module_testing_dbal_feature_get_f feature_get;
    /**
     * returns define data of vrf_field_size
     */
    dnx_data_module_testing_dbal_vrf_field_size_get_f vrf_field_size_get;
    /**
     * get table all info
     */
    dnx_data_module_testing_dbal_all_get_f all_get;
} dnx_data_if_module_testing_dbal_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_MODULE_TESTING:
 * {
 */
/**
 * \brief Interface for module_testing data
 */
typedef struct
{
    /**
     * Interface for module_testing unsupported data
     */
    dnx_data_if_module_testing_unsupported_t unsupported;
    /**
     * Interface for module_testing types data
     */
    dnx_data_if_module_testing_types_t types;
    /**
     * Interface for module_testing property_methods data
     */
    dnx_data_if_module_testing_property_methods_t property_methods;
    /**
     * Interface for module_testing dbal data
     */
    dnx_data_if_module_testing_dbal_t dbal;
} dnx_data_if_module_testing_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_module_testing_t dnx_data_module_testing;
/*
 * }
 */
/*}*/
#else     /*DNX_DATA_MODULE_TESTING_H_*/
/*{*/
#ifndef DNX_DATA_INTERNAL
/*{*/
#error "dnx_data_module_testing file might include any header files, therfore header files must not include it.\nAny include to dnx_data_module_testing must be from 'c' file"
/*}*/
#endif /*DNX_DATA_INTERNAL*/
/*}*/
#endif /*_DNX_DATA_MODULE_TESTING_H_*/
/* *INDENT-ON* */
