/** \file dnx_data_internal_l3.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * The data is static and won't be changed after device initialization.
 *     
 * Supported data types:
 *     - Define             - a 'uint32' number (a max value for all devices is maintained)
 *     - feature            - 1 bit per each feature (supported/not supported) - support soc properties 
 *     - table              - the data is accessed with keys and/or can maintain multiple values and/or set by soc property
 *     - numeric            - a 'uint32' number that support soc properties
 * 
 * User interface for DNX DATA component can be found in "dnx_data_if.h" and "dnx_data_if_#module#.h"
 * 
 * Adding the data is done via XMLs placed in "tools/autocoder/DeviceData/dnx/.." 
 * "How to" User Guide can be found in confluence. 
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_L3_H_
/*{*/
#define _DNX_DATA_INTERNAL_L3_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/dnx_data_internal.h>
#include <soc/dnx/dnx_data/dnx_data_l3.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_l3_submodule_fec,
    dnx_data_l3_submodule_source_address,

    /**
     * Must be last one!
     */
    dnx_data_l3_submodule_nof
} dnx_data_l3_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE FEC:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feauture - disabled/enabled
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 *   \param [in] feature - feature to get (see enum defintion for more details
 * \par INDIRECT INPUT:
 *   device data - module global data
 * \par DIRECT OUTPUT:
 *     is_supported - returns 1 iff supported and 0 otherwise
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
int dnx_data_l3_fec_feature_get(
    int unit,
    dnx_data_l3_fec_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_l3_fec_define_max_nof_fec,
    dnx_data_l3_fec_define_max_fec_for_default_route,

    /**
     * Must be last one!
     */
    dnx_data_l3_fec_define_nof
} dnx_data_l3_fec_define_e;

/* Get Data */
/**
 * \brief returns define data of max_nof_fec
 * Module - 'l3', Submodule - 'fec', data - 'max_nof_fec'
 * The maximal number of FECs supported by the device.
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     max_nof_fec - the required data value
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
uint32 dnx_data_l3_fec_max_nof_fec_get(
    int unit);

/**
 * \brief returns define data of max_fec_for_default_route
 * Module - 'l3', Submodule - 'fec', data - 'max_fec_for_default_route'
 * The maximal FEC id that can be used for default route.
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     max_fec_for_default_route - the required data value
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
uint32 dnx_data_l3_fec_max_fec_for_default_route_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    dnx_data_l3_fec_table_nof
} dnx_data_l3_fec_table_e;

/* Get Data */
/* Get Value Str */
/*
 * SUBMODULE SOURCE_ADDRESS:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feauture - disabled/enabled
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 *   \param [in] feature - feature to get (see enum defintion for more details
 * \par INDIRECT INPUT:
 *   device data - module global data
 * \par DIRECT OUTPUT:
 *     is_supported - returns 1 iff supported and 0 otherwise
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
int dnx_data_l3_source_address_feature_get(
    int unit,
    dnx_data_l3_source_address_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_l3_source_address_define_source_address_table_size,

    /**
     * Must be last one!
     */
    dnx_data_l3_source_address_define_nof
} dnx_data_l3_source_address_define_e;

/* Get Data */
/**
 * \brief returns define data of source_address_table_size
 * Module - 'l3', Submodule - 'source_address', data - 'source_address_table_size'
 * The number of entries in the source address table.
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     source_address_table_size - the required data value
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
uint32 dnx_data_l3_source_address_source_address_table_size_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{

    /**
     * Must be last one!
     */
    dnx_data_l3_source_address_table_nof
} dnx_data_l3_source_address_table_e;

/* Get Data */
/* Get Value Str */
/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 * \par INDIRECT INPUT:
 *   * None
 * \par DIRECT OUTPUT:
 *     rv - see 'shr_error_e
 * \par INDIRECT OUTPUT:
 *   \param [out] module_data - pointer to module data
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_data_l3_init(
    int unit,
    dnx_data_module_t *module_data);

/*
 * }
 */
/*}*/
#else     /*DNX_DATA_INTERNAL_L3_H_*/
/*{*/
#ifndef DNX_DATA_INTERNAL
/*{*/
#error "dnx_data_internal_l3 file might include any header files, therfore header files must not include it.\nAny include to dnx_data_internal_l3 must be from 'c' file"
/*}*/
#endif /*DNX_DATA_INTERNAL*/
/*}*/
#endif /*_DNX_DATA_INTERNAL_L3_H_*/
/* *INDENT-ON* */
