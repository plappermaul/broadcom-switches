/** \file dnx_data_internal_port.h
 * 
 * MODULE DEVICE DATA - DNX_DATA
 * 
 * Device Data
 * SW component that maintains per device data
 * The data is static and won't be changed after device initialization.
 *     
 * Supported data types:
 *     - Define             - a 'uint32' number (a max value for all devices is maintained)
 *     - feature            - 1 bit per each feature (supported/not supported) - support soc properties 
 *     - table              - the data is accessed with keys and/or can maintain multiple values and/or set by soc property
 *     - numeric            - a 'uint32' number that support soc properties
 * 
 * User interface for DNX DATA component can be found in "dnx_data_if.h" and "dnx_data_if_#module#.h"
 * 
 * Adding the data is done via XMLs placed in "tools/autocoder/DeviceData/dnx/.." 
 * "How to" User Guide can be found in confluence. 
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_INTERNAL_PORT_H_
/*{*/
#define _DNX_DATA_INTERNAL_PORT_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/dnx_data_internal.h>
#include <soc/dnx/dnx_data/dnx_data_port.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * TYPEDEFS:
 * {
 */
/**
 * \brief 
 * Submodule enum
 */
typedef enum
{
    dnx_data_port_submodule_general,

    /**
     * Must be last one!
     */
    dnx_data_port_submodule_nof
} dnx_data_port_submodule_e;

/*
 * }
 */

/*
 * SUBMODULE GENERAL:
 * {
 */
/*
 * Features
 */
/* Feature enum - placed in if header (should be exposed to component user */
/* Get Data */
/**
 * \brief get submodule feauture - disabled/enabled
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 *   \param [in] feature - feature to get (see enum defintion for more details
 * \par INDIRECT INPUT:
 *   device data - module global data
 * \par DIRECT OUTPUT:
 *     is_supported - returns 1 iff supported and 0 otherwise
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
int dnx_data_port_general_feature_get(
    int unit,
    dnx_data_port_general_feature_e feature);

/*
 * Defines
 */
/**
 * \brief 
 * Define enum
 */
typedef enum
{
    dnx_data_port_general_define_fabric_port_base,

    /**
     * Must be last one!
     */
    dnx_data_port_general_define_nof
} dnx_data_port_general_define_e;

/* Get Data */
/**
 * \brief returns numeric data of fabric_port_base
 * Module - 'port', Submodule - 'general', data - 'fabric_port_base'
 * first fabric logical port
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     fabric_port_base - the required data value
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
uint32 dnx_data_port_general_fabric_port_base_get(
    int unit);

/*
 * Tables
 */
/**
 * \brief 
 * Table enum
 */
typedef enum
{
    dnx_data_port_general_table_ucode_port,

    /**
     * Must be last one!
     */
    dnx_data_port_general_table_nof
} dnx_data_port_general_table_e;

/* Get Data */
/**
 * \brief get table ucode_port info
 * static port configuration
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 *   \param [in] port - logical port
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     ucode_port - returns the relevant entry values grouped in struct - see dnx_data_port_general_ucode_port_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
const dnx_data_port_general_ucode_port_t * dnx_data_port_general_ucode_port_get(
    int unit,
    int port);

/* Get Value Str */
/**
 * \brief Get table value as string
 * Module - 'port', Submodule - 'general', table - 'ucode_port'
 * static port configuration
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 *   \param [in] key0 - key #0 index - 0 if not used
 *   \param [in] key1 - key #1 index - 0 if not used
 *   \param [in] value_index - value index to get - the index is alligned with values array in table structure
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     err - See shr_error_e
 * \par INDIRECT OUTPUT:
 *   \param [out] buffer - buffer for the value
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_data_port_general_ucode_port_entry_str_get(
    int unit,
    char *buffer,
    int key0,
    int key1,
    int value_index);

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init module
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 * \par INDIRECT INPUT:
 *   * None
 * \par DIRECT OUTPUT:
 *     rv - see 'shr_error_e
 * \par INDIRECT OUTPUT:
 *   \param [out] module_data - pointer to module data
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_data_port_init(
    int unit,
    dnx_data_module_t *module_data);

/*
 * }
 */
/*}*/
#else     /*DNX_DATA_INTERNAL_PORT_H_*/
/*{*/
#ifndef DNX_DATA_INTERNAL
/*{*/
#error "dnx_data_internal_port file might include any header files, therfore header files must not include it.\nAny include to dnx_data_internal_port must be from 'c' file"
/*}*/
#endif /*DNX_DATA_INTERNAL*/
/*}*/
#endif /*_DNX_DATA_INTERNAL_PORT_H_*/
/* *INDENT-ON* */
