/** \file dnx_data.h
 * 
 * DEVICE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * The data is static and won't be changed after device initialization.
 *     
 * Supported data types:
 *     - Define             - a 'uint32' number (a max value for all devices is maintained)
 *     - feature            - 1 bit per each feature (supported/not supported) - support soc properties 
 *     - table              - the data is accessed with keys and/or can maintain multiple values and/or set by soc property
 *     - numeric            - a 'uint32' number that support soc properties
 * 
 * User interface for DNX DATA component can be found in "dnx_data_if.h" and "dnx_data_if_#module#.h"
 * 
 * Adding the data is done via XMLs placed in "tools/autocoder/DeviceData/dnx/.." 
 * "How to" User Guide can be found in confluence. 
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_H_
/*{*/
#define _DNX_DATA_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/drv.h>
#include <sal/limits.h>
#include <shared/shrextend/shrextend_debug.h>
#include <shared/utilex/utilex_framework.h>
#include <soc/dnx/dnx_data/dnx_data_utils.h>
#include <soc/dnx/dnx_data/dnx_data_mgmt.h>
#include <soc/dnx/dnx_data/dnx_data_max_port.h>
#include <soc/dnx/dnx_data/dnx_data_port.h>
#include <soc/dnx/dnx_data/dnx_data_max_cmodel.h>
#include <soc/dnx/dnx_data/dnx_data_cmodel.h>
#include <soc/dnx/dnx_data/dnx_data_max_crps.h>
#include <soc/dnx/dnx_data/dnx_data_crps.h>
#include <soc/dnx/dnx_data/dnx_data_max_device.h>
#include <soc/dnx/dnx_data/dnx_data_device.h>
#include <soc/dnx/dnx_data/dnx_data_max_fabric.h>
#include <soc/dnx/dnx_data/dnx_data_fabric.h>
#include <soc/dnx/dnx_data/dnx_data_max_l2.h>
#include <soc/dnx/dnx_data/dnx_data_l2.h>
#include <soc/dnx/dnx_data/dnx_data_max_l3.h>
#include <soc/dnx/dnx_data/dnx_data_l3.h>
#include <soc/dnx/dnx_data/dnx_data_max_lif.h>
#include <soc/dnx/dnx_data/dnx_data_lif.h>
#include <soc/dnx/dnx_data/dnx_data_max_module_testing.h>
#include <soc/dnx/dnx_data/dnx_data_module_testing.h>
#include <soc/dnx/dnx_data/dnx_data_max_nif.h>
#include <soc/dnx/dnx_data/dnx_data_nif.h>
#include <soc/dnx/dnx_data/dnx_data_max_snif.h>
#include <soc/dnx/dnx_data/dnx_data_snif.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * State FLAGS:
 * Used for component state
 * {
 */
/**
 * \brief
 * Structure and interface initaliztion done
 */
#define DNX_DATA_STATE_F_INIT_DONE      (0x1)
/**
 * \brief
 * Device data load done(not including properties)
 */
#define DNX_DATA_STATE_F_DEV_DATA_DONE  (0x2)
/**
 * \brief
 * Proerty data load done
 */
#define DNX_DATA_STATE_F_PROP_DONE      (0x4)
/**
 * \brief
 * bcm init stage done
 */
#define DNX_DATA_STATE_F_BCM_INIT_DONE  (0x8)
/**
 * \brief
 * application init done
 */
#define DNX_DATA_STATE_F_APPL_INIT_DONE (0x10)
/**
 * \brief
 * device data override flag
 */
#define DNX_DATA_STATE_F_OVERRIDE       (0x100)
/*
 * }
 */

/*
 * State FLAGS:
 * Used for data state and type
 * {
 */
/**
 * \brief
 * All data
 */
#define DNX_DATA_F_ALL                  (0x0)
/**
 * \brief
 * Data type: define (number uint32 - and max value for all devices is maintained)
 */
#define DNX_DATA_F_DEFINE               (0x1)
/**
 * \brief
 * Data type: feature (feature 1 bit value - supported/not suported)
 */
#define DNX_DATA_F_FEATURE              (0x2)
/**
 * \brief
 * Data type: table (accessed with keys)
 */
#define DNX_DATA_F_TABLE                (0x4)
/**
 * \brief
 * Data type: numeric (uint32 number that support soc property)
 */
#define DNX_DATA_F_NUMERIC              (0x8)
/**
 * \brief
 * Flags mask of all kind of types
 */
#define DNX_DATA_FLAG_DATA_TYPES_MASK   (0xF)
/**
 * \brief
 * data might be read from soc property
 */
#define DNX_DATA_F_PROPERTY             (0x100)
/**
 * \brief
 * data should not be used after init
 */
#define DNX_DATA_F_INIT_ONLY            (0x200)
/**
 * \brief
 * If set, data is supported by device
 */
#define DNX_DATA_F_SUPPORTED            (0x1000)
/**
 * \brief
 * If set, data was changed compared to default
 */
#define DNX_DATA_F_CHANGED              (0x2000)
/*
 * }
 */

/*
 * FUNCTIONS:
 * {
 */
/**
 * \brief Init data structure - dnx_data
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 * \par INDIRECT INPUT:
 *   * None
 * \par DIRECT OUTPUT:
 *     rv - see 'shr_error_e
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_data_init(
    int unit);

/*
 * }
 */

/**
 * \brief Deinit data structure - dnx_data
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 * \par INDIRECT INPUT:
 *   * None
 * \par DIRECT OUTPUT:
 *     rv - see 'shr_error_e
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_data_deinit(
    int unit);

/*
 * }
 */
/**
 * \brief Init default data structure - dnx_data_if
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 * \par INDIRECT INPUT:
 *   * None
 * \par DIRECT OUTPUT:
 *     rv - see 'shr_error_e
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_data_if_init(
    int unit);

/**
 * \brief deinit default data structure - dnx_data_if
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 * \par INDIRECT INPUT:
 *   * None
 * \par DIRECT OUTPUT:
 *     rv - see 'shr_error_e
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_data_if_deinit(
    int unit);

/*
 * }
 */

/*
 * MAIN INTERFACE:
 * {
 */
/**
 * \brief Data main inteface
 * 
 * This Strctured interface is per Module X SubModule
 * i.e. device_data.MODULE.SUBMODULE
 */
typedef struct
{
    /**
     * Interface for port data
     */
    dnx_data_if_port_t port;
    /**
     * Interface for cmodel data
     */
    dnx_data_if_cmodel_t cmodel;
    /**
     * Interface for crps data
     */
    dnx_data_if_crps_t crps;
    /**
     * Interface for device data
     */
    dnx_data_if_device_t device;
    /**
     * Interface for fabric data
     */
    dnx_data_if_fabric_t fabric;
    /**
     * Interface for l2 data
     */
    dnx_data_if_l2_t l2;
    /**
     * Interface for l3 data
     */
    dnx_data_if_l3_t l3;
    /**
     * Interface for lif data
     */
    dnx_data_if_lif_t lif;
    /**
     * Interface for module_testing data
     */
    dnx_data_if_module_testing_t module_testing;
    /**
     * Interface for nif data
     */
    dnx_data_if_nif_t nif;
    /**
     * Interface for snif data
     */
    dnx_data_if_snif_t snif;
} dnx_data_if_t;

/*
 * }
 */

/*}*/
#else     /*DNX_DATA_H_*/
/*{*/
#ifndef DNX_DATA_INTERNAL
/*{*/
#error "dnx_data file might include any header files, therfore header files must not include it.\nAny include to dnx_data must be from 'c' file"
/*}*/
#endif /*DNX_DATA_INTERNAL*/
/*}*/
#endif /*_DNX_DATA_H_*/
/* *INDENT-ON* */
