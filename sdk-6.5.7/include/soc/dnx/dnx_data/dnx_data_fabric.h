/** \file dnx_data_fabric.h
 * 
 * MODULE DATA INTERFACE - 
 * 
 * Device Data
 * SW component that maintains per device data
 * The data is static and won't be changed after device initialization.
 *     
 * Supported data types:
 *     - Define             - a 'uint32' number (a max value for all devices is maintained)
 *     - feature            - 1 bit per each feature (supported/not supported) - support soc properties 
 *     - table              - the data is accessed with keys and/or can maintain multiple values and/or set by soc property
 *     - numeric            - a 'uint32' number that support soc properties
 * 
 * User interface for DNX DATA component can be found in "dnx_data_if.h" and "dnx_data_if_#module#.h"
 * 
 * Adding the data is done via XMLs placed in "tools/autocoder/DeviceData/dnx/.." 
 * "How to" User Guide can be found in confluence. 
 *        
 *     
 * 
 * AUTO-GENERATED BY AUTOCODER!
 * DO NOT EDIT THIS FILE!
 */
/* *INDENT-OFF* */
/*
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 */
#ifndef _DNX_DATA_FABRIC_H_
/*{*/
#define _DNX_DATA_FABRIC_H_
/*
 * INCLUDE FILES:
 * {
 */
#include <soc/dnx/dnx_data/dnx_data_max_fabric.h>
/*
 * }
 */

/*!
* \brief This file is only used by DNX (JR2 family). Including it by
* software that is not specific to DNX is an error.
*/
#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/*
 * MODULE FUNCTIONS:
 * {
 */
/**
 * \brief Init default data structure - dnx_data_if_fabric
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 * \par INDIRECT INPUT:
 *   * None
 * \par DIRECT OUTPUT:
 *     rv - see 'shr_error_e
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_data_if_fabric_init(
    int unit);

/*
 * }
 */

/*
 * SUBMODULE  - LINKS:
 * data about fabric links
 * {
 */
/*
 * Table value structure
 */
/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    dnx_data_fabric_links_feature_nof
} dnx_data_fabric_links_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feauture - disabled/enabled
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 *   \param [in] feature - feature to get (see enum defintion for more details
 * \par INDIRECT INPUT:
 *   device data - module global data
 * \par DIRECT OUTPUT:
 *     is_supported - returns 1 iff supported and 0 otherwise
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_links_feature_get_f) (
    int unit,
    dnx_data_fabric_links_feature_e feature);

/**
 * \brief returns define data of nof_links
 * Module - 'fabric', Submodule - 'links', data - 'nof_links'
 * nof of fabric links
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     nof_links - the required data value
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_links_nof_links_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - LINKS:
 * {
 */
/**
 * \brief Interface for fabric links data
 */
typedef struct
{
    /**
     * get submodule feauture - disabled/enabled
     */
    dnx_data_fabric_links_feature_get_f feature_get;
    /**
     * returns define data of nof_links
     */
    dnx_data_fabric_links_nof_links_get_f nof_links_get;
} dnx_data_if_fabric_links_t;

/*
 * }
 */

/*
 * SUBMODULE  - THRESHOLDS:
 * default values for threholds
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule thresholds table dch_default
 * Table info:
 * set of threholds
 */
typedef struct
{
    /**
     * gci th level 0
     */
    uint32 gci0;
    /**
     * gci th level 1
     */
    uint32 gci1;
    /**
     * gci th level 2
     */
    uint32 gci2;
    /**
     * rci th level 0
     */
    uint32 rci0;
    /**
     * rci th level 1
     */
    uint32 rci1;
    /**
     * rci th level 2
     */
    uint32 rci2;
} dnx_data_fabric_thresholds_dch_default_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{
    /**
     * Does threshold per severity supported?
     */
    dnx_data_fabric_thresholds_severity_supported,
    /**
     * Does threshold per mode supported?
     */
    dnx_data_fabric_thresholds_mode_supported,

    /**
     * Must be last one!
     */
    dnx_data_fabric_thresholds_feature_nof
} dnx_data_fabric_thresholds_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feauture - disabled/enabled
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 *   \param [in] feature - feature to get (see enum defintion for more details
 * \par INDIRECT INPUT:
 *   device data - module global data
 * \par DIRECT OUTPUT:
 *     is_supported - returns 1 iff supported and 0 otherwise
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_thresholds_feature_get_f) (
    int unit,
    dnx_data_fabric_thresholds_feature_e feature);

/**
 * \brief returns define data of default_severity
 * Module - 'fabric', Submodule - 'thresholds', data - 'default_severity'
 * default severity for thresholds
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     default_severity - the required data value
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_thresholds_default_severity_get_f) (
    int unit);

/**
 * \brief returns define data of default_mode
 * Module - 'fabric', Submodule - 'thresholds', data - 'default_mode'
 * default mode for thresholds
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     default_mode - the required data value
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_thresholds_default_mode_get_f) (
    int unit);

/**
 * \brief get table dch_default info
 * set of threholds
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 *   \param [in] severity - severity thresholds
 *   \param [in] mode - mode of threholds according to fabric pipes
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     dch_default - returns the relevant entry values grouped in struct - see dnx_data_fabric_thresholds_dch_default_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_fabric_thresholds_dch_default_t *(
    *dnx_data_fabric_thresholds_dch_default_get_f) (
    int unit,
    int severity,
    int mode);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - THRESHOLDS:
 * {
 */
/**
 * \brief Interface for fabric thresholds data
 */
typedef struct
{
    /**
     * get submodule feauture - disabled/enabled
     */
    dnx_data_fabric_thresholds_feature_get_f feature_get;
    /**
     * returns define data of default_severity
     */
    dnx_data_fabric_thresholds_default_severity_get_f default_severity_get;
    /**
     * returns define data of default_mode
     */
    dnx_data_fabric_thresholds_default_mode_get_f default_mode_get;
    /**
     * get table dch_default info
     */
    dnx_data_fabric_thresholds_dch_default_get_f dch_default_get;
} dnx_data_if_fabric_thresholds_t;

/*
 * }
 */

/*
 * SUBMODULE  - CELL:
 * cell attributes
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule cell table pcp
 * Table info:
 * packet cell packing
 */
typedef struct
{
    /**
     * enable/disable packet cell packing
     */
    uint32 enable;
} dnx_data_fabric_cell_pcp_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    dnx_data_fabric_cell_feature_nof
} dnx_data_fabric_cell_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feauture - disabled/enabled
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 *   \param [in] feature - feature to get (see enum defintion for more details
 * \par INDIRECT INPUT:
 *   device data - module global data
 * \par DIRECT OUTPUT:
 *     is_supported - returns 1 iff supported and 0 otherwise
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_cell_feature_get_f) (
    int unit,
    dnx_data_fabric_cell_feature_e feature);

/**
 * \brief returns define data of nof_priorities
 * Module - 'fabric', Submodule - 'cell', data - 'nof_priorities'
 * nof of supported fabric priorities
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     nof_priorities - the required data value
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_cell_nof_priorities_get_f) (
    int unit);

/**
 * \brief get table pcp info
 * packet cell packing
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     pcp - returns the relevant entry values grouped in struct - see dnx_data_fabric_cell_pcp_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_fabric_cell_pcp_t *(
    *dnx_data_fabric_cell_pcp_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - CELL:
 * {
 */
/**
 * \brief Interface for fabric cell data
 */
typedef struct
{
    /**
     * get submodule feauture - disabled/enabled
     */
    dnx_data_fabric_cell_feature_get_f feature_get;
    /**
     * returns define data of nof_priorities
     */
    dnx_data_fabric_cell_nof_priorities_get_f nof_priorities_get;
    /**
     * get table pcp info
     */
    dnx_data_fabric_cell_pcp_get_f pcp_get;
} dnx_data_if_fabric_cell_t;

/*
 * }
 */

/*
 * SUBMODULE  - PIPES:
 * pipes attributes
 * {
 */
/*
 * Table value structure
 */
/**
 * \brief Holds values of submodule pipes table nof_pipes
 * Table info:
 * number of actual (configured) pipes
 */
typedef struct
{
    /**
     * see table doc
     */
    uint32 val;
} dnx_data_fabric_pipes_nof_pipes_t;

/**
 * \brief Holds values of submodule pipes table map
 * Table info:
 * map traffic cast X priority to fabric pipe
 */
typedef struct
{
    /**
     * each element represents uc priority pipe
     */
    uint32 uc[DNX_DATA_MAX_FABRIC_CELL_NOF_PRIORITIES];
    /**
     * each element represents mc priority pipe
     */
    uint32 mc[DNX_DATA_MAX_FABRIC_CELL_NOF_PRIORITIES];
} dnx_data_fabric_pipes_map_t;

/**
 * \brief Holds values of submodule pipes table system
 * Table info:
 * system attributes
 */
typedef struct
{
    /**
     * set to 1 if there is a device in the system in multi pipes mode
     */
    uint32 multi_pipe;
} dnx_data_fabric_pipes_system_t;

/*
 * Feature enum
 */
/**
 * \brief 
 * Submodule features
 */
typedef enum
{

    /**
     * Must be last one!
     */
    dnx_data_fabric_pipes_feature_nof
} dnx_data_fabric_pipes_feature_e;

/*
 * Submodule functions typedefs
 */
/**
 * \brief get submodule feauture - disabled/enabled
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - Unit #
 *   \param [in] feature - feature to get (see enum defintion for more details
 * \par INDIRECT INPUT:
 *   device data - module global data
 * \par DIRECT OUTPUT:
 *     is_supported - returns 1 iff supported and 0 otherwise
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef int(
    *dnx_data_fabric_pipes_feature_get_f) (
    int unit,
    dnx_data_fabric_pipes_feature_e feature);

/**
 * \brief returns define data of max_nof_pipes
 * Module - 'fabric', Submodule - 'pipes', data - 'max_nof_pipes'
 * max supported fabric pipes
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     max_nof_pipes - the required data value
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef uint32(
    *dnx_data_fabric_pipes_max_nof_pipes_get_f) (
    int unit);

/**
 * \brief get table nof_pipes info
 * number of actual (configured) pipes
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     nof_pipes - returns the relevant entry values grouped in struct - see dnx_data_fabric_pipes_nof_pipes_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_fabric_pipes_nof_pipes_t *(
    *dnx_data_fabric_pipes_nof_pipes_get_f) (
    int unit);

/**
 * \brief get table map info
 * map traffic cast X priority to fabric pipe
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     map - returns the relevant entry values grouped in struct - see dnx_data_fabric_pipes_map_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_fabric_pipes_map_t *(
    *dnx_data_fabric_pipes_map_get_f) (
    int unit);

/**
 * \brief get table system info
 * system attributes
 * 
 * \par DIRECT INPUT:
 *   \param [in] unit - unit #
 * \par INDIRECT INPUT:
 *   _dnx_data[unit] - module global data
 * \par DIRECT OUTPUT:
 *     system - returns the relevant entry values grouped in struct - see dnx_data_fabric_pipes_system_t
 * \par INDIRECT OUTPUT:
 * \remark
 *   * None
 * \see
 *   * None
 */
typedef const dnx_data_fabric_pipes_system_t *(
    *dnx_data_fabric_pipes_system_get_f) (
    int unit);

/*
 * SUBMODULE INTERFACE DNX_DATA_IF_FABRIC - PIPES:
 * {
 */
/**
 * \brief Interface for fabric pipes data
 */
typedef struct
{
    /**
     * get submodule feauture - disabled/enabled
     */
    dnx_data_fabric_pipes_feature_get_f feature_get;
    /**
     * returns define data of max_nof_pipes
     */
    dnx_data_fabric_pipes_max_nof_pipes_get_f max_nof_pipes_get;
    /**
     * get table nof_pipes info
     */
    dnx_data_fabric_pipes_nof_pipes_get_f nof_pipes_get;
    /**
     * get table map info
     */
    dnx_data_fabric_pipes_map_get_f map_get;
    /**
     * get table system info
     */
    dnx_data_fabric_pipes_system_get_f system_get;
} dnx_data_if_fabric_pipes_t;

/*
 * }
 */

/*
 * MODULE INTERFACE DNX_DATA_IF_FABRIC:
 * {
 */
/**
 * \brief Interface for fabric data
 */
typedef struct
{
    /**
     * Interface for fabric links data
     */
    dnx_data_if_fabric_links_t links;
    /**
     * Interface for fabric thresholds data
     */
    dnx_data_if_fabric_thresholds_t thresholds;
    /**
     * Interface for fabric cell data
     */
    dnx_data_if_fabric_cell_t cell;
    /**
     * Interface for fabric pipes data
     */
    dnx_data_if_fabric_pipes_t pipes;
} dnx_data_if_fabric_t;

/*
 * }
 */
/*
 * Extern:
 * {
 */
/**
 * \brief
 * Module structured interface - used to get the required data stored in dnx data
 */
extern dnx_data_if_fabric_t dnx_data_fabric;
/*
 * }
 */
/*}*/
#else     /*DNX_DATA_FABRIC_H_*/
/*{*/
#ifndef DNX_DATA_INTERNAL
/*{*/
#error "dnx_data_fabric file might include any header files, therfore header files must not include it.\nAny include to dnx_data_fabric must be from 'c' file"
/*}*/
#endif /*DNX_DATA_INTERNAL*/
/*}*/
#endif /*_DNX_DATA_FABRIC_H_*/
/* *INDENT-ON* */
