/** \file dbal_defines_tables.h
 * Logical DB enums \n 
 * DO NOT EDIT THIS FILE!\n 
 * This file is auto-generated.\n 
 * Edits to this file will be lost when it is regenerated.\n 
 * \n 
 * Extracted from xmls: \n 
 * hl_pp_l3_intf.xml\n 
 * hl_pp_vlan.xml\n 
 * hl_tm_crps_definition.xml\n 
 * pemla_definition.xml\n 
 * hl_tables_examples_definition.xml\n 
 * hl_pp_init_cb_wrappers.xml\n 
 * hl_pp_l3.xml\n 
 * mdb_definition.xml\n 
 * hl_pp_stg_stp.xml\n 
 * hl_pp_port_tpid.xml\n 
 * hl_pp_vlan_translate.xml\n 
 * sw_tables_examples_definition.xml\n 
 * hl_tm_snif_definition.xml\n 
 * hl_pp_vlan_port.xml\n 
 * hl_pp_port_pp.xml\n 
 * sw_pp_bridge_definition.xml\n 
 * sw_pp_algo_gpm.xml\n 
 */
/*
 * $Id: $
 $Copyright: (c) 2016 Broadcom.
 Broadcom Proprietary and Confidential. All rights reserved.$
 * 
 */
#ifndef DBAL_DEFINES_TABLES_H_INCLUDED
/*
 * {
 */
#define DBAL_DEFINES_TABLES_H_INCLUDED

#define DBAL_TABLES_NOF_OPEN_XMLS (17)

/*
 * }
 */
/**
 * \brief enum for logical tables\n 
 */
typedef enum
{
    /** ARP table  */
    DBAL_TABLE_ARP_BASIC,
    /** Lookup BFIR-ID and FoDo to map LIF.
        Lookup {BFIR-ID(16b),Forwarding-Domain(22b)} in ISEM.
        The result is the BIER-LIF containing FoDo for IPv4/IPv6/Eth forwarding lookup, and Learn-Information
          */
    DBAL_TABLE_BIER_BFER_TERMINATION,
    /** Lookup {Forwarding-Domain(22b)} in ISEM.
        The result is the BIER-LIF containing FoDo for IPv4/IPv6/Eth forwarding lookup, and Learn-Information  */
    DBAL_TABLE_BIER_BFER_TERM_SUBDOMAIN_ONLY,
    /** Lookup BIER header parameters in Lem to resolve Destination (BIFT-Base-Address)  */
    DBAL_TABLE_BIER_TI_FORWARD,
    /** Holds all the MyMac prefixes (38b).  */
    DBAL_TABLE_CONTEXT_RES_ATTRIBUTES,
    /** This table configure the crps interface adapter for IRPP source  */
    DBAL_TABLE_CRPS_CRPS_IRPP_INTERFACE_CFG,
    /** This table reprsents the CRPS engine configuration  */
    DBAL_TABLE_CRPS_ENGINE_CFG,
    /** This table initiate and enable the engine activity  */
    DBAL_TABLE_CRPS_ENGINE_ENABLE,
    /** This table reprsents the CRPS engine scan (eviction) configuration  */
    DBAL_TABLE_CRPS_ENGINE_SCAN_CFG,
    /** This table configure the Object-Type-Offset of the engine. offset per type  */
    DBAL_TABLE_CRPS_ENGINE_TYPE_OFFSET,
    /** This table configure the crps interface adapter for ERPP source  */
    DBAL_TABLE_CRPS_ERPP_INTERFACE_CFG,
    /** This table configure the crps interface adapter for ETPP source  */
    DBAL_TABLE_CRPS_ETPP_INTERFACE_CFG,
    /** This table configure the expansion mapping per engine  */
    DBAL_TABLE_CRPS_EXPANSION_DATA_MAPPING,
    /** This table configure the crps interface adapter for CGM source  */
    DBAL_TABLE_CRPS_ITM_INTERFACE_CFG,
    /** This table configure the crps interface adapter for ITPP source  */
    DBAL_TABLE_CRPS_ITTP_INTERFACE_CFG,
    /** Empty  */
    DBAL_TABLE_EEDB_OUT_AC,
    /** Egress default AC profile properties, used in case of no match for Out-AC  */
    DBAL_TABLE_EGRESS_DEFAULT_AC_PROF,
    /** Egress LLVP classification table, used for VLAN editing  */
    DBAL_TABLE_EGRESS_LLVP_CLASSIFICATION,
    /** Egress PP port actions  */
    DBAL_TABLE_EGRESS_PORT,
    /** Egress STG state per PP port and STG-ID  */
    DBAL_TABLE_EGRESS_PORT_STP,
    /** Egress VLAN table bitmap actions, used for VLAN membership  */
    DBAL_TABLE_EGRESS_VLAN_BMP,
    /** Egress VSI Information, Result in this AppDB is hard coded no ARR  */
    DBAL_TABLE_EG_VSI_INFO,
    /** includes enablers vectors for VSI profile  */
    DBAL_TABLE_ENABLERS_VECTORS,
    /** Properties per ESEM access command. The access command is a port property.  */
    DBAL_TABLE_ESEM_ACCESS_CMD_PROP,
    /** Lookup VD x VSI in the ESEM to detrmine the OutAC  */
    DBAL_TABLE_ESEM_OUT_AC,
    /** Expanding PP-CUD-MC Pointer and PP-CUD-ACL Pointer  */
    DBAL_TABLE_ETM_PP_DESCRIPTOR_EXPANSION,
    /** EVE Commands table in the ETPP encap stages  */
    DBAL_TABLE_EVEC_ENCAP_STAGE,
    /** EVE Commands table in the Egress forwarding stage  */
    DBAL_TABLE_EVEC_FRWRD_STAGE,
    /** Mapping table to an EVEC index  */
    DBAL_TABLE_EVEC_MAPPING,
    /**  example for hard logic table with multiple results  */
    DBAL_TABLE_EXAMPLE_FOR_HL_MULTIPLE_RESULT,
    /**  example for hard logic table with multiple results  */
    DBAL_TABLE_EXAMPLE_FOR_HL_MULTIPLE_RESULT_WITH_REGISTER,
    /** mexample for hard logic table with memory aliasing  */
    DBAL_TABLE_EXAMPLE_FOR_HL_WITH_MEMORY_ALIASING,
    /** not real table  */
    DBAL_TABLE_EXAMPLE_TABLE_FOR_EMPTY_KEY,
    /** not real table, example for hl with sw  */
    DBAL_TABLE_EXAMPLE_TABLE_FOR_HL_WITH_SW_FIELD,
    /** not real table  */
    DBAL_TABLE_EXAMPLE_TABLE_FOR_MUL_INSTANCES,
    /** not real table  */
    DBAL_TABLE_EXAMPLE_TABLE_FOR_REGISTER_USE,
    DBAL_TABLE_FEC,
    /** sw state table multiple results example  */
    DBAL_TABLE_GLOBAL_INLIF_INFO_EXAMPLE,
    /** Mapping Global-Out-LIF into Local-Out-LIF  */
    DBAL_TABLE_GLOBAL_LIF_EM,
    /** Ingress LLVP classification table, used for VLAN editing  */
    DBAL_TABLE_INGRESS_LLVP_CLASSIFICATION,
    /** Ingress PP Port actions  */
    DBAL_TABLE_INGRESS_PORT,
    /** Ingress STG state per PP port and STG-ID  */
    DBAL_TABLE_INGRESS_PORT_STP,
    /** Ingress VLAN table bitmap actions, used for VLAN membership  */
    DBAL_TABLE_INGRESS_VLAN_BMP,
    DBAL_TABLE_ING_VSI_INFO,
    /** Ingress AC C_VLAN mapping to LIF DB  */
    DBAL_TABLE_IN_AC_C_VLAN_DB,
    DBAL_TABLE_IN_AC_INFO_DB,
    /** Ingress AC S_VLAN x C_VLAN mapping to LIF DB  */
    DBAL_TABLE_IN_AC_S_C_VLAN_DB,
    /** Ingress AC S_VLAN mapping to LIF DB  */
    DBAL_TABLE_IN_AC_S_VLAN_DB,
    DBAL_TABLE_IN_LIF_NON_AC_INFO_DB,
    /** IPv4 {SIP,VTEP_IDX} Tunnel Termination  */
    DBAL_TABLE_IPV4_SIP_VTEP_IDX_TUNNEL_TERMINATION,
    /** IPv4 Tunnel Termination TCAM Key:{VRF, DIP, SIP, IPv4_Additional_Header, Next_Layer_Type}  */
    DBAL_TABLE_IPV4_TUNNEL_TERMINATION_B,
    /**  IPV4 host tables  */
    DBAL_TABLE_IPV4_UNICAST_PRIVATE_HOST,
    /**  IPV6 host tables  */
    DBAL_TABLE_IPV6_UNICAST_PRIVATE_HOST,
    /**  {VRF,G,InLif0} in LEM   */
    DBAL_TABLE_IPv4_MULTICAST_EM_FORWARD,
    /**  {VRF,G,S,InLif0} in KAPS   */
    DBAL_TABLE_IPv4_MULTICAST_PRIVATE_LPM_FORWARD,
    /**  {G,S,InLif0} in KAPS   */
    DBAL_TABLE_IPv4_MULTICAST_PUBLIC_LPM_FORWARD,
    /**  {VRF G,S,InLif0} in TCAM   */
    DBAL_TABLE_IPv4_MULTICAST_TCAM_FORWARD,
    /**  IPV4 private routing entries table.  */
    DBAL_TABLE_IPv4_UNICAST_PRIVATE_LPM_FORWARD,
    /**  IPV4 public routing entries table  */
    DBAL_TABLE_IPv4_UNICAST_PUBLIC_LPM_FORWARD,
    /**  {IPV4 "ACL" in TCAM with result New-VRF}   */
    DBAL_TABLE_IPv4_VRF_DB_TCAM,
    /** IPv4 {VRF,DIP,Additional_Header type} to LIF  */
    DBAL_TABLE_IPv4_VRF_DIP_TUNNEL_TYPE_TO_LIF,
    /** 
        IPv4 {VRF,DIP,Additional_Header type} (1) tunnel termination, or,(2) VTEP_IDX
        VTEP IDX is later used in for {SIP, VTEP_IDX} tunnel termination lookups
          */
    DBAL_TABLE_IPv4_VRF_DIP_TUNNEL_TYPE_TO_LIF_OR_VTEP_IDX,
    /** IPv4 {VRF,SIP,DIP,Additional_Header type} to LIF  */
    DBAL_TABLE_IPv4_VRF_SIP_DIP_TUNNEL_TYPE_TO_LIF,
    /**  IPV6 private routing entries table  */
    DBAL_TABLE_IPv6_UNICAST_PRIVATE_LPM_FORWARD,
    /**  IPV6 public routing entries table  */
    DBAL_TABLE_IPv6_UNICAST_PUBLIC_LPM_FORWARD,
    /** IPV6 "ACL" in TCAM with result New-VRF. SIP is taken 96msb - in order to fit into less than 320n entry  */
    DBAL_TABLE_IPv6_VRF_DB_TCAM,
    /** IVE Commands table in the ERPP and ETPP  */
    DBAL_TABLE_IVEC,
    /** Mapping table to an IVEC index  */
    DBAL_TABLE_IVEC_MAPPING,
    /** Lookup FID X MAC Address in the MACT to detrmine the destination interface ot interface group  */
    DBAL_TABLE_MACT,
    /** Lookup {VID,FID} X MAC Address in the MACT to detrmine the destination interface ot interface group  */
    DBAL_TABLE_MACT_IVL,
    /**  MPLS ILM table, for MPLS labels which are per Platform assigned   */
    DBAL_TABLE_MPLS_FWD,
    /**  MPLS ILM table, for MPLS labels which per I/F of Upstream assigned   */
    DBAL_TABLE_MPLS_FWD_PER_IF_UA,
    /** MPLS Context-Specific label mapping to LIF DB.
        The context for the label lookup is given by the "Extended-FoDO" (24b),
        which is either the In-LIF or another label (in case of upstream assignment)
          */
    DBAL_TABLE_MPLS_TERMINATION_CONTEXT_SPECIFIC_LABEL_DB,
    /** MPLS label mapping to LIF DB  */
    DBAL_TABLE_MPLS_TERMINATION_SINGLE_LABEL_DB,
    /** Holds all the MyMac prefixes (38b).  */
    DBAL_TABLE_MY_MAC_DA_PREFIXES,
    /** switch tpid pemla table  */
    DBAL_TABLE_PEMLA_PARSER_TPID,
    /** RIF basic table  */
    DBAL_TABLE_RIF_BASIC,
    /** includes Routing Profiles  */
    DBAL_TABLE_ROUTING_ENABLERS_PROFILE,
    /** Same interface filtering table  */
    DBAL_TABLE_SAME_INTERFACE_FILTER_TABLE,
    /** This table reprsents all the TM attributes of a snif command(profile)  */
    DBAL_TABLE_SNIF_COMMAND_TABLE,
    /** This table reprsents all the counting attributes of a snif command(profile)  */
    DBAL_TABLE_SNIF_COUNTING_TABLE,
    /** Source address table for ethernet  */
    DBAL_TABLE_SOURCE_ADDERSS_ETHERNET,
    /** sw state table multiple results example  */
    DBAL_TABLE_SW_RESULT_TYPE_EXAMPLE,
    /** sw state gport to pre-FEC forwarding resolution  */
    DBAL_TABLE_SW_STATE_GPORT_TO_FORWARDING_INFO,
    /** sw state sub field table  */
    DBAL_TABLE_SW_STATE_SUB_FIELD_EXAMPLE,
    /** sw state table example 1  */
    DBAL_TABLE_SW_STATE_TABLE_EXAMPLE_1,
    /** sw state table example 2  */
    DBAL_TABLE_SW_STATE_TABLE_EXAMPLE_2,
    /** sw state table - switch tpid temporary table  */
    DBAL_TABLE_SW_STATE_TABLE_SWITCH_TPID_TEMP,
    /** NVGRE TNI translation to Forwarding-Domain  */
    DBAL_TABLE_TNI2FODO,
    /** VxLAN-GPE VNI translation to Forwarding-Domain  */
    DBAL_TABLE_VNI2FODO,
    DBAL_NOF_TABLES
} dbal_tables_e;
/**
 * \brief enum that represents all the valid values for EXAMPLE_FOR_HL_MULTIPLE_RESULT\n 
 */
typedef enum
{
    /** empty  */
    DBAL_RESULT_TYPE_EXAMPLE_FOR_HL_MULTIPLE_RESULT_RT0,
    /** empty  */
    DBAL_RESULT_TYPE_EXAMPLE_FOR_HL_MULTIPLE_RESULT_RT1,
    /** empty  */
    DBAL_RESULT_TYPE_EXAMPLE_FOR_HL_MULTIPLE_RESULT_RT2,
    /** Number of enum valid values for EXAMPLE_FOR_HL_MULTIPLE_RESULT  */
    DBAL_NOF_RESULT_TYPE_EXAMPLE_FOR_HL_MULTIPLE_RESULT
} dbal_enum_value_result_type_example_for_hl_multiple_result_e;
/**
 * \brief enum that represents all the valid values for EXAMPLE_FOR_HL_MULTIPLE_RESULT_WITH_REGISTER\n 
 */
typedef enum
{
    /** empty  */
    DBAL_RESULT_TYPE_EXAMPLE_FOR_HL_MULTIPLE_RESULT_WITH_REGISTER_RT0,
    /** empty  */
    DBAL_RESULT_TYPE_EXAMPLE_FOR_HL_MULTIPLE_RESULT_WITH_REGISTER_RT1,
    /** Number of enum valid values for EXAMPLE_FOR_HL_MULTIPLE_RESULT_WITH_REGISTER  */
    DBAL_NOF_RESULT_TYPE_EXAMPLE_FOR_HL_MULTIPLE_RESULT_WITH_REGISTER
} dbal_enum_value_result_type_example_for_hl_multiple_result_with_register_e;
/**
 * \brief enum that represents all the valid values for IN_AC_INFO_DB\n 
 */
typedef enum
{
    /** AC In-LIF for P2P, standard entry  */
    DBAL_RESULT_TYPE_IN_AC_INFO_DB_IN_LIF_FORMAT_AC_P2P,
    /** AC In-LIF for Multipoint, standard entry  */
    DBAL_RESULT_TYPE_IN_AC_INFO_DB_IN_LIF_FORMAT_AC_MP,
    /** AC In-LIF for P2P, Larger entry  */
    DBAL_RESULT_TYPE_IN_AC_INFO_DB_IN_LIF_FORMAT_AC_P2P_LARGE,
    /** AC In-LIF for Multipoint, Larger entry  */
    DBAL_RESULT_TYPE_IN_AC_INFO_DB_IN_LIF_FORMAT_AC_MP_LARGE,
    /** Number of enum valid values for IN_AC_INFO_DB  */
    DBAL_NOF_RESULT_TYPE_IN_AC_INFO_DB
} dbal_enum_value_result_type_in_ac_info_db_e;
/**
 * \brief enum that represents all the valid values for IN_LIF_NON_AC_INFO_DB\n 
 */
typedef enum
{
    /** LSP In-LIF format  */
    DBAL_RESULT_TYPE_IN_LIF_NON_AC_INFO_DB_IN_LIF_FORMAT_LSP,
    /** DRCH In-LIF format  */
    DBAL_RESULT_TYPE_IN_LIF_NON_AC_INFO_DB_IN_LIF_FORMAT_DRCH,
    /** BIER In-LIF format  */
    DBAL_RESULT_TYPE_IN_LIF_NON_AC_INFO_DB_IN_LIF_FORMAT_BIER,
    /** IPv4 Tunnel In-LIF format  */
    DBAL_RESULT_TYPE_IN_LIF_NON_AC_INFO_DB_IN_LIF_FORMAT_IPV4_TUNNEL,
    /** Number of enum valid values for IN_LIF_NON_AC_INFO_DB  */
    DBAL_NOF_RESULT_TYPE_IN_LIF_NON_AC_INFO_DB
} dbal_enum_value_result_type_in_lif_non_ac_info_db_e;
/**
 * \brief enum that represents all the valid values for ING_VSI_INFO\n 
 */
typedef enum
{
    /** Empty  */
    DBAL_RESULT_TYPE_ING_VSI_INFO_BASIC_FORMAT,
    /** Empty  */
    DBAL_RESULT_TYPE_ING_VSI_INFO_WITH_STATS,
    /** Number of enum valid values for ING_VSI_INFO  */
    DBAL_NOF_RESULT_TYPE_ING_VSI_INFO
} dbal_enum_value_result_type_ing_vsi_info_e;
/**
 * \brief enum that represents all the valid values for MPLS_FWD\n 
 */
typedef enum
{
    /** empty  */
    DBAL_RESULT_TYPE_MPLS_FWD_FWD_DEST_OUTLIF,
    /** empty  */
    DBAL_RESULT_TYPE_MPLS_FWD_FWD_DEST_EEI,
    /** empty  */
    DBAL_RESULT_TYPE_MPLS_FWD_FWD_DEST_OUTLIF_STAT,
    /** empty  */
    DBAL_RESULT_TYPE_MPLS_FWD_FWD_DEST_EEI_STAT,
    /** Number of enum valid values for MPLS_FWD  */
    DBAL_NOF_RESULT_TYPE_MPLS_FWD
} dbal_enum_value_result_type_mpls_fwd_e;
/**
 * \brief enum that represents all the valid values for MPLS_FWD_PER_IF_UA\n 
 */
typedef enum
{
    /** empty  */
    DBAL_RESULT_TYPE_MPLS_FWD_PER_IF_UA_FWD_DEST_OUTLIF,
    /** empty  */
    DBAL_RESULT_TYPE_MPLS_FWD_PER_IF_UA_FWD_DEST_EEI,
    /** empty  */
    DBAL_RESULT_TYPE_MPLS_FWD_PER_IF_UA_FWD_DEST_OUTLIF_STAT,
    /** empty  */
    DBAL_RESULT_TYPE_MPLS_FWD_PER_IF_UA_FWD_DEST_EEI_STAT,
    /** Number of enum valid values for MPLS_FWD_PER_IF_UA  */
    DBAL_NOF_RESULT_TYPE_MPLS_FWD_PER_IF_UA
} dbal_enum_value_result_type_mpls_fwd_per_if_ua_e;
/**
 * \brief enum that represents all the valid values for MACT\n 
 */
typedef enum
{
    /** Empty  */
    DBAL_RESULT_TYPE_MACT_NO_OUTLIF,
    /** Empty  */
    DBAL_RESULT_TYPE_MACT_SINGLE_OUTLIF,
    /** Number of enum valid values for MACT  */
    DBAL_NOF_RESULT_TYPE_MACT
} dbal_enum_value_result_type_mact_e;
/**
 * \brief enum that represents all the valid values for MACT_IVL\n 
 */
typedef enum
{
    /** Empty  */
    DBAL_RESULT_TYPE_MACT_IVL_NO_OUTLIF,
    /** Empty  */
    DBAL_RESULT_TYPE_MACT_IVL_SINGLE_OUTLIF,
    /** Number of enum valid values for MACT_IVL  */
    DBAL_NOF_RESULT_TYPE_MACT_IVL
} dbal_enum_value_result_type_mact_ivl_e;
/**
 * \brief enum that represents all the valid values for IPV4_UNICAST_PRIVATE_HOST\n 
 */
typedef enum
{
    /** Destination and Out LIF  */
    DBAL_RESULT_TYPE_IPV4_UNICAST_PRIVATE_HOST_DEST_OUTLIF,
    /** Destination and Out LIF with statistic.  */
    DBAL_RESULT_TYPE_IPV4_UNICAST_PRIVATE_HOST_DEST_OUTLIF_WITH_STAT,
    /** Destination with MPLS out label with statistic.  */
    DBAL_RESULT_TYPE_IPV4_UNICAST_PRIVATE_HOST_DEST_MPLS_OUT_WITH_STAT,
    /** Destination with MPLS out label  */
    DBAL_RESULT_TYPE_IPV4_UNICAST_PRIVATE_HOST_DEST_MPLS_OUT,
    /** Only destination  */
    DBAL_RESULT_TYPE_IPV4_UNICAST_PRIVATE_HOST_DESTINATION_ONLY,
    /** Number of enum valid values for IPV4_UNICAST_PRIVATE_HOST  */
    DBAL_NOF_RESULT_TYPE_IPV4_UNICAST_PRIVATE_HOST
} dbal_enum_value_result_type_ipv4_unicast_private_host_e;
/**
 * \brief enum that represents all the valid values for IPV6_UNICAST_PRIVATE_HOST\n 
 */
typedef enum
{
    /** Destination and Out LIF  */
    DBAL_RESULT_TYPE_IPV6_UNICAST_PRIVATE_HOST_DEST_OUTLIF,
    /** Destination and Out LIF with statistic.  */
    DBAL_RESULT_TYPE_IPV6_UNICAST_PRIVATE_HOST_DEST_OUTLIF_WITH_STAT,
    /** Destination with MPLS out label with statistic.  */
    DBAL_RESULT_TYPE_IPV6_UNICAST_PRIVATE_HOST_DEST_MPLS_OUT_WITH_STAT,
    /** Destination with MPLS out label  */
    DBAL_RESULT_TYPE_IPV6_UNICAST_PRIVATE_HOST_DEST_MPLS_OUT,
    /** Only destination  */
    DBAL_RESULT_TYPE_IPV6_UNICAST_PRIVATE_HOST_DESTINATION_ONLY,
    /** Number of enum valid values for IPV6_UNICAST_PRIVATE_HOST  */
    DBAL_NOF_RESULT_TYPE_IPV6_UNICAST_PRIVATE_HOST
} dbal_enum_value_result_type_ipv6_unicast_private_host_e;
/**
 * \brief enum that represents all the valid values for ETM_PP_DESCRIPTOR_EXPANSION\n 
 */
typedef enum
{
    /** Empty  */
    DBAL_RESULT_TYPE_ETM_PP_DESCRIPTOR_EXPANSION_MC_1_CUD,
    /** Empty  */
    DBAL_RESULT_TYPE_ETM_PP_DESCRIPTOR_EXPANSION_MC_2_CUD,
    /** Number of enum valid values for ETM_PP_DESCRIPTOR_EXPANSION  */
    DBAL_NOF_RESULT_TYPE_ETM_PP_DESCRIPTOR_EXPANSION
} dbal_enum_value_result_type_etm_pp_descriptor_expansion_e;
/**
 * \brief enum that represents all the valid values for SW_STATE_GPORT_TO_FORWARDING_INFO\n 
 */
typedef enum
{
    /** Destination  */
    DBAL_RESULT_TYPE_SW_STATE_GPORT_TO_FORWARDING_INFO_DEST_ONLY,
    /** Destination and outlif  */
    DBAL_RESULT_TYPE_SW_STATE_GPORT_TO_FORWARDING_INFO_DEST_OUTLIF,
    /** Destination with EEI  */
    DBAL_RESULT_TYPE_SW_STATE_GPORT_TO_FORWARDING_INFO_DEST_EEI,
    /** Number of enum valid values for SW_STATE_GPORT_TO_FORWARDING_INFO  */
    DBAL_NOF_RESULT_TYPE_SW_STATE_GPORT_TO_FORWARDING_INFO
} dbal_enum_value_result_type_sw_state_gport_to_forwarding_info_e;
/**
 * \brief enum that represents all the valid values for GLOBAL_INLIF_INFO_EXAMPLE\n 
 */
typedef enum
{
    /** description vpls  */
    DBAL_RESULT_TYPE_GLOBAL_INLIF_INFO_EXAMPLE_VPLS,
    /** description vpws  */
    DBAL_RESULT_TYPE_GLOBAL_INLIF_INFO_EXAMPLE_VPWS,
    /** Number of enum valid values for GLOBAL_INLIF_INFO_EXAMPLE  */
    DBAL_NOF_RESULT_TYPE_GLOBAL_INLIF_INFO_EXAMPLE
} dbal_enum_value_result_type_global_inlif_info_example_e;
/**
 * \brief enum that represents all the valid values for SW_RESULT_TYPE_EXAMPLE\n 
 */
typedef enum
{
    /** result type 1  */
    DBAL_RESULT_TYPE_SW_RESULT_TYPE_EXAMPLE_RT1,
    /** result type 2  */
    DBAL_RESULT_TYPE_SW_RESULT_TYPE_EXAMPLE_RT2,
    /** result type 3  */
    DBAL_RESULT_TYPE_SW_RESULT_TYPE_EXAMPLE_RT3,
    /** Number of enum valid values for SW_RESULT_TYPE_EXAMPLE  */
    DBAL_NOF_RESULT_TYPE_SW_RESULT_TYPE_EXAMPLE
} dbal_enum_value_result_type_sw_result_type_example_e;

#endif /* DBAL_DEFINES_TABLES_H_INCLUDED */
