/* $Id: $
 * 
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef _SHR_LAG_ACCESS_H_
#define _SHR_LAG_ACCESS_H_

#ifdef BCM_DNX_SUPPORT
#include <soc/dnx/swstate/types/lag_types.h>
#include <soc/dnx/swstate/sw_state_defs.h>

/********************************* access calbacks definitions ***************************************/
/* this set of callbacks, are the callbacks used in the access calbacks struct '<module_name>_cbs_t' */
/*  to access the data in 'sw_state_t'.                                                              */
/* the calbacks are inserted into the access struct by '<module_name>_access_init'.                  */
/*****************************************************************************************************/

/* implemented by: lag_state_init */
typedef int (*lag_state_init_cb)(
    int unit);

/* implemented by: lag_state_is_init */
typedef int (*lag_state_is_init_cb)(
    int unit, uint8 *is_init);

/* implemented by: lag_state_deinit */
typedef int (*lag_state_deinit_cb)(
    int unit);

/* implemented by: lag_state_in_use_set */
typedef int (*lag_state_in_use_set_cb)(
    int unit, int in_use_idx_0, uint8 in_use);

/* implemented by: lag_state_in_use_get */
typedef int (*lag_state_in_use_get_cb)(
    int unit, int in_use_idx_0, uint8 *in_use);

/* implemented by: lag_state_local_to_reassembly_context_set */
typedef int (*lag_state_local_to_reassembly_context_set_cb)(
    int unit, int local_to_reassembly_context_idx_0, uint32 local_to_reassembly_context);

/* implemented by: lag_state_local_to_reassembly_context_get */
typedef int (*lag_state_local_to_reassembly_context_get_cb)(
    int unit, int local_to_reassembly_context_idx_0, uint32 *local_to_reassembly_context);

/*********************************** access calbacks struct ****************************************/
/* this set of structs, rooted at 'sw_state_cbs_t' define the access layer for the entire SW state.*/
/* use this tree to alloc/free/set/get fields in the sw state rooted at 'sw_state_t'.              */
/* NOTE: 'sw_state_t' data should not be accessed directly.                                        */
/***************************************************************************************************/

typedef struct lag_state_in_use_cbs_s {
    lag_state_in_use_set_cb set;
    lag_state_in_use_get_cb get;
} lag_state_in_use_cbs_t;

typedef struct lag_state_local_to_reassembly_context_cbs_s {
    lag_state_local_to_reassembly_context_set_cb set;
    lag_state_local_to_reassembly_context_get_cb get;
} lag_state_local_to_reassembly_context_cbs_t;

typedef struct lag_state_cbs_s {
    lag_state_is_init_cb is_init;
    lag_state_init_cb init;
    lag_state_deinit_cb deinit;
    lag_state_in_use_cbs_t in_use;
    lag_state_local_to_reassembly_context_cbs_t local_to_reassembly_context;
} lag_state_cbs_t;

/*   @..@                                                         */
/*  (----)                                                        */
/* ( >__< )  This is the entry point to lag_stateaccess functions */
/* ^^ ~~ ^^                                                       */
extern lag_state_cbs_t lag_state;


int lag_access_is_init(int unit, uint8 *is_init);
int lag_access_init(int unit);
int lag_access_deinit(int unit);

#endif /* BCM_DNX_SUPPORT*/ 

#endif /* _SHR_LAG_ACCESS_H_ */
