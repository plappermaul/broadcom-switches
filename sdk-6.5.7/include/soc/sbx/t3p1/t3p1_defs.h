
/**
 *
 * $Id: ocm_h.stg,v 1.12 Broadcom SDK $
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 *
 * t3p1_defs.h: Guadalupe2k V1.3 microcode access routines 
 *
 * This file provides the public interface to the Guadalupe2k V1.3
 * microcode.  Only explicitly documented elements (types  & functions)
 * are supported, external interfaces.  Other elements are exported only
 * for debugging convenience.
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef _T3P1_DEFS_H
#define _T3P1_DEFS_H
#if defined(BCM_CALADAN3_SUPPORT) && defined(BCM_CALADAN3_T3P1_SUPPORT) 

/*
 * Memory element enumeration
 * Not public: exported for debugging convenience only
 */
typedef enum soc_sbx_t3p1_memory_id_s {
    SOC_SBX_T3P1_LRP_PORT0_ID,
    SOC_SBX_T3P1_LRP_PORT1_ID,
    SOC_SBX_T3P1_LRP_PORT2_ID,
    SOC_SBX_T3P1_LRP_PORT3_ID,
    SOC_SBX_T3P1_LRP_PORT4_ID,
    SOC_SBX_T3P1_LRP_PORT5_ID,

    SOC_SBX_T3P1_CMU0_PORT_ID,
    SOC_SBX_T3P1_COP0_PORT_ID,
    SOC_SBX_T3P1_BUBBLE_PORT_ID,

    SOC_SBX_T3P1_LRP_PORT6_ID,
    SOC_SBX_T3P1_LRP_PORT7_ID,
    SOC_SBX_T3P1_LRP_PORT8_ID,
    SOC_SBX_T3P1_LRP_PORT9_ID,

    SOC_SBX_T3P1_CMU1_PORT_ID,
    SOC_SBX_T3P1_COP1_PORT_ID,

    SOC_SBX_T3P1_MEMORY_MAX_ID
} soc_sbx_t3p1_memory_id_t;

/*
 * Shared constant enumeration
 * Not public: exported for debugging convenience only
 */
typedef enum soc_sbx_t3p1_constant_id_s {
     SOC_SBX_T3P1_HTYPE_NULL_ID ,
     SOC_SBX_T3P1_HLEN_NULL_ID ,
     SOC_SBX_T3P1_HTYPE_ETYPE_ID ,
     SOC_SBX_T3P1_HLEN_ETYPE_ID ,
     SOC_SBX_T3P1_HTYPE_ETH_ID ,
     SOC_SBX_T3P1_HLEN_ETH_ID ,
     SOC_SBX_T3P1_HTYPE_IETH_ID ,
     SOC_SBX_T3P1_HTYPE_LLC_ID ,
     SOC_SBX_T3P1_HLEN_LLC_ID ,
     SOC_SBX_T3P1_HTYPE_SNAP_ID ,
     SOC_SBX_T3P1_HLEN_SNAP_ID ,
     SOC_SBX_T3P1_HTYPE_VTAG_ID ,
     SOC_SBX_T3P1_HLEN_VTAG_ID ,
     SOC_SBX_T3P1_HTYPE_DVTAG_ID ,
     SOC_SBX_T3P1_HTYPE_MPLS_ID ,
     SOC_SBX_T3P1_HLEN_MPLS_ID ,
     SOC_SBX_T3P1_HTYPE_IPV4_ID ,
     SOC_SBX_T3P1_HLEN_IPV4_ID ,
     SOC_SBX_T3P1_HTYPE_IPV6_ID ,
     SOC_SBX_T3P1_HLEN_IPV6_ID ,
     SOC_SBX_T3P1_HTYPE_UDP_ID ,
     SOC_SBX_T3P1_HLEN_UDP_ID ,
     SOC_SBX_T3P1_HTYPE_TCP_ID ,
     SOC_SBX_T3P1_HLEN_TCP_ID ,
     SOC_SBX_T3P1_HTYPE_ACH_ID ,
     SOC_SBX_T3P1_HLEN_ACH_ID ,
     SOC_SBX_T3P1_HTYPE_PTP_ID ,
     SOC_SBX_T3P1_HLEN_PTP_ID ,
     SOC_SBX_T3P1_HTYPE_MIM_ID ,
     SOC_SBX_T3P1_HLEN_MIM_ID ,
     SOC_SBX_T3P1_HTYPE_ELEN_ID ,
     SOC_SBX_T3P1_HLEN_ELEN_ID ,
     SOC_SBX_T3P1_HTYPE_ERH_ID ,
     SOC_SBX_T3P1_HLEN_ERH_ID ,
     SOC_SBX_T3P1_HTYPE_TMH_ID ,
     SOC_SBX_T3P1_HLEN_TMH_ID ,
     SOC_SBX_T3P1_HTYPE_KSOP_ID ,
     SOC_SBX_T3P1_HLEN_KSOP_ID ,
     SOC_SBX_T3P1_HTYPE_CUSTOM_ID ,
     SOC_SBX_T3P1_HLEN_CUSTOM_ID ,
     SOC_SBX_T3P1_HTYPE_UNKN_ID  ,
    SOC_SBX_T3P1_CONSTANT_MAX_ID
} soc_sbx_t3p1_constant_id_t;
    
/*
 * Global value enumeration
 * Not public: exported for debugging convenience only
 */
typedef enum soc_sbx_t3p1_global_id_s {
     SOC_SBX_T3P1_CONTEXTS_ID ,
     SOC_SBX_T3P1_DEBUG_STREAM_ELEN_ID ,
     SOC_SBX_T3P1_C3_SWS_STATIC_PAGE_ID ,
     SOC_SBX_T3P1_C3_SWS_INGRESS_BUBBLE_SQUEUE_ID ,
     SOC_SBX_T3P1_C3_SWS_FAB_TO_LINE_REDIRECT_QID0_ID ,
     SOC_SBX_T3P1_C3_SWS_FAB_TO_LINE_REDIRECT_QID1_ID ,
     SOC_SBX_T3P1_C3_SWS_EGRESS_BUBBLE_SQUEUE_ID ,
     SOC_SBX_T3P1_C3_SWS_LINE_TO_FAB_REDIRECT_QID0_ID ,
     SOC_SBX_T3P1_C3_SWS_LINE_TO_FAB_REDIRECT_QID1_ID ,
     SOC_SBX_T3P1_INGRESS_REPLICATION_COUNT_ID ,
     SOC_SBX_T3P1_EGRESS_REPLICATION_COUNT_ID ,
     SOC_SBX_T3P1_FLUSH_PORT_ID ,
     SOC_SBX_T3P1_MAC_LIMIT_ID  ,
    SOC_SBX_T3P1_GLOBAL_MAX_ID
} soc_sbx_t3p1_global_id_t;

/*
 * Shared constant accessors
 */

/**
 * Get constant HTYPE_NULL value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_null_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_NULL value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_null_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_ETYPE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_etype_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_ETYPE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_etype_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_ETH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_eth_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_ETH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_eth_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_IETH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_ieth_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_LLC value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_llc_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_LLC value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_llc_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_SNAP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_snap_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_SNAP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_snap_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_VTAG value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_vtag_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_VTAG value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_vtag_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_DVTAG value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_dvtag_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_MPLS value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_mpls_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_MPLS value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_mpls_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_IPV4 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_ipv4_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_IPV4 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_ipv4_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_IPV6 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_ipv6_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_IPV6 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_ipv6_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_UDP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_udp_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_UDP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_udp_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_TCP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_tcp_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_TCP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_tcp_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_ACH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_ach_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_ACH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_ach_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_PTP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_ptp_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_PTP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_ptp_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_MIM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_mim_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_MIM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_mim_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_ELEN value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_elen_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_ELEN value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_elen_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_ERH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_erh_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_ERH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_erh_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_TMH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_tmh_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_TMH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_tmh_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_KSOP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_ksop_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_KSOP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_ksop_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_CUSTOM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_custom_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_CUSTOM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_hlen_custom_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_UNKN value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_htype_unkn_get(int unit, uint32 *vp);


/*
 * Global value accessors
 */


/**
 * Set global CONTEXTS value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_t3p1_contexts_set(int unit, uint32 v);

/**
 * Get global CONTEXTS value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_contexts_get(int unit, uint32 *vp);


/**
 * Set global DEBUG_STREAM_ELEN value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_t3p1_debug_stream_elen_set(int unit, uint32 v);

/**
 * Get global DEBUG_STREAM_ELEN value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_debug_stream_elen_get(int unit, uint32 *vp);


/**
 * Set global C3_SWS_STATIC_PAGE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_t3p1_c3_sws_static_page_set(int unit, uint32 v);

/**
 * Get global C3_SWS_STATIC_PAGE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_c3_sws_static_page_get(int unit, uint32 *vp);


/**
 * Set global C3_SWS_INGRESS_BUBBLE_SQUEUE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_t3p1_c3_sws_ingress_bubble_squeue_set(int unit, uint32 v);

/**
 * Get global C3_SWS_INGRESS_BUBBLE_SQUEUE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_c3_sws_ingress_bubble_squeue_get(int unit, uint32 *vp);


/**
 * Set global C3_SWS_FAB_TO_LINE_REDIRECT_QID0 value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_t3p1_c3_sws_fab_to_line_redirect_qid0_set(int unit, uint32 v);

/**
 * Get global C3_SWS_FAB_TO_LINE_REDIRECT_QID0 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_c3_sws_fab_to_line_redirect_qid0_get(int unit, uint32 *vp);


/**
 * Set global C3_SWS_FAB_TO_LINE_REDIRECT_QID1 value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_t3p1_c3_sws_fab_to_line_redirect_qid1_set(int unit, uint32 v);

/**
 * Get global C3_SWS_FAB_TO_LINE_REDIRECT_QID1 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_c3_sws_fab_to_line_redirect_qid1_get(int unit, uint32 *vp);


/**
 * Set global C3_SWS_EGRESS_BUBBLE_SQUEUE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_t3p1_c3_sws_egress_bubble_squeue_set(int unit, uint32 v);

/**
 * Get global C3_SWS_EGRESS_BUBBLE_SQUEUE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_c3_sws_egress_bubble_squeue_get(int unit, uint32 *vp);


/**
 * Set global C3_SWS_LINE_TO_FAB_REDIRECT_QID0 value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_t3p1_c3_sws_line_to_fab_redirect_qid0_set(int unit, uint32 v);

/**
 * Get global C3_SWS_LINE_TO_FAB_REDIRECT_QID0 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_c3_sws_line_to_fab_redirect_qid0_get(int unit, uint32 *vp);


/**
 * Set global C3_SWS_LINE_TO_FAB_REDIRECT_QID1 value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_t3p1_c3_sws_line_to_fab_redirect_qid1_set(int unit, uint32 v);

/**
 * Get global C3_SWS_LINE_TO_FAB_REDIRECT_QID1 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_c3_sws_line_to_fab_redirect_qid1_get(int unit, uint32 *vp);


/**
 * Set global INGRESS_REPLICATION_COUNT value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_t3p1_ingress_replication_count_set(int unit, uint32 v);

/**
 * Get global INGRESS_REPLICATION_COUNT value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_ingress_replication_count_get(int unit, uint32 *vp);


/**
 * Set global EGRESS_REPLICATION_COUNT value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_t3p1_egress_replication_count_set(int unit, uint32 v);

/**
 * Get global EGRESS_REPLICATION_COUNT value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_egress_replication_count_get(int unit, uint32 *vp);


/**
 * Set global FLUSH_PORT value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_t3p1_flush_port_set(int unit, uint32 v);

/**
 * Get global FLUSH_PORT value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_flush_port_get(int unit, uint32 *vp);


/**
 * Set global MAC_LIMIT value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_t3p1_mac_limit_set(int unit, uint32 v);

/**
 * Get global MAC_LIMIT value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_t3p1_mac_limit_get(int unit, uint32 *vp);



/*
 * Table enumeration
 * Not public: exported for debugging convenience only
 */
typedef enum soc_sbx_t3p1_table_id_s {
    SOC_SBX_T3P1_LAG_TABLE_ID,
    SOC_SBX_T3P1_VLAN_TABLE_ID,
    SOC_SBX_T3P1_IRT_TABLE_ID,
    SOC_SBX_T3P1_OAM_BUBBLE_TABLE_ID,
    SOC_SBX_T3P1_DEMOAGE_TABLE_ID,
    SOC_SBX_T3P1_DEMOAGEID_TABLE_ID,
    SOC_SBX_T3P1_TABLE_MAX_ID
} soc_sbx_t3p1_table_id_t;


/*
 * Entry enumeration
 * Not public: exported for debugging convenience only
 */
typedef enum soc_sbx_t3p1_entry_id_s {
    SOC_SBX_T3P1_LAG_ID,
    SOC_SBX_T3P1_VLAN_ID,
    SOC_SBX_T3P1_IRT_ID,
    SOC_SBX_T3P1_OAM_BUBBLE_ID,
    SOC_SBX_T3P1_DEMOAGE_ID,
    SOC_SBX_T3P1_DEMOAGEID_ID,
    SOC_SBX_T3P1_ENTRY_MAX_ID
} soc_sbx_t3p1_entry_id_t;


#define SOC_SBX_T3P1_TABLE_BANKS_MAX 10
#define SOC_SBX_T3P1_COMPLEX_BANKS_MAX 24
#define SOC_SBX_T3P1_COUNTER_BANKS_MAX 32
#define SOC_SBX_T3P1_POLICER_BANKS_MAX 9

/**
 * Commands for Mem read/write
 * For reference only.
 */
enum {
    OPCODE_READ = 0,
    OPCODE_WRITE = 1
};

/**
 * Pack function for quasi-internal complex table implementation code.
 */
typedef int (*soc_sbx_t3p1_complex_pack_f_t)
   (int unit, void *e, void *b, int bsz);

/*
 * Constant description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_t3p1_constant_desc_s {
    char *name;
} soc_sbx_t3p1_constant_desc_t;

/*
 * Global value description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_t3p1_global_desc_s {
    char *name;
    int   range;
    int   value;
} soc_sbx_t3p1_global_desc_t;

/*
 * Table bank description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_t3p1_table_bank_s {
    sbx_caladan3_ocm_port_e_t memory;
    int mbank;
    int size;
    int width;
    int base;
    int limit;
    int segment;
    int segflags;
} soc_sbx_t3p1_table_bank_t;

/*
 * Table type.
 */
typedef enum soc_sbx_t3p1_table_type_s {
    SOC_SBX_T3P1_ARRAY_TABLE_TYPE  = 0,
    SOC_SBX_T3P1_LPM_TABLE_TYPE    = 1,
    SOC_SBX_T3P1_EML_TABLE_TYPE    = 2,
    SOC_SBX_T3P1_EM32_TABLE_TYPE   = 3
} soc_sbx_t3p1_table_type_t;

/*
 * Table description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_t3p1_table_desc_s {
    char *name;
    int nextaligned;
    int type;
    int nbanks;
    soc_sbx_t3p1_table_bank_t banks[SOC_SBX_T3P1_TABLE_BANKS_MAX];
    /* Complex-only state */
    int b0size;
    void *cstate;
} soc_sbx_t3p1_table_desc_t;

/*
 * Integer format type
 * Not public: exported for debugging convenience only
 */
typedef enum soc_sbx_t3p1_integer_format_s {
    SOC_SBX_T3P1_NATIVE_INTEGER_FORMAT = 0,
    SOC_SBX_T3P1_LE_INTEGER_FORMAT     = 1,
    SOC_SBX_T3P1_BE_INTEGER_FORMAT     = 2
} soc_sbx_t3p1_integer_format_t;

/*
 * Index description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_t3p1_index_desc_s {
    char *name;
    int   pos;
    int   range;
    int   orange;
    int   width;
    int   format;
} soc_sbx_t3p1_index_desc_t;

/*
 * Field description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_t3p1_field_desc_s {
    char *name;
    int   pos;
    int   range;
    int   width;
} soc_sbx_t3p1_field_desc_t;

/*
 * Entry bank description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_t3p1_entry_bank_s {
    int tablebank;
    int width;
    int stridebits;
} soc_sbx_t3p1_entry_bank_t;

/*
 * Entry type
 */
typedef enum soc_sbx_t3p1_entry_type_s {
    SOC_SBX_T3P1_ARRAY_ENTRY_TYPE = 0,
    SOC_SBX_T3P1_ARRAYHOOK_ENTRY_TYPE = 1,
    SOC_SBX_T3P1_EXT_ENTRY_TYPE = 2,
    SOC_SBX_T3P1_LPM_ENTRY_TYPE = 3,
    SOC_SBX_T3P1_EML_ENTRY_TYPE = 4,
    SOC_SBX_T3P1_EM32_ENTRY_TYPE = 5
} soc_sbx_t3p1_entry_type_t;

/*
 * Entry description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_t3p1_entry_desc_s {
    char *name;
    int type;
    soc_sbx_t3p1_table_id_t table;
    int esize;
    int epsize;
    int width_in_words;
    soc_sbx_t3p1_complex_pack_f_t pack;
    int nindexes;
    soc_sbx_t3p1_index_desc_t *indexes;
    int indexeswidth;
    int nfields;
    soc_sbx_t3p1_field_desc_t *fields;
    int totalwidth;
    int nbanks;
    soc_sbx_t3p1_entry_bank_t banks[SOC_SBX_T3P1_TABLE_BANKS_MAX];
} soc_sbx_t3p1_entry_desc_t;

/*
 * Counter bank description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_t3p1_counter_bank_desc_s {
    int memory;
    int mbank;
    int base;
    int size;
} soc_sbx_t3p1_counter_bank_desc_t;

/*
 * Counter description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_t3p1_counter_desc_s {
    char *name;
    int bank;
    int base;
    int size;
} soc_sbx_t3p1_counter_desc_t;

/*
 * Memory bank type
 * Not public: exported for debugging convenience only
 */
typedef enum soc_sbx_t3p1_bank_type_s {
    SOC_SBX_T3P1_TABLE_BANK_TYPE,
    SOC_SBX_T3P1_COUNTER_BANK_TYPE,
    SOC_SBX_T3P1_POLICER_BANK_TYPE
} soc_sbx_t3p1_bank_type_t;

/*
 * Memory bank description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_t3p1_memory_bank_desc_s {
    soc_sbx_t3p1_bank_type_t type;
    int number;
    int bank;
    int nextaligned;
} soc_sbx_t3p1_memory_bank_desc_t;

/*
 * Memory description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_t3p1_memory_desc_s {
    char *name;
    int width;
    int size;
    int dma;
    int descending;
    int reg;
    int alignedlist;
    soc_sbx_t3p1_memory_bank_desc_t *banks;
    int nbanks;
    sbx_caladan3_ocm_port_e_t ocmport;
} soc_sbx_t3p1_memory_desc_t;

/*
 * Table management state structure
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_t3p1_table_manager_s {
    int behost;
    soc_sbx_t3p1_memory_desc_t *memories;
    soc_sbx_t3p1_constant_desc_t *constants;
    soc_sbx_t3p1_global_desc_t *globals;
    int alignedlist;
    soc_sbx_t3p1_table_desc_t *tables;
    soc_sbx_t3p1_index_desc_t *indexes;
    soc_sbx_t3p1_entry_desc_t *entries;
    soc_sbx_t3p1_memory_bank_desc_t *memorybanks;
    int bufsize;
    uint8 *entrydmabuf;
    char *simbuffer;
    uint32 simbuffersize;
    sal_mutex_t dmabufmutex;
} soc_sbx_t3p1_table_manager_t;

/* ***
 * *** Types for public functions
 * ***/

/*
 * Big field types
 */

/** 6 byte type (typedef needed to keep ASE from dying) */
typedef uint8 soc_sbx_t3p1_6_byte_t[6];
/** 7 byte type (typedef needed to keep ASE from dying) */
typedef uint8 soc_sbx_t3p1_7_byte_t[7];

/**
 * Memory parameter structure.
 */
typedef struct soc_sbx_t3p1_memory_params_s {
    int size;   /**< size of memory, in words (-1 means unknown) */
    int width;  /**< width of memory word, in bits */
} soc_sbx_t3p1_memory_params_t;

/**
 * Table bank parameters.
 * 
 * Tables are composed of one or more banks, each of which is a contiguous
 * section of a memory.
 */
typedef struct soc_sbx_t3p1_table_bank_params_s {
    int base;   /**< base address, in memory words */
    int size;   /**< size, in memory words */
    int memory; /**< memory index (also CPU DMA memory port number) */
} soc_sbx_t3p1_table_bank_params_t;

typedef struct soc_sbx_t3p1_lag_s {
    uint32 qid;
    uint32 oi;
} soc_sbx_t3p1_lag_t;
typedef struct soc_sbx_t3p1_vlan_s {
    uint32 qid;
    uint32 oi;
} soc_sbx_t3p1_vlan_t;
typedef struct soc_sbx_t3p1_irt_s {
    uint32 vlan;
    uint32 ftidx;
    uint32 mirror;
    uint32 usevlan;
    uint32 useftidx;
    uint32 copy;
    uint32 dp;
    uint32 cos;
    uint32 fcos;
    uint32 usedp;
    uint32 usecos;
    uint32 policer;
    uint32 typedpolice;
    uint32 mefcos;
    uint32 mef;
} soc_sbx_t3p1_irt_t;
typedef struct soc_sbx_t3p1_oam_bubble_s {
    uint32 bubble_mode;
    uint32 je;
    uint32 i;
    uint32 bubble_stream;
    uint32 t;
    uint32 interval_index;
    uint32 reserved;
    uint32 count;
    uint32 timeout;
} soc_sbx_t3p1_oam_bubble_t;
typedef struct soc_sbx_t3p1_demoage_s {
    uint32 age;
    uint32 age_valid;
} soc_sbx_t3p1_demoage_t;
typedef struct soc_sbx_t3p1_demoageid_s {
    uint32 age_id;
} soc_sbx_t3p1_demoageid_t;


/* Parse an integer */
int soc_sbx_t3p1_read(char *a, int range, uint32 *vp);
/* Read an arbitrarily large value from shell command arguments */
int soc_sbx_t3p1_big_value_read(uint8 *v,
                int width, int noarg0, int argc, char **argv);

/* Read a 32 bit value from shell command arguments */
int soc_sbx_t3p1_value_read(uint32 *v,
                int range, int noarg0, int argc, char **argv);

/* Print an integer */
int soc_sbx_t3p1_print(int range, uint32 v);

/* Get a constant value */
int soc_sbx_t3p1_constant_get(int unit, char *sym, uint32 *vp);

/* Set a global value into the running microcode */
int soc_sbx_t3p1_global_set(int unit, char *sym, uint32 v);

/* Get a global value */
int soc_sbx_t3p1_global_get(int unit, char *sym, uint32 *vp);

/* Insert a bit string into a buffer */
void soc_sbx_t3p1_insert(uint8 *b,
                int bbe, int pos, int width,
                uint8 *b0, int b0be, int swab);

/* OR a bit string into a buffer */
void soc_sbx_t3p1_insert_or(uint8 *b,
                int bbe, int pos, int width,
                uint8 *b0, int b0be, int swab);

/*
 * Extract a bit string into a buffer 
 *
 * b (source) and b0 (destination) can overlap as long as b >= b0 and
 * swab == 0.  This behavior is exploited by the entry_read_write function
 */
void soc_sbx_t3p1_extract(uint8 *b,
                int bbe, int pos, int width,
                uint8 *b0, int b0be, int swab);

/* Read or write an entry */
int soc_sbx_t3p1_entry_read_write(int unit, int read, int idx,
                 soc_sbx_t3p1_entry_desc_t *ed);

int soc_sbx_t3p1_entry_generic_fast_word_set(int unit,
                soc_sbx_t3p1_field_desc_t *fd,
                soc_sbx_t3p1_entry_desc_t *ed,
                int startvindex,
                int endvindex,
                int *sets,
                uint32 *vs);

int soc_sbx_t3p1_entry_generic_fast_small_set(int unit,
                soc_sbx_t3p1_field_desc_t *fd,
                soc_sbx_t3p1_entry_desc_t *ed,
                int startvindex,
                int endvindex,
                int *sets,
                uint32 *vs);

int soc_sbx_t3p1_entry_generic_fast_set(int unit,
                soc_sbx_t3p1_field_desc_t *fd,
                soc_sbx_t3p1_entry_desc_t *ed,
                int startvindex,
                int endvindex,
                int *sets,
                uint32 *vs);
int soc_sbx_t3p1_entry_generic_fast_word_get(int unit,
                soc_sbx_t3p1_field_desc_t *fd,
                soc_sbx_t3p1_entry_desc_t *ed,
                int startvindex,
                int endvindex,
                uint32 *vs);

int soc_sbx_t3p1_entry_generic_fast_small_get(int unit,
                soc_sbx_t3p1_field_desc_t *fd,
                soc_sbx_t3p1_entry_desc_t *ed,
                int startvindex,
                int endvindex,
                uint32 *vs);
int soc_sbx_t3p1_entry_generic_fast_get(int unit,
                soc_sbx_t3p1_field_desc_t *fd,
                soc_sbx_t3p1_entry_desc_t *ed,
                int startvindex,
                int endvindex,
                uint32 *vs);
/* Format a microcode package symbol (for get or set) */
void soc_sbx_t3p1_ucode_symbol_format(
                char *sym, int symlen,
                char *s0, char *s1, int d, char *s2, char *s3);

/* Get a symbol from the microcode package */
int soc_sbx_t3p1_ucode_get(int unit,
                char *sym, int symlen, int *v,
                char *s0, char *s1, int d, char *s2, char *s3);

/* Set a symbol from the microcode package */
int soc_sbx_t3p1_ucode_set(int unit,
                char *sym, int symlen, int v,
                char *s0, char *s1, int d, char *s2, char *s3);
/* Find an entry index from a name */
int soc_sbx_t3p1_index_find(
                soc_sbx_t3p1_entry_desc_t *ed, char *a);

/* Read a sequence of index arguments */
int soc_sbx_t3p1_indexes_read(void **idxs,
                soc_sbx_t3p1_entry_desc_t *ed, int argc, char **argv);

/* Print a sequence of indexes */
void soc_sbx_t3p1_indexes_print(void **indexpointers,
                soc_sbx_t3p1_entry_desc_t *ed);

/* Parse range arguments with optional flags */
int soc_sbx_t3p1_range_parse(int argc, char **argv,
                int *lower, int *upper,
                int *f0, char *f0name,
                int *f1, char *f1name,
                int *f2, char *f2name);
/* Find an entry field from a name */
int soc_sbx_t3p1_field_find(
                soc_sbx_t3p1_entry_desc_t *ed, char *a);

/* Update the base of a table bank */
int soc_sbx_t3p1_table_bank_base_set(int unit,
                int tid, int bank, int base);

/* Get the table given bank segment and address */
int soc_sbx_t3p1_table_bank_get(soc_sbx_t3p1_table_manager_t *tm, 
                   sbx_caladan3_ocm_port_e_t port, int segment, int addr,
                   soc_sbx_t3p1_table_bank_t **bank)
;  

/* Get the ocm port given a memory  */
void soc_sbx_t3p1_ocm_port_get(int mid, sbx_caladan3_ocm_port_e_t *ocmport);  

/* Sets a memory bank base */
int soc_sbx_t3p1_memory_bank_base_set(int unit,
                soc_sbx_t3p1_memory_bank_desc_t *mb, int base);

/* Get the base & size of a bank in a memory */
void soc_sbx_t3p1_memory_bank_params_get(int *base, int *size,
                soc_sbx_t3p1_memory_bank_desc_t *mb,
                soc_sbx_t3p1_table_manager_t *tm);  

/* Pack all memory banks based on current sizes */
int soc_sbx_t3p1_memory_banks_pack(int unit);

/* Slide the base of all banks from a starting bank in a memory */
int soc_sbx_t3p1_bank_slide(int unit,
                soc_sbx_t3p1_memory_desc_t *md,
                int mbank, int offset);

/* Realign aligned table banks */
int soc_sbx_t3p1_tables_realign(int unit);

/* Set an entry index range from a table size */
void soc_sbx_t3p1_entry_index_ranges_set(int unit,
                soc_sbx_t3p1_entry_id_t eid);

/* Set the size of a table */
int soc_sbx_t3p1_generic_table_size_set(int unit,
                soc_sbx_t3p1_table_id_t tid, int size, int pack);

void soc_sbx_t3p1_memory_bank_sort(int size,
                soc_sbx_t3p1_memory_bank_desc_t *mb,
                soc_sbx_t3p1_table_manager_t *tm);

void soc_sbx_t3p1_memory_banks_init(soc_sbx_t3p1_table_manager_t *tm);

/* Find a memory bank member by address */
int soc_sbx_t3p1_memory_bank_find(
                soc_sbx_t3p1_table_manager_t *tm,
                soc_sbx_t3p1_memory_desc_t *md,
                int addr, char **name, int *offset, int *iscnt);

/**
 * Microcode accessor uninitialization function.
 *
 * @param[in]  unit chip unit number
 */
extern int soc_sbx_t3p1_uninit(int unit);

/**
 * Microcode accessor initialization function.
 *
 * @param[in]  unit chip unit number
 * @param[in]  ucode asm package
 */
extern int soc_sbx_t3p1_init(int unit, void *ucode);

/**
 * Get memory parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  mid memory index (also CPU DMA memory port number)
 * @param[out] mp memory parameters
 */
extern int soc_sbx_t3p1_memory_params_get(int unit, int mid,
                soc_sbx_t3p1_memory_params_t *mp);

/**
 * Set memory size.
 *
 * Currently, the memory size is not used for anything.
 *
 * @param[in]  unit chip unit number
 * @param[in]  mid memory index (also CPU DMA memory port number)
 * @param[in]  size memory size, in words
 */
extern int soc_sbx_t3p1_memory_size_set(int unit, int mid, int size);

/*
 * Table state accessors
 */

/* Table state accessors for lag */

/**
 * Get lag table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_t3p1_lag_bank_params_get(int unit, int bank,
                soc_sbx_t3p1_table_bank_params_t *p);

/**
 * Get lag table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_t3p1_lag_table_size_get(int unit);

/**
 * Set lag table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_t3p1_lag_table_size_set(int unit, int size);

/* Table state accessors for vlan */

/**
 * Get vlan table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_t3p1_vlan_bank_params_get(int unit, int bank,
                soc_sbx_t3p1_table_bank_params_t *p);

/**
 * Get vlan table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_t3p1_vlan_table_size_get(int unit);

/**
 * Set vlan table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_t3p1_vlan_table_size_set(int unit, int size);

/* Table state accessors for irt */

/**
 * Get irt table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_t3p1_irt_bank_params_get(int unit, int bank,
                soc_sbx_t3p1_table_bank_params_t *p);

/**
 * Get irt table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_t3p1_irt_table_size_get(int unit);

/**
 * Set irt table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_t3p1_irt_table_size_set(int unit, int size);

/* Table state accessors for oam_bubble */

/**
 * Get oam_bubble table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_t3p1_oam_bubble_bank_params_get(int unit, int bank,
                soc_sbx_t3p1_table_bank_params_t *p);

/**
 * Get oam_bubble table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_t3p1_oam_bubble_table_size_get(int unit);

/**
 * Set oam_bubble table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_t3p1_oam_bubble_table_size_set(int unit, int size);

/* Table state accessors for demoage */

/**
 * Get demoage table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_t3p1_demoage_bank_params_get(int unit, int bank,
                soc_sbx_t3p1_table_bank_params_t *p);

/**
 * Get demoage table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_t3p1_demoage_table_size_get(int unit);

/**
 * Set demoage table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_t3p1_demoage_table_size_set(int unit, int size);

/* Table state accessors for demoageid */

/**
 * Get demoageid table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_t3p1_demoageid_bank_params_get(int unit, int bank,
                soc_sbx_t3p1_table_bank_params_t *p);

/**
 * Get demoageid table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_t3p1_demoageid_table_size_get(int unit);

/**
 * Set demoageid table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_t3p1_demoageid_table_size_set(int unit, int size);



/**
 * Initialize lag entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_t3p1_lag_t_init(
    soc_sbx_t3p1_lag_t *e);

/**
 * Pack lag entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_t3p1_lag_pack(int unit,
    soc_sbx_t3p1_lag_t *e, uint8 *b, int bsz);

/**
 * Unpack lag entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_t3p1_lag_unpack(int unit,
                soc_sbx_t3p1_lag_t *e, uint8 *b, int bsz);

extern int soc_sbx_t3p1_lag_index_check(int unit,
                int *vindex,
                 int lagi );

extern int soc_sbx_t3p1_lag_entry_check(int unit,
                soc_sbx_t3p1_lag_t *e);

/**
 * lag table size get
 *
 */
extern int soc_sbx_t3p1_lag_entry_table_size_get(int unit,
                int *tsize,  int lagi );

/**
 * Synchronously set lag entry.
 *
 */
extern int soc_sbx_t3p1_lag_set(int unit,
                 int lagi ,
                soc_sbx_t3p1_lag_t *entry);

/**
New entry set accessor implementation for lag
*/
extern int soc_sbx_t3p1_lag_data_set(int unit,
                 int lagi ,
                unsigned char *buf, unsigned char size);
/**
 *  Get lag entry.
 */
extern int soc_sbx_t3p1_lag_get(int unit,
                 int lagi ,
                soc_sbx_t3p1_lag_t *entry);

/**
New entry get accessor implementation for lag
*/
extern int soc_sbx_t3p1_lag_data_get(int unit,
                 int lagi ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize vlan entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_t3p1_vlan_t_init(
    soc_sbx_t3p1_vlan_t *e);

/**
 * Pack vlan entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_t3p1_vlan_pack(int unit,
    soc_sbx_t3p1_vlan_t *e, uint8 *b, int bsz);

/**
 * Unpack vlan entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_t3p1_vlan_unpack(int unit,
                soc_sbx_t3p1_vlan_t *e, uint8 *b, int bsz);

extern int soc_sbx_t3p1_vlan_index_check(int unit,
                int *vindex,
                 int vlan );

extern int soc_sbx_t3p1_vlan_entry_check(int unit,
                soc_sbx_t3p1_vlan_t *e);

/**
 * vlan table size get
 *
 */
extern int soc_sbx_t3p1_vlan_entry_table_size_get(int unit,
                int *tsize,  int vlan );

/**
 * Synchronously set vlan entry.
 *
 */
extern int soc_sbx_t3p1_vlan_set(int unit,
                 int vlan ,
                soc_sbx_t3p1_vlan_t *entry);

/**
New entry set accessor implementation for vlan
*/
extern int soc_sbx_t3p1_vlan_data_set(int unit,
                 int vlan ,
                unsigned char *buf, unsigned char size);
/**
 *  Get vlan entry.
 */
extern int soc_sbx_t3p1_vlan_get(int unit,
                 int vlan ,
                soc_sbx_t3p1_vlan_t *entry);

/**
New entry get accessor implementation for vlan
*/
extern int soc_sbx_t3p1_vlan_data_get(int unit,
                 int vlan ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize irt entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_t3p1_irt_t_init(
    soc_sbx_t3p1_irt_t *e);

/**
 * Pack irt entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_t3p1_irt_pack(int unit,
    soc_sbx_t3p1_irt_t *e, uint8 *b, int bsz);

/**
 * Unpack irt entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_t3p1_irt_unpack(int unit,
                soc_sbx_t3p1_irt_t *e, uint8 *b, int bsz);

extern int soc_sbx_t3p1_irt_index_check(int unit,
                int *vindex,
                 int irule );

extern int soc_sbx_t3p1_irt_entry_check(int unit,
                soc_sbx_t3p1_irt_t *e);

/**
 * irt table size get
 *
 */
extern int soc_sbx_t3p1_irt_entry_table_size_get(int unit,
                int *tsize,  int irule );

/**
 * Synchronously set irt entry.
 *
 */
extern int soc_sbx_t3p1_irt_set(int unit,
                 int irule ,
                soc_sbx_t3p1_irt_t *entry);

/**
New entry set accessor implementation for irt
*/
extern int soc_sbx_t3p1_irt_data_set(int unit,
                 int irule ,
                unsigned char *buf, unsigned char size);
/**
 *  Get irt entry.
 */
extern int soc_sbx_t3p1_irt_get(int unit,
                 int irule ,
                soc_sbx_t3p1_irt_t *entry);

/**
New entry get accessor implementation for irt
*/
extern int soc_sbx_t3p1_irt_data_get(int unit,
                 int irule ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize oam_bubble entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_t3p1_oam_bubble_t_init(
    soc_sbx_t3p1_oam_bubble_t *e);

/**
 * Pack oam_bubble entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_t3p1_oam_bubble_pack(int unit,
    soc_sbx_t3p1_oam_bubble_t *e, uint8 *b, int bsz);

/**
 * Unpack oam_bubble entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_t3p1_oam_bubble_unpack(int unit,
                soc_sbx_t3p1_oam_bubble_t *e, uint8 *b, int bsz);

extern int soc_sbx_t3p1_oam_bubble_index_check(int unit,
                int *vindex,
                 int oamepi );

extern int soc_sbx_t3p1_oam_bubble_entry_check(int unit,
                soc_sbx_t3p1_oam_bubble_t *e);

/**
 * oam_bubble table size get
 *
 */
extern int soc_sbx_t3p1_oam_bubble_entry_table_size_get(int unit,
                int *tsize,  int oamepi );

/**
 * Synchronously set oam_bubble entry.
 *
 */
extern int soc_sbx_t3p1_oam_bubble_set(int unit,
                 int oamepi ,
                soc_sbx_t3p1_oam_bubble_t *entry);

/**
New entry set accessor implementation for oam_bubble
*/
extern int soc_sbx_t3p1_oam_bubble_data_set(int unit,
                 int oamepi ,
                unsigned char *buf, unsigned char size);
/**
 *  Get oam_bubble entry.
 */
extern int soc_sbx_t3p1_oam_bubble_get(int unit,
                 int oamepi ,
                soc_sbx_t3p1_oam_bubble_t *entry);

/**
New entry get accessor implementation for oam_bubble
*/
extern int soc_sbx_t3p1_oam_bubble_data_get(int unit,
                 int oamepi ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize demoage entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_t3p1_demoage_t_init(
    soc_sbx_t3p1_demoage_t *e);

/**
 * Pack demoage entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_t3p1_demoage_pack(int unit,
    soc_sbx_t3p1_demoage_t *e, uint8 *b, int bsz);

/**
 * Unpack demoage entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_t3p1_demoage_unpack(int unit,
                soc_sbx_t3p1_demoage_t *e, uint8 *b, int bsz);

extern int soc_sbx_t3p1_demoage_index_check(int unit,
                int *vindex,
                 int macindex );

extern int soc_sbx_t3p1_demoage_entry_check(int unit,
                soc_sbx_t3p1_demoage_t *e);

/**
 * demoage table size get
 *
 */
extern int soc_sbx_t3p1_demoage_entry_table_size_get(int unit,
                int *tsize,  int macindex );

/**
 * Synchronously set demoage entry.
 *
 */
extern int soc_sbx_t3p1_demoage_set(int unit,
                 int macindex ,
                soc_sbx_t3p1_demoage_t *entry);

/**
New entry set accessor implementation for demoage
*/
extern int soc_sbx_t3p1_demoage_data_set(int unit,
                 int macindex ,
                unsigned char *buf, unsigned char size);
/**
 *  Get demoage entry.
 */
extern int soc_sbx_t3p1_demoage_get(int unit,
                 int macindex ,
                soc_sbx_t3p1_demoage_t *entry);

/**
New entry get accessor implementation for demoage
*/
extern int soc_sbx_t3p1_demoage_data_get(int unit,
                 int macindex ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize demoageid entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_t3p1_demoageid_t_init(
    soc_sbx_t3p1_demoageid_t *e);

/**
 * Pack demoageid entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_t3p1_demoageid_pack(int unit,
    soc_sbx_t3p1_demoageid_t *e, uint8 *b, int bsz);

/**
 * Unpack demoageid entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_t3p1_demoageid_unpack(int unit,
                soc_sbx_t3p1_demoageid_t *e, uint8 *b, int bsz);

extern int soc_sbx_t3p1_demoageid_index_check(int unit,
                int *vindex,
                 int macindex );

extern int soc_sbx_t3p1_demoageid_entry_check(int unit,
                soc_sbx_t3p1_demoageid_t *e);

/**
 * demoageid table size get
 *
 */
extern int soc_sbx_t3p1_demoageid_entry_table_size_get(int unit,
                int *tsize,  int macindex );

/**
 * Synchronously set demoageid entry.
 *
 */
extern int soc_sbx_t3p1_demoageid_set(int unit,
                 int macindex ,
                soc_sbx_t3p1_demoageid_t *entry);

/**
New entry set accessor implementation for demoageid
*/
extern int soc_sbx_t3p1_demoageid_data_set(int unit,
                 int macindex ,
                unsigned char *buf, unsigned char size);
/**
 *  Get demoageid entry.
 */
extern int soc_sbx_t3p1_demoageid_get(int unit,
                 int macindex ,
                soc_sbx_t3p1_demoageid_t *entry);

/**
New entry get accessor implementation for demoageid
*/
extern int soc_sbx_t3p1_demoageid_data_get(int unit,
                 int macindex ,
                unsigned char *buf, unsigned char size);




#endif
#endif
