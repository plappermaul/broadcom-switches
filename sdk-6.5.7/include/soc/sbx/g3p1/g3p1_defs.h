
/**
 *
 * $Id: ocm_h.stg,v 1.14 Broadcom SDK $
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 *
 * g3p1_defs.h: Guadalupe2k V1.3 microcode access routines 
 *
 * This file provides the public interface to the Guadalupe2k V1.3
 * microcode.  Only explicitly documented elements (types  & functions)
 * are supported, external interfaces.  Other elements are exported only
 * for debugging convenience.
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef _G3P1_DEFS_H
#define _G3P1_DEFS_H
#if defined(BCM_CALADAN3_SUPPORT) && defined(BCM_CALADAN3_G3P1_SUPPORT) 

/*
 * Memory element enumeration
 * Not public: exported for debugging convenience only
 */
typedef enum soc_sbx_g3p1_memory_id_s {
    SOC_SBX_G3P1_LRP_PORT0_ID,
    SOC_SBX_G3P1_LRP_PORT1_ID,
    SOC_SBX_G3P1_LRP_PORT2_ID,
    SOC_SBX_G3P1_LRP_PORT3_ID,
    SOC_SBX_G3P1_LRP_PORT4_ID,
    SOC_SBX_G3P1_LRP_PORT5_ID,

    SOC_SBX_G3P1_CMU0_PORT_ID,
    SOC_SBX_G3P1_COP0_PORT_ID,
    SOC_SBX_G3P1_BUBBLE_PORT_ID,

    SOC_SBX_G3P1_LRP_PORT6_ID,
    SOC_SBX_G3P1_LRP_PORT7_ID,
    SOC_SBX_G3P1_LRP_PORT8_ID,
    SOC_SBX_G3P1_LRP_PORT9_ID,

    SOC_SBX_G3P1_CMU1_PORT_ID,
    SOC_SBX_G3P1_COP1_PORT_ID,

    SOC_SBX_G3P1_MEMORY_MAX_ID
} soc_sbx_g3p1_memory_id_t;

/*
 * Shared constant enumeration
 * Not public: exported for debugging convenience only
 */
typedef enum soc_sbx_g3p1_constant_id_s {
     SOC_SBX_G3P1_MAX_PORTS_ID ,
     SOC_SBX_G3P1_IP_VRF_BITS_ID ,
     SOC_SBX_G3P1_EXC_STP_BLOCKED_IDX_ID ,
     SOC_SBX_G3P1_EXC_SMAC_DROP_IDX_ID ,
     SOC_SBX_G3P1_EXC_SMAC_UNKNOWN_IDX_ID ,
     SOC_SBX_G3P1_EXC_MAC_HAIRPIN_IDX_ID ,
     SOC_SBX_G3P1_EXC_DMAC_DROP_IDX_ID ,
     SOC_SBX_G3P1_EXC_TTL_EXPIRED_IDX_ID ,
     SOC_SBX_G3P1_EXC_EGR_STP_BLOCKED_IDX_ID ,
     SOC_SBX_G3P1_EXC_SPLIT_IDX_ID ,
     SOC_SBX_G3P1_EXC_MTU_IDX_ID ,
     SOC_SBX_G3P1_EXC_OAM_MISMATCH_IDX_ID ,
     SOC_SBX_G3P1_EXC_OAM_PEER_NOT_FOUND_IDX_ID ,
     SOC_SBX_G3P1_EXC_OAM_NO_ENDPOINT_IDX_ID ,
     SOC_SBX_G3P1_EXC_OAM_UNK_TYPE_IDX_ID ,
     SOC_SBX_G3P1_EXC_OAM_RDI_IDX_ID ,
     SOC_SBX_G3P1_EXC_VLAN_DROP_IDX_ID ,
     SOC_SBX_G3P1_EXC_V4MC_RPF_CHECK_IDX_ID ,
     SOC_SBX_G3P1_EXC_URPF_DROP_IDX_ID ,
     SOC_SBX_G3P1_EXC_IP_SA_DROP_IDX_ID ,
     SOC_SBX_G3P1_EXC_MIM_BAD_FORMAT_IDX_ID ,
     SOC_SBX_G3P1_EXC_ISID2E_MISS_IDX_ID ,
     SOC_SBX_G3P1_EXC_OAM_THRESHOLD_EXCEEDED_IDX_ID ,
     SOC_SBX_G3P1_EXC_OAM_COPY_TO_HOST_IDX_ID ,
     SOC_SBX_G3P1_EXC_OAM_PARAM_CHANGE_IDX_ID ,
     SOC_SBX_G3P1_EXC_BAD_OUTER_LABEL_IDX_ID ,
     SOC_SBX_G3P1_EXC_BAD_INNER_LABEL_IDX_ID ,
     SOC_SBX_G3P1_EXC_LSP_PING_IDX_ID ,
     SOC_SBX_G3P1_EXC_TOO_MANY_LABELS_IDX_ID ,
     SOC_SBX_G3P1_EXC_EGR_DROP_TAGGED_IDX_ID ,
     SOC_SBX_G3P1_EXC_EGR_DROP_UNTAGGED_IDX_ID ,
     SOC_SBX_G3P1_EXC_EGR_OAM_LINK_IDX_ID ,
     SOC_SBX_G3P1_EXC_OAM_INTERNAL_ERROR_IDX_ID ,
     SOC_SBX_G3P1_EXC_DCN_IDX_ID ,
     SOC_SBX_G3P1_EXC_MPLS_FILTER_IDX_ID ,
     SOC_SBX_G3P1_MIN_FREE_EXCEPTION_ID ,
     SOC_SBX_G3P1_MAX_FREE_EXCEPTION_ID ,
     SOC_SBX_G3P1_EXC_SMAC_LEARN_IDX_ID ,
     SOC_SBX_G3P1_EXC_PIM_IDX_ID ,
     SOC_SBX_G3P1_EXC_IGMP_IDX_ID ,
     SOC_SBX_G3P1_EXC_RT_COPY_IDX_ID ,
     SOC_SBX_G3P1_EXC_L2CP_COPY_IDX_ID ,
     SOC_SBX_G3P1_EXC_DMAC_COPY_IDX_ID ,
     SOC_SBX_G3P1_EXC_IPREDIRECT_IDX_ID ,
     SOC_SBX_G3P1_EXC_BMAC_LEARN_IDX_ID ,
     SOC_SBX_G3P1_EXC_COPY_MAX_IDX_ID ,
     SOC_SBX_G3P1_HTYPE_NULL_ID ,
     SOC_SBX_G3P1_HLEN_NULL_ID ,
     SOC_SBX_G3P1_HTYPE_ETH_ID ,
     SOC_SBX_G3P1_HLEN_ETH_ID ,
     SOC_SBX_G3P1_HTYPE_VTAG_ID ,
     SOC_SBX_G3P1_HLEN_VTAG_ID ,
     SOC_SBX_G3P1_HTYPE_ETYPE_ID ,
     SOC_SBX_G3P1_HLEN_ETYPE_ID ,
     SOC_SBX_G3P1_HTYPE_IPV4_ID ,
     SOC_SBX_G3P1_HLEN_IPV4_ID ,
     SOC_SBX_G3P1_HTYPE_IPV6_ID ,
     SOC_SBX_G3P1_HLEN_IPV6_ID ,
     SOC_SBX_G3P1_HTYPE_MPLS_ID ,
     SOC_SBX_G3P1_HLEN_MPLS_ID ,
     SOC_SBX_G3P1_HTYPE_ACH_ID ,
     SOC_SBX_G3P1_HLEN_ACH_ID ,
     SOC_SBX_G3P1_HTYPE_UDP_ID ,
     SOC_SBX_G3P1_HLEN_UDP_ID ,
     SOC_SBX_G3P1_HTYPE_TCP_ID ,
     SOC_SBX_G3P1_HLEN_TCP_ID ,
     SOC_SBX_G3P1_HTYPE_PTP_ID ,
     SOC_SBX_G3P1_HLEN_PTP_ID ,
     SOC_SBX_G3P1_HTYPE_IETH_ID ,
     SOC_SBX_G3P1_HTYPE_LLC_ID ,
     SOC_SBX_G3P1_HLEN_LLC_ID ,
     SOC_SBX_G3P1_HTYPE_SNAP_ID ,
     SOC_SBX_G3P1_HLEN_SNAP_ID ,
     SOC_SBX_G3P1_HTYPE_DVTAG_ID ,
     SOC_SBX_G3P1_HTYPE_MIM_ID ,
     SOC_SBX_G3P1_HLEN_MIM_ID ,
     SOC_SBX_G3P1_HTYPE_BFD_ID ,
     SOC_SBX_G3P1_HLEN_BFD_ID ,
     SOC_SBX_G3P1_HTYPE_EERH_ID ,
     SOC_SBX_G3P1_HLEN_EERH_ID ,
     SOC_SBX_G3P1_HTYPE_ERH_ID ,
     SOC_SBX_G3P1_HLEN_ERH_ID ,
     SOC_SBX_G3P1_HTYPE_TMH_ID ,
     SOC_SBX_G3P1_HLEN_TMH_ID ,
     SOC_SBX_G3P1_HTYPE_KSOP_ID ,
     SOC_SBX_G3P1_HLEN_KSOP_ID ,
     SOC_SBX_G3P1_HTYPE_CUSTOM_ID ,
     SOC_SBX_G3P1_HLEN_CUSTOM_ID ,
     SOC_SBX_G3P1_HTYPE_ELEN_ID ,
     SOC_SBX_G3P1_HLEN_ELEN_ID ,
     SOC_SBX_G3P1_HTYPE_UNKN_ID ,
     SOC_SBX_G3P1_LSMAC_TABLE_SIZE_ID ,
     SOC_SBX_G3P1_L2CPMAC_TABLE_SIZE_ID ,
     SOC_SBX_G3P1_OAMUPMAC_TABLE_SIZE_ID ,
     SOC_SBX_G3P1_OAM_NUM_ENDPOINTS_ID ,
     SOC_SBX_G3P1_PTYPE_UNKNOWN_UNICAST_ID ,
     SOC_SBX_G3P1_PTYPE_KNOWN_UNICAST_ID ,
     SOC_SBX_G3P1_PTYPE_MULTICAST_ID ,
     SOC_SBX_G3P1_PTYPE_BROADCAST_ID ,
     SOC_SBX_G3P1_PTYPE_LAST_ID ,
     SOC_SBX_G3P1_CUCKOO_TYPE_PVV_ID ,
     SOC_SBX_G3P1_CUCKOO_TYPE_ISID_ID ,
     SOC_SBX_G3P1_CUCKOO_TYPE_PVD_ID ,
     SOC_SBX_G3P1_CUCKOO_TYPE_MAIDMEP_ID ,
     SOC_SBX_G3P1_CUCKOO_TYPE_SHIFT_ID ,
     SOC_SBX_G3P1_MAX_QOS_PROFILE_INDEX_ID ,
     SOC_SBX_G3P1_MAX_QOS_MAP_TABLE_ID ,
     SOC_SBX_G3P1_MAX_QOS_REMARK_TABLE_ID ,
     SOC_SBX_G3P1_MAX_L2CP_TYPES_ID ,
     SOC_SBX_G3P1_MAX_L2CP_SUBTYPES_ID ,
     SOC_SBX_G3P1_URPF_DEFAULT_PID_ID ,
     SOC_SBX_G3P1_STPSTATE_FORWARD_ID ,
     SOC_SBX_G3P1_STPSTATE_BLOCK_ID ,
     SOC_SBX_G3P1_STPSTATE_LEARN_ID ,
     SOC_SBX_G3P1_MPLSTP_LOOPBACK_OAM_ID ,
     SOC_SBX_G3P1_MPLSTP_LOOPBACK_FULL_ID ,
     SOC_SBX_G3P1_MPLSTP_LOOPBACK_NONE_ID ,
     SOC_SBX_G3P1_LABEL_LSR_ID ,
     SOC_SBX_G3P1_LABEL_ETH_PWE3_ID ,
     SOC_SBX_G3P1_LABEL_LER_ID ,
     SOC_SBX_G3P1_LABEL_CES_PWE3_ID  ,
    SOC_SBX_G3P1_CONSTANT_MAX_ID
} soc_sbx_g3p1_constant_id_t;
    
/*
 * Global value enumeration
 * Not public: exported for debugging convenience only
 */
typedef enum soc_sbx_g3p1_global_id_s {
     SOC_SBX_G3P1_CONTEXTS_ID ,
     SOC_SBX_G3P1_TPID0_ID ,
     SOC_SBX_G3P1_TPID1_ID ,
     SOC_SBX_G3P1_TPID2_ID ,
     SOC_SBX_G3P1_DEFITAG_ID ,
     SOC_SBX_G3P1_AGE_ID ,
     SOC_SBX_G3P1_CUCKOO_ABSEED_ID ,
     SOC_SBX_G3P1_LABELCUCKOO_ABSEED_ID ,
     SOC_SBX_G3P1_NODE_ID ,
     SOC_SBX_G3P1_VLAN_FT_BASE_ID ,
     SOC_SBX_G3P1_VPWS_VLAN_ID ,
     SOC_SBX_G3P1_VPWS_FT_OFFSET_ID ,
     SOC_SBX_G3P1_MAX_PIDS_ID ,
     SOC_SBX_G3P1_MC_FT_OFFSET_ID ,
     SOC_SBX_G3P1_OAM_DROP_BIT_ID ,
     SOC_SBX_G3P1_OAM_ENET_CONTINUE_BYTE_ID ,
     SOC_SBX_G3P1_OAM_MPLS_CONTINUE_BYTE_ID ,
     SOC_SBX_G3P1_OAM_ENET_FRAME_LEN_ID ,
     SOC_SBX_G3P1_OAM_MPLS_FRAME_LEN_ID ,
     SOC_SBX_G3P1_OAM_SOURCE_QUEUE_ID ,
     SOC_SBX_G3P1_OAM_DEST_QUEUE_ID ,
     SOC_SBX_G3P1_OAM_SOURCE_BUFFER_ID ,
     SOC_SBX_G3P1_OAM_BUBBLE_TIMER_OFFSET_ID ,
     SOC_SBX_G3P1_OAM_SA_LM_ID ,
     SOC_SBX_G3P1_OAM_SA_DM_ID ,
     SOC_SBX_G3P1_OAM_MPLS_SA_LM_ID ,
     SOC_SBX_G3P1_OAM_MPLS_SA_DM_ID ,
     SOC_SBX_G3P1_OAM_PWE_IP_SA_ID ,
     SOC_SBX_G3P1_OAM_PWE_UDP_DEST_PORT_ID ,
     SOC_SBX_G3P1_OAM_LOOPBACK_QID_ID ,
     SOC_SBX_G3P1_OAM_SA_4LO_ID ,
     SOC_SBX_G3P1_OAM_SA_2HI_ID ,
     SOC_SBX_G3P1_OAM_SA_4LO_AUX_ID ,
     SOC_SBX_G3P1_OAM_SA_2HI_AUX_ID ,
     SOC_SBX_G3P1_OAM_BFD_STATE_TABLE_ID ,
     SOC_SBX_G3P1_OAM_BFD_RDI_DIAG_CODE_ID ,
     SOC_SBX_G3P1_OAM_TX_PACKETS_PER_BUBBLE_ID ,
     SOC_SBX_G3P1_OAM_TX_PACKETS_PER_BUBBLE_CA_ID ,
     SOC_SBX_G3P1_OAM_PSC_RX_FILTER_ID ,
     SOC_SBX_G3P1_OAM_LOCAL_FE_QID_ID ,
     SOC_SBX_G3P1_OAM_ETE_BASE_ID ,
     SOC_SBX_G3P1_OAM_RSVD_OIP_ID ,
     SOC_SBX_G3P1_BLACKHOLE_VLAN_ID ,
     SOC_SBX_G3P1_IGMP_PROXY_MODE_ID ,
     SOC_SBX_G3P1_STATIC_LAG_ID ,
     SOC_SBX_G3P1_IPV4_CHECKSUM_MODE_ID ,
     SOC_SBX_G3P1_EXIT_FILTER_ON_BTAG_ID ,
     SOC_SBX_G3P1_SWITCH_METER_ADJUST_ID ,
     SOC_SBX_G3P1_RC1_RULE_STARTIDX_ID ,
     SOC_SBX_G3P1_IPV6_ACL_ENABLE_ID ,
     SOC_SBX_G3P1_OI2EOFF_ID ,
     SOC_SBX_G3P1_ETE_SEGMENT_NUM_ID ,
     SOC_SBX_G3P1_OAM_EP_SEGMENT_NUM_ID ,
     SOC_SBX_G3P1_OAM_LOCAL_SEGMENT_NUM_ID ,
     SOC_SBX_G3P1_OAM_PEER_SEGMENT_NUM_ID ,
     SOC_SBX_G3P1_SAMPLE_DM1_SEGMENT_NUM_ID ,
     SOC_SBX_G3P1_ARAD_FWDACTION_ID ,
     SOC_SBX_G3P1_INTERLAKEN_OFFSET_ID ,
     SOC_SBX_G3P1_HIGIG_LOOP_ENABLE_ID ,
     SOC_SBX_G3P1_MACLEARN_FILTER_ENABLE_ID ,
     SOC_SBX_G3P1_DEBUG_STREAM_ELEN_ID ,
     SOC_SBX_G3P1_C3_SWS_STATIC_PAGE_ID ,
     SOC_SBX_G3P1_C3_SWS_INGRESS_BUBBLE_SQUEUE_ID ,
     SOC_SBX_G3P1_C3_SWS_FAB_TO_LINE_REDIRECT_QID0_ID ,
     SOC_SBX_G3P1_C3_SWS_FAB_TO_LINE_REDIRECT_QID1_ID ,
     SOC_SBX_G3P1_C3_SWS_EGRESS_BUBBLE_SQUEUE_ID ,
     SOC_SBX_G3P1_C3_SWS_LINE_TO_FAB_REDIRECT_QID0_ID ,
     SOC_SBX_G3P1_C3_SWS_LINE_TO_FAB_REDIRECT_QID1_ID  ,
    SOC_SBX_G3P1_GLOBAL_MAX_ID
} soc_sbx_g3p1_global_id_t;

/*
 * Shared constant accessors
 */

/**
 * Get constant MAX_PORTS value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_max_ports_get(int unit, uint32 *vp);


/**
 * Get constant IP_VRF_BITS value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_ip_vrf_bits_get(int unit, uint32 *vp);


/**
 * Get constant EXC_STP_BLOCKED_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_stp_blocked_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_SMAC_DROP_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_smac_drop_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_SMAC_UNKNOWN_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_smac_unknown_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_MAC_HAIRPIN_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_mac_hairpin_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_DMAC_DROP_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_dmac_drop_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_TTL_EXPIRED_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_ttl_expired_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_EGR_STP_BLOCKED_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_egr_stp_blocked_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_SPLIT_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_split_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_MTU_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_mtu_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_OAM_MISMATCH_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_oam_mismatch_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_OAM_PEER_NOT_FOUND_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_oam_peer_not_found_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_OAM_NO_ENDPOINT_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_oam_no_endpoint_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_OAM_UNK_TYPE_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_oam_unk_type_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_OAM_RDI_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_oam_rdi_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_VLAN_DROP_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_vlan_drop_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_V4MC_RPF_CHECK_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_v4mc_rpf_check_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_URPF_DROP_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_urpf_drop_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_IP_SA_DROP_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_ip_sa_drop_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_MIM_BAD_FORMAT_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_mim_bad_format_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_ISID2E_MISS_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_isid2e_miss_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_OAM_THRESHOLD_EXCEEDED_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_oam_threshold_exceeded_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_OAM_COPY_TO_HOST_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_oam_copy_to_host_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_OAM_PARAM_CHANGE_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_oam_param_change_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_BAD_OUTER_LABEL_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_bad_outer_label_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_BAD_INNER_LABEL_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_bad_inner_label_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_LSP_PING_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_lsp_ping_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_TOO_MANY_LABELS_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_too_many_labels_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_EGR_DROP_TAGGED_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_egr_drop_tagged_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_EGR_DROP_UNTAGGED_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_egr_drop_untagged_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_EGR_OAM_LINK_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_egr_oam_link_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_OAM_INTERNAL_ERROR_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_oam_internal_error_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_DCN_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_dcn_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_MPLS_FILTER_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_mpls_filter_idx_get(int unit, uint32 *vp);


/**
 * Get constant MIN_FREE_EXCEPTION value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_min_free_exception_get(int unit, uint32 *vp);


/**
 * Get constant MAX_FREE_EXCEPTION value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_max_free_exception_get(int unit, uint32 *vp);


/**
 * Get constant EXC_SMAC_LEARN_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_smac_learn_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_PIM_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_pim_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_IGMP_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_igmp_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_RT_COPY_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_rt_copy_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_L2CP_COPY_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_l2cp_copy_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_DMAC_COPY_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_dmac_copy_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_IPREDIRECT_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_ipredirect_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_BMAC_LEARN_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_bmac_learn_idx_get(int unit, uint32 *vp);


/**
 * Get constant EXC_COPY_MAX_IDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exc_copy_max_idx_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_NULL value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_null_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_NULL value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_null_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_ETH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_eth_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_ETH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_eth_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_VTAG value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_vtag_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_VTAG value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_vtag_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_ETYPE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_etype_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_ETYPE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_etype_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_IPV4 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_ipv4_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_IPV4 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_ipv4_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_IPV6 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_ipv6_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_IPV6 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_ipv6_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_MPLS value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_mpls_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_MPLS value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_mpls_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_ACH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_ach_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_ACH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_ach_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_UDP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_udp_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_UDP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_udp_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_TCP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_tcp_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_TCP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_tcp_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_PTP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_ptp_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_PTP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_ptp_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_IETH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_ieth_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_LLC value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_llc_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_LLC value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_llc_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_SNAP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_snap_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_SNAP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_snap_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_DVTAG value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_dvtag_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_MIM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_mim_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_MIM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_mim_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_BFD value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_bfd_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_BFD value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_bfd_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_EERH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_eerh_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_EERH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_eerh_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_ERH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_erh_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_ERH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_erh_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_TMH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_tmh_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_TMH value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_tmh_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_KSOP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_ksop_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_KSOP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_ksop_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_CUSTOM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_custom_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_CUSTOM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_custom_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_ELEN value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_elen_get(int unit, uint32 *vp);


/**
 * Get constant HLEN_ELEN value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_hlen_elen_get(int unit, uint32 *vp);


/**
 * Get constant HTYPE_UNKN value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_htype_unkn_get(int unit, uint32 *vp);


/**
 * Get constant LSMAC_TABLE_SIZE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_lsmac_table_size_get(int unit, uint32 *vp);


/**
 * Get constant L2CPMAC_TABLE_SIZE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_l2cpmac_table_size_get(int unit, uint32 *vp);


/**
 * Get constant OAMUPMAC_TABLE_SIZE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oamupmac_table_size_get(int unit, uint32 *vp);


/**
 * Get constant OAM_NUM_ENDPOINTS value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_num_endpoints_get(int unit, uint32 *vp);


/**
 * Get constant PTYPE_UNKNOWN_UNICAST value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_ptype_unknown_unicast_get(int unit, uint32 *vp);


/**
 * Get constant PTYPE_KNOWN_UNICAST value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_ptype_known_unicast_get(int unit, uint32 *vp);


/**
 * Get constant PTYPE_MULTICAST value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_ptype_multicast_get(int unit, uint32 *vp);


/**
 * Get constant PTYPE_BROADCAST value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_ptype_broadcast_get(int unit, uint32 *vp);


/**
 * Get constant PTYPE_LAST value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_ptype_last_get(int unit, uint32 *vp);


/**
 * Get constant CUCKOO_TYPE_PVV value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_cuckoo_type_pvv_get(int unit, uint32 *vp);


/**
 * Get constant CUCKOO_TYPE_ISID value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_cuckoo_type_isid_get(int unit, uint32 *vp);


/**
 * Get constant CUCKOO_TYPE_PVD value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_cuckoo_type_pvd_get(int unit, uint32 *vp);


/**
 * Get constant CUCKOO_TYPE_MAIDMEP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_cuckoo_type_maidmep_get(int unit, uint32 *vp);


/**
 * Get constant CUCKOO_TYPE_SHIFT value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_cuckoo_type_shift_get(int unit, uint32 *vp);


/**
 * Get constant MAX_QOS_PROFILE_INDEX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_max_qos_profile_index_get(int unit, uint32 *vp);


/**
 * Get constant MAX_QOS_MAP_TABLE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_max_qos_map_table_get(int unit, uint32 *vp);


/**
 * Get constant MAX_QOS_REMARK_TABLE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_max_qos_remark_table_get(int unit, uint32 *vp);


/**
 * Get constant MAX_L2CP_TYPES value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_max_l2cp_types_get(int unit, uint32 *vp);


/**
 * Get constant MAX_L2CP_SUBTYPES value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_max_l2cp_subtypes_get(int unit, uint32 *vp);


/**
 * Get constant URPF_DEFAULT_PID value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_urpf_default_pid_get(int unit, uint32 *vp);


/**
 * Get constant STPSTATE_FORWARD value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_stpstate_forward_get(int unit, uint32 *vp);


/**
 * Get constant STPSTATE_BLOCK value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_stpstate_block_get(int unit, uint32 *vp);


/**
 * Get constant STPSTATE_LEARN value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_stpstate_learn_get(int unit, uint32 *vp);


/**
 * Get constant MPLSTP_LOOPBACK_OAM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_mplstp_loopback_oam_get(int unit, uint32 *vp);


/**
 * Get constant MPLSTP_LOOPBACK_FULL value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_mplstp_loopback_full_get(int unit, uint32 *vp);


/**
 * Get constant MPLSTP_LOOPBACK_NONE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_mplstp_loopback_none_get(int unit, uint32 *vp);


/**
 * Get constant LABEL_LSR value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_label_lsr_get(int unit, uint32 *vp);


/**
 * Get constant LABEL_ETH_PWE3 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_label_eth_pwe3_get(int unit, uint32 *vp);


/**
 * Get constant LABEL_LER value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_label_ler_get(int unit, uint32 *vp);


/**
 * Get constant LABEL_CES_PWE3 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_label_ces_pwe3_get(int unit, uint32 *vp);


/*
 * Global value accessors
 */


/**
 * Set global CONTEXTS value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_contexts_set(int unit, uint32 v);

/**
 * Get global CONTEXTS value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_contexts_get(int unit, uint32 *vp);


/**
 * Set global TPID0 value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_tpid0_set(int unit, uint32 v);

/**
 * Get global TPID0 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_tpid0_get(int unit, uint32 *vp);


/**
 * Set global TPID1 value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_tpid1_set(int unit, uint32 v);

/**
 * Get global TPID1 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_tpid1_get(int unit, uint32 *vp);


/**
 * Set global TPID2 value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_tpid2_set(int unit, uint32 v);

/**
 * Get global TPID2 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_tpid2_get(int unit, uint32 *vp);


/**
 * Set global DEFITAG value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_defitag_set(int unit, uint32 v);

/**
 * Get global DEFITAG value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_defitag_get(int unit, uint32 *vp);


/**
 * Set global AGE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_age_set(int unit, uint32 v);

/**
 * Get global AGE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_age_get(int unit, uint32 *vp);


/**
 * Set global CUCKOO_ABSEED value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_cuckoo_abseed_set(int unit, uint32 v);

/**
 * Get global CUCKOO_ABSEED value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_cuckoo_abseed_get(int unit, uint32 *vp);


/**
 * Set global LABELCUCKOO_ABSEED value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_labelcuckoo_abseed_set(int unit, uint32 v);

/**
 * Get global LABELCUCKOO_ABSEED value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_labelcuckoo_abseed_get(int unit, uint32 *vp);


/**
 * Set global NODE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_node_set(int unit, uint32 v);

/**
 * Get global NODE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_node_get(int unit, uint32 *vp);


/**
 * Set global VLAN_FT_BASE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_vlan_ft_base_set(int unit, uint32 v);

/**
 * Get global VLAN_FT_BASE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_vlan_ft_base_get(int unit, uint32 *vp);


/**
 * Set global VPWS_VLAN value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_vpws_vlan_set(int unit, uint32 v);

/**
 * Get global VPWS_VLAN value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_vpws_vlan_get(int unit, uint32 *vp);


/**
 * Set global VPWS_FT_OFFSET value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_vpws_ft_offset_set(int unit, uint32 v);

/**
 * Get global VPWS_FT_OFFSET value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_vpws_ft_offset_get(int unit, uint32 *vp);


/**
 * Set global MAX_PIDS value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_max_pids_set(int unit, uint32 v);

/**
 * Get global MAX_PIDS value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_max_pids_get(int unit, uint32 *vp);


/**
 * Set global MC_FT_OFFSET value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_mc_ft_offset_set(int unit, uint32 v);

/**
 * Get global MC_FT_OFFSET value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_mc_ft_offset_get(int unit, uint32 *vp);


/**
 * Set global OAM_DROP_BIT value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_drop_bit_set(int unit, uint32 v);

/**
 * Get global OAM_DROP_BIT value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_drop_bit_get(int unit, uint32 *vp);


/**
 * Set global OAM_ENET_CONTINUE_BYTE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_enet_continue_byte_set(int unit, uint32 v);

/**
 * Get global OAM_ENET_CONTINUE_BYTE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_enet_continue_byte_get(int unit, uint32 *vp);


/**
 * Set global OAM_MPLS_CONTINUE_BYTE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_mpls_continue_byte_set(int unit, uint32 v);

/**
 * Get global OAM_MPLS_CONTINUE_BYTE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_mpls_continue_byte_get(int unit, uint32 *vp);


/**
 * Set global OAM_ENET_FRAME_LEN value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_enet_frame_len_set(int unit, uint32 v);

/**
 * Get global OAM_ENET_FRAME_LEN value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_enet_frame_len_get(int unit, uint32 *vp);


/**
 * Set global OAM_MPLS_FRAME_LEN value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_mpls_frame_len_set(int unit, uint32 v);

/**
 * Get global OAM_MPLS_FRAME_LEN value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_mpls_frame_len_get(int unit, uint32 *vp);


/**
 * Set global OAM_SOURCE_QUEUE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_source_queue_set(int unit, uint32 v);

/**
 * Get global OAM_SOURCE_QUEUE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_source_queue_get(int unit, uint32 *vp);


/**
 * Set global OAM_DEST_QUEUE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_dest_queue_set(int unit, uint32 v);

/**
 * Get global OAM_DEST_QUEUE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_dest_queue_get(int unit, uint32 *vp);


/**
 * Set global OAM_SOURCE_BUFFER value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_source_buffer_set(int unit, uint32 v);

/**
 * Get global OAM_SOURCE_BUFFER value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_source_buffer_get(int unit, uint32 *vp);


/**
 * Set global OAM_BUBBLE_TIMER_OFFSET value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_bubble_timer_offset_set(int unit, uint32 v);

/**
 * Get global OAM_BUBBLE_TIMER_OFFSET value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_bubble_timer_offset_get(int unit, uint32 *vp);


/**
 * Set global OAM_SA_LM value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_sa_lm_set(int unit, uint32 v);

/**
 * Get global OAM_SA_LM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_sa_lm_get(int unit, uint32 *vp);


/**
 * Set global OAM_SA_DM value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_sa_dm_set(int unit, uint32 v);

/**
 * Get global OAM_SA_DM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_sa_dm_get(int unit, uint32 *vp);


/**
 * Set global OAM_MPLS_SA_LM value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_mpls_sa_lm_set(int unit, uint32 v);

/**
 * Get global OAM_MPLS_SA_LM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_mpls_sa_lm_get(int unit, uint32 *vp);


/**
 * Set global OAM_MPLS_SA_DM value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_mpls_sa_dm_set(int unit, uint32 v);

/**
 * Get global OAM_MPLS_SA_DM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_mpls_sa_dm_get(int unit, uint32 *vp);


/**
 * Set global OAM_PWE_IP_SA value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_pwe_ip_sa_set(int unit, uint32 v);

/**
 * Get global OAM_PWE_IP_SA value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_pwe_ip_sa_get(int unit, uint32 *vp);


/**
 * Set global OAM_PWE_UDP_DEST_PORT value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_pwe_udp_dest_port_set(int unit, uint32 v);

/**
 * Get global OAM_PWE_UDP_DEST_PORT value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_pwe_udp_dest_port_get(int unit, uint32 *vp);


/**
 * Set global OAM_LOOPBACK_QID value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_loopback_qid_set(int unit, uint32 v);

/**
 * Get global OAM_LOOPBACK_QID value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_loopback_qid_get(int unit, uint32 *vp);


/**
 * Set global OAM_SA_4LO value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_sa_4lo_set(int unit, uint32 v);

/**
 * Get global OAM_SA_4LO value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_sa_4lo_get(int unit, uint32 *vp);


/**
 * Set global OAM_SA_2HI value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_sa_2hi_set(int unit, uint32 v);

/**
 * Get global OAM_SA_2HI value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_sa_2hi_get(int unit, uint32 *vp);


/**
 * Set global OAM_SA_4LO_AUX value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_sa_4lo_aux_set(int unit, uint32 v);

/**
 * Get global OAM_SA_4LO_AUX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_sa_4lo_aux_get(int unit, uint32 *vp);


/**
 * Set global OAM_SA_2HI_AUX value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_sa_2hi_aux_set(int unit, uint32 v);

/**
 * Get global OAM_SA_2HI_AUX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_sa_2hi_aux_get(int unit, uint32 *vp);


/**
 * Set global OAM_BFD_STATE_TABLE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_bfd_state_table_set(int unit, uint32 v);

/**
 * Get global OAM_BFD_STATE_TABLE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_bfd_state_table_get(int unit, uint32 *vp);


/**
 * Set global OAM_BFD_RDI_DIAG_CODE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_bfd_rdi_diag_code_set(int unit, uint32 v);

/**
 * Get global OAM_BFD_RDI_DIAG_CODE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_bfd_rdi_diag_code_get(int unit, uint32 *vp);


/**
 * Set global OAM_TX_PACKETS_PER_BUBBLE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_tx_packets_per_bubble_set(int unit, uint32 v);

/**
 * Get global OAM_TX_PACKETS_PER_BUBBLE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_tx_packets_per_bubble_get(int unit, uint32 *vp);


/**
 * Set global OAM_TX_PACKETS_PER_BUBBLE_CA value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_tx_packets_per_bubble_ca_set(int unit, uint32 v);

/**
 * Get global OAM_TX_PACKETS_PER_BUBBLE_CA value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_tx_packets_per_bubble_ca_get(int unit, uint32 *vp);


/**
 * Set global OAM_PSC_RX_FILTER value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_psc_rx_filter_set(int unit, uint32 v);

/**
 * Get global OAM_PSC_RX_FILTER value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_psc_rx_filter_get(int unit, uint32 *vp);


/**
 * Set global OAM_LOCAL_FE_QID value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_local_fe_qid_set(int unit, uint32 v);

/**
 * Get global OAM_LOCAL_FE_QID value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_local_fe_qid_get(int unit, uint32 *vp);


/**
 * Set global OAM_ETE_BASE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_ete_base_set(int unit, uint32 v);

/**
 * Get global OAM_ETE_BASE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_ete_base_get(int unit, uint32 *vp);


/**
 * Set global OAM_RSVD_OIP value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_rsvd_oip_set(int unit, uint32 v);

/**
 * Get global OAM_RSVD_OIP value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_rsvd_oip_get(int unit, uint32 *vp);


/**
 * Set global BLACKHOLE_VLAN value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_blackhole_vlan_set(int unit, uint32 v);

/**
 * Get global BLACKHOLE_VLAN value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_blackhole_vlan_get(int unit, uint32 *vp);


/**
 * Set global IGMP_PROXY_MODE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_igmp_proxy_mode_set(int unit, uint32 v);

/**
 * Get global IGMP_PROXY_MODE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_igmp_proxy_mode_get(int unit, uint32 *vp);


/**
 * Set global STATIC_LAG value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_static_lag_set(int unit, uint32 v);

/**
 * Get global STATIC_LAG value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_static_lag_get(int unit, uint32 *vp);


/**
 * Set global IPV4_CHECKSUM_MODE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_ipv4_checksum_mode_set(int unit, uint32 v);

/**
 * Get global IPV4_CHECKSUM_MODE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_ipv4_checksum_mode_get(int unit, uint32 *vp);


/**
 * Set global EXIT_FILTER_ON_BTAG value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_exit_filter_on_btag_set(int unit, uint32 v);

/**
 * Get global EXIT_FILTER_ON_BTAG value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_exit_filter_on_btag_get(int unit, uint32 *vp);


/**
 * Set global SWITCH_METER_ADJUST value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_switch_meter_adjust_set(int unit, uint32 v);

/**
 * Get global SWITCH_METER_ADJUST value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_switch_meter_adjust_get(int unit, uint32 *vp);


/**
 * Set global RC1_RULE_STARTIDX value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_rc1_rule_startidx_set(int unit, uint32 v);

/**
 * Get global RC1_RULE_STARTIDX value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_rc1_rule_startidx_get(int unit, uint32 *vp);


/**
 * Set global IPV6_ACL_ENABLE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_ipv6_acl_enable_set(int unit, uint32 v);

/**
 * Get global IPV6_ACL_ENABLE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_ipv6_acl_enable_get(int unit, uint32 *vp);


/**
 * Set global OI2EOFF value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oi2eoff_set(int unit, uint32 v);

/**
 * Get global OI2EOFF value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oi2eoff_get(int unit, uint32 *vp);


/**
 * Set global ETE_SEGMENT_NUM value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_ete_segment_num_set(int unit, uint32 v);

/**
 * Get global ETE_SEGMENT_NUM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_ete_segment_num_get(int unit, uint32 *vp);


/**
 * Set global OAM_EP_SEGMENT_NUM value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_ep_segment_num_set(int unit, uint32 v);

/**
 * Get global OAM_EP_SEGMENT_NUM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_ep_segment_num_get(int unit, uint32 *vp);


/**
 * Set global OAM_LOCAL_SEGMENT_NUM value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_local_segment_num_set(int unit, uint32 v);

/**
 * Get global OAM_LOCAL_SEGMENT_NUM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_local_segment_num_get(int unit, uint32 *vp);


/**
 * Set global OAM_PEER_SEGMENT_NUM value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_oam_peer_segment_num_set(int unit, uint32 v);

/**
 * Get global OAM_PEER_SEGMENT_NUM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_oam_peer_segment_num_get(int unit, uint32 *vp);


/**
 * Set global SAMPLE_DM1_SEGMENT_NUM value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_sample_dm1_segment_num_set(int unit, uint32 v);

/**
 * Get global SAMPLE_DM1_SEGMENT_NUM value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_sample_dm1_segment_num_get(int unit, uint32 *vp);


/**
 * Set global ARAD_FWDACTION value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_arad_fwdaction_set(int unit, uint32 v);

/**
 * Get global ARAD_FWDACTION value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_arad_fwdaction_get(int unit, uint32 *vp);


/**
 * Set global INTERLAKEN_OFFSET value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_interlaken_offset_set(int unit, uint32 v);

/**
 * Get global INTERLAKEN_OFFSET value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_interlaken_offset_get(int unit, uint32 *vp);


/**
 * Set global HIGIG_LOOP_ENABLE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_higig_loop_enable_set(int unit, uint32 v);

/**
 * Get global HIGIG_LOOP_ENABLE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_higig_loop_enable_get(int unit, uint32 *vp);


/**
 * Set global MACLEARN_FILTER_ENABLE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_maclearn_filter_enable_set(int unit, uint32 v);

/**
 * Get global MACLEARN_FILTER_ENABLE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_maclearn_filter_enable_get(int unit, uint32 *vp);


/**
 * Set global DEBUG_STREAM_ELEN value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_debug_stream_elen_set(int unit, uint32 v);

/**
 * Get global DEBUG_STREAM_ELEN value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_debug_stream_elen_get(int unit, uint32 *vp);


/**
 * Set global C3_SWS_STATIC_PAGE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_c3_sws_static_page_set(int unit, uint32 v);

/**
 * Get global C3_SWS_STATIC_PAGE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_c3_sws_static_page_get(int unit, uint32 *vp);


/**
 * Set global C3_SWS_INGRESS_BUBBLE_SQUEUE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_c3_sws_ingress_bubble_squeue_set(int unit, uint32 v);

/**
 * Get global C3_SWS_INGRESS_BUBBLE_SQUEUE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_c3_sws_ingress_bubble_squeue_get(int unit, uint32 *vp);


/**
 * Set global C3_SWS_FAB_TO_LINE_REDIRECT_QID0 value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_c3_sws_fab_to_line_redirect_qid0_set(int unit, uint32 v);

/**
 * Get global C3_SWS_FAB_TO_LINE_REDIRECT_QID0 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_c3_sws_fab_to_line_redirect_qid0_get(int unit, uint32 *vp);


/**
 * Set global C3_SWS_FAB_TO_LINE_REDIRECT_QID1 value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_c3_sws_fab_to_line_redirect_qid1_set(int unit, uint32 v);

/**
 * Get global C3_SWS_FAB_TO_LINE_REDIRECT_QID1 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_c3_sws_fab_to_line_redirect_qid1_get(int unit, uint32 *vp);


/**
 * Set global C3_SWS_EGRESS_BUBBLE_SQUEUE value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_c3_sws_egress_bubble_squeue_set(int unit, uint32 v);

/**
 * Get global C3_SWS_EGRESS_BUBBLE_SQUEUE value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_c3_sws_egress_bubble_squeue_get(int unit, uint32 *vp);


/**
 * Set global C3_SWS_LINE_TO_FAB_REDIRECT_QID0 value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_c3_sws_line_to_fab_redirect_qid0_set(int unit, uint32 v);

/**
 * Get global C3_SWS_LINE_TO_FAB_REDIRECT_QID0 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_c3_sws_line_to_fab_redirect_qid0_get(int unit, uint32 *vp);


/**
 * Set global C3_SWS_LINE_TO_FAB_REDIRECT_QID1 value.
 *
 * @param[in]  unit chip unit number
 * @param[in]  v value
 */
extern int soc_sbx_g3p1_c3_sws_line_to_fab_redirect_qid1_set(int unit, uint32 v);

/**
 * Get global C3_SWS_LINE_TO_FAB_REDIRECT_QID1 value.
 *
 * @param[in]  unit chip unit number
 * @param[out] vp returns value
 */
extern int soc_sbx_g3p1_c3_sws_line_to_fab_redirect_qid1_get(int unit, uint32 *vp);



/*
 * Table enumeration
 * Not public: exported for debugging convenience only
 */
typedef enum soc_sbx_g3p1_table_id_s {
    SOC_SBX_G3P1_QOS_TABLE_ID,
    SOC_SBX_G3P1_DSCPQOS_TABLE_ID,
    SOC_SBX_G3P1_IRT_TABLE_ID,
    SOC_SBX_G3P1_LAG_TABLE_ID,
    SOC_SBX_G3P1_RRT_TABLE_ID,
    SOC_SBX_G3P1_XT_TABLE_ID,
    SOC_SBX_G3P1_MIRROR_TABLE_ID,
    SOC_SBX_G3P1_EMIRROR_TABLE_ID,
    SOC_SBX_G3P1_MACAGE_TABLE_ID,
    SOC_SBX_G3P1_MST_TABLE_ID,
    SOC_SBX_G3P1_PV2E_TABLE_ID,
    SOC_SBX_G3P1_P2APPDATA_TABLE_ID,
    SOC_SBX_G3P1_PV2APPDATA_TABLE_ID,
    SOC_SBX_G3P1_PVV2EDATA_TABLE_ID,
    SOC_SBX_G3P1_V2E_TABLE_ID,
    SOC_SBX_G3P1_VRID2E_TABLE_ID,
    SOC_SBX_G3P1_LP_TABLE_ID,
    SOC_SBX_G3P1_L2CP_TABLE_ID,
    SOC_SBX_G3P1_L2CPSLOW_TABLE_ID,
    SOC_SBX_G3P1_L2CPNOP_TABLE_ID,
    SOC_SBX_G3P1_FT_TABLE_ID,
    SOC_SBX_G3P1_EVP2E_TABLE_ID,
    SOC_SBX_G3P1_OI2E_TABLE_ID,
    SOC_SBX_G3P1_REMARK_TABLE_ID,
    SOC_SBX_G3P1_EPV2E_TABLE_ID,
    SOC_SBX_G3P1_ERT_TABLE_ID,
    SOC_SBX_G3P1_OAM_BUBBLE_TABLE_ID,
    SOC_SBX_G3P1_OAMRX_P2E_TABLE_ID,
    SOC_SBX_G3P1_OAM_PEER_STATE_TABLE_ID,
    SOC_SBX_G3P1_PTP_COMPENSATION_TABLE_ID,
    SOC_SBX_G3P1_BFD_LD2EDATA_TABLE_ID,
    SOC_SBX_G3P1_BFD_LD2EDATAC_TABLE_ID,
    SOC_SBX_G3P1_SAMPLE6_TABLE_ID,
    SOC_SBX_G3P1_SAMPLE8_TABLE_ID,
    SOC_SBX_G3P1_SAMPLE9_TABLE_ID,
    SOC_SBX_G3P1_TABLE_MAX_ID
} soc_sbx_g3p1_table_id_t;


/*
 * Entry enumeration
 * Not public: exported for debugging convenience only
 */
typedef enum soc_sbx_g3p1_entry_id_s {
    SOC_SBX_G3P1_QOS_ID,
    SOC_SBX_G3P1_DSCPQOS_ID,
    SOC_SBX_G3P1_IRT_ID,
    SOC_SBX_G3P1_LAG_ID,
    SOC_SBX_G3P1_RRT_ID,
    SOC_SBX_G3P1_XT_ID,
    SOC_SBX_G3P1_MIRROR_ID,
    SOC_SBX_G3P1_EMIRROR_ID,
    SOC_SBX_G3P1_MACAGE_ID,
    SOC_SBX_G3P1_MST_ID,
    SOC_SBX_G3P1_PV2E_ID,
    SOC_SBX_G3P1_P2APPDATA_ID,
    SOC_SBX_G3P1_PV2APPDATA_ID,
    SOC_SBX_G3P1_PVV2EDATA_ID,
    SOC_SBX_G3P1_V2E_ID,
    SOC_SBX_G3P1_VRID2E_ID,
    SOC_SBX_G3P1_LP_ID,
    SOC_SBX_G3P1_L2CP_ID,
    SOC_SBX_G3P1_L2CPSLOW_ID,
    SOC_SBX_G3P1_L2CPNOP_ID,
    SOC_SBX_G3P1_FT_ID,
    SOC_SBX_G3P1_EVP2E_ID,
    SOC_SBX_G3P1_OI2E_ID,
    SOC_SBX_G3P1_REMARK_ID,
    SOC_SBX_G3P1_EPV2E_ID,
    SOC_SBX_G3P1_ERT_ID,
    SOC_SBX_G3P1_OAM_BUBBLE_ID,
    SOC_SBX_G3P1_OAMRX_P2E_ID,
    SOC_SBX_G3P1_OAM_PEER_STATE_ID,
    SOC_SBX_G3P1_PTP_COMPENSATION_ID,
    SOC_SBX_G3P1_BFD_LD2EDATA_ID,
    SOC_SBX_G3P1_BFD_LD2EDATAC_ID,
    SOC_SBX_G3P1_SAMPLE6_ID,
    SOC_SBX_G3P1_SAMPLE8_ID,
    SOC_SBX_G3P1_SAMPLE9_ID,
    SOC_SBX_G3P1_ENTRY_MAX_ID
} soc_sbx_g3p1_entry_id_t;


#define SOC_SBX_G3P1_TABLE_BANKS_MAX 10
#define SOC_SBX_G3P1_COMPLEX_BANKS_MAX 24
#define SOC_SBX_G3P1_COUNTER_BANKS_MAX 32
#define SOC_SBX_G3P1_POLICER_BANKS_MAX 9

/**
 * Commands for Mem read/write
 * For reference only.
 */
enum {
    OPCODE_READ = 0,
    OPCODE_WRITE = 1
};

/**
 * Pack function for quasi-internal complex table implementation code.
 */
typedef int (*soc_sbx_g3p1_complex_pack_f_t)
   (int unit, void *e, void *b, int bsz);

/*
 * Constant description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_g3p1_constant_desc_s {
    char *name;
} soc_sbx_g3p1_constant_desc_t;

/*
 * Global value description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_g3p1_global_desc_s {
    char *name;
    int   range;
    int   value;
} soc_sbx_g3p1_global_desc_t;

/*
 * Table bank description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_g3p1_table_bank_s {
    sbx_caladan3_ocm_port_e_t memory;
    int mbank;
    int size;
    int width;
    int base;
    int limit;
    int segment;
    int segflags;
} soc_sbx_g3p1_table_bank_t;

/*
 * Table type.
 */
typedef enum soc_sbx_g3p1_table_type_s {
    SOC_SBX_G3P1_ARRAY_TABLE_TYPE  = 0,
    SOC_SBX_G3P1_LPM_TABLE_TYPE    = 1,
    SOC_SBX_G3P1_EML_TABLE_TYPE    = 2,
    SOC_SBX_G3P1_EM32_TABLE_TYPE   = 3
} soc_sbx_g3p1_table_type_t;

/*
 * Table description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_g3p1_table_desc_s {
    char *name;
    int nextaligned;
    int type;
    int nbanks;
    soc_sbx_g3p1_table_bank_t banks[SOC_SBX_G3P1_TABLE_BANKS_MAX];
    /* Complex-only state */
    int b0size;
    void *cstate;
} soc_sbx_g3p1_table_desc_t;

/*
 * Integer format type
 * Not public: exported for debugging convenience only
 */
typedef enum soc_sbx_g3p1_integer_format_s {
    SOC_SBX_G3P1_NATIVE_INTEGER_FORMAT = 0,
    SOC_SBX_G3P1_LE_INTEGER_FORMAT     = 1,
    SOC_SBX_G3P1_BE_INTEGER_FORMAT     = 2
} soc_sbx_g3p1_integer_format_t;

/*
 * Index description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_g3p1_index_desc_s {
    char *name;
    int   pos;
    int   range;
    int   orange;
    int   width;
    int   format;
} soc_sbx_g3p1_index_desc_t;

/*
 * Field description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_g3p1_field_desc_s {
    char *name;
    int   pos;
    int   range;
    int   width;
} soc_sbx_g3p1_field_desc_t;

/*
 * Entry bank description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_g3p1_entry_bank_s {
    int tablebank;
    int width;
    int stridebits;
} soc_sbx_g3p1_entry_bank_t;

/*
 * Entry type
 */
typedef enum soc_sbx_g3p1_entry_type_s {
    SOC_SBX_G3P1_ARRAY_ENTRY_TYPE = 0,
    SOC_SBX_G3P1_ARRAYHOOK_ENTRY_TYPE = 1,
    SOC_SBX_G3P1_EXT_ENTRY_TYPE = 2,
    SOC_SBX_G3P1_LPM_ENTRY_TYPE = 3,
    SOC_SBX_G3P1_EML_ENTRY_TYPE = 4,
    SOC_SBX_G3P1_EM32_ENTRY_TYPE = 5
} soc_sbx_g3p1_entry_type_t;

/*
 * Entry description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_g3p1_entry_desc_s {
    char *name;
    int type;
    soc_sbx_g3p1_table_id_t table;
    int esize;
    int epsize;
    int width_in_words;
    soc_sbx_g3p1_complex_pack_f_t pack;
    int nindexes;
    soc_sbx_g3p1_index_desc_t *indexes;
    int indexeswidth;
    int nfields;
    soc_sbx_g3p1_field_desc_t *fields;
    int totalwidth;
    int nbanks;
    soc_sbx_g3p1_entry_bank_t banks[SOC_SBX_G3P1_TABLE_BANKS_MAX];
} soc_sbx_g3p1_entry_desc_t;

/*
 * Counter bank description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_g3p1_counter_bank_desc_s {
    int memory;
    int mbank;
    int base;
    int size;
} soc_sbx_g3p1_counter_bank_desc_t;

/*
 * Counter description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_g3p1_counter_desc_s {
    char *name;
    int bank;
    int base;
    int size;
} soc_sbx_g3p1_counter_desc_t;

/*
 * Memory bank type
 * Not public: exported for debugging convenience only
 */
typedef enum soc_sbx_g3p1_bank_type_s {
    SOC_SBX_G3P1_TABLE_BANK_TYPE,
    SOC_SBX_G3P1_COUNTER_BANK_TYPE,
    SOC_SBX_G3P1_POLICER_BANK_TYPE
} soc_sbx_g3p1_bank_type_t;

/*
 * Memory bank description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_g3p1_memory_bank_desc_s {
    soc_sbx_g3p1_bank_type_t type;
    int number;
    int bank;
    int nextaligned;
} soc_sbx_g3p1_memory_bank_desc_t;

/*
 * Memory description type
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_g3p1_memory_desc_s {
    char *name;
    int width;
    int size;
    int dma;
    int descending;
    int reg;
    int alignedlist;
    soc_sbx_g3p1_memory_bank_desc_t *banks;
    int nbanks;
    sbx_caladan3_ocm_port_e_t ocmport;
} soc_sbx_g3p1_memory_desc_t;

/*
 * Table management state structure
 * Not public: exported for debugging convenience only
 */
typedef struct soc_sbx_g3p1_table_manager_s {
    int behost;
    soc_sbx_g3p1_memory_desc_t *memories;
    soc_sbx_g3p1_constant_desc_t *constants;
    soc_sbx_g3p1_global_desc_t *globals;
    int alignedlist;
    soc_sbx_g3p1_table_desc_t *tables;
    soc_sbx_g3p1_index_desc_t *indexes;
    soc_sbx_g3p1_entry_desc_t *entries;
    soc_sbx_g3p1_memory_bank_desc_t *memorybanks;
    int bufsize;
    uint8 *entrydmabuf;
    char *simbuffer;
    uint32 simbuffersize;
    sal_mutex_t dmabufmutex;
} soc_sbx_g3p1_table_manager_t;

/* ***
 * *** Types for public functions
 * ***/

/*
 * Big field types
 */

/** 6 byte type (typedef needed to keep ASE from dying) */
typedef uint8 soc_sbx_g3p1_6_byte_t[6];
/** 7 byte type (typedef needed to keep ASE from dying) */
typedef uint8 soc_sbx_g3p1_7_byte_t[7];

/**
 * Memory parameter structure.
 */
typedef struct soc_sbx_g3p1_memory_params_s {
    int size;   /**< size of memory, in words (-1 means unknown) */
    int width;  /**< width of memory word, in bits */
} soc_sbx_g3p1_memory_params_t;

/**
 * Table bank parameters.
 * 
 * Tables are composed of one or more banks, each of which is a contiguous
 * section of a memory.
 */
typedef struct soc_sbx_g3p1_table_bank_params_s {
    int base;   /**< base address, in memory words */
    int size;   /**< size, in memory words */
    int memory; /**< memory index (also CPU DMA memory port number) */
} soc_sbx_g3p1_table_bank_params_t;

typedef struct soc_sbx_g3p1_qos_s {
    uint32 e;
    uint32 dp;
    uint32 cos;
    uint32 fcos;
    uint32 mefcos;
} soc_sbx_g3p1_qos_t;
typedef struct soc_sbx_g3p1_dscpqos_s {
    uint32 e;
    uint32 dp;
    uint32 cos;
    uint32 fcos;
    uint32 mefcos;
} soc_sbx_g3p1_dscpqos_t;
typedef struct soc_sbx_g3p1_irt_s {
    uint32 vlan;
    uint32 ftidx;
    uint32 mirror;
    uint32 usevlan;
    uint32 useftidx;
    uint32 copy;
    uint32 dp;
    uint32 cos;
    uint32 fcos;
    uint32 usedp;
    uint32 usecos;
    uint32 policer;
    uint32 typedpolice;
    uint32 mefcos;
    uint32 mef;
} soc_sbx_g3p1_irt_t;
typedef struct soc_sbx_g3p1_lag_s {
    uint32 qid;
    uint32 oi;
} soc_sbx_g3p1_lag_t;
typedef struct soc_sbx_g3p1_rrt_s {
    uint32 backup;
} soc_sbx_g3p1_rrt_t;
typedef struct soc_sbx_g3p1_xt_s {
    uint32 forward;
    uint32 dp;
    uint32 qid;
    uint32 fwdid;
    uint32 trunc;
    uint32 learn;
    uint32 ppspolice;
    uint32 policer;
} soc_sbx_g3p1_xt_t;
typedef struct soc_sbx_g3p1_mirror_s {
    uint32 yellow;
    uint32 qid;
    uint32 oi;
} soc_sbx_g3p1_mirror_t;
typedef struct soc_sbx_g3p1_emirror_s {
    uint32 yellow;
    uint32 qid;
    uint32 oi;
    uint32 dqueue;
    uint32 local;
} soc_sbx_g3p1_emirror_t;
typedef struct soc_sbx_g3p1_macage_s {
    uint32 age;
} soc_sbx_g3p1_macage_t;
typedef struct soc_sbx_g3p1_mst_s {
    uint32 learn;
    uint32 pim;
    uint32 igmp;
    uint32 rtcopy;
    uint32 l2cpcopy;
    uint32 dcopy;
    uint32 ipredirect;
    uint32 learn_bmac;
    uint32 mirroridx;
    uint32 vsi;
} soc_sbx_g3p1_mst_t;
typedef struct soc_sbx_g3p1_pv2e_s {
    uint32 lpi;
    uint32 vlan;
    uint32 stpstate;
    uint32 vpws;
} soc_sbx_g3p1_pv2e_t;
typedef struct soc_sbx_g3p1_p2appdata_s {
    uint32 ifilteren;
    uint32 efilteren;
} soc_sbx_g3p1_p2appdata_t;
typedef struct soc_sbx_g3p1_pv2appdata_s {
    uint32 member;
} soc_sbx_g3p1_pv2appdata_t;
typedef struct soc_sbx_g3p1_pvv2edata_s {
    uint32 vpws;
    uint32 stpstate;
    uint32 vlan;
    uint32 lpi;
    uint32 hit;
    uint32 keeporstrip;
    uint32 replace;
    uint32 vid;
    uint32 vidop;
} soc_sbx_g3p1_pvv2edata_t;
typedef struct soc_sbx_g3p1_v2e_s {
    uint32 pim;
    uint32 igmp;
    uint32 policerbypass;
    uint32 forceflood;
    uint32 dropunksmac;
    uint32 dropunkucast;
    uint32 dontlearn;
    uint32 vrf;
    uint32 v6mc;
    uint32 v4mc;
    uint32 laghash;
    uint32 v4uc;
    uint32 v6uc;
} soc_sbx_g3p1_v2e_t;
typedef struct soc_sbx_g3p1_vrid2e_s {
    uint32 v4_vrid0;
    uint32 v4_vrid1;
    uint32 v6_vrid0;
    uint32 v6_vrid1;
} soc_sbx_g3p1_vrid2e_t;
typedef struct soc_sbx_g3p1_lp_s {
    uint32 pid;
    uint32 qos;
    uint32 useexp;
    uint32 usedscp;
    uint32 updatefdp;
    uint32 mirror;
    uint32 updaterdp;
    uint32 policer;
    uint32 typedpolice;
    uint32 mefcos;
    uint32 mef;
    uint32 ccounter;
    uint32 priclass;
    uint32 allpri;
    uint32 xtpolreplace;
    uint32 counter;
    uint32 typedcount;
    uint32 color;
    uint32 usecolor;
    uint32 oamepi;
} soc_sbx_g3p1_lp_t;
typedef struct soc_sbx_g3p1_l2cp_s {
    uint32 ftidx;
    uint32 forward;
    uint32 passstp;
    uint32 copy;
} soc_sbx_g3p1_l2cp_t;
typedef struct soc_sbx_g3p1_l2cpslow_s {
    uint32 ftidx;
    uint32 forward;
    uint32 passstp;
    uint32 copy;
} soc_sbx_g3p1_l2cpslow_t;
typedef struct soc_sbx_g3p1_l2cpnop_s {
    uint32 ftidx;
    uint32 forward;
    uint32 passstp;
    uint32 copy;
} soc_sbx_g3p1_l2cpnop_t;
typedef struct soc_sbx_g3p1_ft_s {
    uint32 rridx;
    uint32 excidx;
    uint32 lenadj;
    uint32 mc;
    uint32 t;
    uint32 hc;
    uint32 oi;
    uint32 qid;
    uint32 lagbase;
    uint32 lagsize;
    uint32 lag;
    uint32 oib;
    uint32 qidb;
    uint32 lagbaseb;
    uint32 lagsizeb;
    uint32 lagb;
} soc_sbx_g3p1_ft_t;
typedef struct soc_sbx_g3p1_evp2e_s {
    uint32 eteptr;
    uint32 counter;
    uint32 ccounter;
    uint32 priclass;
    uint32 allpri;
} soc_sbx_g3p1_evp2e_t;
typedef struct soc_sbx_g3p1_oi2e_s {
    uint32 eteptr;
    uint32 counter;
    uint32 ccounter;
    uint32 priclass;
    uint32 allpri;
} soc_sbx_g3p1_oi2e_t;
typedef struct soc_sbx_g3p1_remark_s {
    uint32 cfi;
    uint32 pri;
    uint32 exp;
    uint32 dscp;
} soc_sbx_g3p1_remark_t;
typedef struct soc_sbx_g3p1_epv2e_s {
    uint32 drop;
    uint32 strip;
} soc_sbx_g3p1_epv2e_t;
typedef struct soc_sbx_g3p1_ert_s {
    uint32 mirror;
    uint32 drop;
    uint32 counter;
} soc_sbx_g3p1_ert_t;
typedef struct soc_sbx_g3p1_oam_bubble_s {
    uint32 bubble_mode;
    uint32 je;
    uint32 i;
    uint32 bubble_stream;
    uint32 t;
    uint32 interval_index;
    uint32 reserved;
    uint32 count;
    uint32 timeout;
} soc_sbx_g3p1_oam_bubble_t;
typedef struct soc_sbx_g3p1_oamrx_p2e_s {
    uint32 svc_hdl;
    uint32 not_used;
    uint32 mdlvl_0_m;
    uint32 mdlvl_0_p;
    uint32 mdlvl_0_d;
    uint32 mdlvl_0_f;
    uint32 mdlvl_1_m;
    uint32 mdlvl_1_p;
    uint32 mdlvl_1_d;
    uint32 mdlvl_1_f;
    uint32 mdlvl_2_m;
    uint32 mdlvl_2_p;
    uint32 mdlvl_2_d;
    uint32 mdlvl_2_f;
    uint32 mdlvl_3_m;
    uint32 mdlvl_3_p;
    uint32 mdlvl_3_d;
    uint32 mdlvl_3_f;
    uint32 mdlvl_4_m;
    uint32 mdlvl_4_p;
    uint32 mdlvl_4_d;
    uint32 mdlvl_4_f;
    uint32 mdlvl_5_m;
    uint32 mdlvl_5_p;
    uint32 mdlvl_5_d;
    uint32 mdlvl_5_f;
    uint32 mdlvl_6_m;
    uint32 mdlvl_6_p;
    uint32 mdlvl_6_d;
    uint32 mdlvl_6_f;
    uint32 mdlvl_7_m;
    uint32 mdlvl_7_p;
    uint32 mdlvl_7_d;
    uint32 mdlvl_7_f;
} soc_sbx_g3p1_oamrx_p2e_t;
typedef struct soc_sbx_g3p1_oam_peer_state_s {
    uint32 rdi_ack;
    uint32 rdi_state;
} soc_sbx_g3p1_oam_peer_state_t;
typedef struct soc_sbx_g3p1_ptp_compensation_s {
    uint32 compensation;
} soc_sbx_g3p1_ptp_compensation_t;
typedef struct soc_sbx_g3p1_bfd_ld2edata_s {
    uint32 wdg_id;
    uint32 slowstart;
    uint32 rdmode;
    uint32 rstate;
    uint32 f;
    uint32 poll;
    uint32 sta;
    uint32 ldiag;
    uint32 version;
    uint32 rdiscri;
} soc_sbx_g3p1_bfd_ld2edata_t;
typedef struct soc_sbx_g3p1_bfd_ld2edatac_s {
    uint32 rMinRxInterval;
} soc_sbx_g3p1_bfd_ld2edatac_t;
typedef struct soc_sbx_g3p1_sample6_s {
    uint32 pad;
    uint32 test6;
} soc_sbx_g3p1_sample6_t;
typedef struct soc_sbx_g3p1_sample8_s {
    uint32 pad;
    uint32 test8;
} soc_sbx_g3p1_sample8_t;
typedef struct soc_sbx_g3p1_sample9_s {
    uint32 pad;
    uint32 test9;
} soc_sbx_g3p1_sample9_t;


/* Parse an integer */
int soc_sbx_g3p1_read(char *a, int range, uint32 *vp);
/* Read an arbitrarily large value from shell command arguments */
int soc_sbx_g3p1_big_value_read(uint8 *v,
                int width, int noarg0, int argc, char **argv);

/* Read a 32 bit value from shell command arguments */
int soc_sbx_g3p1_value_read(uint32 *v,
                int range, int noarg0, int argc, char **argv);

/* Print an integer */
int soc_sbx_g3p1_print(int range, uint32 v);

/* Get a constant value */
int soc_sbx_g3p1_constant_get(int unit, char *sym, uint32 *vp);

/* Set a global value into the running microcode */
int soc_sbx_g3p1_global_set(int unit, char *sym, uint32 v);

/* Get a global value */
int soc_sbx_g3p1_global_get(int unit, char *sym, uint32 *vp);

/* Insert a bit string into a buffer */
void soc_sbx_g3p1_insert(uint8 *b,
                int bbe, int pos, int width,
                uint8 *b0, int b0be, int swab);

/* OR a bit string into a buffer */
void soc_sbx_g3p1_insert_or(uint8 *b,
                int bbe, int pos, int width,
                uint8 *b0, int b0be, int swab);

/*
 * Extract a bit string into a buffer 
 *
 * b (source) and b0 (destination) can overlap as long as b >= b0 and
 * swab == 0.  This behavior is exploited by the entry_read_write function
 */
void soc_sbx_g3p1_extract(uint8 *b,
                int bbe, int pos, int width,
                uint8 *b0, int b0be, int swab);

/* Read or write an entry */
int soc_sbx_g3p1_entry_read_write(int unit, int read, int idx,
                 soc_sbx_g3p1_entry_desc_t *ed);

int soc_sbx_g3p1_entry_generic_fast_word_set(int unit,
                soc_sbx_g3p1_field_desc_t *fd,
                soc_sbx_g3p1_entry_desc_t *ed,
                int startvindex,
                int endvindex,
                int *sets,
                uint32 *vs);

int soc_sbx_g3p1_entry_generic_fast_small_set(int unit,
                soc_sbx_g3p1_field_desc_t *fd,
                soc_sbx_g3p1_entry_desc_t *ed,
                int startvindex,
                int endvindex,
                int *sets,
                uint32 *vs);

int soc_sbx_g3p1_entry_generic_fast_set(int unit,
                soc_sbx_g3p1_field_desc_t *fd,
                soc_sbx_g3p1_entry_desc_t *ed,
                int startvindex,
                int endvindex,
                int *sets,
                uint32 *vs);
int soc_sbx_g3p1_entry_generic_fast_word_get(int unit,
                soc_sbx_g3p1_field_desc_t *fd,
                soc_sbx_g3p1_entry_desc_t *ed,
                int startvindex,
                int endvindex,
                uint32 *vs);

int soc_sbx_g3p1_entry_generic_fast_small_get(int unit,
                soc_sbx_g3p1_field_desc_t *fd,
                soc_sbx_g3p1_entry_desc_t *ed,
                int startvindex,
                int endvindex,
                uint32 *vs);
int soc_sbx_g3p1_entry_generic_fast_get(int unit,
                soc_sbx_g3p1_field_desc_t *fd,
                soc_sbx_g3p1_entry_desc_t *ed,
                int startvindex,
                int endvindex,
                uint32 *vs);
/* Format a microcode package symbol (for get or set) */
void soc_sbx_g3p1_ucode_symbol_format(
                char *sym, int symlen,
                char *s0, char *s1, int d, char *s2, char *s3);

/* Get a symbol from the microcode package */
int soc_sbx_g3p1_ucode_get(int unit,
                char *sym, int symlen, int *v,
                char *s0, char *s1, int d, char *s2, char *s3);

/* Set a symbol from the microcode package */
int soc_sbx_g3p1_ucode_set(int unit,
                char *sym, int symlen, int v,
                char *s0, char *s1, int d, char *s2, char *s3);
/* Find an entry index from a name */
int soc_sbx_g3p1_index_find(
                soc_sbx_g3p1_entry_desc_t *ed, char *a);

/* Read a sequence of index arguments */
int soc_sbx_g3p1_indexes_read(void **idxs,
                soc_sbx_g3p1_entry_desc_t *ed, int argc, char **argv);

/* Print a sequence of indexes */
void soc_sbx_g3p1_indexes_print(void **indexpointers,
                soc_sbx_g3p1_entry_desc_t *ed);

/* Parse range arguments with optional flags */
int soc_sbx_g3p1_range_parse(int argc, char **argv,
                int *lower, int *upper,
                int *f0, char *f0name,
                int *f1, char *f1name,
                int *f2, char *f2name);
/* Find an entry field from a name */
int soc_sbx_g3p1_field_find(
                soc_sbx_g3p1_entry_desc_t *ed, char *a);

/* Update the base of a table bank */
int soc_sbx_g3p1_table_bank_base_set(int unit,
                int tid, int bank, int base);

/* Get the table given bank segment and address */
int soc_sbx_g3p1_table_bank_get(soc_sbx_g3p1_table_manager_t *tm, 
                   sbx_caladan3_ocm_port_e_t port, int segment, int addr,
                   soc_sbx_g3p1_table_bank_t **bank)
;  

/* Get the ocm port given a memory  */
void soc_sbx_g3p1_ocm_port_get(int mid, sbx_caladan3_ocm_port_e_t *ocmport);  

/* Sets a memory bank base */
int soc_sbx_g3p1_memory_bank_base_set(int unit,
                soc_sbx_g3p1_memory_bank_desc_t *mb, int base);

/* Get the base & size of a bank in a memory */
void soc_sbx_g3p1_memory_bank_params_get(int *base, int *size,
                soc_sbx_g3p1_memory_bank_desc_t *mb,
                soc_sbx_g3p1_table_manager_t *tm);  

/* Pack all memory banks based on current sizes */
int soc_sbx_g3p1_memory_banks_pack(int unit);

/* Slide the base of all banks from a starting bank in a memory */
int soc_sbx_g3p1_bank_slide(int unit,
                soc_sbx_g3p1_memory_desc_t *md,
                int mbank, int offset);

/* Realign aligned table banks */
int soc_sbx_g3p1_tables_realign(int unit);

/* Set an entry index range from a table size */
void soc_sbx_g3p1_entry_index_ranges_set(int unit,
                soc_sbx_g3p1_entry_id_t eid);

/* Set the size of a table */
int soc_sbx_g3p1_generic_table_size_set(int unit,
                soc_sbx_g3p1_table_id_t tid, int size, int pack);

void soc_sbx_g3p1_memory_bank_sort(int size,
                soc_sbx_g3p1_memory_bank_desc_t *mb,
                soc_sbx_g3p1_table_manager_t *tm);

void soc_sbx_g3p1_memory_banks_init(soc_sbx_g3p1_table_manager_t *tm);

/* Find a memory bank member by address */
int soc_sbx_g3p1_memory_bank_find(
                soc_sbx_g3p1_table_manager_t *tm,
                soc_sbx_g3p1_memory_desc_t *md,
                int addr, char **name, int *offset, int *iscnt);

/**
 * Microcode accessor uninitialization function.
 *
 * @param[in]  unit chip unit number
 */
extern int soc_sbx_g3p1_uninit(int unit);

/**
 * Microcode accessor initialization function.
 *
 * @param[in]  unit chip unit number
 * @param[in]  ucode asm package
 */
extern int soc_sbx_g3p1_init(int unit, void *ucode);

/**
 * Get memory parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  mid memory index (also CPU DMA memory port number)
 * @param[out] mp memory parameters
 */
extern int soc_sbx_g3p1_memory_params_get(int unit, int mid,
                soc_sbx_g3p1_memory_params_t *mp);

/**
 * Set memory size.
 *
 * Currently, the memory size is not used for anything.
 *
 * @param[in]  unit chip unit number
 * @param[in]  mid memory index (also CPU DMA memory port number)
 * @param[in]  size memory size, in words
 */
extern int soc_sbx_g3p1_memory_size_set(int unit, int mid, int size);

/*
 * Table state accessors
 */

/* Table state accessors for qos */

/**
 * Get qos table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_qos_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get qos table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_qos_table_size_get(int unit);

/**
 * Set qos table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_qos_table_size_set(int unit, int size);

/* Table state accessors for dscpqos */

/**
 * Get dscpqos table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_dscpqos_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get dscpqos table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_dscpqos_table_size_get(int unit);

/**
 * Set dscpqos table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_dscpqos_table_size_set(int unit, int size);

/* Table state accessors for irt */

/**
 * Get irt table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_irt_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get irt table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_irt_table_size_get(int unit);

/**
 * Set irt table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_irt_table_size_set(int unit, int size);

/* Table state accessors for lag */

/**
 * Get lag table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_lag_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get lag table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_lag_table_size_get(int unit);

/**
 * Set lag table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_lag_table_size_set(int unit, int size);

/* Table state accessors for rrt */

/**
 * Get rrt table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_rrt_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get rrt table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_rrt_table_size_get(int unit);

/**
 * Set rrt table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_rrt_table_size_set(int unit, int size);

/* Table state accessors for xt */

/**
 * Get xt table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_xt_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get xt table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_xt_table_size_get(int unit);

/**
 * Set xt table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_xt_table_size_set(int unit, int size);

/* Table state accessors for mirror */

/**
 * Get mirror table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_mirror_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get mirror table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_mirror_table_size_get(int unit);

/**
 * Set mirror table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_mirror_table_size_set(int unit, int size);

/* Table state accessors for emirror */

/**
 * Get emirror table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_emirror_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get emirror table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_emirror_table_size_get(int unit);

/**
 * Set emirror table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_emirror_table_size_set(int unit, int size);

/* Table state accessors for macage */

/**
 * Get macage table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_macage_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get macage table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_macage_table_size_get(int unit);

/**
 * Set macage table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_macage_table_size_set(int unit, int size);

/* Table state accessors for mst */

/**
 * Get mst table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_mst_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get mst table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_mst_table_size_get(int unit);

/**
 * Set mst table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_mst_table_size_set(int unit, int size);

/* Table state accessors for pv2e */

/**
 * Get pv2e table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_pv2e_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get pv2e table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_pv2e_table_size_get(int unit);

/**
 * Set pv2e table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_pv2e_table_size_set(int unit, int size);

/* Table state accessors for p2appdata */

/**
 * Get p2appdata table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_p2appdata_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get p2appdata table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_p2appdata_table_size_get(int unit);

/**
 * Set p2appdata table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_p2appdata_table_size_set(int unit, int size);

/* Table state accessors for pv2appdata */

/**
 * Get pv2appdata table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_pv2appdata_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get pv2appdata table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_pv2appdata_table_size_get(int unit);

/**
 * Set pv2appdata table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_pv2appdata_table_size_set(int unit, int size);

/* Table state accessors for pvv2edata */

/**
 * Get pvv2edata table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_pvv2edata_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get pvv2edata table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_pvv2edata_table_size_get(int unit);

/**
 * Set pvv2edata table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_pvv2edata_table_size_set(int unit, int size);

/* Table state accessors for v2e */

/**
 * Get v2e table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_v2e_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get v2e table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_v2e_table_size_get(int unit);

/**
 * Set v2e table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_v2e_table_size_set(int unit, int size);

/* Table state accessors for vrid2e */

/**
 * Get vrid2e table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_vrid2e_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get vrid2e table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_vrid2e_table_size_get(int unit);

/**
 * Set vrid2e table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_vrid2e_table_size_set(int unit, int size);

/* Table state accessors for lp */

/**
 * Get lp table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_lp_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get lp table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_lp_table_size_get(int unit);

/**
 * Set lp table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_lp_table_size_set(int unit, int size);

/* Table state accessors for l2cp */

/**
 * Get l2cp table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_l2cp_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get l2cp table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_l2cp_table_size_get(int unit);

/**
 * Set l2cp table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_l2cp_table_size_set(int unit, int size);

/* Table state accessors for l2cpslow */

/**
 * Get l2cpslow table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_l2cpslow_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get l2cpslow table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_l2cpslow_table_size_get(int unit);

/**
 * Set l2cpslow table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_l2cpslow_table_size_set(int unit, int size);

/* Table state accessors for l2cpnop */

/**
 * Get l2cpnop table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_l2cpnop_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get l2cpnop table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_l2cpnop_table_size_get(int unit);

/**
 * Set l2cpnop table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_l2cpnop_table_size_set(int unit, int size);

/* Table state accessors for ft */

/**
 * Get ft table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_ft_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get ft table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_ft_table_size_get(int unit);

/**
 * Set ft table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_ft_table_size_set(int unit, int size);

/* Table state accessors for evp2e */

/**
 * Get evp2e table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_evp2e_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get evp2e table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_evp2e_table_size_get(int unit);

/**
 * Set evp2e table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_evp2e_table_size_set(int unit, int size);

/* Table state accessors for oi2e */

/**
 * Get oi2e table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_oi2e_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get oi2e table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_oi2e_table_size_get(int unit);

/**
 * Set oi2e table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_oi2e_table_size_set(int unit, int size);

/* Table state accessors for remark */

/**
 * Get remark table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_remark_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get remark table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_remark_table_size_get(int unit);

/**
 * Set remark table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_remark_table_size_set(int unit, int size);

/* Table state accessors for epv2e */

/**
 * Get epv2e table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_epv2e_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get epv2e table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_epv2e_table_size_get(int unit);

/**
 * Set epv2e table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_epv2e_table_size_set(int unit, int size);

/* Table state accessors for ert */

/**
 * Get ert table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_ert_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get ert table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_ert_table_size_get(int unit);

/**
 * Set ert table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_ert_table_size_set(int unit, int size);

/* Table state accessors for oam_bubble */

/**
 * Get oam_bubble table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_oam_bubble_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get oam_bubble table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_oam_bubble_table_size_get(int unit);

/**
 * Set oam_bubble table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_oam_bubble_table_size_set(int unit, int size);

/* Table state accessors for oamrx_p2e */

/**
 * Get oamrx_p2e table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_oamrx_p2e_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get oamrx_p2e table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_oamrx_p2e_table_size_get(int unit);

/**
 * Set oamrx_p2e table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_oamrx_p2e_table_size_set(int unit, int size);

/* Table state accessors for oam_peer_state */

/**
 * Get oam_peer_state table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_oam_peer_state_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get oam_peer_state table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_oam_peer_state_table_size_get(int unit);

/**
 * Set oam_peer_state table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_oam_peer_state_table_size_set(int unit, int size);

/* Table state accessors for ptp_compensation */

/**
 * Get ptp_compensation table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_ptp_compensation_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get ptp_compensation table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_ptp_compensation_table_size_get(int unit);

/**
 * Set ptp_compensation table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_ptp_compensation_table_size_set(int unit, int size);

/* Table state accessors for bfd_ld2edata */

/**
 * Get bfd_ld2edata table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_bfd_ld2edata_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get bfd_ld2edata table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_bfd_ld2edata_table_size_get(int unit);

/**
 * Set bfd_ld2edata table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_bfd_ld2edata_table_size_set(int unit, int size);

/* Table state accessors for bfd_ld2edatac */

/**
 * Get bfd_ld2edatac table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_bfd_ld2edatac_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get bfd_ld2edatac table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_bfd_ld2edatac_table_size_get(int unit);

/**
 * Set bfd_ld2edatac table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_bfd_ld2edatac_table_size_set(int unit, int size);

/* Table state accessors for sample6 */

/**
 * Get sample6 table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_sample6_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get sample6 table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_sample6_table_size_get(int unit);

/**
 * Set sample6 table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_sample6_table_size_set(int unit, int size);

/* Table state accessors for sample8 */

/**
 * Get sample8 table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_sample8_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get sample8 table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_sample8_table_size_get(int unit);

/**
 * Set sample8 table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_sample8_table_size_set(int unit, int size);

/* Table state accessors for sample9 */

/**
 * Get sample9 table bank parameters.
 *
 * @param[in]  unit chip unit number
 * @param[in]  bank bank number
 * @param[out] p returns table bank parameters
 */
extern int soc_sbx_g3p1_sample9_bank_params_get(int unit, int bank,
                soc_sbx_g3p1_table_bank_params_t *p);

/**
 * Get sample9 table size.
 *
 * @param[in]  unit chip unit number
 * @return     table size, in bank address units
 */
extern int soc_sbx_g3p1_sample9_table_size_get(int unit);

/**
 * Set sample9 table size.
 *
 * @param[in]  unit chip unit number
 * @param[in]  size table size, in bank address units
 */
extern int soc_sbx_g3p1_sample9_table_size_set(int unit, int size);



/**
 * Initialize qos entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_qos_t_init(
    soc_sbx_g3p1_qos_t *e);

/**
 * Pack qos entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_qos_pack(int unit,
    soc_sbx_g3p1_qos_t *e, uint8 *b, int bsz);

/**
 * Unpack qos entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_qos_unpack(int unit,
                soc_sbx_g3p1_qos_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_qos_index_check(int unit,
                int *vindex,
                 int de , int pri , int prof );

extern int soc_sbx_g3p1_qos_entry_check(int unit,
                soc_sbx_g3p1_qos_t *e);

/**
 * qos table size get
 *
 */
extern int soc_sbx_g3p1_qos_entry_table_size_get(int unit,
                int *tsize,  int de , int pri , int prof );

/**
 * Synchronously set qos entry.
 *
 */
extern int soc_sbx_g3p1_qos_set(int unit,
                 int de , int pri , int prof ,
                soc_sbx_g3p1_qos_t *entry);

/**
New entry set accessor implementation for qos
*/
extern int soc_sbx_g3p1_qos_data_set(int unit,
                 int de , int pri , int prof ,
                unsigned char *buf, unsigned char size);
/**
 *  Get qos entry.
 */
extern int soc_sbx_g3p1_qos_get(int unit,
                 int de , int pri , int prof ,
                soc_sbx_g3p1_qos_t *entry);

/**
New entry get accessor implementation for qos
*/
extern int soc_sbx_g3p1_qos_data_get(int unit,
                 int de , int pri , int prof ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize dscpqos entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_dscpqos_t_init(
    soc_sbx_g3p1_dscpqos_t *e);

/**
 * Pack dscpqos entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_dscpqos_pack(int unit,
    soc_sbx_g3p1_dscpqos_t *e, uint8 *b, int bsz);

/**
 * Unpack dscpqos entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_dscpqos_unpack(int unit,
                soc_sbx_g3p1_dscpqos_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_dscpqos_index_check(int unit,
                int *vindex,
                 int dscp , int prof );

extern int soc_sbx_g3p1_dscpqos_entry_check(int unit,
                soc_sbx_g3p1_dscpqos_t *e);

/**
 * dscpqos table size get
 *
 */
extern int soc_sbx_g3p1_dscpqos_entry_table_size_get(int unit,
                int *tsize,  int dscp , int prof );

/**
 * Synchronously set dscpqos entry.
 *
 */
extern int soc_sbx_g3p1_dscpqos_set(int unit,
                 int dscp , int prof ,
                soc_sbx_g3p1_dscpqos_t *entry);

/**
New entry set accessor implementation for dscpqos
*/
extern int soc_sbx_g3p1_dscpqos_data_set(int unit,
                 int dscp , int prof ,
                unsigned char *buf, unsigned char size);
/**
 *  Get dscpqos entry.
 */
extern int soc_sbx_g3p1_dscpqos_get(int unit,
                 int dscp , int prof ,
                soc_sbx_g3p1_dscpqos_t *entry);

/**
New entry get accessor implementation for dscpqos
*/
extern int soc_sbx_g3p1_dscpqos_data_get(int unit,
                 int dscp , int prof ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize irt entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_irt_t_init(
    soc_sbx_g3p1_irt_t *e);

/**
 * Pack irt entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_irt_pack(int unit,
    soc_sbx_g3p1_irt_t *e, uint8 *b, int bsz);

/**
 * Unpack irt entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_irt_unpack(int unit,
                soc_sbx_g3p1_irt_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_irt_index_check(int unit,
                int *vindex,
                 int irule );

extern int soc_sbx_g3p1_irt_entry_check(int unit,
                soc_sbx_g3p1_irt_t *e);

/**
 * irt table size get
 *
 */
extern int soc_sbx_g3p1_irt_entry_table_size_get(int unit,
                int *tsize,  int irule );

/**
 * Synchronously set irt entry.
 *
 */
extern int soc_sbx_g3p1_irt_set(int unit,
                 int irule ,
                soc_sbx_g3p1_irt_t *entry);

/**
New entry set accessor implementation for irt
*/
extern int soc_sbx_g3p1_irt_data_set(int unit,
                 int irule ,
                unsigned char *buf, unsigned char size);
/**
 *  Get irt entry.
 */
extern int soc_sbx_g3p1_irt_get(int unit,
                 int irule ,
                soc_sbx_g3p1_irt_t *entry);

/**
New entry get accessor implementation for irt
*/
extern int soc_sbx_g3p1_irt_data_get(int unit,
                 int irule ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize lag entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_lag_t_init(
    soc_sbx_g3p1_lag_t *e);

/**
 * Pack lag entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_lag_pack(int unit,
    soc_sbx_g3p1_lag_t *e, uint8 *b, int bsz);

/**
 * Unpack lag entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_lag_unpack(int unit,
                soc_sbx_g3p1_lag_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_lag_index_check(int unit,
                int *vindex,
                 int lagi );

extern int soc_sbx_g3p1_lag_entry_check(int unit,
                soc_sbx_g3p1_lag_t *e);

/**
 * lag table size get
 *
 */
extern int soc_sbx_g3p1_lag_entry_table_size_get(int unit,
                int *tsize,  int lagi );

/**
 * Synchronously set lag entry.
 *
 */
extern int soc_sbx_g3p1_lag_set(int unit,
                 int lagi ,
                soc_sbx_g3p1_lag_t *entry);

/**
New entry set accessor implementation for lag
*/
extern int soc_sbx_g3p1_lag_data_set(int unit,
                 int lagi ,
                unsigned char *buf, unsigned char size);
/**
 *  Get lag entry.
 */
extern int soc_sbx_g3p1_lag_get(int unit,
                 int lagi ,
                soc_sbx_g3p1_lag_t *entry);

/**
New entry get accessor implementation for lag
*/
extern int soc_sbx_g3p1_lag_data_get(int unit,
                 int lagi ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize rrt entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_rrt_t_init(
    soc_sbx_g3p1_rrt_t *e);

/**
 * Pack rrt entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_rrt_pack(int unit,
    soc_sbx_g3p1_rrt_t *e, uint8 *b, int bsz);

/**
 * Unpack rrt entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_rrt_unpack(int unit,
                soc_sbx_g3p1_rrt_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_rrt_index_check(int unit,
                int *vindex,
                 int rri );

extern int soc_sbx_g3p1_rrt_entry_check(int unit,
                soc_sbx_g3p1_rrt_t *e);

/**
 * rrt table size get
 *
 */
extern int soc_sbx_g3p1_rrt_entry_table_size_get(int unit,
                int *tsize,  int rri );

/**
 * Synchronously set rrt entry.
 *
 */
extern int soc_sbx_g3p1_rrt_set(int unit,
                 int rri ,
                soc_sbx_g3p1_rrt_t *entry);

/**
New entry set accessor implementation for rrt
*/
extern int soc_sbx_g3p1_rrt_data_set(int unit,
                 int rri ,
                unsigned char *buf, unsigned char size);
/**
 *  Get rrt entry.
 */
extern int soc_sbx_g3p1_rrt_get(int unit,
                 int rri ,
                soc_sbx_g3p1_rrt_t *entry);

/**
New entry get accessor implementation for rrt
*/
extern int soc_sbx_g3p1_rrt_data_get(int unit,
                 int rri ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize xt entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_xt_t_init(
    soc_sbx_g3p1_xt_t *e);

/**
 * Pack xt entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_xt_pack(int unit,
    soc_sbx_g3p1_xt_t *e, uint8 *b, int bsz);

/**
 * Unpack xt entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_xt_unpack(int unit,
                soc_sbx_g3p1_xt_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_xt_index_check(int unit,
                int *vindex,
                 int xi );

extern int soc_sbx_g3p1_xt_entry_check(int unit,
                soc_sbx_g3p1_xt_t *e);

/**
 * xt table size get
 *
 */
extern int soc_sbx_g3p1_xt_entry_table_size_get(int unit,
                int *tsize,  int xi );

/**
 * Synchronously set xt entry.
 *
 */
extern int soc_sbx_g3p1_xt_set(int unit,
                 int xi ,
                soc_sbx_g3p1_xt_t *entry);

/**
New entry set accessor implementation for xt
*/
extern int soc_sbx_g3p1_xt_data_set(int unit,
                 int xi ,
                unsigned char *buf, unsigned char size);
/**
 *  Get xt entry.
 */
extern int soc_sbx_g3p1_xt_get(int unit,
                 int xi ,
                soc_sbx_g3p1_xt_t *entry);

/**
New entry get accessor implementation for xt
*/
extern int soc_sbx_g3p1_xt_data_get(int unit,
                 int xi ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize mirror entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_mirror_t_init(
    soc_sbx_g3p1_mirror_t *e);

/**
 * Pack mirror entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_mirror_pack(int unit,
    soc_sbx_g3p1_mirror_t *e, uint8 *b, int bsz);

/**
 * Unpack mirror entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_mirror_unpack(int unit,
                soc_sbx_g3p1_mirror_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_mirror_index_check(int unit,
                int *vindex,
                 int mi );

extern int soc_sbx_g3p1_mirror_entry_check(int unit,
                soc_sbx_g3p1_mirror_t *e);

/**
 * mirror table size get
 *
 */
extern int soc_sbx_g3p1_mirror_entry_table_size_get(int unit,
                int *tsize,  int mi );

/**
 * Synchronously set mirror entry.
 *
 */
extern int soc_sbx_g3p1_mirror_set(int unit,
                 int mi ,
                soc_sbx_g3p1_mirror_t *entry);

/**
New entry set accessor implementation for mirror
*/
extern int soc_sbx_g3p1_mirror_data_set(int unit,
                 int mi ,
                unsigned char *buf, unsigned char size);
/**
 *  Get mirror entry.
 */
extern int soc_sbx_g3p1_mirror_get(int unit,
                 int mi ,
                soc_sbx_g3p1_mirror_t *entry);

/**
New entry get accessor implementation for mirror
*/
extern int soc_sbx_g3p1_mirror_data_get(int unit,
                 int mi ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize emirror entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_emirror_t_init(
    soc_sbx_g3p1_emirror_t *e);

/**
 * Pack emirror entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_emirror_pack(int unit,
    soc_sbx_g3p1_emirror_t *e, uint8 *b, int bsz);

/**
 * Unpack emirror entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_emirror_unpack(int unit,
                soc_sbx_g3p1_emirror_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_emirror_index_check(int unit,
                int *vindex,
                 int mi );

extern int soc_sbx_g3p1_emirror_entry_check(int unit,
                soc_sbx_g3p1_emirror_t *e);

/**
 * emirror table size get
 *
 */
extern int soc_sbx_g3p1_emirror_entry_table_size_get(int unit,
                int *tsize,  int mi );

/**
 * Synchronously set emirror entry.
 *
 */
extern int soc_sbx_g3p1_emirror_set(int unit,
                 int mi ,
                soc_sbx_g3p1_emirror_t *entry);

/**
New entry set accessor implementation for emirror
*/
extern int soc_sbx_g3p1_emirror_data_set(int unit,
                 int mi ,
                unsigned char *buf, unsigned char size);
/**
 *  Get emirror entry.
 */
extern int soc_sbx_g3p1_emirror_get(int unit,
                 int mi ,
                soc_sbx_g3p1_emirror_t *entry);

/**
New entry get accessor implementation for emirror
*/
extern int soc_sbx_g3p1_emirror_data_get(int unit,
                 int mi ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize macage entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_macage_t_init(
    soc_sbx_g3p1_macage_t *e);

/**
 * Pack macage entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_macage_pack(int unit,
    soc_sbx_g3p1_macage_t *e, uint8 *b, int bsz);

/**
 * Unpack macage entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_macage_unpack(int unit,
                soc_sbx_g3p1_macage_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_macage_index_check(int unit,
                int *vindex,
                 int macindex );

extern int soc_sbx_g3p1_macage_entry_check(int unit,
                soc_sbx_g3p1_macage_t *e);

/**
 * macage table size get
 *
 */
extern int soc_sbx_g3p1_macage_entry_table_size_get(int unit,
                int *tsize,  int macindex );

/**
 * Synchronously set macage entry.
 *
 */
extern int soc_sbx_g3p1_macage_set(int unit,
                 int macindex ,
                soc_sbx_g3p1_macage_t *entry);

/**
New entry set accessor implementation for macage
*/
extern int soc_sbx_g3p1_macage_data_set(int unit,
                 int macindex ,
                unsigned char *buf, unsigned char size);
/**
 *  Get macage entry.
 */
extern int soc_sbx_g3p1_macage_get(int unit,
                 int macindex ,
                soc_sbx_g3p1_macage_t *entry);

/**
New entry get accessor implementation for macage
*/
extern int soc_sbx_g3p1_macage_data_get(int unit,
                 int macindex ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize mst entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_mst_t_init(
    soc_sbx_g3p1_mst_t *e);

/**
 * Pack mst entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_mst_pack(int unit,
    soc_sbx_g3p1_mst_t *e, uint8 *b, int bsz);

/**
 * Unpack mst entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_mst_unpack(int unit,
                soc_sbx_g3p1_mst_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_mst_index_check(int unit,
                int *vindex,
                 int msti );

extern int soc_sbx_g3p1_mst_entry_check(int unit,
                soc_sbx_g3p1_mst_t *e);

/**
 * mst table size get
 *
 */
extern int soc_sbx_g3p1_mst_entry_table_size_get(int unit,
                int *tsize,  int msti );

/**
 * Synchronously set mst entry.
 *
 */
extern int soc_sbx_g3p1_mst_set(int unit,
                 int msti ,
                soc_sbx_g3p1_mst_t *entry);

/**
New entry set accessor implementation for mst
*/
extern int soc_sbx_g3p1_mst_data_set(int unit,
                 int msti ,
                unsigned char *buf, unsigned char size);
/**
 *  Get mst entry.
 */
extern int soc_sbx_g3p1_mst_get(int unit,
                 int msti ,
                soc_sbx_g3p1_mst_t *entry);

/**
New entry get accessor implementation for mst
*/
extern int soc_sbx_g3p1_mst_data_get(int unit,
                 int msti ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize pv2e entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_pv2e_t_init(
    soc_sbx_g3p1_pv2e_t *e);

/**
 * Pack pv2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_pv2e_pack(int unit,
    soc_sbx_g3p1_pv2e_t *e, uint8 *b, int bsz);

/**
 * Unpack pv2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_pv2e_unpack(int unit,
                soc_sbx_g3p1_pv2e_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_pv2e_index_check(int unit,
                int *vindex,
                 int vid , int port );

extern int soc_sbx_g3p1_pv2e_entry_check(int unit,
                soc_sbx_g3p1_pv2e_t *e);

/**
 * pv2e table size get
 *
 */
extern int soc_sbx_g3p1_pv2e_entry_table_size_get(int unit,
                int *tsize,  int vid , int port );

/**
 * Synchronously set pv2e entry.
 *
 */
extern int soc_sbx_g3p1_pv2e_set(int unit,
                 int vid , int port ,
                soc_sbx_g3p1_pv2e_t *entry);

/**
New entry set accessor implementation for pv2e
*/
extern int soc_sbx_g3p1_pv2e_data_set(int unit,
                 int vid , int port ,
                unsigned char *buf, unsigned char size);
/**
 *  Get pv2e entry.
 */
extern int soc_sbx_g3p1_pv2e_get(int unit,
                 int vid , int port ,
                soc_sbx_g3p1_pv2e_t *entry);

/**
New entry get accessor implementation for pv2e
*/
extern int soc_sbx_g3p1_pv2e_data_get(int unit,
                 int vid , int port ,
                unsigned char *buf, unsigned char size);
/**
 * pv2e.lpi fast get function.
 *
 */
extern int soc_sbx_g3p1_pv2e_lpi_fast_get(int unit,
                  int vid ,  int port ,  int evid ,  int eport  ,
                uint32 *vs,
                int vcount);

/**
 * pv2e.vlan fast get function.
 *
 */
extern int soc_sbx_g3p1_pv2e_vlan_fast_get(int unit,
                  int vid ,  int port ,  int evid ,  int eport  ,
                uint32 *vs,
                int vcount);

/**
 * pv2e.stpstate fast get function.
 *
 */
extern int soc_sbx_g3p1_pv2e_stpstate_fast_get(int unit,
                  int vid ,  int port ,  int evid ,  int eport  ,
                uint32 *vs,
                int vcount);



/**
 * pv2e.lpi fast set function.
 *
 */
extern int soc_sbx_g3p1_pv2e_lpi_fast_set(int unit,
                  int vid ,  int port ,  int evid ,  int eport  ,
                int *sets,
                uint32 *vs,
                int vcount);

/**
 * pv2e.vlan fast set function.
 *
 */
extern int soc_sbx_g3p1_pv2e_vlan_fast_set(int unit,
                  int vid ,  int port ,  int evid ,  int eport  ,
                int *sets,
                uint32 *vs,
                int vcount);

/**
 * pv2e.stpstate fast set function.
 *
 */
extern int soc_sbx_g3p1_pv2e_stpstate_fast_set(int unit,
                  int vid ,  int port ,  int evid ,  int eport  ,
                int *sets,
                uint32 *vs,
                int vcount);



/**
 * Initialize p2appdata entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_p2appdata_t_init(
    soc_sbx_g3p1_p2appdata_t *e);

/**
 * Pack p2appdata entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_p2appdata_pack(int unit,
    soc_sbx_g3p1_p2appdata_t *e, uint8 *b, int bsz);

/**
 * Unpack p2appdata entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_p2appdata_unpack(int unit,
                soc_sbx_g3p1_p2appdata_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_p2appdata_index_check(int unit,
                int *vindex,
                 int port );

extern int soc_sbx_g3p1_p2appdata_entry_check(int unit,
                soc_sbx_g3p1_p2appdata_t *e);

/**
 * p2appdata table size get
 *
 */
extern int soc_sbx_g3p1_p2appdata_entry_table_size_get(int unit,
                int *tsize,  int port );

/**
 * Synchronously set p2appdata entry.
 *
 */
extern int soc_sbx_g3p1_p2appdata_set(int unit,
                 int port ,
                soc_sbx_g3p1_p2appdata_t *entry);

/**
New entry set accessor implementation for p2appdata
*/
extern int soc_sbx_g3p1_p2appdata_data_set(int unit,
                 int port ,
                unsigned char *buf, unsigned char size);
/**
 *  Get p2appdata entry.
 */
extern int soc_sbx_g3p1_p2appdata_get(int unit,
                 int port ,
                soc_sbx_g3p1_p2appdata_t *entry);

/**
New entry get accessor implementation for p2appdata
*/
extern int soc_sbx_g3p1_p2appdata_data_get(int unit,
                 int port ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize pv2appdata entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_pv2appdata_t_init(
    soc_sbx_g3p1_pv2appdata_t *e);

/**
 * Pack pv2appdata entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_pv2appdata_pack(int unit,
    soc_sbx_g3p1_pv2appdata_t *e, uint8 *b, int bsz);

/**
 * Unpack pv2appdata entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_pv2appdata_unpack(int unit,
                soc_sbx_g3p1_pv2appdata_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_pv2appdata_index_check(int unit,
                int *vindex,
                 int vid , int port );

extern int soc_sbx_g3p1_pv2appdata_entry_check(int unit,
                soc_sbx_g3p1_pv2appdata_t *e);

/**
 * pv2appdata table size get
 *
 */
extern int soc_sbx_g3p1_pv2appdata_entry_table_size_get(int unit,
                int *tsize,  int vid , int port );

/**
 * Synchronously set pv2appdata entry.
 *
 */
extern int soc_sbx_g3p1_pv2appdata_set(int unit,
                 int vid , int port ,
                soc_sbx_g3p1_pv2appdata_t *entry);

/**
New entry set accessor implementation for pv2appdata
*/
extern int soc_sbx_g3p1_pv2appdata_data_set(int unit,
                 int vid , int port ,
                unsigned char *buf, unsigned char size);
/**
 *  Get pv2appdata entry.
 */
extern int soc_sbx_g3p1_pv2appdata_get(int unit,
                 int vid , int port ,
                soc_sbx_g3p1_pv2appdata_t *entry);

/**
New entry get accessor implementation for pv2appdata
*/
extern int soc_sbx_g3p1_pv2appdata_data_get(int unit,
                 int vid , int port ,
                unsigned char *buf, unsigned char size);
/**
 * pv2appdata.member fast get function.
 *
 */
extern int soc_sbx_g3p1_pv2appdata_member_fast_get(int unit,
                  int vid ,  int port ,  int evid ,  int eport  ,
                uint32 *vs,
                int vcount);




/**
 * Initialize pvv2edata entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_pvv2edata_t_init(
    soc_sbx_g3p1_pvv2edata_t *e);

/**
 * Pack pvv2edata entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_pvv2edata_pack(int unit,
    soc_sbx_g3p1_pvv2edata_t *e, uint8 *b, int bsz);

/**
 * Unpack pvv2edata entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_pvv2edata_unpack(int unit,
                soc_sbx_g3p1_pvv2edata_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_pvv2edata_index_check(int unit,
                int *vindex,
                 int pvv2eindex );

extern int soc_sbx_g3p1_pvv2edata_entry_check(int unit,
                soc_sbx_g3p1_pvv2edata_t *e);

/**
 * pvv2edata table size get
 *
 */
extern int soc_sbx_g3p1_pvv2edata_entry_table_size_get(int unit,
                int *tsize,  int pvv2eindex );

/**
 * Synchronously set pvv2edata entry.
 *
 */
extern int soc_sbx_g3p1_pvv2edata_set(int unit,
                 int pvv2eindex ,
                soc_sbx_g3p1_pvv2edata_t *entry);

/**
New entry set accessor implementation for pvv2edata
*/
extern int soc_sbx_g3p1_pvv2edata_data_set(int unit,
                 int pvv2eindex ,
                unsigned char *buf, unsigned char size);
/**
 *  Get pvv2edata entry.
 */
extern int soc_sbx_g3p1_pvv2edata_get(int unit,
                 int pvv2eindex ,
                soc_sbx_g3p1_pvv2edata_t *entry);

/**
New entry get accessor implementation for pvv2edata
*/
extern int soc_sbx_g3p1_pvv2edata_data_get(int unit,
                 int pvv2eindex ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize v2e entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_v2e_t_init(
    soc_sbx_g3p1_v2e_t *e);

/**
 * Pack v2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_v2e_pack(int unit,
    soc_sbx_g3p1_v2e_t *e, uint8 *b, int bsz);

/**
 * Unpack v2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_v2e_unpack(int unit,
                soc_sbx_g3p1_v2e_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_v2e_index_check(int unit,
                int *vindex,
                 int vlan );

extern int soc_sbx_g3p1_v2e_entry_check(int unit,
                soc_sbx_g3p1_v2e_t *e);

/**
 * v2e table size get
 *
 */
extern int soc_sbx_g3p1_v2e_entry_table_size_get(int unit,
                int *tsize,  int vlan );

/**
 * Synchronously set v2e entry.
 *
 */
extern int soc_sbx_g3p1_v2e_set(int unit,
                 int vlan ,
                soc_sbx_g3p1_v2e_t *entry);

/**
New entry set accessor implementation for v2e
*/
extern int soc_sbx_g3p1_v2e_data_set(int unit,
                 int vlan ,
                unsigned char *buf, unsigned char size);
/**
 *  Get v2e entry.
 */
extern int soc_sbx_g3p1_v2e_get(int unit,
                 int vlan ,
                soc_sbx_g3p1_v2e_t *entry);

/**
New entry get accessor implementation for v2e
*/
extern int soc_sbx_g3p1_v2e_data_get(int unit,
                 int vlan ,
                unsigned char *buf, unsigned char size);

/**
 * v2e.policerbypass fast set function.
 *
 */
extern int soc_sbx_g3p1_v2e_policerbypass_fast_set(int unit,
                  int vlan ,  int evlan  ,
                int *sets,
                uint32 *vs,
                int vcount);

/**
 * v2e.forceflood fast set function.
 *
 */
extern int soc_sbx_g3p1_v2e_forceflood_fast_set(int unit,
                  int vlan ,  int evlan  ,
                int *sets,
                uint32 *vs,
                int vcount);

/**
 * v2e.dropunkucast fast set function.
 *
 */
extern int soc_sbx_g3p1_v2e_dropunkucast_fast_set(int unit,
                  int vlan ,  int evlan  ,
                int *sets,
                uint32 *vs,
                int vcount);

/**
 * v2e.dontlearn fast set function.
 *
 */
extern int soc_sbx_g3p1_v2e_dontlearn_fast_set(int unit,
                  int vlan ,  int evlan  ,
                int *sets,
                uint32 *vs,
                int vcount);



/**
 * Initialize vrid2e entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_vrid2e_t_init(
    soc_sbx_g3p1_vrid2e_t *e);

/**
 * Pack vrid2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_vrid2e_pack(int unit,
    soc_sbx_g3p1_vrid2e_t *e, uint8 *b, int bsz);

/**
 * Unpack vrid2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_vrid2e_unpack(int unit,
                soc_sbx_g3p1_vrid2e_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_vrid2e_index_check(int unit,
                int *vindex,
                 int vlan );

extern int soc_sbx_g3p1_vrid2e_entry_check(int unit,
                soc_sbx_g3p1_vrid2e_t *e);

/**
 * vrid2e table size get
 *
 */
extern int soc_sbx_g3p1_vrid2e_entry_table_size_get(int unit,
                int *tsize,  int vlan );

/**
 * Synchronously set vrid2e entry.
 *
 */
extern int soc_sbx_g3p1_vrid2e_set(int unit,
                 int vlan ,
                soc_sbx_g3p1_vrid2e_t *entry);

/**
New entry set accessor implementation for vrid2e
*/
extern int soc_sbx_g3p1_vrid2e_data_set(int unit,
                 int vlan ,
                unsigned char *buf, unsigned char size);
/**
 *  Get vrid2e entry.
 */
extern int soc_sbx_g3p1_vrid2e_get(int unit,
                 int vlan ,
                soc_sbx_g3p1_vrid2e_t *entry);

/**
New entry get accessor implementation for vrid2e
*/
extern int soc_sbx_g3p1_vrid2e_data_get(int unit,
                 int vlan ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize lp entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_lp_t_init(
    soc_sbx_g3p1_lp_t *e);

/**
 * Pack lp entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_lp_pack(int unit,
    soc_sbx_g3p1_lp_t *e, uint8 *b, int bsz);

/**
 * Unpack lp entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_lp_unpack(int unit,
                soc_sbx_g3p1_lp_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_lp_index_check(int unit,
                int *vindex,
                 int lpi );

extern int soc_sbx_g3p1_lp_entry_check(int unit,
                soc_sbx_g3p1_lp_t *e);

/**
 * lp table size get
 *
 */
extern int soc_sbx_g3p1_lp_entry_table_size_get(int unit,
                int *tsize,  int lpi );

/**
 * Synchronously set lp entry.
 *
 */
extern int soc_sbx_g3p1_lp_set(int unit,
                 int lpi ,
                soc_sbx_g3p1_lp_t *entry);

/**
New entry set accessor implementation for lp
*/
extern int soc_sbx_g3p1_lp_data_set(int unit,
                 int lpi ,
                unsigned char *buf, unsigned char size);
/**
 *  Get lp entry.
 */
extern int soc_sbx_g3p1_lp_get(int unit,
                 int lpi ,
                soc_sbx_g3p1_lp_t *entry);

/**
New entry get accessor implementation for lp
*/
extern int soc_sbx_g3p1_lp_data_get(int unit,
                 int lpi ,
                unsigned char *buf, unsigned char size);
/**
 * lp.policer fast get function.
 *
 */
extern int soc_sbx_g3p1_lp_policer_fast_get(int unit,
                  int lpi ,  int elpi  ,
                uint32 *vs,
                int vcount);

/**
 * lp.counter fast get function.
 *
 */
extern int soc_sbx_g3p1_lp_counter_fast_get(int unit,
                  int lpi ,  int elpi  ,
                uint32 *vs,
                int vcount);



/**
 * lp.policer fast set function.
 *
 */
extern int soc_sbx_g3p1_lp_policer_fast_set(int unit,
                  int lpi ,  int elpi  ,
                int *sets,
                uint32 *vs,
                int vcount);

/**
 * lp.counter fast set function.
 *
 */
extern int soc_sbx_g3p1_lp_counter_fast_set(int unit,
                  int lpi ,  int elpi  ,
                int *sets,
                uint32 *vs,
                int vcount);



/**
 * Initialize l2cp entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_l2cp_t_init(
    soc_sbx_g3p1_l2cp_t *e);

/**
 * Pack l2cp entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_l2cp_pack(int unit,
    soc_sbx_g3p1_l2cp_t *e, uint8 *b, int bsz);

/**
 * Unpack l2cp entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_l2cp_unpack(int unit,
                soc_sbx_g3p1_l2cp_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_l2cp_index_check(int unit,
                int *vindex,
                 int lsb , int port );

extern int soc_sbx_g3p1_l2cp_entry_check(int unit,
                soc_sbx_g3p1_l2cp_t *e);

/**
 * l2cp table size get
 *
 */
extern int soc_sbx_g3p1_l2cp_entry_table_size_get(int unit,
                int *tsize,  int lsb , int port );

/**
 * Synchronously set l2cp entry.
 *
 */
extern int soc_sbx_g3p1_l2cp_set(int unit,
                 int lsb , int port ,
                soc_sbx_g3p1_l2cp_t *entry);

/**
New entry set accessor implementation for l2cp
*/
extern int soc_sbx_g3p1_l2cp_data_set(int unit,
                 int lsb , int port ,
                unsigned char *buf, unsigned char size);
/**
 *  Get l2cp entry.
 */
extern int soc_sbx_g3p1_l2cp_get(int unit,
                 int lsb , int port ,
                soc_sbx_g3p1_l2cp_t *entry);

/**
New entry get accessor implementation for l2cp
*/
extern int soc_sbx_g3p1_l2cp_data_get(int unit,
                 int lsb , int port ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize l2cpslow entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_l2cpslow_t_init(
    soc_sbx_g3p1_l2cpslow_t *e);

/**
 * Pack l2cpslow entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_l2cpslow_pack(int unit,
    soc_sbx_g3p1_l2cpslow_t *e, uint8 *b, int bsz);

/**
 * Unpack l2cpslow entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_l2cpslow_unpack(int unit,
                soc_sbx_g3p1_l2cpslow_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_l2cpslow_index_check(int unit,
                int *vindex,
                 int subcode , int port );

extern int soc_sbx_g3p1_l2cpslow_entry_check(int unit,
                soc_sbx_g3p1_l2cpslow_t *e);

/**
 * l2cpslow table size get
 *
 */
extern int soc_sbx_g3p1_l2cpslow_entry_table_size_get(int unit,
                int *tsize,  int subcode , int port );

/**
 * Synchronously set l2cpslow entry.
 *
 */
extern int soc_sbx_g3p1_l2cpslow_set(int unit,
                 int subcode , int port ,
                soc_sbx_g3p1_l2cpslow_t *entry);

/**
New entry set accessor implementation for l2cpslow
*/
extern int soc_sbx_g3p1_l2cpslow_data_set(int unit,
                 int subcode , int port ,
                unsigned char *buf, unsigned char size);
/**
 *  Get l2cpslow entry.
 */
extern int soc_sbx_g3p1_l2cpslow_get(int unit,
                 int subcode , int port ,
                soc_sbx_g3p1_l2cpslow_t *entry);

/**
New entry get accessor implementation for l2cpslow
*/
extern int soc_sbx_g3p1_l2cpslow_data_get(int unit,
                 int subcode , int port ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize l2cpnop entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_l2cpnop_t_init(
    soc_sbx_g3p1_l2cpnop_t *e);

/**
 * Pack l2cpnop entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_l2cpnop_pack(int unit,
    soc_sbx_g3p1_l2cpnop_t *e, uint8 *b, int bsz);

/**
 * Unpack l2cpnop entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_l2cpnop_unpack(int unit,
                soc_sbx_g3p1_l2cpnop_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_l2cpnop_index_check(int unit,
                int *vindex,
                 int i );

extern int soc_sbx_g3p1_l2cpnop_entry_check(int unit,
                soc_sbx_g3p1_l2cpnop_t *e);

/**
 * l2cpnop table size get
 *
 */
extern int soc_sbx_g3p1_l2cpnop_entry_table_size_get(int unit,
                int *tsize,  int i );

/**
 * Synchronously set l2cpnop entry.
 *
 */
extern int soc_sbx_g3p1_l2cpnop_set(int unit,
                 int i ,
                soc_sbx_g3p1_l2cpnop_t *entry);

/**
New entry set accessor implementation for l2cpnop
*/
extern int soc_sbx_g3p1_l2cpnop_data_set(int unit,
                 int i ,
                unsigned char *buf, unsigned char size);
/**
 *  Get l2cpnop entry.
 */
extern int soc_sbx_g3p1_l2cpnop_get(int unit,
                 int i ,
                soc_sbx_g3p1_l2cpnop_t *entry);

/**
New entry get accessor implementation for l2cpnop
*/
extern int soc_sbx_g3p1_l2cpnop_data_get(int unit,
                 int i ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize ft entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_ft_t_init(
    soc_sbx_g3p1_ft_t *e);

/**
 * Pack ft entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_ft_pack(int unit,
    soc_sbx_g3p1_ft_t *e, uint8 *b, int bsz);

/**
 * Unpack ft entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_ft_unpack(int unit,
                soc_sbx_g3p1_ft_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_ft_index_check(int unit,
                int *vindex,
                 int fti );

extern int soc_sbx_g3p1_ft_entry_check(int unit,
                soc_sbx_g3p1_ft_t *e);

/**
 * ft table size get
 *
 */
extern int soc_sbx_g3p1_ft_entry_table_size_get(int unit,
                int *tsize,  int fti );

/**
 * Synchronously set ft entry.
 *
 */
extern int soc_sbx_g3p1_ft_set(int unit,
                 int fti ,
                soc_sbx_g3p1_ft_t *entry);

/**
New entry set accessor implementation for ft
*/
extern int soc_sbx_g3p1_ft_data_set(int unit,
                 int fti ,
                unsigned char *buf, unsigned char size);
/**
 *  Get ft entry.
 */
extern int soc_sbx_g3p1_ft_get(int unit,
                 int fti ,
                soc_sbx_g3p1_ft_t *entry);

/**
New entry get accessor implementation for ft
*/
extern int soc_sbx_g3p1_ft_data_get(int unit,
                 int fti ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize evp2e entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_evp2e_t_init(
    soc_sbx_g3p1_evp2e_t *e);

/**
 * Pack evp2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_evp2e_pack(int unit,
    soc_sbx_g3p1_evp2e_t *e, uint8 *b, int bsz);

/**
 * Unpack evp2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_evp2e_unpack(int unit,
                soc_sbx_g3p1_evp2e_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_evp2e_index_check(int unit,
                int *vindex,
                 int vlan , int port );

extern int soc_sbx_g3p1_evp2e_entry_check(int unit,
                soc_sbx_g3p1_evp2e_t *e);

/**
 * evp2e table size get
 *
 */
extern int soc_sbx_g3p1_evp2e_entry_table_size_get(int unit,
                int *tsize,  int vlan , int port );

/**
 * Synchronously set evp2e entry.
 *
 */
extern int soc_sbx_g3p1_evp2e_set(int unit,
                 int vlan , int port ,
                soc_sbx_g3p1_evp2e_t *entry);

/**
New entry set accessor implementation for evp2e
*/
extern int soc_sbx_g3p1_evp2e_data_set(int unit,
                 int vlan , int port ,
                unsigned char *buf, unsigned char size);
/**
 *  Get evp2e entry.
 */
extern int soc_sbx_g3p1_evp2e_get(int unit,
                 int vlan , int port ,
                soc_sbx_g3p1_evp2e_t *entry);

/**
New entry get accessor implementation for evp2e
*/
extern int soc_sbx_g3p1_evp2e_data_get(int unit,
                 int vlan , int port ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize oi2e entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_oi2e_t_init(
    soc_sbx_g3p1_oi2e_t *e);

/**
 * Pack oi2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_oi2e_pack(int unit,
    soc_sbx_g3p1_oi2e_t *e, uint8 *b, int bsz);

/**
 * Unpack oi2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_oi2e_unpack(int unit,
                soc_sbx_g3p1_oi2e_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_oi2e_index_check(int unit,
                int *vindex,
                 int oi );

extern int soc_sbx_g3p1_oi2e_entry_check(int unit,
                soc_sbx_g3p1_oi2e_t *e);

/**
 * oi2e table size get
 *
 */
extern int soc_sbx_g3p1_oi2e_entry_table_size_get(int unit,
                int *tsize,  int oi );

/**
 * Synchronously set oi2e entry.
 *
 */
extern int soc_sbx_g3p1_oi2e_set(int unit,
                 int oi ,
                soc_sbx_g3p1_oi2e_t *entry);

/**
New entry set accessor implementation for oi2e
*/
extern int soc_sbx_g3p1_oi2e_data_set(int unit,
                 int oi ,
                unsigned char *buf, unsigned char size);
/**
 *  Get oi2e entry.
 */
extern int soc_sbx_g3p1_oi2e_get(int unit,
                 int oi ,
                soc_sbx_g3p1_oi2e_t *entry);

/**
New entry get accessor implementation for oi2e
*/
extern int soc_sbx_g3p1_oi2e_data_get(int unit,
                 int oi ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize remark entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_remark_t_init(
    soc_sbx_g3p1_remark_t *e);

/**
 * Pack remark entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_remark_pack(int unit,
    soc_sbx_g3p1_remark_t *e, uint8 *b, int bsz);

/**
 * Unpack remark entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_remark_unpack(int unit,
                soc_sbx_g3p1_remark_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_remark_index_check(int unit,
                int *vindex,
                 int e , int dp , int cos , int prof );

extern int soc_sbx_g3p1_remark_entry_check(int unit,
                soc_sbx_g3p1_remark_t *e);

/**
 * remark table size get
 *
 */
extern int soc_sbx_g3p1_remark_entry_table_size_get(int unit,
                int *tsize,  int e , int dp , int cos , int prof );

/**
 * Synchronously set remark entry.
 *
 */
extern int soc_sbx_g3p1_remark_set(int unit,
                 int e , int dp , int cos , int prof ,
                soc_sbx_g3p1_remark_t *entry);

/**
New entry set accessor implementation for remark
*/
extern int soc_sbx_g3p1_remark_data_set(int unit,
                 int e , int dp , int cos , int prof ,
                unsigned char *buf, unsigned char size);
/**
 *  Get remark entry.
 */
extern int soc_sbx_g3p1_remark_get(int unit,
                 int e , int dp , int cos , int prof ,
                soc_sbx_g3p1_remark_t *entry);

/**
New entry get accessor implementation for remark
*/
extern int soc_sbx_g3p1_remark_data_get(int unit,
                 int e , int dp , int cos , int prof ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize epv2e entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_epv2e_t_init(
    soc_sbx_g3p1_epv2e_t *e);

/**
 * Pack epv2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_epv2e_pack(int unit,
    soc_sbx_g3p1_epv2e_t *e, uint8 *b, int bsz);

/**
 * Unpack epv2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_epv2e_unpack(int unit,
                soc_sbx_g3p1_epv2e_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_epv2e_index_check(int unit,
                int *vindex,
                 int vid , int port );

extern int soc_sbx_g3p1_epv2e_entry_check(int unit,
                soc_sbx_g3p1_epv2e_t *e);

/**
 * epv2e table size get
 *
 */
extern int soc_sbx_g3p1_epv2e_entry_table_size_get(int unit,
                int *tsize,  int vid , int port );

/**
 * Synchronously set epv2e entry.
 *
 */
extern int soc_sbx_g3p1_epv2e_set(int unit,
                 int vid , int port ,
                soc_sbx_g3p1_epv2e_t *entry);

/**
New entry set accessor implementation for epv2e
*/
extern int soc_sbx_g3p1_epv2e_data_set(int unit,
                 int vid , int port ,
                unsigned char *buf, unsigned char size);
/**
 *  Get epv2e entry.
 */
extern int soc_sbx_g3p1_epv2e_get(int unit,
                 int vid , int port ,
                soc_sbx_g3p1_epv2e_t *entry);

/**
New entry get accessor implementation for epv2e
*/
extern int soc_sbx_g3p1_epv2e_data_get(int unit,
                 int vid , int port ,
                unsigned char *buf, unsigned char size);

/**
 * epv2e.drop fast set function.
 *
 */
extern int soc_sbx_g3p1_epv2e_drop_fast_set(int unit,
                  int vid ,  int port ,  int evid ,  int eport  ,
                int *sets,
                uint32 *vs,
                int vcount);

/**
 * epv2e.strip fast set function.
 *
 */
extern int soc_sbx_g3p1_epv2e_strip_fast_set(int unit,
                  int vid ,  int port ,  int evid ,  int eport  ,
                int *sets,
                uint32 *vs,
                int vcount);



/**
 * Initialize ert entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_ert_t_init(
    soc_sbx_g3p1_ert_t *e);

/**
 * Pack ert entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_ert_pack(int unit,
    soc_sbx_g3p1_ert_t *e, uint8 *b, int bsz);

/**
 * Unpack ert entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_ert_unpack(int unit,
                soc_sbx_g3p1_ert_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_ert_index_check(int unit,
                int *vindex,
                 int irule );

extern int soc_sbx_g3p1_ert_entry_check(int unit,
                soc_sbx_g3p1_ert_t *e);

/**
 * ert table size get
 *
 */
extern int soc_sbx_g3p1_ert_entry_table_size_get(int unit,
                int *tsize,  int irule );

/**
 * Synchronously set ert entry.
 *
 */
extern int soc_sbx_g3p1_ert_set(int unit,
                 int irule ,
                soc_sbx_g3p1_ert_t *entry);

/**
New entry set accessor implementation for ert
*/
extern int soc_sbx_g3p1_ert_data_set(int unit,
                 int irule ,
                unsigned char *buf, unsigned char size);
/**
 *  Get ert entry.
 */
extern int soc_sbx_g3p1_ert_get(int unit,
                 int irule ,
                soc_sbx_g3p1_ert_t *entry);

/**
New entry get accessor implementation for ert
*/
extern int soc_sbx_g3p1_ert_data_get(int unit,
                 int irule ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize oam_bubble entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_oam_bubble_t_init(
    soc_sbx_g3p1_oam_bubble_t *e);

/**
 * Pack oam_bubble entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_oam_bubble_pack(int unit,
    soc_sbx_g3p1_oam_bubble_t *e, uint8 *b, int bsz);

/**
 * Unpack oam_bubble entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_oam_bubble_unpack(int unit,
                soc_sbx_g3p1_oam_bubble_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_oam_bubble_index_check(int unit,
                int *vindex,
                 int oamepi );

extern int soc_sbx_g3p1_oam_bubble_entry_check(int unit,
                soc_sbx_g3p1_oam_bubble_t *e);

/**
 * oam_bubble table size get
 *
 */
extern int soc_sbx_g3p1_oam_bubble_entry_table_size_get(int unit,
                int *tsize,  int oamepi );

/**
 * Synchronously set oam_bubble entry.
 *
 */
extern int soc_sbx_g3p1_oam_bubble_set(int unit,
                 int oamepi ,
                soc_sbx_g3p1_oam_bubble_t *entry);

/**
New entry set accessor implementation for oam_bubble
*/
extern int soc_sbx_g3p1_oam_bubble_data_set(int unit,
                 int oamepi ,
                unsigned char *buf, unsigned char size);
/**
 *  Get oam_bubble entry.
 */
extern int soc_sbx_g3p1_oam_bubble_get(int unit,
                 int oamepi ,
                soc_sbx_g3p1_oam_bubble_t *entry);

/**
New entry get accessor implementation for oam_bubble
*/
extern int soc_sbx_g3p1_oam_bubble_data_get(int unit,
                 int oamepi ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize oamrx_p2e entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_oamrx_p2e_t_init(
    soc_sbx_g3p1_oamrx_p2e_t *e);

/**
 * Pack oamrx_p2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_oamrx_p2e_pack(int unit,
    soc_sbx_g3p1_oamrx_p2e_t *e, uint8 *b, int bsz);

/**
 * Unpack oamrx_p2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_oamrx_p2e_unpack(int unit,
                soc_sbx_g3p1_oamrx_p2e_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_oamrx_p2e_index_check(int unit,
                int *vindex,
                 int dir , int port );

extern int soc_sbx_g3p1_oamrx_p2e_entry_check(int unit,
                soc_sbx_g3p1_oamrx_p2e_t *e);

/**
 * oamrx_p2e table size get
 *
 */
extern int soc_sbx_g3p1_oamrx_p2e_entry_table_size_get(int unit,
                int *tsize,  int dir , int port );

/**
 * Synchronously set oamrx_p2e entry.
 *
 */
extern int soc_sbx_g3p1_oamrx_p2e_set(int unit,
                 int dir , int port ,
                soc_sbx_g3p1_oamrx_p2e_t *entry);

/**
New entry set accessor implementation for oamrx_p2e
*/
extern int soc_sbx_g3p1_oamrx_p2e_data_set(int unit,
                 int dir , int port ,
                unsigned char *buf, unsigned char size);
/**
 *  Get oamrx_p2e entry.
 */
extern int soc_sbx_g3p1_oamrx_p2e_get(int unit,
                 int dir , int port ,
                soc_sbx_g3p1_oamrx_p2e_t *entry);

/**
New entry get accessor implementation for oamrx_p2e
*/
extern int soc_sbx_g3p1_oamrx_p2e_data_get(int unit,
                 int dir , int port ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize oam_peer_state entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_oam_peer_state_t_init(
    soc_sbx_g3p1_oam_peer_state_t *e);

/**
 * Pack oam_peer_state entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_oam_peer_state_pack(int unit,
    soc_sbx_g3p1_oam_peer_state_t *e, uint8 *b, int bsz);

/**
 * Unpack oam_peer_state entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_oam_peer_state_unpack(int unit,
                soc_sbx_g3p1_oam_peer_state_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_oam_peer_state_index_check(int unit,
                int *vindex,
                 int peer_idx );

extern int soc_sbx_g3p1_oam_peer_state_entry_check(int unit,
                soc_sbx_g3p1_oam_peer_state_t *e);

/**
 * oam_peer_state table size get
 *
 */
extern int soc_sbx_g3p1_oam_peer_state_entry_table_size_get(int unit,
                int *tsize,  int peer_idx );

/**
 * Synchronously set oam_peer_state entry.
 *
 */
extern int soc_sbx_g3p1_oam_peer_state_set(int unit,
                 int peer_idx ,
                soc_sbx_g3p1_oam_peer_state_t *entry);

/**
New entry set accessor implementation for oam_peer_state
*/
extern int soc_sbx_g3p1_oam_peer_state_data_set(int unit,
                 int peer_idx ,
                unsigned char *buf, unsigned char size);
/**
 *  Get oam_peer_state entry.
 */
extern int soc_sbx_g3p1_oam_peer_state_get(int unit,
                 int peer_idx ,
                soc_sbx_g3p1_oam_peer_state_t *entry);

/**
New entry get accessor implementation for oam_peer_state
*/
extern int soc_sbx_g3p1_oam_peer_state_data_get(int unit,
                 int peer_idx ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize ptp_compensation entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_ptp_compensation_t_init(
    soc_sbx_g3p1_ptp_compensation_t *e);

/**
 * Pack ptp_compensation entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_ptp_compensation_pack(int unit,
    soc_sbx_g3p1_ptp_compensation_t *e, uint8 *b, int bsz);

/**
 * Unpack ptp_compensation entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_ptp_compensation_unpack(int unit,
                soc_sbx_g3p1_ptp_compensation_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_ptp_compensation_index_check(int unit,
                int *vindex,
                 int port );

extern int soc_sbx_g3p1_ptp_compensation_entry_check(int unit,
                soc_sbx_g3p1_ptp_compensation_t *e);

/**
 * ptp_compensation table size get
 *
 */
extern int soc_sbx_g3p1_ptp_compensation_entry_table_size_get(int unit,
                int *tsize,  int port );

/**
 * Synchronously set ptp_compensation entry.
 *
 */
extern int soc_sbx_g3p1_ptp_compensation_set(int unit,
                 int port ,
                soc_sbx_g3p1_ptp_compensation_t *entry);

/**
New entry set accessor implementation for ptp_compensation
*/
extern int soc_sbx_g3p1_ptp_compensation_data_set(int unit,
                 int port ,
                unsigned char *buf, unsigned char size);
/**
 *  Get ptp_compensation entry.
 */
extern int soc_sbx_g3p1_ptp_compensation_get(int unit,
                 int port ,
                soc_sbx_g3p1_ptp_compensation_t *entry);

/**
New entry get accessor implementation for ptp_compensation
*/
extern int soc_sbx_g3p1_ptp_compensation_data_get(int unit,
                 int port ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize bfd_ld2edata entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_bfd_ld2edata_t_init(
    soc_sbx_g3p1_bfd_ld2edata_t *e);

/**
 * Pack bfd_ld2edata entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_bfd_ld2edata_pack(int unit,
    soc_sbx_g3p1_bfd_ld2edata_t *e, uint8 *b, int bsz);

/**
 * Unpack bfd_ld2edata entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_bfd_ld2edata_unpack(int unit,
                soc_sbx_g3p1_bfd_ld2edata_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_bfd_ld2edata_index_check(int unit,
                int *vindex,
                 int ptr );

extern int soc_sbx_g3p1_bfd_ld2edata_entry_check(int unit,
                soc_sbx_g3p1_bfd_ld2edata_t *e);

/**
 * bfd_ld2edata table size get
 *
 */
extern int soc_sbx_g3p1_bfd_ld2edata_entry_table_size_get(int unit,
                int *tsize,  int ptr );

/**
 * Synchronously set bfd_ld2edata entry.
 *
 */
extern int soc_sbx_g3p1_bfd_ld2edata_set(int unit,
                 int ptr ,
                soc_sbx_g3p1_bfd_ld2edata_t *entry);

/**
New entry set accessor implementation for bfd_ld2edata
*/
extern int soc_sbx_g3p1_bfd_ld2edata_data_set(int unit,
                 int ptr ,
                unsigned char *buf, unsigned char size);
/**
 *  Get bfd_ld2edata entry.
 */
extern int soc_sbx_g3p1_bfd_ld2edata_get(int unit,
                 int ptr ,
                soc_sbx_g3p1_bfd_ld2edata_t *entry);

/**
New entry get accessor implementation for bfd_ld2edata
*/
extern int soc_sbx_g3p1_bfd_ld2edata_data_get(int unit,
                 int ptr ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize bfd_ld2edatac entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_bfd_ld2edatac_t_init(
    soc_sbx_g3p1_bfd_ld2edatac_t *e);

/**
 * Pack bfd_ld2edatac entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_bfd_ld2edatac_pack(int unit,
    soc_sbx_g3p1_bfd_ld2edatac_t *e, uint8 *b, int bsz);

/**
 * Unpack bfd_ld2edatac entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_bfd_ld2edatac_unpack(int unit,
                soc_sbx_g3p1_bfd_ld2edatac_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_bfd_ld2edatac_index_check(int unit,
                int *vindex,
                 int ptr );

extern int soc_sbx_g3p1_bfd_ld2edatac_entry_check(int unit,
                soc_sbx_g3p1_bfd_ld2edatac_t *e);

/**
 * bfd_ld2edatac table size get
 *
 */
extern int soc_sbx_g3p1_bfd_ld2edatac_entry_table_size_get(int unit,
                int *tsize,  int ptr );

/**
 * Synchronously set bfd_ld2edatac entry.
 *
 */
extern int soc_sbx_g3p1_bfd_ld2edatac_set(int unit,
                 int ptr ,
                soc_sbx_g3p1_bfd_ld2edatac_t *entry);

/**
New entry set accessor implementation for bfd_ld2edatac
*/
extern int soc_sbx_g3p1_bfd_ld2edatac_data_set(int unit,
                 int ptr ,
                unsigned char *buf, unsigned char size);
/**
 *  Get bfd_ld2edatac entry.
 */
extern int soc_sbx_g3p1_bfd_ld2edatac_get(int unit,
                 int ptr ,
                soc_sbx_g3p1_bfd_ld2edatac_t *entry);

/**
New entry get accessor implementation for bfd_ld2edatac
*/
extern int soc_sbx_g3p1_bfd_ld2edatac_data_get(int unit,
                 int ptr ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize sample6 entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_sample6_t_init(
    soc_sbx_g3p1_sample6_t *e);

/**
 * Pack sample6 entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_sample6_pack(int unit,
    soc_sbx_g3p1_sample6_t *e, uint8 *b, int bsz);

/**
 * Unpack sample6 entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_sample6_unpack(int unit,
                soc_sbx_g3p1_sample6_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_sample6_index_check(int unit,
                int *vindex,
                 int test6i );

extern int soc_sbx_g3p1_sample6_entry_check(int unit,
                soc_sbx_g3p1_sample6_t *e);

/**
 * sample6 table size get
 *
 */
extern int soc_sbx_g3p1_sample6_entry_table_size_get(int unit,
                int *tsize,  int test6i );

/**
 * Synchronously set sample6 entry.
 *
 */
extern int soc_sbx_g3p1_sample6_set(int unit,
                 int test6i ,
                soc_sbx_g3p1_sample6_t *entry);

/**
New entry set accessor implementation for sample6
*/
extern int soc_sbx_g3p1_sample6_data_set(int unit,
                 int test6i ,
                unsigned char *buf, unsigned char size);
/**
 *  Get sample6 entry.
 */
extern int soc_sbx_g3p1_sample6_get(int unit,
                 int test6i ,
                soc_sbx_g3p1_sample6_t *entry);

/**
New entry get accessor implementation for sample6
*/
extern int soc_sbx_g3p1_sample6_data_get(int unit,
                 int test6i ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize sample8 entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_sample8_t_init(
    soc_sbx_g3p1_sample8_t *e);

/**
 * Pack sample8 entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_sample8_pack(int unit,
    soc_sbx_g3p1_sample8_t *e, uint8 *b, int bsz);

/**
 * Unpack sample8 entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_sample8_unpack(int unit,
                soc_sbx_g3p1_sample8_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_sample8_index_check(int unit,
                int *vindex,
                 int test8i );

extern int soc_sbx_g3p1_sample8_entry_check(int unit,
                soc_sbx_g3p1_sample8_t *e);

/**
 * sample8 table size get
 *
 */
extern int soc_sbx_g3p1_sample8_entry_table_size_get(int unit,
                int *tsize,  int test8i );

/**
 * Synchronously set sample8 entry.
 *
 */
extern int soc_sbx_g3p1_sample8_set(int unit,
                 int test8i ,
                soc_sbx_g3p1_sample8_t *entry);

/**
New entry set accessor implementation for sample8
*/
extern int soc_sbx_g3p1_sample8_data_set(int unit,
                 int test8i ,
                unsigned char *buf, unsigned char size);
/**
 *  Get sample8 entry.
 */
extern int soc_sbx_g3p1_sample8_get(int unit,
                 int test8i ,
                soc_sbx_g3p1_sample8_t *entry);

/**
New entry get accessor implementation for sample8
*/
extern int soc_sbx_g3p1_sample8_data_get(int unit,
                 int test8i ,
                unsigned char *buf, unsigned char size);


/**
 * Initialize sample9 entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_sample9_t_init(
    soc_sbx_g3p1_sample9_t *e);

/**
 * Pack sample9 entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_sample9_pack(int unit,
    soc_sbx_g3p1_sample9_t *e, uint8 *b, int bsz);

/**
 * Unpack sample9 entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_sample9_unpack(int unit,
                soc_sbx_g3p1_sample9_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_sample9_index_check(int unit,
                int *vindex,
                 int test9i );

extern int soc_sbx_g3p1_sample9_entry_check(int unit,
                soc_sbx_g3p1_sample9_t *e);

/**
 * sample9 table size get
 *
 */
extern int soc_sbx_g3p1_sample9_entry_table_size_get(int unit,
                int *tsize,  int test9i );

/**
 * Synchronously set sample9 entry.
 *
 */
extern int soc_sbx_g3p1_sample9_set(int unit,
                 int test9i ,
                soc_sbx_g3p1_sample9_t *entry);

/**
New entry set accessor implementation for sample9
*/
extern int soc_sbx_g3p1_sample9_data_set(int unit,
                 int test9i ,
                unsigned char *buf, unsigned char size);
/**
 *  Get sample9 entry.
 */
extern int soc_sbx_g3p1_sample9_get(int unit,
                 int test9i ,
                soc_sbx_g3p1_sample9_t *entry);

/**
New entry get accessor implementation for sample9
*/
extern int soc_sbx_g3p1_sample9_data_get(int unit,
                 int test9i ,
                unsigned char *buf, unsigned char size);




#endif
#endif
