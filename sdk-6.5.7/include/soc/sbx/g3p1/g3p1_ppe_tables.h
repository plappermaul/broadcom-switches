/*
 * $Id: ppe_tables_h.stg,v 1.18 Broadcom SDK $"
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 * g3p1_ppe_tables.h: Guadalupe2k V1.3 PPE table manager & wrappers
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from sdk/caladan_ucode/g3p1/src/g3p1_ppe_cfg.lrp.
 * Edits to this file will be lost when it is regenerated.
 *
 */
 
#ifndef _SOC_SBX_G3P1_PPE_TABLES_H
#define _SOC_SBX_G3P1_PPE_TABLES_H

#if defined(BCM_CALADAN3_SUPPORT) && defined(BCM_CALADAN3_G3P1_SUPPORT) 
#include <soc/sbx/g3p1/g3p1_defs.h>

typedef enum soc_sbx_g3p1_ppe_table_id_s {
   SOC_SBX_G3P1_PPE_P2E_TABLE_ID = 0 ,
   SOC_SBX_G3P1_PPE_EP2E_TABLE_ID = 1 ,
   SOC_SBX_G3P1_PPE_TPID_TABLE_ID = 2 ,
   SOC_SBX_G3P1_PPE_OAM_RX_TABLE_ID = 3 ,
   SOC_SBX_G3P1_PPE_OAM_TX_TABLE_ID = 4 ,
   SOC_SBX_G3P1_PPE_LSMAC_TABLE_ID = 5 ,
   SOC_SBX_G3P1_PPE_L2CPMAC_TABLE_ID = 6 ,
   SOC_SBX_G3P1_PPE_ELSMAC_TABLE_ID = 7 ,
   SOC_SBX_G3P1_PPE_MAX_TABLE_ID
} soc_sbx_g3p1_ppe_table_id_t;

typedef enum soc_sbx_g3p1_ppe_entry_id_s {
   SOC_SBX_G3P1_PPE_P2E_ID = 0 ,
   SOC_SBX_G3P1_PPE_EP2E_ID = 1 ,
   SOC_SBX_G3P1_PPE_TPID_ID = 2 ,
   SOC_SBX_G3P1_PPE_OAM_RX_ID = 3 ,
   SOC_SBX_G3P1_PPE_OAM_TX_ID = 4 ,
   SOC_SBX_G3P1_PPE_LSMAC_ID = 5 ,
   SOC_SBX_G3P1_PPE_L2CPMAC_ID = 6 ,
   SOC_SBX_G3P1_PPE_ELSMAC_ID = 7 ,
   SOC_SBX_G3P1_PPE_MAX_ENTRY_ID
} soc_sbx_g3p1_ppe_entry_id_t;

typedef struct soc_sbx_g3p1_ppe_table_manager_s {
    int behost;        
    
    soc_sbx_g3p1_index_desc_t *indexes;
    soc_sbx_g3p1_entry_desc_t *entries;   
        
    char *simbuffer;
    uint32 simbuffersize;    
     
} soc_sbx_g3p1_ppe_table_manager_t;

extern int soc_sbx_g3p1_ppe_tables_init(int unit);
extern int soc_sbx_g3p1_ppe_tables_uninit(int unit);
typedef struct soc_sbx_g3p1_ppe_p2e_s {
    uint32 portid; 
    uint32 state_num; 
    uint32 lsmmatch; 
    uint32 ipv4mc; 
    uint32 pbb; 
    uint32 twintpid; 
    uint32 tpid; 
    uint32 oamloop; 
    uint32 provider; 
    uint32 customer; 
    uint32 hdrtype; 
    uint32 timestamp; 
    uint32 aggr_hash; 
    uint32 mpls_hdrcompr; 
    uint32 port; 
    uint32 nativevid; 
    uint32 defcfi; 
    uint32 defpri; 
    uint32 defstrip; 
    uint32 pstrip; 
    uint32 mim; 
    uint32 mplstp; 
    uint32 untaggedstrip; 
    uint32 droptagged; 
    uint32 dropuntagged; 
    uint32 tc_1588; 
    uint32 rep_data; 
    uint32 ppe_variable; 
} soc_sbx_g3p1_p2e_t;

typedef struct soc_sbx_g3p1_ppe_ep2e_s {
    uint32 portid; 
    uint32 state_num; 
    uint32 lsmmatch; 
    uint32 ipv4mc; 
    uint32 pbb; 
    uint32 twintpid; 
    uint32 tpid; 
    uint32 oamloop; 
    uint32 provider; 
    uint32 customer; 
    uint32 hdrtype; 
    uint32 timestamp; 
    uint32 aggr_hash; 
    uint32 mim; 
    uint32 mpls_hdrcompr; 
    uint32 port; 
    uint32 pid; 
    uint32 stpid0; 
    uint32 stpid1; 
    uint32 cep; 
    uint32 keeperh; 
    uint32 mirroridx; 
    uint32 tc_1588; 
    uint32 rep_data; 
    uint32 ppe_variable; 
} soc_sbx_g3p1_ep2e_t;

typedef struct soc_sbx_g3p1_ppe_tpid_s {
    uint32 tpid; 
} soc_sbx_g3p1_tpid_t;

typedef struct soc_sbx_g3p1_ppe_oam_rx_s {
    uint32 valid; 
} soc_sbx_g3p1_oam_rx_t;

typedef struct soc_sbx_g3p1_ppe_oam_tx_s {
    uint32 valid; 
} soc_sbx_g3p1_oam_tx_t;

typedef struct soc_sbx_g3p1_ppe_lsmac_s {
    uint32 portid; 
    uint32 useport; 
    soc_sbx_g3p1_6_byte_t mac; 
} soc_sbx_g3p1_lsmac_t;

typedef struct soc_sbx_g3p1_ppe_l2cpmac_s {
    uint32 portid; 
    uint32 useport; 
    soc_sbx_g3p1_6_byte_t mac; 
} soc_sbx_g3p1_l2cpmac_t;

typedef struct soc_sbx_g3p1_ppe_elsmac_s {
    uint32 portid; 
    uint32 useport; 
    soc_sbx_g3p1_6_byte_t mac; 
} soc_sbx_g3p1_elsmac_t;

/**
 * Initialize p2e entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_p2e_t_init(soc_sbx_g3p1_p2e_t *e);

/**
 * Get p2e entry size.
 *
 * Use this function for storage management of the
 * p2e table, because its entries have variable size
 *
 * @param[in]  unit chip unit number
 * @return     entry size, in words
 */
extern int soc_sbx_g3p1_p2e_size(int unit);

/**
 * Pack p2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_p2e_pack(int unit, soc_sbx_g3p1_p2e_t *e, uint8 *b, int bsz);

/**
 * Unpack p2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_p2e_unpack(int unit, soc_sbx_g3p1_p2e_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_p2e_index_check(int unit, int *vindex, int iport  );

extern int soc_sbx_g3p1_p2e_entry_check(int unit, soc_sbx_g3p1_p2e_t *e);

/**
 * Synchronously set p2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[in]  e entry parameters
 */
extern int soc_sbx_g3p1_p2e_set(int unit, int iport  , soc_sbx_g3p1_p2e_t *e);

extern int soc_sbx_g3p1_p2e_set_ext(int unit, int iport  , soc_sbx_g3p1_p2e_t *e);

extern int soc_sbx_g3p1_p2e_set_ext_sim(int unit, int iport  , soc_sbx_g3p1_p2e_t *e);

/**
 *  Get p2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[out] e entry parameters
 */
extern int soc_sbx_g3p1_p2e_get(int unit, int iport  , soc_sbx_g3p1_p2e_t *e);

extern int soc_sbx_g3p1_p2e_get_ext(int unit, int iport  , soc_sbx_g3p1_p2e_t *e);

extern int soc_sbx_g3p1_p2e_get_ext_sim(int unit, int iport  , soc_sbx_g3p1_p2e_t *e);

/**
 * Initialize ep2e entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_ep2e_t_init(soc_sbx_g3p1_ep2e_t *e);

/**
 * Get ep2e entry size.
 *
 * Use this function for storage management of the
 * ep2e table, because its entries have variable size
 *
 * @param[in]  unit chip unit number
 * @return     entry size, in words
 */
extern int soc_sbx_g3p1_ep2e_size(int unit);

/**
 * Pack ep2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_ep2e_pack(int unit, soc_sbx_g3p1_ep2e_t *e, uint8 *b, int bsz);

/**
 * Unpack ep2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_ep2e_unpack(int unit, soc_sbx_g3p1_ep2e_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_ep2e_index_check(int unit, int *vindex, int iport  );

extern int soc_sbx_g3p1_ep2e_entry_check(int unit, soc_sbx_g3p1_ep2e_t *e);

/**
 * Synchronously set ep2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[in]  e entry parameters
 */
extern int soc_sbx_g3p1_ep2e_set(int unit, int iport  , soc_sbx_g3p1_ep2e_t *e);

extern int soc_sbx_g3p1_ep2e_set_ext(int unit, int iport  , soc_sbx_g3p1_ep2e_t *e);

extern int soc_sbx_g3p1_ep2e_set_ext_sim(int unit, int iport  , soc_sbx_g3p1_ep2e_t *e);

/**
 *  Get ep2e entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[out] e entry parameters
 */
extern int soc_sbx_g3p1_ep2e_get(int unit, int iport  , soc_sbx_g3p1_ep2e_t *e);

extern int soc_sbx_g3p1_ep2e_get_ext(int unit, int iport  , soc_sbx_g3p1_ep2e_t *e);

extern int soc_sbx_g3p1_ep2e_get_ext_sim(int unit, int iport  , soc_sbx_g3p1_ep2e_t *e);

/**
 * Initialize tpid entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_tpid_t_init(soc_sbx_g3p1_tpid_t *e);

/**
 * Get tpid entry size.
 *
 * Use this function for storage management of the
 * tpid table, because its entries have variable size
 *
 * @param[in]  unit chip unit number
 * @return     entry size, in words
 */
extern int soc_sbx_g3p1_tpid_size(int unit);

/**
 * Pack tpid entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_tpid_pack(int unit, soc_sbx_g3p1_tpid_t *e, uint8 *b, int bsz);

/**
 * Unpack tpid entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_tpid_unpack(int unit, soc_sbx_g3p1_tpid_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_tpid_index_check(int unit, int *vindex, int itpidi  );

extern int soc_sbx_g3p1_tpid_entry_check(int unit, soc_sbx_g3p1_tpid_t *e);

/**
 * Synchronously set tpid entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[in]  e entry parameters
 */
extern int soc_sbx_g3p1_tpid_set(int unit, int itpidi  , soc_sbx_g3p1_tpid_t *e);

extern int soc_sbx_g3p1_tpid_set_ext(int unit, int itpidi  , soc_sbx_g3p1_tpid_t *e);

extern int soc_sbx_g3p1_tpid_set_ext_sim(int unit, int itpidi  , soc_sbx_g3p1_tpid_t *e);

/**
 *  Get tpid entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[out] e entry parameters
 */
extern int soc_sbx_g3p1_tpid_get(int unit, int itpidi  , soc_sbx_g3p1_tpid_t *e);

extern int soc_sbx_g3p1_tpid_get_ext(int unit, int itpidi  , soc_sbx_g3p1_tpid_t *e);

extern int soc_sbx_g3p1_tpid_get_ext_sim(int unit, int itpidi  , soc_sbx_g3p1_tpid_t *e);

/**
 * Initialize oam_rx entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_oam_rx_t_init(soc_sbx_g3p1_oam_rx_t *e);

/**
 * Get oam_rx entry size.
 *
 * Use this function for storage management of the
 * oam_rx table, because its entries have variable size
 *
 * @param[in]  unit chip unit number
 * @return     entry size, in words
 */
extern int soc_sbx_g3p1_oam_rx_size(int unit);

/**
 * Pack oam_rx entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_oam_rx_pack(int unit, soc_sbx_g3p1_oam_rx_t *e, uint8 *b, int bsz);

/**
 * Unpack oam_rx entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_oam_rx_unpack(int unit, soc_sbx_g3p1_oam_rx_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_oam_rx_index_check(int unit, int *vindex, int irulenum  );

extern int soc_sbx_g3p1_oam_rx_entry_check(int unit, soc_sbx_g3p1_oam_rx_t *e);

/**
 * Synchronously set oam_rx entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[in]  e entry parameters
 */
extern int soc_sbx_g3p1_oam_rx_set(int unit, int irulenum  , soc_sbx_g3p1_oam_rx_t *e);

extern int soc_sbx_g3p1_oam_rx_set_ext(int unit, int irulenum  , soc_sbx_g3p1_oam_rx_t *e);

extern int soc_sbx_g3p1_oam_rx_set_ext_sim(int unit, int irulenum  , soc_sbx_g3p1_oam_rx_t *e);

/**
 *  Get oam_rx entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[out] e entry parameters
 */
extern int soc_sbx_g3p1_oam_rx_get(int unit, int irulenum  , soc_sbx_g3p1_oam_rx_t *e);

extern int soc_sbx_g3p1_oam_rx_get_ext(int unit, int irulenum  , soc_sbx_g3p1_oam_rx_t *e);

extern int soc_sbx_g3p1_oam_rx_get_ext_sim(int unit, int irulenum  , soc_sbx_g3p1_oam_rx_t *e);

/**
 * Initialize oam_tx entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_oam_tx_t_init(soc_sbx_g3p1_oam_tx_t *e);

/**
 * Get oam_tx entry size.
 *
 * Use this function for storage management of the
 * oam_tx table, because its entries have variable size
 *
 * @param[in]  unit chip unit number
 * @return     entry size, in words
 */
extern int soc_sbx_g3p1_oam_tx_size(int unit);

/**
 * Pack oam_tx entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_oam_tx_pack(int unit, soc_sbx_g3p1_oam_tx_t *e, uint8 *b, int bsz);

/**
 * Unpack oam_tx entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_oam_tx_unpack(int unit, soc_sbx_g3p1_oam_tx_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_oam_tx_index_check(int unit, int *vindex, int irulenum  );

extern int soc_sbx_g3p1_oam_tx_entry_check(int unit, soc_sbx_g3p1_oam_tx_t *e);

/**
 * Synchronously set oam_tx entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[in]  e entry parameters
 */
extern int soc_sbx_g3p1_oam_tx_set(int unit, int irulenum  , soc_sbx_g3p1_oam_tx_t *e);

extern int soc_sbx_g3p1_oam_tx_set_ext(int unit, int irulenum  , soc_sbx_g3p1_oam_tx_t *e);

extern int soc_sbx_g3p1_oam_tx_set_ext_sim(int unit, int irulenum  , soc_sbx_g3p1_oam_tx_t *e);

/**
 *  Get oam_tx entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[out] e entry parameters
 */
extern int soc_sbx_g3p1_oam_tx_get(int unit, int irulenum  , soc_sbx_g3p1_oam_tx_t *e);

extern int soc_sbx_g3p1_oam_tx_get_ext(int unit, int irulenum  , soc_sbx_g3p1_oam_tx_t *e);

extern int soc_sbx_g3p1_oam_tx_get_ext_sim(int unit, int irulenum  , soc_sbx_g3p1_oam_tx_t *e);

/**
 * Initialize lsmac entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_lsmac_t_init(soc_sbx_g3p1_lsmac_t *e);

/**
 * Get lsmac entry size.
 *
 * Use this function for storage management of the
 * lsmac table, because its entries have variable size
 *
 * @param[in]  unit chip unit number
 * @return     entry size, in words
 */
extern int soc_sbx_g3p1_lsmac_size(int unit);

/**
 * Pack lsmac entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_lsmac_pack(int unit, soc_sbx_g3p1_lsmac_t *e, uint8 *b, int bsz);

/**
 * Unpack lsmac entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_lsmac_unpack(int unit, soc_sbx_g3p1_lsmac_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_lsmac_index_check(int unit, int *vindex, int ilsi  );

extern int soc_sbx_g3p1_lsmac_entry_check(int unit, soc_sbx_g3p1_lsmac_t *e);

/**
 * Synchronously set lsmac entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[in]  e entry parameters
 */
extern int soc_sbx_g3p1_lsmac_set(int unit, int ilsi  , soc_sbx_g3p1_lsmac_t *e);

extern int soc_sbx_g3p1_lsmac_set_ext(int unit, int ilsi  , soc_sbx_g3p1_lsmac_t *e);

extern int soc_sbx_g3p1_lsmac_set_ext_sim(int unit, int ilsi  , soc_sbx_g3p1_lsmac_t *e);

/**
 *  Get lsmac entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[out] e entry parameters
 */
extern int soc_sbx_g3p1_lsmac_get(int unit, int ilsi  , soc_sbx_g3p1_lsmac_t *e);

extern int soc_sbx_g3p1_lsmac_get_ext(int unit, int ilsi  , soc_sbx_g3p1_lsmac_t *e);

extern int soc_sbx_g3p1_lsmac_get_ext_sim(int unit, int ilsi  , soc_sbx_g3p1_lsmac_t *e);

/**
 * Initialize l2cpmac entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_l2cpmac_t_init(soc_sbx_g3p1_l2cpmac_t *e);

/**
 * Get l2cpmac entry size.
 *
 * Use this function for storage management of the
 * l2cpmac table, because its entries have variable size
 *
 * @param[in]  unit chip unit number
 * @return     entry size, in words
 */
extern int soc_sbx_g3p1_l2cpmac_size(int unit);

/**
 * Pack l2cpmac entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_l2cpmac_pack(int unit, soc_sbx_g3p1_l2cpmac_t *e, uint8 *b, int bsz);

/**
 * Unpack l2cpmac entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_l2cpmac_unpack(int unit, soc_sbx_g3p1_l2cpmac_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_l2cpmac_index_check(int unit, int *vindex, int ilsi  );

extern int soc_sbx_g3p1_l2cpmac_entry_check(int unit, soc_sbx_g3p1_l2cpmac_t *e);

/**
 * Synchronously set l2cpmac entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[in]  e entry parameters
 */
extern int soc_sbx_g3p1_l2cpmac_set(int unit, int ilsi  , soc_sbx_g3p1_l2cpmac_t *e);

extern int soc_sbx_g3p1_l2cpmac_set_ext(int unit, int ilsi  , soc_sbx_g3p1_l2cpmac_t *e);

extern int soc_sbx_g3p1_l2cpmac_set_ext_sim(int unit, int ilsi  , soc_sbx_g3p1_l2cpmac_t *e);

/**
 *  Get l2cpmac entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[out] e entry parameters
 */
extern int soc_sbx_g3p1_l2cpmac_get(int unit, int ilsi  , soc_sbx_g3p1_l2cpmac_t *e);

extern int soc_sbx_g3p1_l2cpmac_get_ext(int unit, int ilsi  , soc_sbx_g3p1_l2cpmac_t *e);

extern int soc_sbx_g3p1_l2cpmac_get_ext_sim(int unit, int ilsi  , soc_sbx_g3p1_l2cpmac_t *e);

/**
 * Initialize elsmac entry parameters.
 *
 * @param[out] e entry parameter object
 */
extern void soc_sbx_g3p1_elsmac_t_init(soc_sbx_g3p1_elsmac_t *e);

/**
 * Get elsmac entry size.
 *
 * Use this function for storage management of the
 * elsmac table, because its entries have variable size
 *
 * @param[in]  unit chip unit number
 * @return     entry size, in words
 */
extern int soc_sbx_g3p1_elsmac_size(int unit);

/**
 * Pack elsmac entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  e entry parameters
 * @param[out] b packed byte array
 * @param[in]  bsz size of byte array
 */
extern int soc_sbx_g3p1_elsmac_pack(int unit, soc_sbx_g3p1_elsmac_t *e, uint8 *b, int bsz);

/**
 * Unpack elsmac entry.
 *
 * @param[in]  unit chip unit number
 * @param[out] e entry parameters
 * @param[in]  b packed byte array
 * @param[in]  bsz size of packed byte array
 */
extern int soc_sbx_g3p1_elsmac_unpack(int unit, soc_sbx_g3p1_elsmac_t *e, uint8 *b, int bsz);

extern int soc_sbx_g3p1_elsmac_index_check(int unit, int *vindex, int ilsi  );

extern int soc_sbx_g3p1_elsmac_entry_check(int unit, soc_sbx_g3p1_elsmac_t *e);

/**
 * Synchronously set elsmac entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[in]  e entry parameters
 */
extern int soc_sbx_g3p1_elsmac_set(int unit, int ilsi  , soc_sbx_g3p1_elsmac_t *e);

extern int soc_sbx_g3p1_elsmac_set_ext(int unit, int ilsi  , soc_sbx_g3p1_elsmac_t *e);

extern int soc_sbx_g3p1_elsmac_set_ext_sim(int unit, int ilsi  , soc_sbx_g3p1_elsmac_t *e);

/**
 *  Get elsmac entry.
 *
 * @param[in]  unit chip unit number
 * @param[in]  iport microcode port number
 * @param[out] e entry parameters
 */
extern int soc_sbx_g3p1_elsmac_get(int unit, int ilsi  , soc_sbx_g3p1_elsmac_t *e);

extern int soc_sbx_g3p1_elsmac_get_ext(int unit, int ilsi  , soc_sbx_g3p1_elsmac_t *e);

extern int soc_sbx_g3p1_elsmac_get_ext_sim(int unit, int ilsi  , soc_sbx_g3p1_elsmac_t *e);

#define SOC_SBX_G3P1_EGR_PPEVAR_MEMBER (5)
enum
{
    EGR_PPEVAR_PM_ENABLE,
    EGR_PPEVAR_LSM,
    EGR_PPEVAR_LOOPBACK,
    EGR_PPEVAR_PWE_Y1731,
    EGR_PPEVAR_MC,
  PPE_RAM_EGR_PPEVAR_MAX
};
#define SOC_SBX_G3P1_ING_PPEVAR_MEMBER (22)
enum
{
    ING_PPEVAR_MIM_TRANSIT,
    ING_PPEVAR_LSM,
    ING_PPEVAR_NUMLBLS,
    ING_PPEVAR_DCN,
    ING_PPEVAR_OAMEN,
    ING_PPEVAR_LOOPBACK,
    ING_PPEVAR_LM_ENABLE,
    ING_PPEVAR_DM_ENABLE,
    ING_PPEVAR_VRRP,
    ING_PPEVAR_MPLS_TTL_EXPIRY,
    ING_PPEVAR_MPLSTP_LOOP,
    ING_PPEVAR_PWE_PING,
    ING_PPEVAR_PWE_Y1731,
    ING_PPEVAR_PWE_PSC,
    ING_PPEVAR_BFD,
    ING_PPEVAR_GAL,
    ING_PPEVAR_TRAFFICTYPE,
    ING_PPEVAR_L2CP,
    ING_PPEVAR_L2CPSLOW,
    ING_PPEVAR_PIM,
    ING_PPEVAR_IGMP,
    ING_PPEVAR_OAMLOOP,
  PPE_RAM_ING_PPEVAR_MAX
};
typedef struct soc_sbx_g3p1_egr_ppevar_s
{
    uint32 pm_enable;
    uint32 lsm;
    uint32 loopback;
    uint32 pwe_y1731;
    uint32 mc;
} soc_sbx_g3p1_egr_ppevar_t;
extern int soc_sbx_g3p1_egr_ppevar_pack(int unit, soc_sbx_g3p1_egr_ppevar_t *e, uint8 *b, int bsz);
extern int soc_sbx_g3p1_egr_ppevar_unpack(int unit, soc_sbx_g3p1_egr_ppevar_t *e, uint8 *b, int bsz);
typedef struct soc_sbx_g3p1_ing_ppevar_s
{
    uint32 mim_transit;
    uint32 lsm;
    uint32 numlbls;
    uint32 dcn;
    uint32 oamen;
    uint32 loopback;
    uint32 lm_enable;
    uint32 dm_enable;
    uint32 vrrp;
    uint32 mpls_ttl_expiry;
    uint32 mplstp_loop;
    uint32 pwe_ping;
    uint32 pwe_y1731;
    uint32 pwe_psc;
    uint32 bfd;
    uint32 gal;
    uint32 traffictype;
    uint32 l2cp;
    uint32 l2cpslow;
    uint32 pim;
    uint32 igmp;
    uint32 oamloop;
} soc_sbx_g3p1_ing_ppevar_t;
extern int soc_sbx_g3p1_ing_ppevar_pack(int unit, soc_sbx_g3p1_ing_ppevar_t *e, uint8 *b, int bsz);
extern int soc_sbx_g3p1_ing_ppevar_unpack(int unit, soc_sbx_g3p1_ing_ppevar_t *e, uint8 *b, int bsz);
extern int soc_sbx_g3p1_egr_ppevar_check(int unit, soc_sbx_g3p1_egr_ppevar_t *e);
extern int soc_sbx_g3p1_ing_ppevar_check(int unit, soc_sbx_g3p1_ing_ppevar_t *e);

#endif
#endif
