/*
 * $Id: $
 * 
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCMX_MPLS_H__
#define __BCMX_MPLS_H__

#if defined(INCLUDE_L3)

#include <bcm/types.h>
#include <bcmx/bcmx.h>
#include <bcmx/lplist.h>
#include <bcmx/l3.h>
#include <bcm/mpls.h>

/* MPLS VPN Config Structure */
typedef bcm_mpls_vpn_config_t bcmx_mpls_vpn_config_t;

/* MPLS Port Structure */
typedef bcm_mpls_port_t bcmx_mpls_port_t;

/* MPLS Egress Label Structure */
typedef bcm_mpls_egress_label_t bcmx_mpls_egress_label_t;

/* MPLS Tunnel Switch Structure */
typedef bcm_mpls_tunnel_switch_t bcmx_mpls_tunnel_switch_t;

/* Initialize the MPLS VPN config structure. */
extern void bcmx_mpls_vpn_config_t_init(
    bcmx_mpls_vpn_config_t *info);

/* Initialize the MPLS port structure. */
extern void bcmx_mpls_port_t_init(
    bcmx_mpls_port_t *mpls_port);

/* Initialize the MPLS egress label structure. */
extern void bcmx_mpls_egress_label_t_init(
    bcmx_mpls_egress_label_t *label);

/* Initialize the MPLS tunnel switch structure. */
extern void bcmx_mpls_tunnel_switch_t_init(
    bcmx_mpls_tunnel_switch_t *info);

/* Initialize the MPLS subsystem. */
extern int bcmx_mpls_init(void);

/* Detach the MPLS software module. */
extern int bcmx_mpls_cleanup(void);

extern int bcmx_mpls_vpn_id_create(
    bcmx_mpls_vpn_config_t *info);

extern int bcmx_mpls_vpn_id_destroy(
    bcm_vpn_t vpn);

extern int bcmx_mpls_vpn_id_destroy_all(void);

extern int bcmx_mpls_vpn_id_get(
    bcm_vpn_t vpn, 
    bcmx_mpls_vpn_config_t *info);

/* Add a MPLS logical port to the specified VPN */
extern int bcmx_mpls_port_add(
    bcm_vpn_t vpn, 
    bcmx_mpls_port_t *mpls_port);

/* Delete the given MPLS logical port from the specified VPN */
extern int bcmx_mpls_port_delete(
    bcm_vpn_t vpn, 
    bcm_gport_t mpls_port_id);

extern int bcmx_mpls_port_delete_all(
    bcm_vpn_t vpn);

extern int bcmx_mpls_port_get(
    bcm_vpn_t vpn, 
    bcmx_mpls_port_t *mpls_port);

extern int bcmx_mpls_port_get_all(
    bcm_vpn_t vpn, 
    int port_max, 
    bcmx_mpls_port_t *port_array, 
    int *port_count);

extern int bcmx_mpls_tunnel_initiator_set(
    bcm_if_t intf, 
    int num_labels, 
    bcmx_mpls_egress_label_t *label_array);

extern int bcmx_mpls_tunnel_initiator_clear(
    bcm_if_t intf);

extern int bcmx_mpls_tunnel_initiator_clear_all(void);

extern int bcmx_mpls_tunnel_initiator_get(
    bcm_if_t intf, 
    int label_max, 
    bcmx_mpls_egress_label_t *label_array, 
    int *label_count);

extern int bcmx_mpls_tunnel_switch_add(
    bcmx_mpls_tunnel_switch_t *info);

extern int bcmx_mpls_tunnel_switch_delete(
    bcmx_mpls_tunnel_switch_t *info);

extern int bcmx_mpls_tunnel_switch_delete_all(void);

extern int bcmx_mpls_tunnel_switch_get(
    bcmx_mpls_tunnel_switch_t *info);

/* Create an MPLS EXP map instance. */
extern int bcmx_mpls_exp_map_create(
    uint32 flags, 
    int *exp_map_id);

/* Destroy an MPLS EXP map instance. */
extern int bcmx_mpls_exp_map_destroy(
    int exp_map_id);

/* 
 * Set the { internal priority, color }-to-EXP mapping in the specified
 * EXP map.
 */
extern int bcmx_mpls_exp_map_set(
    int exp_map_id, 
    bcm_mpls_exp_map_t *exp_map);

/* 
 * Get the { internal priority, color }-to-EXP mapping in the specified
 * EXP map.
 */
extern int bcmx_mpls_exp_map_get(
    int exp_map_id, 
    bcm_mpls_exp_map_t *exp_map);

extern int bcmx_mpls_label_stat_get(
    bcm_mpls_label_t label, 
    bcm_gport_t port, 
    bcm_mpls_stat_t stat, 
    uint64 *val);

extern int bcmx_mpls_label_stat_get32(
    bcm_mpls_label_t label, 
    bcm_gport_t port, 
    bcm_mpls_stat_t stat, 
    uint32 *val);

extern int bcmx_mpls_label_stat_clear(
    bcm_mpls_label_t label, 
    bcm_gport_t port, 
    bcm_mpls_stat_t stat);

#endif /* defined(INCLUDE_L3) */

#endif /* __BCMX_MPLS_H__ */
